<rss version="2.0">
  <channel>
    <title>GitHub All Languages Daily Trending</title>
    <description>Daily Trending of All Languages in GitHub</description>
    <pubDate>Sat, 13 Sep 2025 01:30:21 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>Physical-Intelligence/openpi</title>
      <link>https://github.com/Physical-Intelligence/openpi</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openpi&lt;/h1&gt; 
&lt;p&gt;openpi holds open-source models and packages for robotics, published by the &lt;a href="https://www.physicalintelligence.company/"&gt;Physical Intelligence team&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Currently, this repo contains three types of models:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the &lt;a href="https://www.physicalintelligence.company/blog/pi0"&gt;π₀ model&lt;/a&gt;, a flow-based vision-language-action model (VLA).&lt;/li&gt; 
 &lt;li&gt;the &lt;a href="https://www.physicalintelligence.company/research/fast"&gt;π₀-FAST model&lt;/a&gt;, an autoregressive VLA, based on the FAST action tokenizer.&lt;/li&gt; 
 &lt;li&gt;the &lt;a href="https://www.physicalintelligence.company/blog/pi05"&gt;π₀.₅ model&lt;/a&gt;, an upgraded version of π₀ with better open-world generalization trained with &lt;a href="https://www.physicalintelligence.company/research/knowledge_insulation"&gt;knowledge insulation&lt;/a&gt;. Note that, in this repository, we currently only support the flow matching head for both $\pi_{0.5}$ training and inference.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For all models, we provide &lt;em&gt;base model&lt;/em&gt; checkpoints, pre-trained on 10k+ hours of robot data, and examples for using them out of the box or fine-tuning them to your own datasets.&lt;/p&gt; 
&lt;p&gt;This is an experiment: $\pi_0$ was developed for our own robots, which differ from the widely used platforms such as &lt;a href="https://tonyzhaozh.github.io/aloha/"&gt;ALOHA&lt;/a&gt; and &lt;a href="https://droid-dataset.github.io/"&gt;DROID&lt;/a&gt;, and though we are optimistic that researchers and practitioners will be able to run creative new experiments adapting $\pi_0$ to their own platforms, we do not expect every such attempt to be successful. All this is to say: $\pi_0$ may or may not work for you, but you are welcome to try it and see!&lt;/p&gt; 
&lt;h2&gt;Updates&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;[Sept 2025] We released PyTorch support in openpi.&lt;/li&gt; 
 &lt;li&gt;[Sept 2025] We released pi05, an upgraded version of pi0 with better open-world generalization.&lt;/li&gt; 
 &lt;li&gt;[Sept 2025]: We have added an &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/droid/README_train.md#data-filtering"&gt;improved idle filter&lt;/a&gt; for DROID training.&lt;/li&gt; 
 &lt;li&gt;[Jun 2025]: We have added &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/droid/README_train.md"&gt;instructions&lt;/a&gt; for using &lt;code&gt;openpi&lt;/code&gt; to train VLAs on the full &lt;a href="https://droid-dataset.github.io/"&gt;DROID dataset&lt;/a&gt;. This is an approximate open-source implementation of the training pipeline used to train pi0-FAST-DROID.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;To run the models in this repository, you will need an NVIDIA GPU with at least the following specifications. These estimations assume a single GPU, but you can also use multiple GPUs with model parallelism to reduce per-GPU memory requirements by configuring &lt;code&gt;fsdp_devices&lt;/code&gt; in the training config. Please also note that the current training script does not yet support multi-node training.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Mode&lt;/th&gt; 
   &lt;th&gt;Memory Required&lt;/th&gt; 
   &lt;th&gt;Example GPU&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Inference&lt;/td&gt; 
   &lt;td&gt;&amp;gt; 8 GB&lt;/td&gt; 
   &lt;td&gt;RTX 4090&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fine-Tuning (LoRA)&lt;/td&gt; 
   &lt;td&gt;&amp;gt; 22.5 GB&lt;/td&gt; 
   &lt;td&gt;RTX 4090&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fine-Tuning (Full)&lt;/td&gt; 
   &lt;td&gt;&amp;gt; 70 GB&lt;/td&gt; 
   &lt;td&gt;A100 (80GB) / H100&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The repo has been tested with Ubuntu 22.04, we do not currently support other operating systems.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;When cloning this repo, make sure to update submodules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone --recurse-submodules git@github.com:Physical-Intelligence/openpi.git

# Or if you already cloned the repo:
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We use &lt;a href="https://docs.astral.sh/uv/"&gt;uv&lt;/a&gt; to manage Python dependencies. See the &lt;a href="https://docs.astral.sh/uv/getting-started/installation/"&gt;uv installation instructions&lt;/a&gt; to set it up. Once uv is installed, run the following to set up the environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;GIT_LFS_SKIP_SMUDGE=1 uv sync
GIT_LFS_SKIP_SMUDGE=1 uv pip install -e .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NOTE: &lt;code&gt;GIT_LFS_SKIP_SMUDGE=1&lt;/code&gt; is needed to pull LeRobot as a dependency.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;: As an alternative to uv installation, we provide instructions for installing openpi using Docker. If you encounter issues with your system setup, consider using Docker to simplify installation. See &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/docs/docker.md"&gt;Docker Setup&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Model Checkpoints&lt;/h2&gt; 
&lt;h3&gt;Base Models&lt;/h3&gt; 
&lt;p&gt;We provide multiple base VLA model checkpoints. These checkpoints have been pre-trained on 10k+ hours of robot data, and can be used for fine-tuning.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Model&lt;/th&gt; 
   &lt;th&gt;Use Case&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Checkpoint Path&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_0$&lt;/td&gt; 
   &lt;td&gt;Fine-Tuning&lt;/td&gt; 
   &lt;td&gt;Base &lt;a href="https://www.physicalintelligence.company/blog/pi0"&gt;π₀ model&lt;/a&gt; for fine-tuning&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi0_base&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_0$-FAST&lt;/td&gt; 
   &lt;td&gt;Fine-Tuning&lt;/td&gt; 
   &lt;td&gt;Base autoregressive &lt;a href="https://www.physicalintelligence.company/research/fast"&gt;π₀-FAST model&lt;/a&gt; for fine-tuning&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi0_fast_base&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_{0.5}$&lt;/td&gt; 
   &lt;td&gt;Fine-Tuning&lt;/td&gt; 
   &lt;td&gt;Base &lt;a href="https://www.physicalintelligence.company/blog/pi05"&gt;π₀.₅ model&lt;/a&gt; for fine-tuning&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi05_base&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Fine-Tuned Models&lt;/h3&gt; 
&lt;p&gt;We also provide "expert" checkpoints for various robot platforms and tasks. These models are fine-tuned from the base models above and intended to run directly on the target robot. These may or may not work on your particular robot. Since these checkpoints were fine-tuned on relatively small datasets collected with more widely available robots, such as ALOHA and the DROID Franka setup, they might not generalize to your particular setup, though we found some of these, especially the DROID checkpoint, to generalize quite broadly in practice.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Model&lt;/th&gt; 
   &lt;th&gt;Use Case&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Checkpoint Path&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_0$-FAST-DROID&lt;/td&gt; 
   &lt;td&gt;Inference&lt;/td&gt; 
   &lt;td&gt;$\pi_0$-FAST model fine-tuned on the &lt;a href="https://droid-dataset.github.io/"&gt;DROID dataset&lt;/a&gt;: can perform a wide range of simple table-top manipulation tasks 0-shot in new scenes on the DROID robot platform&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi0_fast_droid&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_0$-DROID&lt;/td&gt; 
   &lt;td&gt;Fine-Tuning&lt;/td&gt; 
   &lt;td&gt;$\pi_0$ model fine-tuned on the &lt;a href="https://droid-dataset.github.io/"&gt;DROID dataset&lt;/a&gt;: faster inference than $\pi_0$-FAST-DROID, but may not follow language commands as well&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi0_droid&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_0$-ALOHA-towel&lt;/td&gt; 
   &lt;td&gt;Inference&lt;/td&gt; 
   &lt;td&gt;$\pi_0$ model fine-tuned on internal &lt;a href="https://tonyzhaozh.github.io/aloha/"&gt;ALOHA&lt;/a&gt; data: can fold diverse towels 0-shot on ALOHA robot platforms&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi0_aloha_towel&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_0$-ALOHA-tupperware&lt;/td&gt; 
   &lt;td&gt;Inference&lt;/td&gt; 
   &lt;td&gt;$\pi_0$ model fine-tuned on internal &lt;a href="https://tonyzhaozh.github.io/aloha/"&gt;ALOHA&lt;/a&gt; data: can unpack food from a tupperware container&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi0_aloha_tupperware&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_0$-ALOHA-pen-uncap&lt;/td&gt; 
   &lt;td&gt;Inference&lt;/td&gt; 
   &lt;td&gt;$\pi_0$ model fine-tuned on public &lt;a href="https://dit-policy.github.io/"&gt;ALOHA&lt;/a&gt; data: can uncap a pen&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi0_aloha_pen_uncap&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_{0.5}$-LIBERO&lt;/td&gt; 
   &lt;td&gt;Inference&lt;/td&gt; 
   &lt;td&gt;$\pi_{0.5}$ model fine-tuned for the &lt;a href="https://libero-project.github.io/datasets"&gt;LIBERO&lt;/a&gt; benchmark: gets state-of-the-art performance (see &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/libero/README.md"&gt;LIBERO README&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi05_libero&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;$\pi_{0.5}$-DROID&lt;/td&gt; 
   &lt;td&gt;Inference / Fine-Tuning&lt;/td&gt; 
   &lt;td&gt;$\pi_{0.5}$ model fine-tuned on the &lt;a href="https://droid-dataset.github.io/"&gt;DROID dataset&lt;/a&gt; with &lt;a href="https://www.physicalintelligence.company/research/knowledge_insulation"&gt;knowledge insulation&lt;/a&gt;: fast inference and good language-following&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;gs://openpi-assets/checkpoints/pi05_droid&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;By default, checkpoints are automatically downloaded from &lt;code&gt;gs://openpi-assets&lt;/code&gt; and are cached in &lt;code&gt;~/.cache/openpi&lt;/code&gt; when needed. You can overwrite the download path by setting the &lt;code&gt;OPENPI_DATA_HOME&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h2&gt;Running Inference for a Pre-Trained Model&lt;/h2&gt; 
&lt;p&gt;Our pre-trained model checkpoints can be run with a few lines of code (here our $\pi_0$-FAST-DROID model):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from openpi.training import config as _config
from openpi.policies import policy_config
from openpi.shared import download

config = _config.get_config("pi05_droid")
checkpoint_dir = download.maybe_download("gs://openpi-assets/checkpoints/pi05_droid")

# Create a trained policy.
policy = policy_config.create_trained_policy(config, checkpoint_dir)

# Run inference on a dummy example.
example = {
    "observation/exterior_image_1_left": ...,
    "observation/wrist_image_left": ...,
    ...
    "prompt": "pick up the fork"
}
action_chunk = policy.infer(example)["actions"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also test this out in the &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/inference.ipynb"&gt;example notebook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We provide detailed step-by-step examples for running inference of our pre-trained checkpoints on &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/droid/README.md"&gt;DROID&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/aloha_real/README.md"&gt;ALOHA&lt;/a&gt; robots.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remote Inference&lt;/strong&gt;: We provide &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/docs/remote_inference.md"&gt;examples and code&lt;/a&gt; for running inference of our models &lt;strong&gt;remotely&lt;/strong&gt;: the model can run on a different server and stream actions to the robot via a websocket connection. This makes it easy to use more powerful GPUs off-robot and keep robot and policy environments separate.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Test inference without a robot&lt;/strong&gt;: We provide a &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/simple_client/README.md"&gt;script&lt;/a&gt; for testing inference without a robot. This script will generate a random observation and run inference with the model. See &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/simple_client/README.md"&gt;here&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Fine-Tuning Base Models on Your Own Data&lt;/h2&gt; 
&lt;p&gt;We will fine-tune the $\pi_{0.5}$ model on the &lt;a href="https://libero-project.github.io/datasets"&gt;LIBERO dataset&lt;/a&gt; as a running example for how to fine-tune a base model on your own data. We will explain three steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Convert your data to a LeRobot dataset (which we use for training)&lt;/li&gt; 
 &lt;li&gt;Defining training configs and running training&lt;/li&gt; 
 &lt;li&gt;Spinning up a policy server and running inference&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;1. Convert your data to a LeRobot dataset&lt;/h3&gt; 
&lt;p&gt;We provide a minimal example script for converting LIBERO data to a LeRobot dataset in &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/libero/convert_libero_data_to_lerobot.py"&gt;&lt;code&gt;examples/libero/convert_libero_data_to_lerobot.py&lt;/code&gt;&lt;/a&gt;. You can easily modify it to convert your own data! You can download the raw LIBERO dataset from &lt;a href="https://huggingface.co/datasets/openvla/modified_libero_rlds"&gt;here&lt;/a&gt;, and run the script with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv run examples/libero/convert_libero_data_to_lerobot.py --data_dir /path/to/your/libero/data
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you just want to fine-tune on LIBERO, you can skip this step, because our LIBERO fine-tuning configs point to a pre-converted LIBERO dataset. This step is merely an example that you can adapt to your own data.&lt;/p&gt; 
&lt;h3&gt;2. Defining training configs and running training&lt;/h3&gt; 
&lt;p&gt;To fine-tune a base model on your own data, you need to define configs for data processing and training. We provide example configs with detailed comments for LIBERO below, which you can modify for your own dataset:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/src/openpi/policies/libero_policy.py"&gt;&lt;code&gt;LiberoInputs&lt;/code&gt; and &lt;code&gt;LiberoOutputs&lt;/code&gt;&lt;/a&gt;: Defines the data mapping from the LIBERO environment to the model and vice versa. Will be used for both, training and inference.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/src/openpi/training/config.py"&gt;&lt;code&gt;LeRobotLiberoDataConfig&lt;/code&gt;&lt;/a&gt;: Defines how to process raw LIBERO data from LeRobot dataset for training.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/src/openpi/training/config.py"&gt;&lt;code&gt;TrainConfig&lt;/code&gt;&lt;/a&gt;: Defines fine-tuning hyperparameters, data config, and weight loader.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We provide example fine-tuning configs for &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/src/openpi/training/config.py"&gt;π₀&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/src/openpi/training/config.py"&gt;π₀-FAST&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/src/openpi/training/config.py"&gt;π₀.₅&lt;/a&gt; on LIBERO data.&lt;/p&gt; 
&lt;p&gt;Before we can run training, we need to compute the normalization statistics for the training data. Run the script below with the name of your training config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv run scripts/compute_norm_stats.py --config-name pi05_libero
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we can kick off training with the following command (the &lt;code&gt;--overwrite&lt;/code&gt; flag is used to overwrite existing checkpoints if you rerun fine-tuning with the same config):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;XLA_PYTHON_CLIENT_MEM_FRACTION=0.9 uv run scripts/train.py pi05_libero --exp-name=my_experiment --overwrite
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will log training progress to the console and save checkpoints to the &lt;code&gt;checkpoints&lt;/code&gt; directory. You can also monitor training progress on the Weights &amp;amp; Biases dashboard. For maximally using the GPU memory, set &lt;code&gt;XLA_PYTHON_CLIENT_MEM_FRACTION=0.9&lt;/code&gt; before running training -- this enables JAX to use up to 90% of the GPU memory (vs. the default of 75%).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We provide functionality for &lt;em&gt;reloading&lt;/em&gt; normalization statistics for state / action normalization from pre-training. This can be beneficial if you are fine-tuning to a new task on a robot that was part of our pre-training mixture. For more details on how to reload normalization statistics, see the &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/docs/norm_stats.md"&gt;norm_stats.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;h3&gt;3. Spinning up a policy server and running inference&lt;/h3&gt; 
&lt;p&gt;Once training is complete, we can run inference by spinning up a policy server and then querying it from a LIBERO evaluation script. Launching a model server is easy (we use the checkpoint for iteration 20,000 for this example, modify as needed):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv run scripts/serve_policy.py policy:checkpoint --policy.config=pi05_libero --policy.dir=checkpoints/pi05_libero/my_experiment/20000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will spin up a server that listens on port 8000 and waits for observations to be sent to it. We can then run an evaluation script (or robot runtime) that queries the server.&lt;/p&gt; 
&lt;p&gt;For running the LIBERO eval in particular, we provide (and recommend using) a Dockerized workflow that handles both the policy server and the evaluation script together. See the &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/libero/README.md"&gt;LIBERO README&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;If you want to embed a policy server call in your own robot runtime, we have a minimal example of how to do so in the &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/docs/remote_inference.md"&gt;remote inference docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;More Examples&lt;/h3&gt; 
&lt;p&gt;We provide more examples for how to fine-tune and run inference with our models on the ALOHA platform in the following READMEs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/aloha_sim"&gt;ALOHA Simulator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/aloha_real"&gt;ALOHA Real&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/examples/ur5"&gt;UR5&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;PyTorch Support&lt;/h2&gt; 
&lt;p&gt;openpi now provides PyTorch implementations of π₀ and π₀.₅ models alongside the original JAX versions! The PyTorch implementation has been validated on the LIBERO benchmark (both inference and finetuning). A few features are currently not supported (this may change in the future):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The π₀-FAST model&lt;/li&gt; 
 &lt;li&gt;Mixed precision training&lt;/li&gt; 
 &lt;li&gt;FSDP (fully-sharded data parallelism) training&lt;/li&gt; 
 &lt;li&gt;LoRA (low-rank adaptation) training&lt;/li&gt; 
 &lt;li&gt;EMA (exponential moving average) weights during training&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Make sure that you have the latest version of all dependencies installed: &lt;code&gt;uv sync&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Double check that you have transformers 4.53.2 installed: &lt;code&gt;uv pip show transformers&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Apply the transformers library patches:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;cp -r ./src/openpi/models_pytorch/transformers_replace/* .venv/lib/python3.11/site-packages/transformers/
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This overwrites several files in the transformers library with necessary model changes: 1) supporting AdaRMS, 2) correctly controlling the precision of activations, and 3) allowing the KV cache to be used without being updated.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: With the default uv link mode (hardlink), this will permanently affect the transformers library in your uv cache, meaning the changes will survive reinstallations of transformers and could even propagate to other projects that use transformers. To fully undo this operation, you must run &lt;code&gt;uv cache clean transformers&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Converting JAX Models to PyTorch&lt;/h3&gt; 
&lt;p&gt;To convert a JAX model checkpoint to PyTorch format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv run examples/convert_jax_model_to_pytorch.py \
    --checkpoint_dir /path/to/jax/checkpoint \
    --config_name &amp;lt;config name&amp;gt; \
    --output_path /path/to/converted/pytorch/checkpoint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Running Inference with PyTorch&lt;/h3&gt; 
&lt;p&gt;The PyTorch implementation uses the same API as the JAX version - you only need to change the checkpoint path to point to the converted PyTorch model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from openpi.training import config as _config
from openpi.policies import policy_config
from openpi.shared import download

config = _config.get_config("pi05_droid")
checkpoint_dir = "/path/to/converted/pytorch/checkpoint"

# Create a trained policy (automatically detects PyTorch format)
policy = policy_config.create_trained_policy(config, checkpoint_dir)

# Run inference (same API as JAX)
action_chunk = policy.infer(example)["actions"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Policy Server with PyTorch&lt;/h3&gt; 
&lt;p&gt;The policy server works identically with PyTorch models - just point to the converted checkpoint directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv run scripts/serve_policy.py policy:checkpoint \
    --policy.config=pi05_droid \
    --policy.dir=/path/to/converted/pytorch/checkpoint
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Finetuning with PyTorch&lt;/h3&gt; 
&lt;p&gt;To finetune a model in PyTorch:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Convert the JAX base model to PyTorch format:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;uv run examples/convert_jax_model_to_pytorch.py \
    --config_name &amp;lt;config name&amp;gt; \
    --checkpoint_dir /path/to/jax/base/model \
    --output_path /path/to/pytorch/base/model
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Specify the converted PyTorch model path in your config using &lt;code&gt;pytorch_weight_path&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Launch training using one of these modes:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Single GPU training:
uv run scripts/train_pytorch.py &amp;lt;config_name&amp;gt; --exp_name &amp;lt;run_name&amp;gt; --save_interval &amp;lt;interval&amp;gt;

# Example:
uv run scripts/train_pytorch.py debug --exp_name pytorch_test
uv run scripts/train_pytorch.py debug --exp_name pytorch_test --resume  # Resume from latest checkpoint

# Multi-GPU training (single node):
uv run torchrun --standalone --nnodes=1 --nproc_per_node=&amp;lt;num_gpus&amp;gt; scripts/train_pytorch.py &amp;lt;config_name&amp;gt; --exp_name &amp;lt;run_name&amp;gt;

# Example:
uv run torchrun --standalone --nnodes=1 --nproc_per_node=2 scripts/train_pytorch.py pi0_aloha_sim --exp_name pytorch_ddp_test
uv run torchrun --standalone --nnodes=1 --nproc_per_node=2 scripts/train_pytorch.py pi0_aloha_sim --exp_name pytorch_ddp_test --resume

# Multi-Node Training:
uv run torchrun \
    --nnodes=&amp;lt;num_nodes&amp;gt; \
    --nproc_per_node=&amp;lt;gpus_per_node&amp;gt; \
    --node_rank=&amp;lt;rank_of_node&amp;gt; \
    --master_addr=&amp;lt;master_ip&amp;gt; \
    --master_port=&amp;lt;port&amp;gt; \
    scripts/train_pytorch.py &amp;lt;config_name&amp;gt; --exp_name=&amp;lt;run_name&amp;gt; --save_interval &amp;lt;interval&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Precision Settings&lt;/h3&gt; 
&lt;p&gt;JAX and PyTorch implementations handle precision as follows:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;JAX:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Inference: most weights and computations in bfloat16, with a few computations in float32 for stability&lt;/li&gt; 
 &lt;li&gt;Training: defaults to mixed precision: weights and gradients in float32, (most) activations and computations in bfloat16. You can change to full float32 training by setting &lt;code&gt;dtype&lt;/code&gt; to float32 in the config.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;PyTorch:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Inference: matches JAX -- most weights and computations in bfloat16, with a few weights converted to float32 for stability&lt;/li&gt; 
 &lt;li&gt;Training: supports either full bfloat16 (default) or full float32. You can change it by setting &lt;code&gt;pytorch_training_precision&lt;/code&gt; in the config. bfloat16 uses less memory but exhibits higher losses compared to float32. Mixed precision is not yet supported.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;With torch.compile, inference speed is comparable between JAX and PyTorch.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;We will collect common issues and their solutions here. If you encounter an issue, please check here first. If you can't find a solution, please file an issue on the repo (see &lt;a href="https://raw.githubusercontent.com/Physical-Intelligence/openpi/main/CONTRIBUTING.md"&gt;here&lt;/a&gt; for guidelines).&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Issue&lt;/th&gt; 
   &lt;th&gt;Resolution&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;uv sync&lt;/code&gt; fails with dependency conflicts&lt;/td&gt; 
   &lt;td&gt;Try removing the virtual environment directory (&lt;code&gt;rm -rf .venv&lt;/code&gt;) and running &lt;code&gt;uv sync&lt;/code&gt; again. If issues persist, check that you have the latest version of &lt;code&gt;uv&lt;/code&gt; installed (&lt;code&gt;uv self update&lt;/code&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Training runs out of GPU memory&lt;/td&gt; 
   &lt;td&gt;Make sure you set &lt;code&gt;XLA_PYTHON_CLIENT_MEM_FRACTION=0.9&lt;/code&gt; (or higher) before running training to allow JAX to use more GPU memory. You can also use &lt;code&gt;--fsdp-devices &amp;lt;n&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; is your number of GPUs, to enable &lt;a href="https://engineering.fb.com/2021/07/15/open-source/fsdp/"&gt;fully-sharded data parallelism&lt;/a&gt;, which reduces memory usage in exchange for slower training (the amount of slowdown depends on your particular setup). If you are still running out of memory, you may way to consider disabling EMA.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Policy server connection errors&lt;/td&gt; 
   &lt;td&gt;Check that the server is running and listening on the expected port. Verify network connectivity and firewall settings between client and server.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Missing norm stats error when training&lt;/td&gt; 
   &lt;td&gt;Run &lt;code&gt;scripts/compute_norm_stats.py&lt;/code&gt; with your config name before starting training.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dataset download fails&lt;/td&gt; 
   &lt;td&gt;Check your internet connection. For HuggingFace datasets, ensure you're logged in (&lt;code&gt;huggingface-cli login&lt;/code&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CUDA/GPU errors&lt;/td&gt; 
   &lt;td&gt;Verify NVIDIA drivers are installed correctly. For Docker, ensure nvidia-container-toolkit is installed. Check GPU compatibility. You do NOT need CUDA libraries installed at a system level --- they will be installed via uv. You may even want to try &lt;em&gt;uninstalling&lt;/em&gt; system CUDA libraries if you run into CUDA issues, since system libraries can sometimes cause conflicts.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Import errors when running examples&lt;/td&gt; 
   &lt;td&gt;Make sure you've installed all dependencies with &lt;code&gt;uv sync&lt;/code&gt;. Some examples may have additional requirements listed in their READMEs.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Action dimensions mismatch&lt;/td&gt; 
   &lt;td&gt;Verify your data processing transforms match the expected input/output dimensions of your robot. Check the action space definitions in your policy classes.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Diverging training loss&lt;/td&gt; 
   &lt;td&gt;Check the &lt;code&gt;q01&lt;/code&gt;, &lt;code&gt;q99&lt;/code&gt;, and &lt;code&gt;std&lt;/code&gt; values in &lt;code&gt;norm_stats.json&lt;/code&gt; for your dataset. Certain dimensions that are rarely used can end up with very small &lt;code&gt;q01&lt;/code&gt;, &lt;code&gt;q99&lt;/code&gt;, or &lt;code&gt;std&lt;/code&gt; values, leading to huge states and actions after normalization. You can manually adjust the norm stats as a workaround.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>epfml/ML_course</title>
      <link>https://github.com/epfml/ML_course</link>
      <description>&lt;p&gt;EPFL Machine Learning Course, Fall 2025&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EPFL Machine Learning Course CS-433&lt;/h1&gt; 
&lt;p&gt;Machine Learning Course, Fall 2025&lt;/p&gt; 
&lt;p&gt;The course website and syllabus is available here: &lt;a href="https://epfml.github.io/cs433-2025/"&gt;https://epfml.github.io/cs433-2025/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains all lecture notes, labs and projects - resources, code templates and solutions. Organizational information is available at the course website &lt;a href="https://epfml.github.io/cs433-2025/courseinfo/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Videos will be available after each lecture on &lt;a href="https://mediaspace.epfl.ch/channel/CS-433+Machine+learning/55647"&gt;the mediaspace channel&lt;/a&gt;, including also the previous year's 2024 and 2023 videos.&lt;/p&gt; 
&lt;p&gt;Contact us if you have any questions, via the &lt;a href="https://edstem.org/eu/courses/2577/discussion/"&gt;discussion forum&lt;/a&gt; (for EPFL students), or email to the assistants or teachers. Please create issues and pull requests here using the menu above.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sentient-agi/ROMA</title>
      <link>https://github.com/sentient-agi/ROMA</link>
      <description>&lt;p&gt;Recursive-Open-Meta-Agent v0.1 (Beta). A meta-agent framework to build high-performance multi-agent systems.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;div align="center"&gt; 
  &lt;img src="https://raw.githubusercontent.com/sentient-agi/ROMA/main/assets/sentient-logo.png" alt="alt text" width="60%" /&gt; 
 &lt;/div&gt; 
 &lt;h1&gt;ROMA: Recursive Open Meta-Agents&lt;/h1&gt; 
 &lt;p align="center"&gt; &lt;strong&gt;Building hierarchical high-performance multi-agent systems made easy! (Beta) &lt;/strong&gt; &lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://trendshift.io/repositories/14848" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/14848" alt="sentient-agi%2FROMA | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://sentient.xyz/" target="_blank" style="margin: 2px;"&gt; &lt;img alt="Homepage" src="https://img.shields.io/badge/Sentient-Homepage-%23EAEAEA?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIzNDEuMzMzIiBoZWlnaHQ9IjM0MS4zMzMiIHZlcnNpb249IjEuMCIgdmlld0JveD0iMCAwIDI1NiAyNTYiPjxwYXRoIGQ9Ik0xMzIuNSAyOC40Yy0xLjUgMi4yLTEuMiAzLjkgNC45IDI3LjIgMy41IDEzLjcgOC41IDMzIDExLjEgNDIuOSAyLjYgOS45IDUuMyAxOC42IDYgMTkuNCAzLjIgMy4zIDExLjctLjggMTMuMS02LjQuNS0xLjktMTcuMS03Mi0xOS43LTc4LjYtMS4yLTMtNy41LTYuOS0xMS4zLTYuOS0xLjYgMC0zLjEuOS00LjEgMi40ek0xMTAgMzBjLTEuMSAxLjEtMiAzLjEtMiA0LjVzLjkgMy40IDIgNC41IDMuMSAyIDQuNSAyIDMuNC0uOSA0LjUtMiAyLTMuMSAyLTQuNS0uOS0zLjQtMi00LjUtMy4xLTItNC41LTItMy40LjktNC41IDJ6TTgxLjUgNDYuMWMtMi4yIDEuMi00LjYgMi44LTUuMiAzLjctMS44IDIuMy0xLjYgNS42LjUgNy40IDEuMyAxLjIgMzIuMSAxMC4yIDQ1LjQgMTMuMyAzIC44IDYuOC0yLjIgNi44LTUuMyAwLTMuNi0yLjItOS4yLTMuOS0xMC4xQzEyMy41IDU0LjIgODcuMiA0NCA4NiA0NGMtLjMuMS0yLjMgMS00LjUgMi4xek0xNjUgNDZjLTEuMSAxLjEtMiAyLjUtMiAzLjIgMCAyLjggMTEuMyA0NC41IDEyLjYgNDYuNS45IDEuNSAyLjQgMi4zIDQuMiAyLjMgMy44IDAgOS4yLTUuNiA5LjItOS40IDAtMS41LTIuMS0xMC45LTQuNy0yMC44bC00LjctMTguMS00LjUtMi44Yy01LjMtMy40LTcuNC0zLjYtMTAuMS0uOXpNNDguNyA2NS4xYy03LjcgNC4xLTYuOSAxMC43IDEuNSAxMyAyLjQuNiAyMS40IDUuOCA0Mi4yIDExLjYgMjIuOCA2LjIgMzguOSAxMC4yIDQwLjMgOS44IDMuNS0uOCA0LjYtMy44IDMuMi04LjgtMS41LTUuNy0yLjMtNi41LTguMy04LjJDOTQuMiA3My4xIDU2LjYgNjMgNTQuOCA2M2MtMS4zLjEtNCAxLTYuMSAyLjF6TTE5OC4yIDY0LjdjLTMuMSAyLjgtMy41IDUuNi0xLjEgOC42IDQgNS4xIDEwLjkgMi41IDEwLjktNC4xIDAtNS4zLTUuOC03LjktOS44LTQuNXpNMTgxLjggMTEzLjFjLTI3IDI2LjQtMzEuOCAzMS41LTMxLjggMzMuOSAwIDEuNi43IDMuNSAxLjUgNC40IDEuNyAxLjcgNy4xIDMgMTAuMiAyLjQgMi4xLS4zIDU2LjktNTMuNCA1OS01Ny4xIDEuNy0zLjEgMS42LTkuOC0uMy0xMi41LTMuNi01LjEtNC45LTQuMi0zOC42IDI4Ljl6TTM2LjYgODguMWMtNSA0LTIuNCAxMC45IDQuMiAxMC45IDMuMyAwIDYuMi0yLjkgNi4yLTYuMyAwLTIuMS00LjMtNi43LTYuMy02LjctLjggMC0yLjYuOS00LjEgMi4xek02My40IDk0LjVjLTEuNi43LTguOSA3LjMtMTYuMSAxNC43TDM0IDEyMi43djUuNmMwIDYuMyAxLjYgOC43IDUuOSA4LjcgMi4xIDAgNi0zLjQgMTkuOS0xNy4zIDkuNS05LjUgMTcuMi0xOCAxNy4yLTE4LjkgMC00LjctOC40LTguNi0xMy42LTYuM3pNNjIuOSAxMzAuNiAzNCAxNTkuNXY1LjZjMCA2LjIgMS44IDguOSA2IDguOSAzLjIgMCA2Ni02Mi40IDY2LTY1LjYgMC0zLjMtMy41LTUuNi05LjEtNi4ybC01LS41LTI5IDI4Ljl6TTE5Ni4zIDEzNS4yYy05IDktMTYuNiAxNy4zLTE2LjkgMTguNS0xLjMgNS4xIDIuNiA4LjMgMTAgOC4zIDIuOCAwIDUuMi0yIDE3LjktMTQuOCAxNC41LTE0LjcgMTQuNy0xNC45IDE0LjctMTkuMyAwLTUuOC0yLjItOC45LTYuMi04LjktMi42IDAtNS40IDIuMy0xOS41IDE2LjJ6TTk2IDEzNi44Yy0yLjkuOS04IDYuNi04IDkgMCAxLjMgMi45IDEzLjQgNi40IDI3IDMuNiAxMy42IDcuOSAzMC4zIDkuNyAzNy4yIDEuNyA2LjkgMy42IDEzLjMgNC4xIDE0LjIuNSAxIDIuNiAyLjcgNC44IDMuOCA2LjggMy41IDExIDIuMyAxMS0zLjIgMC0zLTIwLjYtODMuMS0yMi4xLTg1LjktLjktMS45LTMuNi0yLjgtNS45LTIuMXpNMTIwLjUgMTU4LjRjLTEuOSAyLjktMS4yIDguNSAxLjQgMTEuNiAxLjEgMS40IDEyLjEgNC45IDM5LjYgMTIuNSAyMC45IDUuOCAzOC44IDEwLjUgMzkuOCAxMC41czMuNi0xIDUuNy0yLjJjOC4xLTQuNyA3LjEtMTAuNi0yLjMtMTMuMi0yOC4yLTguMS03OC41LTIxLjYtODAuMy0yMS42LTEuNCAwLTMgMS0zLjkgMi40ek0yMTAuNyAxNTguOGMtMS44IDEuOS0yLjIgNS45LS45IDcuOCAxLjUgMi4zIDUgMy40IDcuNiAyLjQgNi40LTIuNCA1LjMtMTEuMi0xLjUtMTEuOC0yLjQtLjItNCAuMy01LjIgMS42ek02OS42IDE2MmMtMiAyLjItMy42IDQuMy0zLjYgNC44LjEgMi42IDEwLjEgMzguNiAxMS4xIDM5LjkgMi4yIDIuNiA5IDUuNSAxMS41IDQuOSA1LTEuMyA0LjktMy0xLjUtMjcuNy0zLjMtMTIuNy02LjUtMjMuNy03LjItMjQuNS0yLjItMi43LTYuNC0xLjctMTAuMyAyLjZ6TTQ5LjYgMTgxLjVjLTIuNCAyLjUtMi45IDUuNC0xLjIgOEM1MiAxOTUgNjAgMTkzIDYwIDE4Ni42YzAtMS45LS44LTQtMS44LTQuOS0yLjMtMi4xLTYuNi0yLjItOC42LS4yek0xMjguNSAxODdjLTIuMyAyLjUtMS4zIDEwLjMgMS42IDEyLjggMi4yIDEuOSAzNC44IDExLjIgMzkuNCAxMS4yIDMuNiAwIDEwLjEtNC4xIDExLTcgLjYtMS45LTEuNy03LTMuMS03LS4yIDAtMTAuMy0yLjctMjIuMy02cy0yMi41LTYtMjMuMy02Yy0uOCAwLTIuMy45LTMuMyAyek0xMzYuNyAyMTYuOGMtMy40IDMuOC0xLjUgOS41IDMuNSAxMC43IDMuOSAxIDguMy0zLjQgNy4zLTcuMy0xLjItNS4xLTcuNS03LjEtMTAuOC0zLjR6Ii8%2BPC9zdmc%2B&amp;amp;link=https%3A%2F%2Fhuggingface.co%2FSentientagi" style="display: inline-block; vertical-align: middle;" /&gt; &lt;/a&gt; &lt;a href="https://github.com/sentient-agi" target="_blank" style="margin: 2px;"&gt; &lt;img alt="GitHub" src="https://img.shields.io/badge/Github-sentient_agi-181717?logo=github" style="display: inline-block; vertical-align: middle;" /&gt; &lt;/a&gt; &lt;a href="https://huggingface.co/Sentientagi" target="_blank" style="margin: 2px;"&gt; &lt;img alt="Hugging Face" src="https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-SentientAGI-ffc107?color=ffc107&amp;amp;logoColor=white" style="display: inline-block; vertical-align: middle;" /&gt; &lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;div align="center" style="line-height: 1;"&gt; 
 &lt;a href="https://discord.gg/sentientfoundation" target="_blank" style="margin: 2px;"&gt; &lt;img alt="Discord" src="https://img.shields.io/badge/Discord-SentientAGI-7289da?logo=discord&amp;amp;logoColor=white&amp;amp;color=7289da" style="display: inline-block; vertical-align: middle;" /&gt; &lt;/a&gt; 
 &lt;a href="https://x.com/SentientAGI" target="_blank" style="margin: 2px;"&gt; &lt;img alt="Twitter Follow" src="https://img.shields.io/badge/-SentientAGI-grey?logo=x&amp;amp;link=https%3A%2F%2Fx.com%2FSentientAGI%2F" style="display: inline-block; vertical-align: middle;" /&gt; &lt;/a&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://www.sentient.xyz/blog/recursive-open-meta-agent"&gt;Technical Blog&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/"&gt;Paper (Coming soon)&lt;/a&gt; • &lt;a href="https://www.sentient.xyz/"&gt;Build Agents for $$$&lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt;  
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/INTRODUCTION.md"&gt;🚀 Introduction&lt;/a&gt;&lt;/strong&gt; - Understand the vision and architecture behind ROMA&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/SETUP.md"&gt;📦 Setup&lt;/a&gt;&lt;/strong&gt; - Detailed configuration options and environment setup&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/AGENTS_GUIDE.md"&gt;🤖 Agents Guide&lt;/a&gt;&lt;/strong&gt; - Learn how to create and customize your own agents&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/CONFIGURATION.md"&gt;⚙️ Configuration&lt;/a&gt;&lt;/strong&gt; - Detailed configuration options and environment setup&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/ROADMAP.md"&gt;🗺️ Roadmap&lt;/a&gt;&lt;/strong&gt; - See what's coming next for ROMA&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎯 What is ROMA?&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/sentient-agi/ROMA/main/assets/roma_run.gif" alt="alt text" width="80%" /&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;strong&gt;ROMA&lt;/strong&gt; is a &lt;strong&gt;meta-agent framework&lt;/strong&gt; that uses recursive hierarchical structures to solve complex problems. By breaking down tasks into parallelizable components, ROMA enables agents to tackle sophisticated reasoning challenges while maintaining transparency that makes context-engineering and iteration straightforward. The framework offers &lt;strong&gt;parallel problem solving&lt;/strong&gt; where agents work simultaneously on different parts of complex tasks, &lt;strong&gt;transparent development&lt;/strong&gt; with a clear structure for easy debugging, and &lt;strong&gt;proven performance&lt;/strong&gt; demonstrated through our search agent's strong benchmark results. We've shown the framework's effectiveness, but this is just the beginning. As an &lt;strong&gt;open-source and extensible&lt;/strong&gt; platform, ROMA is designed for community-driven development, allowing you to build and customize agents for your specific needs while benefiting from the collective improvements of the community.&lt;/p&gt; 
&lt;h2&gt;🏗️ How It Works&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;ROMA&lt;/strong&gt; framework processes tasks through a recursive &lt;strong&gt;plan–execute loop&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;def solve(task):
    if is_atomic(task):                 # Step 1: Atomizer
        return execute(task)            # Step 2: Executor
    else:
        subtasks = plan(task)           # Step 2: Planner
        results = []
        for subtask in subtasks:
            results.append(solve(subtask))  # Recursive call
        return aggregate(results)       # Step 3: Aggregator

# Entry point:
answer = solve(initial_request)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Atomizer&lt;/strong&gt; – Decides whether a request is &lt;strong&gt;atomic&lt;/strong&gt; (directly executable) or requires &lt;strong&gt;planning&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Planner&lt;/strong&gt; – If planning is needed, the task is broken into smaller &lt;strong&gt;subtasks&lt;/strong&gt;. Each subtask is fed back into the &lt;strong&gt;Atomizer&lt;/strong&gt;, making the process recursive.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Executors&lt;/strong&gt; – Handle atomic tasks. Executors can be &lt;strong&gt;LLMs, APIs, or even other agents&lt;/strong&gt; — as long as they implement an &lt;code&gt;agent.execute()&lt;/code&gt; interface.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Aggregator&lt;/strong&gt; – Collects and integrates results from subtasks. Importantly, the Aggregator produces the &lt;strong&gt;answer to the original parent task&lt;/strong&gt;, not just raw child outputs.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;📐 Information Flow&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Top-down:&lt;/strong&gt; Tasks are decomposed into subtasks recursively.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bottom-up:&lt;/strong&gt; Subtask results are aggregated upwards into solutions for parent tasks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Left-to-right:&lt;/strong&gt; If a subtask depends on the output of a previous one, it waits until that subtask completes before execution.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This structure makes the system flexible, recursive, and dependency-aware — capable of decomposing complex problems into smaller steps while ensuring results are integrated coherently.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to view the system flow diagram&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart TB
    A[Your Request] --&amp;gt; B{Atomizer}
    B --&amp;gt;|Plan Needed| C[Planner]
    B --&amp;gt;|Atomic Task| D[Executor]

    %% Planner spawns subtasks
    C --&amp;gt; E[Subtasks]
    E --&amp;gt; G[Aggregator]

    %% Recursion
    E -.-&amp;gt; B  

    %% Execution + Aggregation
    D --&amp;gt; F[Final Result]
    G --&amp;gt; F

    style A fill:#e1f5fe
    style F fill:#c8e6c9
    style B fill:#fff3e0
    style C fill:#ffe0b2
    style D fill:#d1c4e9
    style G fill:#c5cae9

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt;
&lt;br /&gt; 
&lt;h3&gt;🚀 30-Second Quick Start&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/sentient-agi/ROMA.git
cd ROMA

# Run the automated setup
./setup.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Choose between:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Docker Setup&lt;/strong&gt; (Recommended) - One-command setup with isolation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Native Setup&lt;/strong&gt; - Direct installation for development&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🛠️ Technical Stack&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: Built on &lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/%5Bhttps://github.com/your/agnoagents%5D(https://github.com/agno-agi/agno)"&gt;AgnoAgents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;: Python 3.12+ with FastAPI/Flask&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;: React + TypeScript with real-time WebSocket&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLM Support&lt;/strong&gt;: Any provider via LiteLLM&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Persistence&lt;/strong&gt;: Enterprise S3 mounting with security validation 
  &lt;ul&gt; 
   &lt;li&gt;🔒 &lt;strong&gt;goofys FUSE mounting&lt;/strong&gt; for zero-latency file access&lt;/li&gt; 
   &lt;li&gt;🛡️ &lt;strong&gt;Path injection protection&lt;/strong&gt; with comprehensive validation&lt;/li&gt; 
   &lt;li&gt;🔐 &lt;strong&gt;AWS credentials verification&lt;/strong&gt; before operations&lt;/li&gt; 
   &lt;li&gt;📁 &lt;strong&gt;Dynamic Docker Compose&lt;/strong&gt; with secure volume mounting&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Code Execution&lt;/strong&gt;: E2B sandboxes with unified S3 integration&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Production-grade validation and error handling&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: Multi-modal, tools, MCP, hooks, caching&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Installation Options&lt;/h2&gt; 
&lt;h3&gt;Quick Start (Recommended)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Main setup (choose Docker or Native)
./setup.sh

# Optional: Setup E2B sandbox integration
./setup.sh --e2b

# Test E2B integration  
./setup.sh --test-e2b
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Command Line Options&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./setup.sh --docker     # Run Docker setup directly
./setup.sh --docker-from-scratch  # Rebuild Docker images/containers from scratch (down -v, no cache)
./setup.sh --native     # Run native setup directly (macOS/Ubuntu/Debian)
./setup.sh --e2b        # Setup E2B template (requires E2B_API_KEY + AWS creds)
./setup.sh --test-e2b   # Test E2B template integration
./setup.sh --help       # Show all available options
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual Installation&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/SETUP.md"&gt;setup docs&lt;/a&gt; for detailed instructions.&lt;/p&gt; 
&lt;h3&gt;🏗️ Optional: E2B Sandbox Integration&lt;/h3&gt; 
&lt;p&gt;For secure code execution capabilities, optionally set up E2B sandboxes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# After main setup, configure E2B (requires E2B_API_KEY and AWS credentials in .env)
./setup.sh --e2b

# Test E2B integration
./setup.sh --test-e2b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;E2B Features:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Secure Code Execution&lt;/strong&gt; - Run untrusted code in isolated sandboxes&lt;/li&gt; 
 &lt;li&gt;☁️ &lt;strong&gt;S3 Integration&lt;/strong&gt; - Automatic data sync between local and sandbox environments&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;goofys Mounting&lt;/strong&gt; - High-performance S3 filesystem mounting&lt;/li&gt; 
 &lt;li&gt;🔧 &lt;strong&gt;AWS Credentials&lt;/strong&gt; - Passed securely via Docker build arguments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤖 Pre-built Agents&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; These agents are demonstrations built using ROMA's framework through simple vibe-prompting and minimal manual tuning. They showcase how easily you can create high-performance agents with ROMA, rather than being production-final solutions. Our mission is to empower the community to build, share, and get rewarded for creating innovative agent recipes and use-cases.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;ROMA comes with example agents that demonstrate the framework's capabilities:&lt;/p&gt; 
&lt;h3&gt;🔍 General Task Solver&lt;/h3&gt; 
&lt;p&gt;A versatile agent powered by ChatGPT Search Preview for handling diverse tasks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Intelligent Search&lt;/strong&gt;: Leverages OpenAI's latest search capabilities for real-time information&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible Planning&lt;/strong&gt;: Adapts task decomposition based on query complexity&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-Domain&lt;/strong&gt;: Handles everything from technical questions to creative projects&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Quick Prototyping&lt;/strong&gt;: Perfect for testing ROMA's capabilities without domain-specific setup&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Perfect for: General research, fact-checking, exploratory analysis, quick information gathering&lt;/p&gt; 
&lt;h3&gt;🔬 Deep Research Agent&lt;/h3&gt; 
&lt;p&gt;A comprehensive research system that breaks down complex research questions into manageable sub-tasks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Smart Task Decomposition&lt;/strong&gt;: Automatically splits research topics into search, analysis, and synthesis phases&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parallel Information Gathering&lt;/strong&gt;: Executes multiple searches simultaneously for faster results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-Source Integration&lt;/strong&gt;: Combines results from web search, Wikipedia, and specialized APIs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Intelligent Synthesis&lt;/strong&gt;: Aggregates findings into coherent, well-structured reports&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Perfect for: Academic research, market analysis, competitive intelligence, technical documentation&lt;/p&gt; 
&lt;h3&gt;💹 Crypto Analytics Agent&lt;/h3&gt; 
&lt;p&gt;Specialized financial analysis agent with deep blockchain and DeFi expertise:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Real-Time Market Data&lt;/strong&gt;: Integrates with Binance, CoinGecko, and DefiLlama APIs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;On-Chain Analytics&lt;/strong&gt;: Access to Arkham Intelligence for wallet tracking and token flows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Technical Analysis&lt;/strong&gt;: Advanced charting with OHLC data and market indicators&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DeFi Metrics&lt;/strong&gt;: TVL tracking, yield analysis, protocol comparisons&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure Execution&lt;/strong&gt;: Runs analysis in E2B sandboxes with data persistence&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Perfect for: Token research, portfolio analysis, DeFi protocol evaluation, market trend analysis&lt;/p&gt; 
&lt;p&gt;All three agents demonstrate ROMA's recursive architecture in action, showing how complex queries that would overwhelm single-pass systems can be elegantly decomposed and solved. They serve as templates and inspiration for building your own specialized agents.&lt;/p&gt; 
&lt;h3&gt;Your First Agent in 5 Minutes&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;./setup.sh  # Automated setup with Docker or native installation
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Access all the pre-defined agents through the frontend on &lt;code&gt;localhost:3000&lt;/code&gt; after setting up the backend on &lt;code&gt;localhost:5000&lt;/code&gt;. Please checkout &lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/SETUP.md"&gt;Setup&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/docs/AGENTS_GUIDE.md"&gt;Agents guide&lt;/a&gt; to get started!&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/sentient-agi/ROMA/main/assets/agent_customization.png" alt="alt text" width="60%" /&gt; 
&lt;/div&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# Your first agent in 3 lines
from sentientresearchagent import SentientAgent

agent = SentientAgent.create()
result = await agent.run("Create a podcast about AI safety")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;📊 Benchmarks&lt;/h2&gt; 
&lt;p&gt;We evaluate our simple implementation of a search system using ROMA, called ROMA-Search across three benchmarks: &lt;strong&gt;SEAL-0&lt;/strong&gt;, &lt;strong&gt;FRAMES&lt;/strong&gt;, and &lt;strong&gt;SimpleQA&lt;/strong&gt;.&lt;br /&gt; Below are the performance graphs for each benchmark.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://huggingface.co/datasets/vtllms/sealqa"&gt;SEAL-0&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;SealQA is a new challenging benchmark for evaluating Search-Augmented Language models on fact-seeking questions where web search yields conflicting, noisy, or unhelpful results.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sentient-agi/ROMA/main/assets/seal-0-full.001.jpeg" alt="SEAL-0 Results" /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;&lt;a href="https://huggingface.co/datasets/google/frames-benchmark"&gt;FRAMES&lt;/a&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;View full results&lt;/summary&gt; 
 &lt;p&gt;A comprehensive evaluation dataset designed to test the capabilities of Retrieval-Augmented Generation (RAG) systems across factuality, retrieval accuracy, and reasoning.&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sentient-agi/ROMA/main/assets/FRAMES-full.001.jpeg" alt="FRAMES Results" /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h3&gt;&lt;a href="https://openai.com/index/introducing-simpleqa/"&gt;SimpleQA&lt;/a&gt;&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;View full results&lt;/summary&gt; 
 &lt;p&gt;Factuality benchmark that measures the ability for language models to answer short, fact-seeking questions.&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sentient-agi/ROMA/main/assets/simpleQAFull.001.jpeg" alt="SimpleQA Results" /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td width="50%"&gt; &lt;h3&gt;🔄 &lt;strong&gt;Recursive Task Decomposition&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Automatically breaks down complex tasks into manageable subtasks with intelligent dependency management. Runs independent sub-tasks in &lt;strong&gt;parallel&lt;/strong&gt;.&lt;/p&gt; &lt;/td&gt; 
   &lt;td width="50%"&gt; &lt;h3&gt;🤖 &lt;strong&gt;Agent Agnostic&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Works with any provider (OpenAI, Anthropic, Google, local models) through unified interface, as long as it has an &lt;code&gt;agent.run()&lt;/code&gt; command, then you can use it!&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%"&gt; &lt;h3&gt;🔍 &lt;strong&gt;Complete Transparency&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Stage tracing shows exactly what happens at each step - debug and optimize with full visibility&lt;/p&gt; &lt;/td&gt; 
   &lt;td width="50%"&gt; &lt;h3&gt;🔌 Connect Any Tool&lt;/h3&gt; &lt;p&gt;Seamlessly integrate external tools and protocols with configurable intervention points. Already includes production-grade connectors such as E2B, file-read-write, and more.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;🙏 Acknowledgments&lt;/h2&gt; 
&lt;p&gt;This framework would not have been possible if it wasn't for these amazing open-source contributions!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Inspired by the hierarchical planning approach described in &lt;a href="https://arxiv.org/abs/2503.08275"&gt;"Beyond Outlining: Heterogeneous Recursive Planning"&lt;/a&gt; by Xiong et al.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pydantic/pydantic"&gt;Pydantic&lt;/a&gt; - Data validation using Python type annotations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/%5Bhttps://github.com/agno-ai/agno%5D(https://github.com/agno-agi/agno)"&gt;Agno&lt;/a&gt; - Framework for building AI agents&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/e2b-dev/e2b"&gt;E2B&lt;/a&gt; - Cloud runtime for AI agents&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📚 Citation&lt;/h2&gt; 
&lt;p&gt;If you use the ROMA repo in your research, please cite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{al_zubi_2025_17052592,
  author       = {Al-Zubi, Salah and
                  Nama, Baran and
                  Kaz, Arda and
                  Oh, Sewoong},
  title        = {SentientResearchAgent: A Hierarchical AI Agent
                   Framework for Research and Analysis
                  },
  month        = sep,
  year         = 2025,
  publisher    = {Zenodo},
  version      = {ROMA},
  doi          = {10.5281/zenodo.17052592},
  url          = {https://doi.org/10.5281/zenodo.17052592},
  swhid        = {swh:1:dir:69cd1552103e0333dd0c39fc4f53cb03196017ce
                   ;origin=https://doi.org/10.5281/zenodo.17052591;vi
                   sit=swh:1:snp:f50bf99634f9876adb80c027361aec9dff97
                   3433;anchor=swh:1:rel:afa7caa843ce1279f5b4b29b5d3d
                   5e3fe85edc95;path=salzubi401-ROMA-b31c382
                  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/sentient-agi/ROMA/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CodebuffAI/codebuff</title>
      <link>https://github.com/CodebuffAI/codebuff</link>
      <description>&lt;p&gt;Generate code from the terminal!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Codebuff&lt;/h1&gt; 
&lt;p&gt;Codebuff is an &lt;strong&gt;open-source AI coding assistant&lt;/strong&gt; that edits your codebase through natural language instructions. Instead of using one model for everything, it coordinates specialized agents that work together to understand your project and make precise changes.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/CodebuffAI/codebuff/main/assets/codebuff-vs-claude-code.png" alt="Codebuff vs Claude Code" width="400" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Codebuff beats Claude Code at 61% vs 53% on &lt;a href="https://raw.githubusercontent.com/CodebuffAI/codebuff/main/evals/README.md"&gt;our evals&lt;/a&gt; across 175+ coding tasks over multiple open-source repos that simulate real-world tasks.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/CodebuffAI/codebuff/main/assets/demo.gif" alt="Codebuff Demo" /&gt;&lt;/p&gt; 
&lt;h2&gt;How it works&lt;/h2&gt; 
&lt;p&gt;When you ask Codebuff to "add authentication to my API," it might invoke:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;A &lt;strong&gt;File Explorer Agent&lt;/strong&gt; to scan your codebase to understand the architecture and find relevant files&lt;/li&gt; 
 &lt;li&gt;A &lt;strong&gt;Planner Agent&lt;/strong&gt; to plan which files need changes and in what order&lt;/li&gt; 
 &lt;li&gt;An &lt;strong&gt;Editor Agent&lt;/strong&gt; to make precise edits&lt;/li&gt; 
 &lt;li&gt;A &lt;strong&gt;Reviewer Agent&lt;/strong&gt; to validate changes&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/CodebuffAI/codebuff/main/assets/multi-agents.png" alt="Codebuff Multi-Agents" width="250" /&gt; 
&lt;/div&gt; 
&lt;p&gt;This multi-agent approach gives you better context understanding, more accurate edits, and fewer errors compared to single-model tools.&lt;/p&gt; 
&lt;h2&gt;CLI: Install and start coding&lt;/h2&gt; 
&lt;p&gt;Install:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install -g codebuff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd your-project
codebuff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then just tell Codebuff what you want and it handles the rest:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;"Fix the SQL injection vulnerability in user registration"&lt;/li&gt; 
 &lt;li&gt;"Add rate limiting to all API endpoints"&lt;/li&gt; 
 &lt;li&gt;"Refactor the database connection code for better performance"&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Codebuff will find the right files, makes changes across your codebase, and runs tests to make sure nothing breaks.&lt;/p&gt; 
&lt;h2&gt;Create custom agents&lt;/h2&gt; 
&lt;p&gt;To get started building your own agents, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;codebuff init-agents
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can write agent definition files that give you maximum control over agent behavior.&lt;/p&gt; 
&lt;p&gt;Implement your workflows by specifying tools, which agents can be spawned, and prompts. We even have TypeScript generators for more programmatic control.&lt;/p&gt; 
&lt;p&gt;For example, here's a &lt;code&gt;git-committer&lt;/code&gt; agent that creates git commits based on the current git state. Notice that it runs &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt; to analyze changes, but then hands control over to the LLM to craft a meaningful commit message and perform the actual commit.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;export default {
  id: 'git-committer',
  displayName: 'Git Committer',
  model: 'openai/gpt-5-nano',
  toolNames: ['read_files', 'run_terminal_command', 'end_turn'],

  instructionsPrompt:
    'You create meaningful git commits by analyzing changes, reading relevant files for context, and crafting clear commit messages that explain the "why" behind changes.',

  async *handleSteps() {
    // Analyze what changed
    yield { tool: 'run_terminal_command', command: 'git diff' }
    yield { tool: 'run_terminal_command', command: 'git log --oneline -5' }

    // Stage files and create commit with good message
    yield 'STEP_ALL'
  },
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SDK: Run agents in production&lt;/h2&gt; 
&lt;p&gt;Install the &lt;a href="https://www.npmjs.com/package/@codebuff/sdk"&gt;SDK package&lt;/a&gt; -- note this is different than the CLI codebuff package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install @codebuff/sdk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Import the client and run agents!&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { CodebuffClient } from '@codebuff/sdk'

// 1. Initialize the client
const client = new CodebuffClient({
  apiKey: 'your-api-key',
  cwd: '/path/to/your/project',
  onError: (error) =&amp;gt; console.error('Codebuff error:', error.message),
})

// 2. Do a coding task...
const result = await client.run({
  agent: 'base', // Codebuff's base coding agent
  prompt: 'Add comprehensive error handling to all API endpoints',
  handleEvent: (event) =&amp;gt; {
    console.log('Progress', event)
  },
})

// 3. Or, run a custom agent!
const myCustomAgent: AgentDefinition = {
  id: 'greeter',
  displayName: 'Greeter',
  model: 'openai/gpt-5',
  instructionsPrompt: 'Say hello!',
}
await client.run({
  agent: 'greeter',
  agentDefinitions: [myCustomAgent],
  prompt: 'My name is Bob.',
  customToolDefinitions: [], // Add custom tools too!
  handleEvent: (event) =&amp;gt; {
    console.log('Progress', event)
  },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more about the SDK &lt;a href="https://www.npmjs.com/package/@codebuff/sdk"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Why choose Codebuff&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Deep customizability&lt;/strong&gt;: Create sophisticated agent workflows with TypeScript generators that mix AI generation with programmatic control. Define custom agents that spawn subagents, implement conditional logic, and orchestrate complex multi-step processes that adapt to your specific use cases.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Any model on OpenRouter&lt;/strong&gt;: Unlike Claude Code which locks you into Anthropic's models, Codebuff supports any model available on &lt;a href="https://openrouter.ai/models"&gt;OpenRouter&lt;/a&gt; - from Claude and GPT to specialized models like Qwen, DeepSeek, and others. Switch models for different tasks or use the latest releases without waiting for platform updates.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Reuse any published agent&lt;/strong&gt;: Compose existing &lt;a href="https://www.codebuff.com/agents"&gt;published agents&lt;/a&gt; to get a leg up. Codebuff agents are the new MCP!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Fully customizable SDK&lt;/strong&gt;: Build Codebuff's capabilities directly into your applications with a complete TypeScript SDK. Create custom tools, integrate with your CI/CD pipeline, build AI-powered development environments, or embed intelligent coding assistance into your products.&lt;/p&gt; 
&lt;h2&gt;Contributing to Codebuff&lt;/h2&gt; 
&lt;p&gt;We ❤️ contributions from the community - whether you're fixing bugs, tweaking our agents, or improving documentation.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Want to contribute?&lt;/strong&gt; Check out our &lt;a href="https://raw.githubusercontent.com/CodebuffAI/codebuff/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;Some ways you can help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🐛 &lt;strong&gt;Fix bugs&lt;/strong&gt; or add features&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;strong&gt;Create specialized agents&lt;/strong&gt; and publish them to the Agent Store&lt;/li&gt; 
 &lt;li&gt;📚 &lt;strong&gt;Improve documentation&lt;/strong&gt; or write tutorials&lt;/li&gt; 
 &lt;li&gt;💡 &lt;strong&gt;Share ideas&lt;/strong&gt; in our &lt;a href="https://github.com/CodebuffAI/codebuff/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;CLI&lt;/strong&gt;: &lt;code&gt;npm install -g codebuff&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;code&gt;npm install @codebuff/sdk&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Resources&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href="https://codebuff.com/docs"&gt;codebuff.com/docs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt;: &lt;a href="https://codebuff.com/discord"&gt;Discord&lt;/a&gt; - Join our friendly community&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Issues &amp;amp; Ideas&lt;/strong&gt;: &lt;a href="https://github.com/CodebuffAI/codebuff/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/CodebuffAI/codebuff/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; - Start here to contribute!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Support&lt;/strong&gt;: &lt;a href="mailto:support@codebuff.com"&gt;support@codebuff.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>milvus-io/milvus</title>
      <link>https://github.com/milvus-io/milvus</link>
      <description>&lt;p&gt;Milvus is a high-performance, cloud-native vector database built for scalable vector ANN search&lt;/p&gt;&lt;hr&gt;&lt;img src="https://github.com/user-attachments/assets/51e33300-7f85-43ff-a05a-3a0317a961f3" alt="milvus banner" /&gt; 
&lt;div class="column" align="middle"&gt; 
 &lt;a href="https://github.com/milvus-io/milvus/raw/master/LICENSE"&gt;&lt;img height="20" src="https://img.shields.io/github/license/milvus-io/milvus" alt="license" /&gt;&lt;/a&gt; 
 &lt;a href="https://milvus.io/docs/install_standalone-docker.md"&gt;&lt;img src="https://img.shields.io/docker/pulls/milvusdb/milvus" alt="docker-pull-count" /&gt;&lt;/a&gt; 
 &lt;a href="https://milvus.io/docs/roadmap.md"&gt;&lt;img src="https://img.shields.io/badge/2025-roadmap-orange" alt="fully-managed-milvus" /&gt;&lt;/a&gt; 
 &lt;a href="https://cloud.zilliz.com/signup?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;&lt;img src="https://img.shields.io/badge/fully_managed-milvus-blue" alt="fully-managed-milvus" /&gt;&lt;/a&gt; 
 &lt;a href="https://milvus.io/docs/tutorials-overview.md"&gt;&lt;img src="https://img.shields.io/badge/tutorials-green" alt="tutorials" /&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/mKc3R95yE5"&gt;&lt;img height="20" src="https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white" alt="discord" /&gt;&lt;/a&gt; 
 &lt;a href="https://x.com/milvusio"&gt;&lt;img src="https://img.shields.io/twitter/follow/milvusio" alt="twitter" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is Milvus?&lt;/h2&gt; 
&lt;p&gt;🐦 &lt;a href="https://milvus.io/"&gt;Milvus&lt;/a&gt; is a high-performance vector database built for scale. It powers AI applications by efficiently organizing and searching vast amounts of unstructured data, such as text, images, and multi-modal information.&lt;/p&gt; 
&lt;p&gt;🧑‍💻 Written in Go and C++, Milvus implements hardware accelaration for CPU/GPU to achieve best-in-class vector search performance. Thanks to its &lt;a href="https://milvus.io/docs/overview.md#What-Makes-Milvus-so-Scalable"&gt;fully-distributed and K8s-native architecture&lt;/a&gt;, Milvus can scale horizontally, handle tens of thousands of search queries on billions of vectors, and keep data fresh with real-time streaming updates. Milvus also supports &lt;a href="https://milvus.io/docs/install_standalone-docker.md"&gt;Standalone mode&lt;/a&gt; for single machine deployment. &lt;a href="https://milvus.io/docs/milvus_lite.md"&gt;Milvus Lite&lt;/a&gt; is a lightweight version good for quickstart in python with &lt;code&gt;pip install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Want to use Milvus with zero setup? Try out &lt;a href="https://cloud.zilliz.com/signup?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;Zilliz Cloud ☁️&lt;/a&gt; for free. Milvus is available as a fully managed service on Zilliz Cloud, with &lt;a href="https://zilliz.com/serverless?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;Serverless&lt;/a&gt;, &lt;a href="https://zilliz.com/cloud?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;Dedicated&lt;/a&gt; and &lt;a href="https://zilliz.com/bring-your-own-cloud?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;BYOC&lt;/a&gt; options available.&lt;/p&gt; 
&lt;p&gt;For questions about how to use Milvus, join the community on &lt;a href="https://discord.gg/33mfvwep3J"&gt;Discord&lt;/a&gt; to get help. For reporting problems, file bugs and feature requests in GitHub &lt;a href="https://github.com/milvus-io/milvus/issues"&gt;Issues&lt;/a&gt; or ask in &lt;a href="https://github.com/milvus-io/milvus/discussions"&gt;Discussions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Milvus open-source project is under &lt;a href="https://lfaidata.foundation/projects/milvus/"&gt;LF AI &amp;amp; Data Foundation&lt;/a&gt;, distributed with &lt;a href="https://github.com/milvus-io/milvus/raw/master/LICENSE"&gt;Apache 2.0&lt;/a&gt; License, with Zilliz as its major contributor.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;$ pip install -U pymilvus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This installs &lt;code&gt;pymilvus&lt;/code&gt;, the Python SDK for Milvus. Use &lt;code&gt;MilvusClient&lt;/code&gt; to create a client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from pymilvus import MilvusClient
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pymilvus&lt;/code&gt; also includes Milvus Lite for quickstart. To create a local vector database, simply instantiate a client with a local file name for persisting data:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;client = MilvusClient("milvus_demo.db")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can also specify the credentials to connect to your deployed &lt;a href="https://milvus.io/docs/authenticate.md?tab=docker"&gt;Milvus server&lt;/a&gt; or &lt;a href="https://docs.zilliz.com/docs/quick-start"&gt;Zilliz Cloud&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;client = MilvusClient(
  uri="&amp;lt;endpoint_of_self_hosted_milvus_or_zilliz_cloud&amp;gt;",
  token="&amp;lt;username_and_password_or_zilliz_cloud_api_key&amp;gt;")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With the client, you can create collection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;client.create_collection(
    collection_name="demo_collection",
    dimension=768,  # The vectors we will use in this demo have 768 dimensions
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ingest data:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;res = client.insert(collection_name="demo_collection", data=data)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Perform vector search:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;query_vectors = embedding_fn.encode_queries(["Who is Alan Turing?", "What is AI?"])
res = client.search(
    collection_name="demo_collection",  # target collection
    data=query_vectors,  # a list of one or more query vectors, supports batch
    limit=2,  # how many results to return (topK)
    output_fields=["vector", "text", "subject"],  # what fields to return
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Why Milvus&lt;/h2&gt; 
&lt;p&gt;Milvus is designed to handle vector search at scale. It stores vectors, which are learned representations of unstructured data, together with other scalar data types such as integers, strings, and JSON objects. Users can conduct efficient vector search with metadata filtering or hybrid search. Here are why developers choose Milvus as the vector database for AI applications:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;High Performance at Scale and High Availability&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Milvus features a &lt;a href="https://milvus.io/docs/architecture_overview.md"&gt;distributed architecture&lt;/a&gt; that separates &lt;a href="https://milvus.io/docs/data_processing.md#Data-query"&gt;compute&lt;/a&gt; and &lt;a href="https://milvus.io/docs/data_processing.md#Data-insertion"&gt;storage&lt;/a&gt;. Milvus can horizontally scale and adapt to diverse traffic patterns, achieving optimal performance by independently increasing query nodes for read-heavy workload and data node for write-heavy workload. The stateless microservices on K8s allow &lt;a href="https://milvus.io/docs/coordinator_ha.md#Coordinator-HA"&gt;quick recovery&lt;/a&gt; from failure, ensuring high availability. The support for &lt;a href="https://milvus.io/docs/replica.md"&gt;replicas&lt;/a&gt; further enhances fault tolerance and throughput by loading data segments on multiple query nodes. See &lt;a href="https://zilliz.com/vector-database-benchmark-tool"&gt;benchmark&lt;/a&gt; for performance comparison.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Support for Various Vector Index Types and Hardware Acceleration&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Milvus separates the system and core vector search engine, allowing it to support all major vector index types that are optimized for different scenarios, including HNSW, IVF, FLAT (brute-force), SCANN, and DiskANN, with &lt;a href="https://milvus.io/docs/index.md?tab=floating#IVFPQ"&gt;quantization-based&lt;/a&gt; variations and &lt;a href="https://milvus.io/docs/mmap.md"&gt;mmap&lt;/a&gt;. Milvus optimizes vector search for advanced features such as &lt;a href="https://milvus.io/docs/scalar_index.md#Scalar-Index"&gt;metadata filtering&lt;/a&gt; and &lt;a href="https://milvus.io/docs/single-vector-search.md#Range-search"&gt;range search&lt;/a&gt;. Additionally, Milvus implements hardware acceleration to enhance vector search performance and supports GPU indexing, such as NVIDIA's &lt;a href="https://github.com/rapidsai/cuvs"&gt;CAGRA&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Flexible Multi-tenancy and Hot/Cold Storage&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Milvus supports &lt;a href="https://milvus.io/docs/multi_tenancy.md#Multi-tenancy-strategies"&gt;multi-tenancy&lt;/a&gt; through isolation at database, collection, partition, or partition key level. The flexible strategies allow a single cluster to handle hundreds to millions of tenants, also ensures optimized search performance and flexible access control. Milvus enhances cost-effectiveness with hot/cold storage. Frequently accessed hot data can be stored in memory or on SSDs for better performance, while less-accessed cold data is kept on slower, cost-effective storage. This mechanism can significantly reduce costs while maintaining high performance for critical tasks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Sparse Vector for Full Text Search and Hybrid Search&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In addition to semantic search through dense vector, Milvus also natively supports &lt;a href="https://milvus.io/docs/full-text-search.md"&gt;full text search&lt;/a&gt; with BM25 as well as learned sparse embedding such as SPLADE and BGE-M3. Users can store sparse vector and dense vector in the same collection, and define functions to rerank results from multiple search requests. See examples of &lt;a href="https://milvus.io/docs/full_text_search_with_milvus.md"&gt;Hybrid Search with semantic search + full text search&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Data Security and Fine-grain Access Control&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Milvus ensures data security by implementing mandatory user authentication, TLS encryption, and Role-Based Access Control (RBAC). User authentication ensures that only authorized users with valid credentials can access the database, while TLS encryption secures all communications within the network. Additionally, RBAC allows for fine-grained access control by assigning specific permissions to users based on their roles. These features make Milvus a robust and secure choice for enterprise applications, protecting sensitive data from unauthorized access and potential breaches.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Milvus is trusted by AI developers to build applications such as text and image search, Retrieval-Augmented Generation (RAG), and recommendation systems. Milvus powers &lt;a href="https://raw.githubusercontent.com/milvus-io/milvus/master/(https://milvus.io/use-cases)"&gt;many mission-critical business&lt;/a&gt; for startups and enterprises.&lt;/p&gt; 
&lt;h2&gt;Demos and Tutorials&lt;/h2&gt; 
&lt;p&gt;Here is a selection of demos and tutorials to show how to build various types of AI applications made with Milvus:&lt;/p&gt; 
&lt;p&gt;You can explore a comprehensive &lt;a href="https://milvus.io/docs/tutorials-overview.md"&gt;Tutorials Overview&lt;/a&gt; covering topics such as Retrieval-Augmented Generation (RAG), Semantic Search, Hybrid Search, Question Answering, Recommendation Systems, and various quick-start guides. These resources are designed to help you get started quickly and efficiently.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tutorial&lt;/th&gt; 
   &lt;th&gt;Use Case&lt;/th&gt; 
   &lt;th&gt;Related Milvus Features&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/build-rag-with-milvus.md"&gt;Build RAG with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RAG&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/how_to_enhance_your_rag.md"&gt;Advanced RAG Optimizations&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RAG&lt;/td&gt; 
   &lt;td&gt;vector search, full text search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/full_text_search_with_milvus.md"&gt;Full Text Search with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Text Search&lt;/td&gt; 
   &lt;td&gt;full text search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/hybrid_search_with_milvus.md"&gt;Hybrid Search with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Hybrid Search&lt;/td&gt; 
   &lt;td&gt;hybrid search, multi vector, dense embedding, sparse embedding&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/image_similarity_search.md"&gt;Image Search with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Semantic Search&lt;/td&gt; 
   &lt;td&gt;vector search, dynamic field&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/multimodal_rag_with_milvus.md"&gt;Multimodal Search using Multi Vectors&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Semantic Search&lt;/td&gt; 
   &lt;td&gt;multi vector, hybrid search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/movie_recommendation_with_milvus.md"&gt;Movie Recommendation with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Recommendation System&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/graph_rag_with_milvus.md"&gt;Graph RAG with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RAG&lt;/td&gt; 
   &lt;td&gt;graph search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/contextual_retrieval_with_milvus.md"&gt;Contextual Retrieval with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Quickstart&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/vector_visualization.md"&gt;Vector Visualization&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Quickstart&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/hdbscan_clustering_with_milvus.md"&gt;HDBSCAN Clustering with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Quickstart&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/use_ColPali_with_milvus.md"&gt;Use ColPali for Multi-Modal Retrieval with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Quickstart&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td width="30%"&gt; &lt;a href="https://milvus.io/milvus-demos"&gt; &lt;img src="https://assets.zilliz.com/image_search_59a64e4f22.gif" /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width="30%"&gt; &lt;a href="https://milvus.io/milvus-demos"&gt; &lt;img src="https://assets.zilliz.com/qa_df5ee7bd83.gif" /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width="30%"&gt; &lt;a href="https://milvus.io/milvus-demos"&gt; &lt;img src="https://assets.zilliz.com/mole_search_76f8340572.gif" /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt; &lt;a href="https://milvus.io/milvus-demos"&gt;Image Search&lt;/a&gt; &lt;/th&gt; 
   &lt;th&gt; &lt;a href="https://milvus.io/milvus-demos"&gt;RAG&lt;/a&gt; &lt;/th&gt; 
   &lt;th&gt; &lt;a href="https://milvus.io/milvus-demos"&gt;Drug Discovery&lt;/a&gt; &lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Ecosystem and Integration&lt;/h2&gt; 
&lt;p&gt;Milvus integrates with a comprehensive suite of &lt;a href="https://milvus.io/docs/integrations_overview.md"&gt;AI development tools&lt;/a&gt;, such as LangChain, LlamaIndex, OpenAI and HuggingFace, making it an ideal vector store for GenAI applications such as Retrieval-Augmented Generation (RAG). Milvus works with both open-source embedding models and embedding service, in text, image and video modalities. Milvus also provides a convenient util &lt;a href="https://milvus.io/docs/embeddings.md"&gt;&lt;code&gt;pymilvus[model]&lt;/code&gt;&lt;/a&gt;, users can use the simple wrapper code to transform unstructured data into vector embeddings and leverage reranking models for optimized search results. The Milvus ecosystem also includes &lt;a href="https://github.com/zilliztech/attu?tab=readme-ov-file#attu"&gt;Attu&lt;/a&gt; for GUI-based administration, &lt;a href="https://milvus.io/docs/birdwatcher_overview.md"&gt;Birdwatcher&lt;/a&gt; for system debugging, &lt;a href="https://milvus.io/docs/monitor_overview.md"&gt;Prometheus/Grafana&lt;/a&gt; for monitoring, &lt;a href="https://milvus.io/docs/milvus-cdc-overview.md"&gt;Milvus CDC&lt;/a&gt; for data synchronization, &lt;a href="https://github.com/zilliztech/vts?tab=readme-ov-file#vts"&gt;VTS&lt;/a&gt; for data migration and data connectors for &lt;a href="https://milvus.io/docs/integrate_with_spark.md#Spark-Milvus-Connector-User-Guide"&gt;Spark&lt;/a&gt;, &lt;a href="https://github.com/zilliztech/kafka-connect-milvus?tab=readme-ov-file#kafka-connect-milvus-connector"&gt;Kafka&lt;/a&gt;, &lt;a href="https://fivetran.com/docs/destinations/milvus"&gt;Fivetran&lt;/a&gt;, and &lt;a href="https://milvus.io/docs/integrate_with_airbyte.md"&gt;Airbyte&lt;/a&gt; to build search pipelines.&lt;/p&gt; 
&lt;p&gt;Check out &lt;a href="https://milvus.io/docs/integrations_overview.md"&gt;https://milvus.io/docs/integrations_overview.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For guidance on installation, usage, deployment, and administration, check out &lt;a href="https://milvus.io/docs"&gt;Milvus Docs&lt;/a&gt;. For technical milestones and enhancement proposals, check out &lt;a href="https://github.com/milvus-io/milvus/issues"&gt;issues on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The Milvus open-source project accepts contribution from everyone. See &lt;a href="https://github.com/milvus-io/milvus/raw/master/CONTRIBUTING.md"&gt;Guidelines for Contributing&lt;/a&gt; for details on submitting patches and the development workflow. See our &lt;a href="https://github.com/milvus-io/community"&gt;community repository&lt;/a&gt; to learn about project governance and access more community resources.&lt;/p&gt; 
&lt;h3&gt;Build Milvus from Source Code&lt;/h3&gt; 
&lt;p&gt;Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Linux systems (Ubuntu 20.04 or later recommended):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;go: &amp;gt;= 1.21
cmake: &amp;gt;= 3.26.4
gcc: 9.5
python: &amp;gt; 3.8 and  &amp;lt;= 3.11
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MacOS systems with x86_64 (Big Sur 11.5 or later recommended):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;go: &amp;gt;= 1.21
cmake: &amp;gt;= 3.26.4
llvm: &amp;gt;= 15
python: &amp;gt; 3.8 and  &amp;lt;= 3.11
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MacOS systems with Apple Silicon (Monterey 12.0.1 or later recommended):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;go: &amp;gt;= 1.21 (Arch=ARM64)
cmake: &amp;gt;= 3.26.4
llvm: &amp;gt;= 15
python: &amp;gt; 3.8 and  &amp;lt;= 3.11
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Clone Milvus repo and build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone github repository.
$ git clone https://github.com/milvus-io/milvus.git

# Install third-party dependencies.
$ cd milvus/
$ ./scripts/install_deps.sh

# Compile Milvus.
$ make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For full instructions, see &lt;a href="https://github.com/milvus-io/milvus/raw/master/DEVELOPMENT.md"&gt;developer's documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join the Milvus community on &lt;a href="https://discord.gg/8uyFbECzPX"&gt;Discord&lt;/a&gt; to share your suggestions, advice, and questions with our engineering team.&lt;/p&gt; 
&lt;p&gt;To learn latest news about Milvus, follow us on social media:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/milvusio"&gt;X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/the-milvus-project"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCMCo_F7pKjMHBlfyxwOPw-g"&gt;Youtube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/@milvusio"&gt;Medium&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also check out our &lt;a href="https://milvus.io/docs/performance_faq.md"&gt;FAQ page&lt;/a&gt; to discover solutions or answers to your issues or questions, and subscribe to Milvus mailing lists:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://lists.lfai.foundation/g/milvus-tsc"&gt;Technical Steering Committee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://lists.lfai.foundation/g/milvus-technical-discuss"&gt;Technical Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://lists.lfai.foundation/g/milvus-announce"&gt;Announcement&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Reference&lt;/h2&gt; 
&lt;p&gt;Reference to cite when you use Milvus in a research paper:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@inproceedings{2021milvus,
  title={Milvus: A Purpose-Built Vector Data Management System},
  author={Wang, Jianguo and Yi, Xiaomeng and Guo, Rentong and Jin, Hai and Xu, Peng and Li, Shengjun and Wang, Xiangyu and Guo, Xiangzhou and Li, Chengming and Xu, Xiaohai and others},
  booktitle={Proceedings of the 2021 International Conference on Management of Data},
  pages={2614--2627},
  year={2021}
}

@article{2022manu,
  title={Manu: a cloud native vector database management system},
  author={Guo, Rentong and Luan, Xiaofan and Xiang, Long and Yan, Xiao and Yi, Xiaomeng and Luo, Jigao and Cheng, Qianya and Xu, Weizhi and Luo, Jiarui and Liu, Frank and others},
  journal={Proceedings of the VLDB Endowment},
  volume={15},
  number={12},
  pages={3548--3561},
  year={2022},
  publisher={VLDB Endowment}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- Do not remove start of hero-bot --&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/badge/all--contributors-414-orange" /&gt;&lt;br /&gt; &lt;a href="https://github.com/0xflotus"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26602940?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/9Eurydice9"&gt;&lt;img src="https://avatars.githubusercontent.com/u/220225099?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ABNER-1"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24547351?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Abhijnan-Bajpai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57059194?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Accagain2014"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9635216?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Ahmetyasin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34247619?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Ald392"&gt;&lt;img src="https://avatars.githubusercontent.com/u/166891594?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/AliDotS"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33119433?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/AllenYu1987"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12489985?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Anosh21"&gt;&lt;img src="https://avatars.githubusercontent.com/u/90505226?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/AnthonyTsu1984"&gt;&lt;img src="https://avatars.githubusercontent.com/u/115786031?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Aredcap"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40494761?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ArenaSu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21214629?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Armaggheddon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47779194?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/BUPTAnderson"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13449703?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Ben-Aaron-Bio-Rad"&gt;&lt;img src="https://avatars.githubusercontent.com/u/54123439?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Bennu-Li"&gt;&lt;img src="https://avatars.githubusercontent.com/u/53458891?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Biki-das"&gt;&lt;img src="https://avatars.githubusercontent.com/u/72331432?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/BossZou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40255591?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CNLHC"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21005146?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CaoHaiNam"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47685795?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Chisdo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/36720318?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ChunelFeng"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37905059?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CocytusElias"&gt;&lt;img src="https://avatars.githubusercontent.com/u/79587688?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CodeInDreams"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17664279?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CsterKuroi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12230174?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Cupchen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34762375?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/DLT1412"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8294986?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/DanielHuang1983"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4417873?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Deep1Shikha"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47516502?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/DingQK"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58072531?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/DiptoChakrabarty"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45638240?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/EricStarer"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34002927?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Erzangel"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57399897?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Fierralin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8857059?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/FluorineDog"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15663612?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Gofastasf"&gt;&lt;img src="https://avatars.githubusercontent.com/u/159963288?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Gracieeea"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50101579?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/GuanyunFeng"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40229765?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/GuoRentong"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57477222?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/GuyKh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3136012?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Hard-Coder05"&gt;&lt;img src="https://avatars.githubusercontent.com/u/54059881?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Heisenberg-Y"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35055583?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/HesterG"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17645053?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Hoyaspark"&gt;&lt;img src="https://avatars.githubusercontent.com/u/88016041?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/HuaSheng2000"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34791273?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/HuangHua"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2274405?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/HurSungYun"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8033896?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Ice-YcY"&gt;&lt;img src="https://avatars.githubusercontent.com/u/85332705?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/JackLCL"&gt;&lt;img src="https://avatars.githubusercontent.com/u/53512883?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/JadeFlute0127"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35321989?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Janglearnstocode"&gt;&lt;img src="https://avatars.githubusercontent.com/u/204587742?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Javajava1"&gt;&lt;img src="https://avatars.githubusercontent.com/u/29594737?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Jeri-jose"&gt;&lt;img src="https://avatars.githubusercontent.com/u/72429659?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/JinHai-CN"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33142505?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/JsDove"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35839735?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Juneezee"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20135478?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/KubrickLiu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24795136?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/KumaJie"&gt;&lt;img src="https://avatars.githubusercontent.com/u/61139665?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/LeoReeYang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58654486?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Leslie-Wong-H"&gt;&lt;img src="https://avatars.githubusercontent.com/u/27696701?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Light-City"&gt;&lt;img src="https://avatars.githubusercontent.com/u/25699850?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Lin-gh-Saint"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64019322?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Linkwei"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30227152?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/LionelDong"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7533395?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/LocoRichard"&gt;&lt;img src="https://avatars.githubusercontent.com/u/81553353?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/LoveEachDay"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1573213?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/MrPresent-Han"&gt;&lt;img src="https://avatars.githubusercontent.com/u/116052805?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/NavanshGoel"&gt;&lt;img src="https://avatars.githubusercontent.com/u/74401713?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/NicoYuan1986"&gt;&lt;img src="https://avatars.githubusercontent.com/u/109071306?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/NotRyan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5742796?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/OxalisCu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64067746?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/PahudPlus"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64403786?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/PiercarloSlavazza"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3389306?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/PowderLi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/135960789?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/PwzXxm"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6563846?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/QipengZhou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5410298?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/RangerCD"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6872198?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Raysilience"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45241093?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Reidddddd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5352837?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ReigenAraka"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57280231?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Rijin-N"&gt;&lt;img src="https://avatars.githubusercontent.com/u/181319057?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/RosieZhang12"&gt;&lt;img src="https://avatars.githubusercontent.com/u/106942883?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/RyanWei"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9876551?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SCKCZJ2018"&gt;&lt;img src="https://avatars.githubusercontent.com/u/29282370?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SarthakJain26"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45846277?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Shawnzheng011019"&gt;&lt;img src="https://avatars.githubusercontent.com/u/88486803?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SimFG"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21985684?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SkyYang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4702509?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SnowyOwl-KHY"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10348819?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SpadeA-Tang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/71589810?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Sunt-ing"&gt;&lt;img src="https://avatars.githubusercontent.com/u/43040147?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/SwaggySong"&gt;&lt;img src="https://avatars.githubusercontent.com/u/36157116?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/TheShubhendra"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37535104?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Thor-ChenBiao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/104345188?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ThreadDao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/27288593?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ThyeeZz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/41352919?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Tlincy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11934432?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Tumao727"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20420181?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/UnyieldingOrca"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11794047?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Writer-X"&gt;&lt;img src="https://avatars.githubusercontent.com/u/80471801?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Writtic"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11371498?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Wuzhengda55"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47274057?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Xieql"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45359033?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/XuPeng-SH"&gt;&lt;img src="https://avatars.githubusercontent.com/u/39627130?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/XuanYang-cn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51370125?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/YannFollet"&gt;&lt;img src="https://avatars.githubusercontent.com/u/131855179?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/YidaHu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13404367?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/YiyunNi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/74396087?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Yougigun"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9638997?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Yukikaze-CZR"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48198922?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Zach41"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3941604?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ZhaoBQ"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35092554?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aaronjin2010"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48044391?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/abd-770"&gt;&lt;img src="https://avatars.githubusercontent.com/u/92085834?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/akihoni"&gt;&lt;img src="https://avatars.githubusercontent.com/u/36330442?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/alexanderguzhva"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10901481?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/alwayslove2013"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22510720?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/anchun"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2356895?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/any35"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2082210?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aoiasd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45024769?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/arijit-chowdhury-genea"&gt;&lt;img src="https://avatars.githubusercontent.com/u/104769013?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ashkrisk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/137368647?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ashyshyshyman"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50362613?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/avats-dev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35889327?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/avsolatorio"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3009596?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/balloon1995"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10573916?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/become-nice"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56624819?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bigsheeper"&gt;&lt;img src="https://avatars.githubusercontent.com/u/42060877?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/binbin12580"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30914966?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/binbinlv"&gt;&lt;img src="https://avatars.githubusercontent.com/u/83755740?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bjzhjing"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46661806?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bo-huang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24309515?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/brandonbiggs"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34954680?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/brcarry"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58139344?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/brunocfnba"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7377163?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bryanwux"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17968665?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/caesarjuly"&gt;&lt;img src="https://avatars.githubusercontent.com/u/927521?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/caosiyang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2155120?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/carawaylj"&gt;&lt;img src="https://avatars.githubusercontent.com/u/69145751?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/charleskakumanu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/62761315?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/charlspjohn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14850736?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/chasingegg"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18375889?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/chengpu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2233492?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/chenxingqiang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12387235?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/chinamcafee"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3439961?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/chuangfengwang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24692397?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/chyezh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20332315?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cjrh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/480395?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/claireyuw"&gt;&lt;img src="https://avatars.githubusercontent.com/u/83751381?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/codacy-badger"&gt;&lt;img src="https://avatars.githubusercontent.com/u/23704769?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/codenoid"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14269809?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/codingjaguar"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7064054?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/congqixia"&gt;&lt;img src="https://avatars.githubusercontent.com/u/84113973?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/corest"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1071648?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/counter2015"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13608862?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cqy123456"&gt;&lt;img src="https://avatars.githubusercontent.com/u/39671710?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cuishuang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15921519?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cxie"&gt;&lt;img src="https://avatars.githubusercontent.com/u/653101?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cxytz01"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18002438?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cydrain"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3992404?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/czpmango"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26356194?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/czs007"&gt;&lt;img src="https://avatars.githubusercontent.com/u/59249785?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dandv"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33569?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dariocurr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48800335?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/datenhahn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13999666?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dd-He"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24242249?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dddddai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/41563853?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/del-zhenwu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56623710?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dengxiaohai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/137682492?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/disflyer"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22723892?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/divyaruhil"&gt;&lt;img src="https://avatars.githubusercontent.com/u/117009486?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/donno2048"&gt;&lt;img src="https://avatars.githubusercontent.com/u/61805754?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/drow931"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11514434?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dvzubarev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14878830?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dyhyfu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64584368?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eddumelendez"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1810547?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ehooi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1306183?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/elfisworking"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37609214?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eli-b"&gt;&lt;img src="https://avatars.githubusercontent.com/u/834999?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/elstic"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48523564?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/emmanuel-ferdman"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35470921?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eolivelli"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9469110?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/erdustiggen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/25433850?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/feisiyicl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64510805?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/fengjun2016"&gt;&lt;img src="https://avatars.githubusercontent.com/u/23044049?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/filip-halt"&gt;&lt;img src="https://avatars.githubusercontent.com/u/81822489?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/filipecaixeta"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1094052?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/fishpenguin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/49153041?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/forsaken628"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18322364?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/foxspy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11503321?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/franciscojavierarceo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4163062?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/freestsoul"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3909908?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gcmutator"&gt;&lt;img src="https://avatars.githubusercontent.com/u/134900551?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ggaaooppeenngg"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4769989?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gifi-siby"&gt;&lt;img src="https://avatars.githubusercontent.com/u/176461003?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/git-hulk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4987594?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/godchen0212"&gt;&lt;img src="https://avatars.githubusercontent.com/u/67679556?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gracezzzzz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56617657?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/grtoverflow"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8500564?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gruebel"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33207684?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/guimou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3944034?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gujun720"&gt;&lt;img src="https://avatars.githubusercontent.com/u/53246671?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/guoxiangzhou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/52496626?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hadim"&gt;&lt;img src="https://avatars.githubusercontent.com/u/528003?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/haorenfsa"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15938850?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hckex"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33862757?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hedane"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12457872?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/henryoswald"&gt;&lt;img src="https://avatars.githubusercontent.com/u/343366?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hishope"&gt;&lt;img src="https://avatars.githubusercontent.com/u/153272819?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/huanghaoyuanhhy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/103482615?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/huangjincheng2022"&gt;&lt;img src="https://avatars.githubusercontent.com/u/98305308?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ibrahimhaddad"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1656002?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/im-ajaymeena"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19550841?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ireneontheway5"&gt;&lt;img src="https://avatars.githubusercontent.com/u/75291211?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/iynewz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/81401074?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/izapolsk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21039333?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jackyu2020"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64533877?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jaelgu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/86251631?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jaime0815"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4024711?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jeffoverflow"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24581746?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jenkoon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/27683687?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jennyli-z"&gt;&lt;img src="https://avatars.githubusercontent.com/u/93511422?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jhonroxton"&gt;&lt;img src="https://avatars.githubusercontent.com/u/105436184?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jiangke-sr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/68629395?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jiangyinzuo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40995042?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jiaoew1991"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2297455?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jielinxu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/52057195?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jingkl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34296482?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jjyaoao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/88936287?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jkx8fc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/31717785?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/joeyjooste"&gt;&lt;img src="https://avatars.githubusercontent.com/u/72280325?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/john-h-luo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/67673717?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jperez999"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37191411?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/juliens"&gt;&lt;img src="https://avatars.githubusercontent.com/u/195661?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/junjiejiangjjj"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14136703?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jyc4617"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3044583?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/kartikcho"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48270786?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/kateshaowanjou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58837504?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/klboke"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18591662?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/laipz8200"&gt;&lt;img src="https://avatars.githubusercontent.com/u/16485841?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/laurazhao0611"&gt;&lt;img src="https://avatars.githubusercontent.com/u/192320184?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lee-eve"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9720105?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lentitude2tk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/108672767?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/leonardokidd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14940941?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/letian-jiang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/16740944?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/letme5"&gt;&lt;img src="https://avatars.githubusercontent.com/u/76860836?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/leykun10"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45382760?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lhotari"&gt;&lt;img src="https://avatars.githubusercontent.com/u/66864?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/liliu-z"&gt;&lt;img src="https://avatars.githubusercontent.com/u/105927039?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/linhgao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/102851605?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/liyun95"&gt;&lt;img src="https://avatars.githubusercontent.com/u/105278390?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/locustbaby"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21237232?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/loguo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15364733?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/longjiquan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/31589260?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lowener"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9810050?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lsgrep"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3893940?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lwglgy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26682620?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/madogar"&gt;&lt;img src="https://avatars.githubusercontent.com/u/36537062?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/maksspace"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9841409?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/matchyc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57976772?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/matrixji"&gt;&lt;img src="https://avatars.githubusercontent.com/u/183388?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mausch"&gt;&lt;img src="https://avatars.githubusercontent.com/u/95194?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mcamou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/87200?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/michaelkl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1443825?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mihailyanchev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34907806?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mileyzjq"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37039827?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/milvus-ci-robot"&gt;&lt;img src="https://avatars.githubusercontent.com/u/87847967?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mimoning"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19261942?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/moe-of-faith"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5696721?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mohitreddy1996"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11742913?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nameczz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20559208?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/natoka"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1751024?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ncover21"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30241297?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nexttonever"&gt;&lt;img src="https://avatars.githubusercontent.com/u/31059690?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/neza2017"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34152706?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nianliuu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/136299351?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nish112022"&gt;&lt;img src="https://avatars.githubusercontent.com/u/148342058?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nustiueudinastea"&gt;&lt;img src="https://avatars.githubusercontent.com/u/588327?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/op-hunter"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5617677?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ownbylichaobao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37684963?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/panjf2000"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7496278?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/pengjeck"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14035577?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/phantom8548"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11576622?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/pingliu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6415493?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/pj1987111"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6268414?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ponponon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/38725104?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/preetham"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9149028?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/presburger"&gt;&lt;img src="https://avatars.githubusercontent.com/u/49336176?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/proost"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34047134?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/psc0606"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7888889?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/punkerpunker"&gt;&lt;img src="https://avatars.githubusercontent.com/u/54440025?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qbzenker"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51972064?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qixuan0212"&gt;&lt;img src="https://avatars.githubusercontent.com/u/135136620?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rahulmistri1997"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58909377?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rashgaroth"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50513263?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/richzw"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1590890?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ronnie-llamado"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35092029?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sachitolani"&gt;&lt;img src="https://avatars.githubusercontent.com/u/146494073?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sageanya"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37909674?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/saisona"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10884762?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/saivarunk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2976867?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sarah-inkeep"&gt;&lt;img src="https://avatars.githubusercontent.com/u/129242944?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/scipe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3996622?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/scsven"&gt;&lt;img src="https://avatars.githubusercontent.com/u/100122127?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/seo-jinBro"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17746814?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/septemberfd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40378371?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/shana0325"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33335490?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/shanghaikid"&gt;&lt;img src="https://avatars.githubusercontent.com/u/185051?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/shaoting-huang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/167743503?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/shengjh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46514371?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/shengjun1985"&gt;&lt;img src="https://avatars.githubusercontent.com/u/49774184?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/shiyu09"&gt;&lt;img src="https://avatars.githubusercontent.com/u/39143280?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/shiyu22"&gt;&lt;img src="https://avatars.githubusercontent.com/u/53459423?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/shunjiezhao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/90906581?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/siddarth99"&gt;&lt;img src="https://avatars.githubusercontent.com/u/38921750?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sileht"&gt;&lt;img src="https://avatars.githubusercontent.com/u/200878?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/simonwei97"&gt;&lt;img src="https://avatars.githubusercontent.com/u/119845914?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/siriusctrl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26541600?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/slobentanzer"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13223629?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/smackfu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1723952?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/smellthemoon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64083300?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/snyk-bot"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19733683?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/songxianj"&gt;&lt;img src="https://avatars.githubusercontent.com/u/107831450?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/soothing-rain"&gt;&lt;img src="https://avatars.githubusercontent.com/u/69466447?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/soulteary"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1500781?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sparknack"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22293270?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sre-ci-robot"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56469371?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sre-ro"&gt;&lt;img src="https://avatars.githubusercontent.com/u/93502486?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sreyan-ghosh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/60854658?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ss892714028"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34635663?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/stacyli-0601"&gt;&lt;img src="https://avatars.githubusercontent.com/u/218570478?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/stephen37"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6506810?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/stevetracvc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/70416691?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/stuartjing"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3454260?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sunby"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9817127?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sutcalag"&gt;&lt;img src="https://avatars.githubusercontent.com/u/83750738?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sworddish"&gt;&lt;img src="https://avatars.githubusercontent.com/u/219938?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/talentAN"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17634030?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tasty-gumi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/95212988?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/taydy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24822588?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tbickford"&gt;&lt;img src="https://avatars.githubusercontent.com/u/814232?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tedxu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/152654?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tedyu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/235188?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/testwill"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8717479?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/thywdy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56624359?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/timothycarambat"&gt;&lt;img src="https://avatars.githubusercontent.com/u/16845892?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tinkerlin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13817362?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tinswzy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30112657?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/topikachu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1520380?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/trovwu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/89676996?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tuwchia"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13282807?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ulovecode"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30142181?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/unfode"&gt;&lt;img src="https://avatars.githubusercontent.com/u/95689995?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/virgo-o"&gt;&lt;img src="https://avatars.githubusercontent.com/u/138708600?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/vladwa"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22994848?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/vsanna"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7834445?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/vtereshyn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/32247411?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wangting0128"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26307815?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/water32"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13234561?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wayblink"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18096561?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/weiliu1031"&gt;&lt;img src="https://avatars.githubusercontent.com/u/108661493?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/weishuo2"&gt;&lt;img src="https://avatars.githubusercontent.com/u/27938020?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wg1026688210"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14267759?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wh201906"&gt;&lt;img src="https://avatars.githubusercontent.com/u/62299611?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wscxyey"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48882296?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wwx441476"&gt;&lt;img src="https://avatars.githubusercontent.com/u/28601121?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wxyucs"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12595343?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wxywb"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5432721?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/wzymumon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46886508?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xaxys"&gt;&lt;img src="https://avatars.githubusercontent.com/u/28949072?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xiangzhouguo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/93316470?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xiaocai2333"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46207236?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xiaofan-luan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/83447078?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xiaohu4313888"&gt;&lt;img src="https://avatars.githubusercontent.com/u/39088547?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xiaowshi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45102896?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xiedeyantu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/49781471?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xige-16"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20124155?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xiyichan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34647972?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xlyslr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14070517?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xudalin0609"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35444753?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xuqiwe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57252655?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/xzshinan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7299894?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yah01"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12216890?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yahorbarkouski"&gt;&lt;img src="https://avatars.githubusercontent.com/u/94449298?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yamasite"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10089260?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yanliang567"&gt;&lt;img src="https://avatars.githubusercontent.com/u/82361606?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yellow-shine"&gt;&lt;img src="https://avatars.githubusercontent.com/u/149367927?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yelusion2"&gt;&lt;img src="https://avatars.githubusercontent.com/u/97278661?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yhmo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2282099?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yiuluchen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/23047684?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yiwangdr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/80064917?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yiwen92"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34636520?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yongpengli-z"&gt;&lt;img src="https://avatars.githubusercontent.com/u/103410837?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/youny626"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9016120?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yuyicai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13033733?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yxm1536"&gt;&lt;img src="https://avatars.githubusercontent.com/u/62009483?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zander-bobronnikov"&gt;&lt;img src="https://avatars.githubusercontent.com/u/183726703?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zc2638"&gt;&lt;img src="https://avatars.githubusercontent.com/u/28284116?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zc277584121"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17022025?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zengxy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11961641?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zerowe-seven"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57790060?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhagnlu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11935707?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhang787jun"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51014996?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhanshuyou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7420640?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhanxu33"&gt;&lt;img src="https://avatars.githubusercontent.com/u/16716445?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhengbuqian"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12147173?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhenwu-cn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2993941?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhikunyao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/129478994?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhoubo0317"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51948620?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhuwenxing"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12268675?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zhuyaguang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8857976?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zjjzyl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6939141?v=4" width="30px" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zxf2017"&gt;&lt;img src="https://avatars.githubusercontent.com/u/29620478?v=4" width="30px" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- Do not remove end of hero-bot --&gt;</description>
    </item>
    
    <item>
      <title>ZuodaoTech/everyone-can-use-english</title>
      <link>https://github.com/ZuodaoTech/everyone-can-use-english</link>
      <description>&lt;p&gt;人人都能用英语&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/assets/icon.png" alt="Clash" width="128" /&gt; 
&lt;/div&gt; 
&lt;h3 align="center"&gt; AI 是当今世界上最好的外语老师，Enjoy 做 AI 最好的助教。 &lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/deploy-1000h.yml"&gt;&lt;img src="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/deploy-1000h.yml/badge.svg?sanitize=true" alt="Deploy 1000h website" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/test-enjoy-app.yml"&gt;&lt;img src="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/test-enjoy-app.yml/badge.svg?sanitize=true" alt="Test Enjoy App" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/release-enjoy-app.yml"&gt;&lt;img src="https://github.com/ZuodaoTech/everyone-can-use-english/actions/workflows/release-enjoy-app.yml/badge.svg?sanitize=true" alt="Release Enjoy App" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fenjoy.bot%2Fapi%2Fconfig%2Fapp_version&amp;amp;query=%24.version&amp;amp;label=Latest&amp;amp;link=https%3A%2F%2F1000h.org%2Fenjoy-app%2Finstall.html" alt="Latest Version" /&gt; &lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fenjoy.bot%2Fapi%2Fbadges%2Frecordings" alt="Recording Duration" /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;网页版&lt;/h2&gt; 
&lt;p&gt;Enjoy 网页版已经上线，可访问 &lt;a href="https://enjoy.bot"&gt;https://enjoy.bot&lt;/a&gt; 直接使用。&lt;/p&gt; 
&lt;div align="center" style="display:flex;overflow:auto;gap:10px;"&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-audios.jpg" alt="Audios" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-add-audio.jpg" alt="Add Audio" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-audio-shadow.jpg" alt="Shadow" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-audio-assessment.jpg" alt="Assessment" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-new-chat.jpg" alt="New Chat" width="300" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/web-chat.jpg" alt="Chat" width="300" /&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h2&gt;桌面版安装及使用&lt;/h2&gt; 
&lt;p&gt;下载及使用相关说明，请参阅 &lt;a href="https://1000h.org/enjoy-app/"&gt;文档&lt;/a&gt;。&lt;/p&gt; 
&lt;h2&gt;预览&lt;/h2&gt; 
&lt;div align="center" style="display:flex;overflow:auto;"&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/home.png" alt="Home" width="800" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/shadow.png" alt="Home" width="800" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/assessment.png" alt="Home" width="800" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/document.png" alt="Home" width="800" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/enjoy/snapshots/chat.png" alt="Home" width="800" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;桌面版开发&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;yarn install
yarn enjoy:start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;相关阅读&lt;/h2&gt; 
&lt;h3&gt;一千小时（2024）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/intro.html"&gt;简要说明&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/training-tasks/kick-off.html"&gt;训练任务&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/sounds-of-american-english/0-intro.html"&gt;语音塑造&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/in-the-brain/01-inifinite.html"&gt;大脑内部&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://1000h.org/self-training/00-intro.html"&gt;自我训练&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;人人都能用英语（2010）&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/README.md"&gt;简介&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter1.md"&gt;第一章：起点&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter2.md"&gt;第二章：口语&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter3.md"&gt;第三章：语音&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter4.md"&gt;第四章：朗读&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter5.md"&gt;第五章：词典&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter6.md"&gt;第六章：语法&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter7.md"&gt;第七章：精读&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/chapter8.md"&gt;第八章：叮嘱&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ZuodaoTech/everyone-can-use-english/main/book/end.md"&gt;后记&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;常见问题&lt;/h2&gt; 
&lt;p&gt;请查询 &lt;a href="https://1000h.org/enjoy-app/faq.html"&gt;文档 FAQ&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Azure/azure-sdk-for-python</title>
      <link>https://github.com/Azure/azure-sdk-for-python</link>
      <description>&lt;p&gt;This repository is for active development of the Azure SDK for Python. For consumers of the SDK we recommend visiting our public developer docs at https://learn.microsoft.com/python/azure/ or our versioned developer docs at https://azure.github.io/azure-sdk-for-python.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure SDK for Python&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://azure.github.io/azure-sdk/releases/latest/python.html"&gt;&lt;img src="https://img.shields.io/badge/packages-latest-blue.svg?sanitize=true" alt="Packages" /&gt;&lt;/a&gt; &lt;a href="https://azuresdkartifacts.blob.core.windows.net/azure-sdk-for-python/dependencies/dependencies.html"&gt;&lt;img src="https://img.shields.io/badge/dependency-report-blue.svg?sanitize=true" alt="Dependencies" /&gt;&lt;/a&gt; &lt;a href="https://azuresdkartifacts.blob.core.windows.net/azure-sdk-for-python/dependencies/dependencyGraph/index.html"&gt;&lt;img src="https://img.shields.io/badge/dependency-graph-blue.svg?sanitize=true" alt="DepGraph" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/azure/"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/azure-core.svg?maxAge=2592000" alt="Python" /&gt;&lt;/a&gt; &lt;a href="https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=458&amp;amp;branchName=main"&gt;&lt;img src="https://dev.azure.com/azure-sdk/public/_apis/build/status/python/python%20-%20core%20-%20ci?branchName=main" alt="Build Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository is for the active development of the Azure SDK for Python. For consumers of the SDK we recommend visiting our &lt;a href="https://docs.microsoft.com/python/azure/"&gt;public developer docs&lt;/a&gt; or our versioned &lt;a href="https://azure.github.io/azure-sdk-for-python"&gt;developer docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;For your convenience, each service has a separate set of libraries that you can choose to use instead of one, large Azure package. To get started with a specific library, see the &lt;code&gt;README.md&lt;/code&gt; (or &lt;code&gt;README.rst&lt;/code&gt;) file located in the library's project folder.&lt;/p&gt; 
&lt;p&gt;You can find service libraries in the &lt;code&gt;/sdk&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;The client libraries are supported on Python 3.9 or later. For more details, please read our page on &lt;a href="https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy"&gt;Azure SDK for Python version support policy&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Packages available&lt;/h2&gt; 
&lt;p&gt;Each service might have a number of libraries available from each of the following categories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/#client-new-releases"&gt;Client - New Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/#client-previous-versions"&gt;Client - Previous Versions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/#management-new-releases"&gt;Management - New Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/#management-previous-versions"&gt;Management - Previous Versions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Client: New Releases&lt;/h3&gt; 
&lt;p&gt;New wave of packages that we are announcing as &lt;strong&gt;GA&lt;/strong&gt; and several that are currently releasing in &lt;strong&gt;preview&lt;/strong&gt;. These libraries allow you to use and consume existing resources and interact with them, for example: upload a blob. These libraries share several core functionalities such as: retries, logging, transport protocols, authentication protocols, etc. that can be found in the &lt;a href="https://github.com/Azure/azure-sdk-for-python/raw/main/sdk/core/azure-core"&gt;azure-core&lt;/a&gt; library. You can learn more about these libraries by reading guidelines that they follow &lt;a href="https://azure.github.io/azure-sdk/python/guidelines/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can find the &lt;a href="https://azure.github.io/azure-sdk/releases/latest/index.html#python"&gt;most up to date list of all of the new packages on our page&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;NOTE: If you need to ensure your code is ready for production use one of the stable, non-preview libraries.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Client: Previous Versions&lt;/h3&gt; 
&lt;p&gt;Last stable versions of packages that have been provided for usage with Azure and are production-ready. These libraries provide you with similar functionalities to the Preview ones as they allow you to use and consume existing resources and interact with them, for example: upload a blob. They might not implement the &lt;a href="https://azure.github.io/azure-sdk/python/guidelines/index.html"&gt;guidelines&lt;/a&gt; or have the same feature set as the November releases. They do however offer wider coverage of services.&lt;/p&gt; 
&lt;h3&gt;Management: New Releases&lt;/h3&gt; 
&lt;p&gt;A new set of management libraries that follow the &lt;a href="https://azure.github.io/azure-sdk/python/guidelines/"&gt;Azure SDK Design Guidelines for Python&lt;/a&gt; are now available. These new libraries provide a number of core capabilities that are shared amongst all Azure SDKs, including the intuitive Azure Identity library, an HTTP Pipeline with custom policies, error-handling, distributed tracing, and much more. Documentation and code samples for these new libraries can be found &lt;a href="https://aka.ms/azsdk/python/mgmt"&gt;here&lt;/a&gt;. In addition, a migration guide that shows how to transition from older versions of libraries is located &lt;a href="https://github.com/Azure/azure-sdk-for-python/raw/main/doc/sphinx/mgmt_quickstart.rst#migration-guide"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can find the &lt;a href="https://azure.github.io/azure-sdk/releases/latest/mgmt/python.html"&gt;most up to date list of all of the new packages on our page&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;NOTE: If you need to ensure your code is ready for production use one of the stable, non-preview libraries. Also, if you are experiencing authentication issues with the management libraries after upgrading certain packages, it's possible that you upgraded to the new versions of SDK without changing the authentication code, please refer to the migration guide mentioned above for proper instructions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Management: Previous Versions&lt;/h3&gt; 
&lt;p&gt;For a complete list of management libraries that enable you to provision and manage Azure resources, please &lt;a href="https://azure.github.io/azure-sdk/releases/latest/all/python.html"&gt;check here&lt;/a&gt;. They might not have the same feature set as the new releases but they do offer wider coverage of services. Management libraries can be identified by namespaces that start with &lt;code&gt;azure-mgmt-&lt;/code&gt;, e.g. &lt;code&gt;azure-mgmt-compute&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Need help?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;For detailed documentation visit our &lt;a href="https://aka.ms/python-docs"&gt;Azure SDK for Python documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;File an issue via &lt;a href="https://github.com/Azure/azure-sdk-for-python/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Check &lt;a href="https://stackoverflow.com/questions/tagged/azure+python"&gt;previous questions&lt;/a&gt; or ask new ones on StackOverflow using &lt;code&gt;azure&lt;/code&gt; and &lt;code&gt;python&lt;/code&gt; tags.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Data Collection&lt;/h2&gt; 
&lt;p&gt;The software may collect information about you and your use of the software and send it to Microsoft. Microsoft may use this information to provide services and improve our products and services. You may turn off the telemetry as described below. You can learn more about data collection and use in the help documentation and Microsoft’s &lt;a href="https://go.microsoft.com/fwlink/?LinkID=824704"&gt;privacy statement&lt;/a&gt;. For more information on the data collected by the Azure SDK, please visit the &lt;a href="https://azure.github.io/azure-sdk/general_azurecore.html#telemetry-policy"&gt;Telemetry Guidelines&lt;/a&gt; page.&lt;/p&gt; 
&lt;h3&gt;Telemetry Configuration&lt;/h3&gt; 
&lt;p&gt;Telemetry collection is on by default.&lt;/p&gt; 
&lt;p&gt;To opt out, you can disable telemetry at client construction. Define a &lt;code&gt;NoUserAgentPolicy&lt;/code&gt; class that is a subclass of &lt;code&gt;UserAgentPolicy&lt;/code&gt; with an &lt;code&gt;on_request&lt;/code&gt; method that does nothing. Then pass instance of this class as kwargs &lt;code&gt;user_agent_policy=NoUserAgentPolicy()&lt;/code&gt; during client creation. This will disable telemetry for all methods in the client. Do this for every new client.&lt;/p&gt; 
&lt;p&gt;The example below uses the &lt;code&gt;azure-storage-blob&lt;/code&gt; package. In your code, you can replace &lt;code&gt;azure-storage-blob&lt;/code&gt; with the package you are using.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import os
from azure.identity import ManagedIdentityCredential
from azure.storage.blob import BlobServiceClient
from azure.core.pipeline.policies import UserAgentPolicy


# Create your credential you want to use
mi_credential = ManagedIdentityCredential()

account_url = "https://&amp;lt;storageaccountname&amp;gt;.blob.core.windows.net"

# Set up user-agent override
class NoUserAgentPolicy(UserAgentPolicy):
    def on_request(self, request):
        pass

# Create the BlobServiceClient object
blob_service_client = BlobServiceClient(account_url, credential=mi_credential, user_agent_policy=NoUserAgentPolicy())

container_client = blob_service_client.get_container_client(container=&amp;lt;container_name&amp;gt;) 
# TODO: do something with the container client like download blob to a file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reporting security issues and security bugs&lt;/h3&gt; 
&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;a href="mailto:secure@microsoft.com"&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the &lt;a href="https://www.microsoft.com/msrc/faqs-report-an-issue"&gt;Security TechCenter&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;For details on contributing to this repository, see the &lt;a href="https://github.com/Azure/azure-sdk-for-python/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href="https://cla.microsoft.com"&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.&lt;/p&gt; 
&lt;p&gt;This project has adopted the &lt;a href="https://opensource.microsoft.com/codeofconduct/"&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href="https://opensource.microsoft.com/codeofconduct/faq/"&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href="mailto:opencode@microsoft.com"&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>expo/expo</title>
      <link>https://github.com/expo/expo</link>
      <description>&lt;p&gt;An open-source framework for making universal native apps with React. Expo runs on Android, iOS, and the web.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://expo.dev/"&gt; &lt;img alt="Expo logo" height="128" src="https://raw.githubusercontent.com/expo/expo/main/.github/resources/banner.png" /&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h1 align="center"&gt;&lt;a href="https://expo.dev/"&gt;Expo&lt;/a&gt;&lt;/h1&gt;
&lt;a href="https://expo.dev/"&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a aria-label="SDK version" href="https://www.npmjs.com/package/expo" target="_blank"&gt; &lt;img alt="Expo SDK version" src="https://img.shields.io/npm/v/expo.svg?style=flat-square&amp;amp;label=SDK&amp;amp;labelColor=000000&amp;amp;color=4630EB" /&gt; &lt;/a&gt; &lt;a aria-label="Chat or ask a question" href="https://chat.expo.dev" target="_blank"&gt; &lt;img alt="Chat or ask a question" src="https://img.shields.io/discord/695411232856997968.svg?style=flat-square&amp;amp;labelColor=000000&amp;amp;color=4630EB&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&amp;amp;label=Chat%20with%20us" /&gt; &lt;/a&gt; &lt;a aria-label="Expo is free to use" href="https://github.com/expo/expo/raw/main/LICENSE" target="_blank"&gt; &lt;img alt="License: MIT" src="https://img.shields.io/badge/License-MIT-success.svg?style=flat-square&amp;amp;color=33CC12" target="_blank" /&gt; &lt;/a&gt; &lt;a aria-label="expo downloads" href="http://www.npmtrends.com/expo" target="_blank"&gt; &lt;img alt="Downloads" src="https://img.shields.io/npm/dm/expo.svg?style=flat-square&amp;amp;labelColor=gray&amp;amp;color=33CC12&amp;amp;label=Downloads" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a aria-label="try expo with snack" href="https://snack.expo.dev"&gt;&lt;b&gt;Try Expo in the Browser&lt;/b&gt;&lt;/a&gt;  •  &lt;a aria-label="expo documentation" href="https://docs.expo.dev"&gt;Read the Documentation&lt;/a&gt;  •  &lt;a aria-label="expo documentation" href="https://expo.dev/blog"&gt;Learn more on our blog&lt;/a&gt;  •  &lt;a aria-label="expo documentation" href="https://expo.canny.io/feature-requests"&gt;Request a feature&lt;/a&gt; &lt;/p&gt; 
&lt;h6 align="center"&gt;Follow us on&lt;/h6&gt; 
&lt;p align="center"&gt; &lt;a aria-label="Follow @expo on X" href="https://x.com/intent/follow?screen_name=expo" target="_blank"&gt; &lt;img alt="Expo on X" src="https://img.shields.io/badge/X-000000?style=for-the-badge&amp;amp;logo=x&amp;amp;logoColor=white" target="_blank" /&gt; &lt;/a&gt;&amp;nbsp; &lt;a aria-label="Follow @expo on GitHub" href="https://github.com/expo" target="_blank"&gt; &lt;img alt="Expo on GitHub" src="https://img.shields.io/badge/GitHub-222222?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white" target="_blank" /&gt; &lt;/a&gt;&amp;nbsp; &lt;a aria-label="Follow @expo on Reddit" href="https://www.reddit.com/r/expo/" target="_blank"&gt; &lt;img alt="Expo on Reddit" src="https://img.shields.io/badge/Reddit-FF4500?style=for-the-badge&amp;amp;logo=reddit&amp;amp;logoColor=white" target="_blank" /&gt; &lt;/a&gt;&amp;nbsp; &lt;a aria-label="Follow @expo on Bluesky" href="https://bsky.app/profile/expo.dev" target="_blank"&gt; &lt;img alt="Expo on Bluesky" src="https://img.shields.io/badge/Bluesky-1DA1F2?style=for-the-badge&amp;amp;logo=bluesky&amp;amp;logoColor=white" target="_blank" /&gt; &lt;/a&gt;&amp;nbsp; &lt;a aria-label="Follow @expo on LinkedIn" href="https://www.linkedin.com/company/expo-dev" target="_blank"&gt; &lt;img alt="Expo on LinkedIn" src="https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white" target="_blank" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Expo is an open-source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript.&lt;/p&gt; 
&lt;p&gt;This repository includes the Expo SDK, Modules API, Go app, CLI, Router, documentation, and various other supporting tools. &lt;a href="https://expo.dev/eas"&gt;Expo Application Services (EAS)&lt;/a&gt; is a platform of hosted services that are deeply integrated with Expo open source tools. EAS helps you build, ship, and iterate on your app as an individual or a team.&lt;/p&gt; 
&lt;p&gt;Read the &lt;a href="https://expo.dev/guidelines"&gt;Expo Community Guidelines&lt;/a&gt; before interacting in the repository. Thank you for helping keep the Expo community open and welcoming!&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/#-documentation"&gt;📚 Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/#-project-layout"&gt;🗺 Project Layout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/#-badges"&gt;🏅 Badges&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/#-contributing"&gt;👏 Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/#-faq"&gt;❓ FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/#-the-team"&gt;💙 The Team&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;p&gt;Learn about building and deploying universal apps &lt;a aria-label="expo documentation" href="https://docs.expo.dev"&gt;in our official docs!&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.expo.dev/"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.expo.dev/versions/latest/"&gt;API Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.expo.dev/workflow/customizing/"&gt;Using Custom Native Modules&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🗺 Project Layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/packages"&gt;&lt;code&gt;packages&lt;/code&gt;&lt;/a&gt; All the source code for Expo modules, if you want to edit a library or just see how it works this is where you'll find it.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/apps"&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; This is where you can find Expo projects which are linked to the development modules. You'll do most of your testing in here.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/apps/expo-go"&gt;&lt;code&gt;apps/expo-go&lt;/code&gt;&lt;/a&gt; This is where you can find the source code for Expo Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/apps/expo-go/ios"&gt;&lt;code&gt;apps/expo-go/ios/Exponent.xcworkspace&lt;/code&gt;&lt;/a&gt; is the Xcode workspace. When developing iOS, always open this instead of &lt;code&gt;Exponent.xcodeproj&lt;/code&gt; because the workspace also loads the CocoaPods dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/docs"&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; The source code for &lt;strong&gt;&lt;a href="https://docs.expo.dev"&gt;https://docs.expo.dev&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/templates"&gt;&lt;code&gt;templates&lt;/code&gt;&lt;/a&gt; The template projects you get when you run &lt;code&gt;npx create-expo-app&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/react-native-lab"&gt;&lt;code&gt;react-native-lab&lt;/code&gt;&lt;/a&gt; This is our fork of &lt;code&gt;react-native&lt;/code&gt; used to build Expo Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/guides"&gt;&lt;code&gt;guides&lt;/code&gt;&lt;/a&gt; In-depth tutorials for advanced topics like contributing to the client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/tools"&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt; contain build and configuration tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/template-files"&gt;&lt;code&gt;template-files&lt;/code&gt;&lt;/a&gt; contains templates for files that require private keys. They are populated using the keys in &lt;code&gt;template-files/keys.json&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/expo/expo/main/template-files/ios/dependencies.json"&gt;&lt;code&gt;template-files/ios/dependencies.json&lt;/code&gt;&lt;/a&gt; specifies the CocoaPods dependencies of the app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🏅 Badges&lt;/h2&gt; 
&lt;p&gt;Let everyone know your app can be run instantly in the &lt;em&gt;Expo Go&lt;/em&gt; app! &lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://expo.dev/client"&gt;&lt;img src="https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000" alt="runs with Expo Go" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://expo.dev/client"&gt;&lt;img src="https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000" alt="runs with Expo Go" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-md"&gt;[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000)](https://expo.dev/client)

[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&amp;amp;logo=EXPO&amp;amp;labelColor=f3f3f3&amp;amp;logoColor=000)](https://expo.dev/client)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;👏 Contributing&lt;/h2&gt; 
&lt;p&gt;If you like Expo and want to help make it better then check out our &lt;a href="https://raw.githubusercontent.com/expo/expo/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;! Check out the &lt;a href="https://github.com/expo/expo/tree/main/packages/%40expo/cli"&gt;CLI package&lt;/a&gt; to work on the Expo CLI.&lt;/p&gt; 
&lt;h2&gt;❓ FAQ&lt;/h2&gt; 
&lt;p&gt;If you have questions about Expo and want answers, then check out our &lt;a href="https://docs.expo.dev/faq/"&gt;Frequently Asked Questions&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;If you still have questions you can ask them on our &lt;a href="https://chat.expo.dev"&gt;Discord and Forums&lt;/a&gt; or X &lt;a href="https://x.com/expo"&gt;@expo&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;💙 The Team&lt;/h2&gt; 
&lt;p&gt;Curious about who makes Expo? Here are our &lt;a href="https://expo.dev/about"&gt;team members&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The Expo source code is made available under the &lt;a href="https://raw.githubusercontent.com/expo/expo/main/LICENSE"&gt;MIT license&lt;/a&gt;. Some of the dependencies are licensed differently, with the BSD license, for example.&lt;/p&gt; 
&lt;img alt="Star the Expo repo on GitHub to support the project" src="https://user-images.githubusercontent.com/9664363/185428788-d762fd5d-97b3-4f59-8db7-f72405be9677.gif" width="50%" /&gt;</description>
    </item>
    
    <item>
      <title>modelcontextprotocol/registry</title>
      <link>https://github.com/modelcontextprotocol/registry</link>
      <description>&lt;p&gt;A community driven registry service for Model Context Protocol (MCP) servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Registry&lt;/h1&gt; 
&lt;p&gt;The MCP registry provides MCP clients with a list of MCP servers, like an app store for MCP servers.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/docs/guides/publishing/publish-server.md"&gt;&lt;strong&gt;📤 Publish my MCP server&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://registry.modelcontextprotocol.io/docs"&gt;&lt;strong&gt;⚡️ Live API docs&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/docs/explanations/ecosystem-vision.md"&gt;&lt;strong&gt;👀 Ecosystem vision&lt;/strong&gt;&lt;/a&gt; | 📖 &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/docs"&gt;Full documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Development Status&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;2025-09-08 update&lt;/strong&gt;: The registry has launched in preview 🎉 (&lt;a href="https://blog.modelcontextprotocol.io/posts/2025-09-08-mcp-registry-preview/"&gt;announcement blog post&lt;/a&gt;). While the system is now more stable, this is still a preview release and breaking changes or data resets may occur. A general availability (GA) release will follow later. We'd love your feedback in &lt;a href="https://github.com/modelcontextprotocol/registry/discussions/new?category=ideas"&gt;GitHub discussions&lt;/a&gt; or in the &lt;a href="https://discord.com/channels/1358869848138059966/1369487942862504016"&gt;#registry-dev Discord&lt;/a&gt; (&lt;a href="https://modelcontextprotocol.io/community/communication"&gt;joining details here&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Current key maintainers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Adam Jones&lt;/strong&gt; (Anthropic) &lt;a href="https://github.com/domdomegg"&gt;@domdomegg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tadas Antanavicius&lt;/strong&gt; (PulseMCP) &lt;a href="https://github.com/tadasant"&gt;@tadasant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Toby Padilla&lt;/strong&gt; (GitHub) &lt;a href="https://github.com/toby"&gt;@toby&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We use multiple channels for collaboration - see &lt;a href="https://modelcontextprotocol.io/community/communication"&gt;modelcontextprotocol.io/community/communication&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Often (but not always) ideas flow through this pipeline:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://modelcontextprotocol.io/community/communication"&gt;Discord&lt;/a&gt;&lt;/strong&gt; - Real-time community discussions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/modelcontextprotocol/registry/discussions"&gt;Discussions&lt;/a&gt;&lt;/strong&gt; - Propose and discuss product/technical requirements&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/modelcontextprotocol/registry/issues"&gt;Issues&lt;/a&gt;&lt;/strong&gt; - Track well-scoped technical work&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/modelcontextprotocol/registry/pulls"&gt;Pull Requests&lt;/a&gt;&lt;/strong&gt; - Contribute work towards issues&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Quick start:&lt;/h3&gt; 
&lt;h4&gt;Pre-requisites&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Go 1.24.x&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;golangci-lint v2.4.0&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Running the server&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start full development environment
make dev-compose
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This starts the registry at &lt;a href="http://localhost:8080"&gt;&lt;code&gt;localhost:8080&lt;/code&gt;&lt;/a&gt; with PostgreSQL and seed data. It can be configured with environment variables in &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt; - see &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/.env.example"&gt;.env.example&lt;/a&gt; for a reference.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Alternative: Local setup without Docker&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;PostgreSQL running locally&lt;/li&gt; 
  &lt;li&gt;Go 1.24.x installed&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Build and run locally
make build
make dev-local
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The service runs on &lt;a href="http://localhost:8080"&gt;&lt;code&gt;localhost:8080&lt;/code&gt;&lt;/a&gt; by default. This can be configured with environment variables in &lt;code&gt;.env&lt;/code&gt; - see &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/.env.example"&gt;.env.example&lt;/a&gt; for a reference.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Alternative: Running a pre-built Docker image&lt;/summary&gt; 
 &lt;p&gt;Pre-built Docker images are automatically published to GitHub Container Registry:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Run latest stable release
docker run -p 8080:8080 ghcr.io/modelcontextprotocol/registry:latest

# Run latest from main branch (continuous deployment)
docker run -p 8080:8080 ghcr.io/modelcontextprotocol/registry:main

# Run specific release version
docker run -p 8080:8080 ghcr.io/modelcontextprotocol/registry:v1.0.0

# Run development build from main branch
docker run -p 8080:8080 ghcr.io/modelcontextprotocol/registry:main-20250906-abc123d
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Available tags:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Releases&lt;/strong&gt;: &lt;code&gt;latest&lt;/code&gt;, &lt;code&gt;v1.0.0&lt;/code&gt;, &lt;code&gt;v1.1.0&lt;/code&gt;, etc.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Continuous&lt;/strong&gt;: &lt;code&gt;main&lt;/code&gt; (latest main branch build)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Development&lt;/strong&gt;: &lt;code&gt;main-&amp;lt;date&amp;gt;-&amp;lt;sha&amp;gt;&lt;/code&gt; (specific commit builds)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h4&gt;Publishing a server&lt;/h4&gt; 
&lt;p&gt;To publish a server, we've built a simple CLI. You can use it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build the latest CLI
make publisher

# Use it!
./bin/mcp-publisher --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/docs/guides/publishing/publish-server.md"&gt;the publisher guide&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h4&gt;Other commands&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run lint, unit tests and integration tests
make check
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are also a few more helpful commands for development. Run &lt;code&gt;make help&lt;/code&gt; to learn more, or look in &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/Makefile"&gt;Makefile&lt;/a&gt;.&lt;/p&gt; 
&lt;!--
For Claude and other AI tools: Always prefer make targets over custom commands where possible.
--&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;h3&gt;Project Structure&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;├── cmd/                     # Application entry points
│   └── publisher/           # Server publishing tool
├── data/                    # Seed data
├── deploy/                  # Deployment configuration (Pulumi)
├── docs/                    # Documentation
├── internal/                # Private application code
│   ├── api/                 # HTTP handlers and routing
│   ├── auth/                # Authentication (GitHub OAuth, JWT, namespace blocking)
│   ├── config/              # Configuration management
│   ├── database/            # Data persistence (PostgreSQL, in-memory)
│   ├── service/             # Business logic
│   ├── telemetry/           # Metrics and monitoring
│   └── validators/          # Input validation
├── pkg/                     # Public packages
│   ├── api/                 # API types and structures
│   │   └── v0/              # Version 0 API types
│   └── model/               # Data models for server.json
├── scripts/                 # Development and testing scripts
├── tests/                   # Integration tests
└── tools/                   # CLI tools and utilities
    └── validate-*.sh        # Schema validation tools
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authentication&lt;/h3&gt; 
&lt;p&gt;Publishing supports multiple authentication methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub OAuth&lt;/strong&gt; - For publishing by logging into GitHub&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub OIDC&lt;/strong&gt; - For publishing from GitHub Actions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DNS verification&lt;/strong&gt; - For proving ownership of a domain and its subdomains&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP verification&lt;/strong&gt; - For proving ownership of a domain&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The registry validates namespace ownership when publishing. E.g. to publish...:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;io.github.domdomegg/my-cool-mcp&lt;/code&gt; you must login to GitHub as &lt;code&gt;domdomegg&lt;/code&gt;, or be in a GitHub Action on domdomegg's repos&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;me.adamjones/my-cool-mcp&lt;/code&gt; you must prove ownership of &lt;code&gt;adamjones.me&lt;/code&gt; via DNS or HTTP challenge&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;More documentation&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/docs"&gt;documentation&lt;/a&gt; for more details if your question has not been answered here!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grpc/grpc-go</title>
      <link>https://github.com/grpc/grpc-go</link>
      <description>&lt;p&gt;The Go language implementation of gRPC. HTTP/2 based RPC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC-Go&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/google.golang.org/grpc"&gt;&lt;img src="https://pkg.go.dev/badge/google.golang.org/grpc" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/grpc/grpc-go"&gt;&lt;img src="https://goreportcard.com/badge/grpc/grpc-go" alt="GoReportCard" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/grpc/grpc-go"&gt;&lt;img src="https://codecov.io/gh/grpc/grpc-go/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://golang.org"&gt;Go&lt;/a&gt; implementation of &lt;a href="https://grpc.io"&gt;gRPC&lt;/a&gt;: A high performance, open source, general RPC framework that puts mobile and HTTP/2 first. For more information see the &lt;a href="https://grpc.io/docs/languages/go"&gt;Go gRPC docs&lt;/a&gt;, or jump directly into the &lt;a href="https://grpc.io/docs/languages/go/quickstart"&gt;quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://golang.org"&gt;Go&lt;/a&gt;&lt;/strong&gt;: any one of the &lt;strong&gt;two latest major&lt;/strong&gt; &lt;a href="https://golang.org/doc/devel/release.html"&gt;releases&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Simply add the following import to your code, and then &lt;code&gt;go [build|run|test]&lt;/code&gt; will automatically fetch the necessary dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "google.golang.org/grpc"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are trying to access &lt;code&gt;grpc-go&lt;/code&gt; from &lt;strong&gt;China&lt;/strong&gt;, see the &lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/#FAQ"&gt;FAQ&lt;/a&gt; below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Learn more&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grpc.io/docs/languages/go"&gt;Go gRPC docs&lt;/a&gt;, which include a &lt;a href="https://grpc.io/docs/languages/go/quickstart"&gt;quick start&lt;/a&gt; and &lt;a href="https://pkg.go.dev/google.golang.org/grpc"&gt;API reference&lt;/a&gt; among other resources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/Documentation"&gt;Low-level technical docs&lt;/a&gt; from this repository&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5180705743044608"&gt;Performance benchmark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/CONTRIBUTING.md"&gt;Contribution guidelines&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;I/O Timeout Errors&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;golang.org&lt;/code&gt; domain may be blocked from some countries. &lt;code&gt;go get&lt;/code&gt; usually produces an error like the following when this happens:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ go get -u google.golang.org/grpc
package google.golang.org/grpc: unrecognized import path "google.golang.org/grpc" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build Go code, there are several options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Set up a VPN and access google.golang.org through that.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;With Go module support: it is possible to use the &lt;code&gt;replace&lt;/code&gt; feature of &lt;code&gt;go mod&lt;/code&gt; to create aliases for golang.org packages. In your project's directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;go mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest
go mod tidy
go mod vendor
go build -mod=vendor
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, this will need to be done for all transitive dependencies hosted on golang.org as well. For details, refer to &lt;a href="https://github.com/golang/go/issues/28652"&gt;golang/go issue #28652&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compiling error, undefined: grpc.SupportPackageIsVersion&lt;/h3&gt; 
&lt;p&gt;Please update to the latest version of gRPC-Go using &lt;code&gt;go get google.golang.org/grpc&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;How to turn on logging&lt;/h3&gt; 
&lt;p&gt;The default logger is controlled by environment variables. Turn everything on like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99
$ export GRPC_GO_LOG_SEVERITY_LEVEL=info
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The RPC failed with error &lt;code&gt;"code = Unavailable desc = transport is closing"&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This error means the connection the RPC is using was closed, and there are many possible reasons, including:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;mis-configured transport credentials, connection failed on handshaking&lt;/li&gt; 
 &lt;li&gt;bytes disrupted, possibly by a proxy in between&lt;/li&gt; 
 &lt;li&gt;server shutdown&lt;/li&gt; 
 &lt;li&gt;Keepalive parameters caused connection shutdown, for example if you have configured your server to terminate connections regularly to &lt;a href="https://github.com/grpc/grpc-go/issues/3170#issuecomment-552517779"&gt;trigger DNS lookups&lt;/a&gt;. If this is the case, you may want to increase your &lt;a href="https://pkg.go.dev/google.golang.org/grpc/keepalive?tab=doc#ServerParameters"&gt;MaxConnectionAgeGrace&lt;/a&gt;, to allow longer RPC calls to finish.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;It can be tricky to debug this because the error happens on the client side but the root cause of the connection being closed is on the server side. Turn on logging on &lt;strong&gt;both client and server&lt;/strong&gt;, and see if there are any transport errors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kamranahmedse/developer-roadmap</title>
      <link>https://github.com/kamranahmedse/developer-roadmap</link>
      <description>&lt;p&gt;Interactive roadmaps, guides and other educational content to help developers grow in their careers.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://roadmap.sh/"&gt;&lt;img src="https://raw.githubusercontent.com/kamranahmedse/developer-roadmap/master/public/img/brand.png" height="128" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2 align="center"&gt;&lt;a href="https://roadmap.sh"&gt;roadmap.sh&lt;/a&gt;&lt;/h2&gt; 
&lt;p align="center"&gt;Community driven roadmaps, articles and resources for developers&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; &lt;a href="https://roadmap.sh/roadmaps"&gt; &lt;img src="https://img.shields.io/badge/%E2%9C%A8-Roadmaps%20-0a0a0a.svg?style=flat&amp;amp;colorA=0a0a0a" alt="roadmaps" /&gt; &lt;/a&gt; &lt;a href="https://roadmap.sh/best-practices"&gt; &lt;img src="https://img.shields.io/badge/%E2%9C%A8-Best%20Practices-0a0a0a.svg?style=flat&amp;amp;colorA=0a0a0a" alt="best practices" /&gt; &lt;/a&gt; &lt;a href="https://roadmap.sh/questions"&gt; &lt;img src="https://img.shields.io/badge/%E2%9C%A8-Questions-0a0a0a.svg?style=flat&amp;amp;colorA=0a0a0a" alt="videos" /&gt; &lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UCA0H2KIWgWTwpTFjSxp0now?sub_confirmation=1"&gt; &lt;img src="https://img.shields.io/badge/%E2%9C%A8-YouTube%20Channel-0a0a0a.svg?style=flat&amp;amp;colorA=0a0a0a" alt="roadmaps" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/waxVImv.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;Roadmaps are now interactive, you can click the nodes to read more about the topics.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://roadmap.sh"&gt;View all Roadmaps&lt;/a&gt; &amp;nbsp;·&amp;nbsp; &lt;a href="https://roadmap.sh/best-practices"&gt;Best Practices&lt;/a&gt; &amp;nbsp;·&amp;nbsp; &lt;a href="https://roadmap.sh/questions"&gt;Questions&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/waxVImv.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;Here is the list of available roadmaps with more being actively worked upon.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Have a look at the &lt;a href="https://roadmap.sh/get-started"&gt;get started&lt;/a&gt; page that might help you pick up a path.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/frontend"&gt;Frontend Roadmap&lt;/a&gt; / &lt;a href="https://roadmap.sh/frontend?r=frontend-beginner"&gt;Frontend Beginner Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/backend"&gt;Backend Roadmap&lt;/a&gt; / &lt;a href="https://roadmap.sh/backend?r=backend-beginner"&gt;Backend Beginner Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/devops"&gt;DevOps Roadmap&lt;/a&gt; / &lt;a href="https://roadmap.sh/devops?r=devops-beginner"&gt;DevOps Beginner Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/full-stack"&gt;Full Stack Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/git-github"&gt;Git and GitHub&lt;/a&gt; / &lt;a href="https://roadmap.sh/git-github?r=git-github-beginner"&gt;Git and GitHub Beginner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/api-design"&gt;API Design Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/computer-science"&gt;Computer Science Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/datastructures-and-algorithms"&gt;Data Structures and Algorithms Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ai-data-scientist"&gt;AI and Data Scientist Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ai-engineer"&gt;AI Engineer Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/aws"&gt;AWS Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/cloudflare"&gt;Cloudflare Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/linux"&gt;Linux Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/terraform"&gt;Terraform Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/data-analyst"&gt;Data Analyst Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/bi-analyst"&gt;BI Analyst Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/data-engineer"&gt;Data Engineer Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/machine-learning"&gt;Machine Learning Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/mlops"&gt;MLOps Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/product-manager"&gt;Product Manager Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/engineering-manager"&gt;Engineering Manager Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/qa"&gt;QA Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/python"&gt;Python Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/software-architect"&gt;Software Architect Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/game-developer"&gt;Game Developer Roadmap&lt;/a&gt; / &lt;a href="https://roadmap.sh/server-side-game-developer"&gt;Server Side Game Developer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/software-design-architecture"&gt;Software Design and Architecture Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/javascript"&gt;JavaScript Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/typescript"&gt;TypeScript Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/cpp"&gt;C++ Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/react"&gt;React Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/nextjs"&gt;Next.js Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/react-native"&gt;React Native Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/vue"&gt;Vue Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/angular"&gt;Angular Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/nodejs"&gt;Node.js Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/php"&gt;PHP Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/graphql"&gt;GraphQL Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/android"&gt;Android Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ios"&gt;iOS Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/flutter"&gt;Flutter Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/golang"&gt;Go Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/rust"&gt;Rust Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/java"&gt;Java Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/kotlin"&gt;Kotlin Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/spring-boot"&gt;Spring Boot Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/design-system"&gt;Design System Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/postgresql-dba"&gt;PostgreSQL Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/sql"&gt;SQL Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/redis"&gt;Redis Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/blockchain"&gt;Blockchain Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/aspnet-core"&gt;ASP.NET Core Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/system-design"&gt;System Design Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/kubernetes"&gt;Kubernetes Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/cyber-security"&gt;Cyber Security Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/mongodb"&gt;MongoDB Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ux-design"&gt;UX Design Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/docker"&gt;Docker Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/prompt-engineering"&gt;Prompt Engineering Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/technical-writer"&gt;Technical Writer Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/devrel"&gt;DevRel Engineer Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ai-red-teaming"&gt;AI Red Teaming Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/ai-agents"&gt;AI Agents Roadmap&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are also interactive best practices:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/backend-performance"&gt;Backend Performance Best Practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/frontend-performance"&gt;Frontend Performance Best Practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/code-review"&gt;Code Review Best Practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/api-security"&gt;API Security Best Practices&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/best-practices/aws"&gt;AWS Best Practices&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;..and questions to help you test, rate and improve your knowledge&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/javascript"&gt;JavaScript Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/nodejs"&gt;Node.js Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/react"&gt;React Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/backend"&gt;Backend Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://roadmap.sh/questions/frontend"&gt;Frontend Questions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/waxVImv.png" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;Share with the community&lt;/h2&gt; 
&lt;p&gt;Please consider sharing a post about &lt;a href="https://roadmap.sh"&gt;roadmap.sh&lt;/a&gt; and the value it provides. It really does help!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://reddit.com/submit?url=https://roadmap.sh&amp;amp;title=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers"&gt;&lt;img src="https://img.shields.io/badge/share%20on-reddit-red?logo=reddit" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://news.ycombinator.com/submitlink?u=https://roadmap.sh"&gt;&lt;img src="https://img.shields.io/badge/share%20on-hacker%20news-orange?logo=ycombinator" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/share?url=https://roadmap.sh&amp;amp;text=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers"&gt;&lt;img src="https://img.shields.io/badge/share%20on-twitter-03A9F4?logo=twitter" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://www.facebook.com/sharer/sharer.php?u=https://roadmap.sh"&gt;&lt;img src="https://img.shields.io/badge/share%20on-facebook-1976D2?logo=facebook" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/shareArticle?url=https://roadmap.sh&amp;amp;title=Interactive%20roadmaps,%20guides%20and%20other%20educational%20content%20for%20Developers"&gt;&lt;img src="https://img.shields.io/badge/share%20on-linkedin-3949AB?logo=linkedin" alt="GitHub Repo stars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;Clone the repository, install the dependencies and start the application&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone git@github.com:kamranahmedse/developer-roadmap.git
cd developer-roadmap
npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: use the &lt;code&gt;depth&lt;/code&gt; parameter to reduce the clone size and speed up the clone.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone --depth=1 https://github.com/kamranahmedse/developer-roadmap.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Have a look at &lt;a href="https://raw.githubusercontent.com/kamranahmedse/developer-roadmap/master/contributing.md"&gt;contribution docs&lt;/a&gt; for how to update any of the roadmaps&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add content to roadmaps&lt;/li&gt; 
 &lt;li&gt;Add new roadmaps&lt;/li&gt; 
 &lt;li&gt;Suggest changes to existing roadmaps&lt;/li&gt; 
 &lt;li&gt;Discuss ideas in issues&lt;/li&gt; 
 &lt;li&gt;Spread the word&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks to all contributors ❤&lt;/h2&gt; 
&lt;a href="https://github.com/kamranahmedse/developer-roadmap/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=kamranahmedse/developer-roadmap" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Have a look at the &lt;a href="https://raw.githubusercontent.com/kamranahmedse/developer-roadmap/master/license"&gt;license file&lt;/a&gt; for details&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kyverno/kyverno</title>
      <link>https://github.com/kyverno/kyverno</link>
      <description>&lt;p&gt;Cloud Native Policy Management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kyverno &lt;a href="https://twitter.com/intent/tweet?text=Cloud%20Native%20Policy%20Management.%20No%20new%20language%20required%1&amp;amp;url=https://github.com/kyverno/kyverno/&amp;amp;hashtags=kubernetes,devops"&gt;&lt;img src="https://img.shields.io/twitter/url/http/shields.io.svg?style=social" alt="Tweet" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Cloud Native Policy Management 🎉&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/kyverno/kyverno/actions"&gt;&lt;img src="https://github.com/kyverno/kyverno/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/kyverno/kyverno"&gt;&lt;img src="https://goreportcard.com/badge/github.com/kyverno/kyverno" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/license/kyverno/kyverno?color=blue" alt="License: Apache-2.0" /&gt; &lt;a href="https://github.com/kyverno/kyverno/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/kyverno/kyverno" alt="GitHub Repo stars" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/5327"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/5327/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://securityscorecards.dev/viewer/?uri=github.com/kyverno/kyverno"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/kyverno/kyverno/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://slsa.dev"&gt;&lt;img src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true" alt="SLSA 3" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/search?repo=kyverno"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/kyverno" alt="Artifact HUB" /&gt;&lt;/a&gt; &lt;a href="https://app.codecov.io/gh/kyverno/kyverno/branch/main"&gt;&lt;img src="https://codecov.io/gh/kyverno/kyverno/branch/main/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fkyverno%2Fkyverno?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fkyverno%2Fkyverno.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt;&lt;a href="https://kyverno.io" rel="kyverno.io"&gt;&lt;img src="https://raw.githubusercontent.com/kyverno/kyverno/main/img/Kyverno_Horizontal.png" alt="Kyverno Logo" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📑 Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#about-kyverno"&gt;About Kyverno&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#-documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#-demos--tutorials"&gt;Demos &amp;amp; Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#-popular-use-cases"&gt;Popular Use Cases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#-explore-the-policy-library"&gt;Explore the Policy Library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#-getting-help"&gt;Getting Help&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#-contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#software-bill-of-materials"&gt;Software Bill of Materials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#-community-highlights"&gt;Community Highlights&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About Kyverno&lt;/h2&gt; 
&lt;p&gt;Kyverno is a Kubernetes-native policy engine designed for platform engineering teams. It enables security, compliance, automation, and governance through policy-as-code. Kyverno can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Validate, mutate, generate, and clean up resources using Kubernetes admission controls and background scans.&lt;/li&gt; 
 &lt;li&gt;Verify container image signatures for supply chain security.&lt;/li&gt; 
 &lt;li&gt;Operate with tools you already use — like &lt;code&gt;kubectl&lt;/code&gt;, &lt;code&gt;kustomize&lt;/code&gt;, and Git.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;a href="https://opensourcesecurityindex.io/" target="_blank" rel="noopener"&gt; &lt;img src="https://opensourcesecurityindex.io/badge.svg?sanitize=true" alt="Open Source Security Index badge" width="282" height="56" /&gt; &lt;/a&gt; 
&lt;h2&gt;📙 Documentation&lt;/h2&gt; 
&lt;p&gt;Kyverno installation and reference documentation is available at &lt;a href="https://kyverno.io"&gt;kyverno.io&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;👉 &lt;strong&gt;&lt;a href="https://kyverno.io/docs/introduction/#quick-start"&gt;Quick Start&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;👉 &lt;strong&gt;&lt;a href="https://kyverno.io/docs/installation/"&gt;Installation Guide&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;👉 &lt;strong&gt;&lt;a href="https://kyverno.io/policies/"&gt;Policy Library&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎥 Demos &amp;amp; Tutorials&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;▶️ &lt;a href="https://www.youtube.com/results?search_query=kyverno+tutorial"&gt;Getting Started with Kyverno – YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🧪 &lt;a href="https://playground.kyverno.io/"&gt;Kyverno Playground&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🎯 Popular Use Cases&lt;/h2&gt; 
&lt;p&gt;Kyverno helps platform teams enforce best practices and security standards. Some common use cases include:&lt;/p&gt; 
&lt;h3&gt;1. &lt;strong&gt;Security &amp;amp; Compliance&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enforce Pod Security Standards (PSS)&lt;/li&gt; 
 &lt;li&gt;Require specific security contexts&lt;/li&gt; 
 &lt;li&gt;Validate container image sources and signatures&lt;/li&gt; 
 &lt;li&gt;Enforce CIS Benchmark policies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. &lt;strong&gt;Operational Excellence&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Auto-label workloads&lt;/li&gt; 
 &lt;li&gt;Enforce naming conventions&lt;/li&gt; 
 &lt;li&gt;Generate default configurations (e.g., NetworkPolicies)&lt;/li&gt; 
 &lt;li&gt;Validate YAML and Helm manifests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. &lt;strong&gt;Cost Optimization&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enforce resource quotas and limits&lt;/li&gt; 
 &lt;li&gt;Require cost allocation labels&lt;/li&gt; 
 &lt;li&gt;Validate instance types&lt;/li&gt; 
 &lt;li&gt;Clean up unused resources&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. &lt;strong&gt;Developer Guardrails&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Require readiness/liveness probes&lt;/li&gt; 
 &lt;li&gt;Enforce ingress/egress policies&lt;/li&gt; 
 &lt;li&gt;Validate container image versions&lt;/li&gt; 
 &lt;li&gt;Auto-inject config maps or secrets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📚 Explore the Policy Library&lt;/h2&gt; 
&lt;p&gt;Discover hundreds of production-ready Kyverno policies for security, operations, cost control, and developer enablement.&lt;/p&gt; 
&lt;p&gt;👉 &lt;a href="https://kyverno.io/policies/"&gt;Browse the Policy Library&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🙋 Getting Help&lt;/h2&gt; 
&lt;p&gt;We’re here to help:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🐞 File a &lt;a href="https://github.com/kyverno/kyverno/issues"&gt;GitHub Issue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💬 Join the &lt;a href="https://slack.k8s.io/#kyverno"&gt;Kyverno Slack Channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📅 Attend &lt;a href="https://kyverno.io/community/#community-meetings"&gt;Community Meetings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⭐️ &lt;a href="https://github.com/kyverno/kyverno/stargazers"&gt;Star this repository&lt;/a&gt; to stay updated&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;➕ Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you for your interest in contributing to Kyverno!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;✅ Read the &lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🧵 Join &lt;a href="https://github.com/kyverno/kyverno/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📖 Read the &lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/DEVELOPMENT.md"&gt;Development Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🏁 Check &lt;a href="https://github.com/kyverno/kyverno/labels/good%20first%20issue"&gt;Good First Issues&lt;/a&gt; and request with &lt;code&gt;/assign&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;🌱 Explore the &lt;a href="https://kyverno.io/community/"&gt;Community page&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🧾 Software Bill of Materials&lt;/h2&gt; 
&lt;p&gt;All Kyverno images include a Software Bill of Materials (SBOM) in &lt;a href="https://cyclonedx.org/"&gt;CycloneDX&lt;/a&gt; format. SBOMs are available at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;👉 &lt;a href="https://github.com/orgs/kyverno/packages?tab=packages&amp;amp;q=sbom"&gt;&lt;code&gt;ghcr.io/kyverno/sbom&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👉 &lt;a href="https://kyverno.io/docs/security/#fetching-the-sbom-for-kyverno"&gt;Fetching the SBOM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;👥 Contributors&lt;/h2&gt; 
&lt;p&gt;Kyverno is built and maintained by our growing community of contributors!&lt;/p&gt; 
&lt;a href="https://github.com/kyverno/kyverno/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=kyverno/kyverno" alt="Contributors image" /&gt; &lt;/a&gt; 
&lt;p&gt;&lt;em&gt;Made with &lt;a href="https://contrib.rocks"&gt;contributors-img&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;p&gt;Copyright 2025, the Kyverno project. All rights reserved.&lt;br /&gt; Kyverno is licensed under the &lt;a href="https://raw.githubusercontent.com/kyverno/kyverno/main/LICENSE"&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Kyverno is a &lt;a href="https://www.cncf.io/projects/"&gt;Cloud Native Computing Foundation (CNCF) Incubating project&lt;/a&gt; and was contributed by &lt;a href="https://nirmata.com/?utm_source=github&amp;amp;utm_medium=repository"&gt;Nirmata&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>livekit/livekit</title>
      <link>https://github.com/livekit/livekit</link>
      <description>&lt;p&gt;End-to-end realtime stack for connecting humans and AI&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="/.github/banner_dark.png" /&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="/.github/banner_light.png" /&gt; 
 &lt;img style="width:100%;" alt="The LiveKit icon, the name of the repository and some sample code in the background." src="https://raw.githubusercontent.com/livekit/livekit/main/.github/banner_light.png" /&gt; 
&lt;/picture&gt; 
&lt;!--END_BANNER_IMAGE--&gt; 
&lt;h1&gt;LiveKit: Real-time video, audio and data for developers&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://livekit.io"&gt;LiveKit&lt;/a&gt; is an open source project that provides scalable, multi-user conferencing based on WebRTC. It's designed to provide everything you need to build real-time video audio data capabilities in your applications.&lt;/p&gt; 
&lt;p&gt;LiveKit's server is written in Go, using the awesome &lt;a href="https://github.com/pion/webrtc"&gt;Pion WebRTC&lt;/a&gt; implementation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/livekit/livekit/stargazers/"&gt;&lt;img src="https://img.shields.io/github/stars/livekit/livekit?style=social&amp;amp;label=Star&amp;amp;maxAge=2592000" alt="GitHub stars" /&gt;&lt;/a&gt; &lt;a href="https://livekit.io/join-slack"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Flivekit.io%2Fbadges%2Fslack" alt="Slack community" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/livekit"&gt;&lt;img src="https://img.shields.io/twitter/follow/livekit" alt="Twitter Follow" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/livekit/livekit"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt; &lt;a href="https://github.com/livekit/livekit/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/livekit/livekit" alt="GitHub release (latest SemVer)" /&gt;&lt;/a&gt; &lt;a href="https://github.com/livekit/livekit/actions/workflows/buildtest.yaml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/livekit/livekit/buildtest.yaml?branch=master" alt="GitHub Workflow Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/livekit/livekit/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/livekit/livekit" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Scalable, distributed WebRTC SFU (Selective Forwarding Unit)&lt;/li&gt; 
 &lt;li&gt;Modern, full-featured client SDKs&lt;/li&gt; 
 &lt;li&gt;Built for production, supports JWT authentication&lt;/li&gt; 
 &lt;li&gt;Robust networking and connectivity, UDP/TCP/TURN&lt;/li&gt; 
 &lt;li&gt;Easy to deploy: single binary, Docker or Kubernetes&lt;/li&gt; 
 &lt;li&gt;Advanced features including: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.livekit.io/home/client/tracks/subscribe/#speaker-detection"&gt;speaker detection&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.livekit.io/home/client/tracks/publish/#video-simulcast"&gt;simulcast&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://blog.livekit.io/livekit-one-dot-zero/"&gt;end-to-end optimizations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.livekit.io/home/client/tracks/subscribe/#selective-subscription"&gt;selective subscription&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.livekit.io/home/server/managing-participants/"&gt;moderation APIs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;end-to-end encryption&lt;/li&gt; 
   &lt;li&gt;SVC codecs (VP9, AV1)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.livekit.io/home/server/webhooks/"&gt;webhooks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.livekit.io/home/self-hosting/distributed/"&gt;distributed and multi-region&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation &amp;amp; Guides&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://docs.livekit.io"&gt;https://docs.livekit.io&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Live Demos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://meet.livekit.io"&gt;LiveKit Meet&lt;/a&gt; (&lt;a href="https://github.com/livekit-examples/meet"&gt;source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://spatial-audio-demo.livekit.io/"&gt;Spatial Audio&lt;/a&gt; (&lt;a href="https://github.com/livekit-examples/spatial-audio"&gt;source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Livestreaming from OBS Studio (&lt;a href="https://github.com/livekit-examples/livestream"&gt;source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://livekit.io/kitt"&gt;AI voice assistant using ChatGPT&lt;/a&gt; (&lt;a href="https://github.com/livekit-examples/kitt"&gt;source&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/livekit/agents"&gt;Agents&lt;/a&gt;: build real-time multimodal AI applications with programmable backend participants&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/livekit/egress"&gt;Egress&lt;/a&gt;: record or multi-stream rooms and export individual tracks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/livekit/ingress"&gt;Ingress&lt;/a&gt;: ingest streams from external sources like RTMP, WHIP, HLS, or OBS Studio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;SDKs &amp;amp; Tools&lt;/h2&gt; 
&lt;h3&gt;Client SDKs&lt;/h3&gt; 
&lt;p&gt;Client SDKs enable your frontend to include interactive, multi-user experiences.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Repo&lt;/th&gt; 
   &lt;th&gt; &lt;a href="https://docs.livekit.io/home/client/events/#declarative-ui" target="_blank" rel="noopener noreferrer"&gt;Declarative UI&lt;/a&gt; &lt;/th&gt; 
   &lt;th&gt;Links&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;!-- BEGIN Template
  &lt;tr&gt;
    &lt;td&gt;Language&lt;/td&gt;
    &lt;td&gt;
      &lt;a href="" target="_blank" rel="noopener noreferrer"&gt;&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  END --&gt; 
  &lt;!-- JavaScript --&gt; 
  &lt;tr&gt; 
   &lt;td&gt;JavaScript (TypeScript)&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/livekit/client-sdk-js" target="_blank" rel="noopener noreferrer"&gt;client-sdk-js&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/livekit/livekit-react" target="_blank" rel="noopener noreferrer"&gt;React&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://docs.livekit.io/client-sdk-js/" target="_blank" rel="noopener noreferrer"&gt;docs&lt;/a&gt; | &lt;a href="https://github.com/livekit/client-sdk-js/tree/main/example" target="_blank" rel="noopener noreferrer"&gt;JS example&lt;/a&gt; | &lt;a href="https://github.com/livekit/client-sdk-js/tree/main/example" target="_blank" rel="noopener noreferrer"&gt;React example&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- Swift --&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Swift (iOS / MacOS)&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/livekit/client-sdk-swift" target="_blank" rel="noopener noreferrer"&gt;client-sdk-swift&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;Swift UI&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://docs.livekit.io/client-sdk-swift/" target="_blank" rel="noopener noreferrer"&gt;docs&lt;/a&gt; | &lt;a href="https://github.com/livekit/client-example-swift" target="_blank" rel="noopener noreferrer"&gt;example&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- Kotlin --&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Kotlin (Android)&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/livekit/client-sdk-android" target="_blank" rel="noopener noreferrer"&gt;client-sdk-android&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;Compose&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://docs.livekit.io/client-sdk-android/index.html" target="_blank" rel="noopener noreferrer"&gt;docs&lt;/a&gt; | &lt;a href="https://github.com/livekit/client-sdk-android/tree/main/sample-app/src/main/java/io/livekit/android/sample" target="_blank" rel="noopener noreferrer"&gt;example&lt;/a&gt; | &lt;a href="https://github.com/livekit/client-sdk-android/tree/main/sample-app-compose/src/main/java/io/livekit/android/composesample" target="_blank" rel="noopener noreferrer"&gt;Compose example&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- Flutter --&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Flutter (all platforms)&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/livekit/client-sdk-flutter" target="_blank" rel="noopener noreferrer"&gt;client-sdk-flutter&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;native&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://docs.livekit.io/client-sdk-flutter/" target="_blank" rel="noopener noreferrer"&gt;docs&lt;/a&gt; | &lt;a href="https://github.com/livekit/client-sdk-flutter/tree/main/example" target="_blank" rel="noopener noreferrer"&gt;example&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- Unity --&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Unity WebGL&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/livekit/client-sdk-unity-web" target="_blank" rel="noopener noreferrer"&gt;client-sdk-unity-web&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://livekit.github.io/client-sdk-unity-web/" target="_blank" rel="noopener noreferrer"&gt;docs&lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- React Native --&gt; 
  &lt;tr&gt; 
   &lt;td&gt;React Native (beta)&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/livekit/client-sdk-react-native" target="_blank" rel="noopener noreferrer"&gt;client-sdk-react-native&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;native&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;!-- Rust --&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust&lt;/td&gt; 
   &lt;td&gt; &lt;a href="https://github.com/livekit/client-sdk-rust" target="_blank" rel="noopener noreferrer"&gt;client-sdk-rust&lt;/a&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Server SDKs&lt;/h3&gt; 
&lt;p&gt;Server SDKs enable your backend to generate &lt;a href="https://docs.livekit.io/home/get-started/authentication/"&gt;access tokens&lt;/a&gt;, call &lt;a href="https://docs.livekit.io/reference/server/server-apis/"&gt;server APIs&lt;/a&gt;, and receive &lt;a href="https://docs.livekit.io/home/server/webhooks/"&gt;webhooks&lt;/a&gt;. In addition, the Go SDK includes client capabilities, enabling you to build automations that behave like end-users.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Language&lt;/th&gt; 
   &lt;th align="left"&gt;Repo&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Go&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/livekit/server-sdk-go"&gt;server-sdk-go&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/livekit/server-sdk-go"&gt;docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;JavaScript (TypeScript)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/livekit/server-sdk-js"&gt;server-sdk-js&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.livekit.io/server-sdk-js/"&gt;docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Ruby&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/livekit/server-sdk-ruby"&gt;server-sdk-ruby&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Java (Kotlin)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/livekit/server-sdk-kotlin"&gt;server-sdk-kotlin&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Python (community)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/livekit/python-sdks"&gt;python-sdks&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;PHP (community)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/agence104/livekit-server-sdk-php"&gt;agence104/livekit-server-sdk-php&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/livekit/livekit-cli"&gt;CLI&lt;/a&gt; - command line interface &amp;amp; load tester&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/r/livekit/livekit-server"&gt;Docker image&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/livekit/livekit-helm"&gt;Helm charts&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] We recommend installing &lt;a href="https://github.com/livekit/livekit-cli"&gt;LiveKit CLI&lt;/a&gt; along with the server. It lets you access server APIs, create tokens, and generate test traffic.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The following will install LiveKit's media server:&lt;/p&gt; 
&lt;h3&gt;MacOS&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;brew install livekit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl -sSL https://get.livekit.io | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Download the &lt;a href="https://github.com/livekit/livekit/releases/latest"&gt;latest release here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Starting LiveKit&lt;/h3&gt; 
&lt;p&gt;Start LiveKit in development mode by running &lt;code&gt;livekit-server --dev&lt;/code&gt;. It'll use a placeholder API key/secret pair.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;API Key: devkey
API Secret: secret
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To customize your setup for production, refer to our &lt;a href="https://docs.livekit.io/deploy/"&gt;deployment docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Creating access token&lt;/h3&gt; 
&lt;p&gt;A user connecting to a LiveKit room requires an &lt;a href="https://docs.livekit.io/home/get-started/authentication/#creating-a-token"&gt;access token&lt;/a&gt;. Access tokens (JWT) encode the user's identity and the room permissions they've been granted. You can generate a token with our CLI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;lk token create \
    --api-key devkey --api-secret secret \
    --join --room my-first-room --identity user1 \
    --valid-for 24h
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Test with example app&lt;/h3&gt; 
&lt;p&gt;Head over to our &lt;a href="https://example.livekit.io"&gt;example app&lt;/a&gt; and enter a generated token to connect to your LiveKit server. This app is built with our &lt;a href="https://github.com/livekit/livekit-react"&gt;React SDK&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once connected, your video and audio are now being published to your new LiveKit instance!&lt;/p&gt; 
&lt;h3&gt;Simulating a test publisher&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;lk room join \
    --url ws://localhost:7880 \
    --api-key devkey --api-secret secret \
    --identity bot-user1 \
    --publish-demo \
    my-first-room
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command publishes a looped demo video to a room. Due to how the video clip was encoded (keyframes every 3s), there's a slight delay before the browser has sufficient data to begin rendering frames. This is an artifact of the simulation.&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;/h2&gt; 
&lt;h3&gt;Use LiveKit Cloud&lt;/h3&gt; 
&lt;p&gt;LiveKit Cloud is the fastest and most reliable way to run LiveKit. Every project gets free monthly bandwidth and transcoding credits.&lt;/p&gt; 
&lt;p&gt;Sign up for &lt;a href="https://cloud.livekit.io/"&gt;LiveKit Cloud&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Self-host&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href="https://docs.livekit.io/deploy/"&gt;deployment docs&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Building from source&lt;/h2&gt; 
&lt;p&gt;Pre-requisites:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go 1.23+ is installed&lt;/li&gt; 
 &lt;li&gt;GOPATH/bin is in your PATH&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/livekit/livekit
cd livekit
./bootstrap.sh
mage
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome your contributions toward improving LiveKit! Please join us &lt;a href="http://livekit.io/join-slack"&gt;on Slack&lt;/a&gt; to discuss your ideas and/or PRs.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;LiveKit server is licensed under Apache License v2.0.&lt;/p&gt; 
&lt;!--BEGIN_REPO_NAV--&gt; 
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;table&gt; 
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th colspan="2"&gt;LiveKit Ecosystem&lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt;
   &lt;td&gt;LiveKit SDKs&lt;/td&gt;
   &lt;td&gt;&lt;a href="https://github.com/livekit/client-sdk-js"&gt;Browser&lt;/a&gt; · &lt;a href="https://github.com/livekit/client-sdk-swift"&gt;iOS/macOS/visionOS&lt;/a&gt; · &lt;a href="https://github.com/livekit/client-sdk-android"&gt;Android&lt;/a&gt; · &lt;a href="https://github.com/livekit/client-sdk-flutter"&gt;Flutter&lt;/a&gt; · &lt;a href="https://github.com/livekit/client-sdk-react-native"&gt;React Native&lt;/a&gt; · &lt;a href="https://github.com/livekit/rust-sdks"&gt;Rust&lt;/a&gt; · &lt;a href="https://github.com/livekit/node-sdks"&gt;Node.js&lt;/a&gt; · &lt;a href="https://github.com/livekit/python-sdks"&gt;Python&lt;/a&gt; · &lt;a href="https://github.com/livekit/client-sdk-unity"&gt;Unity&lt;/a&gt; · &lt;a href="https://github.com/livekit/client-sdk-unity-web"&gt;Unity (WebGL)&lt;/a&gt; · &lt;a href="https://github.com/livekit/client-sdk-esp32"&gt;ESP32&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Server APIs&lt;/td&gt;
   &lt;td&gt;&lt;a href="https://github.com/livekit/node-sdks"&gt;Node.js&lt;/a&gt; · &lt;a href="https://github.com/livekit/server-sdk-go"&gt;Golang&lt;/a&gt; · &lt;a href="https://github.com/livekit/server-sdk-ruby"&gt;Ruby&lt;/a&gt; · &lt;a href="https://github.com/livekit/server-sdk-kotlin"&gt;Java/Kotlin&lt;/a&gt; · &lt;a href="https://github.com/livekit/python-sdks"&gt;Python&lt;/a&gt; · &lt;a href="https://github.com/livekit/rust-sdks"&gt;Rust&lt;/a&gt; · &lt;a href="https://github.com/agence104/livekit-server-sdk-php"&gt;PHP (community)&lt;/a&gt; · &lt;a href="https://github.com/pabloFuente/livekit-server-sdk-dotnet"&gt;.NET (community)&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;UI Components&lt;/td&gt;
   &lt;td&gt;&lt;a href="https://github.com/livekit/components-js"&gt;React&lt;/a&gt; · &lt;a href="https://github.com/livekit/components-android"&gt;Android Compose&lt;/a&gt; · &lt;a href="https://github.com/livekit/components-swift"&gt;SwiftUI&lt;/a&gt; · &lt;a href="https://github.com/livekit/components-flutter"&gt;Flutter&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Agents Frameworks&lt;/td&gt;
   &lt;td&gt;&lt;a href="https://github.com/livekit/agents"&gt;Python&lt;/a&gt; · &lt;a href="https://github.com/livekit/agents-js"&gt;Node.js&lt;/a&gt; · &lt;a href="https://github.com/livekit/agent-playground"&gt;Playground&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Services&lt;/td&gt;
   &lt;td&gt;&lt;b&gt;LiveKit server&lt;/b&gt; · &lt;a href="https://github.com/livekit/egress"&gt;Egress&lt;/a&gt; · &lt;a href="https://github.com/livekit/ingress"&gt;Ingress&lt;/a&gt; · &lt;a href="https://github.com/livekit/sip"&gt;SIP&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;/tr&gt; 
  &lt;tr&gt;
   &lt;td&gt;Resources&lt;/td&gt;
   &lt;td&gt;&lt;a href="https://docs.livekit.io"&gt;Docs&lt;/a&gt; · &lt;a href="https://github.com/livekit-examples"&gt;Example apps&lt;/a&gt; · &lt;a href="https://livekit.io/cloud"&gt;Cloud&lt;/a&gt; · &lt;a href="https://docs.livekit.io/home/self-hosting/deployment"&gt;Self-hosting&lt;/a&gt; · &lt;a href="https://github.com/livekit/livekit-cli"&gt;CLI&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!--END_REPO_NAV--&gt;</description>
    </item>
    
    <item>
      <title>trueadm/ripple</title>
      <link>https://github.com/trueadm/ripple</link>
      <description>&lt;p&gt;the elegant TypeScript UI framework&lt;/p&gt;&lt;hr&gt;&lt;a href="https://ripplejs.com"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="assets/ripple-dark.png" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/trueadm/ripple/main/assets/ripple-light.png" alt="Ripple - the elegant TypeScript UI framework" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;p&gt;&lt;a href="https://github.com/trueadm/ripple/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/trueadm/ripple/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/JBF2ySrh2W"&gt;&lt;img src="https://img.shields.io/badge/Discord-Join%20Server-7289da?logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://stackblitz.com/github/trueadm/ripple/tree/main/templates/basic"&gt;&lt;img src="https://developer.stackblitz.com/img/open_in_stackblitz_small.svg?sanitize=true" alt="Open in StackBlitz" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;What is Ripple?&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Currently, this project is still in early development, and should not be used in production.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Ripple is a TypeScript UI framework that takes the best parts of React, Solid and Svelte and combines them into one package.&lt;/p&gt; 
&lt;p&gt;I wrote Ripple as a love letter for frontend web – and this is largely a project that I built in less than a week, so it's very raw.&lt;/p&gt; 
&lt;p&gt;Personally, I (&lt;a href="https://github.com/trueadm"&gt;@trueadm&lt;/a&gt;) have been involved in some truly amazing frontend frameworks along their journeys – from &lt;a href="https://github.com/infernojs/inferno"&gt;Inferno&lt;/a&gt;, where it all began, to &lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt; and the journey of React Hooks, to creating &lt;a href="https://github.com/facebook/lexical"&gt;Lexical&lt;/a&gt;, to &lt;a href="https://github.com/sveltejs/svelte"&gt;Svelte 5&lt;/a&gt; and its new compiler and signal-based reactivity runtime. Along that journey, I collected ideas, and intriguing thoughts that may or may not pay off. Given my time between roles, I decided it was the best opportunity to try them out, and for open source to see what I was cooking.&lt;/p&gt; 
&lt;p&gt;Ripple was designed to be a JS/TS-first framework, rather than HTML-first. Ripple modules have their own &lt;code&gt;.ripple&lt;/code&gt; extension and these modules fully support TypeScript. By introducing a new extension, it affords Ripple to invent its own superset language, that plays really nicely with TypeScript and JSX, but with a few interesting touches. In my experience, this has led to better DX not only for humans, but also for LLMs.&lt;/p&gt; 
&lt;p&gt;Right now, there will be plenty of bugs, things just won't work either and you'll find TODOs everywhere. At this stage, Ripple is more of an early alpha version of something that &lt;em&gt;might&lt;/em&gt; be, rather than something you should try and adopt. If anything, maybe some of the ideas can be shared and incubated back into other frameworks. There's also a lot of similarities with Svelte 5, and that's not by accident, that's because of my recent time working on Svelte 5.&lt;/p&gt; 
&lt;p&gt;If you'd like to know more, join the &lt;a href="https://discord.gg/JBF2ySrh2W"&gt;Ripple Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Reactive State Management&lt;/strong&gt;: Built-in reactivity with &lt;code&gt;$&lt;/code&gt; prefixed variables and object properties&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Component-Based Architecture&lt;/strong&gt;: Clean, reusable components with props and children&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;JSX-like Syntax&lt;/strong&gt;: Familiar templating with Ripple-specific enhancements&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Fine-grain rendering, with industry leading performance and memory usage&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TypeScript Support&lt;/strong&gt;: Full TypeScript integration with type checking&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;VSCode Integration&lt;/strong&gt;: Rich editor support with diagnostics, syntax highlighting, and IntelliSense&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Prettier Support&lt;/strong&gt;: Full Prettier formatting support for &lt;code&gt;.ripple&lt;/code&gt; modules&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Missing Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SSR&lt;/strong&gt;: Ripple is currently an SPA only, this is because I haven't gotten around to it&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Types&lt;/strong&gt;: The codebase is very raw with limited types, we're getting around to it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Try Ripple&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We're working hard on getting an online playground available. Watch this space!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can try Ripple now by using our basic Vite template either via &lt;a href="https://stackblitz.com/github/trueadm/ripple/tree/main/templates/basic"&gt;StackBlitz&lt;/a&gt;, or by running these commands in your terminal:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx degit trueadm/ripple/templates/basic my-app
cd my-app
npm i # or yarn or pnpm
npm run dev # or yarn or pnpm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;VSCode Extension&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://marketplace.visualstudio.com/items?itemName=ripplejs.ripple-vscode-plugin"&gt;Ripple VSCode extension&lt;/a&gt; provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Syntax Highlighting&lt;/strong&gt; for &lt;code&gt;.ripple&lt;/code&gt; files&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Real-time Diagnostics&lt;/strong&gt; for compilation errors&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TypeScript Integration&lt;/strong&gt; for type checking&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;IntelliSense&lt;/strong&gt; for autocompletion&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can find the extension on the VS Code Marketplace as &lt;a href="https://marketplace.visualstudio.com/items?itemName=ripplejs.ripple-vscode-plugin"&gt;&lt;code&gt;Ripple for VS Code&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also &lt;a href="https://github.com/trueadm/ripple/raw/refs/heads/main/packages/ripple-vscode-plugin/published/ripple-vscode-plugin.vsix"&gt;manually install the extension&lt;/a&gt; &lt;code&gt;.vsix&lt;/code&gt; that have been manually packaged.&lt;/p&gt; 
&lt;h3&gt;Mounting your app&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;mount&lt;/code&gt; API from the &lt;code&gt;ripple&lt;/code&gt; package to render your Ripple component, using the &lt;code&gt;target&lt;/code&gt; option to specify what DOM element you want to render the component.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;// index.ts
import { mount } from 'ripple';
import { App } from '/App.ripple';

mount(App, {
  props: {
    title: 'Hello world!',
  },
  target: document.getElementById('root'),
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Key Concepts&lt;/h2&gt; 
&lt;h3&gt;Components&lt;/h3&gt; 
&lt;p&gt;Define reusable components with the &lt;code&gt;component&lt;/code&gt; keyword. These are similar to functions in that they have &lt;code&gt;props&lt;/code&gt;, but crucially, they allow for a JSX-like syntax to be defined alongside standard TypeScript. That means you do not &lt;em&gt;return JSX&lt;/em&gt; like in other frameworks, but you instead use it like a JavaScript statement, as shown:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;component Button(props: { text: string, onClick: () =&amp;gt; void }) {
  &amp;lt;button onClick={props.onClick}&amp;gt;
    {props.text}
  &amp;lt;/button&amp;gt;
}

// Usage
export component App() {
  &amp;lt;Button text="Click me" onClick={() =&amp;gt; console.log("Clicked!")} /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ripple's templating language also supports shorthands and object spreads too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-svelte"&gt;// you can do a normal prop
&amp;lt;div onClick={onClick}&amp;gt;{text}&amp;lt;/div&amp;gt;

// or using the shorthand prop
&amp;lt;div {onClick}&amp;gt;{text}&amp;lt;/div&amp;gt;

// and you can spread props
&amp;lt;div {...properties}&amp;gt;{text}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reactive Variables&lt;/h3&gt; 
&lt;p&gt;Variables prefixed with &lt;code&gt;$&lt;/code&gt; are automatically reactive:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;let $name = 'World';
let $count = 0;

// Updates automatically trigger re-renders
$count++;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Object properties prefixed with &lt;code&gt;$&lt;/code&gt; are also automatically reactive:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;let counter = { $current: 0 };

// Updates automatically trigger re-renders
counter.$current++;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Derived values are simply &lt;code&gt;$&lt;/code&gt; variables that combined different parts of state:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;let $count = 0;
let $double = $count * 2;
let $quadruple = $double * 2;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That means &lt;code&gt;$count&lt;/code&gt; itself might be derived if it were to reference another reactive property. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;component Counter({ $startingCount }) {
  let $count = $startingCount;
  let $double = $count * 2;
  let $quadruple = $double * 2;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now given &lt;code&gt;$startingCount&lt;/code&gt; is reactive, it would mean that &lt;code&gt;$count&lt;/code&gt; might reset each time an incoming change to &lt;code&gt;$startingCount&lt;/code&gt; occurs. That might not be desirable, so Ripple provides a way to &lt;code&gt;untrack&lt;/code&gt; reactivity in those cases:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { untrack } from 'ripple';

component Counter({ $startingCount }) {
  let $count = untrack(() =&amp;gt; $startingCount);
  let $double = $count * 2;
  let $quadruple = $double * 2;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now &lt;code&gt;$count&lt;/code&gt; will only reactively create its value on initialization.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: you cannot define reactive variables in module/global scope, they have to be created on access from an active component&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Transporting Reactivity&lt;/h4&gt; 
&lt;p&gt;Ripple doesn't constrain reactivity to components only. Reactivity can be used inside other functions (and classes in the future) and be composed in a way to improve expressitivity and co-location.&lt;/p&gt; 
&lt;p&gt;Ripple provides a very nice way to transport reactivity between boundaries so that it's persisted – using objects and arrays. Here's an example using arrays to transport reactivity:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { effect } from 'ripple';

function createDouble([ $count ]) {
  const $double = $count * 2;

  effect(() =&amp;gt; {
    console.log('Count:', $count)
  });

  return [ $double ];
}

export component App() {
  let $count = 0;

  const [ $double ] = createDouble([ $count ]);

  &amp;lt;div&amp;gt;{'Double: ' + $double}&amp;lt;/div&amp;gt;
  &amp;lt;button onClick={() =&amp;gt; { $count++; }}&amp;gt;{'Increment'}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can do the same with objects too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { effect } from 'ripple';

function createDouble({ $count }) {
  const $double = $count * 2;

  effect(() =&amp;gt; {
    console.log('Count:', $count)
  });

  return { $double };
}

export component App() {
  let $count = 0;
  const { $double } = createDouble({ $count });

  &amp;lt;div&amp;gt;{'Double: ' + $double}&amp;lt;/div&amp;gt;
  &amp;lt;button onClick={() =&amp;gt; { $count++; }}&amp;gt;{'Increment'}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Just remember, reactive state must be connected to a component and it can't be global or created within the top-level of a module – because then Ripple won't be able to link it to your component tree.&lt;/p&gt; 
&lt;h4&gt;Reactive Arrays&lt;/h4&gt; 
&lt;p&gt;Just like, objects, you can use the &lt;code&gt;$&lt;/code&gt; prefix in an array literal to specify that the field is reactive.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;let $first = 0;
let $second = 0;
const arr = [$first, $second];

const $total = arr.reduce((a, b) =&amp;gt; a + b, 0);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Like shown in the above example, you can compose normal arrays with reactivity and pass them through props or boundaries.&lt;/p&gt; 
&lt;p&gt;However, if you need the entire array to be fully reactive, including when new elements get added, you should use the reactive array that Ripple provides.&lt;/p&gt; 
&lt;p&gt;You'll need to import the &lt;code&gt;RippleArray&lt;/code&gt; class from Ripple. It extends the standard JS &lt;code&gt;Array&lt;/code&gt; class, and supports all of its methods and properties.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import { RippleArray } from 'ripple';

// using the new constructor
const arr = new RippleArray(1, 2, 3);

// using static from method
const arr = Ripple.from([1, 2, 3]);

// using static of method
const arr = Ripple.of(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;RippleArray&lt;/code&gt; is a reactive array, and that means you can access properties normally using numeric index. However, accessing the &lt;code&gt;length&lt;/code&gt; property of a &lt;code&gt;RippleArray&lt;/code&gt; will be not be reactive, instead you should use &lt;code&gt;$length&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Reactive Set&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;RippleSet&lt;/code&gt; extends the standard JS &lt;code&gt;Set&lt;/code&gt; class, and supports all of its methods and properties. However, accessing the &lt;code&gt;size&lt;/code&gt; property of a &lt;code&gt;RippleSet&lt;/code&gt; will be not be reactive, instead you should use &lt;code&gt;$size&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import { RippleSet } from 'ripple';

const set = new RippleSet([1, 2, 3]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;RippleSet's reactive methods or properties can be used directly or assigned to reactive variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { RippleSet } from 'ripple';

export component App() {
  const set = new RippleSet([1, 2, 3]);

  // direct usage
  &amp;lt;p&amp;gt;{"Direct usage: set contains 2: "}{set.has(2)}&amp;lt;/p&amp;gt;

  // reactive assignment with prefixed `$`
  let $has = set.has(2);
  &amp;lt;p&amp;gt;{"Assigned usage: set contains 2: "}{$has}&amp;lt;/p&amp;gt;

  &amp;lt;button onClick={() =&amp;gt; set.delete(2)}&amp;gt;{"Delete 2"}&amp;lt;/button&amp;gt;
  &amp;lt;button onClick={() =&amp;gt; set.add(2)}&amp;gt;{"Add 2"}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Reactive Map&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;RippleMap&lt;/code&gt; extends the standard JS &lt;code&gt;Map&lt;/code&gt; class, and supports all of its methods and properties. However, accessing the &lt;code&gt;size&lt;/code&gt; property of a &lt;code&gt;RippleMap&lt;/code&gt; will be not be reactive, instead you should use &lt;code&gt;$size&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import { RippleMap } from 'ripple';

const map = new RippleMap([[1,1], [2,2], [3,3], [4,4]]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;RippleMap's reactive methods or properties can be used directly or assigned to reactive variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { RippleMap } from 'ripple';

export component App() {
  const map = new RippleMap([[1,1], [2,2], [3,3], [4,4]]);

  // direct usage
  &amp;lt;p&amp;gt;{"Direct usage: map has an item with key 2: "}{map.has(2)}&amp;lt;/p&amp;gt;

  // reactive assignment with prefixed `$`
  let $has = map.has(2);
  &amp;lt;p&amp;gt;{"Assigned usage: map has an item with key 2: "}{$has}&amp;lt;/p&amp;gt;

  &amp;lt;button onClick={() =&amp;gt; map.delete(2)}&amp;gt;{"Delete item with key 2"}&amp;lt;/button&amp;gt;
  &amp;lt;button onClick={() =&amp;gt; map.set(2, 2)}&amp;gt;{"Add key 2 with value 2"}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Effects&lt;/h3&gt; 
&lt;p&gt;When dealing with reactive state, you might want to be able to create side-effects based upon changes that happen upon updates. To do this, you can use &lt;code&gt;effect&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { effect } from 'ripple';

export component App() {
  let $count = 0;

  effect(() =&amp;gt; {
    console.log($count);
  });

  &amp;lt;button onClick={() =&amp;gt; $count++}&amp;gt;{'Increment'}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Control flow&lt;/h3&gt; 
&lt;p&gt;The JSX-like syntax might take some time to get used to if you're coming from another framework. For one, templating in Ripple can only occur &lt;em&gt;inside&lt;/em&gt; a &lt;code&gt;component&lt;/code&gt; body – you can't create JSX inside functions, or assign it to variables as an expression.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;div&amp;gt;
  // you can create variables inside the template!
  const str = "hello world";

  console.log(str); // and function calls too!

  debugger; // you can put breakpoints anywhere to help debugging!

  {str}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that strings inside the template need to be inside &lt;code&gt;{"string"}&lt;/code&gt;, you can't do &lt;code&gt;&amp;lt;div&amp;gt;hello&amp;lt;/div&amp;gt;&lt;/code&gt; as Ripple has no idea if &lt;code&gt;hello&lt;/code&gt; is a string or maybe some JavaScript code that needs evaluating, so just ensure you wrap them in curly braces. This shouldn't be an issue in the real-world anyway, as you'll likely use an i18n library that means using JavaScript expressions regardless.&lt;/p&gt; 
&lt;h3&gt;If statements&lt;/h3&gt; 
&lt;p&gt;If blocks work seamlessly with Ripple's templating language, you can put them inside the JSX-like statements, making control-flow far easier to read and reason with.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;component Truthy({ x }) {
  &amp;lt;div&amp;gt;
    if (x) {
      &amp;lt;span&amp;gt;{'x is truthy'}&amp;lt;/span&amp;gt;
    } else {
      &amp;lt;span&amp;gt;{'x is falsy'}&amp;lt;/span&amp;gt;
    }
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;For statements&lt;/h3&gt; 
&lt;p&gt;You can render collections using a &lt;code&gt;for...of&lt;/code&gt; block, and you don't need to specify a &lt;code&gt;key&lt;/code&gt; prop like other frameworks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;component ListView({ title, items }) {
  &amp;lt;h2&amp;gt;{title}&amp;lt;/h2&amp;gt;
  &amp;lt;ul&amp;gt;
    for (const item of items) {
      &amp;lt;li&amp;gt;{item.text}&amp;lt;/li&amp;gt;
    }
  &amp;lt;/ul&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use Ripple's reactive arrays to easily compose contents of an array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { RippleArray } from 'ripple';

component Numbers() {
  const items = new RippleArray(1, 2, 3);

  for (const item of items) {
    &amp;lt;div&amp;gt;{item}&amp;lt;/div&amp;gt;
  }

  &amp;lt;button onClick={() =&amp;gt; items.push(`Item ${items.$length + 1}`)}&amp;gt;{"Add Item"}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Clicking the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; will create a new item, note that &lt;code&gt;items&lt;/code&gt; is not &lt;code&gt;$&lt;/code&gt; prefixed, because it's not reactive, but rather its properties are instead.&lt;/p&gt; 
&lt;h3&gt;Try statements&lt;/h3&gt; 
&lt;p&gt;Try blocks work to build the foundation for &lt;strong&gt;error boundaries&lt;/strong&gt;, when the runtime encounters an error in the &lt;code&gt;try&lt;/code&gt; block, you can easily render a fallback in the &lt;code&gt;catch&lt;/code&gt; block.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { reportError } from 'some-library';

component ErrorBoundary() {
  &amp;lt;div&amp;gt;
    try {
      &amp;lt;ComponentThatFails /&amp;gt;
    } catch (e) {
      reportError(e);

      &amp;lt;div&amp;gt;{'An error occurred! ' + e.message}&amp;lt;/div&amp;gt;
    }
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Props&lt;/h3&gt; 
&lt;p&gt;If you want a prop to be reactive, you should also give it a &lt;code&gt;$&lt;/code&gt; prefix.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;component Button(props: { $text: string, onClick: () =&amp;gt; void }) {
  &amp;lt;button onClick={props.onClick}&amp;gt;
    {props.$text}
  &amp;lt;/button&amp;gt;
}

// Usage
&amp;lt;Button $text={some_text} onClick={() =&amp;gt; console.log("Clicked!")} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This also applies to DOM elements, if you want an attribute or property to be reactive, it needs to have a &lt;code&gt;$&lt;/code&gt; prefix.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-tsx"&gt;&amp;lt;div $class={props.$someClass} $id={$someId}&amp;gt;
  {$someText}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Otherwise changes to the attribute or property will not be reactively updated.&lt;/p&gt; 
&lt;h3&gt;Children&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;$children&lt;/code&gt; prop and then use it in the form of &lt;code&gt;&amp;lt;$children /&amp;gt;&lt;/code&gt; for component composition.&lt;/p&gt; 
&lt;p&gt;When you pass in children to a component, it gets implicitly passed as the &lt;code&gt;$children&lt;/code&gt; prop, in the form of a component.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import type { Component } from 'ripple';

component Card(props: { $children: Component }) {
  &amp;lt;div class="card"&amp;gt;
    &amp;lt;props.$children /&amp;gt;
  &amp;lt;/div&amp;gt;
}

// Usage
&amp;lt;Card&amp;gt;
  &amp;lt;p&amp;gt;{"Card content here"}&amp;lt;/p&amp;gt;
&amp;lt;/Card&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You could also explicitly write the same code as shown:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import type { Component } from 'ripple';

component Card(props: { $children: Component }) {
  &amp;lt;div class="card"&amp;gt;
    &amp;lt;props.$children /&amp;gt;
  &amp;lt;/div&amp;gt;
}

// Usage with explicit component
&amp;lt;Card&amp;gt;
  component $children() {
    &amp;lt;p&amp;gt;{"Card content here"}&amp;lt;/p&amp;gt;
  }
&amp;lt;/Card&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Accessor Props&lt;/h3&gt; 
&lt;p&gt;When working with props on composite components (&lt;code&gt;&amp;lt;Foo&amp;gt;&lt;/code&gt; rather than &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;), it can sometimes be difficult to debug why a certain value is a certain way. JavaScript gives us a way to do this on objects using the &lt;code&gt;get&lt;/code&gt; syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;let name = 'Bob';

const object = {
  get name() {
    // I can easily debug when this property gets
    // access and track it easily
    console.log(name);
    return name;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So Ripple provides similar capabilities when working with composite components in a template, specifcally using &lt;code&gt;$prop:={}&lt;/code&gt; rather than the typical &lt;code&gt;$prop={}&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In fact, when you use an accessor, you must pass a function, and the prop must be &lt;code&gt;$&lt;/code&gt; prefixed, as Ripple considers accessor props as reactive:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;let $name = 'Bob';

const getName = () =&amp;gt; {
  // I can easily debug when this property gets
  // access and track it easily
  console.log(name);
  return $name;
};

&amp;lt;Person $name:={getName} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also inline the function too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;let $name = 'Bob';

&amp;lt;Person $name:={() =&amp;gt; {
  // I can easily debug when this property gets
  // access and track it easily
  console.log(name);
  return $name;
}} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Furthermore, just like property accessors in JavaScript, Ripple provides a way of capturing the &lt;code&gt;set&lt;/code&gt; too, enabling two-way data-flow on composite component props. You just need to provide a second function after the first, separated using a comma:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;let $name = 'Bob';

const getName = () =&amp;gt; {
  return $name;
}

const setName = (newName) =&amp;gt; {
  $name = newName;
}

&amp;lt;Person $name:={getName, setName} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or an inlined version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;let $name = 'Bob';

&amp;lt;Person $name:={() =&amp;gt; $name, (newName) =&amp;gt; $name = $newName} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now changes in the &lt;code&gt;Person&lt;/code&gt; to its &lt;code&gt;props&lt;/code&gt; will propagate to its parent component:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;component Person(props) {
  const updateName = (newName) =&amp;gt; {
    props.$name = newName;
  }

  &amp;lt;NameInput onChange={updateName}&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Decorators&lt;/h3&gt; 
&lt;p&gt;Ripple provides a consistent way to capture the underlying DOM element – decorators. Specifically, using the syntax &lt;code&gt;{@use fn}&lt;/code&gt; where &lt;code&gt;fn&lt;/code&gt; is a function that captures the DOM element. If you're familiar with other frameworks, then this is identical to &lt;code&gt;{@attach fn}&lt;/code&gt; in Svelte 5 and somewhat similar to &lt;code&gt;ref&lt;/code&gt; in React. The hook function will receive the reference to the underlying DOM element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;export component App() {
  let $node;

  const ref = (node) =&amp;gt; {
    $node = node;
    console.log("mounted", node);

    return () =&amp;gt; {
      $node = undefined;
      console.log("unmounted", node);
    };
  };

  &amp;lt;div {@use ref}&amp;gt;{"Hello world"}&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also create &lt;code&gt;{@use}&lt;/code&gt; functions inline.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;export component App() {
  let $node;

  &amp;lt;div {@use (node) =&amp;gt; {
    $node = node;
    return () =&amp;gt; $node = null;
  }}&amp;gt;{"Hello world"}&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use function factories to define properties, these are functions that return functions that do the same thing. However, you can use this pattern to pass reactive properties.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { fadeIn } from 'some-library';

export component App({ $ms }) {
  &amp;lt;div {@use fadeIn({ $ms })}&amp;gt;{"Hello world"}&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lastly, you can use decorators on composite components.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;&amp;lt;Image {@use (node) =&amp;gt; console.log(node)} {...props} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When passing decorators to composite components (rather than HTML elements) as shown above, they will be passed a &lt;code&gt;Symbol&lt;/code&gt; property, as they are not named. This still means that it can be spread to HTML template elements later on, and still work.&lt;/p&gt; 
&lt;h3&gt;Event Props&lt;/h3&gt; 
&lt;p&gt;Like React, events are props that start with &lt;code&gt;on&lt;/code&gt; and then continue with an uppercase character, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;onClick&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;onPointerMove&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;onPointerDown&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;onKeyDown&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For &lt;code&gt;capture&lt;/code&gt; phase events, just add &lt;code&gt;Capture&lt;/code&gt; to the end of the prop name:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;onClickCapture&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;onPointerMoveCapture&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;onPointerDownCapture&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;onKeyDownCapture&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Some events are automatically delegated where possible by Ripple to improve runtime performance.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Styling&lt;/h3&gt; 
&lt;p&gt;Ripple supports native CSS styling that is localized to the given component using the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;component MyComponent() {
  &amp;lt;div class="container"&amp;gt;&amp;lt;h1&amp;gt;{'Hello World'}&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;style&amp;gt;
    .container {
      background: blue;
      padding: 1rem;
    }

    h1 {
      color: white;
      font-size: 2rem;
    }
  &amp;lt;/style&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element must be top-level within a &lt;code&gt;component&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Context&lt;/h3&gt; 
&lt;p&gt;Ripple has the concept of &lt;code&gt;context&lt;/code&gt; where a value or reactive object can be shared through the component tree – like in other frameworks. This all happens from the &lt;code&gt;createContext&lt;/code&gt; function that is imported from &lt;code&gt;ripple&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When you create a context, you can &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; the values, but this must happen within the component. Using them outside will result in an error being thrown.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;import { createContext } from 'ripple';

const MyContext = createContext(null);

component Child() {
  // Context is read in the Child component
  const value = MyContext.get(MyContext);

  // value is "Hello from context!"
  console.log(value);
}

component Parent() {
  const value = MyContext.get(MyContext);

  // Context is read in the Parent component, but hasn't yet
  // been set, so we fallback to the initial context value.
  // So the value is `null`
  console.log(value);

  // Context is set in the Parent component
  MyContext.set("Hello from context!");

  &amp;lt;Child /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Playground&lt;/h2&gt; 
&lt;p&gt;Feel free to play around with how Ripple works. If you clone the repo, you can then:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pnpm i &amp;amp;&amp;amp; cd playground &amp;amp;&amp;amp; pnpm dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The playground uses Ripple's Vite plugin, where you can play around with things inside the &lt;code&gt;playground/src&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are happy for your interest in contributing. Please see our &lt;a href="https://raw.githubusercontent.com/trueadm/ripple/main/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/trueadm/ripple/main/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>firebase/genkit</title>
      <link>https://github.com/firebase/genkit</link>
      <description>&lt;p&gt;An open source framework for building AI-powered apps with familiar code-centric patterns. Genkit makes it easy to develop, integrate, and test AI features with observability and evaluations. Genkit works with various models and platforms.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/firebase/genkit/main/docs/resources/genkit-logo-dark.png#gh-dark-mode-only" alt="Genkit logo" title="Genkit" /&gt; &lt;img src="https://raw.githubusercontent.com/firebase/genkit/main/docs/resources/genkit-logo.png#gh-light-mode-only" alt="Genkit logo" title="Genkit" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://genkit.dev"&gt;Genkit&lt;/a&gt; is an open-source framework for building full-stack AI-powered applications, built and used in production by Google's Firebase. It provides SDKs for multiple programming languages with varying levels of stability:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;JavaScript/TypeScript&lt;/strong&gt;: Production-ready with full feature support&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt;: Production-ready with full feature support&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Python (Alpha)&lt;/strong&gt;: Early development with core functionality&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It offers a unified interface for integrating AI models from providers like &lt;a href="https://genkit.dev/docs/plugins/google-genai"&gt;Google&lt;/a&gt;, &lt;a href="https://genkit.dev/docs/plugins/openai"&gt;OpenAI&lt;/a&gt;, &lt;a href="https://thefireco.github.io/genkit-plugins/docs/plugins/genkitx-anthropic"&gt;Anthropic&lt;/a&gt;, &lt;a href="https://genkit.dev/docs/plugins/ollama/"&gt;Ollama&lt;/a&gt;, and more. Rapidly build and deploy production-ready chatbots, automations, and recommendation systems using streamlined APIs for multimodal content, structured outputs, tool calling, and agentic workflows.&lt;/p&gt; 
&lt;p&gt;Get started with just a few lines of code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;import { genkit } from 'genkit';
import { googleAI } from '@genkit-ai/google-genai';

const ai = genkit({ plugins: [googleAI()] });

const { text } = await ai.generate({
    model: googleAI.model('gemini-2.5-flash'),
    prompt: 'Why is Firebase awesome?'
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Explore &amp;amp; build with Genkit&lt;/h2&gt; 
&lt;p&gt;Play with AI sample apps, with visualizations of the Genkit code that powers them, at no cost to you.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://examples.genkit.dev"&gt;Explore Genkit by Example&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Key capabilities&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Broad AI model support&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Use a unified interface to integrate with hundreds of models from providers like &lt;a href="https://genkit.dev/docs/plugins/google-genai"&gt;Google&lt;/a&gt;, &lt;a href="https://genkit.dev/docs/plugins/openai"&gt; OpenAI&lt;/a&gt;, &lt;a href="https://thefireco.github.io/genkit-plugins/docs/plugins/genkitx-anthropic"&gt; Anthropic&lt;/a&gt;, &lt;a href="https://genkit.dev/docs/plugins/ollama"&gt;Ollama&lt;/a&gt;, and more. Explore, compare, and use the best models for your needs.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Simplified AI development&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Use streamlined APIs to build AI features with &lt;a href="https://genkit.dev/docs/models#structured-output"&gt; structured output&lt;/a&gt;, &lt;a href="https://genkit.dev/docs/tool-calling"&gt;agentic tool calling&lt;/a&gt;, &lt;a href="https://genkit.dev/docs/rag"&gt;context-aware generation&lt;/a&gt;, &lt;a href="https://genkit.dev/docs/models#multimodal"&gt;multi-modal input/output&lt;/a&gt;, and more. Genkit handles the complexity of AI development, so you can build and iterate faster.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Web and mobile ready&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Integrate seamlessly with frameworks and platforms including Next.js, React, Angular, iOS, Android, using purpose-built &lt;a href="https://genkit.dev/docs/firebase"&gt;client SDKs&lt;/a&gt; and helpers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Cross-language support&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Build with the language that best fits your project. Genkit provides SDKs for JavaScript/TypeScript, Go, and Python (Alpha) with consistent APIs and capabilities across all supported languages.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Deploy anywhere&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Deploy AI logic to any environment that supports your chosen programming language, such as &lt;a href="https://genkit.dev/docs/firebase"&gt;Cloud Functions for Firebase&lt;/a&gt;, &lt;a href="https://genkit.dev/docs/cloud-run"&gt;Google Cloud Run&lt;/a&gt;, or &lt;a href="https://genkit.dev/docs/deploy-node"&gt;third-party platforms&lt;/a&gt;, with or without Google services.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Developer tools&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Accelerate AI development with a purpose-built, local &lt;a href="https://genkit.dev/docs/devtools"&gt;CLI and Developer UI&lt;/a&gt;. Test prompts and flows against individual inputs or datasets, compare outputs from different models, debug with detailed execution traces, and use immediate visual feedback to iterate rapidly on prompts.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Production monitoring&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Ship AI features with confidence using comprehensive production monitoring. Track model performance, and request volumes, latency, and error rates in a &lt;a href="https://genkit.dev/docs/observability/getting-started"&gt; purpose-built dashboard&lt;/a&gt;. Identify issues quickly with detailed observability metrics, and ensure your AI features meet quality and performance targets in real-world usage.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;How does it work?&lt;/h2&gt; 
&lt;p&gt;Genkit simplifies AI integration with an open-source SDK and unified APIs that work across various model providers and programming languages. It abstracts away complexity so you can focus on delivering great user experiences.&lt;/p&gt; 
&lt;p&gt;Some key features offered by Genkit include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/docs/models"&gt;Text and image generation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/docs/models#structured-output"&gt;Type-safe, structured data generation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/docs/tool-calling"&gt;Tool calling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/docs/dotprompt"&gt;Prompt templating&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/docs/chat"&gt;Persisted chat interfaces&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/docs/flows"&gt;AI workflows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/docs/rag"&gt;AI-powered data retrieval (RAG)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Genkit is designed for server-side deployment in multiple language environments, and also provides seamless client-side integration through dedicated helpers and &lt;a href="https://genkit.dev/docs/firebase"&gt;client SDKs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Implementation path&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;Choose your language and model provider&lt;/td&gt; 
   &lt;td&gt;Select the Genkit SDK for your preferred language (JavaScript/TypeScript, Go, or Python (Alpha)). Choose a model provider like &lt;a href="https://genkit.dev/docs/plugins/google-genai"&gt;Google Gemini&lt;/a&gt; or Anthropic, and get an API key. Some providers, like &lt;a href="https://genkit.dev/docs/plugins/vertex-ai"&gt;Vertex AI&lt;/a&gt;, may rely on a different means of authentication.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;Install the SDK and initialize&lt;/td&gt; 
   &lt;td&gt;Install the Genkit SDK, model-provider package of your choice, and the Genkit CLI. Import the Genkit and provider packages and initialize Genkit with the provider API key.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;Write and test AI features&lt;/td&gt; 
   &lt;td&gt;Use the Genkit SDK to build AI features for your use case, from basic text generation to complex multi-step workflows and agents. Use the CLI and Developer UI to help you rapidly test and iterate.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;Deploy and monitor&lt;/td&gt; 
   &lt;td&gt;Deploy your AI features to Firebase, Google Cloud Run, or any environment that supports your chosen programming language. Integrate them into your app, and monitor them in production in the Firebase console.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/docs/get-started"&gt;JavaScript/TypeScript quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/go/docs/get-started-go"&gt;Go quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://genkit.dev/python/docs/get-started/"&gt;Python quickstart&lt;/a&gt; (Alpha)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development tools&lt;/h2&gt; 
&lt;p&gt;Genkit provides a CLI and a local UI to streamline your AI development workflow.&lt;/p&gt; 
&lt;h3&gt;CLI&lt;/h3&gt; 
&lt;p&gt;The Genkit CLI includes commands for running and evaluating your Genkit functions (flows) and collecting telemetry and logs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Install:&lt;/strong&gt; &lt;code&gt;npm install -g genkit-cli&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Run a command, wrapped with telemetry, a interactive developer UI, etc:&lt;/strong&gt; &lt;code&gt;genkit start -- &amp;lt;command to run your code&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developer UI&lt;/h3&gt; 
&lt;p&gt;The Genkit developer UI is a local interface for testing, debugging, and iterating on your AI application.&lt;/p&gt; 
&lt;p&gt;Key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Run:&lt;/strong&gt; Execute and experiment with Genkit flows, prompts, queries, and more in dedicated playgrounds.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Inspect:&lt;/strong&gt; Analyze detailed traces of past executions, including step-by-step breakdowns of complex flows.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Evaluate:&lt;/strong&gt; Review the results of evaluations run against your flows, including performance metrics and links to relevant traces.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://raw.githubusercontent.com/firebase/genkit/main/docs/resources/readme-ui-traces-screenshot.png" width="700" alt="Screenshot of Genkit Developer UI showing traces" /&gt; 
&lt;h2&gt;Try Genkit in Firebase Studio&lt;/h2&gt; 
&lt;p&gt;Want to skip the local setup? Click below to try out Genkit using &lt;a href="https://firebase.studio"&gt;Firebase Studio&lt;/a&gt;, Google's AI-assisted workspace for full-stack app development in the cloud.&lt;/p&gt; 
&lt;a href="https://studio.firebase.google.com/new/genkit"&gt; &lt;img height="32" alt="Open in Firebase Studio" src="https://cdn.firebasestudio.dev/btn/open_bright_32.svg?sanitize=true" /&gt; &lt;/a&gt; 
&lt;h2&gt;Connect with us&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/qXt5zzQKpc"&gt;&lt;strong&gt;Join us on Discord&lt;/strong&gt;&lt;/a&gt; – Get help, share ideas, and chat with other developers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/firebase/genkit/issues"&gt;&lt;strong&gt;Contribute on GitHub&lt;/strong&gt;&lt;/a&gt; – Report bugs, suggest features, or explore the source code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/genkit-ai/"&gt;&lt;strong&gt;Contribute to Documentation and Samples&lt;/strong&gt;&lt;/a&gt; – Report issues in Genkit's &lt;a href="https://github.com/genkit-ai/docsite"&gt;documentation&lt;/a&gt;, or contribute to the &lt;a href="https://github.com/genkit-ai/samples"&gt;samples&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions to Genkit are welcome and highly appreciated! See our &lt;a href="https://raw.githubusercontent.com/firebase/genkit/main/CONTRIBUTING.md"&gt;Contribution Guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;p&gt;Genkit is built by &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; with contributions from the &lt;a href="https://github.com/firebase/genkit/graphs/contributors"&gt;Open Source Community&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PowerShell/PowerShell</title>
      <link>https://github.com/PowerShell/PowerShell</link>
      <description>&lt;p&gt;PowerShell for every system!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://raw.githubusercontent.com/PowerShell/PowerShell/master/assets/ps_black_64.svg?sanitize=true" alt="logo" /&gt; PowerShell&lt;/h1&gt; 
&lt;p&gt;Welcome to the PowerShell GitHub Community! &lt;a href="https://learn.microsoft.com/powershell/scripting/overview"&gt;PowerShell&lt;/a&gt; is a cross-platform (Windows, Linux, and macOS) automation and configuration tool/framework that works well with your existing tools and is optimized for dealing with structured data (e.g. JSON, CSV, XML, etc.), REST APIs, and object models. It includes a command-line shell, an associated scripting language, and a framework for processing cmdlets.&lt;/p&gt; 
&lt;h2&gt;Windows PowerShell vs. PowerShell 7+&lt;/h2&gt; 
&lt;p&gt;Although this repository started as a fork of the Windows PowerShell codebase, changes made in this repository are not ported back to Windows PowerShell 5.1. This also means that &lt;a href="https://github.com/PowerShell/PowerShell/issues"&gt;issues tracked here&lt;/a&gt; are only for PowerShell 7.x and higher. Windows PowerShell specific issues should be reported with the &lt;a href="https://support.microsoft.com/windows/send-feedback-to-microsoft-with-the-feedback-hub-app-f59187f8-8739-22d6-ba93-f66612949332"&gt;Feedback Hub app&lt;/a&gt;, by choosing "Apps &amp;gt; PowerShell" in the category.&lt;/p&gt; 
&lt;h2&gt;New to PowerShell?&lt;/h2&gt; 
&lt;p&gt;If you are new to PowerShell and want to learn more, we recommend reviewing the &lt;a href="https://learn.microsoft.com/powershell/scripting/learn/more-powershell-learning"&gt;getting started&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;h2&gt;Get PowerShell&lt;/h2&gt; 
&lt;p&gt;PowerShell is supported on Windows, macOS, and a variety of Linux platforms. For more information, see &lt;a href="https://learn.microsoft.com/powershell/scripting/install/installing-powershell"&gt;Installing PowerShell&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Upgrading PowerShell&lt;/h2&gt; 
&lt;p&gt;For best results when upgrading, you should use the same install method you used when you first installed PowerShell. The update method is different for each platform and install method.&lt;/p&gt; 
&lt;h2&gt;Community Dashboard&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aka.ms/PSPublicDashboard"&gt;Dashboard&lt;/a&gt; with visualizations for community contributions and project status using PowerShell, Azure, and PowerBI.&lt;/p&gt; 
&lt;p&gt;For more information on how and why we built this dashboard, check out this &lt;a href="https://devblogs.microsoft.com/powershell/powershell-open-source-community-dashboard/"&gt;blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Discussions&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://docs.github.com/discussions/quickstart"&gt;GitHub Discussions&lt;/a&gt; is a feature to enable free and open discussions within the community for topics that are not related to code, unlike issues.&lt;/p&gt; 
&lt;p&gt;This is an experiment we are trying in our repositories, to see if it helps move discussions out of issues so that issues remain actionable by the team or members of the community. There should be no expectation that PowerShell team members are regular participants in these discussions. Individual PowerShell team members may choose to participate in discussions, but the expectation is that community members help drive discussions so that team members can focus on issues.&lt;/p&gt; 
&lt;p&gt;Create or join a &lt;a href="https://github.com/PowerShell/PowerShell/discussions"&gt;discussion&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Chat&lt;/h2&gt; 
&lt;p&gt;Want to chat with other members of the PowerShell community?&lt;/p&gt; 
&lt;p&gt;There are dozens of topic-specific channels on our community-driven PowerShell Virtual User Group, which you can join on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://gitter.im/PowerShell/PowerShell"&gt;Gitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/PowerShell"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://web.libera.chat/#powershell"&gt;IRC&lt;/a&gt; on Libera.Chat&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aka.ms/psslack"&gt;Slack&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build status of nightly builds&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Azure CI (Windows)&lt;/th&gt; 
   &lt;th align="left"&gt;Azure CI (Linux)&lt;/th&gt; 
   &lt;th align="left"&gt;Azure CI (macOS)&lt;/th&gt; 
   &lt;th align="left"&gt;CodeFactor Grade&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://powershell.visualstudio.com/PowerShell/_build?definitionId=32"&gt;&lt;img src="https://powershell.visualstudio.com/PowerShell/_apis/build/status/PowerShell-CI-Windows-daily" alt="windows-nightly-image" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://powershell.visualstudio.com/PowerShell/_build?definitionId=23"&gt;&lt;img src="https://powershell.visualstudio.com/PowerShell/_apis/build/status/PowerShell-CI-linux-daily?branchName=master" alt="linux-nightly-image" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://powershell.visualstudio.com/PowerShell/_build?definitionId=24"&gt;&lt;img src="https://powershell.visualstudio.com/PowerShell/_apis/build/status/PowerShell-CI-macos-daily?branchName=master" alt="macOS-nightly-image" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.codefactor.io/repository/github/powershell/powershell"&gt;&lt;img src="https://www.codefactor.io/repository/github/powershell/powershell/badge" alt="cf-image" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Developing and Contributing&lt;/h2&gt; 
&lt;p&gt;Want to contribute to PowerShell? Please start with the &lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/.github/CONTRIBUTING.md"&gt;Contribution Guide&lt;/a&gt; to learn how to develop and contribute.&lt;/p&gt; 
&lt;p&gt;If you are developing .NET Core C# applications targeting PowerShell Core, &lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/docs/FAQ.md#where-do-i-get-the-powershell-core-sdk-package"&gt;check out our FAQ&lt;/a&gt; to learn more about the PowerShell SDK NuGet package.&lt;/p&gt; 
&lt;p&gt;Also, make sure to check out our &lt;a href="https://github.com/powershell/powershell-rfc"&gt;PowerShell-RFC repository&lt;/a&gt; for request-for-comments (RFC) documents to submit and give comments on proposed and future designs.&lt;/p&gt; 
&lt;h2&gt;Building PowerShell&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Linux&lt;/th&gt; 
   &lt;th&gt;Windows&lt;/th&gt; 
   &lt;th&gt;macOS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/docs/building/linux.md"&gt;Instructions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/docs/building/windows-core.md"&gt;Instructions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/docs/building/macos.md"&gt;Instructions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;If you have any problems building PowerShell, please start by consulting the developer &lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/docs/FAQ.md"&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Downloading the Source Code&lt;/h2&gt; 
&lt;p&gt;You can clone the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/PowerShell/PowerShell.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information, see &lt;a href="https://github.com/PowerShell/PowerShell/tree/master/docs/git"&gt;working with the PowerShell repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;For support, see the &lt;a href="https://github.com/PowerShell/PowerShell/tree/master/.github/SUPPORT.md"&gt;Support Section&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Legal and Licensing&lt;/h2&gt; 
&lt;p&gt;PowerShell is licensed under the &lt;a href="https://github.com/PowerShell/PowerShell/tree/master/LICENSE.txt"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker Containers&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] The PowerShell container images are now &lt;a href="https://github.com/PowerShell/Announcements/issues/75"&gt;maintained by the .NET team&lt;/a&gt;. The containers at &lt;code&gt;mcr.microsoft.com/powershell&lt;/code&gt; are currently not maintained.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;License: By requesting and using the Container OS Image for Windows containers, you acknowledge, understand, and consent to the Supplemental License Terms available on &lt;a href="https://mcr.microsoft.com/en-us/product/powershell/tags"&gt;Microsoft Artifact Registry&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Telemetry&lt;/h3&gt; 
&lt;p&gt;Please visit our &lt;a href="https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_telemetry"&gt;about_Telemetry&lt;/a&gt; topic to read details about telemetry gathered by PowerShell.&lt;/p&gt; 
&lt;h2&gt;Governance&lt;/h2&gt; 
&lt;p&gt;The governance policy for the PowerShell project is described the &lt;a href="https://github.com/PowerShell/PowerShell/raw/master/docs/community/governance.md"&gt;PowerShell Governance&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; before participating in this project.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/.github/SECURITY.md"&gt;Security Policy&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;For any security issues, please see our &lt;a href="https://raw.githubusercontent.com/PowerShell/PowerShell/master/.github/SECURITY.md"&gt;Security Policy&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zie619/n8n-workflows</title>
      <link>https://github.com/Zie619/n8n-workflows</link>
      <description>&lt;p&gt;all of the workflows of n8n i could find (also from the site itself)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⚡ N8N Workflow Collection &amp;amp; Documentation&lt;/h1&gt; 
&lt;p&gt;A professionally organized collection of &lt;strong&gt;2,053 n8n workflows&lt;/strong&gt; with a lightning-fast documentation system that provides instant search, analysis, and browsing capabilities.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;⚠️ IMPORTANT NOTICE (Aug 14, 2025):&lt;/strong&gt; Repository history has been rewritten due to DMCA compliance. If you have a fork or local clone, please see &lt;a href="https://github.com/Zie619/n8n-workflows/issues"&gt;Issue #X&lt;/a&gt; for instructions on syncing your copy.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support My Work&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/zie619"&gt;&lt;img src="https://img.shields.io/badge/-Buy%20Me%20a%20Coffee-ffdd00?logo=buy-me-a-coffee&amp;amp;logoColor=black&amp;amp;style=flat" alt="Buy Me a Coffee" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you'd like to say thanks, consider buying me a coffee—your support helps me keep improving this project!&lt;/p&gt; 
&lt;h2&gt;🚀 &lt;strong&gt;NEW: High-Performance Documentation System&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Experience 100x performance improvement over traditional documentation!&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Quick Start - Fast Documentation System&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install dependencies
pip install -r requirements.txt

# Start the fast API server
python run.py

# Open in browser
http://localhost:8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Sub-100ms response times&lt;/strong&gt; with SQLite FTS5 search&lt;/li&gt; 
 &lt;li&gt;🔍 &lt;strong&gt;Instant full-text search&lt;/strong&gt; with advanced filtering&lt;/li&gt; 
 &lt;li&gt;📱 &lt;strong&gt;Responsive design&lt;/strong&gt; - works perfectly on mobile&lt;/li&gt; 
 &lt;li&gt;🌙 &lt;strong&gt;Dark/light themes&lt;/strong&gt; with system preference detection&lt;/li&gt; 
 &lt;li&gt;📊 &lt;strong&gt;Live statistics&lt;/strong&gt; - 365 unique integrations, 29,445 total nodes&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Smart categorization&lt;/strong&gt; by trigger type and complexity&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Use case categorization&lt;/strong&gt; by service name mapped to categories&lt;/li&gt; 
 &lt;li&gt;📄 &lt;strong&gt;On-demand JSON viewing&lt;/strong&gt; and download&lt;/li&gt; 
 &lt;li&gt;🔗 &lt;strong&gt;Mermaid diagram generation&lt;/strong&gt; for workflow visualization&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Real-time workflow naming&lt;/strong&gt; with intelligent formatting&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Performance Comparison&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Metric&lt;/th&gt; 
   &lt;th&gt;Old System&lt;/th&gt; 
   &lt;th&gt;New System&lt;/th&gt; 
   &lt;th&gt;Improvement&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;File Size&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;71MB HTML&lt;/td&gt; 
   &lt;td&gt;&amp;lt;100KB&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;700x smaller&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Load Time&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;10+ seconds&lt;/td&gt; 
   &lt;td&gt;&amp;lt;1 second&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;10x faster&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Search&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Client-side only&lt;/td&gt; 
   &lt;td&gt;Full-text with FTS5&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Instant&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Memory Usage&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;~2GB RAM&lt;/td&gt; 
   &lt;td&gt;&amp;lt;50MB RAM&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;40x less&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Mobile Support&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Poor&lt;/td&gt; 
   &lt;td&gt;Excellent&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Fully responsive&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📂 Repository Organization&lt;/h2&gt; 
&lt;h3&gt;Workflow Collection&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;2,053 workflows&lt;/strong&gt; with meaningful, searchable names&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;365 unique integrations&lt;/strong&gt; across popular platforms&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;29,445 total nodes&lt;/strong&gt; with professional categorization&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Quality assurance&lt;/strong&gt; - All workflows analyzed and categorized&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Advanced Naming System ✨&lt;/h3&gt; 
&lt;p&gt;Our intelligent naming system converts technical filenames into readable titles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;code&gt;2051_Telegram_Webhook_Automation_Webhook.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;code&gt;Telegram Webhook Automation&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;100% meaningful names&lt;/strong&gt; with smart capitalization&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automatic integration detection&lt;/strong&gt; from node analysis&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Use Case Category ✨&lt;/h3&gt; 
&lt;p&gt;The search interface includes a dropdown filter that lets you browse 2,000+ workflows by category.&lt;/p&gt; 
&lt;p&gt;The system includes an automated categorization feature that organizes workflows by service categories to make them easier to discover and filter.&lt;/p&gt; 
&lt;h3&gt;How Categorization Works&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run the categorization script&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python create_categories.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Service Name Recognition&lt;/strong&gt; The script analyzes each workflow JSON filename to identify recognized service names (e.g., "Twilio", "Slack", "Gmail", etc.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Category Mapping&lt;/strong&gt; Each recognized service name is matched to its corresponding category using the definitions in &lt;code&gt;context/def_categories.json&lt;/code&gt;. For example:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Twilio → Communication &amp;amp; Messaging&lt;/li&gt; 
   &lt;li&gt;Gmail → Communication &amp;amp; Messaging&lt;/li&gt; 
   &lt;li&gt;Airtable → Data Processing &amp;amp; Analysis&lt;/li&gt; 
   &lt;li&gt;Salesforce → CRM &amp;amp; Sales&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Search Categories Generation&lt;/strong&gt; The script produces a &lt;code&gt;search_categories.json&lt;/code&gt; file that contains the categorized workflow data&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Filter Interface&lt;/strong&gt; Users can then filter workflows by category in the search interface, making it easier to find workflows for specific use cases&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Available Categories&lt;/h3&gt; 
&lt;p&gt;The categorization system includes the following main categories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AI Agent Development&lt;/li&gt; 
 &lt;li&gt;Business Process Automation&lt;/li&gt; 
 &lt;li&gt;Cloud Storage &amp;amp; File Management&lt;/li&gt; 
 &lt;li&gt;Communication &amp;amp; Messaging&lt;/li&gt; 
 &lt;li&gt;Creative Content &amp;amp; Video Automation&lt;/li&gt; 
 &lt;li&gt;Creative Design Automation&lt;/li&gt; 
 &lt;li&gt;CRM &amp;amp; Sales&lt;/li&gt; 
 &lt;li&gt;Data Processing &amp;amp; Analysis&lt;/li&gt; 
 &lt;li&gt;E-commerce &amp;amp; Retail&lt;/li&gt; 
 &lt;li&gt;Financial &amp;amp; Accounting&lt;/li&gt; 
 &lt;li&gt;Marketing &amp;amp; Advertising Automation&lt;/li&gt; 
 &lt;li&gt;Project Management&lt;/li&gt; 
 &lt;li&gt;Social Media Management&lt;/li&gt; 
 &lt;li&gt;Technical Infrastructure &amp;amp; DevOps&lt;/li&gt; 
 &lt;li&gt;Web Scraping &amp;amp; Data Extraction&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contribute Categories&lt;/h3&gt; 
&lt;p&gt;You can help expand the categorization by adding more service-to-category mappings (e.g., Twilio → Communication &amp;amp; Messaging) in context/defs_categories.json.&lt;/p&gt; 
&lt;p&gt;Many workflow JSON files are conveniently named with the service name, often separated by underscores (_).&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🛠 Usage Instructions&lt;/h2&gt; 
&lt;h3&gt;Option 1: Modern Fast System (Recommended)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone repository
git clone &amp;lt;repo-url&amp;gt;
cd n8n-workflows

# Install Python dependencies
pip install -r requirements.txt

# Start the documentation server
python run.py

# Browse workflows at http://localhost:8000
# - Instant search across 2,053 workflows
# - Professional responsive interface
# - Real-time workflow statistics
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 2: Development Mode&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start with auto-reload for development
python run.py --dev

# Or specify custom host/port
python run.py --host 0.0.0.0 --port 3000

# Force database reindexing
python run.py --reindex
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Import Workflows into n8n&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Use the Python importer (recommended)
python import_workflows.py

# Or manually import individual workflows:
# 1. Open your n8n Editor UI
# 2. Click menu (☰) → Import workflow
# 3. Choose any .json file from the workflows/ folder
# 4. Update credentials/webhook URLs before running
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📊 Workflow Statistics&lt;/h2&gt; 
&lt;h3&gt;Current Collection Stats&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Total Workflows&lt;/strong&gt;: 2,053 automation workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Active Workflows&lt;/strong&gt;: 215 (10.5% active rate)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Total Nodes&lt;/strong&gt;: 29,445 (avg 14.3 nodes per workflow)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Unique Integrations&lt;/strong&gt;: 365 different services and APIs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: SQLite with FTS5 full-text search&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Trigger Distribution&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Complex&lt;/strong&gt;: 831 workflows (40.5%) - Multi-trigger systems&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Webhook&lt;/strong&gt;: 519 workflows (25.3%) - API-triggered automations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Manual&lt;/strong&gt;: 477 workflows (23.2%) - User-initiated workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scheduled&lt;/strong&gt;: 226 workflows (11.0%) - Time-based executions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Complexity Analysis&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Low (≤5 nodes)&lt;/strong&gt;: ~35% - Simple automations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Medium (6-15 nodes)&lt;/strong&gt;: ~45% - Standard workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High (16+ nodes)&lt;/strong&gt;: ~20% - Complex enterprise systems&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Popular Integrations&lt;/h3&gt; 
&lt;p&gt;Top services by usage frequency:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt;: Telegram, Discord, Slack, WhatsApp&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cloud Storage&lt;/strong&gt;: Google Drive, Google Sheets, Dropbox&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Databases&lt;/strong&gt;: PostgreSQL, MySQL, MongoDB, Airtable&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI/ML&lt;/strong&gt;: OpenAI, Anthropic, Hugging Face&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Development&lt;/strong&gt;: HTTP Request, Webhook, GraphQL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🔍 Advanced Search Features&lt;/h2&gt; 
&lt;h3&gt;Smart Search Categories&lt;/h3&gt; 
&lt;p&gt;Our system automatically categorizes workflows into 12 service categories:&lt;/p&gt; 
&lt;h4&gt;Available Categories:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;messaging&lt;/strong&gt;: Telegram, Discord, Slack, WhatsApp, Teams&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ai_ml&lt;/strong&gt;: OpenAI, Anthropic, Hugging Face&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;database&lt;/strong&gt;: PostgreSQL, MySQL, MongoDB, Redis, Airtable&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;email&lt;/strong&gt;: Gmail, Mailjet, Outlook, SMTP/IMAP&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;cloud_storage&lt;/strong&gt;: Google Drive, Google Docs, Dropbox, OneDrive&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;project_management&lt;/strong&gt;: Jira, GitHub, GitLab, Trello, Asana&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;social_media&lt;/strong&gt;: LinkedIn, Twitter/X, Facebook, Instagram&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ecommerce&lt;/strong&gt;: Shopify, Stripe, PayPal&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;analytics&lt;/strong&gt;: Google Analytics, Mixpanel&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;calendar_tasks&lt;/strong&gt;: Google Calendar, Cal.com, Calendly&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;forms&lt;/strong&gt;: Typeform, Google Forms, Form Triggers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;development&lt;/strong&gt;: Webhook, HTTP Request, GraphQL, SSE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;API Usage Examples&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Search workflows by text
curl "http://localhost:8000/api/workflows?q=telegram+automation"

# Filter by trigger type and complexity
curl "http://localhost:8000/api/workflows?trigger=Webhook&amp;amp;complexity=high"

# Find all messaging workflows
curl "http://localhost:8000/api/workflows/category/messaging"

# Get database statistics
curl "http://localhost:8000/api/stats"

# Browse available categories
curl "http://localhost:8000/api/categories"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🏗 Technical Architecture&lt;/h2&gt; 
&lt;h3&gt;Modern Stack&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SQLite Database&lt;/strong&gt; - FTS5 full-text search with 365 indexed integrations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;FastAPI Backend&lt;/strong&gt; - RESTful API with automatic OpenAPI documentation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Responsive Frontend&lt;/strong&gt; - Modern HTML5 with embedded CSS/JavaScript&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Smart Analysis&lt;/strong&gt; - Automatic workflow categorization and naming&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Key Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Change Detection&lt;/strong&gt; - MD5 hashing for efficient re-indexing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Background Processing&lt;/strong&gt; - Non-blocking workflow analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Compressed Responses&lt;/strong&gt; - Gzip middleware for optimal speed&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt; - Graceful degradation and comprehensive logging&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mobile Optimization&lt;/strong&gt; - Touch-friendly interface design&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database Performance&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;-- Optimized schema for lightning-fast queries
CREATE TABLE workflows (
    id INTEGER PRIMARY KEY,
    filename TEXT UNIQUE,
    name TEXT,
    active BOOLEAN,
    trigger_type TEXT,
    complexity TEXT,
    node_count INTEGER,
    integrations TEXT,  -- JSON array of 365 unique services
    description TEXT,
    file_hash TEXT,     -- MD5 for change detection
    analyzed_at TIMESTAMP
);

-- Full-text search with ranking
CREATE VIRTUAL TABLE workflows_fts USING fts5(
    filename, name, description, integrations, tags,
    content='workflows', content_rowid='id'
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🔧 Setup &amp;amp; Requirements&lt;/h2&gt; 
&lt;h3&gt;System Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Python 3.7+&lt;/strong&gt; - For running the documentation system&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modern Browser&lt;/strong&gt; - Chrome, Firefox, Safari, Edge&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;50MB Storage&lt;/strong&gt; - For SQLite database and indexes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;n8n Instance&lt;/strong&gt; - For importing and running workflows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone repository
git clone &amp;lt;repo-url&amp;gt;
cd n8n-workflows

# Install dependencies
pip install -r requirements.txt

# Start documentation server
python run.py

# Access at http://localhost:8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development Setup&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create virtual environment
python3 -m venv .venv
source .venv/bin/activate  # Linux/Mac
# or .venv\Scripts\activate  # Windows

# Install dependencies
pip install -r requirements.txt

# Run with auto-reload for development
python api_server.py --reload

# Force database reindexing
python workflow_db.py --index --force
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📋 Naming Convention&lt;/h2&gt; 
&lt;h3&gt;Intelligent Formatting System&lt;/h3&gt; 
&lt;p&gt;Our system automatically converts technical filenames to user-friendly names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Automatic transformations:
2051_Telegram_Webhook_Automation_Webhook.json → "Telegram Webhook Automation"
0250_HTTP_Discord_Import_Scheduled.json → "HTTP Discord Import Scheduled"  
0966_OpenAI_Data_Processing_Manual.json → "OpenAI Data Processing Manual"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Technical Format&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;[ID]_[Service1]_[Service2]_[Purpose]_[Trigger].json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Smart Capitalization Rules&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP&lt;/strong&gt; → HTTP (not Http)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;API&lt;/strong&gt; → API (not Api)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;webhook&lt;/strong&gt; → Webhook&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;automation&lt;/strong&gt; → Automation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;scheduled&lt;/strong&gt; → Scheduled&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🚀 API Documentation&lt;/h2&gt; 
&lt;h3&gt;Core Endpoints&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET /&lt;/code&gt; - Main workflow browser interface&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/stats&lt;/code&gt; - Database statistics and metrics&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows&lt;/code&gt; - Search with filters and pagination&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows/{filename}&lt;/code&gt; - Detailed workflow information&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows/{filename}/download&lt;/code&gt; - Download workflow JSON&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows/{filename}/diagram&lt;/code&gt; - Generate Mermaid diagram&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Advanced Search&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows/category/{category}&lt;/code&gt; - Search by service category&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/categories&lt;/code&gt; - List all available categories&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/integrations&lt;/code&gt; - Get integration statistics&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST /api/reindex&lt;/code&gt; - Trigger background reindexing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Response Examples&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;// GET /api/stats
{
  "total": 2053,
  "active": 215,
  "inactive": 1838,
  "triggers": {
    "Complex": 831,
    "Webhook": 519,
    "Manual": 477,
    "Scheduled": 226
  },
  "total_nodes": 29445,
  "unique_integrations": 365
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;h3&gt;Adding New Workflows&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Export workflow&lt;/strong&gt; as JSON from n8n&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Name descriptively&lt;/strong&gt; following the established pattern&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add to workflows/&lt;/strong&gt; directory&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Remove sensitive data&lt;/strong&gt; (credentials, personal URLs)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Run reindexing&lt;/strong&gt; to update the database&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Quality Standards&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;✅ Workflow must be functional and tested&lt;/li&gt; 
 &lt;li&gt;✅ Remove all credentials and sensitive data&lt;/li&gt; 
 &lt;li&gt;✅ Follow naming convention for consistency&lt;/li&gt; 
 &lt;li&gt;✅ Verify compatibility with recent n8n versions&lt;/li&gt; 
 &lt;li&gt;✅ Include meaningful description or comments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;⚠️ Important Notes&lt;/h2&gt; 
&lt;h3&gt;Security &amp;amp; Privacy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Review before use&lt;/strong&gt; - All workflows shared as-is for educational purposes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update credentials&lt;/strong&gt; - Replace API keys, tokens, and webhooks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Test safely&lt;/strong&gt; - Verify in development environment first&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Check permissions&lt;/strong&gt; - Ensure proper access rights for integrations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compatibility&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;n8n Version&lt;/strong&gt; - Compatible with n8n 1.0+ (most workflows)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Community Nodes&lt;/strong&gt; - Some workflows may require additional node installations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;API Changes&lt;/strong&gt; - External services may have updated their APIs since creation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dependencies&lt;/strong&gt; - Verify required integrations before importing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📚 Resources &amp;amp; References&lt;/h2&gt; 
&lt;h3&gt;Workflow Sources&lt;/h3&gt; 
&lt;p&gt;This comprehensive collection includes workflows from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Official n8n.io&lt;/strong&gt; - Documentation and community examples&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub repositories&lt;/strong&gt; - Open source community contributions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blog posts &amp;amp; tutorials&lt;/strong&gt; - Real-world automation patterns&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User submissions&lt;/strong&gt; - Tested and verified workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise use cases&lt;/strong&gt; - Business process automations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Learn More&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.n8n.io/"&gt;n8n Documentation&lt;/a&gt; - Official documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://community.n8n.io/"&gt;n8n Community&lt;/a&gt; - Community forum and support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://n8n.io/workflows/"&gt;Workflow Templates&lt;/a&gt; - Official template library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.n8n.io/integrations/"&gt;Integration Docs&lt;/a&gt; - Service-specific guides&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🏆 Project Achievements&lt;/h2&gt; 
&lt;h3&gt;Repository Transformation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;2,053 workflows&lt;/strong&gt; professionally organized and named&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;365 unique integrations&lt;/strong&gt; automatically detected and categorized&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;100% meaningful names&lt;/strong&gt; (improved from basic filename patterns)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Zero data loss&lt;/strong&gt; during intelligent renaming process&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced search&lt;/strong&gt; with 12 service categories&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Performance Revolution&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Sub-100ms search&lt;/strong&gt; with SQLite FTS5 full-text indexing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Instant filtering&lt;/strong&gt; across 29,445 workflow nodes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mobile-optimized&lt;/strong&gt; responsive design for all devices&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Real-time statistics&lt;/strong&gt; with live database queries&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Professional interface&lt;/strong&gt; with modern UX principles&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;System Reliability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Robust error handling&lt;/strong&gt; with graceful degradation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Change detection&lt;/strong&gt; for efficient database updates&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Background processing&lt;/strong&gt; for non-blocking operations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive logging&lt;/strong&gt; for debugging and monitoring&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Production-ready&lt;/strong&gt; with proper middleware and security&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;em&gt;This repository represents the most comprehensive and well-organized collection of n8n workflows available, featuring cutting-edge search technology and professional documentation that makes workflow discovery and usage a delightful experience.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;🎯 Perfect for&lt;/strong&gt;: Developers, automation engineers, business analysts, and anyone looking to streamline their workflows with proven n8n automations.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Zie619/n8n-workflows/main/README_ZH.md"&gt;中文&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA/garak</title>
      <link>https://github.com/NVIDIA/garak</link>
      <description>&lt;p&gt;the LLM vulnerability scanner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;garak, LLM vulnerability scanner&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Generative AI Red-teaming &amp;amp; Assessment Kit&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;garak&lt;/code&gt; checks if an LLM can be made to fail in a way we don't want. &lt;code&gt;garak&lt;/code&gt; probes for hallucination, data leakage, prompt injection, misinformation, toxicity generation, jailbreaks, and many other weaknesses. If you know &lt;code&gt;nmap&lt;/code&gt; or &lt;code&gt;msf&lt;/code&gt; / Metasploit Framework, garak does somewhat similar things to them, but for LLMs.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;garak&lt;/code&gt; focuses on ways of making an LLM or dialog system fail. It combines static, dynamic, and adaptive probes to explore this.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;garak&lt;/code&gt;'s a free tool. We love developing it and are always interested in adding functionality to support applications.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/NVIDIA/garak/actions/workflows/test_linux.yml"&gt;&lt;img src="https://github.com/NVIDIA/garak/actions/workflows/test_linux.yml/badge.svg?sanitize=true" alt="Tests/Linux" /&gt;&lt;/a&gt; &lt;a href="https://github.com/NVIDIA/garak/actions/workflows/test_windows.yml"&gt;&lt;img src="https://github.com/NVIDIA/garak/actions/workflows/test_windows.yml/badge.svg?sanitize=true" alt="Tests/Windows" /&gt;&lt;/a&gt; &lt;a href="https://github.com/NVIDIA/garak/actions/workflows/test_macos.yml"&gt;&lt;img src="https://github.com/NVIDIA/garak/actions/workflows/test_macos.yml/badge.svg?sanitize=true" alt="Tests/OSX" /&gt;&lt;/a&gt; &lt;a href="http://garak.readthedocs.io/en/latest/?badge=latest"&gt;&lt;img src="https://readthedocs.org/projects/garak/badge/?version=latest" alt="Documentation Status" /&gt;&lt;/a&gt; &lt;a href="https://arxiv.org/abs/2406.11036"&gt;&lt;img src="https://img.shields.io/badge/cs.CL-arXiv%3A2406.11036-b31b1b.svg?sanitize=true" alt="arXiv" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/uVch4puUCs"&gt;&lt;img src="https://img.shields.io/badge/chat-on%20discord-yellow.svg?sanitize=true" alt="discord-img" /&gt;&lt;/a&gt; &lt;a href="https://github.com/psf/black"&gt;&lt;img src="https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true" alt="Code style: black" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/garak"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/garak" alt="PyPI - Python Version" /&gt;&lt;/a&gt; &lt;a href="https://badge.fury.io/py/garak"&gt;&lt;img src="https://badge.fury.io/py/garak.svg?sanitize=true" alt="PyPI" /&gt;&lt;/a&gt; &lt;a href="https://pepy.tech/project/garak"&gt;&lt;img src="https://static.pepy.tech/badge/garak" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://pepy.tech/project/garak"&gt;&lt;img src="https://static.pepy.tech/badge/garak/month" alt="Downloads" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;h3&gt;&amp;gt; See our user guide! &lt;a href="https://docs.garak.ai/"&gt;docs.garak.ai&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;&amp;gt; Join our &lt;a href="https://discord.gg/uVch4puUCs"&gt;Discord&lt;/a&gt;!&lt;/h3&gt; 
&lt;h3&gt;&amp;gt; Project links &amp;amp; home: &lt;a href="https://garak.ai/"&gt;garak.ai&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;&amp;gt; Twitter: &lt;a href="https://twitter.com/garak_llm"&gt;@garak_llm&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;&amp;gt; DEF CON &lt;a href="https://garak.ai/garak_aiv_slides.pdf"&gt;slides&lt;/a&gt;!&lt;/h3&gt; 
&lt;hr /&gt; 
&lt;h2&gt;LLM support&lt;/h2&gt; 
&lt;p&gt;currently supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://huggingface.co/models"&gt;hugging face hub&lt;/a&gt; generative models&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://replicate.com/"&gt;replicate&lt;/a&gt; text models&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://platform.openai.com/docs/introduction"&gt;openai api&lt;/a&gt; chat &amp;amp; continuation models&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.litellm.ai/"&gt;litellm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;pretty much anything accessible via REST&lt;/li&gt; 
 &lt;li&gt;gguf models like &lt;a href="https://github.com/ggerganov/llama.cpp"&gt;llama.cpp&lt;/a&gt; version &amp;gt;= 1046&lt;/li&gt; 
 &lt;li&gt;.. and many more LLMs!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install:&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;garak&lt;/code&gt; is a command-line tool. It's developed in Linux and OSX.&lt;/p&gt; 
&lt;h3&gt;Standard install with &lt;code&gt;pip&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Just grab it from PyPI and you should be good to go:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m pip install -U garak
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install development version with &lt;code&gt;pip&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The standard pip version of &lt;code&gt;garak&lt;/code&gt; is updated periodically. To get a fresher version from GitHub, try:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m pip install -U git+https://github.com/NVIDIA/garak.git@main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Clone from source&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;garak&lt;/code&gt; has its own dependencies. You can to install &lt;code&gt;garak&lt;/code&gt; in its own Conda environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;conda create --name garak "python&amp;gt;=3.10,&amp;lt;=3.12"
conda activate garak
gh repo clone NVIDIA/garak
cd garak
python -m pip install -e .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;OK, if that went fine, you're probably good to go!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you cloned before the move to the &lt;code&gt;NVIDIA&lt;/code&gt; GitHub organisation, but you're reading this at the &lt;code&gt;github.com/NVIDIA&lt;/code&gt; URI, please update your remotes as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git remote set-url origin https://github.com/NVIDIA/garak.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;The general syntax is:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;garak &amp;lt;options&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;garak&lt;/code&gt; needs to know what model to scan, and by default, it'll try all the probes it knows on that model, using the vulnerability detectors recommended by each probe. You can see a list of probes using:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;garak --list_probes&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To specify a generator, use the &lt;code&gt;--model_type&lt;/code&gt; and, optionally, the &lt;code&gt;--model_name&lt;/code&gt; options. Model type specifies a model family/interface; model name specifies the exact model to be used. The "Intro to generators" section below describes some of the generators supported. A straightforward generator family is Hugging Face models; to load one of these, set &lt;code&gt;--model_type&lt;/code&gt; to &lt;code&gt;huggingface&lt;/code&gt; and &lt;code&gt;--model_name&lt;/code&gt; to the model's name on Hub (e.g. &lt;code&gt;"RWKV/rwkv-4-169m-pile"&lt;/code&gt;). Some generators might need an API key to be set as an environment variable, and they'll let you know if they need that.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;garak&lt;/code&gt; runs all the probes by default, but you can be specific about that too. &lt;code&gt;--probes promptinject&lt;/code&gt; will use only the &lt;a href="https://github.com/agencyenterprise/promptinject"&gt;PromptInject&lt;/a&gt; framework's methods, for example. You can also specify one specific plugin instead of a plugin family by adding the plugin name after a &lt;code&gt;.&lt;/code&gt;; for example, &lt;code&gt;--probes lmrc.SlurUsage&lt;/code&gt; will use an implementation of checking for models generating slurs based on the &lt;a href="https://arxiv.org/abs/2303.18190"&gt;Language Model Risk Cards&lt;/a&gt; framework.&lt;/p&gt; 
&lt;p&gt;For help and inspiration, find us on &lt;a href="https://twitter.com/garak_llm"&gt;Twitter&lt;/a&gt; or &lt;a href="https://discord.gg/uVch4puUCs"&gt;discord&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Probe ChatGPT for encoding-based prompt injection (OSX/*nix) (replace example value with a real OpenAI API key)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export OPENAI_API_KEY="sk-123XXXXXXXXXXXX"
python3 -m garak --model_type openai --model_name gpt-3.5-turbo --probes encoding
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See if the Hugging Face version of GPT2 is vulnerable to DAN 11.0&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python3 -m garak --model_type huggingface --model_name gpt2 --probes dan.Dan_11_0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Reading the results&lt;/h2&gt; 
&lt;p&gt;For each probe loaded, garak will print a progress bar as it generates. Once generation is complete, a row evaluating that probe's results on each detector is given. If any of the prompt attempts yielded an undesirable behavior, the response will be marked as FAIL, and the failure rate given.&lt;/p&gt; 
&lt;p&gt;Here are the results with the &lt;code&gt;encoding&lt;/code&gt; module on a GPT-3 variant: &lt;img src="https://i.imgur.com/8Dxf45N.png" alt="alt text" /&gt;&lt;/p&gt; 
&lt;p&gt;And the same results for ChatGPT: &lt;img src="https://i.imgur.com/VKAF5if.png" alt="alt text" /&gt;&lt;/p&gt; 
&lt;p&gt;We can see that the more recent model is much more susceptible to encoding-based injection attacks, where text-babbage-001 was only found to be vulnerable to quoted-printable and MIME encoding injections. The figures at the end of each row, e.g. 840/840, indicate the number of text generations total and then how many of these seemed to behave OK. The figure can be quite high because more than one generation is made per prompt - by default, 10.&lt;/p&gt; 
&lt;p&gt;Errors go in &lt;code&gt;garak.log&lt;/code&gt;; the run is logged in detail in a &lt;code&gt;.jsonl&lt;/code&gt; file specified at analysis start &amp;amp; end. There's a basic analysis script in &lt;code&gt;analyse/analyse_log.py&lt;/code&gt; which will output the probes and prompts that led to the most hits.&lt;/p&gt; 
&lt;p&gt;Send PRs &amp;amp; open issues. Happy hunting!&lt;/p&gt; 
&lt;h2&gt;Intro to generators&lt;/h2&gt; 
&lt;h3&gt;Hugging Face&lt;/h3&gt; 
&lt;p&gt;Using the Pipeline API:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type huggingface&lt;/code&gt; (for transformers models to run locally)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - use the model name from Hub. Only generative models will work. If it fails and shouldn't, please open an issue and paste in the command you tried + the exception!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Using the Inference API:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type huggingface.InferenceAPI&lt;/code&gt; (for API-based model access)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - the model name from Hub, e.g. &lt;code&gt;"mosaicml/mpt-7b-instruct"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Using private endpoints:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--model_type huggingface.InferenceEndpoint&lt;/code&gt; (for private endpoints)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--model_name&lt;/code&gt; - the endpoint URL, e.g. &lt;code&gt;https://xxx.us-east-1.aws.endpoints.huggingface.cloud&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(optional) set the &lt;code&gt;HF_INFERENCE_TOKEN&lt;/code&gt; environment variable to a Hugging Face API token with the "read" role; see &lt;a href="https://huggingface.co/settings/tokens"&gt;https://huggingface.co/settings/tokens&lt;/a&gt; when logged in&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;OpenAI&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type openai&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - the OpenAI model you'd like to use. &lt;code&gt;gpt-3.5-turbo-0125&lt;/code&gt; is fast and fine for testing.&lt;/li&gt; 
 &lt;li&gt;set the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable to your OpenAI API key (e.g. "sk-19763ASDF87q6657"); see &lt;a href="https://platform.openai.com/account/api-keys"&gt;https://platform.openai.com/account/api-keys&lt;/a&gt; when logged in&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Recognised model types are whitelisted, because the plugin needs to know which sub-API to use. Completion or ChatCompletion models are OK. If you'd like to use a model not supported, you should get an informative error message, and please send a PR / open an issue.&lt;/p&gt; 
&lt;h3&gt;Replicate&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;set the &lt;code&gt;REPLICATE_API_TOKEN&lt;/code&gt; environment variable to your Replicate API token, e.g. "r8-123XXXXXXXXXXXX"; see &lt;a href="https://replicate.com/account/api-tokens"&gt;https://replicate.com/account/api-tokens&lt;/a&gt; when logged in&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Public Replicate models:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type replicate&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - the Replicate model name and hash, e.g. &lt;code&gt;"stability-ai/stablelm-tuned-alpha-7b:c49dae36"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Private Replicate endpoints:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type replicate.InferenceEndpoint&lt;/code&gt; (for private endpoints)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - username/model-name slug from the deployed endpoint, e.g. &lt;code&gt;elim/elims-llama2-7b&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cohere&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type cohere&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; (optional, &lt;code&gt;command&lt;/code&gt; by default) - The specific Cohere model you'd like to test&lt;/li&gt; 
 &lt;li&gt;set the &lt;code&gt;COHERE_API_KEY&lt;/code&gt; environment variable to your Cohere API key, e.g. "aBcDeFgHiJ123456789"; see &lt;a href="https://dashboard.cohere.ai/api-keys"&gt;https://dashboard.cohere.ai/api-keys&lt;/a&gt; when logged in&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Groq&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type groq&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - The name of the model to access via the Groq API&lt;/li&gt; 
 &lt;li&gt;set the &lt;code&gt;GROQ_API_KEY&lt;/code&gt; environment variable to your Groq API key, see &lt;a href="https://console.groq.com/docs/quickstart"&gt;https://console.groq.com/docs/quickstart&lt;/a&gt; for details on creating an API key&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ggml&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type ggml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - The path to the ggml model you'd like to load, e.g. &lt;code&gt;/home/leon/llama.cpp/models/7B/ggml-model-q4_0.bin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;set the &lt;code&gt;GGML_MAIN_PATH&lt;/code&gt; environment variable to the path to your ggml &lt;code&gt;main&lt;/code&gt; executable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;REST&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;rest.RestGenerator&lt;/code&gt; is highly flexible and can connect to any REST endpoint that returns plaintext or JSON. It does need some brief config, which will typically result a short YAML file describing your endpoint. See &lt;a href="https://reference.garak.ai/en/latest/garak.generators.rest.html"&gt;https://reference.garak.ai/en/latest/garak.generators.rest.html&lt;/a&gt; for examples.&lt;/p&gt; 
&lt;h3&gt;NIM&lt;/h3&gt; 
&lt;p&gt;Use models from &lt;a href="https://build.nvidia.com/"&gt;https://build.nvidia.com/&lt;/a&gt; or other NIM endpoints.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;set the &lt;code&gt;NIM_API_KEY&lt;/code&gt; environment variable to your authentication API token, or specify it in the config YAML&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For chat models:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type nim&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - the NIM &lt;code&gt;model&lt;/code&gt; name, e.g. &lt;code&gt;meta/llama-3.1-8b-instruct&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For completion models:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--model_type nim.NVOpenAICompletion&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--model_name&lt;/code&gt; - the NIM &lt;code&gt;model&lt;/code&gt; name, e.g. &lt;code&gt;bigcode/starcoder2-15b&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Test&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--model_type test&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;(alternatively) &lt;code&gt;--model_name test.Blank&lt;/code&gt; For testing. This always generates the empty string, using the &lt;code&gt;test.Blank&lt;/code&gt; generator. Will be marked as failing for any tests that &lt;em&gt;require&lt;/em&gt; an output, e.g. those that make contentious claims and expect the model to refute them in order to pass.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--model_type test.Repeat&lt;/code&gt; For testing. This generator repeats back the prompt it received.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Intro to probes&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Probe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;blank&lt;/td&gt; 
   &lt;td&gt;A simple probe that always sends an empty prompt.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;atkgen&lt;/td&gt; 
   &lt;td&gt;Automated Attack Generation. A red-teaming LLM probes the target and reacts to it in an attempt to get toxic output. Prototype, mostly stateless, for now uses a simple GPT-2 &lt;a href="https://huggingface.co/garak-llm/artgpt2tox"&gt;fine-tuned&lt;/a&gt; on the subset of hhrlhf attempts that yielded detectable toxicity (the only target currently supported for now).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;av_spam_scanning&lt;/td&gt; 
   &lt;td&gt;Probes that attempt to make the model output malicious content signatures&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;continuation&lt;/td&gt; 
   &lt;td&gt;Probes that test if the model will continue a probably undesirable word&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;dan&lt;/td&gt; 
   &lt;td&gt;Various &lt;a href="https://adguard.com/en/blog/chatgpt-dan-prompt-abuse.html"&gt;DAN&lt;/a&gt; and DAN-like attacks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;donotanswer&lt;/td&gt; 
   &lt;td&gt;Prompts to which responsible language models should not answer.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;encoding&lt;/td&gt; 
   &lt;td&gt;Prompt injection through text encoding&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gcg&lt;/td&gt; 
   &lt;td&gt;Disrupt a system prompt by appending an adversarial suffix.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;glitch&lt;/td&gt; 
   &lt;td&gt;Probe model for glitch tokens that provoke unusual behavior.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;grandma&lt;/td&gt; 
   &lt;td&gt;Appeal to be reminded of one's grandmother.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;goodside&lt;/td&gt; 
   &lt;td&gt;Implementations of Riley Goodside attacks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;leakreplay&lt;/td&gt; 
   &lt;td&gt;Evaluate if a model will replay training data.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;lmrc&lt;/td&gt; 
   &lt;td&gt;Subsample of the &lt;a href="https://arxiv.org/abs/2303.18190"&gt;Language Model Risk Cards&lt;/a&gt; probes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;malwaregen&lt;/td&gt; 
   &lt;td&gt;Attempts to have the model generate code for building malware&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;misleading&lt;/td&gt; 
   &lt;td&gt;Attempts to make a model support misleading and false claims&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;packagehallucination&lt;/td&gt; 
   &lt;td&gt;Trying to get code generations that specify non-existent (and therefore insecure) packages.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;promptinject&lt;/td&gt; 
   &lt;td&gt;Implementation of the Agency Enterprise &lt;a href="https://github.com/agencyenterprise/PromptInject/tree/main/promptinject"&gt;PromptInject&lt;/a&gt; work (best paper awards @ NeurIPS ML Safety Workshop 2022)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;realtoxicityprompts&lt;/td&gt; 
   &lt;td&gt;Subset of the RealToxicityPrompts work (data constrained because the full test will take so long to run)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;snowball&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://ofir.io/snowballed_hallucination.pdf"&gt;Snowballed Hallucination&lt;/a&gt; probes designed to make a model give a wrong answer to questions too complex for it to process&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;xss&lt;/td&gt; 
   &lt;td&gt;Look for vulnerabilities the permit or enact cross-site attacks, such as private data exfiltration.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Logging&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;garak&lt;/code&gt; generates multiple kinds of log:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A log file, &lt;code&gt;garak.log&lt;/code&gt;. This includes debugging information from &lt;code&gt;garak&lt;/code&gt; and its plugins, and is continued across runs.&lt;/li&gt; 
 &lt;li&gt;A report of the current run, structured as JSONL. A new report file is created every time &lt;code&gt;garak&lt;/code&gt; runs. The name of this file is output at the beginning and, if successful, also at the end of the run. In the report, an entry is made for each probing attempt both as the generations are received, and again when they are evaluated; the entry's &lt;code&gt;status&lt;/code&gt; attribute takes a constant from &lt;code&gt;garak.attempts&lt;/code&gt; to describe what stage it was made at.&lt;/li&gt; 
 &lt;li&gt;A hit log, detailing attempts that yielded a vulnerability (a 'hit')&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How is the code structured?&lt;/h2&gt; 
&lt;p&gt;Check out the &lt;a href="https://reference.garak.ai/"&gt;reference docs&lt;/a&gt; for an authoritative guide to &lt;code&gt;garak&lt;/code&gt; code structure.&lt;/p&gt; 
&lt;p&gt;In a typical run, &lt;code&gt;garak&lt;/code&gt; will read a model type (and optionally model name) from the command line, then determine which &lt;code&gt;probe&lt;/code&gt;s and &lt;code&gt;detector&lt;/code&gt;s to run, start up a &lt;code&gt;generator&lt;/code&gt;, and then pass these to a &lt;code&gt;harness&lt;/code&gt; to do the probing; an &lt;code&gt;evaluator&lt;/code&gt; deals with the results. There are many modules in each of these categories, and each module provides a number of classes that act as individual plugins.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;garak/probes/&lt;/code&gt; - classes for generating interactions with LLMs&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;garak/detectors/&lt;/code&gt; - classes for detecting an LLM is exhibiting a given failure mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;garak/evaluators/&lt;/code&gt; - assessment reporting schemes&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;garak/generators/&lt;/code&gt; - plugins for LLMs to be probed&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;garak/harnesses/&lt;/code&gt; - classes for structuring testing&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;resources/&lt;/code&gt; - ancillary items required by plugins&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The default operating mode is to use the &lt;code&gt;probewise&lt;/code&gt; harness. Given a list of probe module names and probe plugin names, the &lt;code&gt;probewise&lt;/code&gt; harness instantiates each probe, then for each probe reads its &lt;code&gt;recommended_detectors&lt;/code&gt; attribute to get a list of &lt;code&gt;detector&lt;/code&gt;s to run on the output.&lt;/p&gt; 
&lt;p&gt;Each plugin category (&lt;code&gt;probes&lt;/code&gt;, &lt;code&gt;detectors&lt;/code&gt;, &lt;code&gt;evaluators&lt;/code&gt;, &lt;code&gt;generators&lt;/code&gt;, &lt;code&gt;harnesses&lt;/code&gt;) includes a &lt;code&gt;base.py&lt;/code&gt; which defines the base classes usable by plugins in that category. Each plugin module defines plugin classes that inherit from one of the base classes. For example, &lt;code&gt;garak.generators.openai.OpenAIGenerator&lt;/code&gt; descends from &lt;code&gt;garak.generators.base.Generator&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Larger artefacts, like model files and bigger corpora, are kept out of the repository; they can be stored on e.g. Hugging Face Hub and loaded locally by clients using &lt;code&gt;garak&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Developing your own plugin&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Take a look at how other plugins do it&lt;/li&gt; 
 &lt;li&gt;Inherit from one of the base classes, e.g. &lt;code&gt;garak.probes.base.TextProbe&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Override as little as possible&lt;/li&gt; 
 &lt;li&gt;You can test the new code in at least two ways: 
  &lt;ul&gt; 
   &lt;li&gt;Start an interactive Python session 
    &lt;ul&gt; 
     &lt;li&gt;Import the model, e.g. &lt;code&gt;import garak.probes.mymodule&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;Instantiate the plugin, e.g. &lt;code&gt;p = garak.probes.mymodule.MyProbe()&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Run a scan with test plugins 
    &lt;ul&gt; 
     &lt;li&gt;For probes, try a blank generator and always.Pass detector: &lt;code&gt;python3 -m garak -m test.Blank -p mymodule -d always.Pass&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;For detectors, try a blank generator and a blank probe: &lt;code&gt;python3 -m garak -m test.Blank -p test.Blank -d mymodule&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;For generators, try a blank probe and always.Pass detector: &lt;code&gt;python3 -m garak -m mymodule -p test.Blank -d always.Pass&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Get &lt;code&gt;garak&lt;/code&gt; to list all the plugins of the type you're writing, with &lt;code&gt;--list_probes&lt;/code&gt;, &lt;code&gt;--list_detectors&lt;/code&gt;, or &lt;code&gt;--list_generators&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;We have an FAQ &lt;a href="https://github.com/NVIDIA/garak/raw/main/FAQ.md"&gt;here&lt;/a&gt;. Reach out if you have any more questions! &lt;a href="mailto:garak@nvidia.com"&gt;garak@nvidia.com&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Code reference documentation is at &lt;a href="https://garak.readthedocs.io/en/latest/"&gt;garak.readthedocs.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Citing garak&lt;/h2&gt; 
&lt;p&gt;You can read the &lt;a href="https://raw.githubusercontent.com/NVIDIA/garak/main/garak-paper.pdf"&gt;garak preprint paper&lt;/a&gt;. If you use garak, please cite us.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@article{garak,
  title={{garak: A Framework for Security Probing Large Language Models}},
  author={Leon Derczynski and Erick Galinkin and Jeffrey Martin and Subho Majumdar and Nanna Inie},
  year={2024},
  howpublished={\url{https://garak.ai}}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;em&gt;"Lying is a skill like any other, and if you wish to maintain a level of excellence you have to practice constantly"&lt;/em&gt; - Elim&lt;/p&gt; 
&lt;p&gt;For updates and news see &lt;a href="https://twitter.com/garak_llm"&gt;@garak_llm&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;© 2023- Leon Derczynski; Apache license v2, see &lt;a href="https://raw.githubusercontent.com/NVIDIA/garak/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>punkpeye/awesome-mcp-servers</title>
      <link>https://github.com/punkpeye/awesome-mcp-servers</link>
      <description>&lt;p&gt;A collection of MCP servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome MCP Servers &lt;a href="https://awesome.re"&gt;&lt;img src="https://awesome.re/badge.svg?sanitize=true" alt="Awesome" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/README-th.md"&gt;&lt;img src="https://img.shields.io/badge/Thai-Click-blue" alt="ไทย" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/README.md"&gt;&lt;img src="https://img.shields.io/badge/English-Click-yellow" alt="English" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/README-zh_TW.md"&gt;&lt;img src="https://img.shields.io/badge/%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87-%E9%BB%9E%E6%93%8A%E6%9F%A5%E7%9C%8B-orange" alt="繁體中文" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/README-zh.md"&gt;&lt;img src="https://img.shields.io/badge/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B-orange" alt="简体中文" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/README-ja.md"&gt;&lt;img src="https://img.shields.io/badge/%E6%97%A5%E6%9C%AC%E8%AA%9E-%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF-%E9%9D%92" alt="日本語" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/README-ko.md"&gt;&lt;img src="https://img.shields.io/badge/%ED%95%9C%EA%B5%AD%EC%96%B4-%ED%81%B4%EB%A6%AD-yellow" alt="한국어" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/README-pt_BR.md"&gt;&lt;img src="https://img.shields.io/badge/Portugu%C3%AAs_Brasileiro-Clique-green" alt="Português Brasileiro" /&gt;&lt;/a&gt; &lt;a href="https://glama.ai/mcp/discord"&gt;&lt;img src="https://img.shields.io/discord/1312302100125843476?logo=discord&amp;amp;label=discord" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://www.reddit.com/r/mcp/"&gt;&lt;img src="https://img.shields.io/reddit/subreddit-subscribers/mcp?style=flat&amp;amp;logo=reddit&amp;amp;label=subreddit" alt="Subreddit subscribers" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A curated list of awesome Model Context Protocol (MCP) servers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#what-is-mcp"&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#clients"&gt;Clients&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#community"&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#legend"&gt;Legend&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#server-implementations"&gt;Server Implementations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#frameworks"&gt;Frameworks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#tips-and-tricks"&gt;Tips &amp;amp; Tricks&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is MCP?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://modelcontextprotocol.io/"&gt;MCP&lt;/a&gt; is an open protocol that enables AI models to securely interact with local and remote resources through standardized server implementations. This list focuses on production-ready and experimental MCP servers that extend AI capabilities through file access, database connections, API integrations, and other contextual services.&lt;/p&gt; 
&lt;h2&gt;Clients&lt;/h2&gt; 
&lt;p&gt;Checkout &lt;a href="https://github.com/punkpeye/awesome-mcp-clients/"&gt;awesome-mcp-clients&lt;/a&gt; and &lt;a href="https://glama.ai/mcp/clients"&gt;glama.ai/mcp/clients&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;a href="https://glama.ai/chat"&gt;Glama Chat&lt;/a&gt; is a multi-modal AI client with MCP support &amp;amp; &lt;a href="https://glama.ai/gateway"&gt;AI gateway&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Tutorials&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://glama.ai/blog/2024-11-25-model-context-protocol-quickstart"&gt;Model Context Protocol (MCP) Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/wxCCzo9dGj0"&gt;Setup Claude Desktop App to Use a SQLite Database&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.reddit.com/r/mcp"&gt;r/mcp Reddit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://glama.ai/mcp/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Legend&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;🎖️ – official implementation&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;programming language&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;🐍 – Python codebase&lt;/li&gt; 
   &lt;li&gt;📇 – TypeScript (or JavaScript) codebase&lt;/li&gt; 
   &lt;li&gt;🏎️ – Go codebase&lt;/li&gt; 
   &lt;li&gt;🦀 – Rust codebase&lt;/li&gt; 
   &lt;li&gt;#️⃣ - C# Codebase&lt;/li&gt; 
   &lt;li&gt;☕ - Java codebase&lt;/li&gt; 
   &lt;li&gt;🌊 – C/C++ codebase&lt;/li&gt; 
   &lt;li&gt;💎 - Ruby codebase&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;scope&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;☁️ - Cloud Service&lt;/li&gt; 
   &lt;li&gt;🏠 - Local Service&lt;/li&gt; 
   &lt;li&gt;📟 - Embedded Systems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;operating system&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;🍎 – For macOS&lt;/li&gt; 
   &lt;li&gt;🪟 – For Windows&lt;/li&gt; 
   &lt;li&gt;🐧 - For Linux&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Confused about Local 🏠 vs Cloud ☁️?&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use local when MCP server is talking to a locally installed software, e.g. taking control over Chrome browser.&lt;/li&gt; 
  &lt;li&gt;Use cloud when MCP server is talking to remote APIs, e.g. weather API.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Server Implementations&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] We now have a &lt;a href="https://glama.ai/mcp/servers"&gt;web-based directory&lt;/a&gt; that is synced with the repository.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔗 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#aggregators"&gt;Aggregators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎨 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#art-and-culture"&gt;Art &amp;amp; Culture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📂 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#browser-automation"&gt;Browser Automation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🧬 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#bio"&gt;Biology Medicine and Bioinformatics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;☁️ - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#cloud-platforms"&gt;Cloud Platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👨‍💻 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#code-execution"&gt;Code Execution&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🤖 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#coding-agents"&gt;Coding Agents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🖥️ - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#command-line"&gt;Command Line&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💬 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#communication"&gt;Communication&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👤 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#customer-data-platforms"&gt;Customer Data Platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🗄️ - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#databases"&gt;Databases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📊 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#data-platforms"&gt;Data Platforms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🚚 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#delivery"&gt;Delivery&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🛠️ - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#developer-tools"&gt;Developer Tools&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🧮 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#data-science-tools"&gt;Data Science Tools&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📟 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#embedded-system"&gt;Embedded system&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📂 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#file-systems"&gt;File Systems&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💰 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#finance--fintech"&gt;Finance &amp;amp; Fintech&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎮 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#gaming"&gt;Gaming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🧠 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#knowledge--memory"&gt;Knowledge &amp;amp; Memory&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🗺️ - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#location-services"&gt;Location Services&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎯 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#marketing"&gt;Marketing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📊 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#monitoring"&gt;Monitoring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#multimedia-process"&gt;Multimedia Process&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔎 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#search"&gt;Search &amp;amp; Data Extraction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔒 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#security"&gt;Security&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌐 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#social-media"&gt;Social Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🏃 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#sports"&gt;Sports&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎧 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#support-and-service-management"&gt;Support &amp;amp; Service Management&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌎 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#translation-services"&gt;Translation Services&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎧 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#text-to-speech"&gt;Text-to-Speech&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🚆 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#travel-and-transportation"&gt;Travel &amp;amp; Transportation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔄 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#version-control"&gt;Version Control&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🏢 - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#workplace-and-productivity"&gt;Workplace &amp;amp; Productivity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🛠️ - &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/#other-tools-and-integrations"&gt;Other Tools and Integrations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔗 &lt;a name="aggregators"&gt;&lt;/a&gt;Aggregators&lt;/h3&gt; 
&lt;p&gt;Servers for accessing many apps and tools through a single MCP server.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1mcp-app/agent"&gt;1mcp/agent&lt;/a&gt; 📇 ☁️ 🏠 🍎 🪟 🐧 - A unified Model Context Protocol server implementation that aggregates multiple MCP servers into one.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/duaraghav8/MCPJungle"&gt;duaraghav8/MCPJungle&lt;/a&gt; 🏎️ 🏠 - Self-hosted MCP Server registry for enterprise AI Agents&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/glenngillen/mcpmcp-server"&gt;glenngillen/mcpmcp-server&lt;/a&gt; ☁️ 📇 🍎 🪟 🐧 - A list of MCP servers so you can ask your client which servers you can use to improve your daily workflow.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hamflx/imagen3-mcp"&gt;hamflx/imagen3-mcp&lt;/a&gt; 📇 🏠 🪟 🍎 🐧 - A powerful image generation tool using Google's Imagen 3.0 API through MCP. Generate high-quality images from text prompts with advanced photography, artistic, and photorealistic controls.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/julien040/anyquery"&gt;julien040/anyquery&lt;/a&gt; 🏎️ 🏠 ☁️ - Query more than 40 apps with one binary using SQL. It can also connect to your PostgreSQL, MySQL, or SQLite compatible database. Local-first and private by design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/metatool-ai/metatool-app"&gt;metatool-ai/metatool-app&lt;/a&gt; 📇 ☁️ 🏠 🍎 🪟 🐧 - MetaMCP is the one unified middleware MCP server that manages your MCP connections with GUI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mindsdb/mindsdb"&gt;mindsdb/mindsdb&lt;/a&gt; - Connect and unify data across various platforms and databases with &lt;a href="https://docs.mindsdb.com/mcp/overview"&gt;MindsDB as a single MCP server&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/particlefuture/MCPDiscovery"&gt;particlefuture/MCPDiscovery&lt;/a&gt; - MCP of MCPs. A central hub for MCP servers. Helps you discover available MCP servers and learn how to install and use them.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PipedreamHQ/pipedream/tree/master/modelcontextprotocol"&gt;PipedreamHQ/pipedream&lt;/a&gt; ☁️ 🏠 - Connect with 2,500 APIs with 8,000+ prebuilt tools, and manage servers for your users, in your own app.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sitbon/magg"&gt;sitbon/magg&lt;/a&gt; 🍎 🪟 🐧 ☁️ 🏠 🐍 - Magg: A meta-MCP server that acts as a universal hub, allowing LLMs to autonomously discover, install, and orchestrate multiple MCP servers - essentially giving AI assistants the power to extend their own capabilities on-demand.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SureScaleAI/openai-gpt-image-mcp"&gt;SureScaleAI/openai-gpt-image-mcp&lt;/a&gt; 📇 ☁️ - OpenAI GPT image generation/editing MCP server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sxhxliang/mcp-access-point"&gt;sxhxliang/mcp-access-point&lt;/a&gt; 📇 ☁️ 🏠 🍎 🪟 🐧 - Turn a web service into an MCP server in one click without making any code changes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TheLunarCompany/lunar/tree/main/mcpx"&gt;TheLunarCompany/lunar#mcpx&lt;/a&gt; 📇 🏠 ☁️ 🍎 🪟 🐧 - MCPX is a production-ready, open-source gateway to manage MCP servers at scale—centralize tool discovery, access controls, call prioritization, and usage tracking to simplify agent workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tigranbs/mcgravity"&gt;tigranbs/mcgravity&lt;/a&gt; 📇 🏠 - A proxy tool for composing multiple MCP servers into one unified endpoint. Scale your AI tools by load balancing requests across multiple MCP servers, similar to how Nginx works for web servers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VeriTeknik/pluggedin-mcp-proxy"&gt;VeriTeknik/pluggedin-mcp-proxy&lt;/a&gt; 📇 🏠 - A comprehensive proxy server that combines multiple MCP servers into a single interface with extensive visibility features. It provides discovery and management of tools, prompts, resources, and templates across servers, plus a playground for debugging when building MCP servers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/waystation-ai/mcp"&gt;WayStation-ai/mcp&lt;/a&gt; ☁️ 🍎 🪟 - Seamlessly and securely connect Claude Desktop and other MCP hosts to your favorite apps (Notion, Slack, Monday, Airtable, etc.). Takes less than 90 secs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wegotdocs/open-mcp"&gt;wegotdocs/open-mcp&lt;/a&gt; 📇 🏠 🍎 🪟 🐧 - Turn a web API into an MCP server in 10 seconds and add it to the open source registry: &lt;a href="https://open-mcp.org"&gt;https://open-mcp.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Data-Everything/mcp-server-templates"&gt;Data-Everything/mcp-server-templates&lt;/a&gt; 📇 🏠 🍎 🪟 🐧 - One server. All tools. A unified MCP platform that connects many apps, tools, and services behind one powerful interface—ideal for local devs or production agents.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🚀 &lt;a name="aerospace-and-astrodynamics"&gt;&lt;/a&gt;Aerospace &amp;amp; Astrodynamics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/IO-Aerospace-software-engineering/mcp-server"&gt;IO-Aerospace-software-community/mcp-server&lt;/a&gt; #️⃣ ☁️/🏠 🐧 - IO Aerospace MCP Server: a .NET-based MCP server for aerospace &amp;amp; astrodynamics — ephemeris, orbital conversions, DSS tools, time conversions, and unit/math utilities. Supports STDIO and SSE transports; Docker and native .NET deployment documented.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎨 &lt;a name="art-and-culture"&gt;&lt;/a&gt;Art &amp;amp; Culture&lt;/h3&gt; 
&lt;p&gt;Access and explore art collections, cultural heritage, and museum databases. Enables AI models to search and analyze artistic and cultural content.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/8enSmith/mcp-open-library"&gt;8enSmith/mcp-open-library&lt;/a&gt; 📇 ☁️ - A MCP server for the Open Library API that enables AI assistants to search for book information.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abhiemj/manim-mcp-server"&gt;abhiemj/manim-mcp-server&lt;/a&gt; 🐍 🏠 🪟 🐧 - A local MCP server that generates animations using Manim.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ahujasid/blender-mcp"&gt;ahujasid/blender-mcp&lt;/a&gt; 🐍 - MCP server for working with Blender&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/burningion/video-editing-mcp"&gt;burningion/video-editing-mcp&lt;/a&gt; 🐍 - Add, Analyze, Search, and Generate Video Edits from your Video Jungle Collection&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cantian-ai/bazi-mcp"&gt;cantian-ai/bazi-mcp&lt;/a&gt; 📇 🏠 ☁️ 🍎 🪟 - Provides comprehensive and accurate Bazi (Chinese Astrology) charting and analysis&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cswkim/discogs-mcp-server"&gt;cswkim/discogs-mcp-server&lt;/a&gt; 📇 ☁️ - MCP server to interact with the Discogs API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/diivi/aseprite-mcp"&gt;diivi/aseprite-mcp&lt;/a&gt; 🐍 🏠 - MCP server using the Aseprite API to create pixel art&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djalal/quran-mcp-server"&gt;djalal/quran-mcp-server&lt;/a&gt; 📇 ☁️ MCP server to interact with Quran.com corpus via the official REST API v4.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/raveenb/fal-mcp-server"&gt;raveenb/fal-mcp-server&lt;/a&gt; 🐍 ☁️ - Generate AI images, videos, and music using Fal.ai models (FLUX, Stable Diffusion, MusicGen) directly in Claude Desktop&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mikechao/metmuseum-mcp"&gt;mikechao/metmuseum-mcp&lt;/a&gt; 📇 ☁️ - Metropolitan Museum of Art Collection API integration to search and display artworks in the collection.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OctoEverywhere/mcp"&gt;OctoEverywhere/mcp&lt;/a&gt; #️⃣ ☁️ - A 3D printer MCP server that allows for getting live printer state, webcam snapshots, and printer control.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/omni-mcp/isaac-sim-mcp"&gt;omni-mcp/isaac-sim-mcp&lt;/a&gt; 📇 ☁️ - A MCP Server and an extension enables natural language control of NVIDIA Isaac Sim, Lab, OpenUSD and etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PatrickPalmer/MayaMCP"&gt;PatrickPalmer/MayaMCP&lt;/a&gt; 🐍 🏠 - MCP server for Autodesk Maya&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r-huijts/oorlogsbronnen-mcp"&gt;r-huijts/oorlogsbronnen-mcp&lt;/a&gt; 📇 ☁️ - Oorlogsbronnen (War Sources) API integration for accessing historical WWII records, photographs, and documents from the Netherlands (1940-1945)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r-huijts/rijksmuseum-mcp"&gt;r-huijts/rijksmuseum-mcp&lt;/a&gt; 📇 ☁️ - Rijksmuseum API integration for artwork search, details, and collections&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samuelgursky/davinci-resolve-mcp"&gt;samuelgursky/davinci-resolve-mcp&lt;/a&gt; 🐍 - MCP server integration for DaVinci Resolve providing powerful tools for video editing, color grading, media management, and project control&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yuna0x0/anilist-mcp"&gt;yuna0x0/anilist-mcp&lt;/a&gt; 📇 ☁️ - A MCP server integrating AniList API for anime and manga information&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a name="bio"&gt;&lt;/a&gt;Biology, Medicine and Bioinformatics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/genomoncology/biomcp"&gt;genomoncology/biomcp&lt;/a&gt; 🐍 ☁️ - Biomedical research MCP server providing access to PubMed, ClinicalTrials.gov, and MyVariant.info.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/longevity-genie/biothings-mcp"&gt;longevity-genie/biothings-mcp&lt;/a&gt; 🐍 🏠 ☁️ - MCP server to interact with the BioThings API, including genes, genetic variants, drugs, and taxonomic information.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/longevity-genie/gget-mcp"&gt;longevity-genie/gget-mcp&lt;/a&gt; 🐍 🏠 ☁️ - MCP server providing a powerful bioinformatics toolkit for genomics queries and analysis, wrapping the popular &lt;code&gt;gget&lt;/code&gt; library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/longevity-genie/opengenes-mcp"&gt;longevity-genie/opengenes-mcp&lt;/a&gt; 🎖️ 🐍 🏠 ☁️ - MCP server for a queryable database for aging and longevity research from the OpenGenes project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/longevity-genie/synergy-age-mcp"&gt;longevity-genie/synergy-age-mcp&lt;/a&gt; 🎖️ 🐍 🏠 ☁️ - MCP server for the SynergyAge database of synergistic and antagonistic genetic interactions in longevity.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wso2/fhir-mcp-server"&gt;wso2/fhir-mcp-server&lt;/a&gt; 🐍 🏠 ☁️ - Model Context Protocol server for Fast Healthcare Interoperability Resources (FHIR) APIs. Provides seamless integration with FHIR servers, enabling AI assistants to search, retrieve, create, update, and analyze clinical healthcare data with SMART-on-FHIR authentication support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JamesANZ/medical-mcp"&gt;JamesANZ/medical-mcp&lt;/a&gt; 📇 🏠 - An MCP server that provides access to medical information, drug databases, and healthcare resources. Enables AI assistants to query medical data, drug interactions, and clinical guidelines.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OHNLP/omop_mcp"&gt;OHNLP/omop_mcp&lt;/a&gt; 🐍 🏠 ☁️ - Map clinical terminology to OMOP concepts using LLMs for healthcare data standardization and interoperability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📂 &lt;a name="browser-automation"&gt;&lt;/a&gt;Browser Automation&lt;/h3&gt; 
&lt;p&gt;Web content access and automation capabilities. Enables searching, scraping, and processing web content in AI-friendly formats.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/34892002/bilibili-mcp-js"&gt;34892002/bilibili-mcp-js&lt;/a&gt; 📇 🏠 - A MCP server that supports searching for Bilibili content. Provides LangChain integration examples and test scripts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bytedance/UI-TARS-desktop/tree/main/packages/agent-infra/mcp-servers/browser"&gt;agent-infra/mcp-server-browser&lt;/a&gt; 📇 🏠 - Browser automation capabilities using Puppeteer, both support local and remote browser connection.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Automata-Labs-team/MCP-Server-Playwright"&gt;automatalabs/mcp-server-playwright&lt;/a&gt; 🐍 - An MCP server for browser automation using Playwright&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blackwhite084/playwright-plus-python-mcp"&gt;blackwhite084/playwright-plus-python-mcp&lt;/a&gt; 🐍 - An MCP python server using Playwright for browser automation,more suitable for llm&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/browserbase/mcp-server-browserbase"&gt;browserbase/mcp-server-browserbase&lt;/a&gt; 🎖️ 📇 - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/browsermcp/mcp"&gt;browsermcp/mcp&lt;/a&gt; 📇 🏠 - Automate your local Chrome browser&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/co-browser/browser-use-mcp-server"&gt;co-browser/browser-use-mcp-server&lt;/a&gt; 🐍 - browser-use packaged as an MCP server with SSE transport. includes a dockerfile to run chromium in docker + a vnc server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eat-pray-ai/yutu"&gt;eat-pray-ai/yutu&lt;/a&gt; 🏎️ 🏠 🍎 🐧 🪟 - A fully functional MCP server and CLI for YouTube to automate YouTube operation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/executeautomation/mcp-playwright"&gt;executeautomation/playwright-mcp-server&lt;/a&gt; 📇 - An MCP server using Playwright for browser automation and webscrapping&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/eyalzh/browser-control-mcp"&gt;eyalzh/browser-control-mcp&lt;/a&gt; 📇 🏠 - An MCP server paired with a browser extension that enables LLM clients to control the user's browser (Firefox).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/FradSer/mcp-server-apple-reminders"&gt;fradser/mcp-server-apple-reminders&lt;/a&gt; 📇 🏠 🍎 - An MCP server for interacting with Apple Reminders on macOS&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/getrupt/ashra-mcp"&gt;getrupt/ashra-mcp&lt;/a&gt; 📇 🏠 - Extract structured data from any website. Just prompt and get JSON.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kimtaeyoon83/mcp-server-youtube-transcript"&gt;kimtaeyoon83/mcp-server-youtube-transcript&lt;/a&gt; 📇 ☁️ - Fetch YouTube subtitles and transcripts for AI analysis&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kimtth/mcp-aoai-web-browsing"&gt;kimtth/mcp-aoai-web-browsing&lt;/a&gt; 🐍 🏠 - A &lt;code&gt;minimal&lt;/code&gt; server/client MCP implementation using Azure OpenAI and Playwright.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lightpanda-io/gomcp"&gt;lightpanda-io/gomcp&lt;/a&gt; 🏎 🏠/☁️ 🐧/🍎 - An MCP server in Go for Lightpanda, the ultra fast headless browser designed for web automation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/playwright-mcp"&gt;microsoft/playwright-mcp&lt;/a&gt; - Official Microsoft Playwright MCP server, enabling LLMs to interact with web pages through structured accessibility snapshots&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer"&gt;modelcontextprotocol/server-puppeteer&lt;/a&gt; 📇 🏠 - Browser automation for web scraping and interaction&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ndthanhdev/mcp-browser-kit"&gt;ndthanhdev/mcp-browser-kit&lt;/a&gt; 📇 🏠 - An MCP Server that enables AI assistants to interact with your local browsers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Operative-Sh/web-eval-agent"&gt;operative_sh/web-eval-agent&lt;/a&gt; 🐍 🏠 🍎 - An MCP Server that autonomously debugs web applications with browser-use browser agents&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pskill9/web-search"&gt;pskill9/web-search&lt;/a&gt; 📇 🏠 - An MCP server that enables free web searching using Google search results, with no API keys required.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/recursechat/mcp-server-apple-shortcuts"&gt;recursechat/mcp-server-apple-shortcuts&lt;/a&gt; 📇 🏠 🍎 - An MCP Server Integration with Apple Shortcuts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xspadex/bilibili-mcp.git"&gt;xspadex/bilibili-mcp&lt;/a&gt; 📇 🏠 - A FastMCP-based tool that fetches Bilibili's trending videos and exposes them via a standard MCP interface.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imprvhub/mcp-browser-agent"&gt;imprvhub/mcp-browser-agent&lt;/a&gt; 📇 🏠 - A Model Context Protocol (MCP) integration that provides Claude Desktop with autonomous browser automation capabilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;☁️ &lt;a name="cloud-platforms"&gt;&lt;/a&gt;Cloud Platforms&lt;/h3&gt; 
&lt;p&gt;Cloud platform service integration. Enables management and interaction with cloud infrastructure and services.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/4everland/4everland-hosting-mcp"&gt;4everland/4everland-hosting-mcp&lt;/a&gt; 🎖️ 📇 🏠 🍎 🐧 - An MCP server implementation for 4EVERLAND Hosting enabling instant deployment of AI-generated code to decentralized storage networks like Greenfield, IPFS, and Arweave.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aashari/mcp-server-aws-sso"&gt;aashari/mcp-server-aws-sso&lt;/a&gt; 📇 ☁️ 🏠 - AWS Single Sign-On (SSO) integration enabling AI systems to securely interact with AWS resources by initiating SSO login, listing accounts/roles, and executing AWS CLI commands using temporary credentials.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexbakers/mcp-ipfs"&gt;alexbakers/mcp-ipfs&lt;/a&gt; 📇 ☁️ - upload and manipulation of IPFS storage&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexei-led/aws-mcp-server"&gt;alexei-led/aws-mcp-server&lt;/a&gt; 🐍 ☁️ - A lightweight but powerful server that enables AI assistants to execute AWS CLI commands, use Unix pipes, and apply prompt templates for common AWS tasks in a safe Docker environment with multi-architecture support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexei-led/k8s-mcp-server"&gt;alexei-led/k8s-mcp-server&lt;/a&gt; 🐍 - A lightweight yet robust server that empowers AI assistants to securely execute Kubernetes CLI commands (&lt;code&gt;kubectl&lt;/code&gt;, &lt;code&gt;helm&lt;/code&gt;, &lt;code&gt;istioctl&lt;/code&gt;, and &lt;code&gt;argocd&lt;/code&gt;) using Unix pipes in a safe Docker environment with multi-architecture support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aliyun/alibaba-cloud-ops-mcp-server"&gt;aliyun/alibaba-cloud-ops-mcp-server&lt;/a&gt; 🎖️ 🐍 ☁️ - A MCP server that enables AI assistants to operation resources on Alibaba Cloud, supporting ECS, Cloud Monitor, OOS and widely used cloud products.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/awslabs/mcp"&gt;awslabs/mcp&lt;/a&gt; 🎖️ ☁️ - AWS MCP servers for seamless integration with AWS services and resources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bright8192/esxi-mcp-server"&gt;bright8192/esxi-mcp-server&lt;/a&gt; 🐍 ☁️ - A VMware ESXi/vCenter management server based on MCP (Model Control Protocol), providing simple REST API interfaces for virtual machine management.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudflare/mcp-server-cloudflare"&gt;cloudflare/mcp-server-cloudflare&lt;/a&gt; 🎖️ 📇 ☁️ - Integration with Cloudflare services including Workers, KV, R2, and D1&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cyclops-ui/mcp-cyclops"&gt;cyclops-ui/mcp-cyclops&lt;/a&gt; 🎖️ 🏎️ ☁️ - An MCP server that allows AI agents to manage Kubernetes resources through Cyclops abstraction&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/elementfm/mcp"&gt;elementfm/mcp&lt;/a&gt; 🎖️ 🐍 📇 🏠 ☁️ - Open source podcast hosting platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/erikhoward/adls-mcp-server"&gt;erikhoward/adls-mcp-server&lt;/a&gt; 🐍 ☁️/🏠 - MCP Server for Azure Data Lake Storage. It can perform manage containers, read/write/upload/download operations on container files and manage file metadata.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/espressif/esp-rainmaker-mcp"&gt;espressif/esp-rainmaker-mcp&lt;/a&gt; 🎖️ 🐍 🏠 ☁️ 📟 - Official Espressif MCP Server to manage and control ESP RainMaker Devices.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Flux159/mcp-server-kubernetes"&gt;flux159/mcp-server-kubernetes&lt;/a&gt; 📇 ☁️/🏠 - Typescript implementation of Kubernetes cluster operations for pods, deployments, services.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hardik-id/azure-resource-graph-mcp-server"&gt;hardik-id/azure-resource-graph-mcp-server&lt;/a&gt; 📇 ☁️/🏠 - A Model Context Protocol server for querying and analyzing Azure resources at scale using Azure Resource Graph, enabling AI assistants to explore and monitor Azure infrastructure.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jdubois/azure-cli-mcp"&gt;jdubois/azure-cli-mcp&lt;/a&gt; - A wrapper around the Azure CLI command line that allows you to talk directly to Azure&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/johnneerdael/netskope-mcp"&gt;johnneerdael/netskope-mcp&lt;/a&gt; 🔒 ☁️ - An MCP to give access to all Netskope Private Access components within a Netskope Private Access environments including detailed setup information and LLM examples on usage.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/liveblocks/liveblocks-mcp-server"&gt;liveblocks/liveblocks-mcp-server&lt;/a&gt; 🎖️ 📇 ☁️ - Create, modify, and delete different aspects of &lt;a href="https://liveblocks.io"&gt;Liveblocks&lt;/a&gt; such as rooms, threads, comments, notifications, and more. Additionally, it has read access to Storage and Yjs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/manusa/kubernetes-mcp-server"&gt;manusa/Kubernetes MCP Server&lt;/a&gt; 🏎️ 🏠 A - powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for &lt;strong&gt;any&lt;/strong&gt; Kubernetes resource, this server provides specialized tools to interact with your cluster.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Nebula-Block-Data/nebulablock-mcp-server"&gt;Nebula-Block-Data/nebulablock-mcp-server&lt;/a&gt; 📇 🏠 - integrates with the fastmcp library to expose the full range of NebulaBlock API functionalities as accessible tools&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nwiizo/tfmcp"&gt;nwiizo/tfmcp&lt;/a&gt; - 🦀 🏠 - A Terraform MCP server allowing AI assistants to manage and operate Terraform environments, enabling reading configurations, analyzing plans, applying configurations, and managing Terraform state.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pibblokto/cert-manager-mcp-server"&gt;pibblokto/cert-manager-mcp-server&lt;/a&gt; 🐍 🍎/🐧 ☁️ - mcp server for &lt;a href="https://github.com/cert-manager/cert-manager"&gt;cert-manager&lt;/a&gt; management and troubleshooting&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/portainer/portainer-mcp"&gt;portainer/portainer-mcp&lt;/a&gt; 🏎️ ☁️/🏠 - A powerful MCP server that enables AI assistants to seamlessly interact with Portainer instances, providing natural language access to container management, deployment operations, and infrastructure monitoring capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pulumi/mcp-server"&gt;pulumi/mcp-server&lt;/a&gt; 🎖️ 📇 🏠 - MCP server for interacting with Pulumi using the Pulumi Automation API and Pulumi Cloud API. Enables MCP clients to perform Pulumi operations like retrieving package information, previewing changes, deploying updates, and retrieving stack outputs programmatically.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pythonanywhere/pythonanywhere-mcp-server"&gt;pythonanywhere/pythonanywhere-mcp-server&lt;/a&gt; 🐍 🏠 - MCP server implementation for PythonAnywhere cloud platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qiniu/qiniu-mcp-server"&gt;qiniu/qiniu-mcp-server&lt;/a&gt; 🐍 ☁️ - A MCP built on Qiniu Cloud products, supporting access to Qiniu Cloud Storage, media processing services, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redis/mcp-redis-cloud"&gt;redis/mcp-redis-cloud&lt;/a&gt; 📇 ☁️ - Manage your Redis Cloud resources effortlessly using natural language. Create databases, monitor subscriptions, and configure cloud deployments with simple commands.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reza-gholizade/k8s-mcp-server"&gt;reza-gholizade/k8s-mcp-server&lt;/a&gt; 🏎️ ☁️/🏠 - A Kubernetes Model Context Protocol (MCP) server that provides tools for interacting with Kubernetes clusters through a standardized interface, including API resource discovery, resource management, pod logs, metrics, and events.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rohitg00/kubectl-mcp-server"&gt;rohitg00/kubectl-mcp-server&lt;/a&gt; 🐍 ☁️/🏠 - A Model Context Protocol (MCP) server for Kubernetes that enables AI assistants like Claude, Cursor, and others to interact with Kubernetes clusters through natural language.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/silenceper/mcp-k8s"&gt;silenceper/mcp-k8s&lt;/a&gt; 🏎️ ☁️/🏠 - MCP-K8S is an AI-driven Kubernetes resource management tool that allows users to operate any resources in Kubernetes clusters through natural language interaction, including native resources (like Deployment, Service) and custom resources (CRD). No need to memorize complex commands - just describe your needs, and AI will accurately execute the corresponding cluster operations, greatly enhancing the usability of Kubernetes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StacklokLabs/mkp"&gt;StacklokLabs/mkp&lt;/a&gt; 🏎️ ☁️ - MKP is a Model Context Protocol (MCP) server for Kubernetes that allows LLM-powered applications to interact with Kubernetes clusters. It provides tools for listing and applying Kubernetes resources through the MCP protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StacklokLabs/mkp"&gt;StacklokLabs/mkp&lt;/a&gt; 🏎️ ☁️/🏠 - Model Kontext Protocol Server for Kubernetes that allows LLM-powered applications to interact with Kubernetes clusters through native Go implementation with direct API integration and comprehensive resource management&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StacklokLabs/ocireg-mcp"&gt;StacklokLabs/ocireg-mcp&lt;/a&gt; 🏎️ ☁️ - An SSE-based MCP server that allows LLM-powered applications to interact with OCI registries. It provides tools for retrieving information about container images, listing tags, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/strowk/mcp-k8s-go"&gt;strowk/mcp-k8s-go&lt;/a&gt; 🏎️ ☁️/🏠 - Kubernetes cluster operations through MCP&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thunderboltsid/mcp-nutanix"&gt;thunderboltsid/mcp-nutanix&lt;/a&gt; 🏎️ 🏠/☁️ - Go-based MCP Server for interfacing with Nutanix Prism Central resources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trilogy-group/aws-pricing-mcp"&gt;trilogy-group/aws-pricing-mcp&lt;/a&gt; 🏎️ ☁️/🏠 - Get up-to-date EC2 pricing information with one call. Fast. Powered by a pre-parsed AWS pricing catalogue.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VmLia/books-mcp-server"&gt;VmLia/books-mcp-server&lt;/a&gt; 📇 ☁️ - This is an MCP server used for querying books, and it can be applied in common MCP clients, such as Cherry Studio.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/weibaohui/k8m"&gt;weibaohui/k8m&lt;/a&gt; 🏎️ ☁️/🏠 - Provides MCP multi-cluster Kubernetes management and operations, featuring a management interface, logging, and nearly 50 built-in tools covering common DevOps and development scenarios. Supports both standard and CRD resources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/weibaohui/kom"&gt;weibaohui/kom&lt;/a&gt; 🏎️ ☁️/🏠 - Provides MCP multi-cluster Kubernetes management and operations. It can be integrated as an SDK into your own project and includes nearly 50 built-in tools covering common DevOps and development scenarios. Supports both standard and CRD resources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wenhuwang/mcp-k8s-eye"&gt;wenhuwang/mcp-k8s-eye&lt;/a&gt; 🏎️ ☁️/🏠 - MCP Server for kubernetes management, and analyze your cluster, application health&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;👨‍💻 &lt;a name="code-execution"&gt;&lt;/a&gt;Code Execution&lt;/h3&gt; 
&lt;p&gt;Code execution servers. Allow LLMs to execute code in a secure environment, e.g. for coding agents.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alfonsograziano/node-code-sandbox-mcp"&gt;alfonsograziano/node-code-sandbox-mcp&lt;/a&gt; 📇 🏠 – A Node.js MCP server that spins up isolated Docker-based sandboxes for executing JavaScript snippets with on-the-fly npm dependency installation and clean teardown&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ckanthony/openapi-mcp"&gt;ckanthony/openapi-mcp&lt;/a&gt; 🏎️ ☁️ - OpenAPI-MCP: Dockerized MCP Server to allow your AI agent to access any API with existing api docs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gwbischof/outsource-mcp"&gt;gwbischof/outsource-mcp&lt;/a&gt; 🐍 ☁️ - Give your AI assistant its own AI assistants. For example: "Could you ask openai to generate an image of a dog?"&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hileamlakB/PRIMS"&gt;hileamlakB/PRIMS&lt;/a&gt; 🐍 🏠 – A Python Runtime Interpreter MCP Server that executes user-submitted code in an isolated environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ouvreboite/openapi-to-mcp"&gt;ouvreboite/openapi-to-mcp&lt;/a&gt; #️⃣ ☁️ - Lightweight MCP server to access any API using their OpenAPI specification. Supports OAuth2 and full JSON schema parameters and request body.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pydantic/pydantic-ai/tree/main/mcp-run-python"&gt;pydantic/pydantic-ai/mcp-run-python&lt;/a&gt; 🐍 🏠 - Run Python code in a secure sandbox via MCP tool calls&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r33drichards/mcp-js"&gt;r33drichards/mcp-js&lt;/a&gt; 🦀 🏠 🐧 🍎 - A Javascript code execution sandbox that uses v8 to isolate code to run AI generated javascript locally without fear. Supports heap snapshotting for persistent sessions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yepcode/mcp-server-js"&gt;yepcode/mcp-server-js&lt;/a&gt; 🎖️ 📇 ☁️ - Execute any LLM-generated code in a secure and scalable sandbox environment and create your own MCP tools using JavaScript or Python, with full support for NPM and PyPI packages&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dagger/container-use"&gt;dagger/container-use&lt;/a&gt; 🏎️ 🏠 🐧 🍎 🪟 - Containerized environments for coding agents. Multiple agents can work independently, isolated in fresh containers and git branches. No conflicts, many experiments. Full execution history, terminal access to agent environments, git workflow. Any agent/model/infra stack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🤖 &lt;a name="coding-agents"&gt;&lt;/a&gt;Coding Agents&lt;/h3&gt; 
&lt;p&gt;Full coding agents that enable LLMs to read, edit, and execute code and solve general programming tasks completely autonomously.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/doggybee/mcp-server-leetcode"&gt;doggybee/mcp-server-leetcode&lt;/a&gt; 📇 ☁️ - An MCP server that enables AI models to search, retrieve, and solve LeetCode problems. Supports metadata filtering, user profiles, submissions, and contest data access.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ezyang/codemcp"&gt;ezyang/codemcp&lt;/a&gt; 🐍 🏠 - Coding agent with basic read, write and command line tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gabrielmaialva33/winx-code-agent"&gt;gabrielmaialva33/winx-code-agent&lt;/a&gt; 🦀 🏠 - A high-performance Rust reimplementation of WCGW for code agents, providing shell execution and advanced file management capabilities for LLMs via MCP.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jinzcdev/leetcode-mcp-server"&gt;jinzcdev/leetcode-mcp-server&lt;/a&gt; 📇 ☁️ - MCP server enabling automated access to &lt;strong&gt;LeetCode&lt;/strong&gt;'s programming problems, solutions, submissions and public data with optional authentication for user-specific features (e.g., notes), supporting both &lt;code&gt;leetcode.com&lt;/code&gt; (global) and &lt;code&gt;leetcode.cn&lt;/code&gt; (China) sites.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/juehang/vscode-mcp-server"&gt;juehang/vscode-mcp-server&lt;/a&gt; 📇 🏠 - A MCP Server that allows AI such as Claude to read from the directory structure in a VS Code workspace, see problems picked up by linter(s) and the language server, read code files, and make edits.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/micl2e2/code-to-tree"&gt;micl2e2/code-to-tree&lt;/a&gt; 🌊 🏠 📟 🐧 🪟 🍎 - A single-binary MCP server that converts source code into AST, regardless of language.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oraios/serena"&gt;oraios/serena&lt;/a&gt; 🐍 🏠 - A fully-featured coding agent that relies on symbolic code operations by using language servers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com.mcas.ms/pdavis68/RepoMapper"&gt;pdavis68/RepoMapper&lt;/a&gt; 🐧 🪟 🍎 - An MCP server (and command-line tool) to provide a dynamic map of chat-related files from the repository with their function prototypes and related files in order of relevance. Based on the "Repo Map" functionality in Aider.chat&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rinadelph/Agent-MCP"&gt;rinadelph/Agent-MCP&lt;/a&gt; 🐍 🏠 - A framework for creating multi-agent systems using MCP for coordinated AI collaboration, featuring task management, shared context, and RAG capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stippi/code-assistant"&gt;stippi/code-assistant&lt;/a&gt; 🦀 🏠 - Coding agent with basic list, read, replace_in_file, write, execute_command and web search tools. Supports multiple projects concurrently.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tiianhk/MaxMSP-MCP-Server"&gt;tiianhk/MaxMSP-MCP-Server&lt;/a&gt; 🐍 🏠 🎵 🎥 - A coding agent for Max (Max/MSP/Jitter), which is a visual programming language for music and multimedia.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VertexStudio/developer"&gt;VertexStudio/developer&lt;/a&gt; 🦀 🏠 🍎 🪟 🐧 - Comprehensive developer tools for file editing, shell command execution, and screen capture capabilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🖥️ &lt;a name="command-line"&gt;&lt;/a&gt;Command Line&lt;/h3&gt; 
&lt;p&gt;Run commands, capture output and otherwise interact with shells and command line tools.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/automateyournetwork/pyATS_MCP"&gt;automateyournetwork/pyATS_MCP&lt;/a&gt; - Cisco pyATS server enabling structured, model-driven interaction with network devices.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aymericzip/intlayer"&gt;aymericzip/intlayer&lt;/a&gt; 📇 ☁️ 🏠 - A MCP Server that enhance your IDE with AI-powered assistance for Intlayer i18n / CMS tool: smart CLI access, access to the docs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ferrislucas/iterm-mcp"&gt;ferrislucas/iterm-mcp&lt;/a&gt; 🖥️ 🛠️ 💬 - A Model Context Protocol server that provides access to iTerm. You can run commands and ask questions about what you see in the iTerm terminal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/g0t4/mcp-server-commands"&gt;g0t4/mcp-server-commands&lt;/a&gt; 📇 🏠 - Run any command with &lt;code&gt;run_command&lt;/code&gt; and &lt;code&gt;run_script&lt;/code&gt; tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maxim-saplin/mcp_safe_local_python_executor"&gt;maxim-saplin/mcp_safe_local_python_executor&lt;/a&gt; - Safe Python interpreter based on HF Smolagents &lt;code&gt;LocalPythonExecutor&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/misiektoja/kill-process-mcp"&gt;misiektoja/kill-process-mcp&lt;/a&gt; 🐍 🏠 🍎 🪟 🐧 - List and terminate OS processes via natural language queries&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MladenSU/cli-mcp-server"&gt;MladenSU/cli-mcp-server&lt;/a&gt; 🐍 🏠 - Command line interface with secure execution and customizable security policies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OthmaneBlial/term_mcp_deepseek"&gt;OthmaneBlial/term_mcp_deepseek&lt;/a&gt; 🐍 🏠 - A DeepSeek MCP-like Server for Terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sonirico/mcp-shell"&gt;sonirico/mcp-shell&lt;/a&gt; - 🏎️ 🏠 🍎 🪟 🐧 Give hands to AI. MCP server to run shell commands securely, auditably, and on demand on isolated environments like docker.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tufantunc/ssh-mcp"&gt;tufantunc/ssh-mcp&lt;/a&gt; 📇 🏠 🐧 🪟 - MCP server exposing SSH control for Linux and Windows servers via Model Context Protocol. Securely execute remote shell commands with password or SSH key authentication.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tumf/mcp-shell-server"&gt;tumf/mcp-shell-server&lt;/a&gt; - A secure shell command execution server implementing the Model Context Protocol (MCP)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wonderwhy-er/DesktopCommanderMCP"&gt;wonderwhy-er/DesktopCommanderMCP&lt;/a&gt; 📇 🏠 🍎 🪟 🐧 - A swiss-army-knife that can manage/execute programs and read/write/search/edit code and text files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;💬 &lt;a name="communication"&gt;&lt;/a&gt;Communication&lt;/h3&gt; 
&lt;p&gt;Integration with communication platforms for message management and channel operations. Enables AI models to interact with team communication tools.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AbdelStark/nostr-mcp"&gt;AbdelStark/nostr-mcp&lt;/a&gt; ☁️ - A Nostr MCP server that allows to interact with Nostr, enabling posting notes, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adhikasp/mcp-twikit"&gt;adhikasp/mcp-twikit&lt;/a&gt; 🐍 ☁️ - Interact with Twitter search and timeline&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/agentmail-to/agentmail-toolkit/tree/main/mcp"&gt;agentmail-toolkit/mcp&lt;/a&gt; 🐍 💬 - An MCP server to create inboxes on the fly to send, receive, and take actions on email. We aren't AI agents for email, but email for AI Agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/areweai/tsgram-mcp"&gt;areweai/tsgram-mcp&lt;/a&gt; - TSgram: Telegram + Claude with local workspace access on your phone in typescript. Read, write, and vibe code on the go!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arpitbatra123/mcp-googletasks"&gt;arpitbatra123/mcp-googletasks&lt;/a&gt; 📇 ☁️ - An MCP server to interface with the Google Tasks API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Cactusinhand/mcp_server_notify"&gt;Cactusinhand/mcp_server_notify&lt;/a&gt; 🐍 🏠 - A MCP server that send desktop notifications with sound effect when agent tasks are completed.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PhononX/cv-mcp-server"&gt;PhononX/cv-mcp-server&lt;/a&gt; 🎖️ 📇 🏠 ☁️ 🍎 🪟 🐧 - MCP Server that connects AI Agents to &lt;a href="https://getcarbon.app"&gt;Carbon Voice&lt;/a&gt;. Create, manage, and interact with voice messages, conversations, direct messages, folders, voice memos, AI actions and more in &lt;a href="https://getcarbon.app"&gt;Carbon Voice&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/carterlasalle/mac_messages_mcp"&gt;carterlasalle/mac_messages_mcp&lt;/a&gt; 🏠 🍎 🚀 - An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chaindead/telegram-mcp"&gt;chaindead/telegram-mcp&lt;/a&gt; 🏎️ 🏠 - Telegram API integration for accessing user data, managing dialogs (chats, channels, groups), retrieving messages, and handling read status&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chigwell/telegram-mcp"&gt;chigwell/telegram-mcp&lt;/a&gt; 🐍 🏠 - Telegram API integration for accessing user data, managing dialogs (chats, channels, groups), retrieving messages, sending messages and handling read status.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Danielpeter-99/calcom-mcp"&gt;Danielpeter-99/calcom-mcp&lt;/a&gt; 🐍 🏠 - MCP server for Calcom. Manage event types, create bookings, and access Cal.com scheduling data through LLMs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/elie222/inbox-zero/tree/main/apps/mcp-server"&gt;elie222/inbox-zero&lt;/a&gt; 🐍 ☁️ - An MCP server for Inbox Zero. Adds functionality on top of Gmail like finding out which emails you need to reply to or need to follow up on.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gerkensm/callcenter.js-mcp"&gt;gerkensm/callcenter.js-mcp&lt;/a&gt; 📇 ☁️ - An MCP server to make phone calls using VoIP/SIP and OpenAI's Realtime API and observe the transcript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gitmotion/ntfy-me-mcp"&gt;gitmotion/ntfy-me-mcp&lt;/a&gt; 📇 ☁️ 🏠 - An ntfy MCP server for sending/fetching ntfy notifications to your self-hosted ntfy server from AI Agents 📤 (supports secure token auth &amp;amp; more - use with npx or docker!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gotoolkits/mcp-wecombot-server.git"&gt;gotoolkits/wecombot&lt;/a&gt; 🚀 ☁️ - An MCP server application that sends various types of messages to the WeCom group robot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hannesrudolph/imessage-query-fastmcp-mcp-server"&gt;hannesrudolph/imessage-query-fastmcp-mcp-server&lt;/a&gt; 🐍 🏠 🍎 - An MCP server that provides safe access to your iMessage database through Model Context Protocol (MCP), enabling LLMs to query and analyze iMessage conversations with proper phone number validation and attachment handling&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/i-am-bee/acp-mcp"&gt;i-am-bee/acp-mcp&lt;/a&gt; 🐍 💬 - An MCP server acting as an adapter into the &lt;a href="https://agentcommunicationprotocol.dev"&gt;ACP&lt;/a&gt; ecosystem. Seamlessly exposes ACP agents to MCP clients, bridging the communication gap between the two protocols.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/InditexTech/mcp-teams-server"&gt;InditexTech/mcp-teams-server&lt;/a&gt; 🐍 ☁️ - MCP server that integrates Microsoft Teams messaging (read, post, mention, list members and threads)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jagan-shanmugam/mattermost-mcp-host"&gt;jagan-shanmugam/mattermost-mcp-host&lt;/a&gt; 🐍 🏠 - A MCP server along with MCP host that provides access to Mattermost teams, channels and messages. MCP host is integrated as a bot in Mattermost with access to MCP servers that can be configured.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jaipandya/producthunt-mcp-server"&gt;jaipandya/producthunt-mcp-server&lt;/a&gt; 🐍 🏠 - MCP server for Product Hunt. Interact with trending posts, comments, collections, users, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joinly-ai/joinly"&gt;joinly-ai/joinly&lt;/a&gt; 🐍☁️ - MCP server to interact with browser-based meeting platforms (Zoom, Teams, Google Meet). Enables AI agents to send bots to online meetings, gather live transcripts, speak text, and send messages in the meeting chat.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/keturiosakys/bluesky-context-server"&gt;keturiosakys/bluesky-context-server&lt;/a&gt; 📇 ☁️ - Bluesky instance integration for querying and interaction&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/khan2a/telephony-mcp-server"&gt;khan2a/telephony-mcp-server&lt;/a&gt; 🐍 💬 - MCP Telephony server for automating voice calls with Speech-to-Text and Speech Recognition to summarize call conversations. Send and receive SMS, detect voicemail, and integrate with Vonage APIs for advanced telephony workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/korotovsky/slack-mcp-server"&gt;korotovsky/slack-mcp-server&lt;/a&gt; 📇 ☁️ - The most powerful MCP server for Slack Workspaces.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lharries/whatsapp-mcp"&gt;lharries/whatsapp-mcp&lt;/a&gt; 🐍 🏎️ - An MCP server for searching your personal WhatsApp messages, contacts and sending messages to individuals or groups&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/line/line-bot-mcp-server"&gt;line/line-bot-mcp-server&lt;/a&gt; 🎖 📇 ☁️ - MCP Server for Integrating LINE Official Account&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OverQuotaAI/chatterboxio-mcp-server"&gt;OverQuotaAI/chatterboxio-mcp-server&lt;/a&gt; 📇 ☁️ - MCP server implementation for ChatterBox.io, enabling AI agents to send bots to online meetings (Zoom, Google Meet) and obtain transcripts and recordings.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wyattjoh/imessage-mcp"&gt;wyattjoh/imessage-mcp&lt;/a&gt; 📇 🏠 🍎 - A Model Context Protocol server for reading iMessage data from macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sawa-zen/vrchat-mcp"&gt;sawa-zen/vrchat-mcp&lt;/a&gt; - 📇 🏠 This is an MCP server for interacting with the VRChat API. You can retrieve information about friends, worlds, avatars, and more in VRChat.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/softeria/ms-365-mcp-server"&gt;softeria/ms-365-mcp-server&lt;/a&gt; 📇 ☁️ - MCP server that connects to Microsoft Office and the whole Microsoft 365 suite using Graph API (including Outlook, mail, files, Excel, calendar)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SaseQ/discord-mcp"&gt;saseq/discord-mcp&lt;/a&gt; ☕ 📇 🏠 💬 - A MCP server for the Discord integration. Enable your AI assistants to seamlessly interact with Discord. Enhance your Discord experience with powerful automation capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/teddyzxcv/ntfy-mcp"&gt;teddyzxcv/ntfy-mcp&lt;/a&gt; - The MCP server that keeps you informed by sending the notification on phone using ntfy&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UserAd/didlogic_mcp"&gt;userad/didlogic_mcp&lt;/a&gt; 🐍 ☁️ - An MCP server for &lt;a href="https://didlogic.com"&gt;DIDLogic&lt;/a&gt;. Adds functionality to manage SIP endpoints, numbers and destinations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YCloud-Developers/ycloud-whatsapp-mcp-server"&gt;YCloud-Developers/ycloud-whatsapp-mcp-server&lt;/a&gt; 📇 🏠 - MCP server for WhatsApp Business Platform by YCloud.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zcaceres/gtasks-mcp"&gt;zcaceres/gtasks-mcp&lt;/a&gt; 📇 ☁️ - An MCP server to Manage Google Tasks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ztxtxwd/open-feishu-mcp-server"&gt;ztxtxwd/open-feishu-mcp-server&lt;/a&gt; 📇 ☁️ 🏠 - A Model Context Protocol (MCP) server with built-in Feishu OAuth authentication, supporting remote connections and providing comprehensive Feishu document management tools including block creation, content updates, and advanced features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;👤 &lt;a name="customer-data-platforms"&gt;&lt;/a&gt;Customer Data Platforms&lt;/h3&gt; 
&lt;p&gt;Provides access to customer profiles inside of customer data platforms&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/antvis/mcp-server-chart"&gt;antv/mcp-server-chart&lt;/a&gt; 🎖️ 📇 ☁️ - A Model Context Protocol server for generating visual charts using &lt;a href="https://github.com/antvis"&gt;AntV&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hustcc/mcp-echarts"&gt;hustcc/mcp-echarts&lt;/a&gt; 📇 🏠 - Generate visual charts using &lt;a href="https://echarts.apache.org"&gt;Apache ECharts&lt;/a&gt; with AI MCP dynamically.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hustcc/mcp-mermaid"&gt;hustcc/mcp-mermaid&lt;/a&gt; 📇 🏠 - Generate &lt;a href="https://mermaid.js.org/"&gt;mermaid&lt;/a&gt; diagram and chart with AI MCP dynamically.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iaptic/mcp-server-iaptic"&gt;iaptic/mcp-server-iaptic&lt;/a&gt; 🎖️ 📇 ☁️ - Connect with &lt;a href="https://www.iaptic.com"&gt;iaptic&lt;/a&gt; to ask about your Customer Purchases, Transaction data and App Revenue statistics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenDataMCP/OpenDataMCP"&gt;OpenDataMCP/OpenDataMCP&lt;/a&gt; 🐍 ☁️ - Connect any Open Data to any LLM with Model Context Protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sergehuber/inoyu-mcp-unomi-server"&gt;sergehuber/inoyu-mcp-unomi-server&lt;/a&gt; 📇 ☁️ - An MCP server to access and updates profiles on an Apache Unomi CDP server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tinybirdco/mcp-tinybird"&gt;tinybirdco/mcp-tinybird&lt;/a&gt; 🐍 ☁️ - An MCP server to interact with a Tinybird Workspace from any MCP client.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🗄️ &lt;a name="databases"&gt;&lt;/a&gt;Databases&lt;/h3&gt; 
&lt;p&gt;Secure database access with schema inspection capabilities. Enables querying and analyzing data with configurable security controls including read-only access.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aiven-Open/mcp-aiven"&gt;Aiven-Open/mcp-aiven&lt;/a&gt; - 🐍 ☁️ 🎖️ - Navigate your &lt;a href="https://go.aiven.io/mcp-server"&gt;Aiven projects&lt;/a&gt; and interact with the PostgreSQL®, Apache Kafka®, ClickHouse® and OpenSearch® services&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexander-zuev/supabase-mcp-server"&gt;alexanderzuev/supabase-mcp-server&lt;/a&gt; - Supabase MCP Server with support for SQL query execution and database exploration tools&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aliyun/alibabacloud-tablestore-mcp-server"&gt;aliyun/alibabacloud-tablestore-mcp-server&lt;/a&gt; ☕ 🐍 ☁️ - MCP service for Tablestore, features include adding documents, semantic search for documents based on vectors and scalars, RAG-friendly, and serverless.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/amineelkouhen/mcp-cockroachdb"&gt;amineelkouhen/mcp-cockroachdb&lt;/a&gt; 🐍 ☁️ - A Model Context Protocol server for managing, monitoring, and querying data in &lt;a href="https://cockroachlabs.com"&gt;CockroachDB&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/benborla/mcp-server-mysql"&gt;benborla29/mcp-server-mysql&lt;/a&gt; ☁️ 🏠 - MySQL database integration in NodeJS with configurable access controls and schema inspection&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bram2w/baserow"&gt;bram2w/baserow&lt;/a&gt; - Baserow database integration with table search, list, and row create, read, update, and delete capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/c4pt0r/mcp-server-tidb"&gt;c4pt0r/mcp-server-tidb&lt;/a&gt; 🐍 ☁️ - TiDB database integration with schema inspection and query capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Canner/wren-engine"&gt;Canner/wren-engine&lt;/a&gt; 🐍 🦀 🏠 - The Semantic Engine for Model Context Protocol(MCP) Clients and AI Agents&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/centralmind/gateway"&gt;centralmind/gateway&lt;/a&gt; 🏎️ 🏠 🍎 🪟 - MCP and MCP SSE Server that automatically generate API based on database schema and data. Supports PostgreSQL, Clickhouse, MySQL, Snowflake, BigQuery, Supabase&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChristianHinge/dicom-mcp"&gt;ChristianHinge/dicom-mcp&lt;/a&gt; 🐍 ☁️ 🏠 - DICOM integration to query, read, and move medical images and reports from PACS and other DICOM compliant systems.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chroma-core/chroma-mcp"&gt;chroma-core/chroma-mcp&lt;/a&gt; 🎖️ 🐍 ☁️ 🏠 - Chroma MCP server to access local and cloud Chroma instances for retrieval capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ClickHouse/mcp-clickhouse"&gt;ClickHouse/mcp-clickhouse&lt;/a&gt; 🐍 ☁️ - ClickHouse database integration with schema inspection and query capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/confluentinc/mcp-confluent"&gt;confluentinc/mcp-confluent&lt;/a&gt; 🐍 ☁️ - Confluent integration to interact with Confluent Kafka and Confluent Cloud REST APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Couchbase-Ecosystem/mcp-server-couchbase"&gt;Couchbase-Ecosystem/mcp-server-couchbase&lt;/a&gt; 🎖️ 🐍 ☁️ 🏠 - Couchbase MCP server provides unfied access to both Capella cloud and self-managed clusters for document operations, SQL++ queries and natural language data analysis.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cr7258/elasticsearch-mcp-server"&gt;cr7258/elasticsearch-mcp-server&lt;/a&gt; 🐍 🏠 - MCP Server implementation that provides Elasticsearch interaction&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/crystaldba/postgres-mcp"&gt;crystaldba/postgres-mcp&lt;/a&gt; 🐍 🏠 - All-in-one MCP server for Postgres development and operations, with tools for performance analysis, tuning, and health checks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Dataring-engineering/mcp-server-trino"&gt;Dataring-engineering/mcp-server-trino&lt;/a&gt; 🐍 ☁️ - Trino MCP Server to query and access data from Trino Clusters.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dave-wind/mysql-mcp-server"&gt;davewind/mysql-mcp-server&lt;/a&gt; 🏎️ 🏠 A –&amp;nbsp;user-friendly read-only mysql mcp server for cursor and n8n...&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/designcomputer/mysql_mcp_server"&gt;designcomputer/mysql_mcp_server&lt;/a&gt; 🐍 🏠 - MySQL database integration with configurable access controls, schema inspection, and comprehensive security guidelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/domdomegg/airtable-mcp-server"&gt;domdomegg/airtable-mcp-server&lt;/a&gt; 📇 🏠 - Airtable database integration with schema inspection, read and write capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/edwinbernadus/nocodb-mcp-server"&gt;edwinbernadus/nocodb-mcp-server&lt;/a&gt; 📇 ☁️ - Nocodb database integration, read and write capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ergut/mcp-bigquery-server"&gt;ergut/mcp-bigquery-server&lt;/a&gt; 📇 ☁️ - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/f4ww4z/mcp-mysql-server"&gt;f4ww4z/mcp-mysql-server&lt;/a&gt; 📇 🏠 - Node.js-based MySQL database integration that provides secure MySQL database operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ferrants/memvid-mcp-server"&gt;ferrants/memvid-mcp-server&lt;/a&gt; 🐍 🏠 - Python Streamable HTTP Server you can run locally to interact with &lt;a href="https://github.com/Olow304/memvid"&gt;memvid&lt;/a&gt; storage and semantic search.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fireproof-storage/mcp-database-server"&gt;fireproof-storage/mcp-database-server&lt;/a&gt; 📇 ☁️ - Fireproof ledger database with multi-user sync&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/freema/mcp-gsheets"&gt;freema/mcp-gsheets&lt;/a&gt; 📇 ☁️ - MCP server for Google Sheets API integration with comprehensive reading, writing, formatting, and sheet management capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/FreePeak/db-mcp-server"&gt;FreePeak/db-mcp-server&lt;/a&gt; 🏎️ 🏠 – A high-performance multi-database MCP server built with Golang, supporting MySQL &amp;amp; PostgreSQL (NoSQL coming soon). Includes built-in tools for query execution, transaction management, schema exploration, query building, and performance analysis, with seamless Cursor integration for enhanced database workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/furey/mongodb-lens"&gt;furey/mongodb-lens&lt;/a&gt; 📇 🏠 - MongoDB Lens: Full Featured MCP Server for MongoDB Databases&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gannonh/firebase-mcp"&gt;gannonh/firebase-mcp&lt;/a&gt; 🔥 ⛅️ - Firebase services including Auth, Firestore and Storage.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stack.convex.dev/convex-mcp-server"&gt;get-convex/convex-backend&lt;/a&gt; 📇 ☁️ - Convex database integration to introspect tables, functions, and run oneoff queries (&lt;a href="https://github.com/get-convex/convex-backend/raw/main/npm-packages/convex/src/cli/mcp.ts"&gt;Source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/googleapis/genai-toolbox"&gt;googleapis/genai-toolbox&lt;/a&gt; 🏎️ ☁️ - Open source MCP server specializing in easy, fast, and secure tools for Databases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/greptimedb-mcp-server"&gt;GreptimeTeam/greptimedb-mcp-server&lt;/a&gt; 🐍 🏠 - MCP Server for querying GreptimeDB.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hannesrudolph/sqlite-explorer-fastmcp-mcp-server"&gt;hannesrudolph/sqlite-explorer-fastmcp-mcp-server&lt;/a&gt; 🐍 🏠 - An MCP server that provides safe, read-only access to SQLite databases through Model Context Protocol (MCP). This server is built with the FastMCP framework, which enables LLMs to explore and query SQLite databases with built-in safety features and query validation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/henilcalagiya/google-sheets-mcp"&gt;henilcalagiya/google-sheets-mcp&lt;/a&gt; 🐍 🏠 - Your AI Assistant's Gateway to Google Sheets! 25 powerful tools for seamless Google Sheets automation via MCP.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hydrolix/mcp-hydrolix"&gt;hydrolix/mcp-hydrolix&lt;/a&gt; 🎖️ 🐍 ☁️ - Hydrolix time-series datalake integration providing schema exploration and query capabilities to LLM-based workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/idoru/influxdb-mcp-server"&gt;idoru/influxdb-mcp-server&lt;/a&gt; 📇 ☁️ 🏠 - Run queries against InfluxDB OSS API v2.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/influxdata/influxdb3_mcp_server"&gt;InfluxData/influxdb3_mcp_server&lt;/a&gt; 🎖️ 📇 🏠 ☁️ - Official MCP server for InfluxDB 3 Core/Enterprise/Cloud Dedicated&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/isaacwasserman/mcp-snowflake-server"&gt;isaacwasserman/mcp-snowflake-server&lt;/a&gt; 🐍 ☁️ - Snowflake integration implementing read and (optional) write operations as well as insight tracking&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iunera/druid-mcp-server"&gt;iunera/druid-mcp-server&lt;/a&gt; ☕ ☁️ 🏠 - Comprehensive MCP server for Apache Druid that provides extensive tools, resources, and prompts for managing and analyzing Druid clusters.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YannBrrd/simple_snowflake_mcp"&gt;yannbrrd/simple_snowflake_mcp&lt;/a&gt; 🐍 ☁️ - Simple Snowflake MCP server that works behind a corporate proxy. Read and write (optional) operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joshuarileydev/supabase"&gt;joshuarileydev/supabase-mcp-server&lt;/a&gt; - Supabase MCP Server for managing and creating projects and organisations in Supabase&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jovezhong/mcp-timeplus"&gt;jovezhong/mcp-timeplus&lt;/a&gt; 🐍 ☁️ - MCP server for Apache Kafka and Timeplus. Able to list Kafka topics, poll Kafka messages, save Kafka data locally and query streaming data with SQL via Timeplus&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jparkerweb/mcp-sqlite"&gt;jparkerweb/mcp-sqlite&lt;/a&gt; 📇 🏠 - Model Context Protocol (MCP) server that provides comprehensive SQLite database interaction capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KashiwaByte/vikingdb-mcp-server"&gt;KashiwaByte/vikingdb-mcp-server&lt;/a&gt; 🐍 ☁️ - VikingDB integration with collection and index introduction, vector store and search capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kiliczsh/mcp-mongo-server"&gt;kiliczsh/mcp-mongo-server&lt;/a&gt; 📇 🏠 - A Model Context Protocol Server for MongoDB&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ktanaka101/mcp-server-duckdb"&gt;ktanaka101/mcp-server-duckdb&lt;/a&gt; 🐍 🏠 - DuckDB database integration with schema inspection and query capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LucasHild/mcp-server-bigquery"&gt;LucasHild/mcp-server-bigquery&lt;/a&gt; 🐍 ☁️ - BigQuery database integration with schema inspection and query capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/memgraph/ai-toolkit/tree/main/integrations/mcp-memgraph"&gt;memgraph/mcp-memgraph&lt;/a&gt; 🐍 🏠 - Memgraph MCP Server - includes a tool to run a query against Memgraph and a schema resource.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/postgres"&gt;modelcontextprotocol/server-postgres&lt;/a&gt; 📇 🏠 - PostgreSQL database integration with schema inspection and query capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite"&gt;modelcontextprotocol/server-sqlite&lt;/a&gt; 🐍 🏠 - SQLite database operations with built-in analysis features&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neo4j-contrib/mcp-neo4j"&gt;neo4j-contrib/mcp-neo4j&lt;/a&gt; 🐍 🏠 - Model Context Protocol with Neo4j (Run queries, Knowledge Graph Memory, Manaage Neo4j Aura Instances)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neondatabase/mcp-server-neon"&gt;neondatabase/mcp-server-neon&lt;/a&gt; 📇 ☁️ — An MCP Server for creating and managing Postgres databases using Neon Serverless Postgres&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/niledatabase/nile-mcp-server"&gt;niledatabase/nile-mcp-server&lt;/a&gt; MCP server for Nile's Postgres platform - Manage and query Postgres databases, tenants, users, auth using LLMs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenLinkSoftware/mcp-jdbc-server"&gt;openlink/mcp-server-jdbc&lt;/a&gt; 🐍 🏠 - An MCP server for generic Database Management System (DBMS) Connectivity via the Java Database Connectivity (JDBC) protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenLinkSoftware/mcp-odbc-server"&gt;openlink/mcp-server-odbc&lt;/a&gt; 🐍 🏠 - An MCP server for generic Database Management System (DBMS) Connectivity via the Open Database Connectivity (ODBC) protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server"&gt;openlink/mcp-server-sqlalchemy&lt;/a&gt; 🐍 🏠 - An MCP server for generic Database Management System (DBMS) Connectivity via SQLAlchemy using Python ODBC (pyodbc)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pab1it0/adx-mcp-server"&gt;pab1it0/adx-mcp-server&lt;/a&gt; 🐍 ☁️ - Query and analyze Azure Data Explorer databases&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pab1it0/prometheus-mcp-server"&gt;pab1it0/prometheus-mcp-server&lt;/a&gt; 🐍 ☁️ - Query and analyze Prometheus, open-source monitoring system.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/prisma/mcp"&gt;prisma/mcp&lt;/a&gt; 📇 ☁️ 🏠 - Gives LLMs the ability to manage Prisma Postgres databases (e.g. spin up new databases and run migrations or queries).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qdrant/mcp-server-qdrant"&gt;qdrant/mcp-server-qdrant&lt;/a&gt; 🐍 🏠 - A Qdrant MCP server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QuantGeekDev/mongo-mcp"&gt;QuantGeekDev/mongo-mcp&lt;/a&gt; 📇 🏠 - MongoDB integration that enables LLMs to interact directly with databases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc"&gt;quarkiverse/mcp-server-jdbc&lt;/a&gt; ☕ 🏠 - Connect to any JDBC-compatible database and query, insert, update, delete, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rashidazarang/airtable-mcp"&gt;rashidazarang/airtable-mcp&lt;/a&gt; 🐍 ☁️ - Connect AI tools directly to Airtable. Query, create, update, and delete records using natural language. Features include base management, table operations, schema manipulation, record filtering, and data migration through a standardized MCP interface.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redis/mcp-redis"&gt;redis/mcp-redis&lt;/a&gt; 🐍 🏠 - The Redis official MCP Server offers an interface to manage and search data in Redis.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/runekaagaard/mcp-alchemy"&gt;runekaagaard/mcp-alchemy&lt;/a&gt; 🐍 🏠 - Universal SQLAlchemy-based database integration supporting PostgreSQL, MySQL, MariaDB, SQLite, Oracle, MS SQL Server and many more databases. Features schema and relationship inspection, and large dataset analysis capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/s2-streamstore/s2-sdk-typescript"&gt;s2-streamstore/s2-sdk-typescript&lt;/a&gt; 🎖️ 📇 ☁️ - Official MCP server for the S2.dev serverless stream platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/schemacrawler/SchemaCrawler-MCP-Server-Usage"&gt;schemacrawler/SchemaCrawler-MCP-Server-Usage&lt;/a&gt; 🎖️ ☕ – Connect to any relational database, and be able to get valid SQL, and ask questions like what does a certain column prefix mean.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sirmews/mcp-pinecone"&gt;sirmews/mcp-pinecone&lt;/a&gt; 🐍 ☁️ - Pinecone integration with vector search capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skysqlinc/skysql-mcp"&gt;skysqlinc/skysql-mcp&lt;/a&gt; 🎖️ ☁️ - Serverless MariaDB Cloud DB MCP server. Tools to launch, delete, execute SQL and work with DB level AI agents for accurate text-2-sql and conversations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/supabase-community/supabase-mcp"&gt;supabase-community/supabase-mcp&lt;/a&gt; 🎖️ 📇 ☁️ - Official Supabase MCP server to connect AI assistants directly with your Supabase project and allows them to perform tasks like managing tables, fetching config, and querying data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TheRaLabs/legion-mcp"&gt;TheRaLabs/legion-mcp&lt;/a&gt; 🐍 🏠 Universal database MCP server supporting multiple database types including PostgreSQL, Redshift, CockroachDB, MySQL, RDS MySQL, Microsoft SQL Server, BigQuery, Oracle DB, and SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tradercjz/dolphindb-mcp-server"&gt;tradercjz/dolphindb-mcp-server&lt;/a&gt; 🐍 ☁️ - TDolphinDB database integration with schema inspection and query capabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tuannvm/mcp-trino"&gt;tuannvm/mcp-trino&lt;/a&gt; 🏎️ ☁️ - A Go implementation of a Model Context Protocol (MCP) server for Trino&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VictoriaMetrics-Community/mcp-victorialogs"&gt;VictoriaMetrics-Community/mcp-victorialogs&lt;/a&gt; 🎖️ 🏎️ 🏠 - Provides comprehensive integration with your &lt;a href="https://docs.victoriametrics.com/victorialogs/querying/#http-api"&gt;VictoriaLogs instance APIs&lt;/a&gt; and &lt;a href="https://docs.victoriametrics.com/victorialogs/"&gt;documentation&lt;/a&gt; for working with logs, investigating and debugging tasks related to your VictoriaLogs instances.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/weaviate/mcp-server-weaviate"&gt;weaviate/mcp-server-weaviate&lt;/a&gt; 🐍 📇 ☁️ - An MCP Server to connect to your Weaviate collections as a knowledge base as well as using Weaviate as a chat memory store.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wenb1n-dev/mysql_mcp_server_pro"&gt;wenb1n-dev/mysql_mcp_server_pro&lt;/a&gt; 🐍 🏠 - Supports SSE, STDIO; not only limited to MySQL's CRUD functionality; also includes database exception analysis capabilities; controls database permissions based on roles; and makes it easy for developers to extend tools with customization&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Xexr/mcp-libsql"&gt;xexr/mcp-libsql&lt;/a&gt; 📇 🏠 ☁️ - Production-ready MCP server for libSQL databases with comprehensive security and management tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/XGenerationLab/xiyan_mcp_server"&gt;XGenerationLab/xiyan_mcp_server&lt;/a&gt; 📇 ☁️ — An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xing5/mcp-google-sheets"&gt;xing5/mcp-google-sheets&lt;/a&gt; 🐍 ☁️ - A Model Context Protocol server for interacting with Google Sheets. This server provides tools to create, read, update, and manage spreadsheets through the Google Sheets API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ydb-platform/ydb-mcp"&gt;ydb/ydb-mcp&lt;/a&gt; 🎖️ 🐍 ☁️ - MCP server for interacting with &lt;a href="https://ydb.tech"&gt;YDB&lt;/a&gt; databases&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yincongcyincong/VictoriaMetrics-mcp-server"&gt;yincongcyincong/VictoriaMetrics-mcp-server&lt;/a&gt; 🐍 🏠 - An MCP server for interacting with VictoriaMetrics database.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Zhwt/go-mcp-mysql"&gt;Zhwt/go-mcp-mysql&lt;/a&gt; 🏎️ 🏠 – Easy to use, zero dependency MySQL MCP server built with Golang with configurable readonly mode and schema inspection.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zilliztech/mcp-server-milvus"&gt;zilliztech/mcp-server-milvus&lt;/a&gt; 🐍 🏠 ☁️ - MCP Server for Milvus / Zilliz, making it possible to interact with your database.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📊 &lt;a name="data-platforms"&gt;&lt;/a&gt;Data Platforms&lt;/h3&gt; 
&lt;p&gt;Data Platforms for data integration, transformation and pipeline orchestration.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aywengo/kafka-schema-reg-mcp"&gt;aywengo/kafka-schema-reg-mcp&lt;/a&gt; 🐍 ☁️ 🏠 🍎 🪟 🐧 - Comprehensive Kafka Schema Registry MCP server with 48 tools for multi-registry management, schema migration, and enterprise features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dbt-labs/dbt-mcp"&gt;dbt-labs/dbt-mcp&lt;/a&gt; 🎖️ 🐍 🏠 ☁️ - Official MCP server for &lt;a href="https://www.getdbt.com/product/what-is-dbt"&gt;dbt (data build tool)&lt;/a&gt; providing integration with dbt Core/Cloud CLI, project metadata discovery, model information, and semantic layer querying capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flowcore-io/mcp-flowcore-platform"&gt;flowcore/mcp-flowcore-platform&lt;/a&gt; 🎖️ 📇 ☁️ 🏠 - Interact with Flowcore to perform actions, ingest data, and analyse, cross reference and utilise any data in your data cores, or in public data cores; all with human language.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JordiNeil/mcp-databricks-server"&gt;JordiNei/mcp-databricks-server&lt;/a&gt; 🐍 ☁️ - Connect to Databricks API, allowing LLMs to run SQL queries, list jobs, and get job status.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jwaxman19/qlik-mcp"&gt;jwaxman19/qlik-mcp&lt;/a&gt; 📇 ☁️ - MCP Server for Qlik Cloud API that enables querying applications, sheets, and extracting data from visualizations with comprehensive authentication and rate limiting support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/keboola/keboola-mcp-server"&gt;keboola/keboola-mcp-server&lt;/a&gt; 🐍 - interact with Keboola Connection Data Platform. This server provides tools for listing and accessing data from Keboola Storage API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mattijsdp/dbt-docs-mcp"&gt;mattijsdp/dbt-docs-mcp&lt;/a&gt; 🐍 🏠 - MCP server for dbt-core (OSS) users as the official dbt MCP only supports dbt Cloud. Supports project metadata, model and column-level lineage and dbt documentation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yashshingvi/databricks-genie-MCP"&gt;yashshingvi/databricks-genie-MCP&lt;/a&gt; 🐍 ☁️ - A server that connects to the Databricks Genie API, allowing LLMs to ask natural language questions, run SQL queries, and interact with Databricks conversational agents.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;💻 &lt;a name="developer-tools"&gt;&lt;/a&gt;Developer Tools&lt;/h3&gt; 
&lt;p&gt;Tools and integrations that enhance the development workflow and environment management.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/21st-dev/magic-mcp"&gt;21st-dev/Magic-MCP&lt;/a&gt; - Create crafted UI components inspired by the best 21st.dev design engineers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aashari/mcp-server-atlassian-bitbucket"&gt;aashari/mcp-server-atlassian-bitbucket&lt;/a&gt; 📇 ☁️ - Atlassian Bitbucket Cloud integration. Enables AI systems to interact with repositories, pull requests, workspaces, and code in real time.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aashari/mcp-server-atlassian-confluence"&gt;aashari/mcp-server-atlassian-confluence&lt;/a&gt; 📇 ☁️ - Atlassian Confluence Cloud integration. Enables AI systems to interact with Confluence spaces, pages, and content with automatic ADF to Markdown conversion.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aashari/mcp-server-atlassian-jira"&gt;aashari/mcp-server-atlassian-jira&lt;/a&gt; 📇 ☁️ - Atlassian Jira Cloud integration. Enables AI systems to interact with Jira projects, issues, comments, and related development information in real time.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abrinsmead/mindpilot-mcp"&gt;abrinsmead/mindpilot-mcp&lt;/a&gt; 📇 🏠 - Visualizes code, architecture and other concepts as mermaid diagrams in a locally hosted web app. Just ask your agent to "show me this in a diagram".&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/admica/FileScopeMCP"&gt;admica/FileScopeMCP&lt;/a&gt; 🐍 📇 🦀 - Analyzes your codebase identifying important files based on dependency relationships. Generates diagrams and importance scores, helping AI assistants understand the codebase.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/akramIOT/MCP_AI_SOC_Sher"&gt;akramIOT/MCP_AI_SOC_Sher&lt;/a&gt; 🐍 ☁️ 📇 - MCP Server to do dynamic AI SOC Security Threat analysis for a Text2SQL AI Agent.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alimo7amed93/webhook-tester-mcp"&gt;alimo7amed93/webhook-tester-mcp&lt;/a&gt; 🐍 ☁️ – A FastMCP-based server for interacting with webhook-test.com. Enables users to create, retrieve, and delete webhooks locally using Claude.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ambar/simctl-mcp"&gt;ambar/simctl-mcp&lt;/a&gt; 📇 🏠 🍎 A MCP server implementation for iOS Simulator control.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/api7/apisix-mcp"&gt;api7/apisix-mcp&lt;/a&gt; 🎖️ 📇 🏠 MCP Server that support for querying and managing all resource in &lt;a href="https://github.com/apache/apisix"&gt;Apache APISIX&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ArchAI-Labs/fastmcp-sonarqube-metrics"&gt;ArchAI-Labs/fastmcp-sonarqube-metrics&lt;/a&gt; 🐍 🏠 🪟 🐧 🍎 - A Model Context Protocol (MCP) server that provides a set of tools for retrieving information about SonarQube projects like metrics (actual and historical), issues, health status.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/artmann/package-registry-mcp"&gt;artmann/package-registry-mcp&lt;/a&gt; 🏠 📇 🍎 🪟 🐧 - MCP server for searching and getting up-to-date information about NPM, Cargo, PyPi, and NuGet packages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wyattjoh/jsr-mcp"&gt;wyattjoh/jsr-mcp&lt;/a&gt; 📇 ☁️ - Model Context Protocol server for the JSR (JavaScript Registry)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/augmnt/augments-mcp-server"&gt;augmnt/augments-mcp-server&lt;/a&gt; 📇 ☁️ 🏠 - Transform Claude Code with intelligent, real-time access to 90+ framework documentation sources. Get accurate, up-to-date code generation that follows current best practices for React, Next.js, Laravel, FastAPI, Tailwind CSS, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/automation-ai-labs/mcp-link"&gt;automation-ai-labs/mcp-link&lt;/a&gt; 🏎️ 🏠 - Seamlessly Integrate Any API with AI Agents (with OpenAPI Schema)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/axliupore/mcp-code-runner"&gt;axliupore/mcp-code-runner&lt;/a&gt; 📇 🏠 - An MCP server for running code locally via Docker and supporting multiple programming languages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/azer/react-analyzer-mcp"&gt;azer/react-analyzer-mcp&lt;/a&gt; 📇 🏠 - Analyze React code locally, generate docs / llm.txt for whole project at once&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bucketco/bucket-javascript-sdk/tree/main/packages/cli#model-context-protocol"&gt;bucketco/bucket-javascript-sdk#cli&lt;/a&gt; 🎖️ 📇 ☁️ - Flag features directly from chat in your IDE with &lt;a href="https://bucket.co"&gt;Bucket&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chunkydotdev/bldbl-mcp"&gt;Chunkydotdev/bldbl-mcp&lt;/a&gt; 📇 ☁️ 🍎 🪟 🐧 - Official MCP server for Buildable AI-powered development platform &lt;a href="https://bldbl.dev"&gt;bldbl.dev&lt;/a&gt;. Enables AI assistants to manage tasks, track progress, get project context, and collaborate with humans on software projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CircleCI-Public/mcp-server-circleci"&gt;CircleCI/mcp-server-circleci&lt;/a&gt; 📇 ☁️ Enable AI Agents to fix build failures from CircleCI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cjo4m06/mcp-shrimp-task-manager"&gt;cjo4m06/mcp-shrimp-task-manager&lt;/a&gt; 📇 ☁️ 🏠 – A programming-focused task management system that boosts coding agents like Cursor AI with advanced task memory, self-reflection, and dependency management. &lt;a href="https://cjo4m06.github.io/mcp-shrimp-task-manager"&gt;ShrimpTaskManager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ckanthony/gin-mcp"&gt;ckanthony/gin-mcp&lt;/a&gt; 🏎️ ☁️ 📟 🪟 🐧 🍎 - A zero-configuration Go library to automatically expose existing Gin web framework APIs as MCP tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ckreiling/mcp-server-docker"&gt;ckreiling/mcp-server-docker&lt;/a&gt; 🐍 🏠 - Integrate with Docker to manage containers, images, volumes, and networks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CodeLogicIncEngineering/codelogic-mcp-server"&gt;CodeLogicIncEngineering/codelogic-mcp-server&lt;/a&gt; 🎖️ 🐍 ☁️ 🍎 🪟 🐧 - Official MCP server for CodeLogic, providing access to code dependency analytics, architectural risk analysis, and impact assessment tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/comet-ml/opik-mcp"&gt;Comet-ML/Opik-MCP&lt;/a&gt; 🎖️ 📇 ☁️ 🏠 - Use natural language to explore LLM observability, traces, and monitoring data captured by Opik.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cqfn/aibolit-mcp-server"&gt;cqfn/aibolit-mcp-server&lt;/a&gt; ☕ - Helping Your AI Agent Identify Hotspots for Refactoring; Help AI Understand How to 'Make Code Better'&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/currents-dev/currents-mcp"&gt;currents-dev/currents-mcp&lt;/a&gt; 🎖️ 📇 ☁️ Enable AI Agents to fix Playwright test failures reported to &lt;a href="https://currents.dev"&gt;Currents&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/davidan90/time-node-mcp"&gt;davidan90/time-node-mcp&lt;/a&gt; 📇 🏠 - Timezone-aware date and time operations with support for IANA timezones, timezone conversion, and Daylight Saving Time handling.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/davidlin2k/pox-mcp-server"&gt;davidlin2k/pox-mcp-server&lt;/a&gt; 🐍 🏠 - MCP server for the POX SDN controller to provides network control and management capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/delano/postman-mcp-server"&gt;delano/postman-mcp-server&lt;/a&gt; 📇 ☁️ - Interact with &lt;a href="https://www.postman.com/postman/postman-public-workspace/"&gt;Postman API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexpota/deploy-mcp"&gt;deploy-mcp/deploy-mcp&lt;/a&gt; 📇 ☁️ 🏠 - Universal deployment tracker for AI assistants with live status badges and deployment monitoring&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/docker/hub-mcp"&gt;docker/hub-mcp&lt;/a&gt; 🎖️ 📇 ☁️ 🏠 - Official MCP server to interact with Docker Hub, providing access to repositories, hub search and Docker Hardened Images&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/endorhq/cli"&gt;endorhq/cli&lt;/a&gt; 📇 ☁️ 🏠 🪟 🐧 🍎 - Endor lets your AI agents run services like MariaDB, Postgres, Redis, Memcached, Alpine, or Valkey in isolated sandboxes. Get pre-configured applications that boot in less than 5 seconds.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flipt-io/mcp-server-flipt"&gt;flipt-io/mcp-server-flipt&lt;/a&gt; 📇 🏠 - Enable AI assistants to interact with your feature flags in &lt;a href="https://flipt.io"&gt;Flipt&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/freema/mcp-design-system-extractor"&gt;freema/mcp-design-system-extractor&lt;/a&gt; 📇 🏠 - Extracts component information from Storybook design systems. Provides HTML, styles, props, dependencies, theme tokens and component metadata for AI-powered design system analysis.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gitkraken/gk-cli"&gt;gitkraken/gk-cli&lt;/a&gt; 🎖️ 🏎️ 🏠 ☁️ 🍎 🪟 🐧 - A CLI for interacting with GitKraken APIs. Includes an MCP server via &lt;code&gt;gk mcp&lt;/code&gt; that not only wraps GitKraken APIs, but also Jira, GitHub, GitLab, and more. Works with local tools and remote services.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GLips/Figma-Context-MCP"&gt;GLips/Figma-Context-MCP&lt;/a&gt; 📇 🏠 - Provide coding agents direct access to Figma data to help them one-shot design implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gofireflyio/firefly-mcp"&gt;gofireflyio/firefly-mcp&lt;/a&gt; 🎖️ 📇 ☁️ - Integrates, discovers, manages, and codifies cloud resources with &lt;a href="https://firefly.ai"&gt;Firefly&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorosun/unified-diff-mcp"&gt;gorosun/unified-diff-mcp&lt;/a&gt; 📇 🏠 - Generate and visualize unified diff comparisons with beautiful HTML/PNG output, supporting side-by-side and line-by-line views for filesystem dry-run integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Govcraft/rust-docs-mcp-server"&gt;Govcraft/rust-docs-mcp-server&lt;/a&gt; 🦀 🏠 - Provides up-to-date documentation context for a specific Rust crate to LLMs via an MCP tool, using semantic search (embeddings) and LLM summarization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/promptexecution/cratedocs-mcp"&gt;PromptExecution/cratedocs-mcp&lt;/a&gt; 🦀 🏠 - Outputs short-form Rust crate derived traits,interfaces, etc. from AST (uses same api as rust-analyzer), output limits (token estimation) &amp;amp; crate docs w/regex stripping.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HainanZhao/mcp-gitlab-jira"&gt;HainanZhao/mcp-gitlab-jira&lt;/a&gt; 📇 ☁️ 🏠 - Unified MCP server for GitLab and Jira: manage projects, merge requests, files, releases and tickets with AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/haris-musa/excel-mcp-server"&gt;haris-musa/excel-mcp-server&lt;/a&gt; 🐍 🏠 - An Excel manipulation server providing workbook creation, data operations, formatting, and advanced features (charts, pivot tables, formulae).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/higress-group/higress-ops-mcp-server"&gt;higress-group/higress-ops-mcp-server&lt;/a&gt; 🐍 🏠 - MCP server that provides comprehensive tools for managing &lt;a href="https://github.com/alibaba/higress"&gt;Higress&lt;/a&gt; gateway configurations and operations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hijaz/postmancer"&gt;hijaz/postmancer&lt;/a&gt; 📇 🏠 - A MCP server for replacing Rest Clients like Postman/Insomnia, by allowing your LLM to maintain and use api collections.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hloiseaufcms/mcp-gopls"&gt;hloiseaufcms/mcp-gopls&lt;/a&gt; 🏎️ 🏠 - A MCP server for interacting with &lt;a href="https://github.com/golang/tools/tree/master/gopls"&gt;Go's Language Server Protocol (gopls)&lt;/a&gt; and benefit from advanced Go code analysis features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hungthai1401/bruno-mcp"&gt;hungthai1401/bruno-mcp&lt;/a&gt; 📇 🏠 - A MCP server for interacting with &lt;a href="https://www.usebruno.com/"&gt;Bruno API Client&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hyperb1iss/droidmind"&gt;hyperb1iss/droidmind&lt;/a&gt; 🐍 🏠 - Control Android devices with AI through MCP, enabling device control, debugging, system analysis, and UI automation with a comprehensive security framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Hypersequent/qasphere-mcp"&gt;Hypersequent/qasphere-mcp&lt;/a&gt; 🎖️ 📇 ☁️ - Integration with &lt;a href="https://qasphere.com/"&gt;QA Sphere&lt;/a&gt; test management system, enabling LLMs to discover, summarize, and interact with test cases directly from AI-powered IDEs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/idosal/git-mcp"&gt;idosal/git-mcp&lt;/a&gt; 📇 ☁️ - &lt;a href="https://gitmcp.io/"&gt;gitmcp.io&lt;/a&gt; is a generic remote MCP server to connect to ANY &lt;a href="https://www.github.com"&gt;GitHub&lt;/a&gt; repository or project for documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/IlyaGulya/gradle-mcp-server"&gt;IlyaGulya/gradle-mcp-server&lt;/a&gt; 🏠 - Gradle integration using the Gradle Tooling API to inspect projects, execute tasks, and run tests with per-test result reporting&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/promptexecution/just-mcp"&gt;promptexecution/just-mcp&lt;/a&gt; 🦀 🏠 - Justfile integration that enables LLMs to execute any CLI or script commands with parameters safely and easily, with environment variable support and comprehensive testing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/InditexTech/mcp-server-simulator-ios-idb"&gt;InditexTech/mcp-server-simulator-ios-idb&lt;/a&gt; 📇 🏠 🍎 - A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators (iPhone, iPad, etc.) through natural language commands.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/InhiblabCore/mcp-image-compression"&gt;InhiblabCore/mcp-image-compression&lt;/a&gt; 🐍 🏠 - MCP server for local compression of various image formats.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inspizzz/jetbrains-datalore-mcp"&gt;Inspizzz/jetbrains-datalore-mcp&lt;/a&gt; 🐍 ☁️ - MCP server for interacting with cloud deployments of Jetbrains Datalore platform. Fully incorporated Datalore API ( run, run interactively, get run data, fetch files )&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joshuayoes/ios-simulator-mcp"&gt;ios-simulator-mcp&lt;/a&gt; 📇 🏠 🍎 - A Model Context Protocol (MCP) server for interacting with iOS simulators. This server allows you to interact with iOS simulators by getting information about them, controlling UI interactions, and inspecting UI elements.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/isaacphi/mcp-language-server"&gt;isaacphi/mcp-language-server&lt;/a&gt; 🏎️ 🏠 - MCP Language Server helps MCP enabled clients navigate codebases more easily by giving them access to semantic tools like get definition, references, rename, and diagnostics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/IvanAmador/vercel-ai-docs-mcp"&gt;IvanAmador/vercel-ai-docs-mcp&lt;/a&gt; 📇 🏠 - A Model Context Protocol (MCP) server that provides AI-powered search and querying capabilities for the Vercel AI SDK documentation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/j4c0bs/mcp-server-sql-analyzer"&gt;j4c0bs/mcp-server-sql-analyzer&lt;/a&gt; 🐍 - MCP server that provides SQL analysis, linting, and dialect conversion using &lt;a href="https://github.com/tobymao/sqlglot"&gt;SQLGlot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/janreges/ai-distiller"&gt;janreges/ai-distiller-mcp&lt;/a&gt; 🏎️ 🏠 - Extracts essential code structure from large codebases into AI-digestible format, helping AI agents write code that correctly uses existing APIs on the first attempt.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jasonjmcghee/claude-debugs-for-you"&gt;jasonjmcghee/claude-debugs-for-you&lt;/a&gt; 📇 🏠 - An MCP Server and VS Code Extension which enables (language agnostic) automatic debugging via breakpoints and expression evaluation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JetBrains/mcpProxy"&gt;jetbrains/mcpProxy&lt;/a&gt; 🎖️ 📇 🏠 - Connect to JetBrains IDE&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Jktfe/serveMyAPI"&gt;Jktfe/serveMyAPI&lt;/a&gt; 📇 🏠 🍎 - A personal MCP (Model Context Protocol) server for securely storing and accessing API keys across projects using the macOS Keychain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JordanDalton/RestCsvMcpServer"&gt;jordandalton/restcsv-mcp-server&lt;/a&gt; 📇 ☁️ - An MCP server for CSV files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JoshuaRileyDev/app-store-connect-mcp-server"&gt;joshuarileydev/app-store-connect-mcp-server&lt;/a&gt; 📇 🏠 - An MCP server to communicate with the App Store Connect API for iOS Developers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JoshuaRileyDev/simulator-mcp-server"&gt;joshuarileydev/simulator-mcp-server&lt;/a&gt; 📇 🏠 - An MCP server to control iOS Simulators&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Jpisnice/shadcn-ui-mcp-server"&gt;Jpisnice/shadcn-ui-mcp-server&lt;/a&gt; 📇 🏠 - MCP server that gives AI assistants seamless access to shadcn/ui v4 components, blocks, demos, and metadata.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jsdelivr/globalping-mcp-server"&gt;jsdelivr/globalping-mcp-server&lt;/a&gt; 🎖️ 📇 ☁️ - The Globalping MCP server provides users and LLMs access to run network tools like ping, traceroute, mtr, HTTP and DNS resolve from thousands of locations around the world.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kadykov/mcp-openapi-schema-explorer"&gt;kadykov/mcp-openapi-schema-explorer&lt;/a&gt; 📇 ☁️ 🏠 - Token-efficient access to OpenAPI/Swagger specs via MCP Resources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lamemind/mcp-server-multiverse"&gt;lamemind/mcp-server-multiverse&lt;/a&gt; 📇 🏠 🛠️ - A middleware server that enables multiple isolated instances of the same MCP servers to coexist independently with unique namespaces and configurations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/langfuse/mcp-server-langfuse"&gt;langfuse/mcp-server-langfuse&lt;/a&gt; 🐍 🏠 - MCP server to access and manage LLM application prompts created with &lt;a href="https://raw.githubusercontent.com/punkpeye/awesome-mcp-servers/main/%5Bhttps://langfuse.com/%5D(https://langfuse.com/docs/prompts/get-started)"&gt;Langfuse&lt;/a&gt; Prompt Management.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lpigeon/ros-mcp-server"&gt;lpigeon/ros-mcp-server&lt;/a&gt; 🐍 🏠 🍎 🪟 🐧 - The ROS MCP Server supports robot control by converting user-issued natural language commands into ROS or ROS2 control commands.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lpigeon/unitree-go2-mcp-server"&gt;lpigeon/unitree-go2-mcp-server&lt;/a&gt; 🐍 🏠 🐧 - The Unitree Go2 MCP Server is a server built on the MCP that enables users to control the Unitree Go2 robot using natural language commands interpreted by a LLM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ukkit/memcord"&gt;ukkit/memcord&lt;/a&gt; 🐍 🏠 🐧 🍎 - A MCP server that keeps your chat history organized and searchable—with AI-powered summaries, secure memory, and full control.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mobile-next/mobile-mcp"&gt;mobile-next/mobile-mcp&lt;/a&gt; 📇 🏠 🐧 🍎 - MCP Server for Android/iOS application and device automation, development and app scraping. Simulator/Emulator/Physical devices like iPhone, Google Pixel, Samsung supported.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrexodia/user-feedback-mcp"&gt;mrexodia/user-feedback-mcp&lt;/a&gt; 🐍 🏠 - Simple MCP Server to enable a human-in-the-loop workflow in tools like Cline and Cursor.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/narumiruna/gitingest-mcp"&gt;narumiruna/gitingest-mcp&lt;/a&gt; 🐍 🏠 - A MCP server that uses &lt;a href="https://github.com/cyclotruc/gitingest"&gt;gitingest&lt;/a&gt; to convert any Git repository into a simple text digest of its codebase.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/neilberkman/editorconfig_mcp"&gt;neilberkman/editorconfig_mcp&lt;/a&gt; 📇 🏠 - Formats files using &lt;code&gt;.editorconfig&lt;/code&gt; rules, acting as a proactive formatting gatekeeper to ensure AI-generated code adheres to project-specific formatting standards from the start.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OctoMind-dev/octomind-mcp"&gt;OctoMind-dev/octomind-mcp&lt;/a&gt; 📇 ☁️ - lets your preferred AI agent create &amp;amp; run fully managed &lt;a href="https://www.octomind.dev/"&gt;Octomind&lt;/a&gt; end-to-end tests from your codebase or other data sources like Jira, Slack or TestRail.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenZeppelin/contracts-wizard/tree/master/packages/mcp"&gt;OpenZeppelin/contracts-wizard&lt;/a&gt; - A Model Context Protocol (MCP) server that allows AI agents to generate secure smart contracts in multiples languages based on &lt;a href="https://wizard.openzeppelin.com/"&gt;OpenZeppelin Wizard templates&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bgauryy/octocode-mcp"&gt;bgauryy/octocode-mcp&lt;/a&gt; ☁️ 📇 🍎 🪟 🐧 - AI-powered developer assistant that enables advanced research, analysis and discovery across GitHub and NPM realms in realtime.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/opslevel/opslevel-mcp"&gt;opslevel/opslevel-mcp&lt;/a&gt; 🎖️ 🏎️ ☁️ 🪟 🍎 🐧 - Official MCP Server for &lt;a href="https://www.opslevel.com"&gt;OpsLevel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/picahq/mcp"&gt;picahq/mcp&lt;/a&gt; 🎖️ 🦀 📇 ☁️ - One MCP for all your integrations — powered by &lt;a href="https://www.picaos.com"&gt;Pica&lt;/a&gt;, the infrastructure for intelligent, collaborative agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/posthog/mcp"&gt;posthog/mcp&lt;/a&gt; 🎖️ 📇 ☁️ - An MCP server for interacting with PostHog analytics, feature flags, error tracking and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Pratyay/mac-monitor-mcp"&gt;Pratyay/mac-monitor-mcp&lt;/a&gt; 🐍 🏠 🍎 - Identifies resource-intensive processes on macOS and provides performance improvement suggestions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pskill9/website-downloader"&gt;pskill9/website-downloader&lt;/a&gt; 🗄️ 🚀 - This MCP server provides a tool to download entire websites using wget. It preserves the website structure and converts links to work locally.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QAInsights/jmeter-mcp-server"&gt;qainsights/jmeter-mcp-server&lt;/a&gt; 🐍 🏠 - JMeter MCP Server for performance testing&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QAInsights/k6-mcp-server"&gt;qainsights/k6-mcp-server&lt;/a&gt; 🐍 🏠 - Grafana k6 MCP Server for performance testing&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QAInsights/locust-mcp-server"&gt;qainsights/locust-mcp-server&lt;/a&gt; 🐍 🏠 - Locust MCP Server for performance testing&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QuantGeekDev/docker-mcp"&gt;QuantGeekDev/docker-mcp&lt;/a&gt; 🏎️ 🏠 - Docker container management and operations through MCP&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r-huijts/xcode-mcp-server"&gt;r-huijts/xcode-mcp-server&lt;/a&gt; 📇 🏠 🍎 - Xcode integration for project management, file operations, and build automation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ReAPI-com/mcp-openapi"&gt;ReAPI-com/mcp-openapi&lt;/a&gt; 📇 🏠 - MCP server that lets LLMs know everything about your OpenAPI specifications to discover, explain and generate code/mock data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Rootly-AI-Labs/Rootly-MCP-server"&gt;Rootly-AI-Labs/Rootly-MCP-server&lt;/a&gt; 🎖️ 🐍 ☁️ 🍎 - MCP server for the incident management platform &lt;a href="https://rootly.com/"&gt;Rootly&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ryan0204/github-repo-mcp"&gt;ryan0204/github-repo-mcp&lt;/a&gt; 📇 ☁️ 🪟 🐧 🍎 - GitHub Repo MCP allow your AI assistants browse GitHub repositories, explore directories, and view file contents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sammcj/mcp-package-version"&gt;sammcj/mcp-package-version&lt;/a&gt; 📇 🏠 - An MCP Server to help LLMs suggest the latest stable package versions when writing code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sapientpants/sonarqube-mcp-server"&gt;sapientpants/sonarqube-mcp-server&lt;/a&gt; 🦀 ☁️ 🏠 - A Model Context Protocol (MCP) server that integrates with SonarQube to provide AI assistants with access to code quality metrics, issues, and quality gate statuses&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SDGLBL/mcp-claude-code"&gt;SDGLBL/mcp-claude-code&lt;/a&gt; 🐍 🏠 - An implementation of Claude Code capabilities using MCP, enabling AI code understanding, modification, and project analysis with comprehensive tool support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sequa-ai/sequa-mcp"&gt;sequa-ai/sequa-mcp&lt;/a&gt; 📇 ☁️ 🐧 🍎 🪟 - Stop stitching context for Copilot and Cursor. With Sequa MCP, your AI tools know your entire codebase and docs out of the box.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/snaggle-ai/openapi-mcp-server"&gt;snaggle-ai/openapi-mcp-server&lt;/a&gt; 🏎️ 🏠 - Connect any HTTP/REST API server using an Open API spec (v3)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/spacecode-ai/SpaceBridge-MCP"&gt;spacecode-ai/SpaceBridge-MCP&lt;/a&gt; 🐍 🏠 🍎 🐧 - Bring structure and preserve context in vibe coding by automatically tracking issues.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/st3v3nmw/sourcerer-mcp"&gt;st3v3nmw/sourcerer-mcp&lt;/a&gt; 🏎️ ☁️ - MCP for semantic code search &amp;amp; navigation that reduces token waste&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stass/lldb-mcp"&gt;stass/lldb-mcp&lt;/a&gt; 🐍 🏠 🐧 🍎 - A MCP server for LLDB enabling AI binary and core file analysis, debugging, disassembling.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TencentEdgeOne/edgeone-pages-mcp"&gt;TencentEdgeOne/edgeone-pages-mcp&lt;/a&gt; 📇 ☁️ - An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tgeselle/bugsnag-mcp"&gt;tgeselle/bugsnag-mcp&lt;/a&gt; 📇 ☁️ - An MCP server for interacting with &lt;a href="https://www.bugsnag.com/"&gt;Bugsnag&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Tommertom/awesome-ionic-mcp"&gt;Tommertom/awesome-ionic-mcp&lt;/a&gt; 📇 🏠 - Your Ionic coding buddy enabled via MCP – build awesome mobile apps using React/Angular/Vue or even Vanilla JS!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tipdotmd/tip-md-x402-mcp-server"&gt;tipdotmd/tip-md-x402-mcp-server&lt;/a&gt; 📇 ☁️ - MCP server for cryptocurrency tipping through AI interfaces using x402 payment protocol and CDP Wallet.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tumf/mcp-text-editor"&gt;tumf/mcp-text-editor&lt;/a&gt; 🐍 🏠 - A line-oriented text file editor. Optimized for LLM tools with efficient partial file access to minimize token usage.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/utensils/mcp-nixos"&gt;utensils/mcp-nixos&lt;/a&gt; 🐍 🏠 - MCP server providing accurate information about NixOS packages, system options, Home Manager configurations, and nix-darwin macOS settings to prevent AI hallucinations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vasayxtx/mcp-prompt-engine"&gt;vasayxtx/mcp-prompt-engine&lt;/a&gt; 🏎️ 🏠 🪟️ 🐧 🍎 - MCP server for managing and serving dynamic prompt templates using elegant and powerful text template engine.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vivekVells/mcp-pandoc"&gt;vivekvells/mcp-pandoc&lt;/a&gt; 🗄️ 🚀 - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/biegehydra/BifrostMCP"&gt;VSCode Devtools&lt;/a&gt; 📇 - Connect to VSCode ide and use semantic tools like &lt;code&gt;find_usages&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wise-vision/mcp_server_ros_2"&gt;WiseVision/mcp_server_ros_2&lt;/a&gt; 🐍 🤖 - MCP server for ROS2 enabling AI-driven robotics applications and services.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Wooonster/hocr_mcp_server"&gt;Wooonster/hocr_mcp_server&lt;/a&gt; 🐍 🏠 – A fastAPI-based FastMCP server with a Vue frontend that sends uploaded images to VLM via the MCP to quickly extract handwritten mathematical formulas as clean LaTeX code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ShenghaiWang/xcodebuild"&gt;xcodebuild&lt;/a&gt; 🍎 Build iOS Xcode workspace/project and feed back errors to llm.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/XixianLiang/HarmonyOS-mcp-server"&gt;XixianLiang/HarmonyOS-mcp-server&lt;/a&gt; 🐍 🏠 - Control HarmonyOS-next devices with AI through MCP. Support device control and UI automation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xzq-xu/jvm-mcp-server"&gt;xzq.xu/jvm-mcp-server&lt;/a&gt; 📇 🏠 - An implementation project of a JVM-based MCP (Model Context Protocol) server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yangkyeongmo/mcp-server-apache-airflow"&gt;yangkyeongmo@/mcp-server-apache-airflow&lt;/a&gt; 🐍 🏠 - MCP server that connects to &lt;a href="https://airflow.apache.org/"&gt;Apache Airflow&lt;/a&gt; using official client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yikakia/godoc-mcp-server"&gt;yikakia/godoc-mcp-server&lt;/a&gt; 🏎️ ☁️ 🪟 🐧 🍎 - Query Go package information on pkg.go.dev&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yiwenlu66/PiloTY"&gt;yiwenlu66/PiloTY&lt;/a&gt; 🐍 🏠 - AI pilot for PTY operations enabling agents to control interactive terminals with stateful sessions, SSH connections, and background process management&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YuChenSSR/mindmap-mcp-server"&gt;YuChenSSR/mindmap-mcp-server&lt;/a&gt; 🐍 🏠 - A Model Context Protocol (MCP) server for generating a beautiful interactive mindmap.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YuChenSSR/multi-ai-advisor-mcp"&gt;YuChenSSR/multi-ai-advisor&lt;/a&gt; 📇 🏠 - A Model Context Protocol (MCP) server that queries multiple Ollama models and combines their responses, providing diverse AI perspectives on a single question.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yutarop/ros-mcp"&gt;Yutarop/ros-mcp&lt;/a&gt; 🐍 🏠 🐧 - MCP server that supports ROS2 topics, services, and actions communication, and controls robots using natural language.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yWorks/mcp-typescribe"&gt;yWorks/mcp-typescribe&lt;/a&gt; 📇 🏠 - MCP server that provides Typescript API information efficiently to the agent to enable it to work with untrained APIs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zaizaizhao/mcp-swagger-server"&gt;zaizaizhao/mcp-swagger-server&lt;/a&gt; 📇 ☁️ 🏠 - A Model Context Protocol (MCP) server that converts OpenAPI/Swagger specifications to MCP format, enabling AI assistants to interact with REST APIs through standardized protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zcaceres/fetch-mcp"&gt;zcaceres/fetch-mcp&lt;/a&gt; 📇 🏠 - An MCP server to flexibly fetch JSON, text, and HTML data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zenml-io/mcp-zenml"&gt;zenml-io/mcp-zenml&lt;/a&gt; 🐍 🏠 ☁️ - An MCP server to connect with your &lt;a href="https://www.zenml.io"&gt;ZenML&lt;/a&gt; MLOps and LLMOps pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zillow/auto-mobile"&gt;zillow/auto-mobile&lt;/a&gt; 📇 🏠 🐧 - Tool suite built around an MCP server for Android automation for developer workflow and testing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔒 &lt;a name="delivery"&gt;&lt;/a&gt;Delivery&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JordanDalton/DoorDash-MCP-Server"&gt;https://github.com/jordandalton/doordash-mcp-server&lt;/a&gt; 🐍 – DoorDash Delivery (Unofficial)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🧮 &lt;a name="data-science-tools"&gt;&lt;/a&gt;Data Science Tools&lt;/h3&gt; 
&lt;p&gt;Integrations and tools designed to simplify data exploration, analysis and enhance data science workflows.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arrismo/kaggle-mcp"&gt;arrismo/kaggle-mcp&lt;/a&gt; 🐍 ☁️ - Connects to Kaggle, ability to download and analyze datasets.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChronulusAI/chronulus-mcp"&gt;ChronulusAI/chronulus-mcp&lt;/a&gt; 🐍 ☁️ - Predict anything with Chronulus AI forecasting and prediction agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DataEval/dingo"&gt;DataEval/dingo&lt;/a&gt; 🎖️ 🐍 🏠 🍎 🪟 🐧 - MCP server for the Dingo: a comprehensive data quality evaluation tool. Server Enables interaction with Dingo's rule-based and LLM-based evaluation capabilities and rules&amp;amp;prompts listing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/datalayer/jupyter-mcp-server"&gt;datalayer/jupyter-mcp-server&lt;/a&gt; 🐍 🏠 - Model Context Protocol (MCP) Server for Jupyter.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/growthbook/growthbook-mcp"&gt;growthbook/growthbook-mcp&lt;/a&gt; 🎖️ 📇 🏠 🪟 🐧 🍎 — Tools for creating and interacting with GrowthBook feature flags and experiments.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HumanSignal/label-studio-mcp-server"&gt;HumanSignal/label-studio-mcp-server&lt;/a&gt; 🎖️ 🐍 ☁️ 🪟 🐧 🍎 - Create, manage, and automate Label Studio projects, tasks, and predictions for data labeling workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jjsantos01/jupyter-notebook-mcp"&gt;jjsantos01/jupyter-notebook-mcp&lt;/a&gt; 🐍 🏠 - connects Jupyter Notebook to Claude AI, allowing Claude to directly interact with and control Jupyter Notebooks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kdqed/zaturn"&gt;kdqed/zaturn&lt;/a&gt; 🐍 🏠 🪟 🐧 🍎 - Link multiple data sources (SQL, CSV, Parquet, etc.) and ask AI to analyze the data for insights and visualizations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mckinsey/vizro/tree/main/vizro-mcp"&gt;mckinsey/vizro-mcp&lt;/a&gt; 🎖️ 🐍 🏠 - Tools and templates to create validated and maintainable data charts and dashboards.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/optuna/optuna-mcp"&gt;optuna/optuna-mcp&lt;/a&gt; 🎖️ 🐍 🏠 🐧 🍎 - Official MCP server enabling seamless orchestration of hyperparameter search and other optimization tasks with &lt;a href="https://optuna.org/"&gt;Optuna&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reading-plus-ai/mcp-server-data-exploration"&gt;reading-plus-ai/mcp-server-data-exploration&lt;/a&gt; 🐍 ☁️ - Enables autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/subelsky/bundler_mcp"&gt;subelsky/bundler_mcp&lt;/a&gt; 💎 🏠 - Enables agents to query local information about dependencies in a Ruby project's &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Bright-L01/networkx-mcp-server"&gt;Bright-L01/networkx-mcp-server&lt;/a&gt; 🐍 🏠 - The first NetworkX integration for Model Context Protocol, enabling graph analysis and visualization directly in AI conversations. Supports 13 operations including centrality algorithms, community detection, PageRank, and graph visualization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zcaceres/markdownify-mcp"&gt;zcaceres/markdownify-mcp&lt;/a&gt; 📇 🏠 - An MCP server to convert almost any file or web content into Markdown&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📟 &lt;a name="embedded-system"&gt;&lt;/a&gt;Embedded System&lt;/h3&gt; 
&lt;p&gt;Provides access to documentation and shortcuts for working on embedded devices.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/horw/esp-mcp"&gt;horw/esp-mcp&lt;/a&gt; 📟 - Workflow for fixing build issues in ESP32 series chips using ESP-IDF.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/modbus-mcp"&gt;kukapay/modbus-mcp&lt;/a&gt; 🐍 📟 - An MCP server that standardizes and contextualizes industrial Modbus data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/opcua-mcp"&gt;kukapay/opcua-mcp&lt;/a&gt; 🐍 📟 - An MCP server that connects to OPC UA-enabled industrial systems.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stack-chan/stack-chan"&gt;stack-chan/stack-chan&lt;/a&gt; 📇 📟 - A JavaScript-driven M5Stack-embedded super-kawaii robot with MCP server functionality for AI-controlled interactions and emotions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yoelbassin/gnuradioMCP"&gt;yoelbassin/gnuradioMCP&lt;/a&gt; 🐍 📟 🏠 - An MCP server for GNU Radio that enables LLMs to autonomously create and modify RF &lt;code&gt;.grc&lt;/code&gt; flowcharts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📂 &lt;a name="file-systems"&gt;&lt;/a&gt;File Systems&lt;/h3&gt; 
&lt;p&gt;Provides direct access to local file systems with configurable permissions. Enables AI models to read, write, and manage files within specified directories.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/8b-is/smart-tree"&gt;8b-is/smart-tree&lt;/a&gt; 🦀 🏠 🍎 🪟 🐧 - AI-native directory visualization with semantic analysis, ultra-compressed formats for AI consumption, and 10x token reduction. Supports quantum-semantic mode with intelligent file categorization.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cyberchitta/llm-context.py"&gt;cyberchitta/llm-context.py&lt;/a&gt; 🐍 🏠 - Share code context with LLMs via MCP or clipboard&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/exoticknight/mcp-file-merger"&gt;exoticknight/mcp-file-merger&lt;/a&gt; 🏎️ 🏠 - File merger tool, suitable for AI chat length limits.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/filesystem"&gt;filesystem@quarkiverse/quarkus-mcp-servers&lt;/a&gt; ☕ 🏠 - A filesystem allowing for browsing and editing files implemented in Java using Quarkus. Available as jar or native image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hmk/box-mcp-server"&gt;hmk/box-mcp-server&lt;/a&gt; 📇 ☁️ - Box integration for listing, reading and searching files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/isaacphi/mcp-gdrive"&gt;isaacphi/mcp-gdrive&lt;/a&gt; 📇 ☁️ - Model Context Protocol (MCP) Server for reading from Google Drive and editing Google Sheets.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jeannier/homebrew-mcp"&gt;jeannier/homebrew-mcp&lt;/a&gt; 🐍 🏠 🍎 - Control your macOS Homebrew setup using natural language via this MCP server. Simply manage your packages, or ask for suggestions, troubleshoot brew issues etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mamertofabian/mcp-everything-search"&gt;mamertofabian/mcp-everything-search&lt;/a&gt; 🐍 🏠 🪟 - Fast Windows file search using Everything SDK&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mark3labs/mcp-filesystem-server"&gt;mark3labs/mcp-filesystem-server&lt;/a&gt; 🏎️ 🏠 - Golang implementation for local file system access.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mickael-kerjean/filestash/tree/master/server/plugin/plg_handler_mcp"&gt;mickaelkerjean/filestash&lt;/a&gt; 🏎️ ☁️ - Remote Storage Access: SFTP, S3, FTP, SMB, NFS, WebDAV, GIT, FTPS, gcloud, azure blob, sharepoint, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp"&gt;microsoft/markitdown&lt;/a&gt; 🎖️ 🐍 🏠 - MCP tool access to MarkItDown -- a library that converts many file formats (local or remote) to Markdown for LLM consumption.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem"&gt;modelcontextprotocol/server-filesystem&lt;/a&gt; 📇 🏠 - Direct local file system access.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Xuanwo/mcp-server-opendal"&gt;Xuanwo/mcp-server-opendal&lt;/a&gt; 🐍 🏠 ☁️ - Access any storage with Apache OpenDAL™&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;💰 &lt;a name="finance--fintech"&gt;&lt;/a&gt;Finance &amp;amp; Fintech&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Regenerating-World/pix-mcp"&gt;Regenerating-World/pix-mcp&lt;/a&gt; 📇 ☁️ - Generate Pix QR codes and copy-paste strings with fallback across multiple providers (Efí, Cielo, etc.) for Brazilian instant payments.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aaronjmars/web3-research-mcp"&gt;aaronjmars/web3-research-mcp&lt;/a&gt; 📇 ☁️ - Deep Research for crypto - free &amp;amp; fully local&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ahnlabio/bicscan-mcp"&gt;ahnlabio/bicscan-mcp&lt;/a&gt; 🎖️ 🐍 ☁️ - Risk score / asset holdings of EVM blockchain address (EOA, CA, ENS) and even domain names.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/getAlby/mcp"&gt;getAlby/mcp&lt;/a&gt; 🎖️ 📇 ☁️ 🏠 - Connect any bitcoin lightning wallet to your agent to send and receive instant payments globally.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alchemyplatform/alchemy-mcp-server"&gt;alchemy/alchemy-mcp-server&lt;/a&gt; 🎖️ 📇 ☁️ - Allow AI agents to interact with Alchemy's blockchain APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anjor/coinmarket-mcp-server"&gt;anjor/coinmarket-mcp-server&lt;/a&gt; 🐍 ☁️ - Coinmarket API integration to fetch cryptocurrency listings and quotes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/araa47/jupiter-mcp"&gt;araa47/jupiter-mcp&lt;/a&gt; 🐍 ☁️ - Jupiter API Access (allow AI to Trade Tokens on Solana + Access Balances + Search Tokens + Create Limit Orders )&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ariadng/metatrader-mcp-server"&gt;ariadng/metatrader-mcp-server&lt;/a&gt; 🐍 🏠 🪟 - Enable AI LLMs to execute trades using MetaTrader 5 platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/armorwallet/armor-crypto-mcp"&gt;armorwallet/armor-crypto-mcp&lt;/a&gt; 🐍 ☁️ - MCP to interface with multiple blockchains, staking, DeFi, swap, bridging, wallet management, DCA, Limit Orders, Coin Lookup, Tracking and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Bankless/onchain-mcp/"&gt;bankless/onchain-mcp&lt;/a&gt; 📇 ☁️ - Bankless Onchain API to interact with smart contracts, query transaction and token information&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/base/base-mcp"&gt;base/base-mcp&lt;/a&gt; 🎖️ 📇 ☁️ - Base Network integration for onchain tools, allowing interaction with Base Network and Coinbase API for wallet management, fund transfers, smart contracts, and DeFi operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/berlinbra/alpha-vantage-mcp"&gt;berlinbra/alpha-vantage-mcp&lt;/a&gt; 🐍 ☁️ - Alpha Vantage API integration to fetch both stock and crypto information&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BitteProtocol/mcp"&gt;bitteprotocol/mcp&lt;/a&gt; 📇 - Bitte Protocol integration to run AI Agents on several blockchains.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/carsol/monarch-mcp-server"&gt;carsol/monarch-mcp-server&lt;/a&gt; 🐍 ☁️ - MCP server providing read-only access to Monarch Money financial data, enabling AI assistants to analyze transactions, budgets, accounts, and cashflow data with MFA support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol"&gt;chargebee/mcp&lt;/a&gt; 🎖️ 📇 ☁️ - MCP Server that connects AI agents to &lt;a href="https://www.chargebee.com/"&gt;Chargebee platform&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Codex-Data/codex-mcp"&gt;codex-data/codex-mcp&lt;/a&gt; 🎖️ 📇 ☁️ - &lt;a href="https://www.codex.io"&gt;Codex API&lt;/a&gt; integration for real-time enriched blockchain and market data on 60+ networks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol"&gt;coinpaprika/dexpaprika-mcp&lt;/a&gt; 🎖️ 📇 ☁️ 🍎 🪟 🐧 - Coinpaprika's DexPaprika MCP server exposes high-performance &lt;a href="https://docs.dexpaprika.com"&gt;DexPaprika API&lt;/a&gt; covering 20+ chains and 5M+ tokens with real time pricing, liquidity pool data &amp;amp; historical OHLCV data, providing AI agents standardized access to comprehensive market data through Model Context Protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/doggybee/mcp-server-ccxt"&gt;doggybee/mcp-server-ccxt&lt;/a&gt; 📇 ☁️ - An MCP server for accessing real-time crypto market data and trading via 20+ exchanges using the CCXT library. Supports spot, futures, OHLCV, balances, orders, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ferdousbhai/investor-agent"&gt;ferdousbhai/investor-agent&lt;/a&gt; 🐍 ☁️ - Yahoo Finance integration to fetch stock market data including options recommendations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ferdousbhai/tasty-agent"&gt;ferdousbhai/tasty-agent&lt;/a&gt; 🐍 ☁️ - Tastyworks API integration to handle trading activities on Tastytrade&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ferdousbhai/wsb-analyst-mcp"&gt;ferdousbhai/wsb-analyst-mcp&lt;/a&gt; 🐍 ☁️ - Reddit integration to analyze content on WallStreetBets community&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/getalby/nwc-mcp-server"&gt;getalby/nwc-mcp-server&lt;/a&gt; 📇 🏠 - Bitcoin Lightning wallet integration powered by Nostr Wallet Connect&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/glaksmono/finbud-data-mcp/tree/main/packages/mcp-server"&gt;glaksmono/finbud-data-mcp&lt;/a&gt; 📇 ☁️ 🏠 - Access comprehensive, real-time financial data (stocks, options, crypto, forex) via developer-friendly, AI-native APIs offering unbeatable value.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/heurist-network/heurist-mesh-mcp-server"&gt;heurist-network/heurist-mesh-mcp-server&lt;/a&gt; 🎖️ ⛅️ 🏠 🐍 - Access specialized web3 AI agents for blockchain analysis, smart contract security auditing, token metrics evaluation, and on-chain interactions through the Heurist Mesh network. Provides comprehensive tools for DeFi analysis, NFT valuation, and transaction monitoring across multiple blockchains&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HuggingAGI/mcp-baostock-server"&gt;HuggingAGI/mcp-baostock-server&lt;/a&gt; 🐍 ☁️ - MCP server based on baostock, providing access and analysis capabilities for Chinese stock market data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/intentos-labs/beeper-mcp"&gt;intentos-labs/beeper-mcp&lt;/a&gt; 🐍 - Beeper provides transactions on BSC, including balance/token transfers, token swaps in Pancakeswap and beeper reward claims.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/janswist/mcp-dexscreener"&gt;janswist/mcp-dexscreener&lt;/a&gt; 📇 ☁️ - Real-time on-chain market prices using open and free Dexscreener API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/binance-alpha-mcp"&gt;kukapay/binance-alpha-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server for tracking Binance Alpha trades, helping AI agents optimize alpha point accumulation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/blockbeats-mcp"&gt;kukapay/blockbeats-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that delivers blockchain news and in-depth articles from BlockBeats for AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/blocknative-mcp"&gt;kukapay/blocknative-mcp&lt;/a&gt; 🐍 ☁️ - Providing real-time gas price predictions across multiple blockchains, powered by Blocknative.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/bridge-rates-mcp"&gt;kukapay/bridge-rates-mcp&lt;/a&gt; 📇 ☁️ - Delivering real-time cross-chain bridge rates and optimal transfer routes to onchain AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/chainlink-feeds-mcp"&gt;kukapay/chainlink-feeds-mcp&lt;/a&gt; 📇 ☁️ - Providing real-time access to Chainlink's decentralized on-chain price feeds.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/chainlist-mcp"&gt;kukapay/chainlist-mcp&lt;/a&gt; 📇 ☁️ - An MCP server that gives AI agents fast access to verified EVM chain information, including RPC URLs, chain IDs, explorers, and native tokens.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/cointelegraph-mcp"&gt;kukapay/cointelegraph-mcp&lt;/a&gt; 🐍 ☁️ - Providing real-time access to the latest news from Cointelegraph.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-feargreed-mcp"&gt;kukapay/crypto-feargreed-mcp&lt;/a&gt; 🐍 ☁️ - Providing real-time and historical Crypto Fear &amp;amp; Greed Index data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-indicators-mcp"&gt;kukapay/crypto-indicators-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server providing a range of cryptocurrency technical analysis indicators and strategie.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-liquidations-mcp"&gt;kukapay/crypto-liquidations-mcp&lt;/a&gt; 🐍 ☁️ - Streams real-time cryptocurrency liquidation events from Binance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-news-mcp"&gt;kukapay/crypto-news-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that provides real-time cryptocurrency news sourced from NewsData for AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-orderbook-mcp"&gt;kukapay/crypto-orderbook-mcp&lt;/a&gt; 🐍 ☁️ - Analyzing order book depth and imbalance across major crypto exchanges.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-pegmon-mcp"&gt;kukapay/crypto-pegmon-mcp&lt;/a&gt; 🐍 ☁️ - Tracking stablecoin peg integrity across multiple blockchains.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-portfolio-mcp"&gt;kukapay/crypto-portfolio-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server for tracking and managing cryptocurrency portfolio allocations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-projects-mcp"&gt;kukapay/crypto-projects-mcp&lt;/a&gt; 🐍 ☁️ - Providing cryptocurrency project data from Mobula.io to AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-rss-mcp"&gt;kukapay/crypto-rss-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that aggregates real-time cryptocurrency news from multiple RSS feeds.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-sentiment-mcp"&gt;kukapay/crypto-sentiment-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that delivers cryptocurrency sentiment analysis to AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-trending-mcp"&gt;kukapay/crypto-trending-mcp&lt;/a&gt; 🐍 ☁️ - Tracking the latest trending tokens on CoinGecko.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/crypto-whitepapers-mcp"&gt;kukapay/crypto-whitepapers-mcp&lt;/a&gt; 🐍 ☁️ - Serving as a structured knowledge base of crypto whitepapers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/cryptopanic-mcp-server"&gt;kukapay/cryptopanic-mcp-server&lt;/a&gt; 🐍 ☁️ - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/dao-proposals-mcp"&gt;kukapay/dao-proposals-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that aggregates live governance proposals from major DAOs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/defi-yields-mcp"&gt;kukapay/defi-yields-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server for AI agents to explore DeFi yield opportunities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/dune-analytics-mcp"&gt;kukapay/dune-analytics-mcp&lt;/a&gt; 🐍 ☁️ - A mcp server that bridges Dune Analytics data to AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/etf-flow-mcp"&gt;kukapay/etf-flow-mcp&lt;/a&gt; 🐍 ☁️ - Delivering crypto ETF flow data to power AI agents' decision-making.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/freqtrade-mcp"&gt;kukapay/freqtrade-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that integrates with the Freqtrade cryptocurrency trading bot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/funding-rates-mcp"&gt;kukapay/funding-rates-mcp&lt;/a&gt; 🐍 ☁️ - Providing real-time funding rate data across major crypto exchanges.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/hyperliquid-info-mcp"&gt;kukapay/hyperliquid-info-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that provides real-time data and insights from the Hyperliquid perp DEX for use in bots, dashboards, and analytics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/hyperliquid-whalealert-mcp"&gt;kukapay/hyperliquid-whalealert-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that provides real-time whale alerts on Hyperliquid, flagging positions with a notional value exceeding $1 million.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/jupiter-mcp"&gt;kukapay/jupiter-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/pancakeswap-poolspy-mcp"&gt;kukapay/pancakeswap-poolspy-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that tracks newly created pools on Pancake Swap.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/pumpswap-mcp"&gt;kukapay/pumpswap-mcp&lt;/a&gt; 🐍 ☁️ - Enabling AI agents to interact with PumpSwap for real-time token swaps and automated on-chain trading.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/raydium-launchlab-mcp"&gt;kukapay/raydium-launchlab-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that enables AI agents to launch, buy, and sell tokens on the Raydium Launchpad(aka LaunchLab).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/rug-check-mcp"&gt;kukapay/rug-check-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that detects potential risks in Solana meme tokens.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/sui-trader-mcp"&gt;kukapay/sui-trader-mcp&lt;/a&gt; 📇 ☁️ - An MCP server designed for AI agents to perform optimal token swaps on the Sui blockchain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/thegraph-mcp"&gt;kukapay/thegraph-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that powers AI agents with indexed blockchain data from The Graph.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/token-minter-mcp"&gt;kukapay/token-minter-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server providing tools for AI agents to mint ERC-20 tokens across multiple blockchains.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/token-revoke-mcp"&gt;kukapay/token-revoke-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server for checking and revoking ERC-20 token allowances across multiple blockchains.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/twitter-username-changes-mcp"&gt;kukapay/twitter-username-changes-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that tracks the historical changes of Twitter usernames.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/uniswap-poolspy-mcp"&gt;kukapay/uniswap-poolspy-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that tracks newly created liquidity pools on Uniswap across multiple blockchains.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/uniswap-price-mcp"&gt;kukapay/uniswap-price-mcp&lt;/a&gt; 📇 ☁️ - An MCP server that tracks newly created liquidity pools on Uniswap across multiple blockchains.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/uniswap-trader-mcp"&gt;kukapay/uniswap-trader-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that delivers real-time token prices from Uniswap V3 across multiple chains.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/wallet-inspector-mcp"&gt;kukapay/wallet-inspector-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that empowers AI agents to inspect any wallet’s balance and onchain activity across major EVM chains and Solana chain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/web3-jobs-mcp"&gt;kukapay/web3-jobs-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that provides AI agents with real-time access to curated Web3 jobs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/whale-tracker-mcp"&gt;kukapay/whale-tracker-mcp&lt;/a&gt; 🐍 ☁️ - A mcp server for tracking cryptocurrency whale transactions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/laukikk/alpaca-mcp"&gt;laukikk/alpaca-mcp&lt;/a&gt; 🐍 ☁️ - An MCP Server for the Alpaca trading API to manage stock and crypto portfolios, place trades, and access market data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/logotype/fixparser"&gt;logotype/fixparser&lt;/a&gt; 🎖 📇 ☁️ 🏠 📟 - FIX Protocol (send orders, market data, etc.) written in TypeScript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/longportapp/openapi/tree/main/mcp"&gt;longportapp/openapi&lt;/a&gt; - 🐍 ☁️ - LongPort OpenAPI provides real-time stock market data, provides AI access analysis and trading capabilities through MCP.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcpdotdirect/evm-mcp-server"&gt;mcpdotdirect/evm-mcp-server&lt;/a&gt; 📇 ☁️ - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mcpdotdirect/starknet-mcp-server"&gt;mcpdotdirect/starknet-mcp-server&lt;/a&gt; 📇 ☁️ - Comprehensive Starknet blockchain integration with support for native tokens (ETH, STRK), smart contracts, StarknetID resolution, and token transfers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/minhyeoky/mcp-server-ledger"&gt;minhyeoky/mcp-server-ledger&lt;/a&gt; 🐍 🏠 - A ledger-cli integration for managing financial transactions and generating reports.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/narumiruna/yfinance-mcp"&gt;narumiruna/yfinance-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server that uses yfinance to obtain information from Yahoo Finance.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OctagonAI/octagon-mcp-server"&gt;OctagonAI/octagon-mcp-server&lt;/a&gt; 🐍 ☁️ - Octagon AI Agents to integrate private and public market data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openMF/mcp-mifosx"&gt;openMF/mcp-mifosx&lt;/a&gt; ☁️ 🏠 - A core banking integration for managing clients, loans, savings, shares, financial transactions and generating financial reports.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/polygon-io/mcp_polygon"&gt;polygon-io/mcp_polygon)&lt;/a&gt;) 🐍 ☁️ - An MCP server that provides access to &lt;a href="https://polygon.io/"&gt;Polygon.io&lt;/a&gt; financial market data APIs for stocks, indices, forex, options, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pwh-pwh/coin-mcp-server"&gt;pwh-pwh/coin-mcp-server&lt;/a&gt; 🐍 ☁️ - Bitget API to fetch cryptocurrency price.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QuantConnect/mcp-server"&gt;QuantConnect/mcp-server&lt;/a&gt; 🐍 ☁️ – A Dockerized Python MCP server that bridges your local AI (e.g., Claude Desktop, etc) with the QuantConnect API—empowering you to create projects, backtest strategies, manage collaborators, and deploy live-trading workflows directly via natural-language prompts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QuantGeekDev/coincap-mcp"&gt;QuantGeekDev/coincap-mcp&lt;/a&gt; 📇 ☁️ - Real-time cryptocurrency market data integration using CoinCap's public API, providing access to crypto prices and market information without API keys&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QuentinCody/braintree-mcp-server"&gt;QuentinCody/braintree-mcp-server&lt;/a&gt; 🐍 - Unofficial PayPal Braintree payment gateway MCP Server for AI agents to process payments, manage customers, and handle transactions securely.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RomThpt/mcp-xrpl"&gt;RomThpt/xrpl-mcp-server&lt;/a&gt; 📇 ☁️ - MCP server for the XRP Ledger that provides access to account information, transaction history, and network data. Allows querying ledger objects, submitting transactions, and monitoring the XRPL network.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SaintDoresh/Crypto-Trader-MCP-ClaudeDesktop.git"&gt;SaintDoresh/Crypto-Trader-MCP-ClaudeDesktop&lt;/a&gt; 🐍 ☁️ - An MCP tool that provides cryptocurrency market data using the CoinGecko API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SaintDoresh/YFinance-Trader-MCP-ClaudeDesktop.git"&gt;SaintDoresh/YFinance-Trader-MCP-ClaudeDesktop&lt;/a&gt; 🐍 ☁️ - An MCP tool that provides stock market data and analysis using the Yahoo Finance API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shareseer/shareseer-mcp-server"&gt;shareseer/shareseer-mcp-server&lt;/a&gt; 🏎️ ☁️ - MCP to Access SEC filings, financials &amp;amp; insider trading data in real time using &lt;a href="https://shareseer.com"&gt;ShareSeer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tatumio/blockchain-mcp"&gt;tatumio/blockchain-mcp&lt;/a&gt; ☁️ - MCP server for Blockchain Data. It provides access to Tatum's blockchain API across 130+ networks with tools including RPC Gateway and Blockchain Data insights.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ThomasMarches/substrate-mcp-rs"&gt;ThomasMarches/substrate-mcp-rs&lt;/a&gt; 🦀 🏠 - An MCP server implementation to interact with Substrate-based blockchains. Built with Rust and interfacing the &lt;a href="https://github.com/paritytech/subxt"&gt;subxt&lt;/a&gt; crate.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tooyipjee/yahoofinance-mcp.git"&gt;tooyipjee/yahoofinance-mcp&lt;/a&gt; 📇 ☁️ - TS version of yahoo finance mcp.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Trade-Agent/trade-agent-mcp.git"&gt;Trade-Agent/trade-agent-mcp&lt;/a&gt; 🎖️ ☁️ - Trade stocks and crypto on common brokerages (Robinhood, E*Trade, Coinbase, Kraken) via Trade Agent's MCP server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/twelvedata/mcp"&gt;twelvedata/mcp&lt;/a&gt; 🐍 ☁️ - Interact with &lt;a href="https://twelvedata.com"&gt;Twelve Data&lt;/a&gt; APIs to access real-time and historical financial market data for your AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wowinter13/solscan-mcp"&gt;wowinter13/solscan-mcp&lt;/a&gt; 🦀 🏠 - An MCP tool for querying Solana transactions using natural language with Solscan API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wuye-ai/mcp-server-wuye-ai"&gt;Wuye-AI/mcp-server-wuye-ai&lt;/a&gt; 🎖️ 📇 ☁️ - An MCP server that interact with capabilities of the CRIC Wuye AI platform, an intelligent assistant specifically for the property management industry.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/XeroAPI/xero-mcp-server"&gt;XeroAPI/xero-mcp-server&lt;/a&gt; 📇 ☁️ – An MCP server that integrates with Xero's API, allowing for standardized access to Xero's accounting and business features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zlinzzzz/finData-mcp-server"&gt;zlinzzzz/finData-mcp-server&lt;/a&gt; 🐍 ☁️ - An MCP server for accessing professional financial data, supporting multiple data providers such as Tushare.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Zolo-Ryan/MarketAuxMcpServer"&gt;zolo-ryan/MarketAuxMcpServer&lt;/a&gt; 📇 ☁️ - MCP server for comprehensive market and financial news search with advanced filtering by symbols, industries, countries, and date ranges.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JamesANZ/prediction-market-mcp"&gt;JamesANZ/prediction-market-mcp&lt;/a&gt; 📇 ☁️ - An MCP server that provides real-time prediction market data from multiple platforms including Polymarket, PredictIt, and Kalshi. Enables AI assistants to query current odds, prices, and market information through a unified interface.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JamesANZ/bitcoin-mcp"&gt;JamesANZ/bitcoin-mcp&lt;/a&gt; 📇 🏠 - An MCP server that enables AI models to query the Bitcoin blockchain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hive-intel/hive-crypto-mcp"&gt;hive-intel/hive-crypto-mcp&lt;/a&gt; 📇 ☁️ 🏠 - Hive Intelligence: Ultimate cryptocurrency MCP for AI assistants with unified access to crypto, DeFi, and Web3 analytics&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎮 &lt;a name="gaming"&gt;&lt;/a&gt;Gaming&lt;/h3&gt; 
&lt;p&gt;Integration with gaming related data, game engines, and services&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CoderGamester/mcp-unity"&gt;CoderGamester/mcp-unity&lt;/a&gt; #️⃣ 🏠 - MCP Server for Unity3d Game Engine integration for game development&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Coding-Solo/godot-mcp"&gt;Coding-Solo/godot-mcp&lt;/a&gt; 📇 🏠 - A MCP server for interacting with the Godot game engine, providing tools for editing, running, debugging, and managing scenes in Godot projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ddsky/gamebrain-api-clients"&gt;ddsky/gamebrain-api-clients&lt;/a&gt; ☁️ - Search and discover hundreds of thousands of video games on any platform through the &lt;a href="https://gamebrain.co/api"&gt;GameBrain API&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/IvanMurzak/Unity-MCP"&gt;IvanMurzak/Unity-MCP&lt;/a&gt; #️⃣ 🏠 🍎 🪟 🐧 - MCP Server for Unity Editor and for a game made with Unity&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jiayao/mcp-chess"&gt;jiayao/mcp-chess&lt;/a&gt; 🐍 🏠 - A MCP server playing chess against LLMs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kkjdaniel/bgg-mcp"&gt;kkjdaniel/bgg-mcp&lt;/a&gt; 🏎️ ☁️ - An MCP server that enables interaction with board game related data via the BoardGameGeek API (XML API2).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/opgginc/opgg-mcp"&gt;opgginc/opgg-mcp&lt;/a&gt; 📇 ☁️ - Access real-time gaming data across popular titles like League of Legends, TFT, and Valorant, offering champion analytics, esports schedules, meta compositions, and character statistics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pab1it0/chess-mcp"&gt;pab1ito/chess-mcp&lt;/a&gt; 🐍 ☁️ - Access Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rishijatia/fantasy-pl-mcp/"&gt;rishijatia/fantasy-pl-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server for real-time Fantasy Premier League data and analysis tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sonirico/mcp-stockfish"&gt;sonirico/mpc-stockfish&lt;/a&gt; - 🏎️ 🏠 🍎 🪟 🐧️ MCP server connecting AI systems to Stockfish chess engine.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stefan-xyz/mcp-server-runescape"&gt;stefan-xyz/mcp-server-runescape&lt;/a&gt; 📇 - An MCP server with tools for interacting with RuneScape (RS) and Old School RuneScape (OSRS) data, including item prices, player hiscores, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tomholford/mcp-tic-tac-toe"&gt;tomholford/mcp-tic-tac-toe&lt;/a&gt; 🏎️ 🏠 - Play Tic Tac Toe against an AI opponent using this MCP server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🧠 &lt;a name="knowledge--memory"&gt;&lt;/a&gt;Knowledge &amp;amp; Memory&lt;/h3&gt; 
&lt;p&gt;Persistent memory storage using knowledge graph structures. Enables AI models to maintain and query structured information across sessions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xshellming/mcp-summarizer"&gt;0xshellming/mcp-summarizer&lt;/a&gt; 📕 ☁️ - AI Summarization MCP Server, Support for multiple content types: Plain text, Web pages, PDF documents, EPUB books, HTML content&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apecloud/ApeRAG"&gt;apecloud/ApeRAG&lt;/a&gt; 🐍 ☁️ 🏠 - Production-ready RAG platform combining Graph RAG, vector search, and full-text search. Best choice for building your own Knowledge Graph and for Context Engineering&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chatmcp/mcp-server-chatsum"&gt;chatmcp/mcp-server-chatsum&lt;/a&gt; - Query and summarize your chat messages with AI prompts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CheMiguel23/MemoryMesh"&gt;CheMiguel23/MemoryMesh&lt;/a&gt; 📇 🏠 - Enhanced graph-based memory with a focus on AI role-play and story generation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/entanglr/zettelkasten-mcp"&gt;entanglr/zettelkasten-mcp&lt;/a&gt; 🐍 🏠 - A Model Context Protocol (MCP) server that implements the Zettelkasten knowledge management methodology, allowing you to create, link, and search atomic notes through Claude and other MCP-compatible clients.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lostintangent/gistpad-mcp"&gt;GistPad-MCP&lt;/a&gt; 📇 🏠 - Use GitHub Gists to manage and access your personal knowledge, daily notes, and reusable prompts. This acts as a companion to &lt;a href="https://gistpad.dev"&gt;https://gistpad.dev&lt;/a&gt; and the &lt;a href="https://aka.ms/gistpad"&gt;GistPad VS Code extension&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/graphlit/graphlit-mcp-server"&gt;graphlit-mcp-server&lt;/a&gt; 📇 ☁️ - Ingest anything from Slack, Discord, websites, Google Drive, Linear or GitHub into a Graphlit project - and then search and retrieve relevant knowledge within an MCP client like Cursor, Windsurf or Cline.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hannesrudolph/mcp-ragdocs"&gt;hannesrudolph/mcp-ragdocs&lt;/a&gt; 🐍 🏠 - An MCP server implementation that provides tools for retrieving and processing documentation through vector search, enabling AI assistants to augment their responses with relevant documentation context&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jinzcdev/markmap-mcp-server"&gt;jinzcdev/markmap-mcp-server&lt;/a&gt; 📇 🏠 - An MCP server built on &lt;a href="https://github.com/markmap/markmap"&gt;markmap&lt;/a&gt; that converts &lt;strong&gt;Markdown&lt;/strong&gt; to interactive &lt;strong&gt;mind maps&lt;/strong&gt;. Supports multi-format exports (PNG/JPG/SVG), live browser preview, one-click Markdown copy, and dynamic visualization features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kaliaboi/mcp-zotero"&gt;kaliaboi/mcp-zotero&lt;/a&gt; 📇 ☁️ - A connector for LLMs to work with collections and sources on your Zotero Cloud&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mem0ai/mem0-mcp"&gt;mem0ai/mem0-mcp&lt;/a&gt; 🐍 🏠 - A Model Context Protocol server for Mem0 that helps manage coding preferences and patterns, providing tools for storing, retrieving and semantically handling code implementations, best practices and technical documentation in IDEs like Cursor and Windsurf&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/memory"&gt;modelcontextprotocol/server-memory&lt;/a&gt; 📇 🏠 - Knowledge graph-based persistent memory system for maintaining context&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MWGMorningwood/Central-Memory-MCP"&gt;MWGMorningwood/Central-Memory-MCP&lt;/a&gt; 📇 ☁️ - An Azure PaaS-hostable MCP server that provides a workspace-grounded knowledge graph for multiple developers using Azure Functions MCP triggers and Table storage.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pi22by7/In-Memoria"&gt;pi22by7/In-Memoria&lt;/a&gt; 📇 🦀 🏠 🍎 🐧 🪟 - Persistent intelligence infrastructure for agentic development that gives AI coding assistants cumulative memory and pattern learning. Hybrid TypeScript/Rust implementation with local-first storage using SQLite + SurrealDB for semantic analysis and incremental codebase understanding.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pinecone-io/assistant-mcp"&gt;pinecone-io/assistant-mcp&lt;/a&gt; 🎖️ 🦀 ☁️ - Connects to your Pinecone Assistant and gives the agent context from its knowledge engine.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ragieai/ragie-mcp-server"&gt;ragieai/mcp-server&lt;/a&gt; 📇 ☁️ - Retrieve context from your &lt;a href="https://www.ragie.ai"&gt;Ragie&lt;/a&gt; (RAG) knowledge base connected to integrations like Google Drive, Notion, JIRA and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TechDocsStudio/biel-mcp"&gt;TechDocsStudio/biel-mcp&lt;/a&gt; 📇 ☁️ - Let AI tools like Cursor, VS Code, or Claude Desktop answer questions using your product docs. Biel.ai provides the RAG system and MCP server.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/topoteretes/cognee/tree/dev/cognee-mcp"&gt;topoteretes/cognee&lt;/a&gt; 📇 🏠 - Memory manager for AI apps and Agents using various graph and vector stores and allowing ingestion from 30+ data sources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/unibaseio/membase-mcp"&gt;unibaseio/membase-mcp&lt;/a&gt; 📇 ☁️ - Save and query your agent memory in distributed way by Membase&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/upstash/context7"&gt;upstash/context7&lt;/a&gt; 📇 ☁️ - Up-to-date code documentation for LLMs and AI code editors.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JamesANZ/memory-mcp"&gt;JamesANZ/memory-mcp&lt;/a&gt; 📇 🏠 - An MCP server that stores and retrieves memories from multiple LLMs using MongoDB. Provides tools for saving, retrieving, adding, and clearing conversation memories with timestamps and LLM identification.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JamesANZ/cross-llm-mcp"&gt;JamesANZ/cross-llm-mcp&lt;/a&gt; 📇 🏠 - An MCP server that enables cross-LLM communication and memory sharing, allowing different AI models to collaborate and share context across conversations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🗺️ &lt;a name="location-services"&gt;&lt;/a&gt;Location Services&lt;/h3&gt; 
&lt;p&gt;Location-based services and mapping tools. Enables AI models to work with geographic data, weather information, and location-based analytics.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/briandconnelly/mcp-server-ipinfo"&gt;briandconnelly/mcp-server-ipinfo&lt;/a&gt; 🐍 ☁️ - IP address geolocation and network information using IPInfo API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cqtrinv/trinvmcp"&gt;cqtrinv/trinvmcp&lt;/a&gt; 📇 ☁️ - Explore French communes and cadastral parcels based on name and surface&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/devilcoder01/weather-mcp-server"&gt;devilcoder01/weather-mcp-server&lt;/a&gt; 🐍 ☁️ - Access real-time weather data for any location using the WeatherAPI.com API, providing detailed forecasts and current conditions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ip2location/mcp-ip2location-io"&gt;ip2location/mcp-ip2location-io&lt;/a&gt; 🐍 ☁️ - Official IP2Location.io MCP server to obtain the geolocation, proxy and network information of an IP address utilizing IP2Location.io API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ipfind/ipfind-mcp-server"&gt;ipfind/ipfind-mcp-server&lt;/a&gt; 🐍 ☁️ - IP Address location service using the &lt;a href="https://ipfind.com"&gt;IP Find&lt;/a&gt; API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ipfred/aiwen-mcp-server-geoip"&gt;ipfred/aiwen-mcp-server-geoip&lt;/a&gt; 🐍 📇 ☁️ – MCP Server for the Aiwen IP Location, Get user network IP location, get IP details (country, province, city, lat, lon, ISP, owner, etc.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/iplocate/mcp-server-iplocate"&gt;iplocate/mcp-server-iplocate&lt;/a&gt; 🎖️ 📇 🏠 - Look up IP address geolocation, network information, detect proxies and VPNs, and find abuse contact details using IPLocate.io&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jagan-shanmugam/open-streetmap-mcp"&gt;jagan-shanmugam/open-streetmap-mcp&lt;/a&gt; 🐍 🏠 - An OpenStreetMap MCP server with location-based services and geospatial data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kukapay/nearby-search-mcp"&gt;kukapay/nearby-search-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server for nearby place searches with IP-based location detection.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mahdin75/geoserver-mcp"&gt;mahdin75/geoserver-mcp&lt;/a&gt; 🏠 – A Model Context Protocol (MCP) server implementation that connects LLMs to the GeoServer REST API, enabling AI assistants to interact with geospatial data and services.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mahdin75/gis-mcp"&gt;mahdin75/gis-mcp&lt;/a&gt; 🏠 – A Model Context Protocol (MCP) server implementation that connects Large Language Models (LLMs) to GIS operations using GIS libraries, enabling AI assistants to perform accurate geospatial operations and transformations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers-archived/tree/main/src/google-maps"&gt;modelcontextprotocol/server-google-maps&lt;/a&gt; 📇 ☁️ - Google Maps integration for location services, routing, and place details&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jjsantos01/qgis_mcp"&gt;QGIS MCP&lt;/a&gt; - connects QGIS Desktop to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rossshannon/weekly-weather-mcp.git"&gt;rossshannon/Weekly-Weather-mcp&lt;/a&gt; 🐍 ☁️ - Weekly Weather MCP server which returns 7 full days of detailed weather forecasts anywhere in the world.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SaintDoresh/Weather-MCP-ClaudeDesktop.git"&gt;SaintDoresh/Weather-MCP-ClaudeDesktop&lt;/a&gt; 🐍 ☁️ - An MCP tool that provides real-time weather data, forecasts, and historical weather information using the OpenWeatherMap API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SecretiveShell/MCP-timeserver"&gt;SecretiveShell/MCP-timeserver&lt;/a&gt; 🐍 🏠 - Access the time in any timezone and get the current local time&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stadiamaps/stadiamaps-mcp-server-ts"&gt;stadiamaps/stadiamaps-mcp-server-ts&lt;/a&gt; 📇 ☁️ - A MCP server for Stadia Maps' Location APIs - Lookup addresses, places with geocoding, find time zones, create routes and static maps&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TimLukaHorstmann/mcp-weather"&gt;TimLukaHorstmann/mcp-weather&lt;/a&gt; 📇 ☁️ - Accurate weather forecasts via the AccuWeather API (free tier available).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trackmage/trackmage-mcp-server"&gt;trackmage/trackmage-mcp-server&lt;/a&gt; 📇 - Shipment tracking api and logistics management capabilities through the [TrackMage API] (&lt;a href="https://trackmage.com/"&gt;https://trackmage.com/&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/webcoderz/MCP-Geo"&gt;webcoderz/MCP-Geo&lt;/a&gt; 🐍 🏠 - Geocoding MCP server for nominatim, ArcGIS, Bing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎯 &lt;a name="marketing"&gt;&lt;/a&gt;Marketing&lt;/h3&gt; 
&lt;p&gt;Tools for creating and editing marketing content, working with web meta data, product positioning, and editing guides.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gomarble-ai/facebook-ads-mcp-server"&gt;gomarble-ai/facebook-ads-mcp-server&lt;/a&gt; 🐍 ☁️ - MCP server acting as an interface to the Facebook Ads, enabling programmatic access to Facebook Ads data and management features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gomarble-ai/google-ads-mcp-server"&gt;gomarble-ai/google-ads-mcp-server&lt;/a&gt; 🐍 ☁️ - MCP server acting as an interface to the Google Ads, enabling programmatic access to Google Ads data and management features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MarketplaceAdPros/amazon-ads-mcp-server"&gt;marketplaceadpros/amazon-ads-mcp-server&lt;/a&gt; 📇 ☁️ - Enables tools to interact with Amazon Advertising, analyzing campaign metrics and configurations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/open-strategy-partners/osp_marketing_tools"&gt;open-strategy-partners/osp_marketing_tools&lt;/a&gt; 🐍 🏠 - A suite of marketing tools from Open Strategy Partners including writing style, editing codes, and product marketing value map creation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pipeboard-co/meta-ads-mcp"&gt;pipeboard-co/meta-ads-mcp&lt;/a&gt; 🐍 ☁️ 🏠 - Meta Ads automation that just works. Trusted by 10,000+ businesses to analyze performance, test creatives, optimize spend, and scale results — simply and reliably.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stape-io/stape-mcp-server"&gt;stape-io/stape-mcp-server&lt;/a&gt; 📇 ☁️ – This project implements an MCP (Model Context Protocol) server for the Stape platform. It allows interaction with the Stape API using AI assistants like Claude or AI-powered IDEs like Cursor.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stape-io/google-tag-manager-mcp-server"&gt;stape-io/google-tag-manager-mcp-server&lt;/a&gt; 📇 ☁️ – This server supports remote MCP connections, includes built-in Google OAuth, and provide an interface to the Google Tag Manager API.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📊 &lt;a name="monitoring"&gt;&lt;/a&gt;Monitoring&lt;/h3&gt; 
&lt;p&gt;Access and analyze application monitoring data. Enables AI models to review error reports and performance metrics.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/edgedelta/edgedelta-mcp-server"&gt;edgedelta/edgedelta-mcp-server&lt;/a&gt; 🎖️ 🏎️ ☁️ – Interact with Edge Delta anomalies, query logs / patterns / events, and pinpoint root causes and optimize your pipelines.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grafana/mcp-grafana"&gt;grafana/mcp-grafana&lt;/a&gt; 🎖️ 🐍 🏠 ☁️ - Search dashboards, investigate incidents and query datasources in your Grafana instance&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hyperb1iss/lucidity-mcp"&gt;hyperb1iss/lucidity-mcp&lt;/a&gt; 🐍 🏠 - Enhance AI-generated code quality through intelligent, prompt-based analysis across 10 critical dimensions from complexity to security vulnerabilities&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inventer-dev/mcp-internet-speed-test"&gt;inventer-dev/mcp-internet-speed-test&lt;/a&gt; 🐍 ☁️ - Internet speed testing with network performance metrics including download/upload speed, latency, jitter analysis, and CDN server detection with geographic mapping&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/last9/last9-mcp-server"&gt;last9/last9-mcp-server&lt;/a&gt; - Seamlessly bring real-time production context—logs, metrics, and traces—into your local environment to auto-fix code faster&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/metoro-io/metoro-mcp-server"&gt;metoro-io/metoro-mcp-server&lt;/a&gt; 🎖️ 🏎️ ☁️ - Query and interact with kubernetes environments monitored by Metoro&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MindscapeHQ/mcp-server-raygun"&gt;MindscapeHQ/server-raygun&lt;/a&gt; 📇 ☁️ - Raygun API V3 integration for crash reporting and real user monitoring&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/getsentry/sentry-mcp"&gt;getsentry/sentry-mcp&lt;/a&gt; 🐍 ☁️ - Sentry.io integration for error tracking and performance monitoring&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mpeirone/zabbix-mcp-server"&gt;mpeirone/zabbix-mcp-server&lt;/a&gt; 🐍 ☁️ 🐧 🪟 🍎 - Zabbix integration for hosts, items, triggers, templates, problems, data and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/netdata/netdata/raw/master/src/web/mcp/README.md"&gt;netdata/netdata#Netdata&lt;/a&gt; 🎖️ 🏠 ☁️ 📟 🍎 🪟 🐧 - Discovery, exploration, reporting and root cause analysis using all observability data, including metrics, logs, systems, containers, processes, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pydantic/logfire-mcp"&gt;pydantic/logfire-mcp&lt;/a&gt; 🎖️ 🐍 ☁️ - Provides access to OpenTelemetry traces and metrics through Logfire&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/seekrays/mcp-monitor"&gt;seekrays/mcp-monitor&lt;/a&gt; 🏎️ 🏠 - A system monitoring tool that exposes system metrics via the Model Context Protocol (MCP). This tool allows LLMs to retrieve real-time system information through an MCP-compatible interface.（support CPU、Memory、Disk、Network、Host、Process）&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tumf/grafana-loki-mcp"&gt;tumf/grafana-loki-mcp&lt;/a&gt; 🐍 🏠 - An MCP server that allows querying Loki logs through the Grafana API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VictoriaMetrics-Community/mcp-victoriametrics"&gt;VictoriaMetrics-Community/mcp-victoriametrics&lt;/a&gt; 🎖️ 🏎️ 🏠 - Provides comprehensive integration with your &lt;a href="https://docs.victoriametrics.com/victoriametrics/url-examples/"&gt;VictoriaMetrics instance APIs&lt;/a&gt; and &lt;a href="https://docs.victoriametrics.com/"&gt;documentation&lt;/a&gt; for monitoring, observability, and debugging tasks related to your VictoriaMetrics instances&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imprvhub/mcp-status-observer"&gt;imprvhub/mcp-status-observer&lt;/a&gt; 📇 ☁️ - Model Context Protocol server for monitoring Operational Status of major digital platforms in Claude Desktop.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inspektor-gadget/ig-mcp-server"&gt;inspektor-gadget/ig-mcp-server&lt;/a&gt; 🏎️ ☁️ 🏠 🐧 🪟 🍎 - Debug your Container and Kubernetes workloads with an AI interface powered by eBPF.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yshngg/pmcp"&gt;yshngg/pmcp&lt;/a&gt; 🏎️ ☁️ 🏠 🍎 🪟 🐧 - A Prometheus Model Context Protocol Server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎥 &lt;a name="multimedia-process"&gt;&lt;/a&gt;Multimedia Process&lt;/h3&gt; 
&lt;p&gt;Provides the ability to handle multimedia, such as audio and video editing, playback, format conversion, also includes video filters, enhancements, and so on&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ananddtyagi/gif-creator-mcp/tree/main"&gt;ananddtyagi/gif-creator-mcp&lt;/a&gt; 📇 🏠 - A MCP server for creating GIFs from your videos.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bogdan01m/zapcap-mcp-server"&gt;bogdan01m/zapcap-mcp-server&lt;/a&gt; 🐍 ☁️ - MCP server for ZapCap API providing video caption and B-roll generation via natural language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stass/exif-mcp"&gt;stass/exif-mcp&lt;/a&gt; 📇 🏠 🐧 🍎 🪟 - A MCP server that allows one to examine image metadata like EXIF, XMP, JFIF and GPS. This provides foundation for LLM-powered search and analysis of photo librares and image collections.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sunriseapps/imagesorcery-mcp"&gt;sunriseapps/imagesorcery-mcp&lt;/a&gt; 🐍 🏠 🐧 🍎 🪟 - ComputerVision-based 🪄 sorcery of image recognition and editing tools for AI assistants.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/video-creator/ffmpeg-mcp.git"&gt;video-creator/ffmpeg-mcp&lt;/a&gt; 🎥 🔊 - Using ffmpeg command line to achieve an mcp server, can be very convenient, through the dialogue to achieve the local video search, tailoring, stitching, playback and other functions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔎 &lt;a name="RAG"&gt;&lt;/a&gt;end to end RAG platforms&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vectara/vectara-mcp"&gt;vectara/vectara-mcp&lt;/a&gt; 🐍 🏠 ☁️ - An MCP server for accessing Vectara's trusted RAG-as-a-service platform.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔎 &lt;a name="search"&gt;&lt;/a&gt;Search &amp;amp; Data Extraction&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xDAEF0F/job-searchoor"&gt;0xdaef0f/job-searchoor&lt;/a&gt; 📇 🏠 - An MCP server for searching job listings with filters for date, keywords, remote work options, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aas-ee/open-webSearch"&gt;Aas-ee/open-webSearch&lt;/a&gt; 🐍 📇 ☁️ - Web search using free multi-engine search (NO API KEYS REQUIRED) — Supports Bing, Baidu, DuckDuckGo, Brave, Exa, and CSDN.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ac3xx/mcp-servers-kagi"&gt;ac3xx/mcp-servers-kagi&lt;/a&gt; 📇 ☁️ - Kagi search API integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adawalli/nexus"&gt;adawalli/nexus&lt;/a&gt; 📇 ☁️ - AI-powered web search server using Perplexity Sonar models with source citations. Zero-install setup via NPX.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ananddtyagi/webpage-screenshot-mcp"&gt;ananddtyagi/webpage-screenshot-mcp&lt;/a&gt; 📇 🏠 - A MCP server for taking screenshots of webpages to use as feedback during UI developement.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andybrandt/mcp-simple-arxiv"&gt;andybrandt/mcp-simple-arxiv&lt;/a&gt; - 🐍 ☁️ MCP for LLM to search and read papers from arXiv&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andybrandt/mcp-simple-pubmed"&gt;andybrandt/mcp-simple-pubmed&lt;/a&gt; - 🐍 ☁️ MCP to search and read medical / life sciences papers from PubMed.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/angheljf/nyt"&gt;angheljf/nyt&lt;/a&gt; 📇 ☁️ - Search articles using the NYTimes API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apify/mcp-server-rag-web-browser"&gt;apify/mcp-server-rag-web-browser&lt;/a&gt; 📇 ☁️ - An MCP server for Apify's open-source RAG Web Browser Actor to perform web searches, scrape URLs, and return content in Markdown.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Bigsy/Clojars-MCP-Server"&gt;Bigsy/Clojars-MCP-Server&lt;/a&gt; 📇 ☁️ - Clojars MCP Server for upto date dependency information of Clojure libraries&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blazickjp/arxiv-mcp-server"&gt;blazickjp/arxiv-mcp-server&lt;/a&gt; ☁️ 🐍 - Search ArXiv research papers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChanMeng666/server-google-news"&gt;chanmeng/google-news-mcp-server&lt;/a&gt; 📇 ☁️ - Google News integration with automatic topic categorization, multi-language support, and comprehensive search capabilities including headlines, stories, and related topics through &lt;a href="https://serpapi.com/"&gt;SerpAPI&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ConechoAI/openai-websearch-mcp/"&gt;ConechoAI/openai-websearch-mcp&lt;/a&gt; 🐍 🏠 ☁️ - This is a Python-based MCP server that provides OpenAI &lt;code&gt;web_search&lt;/code&gt; build-in tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DappierAI/dappier-mcp"&gt;DappierAI/dappier-mcp&lt;/a&gt; 🐍 ☁️ - Enable fast, free real-time web search and access premium data from trusted media brands—news, financial markets, sports, entertainment, weather, and more. Build powerful AI agents with Dappier.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deadletterq/mcp-opennutrition"&gt;deadletterq/mcp-opennutrition&lt;/a&gt; 📇 🏠 - Local MCP server for searching 300,000+ foods, nutrition facts, and barcodes from the OpenNutrition database.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DealExpress/mcp-server"&gt;dealx/mcp-server&lt;/a&gt; ☁️ - MCP Server for DealX platform&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/devflowinc/trieve/tree/main/clients/mcp-server"&gt;devflowinc/trieve&lt;/a&gt; 🎖️ 📇 ☁️ 🏠 - Crawl, embed, chunk, search, and retrieve information from datasets through &lt;a href="https://trieve.ai"&gt;Trieve&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Dumpling-AI/mcp-server-dumplingai"&gt;Dumpling-AI/mcp-server-dumplingai&lt;/a&gt; 🎖️ 📇 ☁️ - Access data, web scraping, and document conversion APIs by &lt;a href="https://www.dumplingai.com/"&gt;Dumpling AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emicklei/melrose-mcp"&gt;emicklei/melrose-mcp&lt;/a&gt; 🏎️ 🏠 - Plays &lt;a href="https://melr%C5%8Dse.org"&gt;Melrōse&lt;/a&gt; music expressions as MIDI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/erithwik/mcp-hn"&gt;erithwik/mcp-hn&lt;/a&gt; 🐍 ☁️ - An MCP server to search Hacker News, get top stories, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/exa-labs/exa-mcp-server"&gt;exa-labs/exa-mcp-server&lt;/a&gt; 🎖️ 📇 ☁️ – A Model Context Protocol (MCP) server lets AI assistants like Claude use the Exa AI Search API for web searches. This setup allows AI models to get real-time web information in a safe and controlled way.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fatwang2/search1api-mcp"&gt;fatwang2/search1api-mcp&lt;/a&gt; 📇 ☁️ - Search via search1api (requires paid API key)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/format37/youtube_mcp"&gt;format37/youtube_mcp&lt;/a&gt; 🐍 ☁️ – MCP server that transcribes YouTube videos to text. Uses yt-dlp to download audio and OpenAI's Whisper-1 for more precise transcription than youtube captions. Provide a YouTube URL and get back the full transcript splitted by chunks for long videos.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/genomoncology/biomcp"&gt;genomoncology/biomcp&lt;/a&gt; 🐍 ☁️ - Biomedical research server providing access to PubMed, ClinicalTrials.gov, and MyVariant.info.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hbg/mcp-paperswithcode"&gt;hbg/mcp-paperswithcode&lt;/a&gt; - 🐍 ☁️ MCP to search through PapersWithCode API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hellokaton/unsplash-mcp-server"&gt;hellokaton/unsplash-mcp-server&lt;/a&gt;) 🐍 ☁️ - A MCP server for Unsplash image search.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Himalayas-App/himalayas-mcp"&gt;Himalayas-App/himalayas-mcp&lt;/a&gt; 📇 ☁️ - Access tens of thousands of remote job listings and company information. This public MCP server provides real-time access to Himalayas' remote jobs database.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ihor-sokoliuk/mcp-searxng"&gt;Ihor-Sokoliuk/MCP-SearXNG&lt;/a&gt; 📇 🏠/☁️ - A Model Context Protocol Server for &lt;a href="https://docs.searxng.org"&gt;SearXNG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/isnow890/naver-search-mcp"&gt;isnow890/naver-search-mcp&lt;/a&gt; 📇 ☁️ - MCP server for Naver Search API integration, supporting blog, news, shopping search and DataLab analytics features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jae-jae/fetcher-mcp"&gt;jae-jae/fetcher-mcp&lt;/a&gt; 📇 🏠 - MCP server for fetching web page content using Playwright headless browser, supporting Javascript rendering and intelligent content extraction, and outputting Markdown or HTML format.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jae-jae/g-search-mcp"&gt;jae-jae/g-search-mcp&lt;/a&gt; 📇 🏠 - A powerful MCP server for Google search that enables parallel searching with multiple keywords simultaneously.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/joelio/stocky"&gt;joelio/stocky&lt;/a&gt; 🐍 ☁️ 🏠 - An MCP server for searching and downloading royalty-free stock photography from Pexels and Unsplash. Features multi-provider search, rich metadata, pagination support, and async performance for AI assistants to find and access high-quality images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/just-every/mcp-read-website-fast"&gt;just-every/mcp-read-website-fast&lt;/a&gt; 📇 🏠 - Fast, token-efficient web content extraction for AI agents - converts websites to clean Markdown while preserving links. Features Mozilla Readability, smart caching, polite crawling with robots.txt support, and concurrent fetching.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/just-every/mcp-screenshot-website-fast"&gt;just-every/mcp-screenshot-website-fast&lt;/a&gt; 📇 🏠 - Fast screenshot capture tool optimized for Claude Vision API. Automatically tiles full pages into 1072x1072 chunks for optimal AI processing with configurable viewports and wait strategies for dynamic content.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kagisearch/kagimcp"&gt;kagisearch/kagimcp&lt;/a&gt; ☁️ 📇 – Official Kagi Search MCP Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kehvinbehvin/json-mcp-filter"&gt;kehvinbehvin/json-mcp-filter&lt;/a&gt; ️🏠 📇 – Stop bloating your LLM context. Query &amp;amp; Extract only what you need from your JSON files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kshern/mcp-tavily.git"&gt;kshern/mcp-tavily&lt;/a&gt; ☁️ 📇 – Tavily AI search API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/leehanchung/bing-search-mcp"&gt;leehanchung/bing-search-mcp&lt;/a&gt; 📇 ☁️ - Web search capabilities using Microsoft Bing Search API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lfnovo/content-core"&gt;lfnovo/content-core&lt;/a&gt; 🐍 🏠 - Extract content from URLs, documents, videos, and audio files using intelligent auto-engine selection. Supports web pages, PDFs, Word docs, YouTube transcripts, and more with structured JSON responses.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Linked-API/linkedapi-mcp"&gt;Linked-API/linkedapi-mcp&lt;/a&gt; 🎖️ 📇 ☁️&amp;nbsp;- MCP server that lets AI assistants control LinkedIn accounts and retrieve real-time data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/luminati-io/brightdata-mcp"&gt;luminati-io/brightdata-mcp&lt;/a&gt; 📇 ☁️&amp;nbsp;-&amp;nbsp;Discover, extract, and interact with the web - one interface powering automated access across the public internet.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mikechao/brave-search-mcp"&gt;mikechao/brave-search-mcp&lt;/a&gt; 📇 ☁️ - Web, Image, News, Video, and Local Point of Interest search capabilities using Brave's Search API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search"&gt;modelcontextprotocol/server-brave-search&lt;/a&gt; 📇 ☁️ - Web search capabilities using Brave's Search API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/fetch"&gt;modelcontextprotocol/server-fetch&lt;/a&gt; 🐍 🏠 ☁️ - Efficient web content fetching and processing for AI consumption&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mzxrai/mcp-webresearch"&gt;mzxrai/mcp-webresearch&lt;/a&gt; 🔍 📚 - Search Google and do deep web research on any topic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nickclyde/duckduckgo-mcp-server"&gt;nickclyde/duckduckgo-mcp-server&lt;/a&gt; 🐍 ☁️ - Web search using DuckDuckGo&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nkapila6/mcp-local-rag"&gt;nkapila6/mcp-local-rag&lt;/a&gt; 🏠 🐍 - "primitive" RAG-like web search model context protocol (MCP) server that runs locally. No APIs needed.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nyxn-ai/NyxDocs"&gt;nyxn-ai/NyxDocs&lt;/a&gt; 🐍 ☁️ 🏠 - Specialized MCP server for cryptocurrency project documentation management with multi-blockchain support (Ethereum, BSC, Polygon, Solana).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OctagonAI/octagon-deep-research-mcp"&gt;OctagonAI/octagon-deep-research-mcp&lt;/a&gt; 🎖️ 📇 ☁️ 🏠 - Lightning-Fast, High-Accuracy Deep Research Agent&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pragmar/mcp-server-webcrawl"&gt;pragmar/mcp-server-webcrawl&lt;/a&gt; 🐍 🏠 - Advanced search and retrieval for web crawler data. Supports WARC, wget, Katana, SiteOne, and InterroBot crawlers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QuentinCody/catalysishub-mcp-server"&gt;QuentinCody/catalysishub-mcp-server&lt;/a&gt; 🐍 - Unofficial MCP server for searching and retrieving scientific data from the Catalysis Hub database, providing access to computational catalysis research and surface reaction data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r-huijts/opentk-mcp"&gt;r-huijts/opentk-mcp&lt;/a&gt; 📇 ☁️ - Access Dutch Parliament (Tweede Kamer) information including documents, debates, activities, and legislative cases through structured search capabilities (based on opentk project by Bert Hubert)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reading-plus-ai/mcp-server-deep-research"&gt;reading-plus-ai/mcp-server-deep-research&lt;/a&gt; 📇 ☁️ - MCP server providing OpenAI/Perplexity-like autonomous deep research, structured query elaboration, and concise reporting.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ricocf/mcp-wolframalpha"&gt;ricocf/mcp-wolframalpha&lt;/a&gt; 🐍 🏠 ☁️ - An MCP server lets AI assistants use the Wolfram Alpha API for real-time access to computational knowledge and data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sascharo/gxtract"&gt;sascharo/gxtract&lt;/a&gt; 🐍 ☁️ 🪟 🐧 🍎 - GXtract is a MCP server designed to integrate with VS Code and other compatible editors (documentation: &lt;a href="https://sascharo.github.io/gxtract"&gt;sascharo.github.io/gxtract&lt;/a&gt;). It provides a suite of tools for interacting with the GroundX platform, enabling you to leverage its powerful document understanding capabilities directly within your development environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/scrapeless-ai/scrapeless-mcp-server"&gt;scrapeless-ai/scrapeless-mcp-server&lt;/a&gt; 🐍 ☁️ - The Scrapeless Model Context Protocol service acts as an MCP server connector to the Google SERP API, enabling web search within the MCP ecosystem without leaving it.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SecretiveShell/MCP-searxng"&gt;SecretiveShell/MCP-searxng&lt;/a&gt; 🐍 🏠 - An MCP Server to connect to searXNG instances&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shopsavvy/shopsavvy-mcp-server"&gt;shopsavvy/shopsavvy-mcp-server&lt;/a&gt; 🎖️ 📇 ☁️ - Complete product and pricing data solution for AI assistants. Search for products by barcode/ASIN/URL, access detailed product metadata, access comprehensive pricing data from thousands of retailers, view and track price history, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/takashiishida/arxiv-latex-mcp"&gt;takashiishida/arxiv-latex-mcp&lt;/a&gt; 🐍 ☁️ - Get the LaTeX source of arXiv papers to handle mathematical content and equations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/the0807/GeekNews-MCP-Server"&gt;the0807/GeekNews-MCP-Server&lt;/a&gt; 🐍 ☁️ - An MCP Server that retrieves and processes news data from the GeekNews site.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tianqitang1/enrichr-mcp-server"&gt;tianqitang1/enrichr-mcp-server&lt;/a&gt; 📇 ☁️ - A MCP server that provides gene set enrichment analysis using the Enrichr API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tinyfish-io/agentql-mcp"&gt;tinyfish-io/agentql-mcp&lt;/a&gt; 🎖️ 📇 ☁️ - MCP server that provides &lt;a href="https://agentql.com"&gt;AgentQL&lt;/a&gt;'s data extraction capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Tomatio13/mcp-server-tavily"&gt;Tomatio13/mcp-server-tavily&lt;/a&gt; ☁️ 🐍 – Tavily AI search API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vectorize-io/vectorize-mcp-server/"&gt;vectorize-io/vectorize-mcp-server&lt;/a&gt; ☁️ 📇 - &lt;a href="https://vectorize.io"&gt;Vectorize&lt;/a&gt; MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vitorpavinato/ncbi-mcp-server"&gt;vitorpavinato/ncbi-mcp-server&lt;/a&gt; 🐍 ☁️ 🏠 - Comprehensive NCBI/PubMed literature search server with advanced analytics, caching, MeSH integration, related articles discovery, and batch processing for all life sciences and biomedical research.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kimdonghwi94/web-analyzer-mcp"&gt;kimdonghwi94/Web-Analyzer-MCP&lt;/a&gt; 🐍 🏠 🍎 🪟 🐧 - Extracts clean web content for RAG and provides Q&amp;amp;A about web pages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/webscraping-ai/webscraping-ai-mcp-server"&gt;webscraping-ai/webscraping-ai-mcp-server&lt;/a&gt; 🎖️ 📇 ☁️ - Interact with &lt;a href="https://webscraping.ai"&gt;WebScraping.ai&lt;/a&gt; for web data extraction and scraping.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yamanoku/baseline-mcp-server"&gt;yamanoku/baseline-mcp-server&lt;/a&gt; 📇 🏠 - MCP server that searches Baseline status using Web Platform API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zhsama/duckduckgo-mpc-server/"&gt;zhsama/duckduckgo-mcp-server&lt;/a&gt; 📇 🏠 ☁️ - This is a TypeScript-based MCP server that provides DuckDuckGo search functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zoomeye-ai/mcp_zoomeye"&gt;zoomeye-ai/mcp_zoomeye&lt;/a&gt; 📇 ☁️ - Querying network asset information by ZoomEye MCP Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Pearch-ai/mcp_pearch"&gt;Pearch-ai/mcp_pearch&lt;/a&gt; 🎖️ 🐍 ☁️ - Best people search engine that reduces the time spent on talent discovery&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imprvhub/mcp-domain-availability"&gt;imprvhub/mcp-domain-availability&lt;/a&gt; 🐍 ☁️ - A Model Context Protocol (MCP) server that enables Claude Desktop to check domain availability across 50+ TLDs. Features DNS/WHOIS verification, bulk checking, and smart suggestions. Zero-clone installation via uvx.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imprvhub/mcp-claude-hackernews"&gt;imprvhub/mcp-claude-hackernews&lt;/a&gt; 📇 🏠 ☁️ - An integration that allows Claude Desktop to interact with Hacker News using the Model Context Protocol (MCP).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imprvhub/mcp-rss-aggregator"&gt;imprvhub/mcp-rss-aggregator&lt;/a&gt; 📇 ☁️ 🏠 - Model Context Protocol Server for aggregating RSS feeds in Claude Desktop.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔒 &lt;a name="security"&gt;&lt;/a&gt;Security&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mariocandela/beelzebub"&gt;mariocandela/beelzebub&lt;/a&gt; ☁️ - Beelzebub is a honeypot framework that lets you build honeypot tools using MCP. Its purpose is to detect prompt injection or malicious agent behavior. The underlying idea is to provide the agent with tools it would never use in its normal work.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/13bm/GhidraMCP"&gt;13bm/GhidraMCP&lt;/a&gt; 🐍 ☕ 🏠 - MCP server for integrating Ghidra with AI assistants. This plugin enables binary analysis, providing tools for function inspection, decompilation, memory exploration, and import/export analysis via the Model Context Protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AIM-Intelligence/AIM-MCP"&gt;AIM-Intelligence/AIM-Guard-MCP&lt;/a&gt; 📇 🏠 🍎 🪟 🐧 - Security-focused MCP server that provides safety guidelines and content analysis for AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atomicchonk/roadrecon_mcp_server"&gt;atomicchonk/roadrecon_mcp_server&lt;/a&gt; 🐍 🪟 🏠 MCP server for analyzing ROADrecon gather results from Azure tenant enumeration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurtTheCoder/mcp-dnstwist"&gt;BurtTheCoder/mcp-dnstwist&lt;/a&gt; 📇 🪟 ☁️ - MCP server for dnstwist, a powerful DNS fuzzing tool that helps detect typosquatting, phishing, and corporate espionage.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurtTheCoder/mcp-maigret"&gt;BurtTheCoder/mcp-maigret&lt;/a&gt; 📇 🪟 ☁️ - MCP server for maigret, a powerful OSINT tool that collects user account information from various public sources. This server provides tools for searching usernames across social networks and analyzing URLs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurtTheCoder/mcp-shodan"&gt;BurtTheCoder/mcp-shodan&lt;/a&gt; 📇 🪟 ☁️ - MCP server for querying the Shodan API and Shodan CVEDB. This server provides tools for IP lookups, device searches, DNS lookups, vulnerability queries, CPE lookups, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BurtTheCoder/mcp-virustotal"&gt;BurtTheCoder/mcp-virustotal&lt;/a&gt; 📇 🪟 ☁️ - MCP server for querying the VirusTotal API. This server provides tools for scanning URLs, analyzing file hashes, and retrieving IP address reports.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/co-browser/attestable-mcp-server"&gt;co-browser/attestable-mcp-server&lt;/a&gt; 🐍 🏠 ☁️ 🐧 - An MCP server running inside a trusted execution environment (TEE) via Gramine, showcasing remote attestation using &lt;a href="https://gramine.readthedocs.io/en/stable/attestation.html"&gt;RA-TLS&lt;/a&gt;. This allows an MCP client to verify the server before conencting.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dkvdm/onepassword-mcp-server"&gt;dkvdm/onepassword-mcp-server&lt;/a&gt; - An MCP server that enables secure credential retrieval from 1Password to be used by Agentic AI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/firstorderai/authenticator_mcp"&gt;firstorderai/authenticator_mcp&lt;/a&gt; 📇 🏠 🍎 🪟 🐧 – A secure MCP (Model Context Protocol) server that enables AI agents to interact with the Authenticator App.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fosdickio/binary_ninja_mcp"&gt;fosdickio/binary_ninja_mcp&lt;/a&gt; 🐍 🏠 🍎 🪟 🐧 - A Binary Ninja plugin, MCP server, and bridge that seamlessly integrates &lt;a href="https://binary.ninja"&gt;Binary Ninja&lt;/a&gt; with your favorite MCP client. It enables you to automate the process of performing binary analysis and reverse engineering.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fr0gger/MCP_Security"&gt;fr0gger/MCP_Security&lt;/a&gt; 📇 ☁️ - MCP server for querying the ORKL API. This server provides tools for fetching threat reports, analyzing threat actors, and retrieving intelligence sources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Gaffx/volatility-mcp"&gt;Gaffx/volatility-mcp&lt;/a&gt; - MCP server for Volatility 3.x, allowing you to perform memory forensics analysis with AI assistant. Experience memory forensics without barriers as plugins like pslist and netscan become accessible through clean REST APIs and LLMs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gbrigandi/mcp-server-cortex"&gt;gbrigandi/mcp-server-cortex&lt;/a&gt; 🦀 🏠 🚨 🍎 🪟 🐧 - A Rust-based MCP server to integrate Cortex, enabling observable analysis and automated security responses through AI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gbrigandi/mcp-server-thehive"&gt;gbrigandi/mcp-server-thehive&lt;/a&gt; 🦀 🏠 🚨 🍎 🪟 🐧 - A Rust-based MCP server to integrate TheHive, facilitating collaborative security incident response and case management via AI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gbrigandi/mcp-server-wazuh"&gt;gbrigandi/mcp-server-wazuh&lt;/a&gt; 🦀 🏠 🚨 🍎 🪟 🐧 - A Rust-based MCP server bridging Wazuh SIEM with AI assistants, providing real-time security alerts and event data for enhanced contextual understanding.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hieuttmmo/entraid-mcp-server"&gt;hieutran/entraid-mcp-server&lt;/a&gt; 🐍 ☁️ - A MCP server for Microsoft Entra ID (Azure AD) directory, user, group, device, sign-in, and security operations via Microsoft Graph Python SDK.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/intruder-io/intruder-mcp"&gt;intruder-io/intruder-mcp&lt;/a&gt; 🐍 ☁️ - MCP server to access &lt;a href="https://www.intruder.io/"&gt;Intruder&lt;/a&gt;, helping you identify, understand, and fix security vulnerabilities in your infrastructure.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jtang613/GhidrAssistMCP"&gt;jtang613/GhidrAssistMCP&lt;/a&gt; ☕ 🏠 - A native Model Context Protocol server for Ghidra. Includes GUI configuration and logging, 31 powerful tools and no external dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jyjune/mcp_vms"&gt;jyjune/mcp_vms&lt;/a&gt; 🐍 🏠 🪟 - A Model Context Protocol (MCP) server designed to connect to a CCTV recording program (VMS) to retrieve recorded and live video streams. It also provides tools to control the VMS software, such as showing live or playback dialogs for specific channels at specified times.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LaurieWired/GhidraMCP"&gt;LaurieWired/GhidraMCP&lt;/a&gt; ☕ 🏠 - A Model Context Protocol server for Ghidra that enables LLMs to autonomously reverse engineer applications. Provides tools for decompiling binaries, renaming methods and data, and listing methods, classes, imports, and exports.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mobb-dev/bugsy?tab=readme-ov-file#model-context-protocol-mcp-server"&gt;mobb-dev/mobb-vibe-shield-mcp&lt;/a&gt; 🎖️ 📇 ☁️ 🍎 🪟 🐧 - &lt;a href="https://vibe.mobb.ai/"&gt;Mobb Vibe Shield&lt;/a&gt; identifies and remediates vulnerabilities in both human and AI-written code, ensuring your applications remain secure without slowing development.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrexodia/ida-pro-mcp"&gt;mrexodia/ida-pro-mcp&lt;/a&gt; 🐍 🏠 - MCP server for IDA Pro, allowing you to perform binary analysis with AI assistants. This plugin implement decompilation, disassembly and allows you to generate malware analysis reports automatically.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nickpending/mcp-recon"&gt;nickpending/mcp-recon&lt;/a&gt; 🏎️ 🏠 - Conversational recon interface and MCP server powered by httpx and asnmap. Supports various reconnaissance levels for domain analysis, security header inspection, certificate analysis, and ASN lookup.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/panther-labs/mcp-panther"&gt;panther-labs/mcp-panther&lt;/a&gt; 🎖️ 🐍 ☁️ 🍎 - MCP server that enables security professionals to interact with Panther's SIEM platform using natural language for writing detections, querying logs, and managing alerts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pullkitsan/mobsf-mcp-server"&gt;pullkitsan/mobsf-mcp-server&lt;/a&gt; 🦀 🏠 🍎 🪟 🐧 - A MCP server for MobSF which can be used for static and dynamic analysis of Android and iOS application.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qianniuspace/mcp-security-audit"&gt;qianniuspace/mcp-security-audit&lt;/a&gt; 📇 ☁️ A powerful MCP (Model Context Protocol) Server that audits npm package dependencies for security vulnerabilities. Built with remote npm registry integration for real-time security checks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rad-security/mcp-server"&gt;rad-security/mcp-server&lt;/a&gt; 📇 ☁️ - MCP server for RAD Security, providing AI-powered security insights for Kubernetes and cloud environments. This server provides tools for querying the Rad Security API and retrieving security findings, reports, runtime data and many more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/roadwy/cve-search_mcp"&gt;roadwy/cve-search_mcp&lt;/a&gt; 🐍 🏠 - A Model Context Protocol (MCP) server for querying the CVE-Search API. This server provides comprehensive access to CVE-Search, browse vendor and product、get CVE per CVE-ID、get the last updated CVEs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/safedep/vet/raw/main/docs/mcp.md"&gt;safedep/vet&lt;/a&gt; 🎖️ 🏎️ ☁️ 🍎 🪟 🐧 - vet-mcp checks open source packages—like those suggested by AI coding tools—for vulnerabilities and malicious code. It supports npm and PyPI, and runs locally via Docker or as a standalone binary for fast, automated vetting.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sanyambassi/ciphertrust-manager-mcp-server"&gt;sanyambassi/ciphertrust-manager-mcp-server&lt;/a&gt; 🐍 ☁️ 🏠 🐧 🪟 - MCP server for Thales CipherTrust Manager integration, enabling secure key management, cryptographic operations, and compliance monitoring through AI assistants.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sanyambassi/thales-cdsp-cakm-mcp-server"&gt;sanyambassi/thales-cdsp-cakm-mcp-server&lt;/a&gt; 🐍 ☁️ 🏠 🐧 🪟 - MCP server for Thales CDSP CAKM integration, enabling secure key management, cryptographic operations, and compliance monitoring through AI assistants for Ms SQL and Oracle Databases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sanyambassi/thales-cdsp-crdp-mcp-server"&gt;sanyambassi/thales-cdsp-crdp-mcp-server&lt;/a&gt; 📇 ☁️ 🏠 🐧 🪟 - MCP server for Thales CipherTrust Manager RestFul Data Protection service.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/securityfortech/secops-mcp"&gt;securityfortech/secops-mcp&lt;/a&gt; 🐍 🏠 - All-in-one security testing toolbox that brings together popular open source tools through a single MCP interface. Connected to an AI agent, it enables tasks like pentesting, bug bounty hunting, threat hunting, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/semgrep/mcp"&gt;semgrep/mcp&lt;/a&gt; 📇 ☁️ Allow AI agents to scan code for security vulnerabilites using &lt;a href="https://semgrep.dev"&gt;Semgrep&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/slouchd/cyberchef-api-mcp-server"&gt;slouchd/cyberchef-api-mcp-server&lt;/a&gt; 🐍 ☁️ - MCP server for interacting with the CyberChef server API which will allow an MCP client to utilise the CyberChef operations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StacklokLabs/osv-mcp"&gt;StacklokLabs/osv-mcp&lt;/a&gt; 🏎️ ☁️ - Access the OSV (Open Source Vulnerabilities) database for vulnerability information. Query vulnerabilities by package version or commit, batch query multiple packages, and get detailed vulnerability information by ID.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vespo92/OPNSenseMCP"&gt;vespo92/OPNSenseMCP&lt;/a&gt; 📇 🏠 - MCP Server for managing &amp;amp; interacting with Open Source NGFW OPNSense via Natural Language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Adeptus-Innovatio/solvitor-mcp"&gt;adeptus-innovatio/solvitor-mcp&lt;/a&gt; 🦀 🏠&amp;nbsp;- Solvitor MCP server provides tools to access reverse engineering tools that help developers extract IDL files from closed-source Solana smart contracts and decompile them.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zinja-coder/apktool-mcp-server"&gt;zinja-coder/apktool-mcp-server&lt;/a&gt; 🐍 🏠 - APKTool MCP Server is a MCP server for the Apk Tool to provide automation in reverse engineering of Android APKs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zinja-coder/jadx-ai-mcp"&gt;zinja-coder/jadx-ai-mcp&lt;/a&gt; ☕ 🏠 - JADX-AI-MCP is a plugin and MCP Server for the JADX decompiler that integrates directly with Model Context Protocol (MCP) to provide live reverse engineering support with LLMs like Claude.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🌐 &lt;a name="social-media"&gt;&lt;/a&gt;Social Media&lt;/h3&gt; 
&lt;p&gt;Integration with social media platforms to allow posting, analytics, and interaction management. Enables AI-driven automation for social presence.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anwerj/youtube-uploader-mcp"&gt;anwerj/youtube-uploader-mcp&lt;/a&gt; 🏎️ ☁️ - AI‑powered YouTube uploader—no CLI, no YouTube Studio. Uploade videos directly from MCP clients with all AI capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gwbischof/bluesky-social-mcp"&gt;gwbischof/bluesky-social-mcp&lt;/a&gt; 🐍 🏠 - An MCP server for interacting with Bluesky via the atproto client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HagaiHen/facebook-mcp-server"&gt;HagaiHen/facebook-mcp-server&lt;/a&gt; 🐍 ☁️ - Integrates with Facebook Pages to enable direct management of posts, comments, and engagement metrics through the Graph API for streamlined social media management.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/LuniaKunal/mcp-twitter"&gt;kunallunia/twitter-mcp&lt;/a&gt; 🐍 🏠 - All-in-one Twitter management solution providing timeline access, user tweet retrieval, hashtag monitoring, conversation analysis, direct messaging, sentiment analysis of a post, and complete post lifecycle control - all through a streamlined API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/macrocosm-os/macrocosmos-mcp"&gt;macrocosm-os/macrocosmos-mcp&lt;/a&gt; - 🎖️ 🐍 ☁️ Access real-time X/Reddit/YouTube data directly in your LLM applications with search phrases, users, and date filtering.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sinanefeozler/reddit-summarizer-mcp"&gt;sinanefeozler/reddit-summarizer-mcp&lt;/a&gt; 🐍 🏠 ☁️ - MCP server for summarizing users's Reddit homepage or any subreddit based on posts and comments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🏃 &lt;a name="sports"&gt;&lt;/a&gt;Sports&lt;/h3&gt; 
&lt;p&gt;Tools for accessing sports-related data, results, and statistics.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/guillochon/mlb-api-mcp"&gt;guillochon/mlb-api-mcp&lt;/a&gt; 🐍 🏠 - MCP server that acts as a proxy to the freely available MLB API, which provides player info, stats, and game information.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mikechao/balldontlie-mcp"&gt;mikechao/balldontlie-mcp&lt;/a&gt; 📇 - MCP server that integrates balldontlie api to provide information about players, teams and games for the NBA, NFL and MLB&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r-huijts/firstcycling-mcp"&gt;r-huijts/firstcycling-mcp&lt;/a&gt; 📇 ☁️ - Access cycling race data, results, and statistics through natural language. Features include retrieving start lists, race results, and rider information from firstcycling.com.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r-huijts/strava-mcp"&gt;r-huijts/strava-mcp&lt;/a&gt; 📇 ☁️ - A Model Context Protocol (MCP) server that connects to Strava API, providing tools to access Strava data through LLMs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RobSpectre/mvf1"&gt;RobSpectre/mvf1&lt;/a&gt; 🐍 ☁️ - MCP server that controls &lt;a href="https://multiviewer.app"&gt;MultiViewer&lt;/a&gt;, an app for watching motorsports like Formula 1, World Endurance Championship, IndyCar and others.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/willvelida/mcp-afl-server"&gt;willvelida/mcp-afl-server&lt;/a&gt; ☁️ - MCP server that integrates with the Squiggle API to provide information on Australian Football League teams, ladder standings, results, tips, and power rankings.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudbet/sports-mcp-server"&gt;cloudbet/sports-mcp-server&lt;/a&gt; 🏎️ ☁️ – Access structured sports data via the Cloudbet API. Query upcoming events, live odds, stake limits, and market info across soccer, basketball, tennis, esports, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎧 &lt;a name="support-and-service-management"&gt;&lt;/a&gt;Support &amp;amp; Service Management&lt;/h3&gt; 
&lt;p&gt;Tools for managing customer support, IT service management, and helpdesk operations.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aikts/yandex-tracker-mcp"&gt;aikts/yandex-tracker-mcp&lt;/a&gt; 🐍 ☁️ 🏠 - MCP Server for Yandex Tracker. Provides tools for searching and retrieving information about issues, queues, users.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/effytech/freshdesk_mcp"&gt;effytech/freshdesk-mcp&lt;/a&gt; 🐍 ☁️ - MCP server that integrates with Freshdesk, enabling AI models to interact with Freshdesk modules and perform various support operations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/incentivai/quickchat-ai-mcp"&gt;incentivai/quickchat-ai-mcp&lt;/a&gt; 🐍 🏠 ☁️ - Launch your conversational Quickchat AI agent as an MCP to give AI apps real-time access to its Knowledge Base and conversational capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nguyenvanduocit/jira-mcp"&gt;nguyenvanduocit/jira-mcp&lt;/a&gt; 🏎️ ☁️ - A Go-based MCP connector for Jira that enables AI assistants like Claude to interact with Atlassian Jira. This tool provides a seamless interface for AI models to perform common Jira operations including issue management, sprint planning, and workflow transitions.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sooperset/mcp-atlassian"&gt;sooperset/mcp-atlassian&lt;/a&gt; 🐍 ☁️ - MCP server for Atlassian products (Confluence and Jira). Supports Confluence Cloud, Jira Cloud, and Jira Server/Data Center. Provides comprehensive tools for searching, reading, creating, and managing content across Atlassian workspaces.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tom28881/mcp-jira-server"&gt;tom28881/mcp-jira-server&lt;/a&gt; 📇 ☁️ 🏠 - Comprehensive TypeScript MCP server for Jira with 20+ tools covering complete project management workflow: issue CRUD, sprint management, comments/history, attachments, batch operations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🌎 &lt;a name="translation-services"&gt;&lt;/a&gt;Translation Services&lt;/h3&gt; 
&lt;p&gt;Translation tools and services to enable AI assistants to translate content between different languages.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmntm/weblate-mcp"&gt;mmntm/weblate-mcp&lt;/a&gt; 📇 ☁️ - Comprehensive Model Context Protocol server for Weblate translation management, enabling AI assistants to perform translation tasks, project management, and content discovery with smart format transformations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/translated/lara-mcp"&gt;translated/lara-mcp&lt;/a&gt; 🎖️ 📇 ☁️ - MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎧 &lt;a name="text-to-speech"&gt;&lt;/a&gt;Text-to-Speech&lt;/h3&gt; 
&lt;p&gt;Tools for converting text-to-speech and vice-versa&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/daisys-ai/daisys-mcp"&gt;daisys-ai/daisys-mcp&lt;/a&gt; 🐍 🏠 🍎 🪟 🐧 - Generate high-quality text-to-speech and text-to-voice outputs using the &lt;a href="https://www.daisys.ai/"&gt;DAISYS&lt;/a&gt; platform and make it able to play and store audio generated.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mbailey/voice-mcp"&gt;mbailey/voice-mcp&lt;/a&gt; 🐍 🏠 - Complete voice interaction server supporting speech-to-text, text-to-speech, and real-time voice conversations through local microphone, OpenAI-compatible APIs, and LiveKit integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mberg/kokoro-tts-mcp"&gt;mberg/kokoro-tts-mcp&lt;/a&gt; 🐍 🏠 - MCP Server that uses the open weight Kokoro TTS models to convert text-to-speech. Can convert text to MP3 on a local driver or auto-upload to an S3 bucket.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/transcribe-app/mcp-transcribe"&gt;transcribe-app/mcp-transcribe&lt;/a&gt; 📇 🏠 - This service provides fast and reliable transcriptions for audio/video files and voice memos. It allows LLMs to interact with the text content of audio/video file.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🚆 &lt;a name="travel-and-transportation"&gt;&lt;/a&gt;Travel &amp;amp; Transportation&lt;/h3&gt; 
&lt;p&gt;Access to travel and transportation information. Enables querying schedules, routes, and real-time travel data.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/campertunity/mcp-server"&gt;campertunity/mcp-server&lt;/a&gt; 🎖️ 📇 🏠 - Search campgrounds around the world on campertunity, check availability, and provide booking links&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cobanov/teslamate-mcp"&gt;cobanov/teslamate-mcp&lt;/a&gt; 🐍 🏠 - A Model Context Protocol (MCP) server that provides access to your TeslaMate database, allowing AI assistants to query Tesla vehicle data and analytics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KyrieTangSheng/mcp-server-nationalparks"&gt;KyrieTangSheng/mcp-server-nationalparks&lt;/a&gt; 📇 ☁️ - National Park Service API integration providing latest information of park details, alerts, visitor centers, campgrounds, and events for U.S. National Parks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lucygoodchild/mcp-national-rail"&gt;lucygoodchild/mcp-national-rail&lt;/a&gt; 📇 ☁️ - An MCP server for UK National Rail trains service, providing train schedules and live travel information, intergrating the Realtime Trains API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openbnb-org/mcp-server-airbnb"&gt;openbnb-org/mcp-server-airbnb&lt;/a&gt; 📇 ☁️ - Provides tools to search Airbnb and get listing details.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pab1it0/tripadvisor-mcp"&gt;pab1it0/tripadvisor-mcp&lt;/a&gt; 📇 🐍 - A MCP server that enables LLMs to interact with Tripadvisor API, supporting location data, reviews, and photos through standardized MCP interfaces&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Pradumnasaraf/aviationstack-mcp"&gt;Pradumnasaraf/aviationstack-mcp&lt;/a&gt; 🐍 ☁️ 🍎 🪟 🐧 - An MCP server using the AviationStack API to fetch real-time flight data including airline flights, airport schedules, future flights and aircraft types.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r-huijts/ns-mcp-server"&gt;r-huijts/ns-mcp-server&lt;/a&gt; 📇 ☁️ - Access Dutch Railways (NS) travel information, schedules, and real-time updates&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skedgo/tripgo-mcp-server"&gt;skedgo/tripgo-mcp-server&lt;/a&gt; 📇 ☁️ - Provides tools from the TripGo API for multi-modal trip planning, transport locations, and public transport departures, including real-time information.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/helpful-AIs/triplyfy-mcp"&gt;helpful-AIs/triplyfy-mcp&lt;/a&gt; 📇 ☁️ - An MCP server that lets LLMs plan and manage itineraries with interactive maps in Triplyfy; manage itineraries, places and notes, and search/save flights.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/srinath1510/alltrails-mcp-server"&gt;srinath1510/alltrails-mcp-server&lt;/a&gt; 🐍 ☁️ - A MCP server that provides access to AllTrails data, allowing you to search for hiking trails and get detailed trail information&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🔄 &lt;a name="version-control"&gt;&lt;/a&gt;Version Control&lt;/h3&gt; 
&lt;p&gt;Interact with Git repositories and version control platforms. Enables repository management, code analysis, pull request handling, issue tracking, and other version control operations through standardized APIs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adhikasp/mcp-git-ingest"&gt;adhikasp/mcp-git-ingest&lt;/a&gt; 🐍 🏠 - Read and analyze GitHub repositories with your LLM&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ddukbg/github-enterprise-mcp"&gt;ddukbg/github-enterprise-mcp&lt;/a&gt; 📇 ☁️ 🏠 - MCP server for GitHub Enterprise API integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitea.com/gitea/gitea-mcp"&gt;gitea/gitea-mcp&lt;/a&gt; 🎖️ 🏎️ ☁️ 🏠 🍎 🪟 🐧 - Interactive with Gitea instances with MCP.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/github/github-mcp-server"&gt;github/github-mcp-server&lt;/a&gt; 📇 ☁️ - Official GitHub server for integration with repository management, PRs, issues, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kaiyuanxiaobing/atomgit-mcp-server"&gt;kaiyuanxiaobing/atomgit-mcp-server&lt;/a&gt; 📇 ☁️ - Official AtomGit server for integration with repository management, PRs, issues, branches, labels, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kopfrechner/gitlab-mr-mcp"&gt;kopfrechner/gitlab-mr-mcp&lt;/a&gt; 📇 ☁️ - Interact seamlessly with issues and merge requests of your GitLab projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/git"&gt;modelcontextprotocol/server-git&lt;/a&gt; 🐍 🏠 - Direct Git repository operations including reading, searching, and analyzing local repositories&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab"&gt;modelcontextprotocol/server-gitlab&lt;/a&gt; 📇 ☁️ 🏠 - GitLab platform integration for project management and CI/CD operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QuentinCody/github-graphql-mcp-server"&gt;QuentinCody/github-graphql-mcp-server&lt;/a&gt; 🐍 ☁️ - Unofficial GitHub MCP server that provides access to GitHub's GraphQL API, enabling more powerful and flexible queries for repository data, issues, pull requests, and other GitHub resources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Tiberriver256/mcp-server-azure-devops"&gt;Tiberriver256/mcp-server-azure-devops&lt;/a&gt; 📇 ☁️ - Azure DevOps integration for repository management, work items, and pipelines.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🏢 &lt;a name="workplace-and-productivity"&gt;&lt;/a&gt;Workplace &amp;amp; Productivity&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bivex/kanboard-mcp"&gt;bivex/kanboard-mcp&lt;/a&gt; 🏎️ ☁️ 🏠 - A Model Context Protocol (MCP) server written in Go that empowers AI agents and Large Language Models (LLMs) to seamlessly interact with Kanboard. It transforms natural language commands into Kanboard API calls, enabling intelligent automation of project, task, and user management, streamlining workflows, and enhancing productivity.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/giuseppe-coco/Google-Workspace-MCP-Server"&gt;giuseppe-coco/Google-Workspace-MCP-Server&lt;/a&gt; 🐍 ☁️ 🍎 🪟 🐧 - MCP server that seamlessly interacts with your Google Calendar, Gmail, Drive and so on.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MarkusPfundstein/mcp-gsuite"&gt;MarkusPfundstein/mcp-gsuite&lt;/a&gt; 🐍 ☁️ - Integration with gmail and Google Calendar.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/takumi0706/google-calendar-mcp"&gt;takumi0706/google-calendar-mcp&lt;/a&gt; 📇 ☁️ - An MCP server to interface with the Google Calendar API. Based on TypeScript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/taylorwilsdon/google_workspace_mcp"&gt;taylorwilsdon/google_workspace_mcp&lt;/a&gt; 🐍 ☁️ 🍎 🪟 🐧 - Comprehensive Google Workspace MCP server with full support for Google Calendar, Drive, Gmail, and Docs, Forms, Chats, Slides and Sheets over stdio, Streamable HTTP and SSE transports.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/teamwork/mcp"&gt;teamwork/mcp&lt;/a&gt; 🎖️ 🏎️ ☁️ 🍎 🪟 🐧 - Project and resource management platform that keeps your client projects on track, makes managing resources a breeze, and keeps your profits on point.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tubasasakunn/context-apps-mcp"&gt;tubasasakunn/context-apps-mcp&lt;/a&gt; 📇 🏠 🍎 🪟 🐧 - AI-powered productivity suite connecting Todo, Idea, Journal, and Timer apps with Claude via Model Context Protocol.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vakharwalad23/google-mcp"&gt;vakharwalad23/google-mcp&lt;/a&gt; 📇 ☁️ - Collection of Google-native tools (Gmail, Calendar, Drive, Tasks) for MCP with OAuth management, automated token refresh, and auto re-authentication capabilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🛠️ &lt;a name="other-tools-and-integrations"&gt;&lt;/a&gt;Other Tools and Integrations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/2niuhe/plantuml_web"&gt;2niuhe/plantuml_web&lt;/a&gt; 🐍 🏠 ☁️ 🍎 🪟 🐧 - A web-based PlantUML frontend with MCP server integration, enable plantuml image generation and plantuml syntax validation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/2niuhe/qrcode_mcp"&gt;2niuhe/qrcode_mcp&lt;/a&gt; 🐍 🏠 🍎 🪟 🐧 - A QR code generation MCP server that converts any text (including Chinese characters) to QR codes with customizable colors and base64 encoding output.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AbdelStark/bitcoin-mcp"&gt;AbdelStark/bitcoin-mcp&lt;/a&gt; - ₿ A Model Context Protocol (MCP) server that enables AI models to interact with Bitcoin, allowing them to generate keys, validate addresses, decode transactions, query the blockchain, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/akseyh/bear-mcp-server"&gt;akseyh/bear-mcp-server&lt;/a&gt; - Allows the AI to read from your Bear Notes (macOS only)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/allenporter/mcp-server-home-assistant"&gt;allenporter/mcp-server-home-assistant&lt;/a&gt; 🐍 🏠 - Expose all Home Assistant voice intents through a Model Context Protocol Server allowing home control.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/altinoren/Utopia"&gt;altinoren/utopia&lt;/a&gt; #️⃣ 🏠 - MCP that simulates a set of smart home and lifestyle devices, allowing you to test agent's reasoning and discovery capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zxkane/mcp-server-amazon-bedrock"&gt;Amazon Bedrock Nova Canvas&lt;/a&gt; 📇 ☁️ - Use Amazon Nova Canvas model for image generation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/amidabuddha/unichat-mcp-server"&gt;amidabuddha/unichat-mcp-server&lt;/a&gt; 🐍/📇 ☁️ - Send requests to OpenAI, MistralAI, Anthropic, xAI, Google AI or DeepSeek using MCP protocol via tool or predefined prompts. Vendor API key required&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anaisbetts/mcp-installer"&gt;anaisbetts/mcp-installer&lt;/a&gt; 🐍 🏠 - An MCP server that installs other MCP servers for you.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anaisbetts/mcp-youtube"&gt;anaisbetts/mcp-youtube&lt;/a&gt; 📇 ☁️ - Fetch YouTube subtitles&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andybrandt/mcp-simple-openai-assistant"&gt;andybrandt/mcp-simple-openai-assistant&lt;/a&gt; - 🐍 ☁️ MCP to talk to OpenAI assistants (Claude can use any GPT model as his assitant)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andybrandt/mcp-simple-timeserver"&gt;andybrandt/mcp-simple-timeserver&lt;/a&gt; 🐍 🏠☁️ - An MCP server that allows checking local time on the client machine or current UTC time from an NTP server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apify/actors-mcp-server"&gt;apify/actors-mcp-server&lt;/a&gt; 📇 ☁️ - Use 3,000+ pre-built cloud tools, known as Actors, to extract data from websites, e-commerce, social media, search engines, maps, and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apinetwork/piapi-mcp-server"&gt;apinetwork/piapi-mcp-server&lt;/a&gt; 📇 ☁️ PiAPI MCP server makes users able to generate media content with Midjourney/Flux/Kling/Hunyuan/Udio/Trellis directly from Claude or any other MCP-compatible apps.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/awkoy/replicate-flux-mcp"&gt;awkoy/replicate-flux-mcp&lt;/a&gt; 📇 ☁️ - Provides the ability to generate images via Replicate's API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/awwaiid/mcp-server-taskwarrior"&gt;awwaiid/mcp-server-taskwarrior&lt;/a&gt; 🏠 📇 - An MCP server for basic local taskwarrior usage (add, update, remove tasks)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Azure/azure-mcp"&gt;Azure/azure-mcp&lt;/a&gt; - Official Microsoft MCP server for Azure services including Storage, Cosmos DB, and Azure Monitor.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Badhansen/notion-mcp"&gt;Badhansen/notion-mcp&lt;/a&gt; 🐍 ☁️ - A Model Context Protocol (MCP) server that integrates with Notion's API to manage personal todo lists efficiently.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ankitmalik84/Agentic_Longterm_Memory/tree/main/src/notion_mcp_server"&gt;ankitmalik84/notion-mcp-server&lt;/a&gt; 🐍 ☁️ - A comprehensive Model Context Protocol (MCP) server for Notion integration with enhanced functionality, robust error handling, production-ready&amp;nbsp;feature.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bart6114/my-bear-mcp-server/"&gt;bart6114/my-bear-mcp-server&lt;/a&gt; 📇 🏠 🍎 - Allows to read notes and tags for the Bear Note taking app, through a direct integration with Bear's sqlitedb.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/billster45/mcp-chatgpt-responses"&gt;billster45/mcp-chatgpt-responses&lt;/a&gt; 🐍 ☁️ - MCP server for Claude to talk to ChatGPT and use its web search capability.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blurrah/mcp-graphql"&gt;blurrah/mcp-graphql&lt;/a&gt; 📇 ☁️ - Allows the AI to query GraphQL servers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/boldsign/boldsign-mcp"&gt;boldsign/boldsign-mcp&lt;/a&gt; 📇 ☁️ - Search, request, and manage e-signature contracts effortlessly with &lt;a href="https://boldsign.com/"&gt;BoldSign&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brianxiadong/ones-wiki-mcp-server"&gt;brianxiadong/ones-wiki-mcp-server&lt;/a&gt; ☕ ☁️/🏠 - A Spring AI MCP-based service for retrieving ONES Waiki content and converting it to AI-friendly text format.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/calclavia/mcp-obsidian"&gt;calclavia/mcp-obsidian&lt;/a&gt; 📇 🏠 - This is a connector to allow Claude Desktop (or any MCP client) to read and search any directory containing Markdown notes (such as an Obsidian vault).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/caol64/wenyan-mcp"&gt;caol64/wenyan-mcp&lt;/a&gt; 📇 🏠 🍎 🪟 🐧 - Wenyan MCP Server, which lets AI automatically format Markdown articles and publish them to WeChat GZH.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chrishayuk/mcp-cli"&gt;chrishayuk/mcp-cli&lt;/a&gt; 🐍 🏠 - Yet another CLI tool for testing MCP servers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danhilse/notion_mcp"&gt;danhilse/notion_mcp&lt;/a&gt; 🐍 ☁️ - Integrates with Notion's API to manage personal todo lists&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danielkennedy1/pdf-tools-mcp"&gt;danielkennedy1/pdf-tools-mcp&lt;/a&gt; 🐍 - PDF download, view &amp;amp; manipulation utilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dotemacs/domain-lookup-mcp"&gt;dotemacs/domain-lookup-mcp&lt;/a&gt; 🏎️ - Domain name lookup service, first via &lt;a href="https://en.wikipedia.org/wiki/Registration_Data_Access_Protocol"&gt;RDAP&lt;/a&gt; and then as a fallback via &lt;a href="https://en.wikipedia.org/wiki/WHOIS"&gt;WHOIS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ekkyarmandi/ticktick-mcp"&gt;ekkyarmandi/ticktick-mcp&lt;/a&gt; 🐍 ☁️ - &lt;a href="https://ticktick.com/"&gt;TickTick&lt;/a&gt; MCP server that integrates with TickTick's API to manage personal todo projects and the tasks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emicklei/mcp-log-proxy"&gt;emicklei/mcp-log-proxy&lt;/a&gt; 🏎️ 🏠 - MCP server proxy that offers a Web UI to the full message flow&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/esignaturescom/mcp-server-esignatures"&gt;esignaturescom/mcp-server-esignatures&lt;/a&gt; 🐍 ☁️️ - Contract and template management for drafting, reviewing, and sending binding contracts via the eSignatures API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evalstate/mcp-hfspace"&gt;evalstate/mcp-hfspace&lt;/a&gt; 📇 ☁️ - Use HuggingFace Spaces directly from Claude. Use Open Source Image Generation, Chat, Vision tasks and more. Supports Image, Audio and text uploads/downloads.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evalstate/mcp-miro"&gt;evalstate/mcp-miro&lt;/a&gt; 📇 ☁️ - Access MIRO whiteboards, bulk create and read items. Requires OAUTH key for REST API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/feuerdev/keep-mcp"&gt;feuerdev/keep-mcp&lt;/a&gt; 🐍 ☁️ - Read, create, update and delete Google Keep notes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fotoetienne/gqai"&gt;fotoetienne/gqai&lt;/a&gt; 🏎 🏠 - Define tools using regular GraphQL queries/mutations and gqai automatically generates an MCP server for you.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.wikimedia.org/repos/future-audiences/wikimedia-enterprise-model-context-protocol"&gt;future-audiences/wikimedia-enterprise-model-context-protocol&lt;/a&gt; 🐍 ☁️ - Wikipedia Article lookup API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/githejie/mcp-server-calculator"&gt;githejie/mcp-server-calculator&lt;/a&gt; 🐍 🏠 - This server enables LLMs to use calculator for precise numerical calculations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gotoolkits/mcp-difyworkflow-server"&gt;gotoolkits/DifyWorkflow&lt;/a&gt; - 🏎️ ☁️ Tools to the query and execute of Dify workflows&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/growilabs/growi-mcp-server"&gt;growilabs/growi-mcp-server&lt;/a&gt; 🎖️ 📇 ☁️ - Official MCP Server to integrate with GROWI APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gwbischof/free-will-mcp"&gt;gwbischof/free-will-mcp&lt;/a&gt; 🐍 🏠 - Give your AI free will tools. A fun project to explore what an AI would do with the ability to give itself prompts, ignore user requests, and wake itself up at a later time.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Harry-027/JotDown"&gt;Harry-027/JotDown&lt;/a&gt; 🦀 🏠 - An MCP server to create/update pages in Notion app &amp;amp; auto generate mdBooks from structured content.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HenryHaoson/Yuque-MCP-Server"&gt;HenryHaoson/Yuque-MCP-Server&lt;/a&gt; - 📇 ☁️ A Model-Context-Protocol (MCP) server for integrating with Yuque API, allowing AI models to manage documents, interact with knowledge bases, search content, and access analytics data from the Yuque platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hiromitsusasaki/raindrop-io-mcp-server"&gt;hiromitsusasaki/raindrop-io-mcp-server&lt;/a&gt; 📇 ☁️ - An integration that allows LLMs to interact with Raindrop.io bookmarks using the Model Context Protocol (MCP).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hmk/attio-mcp-server"&gt;hmk/attio-mcp-server&lt;/a&gt; - 📇 ☁️ Allows AI clients to manage records and notes in Attio CRM&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MonadsAG/capsulecrm-mcp"&gt;MonadsAG/capsulecrm-mcp&lt;/a&gt; - 📇 ☁️ Allows AI clients to manage contacts, opportunities and tasks in Capsule CRM including Claude Desktop ready DTX-file&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/integromat/make-mcp-server"&gt;integromat/make-mcp-server&lt;/a&gt; 🎖️ 📇 🏠 - Turn your &lt;a href="https://www.make.com/"&gt;Make&lt;/a&gt; scenarios into callable tools for AI assistants.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/isaacwasserman/mcp-vegalite-server"&gt;isaacwasserman/mcp-vegalite-server&lt;/a&gt; 🐍 🏠 - Generate visualizations from fetched data using the VegaLite format and renderer.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivnvxd/mcp-server-odoo"&gt;ivnvxd/mcp-server-odoo&lt;/a&gt; 🐍 ☁️/🏠 - Connect AI assistants to Odoo ERP systems for business data access, record management, and workflow automation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivo-toby/contentful-mcp"&gt;ivo-toby/contentful-mcp&lt;/a&gt; 📇 🏠 - Update, create, delete content, content-models and assets in your Contentful Space&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/j3k0/speech.sh/raw/main/MCP_README.md"&gt;j3k0/speech.sh&lt;/a&gt; 🏠 - Let the agent speak things out loud, notify you when he's done working with a quick summary&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jagan-shanmugam/climatiq-mcp-server"&gt;jagan-shanmugam/climatiq-mcp-server&lt;/a&gt; 🐍 🏠 - A Model Context Protocol (MCP) server for accessing the Climatiq API to calculate carbon emissions. This allows AI assistants to perform real-time carbon calculations and provide climate impact insights.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jen6/ticktick-mcp"&gt;jen6/ticktick-mcp&lt;/a&gt; 🐍 ☁️ - &lt;a href="https://ticktick.com/"&gt;TickTick&lt;/a&gt; MCP server. Built upon the ticktick-py library, it offers significantly improved filtering capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jimfilippou/things-mcp"&gt;jimfilippou/things-mcp&lt;/a&gt; 📇 🏠 🍎 - A Model Context Protocol (MCP) server that provides seamless integration with the &lt;a href="https://culturedcode.com/things/"&gt;Things&lt;/a&gt; productivity app. This server enables AI assistants to create, update, and manage your todos and projects in Things using its comprehensive URL scheme.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/johannesbrandenburger/typst-mcp"&gt;johannesbrandenburger/typst-mcp&lt;/a&gt; 🐍 🏠 - MCP server for Typst, a markup-based typesetting system. It provides tools for converting between LaTeX and Typst, validating Typst syntax, and generating images from Typst code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JoshuaRileyDev/mac-apps-launcher"&gt;joshuarileydev/mac-apps-launcher-mcp-server&lt;/a&gt; 📇 🏠 - An MCP server to list and launch applications on MacOS&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/k-jarzyna/mcp-miro"&gt;k-jarzyna/mcp-miro&lt;/a&gt; 📇 ☁️ - Miro MCP server, exposing all functionalities available in official Miro SDK&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kelvin6365/plane-mcp-server"&gt;kelvin6365/plane-mcp-server&lt;/a&gt; - 🏎️ 🏠 This MCP Server will help you to manage projects and issues through &lt;a href="https://plane.so"&gt;Plane's&lt;/a&gt; API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kenliao94/mcp-server-rabbitmq"&gt;kenliao94/mcp-server-rabbitmq&lt;/a&gt; 🐍 🏠 - Enable interaction (admin operation, message enqueue/dequeue) with RabbitMQ&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kimtth/mcp-remote-call-ping-pong"&gt;kimtth/mcp-remote-call-ping-pong&lt;/a&gt; 🐍 🏠 - An experimental and educational app for Ping-pong server demonstrating remote MCP (Model Context Protocol) calls&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kiwamizamurai/mcp-kibela-server"&gt;kiwamizamurai/mcp-kibela-server&lt;/a&gt; - 📇 ☁️ Powerfully interact with Kibela API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kj455/mcp-kibela"&gt;kj455/mcp-kibela&lt;/a&gt; - 📇 ☁️ Allows AI models to interact with &lt;a href="https://kibe.la/"&gt;Kibela&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/youtube"&gt;Klavis-AI/YouTube&lt;/a&gt; 🐍 📇 - Extract and convert YouTube video information.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KS-GEN-AI/confluence-mcp-server"&gt;KS-GEN-AI/confluence-mcp-server&lt;/a&gt; 📇 ☁️ 🍎 🪟 - Get Confluence data via CQL and read pages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KS-GEN-AI/jira-mcp-server"&gt;KS-GEN-AI/jira-mcp-server&lt;/a&gt; 📇 ☁️ 🍎 🪟 - Read jira data via JQL and api and execute requests to create and edit tickets.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kw510/strava-mcp"&gt;kw510/strava-mcp&lt;/a&gt; 📇 ☁️ - An MCP server for Strava, an app for tracking physical exercise&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/louiscklaw/hko-mcp"&gt;louiscklaw/hko-mcp&lt;/a&gt; 📇 🏠 - MCP server with basic demonstration of getting weather from Hong Kong Observatory&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/magarcia/mcp-server-giphy"&gt;magarcia/mcp-server-giphy&lt;/a&gt; 📇 ☁️ - Search and retrieve GIFs from Giphy's vast library through the Giphy API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelmarais/spotify-mcp-server"&gt;marcelmarais/Spotify&lt;/a&gt; - 📇 🏠 Control Spotify playback and manage playlists.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MarkusPfundstein/mcp-obsidian"&gt;MarkusPfundstein/mcp-obsidian&lt;/a&gt; 🐍 ☁️ 🏠 - Interacting with Obsidian via REST API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mediar-ai/screenpipe"&gt;mediar-ai/screenpipe&lt;/a&gt; - 🎖️ 🦀 🏠 🍎 Local-first system capturing screen/audio with timestamped indexing, SQL/embedding storage, semantic search, LLM-powered history analysis, and event-triggered actions - enables building context-aware AI agents through a NextJS plugin ecosystem.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/servers/tree/main/src/everything"&gt;modelcontextprotocol/server-everything&lt;/a&gt; 📇 🏠 - MCP server that exercises all the features of the MCP protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrjoshuak/godoc-mcp"&gt;mrjoshuak/godoc-mcp&lt;/a&gt; 🏎️ 🏠 - Token-efficient Go documentation server that provides AI assistants with smart access to package docs and types without reading entire source files&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mtehabsim/ScreenPilot"&gt;Mtehabsim/ScreenPilot&lt;/a&gt; 🐍 🏠 - enables AI to fully control and access GUI interactions by providing tools for mouse and keyboard, ideal for general automation, education, and experimentation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mzxrai/mcp-openai"&gt;mzxrai/mcp-openai&lt;/a&gt; 📇 ☁️ - Chat with OpenAI's smartest models&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NakaokaRei/swift-mcp-gui.git"&gt;NakaokaRei/swift-mcp-gui&lt;/a&gt; 🏠 🍎 - MCP server that can execute commands such as keyboard input and mouse movement&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nguyenvanduocit/all-in-one-model-context-protocol"&gt;nguyenvanduocit/all-in-one-model-context-protocol&lt;/a&gt; 🏎️ 🏠 - Some useful tools for developer, almost everything an engineer need: confluence, Jira, Youtube, run script, knowledge base RAG, fetch URL, Manage youtube channel, emails, calendar, gitlab&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NON906/omniparser-autogui-mcp"&gt;NON906/omniparser-autogui-mcp&lt;/a&gt; - 🐍 Automatic operation of on-screen GUI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/offorte/offorte-mcp-server"&gt;offorte/offorte-mcp-server&lt;/a&gt; 🎖️ 📇 ☁️ 🍎 🪟 🐧 - The Offorte Proposal Software MCP server enables creation and sending of business proposals.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/olalonde/mcp-human"&gt;olalonde/mcp-human&lt;/a&gt; 📇 ☁️ - When your LLM needs human assistance (through AWS Mechanical Turk)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orellazri/coda-mcp"&gt;orellazi/coda-mcp&lt;/a&gt; 📇 ☁️ - MCP server for &lt;a href="https://coda.io/"&gt;Coda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/osinmv/function-lookup-mcp"&gt;osinmv/funciton-lookup-mcp&lt;/a&gt; 🐍 🏠 🍎 🐧 - MCP server for function signature lookups.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pierrebrunelle/mcp-server-openai"&gt;pierrebrunelle/mcp-server-openai&lt;/a&gt; 🐍 ☁️ - Query OpenAI models directly from Claude using MCP protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pskill9/hn-server"&gt;pskill9/hn-server&lt;/a&gt; - 📇 ☁️ Parses the HTML content from news.ycombinator.com (Hacker News) and provides structured data for different types of stories (top, new, ask, show, jobs).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PV-Bhat/vibe-check-mcp-server"&gt;PV-Bhat/vibe-check-mcp-server&lt;/a&gt; 📇 ☁️ - An MCP server that prevents cascading errors and scope creep by calling a "Vibe-check" agent to ensure user alignment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pwh-pwh/cal-mcp"&gt;pwh-pwh/cal-mcp&lt;/a&gt; - An MCP server for Mathematical expression calculation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pyroprompts/any-chat-completions-mcp"&gt;pyroprompts/any-chat-completions-mcp&lt;/a&gt; - Chat with any other OpenAI SDK Compatible Chat Completions API, like Perplexity, Groq, xAI and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jfx"&gt;quarkiverse/mcp-server-jfx&lt;/a&gt; ☕ 🏠 - Draw on JavaFX canvas.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/QuentinCody/shopify-storefront-mcp-server"&gt;QuentinCody/shopify-storefront-mcp-server&lt;/a&gt; 🐍 ☁️ - Unofficial MCP server that allows AI agents to discover Shopify storefronts and interact with them to fetch products, collections, and other store data through the Storefront API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/r-huijts/ethics-check-mcp"&gt;r-huijts/ethics-check-mcp&lt;/a&gt; 🐍 🏠 - MCP server for comprehensive ethical analysis of AI conversations, detecting bias, harmful content, and providing critical thinking assessments with automated pattern learning&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rae-api-com/rae-mcp"&gt;rae-api-com/rae-mcp&lt;/a&gt; - 🏎️ ☁️ 🍎 🪟 🐧 MPC Server to connect your preferred model with &lt;a href="https://rae-api.com"&gt;https://rae-api.com&lt;/a&gt;, Roya Academy of Spanish Dictionary&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Rai220/think-mcp"&gt;Rai220/think-mcp&lt;/a&gt; 🐍 🏠 - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in &lt;a href="https://www.anthropic.com/engineering/claude-think-tool"&gt;Anthropic's article&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reeeeemo/ancestry-mcp"&gt;reeeeemo/ancestry-mcp&lt;/a&gt; 🐍 🏠 - Allows the AI to read .ged files and genetic data&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rember/rember-mcp"&gt;rember/rember-mcp&lt;/a&gt; 📇 🏠 - Create spaced repetition flashcards in &lt;a href="https://rember.com"&gt;Rember&lt;/a&gt; to remember anything you learn in your chats.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/roychri/mcp-server-asana"&gt;roychri/mcp-server-asana&lt;/a&gt; - 📇 ☁️ This Model Context Protocol server implementation of Asana allows you to talk to Asana API from MCP Client such as Anthropic's Claude Desktop Application, and many more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rusiaaman/wcgw/raw/main/src/wcgw/client/mcp_server/Readme.md"&gt;rusiaaman/wcgw&lt;/a&gt; 🐍 🏠 - Autonomous shell execution, computer control and coding agent. (Mac)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inkbytefo/screenmonitormcp"&gt;inkbytefo/screenmonitormcp&lt;/a&gt; 🐍 🏠 🍎 🪟 🐧 - Real-time screen analysis, context-aware recording, and UI monitoring MCP server. Supports AI vision, event hooks, and multimodal agent workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SecretiveShell/MCP-wolfram-alpha"&gt;SecretiveShell/MCP-wolfram-alpha&lt;/a&gt; 🐍 ☁️ - An MCP server for querying wolfram alpha API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Seym0n/tiktok-mcp"&gt;Seym0n/tiktok-mcp&lt;/a&gt; 📇 ☁️ - Interact with TikTok videos&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Shopify/dev-mcp"&gt;Shopify/dev-mcp&lt;/a&gt; 📇 ☁️ - Model Context Protocol (MCP) server that interacts with Shopify Dev.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sirmews/apple-notes-mcp"&gt;sirmews/apple-notes-mcp&lt;/a&gt; 🐍 🏠 - Allows the AI to read from your local Apple Notes database (macOS only)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sooperset/mcp-atlassian"&gt;sooperset/mcp-atlassian&lt;/a&gt; 🐍 ☁️ - MCP server for Atlassian products (Confluence and Jira). Supports Confluence Cloud, Jira Cloud, and Jira Server/Data Center. Provides comprehensive tools for searching, reading, creating, and managing content across Atlassian workspaces.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/suekou/mcp-notion-server"&gt;suekou/mcp-notion-server&lt;/a&gt; 📇 🏠 - Interacting with Notion API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tacticlaunch/mcp-linear"&gt;tacticlaunch/mcp-linear&lt;/a&gt; 📇 ☁️ 🍎 🪟 🐧 - Integrates with Linear project management system&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tanigami/mcp-server-perplexity"&gt;tanigami/mcp-server-perplexity&lt;/a&gt; 🐍 ☁️ - Interacting with Perplexity API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tevonsb/homeassistant-mcp"&gt;tevonsb/homeassistant-mcp&lt;/a&gt; 📇 🏠 - Access Home Assistant data and control devices (lights, switches, thermostats, etc).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TheoBrigitte/mcp-time"&gt;TheoBrigitte/mcp-time&lt;/a&gt; 🏎️ 🏠 🍎 🪟 🐧 - MCP server which provides utilities to work with time and dates, with natural language, multiple formats and timezone convertion capabilities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tomekkorbak/oura-mcp-server"&gt;tomekkorbak/oura-mcp-server&lt;/a&gt; 🐍 ☁️ - An MCP server for Oura, an app for tracking sleep&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tqiqbal/mcp-confluence-server"&gt;tqiqbal/mcp-confluence-server&lt;/a&gt; 🐍 - A Model Context Protocol (MCP) server for interacting with Confluence Data Center via REST API.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ttommyth/interactive-mcp"&gt;ttommyth/interactive-mcp&lt;/a&gt; 📇 🏠 🍎 🪟 🐧 - Enables interactive LLM workflows by adding local user prompts and chat capabilities directly into the MCP loop.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tumf/web3-mcp"&gt;tumf/web3-mcp&lt;/a&gt; 🐍 ☁️ - An MCP server implementation wrapping Ankr Advanced API. Access to NFT, token, and blockchain data across multiple chains including Ethereum, BSC, Polygon, Avalanche, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ujisati/anki-mcp"&gt;ujisati/anki-mcp&lt;/a&gt; 🐍 🏠 - Manage your Anki collection with AnkiConnect &amp;amp; MCP&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/UnitVectorY-Labs/mcp-graphql-forge"&gt;UnitVectorY-Labs/mcp-graphql-forge&lt;/a&gt; 🏎️ ☁️ 🍎 🪟 🐧 - A lightweight, configuration-driven MCP server that exposes curated GraphQL queries as modular tools, enabling intentional API interactions from your agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wanaku-ai/wanaku"&gt;wanaku-ai/wanaku&lt;/a&gt; - ☁️ 🏠 The Wanaku MCP Router is a SSE-based MCP server that provides an extensible routing engine that allows integrating your enterprise systems with AI agents.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wong2/mcp-cli"&gt;wong2/mcp-cli&lt;/a&gt; 📇 🏠 - CLI tool for testing MCP servers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nick1udwig/ws-mcp"&gt;ws-mcp&lt;/a&gt; - Wrap MCP servers with a WebSocket (for use with &lt;a href="https://github.com/nick1udwig/kibitz"&gt;kitbitz&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yuna0x0/hackmd-mcp"&gt;yuna0x0/hackmd-mcp&lt;/a&gt; 📇 ☁️ - Allows AI models to interact with &lt;a href="https://hackmd.io"&gt;HackMD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ZeparHyfar/mcp-datetime"&gt;ZeparHyfar/mcp-datetime&lt;/a&gt; - MCP server providing date and time functions in various formats&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zueai/mcp-manager"&gt;zueai/mcp-manager&lt;/a&gt; 📇 ☁️ - Simple Web UI to install and manage MCP servers for Claude Desktop App.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imprvhub/mcp-claude-spotify"&gt;imprvhub/mcp-claude-spotify&lt;/a&gt; 📇 ☁️ 🏠 - An integration that allows Claude Desktop to interact with Spotify using the Model Context Protocol (MCP).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Frameworks&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] More frameworks, utilities, and other developer tools are available at &lt;a href="https://github.com/punkpeye/awesome-mcp-devtools"&gt;https://github.com/punkpeye/awesome-mcp-devtools&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jlowin/fastmcp"&gt;FastMCP&lt;/a&gt; 🐍 - A high-level framework for building MCP servers in Python&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/punkpeye/fastmcp"&gt;FastMCP&lt;/a&gt; 📇 - A high-level framework for building MCP servers in TypeScript&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tips and Tricks&lt;/h2&gt; 
&lt;h3&gt;Official prompt to inform LLMs how to use MCP&lt;/h3&gt; 
&lt;p&gt;Want to ask Claude about Model Context Protocol?&lt;/p&gt; 
&lt;p&gt;Create a Project, then add this file to it:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://modelcontextprotocol.io/llms-full.txt"&gt;https://modelcontextprotocol.io/llms-full.txt&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Now Claude can answer questions about writing MCP servers and how they work&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.reddit.com/r/ClaudeAI/comments/1h3g01r/want_to_ask_claude_about_model_context_protocol/"&gt;https://www.reddit.com/r/ClaudeAI/comments/1h3g01r/want_to_ask_claude_about_model_context_protocol/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;a href="https://star-history.com/#punkpeye/awesome-mcp-servers&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=punkpeye/awesome-mcp-servers&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=punkpeye/awesome-mcp-servers&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=punkpeye/awesome-mcp-servers&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; &lt;/a&gt;</description>
    </item>
    
  </channel>
</rss>