<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Thu, 02 Oct 2025 01:37:36 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>glzr-io/glazewm</title>
      <link>https://github.com/glzr-io/glazewm</link>
      <description>&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3wm.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;V3 is finally out - check out the changelog &lt;a href="https://github.com/glzr-io/GlazeWM/releases"&gt;here&lt;/a&gt; 🔥&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;br /&gt; 
 &lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/logo.svg?sanitize=true" width="230" alt="GlazeWM logo" /&gt; 
 &lt;br /&gt; 
 &lt;h1&gt;GlazeWM&lt;/h1&gt; 
 &lt;p&gt;&lt;strong&gt;A tiling window manager for Windows inspired by i3wm.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/ud6z3qjRvM"&gt;&lt;img src="https://img.shields.io/discord/1041662798196908052.svg?logo=discord&amp;amp;colorB=7289DA" alt="Discord invite" /&gt;&lt;/a&gt; &lt;a href="https://github.com/glzr-io/glazewm/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/glzr-io/glazewm/total?logo=github&amp;amp;logoColor=white" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/orgs/glzr-io/projects/4/views/1?sliceBy%5Bvalue%5D=good+first+issue"&gt;&lt;img src="https://img.shields.io/badge/good_first_issues-7057ff" alt="Good first issues" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;GlazeWM lets you easily organize windows and adjust their layout on the fly by using keyboard-driven commands.&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#installation"&gt;Installation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#default-keybindings"&gt;Default keybindings&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#config-documentation"&gt;Config documentation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#faq"&gt;FAQ&lt;/a&gt; • &lt;a href="https://github.com/glzr-io/glazewm/raw/main/CONTRIBUTING.md"&gt;Contributing ↗&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/demo.webp" alt="Demo video" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;🌟 Key features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple YAML configuration&lt;/li&gt; 
 &lt;li&gt;Multi-monitor support&lt;/li&gt; 
 &lt;li&gt;Customizable rules for specific windows&lt;/li&gt; 
 &lt;li&gt;Easy one-click installation&lt;/li&gt; 
 &lt;li&gt;Integration with &lt;a href="https://github.com/glzr-io/zebar"&gt;Zebar&lt;/a&gt; as a status bar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;The latest version of GlazeWM is downloadable via &lt;a href="https://github.com/glzr-io/GlazeWM/releases"&gt;releases&lt;/a&gt;.&lt;/strong&gt; Zebar can optionally be installed as well via a checkbox during installation.&lt;/p&gt; 
&lt;p&gt;GlazeWM is also available through several package managers:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Winget&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;winget install GlazeWM
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Chocolatey&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install glazewm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Scoop&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;scoop bucket add extras
scoop install extras/glazewm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Help fix something that annoys you, or add a feature you've been wanting for a long time! Contributions are very welcome.&lt;/p&gt; 
&lt;p&gt;Local development and guidelines are available in the &lt;a href="https://github.com/glzr-io/glazewm/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Default keybindings&lt;/h2&gt; 
&lt;p&gt;On the first launch of GlazeWM, a default configuration can optionally be generated.&lt;/p&gt; 
&lt;p&gt;Below is a cheat sheet of all available commands and their default keybindings.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/cheatsheet.png" alt="Infographic" /&gt;&lt;/p&gt; 
&lt;h2&gt;Config documentation&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/glzr-io/glazewm/raw/main/resources/assets/sample-config.yaml"&gt;default config&lt;/a&gt; file is generated at &lt;code&gt;%userprofile%\.glzr\glazewm\config.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To use a different config file location, you can launch the GlazeWM executable with the CLI argument &lt;code&gt;--config="..."&lt;/code&gt;, like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./glazewm.exe start --config="C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or pass a value for the &lt;code&gt;GLAZEWM_CONFIG_PATH&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;setx GLAZEWM_CONFIG_PATH "C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the benefit of using a custom path being that you can choose a different name for the config file, such as &lt;code&gt;glazewm.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Config: General&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;general:
  # Commands to run when the WM has started (e.g. to run a script or launch
  # another application).
  startup_commands: []

  # Commands to run just before the WM is shutdown.
  shutdown_commands: []

  # Commands to run after the WM config has reloaded.
  config_reload_commands: []

  # Whether to automatically focus windows underneath the cursor.
  focus_follows_cursor: false

  # Whether to switch back and forth between the previously focused
  # workspace when focusing the current workspace.
  toggle_workspace_on_refocus: false

  cursor_jump:
    # Whether to automatically move the cursor on the specified trigger.
    enabled: true

    # Trigger for cursor jump:
    # - 'monitor_focus': Jump when focus changes between monitors.
    # - 'window_focus': Jump when focus changes between windows.
    trigger: "monitor_focus"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Keybindings&lt;/h3&gt; 
&lt;p&gt;The available keyboard shortcuts can be customized via the &lt;code&gt;keybindings&lt;/code&gt; option. A keybinding consists of one or more key combinations and one or more commands to run when pressed.&lt;/p&gt; 
&lt;p&gt;It's recommended to use the alt key for keybindings. The Windows key is unfortunately a pain to remap, since the OS reserves certain keybindings (e.g. &lt;code&gt;lwin+l&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;keybindings:
  # Command(s) to run.
  - commands: ["focus --workspace 1"]

    # Key combination(s) to trigger the keybinding.
    bindings: ["alt+1"]

  # Multiple commands can be run in a sequence (e.g. to move a window to a
  # workspace + focus workspace).
  - commands: ["move --workspace 1", "focus --workspace 1"]
    bindings: ["alt+shift+1"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Full list of keys that can be used for keybindings:&lt;/strong&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Keys list&lt;/summary&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Key&lt;/th&gt; 
    &lt;th&gt;Description&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;a&lt;/code&gt; - &lt;code&gt;z&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Alphabetical letter keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;0&lt;/code&gt; - &lt;code&gt;9&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Number keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;numpad0&lt;/code&gt; - &lt;code&gt;numpad9&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Numerical keypad keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;f1&lt;/code&gt; - &lt;code&gt;f24&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Function keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lshift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rshift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;control&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lctrl&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rctrl&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lalt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;ralt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lwin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left ⊞ Windows logo key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rwin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right ⊞ Windows logo key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;space&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The spacebar key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ESCAPE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;back&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The BACKSPACE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The TAB key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ENTER key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;left&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ← arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;right&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The → arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ↑ arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ↓ arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;num_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The NUM LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;scroll_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The SCROLL LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;caps_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The CAPS LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;page_up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PAGE UP key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;page_down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PAGE DOWN key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The INSERT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The DELETE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The END key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;home&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The HOME key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;print_screen&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PRINT SCREEN key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;multiply&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;*&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;+&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;subtract&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;-&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The DEL key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;divide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;/&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume up key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume down key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_mute&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume mute key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_next_track&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media next track key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_prev_track&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media prev track key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_stop&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media stop key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_play_pause&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media play/pause key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_semicolon&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;;&lt;/code&gt;/&lt;code&gt;:&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_question&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;/&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_tilde&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;`&lt;/code&gt;/&lt;code&gt;~&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_open_brackets&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;[&lt;/code&gt;/&lt;code&gt;{&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_pipe&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;\&lt;/code&gt;/&lt;code&gt;|&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_close_brackets&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;]&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_quotes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;'&lt;/code&gt;/&lt;code&gt;"&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_plus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;=&lt;/code&gt;/&lt;code&gt;+&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_comma&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;,&lt;/code&gt;/&lt;code&gt;&amp;lt;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_minus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;-&lt;/code&gt;/&lt;code&gt;_&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_period&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;.&lt;/code&gt;/&lt;code&gt;&amp;gt;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;p&gt;If a key is not in the list above, it is likely still supported if you use its character in a keybinding (e.g. &lt;code&gt;alt+å&lt;/code&gt; for the Norwegian Å character).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;German and US international keyboards treat the right-side alt key differently. For these keyboard layouts, use &lt;code&gt;ralt+ctrl&lt;/code&gt; instead of &lt;code&gt;ralt&lt;/code&gt; to bind the right-side alt key.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Config: Gaps&lt;/h3&gt; 
&lt;p&gt;The gaps between windows can be changed via the &lt;code&gt;gaps&lt;/code&gt; property in the config file. Inner and outer gaps are set separately.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;gaps:
  # Gap between adjacent windows.
  inner_gap: "20px"

  # Gap between windows and the screen edge.
  outer_gap:
    top: "20px"
    right: "20px"
    bottom: "20px"
    left: "20px"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Workspaces&lt;/h3&gt; 
&lt;p&gt;Workspaces need to be predefined via the &lt;code&gt;workspaces&lt;/code&gt; property in the config file. A workspace is automatically assigned to each monitor on startup.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;workspaces:
  # This is the unique ID for the workspace. It's used in keybinding
  # commands, and is also the label shown in 3rd-party apps (e.g. Zebar) if
  # `display_name` is not provided.
  - name: "1"

    # Optional override for the workspace label used in 3rd-party apps.
    # Does not need to be unique.
    display_name: "Work"

    # Optionally force the workspace on a specific monitor if it exists.
    # 0 is your leftmost screen, 1 is the next one to the right, and so on.
    bind_to_monitor: 0

    # Optionally prevent workspace from being deactivated when empty.
    keep_alive: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window rules&lt;/h3&gt; 
&lt;p&gt;Commands can be run when a window is first launched. This is useful for adding window-specific behaviors like always starting a window as fullscreen or assigning to a specific workspace.&lt;/p&gt; 
&lt;p&gt;Windows can be targeted by their process, class, and title. Multiple matching criteria can be used together to target a window more precisely.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_rules:
  - commands: ["move --workspace 1"]
    match:
      # Move browsers to workspace 1.
      - window_process: { regex: "msedge|brave|chrome" }

  - commands: ["ignore"]
    match:
      # Ignores any Zebar windows.
      - window_process: { equals: "zebar" }

      # Ignores picture-in-picture windows for browsers.
      # Note that *both* the title and class must match for the rule to run.
      - window_title: { regex: "[Pp]icture.in.[Pp]icture" }
        window_class: { regex: "Chrome_WidgetWin_1|MozillaDialogClass" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window effects&lt;/h3&gt; 
&lt;p&gt;Visual effects can be applied to windows via the &lt;code&gt;window_effects&lt;/code&gt; option. Currently, colored borders are the only effect available with more to come in the future.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Window effects are exclusive to Windows 11.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_effects:
  # Visual effects to apply to the focused window.
  focused_window:
    # Highlight the window with a colored border.
    border:
      enabled: true
      color: "#0000ff"

  # Visual effects to apply to non-focused windows.
  other_windows:
    border:
      enabled: false
      color: "#d3d3d3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window behavior&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;window_behavior&lt;/code&gt; config option exists to customize the states that a window can be in (&lt;code&gt;tiling&lt;/code&gt;, &lt;code&gt;floating&lt;/code&gt;, &lt;code&gt;minimized&lt;/code&gt;, and &lt;code&gt;fullscreen&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_behavior:
  # New windows are created in this state whenever possible.
  # Allowed values: 'tiling', 'floating'.
  initial_state: "tiling"

  # Sets the default options for when a new window is created. This also
  # changes the defaults for when the state change commands, like
  # `set-floating`, are used without any flags.
  state_defaults:
    floating:
      # Whether to center floating windows by default.
      centered: true

      # Whether to show floating windows as always on top.
      shown_on_top: false

    fullscreen:
      # Maximize the window if possible. If the window doesn't have a
      # maximize button, then it'll be made fullscreen normally instead.
      maximized: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Binding modes&lt;/h3&gt; 
&lt;p&gt;Binding modes are used to modify keybindings while GlazeWM is running.&lt;/p&gt; 
&lt;p&gt;A binding mode can be enabled with &lt;code&gt;wm-enable-binding-mode --name &amp;lt;NAME&amp;gt;&lt;/code&gt; and disabled with &lt;code&gt;wm-disable-binding-mode --name &amp;lt;NAME&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;binding_modes:
  # When enabled, the focused window can be resized via arrow keys or HJKL.
  - name: "resize"
    keybindings:
      - commands: ["resize --width -2%"]
        bindings: ["h", "left"]
      - commands: ["resize --width +2%"]
        bindings: ["l", "right"]
      - commands: ["resize --height +2%"]
        bindings: ["k", "up"]
      - commands: ["resize --height -2%"]
        bindings: ["j", "down"]
      # Press enter/escape to return to default keybindings.
      - commands: ["wm-disable-binding-mode --name resize"]
        bindings: ["escape", "enter"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Q: How do I run GlazeWM on startup?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Create a shortcut for the executable by right-clicking on the GlazeWM executable -&amp;gt; &lt;code&gt;Create shortcut&lt;/code&gt;. Put the shortcut in your startup folder, which you can get to by entering &lt;code&gt;shell:startup&lt;/code&gt; in the top bar in File Explorer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How can I create &lt;code&gt;&amp;lt;insert layout&amp;gt;&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can create custom layouts by changing the tiling direction with &lt;code&gt;alt+v&lt;/code&gt;. This changes where the next window is placed &lt;em&gt;in relation to the current window&lt;/em&gt;. If the current window's direction is horizontal, the new window will be placed to the right of it. If it is vertical, it will be placed below it. This also applies when moving windows; the tiling direction of the stationary window will affect where the moved window will be placed.&lt;/p&gt; 
&lt;p&gt;Community-made scripts like &lt;a href="https://github.com/Dutch-Raptor/GAT-GWM"&gt;Dutch-Raptor/GAT-GWM&lt;/a&gt; and &lt;a href="https://github.com/burgr033/GlazeWM-autotiling-python"&gt;burgr033/GlazeWM-autotiling-python&lt;/a&gt; can be used to automatically change the tiling direction. Native support for automatic layouts isn't &lt;em&gt;currently&lt;/em&gt; supported.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How do I create a rule for &lt;code&gt;&amp;lt;insert application&amp;gt;&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To match a specific application, you need a command to execute and either the window's process name, title, or class name. For example, if you use Flow-Launcher and want to make the settings window float, you can do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_rules:
  - commands: ["set-floating"]
    match:
      - window_process: { equals: "Flow.Launcher" }
        window_title: { equals: "Settings" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Programs like Winlister or AutoHotkey's Window Spy can be useful for getting info about a window.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How can I ignore GlazeWM's keybindings when &lt;code&gt;&amp;lt;insert application&amp;gt;&lt;/code&gt; is focused?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This isn't currently supported, however, the keybinding &lt;code&gt;alt+shift+p&lt;/code&gt; in the default config is used to disable all other keybindings until &lt;code&gt;alt+shift+p&lt;/code&gt; is pressed again.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>astral-sh/uv</title>
      <link>https://github.com/astral-sh/uv</link>
      <description>&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json" alt="uv" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/v/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/l/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/uv"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/uv.svg?sanitize=true" alt="image" /&gt;&lt;/a&gt; &lt;a href="https://github.com/astral-sh/uv/actions"&gt;&lt;img src="https://github.com/astral-sh/uv/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Actions status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/astral-sh"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;picture align="center"&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d" /&gt; 
  &lt;img alt="Shows a bar chart with benchmark results." src="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;Installing &lt;a href="https://trio.readthedocs.io/"&gt;Trio&lt;/a&gt;'s dependencies with a warm cache.&lt;/i&gt; &lt;/p&gt; 
&lt;h2&gt;Highlights&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 A single tool to replace &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, &lt;code&gt;pipx&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;twine&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and more.&lt;/li&gt; 
 &lt;li&gt;⚡️ &lt;a href="https://github.com/astral-sh/uv/raw/main/BENCHMARKS.md"&gt;10-100x faster&lt;/a&gt; than &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🗂️ Provides &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#projects"&gt;comprehensive project management&lt;/a&gt;, with a &lt;a href="https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile"&gt;universal lockfile&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;❇️ &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#scripts"&gt;Runs scripts&lt;/a&gt;, with support for &lt;a href="https://docs.astral.sh/uv/guides/scripts#declaring-script-dependencies"&gt;inline dependency metadata&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;🐍 &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#python-versions"&gt;Installs and manages&lt;/a&gt; Python versions.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#tools"&gt;Runs and installs&lt;/a&gt; tools published as Python packages.&lt;/li&gt; 
 &lt;li&gt;🔩 Includes a &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/#the-pip-interface"&gt;pip-compatible interface&lt;/a&gt; for a performance boost with a familiar CLI.&lt;/li&gt; 
 &lt;li&gt;🏢 Supports Cargo-style &lt;a href="https://docs.astral.sh/uv/concepts/projects/workspaces"&gt;workspaces&lt;/a&gt; for scalable projects.&lt;/li&gt; 
 &lt;li&gt;💾 Disk-space efficient, with a &lt;a href="https://docs.astral.sh/uv/concepts/cache"&gt;global cache&lt;/a&gt; for dependency deduplication.&lt;/li&gt; 
 &lt;li&gt;⏬ Installable without Rust or Python via &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;🖥️ Supports macOS, Linux, and Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uv is backed by &lt;a href="https://astral.sh"&gt;Astral&lt;/a&gt;, the creators of &lt;a href="https://github.com/astral-sh/ruff"&gt;Ruff&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install uv with our standalone installers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On macOS and Linux.
curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On Windows.
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, from &lt;a href="https://pypi.org/project/uv/"&gt;PyPI&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With pip.
pip install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Or pipx.
pipx install uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If installed via the standalone installer, uv can update itself to the latest version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv self update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/getting-started/installation/"&gt;installation documentation&lt;/a&gt; for details and alternative installation methods.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;uv's documentation is available at &lt;a href="https://docs.astral.sh/uv"&gt;docs.astral.sh/uv&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, the command line reference documentation can be viewed with &lt;code&gt;uv help&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Projects&lt;/h3&gt; 
&lt;p&gt;uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to &lt;code&gt;rye&lt;/code&gt; or &lt;code&gt;poetry&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/projects/"&gt;project documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;uv also supports building and publishing projects, even if they're not managed with uv. See the &lt;a href="https://docs.astral.sh/uv/guides/publish/"&gt;publish guide&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h3&gt;Scripts&lt;/h3&gt; 
&lt;p&gt;uv manages dependencies and environments for single-file scripts.&lt;/p&gt; 
&lt;p&gt;Create a new script and add inline metadata declaring its dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ echo 'import requests; print(requests.get("https://astral.sh"))' &amp;gt; example.py

$ uv add --script example.py requests
Updated `example.py`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, run the script in an isolated virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv run example.py
Reading inline script metadata from: example.py
Installed 5 packages in 12ms
&amp;lt;Response [200]&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/scripts/"&gt;scripts documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;uv executes and installs command-line tools provided by Python packages, similar to &lt;code&gt;pipx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Run a tool in an ephemeral environment using &lt;code&gt;uvx&lt;/code&gt; (an alias for &lt;code&gt;uv tool run&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uvx pycowsay 'hello world!'
Resolved 1 package in 167ms
Installed 1 package in 9ms
 + pycowsay==0.0.0.2
  """

  ------------
&amp;lt; hello world! &amp;gt;
  ------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install a tool with &lt;code&gt;uv tool install&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv tool install ruff
Resolved 1 package in 6ms
Installed 1 package in 2ms
 + ruff==0.5.0
Installed 1 executable: ruff

$ ruff --version
ruff 0.5.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/tools/"&gt;tools documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Python versions&lt;/h3&gt; 
&lt;p&gt;uv installs Python and allows quickly switching between versions.&lt;/p&gt; 
&lt;p&gt;Install multiple Python versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv python install 3.10 3.11 3.12
Searching for Python versions matching: Python 3.10
Searching for Python versions matching: Python 3.11
Searching for Python versions matching: Python 3.12
Installed 3 versions in 3.42s
 + cpython-3.10.14-macos-aarch64-none
 + cpython-3.11.9-macos-aarch64-none
 + cpython-3.12.4-macos-aarch64-none
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Download Python versions as needed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv venv --python 3.12.0
Using Python 3.12.0
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate

$ uv run --python pypy@3.8 -- python --version
Python 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)
[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use a specific Python version in the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv python pin 3.11
Pinned `.python-version` to `3.11`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/guides/install-python/"&gt;Python installation documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;The pip interface&lt;/h3&gt; 
&lt;p&gt;uv provides a drop-in replacement for common &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more.&lt;/p&gt; 
&lt;p&gt;Migrate to uv without changing your existing workflows — and experience a 10-100x speedup — with the &lt;code&gt;uv pip&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;Compile requirements into a platform-independent requirements file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv pip compile docs/requirements.in \
   --universal \
   --output-file docs/requirements.txt
Resolved 43 packages in 12ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a virtual environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv venv
Using Python 3.12.3
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install the locked requirements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ uv pip sync docs/requirements.txt
Resolved 43 packages in 11ms
Installed 43 packages in 208ms
 + babel==2.15.0
 + black==24.4.2
 + certifi==2024.7.4
 ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.astral.sh/uv/pip/index/"&gt;pip interface documentation&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Platform support&lt;/h2&gt; 
&lt;p&gt;See uv's &lt;a href="https://docs.astral.sh/uv/reference/platforms/"&gt;platform support&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Versioning policy&lt;/h2&gt; 
&lt;p&gt;See uv's &lt;a href="https://docs.astral.sh/uv/reference/versioning/"&gt;versioning policy&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the &lt;a href="https://github.com/astral-sh/uv/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h4&gt;How do you pronounce uv?&lt;/h4&gt; 
&lt;p&gt;It's pronounced as "you - vee" (&lt;a href="https://en.wikipedia.org/wiki/Help:IPA/English#Key"&gt;&lt;code&gt;/juː viː/&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; 
&lt;h4&gt;How should I stylize uv?&lt;/h4&gt; 
&lt;p&gt;Just "uv", please. See the &lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/STYLE.md#styling-uv"&gt;style guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;uv's dependency resolver uses &lt;a href="https://github.com/pubgrub-rs/pubgrub"&gt;PubGrub&lt;/a&gt; under the hood. We're grateful to the PubGrub maintainers, especially &lt;a href="https://github.com/Eh2406"&gt;Jacob Finkelman&lt;/a&gt;, for their support.&lt;/p&gt; 
&lt;p&gt;uv's Git implementation is based on &lt;a href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some of uv's optimizations are inspired by the great work we've seen in &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt;, &lt;a href="https://github.com/orogene/orogene"&gt;Orogene&lt;/a&gt;, and &lt;a href="https://github.com/oven-sh/bun"&gt;Bun&lt;/a&gt;. We've also learned a lot from Nathaniel J. Smith's &lt;a href="https://github.com/njsmith/posy"&gt;Posy&lt;/a&gt; and adapted its &lt;a href="https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline"&gt;trampoline&lt;/a&gt; for Windows support.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uv is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="https://opensource.org/licenses/MIT"&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a target="_blank" href="https://astral.sh" style="background:none"&gt; &lt;img src="https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg?sanitize=true" alt="Made by Astral" /&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>zama-ai/fhevm</title>
      <link>https://github.com/zama-ai/fhevm</link>
      <description>&lt;p&gt;FHEVM, a full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/fhevm-header-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/fhevm-header-light.png" /&gt; 
  &lt;img width="500" alt="fhevm" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt; 📃 Read white paper&lt;/a&gt; |&lt;a href="https://docs.zama.ai/protocol"&gt; 📒 Documentation&lt;/a&gt; | &lt;a href="https://zama.ai/community"&gt; 💛 Community support&lt;/a&gt; | &lt;a href="https://github.com/zama-ai/awesome-zama"&gt; 📚 FHE resources by Zama&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/zama-ai/fhevm/releases"&gt; &lt;img src="https://img.shields.io/github/v/release/zama-ai/fhevm?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/fhevm/raw/main/LICENSE"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/License-BSD--3--Clause--Clear-%23ffb243?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/bounty-program"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/Contribute-Zama%20Bounty%20Program-%23ffd208?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://slsa.dev"&gt;&lt;img alt="SLSA 3" src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;h3&gt;What is FHEVM?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;FHEVM&lt;/strong&gt; is the core framework of the &lt;em&gt;Zama Confidential Blockchain Protocol&lt;/em&gt;. It enables confidential smart contracts on EVM-compatible blockchains by leveraging Fully Homomorphic Encryption (FHE), allowing encrypted data to be processed directly onchain.&lt;/p&gt; 
&lt;p&gt;FHEVM ensures both confidentiality and composability, with the following guarantees:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;End-to-end encryption of transactions and state:&lt;/strong&gt; Data included in transactions is encrypted and never visible to anyone.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Composability and data availability on-chain:&lt;/strong&gt; States are updated while remaining encrypted at all times.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No impact on existing dApps and state:&lt;/strong&gt; Encrypted state co-exists alongside public one, and doesn't impact existing dApps. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Table of contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt;About&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#what-is-fhevm"&gt;What is FHEVM?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#project-structure"&gt;Project structure&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#main-features"&gt;Main features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#use-cases"&gt;Use cases&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#working-with-fhevm"&gt;Working with FHEVM&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#citations"&gt;Citations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#support"&gt;Support&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Project structure&lt;/h3&gt; 
&lt;p&gt;The directories of this repository are organized in the following way:&lt;/p&gt; 
&lt;h6&gt;FHEVM Contracts&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gateway-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart contracts managing the gateway between on-chain and off-chain components.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;host-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart Contracts deployed on the host chain for orchestrating FHE workflows.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Compute Engines&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;coprocessor/&lt;/code&gt;&lt;/strong&gt;: Rust-based coprocessor implementation for FHE operations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;kms-connector/&lt;/code&gt;&lt;/strong&gt;: Interface for integrating with Key Management Services (KMS) to handle encryption keys securely.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Utilities&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;charts/&lt;/code&gt;&lt;/strong&gt;: Helm charts and deployment configurations for the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;golden-container-images/&lt;/code&gt;&lt;/strong&gt;: Docker golden images for Node.js and Rust environments used as base images by the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;test-suite/&lt;/code&gt;&lt;/strong&gt;: Integration with docker-compose and tests covering end-to-end FHEVM stack behavior.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Main features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Privacy by design:&lt;/strong&gt; Building decentralized apps with full privacy and confidentiality on Ethereum, leveraging FHE.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Solidity integration:&lt;/strong&gt; Write FHEVM contracts like any standard Solidity contract using Solidity. Compatible with existing toolchains — such as Hardhat and Foundry (&lt;em&gt;coming soon&lt;/em&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Programmable privacy:&lt;/strong&gt; Define exactly what data is encrypted and write the access control logic directly in your smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High precision encrypted integers :&lt;/strong&gt; Up to 256 bits of precision for integers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full range of operators:&lt;/strong&gt; All typical operators are available: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, ternary-if, boolean operations…. Consecutive FHE operations are not limited.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; The underlying FHE crypto-scheme of FHEVM is quantum-resistant. Decryption is managed via a key management system (KMS) using multi-party computation (MPC), ensuring security even if some parties are compromised or misbehaving.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Symbolic execution of FHE computations:&lt;/strong&gt; All FHE operations are executed symbolically on the host chain, significantly reducing execution time. The actual computations on encrypted data are offloaded asynchronously to our coprocessor, allowing for faster, efficient, and scalable processing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more about FHEVM features in the &lt;a href="https://docs.zama.ai/protocol"&gt;documentation&lt;/a&gt; and in our &lt;a href="https://github.com/zama-ai/fhevm/raw/main/fhevm-whitepaper.pdf"&gt;whitepaper&lt;/a&gt;.&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;Use cases&lt;/h3&gt; 
&lt;p&gt;FHEVM is built for developers to write confidential smart contracts without the need to learn cryptography. Leveraging FHEVM, you can unlock a myriad of new use cases such as DeFi, gaming, and more. For instance:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential transfers&lt;/strong&gt;: Keep balances and amounts private, without using mixers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tokenization&lt;/strong&gt;: Swap tokens and RWAs on-chain without others seeing the amounts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blind auctions&lt;/strong&gt;: Bid on items without revealing the amount or the winner.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;On-chain games&lt;/strong&gt;: Keep moves, selections, cards, or items hidden until ready to reveal.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential voting&lt;/strong&gt;: Prevents bribery and blackmailing by keeping votes private.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Encrypted DIDs&lt;/strong&gt;: Store identities on-chain and generate attestations without ZK.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more use cases in the &lt;a href="https://docs.zama.ai/protocol/examples"&gt;list of examples&lt;/a&gt;.&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol"&gt;Documentation&lt;/a&gt; — Official documentation of FHEVM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt;Whitepaper&lt;/a&gt; — Technical overview of FHEVM's cryptographic design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol/examples"&gt;Examples&lt;/a&gt; — Examples of building confidential smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/awesome-zama?tab=readme-ov-file#fhevm"&gt;Awesome Zama – FHEVM&lt;/a&gt; — Curated articles, talks, and ecosystem projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Working with FHEVM&lt;/h2&gt; 
&lt;h3&gt;Citations&lt;/h3&gt; 
&lt;p&gt;To cite FHEVM or the whitepaper in academic papers, please use the following entries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;@Misc{FHEVM,
title={{FHEVM: A full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications},
author={Zama},
year={2025},
note={\url{https://github.com/zama-ai/fhevm}},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;There are two ways to contribute to FHEVM:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/fhevm/issues/new/choose"&gt;Open issues&lt;/a&gt; to report bugs and typos, or to suggest new ideas&lt;/li&gt; 
 &lt;li&gt;Request to become an official contributor by emailing &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Becoming an approved contributor involves signing our Contributor License Agreement (CLA). Only approved contributors can send pull requests, so please make sure to get in touch before you do! &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;This software is distributed under the &lt;strong&gt;BSD-3-Clause-Clear&lt;/strong&gt; license. Read &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/LICENSE"&gt;this&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Is Zama’s technology free to use?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Zama’s libraries are free to use under the BSD 3-Clause Clear license only for development, research, prototyping, and experimentation purposes. However, for any commercial use of Zama's open source code, companies must purchase Zama’s commercial patent license.&lt;/p&gt; 
 &lt;p&gt;Everything we do is open source, and we are very transparent on what it means for our users, you can read more about how we monetize our open source products at Zama in &lt;a href="https://www.zama.ai/post/open-source"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;What do I need to do if I want to use Zama’s technology for commercial purposes?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;To commercially use Zama’s technology you need to be granted Zama’s patent license. Please contact us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Do you file IP on your technology?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Yes, all Zama’s technologies are patented.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Can you customize a solution for my specific use case?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We are open to collaborating and advancing the FHE space with our partners. If you have specific needs, please email us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;a target="_blank" href="https://community.zama.ai"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/support-banner-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/support-banner-light.png" /&gt; 
  &lt;img alt="Support" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;p&gt;🌟 If you find this project helpful or interesting, please consider giving it a star on GitHub! Your support helps to grow the community and motivates further development.&lt;/p&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gleam-lang/gleam</title>
      <link>https://github.com/gleam-lang/gleam</link>
      <description>&lt;p&gt;⭐️ A friendly language for building type-safe, scalable systems!&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/gleam-lang/gleam/main/images/lucy.png" alt="Lucy, Gleam's mascot" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/gleam-lang/gleam/releases"&gt;&lt;img src="https://img.shields.io/github/release/gleam-lang/gleam" alt="GitHub release" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/Fm8Pwmy"&gt;&lt;img src="https://img.shields.io/discord/768594524158427167?color=blue" alt="Discord chat" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;!-- A spacer --&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;p&gt;Gleam is a friendly language for building type-safe systems that scale! For more information see &lt;a href="https://gleam.run"&gt;the website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support Gleam!&lt;/h2&gt; 
&lt;p&gt;Gleam is not owned by a corporation, instead it is kindly supported by its sponsors. If you like Gleam please consider &lt;a href="https://gleam.run/sponsor"&gt;sponsoring the project or members of the core team&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Thank you so much! 💖&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typst/typst</title>
      <link>https://github.com/typst/typst</link>
      <description>&lt;p&gt;A new markup-based typesetting system that is powerful and easy to learn.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;img alt="Typst" src="https://user-images.githubusercontent.com/17899797/226108480-722b770e-6313-40d7-84f2-26bebb55a281.png" /&gt; &lt;/h1&gt; 
&lt;p align="center"&gt; &lt;a href="https://typst.app/docs/"&gt; &lt;img alt="Documentation" src="https://img.shields.io/website?down_message=offline&amp;amp;label=docs&amp;amp;up_color=007aff&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app%2Fdocs" /&gt;&lt;/a&gt; &lt;a href="https://typst.app/"&gt; &lt;img alt="Typst App" src="https://img.shields.io/website?down_message=offline&amp;amp;label=typst.app&amp;amp;up_color=239dad&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/2uDybryKPe"&gt; &lt;img alt="Discord Server" src="https://img.shields.io/discord/1054443721975922748?color=5865F2&amp;amp;label=discord&amp;amp;labelColor=555" /&gt;&lt;/a&gt; &lt;a href="https://github.com/typst/typst/raw/main/LICENSE"&gt; &lt;img alt="Apache-2 License" src="https://img.shields.io/badge/license-Apache%202-brightgreen" /&gt;&lt;/a&gt; &lt;a href="https://typst.app/jobs/"&gt; &lt;img alt="Jobs at Typst" src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Ftypst.app%2Fassets%2Fdata%2Fshields.json&amp;amp;query=%24.jobs.text&amp;amp;label=jobs&amp;amp;color=%23A561FF&amp;amp;cacheSeconds=1800" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Typst is a new markup-based typesetting system that is designed to be as powerful as LaTeX while being much easier to learn and use. Typst has:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in markup for the most common formatting tasks&lt;/li&gt; 
 &lt;li&gt;Flexible functions for everything else&lt;/li&gt; 
 &lt;li&gt;A tightly integrated scripting system&lt;/li&gt; 
 &lt;li&gt;Math typesetting, bibliography management, and more&lt;/li&gt; 
 &lt;li&gt;Fast compile times thanks to incremental compilation&lt;/li&gt; 
 &lt;li&gt;Friendly error messages in case something goes wrong&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This repository contains the Typst compiler and its CLI, which is everything you need to compile Typst documents locally. For the best writing experience, consider signing up to our &lt;a href="https://typst.app/"&gt;collaborative online editor&lt;/a&gt; for free.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;A &lt;a href="https://typst.app/docs/tutorial/"&gt;gentle introduction&lt;/a&gt; to Typst is available in our documentation. However, if you want to see the power of Typst encapsulated in one image, here it is:&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img alt="Example" width="900" src="https://user-images.githubusercontent.com/17899797/228031796-ced0e452-fcee-4ae9-92da-b9287764ff25.png" /&gt; &lt;/p&gt; 
&lt;p&gt;Let's dissect what's going on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;We use &lt;em&gt;set rules&lt;/em&gt; to configure element properties like the size of pages or the numbering of headings. By setting the page height to &lt;code&gt;auto&lt;/code&gt;, it scales to fit the content. Set rules accommodate the most common configurations. If you need full control, you can also use &lt;a href="https://typst.app/docs/reference/styling/#show-rules"&gt;show rules&lt;/a&gt; to completely redefine the appearance of an element.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We insert a heading with the &lt;code&gt;= Heading&lt;/code&gt; syntax. One equals sign creates a top level heading, two create a subheading and so on. Typst has more lightweight markup like this, see the &lt;a href="https://typst.app/docs/reference/syntax/"&gt;syntax&lt;/a&gt; reference for a full list.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://typst.app/docs/reference/math/"&gt;Mathematical equations&lt;/a&gt; are enclosed in dollar signs. By adding extra spaces around the contents of an equation, we can put it into a separate block. Multi-letter identifiers are interpreted as Typst definitions and functions unless put into quotes. This way, we don't need backslashes for things like &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;sqrt&lt;/code&gt;. And &lt;code&gt;phi.alt&lt;/code&gt; applies the &lt;code&gt;alt&lt;/code&gt; modifier to the &lt;code&gt;phi&lt;/code&gt; to select a particular symbol variant.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now, we get to some &lt;a href="https://typst.app/docs/reference/scripting/"&gt;scripting&lt;/a&gt;. To input code into a Typst document, we can write a hash followed by an expression. We define two variables and a recursive function to compute the n-th fibonacci number. Then, we display the results in a center-aligned table. The table function takes its cells row-by-row. Therefore, we first pass the formulas &lt;code&gt;$F_1$&lt;/code&gt; to &lt;code&gt;$F_8$&lt;/code&gt; and then the computed fibonacci numbers. We apply the spreading operator (&lt;code&gt;..&lt;/code&gt;) to both because they are arrays and we want to pass the arrays' items as individual arguments.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;Text version of the code example.&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-typst"&gt;#set page(width: 10cm, height: auto)
#set heading(numbering: "1.")

= Fibonacci sequence
The Fibonacci sequence is defined through the
recurrence relation $F_n = F_(n-1) + F_(n-2)$.
It can also be expressed in _closed form:_

$ F_n = round(1 / sqrt(5) phi.alt^n), quad
  phi.alt = (1 + sqrt(5)) / 2 $

#let count = 8
#let nums = range(1, count + 1)
#let fib(n) = (
  if n &amp;lt;= 2 { 1 }
  else { fib(n - 1) + fib(n - 2) }
)

The first #count numbers of the sequence are:

#align(center, table(
  columns: count,
  ..nums.map(n =&amp;gt; $F_#n$),
  ..nums.map(n =&amp;gt; str(fib(n))),
))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Typst's CLI is available from different sources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;You can get sources and pre-built binaries for the latest release of Typst from the &lt;a href="https://github.com/typst/typst/releases/"&gt;releases page&lt;/a&gt;. Download the archive for your platform and place it in a directory that is in your &lt;code&gt;PATH&lt;/code&gt;. To stay up to date with future releases, you can simply run &lt;code&gt;typst update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can install Typst through different package managers. Note that the versions in the package managers might lag behind the latest release.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Linux: 
    &lt;ul&gt; 
     &lt;li&gt;View &lt;a href="https://repology.org/project/typst/versions"&gt;Typst on Repology&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;View &lt;a href="https://snapcraft.io/typst"&gt;Typst's Snap&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;macOS: &lt;code&gt;brew install typst&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Windows: &lt;code&gt;winget install --id Typst.Typst&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you have a &lt;a href="https://rustup.rs/"&gt;Rust&lt;/a&gt; toolchain installed, you can install&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;the latest released Typst version with &lt;code&gt;cargo install --locked typst-cli&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;a development version with &lt;code&gt;cargo install --git https://github.com/typst/typst --locked typst-cli&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Nix users can&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;use the &lt;code&gt;typst&lt;/code&gt; package with &lt;code&gt;nix-shell -p typst&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;build and run a development version with &lt;code&gt;nix run github:typst/typst -- --version&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Docker users can run a prebuilt image with &lt;code&gt;docker run ghcr.io/typst/typst:latest --help&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Once you have installed Typst, you can use it like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Creates `file.pdf` in working directory.
typst compile file.typ

# Creates PDF file at the desired path.
typst compile path/to/source.typ path/to/output.pdf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also watch source files and automatically recompile on changes. This is faster than compiling from scratch each time because Typst has incremental compilation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Watches source files and recompiles on changes.
typst watch file.typ
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Typst further allows you to add custom font paths for your project and list all of the fonts it discovered:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Adds additional directories to search for fonts.
typst compile --font-path path/to/fonts file.typ

# Lists all of the discovered fonts in the system and the given directory.
typst fonts --font-path path/to/fonts

# Or via environment variable (Linux syntax).
TYPST_FONT_PATHS=path/to/fonts typst fonts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For other CLI subcommands and options, see below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Prints available subcommands and options.
typst help

# Prints detailed usage of a subcommand.
typst help watch
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you prefer an integrated IDE-like experience with autocompletion and instant preview, you can also check out our &lt;a href="https://typst.app/"&gt;free web app&lt;/a&gt;. Alternatively, there is a community-created language server called &lt;a href="https://myriad-dreamin.github.io/tinymist/"&gt;Tinymist&lt;/a&gt; which is integrated into various editor extensions.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The main places where the community gathers are our &lt;a href="https://forum.typst.app/"&gt;Forum&lt;/a&gt; and our &lt;a href="https://discord.gg/2uDybryKPe"&gt;Discord server&lt;/a&gt;. The Forum is a great place to ask questions, help others, and share cool things you created with Typst. The Discord server is more suitable for quicker questions, discussions about contributing, or just to chat. We'd be happy to see you there!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://typst.app/universe/"&gt;Typst Universe&lt;/a&gt; is where the community shares templates and packages. If you want to share your own creations, you can submit them to our &lt;a href="https://github.com/typst/packages/"&gt;package repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you had a bad experience in our community, please &lt;a href="https://typst.app/contact"&gt;reach out to us&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We love to see contributions from the community. If you experience bugs, feel free to open an issue. If you would like to implement a new feature or bug fix, please follow the steps outlined in the &lt;a href="https://github.com/typst/typst/raw/main/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To build Typst yourself, first ensure that you have the &lt;a href="https://rustup.rs/"&gt;latest stable Rust&lt;/a&gt; installed. Then, clone this repository and build the CLI with the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/typst/typst
cd typst
cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The optimized binary will be stored in &lt;code&gt;target/release/&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Another good way to contribute is by &lt;a href="https://github.com/typst/packages/"&gt;sharing packages&lt;/a&gt; with the community.&lt;/p&gt; 
&lt;h2&gt;Pronunciation and Spelling&lt;/h2&gt; 
&lt;p&gt;IPA: /taɪpst/. "Ty" like in &lt;strong&gt;Ty&lt;/strong&gt;pesetting and "pst" like in Hi&lt;strong&gt;pst&lt;/strong&gt;er. When writing about Typst, capitalize its name as a proper noun, with a capital "T".&lt;/p&gt; 
&lt;h2&gt;Design Principles&lt;/h2&gt; 
&lt;p&gt;All of Typst has been designed with three key goals in mind: Power, simplicity, and performance. We think it's time for a system that matches the power of LaTeX, is easy to learn and use, all while being fast enough to realize instant preview. To achieve these goals, we follow three core design principles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simplicity through Consistency:&lt;/strong&gt; If you know how to do one thing in Typst, you should be able to transfer that knowledge to other things. If there are multiple ways to do the same thing, one of them should be at a different level of abstraction than the other. E.g. it's okay that &lt;code&gt;= Introduction&lt;/code&gt; and &lt;code&gt;#heading[Introduction]&lt;/code&gt; do the same thing because the former is just syntax sugar for the latter.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Power through Composability:&lt;/strong&gt; There are two ways to make something flexible: Have a knob for everything or have a few knobs that you can combine in many ways. Typst is designed with the second way in mind. We provide systems that you can compose in ways we've never even thought of. TeX is also in the second category, but it's a bit low-level and therefore people use LaTeX instead. But there, we don't really have that much composability. Instead, there's a package for everything (&lt;code&gt;\usepackage{knob}&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance through Incrementality:&lt;/strong&gt; All Typst language features must accommodate for incremental compilation. Luckily we have &lt;a href="https://github.com/typst/comemo/"&gt;&lt;code&gt;comemo&lt;/code&gt;&lt;/a&gt;, a system for incremental compilation which does most of the hard work in the background.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;We'd like to thank everyone who is supporting Typst's development, be it via &lt;a href="https://github.com/sponsors/typst/"&gt;GitHub sponsors&lt;/a&gt; or elsewhere. In particular, special thanks[^1] go to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://posit.co/blog/posit-and-typst/"&gt;Posit&lt;/a&gt; for financing a full-time compiler engineer&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; for supporting work on Typst via multiple grants through the &lt;a href="https://nlnet.nl/core"&gt;NGI Zero Core&lt;/a&gt; fund: 
  &lt;ul&gt; 
   &lt;li&gt;Work on &lt;a href="https://nlnet.nl/project/Typst-HTML/"&gt;HTML export&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Work on &lt;a href="https://nlnet.nl/project/Typst-Accessibility/"&gt;PDF accessibility&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.science-startups.berlin/"&gt;Science &amp;amp; Startups&lt;/a&gt; for having financed Typst development from January through June 2023 via the Berlin Startup Scholarship&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://zerodha.tech/blog/1-5-million-pdfs-in-25-minutes/"&gt;Zerodha&lt;/a&gt; for their generous one-time sponsorship&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[^1]: This list only includes contributions for our open-source work that exceed or are expected to exceed €10K.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>raydium-io/raydium-clmm</title>
      <link>https://github.com/raydium-io/raydium-clmm</link>
      <description>&lt;p&gt;Open-Source Concentrated Liquidity Market Maker&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Raydium-Amm-v3 is an open-sourced concentrated liquidity market maker (CLMM) program built for the Solana ecosystem.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Concentrated Liquidity Market Maker (CLMM)&lt;/strong&gt; pools allow liquidity providers to select a specific price range at which liquidity is active for trades within a pool. This is in contrast to constant product Automated Market Maker (AMM) pools, where all liquidity is spread out on a price curve from 0 to ∞. For LPs, CLMM design enables capital to be deployed with higher efficiency and earn increased yield from trading fees. For traders, CLMMs improve liquidity depth around the current price which translates to better prices and lower price impact on swaps. CLMM pools can be configured for pairs with different volatility.&lt;/p&gt; 
&lt;h2&gt;Environment Setup&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;code&gt;Rust&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
rustup default 1.81.0
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;code&gt;Solana &lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sh -c "$(curl -sSfL https://release.anza.xyz/v2.1.0/install)"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;then run &lt;code&gt;solana-keygen new&lt;/code&gt; to create a keypair at the default location.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;install &lt;code&gt;Anchor&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;# Installing using Anchor version manager (avm)
cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
# Install anchor
avm install 0.31.1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Clone the repository and enter the source code directory.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/raydium-io/raydium-amm-v3
cd raydium-amm-v3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;anchor build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After building, the smart contract files are all located in the target directory.&lt;/p&gt; 
&lt;p&gt;Deploy&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;anchor deploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attention, check your configuration and confirm the environment you want to deploy.&lt;/p&gt; 
&lt;h1&gt;CPI&lt;/h1&gt; 
&lt;p&gt;An example of calling clmm can be found &lt;a href="https://github.com/raydium-io/raydium-cpi-example/tree/master/clmm-cpi"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;The source code is &lt;a href="https://github.com/raydium-io/raydium-clmm/raw/master/LICENSE"&gt;licensed&lt;/a&gt; under Apache 2.0.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>meilisearch/meilisearch</title>
      <link>https://github.com/meilisearch/meilisearch</link>
      <description>&lt;p&gt;A lightning-fast search engine API bringing AI-powered hybrid search to your sites and applications.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-light.svg?sanitize=true#gh-light-mode-only" /&gt; &lt;/a&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=logo#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/meilisearch-logo-dark.svg?sanitize=true#gh-dark-mode-only" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h4 align="center"&gt; &lt;a href="https://www.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Website&lt;/a&gt; | &lt;a href="https://roadmap.meilisearch.com/tabs/1-under-consideration"&gt;Roadmap&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/pricing?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Meilisearch Cloud&lt;/a&gt; | &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Blog&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Documentation&lt;/a&gt; | &lt;a href="https://www.meilisearch.com/docs/faq?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;FAQ&lt;/a&gt; | &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=nav"&gt;Discord&lt;/a&gt; &lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://deps.rs/repo/github/meilisearch/meilisearch"&gt;&lt;img src="https://deps.rs/repo/github/meilisearch/meilisearch/status.svg?sanitize=true" alt="Dependency status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-informational" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/meilisearch/meilisearch/queue"&gt;&lt;img alt="Merge Queues enabled" src="https://img.shields.io/badge/Merge_Queues-enabled-%2357cf60?logo=github" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;⚡ A lightning-fast search engine that fits effortlessly into your apps, websites, and workflow 🔍&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=intro"&gt;Meilisearch&lt;/a&gt; helps you shape a delightful search experience in a snap, offering features that work out of the box to speed up your workflow.&lt;/p&gt; 
&lt;p align="center" name="demo"&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-light-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-light.gif#gh-light-mode-only" alt="A bright colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demo-gif#gh-dark-mode-only" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/demo-dark.gif#gh-dark-mode-only" alt="A dark colored application for finding movies screening near the user" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;🖥 Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://where2watch.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=organization"&gt;&lt;strong&gt;Movies&lt;/strong&gt;&lt;/a&gt; — An application to help you find streaming platforms to watch movies using &lt;a href="https://www.meilisearch.com/solutions/hybrid-search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;hybrid search&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ecommerce.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Ecommerce&lt;/strong&gt;&lt;/a&gt; — Ecommerce website using disjunctive &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;facets&lt;/a&gt;, range and rating filtering, and pagination.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://music.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;Songs&lt;/strong&gt;&lt;/a&gt; — Search through 47 million of songs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://saas.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;&lt;strong&gt;SaaS&lt;/strong&gt;&lt;/a&gt; — Search for contacts, deals, and companies in this &lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=demos"&gt;multi-tenant&lt;/a&gt; CRM application.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the list of all our example apps in our &lt;a href="https://github.com/meilisearch/demos"&gt;demos repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Hybrid search:&lt;/strong&gt; Combine the best of both &lt;a href="https://www.meilisearch.com/docs/learn/experimental/vector_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;semantic&lt;/a&gt; &amp;amp; full-text search to get the most relevant results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search-as-you-type:&lt;/strong&gt; Find &amp;amp; display results in less than 50 milliseconds to provide an intuitive experience&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/typo_tolerance_settings?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Typo tolerance&lt;/a&gt;:&lt;/strong&gt; get relevant matches even when queries contain typos and misspellings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Filtering&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/faceted_search?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;faceted search&lt;/a&gt;:&lt;/strong&gt; enhance your users' search experience with custom filters and build a faceted search interface in a few lines of code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Sorting&lt;/a&gt;:&lt;/strong&gt; sort results based on price, date, or pretty much anything else your users need&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/relevancy/synonyms?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Synonym support&lt;/a&gt;:&lt;/strong&gt; configure synonyms to include more relevant content in your search results&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Geosearch&lt;/a&gt;:&lt;/strong&gt; filter and sort documents based on geographic data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/language?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Extensive language support&lt;/a&gt;:&lt;/strong&gt; search datasets in any language, with optimized support for Chinese, Japanese, Hebrew, and languages using the Latin alphabet&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Security management&lt;/a&gt;:&lt;/strong&gt; control which users can access what data with API keys that allow fine-grained permissions handling&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/learn/security/multitenancy_tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;Multi-Tenancy&lt;/a&gt;:&lt;/strong&gt; personalize search results for any number of application tenants&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly Customizable:&lt;/strong&gt; customize Meilisearch to your specific needs or use our out-of-the-box and hassle-free presets&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=features"&gt;RESTful API&lt;/a&gt;:&lt;/strong&gt; integrate Meilisearch in your technical stack with our plugins and SDKs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI-ready:&lt;/strong&gt; works out of the box with &lt;a href="https://www.meilisearch.com/with/langchain"&gt;langchain&lt;/a&gt; and the &lt;a href="https://github.com/meilisearch/meilisearch-mcp"&gt;model context protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to install, deploy, and maintain&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;You can consult Meilisearch's documentation at &lt;a href="https://www.meilisearch.com/docs/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=docs"&gt;meilisearch.com/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🚀 Getting started&lt;/h2&gt; 
&lt;p&gt;For basic instructions on how to set up Meilisearch, add documents to an index, and search for documents, take a look at our &lt;a href="https://www.meilisearch.com/docs?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=get-started"&gt;documentation&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;🌍 Supercharge your Meilisearch experience&lt;/h2&gt; 
&lt;p&gt;Say goodbye to server deployment and manual updates with &lt;a href="https://www.meilisearch.com/cloud?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch"&gt;Meilisearch Cloud&lt;/a&gt;. Additional features include analytics &amp;amp; monitoring in many regions around the world. No credit card is required.&lt;/p&gt; 
&lt;h2&gt;🧰 SDKs &amp;amp; integration tools&lt;/h2&gt; 
&lt;p&gt;Install one of our SDKs in your project for seamless integration between Meilisearch and your favorite language or framework!&lt;/p&gt; 
&lt;p&gt;Take a look at the complete &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-link"&gt;Meilisearch integration list&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/sdks?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=sdks-logos"&gt;&lt;img src="https://raw.githubusercontent.com/meilisearch/meilisearch/main/assets/integrations.png" alt="Logos belonging to different languages and frameworks supported by Meilisearch, including React, Ruby on Rails, Go, Rust, and PHP" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;⚙️ Advanced usage&lt;/h2&gt; 
&lt;p&gt;Experienced users will want to keep our &lt;a href="https://www.meilisearch.com/docs/reference/api/overview?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API Reference&lt;/a&gt; close at hand.&lt;/p&gt; 
&lt;p&gt;We also offer a wide range of dedicated guides to all Meilisearch features, such as &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/filtering?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;filtering&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/sorting?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;sorting&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/fine_tuning_results/geosearch?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;geosearch&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/docs/learn/security/master_api_keys?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;API keys&lt;/a&gt;, and &lt;a href="https://www.meilisearch.com/docs/learn/security/tenant_tokens?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;tenant tokens&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, for more in-depth information, refer to our articles explaining fundamental Meilisearch concepts such as &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/documents?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;documents&lt;/a&gt; and &lt;a href="https://www.meilisearch.com/docs/learn/core_concepts/indexes?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=advanced"&gt;indexes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🧾 Editions &amp;amp; Licensing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is available in two editions:&lt;/p&gt; 
&lt;h3&gt;🧪 Community Edition (CE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fully open source under the &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE"&gt;MIT license&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Core search engine with fast and relevant full-text, semantic or hybrid search&lt;/li&gt; 
 &lt;li&gt;Free to use for anyone, including commercial usage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🏢 Enterprise Edition (EE)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Includes advanced features such as: 
  &lt;ul&gt; 
   &lt;li&gt;Sharding&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Governed by a &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/LICENSE-EE"&gt;commercial license&lt;/a&gt; or the &lt;a href="https://mariadb.com/bsl11"&gt;Business Source License 1.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Not allowed in production without a commercial agreement with Meilisearch. 
  &lt;ul&gt; 
   &lt;li&gt;You may use, modify, and distribute the Licensed Work for non-production purposes only, such as testing, development, or evaluation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Want access to Enterprise features? → Contact us at &lt;a href="maito:sales@meilisearch.com"&gt;sales@meilisearch.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📊 Telemetry&lt;/h2&gt; 
&lt;p&gt;Meilisearch collects &lt;strong&gt;anonymized&lt;/strong&gt; user data to help us improve our product. You can &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;deactivate this&lt;/a&gt; whenever you want.&lt;/p&gt; 
&lt;p&gt;To request deletion of collected data, please write to us at &lt;a href="mailto:privacy@meilisearch.com"&gt;privacy@meilisearch.com&lt;/a&gt;. Remember to include your &lt;code&gt;Instance UID&lt;/code&gt; in the message, as this helps us quickly find and delete your data.&lt;/p&gt; 
&lt;p&gt;If you want to know more about the kind of data we collect and what we use it for, check the &lt;a href="https://www.meilisearch.com/docs/learn/what_is_meilisearch/telemetry?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=telemetry#how-to-disable-data-collection"&gt;telemetry section&lt;/a&gt; of our documentation.&lt;/p&gt; 
&lt;h2&gt;📫 Get in touch!&lt;/h2&gt; 
&lt;p&gt;Meilisearch is a search engine created by &lt;a href="https://www.meilisearch.com/careers"&gt;Meili&lt;/a&gt;, a software development company headquartered in France and with team members all over the world. Want to know more about us? &lt;a href="https://blog.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Check out our blog!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🗞 &lt;a href="https://share-eu1.hsforms.com/1LN5N0x_GQgq7ss7tXmSykwfg3aq"&gt;Subscribe to our newsletter&lt;/a&gt; if you don't want to miss any updates! We promise we won't clutter your mailbox: we only send one edition every two months.&lt;/p&gt; 
&lt;p&gt;💌 Want to make a suggestion or give feedback? Here are some of the channels where you can reach us:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For feature requests, please visit our &lt;a href="https://github.com/meilisearch/product/discussions"&gt;product repository&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Found a bug? Open an &lt;a href="https://github.com/meilisearch/meilisearch/issues"&gt;issue&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Want to be part of our Discord community? &lt;a href="https://discord.meilisearch.com/?utm_campaign=oss&amp;amp;utm_source=github&amp;amp;utm_medium=meilisearch&amp;amp;utm_content=contact"&gt;Join us!&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you for your support!&lt;/p&gt; 
&lt;h2&gt;👩‍💻 Contributing&lt;/h2&gt; 
&lt;p&gt;Meilisearch is, and will always be, open-source! If you want to contribute to the project, please look at &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/CONTRIBUTING.md"&gt;our contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📦 Versioning&lt;/h2&gt; 
&lt;p&gt;Meilisearch releases and their associated binaries are available on the project's &lt;a href="https://github.com/meilisearch/meilisearch/releases"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The binaries are versioned following &lt;a href="https://semver.org/"&gt;SemVer conventions&lt;/a&gt;. To know more, read our &lt;a href="https://raw.githubusercontent.com/meilisearch/meilisearch/main/documentation/versioning-policy.md"&gt;versioning policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Differently from the binaries, crates in this repository are not currently available on &lt;a href="https://crates.io/"&gt;crates.io&lt;/a&gt; and do not follow &lt;a href="https://semver.org"&gt;SemVer conventions&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tokio-rs/axum</title>
      <link>https://github.com/tokio-rs/axum</link>
      <description>&lt;p&gt;Ergonomic and modular web framework built with Tokio, Tower, and Hyper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;axum&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a web application framework that focuses on ergonomics and modularity.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/axum"&gt;&lt;img src="https://img.shields.io/crates/v/axum" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/axum"&gt;&lt;img src="https://docs.rs/axum/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;More information about this crate can be found in the &lt;a href="https://docs.rs/axum"&gt;crate documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;High level features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Route requests to handlers with a macro free API.&lt;/li&gt; 
 &lt;li&gt;Declaratively parse requests using extractors.&lt;/li&gt; 
 &lt;li&gt;Simple and predictable error handling model.&lt;/li&gt; 
 &lt;li&gt;Generate responses with minimal boilerplate.&lt;/li&gt; 
 &lt;li&gt;Take full advantage of the &lt;a href="https://crates.io/crates/tower"&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/tower-http"&gt;&lt;code&gt;tower-http&lt;/code&gt;&lt;/a&gt; ecosystem of middleware, services, and utilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In particular the last point is what sets &lt;code&gt;axum&lt;/code&gt; apart from other frameworks. &lt;code&gt;axum&lt;/code&gt; doesn't have its own middleware system but instead uses &lt;a href="https://docs.rs/tower/latest/tower/trait.Service.html"&gt;&lt;code&gt;tower::Service&lt;/code&gt;&lt;/a&gt;. This means &lt;code&gt;axum&lt;/code&gt; gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://crates.io/crates/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;⚠ Breaking changes ⚠&lt;/h2&gt; 
&lt;p&gt;We are currently working towards axum 0.9 so the &lt;code&gt;main&lt;/code&gt; branch contains breaking changes. See the &lt;a href="https://github.com/tokio-rs/axum/tree/v0.8.x"&gt;&lt;code&gt;0.8.x&lt;/code&gt;&lt;/a&gt; branch for what's released to crates.io.&lt;/p&gt; 
&lt;h2&gt;Usage example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use axum::{
    routing::{get, post},
    http::StatusCode,
    Json, Router,
};
use serde::{Deserialize, Serialize};

#[tokio::main]
async fn main() {
    // initialize tracing
    tracing_subscriber::fmt::init();

    // build our application with a route
    let app = Router::new()
        // `GET /` goes to `root`
        .route("/", get(root))
        // `POST /users` goes to `create_user`
        .route("/users", post(create_user));

    // run our app with hyper, listening globally on port 3000
    let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();
    axum::serve(listener, app).await.unwrap();
}

// basic handler that responds with a static string
async fn root() -&amp;gt; &amp;amp;'static str {
    "Hello, World!"
}

async fn create_user(
    // this argument tells axum to parse the request body
    // as JSON into a `CreateUser` type
    Json(payload): Json&amp;lt;CreateUser&amp;gt;,
) -&amp;gt; (StatusCode, Json&amp;lt;User&amp;gt;) {
    // insert your application logic here
    let user = User {
        id: 1337,
        username: payload.username,
    };

    // this will be converted into a JSON response
    // with a status code of `201 Created`
    (StatusCode::CREATED, Json(user))
}

// the input to our `create_user` handler
#[derive(Deserialize)]
struct CreateUser {
    username: String,
}

// the output to our `create_user` handler
#[derive(Serialize)]
struct User {
    id: u64,
    username: String,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find this &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples/readme"&gt;example&lt;/a&gt; as well as other example projects in the &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;example directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://docs.rs/axum"&gt;crate documentation&lt;/a&gt; for way more examples.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a relatively thin layer on top of &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; and adds very little overhead. So &lt;code&gt;axum&lt;/code&gt;'s performance is comparable to &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;. You can find benchmarks &lt;a href="https://github.com/programatik29/rust-web-benchmarks"&gt;here&lt;/a&gt; and &lt;a href="https://web-frameworks-benchmark.netlify.app/result?l=rust"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Safety&lt;/h2&gt; 
&lt;p&gt;This crate uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; to ensure everything is implemented in 100% safe Rust.&lt;/p&gt; 
&lt;h2&gt;Minimum supported Rust version&lt;/h2&gt; 
&lt;p&gt;axum's MSRV is 1.78.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;examples&lt;/a&gt; folder contains various examples of how to use &lt;code&gt;axum&lt;/code&gt;. The &lt;a href="https://docs.rs/axum"&gt;docs&lt;/a&gt; also provide lots of code snippets and examples. For full-fledged examples, check out community-maintained &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase"&gt;showcases&lt;/a&gt; or &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials"&gt;tutorials&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;In the &lt;code&gt;axum&lt;/code&gt;'s repo we also have a &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;number of examples&lt;/a&gt; showing how to put everything together. Community-maintained &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase"&gt;showcases&lt;/a&gt; and &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials"&gt;tutorials&lt;/a&gt; also demonstrate how to use &lt;code&gt;axum&lt;/code&gt; for real-world applications. You're also welcome to ask in the &lt;a href="https://discord.gg/tokio"&gt;Discord channel&lt;/a&gt; or open a &lt;a href="https://github.com/tokio-rs/axum/discussions/new?category=q-a"&gt;discussion&lt;/a&gt; with your question.&lt;/p&gt; 
&lt;h2&gt;Community projects&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md"&gt;here&lt;/a&gt; for a list of community maintained crates and projects built with &lt;code&gt;axum&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;🎈 Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href="https://github.com/tokio-rs/axum/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to help you get involved in the &lt;code&gt;axum&lt;/code&gt; project.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://github.com/tokio-rs/axum/raw/main/axum/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in &lt;code&gt;axum&lt;/code&gt; by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MCHPR/MCHPRS</title>
      <link>https://github.com/MCHPR/MCHPRS</link>
      <description>&lt;p&gt;A multithreaded Minecraft server built for redstone.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Minecraft High-Performance Redstone Server&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/MCHPR/MCHPRS/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/MCHPR/MCHPRS/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/MIT"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true" alt="License: MIT" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/svK9JU7"&gt;&lt;img src="https://discordapp.com/api/guilds/724072903083163679/widget.png" alt="Discord Banner 2" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A Minecraft 1.20.4 creative server built for redstone. Each 512x512 plot runs on a separate thread, allowing for less lag, more concurrency, and many awesome extra features!&lt;/p&gt; 
&lt;p&gt;MCHPRS is very different from traditional servers. Because this server is tailored to the use of computation redstone, many things that are a part of Vanilla Minecraft servers don't exist here. That being said, MCHPRS comes with many of its own unique features.&lt;/p&gt; 
&lt;p&gt;MCHPRS has made it possible to run programs such as &lt;a href="https://www.youtube.com/watch?v=-BP7DhHTU-I"&gt;a limited form of Minecraft&lt;/a&gt; on CPUs in Minecraft. To accomplish these speeds, we created &lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/docs/Redpiler.md"&gt;Redpiler&lt;/a&gt;, the "Redstone Compiler".&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#configuration"&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#luckperms"&gt;LuckPerms&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#usage"&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#general-commands"&gt;General Commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#plot-ownership"&gt;Plot Ownership&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#worldedit"&gt;Worldedit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#redpiler"&gt;Redpiler&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#acknowledgments"&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;If the Rust compiler is not already installed, you can find out how &lt;a href="https://www.rust-lang.org/tools/install"&gt;on their official website&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/MCHPR/MCHPRS.git
cd MCHPRS
cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once complete, the optimized executable will be located at &lt;code&gt;./target/release/mchprs&lt;/code&gt; or &lt;code&gt;./target/release/mchprs.exe&lt;/code&gt; depending on your operating system.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;MCHPRS will generate a &lt;code&gt;Config.toml&lt;/code&gt; file in the current working directory when starting the server if it does not exist.&lt;/p&gt; 
&lt;p&gt;The folowing options are available at the toplevel (under no header):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Field&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bind_address&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bind address and port&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;0.0.0.0:25565&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;motd&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Message of the day&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"Minecraft High Performance Redstone Server"&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;chat_format&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;How to format chat message interpolating &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; with curly braces&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;{username}&amp;gt; {message}&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;max_players&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum number of simultaneous players&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;99999&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;view_distance&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Maximal distance (in chunks) between players and loaded chunks&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;8&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;whitelist&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Whether or not the whitelist (in &lt;code&gt;whitelist.json&lt;/code&gt;) shoud be enabled&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;schemati&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Mimic the verification and directory layout used by the Open Redstone Engineers &lt;a href="https://github.com/OpenRedstoneEngineers/Schemati"&gt;Schemati plugin&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;block_in_hitbox&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Allow placing blocks inside of players (hitbox logic is simplified)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;auto_redpiler&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use redpiler automatically&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To change the plot size edit the constants defined in &lt;a href="https://raw.githubusercontent.com/MCHPR/MCHPRS/master/crates/core/src/plot/mod.rs"&gt;plot/mod.rs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Velocity&lt;/h3&gt; 
&lt;p&gt;MCHPRS has no support for player authentication on its own, but supports Velocity modern ip-forwarding.&lt;/p&gt; 
&lt;p&gt;To use &lt;a href="https://papermc.io/software/velocity"&gt;Velocity&lt;/a&gt; ip-forwarding, you must have a Velocity proxy set up and configured. Make sure &lt;code&gt;player-info-forwarding-mode&lt;/code&gt; is set to &lt;code&gt;modern&lt;/code&gt; in your Velocity config. Then, append this to your &lt;code&gt;Config.toml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[velocity]
enabled = true
# This is the secret contained within `forwarding-secret-file` from your velocity config,
# NOT the path to the file.
secret = "&amp;lt;secret&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LuckPerms&lt;/h3&gt; 
&lt;p&gt;MCHPRS has basic support for LuckPerms with MySQL or MariaDB remote database storage. This implementation has no commands or interface and would have to be manged through LuckPerms running on a proxy (&lt;code&gt;/lpb&lt;/code&gt;) or other server (&lt;code&gt;/lp&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;To use LuckPerms, append this to your &lt;code&gt;Config.toml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[luckperms]
# Define the address for the database.
host = "localhost"
# The name of the database the LuckPerms data is in.
db_name = "minecraft"
# Credentials for the database.
username = "minecraft"
password = "minecraft"
# The name of the server, used for server specific permissions.
# See: https://luckperms.net/wiki/Context
server_context = "global"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;General Commands&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Alias&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/rtps [rtps|unlimited]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Set the &lt;strong&gt;redstone&lt;/strong&gt; ticks per second in the plot to &lt;code&gt;[rtps]&lt;/code&gt;. (There are two game ticks in a redstone tick)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/radvance [ticks]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/radv&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Advances the plot by &lt;code&gt;[ticks]&lt;/code&gt; redstone ticks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/teleport [player]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/tp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Teleports you to &lt;code&gt;[player]&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/teleport [x] [y] [z]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/tp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Teleports you to &lt;code&gt;[x] [y] [z]&lt;/code&gt;. Supports relative coordinates. Floats can be expressed as described &lt;a href="https://doc.rust-lang.org/std/primitive.f64.html#grammar"&gt;here&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/speed [speed]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Sets your flyspeed.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/gamemode [mode]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/gmc&lt;/code&gt;, &lt;code&gt;/gmsp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets your gamemode.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/container [type] [power]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Gives you a container (e.g. barrel) which outputs a specified amount of power when used with a comparator.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/toggleautorp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Toggles automatic redpiler compilation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/stop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Stops the server.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Plot Ownership&lt;/h3&gt; 
&lt;p&gt;The plot ownership system in MCHPRS is very incomplete. These are the commands that are currently implemented:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Alias&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot info&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/p i&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Gets the owner of the plot you are in.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot claim&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/p c&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Claims the plot you are in if it is not already claimed.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot auto&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/p a&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Automatically finds an unclaimed plot and claims.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot middle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Teleports you to the center of the plot you are in.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot visit [player]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/p v&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Teleports you to a player's plot.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot tp [x] [z]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Teleports you to the plot at &lt;code&gt;[x] [y]&lt;/code&gt;. Supports relative coordinates.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot lock&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Locks the player into the plot so moving outside of the plot bounds does not transfer you to other plots.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot unlock&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Reverses the locking done by &lt;code&gt;/plot lock&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/plot select&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/p sel&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Uses WorldEdit to select the entire plot.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Worldedit&lt;/h3&gt; 
&lt;p&gt;MCHPRS provides its own implementation of &lt;a href="https://github.com/EngineHub/WorldEdit"&gt;WorldEdit&lt;/a&gt;. Visit their &lt;a href="https://worldedit.enginehub.org/en/latest/commands/"&gt;documentation&lt;/a&gt; for more information. These are the commands that are currently implemented:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Alias&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/up&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/u&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Go upwards some distance&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/ascend&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/asc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Go up a floor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/descend&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/desc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Go down a floor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//pos1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set position 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//pos2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set position 2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//hpos1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//h1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set position 1 to targeted block&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//hpos2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//h2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set position 2 to targeted block&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//sel&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Clears your worldedit first and second positions.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//set&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Sets all the blocks in the region&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//replace&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Replace all blocks in a selection with another&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//copy&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//c&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Copy the selection to the clipboard&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//cut&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Cut the selection to the clipboard&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//paste&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//v&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Paste the clipboard's contents (&lt;code&gt;-a&lt;/code&gt; to ignore air, &lt;code&gt;-u&lt;/code&gt; to also update)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//undo&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Undoes the last action (from history)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//redo&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Redoes the last action (from history)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//rstack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//rs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stack with more options, Refer to &lt;a href="https://github.com/paulikauro/RedstoneTools"&gt;RedstoneTools&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//stack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//s&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Repeat the contents of the selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//move&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Move the contents of the selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//count&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Counts the number of blocks matching a mask&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//load&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Loads a schematic from the &lt;code&gt;./schems/&lt;/code&gt; folder. Make sure the schematic in the Sponge format if there are any issues.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//save&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Save a schematic to the &lt;code&gt;./schems/&lt;/code&gt; folder.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//expand&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//e&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Expand the selection area&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//contract&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Contract the selection area&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//shift&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Shift the selection area&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//flip&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//f&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Flip the contents of the clipboard across the origin&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//rotate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;//r&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Rotate the contents of the clipboard&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//update&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Updates all blocks in the selection (&lt;code&gt;-p&lt;/code&gt; to update the entire plot)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;//help&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Displays help for WorldEdit commands&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Redpiler&lt;/h3&gt; 
&lt;p&gt;MCHPRS provides Redpiler, the redstone compiler. This allows redstone simulation much faster than otherwise possible. While redpiler is running, all redstone connections are pre-computed, thus interaction with the world is limited in this state. Placing or breaking blocks while redpiler is running will cause a reset and disable redpiler.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Alias&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/redpiler compile&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/rp c&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Manually starts redpiler compilation. There are several flags available, described below.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;/redpiler reset&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/rp r&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stops redpiler.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Flag&lt;/th&gt; 
   &lt;th&gt;Short&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--optimize&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;-o&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable redpiler optimizations. WARNING: This can, and will, break the state of your build. Use backups when using this flag.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--io-only&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;-i&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Only send blocks updates of relavent input/output blocks. This includes trapdoors, lamps, note blocks, buttons, levers, and pressure plates. Using this flag can significantly reduce lag and improve simulation speed.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--wire-dot-out&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Consider wires in the dot shape as an output block for &lt;code&gt;-i&lt;/code&gt;. Useful for e.g. color displays.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--update&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;-u&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Update all blocks after redpiler resets.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--export&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Export the compile graph using a binary format. This can be useful for developing out-of-tree uses of redpiler graphs.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--export-dot&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Create a graphvis dot file of backend graph. Used for debugging/development.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AL1L"&gt;@AL1L&lt;/a&gt; for his contributions to worldedit and other various features.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/DavidGarland"&gt;@DavidGarland&lt;/a&gt; for a faster and overall better implementation of &lt;code&gt;get_entry&lt;/code&gt; in the in-memory storage. This simple function runs 30% of the runtime for redstone.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://choosealicense.com/licenses/mit/"&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jdx/mise</title>
      <link>https://github.com/jdx/mise</link>
      <description>&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1 align="center"&gt; &lt;a href="https://mise.jdx.dev"&gt; &lt;img src="https://raw.githubusercontent.com/jdx/mise/main/docs/public/logo.svg?sanitize=true" alt="mise" width="256" height="256" /&gt; &lt;br /&gt; mise-en-place &lt;/a&gt; &lt;/h1&gt; 
 &lt;p&gt; &lt;a href="https://crates.io/crates/mise"&gt;&lt;img alt="Crates.io" src="https://img.shields.io/crates/v/mise?style=for-the-badge&amp;amp;color=00d9ff" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jdx/mise/raw/main/LICENSE"&gt;&lt;img alt="GitHub" src="https://img.shields.io/github/license/jdx/mise?style=for-the-badge&amp;amp;color=52e892" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jdx/mise/actions/workflows/test.yml"&gt;&lt;img alt="GitHub Workflow Status" src="https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?style=for-the-badge&amp;amp;color=ff9100" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/mABnUDvP57"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1066429325269794907?style=for-the-badge&amp;amp;color=00d9ff" /&gt;&lt;/a&gt; &lt;/p&gt; 
 &lt;p&gt;&lt;b&gt;The front-end to your dev env&lt;/b&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://mise.jdx.dev/getting-started.html"&gt;Getting Started&lt;/a&gt; • &lt;a href="https://mise.jdx.dev"&gt;Documentation&lt;/a&gt; • &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;Dev Tools&lt;/a&gt; • &lt;a href="https://mise.jdx.dev/environments/"&gt;Environments&lt;/a&gt; • &lt;a href="https://mise.jdx.dev/tasks/"&gt;Tasks&lt;/a&gt; &lt;/p&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is it?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Like &lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt; (or &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; or &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; but for any language) it manages &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; like node, python, cmake, terraform, and &lt;a href="https://mise.jdx.dev/registry.html"&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/environments/"&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://www.gnu.org/software/make/manual/make.html"&gt;make&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;The following demo shows how to install and use &lt;code&gt;mise&lt;/code&gt; to manage multiple versions of &lt;code&gt;node&lt;/code&gt; on the same system. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; 
&lt;p&gt;It also shows that you can use &lt;code&gt;mise&lt;/code&gt; to install and many other tools such as &lt;code&gt;jq&lt;/code&gt;, &lt;code&gt;terraform&lt;/code&gt;, or &lt;code&gt;go&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://mise.jdx.dev/demo.html"&gt;&lt;img src="https://raw.githubusercontent.com/jdx/mise/main/docs/tapes/demo.gif" alt="demo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/demo.html"&gt;demo transcript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Install mise&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/getting-started.html"&gt;Getting started&lt;/a&gt; for more options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ curl https://mise.run | sh
$ ~/.local/bin/mise --version
2025.10.0 macos-arm64 (a1b2d3e 2025-10-01)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;# note this assumes mise is located at ~/.local/bin/mise
# which is what https://mise.run does by default
echo 'eval "$(~/.local/bin/mise activate bash)"' &amp;gt;&amp;gt; ~/.bashrc
echo 'eval "$(~/.local/bin/mise activate zsh)"' &amp;gt;&amp;gt; ~/.zshrc
echo '~/.local/bin/mise activate fish | source' &amp;gt;&amp;gt; ~/.config/fish/config.fish
echo '~/.local/bin/mise activate pwsh | Out-String | Invoke-Expression' &amp;gt;&amp;gt; ~/.config/powershell/Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Execute commands with specific tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise exec node@22 -- node -v
mise node@22.x.x ✓ installed
v22.x.x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise use --global node@22 go@1
$ node -v
v22.x.x
$ go version
go version go1.x.x macos/arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h3&gt;Manage environment variables&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[env]
SOME_VAR = "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise set SOME_VAR=bar
$ echo $SOME_VAR
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;mise&lt;/code&gt; can also &lt;a href="https://mise.jdx.dev/environments/#env-directives"&gt;load &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Run tasks&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tasks.build]
description = "build the project"
run = "echo building..."
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise run build
building...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Example mise project&lt;/h3&gt; 
&lt;p&gt;Here is a combined example to give you an idea of how you can use mise to manage your a project's tools, environment, and tasks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tools]
terraform = "1"
aws-cli = "2"

[env]
TF_WORKSPACE = "development"
AWS_REGION = "us-west-2"
AWS_PROFILE = "dev"

[tasks.plan]
description = "Run terraform plan with configured workspace"
run = """
terraform init
terraform workspace select $TF_WORKSPACE
terraform plan
"""

[tasks.validate]
description = "Validate AWS credentials and terraform config"
run = """
aws sts get-caller-identity
terraform validate
"""

[tasks.deploy]
description = "Deploy infrastructure after validation"
depends = ["validate", "plan"]
run = "terraform apply -auto-approve"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;mise install # install tools specified in mise.toml
mise run deploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Find more examples in the &lt;a href="https://mise.jdx.dev/mise-cookbook/"&gt;mise cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Full Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev"&gt;mise.jdx.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;We're grateful for Cloudflare's support through &lt;a href="https://www.cloudflare.com/lp/project-alexandria/"&gt;Project Alexandria&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/jdx/mise/graphs/contributors"&gt;&lt;img src="https://contrib.rocks/image?repo=jdx/mise" alt="Contributors" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aws/amazon-q-developer-cli</title>
      <link>https://github.com/aws/amazon-q-developer-cli</link>
      <description>&lt;p&gt;✨ Agentic chat experience in your terminal. Build applications using natural language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amazon Q CLI&lt;/h1&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;DMG&lt;/strong&gt;: &lt;a href="https://desktop-release.q.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg"&gt;Download now&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-ubuntu"&gt;Ubuntu/Debian&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-appimage"&gt;AppImage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-alternative-linux"&gt;Alternative Linux builds&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you so much for considering to contribute to Amazon Q.&lt;/p&gt; 
&lt;p&gt;Before getting started, see our &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/CONTRIBUTING.md#security-issue-notifications"&gt;contributing docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;MacOS 
  &lt;ul&gt; 
   &lt;li&gt;Xcode 13 or later&lt;/li&gt; 
   &lt;li&gt;Brew&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1. Clone repo&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/aws/amazon-q-developer-cli.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. Install the Rust toolchain using &lt;a href="https://rustup.rs"&gt;Rustup&lt;/a&gt;:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
rustup default stable
rustup toolchain install nightly
cargo install typos-cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. Develop locally&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;To compile and run: &lt;code&gt;cargo run --bin chat_cli&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run tests: &lt;code&gt;cargo test&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run lints: &lt;code&gt;cargo clippy&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To format rust files: &lt;code&gt;cargo +nightly fmt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run subcommands: &lt;code&gt;cargo run --bin chat_cli -- {subcommand}&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Login would then be: &lt;code&gt;cargo run --bin chat_cli -- login&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/chat-cli/"&gt;&lt;code&gt;chat_cli&lt;/code&gt;&lt;/a&gt; - the &lt;code&gt;q&lt;/code&gt; CLI, allows users to interface with Amazon Q Developer from the command line&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/scripts/"&gt;&lt;code&gt;scripts/&lt;/code&gt;&lt;/a&gt; - Contains ops and build related scripts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/"&gt;&lt;code&gt;crates/&lt;/code&gt;&lt;/a&gt; - Contains all rust crates&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/docs/"&gt;&lt;code&gt;docs/&lt;/code&gt;&lt;/a&gt; - Contains technical documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;For security related concerns, see &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/SECURITY.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;This repo is dual licensed under MIT and Apache 2.0 licenses.&lt;/p&gt; 
&lt;p&gt;Those licenses can be found &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/LICENSE.MIT"&gt;here&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/LICENSE.APACHE"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;“Amazon Web Services” and all related marks, including logos, graphic designs, and service names, are trademarks or trade dress of AWS in the U.S. and other countries. AWS’s trademarks and trade dress may not be used in connection with any product or service that is not AWS’s, in any manner that is likely to cause confusion among customers, or in any manner that disparages or discredits AWS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tokio-rs/tokio</title>
      <link>https://github.com/tokio-rs/tokio</link>
      <description>&lt;p&gt;A runtime for writing reliable asynchronous applications with Rust. Provides I/O, networking, scheduling, timers, ...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tokio&lt;/h1&gt; 
&lt;p&gt;A runtime for writing reliable, asynchronous, and slim applications with the Rust programming language. It is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Tokio's zero-cost abstractions give you bare-metal performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Tokio leverages Rust's ownership, type system, and concurrency model to reduce bugs and ensure thread safety.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Tokio has a minimal footprint, and handles backpressure and cancellation naturally.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/tokio"&gt;&lt;img src="https://img.shields.io/crates/v/tokio.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tokio-rs/tokio/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/tokio-rs/tokio/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/tokio-rs/tokio/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/tokio"&gt;&lt;img src="https://img.shields.io/discord/500028886025895936.svg?logo=discord&amp;amp;style=flat-square" alt="Discord chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://tokio.rs"&gt;Website&lt;/a&gt; | &lt;a href="https://tokio.rs/tokio/tutorial"&gt;Guides&lt;/a&gt; | &lt;a href="https://docs.rs/tokio/latest/tokio"&gt;API Docs&lt;/a&gt; | &lt;a href="https://discord.gg/tokio"&gt;Chat&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A multithreaded, work-stealing based task &lt;a href="https://docs.rs/tokio/latest/tokio/runtime/index.html"&gt;scheduler&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;A reactor backed by the operating system's event queue (epoll, kqueue, IOCP, etc.).&lt;/li&gt; 
 &lt;li&gt;Asynchronous &lt;a href="https://docs.rs/tokio/latest/tokio/net/index.html"&gt;TCP and UDP&lt;/a&gt; sockets.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These components provide the runtime components necessary for building an asynchronous application.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;A basic TCP echo server with Tokio.&lt;/p&gt; 
&lt;p&gt;Make sure you activated the full features of the tokio crate on Cargo.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
tokio = { version = "1.47.1", features = ["full"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, on your main.rs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust,no_run"&gt;use tokio::net::TcpListener;
use tokio::io::{AsyncReadExt, AsyncWriteExt};

#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let listener = TcpListener::bind("127.0.0.1:8080").await?;

    loop {
        let (mut socket, _) = listener.accept().await?;

        tokio::spawn(async move {
            let mut buf = [0; 1024];

            // In a loop, read data from the socket and write the data back.
            loop {
                let n = match socket.read(&amp;amp;mut buf).await {
                    // socket closed
                    Ok(0) =&amp;gt; return,
                    Ok(n) =&amp;gt; n,
                    Err(e) =&amp;gt; {
                        eprintln!("failed to read from socket; err = {:?}", e);
                        return;
                    }
                };

                // Write the data back
                if let Err(e) = socket.write_all(&amp;amp;buf[0..n]).await {
                    eprintln!("failed to write to socket; err = {:?}", e);
                    return;
                }
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More examples can be found &lt;a href="https://github.com/tokio-rs/tokio/tree/master/examples"&gt;here&lt;/a&gt;. For a larger "real world" example, see the &lt;a href="https://github.com/tokio-rs/mini-redis/"&gt;mini-redis&lt;/a&gt; repository.&lt;/p&gt; 
&lt;p&gt;To see a list of the available features flags that can be enabled, check our &lt;a href="https://docs.rs/tokio/#feature-flags"&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;First, see if the answer to your question can be found in the &lt;a href="https://tokio.rs/tokio/tutorial"&gt;Guides&lt;/a&gt; or the &lt;a href="https://docs.rs/tokio/latest/tokio"&gt;API documentation&lt;/a&gt;. If the answer is not there, there is an active community in the &lt;a href="https://discord.gg/tokio"&gt;Tokio Discord server&lt;/a&gt;. We would be happy to try to answer your question. You can also ask your question on &lt;a href="https://github.com/tokio-rs/tokio/discussions"&gt;the discussions page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;🎈&lt;/span&gt; Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href="https://github.com/tokio-rs/tokio/raw/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to help you get involved in the Tokio project.&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;In addition to the crates in this repository, the Tokio project also maintains several other libraries, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum"&gt;&lt;code&gt;axum&lt;/code&gt;&lt;/a&gt;: A web application framework that focuses on ergonomics and modularity.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/hyperium/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;: A fast and correct HTTP/1.1 and HTTP/2 implementation for Rust.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/hyperium/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;: A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/seanmonstar/warp"&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt;: A super-easy, composable, web server framework for warp speeds.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tower-rs/tower"&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt;: A library of modular and reusable components for building robust networking clients and servers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/tracing"&gt;&lt;code&gt;tracing&lt;/code&gt;&lt;/a&gt; (formerly &lt;code&gt;tokio-trace&lt;/code&gt;): A framework for application-level tracing and async-aware diagnostics.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/mio"&gt;&lt;code&gt;mio&lt;/code&gt;&lt;/a&gt;: A low-level, cross-platform abstraction over OS I/O APIs that powers &lt;code&gt;tokio&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/bytes"&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;: Utilities for working with bytes, including efficient byte buffers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/tokio-rs/loom"&gt;&lt;code&gt;loom&lt;/code&gt;&lt;/a&gt;: A testing tool for concurrent Rust code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;The Tokio repository contains multiple crates. Each crate has its own changelog.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tokio&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-util&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-util/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-stream&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-stream/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-macros&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-macros/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tokio-test&lt;/code&gt; - &lt;a href="https://github.com/tokio-rs/tokio/raw/master/tokio-test/CHANGELOG.md"&gt;view changelog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Rust Versions&lt;/h2&gt; 
&lt;!--
When updating this, also update:
- .github/workflows/ci.yml
- CONTRIBUTING.md
- README.md
- tokio/README.md
- tokio/Cargo.toml
- tokio-util/Cargo.toml
- tokio-test/Cargo.toml
- tokio-stream/Cargo.toml
--&gt; 
&lt;p&gt;Tokio will keep a rolling MSRV (minimum supported rust version) policy of &lt;strong&gt;at least&lt;/strong&gt; 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.70.&lt;/p&gt; 
&lt;p&gt;Note that the MSRV is not increased automatically, and only as part of a minor release. The MSRV history for past minor releases can be found below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;1.39 to now - Rust 1.70&lt;/li&gt; 
 &lt;li&gt;1.30 to 1.38 - Rust 1.63&lt;/li&gt; 
 &lt;li&gt;1.27 to 1.29 - Rust 1.56&lt;/li&gt; 
 &lt;li&gt;1.17 to 1.26 - Rust 1.49&lt;/li&gt; 
 &lt;li&gt;1.15 to 1.16 - Rust 1.46&lt;/li&gt; 
 &lt;li&gt;1.0 to 1.14 - Rust 1.45&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that although we try to avoid the situation where a dependency transitively increases the MSRV of Tokio, we do not guarantee that this does not happen. However, every minor release will have some set of versions of dependencies that works with the MSRV of that minor release.&lt;/p&gt; 
&lt;h2&gt;Release schedule&lt;/h2&gt; 
&lt;p&gt;Tokio doesn't follow a fixed release schedule, but we typically make one minor release each month. We make patch releases for bugfixes as necessary.&lt;/p&gt; 
&lt;h2&gt;Bug patching policy&lt;/h2&gt; 
&lt;p&gt;For the purposes of making patch releases with bugfixes, we have designated certain minor releases as LTS (long term support) releases. Whenever a bug warrants a patch release with a fix for the bug, it will be backported and released as a new patch release for each LTS minor version. Our current LTS releases are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;1.43.x&lt;/code&gt; - LTS release until March 2026. (MSRV 1.70)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.47.x&lt;/code&gt; - LTS release until September 2026. (MSRV 1.70)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each LTS release will continue to receive backported fixes for at least a year. If you wish to use a fixed minor release in your project, we recommend that you use an LTS release.&lt;/p&gt; 
&lt;p&gt;To use a fixed minor version, you can specify the version with a tilde. For example, to specify that you wish to use the newest &lt;code&gt;1.43.x&lt;/code&gt; patch release, you can use the following dependency specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;tokio = { version = "~1.43", features = [...] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Previous LTS releases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;1.8.x&lt;/code&gt; - LTS release until February 2022.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.14.x&lt;/code&gt; - LTS release until June 2022.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.18.x&lt;/code&gt; - LTS release until June 2023.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.20.x&lt;/code&gt; - LTS release until September 2023.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.25.x&lt;/code&gt; - LTS release until March 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.32.x&lt;/code&gt; - LTS release until September 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.36.x&lt;/code&gt; - LTS release until March 2025.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;1.38.x&lt;/code&gt; - LTS release until July 2025.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://github.com/tokio-rs/tokio/raw/master/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tokio by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>atuinsh/atuin</title>
      <link>https://github.com/atuinsh/atuin</link>
      <description>&lt;p&gt;✨ Magical shell history&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/atuinsh/atuin/assets/53315310/13216a1d-1ac0-4c99-b0eb-d88290fe0efd" /&gt; 
  &lt;img alt="Text changing depending on mode. Light: 'So light!' Dark: 'So dark!'" src="https://github.com/atuinsh/atuin/assets/53315310/08bc86d4-a781-4aaa-8d7e-478ae6bcd129" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;em&gt;magical shell history&lt;/em&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/atuinsh/atuin/actions?query=workflow%3ARust"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/atuinsh/atuin/rust.yml?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/atuin"&gt;&lt;img src="https://img.shields.io/crates/v/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/atuin"&gt;&lt;img src="https://img.shields.io/crates/d/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/atuinsh/atuin/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/atuin.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/Fq8bJSKPHh"&gt;&lt;img src="https://img.shields.io/discord/954121165239115808" /&gt;&lt;/a&gt; &lt;a rel="me" href="https://hachyderm.io/@atuin"&gt;&lt;img src="https://img.shields.io/mastodon/follow/109944632283122560?domain=https%3A%2F%2Fhachyderm.io&amp;amp;style=social" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/atuinsh"&gt;&lt;img src="https://img.shields.io/twitter/follow/atuinsh?style=social" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/README.md"&gt;English&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/docs/zh-CN/README.md"&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Atuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and &lt;em&gt;fully encrypted&lt;/em&gt; synchronisation of your history between machines, via an Atuin server.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/atuinsh/atuin/main/demo.gif" alt="animated" width="80%" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;em&gt;exit code, duration, time and command shown&lt;/em&gt; &lt;/p&gt; 
&lt;p&gt;As well as the search UI, it can do things like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# search for all successful `make` commands, recorded after 3pm yesterday
atuin search --exit 0 --after "yesterday 3pm" make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may use either the server I host, or host your own! Or just don't use sync at all. As all history sync is encrypted, I couldn't access your data even if I wanted to. And I &lt;strong&gt;really&lt;/strong&gt; don't want to.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;rebind &lt;code&gt;ctrl-r&lt;/code&gt; and &lt;code&gt;up&lt;/code&gt; (configurable) to a full screen history search UI&lt;/li&gt; 
 &lt;li&gt;store shell history in a sqlite database&lt;/li&gt; 
 &lt;li&gt;back up and sync &lt;strong&gt;encrypted&lt;/strong&gt; shell history&lt;/li&gt; 
 &lt;li&gt;the same history across terminals, across sessions, and across machines&lt;/li&gt; 
 &lt;li&gt;log exit code, cwd, hostname, session, command duration, etc&lt;/li&gt; 
 &lt;li&gt;calculate statistics such as "most used command"&lt;/li&gt; 
 &lt;li&gt;old history file is not replaced&lt;/li&gt; 
 &lt;li&gt;quick-jump to previous items with &lt;kbd&gt;Alt-&amp;lt;num&amp;gt;&lt;/kbd&gt;&lt;/li&gt; 
 &lt;li&gt;switch filter modes via ctrl-r; search history just from the current session, directory, or globally&lt;/li&gt; 
 &lt;li&gt;enter to execute a command, tab to edit&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/atuinsh/atuin/main/#quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/installation/"&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/sync/"&gt;Setting up sync&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/import/"&gt;Import history&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.atuin.sh/guide/basic-usage/"&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Shells&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;zsh&lt;/li&gt; 
 &lt;li&gt;bash&lt;/li&gt; 
 &lt;li&gt;fish&lt;/li&gt; 
 &lt;li&gt;nushell&lt;/li&gt; 
 &lt;li&gt;xonsh&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;h3&gt;Forum&lt;/h3&gt; 
&lt;p&gt;Atuin has a community forum, please ask here for help and support: &lt;a href="https://forum.atuin.sh/"&gt;https://forum.atuin.sh/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Discord&lt;/h3&gt; 
&lt;p&gt;Atuin also has a community Discord, available &lt;a href="https://discord.gg/jR3tfchVvW"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Quickstart&lt;/h1&gt; 
&lt;p&gt;This will sign you up for the Atuin Cloud sync server. Everything is end-to-end encrypted, so your secrets are safe!&lt;/p&gt; 
&lt;p&gt;Read more in the &lt;a href="https://docs.atuin.sh"&gt;docs&lt;/a&gt; for an offline setup, self hosted server, and more.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

atuin register -u &amp;lt;USERNAME&amp;gt; -e &amp;lt;EMAIL&amp;gt;
atuin import auto
atuin sync
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then restart your shell!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;For Bash users&lt;/strong&gt;: The above sets up &lt;code&gt;bash-preexec&lt;/code&gt; for necessary hooks, but &lt;code&gt;bash-preexec&lt;/code&gt; has limitations. For details, please see the &lt;a href="https://docs.atuin.sh/guide/installation/#installing-the-shell-plugin"&gt;Bash&lt;/a&gt; section of the shell plugin documentation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Security&lt;/h1&gt; 
&lt;p&gt;If you find any security issues, we'd appreciate it if you could alert &lt;a href="mailto:ellie@atuin.sh"&gt;ellie@atuin.sh&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;a href="https://github.com/atuinsh/atuin/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=atuinsh/atuin&amp;amp;max=300" /&gt; &lt;/a&gt; 
&lt;p&gt;Made with &lt;a href="https://contrib.rocks"&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>seanmonstar/reqwest</title>
      <link>https://github.com/seanmonstar/reqwest</link>
      <description>&lt;p&gt;An easy and powerful Rust HTTP Client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reqwest&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/reqwest"&gt;&lt;img src="https://img.shields.io/crates/v/reqwest.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/reqwest"&gt;&lt;img src="https://docs.rs/reqwest/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-APACHE"&gt;&lt;img src="https://img.shields.io/crates/l/reqwest.svg?sanitize=true" alt="MIT/Apache-2 licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/seanmonstar/reqwest/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/seanmonstar/reqwest/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An ergonomic, batteries-included HTTP Client for Rust.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Async and blocking &lt;code&gt;Client&lt;/code&gt;s&lt;/li&gt; 
 &lt;li&gt;Plain bodies, JSON, urlencoded, multipart&lt;/li&gt; 
 &lt;li&gt;Customizable redirect policy&lt;/li&gt; 
 &lt;li&gt;HTTP Proxies&lt;/li&gt; 
 &lt;li&gt;HTTPS via system-native TLS (or optionally, rustls)&lt;/li&gt; 
 &lt;li&gt;Cookie Store&lt;/li&gt; 
 &lt;li&gt;WASM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;This asynchronous example uses &lt;a href="https://tokio.rs"&gt;Tokio&lt;/a&gt; and enables some optional features, so your &lt;code&gt;Cargo.toml&lt;/code&gt; could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
reqwest = { version = "0.12", features = ["json"] }
tokio = { version = "1", features = ["full"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then the code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust,no_run"&gt;use std::collections::HashMap;

#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let resp = reqwest::get("https://httpbin.org/ip")
        .await?
        .json::&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt;()
        .await?;
    println!("{resp:#?}");
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commercial Support&lt;/h2&gt; 
&lt;p&gt;For private advice, support, reviews, access to the maintainer, and the like, reach out for &lt;a href="https://seanmonstar.com/sponsor"&gt;commercial support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;On Linux:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OpenSSL with headers. See &lt;a href="https://docs.rs/openssl"&gt;https://docs.rs/openssl&lt;/a&gt; for supported versions and more details. Alternatively you can enable the &lt;code&gt;native-tls-vendored&lt;/code&gt; feature to compile a copy of OpenSSL. Or, you can use &lt;a href="https://github.com/rustls/rustls"&gt;rustls&lt;/a&gt; via &lt;code&gt;rustls-tls&lt;/code&gt; or other &lt;code&gt;rustls-tls-*&lt;/code&gt; features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;On Windows and macOS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nothing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, Reqwest uses &lt;a href="https://github.com/sfackler/rust-native-tls"&gt;rust-native-tls&lt;/a&gt;, which will use the operating system TLS framework if available, meaning Windows and macOS. On Linux, it will use the available OpenSSL or fail to build if not found.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://apache.org/licenses/LICENSE-2.0"&gt;http://apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Support this project by becoming a &lt;a href="https://seanmonstar.com/sponsor"&gt;sponsor&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>witnessmenow/ESP32-Cheap-Yellow-Display</title>
      <link>https://github.com/witnessmenow/ESP32-Cheap-Yellow-Display</link>
      <description>&lt;p&gt;Building a community around a cheap ESP32 Display with a touch screen&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ESP32-Cheap-Yellow-Display&lt;/h1&gt; 
&lt;p&gt;There is an ESP32 with a built in 320 x 240 2.8" LCD display with a touch screen called the "ESP32-2432S028R", since this doesn't roll of the tongue, I propose it should be renamed the "Cheap Yellow Display" or CYD for short. This display is only about $15 delivered so I think it's really good value.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/witnessmenow/ESP32-Cheap-Yellow-Display/assets/1562562/76c3d481-2523-4b6f-881c-2e29f9368cd0" alt="image" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The CYD has the following features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ESP32 (With Wifi and Bluetooth)&lt;/li&gt; 
 &lt;li&gt;320 x 240 LCD Display (2.8")&lt;/li&gt; 
 &lt;li&gt;Touch Screen (Resistive)&lt;/li&gt; 
 &lt;li&gt;USB for powering and programming&lt;/li&gt; 
 &lt;li&gt;SD Card Slot, LED and some additional pins broken out&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who is it good for?&lt;/h2&gt; 
&lt;p&gt;I think it's useful for the following types of people:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;People just getting started with working hardware&lt;/strong&gt; - as everything is already connected, there is no soldering or additional components required&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;People who are familiar with working with hardware, but are lazy&lt;/strong&gt; - (like me) Sometimes you just want to build a project without having to assemble any hardware&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;People who aren't really looking to learn anything, but just want to build some cool things&lt;/strong&gt; - More about this later.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is the purpose of this page?&lt;/h2&gt; 
&lt;p&gt;So this is pretty nice hardware and a cheap price, but the software instructions/support around it is pretty poor. Just a single link to a zip file on a random website.&lt;/p&gt; 
&lt;p&gt;A couple of years ago I released the &lt;a href="https://github.com/witnessmenow/ESP32-Trinity"&gt;ESP32 Trinity&lt;/a&gt;, which is an open source ESP32 board for controlling Matrix panels. I think the main benefit people get out of the work I did on the Trinty is not the hardware, but the documentation, example code and ready to go projects.&lt;/p&gt; 
&lt;p&gt;I'm no longer creating hardware products, but I think it would be interesting if we could create the same kind of community around this display, where people can share examples and projects made for this display.&lt;/p&gt; 
&lt;h2&gt;How do I know if a display is a CYD?&lt;/h2&gt; 
&lt;p&gt;&lt;img src="http://www.plantuml.com/plantuml/png/RP0nJyCm48Nt_8gZNIb3fge3LD2b2q92235UamDRE7PaNuhyxxda7DGgJBs-zxtSE-yJO-IXSzKD6-e8UeVMLyQs1DJrdA6br4JRims-4fW9LiS4bY6JS-47qBTWC052QvEayyCAvA-wS-8vi01F7mS8SVevOxJeUK9zu55QzzP_Nw-exxPmz8tHJzRRsJq4cdo3Pu98oIQsCd4O6WDIbyXF4LN-JNMsYG7UNXyXUAUTLHDfqVeMJWClUfSPrY_OOyPtO_ivUPcfnoMV3iyXJh4cj_MGJd8lEleQkvQKi9TYUT_DvbukXnraIfTQURMT39Nu8kcrXInIwQYO-gCyNwgm6al-ZneTNIRqjLokqS2UV3jqxXS0" alt="CYD decision tree" /&gt;&lt;/p&gt; 
&lt;h2&gt;Where to buy?&lt;/h2&gt; 
&lt;p&gt;Buy from wherever works out cheapest for you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://s.click.aliexpress.com/e/_DkSpIjB"&gt;Aliexpress*&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://s.click.aliexpress.com/e/_DkcmuCh"&gt;Aliexpress*&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.aliexpress.com/item/1005004502250619.html"&gt;Aliexpress&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.makerfabs.com/sunton-esp32-2-8-inch-tft-with-touch.html"&gt;Makerfabs&lt;/a&gt; - Seems to come with a 16GB SD card. Makerfabs also stock my &lt;a href="https://github.com/witnessmenow/ESP32-Trinity"&gt;ESP32 Trinity&lt;/a&gt; (NOTE there will be import due in the EU from makerfabs)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;* = Affiliate Link&lt;/p&gt; 
&lt;h2&gt;Getting Started With Your CYD&lt;/h2&gt; 
&lt;p&gt;For details on how to get started with your CYD, please check out the &lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/SETUP.md"&gt;Setup and Configuration&lt;/a&gt; page&lt;/p&gt; 
&lt;h2&gt;Code Examples&lt;/h2&gt; 
&lt;h3&gt;The Basics&lt;/h3&gt; 
&lt;p&gt;A collection of examples demonstrating how to use the different features of the CYD, this is a good place to get started. &lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/Examples/Basics"&gt;Check them out here.&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Alternative Display Libraries&lt;/h3&gt; 
&lt;p&gt;The basics examples are based on the TFT_eSPI display library, but the CYD also works with other display libraries too. Here is some example code if you prefer to use an alternative Arduino library. &lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/Examples/AlternativeLibraries"&gt;Check them out here.&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;ESPHome&lt;/h3&gt; 
&lt;p&gt;Some examples for using the CYD in ESPHome. &lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/Examples/ESPHome"&gt;Check them out here.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Additional Info and Links&lt;/h2&gt; 
&lt;h3&gt;Discord&lt;/h3&gt; 
&lt;p&gt;Join the CYD discussion on &lt;a href="https://discord.gg/nnezpvq"&gt;my Discord channel&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;3DPrinting&lt;/h3&gt; 
&lt;p&gt;Some examples of 3D printed stands and cases. &lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/3dModels"&gt;Check them out here.&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Pin Information&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/PINS.md"&gt;This page&lt;/a&gt; contains information about what pins are used where, and what ones are free to use.&lt;/p&gt; 
&lt;h3&gt;Add-ons&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/ADDONS.md"&gt;This page&lt;/a&gt; contains information about additional hardware add-ons that can add functionality to your CYD&lt;/p&gt; 
&lt;h3&gt;Troubleshooting&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/TROUBLESHOOTING.md"&gt;This page&lt;/a&gt; contains information about how to troubleshoot your CYD device&lt;/p&gt; 
&lt;h3&gt;Hardware Mods&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/Mods/README.md"&gt;This page&lt;/a&gt; contains information about some hardware mods that can be performed on the CYD to improve or change some of its functionality&lt;/p&gt; 
&lt;h3&gt;Media and Video Mentions&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/MEDIA.md"&gt;This page&lt;/a&gt; lists any times the CYD project was mentioned somewhere!&lt;/p&gt; 
&lt;h2&gt;License Info&lt;/h2&gt; 
&lt;p&gt;This project is licensed as MIT as per the &lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/LICENSE"&gt;license file&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The one exception to this is the &lt;a href="https://raw.githubusercontent.com/witnessmenow/ESP32-Cheap-Yellow-Display/main/OriginalDocumentation/"&gt;OriginalDocumentation&lt;/a&gt; folder, that I do not have the right to license&lt;/p&gt; 
&lt;h2&gt;Other Languages&lt;/h2&gt; 
&lt;p&gt;Some members of the community have ported some of this information to other languages!&lt;/p&gt; 
&lt;p&gt;Please note: I can't gaurantee the accuracy of the translation, how up to date they are or the content on them in general.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/usini/ESP32-Cheap-Yellow-Display-Documentation-FR"&gt;French / Française&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paelzer/ESP32-Cheap-Yellow-Display-Documentation-DE"&gt;German / Deutsch&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you would like to contribure a translation, please name the repo with the language name or code in the repo name and you can link it here.&lt;/p&gt; 
&lt;h2&gt;Help Support what I do!&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/sponsors/witnessmenow/"&gt;If you enjoy my work, please consider becoming a Github sponsor!&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vercel/turborepo</title>
      <link>https://github.com/vercel/turborepo</link>
      <description>&lt;p&gt;Build system optimized for JavaScript and TypeScript, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://turborepo.com"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="https://user-images.githubusercontent.com/4060187/196936123-f6e1db90-784d-4174-b774-92502b718836.png" /&gt; 
   &lt;img src="https://user-images.githubusercontent.com/4060187/196936104-5797972c-ab10-4834-bd61-0d1e5f442c9c.png" height="128" /&gt; 
  &lt;/picture&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h1 align="center"&gt;&lt;a href="https://turborepo.com"&gt;Turborepo&lt;/a&gt;&lt;/h1&gt;
&lt;a href="https://turborepo.com"&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a aria-label="Vercel logo" href="https://vercel.com/"&gt;&lt;img src="https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&amp;amp;logo=Vercel&amp;amp;labelColor=000" /&gt;&lt;/a&gt; &lt;a aria-label="NPM version" href="https://www.npmjs.com/package/turbo"&gt;&lt;img alt="" src="https://img.shields.io/npm/v/turbo.svg?style=for-the-badge&amp;amp;labelColor=000000" /&gt;&lt;/a&gt; &lt;a aria-label="License" href="https://github.com/vercel/turborepo/raw/main/LICENSE"&gt;&lt;img alt="" src="https://img.shields.io/npm/l/turbo.svg?style=for-the-badge&amp;amp;labelColor=000000&amp;amp;color=" /&gt;&lt;/a&gt; &lt;a aria-label="Join the community on GitHub" href="https://github.com/vercel/turborepo/discussions"&gt;&lt;img alt="" src="https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&amp;amp;logo=turborepo&amp;amp;labelColor=000000&amp;amp;logoWidth=20&amp;amp;logoColor=white" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Turborepo is a high-performance build system for JavaScript and TypeScript codebases, written in Rust.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href="https://turborepo.com"&gt;https://turborepo.com&lt;/a&gt; to get started with Turborepo.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/vercel/turborepo/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The Turborepo community can be found on &lt;a href="https://github.com/vercel/turborepo/discussions"&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; 
&lt;p&gt;To chat with other community members, you can join &lt;a href="https://vercel.community/tag/turborepo"&gt;Vercel Community's &lt;code&gt;#turborepo&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/vercel/turborepo/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; applies to all Turborepo community channels.&lt;/p&gt; 
&lt;h2&gt;Who is using Turborepo?&lt;/h2&gt; 
&lt;p&gt;Turborepo is used by the world's leading companies. Check out the &lt;a href="https://turborepo.com/showcase"&gt;Turborepo Showcase&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Updates&lt;/h2&gt; 
&lt;p&gt;Follow &lt;a href="https://x.com/turborepo"&gt;@turborepo&lt;/a&gt; on X for project updates.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Turborepo&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Jared Palmer (&lt;a href="https://x.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you believe you have found a security vulnerability in Turborepo, we encourage you to responsibly disclose this and not open a public issue. We will investigate all legitimate reports. Email &lt;code&gt;security@vercel.com&lt;/code&gt; to disclose any security vulnerabilities.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://vercel.com/security"&gt;https://vercel.com/security&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>librespot-org/librespot</title>
      <link>https://github.com/librespot-org/librespot</link>
      <description>&lt;p&gt;Open Source Spotify client library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/librespot-org/librespot/actions"&gt;&lt;img src="https://github.com/librespot-org/librespot/workflows/build/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;&lt;img src="https://badges.gitter.im/librespot-org/librespot.png" alt="Gitter chat" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/librespot"&gt;&lt;img src="https://img.shields.io/crates/v/librespot.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Current maintainers are &lt;a href="https://github.com/orgs/librespot-org/people"&gt;listed on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;librespot&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;librespot&lt;/em&gt; is an open source client library for Spotify. It enables applications to use Spotify's service to control and play music via various backends, and to act as a Spotify Connect receiver. It is an alternative to the official and &lt;a href="https://pyspotify.mopidy.com/en/latest/#libspotify-s-deprecation"&gt;now deprecated&lt;/a&gt; closed-source &lt;code&gt;libspotify&lt;/code&gt;. Additionally, it will provide extra features which are not available in the official library.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note: librespot only works with Spotify Premium. This will remain the case. We will not support any features to make librespot compatible with free accounts, such as limited skips and adverts.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;We're available on &lt;a href="https://crates.io/crates/librespot"&gt;crates.io&lt;/a&gt; as the &lt;em&gt;librespot&lt;/em&gt; package. Simply run &lt;code&gt;cargo install librespot&lt;/code&gt; to install librespot on your system. Check the wiki for more info and possible &lt;a href="https://github.com/librespot-org/librespot/wiki/Options"&gt;usage options&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;After installation, you can run librespot from the CLI using a command such as &lt;code&gt;librespot -n "Librespot Speaker" -b 160&lt;/code&gt; to create a speaker called &lt;em&gt;Librespot Speaker&lt;/em&gt; serving 160 kbps audio.&lt;/p&gt; 
&lt;h2&gt;This fork&lt;/h2&gt; 
&lt;p&gt;As the origin by &lt;a href="https://github.com/plietar/"&gt;plietar&lt;/a&gt; is no longer actively maintained, this organisation and repository have been set up so that the project may be maintained and upgraded in the future.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Documentation is currently a work in progress, contributions are welcome!&lt;/p&gt; 
&lt;p&gt;There is some brief documentation on how the protocol works in the &lt;a href="https://github.com/librespot-org/librespot/tree/master/docs"&gt;docs&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/librespot-org/librespot/raw/master/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; contains detailed instructions on setting up a development environment, and compiling librespot. More general usage and compilation information is available on the &lt;a href="https://github.com/librespot-org/librespot/wiki"&gt;wiki&lt;/a&gt;. &lt;a href="https://github.com/librespot-org/librespot/raw/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; also contains our contributing guidelines.&lt;/p&gt; 
&lt;p&gt;If you wish to learn more about how librespot works overall, the best way is to simply read the code, and ask any questions you have in our &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;Gitter Room&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Issues &amp;amp; Discussions&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;We have recently started using Github discussions for general questions and feature requests, as they are a more natural medium for such cases, and allow for upvoting to prioritize feature development. Check them out &lt;a href="https://github.com/librespot-org/librespot/discussions"&gt;here&lt;/a&gt;. Bugs and issues with the underlying library should still be reported as issues.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you run into a bug when using librespot, please search the existing issues before opening a new one. Chances are, we've encountered it before, and have provided a resolution. If not, please open a new one, and where possible, include the backtrace librespot generates on crashing, along with anything we can use to reproduce the issue, e.g. the Spotify URI of the song that caused the crash.&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;p&gt;A quick walkthrough of the build process is outlined below, while a detailed compilation guide can be found &lt;a href="https://github.com/librespot-org/librespot/raw/master/COMPILING.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Additional Dependencies&lt;/h2&gt; 
&lt;p&gt;We recently switched to using &lt;a href="https://github.com/tomaka/rodio"&gt;Rodio&lt;/a&gt; for audio playback by default, hence for macOS and Windows, you should just be able to clone and build librespot (with the command below). For Linux, you will need to run the additional commands below, depending on your distro.&lt;/p&gt; 
&lt;p&gt;On Debian/Ubuntu, the following command will install these dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo apt-get install build-essential libasound2-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora systems, the following command will install these dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo dnf install alsa-lib-devel make gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;librespot currently offers the following selection of &lt;a href="https://github.com/librespot-org/librespot/wiki/Audio-Backends"&gt;audio backends&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Rodio (default)
ALSA
GStreamer
PortAudio
PulseAudio
JACK
JACK over Rodio
SDL
Pipe
Subprocess
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please check &lt;a href="https://raw.githubusercontent.com/librespot-org/librespot/dev/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; for detailed information on TLS, audio, and discovery backend dependencies, or the &lt;a href="https://github.com/librespot-org/librespot/wiki/Compiling#general-dependencies"&gt;Compiling&lt;/a&gt; entry on the wiki for additional backend specific dependencies.&lt;/p&gt; 
&lt;p&gt;Once you've installed the dependencies and cloned this repository you can build &lt;em&gt;librespot&lt;/em&gt; with the default features using Cargo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, this builds with native-tls (system TLS), rodio audio backend, and libmdns discovery. See &lt;a href="https://raw.githubusercontent.com/librespot-org/librespot/dev/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; for information on selecting different TLS, audio, and discovery backends.&lt;/p&gt; 
&lt;h1&gt;Packages&lt;/h1&gt; 
&lt;p&gt;librespot is also available via official package system on various operating systems such as Linux, FreeBSD, NetBSD. &lt;a href="https://repology.org/project/librespot/versions"&gt;Repology&lt;/a&gt; offers a good overview.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/librespot/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/librespot.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;A sample program implementing a headless Spotify Connect receiver is provided. Once you've built &lt;em&gt;librespot&lt;/em&gt;, run it using :&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;target/release/librespot --name DEVICENAME
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above is a minimal example. Here is a more fully fledged one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;target/release/librespot -n "Librespot" -b 320 -c ./cache --enable-volume-normalisation --initial-volume 75 --device-type avr
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command will create a receiver named &lt;code&gt;Librespot&lt;/code&gt;, with bitrate set to 320 kbps, initial volume at 75%, with volume normalisation enabled, and the device displayed in the app as an Audio/Video Receiver. A folder named &lt;code&gt;cache&lt;/code&gt; will be created/used in the current directory, and be used to cache audio data and credentials.&lt;/p&gt; 
&lt;p&gt;A full list of runtime options is available &lt;a href="https://github.com/librespot-org/librespot/wiki/Options"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Please Note: When using the cache feature, an authentication blob is stored for your account in the cache directory. For security purposes, we recommend that you set directory permissions on the cache directory to &lt;code&gt;700&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Come and hang out on gitter if you need help or want to offer some: &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;https://gitter.im/librespot-org/spotify-connect-resources&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;Using this code to connect to Spotify's API is probably forbidden by them. Use at your own risk.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Everything in this repository is licensed under the MIT license.&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;This is a non exhaustive list of projects that either use or have modified librespot. If you'd like to include yours, submit a PR.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/librespot-org/librespot-golang"&gt;librespot-golang&lt;/a&gt; - A golang port of librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelveldt/plugin.audio.spotify"&gt;plugin.audio.spotify&lt;/a&gt; - A Kodi plugin for Spotify.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dtcooper/raspotify"&gt;raspotify&lt;/a&gt; - A Spotify Connect client that mostly Just Works™&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Spotifyd/spotifyd"&gt;Spotifyd&lt;/a&gt; - A stripped down librespot UNIX daemon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nicokaiser/rpi-audio-receiver"&gt;rpi-audio-receiver&lt;/a&gt; - easy Raspbian install scripts for Spotifyd, Bluetooth, Shairport and other audio receivers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/badfortrains/spotcontrol"&gt;Spotcontrol&lt;/a&gt; - A golang implementation of a Spotify Connect controller. No Playback functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/devgianlu/librespot-java"&gt;librespot-java&lt;/a&gt; - A Java port of librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hrkfdn/ncspot"&gt;ncspot&lt;/a&gt; - Cross-platform ncurses Spotify client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xMordax/ansible-role-librespot/tree/master"&gt;ansible-role-librespot&lt;/a&gt; - Ansible role that will build, install and configure Librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xou816/spot"&gt;Spot&lt;/a&gt; - Gtk/Rust native Spotify client for the GNOME desktop.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/badaix/snapcast"&gt;Snapcast&lt;/a&gt; - synchronised multi-room audio player that uses librespot as its source for Spotify content&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mupibox.de/"&gt;MuPiBox&lt;/a&gt; - Portable music box for Spotify and local media based on Raspberry Pi. Operated via touchscreen. Suitable for children and older people.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>category-labs/monad-bft</title>
      <link>https://github.com/category-labs/monad-bft</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Monad BFT&lt;/h1&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This repository contains implementation for the Monad consensus client and JsonRpc server. Monad consensus collects transactions and produces blocks which are written to a ledger filestream. These blocks are consumed by Monad execution, which then updates the state of the blockchain. The &lt;a href="https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-triedb/README.md"&gt;triedb&lt;/a&gt; is a database which stores block information and the blockchain state.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;From within the &lt;code&gt;monad-bft&lt;/code&gt; root directory, initialize and update submodules.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Setup the required hugepages and networking configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Hugepages allocation
sudo sysctl -w vm.nr_hugepages=2048
# UDP buffer sizes
sudo sysctl -w net.core.rmem_max=62500000
sudo sysctl -w net.core.rmem_default=62500000
sudo sysctl -w net.core.wmem_max=62500000
sudo sysctl -w net.core.wmem_default=62500000
# TCP buffer sizes
sudo sysctl -w net.ipv4.tcp_rmem='4096 62500000 62500000'
sudo sysctl -w net.ipv4.tcp_wmem='4096 62500000 62500000'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To make these persistent, you can create a custom settings file, e.g. &lt;code&gt;/etc/sysctl.d/99-custom-monad.conf&lt;/code&gt; with the following settings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Huge Pages Configuration
vm.nr_hugepages = 2048

# UDP Buffer Sizes
net.core.rmem_max = 62500000
net.core.rmem_default = 62500000
net.core.wmem_max = 62500000
net.core.wmem_default = 62500000

# TCP Buffer Sizes
net.ipv4.tcp_rmem = 4096 62500000 62500000
net.ipv4.tcp_wmem = 4096 62500000 62500000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Apply these changes if needed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo sysctl -p /etc/sysctl.d/99-custom-monad.conf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using Docker&lt;/h3&gt; 
&lt;p&gt;The most straightforward way to start a consensus client + an execution client + a JsonRpc server.&lt;/p&gt; 
&lt;h4&gt;Requirements&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;x86 processor - the Monad client is developed exclusively against x86 processors. Emulation techniques for other processors, e.g. ARM (Macbooks) are possible but not supported here&lt;/li&gt; 
 &lt;li&gt;4+ physical cores (building times will be faster with more cores and higher clock speed)&lt;/li&gt; 
 &lt;li&gt;60 GB+ available hard drive space - Docker builds are about 500 MB each, but the build cache can consume 50 GB+.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Instructions&lt;/h4&gt; 
&lt;p&gt;After successfully cloning the &lt;code&gt;monad-bft&lt;/code&gt; repo, run the following from the &lt;code&gt;monad-bft&lt;/code&gt; directory:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;cd docker/single-node&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nets/run.sh&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This script builds the docker images from source, which can take 500s+ depending on available memory and cores. This will construct a build folder &lt;code&gt;docker/single-node/logs/$(date +%Y%m%d_%H%M%S)-$rand_hex"&lt;/code&gt; and run &lt;code&gt;docker compose up&lt;/code&gt; on the execution, consensus and rpc images.&lt;/p&gt; 
&lt;p&gt;This will start a single node with chain ID of &lt;code&gt;20143&lt;/code&gt; and RPC at &lt;code&gt;localhost:8080&lt;/code&gt;. The known &lt;a href="https://getfoundry.sh/anvil/overview/"&gt;Foundry/Anvil accounts&lt;/a&gt; have each been loaded with &lt;a href="https://github.com/category-labs/monad/raw/ce4101b11701bf4ef3a9cd996a6144883735187f/category/execution/monad/chain/monad_devnet_alloc.hpp#L22"&gt;large initial balances&lt;/a&gt;. The easiest way to fund transactions is to import the private key from one of those pre-allocated accounts.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] To avoid a lengthy rebuild after shutting down the docker containers, you can call &lt;code&gt;nets/run.sh&lt;/code&gt; with the &lt;code&gt;--cached-build &amp;lt;full path to build dir&amp;gt;&lt;/code&gt; arg, e.g.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;single-node$ nets/run.sh --cached-build [...]/monad-bft/docker/single-node/logs/20250929_082118-2d71738c8dfba6d2
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To test the RPC connection, try the following query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -X POST http://localhost:8080 \
  -H "Content-Type: application/json" \
  --data '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This should return &lt;code&gt;{"jsonrpc":"2.0","result":"0x4eaf","id":1}&lt;/code&gt;, which &lt;a href="https://www.rapidtables.com/convert/number/hex-to-decimal.html?x=4EAF"&gt;converts&lt;/a&gt; to 20143.&lt;/p&gt; 
&lt;p&gt;Please consult the &lt;a href="https://docs.monad.xyz/reference/"&gt;official RPC docs&lt;/a&gt; as there are small differences between Monad and Ethereum JSON-RPC.&lt;/p&gt; 
&lt;h3&gt;Using Cargo&lt;/h3&gt; 
&lt;p&gt;To run a Monad consensus client, follow instructions &lt;a href="https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-node/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To run a JsonRpc server, follow instructions &lt;a href="https://raw.githubusercontent.com/category-labs/monad-bft/master/monad-rpc/README.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;sequenceDiagram
autonumber
    participant D as Driver
    box Purple Executor
    participant S as impl Stream
    participant E as impl Executor
    end
    participant State
    participant PersistenceLogger
    loop
    D -&amp;gt;&amp;gt;+ S: CALL next()
    Note over S: blocks until event ready
    S --&amp;gt;&amp;gt;- D: RETURN Event
    D -&amp;gt;&amp;gt; PersistenceLogger: CALL push(Event)
    D -&amp;gt;&amp;gt;+ State: CALL update(Event)
    Note over State: mutate state
    State --&amp;gt;&amp;gt;- D: RETURN Vec&amp;lt;Command&amp;gt;
    D -&amp;gt;&amp;gt; E: CALL exec(Vec&amp;lt;Command&amp;gt;)
    Note over E: apply side effects
    end
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>topjohnwu/Magisk</title>
      <link>https://github.com/topjohnwu/Magisk</link>
      <description>&lt;p&gt;The Magic Mask for Android&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/topjohnwu/Magisk/master/docs/images/logo.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/topjohnwu/magisk-files/count/count.json"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?color=green&amp;amp;label=Downloads&amp;amp;query=totalString&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Ftopjohnwu%2Fmagisk-files%2Fcount%2Fcount.json&amp;amp;cacheSeconds=1800" alt="Downloads" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;This is not an officially supported Google product&lt;/h4&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Magisk is a suite of open source software for customizing Android, supporting devices higher than Android 6.0.&lt;br /&gt; Some highlight features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;MagiskSU&lt;/strong&gt;: Provide root access for applications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Magisk Modules&lt;/strong&gt;: Modify read-only partitions by installing modules&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MagiskBoot&lt;/strong&gt;: The most complete tool for unpacking and repacking Android boot images&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Zygisk&lt;/strong&gt;: Run code in every Android applications' processes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Downloads&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/topjohnwu/Magisk/releases"&gt;Github&lt;/a&gt; is the only source where you can get official Magisk information and downloads.&lt;/p&gt; 
&lt;h2&gt;Useful Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://topjohnwu.github.io/Magisk/install.html"&gt;Installation Instruction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://topjohnwu.github.io/Magisk/build.html"&gt;Building and Development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://topjohnwu.github.io/Magisk/"&gt;Magisk Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/topjohnwu/zygisk-module-sample"&gt;Zygisk module sample&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Bug Reports&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Only bug reports from Debug builds will be accepted.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;For installation issues, upload both boot image and install logs.&lt;br /&gt; For Magisk issues, upload boot logcat or dmesg.&lt;br /&gt; For Magisk app crashes, record and upload the logcat when the crash occurs.&lt;/p&gt; 
&lt;h2&gt;Translation Contributions&lt;/h2&gt; 
&lt;p&gt;Default string resources for the Magisk app and its stub APK are located here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;app/core/src/main/res/values/strings.xml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;app/stub/src/main/res/values/strings.xml&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Translate each and place them in the respective locations (&lt;code&gt;[module]/src/main/res/values-[lang]/strings.xml&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Magisk, including all git submodules are free software:
you can redistribute it and/or modify it under the terms of the
GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>qdrant/qdrant</title>
      <link>https://github.com/qdrant/qdrant</link>
      <description>&lt;p&gt;Qdrant - High-performance, massive-scale Vector Database and Vector Search Engine for the next generation of AI. Also available in the cloud https://cloud.qdrant.io/&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/qdrant/qdrant/raw/master/docs/logo-dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/qdrant/qdrant/raw/master/docs/logo-light.svg" /&gt; 
  &lt;img height="100" alt="Qdrant" src="https://github.com/qdrant/qdrant/raw/master/docs/logo.svg?sanitize=true" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;Vector Search Engine for the next generation of AI applications&lt;/b&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/qdrant/qdrant/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/qdrant/qdrant/rust.yml?style=flat-square" alt="Tests status" /&gt;&lt;/a&gt; &lt;a href="https://api.qdrant.tech/"&gt;&lt;img src="https://img.shields.io/badge/Docs-OpenAPI%203.0-success?style=flat-square" alt="OpenAPI Docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/qdrant/qdrant/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/qdrant/qdrant?style=flat-square" alt="Apache 2.0 License" /&gt;&lt;/a&gt; &lt;a href="https://qdrant.to/discord"&gt;&lt;img src="https://img.shields.io/discord/907569970500743200?logo=Discord&amp;amp;style=flat-square&amp;amp;color=7289da" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://qdrant.to/roadmap"&gt;&lt;img src="https://img.shields.io/badge/Roadmap-2025-bc1439.svg?style=flat-square" alt="Roadmap 2025" /&gt;&lt;/a&gt; &lt;a href="https://cloud.qdrant.io/"&gt;&lt;img src="https://img.shields.io/badge/Qdrant-Cloud-24386C.svg?logo=cloud&amp;amp;style=flat-square" alt="Qdrant Cloud" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Qdrant&lt;/strong&gt; (read: &lt;em&gt;quadrant&lt;/em&gt;) is a vector similarity search engine and vector database. It provides a production-ready service with a convenient API to store, search, and manage points—vectors with an additional payload Qdrant is tailored to extended filtering support. It makes it useful for all sorts of neural-network or semantic-based matching, faceted search, and other applications.&lt;/p&gt; 
&lt;p&gt;Qdrant is written in Rust 🦀, which makes it fast and reliable even under high load. See &lt;a href="https://qdrant.tech/benchmarks/"&gt;benchmarks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!&lt;/p&gt; 
&lt;p&gt;Qdrant is also available as a fully managed &lt;strong&gt;&lt;a href="https://cloud.qdrant.io/"&gt;Qdrant Cloud&lt;/a&gt;&lt;/strong&gt; ⛅ including a &lt;strong&gt;free tier&lt;/strong&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md"&gt;Quick Start&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#clients"&gt;Client Libraries&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#demo-projects"&gt;Demo Projects&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#integrations"&gt;Integrations&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#contacts"&gt;Contact&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;pip install qdrant-client
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The python client offers a convenient way to start with Qdrant locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from qdrant_client import QdrantClient
qdrant = QdrantClient(":memory:") # Create in-memory Qdrant instance, for testing, CI/CD
# OR
client = QdrantClient(path="path/to/db")  # Persists changes to disk, fast prototyping
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Client-Server&lt;/h3&gt; 
&lt;p&gt;To experience the full power of Qdrant locally, run the container with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -p 6333:6333 qdrant/qdrant
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can connect to this with any client, including Python:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;qdrant = QdrantClient("http://localhost:6333") # Connect to existing Qdrant instance
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Before deploying Qdrant to production, be sure to read our &lt;a href="https://qdrant.tech/documentation/guides/installation/"&gt;installation&lt;/a&gt; and &lt;a href="https://qdrant.tech/documentation/guides/security/"&gt;security&lt;/a&gt; guides.&lt;/p&gt; 
&lt;h3&gt;Clients&lt;/h3&gt; 
&lt;p&gt;Qdrant offers the following client libraries to help you integrate it into your application stack with ease:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/go-client"&gt;Go client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/rust-client"&gt;Rust client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-js"&gt;JavaScript/TypeScript client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-client"&gt;Python client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-dotnet"&gt;.NET/C# client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/java-client"&gt;Java client&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Community: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://hexdocs.pm/qdrant/readme.html"&gt;Elixir&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hkulekci/qdrant-php"&gt;PHP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/andreibondarev/qdrant-ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/metaloom/qdrant-java-client"&gt;Java&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Where do I go from here?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md"&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;End to End &lt;a href="https://colab.research.google.com/drive/1Bz8RSVHwnNDaNtDwotfPj0w7AYzsdXZ-?usp=sharing"&gt;Colab Notebook&lt;/a&gt; demo with SentenceBERT and Qdrant&lt;/li&gt; 
 &lt;li&gt;Detailed &lt;a href="https://qdrant.tech/documentation/"&gt;Documentation&lt;/a&gt; are great starting points&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://qdrant.to/qdrant-tutorial"&gt;Step-by-Step Tutorial&lt;/a&gt; to create your first neural network project with Qdrant&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo Projects&lt;a href="https://replit.com/@qdrant"&gt;&lt;img align="right" src="https://replit.com/badge/github/qdrant/qdrant" alt="Run on Repl.it" /&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Discover Semantic Text Search 🔍&lt;/h3&gt; 
&lt;p&gt;Unlock the power of semantic embeddings with Qdrant, transcending keyword-based search to find meaningful connections in short texts. Deploy a neural search in minutes using a pre-trained neural network, and experience the future of text search. &lt;a href="https://qdrant.to/semantic-search-demo"&gt;Try it online!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Explore Similar Image Search - Food Discovery 🍕&lt;/h3&gt; 
&lt;p&gt;There's more to discovery than text search, especially when it comes to food. People often choose meals based on appearance rather than descriptions and ingredients. Let Qdrant help your users find their next delicious meal using visual search, even if they don't know the dish's name. &lt;a href="https://qdrant.to/food-discovery"&gt;Check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Master Extreme Classification - E-commerce Product Categorization 📺&lt;/h3&gt; 
&lt;p&gt;Enter the cutting-edge realm of extreme classification, an emerging machine learning field tackling multi-class and multi-label problems with millions of labels. Harness the potential of similarity learning models, and see how a pre-trained transformer model and Qdrant can revolutionize e-commerce product categorization. &lt;a href="https://qdrant.to/extreme-classification-demo"&gt;Play with it online!&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; More solutions &lt;/summary&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/text_search.png" /&gt; &lt;/td&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/image_search.png" /&gt; &lt;/td&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/recommendations.png" /&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Semantic Text Search &lt;/td&gt; 
    &lt;td&gt; Similar Image Search &lt;/td&gt; 
    &lt;td&gt; Recommendations &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/chat_bots.png" /&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/matching_engines.png" /&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/anomalies_detection.png" /&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Chat Bots &lt;/td&gt; 
    &lt;td&gt; Matching Engines &lt;/td&gt; 
    &lt;td&gt; Anomaly Detection &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;REST&lt;/h3&gt; 
&lt;p&gt;Online OpenAPI 3.0 documentation is available &lt;a href="https://api.qdrant.tech/"&gt;here&lt;/a&gt;. OpenAPI makes it easy to generate a client for virtually any framework or programming language.&lt;/p&gt; 
&lt;p&gt;You can also download raw OpenAPI &lt;a href="https://github.com/qdrant/qdrant/raw/master/docs/redoc/master/openapi.json"&gt;definitions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;gRPC&lt;/h3&gt; 
&lt;p&gt;For faster production-tier searches, Qdrant also provides a gRPC interface. You can find gRPC documentation &lt;a href="https://qdrant.tech/documentation/interfaces/#grpc-interface"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Filtering and Payload&lt;/h3&gt; 
&lt;p&gt;Qdrant can attach any JSON payloads to vectors, allowing for both the storage and filtering of data based on the values in these payloads. Payload supports a wide range of data types and query conditions, including keyword matching, full-text filtering, numerical ranges, geo-locations, and more.&lt;/p&gt; 
&lt;p&gt;Filtering conditions can be combined in various ways, including &lt;code&gt;should&lt;/code&gt;, &lt;code&gt;must&lt;/code&gt;, and &lt;code&gt;must_not&lt;/code&gt; clauses, ensuring that you can implement any desired business logic on top of similarity matching.&lt;/p&gt; 
&lt;h3&gt;Hybrid Search with Sparse Vectors&lt;/h3&gt; 
&lt;p&gt;To address the limitations of vector embeddings when searching for specific keywords, Qdrant introduces support for sparse vectors in addition to the regular dense ones.&lt;/p&gt; 
&lt;p&gt;Sparse vectors can be viewed as an generalization of BM25 or TF-IDF ranking. They enable you to harness the capabilities of transformer-based neural networks to weigh individual tokens effectively.&lt;/p&gt; 
&lt;h3&gt;Vector Quantization and On-Disk Storage&lt;/h3&gt; 
&lt;p&gt;Qdrant provides multiple options to make vector search cheaper and more resource-efficient. Built-in vector quantization reduces RAM usage by up to 97% and dynamically manages the trade-off between search speed and precision.&lt;/p&gt; 
&lt;h3&gt;Distributed Deployment&lt;/h3&gt; 
&lt;p&gt;Qdrant offers comprehensive horizontal scaling support through two key mechanisms:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Size expansion via sharding and throughput enhancement via replication&lt;/li&gt; 
 &lt;li&gt;Zero-downtime rolling updates and seamless dynamic scaling of the collections&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Highlighted Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Query Planning and Payload Indexes&lt;/strong&gt; - leverages stored payload information to optimize query execution strategy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SIMD Hardware Acceleration&lt;/strong&gt; - utilizes modern CPU x86-x64 and Neon architectures to deliver better performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Async I/O&lt;/strong&gt; - uses &lt;code&gt;io_uring&lt;/code&gt; to maximize disk throughput utilization even on a network-attached storage.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Write-Ahead Logging&lt;/strong&gt; - ensures data persistence with update confirmation, even during power outages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Integrations&lt;/h1&gt; 
&lt;p&gt;Examples and/or documentation of Qdrant integrations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.cohere.com/docs/qdrant-and-cohere"&gt;Cohere&lt;/a&gt; (&lt;a href="https://qdrant.tech/articles/qa-with-cohere-and-qdrant/"&gt;blogpost on building a QA app with Cohere and Qdrant&lt;/a&gt;) - Use Cohere embeddings with Qdrant&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docarray.org/user_guide/storing/index_qdrant/"&gt;DocArray&lt;/a&gt; - Use Qdrant as a document store in DocArray&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://haystack.deepset.ai/integrations/qdrant-document-store"&gt;Haystack&lt;/a&gt; - Use Qdrant as a document store with Haystack (&lt;a href="https://haystack.deepset.ai/blog/qdrant-integration"&gt;blogpost&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://python.langchain.com/docs/integrations/providers/qdrant/"&gt;LangChain&lt;/a&gt; (&lt;a href="https://qdrant.tech/articles/langchain-integration/"&gt;blogpost&lt;/a&gt;) - Use Qdrant as a memory backend for LangChain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gpt-index.readthedocs.io/en/latest/examples/vector_stores/QdrantIndexDemo.html"&gt;LlamaIndex&lt;/a&gt; - Use Qdrant as a Vector Store with LlamaIndex.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openai/chatgpt-retrieval-plugin/raw/main/docs/providers/qdrant/setup.md"&gt;OpenAI - ChatGPT retrieval plugin&lt;/a&gt; - Use Qdrant as a memory backend for ChatGPT&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devblogs.microsoft.com/semantic-kernel/the-power-of-persistent-memory-with-semantic-kernel-and-qdrant-vector-database/"&gt;Microsoft Semantic Kernel&lt;/a&gt; - Use Qdrant as persistent memory with Semantic Kernel&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contacts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Have questions? Join our &lt;a href="https://qdrant.to/discord"&gt;Discord channel&lt;/a&gt; or mention &lt;a href="https://qdrant.to/twitter"&gt;@qdrant_engine on Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Want to stay in touch with latest releases? Subscribe to our &lt;a href="https://qdrant.tech/subscribe/"&gt;Newsletters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Looking for a managed cloud? Check &lt;a href="https://qdrant.tech/pricing/"&gt;pricing&lt;/a&gt;, need something personalised? We're at &lt;a href="mailto:info@qdrant.tech"&gt;info@qdrant.tech&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Qdrant is licensed under the Apache License, Version 2.0. View a copy of the &lt;a href="https://github.com/qdrant/qdrant/raw/master/LICENSE"&gt;License file&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>awslabs/mountpoint-s3</title>
      <link>https://github.com/awslabs/mountpoint-s3</link>
      <description>&lt;p&gt;A simple, high-throughput file client for mounting an Amazon S3 bucket as a local file system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mountpoint for Amazon S3&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/awslabs/mountpoint-s3/actions/workflows/tests.yml"&gt;&lt;img src="https://github.com/awslabs/mountpoint-s3/actions/workflows/tests.yml/badge.svg?sanitize=true" alt="Tests" /&gt;&lt;/a&gt; &lt;a href="https://github.com/awslabs/mountpoint-s3/actions/workflows/integration_main.yml"&gt;&lt;img src="https://github.com/awslabs/mountpoint-s3/actions/workflows/integration_main.yml/badge.svg?branch=main" alt="Integration tests" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Mountpoint for Amazon S3 is a simple, high-throughput file client for &lt;a href="https://aws.amazon.com/blogs/storage/the-inside-story-on-mountpoint-for-amazon-s3-a-high-performance-open-source-file-client/"&gt;mounting an Amazon S3 bucket as a local file system&lt;/a&gt;. With Mountpoint for Amazon S3, your applications can access objects stored in Amazon S3 through file operations like &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt;. Mountpoint for Amazon S3 automatically translates these operations into S3 object API calls, giving your applications access to the elastic storage and throughput of Amazon S3 through a file interface.&lt;/p&gt; 
&lt;p&gt;Mountpoint for Amazon S3 is optimized for applications that need high read throughput to large objects, potentially from many clients at once, and to write new objects sequentially from a single client at a time. This means it's a great fit for applications that use a file interface to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;read large objects from S3, potentially from many instances concurrently, without downloading them to local storage first&lt;/li&gt; 
 &lt;li&gt;access only some S3 objects out of a larger data set, but can't predict which objects in advance&lt;/li&gt; 
 &lt;li&gt;upload their output to S3 directly, or upload files from local storage with tools like &lt;code&gt;cp&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;but probably not the right fit for applications that:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;use file operations that S3 doesn't natively support, like directory renaming or symlinks&lt;/li&gt; 
 &lt;li&gt;make edits to existing files (don't work on your Git repository or run &lt;code&gt;vim&lt;/code&gt; in Mountpoint 😄)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mountpoint for Amazon S3 does not implement all the features of a POSIX file system, and there are some differences that may affect compatibility with your application. See &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/SEMANTICS.md"&gt;Mountpoint file system behavior&lt;/a&gt; for a detailed description of Mountpoint for Amazon S3's behavior and POSIX support and how they could affect your application. To troubleshoot file operations that may not be supported by Mountpoint, see the &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/TROUBLESHOOTING.md"&gt;troubleshooting documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Current status&lt;/h2&gt; 
&lt;p&gt;Mountpoint for Amazon S3 is generally available! We're tracking future feature development on the &lt;a href="https://github.com/orgs/awslabs/projects/84"&gt;Mountpoint for Amazon S3 public roadmap&lt;/a&gt;. We're always interested in feedback on features, performance, and compatibility. Please send feedback by &lt;a href="https://github.com/awslabs/mountpoint-s3/issues/new/choose"&gt;opening a new GitHub issue&lt;/a&gt; or adding your input to an existing roadmap issue.&lt;/p&gt; 
&lt;h3&gt;Notices&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Mountpoint for Amazon S3 v1.4.0, released on January 26, 2024, contains an &lt;a href="https://github.com/awslabs/mountpoint-s3/pull/751"&gt;issue&lt;/a&gt; that causes intermittent read failures. We recommend that customers using v1.4.0 upgrade to v1.4.1 or later.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;Run these two commands to install Mountpoint for Amazon S3 on your Amazon Linux EC2 instance (for Graviton instances, replace &lt;code&gt;x86_64&lt;/code&gt; with &lt;code&gt;arm64&lt;/code&gt; in the URL):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm
sudo yum install -y ./mount-s3.rpm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Ubuntu, use these commands instead (for Graviton instances, replace &lt;code&gt;x86_64&lt;/code&gt; with &lt;code&gt;arm64&lt;/code&gt; in the URL):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.deb
sudo apt-get install -y ./mount-s3.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href="https://github.com/awslabs/mountpoint-s3/raw/main/doc/INSTALL.md"&gt;Installing Mountpoint for Amazon S3&lt;/a&gt; for detailed instructions and other installation options, including the &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/s3-csi.html"&gt;Mountpoint for Amazon S3 CSI driver&lt;/a&gt; for Kubernetes applications, or building from source.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Once you've got Mountpoint for Amazon S3 installed, you can mount your Amazon S3 bucket. You'll need valid AWS credentials to access your bucket. Mountpoint will automatically use credentials from &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html"&gt;an IAM role associated with your EC2 instance&lt;/a&gt;, or the &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; environment variables, or from &lt;a href="https://github.com/awslabs/mountpoint-s3/raw/main/doc/CONFIGURATION.md#aws-credentials"&gt;several other sources&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To mount your bucket, run this command, replacing &lt;code&gt;amzn-s3-demo-bucket&lt;/code&gt; with the name of your bucket and &lt;code&gt;/path/to/mount&lt;/code&gt; with the directory you want to mount the bucket to:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mount-s3 amzn-s3-demo-bucket /path/to/mount
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can work with your bucket contents as if they were a local file system:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ls /path/to/mount
echo "Hello World!" &amp;gt; /path/to/mount/Data.txt
cat /path/to/mount/Data.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you're finished accessing your bucket, you can unmount it (you might need &lt;code&gt;sudo&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;umount /path/to/mount
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href="https://github.com/awslabs/mountpoint-s3/raw/main/doc/CONFIGURATION.md"&gt;Configuring Mountpoint for Amazon S3&lt;/a&gt; for more details on how to configure and use Mountpoint.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Compatibility with other storage services&lt;/h3&gt; 
&lt;p&gt;Mountpoint for Amazon S3 is designed for high-performance access to the Amazon S3 service. While it may be functional against other storage services that use S3-like APIs, we aren't able to provide support for those use cases, and they may inadvertently break when we make changes to better support Amazon S3. We welcome contributions of minor compatibility fixes or performance improvements for these services if the changes can be tested against Amazon S3.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions to Mountpoint for Amazon S3! Please see &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to report bugs or submit pull requests. We especially welcome contributions to issues tagged as &lt;a href="https://github.com/awslabs/mountpoint-s3/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;good first issues to work on&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For potential bug reports, see &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/LOGGING.md"&gt;LOGGING.md&lt;/a&gt; for details on how to capture logging data. For performance issues, see &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/BENCHMARKING.md"&gt;BENCHMARKING.md&lt;/a&gt; for documentation about performance regression testing.&lt;/p&gt; 
&lt;h3&gt;Security&lt;/h3&gt; 
&lt;p&gt;If you discover a potential security issue in this project we ask that you notify AWS Security via our &lt;a href="http://aws.amazon.com/security/vulnerability-reporting/"&gt;vulnerability reporting page&lt;/a&gt;. Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;This project has adopted the &lt;a href="https://aws.github.io/code-of-conduct"&gt;Amazon Open Source Code of Conduct&lt;/a&gt;. See &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/CODE_OF_CONDUCT.md"&gt;CODE_OF_CONDUCT.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the Apache-2.0 License. It builds on a number of other awesome projects with open source licenses, primarily:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/cberner/fuser"&gt;fuser&lt;/a&gt; bindings for FUSE (MIT license)&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://docs.aws.amazon.com/sdkref/latest/guide/common-runtime.html"&gt;AWS Common Runtime&lt;/a&gt; for interacting with S3 (Apache 2.0 license)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/deny.toml"&gt;deny.toml&lt;/a&gt; for a list of licenses used by our dependencies.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CyberTimon/RapidRAW</title>
      <link>https://github.com/CyberTimon/RapidRAW</link>
      <description>&lt;p&gt;A beautiful, non-destructive, and GPU-accelerated RAW image editor built with performance in mind.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/editor.png" alt="RapidRAW Editor" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;&lt;img src="https://img.shields.io/badge/rust-%23000000.svg?style=for-the-badge&amp;amp;logo=rust&amp;amp;logoColor=white" alt="Rust" /&gt;&lt;/a&gt; &lt;a href="https://react.dev/"&gt;&lt;img src="https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&amp;amp;logo=react&amp;amp;logoColor=%2361DAFB" alt="React" /&gt;&lt;/a&gt; &lt;a href="https://tauri.app/"&gt;&lt;img src="https://img.shields.io/badge/Tauri-24C8DB?style=for-the-badge&amp;amp;logo=tauri&amp;amp;logoColor=white" alt="Tauri" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/AGPL-3.0"&gt;&lt;img src="https://img.shields.io/badge/License-AGPL_v3-blue.svg?style=for-the-badge" alt="AGPL-3.0" /&gt;&lt;/a&gt; &lt;a href="https://github.com/CyberTimon/RapidRAW/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/CyberTimon/RapidRAW?style=for-the-badge&amp;amp;logo=github&amp;amp;label=Stars" alt="GitHub stars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;RapidRAW&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A beautiful, non-destructive, and GPU-accelerated RAW image editor built with performance in mind.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;RapidRAW is a modern, high-performance alternative to Adobe Lightroom®. It delivers a simple, beautiful editing experience in a lightweight package (under 20MB) for Windows, macOS, and Linux.&lt;/p&gt; 
&lt;p&gt;I developed this project as a personal challenge at the age of 18. My goal was to create a high-performance tool for my own photography workflow while deepening my understanding of both React and Rust, with the support from Google Gemini.&lt;/p&gt; 
&lt;table width="100%"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td width="50%" valign="top" align="center"&gt; &lt;h3&gt;Download RapidRAW&lt;/h3&gt; &lt;p&gt;Get the latest release for Windows, macOS, and Linux. Packaged and ready to run.&lt;/p&gt; &lt;strong&gt;&lt;a href="https://github.com/CyberTimon/RapidRAW/releases/latest"&gt;Download Latest Version →&lt;/a&gt;&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt; &lt;/td&gt; 
   &lt;td width="50%" valign="top" align="center"&gt; &lt;h3&gt;Read the Docs&lt;/h3&gt; &lt;p&gt;Learn how to use RapidRAW with step-by-step tutorials, from adjustments to masking.&lt;/p&gt; &lt;strong&gt;&lt;a href="https://github.com/CyberTimon/RapidRAW-Docs"&gt;View Tutorials &amp;amp; Examples →&lt;/a&gt;&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;Have fun!&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;For Who Is This?&lt;/strong&gt;&lt;/summary&gt; RapidRAW is for photographers who love to edit their photos in a 
 &lt;strong&gt;clean, fast, and simple workflow&lt;/strong&gt;. It prioritizes speed, a beautiful user interface, and powerful tools that let you achieve your creative color vision quickly. 
 &lt;br /&gt;
 &lt;br /&gt; It is 
 &lt;strong&gt;not&lt;/strong&gt; for users who seek absolute, perfect color accuracy. While the results are great for most purposes, the focus is on a fluid, creative process rather than perfect color precision. 
 &lt;br /&gt;
 &lt;br /&gt; RapidRAW is still in active development and isn't yet as polished as mature tools like Darktable, RawTherapee, or Adobe Lightroom®. Right now, the focus is on building a fast, enjoyable core editing experience. You may encounter bugs - if you do, please report them so I can fix them :) Your feedback really helps! 
 &lt;br /&gt;
 &lt;br /&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Recent Changes&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-27:&lt;/strong&gt; Sort library by exif metadata &amp;amp; release cleanup / bug fixes&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-26:&lt;/strong&gt; Collage maker to create unique collages with many different layouts, spacing &amp;amp; border radius&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-23:&lt;/strong&gt; Color calibration tool to adjust RGB primaries &amp;amp; adjustments visibility settings&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-22:&lt;/strong&gt; Issue template &amp;amp; CI/CD improvements&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-20:&lt;/strong&gt; Universal presets importer, prioritize dGPU &amp;amp; improved local contrast tools (sharpness, clarity etc.)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-17:&lt;/strong&gt; Automatic image culling (duplicate &amp;amp; blur detection)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-14:&lt;/strong&gt; Grid previews in community panel &amp;amp; improved ComfyUi workflow&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-12:&lt;/strong&gt; New community presets panel to share &amp;amp; showcase presets&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-10:&lt;/strong&gt; Extended generative AI roadmap &amp;amp; started building RapidRAW website&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;2025-09-09:&lt;/strong&gt; Many shader improvements &amp;amp; bug fixes, invert tint slider&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;strong&gt;Expand further&lt;/strong&gt;&lt;/summary&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;2025-09-06:&lt;/strong&gt; New update notifier that alerts users when a new version becomes available&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-09-04:&lt;/strong&gt; Added toggleable clipping warnings (blue = shadows, red = highlights)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-09-02:&lt;/strong&gt; Transition to Rust 2024 &amp;amp; Cache image on GPU&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-31:&lt;/strong&gt; Cancel thumbnail generation on folder change &amp;amp; optimized ai patch saving&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-30:&lt;/strong&gt; Optimize ComfyUI image transfer &amp;amp; speed&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-28:&lt;/strong&gt; Chromatic aberration correction &amp;amp; Shader improvements&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-26:&lt;/strong&gt; User customisable ComfyUI workflow selection&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-25:&lt;/strong&gt; Make LUTs parser more robust (support more advanced formats)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-24:&lt;/strong&gt; Improved keyboard shortcuts&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-23:&lt;/strong&gt; Estimate file size before exporting&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-21:&lt;/strong&gt; Added LUTs (.cube, .3dl, .png, .jpg, .jpeg, .tiff) support&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-16:&lt;/strong&gt; Fast AI sky masks&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-15:&lt;/strong&gt; Show full resolution image when zooming in&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-15:&lt;/strong&gt; Implement Tauri's IPC as a replacement for the slow Base64 image transfer&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-12:&lt;/strong&gt; Relative zoom indicator&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-11:&lt;/strong&gt; TypeScript cleanup &amp;amp; many bug fixes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-09:&lt;/strong&gt; Local inpainting without the need for ComfyUI, ability to change thumbnail aspect ratio&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-09:&lt;/strong&gt; Frontend refactored to TypeScript thanks to @varjolintu&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-08:&lt;/strong&gt; New onnxruntime download strategy &amp;amp; the base for local inpainting&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-05:&lt;/strong&gt; Improved HSL cascading, UI &amp;amp; animation improvements, ability to grow &amp;amp; shrink / feather AI masks&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-03:&lt;/strong&gt; New high performance, seamless image panorama stitcher (without any dependencies on OpenCV)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-02:&lt;/strong&gt; Added an image straightening tool and improved crop &amp;amp; rotation functionality (especially on portrait images)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-08-02:&lt;/strong&gt; A new dedicated image importer, ability to rename and batch rename files, improved dark theme, and other fixes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-31:&lt;/strong&gt; Ability to tag &amp;amp; filter images by color labels, refactored image right clicking&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-31:&lt;/strong&gt; Reimplemented the functionality of GPU processing (GPU cropping, etc.) -&amp;gt; No longer dependent on TEXTURE_BINDING_ARRAY&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-29:&lt;/strong&gt; Refactored generative AI foundation, many small fixes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-27:&lt;/strong&gt; Automatic AI image tagging, overall mask transparency setting per mask&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-25:&lt;/strong&gt; Fuji RAF X-Trans sensor support (new x-trans demosaicing algo)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-24:&lt;/strong&gt; Auto crop when cropping an image (to prevent black borders), added drag &amp;amp; drop sort abilty to presets panel&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-22:&lt;/strong&gt; Significant improvements to the shader: More accurate exposure slider, better tone mapper (simplified ACES)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-21:&lt;/strong&gt; Remember scroll position when going into the editing section&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-20:&lt;/strong&gt; Ability to add presets to folders, export preset folders etc, preset &lt;em&gt;animations&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-20:&lt;/strong&gt; Tutorials on how to use RapidRAW&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-19:&lt;/strong&gt; Initial color negative conversion implementation, shader improvements&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-19:&lt;/strong&gt; New color wheels, persistent collapsed / expanded state for UI elements&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-19:&lt;/strong&gt; Fixed banding &amp;amp; purple artefacts on RAW images, better color noise reduction, show exposure in stops&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-18:&lt;/strong&gt; Smooth zoom slider, new adaptive editor theme setting&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-18:&lt;/strong&gt; New export functionality: Export with metadata, GPS metadata remover, batch export file naming scheme using tags&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-18:&lt;/strong&gt; Ability to delete the associated RAW/JPEG in right click delete operations&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-17:&lt;/strong&gt; Small bug fixes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-13:&lt;/strong&gt; Native looking titlebar and ability to input precise number into sliders&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-13:&lt;/strong&gt; Huge update to masks: You can now add multiple masks to a mask containers, subtract / add / combine masks etc.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-12:&lt;/strong&gt; Improved curves tool, more shader improvements, improved handling of very large files&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-11:&lt;/strong&gt; More accurate shader, reorganized main library preferences dropdown, smoother histogram, more realistic film grain&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-11:&lt;/strong&gt; Added a HUD-like waveform overlay toggle to display specific channel waveforms (w-key)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-10:&lt;/strong&gt; Rewritten batch export system and async thumbnail generation (makes the loading of large folders a lot more fluid)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-10:&lt;/strong&gt; Window transparency can now be toggled in the settings, thanks to @andrewazores&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-08:&lt;/strong&gt; Ability to toggle the visibility of individual adjustments sections&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-08:&lt;/strong&gt; Fixed top-left zoom bug, corrected scale behavior in crop panel, keep default original aspect ratio&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-08:&lt;/strong&gt; Added image rating filter and redesigned the metadata panel with improved layout, clearer sections, and an embedded GPS map&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-07:&lt;/strong&gt; Improved generative AI features and updated &lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#ai-roadmap"&gt;AI Roadmap&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-06:&lt;/strong&gt; Initial generative AI integration with &lt;a href="https://github.com/comfyanonymous/ComfyUI"&gt;ComfyUI&lt;/a&gt; - for more details, checkout the &lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#ai-roadmap"&gt;AI Roadmap&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-05:&lt;/strong&gt; Ability to overwrite preset with current settings&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-04:&lt;/strong&gt; High speed and precise cache to significantly accelerate large image editing&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-04:&lt;/strong&gt; Greatly improved shader with better dehaze, more accurate curves etc&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-04:&lt;/strong&gt; Predefined 90° clockwise rotation and ability to flip images&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-03:&lt;/strong&gt; Switched from &lt;a href="https://github.com/pedrocr/rawloader"&gt;rawloader&lt;/a&gt; to &lt;a href="https://github.com/dnglab/dnglab/tree/main/rawler"&gt;rawler&lt;/a&gt; to support a wider range of RAW formats&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-07-02:&lt;/strong&gt; AI-powered foreground / background masking&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-06-30:&lt;/strong&gt; AI-powered subject masking&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-06-30:&lt;/strong&gt; Precompiled Linux builds&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-06-29:&lt;/strong&gt; New 5:4 aspect ratio, new low contrast grey theme and more cameras support (DJI Mavic lineup)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-06-28:&lt;/strong&gt; Release cleanup, CI/CD improvements and minor fixes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;2025-06-27:&lt;/strong&gt; Initial release. For more information about the earlier progress, look at the &lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#initial-development-log"&gt;Initial Development Log&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
&lt;/details&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#key-features"&gt;Key Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#demo--screenshots"&gt;Demo &amp;amp; Screenshots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#the-idea"&gt;The Idea&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#current-priorities"&gt;Current Priorities&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#ai-roadmap"&gt;AI Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#initial-development-log"&gt;Initial Development Log&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#system-requirements"&gt;System Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#special-thanks"&gt;Special Thanks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#support-the-project"&gt;Support the Project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/#license--philosophy"&gt;License &amp;amp; Philosophy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;table width="100%"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td valign="top" width="50%"&gt; &lt;h4&gt;Core Editing Engine&lt;/h4&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;GPU-Accelerated Processing:&lt;/strong&gt; All image adjustments are processed on the GPU using a custom WGSL shader for rapid feedback.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Masking:&lt;/strong&gt; Create masks with AI subject, sky and foreground detection. Combine with traditional Brush, Linear, and Radial masks for great control.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Generative Edits:&lt;/strong&gt; Remove objects or add new elements with text prompts. Each edit creates a non-destructive patch layer, powered by an optional ComfyUI backend.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Full RAW Support:&lt;/strong&gt; Supports a wide range of RAW camera formats thanks to rawler.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Non-Destructive Workflow:&lt;/strong&gt; All edits are stored in a &lt;code&gt;.rrdata&lt;/code&gt; sidecar file, leaving your original images untouched.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;32-bit Precision:&lt;/strong&gt; Ensures high-quality adjustments without banding or data loss.&lt;/li&gt; 
    &lt;/ul&gt; &lt;h4&gt;Professional Grade Adjustments&lt;/h4&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;Tonal Controls:&lt;/strong&gt; Exposure, Contrast, Highlights, Shadows, Whites, and Blacks.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Tone Curves:&lt;/strong&gt; Full control over Luma, Red, Green, and Blue channels.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Color Grading:&lt;/strong&gt; Temperature, Tint, Vibrance, Saturation, and a full HSL color mixer.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Detail Enhancement:&lt;/strong&gt; Sharpening, Clarity, Structure, and Noise Reduction.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt; LUTs, Dehaze, Vignette, and Film Grain simulation.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Transform Tools:&lt;/strong&gt; Crop with aspect ratio locking, Rotate, and Flip.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/td&gt; 
   &lt;td valign="top" width="50%"&gt; &lt;h4&gt;Library &amp;amp; Workflow&lt;/h4&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;Image Library:&lt;/strong&gt; Effortlessly sort, rate, tag, and manage your entire photo collection for a streamlined and efficient workflow.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Folder Management:&lt;/strong&gt; Integrated folder tree, create, rename, and delete folders directly within the app.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;File Operations:&lt;/strong&gt; Import, copy, move, rename, and duplicate images and their associated edits.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Filmstrip View:&lt;/strong&gt; Quickly navigate between all the images in your current folder while editing.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Batch Operations:&lt;/strong&gt; Save significant time by applying a consistent set of adjustments or exporting entire batches of images simultaneously.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;EXIF Data Viewer:&lt;/strong&gt; Gain insights by inspecting the complete metadata from your camera, including shutter speed, aperture, ISO, and lens information.&lt;/li&gt; 
    &lt;/ul&gt; &lt;h4&gt;Productivity &amp;amp; UI&lt;/h4&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;strong&gt;Preset System:&lt;/strong&gt; Create, save, import, and export your favorite looks.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Copy &amp;amp; Paste Settings:&lt;/strong&gt; Quickly transfer adjustments between images.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Undo/Redo History:&lt;/strong&gt; A robust history system for every edit.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Customizable UI:&lt;/strong&gt; Resizable panels and multiple beautiful UI themes with smooth animations.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Panorama Stitcher:&lt;/strong&gt; Seamlessly combine multiple images into a wide panorama.&lt;/li&gt; 
     &lt;li&gt;&lt;strong&gt;Exporting:&lt;/strong&gt; Control file format, quality, naming scheme, metadata, resizing options on export.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Demo &amp;amp; Screenshots&lt;/h2&gt; 
&lt;p&gt;Here's RapidRAW in action.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/editor.gif" alt="The main editor interface in action" /&gt;&lt;br /&gt; &lt;em&gt;The main editor interface in action.&lt;/em&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;table width="100%"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td width="50%" align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/batch.gif" alt="Powerful batch operations and export" style="max-width: 100%;" /&gt; &lt;br /&gt; &lt;em&gt;Powerful batch operations and export.&lt;/em&gt; &lt;/td&gt; 
   &lt;td width="50%" align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/customization.gif" alt="Customizable editor layout and panels" style="max-width: 100%;" /&gt; &lt;br /&gt; &lt;em&gt;Customizable editor layout and panels.&lt;/em&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/masks.gif" alt="Advanced masking to speedup workflow" style="max-width: 100%;" /&gt; &lt;br /&gt; &lt;em&gt;Advanced masking to speedup workflow.&lt;/em&gt; &lt;/td&gt; 
   &lt;td width="50%" align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/ai.gif" alt="Experimental generative AI features" style="max-width: 100%;" /&gt; &lt;br /&gt; &lt;em&gt;Experimental generative AI features.&lt;/em&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/library.gif" alt="Library navigation and folder management" style="max-width: 100%;" /&gt; &lt;br /&gt; &lt;em&gt;Library navigation and folder management.&lt;/em&gt; &lt;/td&gt; 
   &lt;td width="50%" align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/themes.gif" alt="Beautiful themes and UI customization" style="max-width: 100%;" /&gt; &lt;br /&gt; &lt;em&gt;Beautiful themes and UI customization.&lt;/em&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you like the theme images and want to see more of my own images, checkout my Instagram: &lt;a href="https://www.instagram.com/timonkaech.photography/"&gt;&lt;strong&gt;@timonkaech.photography&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;The Idea&lt;/h2&gt; 
&lt;h4&gt;The Motivation&lt;/h4&gt; 
&lt;p&gt;As a photography enthusiast, I often found existing software to be sluggish and resource-heavy on my machine. Born from the desire for a more responsive and streamlined photo editing experience, I set out to build my own. The goal was to create a tool that was not only fast but also helped me learn the details of digital image processing and camera technology.&lt;/p&gt; 
&lt;h4&gt;The Challenge&lt;/h4&gt; 
&lt;p&gt;I set an ambitious goal to rapidly build a functional, feature-rich application from an empty folder. This personal challenge pushed me to learn quickly and focus intensely on the core architecture and user experience.&lt;/p&gt; 
&lt;h4&gt;The Process&lt;/h4&gt; 
&lt;p&gt;The foundation is built on Rust for its safety and performance, and Tauri for its ability to create lightweight, cross-platform desktop apps with a web frontend. The entire image processing pipeline is offloaded to the GPU via WGPU and a custom WGSL shader, ensuring that even on complex edits with multiple masks, the UI remains fluid.&lt;/p&gt; 
&lt;p&gt;I am &lt;strong&gt;immensely grateful for Google's Gemini suite of AI models.&lt;/strong&gt; As an 18-year-old without a formal background in advanced mathematics or image science, the AI Studio's free tier was an invaluable assistant, helping me research and implement concepts like the Menon demosaicing algorithm.&lt;/p&gt; 
&lt;h2&gt;Current Priorities&lt;/h2&gt; 
&lt;p&gt;While the core functionality is in place, I'm actively working on improving several key areas. Here's a transparent look at the current focus:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Task&lt;/th&gt; 
   &lt;th&gt;Priority&lt;/th&gt; 
   &lt;th&gt;Difficulty&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Find a better X-Trans demosaicing algorithm&lt;/td&gt; 
   &lt;td&gt;Medium&lt;/td&gt; 
   &lt;td&gt;High&lt;/td&gt; 
   &lt;td&gt;[ ]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Refactoring the frontend (reduce prop drilling in React components)&lt;/td&gt; 
   &lt;td&gt;Low&lt;/td&gt; 
   &lt;td&gt;Medium&lt;/td&gt; 
   &lt;td&gt;[ ]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Write a tutorial on how to connect ComfyUI with RapidRAW&lt;/td&gt; 
   &lt;td&gt;Medium&lt;/td&gt; 
   &lt;td&gt;Medium&lt;/td&gt; 
   &lt;td&gt;[ ]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Centralize Coordinate Transformation Logic - See &lt;a href="https://github.com/CyberTimon/RapidRAW/issues/245"&gt;#245&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Medium&lt;/td&gt; 
   &lt;td&gt;High&lt;/td&gt; 
   &lt;td&gt;[ ]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Improve speed on older systems (e.g. Pascal GPUs)&lt;/td&gt; 
   &lt;td&gt;Medium&lt;/td&gt; 
   &lt;td&gt;High&lt;/td&gt; 
   &lt;td&gt;[ ]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Implement warping tools&lt;/td&gt; 
   &lt;td&gt;Low&lt;/td&gt; 
   &lt;td&gt;High&lt;/td&gt; 
   &lt;td&gt;[ ]&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;AI Roadmap&lt;/h2&gt; 
&lt;p&gt;I've designed RapidRAW's AI features with flexibility in mind. You have three ways to use them, giving you the choice between fast local tools, powerful self-hosting, and simple cloud convenience.&lt;/p&gt; 
&lt;h3&gt;1. Built-in AI Tools (Local &amp;amp; Free)&lt;/h3&gt; 
&lt;p&gt;These features are integrated directly into RapidRAW and run entirely on your computer. They are fast, free, and require no setup from you.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;AI Masking:&lt;/strong&gt; Instantly detect and mask subjects, skies, and foregrounds.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automatic Tagging:&lt;/strong&gt; The image library is automatically tagged with keywords using a local CLIP model, making your photos easy to search.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Simple Generative Replace:&lt;/strong&gt; A basic, CPU-based inpainting tool for removing small distractions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. Self-Hosted Integration with ComfyUI (Local &amp;amp; Free)&lt;/h3&gt; 
&lt;p&gt;For users with a capable GPU who want maximum control, I've made it so RapidRAW can connect to your own local &lt;a href="https://github.com/comfyanonymous/ComfyUI"&gt;ComfyUI&lt;/a&gt; server.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Full Control:&lt;/strong&gt; Use your own hardware and any custom Stable Diffusion model or workflow you choose.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cost-Free Power:&lt;/strong&gt; Leverage your existing hardware for advanced generative edits at no extra cost.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom Workflow Selection:&lt;/strong&gt; Import your own ComfyUI workflows and use your custom nodes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. Optional Cloud Service (Subscription)&lt;/h3&gt; 
&lt;p&gt;To be clear, &lt;strong&gt;I won't lock features behind a paywall.&lt;/strong&gt; All of RapidRAW's functionality is available for free if you use the built-in tools or self-host.&lt;/p&gt; 
&lt;p&gt;However, I realize that not everyone has the powerful hardware or technical desire to set up and maintain their own ComfyUI server. For those who want a simpler solution, I will be offering an optional &lt;strong&gt;$5/month subscription&lt;/strong&gt; (pricing is not final).&lt;/p&gt; 
&lt;p&gt;This is purely a &lt;strong&gt;convenience service&lt;/strong&gt;. It provides the &lt;strong&gt;same high-quality results&lt;/strong&gt; as a self-hosted setup without any of the hassle - just log in, and it works. Subscribing is also the best way to support the project and help me dedicate more time to its development.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;Built-in AI (Free)&lt;/th&gt; 
   &lt;th&gt;Self-Hosted (ComfyUI)&lt;/th&gt; 
   &lt;th&gt;Optional Cloud Service&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Cost&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Free, included&lt;/td&gt; 
   &lt;td&gt;Free (requires your own hardware)&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;$5 / month&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Manual ComfyUI server setup&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;None (Just log in)&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Use Case&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Everyday workflow acceleration&lt;/td&gt; 
   &lt;td&gt;Full control for technical users&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Maximum convenience&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Status&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Available&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Available&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Coming Soon&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Click to see the Generative AI features in action&lt;/strong&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/.github/assets/ai.gif" alt="Experimental generative AI features" style="max-width: 100%;" /&gt; &lt;br /&gt; &lt;em&gt;Generative Replace, which can be powered by either a local ComfyUI backend or the upcoming optional cloud service.&lt;/em&gt; &lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Initial Development Log&lt;/h2&gt; 
&lt;p&gt;This project began as an intensive sprint to build the core functionality. Here's a summary of the initial progress and key milestones:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Click to expand the day-by-day development log&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Day 1: June 13th, 2025&lt;/strong&gt; - Project inception, basic Tauri setup, and initial brightness/contrast shader implementation.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 2: June 14th&lt;/strong&gt; - Core architecture refactor, full library support (folder tree, image list), and optimized image loading. Implemented histogram and curve editor support. Added UI themes.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 3: June 15th&lt;/strong&gt; - Implemented a working crop tool, preset system, and context menus. Enabled auto-saving of edits to sidecar files and auto-thumbnail generation. Refined color adjustments.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 4: June 16th&lt;/strong&gt; - Initial prototype for local adjustments with masking. Added mask support to presets. Bug-free image preview switching.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 5: June 17th&lt;/strong&gt; - Major UI overhaul. Created the filmstrip and resizable panel layout. Fixed mask scaling issues and improved the library/welcome screen.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 6: June 18th&lt;/strong&gt; - Performance tuning. Reduced GPU calls for adjustments, leading to a much smoother cropping and editing experience. Implemented saving of panel UI state.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 7: June 19th&lt;/strong&gt; - Enhanced library functionality. Added multi-selection and the ability to copy/paste adjustments across multiple images.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 8: June 20th&lt;/strong&gt; - Implemented initial RAW file support and an EXIF metadata viewer.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 9: June 21st&lt;/strong&gt; - Added advanced detail adjustments (Clarity, Sharpening, Dehaze, etc.) and film grain. Developed a linear RAW processing pipeline.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 10: June 22nd&lt;/strong&gt; - Implemented layer stacking for smooth preview transitions. Built a robust export panel with batch export capabilities. Added import/export for presets.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 11: June 23rd&lt;/strong&gt; - Added full undo/redo functionality integrated with a custom history hook. Improved context menus and completed the settings panel.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 12: June 24th&lt;/strong&gt; - Implemented image rotation and fixed all mask scaling/alignment issues related to cropping and rotation.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 13: June 25th&lt;/strong&gt; - Rewrote the mask system to be bitmap-based. Implemented brush and linear gradient tools, with semi-transparent visualization.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Day 14: June 26th-27th&lt;/strong&gt; - Final polish. Added universal keyboard shortcuts, full adjustment support for masks, theme management, and final UI/UX improvements. This ReadMe.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You have two options to run RapidRAW:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Download the Latest Release (Recommended)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Windows &amp;amp; macOS:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Grab the pre-built installer or application bundle for your operating system from the &lt;a href="https://github.com/CyberTimon/RapidRAW/releases"&gt;&lt;strong&gt;Releases&lt;/strong&gt;&lt;/a&gt; page.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The official Flatpak package supports all Linux distributions and is available on &lt;a href="https://flathub.org/apps/io.github.CyberTimon.RapidRAW"&gt;Flathub&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;On Debian-based distributions, install the &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href="https://github.com/CyberTimon/RapidRAW/releases"&gt;&lt;strong&gt;Releases&lt;/strong&gt;&lt;/a&gt; page.&lt;/li&gt; 
 &lt;li&gt;On Arch-based distributions, use the &lt;a href="https://aur.archlinux.org/packages/rapidraw-bin"&gt;&lt;code&gt;rapidraw-bin&lt;/code&gt;&lt;/a&gt; package from the AUR.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2. Build from Source&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you want to build the project yourself, you'll need to have &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust&lt;/a&gt; and &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; installed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1. Clone the repository
git clone https://github.com/CyberTimon/RapidRAW.git
cd RapidRAW

# 2. Install frontend dependencies
npm install

# 3. Build and run the application in development mode
# Use --release for a build that runs much faster (image loading etc.)
npx tauri dev --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;System Requirements&lt;/h2&gt; 
&lt;p&gt;RapidRAW is built to be lightweight and cross-platform. The minimum (tested) requirements are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Windows 10 or newer&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;macOS:&lt;/strong&gt; macOS 13 (Ventura) or newer&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux:&lt;/strong&gt; Ubuntu 22.04+ or a compatible modern distribution&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Common Problems&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Linux Wayland/WebKit Crash&lt;/summary&gt; 
 &lt;p&gt;If RapidRAW crashes on Wayland (e.g. GNOME + NVIDIA), try launching it with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;WEBKIT_DISABLE_DMABUF_RENDERER=1 RapidRAW
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;or&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;WEBKIT_DISABLE_COMPOSITING_MODE=1 RapidRAW
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This issue is related to &lt;strong&gt;WebKit&lt;/strong&gt; and &lt;strong&gt;NVIDIA drivers&lt;/strong&gt;, not RapidRAW directly. Switching to &lt;strong&gt;X11&lt;/strong&gt; or using &lt;strong&gt;AMD / Intel GPUs&lt;/strong&gt; may also help.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href="https://github.com/CyberTimon/RapidRAW/issues/306"&gt;#306&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;I’m really grateful for any contributions you make to RapidRAW! Whether you’re reporting a bug, suggesting a new feature, or submitting a pull request - your input helps shape the project and makes it better for everyone. Don’t hesitate to open an issue or start a discussion to share your ideas.&lt;/p&gt; 
&lt;h3&gt;Image format issues&lt;/h3&gt; 
&lt;p&gt;If your camera’s RAW files aren’t supported, please open a issue here first: &lt;a href="https://github.com/dnglab/dnglab/issues"&gt;rawler issues&lt;/a&gt;. Once support is added in rawler, create a issue for RapidRAW so I can update the packages and keep everything in sync.&lt;/p&gt; 
&lt;h3&gt;Feature requests&lt;/h3&gt; 
&lt;p&gt;Got an idea? Add it in the discussion tab with the &lt;strong&gt;"idea"&lt;/strong&gt; tag. This way, the community can vote on features they'd love to see, and I can focus on the most impactful ones.&lt;/p&gt; 
&lt;h3&gt;Stale issues&lt;/h3&gt; 
&lt;p&gt;To keep things tidy and relevant, please update your issue if the issue still exists with the latest release. Issues with no updates after 4-6 weeks will be closed as stale.&lt;/p&gt; 
&lt;p&gt;Thank you for contributing your time and ideas - every bit of feedback makes RapidRAW a stronger and more useful project!&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;A huge thank you to the following projects and tools that were very important in the development of RapidRAW:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://aistudio.google.com"&gt;Google AI Studio&lt;/a&gt;:&lt;/strong&gt; For providing amazing assistance in researching, implementing image processing algorithms and giving an overall speed boost.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/dnglab/dnglab/tree/main/rawler"&gt;rawler&lt;/a&gt;:&lt;/strong&gt; For the excellent Rust crate that provides the foundation for RAW file processing in this project.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support the Project&lt;/h2&gt; 
&lt;p&gt;As an 18-year-old developer balancing this project with an apprenticeship, your support means the world. If you find RapidRAW useful or exciting, please consider donating to help me dedicate more time to its development and cover any associated costs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Ko-fi:&lt;/strong&gt; &lt;a href="https://ko-fi.com/cybertimon"&gt;Donate on Ko-fi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Crypto:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;BTC: &lt;code&gt;36yHjo2dkBwQ63p3YwtqoYAohoZhhUTkCJ&lt;/code&gt; (min. 0.0001 because of broker)&lt;/li&gt; 
   &lt;li&gt;ETH: &lt;code&gt;0x597e6bdb97f3d0f1602b5efc8f3b7beb21eaf74a&lt;/code&gt; (min. 0.005 because of broker)&lt;/li&gt; 
   &lt;li&gt;SOL: &lt;code&gt;CkXM3C777S8iJX9h3MGSfwGxb85Yx7GHmynQUFSbZXUL&lt;/code&gt; (min. 0.01 because of broker)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License &amp;amp; Philosophy&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;strong&gt;GNU Affero General Public License v3.0 (AGPL-3.0)&lt;/strong&gt;. I chose this license to ensure that RapidRAW and any of its derivatives will always remain open-source and free for the community. It protects the project from being used in closed-source commercial software, ensuring that improvements benefit everyone.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/CyberTimon/RapidRAW/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>