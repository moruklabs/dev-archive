<rss version="2.0">
  <channel>
    <title>GitHub Go Daily Trending</title>
    <description>Daily Trending of Go in GitHub</description>
    <pubDate>Sun, 10 Aug 2025 05:57:46 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>shirou/gopsutil</title>
      <link>https://github.com/shirou/gopsutil</link>
      <description>&lt;p&gt;psutil for golang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gopsutil: psutil for golang&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/shirou/gopsutil/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/shirou/gopsutil/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Test" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/shirou/gopsutil/v4"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/shirou/gopsutil/v4.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://calver.org/"&gt;&lt;img src="https://img.shields.io/badge/calver-vMAJOR.YY.MM-22bfda.svg?sanitize=true" alt="Calendar Versioning" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This is a port of psutil (&lt;a href="https://github.com/giampaolo/psutil"&gt;https://github.com/giampaolo/psutil&lt;/a&gt;). The challenge is porting all psutil functions on some architectures.&lt;/p&gt; 
&lt;h2&gt;migration&lt;/h2&gt; 
&lt;h3&gt;v4 migration&lt;/h3&gt; 
&lt;p&gt;There are some breaking changes. Please see &lt;a href="https://github.com/shirou/gopsutil/releases/tag/v4.24.5"&gt;v4 release note&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Tag semantics&lt;/h2&gt; 
&lt;p&gt;gopsutil tag policy is almost same as Semantic Versioning, but automatically increases like &lt;a href="https://calver.org/"&gt;Ubuntu versioning&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, v4.24.04 means&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;v4: major version&lt;/li&gt; 
 &lt;li&gt;24: release year, 2024&lt;/li&gt; 
 &lt;li&gt;04: release month&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;gopsutil aims to keep backwards compatibility until major version change.&lt;/p&gt; 
&lt;p&gt;Tagged at every end of month, but if there are only a few commits, it can be skipped.&lt;/p&gt; 
&lt;h2&gt;Available Architectures&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;FreeBSD i386/amd64/arm&lt;/li&gt; 
 &lt;li&gt;Linux i386/amd64/arm(raspberry pi)&lt;/li&gt; 
 &lt;li&gt;Windows i386/amd64/arm/arm64&lt;/li&gt; 
 &lt;li&gt;Darwin amd64/arm64&lt;/li&gt; 
 &lt;li&gt;OpenBSD i386/amd64/armv7/arm64/riscv64 (Thank you @mpfz0r!)&lt;/li&gt; 
 &lt;li&gt;Solaris amd64 (developed and tested on SmartOS/Illumos, Thank you @jen20!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These have partial support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPU on DragonFly BSD (#893, Thank you @gballet!)&lt;/li&gt; 
 &lt;li&gt;host on Linux RISC-V (#896, Thank you @tklauser!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All works are implemented without cgo by porting C structs to golang structs.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "fmt"

    "github.com/shirou/gopsutil/v4/mem"
)

func main() {
    v, _ := mem.VirtualMemory()

    // almost every return value is a struct
    fmt.Printf("Total: %v, Free:%v, UsedPercent:%f%%\n", v.Total, v.Free, v.UsedPercent)

    // convert to JSON. String() is also implemented
    fmt.Println(v)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The output is below.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Total: 3179569152, Free:284233728, UsedPercent:84.508194%
{"total":3179569152,"available":492572672,"used":2895335424,"usedPercent":84.50819439828305, (snip...)}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can set alternative locations for various system directories by using the following environment variables:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;/proc: &lt;code&gt;HOST_PROC&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;/sys: &lt;code&gt;HOST_SYS&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;/etc: &lt;code&gt;HOST_ETC&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;/var: &lt;code&gt;HOST_VAR&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;/run: &lt;code&gt;HOST_RUN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;/dev: &lt;code&gt;HOST_DEV&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;/: &lt;code&gt;HOST_ROOT&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;/proc/N/mountinfo: &lt;code&gt;HOST_PROC_MOUNTINFO&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Adding settings using &lt;code&gt;context&lt;/code&gt; (from v3.23.6)&lt;/h3&gt; 
&lt;p&gt;As of v3.23.6, it is now possible to pass a path location using &lt;code&gt;context&lt;/code&gt;: import &lt;code&gt;"github.com/shirou/gopsutil/v3/common"&lt;/code&gt; and pass a context with &lt;code&gt;common.EnvMap&lt;/code&gt; set to &lt;code&gt;common.EnvKey&lt;/code&gt;, and the location will be used within each function.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	ctx := context.WithValue(context.Background(), 
		common.EnvKey, common.EnvMap{common.HostProcEnvKey: "/myproc"},
	)
	v, err := mem.VirtualMemoryWithContext(ctx)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;First priority is given to the value set in &lt;code&gt;context&lt;/code&gt;, then the value from the environment variable, and finally the default location.&lt;/p&gt; 
&lt;h3&gt;Caching&lt;/h3&gt; 
&lt;p&gt;As of v3.24.1, it is now possible to cached some values. These values default to false, not cached.&lt;/p&gt; 
&lt;p&gt;Be very careful that enabling the cache may cause inconsistencies. For example, if you enable caching of boottime on Linux, be aware that unintended values may be returned if &lt;a href="https://github.com/shirou/gopsutil/issues/1070#issuecomment-842512782"&gt;the boottime is changed by NTP after booted&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;host&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;EnableBootTimeCache&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;process&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;EnableBootTimeCache&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;Ex&lt;/code&gt; struct (from v4.24.5)&lt;/h3&gt; 
&lt;p&gt;gopsutil is designed to work across multiple platforms. However, there are differences in the information available on different platforms, such as memory information that exists on Linux but not on Windows.&lt;/p&gt; 
&lt;p&gt;As of v4.24.5, to access this platform-specific information, gopsutil provides functions named &lt;code&gt;Ex&lt;/code&gt; within the package. Currently, these functions are available in the mem and sensor packages.&lt;/p&gt; 
&lt;p&gt;The Ex structs are specific to each platform. For example, on Linux, there is an &lt;code&gt;ExLinux&lt;/code&gt; struct, which can be obtained using the &lt;code&gt;mem.NewExLinux()&lt;/code&gt; function. On Windows, it's &lt;code&gt;mem.ExWindows()&lt;/code&gt;. These Ex structs provide platform-specific information.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ex := NewExWindows()
v, err := ex.VirtualMemory()
if err != nil {
    panic(err)
}

fmt.Println(v.VirtualAvail)
fmt.Println(v.VirtualTotal)

// Output:
// 140731958648832
// 140737488224256
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;gopsutil aims to minimize platform differences by offering common functions. However, there are many requests to obtain unique information for each platform. The Ex structs are designed to meet those requests. Additional functionalities might be added in the future. The use of these structures makes it clear that the information they provide is specific to each platform, which is why they have been designed in this way.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://pkg.go.dev/github.com/shirou/gopsutil/v4"&gt;https://pkg.go.dev/github.com/shirou/gopsutil/v4&lt;/a&gt; or &lt;a href="https://godocs.io/github.com/shirou/gopsutil/v4"&gt;https://godocs.io/github.com/shirou/gopsutil/v4&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;go1.18 or above is required.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;More Info&lt;/h2&gt; 
&lt;p&gt;Several methods have been added which are not present in psutil, but will provide useful information.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;host/HostInfo() (linux) 
  &lt;ul&gt; 
   &lt;li&gt;Hostname&lt;/li&gt; 
   &lt;li&gt;Uptime&lt;/li&gt; 
   &lt;li&gt;Procs&lt;/li&gt; 
   &lt;li&gt;OS (ex: "linux")&lt;/li&gt; 
   &lt;li&gt;Platform (ex: "ubuntu", "arch")&lt;/li&gt; 
   &lt;li&gt;PlatformFamily (ex: "debian")&lt;/li&gt; 
   &lt;li&gt;PlatformVersion (ex: "Ubuntu 13.10")&lt;/li&gt; 
   &lt;li&gt;VirtualizationSystem (ex: "LXC")&lt;/li&gt; 
   &lt;li&gt;VirtualizationRole (ex: "guest"/"host")&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;IOCounters 
  &lt;ul&gt; 
   &lt;li&gt;Label (linux only) The registered &lt;a href="https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-block-dm"&gt;device mapper name&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;cpu/CPUInfo() (linux, freebsd) 
  &lt;ul&gt; 
   &lt;li&gt;CPU (ex: 0, 1, ...)&lt;/li&gt; 
   &lt;li&gt;VendorID (ex: "GenuineIntel")&lt;/li&gt; 
   &lt;li&gt;Family&lt;/li&gt; 
   &lt;li&gt;Model&lt;/li&gt; 
   &lt;li&gt;Stepping&lt;/li&gt; 
   &lt;li&gt;PhysicalID&lt;/li&gt; 
   &lt;li&gt;CoreID&lt;/li&gt; 
   &lt;li&gt;Cores (ex: 2)&lt;/li&gt; 
   &lt;li&gt;ModelName (ex: "Intel(R) Core(TM) i7-2640M CPU @ 2.80GHz")&lt;/li&gt; 
   &lt;li&gt;Mhz&lt;/li&gt; 
   &lt;li&gt;CacheSize&lt;/li&gt; 
   &lt;li&gt;Flags (ex: "fpu vme de pse tsc msr pae mce cx8 ...")&lt;/li&gt; 
   &lt;li&gt;Microcode&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;load/Avg() (linux, freebsd, solaris) 
  &lt;ul&gt; 
   &lt;li&gt;Load1&lt;/li&gt; 
   &lt;li&gt;Load5&lt;/li&gt; 
   &lt;li&gt;Load15&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;docker/GetDockerIDList() (linux only) 
  &lt;ul&gt; 
   &lt;li&gt;container id list ([]string)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;docker/CgroupCPU() (linux only) 
  &lt;ul&gt; 
   &lt;li&gt;user&lt;/li&gt; 
   &lt;li&gt;system&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;docker/CgroupMem() (linux only) 
  &lt;ul&gt; 
   &lt;li&gt;various status&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;net_protocols (linux only) 
  &lt;ul&gt; 
   &lt;li&gt;system wide stats on network protocols (i.e IP, TCP, UDP, etc.)&lt;/li&gt; 
   &lt;li&gt;sourced from /proc/net/snmp&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;iptables nf_conntrack (linux only) 
  &lt;ul&gt; 
   &lt;li&gt;system wide stats on netfilter conntrack module&lt;/li&gt; 
   &lt;li&gt;sourced from /proc/sys/net/netfilter/nf_conntrack_count&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some code is ported from Ohai. Many thanks.&lt;/p&gt; 
&lt;h2&gt;Current Status&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;x: works&lt;/li&gt; 
 &lt;li&gt;b: almost works, but something is broken&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;name&lt;/th&gt; 
   &lt;th&gt;Linux&lt;/th&gt; 
   &lt;th&gt;FreeBSD&lt;/th&gt; 
   &lt;th&gt;OpenBSD&lt;/th&gt; 
   &lt;th&gt;macOS&lt;/th&gt; 
   &lt;th&gt;Windows&lt;/th&gt; 
   &lt;th&gt;Solaris&lt;/th&gt; 
   &lt;th&gt;Plan 9&lt;/th&gt; 
   &lt;th&gt;AIX&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu_times&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;b&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu_count&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu_percent&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu_times_percent&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;virtual_memory&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;b&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;swap_memory&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;X&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;disk_partitions&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;disk_io_counters&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;disk_usage&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;net_io_counters&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;b&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;boot_time&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;X&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;users&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pids&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pid_exists&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;net_connections&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;net_protocols&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;net_if_addrs&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;net_if_stats&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;netfilter_conntrack&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;sensors_temperature&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Process class&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;name&lt;/th&gt; 
   &lt;th&gt;Linux&lt;/th&gt; 
   &lt;th&gt;FreeBSD&lt;/th&gt; 
   &lt;th&gt;OpenBSD&lt;/th&gt; 
   &lt;th&gt;macOS&lt;/th&gt; 
   &lt;th&gt;Windows&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pid&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ppid&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;name&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cmdline&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;create_time&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;status&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cwd&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;exe&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;uids&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gids&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;terminal&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;io_counters&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nice&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;num_fds&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;num_ctx_switches&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;num_threads&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu_times&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;memory_info&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;memory_maps&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;open_files&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;send_signal&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;suspend&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;resume&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;terminate&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;kill&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;username&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ionice&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;rlimit&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;num_handlers&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;threads&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu_percent&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;cpu_affinity&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;memory_percent&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;parent&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;children&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;connections&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;is_running&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;page_faults&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;gopsutil Original Metrics&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;item&lt;/th&gt; 
   &lt;th&gt;Linux&lt;/th&gt; 
   &lt;th&gt;FreeBSD&lt;/th&gt; 
   &lt;th&gt;OpenBSD&lt;/th&gt; 
   &lt;th&gt;macOS&lt;/th&gt; 
   &lt;th&gt;Windows&lt;/th&gt; 
   &lt;th&gt;Solaris&lt;/th&gt; 
   &lt;th&gt;AIX&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;HostInfo&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;hostname&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;X&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;uptime&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;process&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;os&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;platform&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;platformfamily&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;virtualization&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;CPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;VendorID&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Family&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Model&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stepping&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PhysicalID&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CoreID&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Cores&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ModelName&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Microcode&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LoadAvg&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Load1&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Load5&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Load15&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Docker GetDockerID&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;container id&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Docker CgroupsCPU&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;user&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;system&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Docker CgroupsMem&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;various&lt;/td&gt; 
   &lt;td&gt;x&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;future work 
  &lt;ul&gt; 
   &lt;li&gt;process_iter&lt;/li&gt; 
   &lt;li&gt;wait_procs&lt;/li&gt; 
   &lt;li&gt;Process class 
    &lt;ul&gt; 
     &lt;li&gt;as_dict&lt;/li&gt; 
     &lt;li&gt;wait&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;AIX processes&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;New BSD License (same as psutil)&lt;/p&gt; 
&lt;h2&gt;Related Works&lt;/h2&gt; 
&lt;p&gt;I have been influenced by the following great works:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;psutil: &lt;a href="https://github.com/giampaolo/psutil"&gt;https://github.com/giampaolo/psutil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;dstat: &lt;a href="https://github.com/dagwieers/dstat"&gt;https://github.com/dagwieers/dstat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;gosigar: &lt;a href="https://github.com/cloudfoundry/gosigar/"&gt;https://github.com/cloudfoundry/gosigar/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;goprocinfo: &lt;a href="https://github.com/c9s/goprocinfo"&gt;https://github.com/c9s/goprocinfo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;go-ps: &lt;a href="https://github.com/mitchellh/go-ps"&gt;https://github.com/mitchellh/go-ps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ohai: &lt;a href="https://github.com/opscode/ohai/"&gt;https://github.com/opscode/ohai/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;bosun: &lt;a href="https://github.com/bosun-monitor/bosun/tree/master/cmd/scollector/collectors"&gt;https://github.com/bosun-monitor/bosun/tree/master/cmd/scollector/collectors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;mackerel: &lt;a href="https://github.com/mackerelio/mackerel-agent/tree/master/metrics"&gt;https://github.com/mackerelio/mackerel-agent/tree/master/metrics&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork it&lt;/li&gt; 
 &lt;li&gt;Create your feature branch (git checkout -b my-new-feature)&lt;/li&gt; 
 &lt;li&gt;Commit your changes (git commit -am 'Add some feature')&lt;/li&gt; 
 &lt;li&gt;Push to the branch (git push origin my-new-feature)&lt;/li&gt; 
 &lt;li&gt;Create new Pull Request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;English is not my native language, so PRs correcting grammar or spelling are welcome and appreciated.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>helm/helm</title>
      <link>https://github.com/helm/helm</link>
      <description>&lt;p&gt;The Kubernetes Package Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Helm&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/helm/helm/actions?workflow=release"&gt;&lt;img src="https://github.com/helm/helm/workflows/release/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/helm.sh/helm/v4"&gt;&lt;img src="https://goreportcard.com/badge/helm.sh/helm/v4" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/helm.sh/helm/v4"&gt;&lt;img src="https://img.shields.io/static/v1?label=godoc&amp;amp;message=reference&amp;amp;color=blue" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/3131"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/3131/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/helm/helm"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/helm/helm/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://insights.linuxfoundation.org/project/helm"&gt;&lt;img src="https://insights.production.lfx.dev/api/badge/health-score?project=helm" alt="LFX Health Score" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Helm is a tool for managing Charts. Charts are packages of pre-configured Kubernetes resources.&lt;/p&gt; 
&lt;p&gt;Use Helm to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find and use &lt;a href="https://artifacthub.io/packages/search?kind=0"&gt;popular software packaged as Helm Charts&lt;/a&gt; to run in Kubernetes&lt;/li&gt; 
 &lt;li&gt;Share your own applications as Helm Charts&lt;/li&gt; 
 &lt;li&gt;Create reproducible builds of your Kubernetes applications&lt;/li&gt; 
 &lt;li&gt;Intelligently manage your Kubernetes manifest files&lt;/li&gt; 
 &lt;li&gt;Manage releases of Helm packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Helm in a Handbasket&lt;/h2&gt; 
&lt;p&gt;Helm is a tool that streamlines installing and managing Kubernetes applications. Think of it like apt/yum/homebrew for Kubernetes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Helm renders your templates and communicates with the Kubernetes API&lt;/li&gt; 
 &lt;li&gt;Helm runs on your laptop, CI/CD, or wherever you want it to run.&lt;/li&gt; 
 &lt;li&gt;Charts are Helm packages that contain at least two things: 
  &lt;ul&gt; 
   &lt;li&gt;A description of the package (&lt;code&gt;Chart.yaml&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;One or more templates, which contain Kubernetes manifest files&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Charts can be stored on disk, or fetched from remote chart repositories (like Debian or RedHat packages)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Helm Development and Stable Versions&lt;/h2&gt; 
&lt;p&gt;Helm v4 is currently under development on the &lt;code&gt;main&lt;/code&gt; branch. This is unstable and the APIs within the Go SDK and at the command line are changing. Helm v3 (current stable) is maintained on the &lt;code&gt;dev-v3&lt;/code&gt; branch. APIs there follow semantic versioning.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Binary downloads of the Helm client can be found on &lt;a href="https://github.com/helm/helm/releases/latest"&gt;the Releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unpack the &lt;code&gt;helm&lt;/code&gt; binary and add it to your PATH and you are good to go!&lt;/p&gt; 
&lt;p&gt;If you want to use a package manager:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; users can use &lt;code&gt;brew install helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; users can use &lt;code&gt;choco install kubernetes-helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/"&gt;Winget&lt;/a&gt; users can use &lt;code&gt;winget install Helm.Helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://scoop.sh/"&gt;Scoop&lt;/a&gt; users can use &lt;code&gt;scoop install helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://snapcraft.io/"&gt;Snapcraft&lt;/a&gt; users can use &lt;code&gt;snap install helm --classic&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flox.dev"&gt;Flox&lt;/a&gt; users can use &lt;code&gt;flox install kubernetes-helm&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To rapidly get Helm up and running, start with the &lt;a href="https://helm.sh/docs/intro/quickstart/"&gt;Quick Start Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://helm.sh/docs/intro/install/"&gt;installation guide&lt;/a&gt; for more options, including installing pre-releases.&lt;/p&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;p&gt;Get started with the &lt;a href="https://helm.sh/docs/intro/quickstart/"&gt;Quick Start guide&lt;/a&gt; or plunge into the &lt;a href="https://helm.sh/docs"&gt;complete documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/helm/helm/milestones"&gt;Helm roadmap uses GitHub milestones&lt;/a&gt; to track the progress of the project.&lt;/p&gt; 
&lt;p&gt;The development of Helm v4 is currently happening on the &lt;code&gt;main&lt;/code&gt; branch while the development of Helm v3, the stable branch, is happening on the &lt;code&gt;dev-v3&lt;/code&gt; branch. Changes should be made to the &lt;code&gt;main&lt;/code&gt; branch prior to being added to the &lt;code&gt;dev-v3&lt;/code&gt; branch so that all changes are carried along to Helm v4.&lt;/p&gt; 
&lt;h2&gt;Community, discussion, contribution, and support&lt;/h2&gt; 
&lt;p&gt;You can reach the Helm community and developers via the following channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://kubernetes.slack.com"&gt;Kubernetes Slack&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/helm-users"&gt;#helm-users&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/helm-dev"&gt;#helm-dev&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/charts"&gt;#charts&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mailing List: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://lists.cncf.io/g/cncf-helm"&gt;Helm Mailing List&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Developer Call: Thursdays at 9:30-10:00 Pacific (&lt;a href="https://github.com/helm/community/raw/master/communication.md#meetings"&gt;meeting details&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;If you're interested in contributing, please refer to the &lt;a href="https://raw.githubusercontent.com/helm/helm/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; &lt;strong&gt;before submitting a pull request&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;Participation in the Helm community is governed by the &lt;a href="https://raw.githubusercontent.com/helm/helm/main/code-of-conduct.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gotify/server</title>
      <link>https://github.com/gotify/server</link>
      <description>&lt;p&gt;A simple server for sending and receiving messages in real-time per WebSocket. (Includes a sleek web-ui)&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://github.com/gotify/logo"&gt; &lt;img height="275px" src="https://raw.githubusercontent.com/gotify/logo/master/gotify-logo.png" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1 align="center"&gt;gotify/server&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/gotify/server/actions/workflows/build.yml"&gt; &lt;img alt="Build Status" src="https://github.com/gotify/server/actions/workflows/build.yml/badge.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://codecov.io/gh/gotify/server"&gt; &lt;img alt="codecov" src="https://codecov.io/gh/gotify/server/branch/master/graph/badge.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/gotify/server"&gt; &lt;img alt="Go Report Card" src="https://goreportcard.com/badge/github.com/gotify/server" /&gt; &lt;/a&gt; &lt;a href="https://matrix.to/#/#gotify:matrix.org"&gt; &lt;img alt="Matrix" src="https://img.shields.io/matrix/gotify:matrix.org.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/r/gotify/server"&gt; &lt;img alt="Docker Pulls" src="https://img.shields.io/docker/pulls/gotify/server.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/gotify/server/releases/latest"&gt; &lt;img alt="latest release" src="https://img.shields.io/github/release/gotify/server.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Intro&lt;/h2&gt; 
&lt;p&gt;We wanted a simple server for sending and receiving messages (in real time per WebSocket). For this, not many open source projects existed and most of the existing ones were abandoned. Also, a requirement was that it can be self-hosted. We know there are many free and commercial push services out there.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;img alt="Gotify UI screenshot" src="https://raw.githubusercontent.com/gotify/server/master/ui.png" align="right" width="500px" /&gt; 
&lt;ul&gt; 
 &lt;li&gt;send messages via REST-API&lt;/li&gt; 
 &lt;li&gt;receive messages via WebSocket&lt;/li&gt; 
 &lt;li&gt;manage users, clients and applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gotify.net/docs/plugin"&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Web-UI -&amp;gt; &lt;a href="https://raw.githubusercontent.com/gotify/server/master/ui"&gt;./ui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CLI for sending messages -&amp;gt; &lt;a href="https://github.com/gotify/cli"&gt;gotify/cli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Android-App -&amp;gt; &lt;a href="https://github.com/gotify/android"&gt;gotify/android&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.github.gotify"&gt;&lt;img src="https://play.google.com/intl/en_gb/badges/images/generic/en_badge_web_generic.png" alt="Get it on Google Play" width="150" /&gt;&lt;/a&gt; &lt;a href="https://f-droid.org/de/packages/com.github.gotify/"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" width="150" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;(Google Play and the Google Play logo are trademarks of Google LLC.)&lt;/sub&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://gotify.net/docs"&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://gotify.net/docs/install"&gt;Install&lt;/a&gt; ᛫ &lt;a href="https://gotify.net/docs/config"&gt;Configuration&lt;/a&gt; ᛫ &lt;a href="https://gotify.net/api-docs"&gt;REST-API&lt;/a&gt; ᛫ &lt;a href="https://gotify.net/docs/dev-setup"&gt;Setup Dev Environment&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome all kinds of contribution, including bug reports, feature requests, documentation improvements, UI refinements, etc. Check out &lt;a href="https://raw.githubusercontent.com/gotify/server/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for guidelines.&lt;/p&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;We use &lt;a href="http://semver.org/"&gt;SemVer&lt;/a&gt; for versioning. For the versions available, see the &lt;a href="https://github.com/gotify/server/tags"&gt;tags on this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/gotify/server/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ray-project/kuberay</title>
      <link>https://github.com/ray-project/kuberay</link>
      <description>&lt;p&gt;A toolkit to run Ray applications on Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KubeRay&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/ray-project/kuberay/actions"&gt;&lt;img src="https://github.com/ray-project/kuberay/workflows/Go-build-and-test/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ray-project/kuberay/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/ray-project/kuberay" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/ray-project/kuberay"&gt;&lt;img src="https://goreportcard.com/badge/github.com/ray-project/kuberay" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;KubeRay is a powerful, open-source Kubernetes operator that simplifies the deployment and management of &lt;a href="https://github.com/ray-project/ray"&gt;Ray&lt;/a&gt; applications on Kubernetes. It offers several key components:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;KubeRay core&lt;/strong&gt;: This is the official, fully-maintained component of KubeRay that provides three custom resource definitions, RayCluster, RayJob, and RayService. These resources are designed to help you run a wide range of workloads with ease.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;RayCluster&lt;/strong&gt;: KubeRay fully manages the lifecycle of RayCluster, including cluster creation/deletion, autoscaling, and ensuring fault tolerance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;RayJob&lt;/strong&gt;: With RayJob, KubeRay automatically creates a RayCluster and submits a job when the cluster is ready. You can also configure RayJob to automatically delete the RayCluster once the job finishes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;RayService&lt;/strong&gt;: RayService is made up of two parts: a RayCluster and a Ray Serve deployment graph. RayService offers zero-downtime upgrades for RayCluster and high availability.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;KubeRay ecosystem&lt;/strong&gt;: Some optional components.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kubectl Plugin&lt;/strong&gt; (Beta): Starting from KubeRay v1.3.0, you can use the &lt;code&gt;kubectl ray&lt;/code&gt; plugin to simplify common workflows when deploying Ray on Kubernetes. If you aren’t familiar with Kubernetes, this plugin simplifies running Ray on Kubernetes. See &lt;a href="https://docs.ray.io/en/latest/cluster/kubernetes/user-guides/kubectl-plugin.html#kubectl-plugin"&gt;kubectl-plugin&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;KubeRay APIServer&lt;/strong&gt; (Alpha): It provides a layer of simplified configuration for KubeRay resources. The KubeRay API server is used internally by some organizations to back user interfaces for KubeRay resource management.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;KubeRay Dashboard&lt;/strong&gt; (Experimental): Starting from KubeRay v1.4.0, we have introduced a new dashboard that enables users to view and manage KubeRay resources. While it is not yet production-ready, we welcome your feedback.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;From September 2023, all user-facing KubeRay documentation will be hosted on the &lt;a href="https://docs.ray.io/en/latest/cluster/kubernetes/index.html"&gt;Ray documentation&lt;/a&gt;. The KubeRay repository only contains documentation related to the development and maintenance of KubeRay.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.ray.io/en/master/cluster/kubernetes/getting-started/raycluster-quick-start.html"&gt;RayCluster Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.ray.io/en/master/cluster/kubernetes/getting-started/rayjob-quick-start.html"&gt;RayJob Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.ray.io/en/master/cluster/kubernetes/getting-started/rayservice-quick-start.html"&gt;RayService Quickstart&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;KubeRay examples are hosted on the &lt;a href="https://docs.ray.io/en/latest/cluster/kubernetes/examples.html"&gt;Ray documentation&lt;/a&gt;. Examples span a wide range of use cases, including training, LLM online inference, batch inference, and more.&lt;/p&gt; 
&lt;h2&gt;Kubernetes Ecosystem&lt;/h2&gt; 
&lt;p&gt;KubeRay integrates with the Kubernetes ecosystem, including observability tools (e.g., Prometheus, Grafana, py-spy), queuing systems (e.g., Volcano, Apache YuniKorn, Kueue), ingress controllers (e.g., Nginx), and more. See &lt;a href="https://docs.ray.io/en/latest/cluster/kubernetes/k8s-ecosystem.html"&gt;KubeRay Ecosystem&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Blog Posts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/workday-engineering/scaling-ray-to-10k-models-and-beyond-92799b4c9fc3"&gt;Scaling Ray to 10K Models and Beyond&lt;/a&gt; Workday&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://klaviyo.tech/how-klaviyo-built-a-robust-model-serving-platform-with-ray-serve-c02ec65788b3"&gt;How Klaviyo built a robust model serving platform with Ray Serve&lt;/a&gt; Klaviyo&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nianticlabs.com/news/ray"&gt;Evolving Niantic AR Mapping Infrastructures with Ray&lt;/a&gt; Niantic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.samsara.com/blog/building-a-modern-machine-learning-platform-with-ray"&gt;Building a Modern Machine Learning Platform with Ray at Samsara&lt;/a&gt; Samsara&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/use-ray-on-kubernetes-with-kuberay"&gt;Using Ray on Kubernetes with KubeRay at Google Cloud&lt;/a&gt; Google&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://doordash.engineering/2023/06/20/how-doordash-built-an-ensemble-learning-model-for-time-series-forecasting/"&gt;How DoorDash Built an Ensemble Learning Model for Time Series Forecasting with KubeRay&lt;/a&gt; Doordash&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud.redhat.com/blog/ai/ml-models-batch-training-at-scale-with-open-data-hub"&gt;AI/ML Models Batch Training at Scale with Open Data Hub&lt;/a&gt; Red Hat&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tech.instacart.com/distributed-machine-learning-at-instacart-4b11d7569423"&gt;Distributed Machine Learning at Instacart&lt;/a&gt; Instacart&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://engineering.atspotify.com/2023/02/unleashing-ml-innovation-at-spotify-with-ray/"&gt;Unleashing ML Innovation at Spotify with Ray&lt;/a&gt; Spotify&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.alibabacloud.com/blog/best-practices-for-ray-clusters---ray-on-ack_600925"&gt;Best Practices For Ray Cluster On ACK&lt;/a&gt; Alibaba Cloud&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Talks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/mASxYpfWUNU?si=iCuXakrP7ORAg37z"&gt;Advanced Model Serving Techniques with Ray on Kubernetes | KubeCon 2024 NA&lt;/a&gt; Anyscale + Google&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/bbKpBTGf_AU?si=BkdCL7FGOde71t_P"&gt;Building Scalable AI Infrastructure with Kuberay and Kubernetes | Ray Summit 2024&lt;/a&gt; Anyscale + Google&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/ZCRZQVt-r3g?si=1Gxkpy8CNVVDDBP0"&gt;Ray at Scale: Apple's Approach to Elastic GPU Management | Ray Summit 2024&lt;/a&gt; Apple&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/9S5WznGnIpE?si=O6Rqpor9QmAvdv6u"&gt;Scaling Ray Train to 10K Kubernetes Nodes on GKE | Ray Summit 2024&lt;/a&gt; Google&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/Y-kLmZ3nklQ?si=N9FIc5Nk_rWwKBRp"&gt;KubeSecRay: Fortifying Multi-Tenant Ray Clusters on Kubernetes | Ray Summit 2024&lt;/a&gt; Microsoft&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/6rNfYlm6s1k?si=WZeXZXrMDtRbbVKO"&gt;Scaling LLM Inference: AWS Inferentia Meets Ray Serve on EKS | Ray Summit 2024&lt;/a&gt; AWS&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/BN1CVDZjQRE?si=9pN9A3bReSL26Pc-"&gt;How Roblox Scaled Machine Learning by Leveraging Ray for Efficient Batch Inference | Ray Summit 2024&lt;/a&gt; Roblox&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/jYQ9ry8uXY0?si=3P56QNo8Qwovv4Vf"&gt;Airbnb's LLM Evolution: Fine-Tuning with Ray | Ray Summit 2024&lt;/a&gt; Airbnb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/5KuTdRq9Zto?si=8m485B1411ixfdlx"&gt;Ray @ eBay: Pioneering a Next-Gen AI Platform | Ray Summit 2024&lt;/a&gt; eBay&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/4kw3EYBz1Gs?si=PswsNR88xe6Mxuas"&gt;Spotify Harnesses Ray for Next-Gen AI Infrastructure | Ray Summit 2024&lt;/a&gt; Spotify&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/2l1lVBdmNIQ?si=PwCeZD1-XajPNLam"&gt;Spotify's Approach to Distributed LLM Training with Ray on GKE | Ray Summit 2024&lt;/a&gt; Spotify&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/XwrGk0SM6ls?si=xNMQo548lOonKLiK"&gt;Reddit's ML Evolution: Scaling with Ray and KubeRay | Ray Summit 2024&lt;/a&gt; Reddit&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/Q27JFtLE6b4?si=QQhVMZyBRelkLC13"&gt;IBM's Approach to Building a Cloud-Native AI Platform | Ray Summit 2024&lt;/a&gt; IBM&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/_nsTcYtfnXU?si=dKNasWOxiTRJgyvj"&gt;Exploring Hinge's ML Platform Evolution with Ray | Ray Summit 2024&lt;/a&gt; Hinge&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/Md5vww4ardo?si=leiuvNkDy2fKeK8r"&gt;How Rubrik Unlocked AI at Scale with Ray Serve | Ray Summit 2024&lt;/a&gt; Rubrik&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/DgfJR6wR4BQ?si=QuK3j7VEkteSwglA"&gt;Supercharge Your AI Platform with KubeRay | KubeCon 2023 NA&lt;/a&gt; Anyscale + Google&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Q-sQLDMeJ8M"&gt;Sailing Ray Workloads with KubeRay and Kueue in Kubernetes&lt;/a&gt; Volcano + DaoCloud&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RK_u6cfPnnw"&gt;Serving Large Language Models with KubeRay on TPUs&lt;/a&gt; Google&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href="https://raw.githubusercontent.com/ray-project/kuberay/master/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; guide before making a pull request. Refer to our &lt;a href="https://raw.githubusercontent.com/ray-project/kuberay/master/ray-operator/DEVELOPMENT.md"&gt;DEVELOPMENT&lt;/a&gt; to build and run tests locally.&lt;/p&gt; 
&lt;h2&gt;Getting Involved&lt;/h2&gt; 
&lt;p&gt;Join &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSfAcoiLCHOguOm8e7Jnn-JJdZaCxPGjgVCvFijHB5PLaQLeig/viewform"&gt;Ray's Slack workspace&lt;/a&gt;, and search the following public channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;#kuberay-questions&lt;/code&gt;: This channel aims to help KubeRay users with their questions. The messages will be closely monitored by the Ray and KubeRay maintainers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;KubeRay contributors are welcome to join the bi-weekly KubeRay community meetings.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add the &lt;a href="https://calendar.google.com/calendar/u/1?cid=Y19iZWIwYTUxZDQyZTczMTFmZWFmYTY5YjZiOTY1NjAxMTQ3ZTEzOTAxZWE0ZGU5YzA1NjFlZWQ5OTljY2FiOWM4QGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20"&gt;Ray/KubeRay Google calendar&lt;/a&gt; to your calendar.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a potential security issue in this project, or think you may have discovered a security issue, we ask that you notify KubeRay Security via our &lt;a href="https://ray-distributed.slack.com/archives/C02GFQ82JPM"&gt;Slack Channel&lt;/a&gt;. Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/ray-project/kuberay/master/LICENSE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>steveiliop56/tinyauth</title>
      <link>https://github.com/steveiliop56/tinyauth</link>
      <description>&lt;p&gt;The simplest way to protect your apps with a login screen.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img alt="Tinyauth" title="Tinyauth" width="96" src="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/assets/logo-rounded.png" /&gt; 
 &lt;h1&gt;Tinyauth&lt;/h1&gt; 
 &lt;p&gt;The easiest way to secure your apps with a login screen.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;img alt="License" src="https://img.shields.io/github/license/steveiliop56/tinyauth" /&gt; 
 &lt;img alt="Release" src="https://img.shields.io/github/v/release/steveiliop56/tinyauth" /&gt; 
 &lt;img alt="Issues" src="https://img.shields.io/github/issues/steveiliop56/tinyauth" /&gt; 
 &lt;img alt="Tinyauth CI" src="https://github.com/steveiliop56/tinyauth/actions/workflows/ci.yml/badge.svg?sanitize=true" /&gt; 
 &lt;a title="Crowdin" target="_blank" href="https://crowdin.com/project/tinyauth"&gt;&lt;img src="https://badges.crowdin.net/tinyauth/localized.svg?sanitize=true" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;Tinyauth is a simple authentication middleware that adds a simple login screen or OAuth with Google, Github and any provider to all of your docker apps. It supports all the popular proxies like Traefik, Nginx and Caddy.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/assets/screenshot.png" alt="Screenshot" /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Tinyauth is in active development and configuration may change often. Please make sure to carefully read the release notes before updating.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can easily get started with Tinyauth by following the guide in the &lt;a href="https://tinyauth.app/docs/getting-started.html"&gt;documentation&lt;/a&gt;. There is also an available &lt;a href="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/docker-compose.example.yml"&gt;docker compose&lt;/a&gt; file that has Traefik, Whoami and Tinyauth to demonstrate its capabilities.&lt;/p&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;If you are still not sure if Tinyauth suits your needs you can try out the &lt;a href="https://demo.tinyauth.app"&gt;demo&lt;/a&gt;. The default username is &lt;code&gt;user&lt;/code&gt; and the default password is &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find documentation and guides on all of the available configuration of Tinyauth in the &lt;a href="https://tinyauth.app"&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Discord&lt;/h2&gt; 
&lt;p&gt;Tinyauth has a &lt;a href="https://discord.gg/eHzVaCzRRd"&gt;discord&lt;/a&gt; server. Feel free to hop in to chat about self-hosting, homelabs and of course Tinyauth. See you there!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;All contributions to the codebase are welcome! If you have any free time feel free to pick up an &lt;a href="https://github.com/steveiliop56/tinyauth/issues"&gt;issue&lt;/a&gt; or add your own missing features. Make sure to check out the &lt;a href="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; for instructions on how to get the development server up and running.&lt;/p&gt; 
&lt;h2&gt;Localization&lt;/h2&gt; 
&lt;p&gt;If you would like to help translate Tinyauth into more languages, visit the &lt;a href="https://crowdin.com/project/tinyauth"&gt;Crowdin&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Tinyauth is licensed under the GNU General Public License v3.0. TL;DR — You may copy, distribute and modify the software as long as you track changes/dates in source files. Any modifications to or software including (via compiler) GPL-licensed code must also be made available under the GPL along with build &amp;amp; install instructions. For more information about the license check the &lt;a href="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/LICENSE"&gt;license&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;A big thank you to the following people for providing me with more coffee:&lt;/p&gt; 
&lt;!-- sponsors --&gt;
&lt;a href="https://github.com/erwinkramer"&gt;&lt;img src="https://github.com/erwinkramer.png" width="64px" alt="User avatar: erwinkramer" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/nicotsx"&gt;&lt;img src="https://github.com/nicotsx.png" width="64px" alt="User avatar: nicotsx" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/SimpleHomelab"&gt;&lt;img src="https://github.com/SimpleHomelab.png" width="64px" alt="User avatar: SimpleHomelab" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/jmadden91"&gt;&lt;img src="https://github.com/jmadden91.png" width="64px" alt="User avatar: jmadden91" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/tribor"&gt;&lt;img src="https://github.com/tribor.png" width="64px" alt="User avatar: tribor" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/eliasbenb"&gt;&lt;img src="https://github.com/eliasbenb.png" width="64px" alt="User avatar: eliasbenb" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/afunworm"&gt;&lt;img src="https://github.com/afunworm.png" width="64px" alt="User avatar: afunworm" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;!-- sponsors --&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Freepik&lt;/strong&gt; for providing the police hat and badge.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Renee French&lt;/strong&gt; for the original gopher logo.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Coderabbit AI&lt;/strong&gt; for providing free AI code reviews.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Syrhu&lt;/strong&gt; for providing the background image of the app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#steveiliop56/tinyauth&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=steveiliop56/tinyauth&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jesseduffield/lazygit</title>
      <link>https://github.com/jesseduffield/lazygit</link>
      <description>&lt;p&gt;simple terminal UI for git commands&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lazygit_20231023"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/warp.png" width="330" alt="Warp" /&gt; 
  &lt;/div&gt; &lt;b&gt;Warp, the intelligent terminal&lt;/b&gt; &lt;br /&gt; &lt;b&gt;Available for MacOS and Linux&lt;/b&gt; &lt;br /&gt; 
  &lt;div&gt; 
   &lt;sup&gt;Visit&amp;nbsp;warp.dev&amp;nbsp;to learn more.&lt;/sup&gt; 
  &lt;/div&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;a href="https://www.subble.com"&gt; 
  &lt;div&gt; 
   &lt;img src="https://subble-marketing-portal-media-storage.s3.amazonaws.com/images/subble-black-name-logo.svg?sanitize=true" width="230" alt="Subble" /&gt; 
  &lt;/div&gt; &lt;b&gt;I (Jesse) co-founded Subble to save your company time and money by helping you manage its software subscriptions. Check it out!&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;img width="536" src="https://user-images.githubusercontent.com/8456633/174470852-339b5011-5800-4bb9-a628-ff230aa8cd4e.png" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;A simple terminal UI for git commands &lt;br /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jesseduffield/lazygit/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/jesseduffield/lazygit/total" alt="GitHub Releases" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/jesseduffield/lazygit"&gt;&lt;img src="https://goreportcard.com/badge/github.com/jesseduffield/lazygit" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_grade"&gt;&lt;img src="https://app.codacy.com/project/badge/Grade/f46416b715d74622895657935fcada21" alt="Codacy Badge" /&gt;&lt;/a&gt; &lt;a href="https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_coverage"&gt;&lt;img src="https://app.codacy.com/project/badge/Coverage/f46416b715d74622895657935fcada21" alt="Codacy Badge" /&gt;&lt;/a&gt; &lt;a href="https://golangci.com"&gt;&lt;img src="https://golangci.com/badges/github.com/jesseduffield/lazygit.svg?sanitize=true" alt="GolangCI" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jesseduffield/lazygit/releases/latest"&gt;&lt;img src="https://img.shields.io/github/tag/jesseduffield/lazygit.svg?sanitize=true" alt="GitHub tag" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Homebrew/homebrew-core/raw/master/Formula/lazygit.rb"&gt;&lt;img src="https://img.shields.io/homebrew/v/lazygit" alt="homebrew" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/commit_and_push-compressed.gif" alt="commit_and_push" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p align="center"&gt; Maintenance of this project is made possible by all the &lt;a href="https://github.com/jesseduffield/lazygit/graphs/contributors"&gt;contributors&lt;/a&gt; and &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsors&lt;/a&gt;. If you'd like to sponsor this project and have your avatar or company logo appear below &lt;a href="https://github.com/sponsors/jesseduffield"&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;!-- sponsors --&gt;&lt;a href="https://github.com/intabulas"&gt;&lt;img src="https://github.com/intabulas.png" width="60px" alt="Mark Lussier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/peppy"&gt;&lt;img src="https://github.com/peppy.png" width="60px" alt="Dean Herbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/piot"&gt;&lt;img src="https://github.com/piot.png" width="60px" alt="Peter Bjorklund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/rgwood"&gt;&lt;img src="https://github.com/rgwood.png" width="60px" alt="Reilly Wood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/oliverguenther"&gt;&lt;img src="https://github.com/oliverguenther.png" width="60px" alt="Oliver Günther" /&gt;&lt;/a&gt;&lt;a href="https://github.com/pawanjay176"&gt;&lt;img src="https://github.com/pawanjay176.png" width="60px" alt="Pawan Dhananjay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bdach"&gt;&lt;img src="https://github.com/bdach.png" width="60px" alt="Bartłomiej Dach" /&gt;&lt;/a&gt;&lt;a href="https://github.com/carstengehling"&gt;&lt;img src="https://github.com/carstengehling.png" width="60px" alt="Carsten Gehling" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ceuk"&gt;&lt;img src="https://github.com/ceuk.png" width="60px" alt="CEUK" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Xetera"&gt;&lt;img src="https://github.com/Xetera.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/HoldenLucas"&gt;&lt;img src="https://github.com/HoldenLucas.png" width="60px" alt="Holden Lucas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nartc"&gt;&lt;img src="https://github.com/nartc.png" width="60px" alt="Chau Tran" /&gt;&lt;/a&gt;&lt;a href="https://github.com/matejcik"&gt;&lt;img src="https://github.com/matejcik.png" width="60px" alt="matejcik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lucatume"&gt;&lt;img src="https://github.com/lucatume.png" width="60px" alt="theAverageDev (Luca Tumedei)" /&gt;&lt;/a&gt;&lt;a href="https://github.com/IvanZuy"&gt;&lt;img src="https://github.com/IvanZuy.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nicholascloud"&gt;&lt;img src="https://github.com/nicholascloud.png" width="60px" alt="Nicholas Cloud" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ava1ar"&gt;&lt;img src="https://github.com/ava1ar.png" width="60px" alt="Aliaksandr Stelmachonak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/minidfx"&gt;&lt;img src="https://github.com/minidfx.png" width="60px" alt="Burgy Benjamin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/JoeKlemmer"&gt;&lt;img src="https://github.com/JoeKlemmer.png" width="60px" alt="Joe Klemmer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tobi"&gt;&lt;img src="https://github.com/tobi.png" width="60px" alt="Tobias Lütke" /&gt;&lt;/a&gt;&lt;a href="https://github.com/benbfortis"&gt;&lt;img src="https://github.com/benbfortis.png" width="60px" alt="Ben Beaumont" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jakewarren"&gt;&lt;img src="https://github.com/jakewarren.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tgpholly"&gt;&lt;img src="https://github.com/tgpholly.png" width="60px" alt="Holly" /&gt;&lt;/a&gt;&lt;a href="https://github.com/socketbox"&gt;&lt;img src="https://github.com/socketbox.png" width="60px" alt="Casey Boettcher" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bitprophet"&gt;&lt;img src="https://github.com/bitprophet.png" width="60px" alt="Jeff Forcier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tayleighr"&gt;&lt;img src="https://github.com/tayleighr.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Novakov"&gt;&lt;img src="https://github.com/Novakov.png" width="60px" alt="Maciej T. Nowak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nekhaevskiy"&gt;&lt;img src="https://github.com/nekhaevskiy.png" width="60px" alt="Yury" /&gt;&lt;/a&gt;&lt;a href="https://github.com/reivilibre"&gt;&lt;img src="https://github.com/reivilibre.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andreaskurth"&gt;&lt;img src="https://github.com/andreaskurth.png" width="60px" alt="Andreas Kurth" /&gt;&lt;/a&gt;&lt;a href="https://github.com/BSteffaniak"&gt;&lt;img src="https://github.com/BSteffaniak.png" width="60px" alt="Braden Steffaniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jordan-gillard"&gt;&lt;img src="https://github.com/jordan-gillard.png" width="60px" alt="Jordan Gillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/smangels"&gt;&lt;img src="https://github.com/smangels.png" width="60px" alt="Sebastian" /&gt;&lt;/a&gt;&lt;a href="https://github.com/amslezak"&gt;&lt;img src="https://github.com/amslezak.png" width="60px" alt="Andy Slezak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mkock"&gt;&lt;img src="https://github.com/mkock.png" width="60px" alt="Martin Kock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jessealama"&gt;&lt;img src="https://github.com/jessealama.png" width="60px" alt="Jesse Alama" /&gt;&lt;/a&gt;&lt;a href="https://github.com/danielkokott"&gt;&lt;img src="https://github.com/danielkokott.png" width="60px" alt="Daniel Kokott" /&gt;&lt;/a&gt;&lt;a href="https://github.com/heijmans"&gt;&lt;img src="https://github.com/heijmans.png" width="60px" alt="Jan Heijmans" /&gt;&lt;/a&gt;&lt;a href="https://github.com/knowald"&gt;&lt;img src="https://github.com/knowald.png" width="60px" alt="Kevin Nowald" /&gt;&lt;/a&gt;&lt;a href="https://github.com/omarluq"&gt;&lt;img src="https://github.com/omarluq.png" width="60px" alt="Omar Luq" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanjli"&gt;&lt;img src="https://github.com/ethanjli.png" width="60px" alt="Ethan Li" /&gt;&lt;/a&gt;&lt;a href="https://github.com/phubaba"&gt;&lt;img src="https://github.com/phubaba.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/canhazcodez"&gt;&lt;img src="https://github.com/canhazcodez.png" width="60px" alt="Maxi" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neunkasulle"&gt;&lt;img src="https://github.com/neunkasulle.png" width="60px" alt="Jan Zenkner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/RVxLab"&gt;&lt;img src="https://github.com/RVxLab.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/FrederickGeek8"&gt;&lt;img src="https://github.com/FrederickGeek8.png" width="60px" alt="Frederick Morlock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ezdac"&gt;&lt;img src="https://github.com/ezdac.png" width="60px" alt="Maximilian Langenfeld" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbuls"&gt;&lt;img src="https://github.com/dbuls.png" width="60px" alt="Davis Buls" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lppassos"&gt;&lt;img src="https://github.com/lppassos.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neilcode"&gt;&lt;img src="https://github.com/neilcode.png" width="60px" alt="Neil Lambert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dhh"&gt;&lt;img src="https://github.com/dhh.png" width="60px" alt="David Heinemeier Hansson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanfischer"&gt;&lt;img src="https://github.com/ethanfischer.png" width="60px" alt="Ethan Fischer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/poshboytl"&gt;&lt;img src="https://github.com/poshboytl.png" width="60px" alt="Terry Tai" /&gt;&lt;/a&gt;&lt;a href="https://github.com/roesnera"&gt;&lt;img src="https://github.com/roesnera.png" width="60px" alt="Adam Roesner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/seven1m"&gt;&lt;img src="https://github.com/seven1m.png" width="60px" alt="Tim Morgan" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sgoridotla1"&gt;&lt;img src="https://github.com/sgoridotla1.png" width="60px" alt="Max Shypulniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ADIX7"&gt;&lt;img src="https://github.com/ADIX7.png" width="60px" alt="Kovács Ádám" /&gt;&lt;/a&gt;&lt;a href="https://github.com/slowdub"&gt;&lt;img src="https://github.com/slowdub.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/serranomorante"&gt;&lt;img src="https://github.com/serranomorante.png" width="60px" alt="Patricio Serrano" /&gt;&lt;/a&gt;&lt;a href="https://github.com/kiriDevs"&gt;&lt;img src="https://github.com/kiriDevs.png" width="60px" alt="Kiri" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Bparsons0904"&gt;&lt;img src="https://github.com/Bparsons0904.png" width="60px" alt="Bob Parsons" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bjornevik"&gt;&lt;img src="https://github.com/bjornevik.png" width="60px" alt="John Even Bjørnevik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/moberst"&gt;&lt;img src="https://github.com/moberst.png" width="60px" alt="Michael Oberst" /&gt;&lt;/a&gt;&lt;a href="https://github.com/stianh"&gt;&lt;img src="https://github.com/stianh.png" width="60px" alt="Stian Hegglund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/adam-e-trepanier"&gt;&lt;img src="https://github.com/adam-e-trepanier.png" width="60px" alt="Adam Trepanier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/arkalon76"&gt;&lt;img src="https://github.com/arkalon76.png" width="60px" alt="Kenth Fagerlund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Djuuu"&gt;&lt;img src="https://github.com/Djuuu.png" width="60px" alt="Julien Tardot" /&gt;&lt;/a&gt;&lt;a href="https://github.com/antikytheraton"&gt;&lt;img src="https://github.com/antikytheraton.png" width="60px" alt="Aaron Arredondo" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ellord"&gt;&lt;img src="https://github.com/ellord.png" width="60px" alt="Ellord Tayag" /&gt;&lt;/a&gt;&lt;a href="https://github.com/EdgarPost"&gt;&lt;img src="https://github.com/EdgarPost.png" width="60px" alt="Edgar Post-Buijs" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sbc64"&gt;&lt;img src="https://github.com/sbc64.png" width="60px" alt="sbc64" /&gt;&lt;/a&gt;&lt;a href="https://github.com/caillou"&gt;&lt;img src="https://github.com/caillou.png" width="60px" alt="Pierre Spring" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mebezac"&gt;&lt;img src="https://github.com/mebezac.png" width="60px" alt="Zac Clay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Tom94"&gt;&lt;img src="https://github.com/Tom94.png" width="60px" alt="Thomas Müller" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ccssmnn"&gt;&lt;img src="https://github.com/ccssmnn.png" width="60px" alt="Carl Assmann" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ognevsd"&gt;&lt;img src="https://github.com/ognevsd.png" width="60px" alt="Sergey Ognev" /&gt;&lt;/a&gt;&lt;a href="https://github.com/moodyhunter"&gt;&lt;img src="https://github.com/moodyhunter.png" width="60px" alt="Moody Liu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/code-hunger"&gt;&lt;img src="https://github.com/code-hunger.png" width="60px" alt="Alex G" /&gt;&lt;/a&gt;&lt;a href="https://github.com/elithper"&gt;&lt;img src="https://github.com/elithper.png" width="60px" alt="Michael Howard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/LasseBloch"&gt;&lt;img src="https://github.com/LasseBloch.png" width="60px" alt="Lasse Bloch Lauritsen" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lmarburger"&gt;&lt;img src="https://github.com/lmarburger.png" width="60px" alt="Larry Marburger" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbrockman"&gt;&lt;img src="https://github.com/dbrockman.png" width="60px" alt="David Brockman" /&gt;&lt;/a&gt;&lt;a href="https://github.com/slavshik"&gt;&lt;img src="https://github.com/slavshik.png" width="60px" alt="Alexander Slavschik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/aidalgol"&gt;&lt;img src="https://github.com/aidalgol.png" width="60px" alt="Aidan Gauland" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mbienkowsk"&gt;&lt;img src="https://github.com/mbienkowsk.png" width="60px" alt="Maksym Bieńkowski" /&gt;&lt;/a&gt;&lt;a href="https://github.com/joshuawootonn"&gt;&lt;img src="https://github.com/joshuawootonn.png" width="60px" alt="Joshua Wootonn" /&gt;&lt;/a&gt;&lt;a href="https://github.com/I4nJ"&gt;&lt;img src="https://github.com/I4nJ.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/gurbindersingh"&gt;&lt;img src="https://github.com/gurbindersingh.png" width="60px" alt="Gurbinder Singh" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sandviklee"&gt;&lt;img src="https://github.com/sandviklee.png" width="60px" alt="Simon Sandvik Lee" /&gt;&lt;/a&gt;&lt;a href="https://github.com/glagnar"&gt;&lt;img src="https://github.com/glagnar.png" width="60px" alt="Thomas Gilbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/skrzepto"&gt;&lt;img src="https://github.com/skrzepto.png" width="60px" alt="Szymon Mucha" /&gt;&lt;/a&gt;&lt;a href="https://github.com/TimShilov"&gt;&lt;img src="https://github.com/TimShilov.png" width="60px" alt="Tim Shilov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/unnawut"&gt;&lt;img src="https://github.com/unnawut.png" width="60px" alt="Unnawut Leepaisalsuwanna" /&gt;&lt;/a&gt;&lt;a href="https://github.com/wortmanb"&gt;&lt;img src="https://github.com/wortmanb.png" width="60px" alt="Bret Wortman" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andre-lameirinhas"&gt;&lt;img src="https://github.com/andre-lameirinhas.png" width="60px" alt="André Lameirinhas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/SVappsLAB"&gt;&lt;img src="https://github.com/SVappsLAB.png" width="60px" alt="Scott Velez" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ooojustin"&gt;&lt;img src="https://github.com/ooojustin.png" width="60px" alt="justin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/TakodaS"&gt;&lt;img src="https://github.com/TakodaS.png" width="60px" alt="Austen Bolitho" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mantzu132"&gt;&lt;img src="https://github.com/mantzu132.png" width="60px" alt="Mantas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mayfieldiv"&gt;&lt;img src="https://github.com/mayfieldiv.png" width="60px" alt="Mayfield" /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;h2&gt;Elevator Pitch&lt;/h2&gt; 
&lt;p&gt;Rant time: You've heard it before, git is &lt;em&gt;powerful&lt;/em&gt;, but what good is that power when everything is so damn hard to do? Interactive rebasing requires you to edit a goddamn TODO file in your editor? &lt;em&gt;Are you kidding me?&lt;/em&gt; To stage part of a file you need to use a command line program to step through each hunk and if a hunk can't be split down any further but contains code you don't want to stage, you have to edit an arcane patch file &lt;em&gt;by hand&lt;/em&gt;? &lt;em&gt;Are you KIDDING me?!&lt;/em&gt; Sometimes you get asked to stash your changes when switching branches only to realise that after you switch and unstash that there weren't even any conflicts and it would have been fine to just checkout the branch directly? &lt;em&gt;YOU HAVE GOT TO BE KIDDING ME!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;If you're a mere mortal like me and you're tired of hearing how powerful git is when in your daily life it's a powerful pain in your ass, lazygit might be for you.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#sponsors"&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#elevator-pitch"&gt;Elevator Pitch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#table-of-contents"&gt;Table of contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#features"&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#stage-individual-lines"&gt;Stage individual lines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#interactive-rebase"&gt;Interactive Rebase&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#cherry-pick"&gt;Cherry-pick&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#bisect"&gt;Bisect&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#nuke-the-working-tree"&gt;Nuke the working tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#amend-an-old-commit"&gt;Amend an old commit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#filter"&gt;Filter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#invoke-a-custom-command"&gt;Invoke a custom command&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#worktrees"&gt;Worktrees&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#rebase-magic-custom-patches"&gt;Rebase magic (custom patches)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#rebase-from-marked-base-commit"&gt;Rebase from marked base commit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#undo"&gt;Undo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#commit-graph"&gt;Commit graph&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#compare-two-commits"&gt;Compare two commits&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#binary-releases"&gt;Binary Releases&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#homebrew"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#macports"&gt;MacPorts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#void-linux"&gt;Void Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#scoop-windows"&gt;Scoop (Windows)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#arch-linux"&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#fedora-and-rhel"&gt;Fedora and RHEL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#solus-linux"&gt;Solus Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#debian-and-ubuntu"&gt;Debian and Ubuntu&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#funtoo-linux"&gt;Funtoo Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#gentoo-linux"&gt;Gentoo Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#freebsd"&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#termux"&gt;Termux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#conda"&gt;Conda&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#go"&gt;Go&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#chocolatey-windows"&gt;Chocolatey (Windows)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#winget-windows-10-1709-or-later"&gt;Winget (Windows 10 1709 or later)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#manual"&gt;Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#usage"&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#keybindings"&gt;Keybindings&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#changing-directory-on-exit"&gt;Changing Directory On Exit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#undoredo"&gt;Undo/Redo&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#configuration"&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#custom-pagers"&gt;Custom Pagers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#custom-commands"&gt;Custom Commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#git-flow-support"&gt;Git flow support&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#contributing"&gt;Contributing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#debugging-locally"&gt;Debugging Locally&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#donate"&gt;Donate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#faq"&gt;FAQ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#what-do-the-commit-colors-represent"&gt;What do the commit colors represent?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#shameless-plug"&gt;Shameless Plug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#alternatives"&gt;Alternatives&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Lazygit is not my fulltime job but it is a hefty part time job so if you want to support the project please consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Stage individual lines&lt;/h3&gt; 
&lt;p&gt;Press space on the selected line to stage it, or press &lt;code&gt;v&lt;/code&gt; to start selecting a range of lines. You can also press &lt;code&gt;a&lt;/code&gt; to select the entirety of the current hunk.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/stage_lines-compressed.gif" alt="stage_lines" /&gt;&lt;/p&gt; 
&lt;h3&gt;Interactive Rebase&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;i&lt;/code&gt; to start an interactive rebase. Then squash (&lt;code&gt;s&lt;/code&gt;), fixup (&lt;code&gt;f&lt;/code&gt;), drop (&lt;code&gt;d&lt;/code&gt;), edit (&lt;code&gt;e&lt;/code&gt;), move up (&lt;code&gt;ctrl+k&lt;/code&gt;) or move down (&lt;code&gt;ctrl+j&lt;/code&gt;) any of TODO commits, before continuing the rebase by bringing up the rebase options menu with &lt;code&gt;m&lt;/code&gt; and then selecting &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also perform any these actions as a once-off (e.g. pressing &lt;code&gt;s&lt;/code&gt; on a commit to squash it) without explicitly starting a rebase.&lt;/p&gt; 
&lt;p&gt;This demo also uses shift+down to select a range of commits to move and fixup.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/interactive_rebase-compressed.gif" alt="interactive_rebase" /&gt;&lt;/p&gt; 
&lt;h3&gt;Cherry-pick&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;shift+c&lt;/code&gt; on a commit to copy it and press &lt;code&gt;shift+v&lt;/code&gt; to paste (cherry-pick) it.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/cherry_pick-compressed.gif" alt="cherry_pick" /&gt;&lt;/p&gt; 
&lt;h3&gt;Bisect&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;b&lt;/code&gt; in the commits view to mark a commit as good/bad in order to begin a git bisect.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/bisect-compressed.gif" alt="bisect" /&gt;&lt;/p&gt; 
&lt;h3&gt;Nuke the working tree&lt;/h3&gt; 
&lt;p&gt;For when you really want to just get rid of anything that shows up when you run &lt;code&gt;git status&lt;/code&gt; (and yes that includes dirty submodules) &lt;a href="https://www.youtube.com/watch?v=N4E2B_k2Bss"&gt;kidpix style&lt;/a&gt;, press &lt;code&gt;shift+d&lt;/code&gt; to bring up the reset options menu and then select the 'nuke' option.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/nuke_working_tree-compressed.gif" alt="Nuke working tree" /&gt;&lt;/p&gt; 
&lt;h3&gt;Amend an old commit&lt;/h3&gt; 
&lt;p&gt;Pressing &lt;code&gt;shift+a&lt;/code&gt; on any commit will amend that commit with the currently staged changes (running an interactive rebase in the background).&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/amend_old_commit-compressed.gif" alt="amend_old_commit" /&gt;&lt;/p&gt; 
&lt;h3&gt;Filter&lt;/h3&gt; 
&lt;p&gt;You can filter a view with &lt;code&gt;/&lt;/code&gt;. Here we filter down our branches view and then hit &lt;code&gt;enter&lt;/code&gt; to view its commits.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/filter-compressed.gif" alt="filter" /&gt;&lt;/p&gt; 
&lt;h3&gt;Invoke a custom command&lt;/h3&gt; 
&lt;p&gt;Lazygit has a very flexible &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Command_Keybindings.md"&gt;custom command system&lt;/a&gt;. In this example a custom command is defined which emulates the built-in branch checkout action.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/custom_command-compressed.gif" alt="custom_command" /&gt;&lt;/p&gt; 
&lt;h3&gt;Worktrees&lt;/h3&gt; 
&lt;p&gt;You can create worktrees to have multiple branches going at once without the need for stashing or creating WIP commits when switching between them. Press &lt;code&gt;w&lt;/code&gt; in the branches view to create a worktree from the selected branch and switch to it.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/worktree_create_from_branches-compressed.gif" alt="worktree_create_from_branches" /&gt;&lt;/p&gt; 
&lt;h3&gt;Rebase magic (custom patches)&lt;/h3&gt; 
&lt;p&gt;You can build a custom patch from an old commit and then remove the patch from the commit, split out a new commit, apply the patch in reverse to the index, and more.&lt;/p&gt; 
&lt;p&gt;In this example we have a redundant comment that we want to remove from an old commit. We hit &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on the commit to view its files, then &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on a file to focus the patch, then &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; to add the comment line to our custom patch, and then &lt;code&gt;ctrl+p&lt;/code&gt; to view the custom patch options; selecting to remove the patch from the current commit.&lt;/p&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://youtu.be/4XaToVut_hs"&gt;Rebase magic Youtube tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/custom_patch-compressed.gif" alt="custom_patch" /&gt;&lt;/p&gt; 
&lt;h3&gt;Rebase from marked base commit&lt;/h3&gt; 
&lt;p&gt;Say you're on a feature branch that was itself branched off of the develop branch, and you've decided you'd rather be branching off the master branch. You need a way to rebase only the commits from your feature branch. In this demo we check to see which was the last commit on the develop branch, then press &lt;code&gt;shift+b&lt;/code&gt; to mark that commit as our base commit, then press &lt;code&gt;r&lt;/code&gt; on the master branch to rebase onto it, only bringing across the commits from our feature branch. Then we push our changes with &lt;code&gt;shift+p&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/rebase_onto-compressed.gif" alt="rebase_onto" /&gt;&lt;/p&gt; 
&lt;h3&gt;Undo&lt;/h3&gt; 
&lt;p&gt;You can undo the last action by pressing &lt;code&gt;z&lt;/code&gt; and redo with &lt;code&gt;ctrl+z&lt;/code&gt;. Here we drop a couple of commits and then undo the actions. Undo uses the reflog which is specific to commits and branches so we can't undo changes to the working tree or stash.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Undoing.md"&gt;More info&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/undo-compressed.gif" alt="undo" /&gt;&lt;/p&gt; 
&lt;h3&gt;Commit graph&lt;/h3&gt; 
&lt;p&gt;When viewing the commit graph in an enlarged window (use &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; to cycle screen modes), the commit graph is shown. Colours correspond to the commit authors, and as you navigate down the graph, the parent commits of the selected commit are highlighted.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/commit_graph-compressed.gif" alt="commit_graph" /&gt;&lt;/p&gt; 
&lt;h3&gt;Compare two commits&lt;/h3&gt; 
&lt;p&gt;If you press &lt;code&gt;shift+w&lt;/code&gt; on a commit (or branch/ref) a menu will open that allows you to mark that commit so that any other commit you select will be diffed against it. Once you've selected the second commit, you'll see the diff in the main view and if you press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; you'll see the files of the diff. You can press &lt;code&gt;shift+w&lt;/code&gt; to view the diff menu again to see options like reversing the diff direction or exiting diff mode. You can also exit diff mode by pressing &lt;code&gt;&amp;lt;escape&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/diff_commits-compressed.gif" alt="diff_commits" /&gt;&lt;/p&gt; 
&lt;h2&gt;Tutorials&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/CPLdltN7wgE"&gt;&lt;img src="https://i.imgur.com/sVEktDn.png" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/CPLdltN7wgE"&gt;15 Lazygit Features in 15 Minutes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/VDXvbHZYeKY"&gt;Basics Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/4XaToVut_hs"&gt;Rebase Magic Tutorial&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/lazygit/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/lazygit.svg?columns=3" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Most of the above packages are maintained by third parties so be sure to vet them yourself and confirm that the maintainer is a trustworthy looking person who attends local sports games and gives back to their communities with barbeque fundraisers etc&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Binary Releases&lt;/h3&gt; 
&lt;p&gt;For Windows, Mac OS(10.12+) or Linux, you can download a binary release &lt;a href="https://raw.githubusercontent.com/jesseduffield/releases"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;It works with Linux, too.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MacPorts&lt;/h3&gt; 
&lt;p&gt;Latest version built from github releases. Tap:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo port install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Void Linux&lt;/h3&gt; 
&lt;p&gt;Packages for Void Linux are available in the distro repo&lt;/p&gt; 
&lt;p&gt;They follow upstream latest releases&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo xbps-install -S lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt;. It's in the &lt;code&gt;extras&lt;/code&gt; bucket:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Add the extras bucket
scoop bucket add extras

# Install lazygit
scoop install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;Packages for Arch Linux are available via pacman and AUR (Arch User Repository).&lt;/p&gt; 
&lt;p&gt;There are two packages. The stable one which is built with the latest release and the git version which builds from the most recent commit.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stable: &lt;code&gt;sudo pacman -S lazygit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Development: &lt;a href="https://aur.archlinux.org/packages/lazygit-git/"&gt;https://aur.archlinux.org/packages/lazygit-git/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instruction of how to install AUR content can be found here: &lt;a href="https://wiki.archlinux.org/index.php/Arch_User_Repository"&gt;https://wiki.archlinux.org/index.php/Arch_User_Repository&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Fedora / Amazon Linux 2023 / CentOS Stream&lt;/h3&gt; 
&lt;p&gt;Packages for Fedora, Amazon Linux 2023 and CentOS Stream are available via &lt;a href="https://copr.fedorainfracloud.org/coprs/dejan/lazygit/"&gt;Copr&lt;/a&gt; (Cool Other Package Repo).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo dnf copr enable dejan/lazygit
sudo dnf install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These packages are built using the RPM spec file located here: &lt;a href="https://codeberg.org/dejan/rpm-lazygit"&gt;https://codeberg.org/dejan/rpm-lazygit&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You should be able to build RPMs for Fedora 41 or older, and other Fedora derivatives using the SRPM (Source RPM) file that you can grab from the latest COPR build.&lt;/p&gt; 
&lt;h3&gt;Solus Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo eopkg install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; 
&lt;p&gt;For &lt;strong&gt;Debian 13 "Trixie", Sid&lt;/strong&gt;, and later, or &lt;strong&gt;Ubuntu 25.10 "Questing Quokka"&lt;/strong&gt; and later:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;strong&gt;Debian 12 "Bookworm", Ubuntu 25.04 "Plucky Puffin"&lt;/strong&gt; and earlier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*')
curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
tar xf lazygit.tar.gz lazygit
sudo install lazygit -D -t /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Verify the correct installation of lazygit:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;lazygit --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Funtoo Linux&lt;/h3&gt; 
&lt;p&gt;Funtoo Linux has an autogenerated lazygit package in &lt;a href="https://github.com/funtoo/dev-kit/tree/1.4-release/dev-vcs/lazygit"&gt;dev-kit&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo emerge dev-vcs/lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Gentoo Linux&lt;/h3&gt; 
&lt;p&gt;Lazygit is not (yet) in main Gentoo portage, however an ebuild is available in &lt;a href="https://github.com/gentoo-mirror/guru/tree/master/dev-vcs/lazygit"&gt;GURU overlay&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can either add the overlay to your system and install lazygit as usual:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo eselect repository enable guru
sudo emaint sync -r guru
sudo emerge dev-vcs/lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE&lt;/h3&gt; 
&lt;p&gt;The lazygit package is currently built in &lt;a href="https://build.opensuse.org/package/show/devel:languages:go/lazygit"&gt;devel:languages:go/lazygit&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To install lazygit on openSUSE Tumbleweed run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/openSUSE_Factory/devel:languages:go.repo
sudo zypper ref &amp;amp;&amp;amp; sudo zypper in lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install lazygit on openSUSE Leap run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;source /etc/os-release
sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/$VERSION_ID/devel:languages:go.repo
sudo zypper ref &amp;amp;&amp;amp; sudo zypper in lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NixOs&lt;/h3&gt; 
&lt;p&gt;On NixOs lazygit is packaged with nix and distributed via nixpkgs. You can try the lazygit without installing it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix-shell -p lazygit
# or with flakes enabled
nix run nixpkgs#lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can add lazygit to you &lt;code&gt;configuration.nix&lt;/code&gt; using the &lt;code&gt;environment.systemPackages&lt;/code&gt; option. More details can be found via NixOs search &lt;a href="https://search.nixos.org/"&gt;page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Flox&lt;/h3&gt; 
&lt;p&gt;Lazygit can be installed into a Flox environment as follows.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;flox install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More details about Flox can be found on &lt;a href="https://flox.dev/"&gt;their website&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pkg install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Termux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;apt install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Conda&lt;/h3&gt; 
&lt;p&gt;Released versions are available for different platforms, see &lt;a href="https://anaconda.org/conda-forge/lazygit"&gt;https://anaconda.org/conda-forge/lazygit&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;conda install -c conda-forge lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Go&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install github.com/jesseduffield/lazygit@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note: If you get an error claiming that lazygit cannot be found or is not defined, you may need to add &lt;code&gt;~/go/bin&lt;/code&gt; to your $PATH (MacOS/Linux), or &lt;code&gt;%HOME%\go\bin&lt;/code&gt; (Windows). Not to be mistaken for &lt;code&gt;C:\Go\bin&lt;/code&gt; (which is for Go's own binaries, not apps like lazygit).&lt;/p&gt; 
&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Winget (Windows 10 1709 or later)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using the &lt;code&gt;winget&lt;/code&gt; command in the Windows Terminal with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;winget install -e --id=JesseDuffield.lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You'll need to &lt;a href="https://golang.org/doc/install"&gt;install Go&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesseduffield/lazygit.git
cd lazygit
go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;go run main.go&lt;/code&gt; to compile and run in one go (pun definitely intended)&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Call &lt;code&gt;lazygit&lt;/code&gt; in your terminal inside a git repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want, you can also add an alias for this with &lt;code&gt;echo "alias lg='lazygit'" &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt; (or whichever rc file you're using).&lt;/p&gt; 
&lt;h3&gt;Keybindings&lt;/h3&gt; 
&lt;p&gt;You can check out the list of keybindings &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/keybindings"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Changing Directory On Exit&lt;/h3&gt; 
&lt;p&gt;If you change repos in lazygit and want your shell to change directory into that repo on exiting lazygit, add this to your &lt;code&gt;~/.zshrc&lt;/code&gt; (or other rc file):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE &amp;gt; /dev/null
    fi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;code&gt;source ~/.zshrc&lt;/code&gt; and from now on when you call &lt;code&gt;lg&lt;/code&gt; and exit you'll switch directories to whatever you were in inside lazygit. To override this behaviour you can exit using &lt;code&gt;shift+Q&lt;/code&gt; rather than just &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Undo/Redo&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Undoing.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Config.md"&gt;configuration docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Custom Pagers&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Pagers.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Custom Commands&lt;/h3&gt; 
&lt;p&gt;If lazygit is missing a feature, there's a good chance you can implement it yourself with a custom command!&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Command_Keybindings.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Git flow support&lt;/h3&gt; 
&lt;p&gt;Lazygit supports &lt;a href="https://github.com/nvie/gitflow"&gt;Gitflow&lt;/a&gt; if you have it installed. To understand how the Gitflow model works check out Vincent Driessen's original &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;post&lt;/a&gt; explaining it. To view Gitflow options from within Lazygit, press &lt;code&gt;i&lt;/code&gt; from within the branches view.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We love your input! Please check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the &lt;a href="https://discord.gg/ehwFt2t4wt"&gt;discord channel&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/ehwFt2t4wt"&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/discord.png" width="75" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Check out this &lt;a href="https://www.youtube.com/watch?v=kNavnhzZHtk"&gt;video&lt;/a&gt; walking through the creation of a small feature in lazygit if you want an idea of where to get started.&lt;/p&gt; 
&lt;h3&gt;Debugging Locally&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;lazygit --debug&lt;/code&gt; in one terminal tab and &lt;code&gt;lazygit --logs&lt;/code&gt; in another to view the program and its log output side by side&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you would like to support the development of lazygit, consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;What do the commit colors represent?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Green: the commit is included in the master branch&lt;/li&gt; 
 &lt;li&gt;Yellow: the commit is not included in the master branch&lt;/li&gt; 
 &lt;li&gt;Red: the commit has not been pushed to the upstream branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Shameless Plug&lt;/h2&gt; 
&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href="https://twitter.com/DuffieldJesse"&gt;twitter&lt;/a&gt; or check out my &lt;a href="https://jesseduffield.com/"&gt;blog&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;p&gt;If you find that lazygit doesn't quite satisfy your requirements, these may be a better fit:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Extrawurst/gitui"&gt;GitUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jonas/tig"&gt;tig&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>open-telemetry/opentelemetry-collector</title>
      <link>https://github.com/open-telemetry/opentelemetry-collector</link>
      <description>&lt;p&gt;OpenTelemetry Collector&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://opentelemetry.io/docs/collector/getting-started/"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md"&gt;Getting Involved&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://cloud-native.slack.com/archives/C01N6P7KR6W"&gt;Getting In Touch&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/actions/workflows/build-and-test.yml?query=branch%3Amain"&gt; &lt;img alt="Build Status" src="https://img.shields.io/github/actions/workflow/status/open-telemetry/opentelemetry-collector/build-and-test.yml?branch=main&amp;amp;style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/open-telemetry/opentelemetry-collector"&gt; &lt;img alt="Go Report Card" src="https://goreportcard.com/badge/github.com/open-telemetry/opentelemetry-collector?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://codecov.io/gh/open-telemetry/opentelemetry-collector/branch/main/"&gt; &lt;img alt="Codecov Status" src="https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-collector?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/releases"&gt; &lt;img alt="GitHub release (latest by date including pre-releases)" src="https://img.shields.io/github/v/release/open-telemetry/opentelemetry-collector?include_prereleases&amp;amp;style=for-the-badge" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://www.bestpractices.dev/projects/8404"&gt;&lt;img src="https://www.bestpractices.dev/projects/8404/badge" /&gt; &lt;/a&gt; &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:opentelemetry"&gt; &lt;img alt="Fuzzing Status" src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/opentelemetry.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/vision.md"&gt;Vision&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://opentelemetry.io/docs/collector/configuration/"&gt;Configuration&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://opentelemetry.io/docs/collector/internal-telemetry/#use-internal-telemetry-to-monitor-the-collector"&gt;Monitoring&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/security-best-practices.md"&gt;Security&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://pkg.go.dev/go.opentelemetry.io/collector"&gt;Package&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;&lt;img src="https://opentelemetry.io/img/logos/opentelemetry-logo-nav.png" alt="OpenTelemetry Icon" width="45" height="" /&gt; OpenTelemetry Collector&lt;/h1&gt; 
&lt;p&gt;The OpenTelemetry Collector offers a vendor-agnostic implementation on how to receive, process and export telemetry data. In addition, it removes the need to run, operate and maintain multiple agents/collectors in order to support open-source telemetry data formats (e.g. Jaeger, Prometheus, etc.) to multiple open-source or commercial back-ends.&lt;/p&gt; 
&lt;p&gt;Objectives:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usable: Reasonable default configuration, supports popular protocols, runs and collects out of the box.&lt;/li&gt; 
 &lt;li&gt;Performant: Highly stable and performant under varying loads and configurations.&lt;/li&gt; 
 &lt;li&gt;Observable: An exemplar of an observable service.&lt;/li&gt; 
 &lt;li&gt;Extensible: Customizable without touching the core code.&lt;/li&gt; 
 &lt;li&gt;Unified: Single codebase, deployable as an agent or collector with support for traces, metrics and logs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The OpenTelemetry Collector SIG is present at the &lt;a href="https://cloud-native.slack.com/archives/C01N6P7KR6W"&gt;#otel-collector&lt;/a&gt; channel on the CNCF Slack and &lt;a href="https://github.com/open-telemetry/community#implementation-sigs"&gt;meets once a week&lt;/a&gt; via video calls. Everyone is invited to join those calls, which typically serves the following purposes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;meet the humans behind the project&lt;/li&gt; 
 &lt;li&gt;get an opinion about specific proposals&lt;/li&gt; 
 &lt;li&gt;look for a sponsor for a proposed component after trying already via GitHub and Slack&lt;/li&gt; 
 &lt;li&gt;get attention to a specific pull-request that got stuck and is difficult to discuss asynchronously&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We rotate our video calls between three time slots, in order to allow everyone to join at least once every three meetings. The rotation order is as follows:&lt;/p&gt; 
&lt;p&gt;Tuesday:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=1700"&gt;17:00 PT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Wednesday:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=0900"&gt;09:00 PT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=0500"&gt;05:00 PT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Contributors to the project are also welcome to have ad-hoc meetings for synchronous discussions about specific points. Post a note in #otel-collector-dev on Slack inviting others, specifying the topic to be discussed. Unless there are strong reasons to keep the meeting private, please make it an open invitation for other contributors to join. Try also to identify who would be the other contributors interested on that topic and in which timezones they are.&lt;/p&gt; 
&lt;p&gt;Remember that our source of truth is GitHub: every decision made via Slack or video calls has to be recorded in the relevant GitHub issue. Ideally, the agenda items from the meeting notes would include a link to the issue or pull request where a discussion is happening already. We acknowledge that not everyone can join Slack or the synchronous calls and don't want them to feel excluded.&lt;/p&gt; 
&lt;h2&gt;Supported OTLP version&lt;/h2&gt; 
&lt;p&gt;This code base is currently built against using OTLP protocol v1.5.0, considered Stable. &lt;a href="https://github.com/open-telemetry/opentelemetry-proto?tab=readme-ov-file#stability-definition"&gt;See the OpenTelemetry Protocol Stability definition here.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Stability levels&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/component-stability.md"&gt;Stability Levels and versioning&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;When used as a library, the OpenTelemetry Collector attempts to track the currently supported versions of Go, as &lt;a href="https://go.dev/doc/devel/release#policy"&gt;defined by the Go team&lt;/a&gt;. Removing support for an unsupported Go version is not considered a breaking change.&lt;/p&gt; 
&lt;p&gt;Support for Go versions on the OpenTelemetry Collector is updated as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will add build and tests steps for the new Go minor version.&lt;/li&gt; 
 &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will remove support for Go version &lt;code&gt;N-2&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Official OpenTelemetry Collector distro binaries will be built with a release in the latest Go minor version series.&lt;/p&gt; 
&lt;h2&gt;Verifying the images signatures&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] To verify a signed artifact or blob, first &lt;a href="https://docs.sigstore.dev/cosign/system_config/installation/"&gt;install Cosign&lt;/a&gt;, then follow the instructions below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We are signing the images &lt;code&gt;otel/opentelemetry-collector&lt;/code&gt; and &lt;code&gt;otel/opentelemetry-collector-contrib&lt;/code&gt; using &lt;a href="https://github.com/sigstore/cosign"&gt;sigstore cosign&lt;/a&gt; tool and to verify the signatures you can run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cosign verify \
  --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/&amp;lt;RELEASE_TAG&amp;gt; \
  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
  &amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;RELEASE_TAG&amp;gt;&lt;/code&gt;: is the release that you want to validate&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;&lt;/code&gt;: is the image that you want to check&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cosign verify --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0 --certificate-oidc-issuer=https://token.actions.githubusercontent.com ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0

Verification for ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0 --
The following checks were performed on each of these signatures:
  - The cosign claims were validated
  - Existence of the claims in the transparency log was verified offline
  - The code-signing certificate was verified using trusted certificate authority certificates

[{"critical":{"identity":{"docker-reference":"ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"},"image":{"docker-manifest-digest":"sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a"},"type":"cosign container image signature"},"optional":{"1.3.6.1.4.1.57264.1.1":"https://token.actions.githubusercontent.com","1.3.6.1.4.1.57264.1.2":"push","1.3.6.1.4.1.57264.1.3":"9e20bf5c142e53070ccb8320a20315fffb41469e","1.3.6.1.4.1.57264.1.4":"Release Contrib","1.3.6.1.4.1.57264.1.5":"open-telemetry/opentelemetry-collector-releases","1.3.6.1.4.1.57264.1.6":"refs/tags/v0.98.0","Bundle":{"SignedEntryTimestamp":"MEUCIQDdlmNeKXQrHnonwWiHLhLLwFDVDNoOBCn2sv85J9P8mgIgDQFssWJImo1hn38VlojvSCL7Qq5FMmtnGu0oLsNdOm8=","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FVUNJUURFbDV6N0diMWRVYkM5KzR4c1VvbDhMcWZNV2hiTzhkdEpwdExyMXhUNWZnSWdTdEwwN1I0ZDA5R2x0ZkV0azJVbmlJSlJhQVdrVDJNWDVtRXJNSlplc2pRPSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaG9ha05EUW5jeVowRjNTVUpCWjBsVlNETkNjRFZTYlVSU1VpOXphMWg0YVdWUFlrcFhSbmRrUjNNNGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJOTlZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkUwMVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVZyWlRsSE1ubHNjMjkzYVZZMmRFOVZSazlRVVhNd2NXY3hTSEV5WmpsVUx6UTJZbEFLU1ZSNE0ybFRkVXBhV0hGc1dEUldWV2Q1VlZndmNVazJhblZ2WlZSVEswaG5XVUoyYjBseVNERTFUeTltZEd0VmVtRlBRMEpwZDNkbloxbHZUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZHTkRrMUNrdDFNRWhqTm5rek1rNUNTVTFFU21ReVpuWkxNMHBCZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwWjFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpoQ1NHOUJaVUZDTWtGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUlVOUlFVRkJVVVJCUldOM1VsRkpaMWg2Y2xaME0xQjRkU3ROWVZKRkswUkdORzlGUldNMGVucHphSGR1VDJ4bGMwZGlla2xwYnpNS0wxWmpRMGxSUkZNelJ6QmlNemRhYUhRNGFITjJUSEozYkc1UFFXYzJWRXh1U1ZSS09HTjNkMVEzTW5sMVRVdFlUbFJCUzBKblozRm9hMnBQVUZGUlJBcEJkMDV1UVVSQ2EwRnFRWGxFUkZSYVFqQlRPVXBGYkZsSGJuTnZWVmhLYm04MU5Fc3ZUVUZUTlN0RFFVMU9lbWRqUWpWQ2JrRk5OMWhNUjBoV01HRnhDbVpaY21weFkyOXFia3RaUTAxSFRWRnFjalpUVGt0Q2NVaEtZVGwxTDBSTlQySlpNa0pKTVV0ME4yTnhOemhFT0VOcVMzQmFVblJoYnpadFVVMUVZMk1LUms5M2VYWnhWalJPVld0dlpsRTlQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=","integratedTime":1712809120,"logIndex":84797936,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}},"Issuer":"https://token.actions.githubusercontent.com","Subject":"https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0","githubWorkflowName":"Release Contrib","githubWorkflowRef":"refs/tags/v0.98.0","githubWorkflowRepository":"open-telemetry/opentelemetry-collector-releases","githubWorkflowSha":"9e20bf5c142e53070ccb8320a20315fffb41469e","githubWorkflowTrigger":"push"}},{"critical":{"identity":{"docker-reference":"ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"},"image":{"docker-manifest-digest":"sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a"},"type":"cosign container image signature"},"optional":{"1.3.6.1.4.1.57264.1.1":"https://token.actions.githubusercontent.com","1.3.6.1.4.1.57264.1.2":"push","1.3.6.1.4.1.57264.1.3":"9e20bf5c142e53070ccb8320a20315fffb41469e","1.3.6.1.4.1.57264.1.4":"Release Contrib","1.3.6.1.4.1.57264.1.5":"open-telemetry/opentelemetry-collector-releases","1.3.6.1.4.1.57264.1.6":"refs/tags/v0.98.0","Bundle":{"SignedEntryTimestamp":"MEUCIQD1ehDnPO6fzoPIpeQ3KFuYHHBiX7RcEbpo9B2r7JAlzwIgZ1bsuQz7gAXbNU1IEdsTQgfAnRk3xVXO16GnKXM2sAQ=","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FUUNJRU92QXl0aE5RVGNvNHFMdG9GZUVOV0toNCtEK2I5SUxyYWhoa09WMmVBM0FpQjNEL2FpUGd1T05zUlB5alhaWk1hdnlCam0vMkVxNFNUMkZJWHozTnpyYWc9PSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaHBSRU5EUW5jMlowRjNTVUpCWjBsVlZuRlRLMnd4WXpoMWVFUktOWEppZDAxMlVuaDBSR3hXVW1nMGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJSZVZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkZGNVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVYyWlRCdGJrRkdRVzl1TVZoUGRIVlRMMXBNT0djeE5YUlJkVmxPTmtRemVUUlBWM0FLT1ZSTFMwUlVkRkJHU2xST1ZrWlJkVTlKUWs1bVJqWk1ORTlGYkd4dlZuUndaSE5uYjB0NVZGTnlPR3hTV1c1S1JIRlBRMEpwTUhkbloxbHdUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZDSzFkSENuVmtlRE5IZUcxS1RWUkpUVVJyYW13clJtdzFXRzkzZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwZDFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpsQ1NITkJaVkZDTTBGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUjJKSlFVRkJVVVJCUldkM1VtZEphRUZQZUZNM2RteDRjVzVGYTBKVVRtSlZVRUpsUkZSbk0waGtlRlkyY0cxWk9FdGliREV6TjNBS1lWUnViMEZwUlVFelMyMUxVbU5uYWxBeVQzSmxORVpyVm5vNU4xaENNWGRsUzBOeWFXazFTMWx2UTB0bVkxRktSREJSZDBObldVbExiMXBKZW1vd1JRcEJkMDFFWVVGQmQxcFJTWGhCUzNwcVpHMUZTV2gzV21Kb1lVSlNlalk1Y1N0MWVrNVZSMmxhYlRWVk4xcE5aWFJMUTFSM1VFTkljRkZQVldvdlVERkJDa2R0YWt3elJucFFObTVpYkRGblNYZFNUbXN6UkhkNWMwOUJUMHhoUVVoR09IaHhZV0ZzT0U5WGNGRmFhRGh4TTJVMVNVSmFXR0ZWVkhocFlWbGFTM29LUXpWS1RGVlNWbnBMTURsd04wVjBUd290TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=","integratedTime":1712809122,"logIndex":84797940,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}},"Issuer":"https://token.actions.githubusercontent.com","Subject":"https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0","githubWorkflowName":"Release Contrib","githubWorkflowRef":"refs/tags/v0.98.0","githubWorkflowRepository":"open-telemetry/opentelemetry-collector-releases","githubWorkflowSha":"9e20bf5c142e53070ccb8320a20315fffb41469e","githubWorkflowTrigger":"push"}}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] We started signing the images with release &lt;code&gt;v0.95.0&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;Here is a list of community roles with current and previous members:&lt;/p&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/codeboten"&gt;Alex Boten&lt;/a&gt;, Honeycomb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BogdanDrutu"&gt;Bogdan Drutu&lt;/a&gt;, Snowflake&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmitryax"&gt;Dmitrii Anoshin&lt;/a&gt;, Splunk&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mx-psi"&gt;Pablo Baeyens&lt;/a&gt;, DataDog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the maintainer role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#maintainer"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Approvers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atoulme"&gt;Antoine Toulme&lt;/a&gt;, Splunk&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmathieu"&gt;Damien Mathieu&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evan-bradley"&gt;Evan Bradley&lt;/a&gt;, Dynatrace&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jade-guiton-dd"&gt;Jade Guiton&lt;/a&gt;, Datadog&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jmacd"&gt;Joshua MacDonald&lt;/a&gt;, Microsoft&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TylerHelmuth"&gt;Tyler Helmuth&lt;/a&gt;, Honeycomb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/songy23"&gt;Yang Song&lt;/a&gt;, Datadog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the approver role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#approver"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In addition to what is described at the organization-level, the SIG Collector requires all core approvers to take part in rotating the role of the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/release.md#release-manager"&gt;release manager&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andrzej-stencel"&gt;Andrzej Stencel&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sincejune"&gt;Chao Weng&lt;/a&gt;, AppDynamics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VihasMakwana"&gt;Vihas Makwana&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;Actively seeking contributors to triage issues&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the triager role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#triager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pjanotti"&gt;Paulo Janotti&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tigrannajaryan"&gt;Tigran Najaryan&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Approvers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aneurysm9"&gt;Anthony Mirabella&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djaglowski"&gt;Daniel Jaglowski&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/james-bebbington"&gt;James Bebbington&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jrcamp"&gt;Jay Camp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jpkrohling"&gt;Juraci Paixão Kröhling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nilebox"&gt;Nail Islamov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/owais"&gt;Owais Lone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rghetia"&gt;Rahul Patel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sjkaris"&gt;Steven Karis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alolita"&gt;Alolita Sharma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andrewhsu"&gt;Andrew Hsu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/punya"&gt;Punya Biswal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flands"&gt;Steve Flanders&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Thanks to all of our contributors!&lt;/h3&gt; 
&lt;a href="https://github.com/open-telemetry/opentelemetry-collector/graphs/contributors"&gt; &lt;img alt="Repo contributors" src="https://contrib.rocks/image?repo=open-telemetry/opentelemetry-collector" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>cilium/cilium</title>
      <link>https://github.com/cilium/cilium</link>
      <description>&lt;p&gt;eBPF-based Networking, Security, and Observability&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; 
&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="https://cdn.jsdelivr.net/gh/cilium/cilium@main/Documentation/images/logo.png" width="350" alt="Cilium Logo" /&gt; 
 &lt;img src="https://cdn.jsdelivr.net/gh/cilium/cilium@main/Documentation/images/logo-dark.png" width="350" alt="Cilium Logo" /&gt; 
&lt;/picture&gt; 
&lt;p&gt;|cii| |go-report| |clomonitor| |artifacthub| |slack| |go-doc| |rtd| |apache| |bsd| |gpl| |fossa| |gateway-api| |codespaces|&lt;/p&gt; 
&lt;p&gt;Cilium is a networking, observability, and security solution with an eBPF-based dataplane. It provides a simple flat Layer 3 network with the ability to span multiple clusters in either a native routing or overlay mode. It is L7-protocol aware and can enforce network policies on L3-L7 using an identity based security model that is decoupled from network addressing.&lt;/p&gt; 
&lt;p&gt;Cilium implements distributed load balancing for traffic between pods and to external services, and is able to fully replace kube-proxy, using efficient hash tables in eBPF allowing for almost unlimited scale. It also supports advanced functionality like integrated ingress and egress gateway, bandwidth management and service mesh, and provides deep network and security visibility and monitoring.&lt;/p&gt; 
&lt;p&gt;A new Linux kernel technology called eBPF_ is at the foundation of Cilium. It supports dynamic insertion of eBPF bytecode into the Linux kernel at various integration points such as: network IO, application sockets, and tracepoints to implement security, networking and visibility logic. eBPF is highly efficient and flexible. To learn more about eBPF, visit &lt;code&gt;eBPF.io&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;.. image:: Documentation/images/cilium-overview.png :alt: Overview of Cilium features for networking, observability, service mesh, and runtime security&lt;/p&gt; 
&lt;p&gt;.. raw:: html&lt;/p&gt; 
&lt;a href="https://cncf.io/"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/cncf/artwork/blob/main/other/cncf-member/graduated/color/cncf-graduated-color.svg" /&gt; 
  &lt;img src="https://github.com/cncf/artwork/raw/main/other/cncf-member/graduated/white/cncf-graduated-white.svg?sanitize=true" alt="CNCF Graduated Project" height="80" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;a href="https://ebpf.io/"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset=".github/assets/powered-by-ebpf.svg" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/cilium/cilium/main/.github/assets/powered-by-ebpf_white.svg?sanitize=true" alt="Powered by eBPF" height="80" align="right" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h1&gt;Stable Releases&lt;/h1&gt; 
&lt;p&gt;The Cilium community maintains minor stable releases for the last three minor Cilium versions. Older Cilium stable versions from minor releases prior to that are considered EOL.&lt;/p&gt; 
&lt;p&gt;For upgrades to new minor releases please consult the &lt;code&gt;Cilium Upgrade Guide&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;Listed below are the actively maintained release branches along with their latest patch release, corresponding image pull tags and their release notes:&lt;/p&gt; 
&lt;p&gt;+---------------------------------------------------------+------------+------------------------------------+----------------------------------------------------------------------------+ | &lt;code&gt;v1.18 &amp;lt;https://github.com/cilium/cilium/tree/v1.18&amp;gt;&lt;/code&gt;__ | 2025-07-29 | &lt;code&gt;quay.io/cilium/cilium:v1.18.0&lt;/code&gt; | &lt;code&gt;Release Notes &amp;lt;https://github.com/cilium/cilium/releases/tag/v1.18.0&amp;gt;&lt;/code&gt;__ | +---------------------------------------------------------+------------+------------------------------------+----------------------------------------------------------------------------+ | &lt;code&gt;v1.17 &amp;lt;https://github.com/cilium/cilium/tree/v1.17&amp;gt;&lt;/code&gt;__ | 2025-07-16 | &lt;code&gt;quay.io/cilium/cilium:v1.17.6&lt;/code&gt; | &lt;code&gt;Release Notes &amp;lt;https://github.com/cilium/cilium/releases/tag/v1.17.6&amp;gt;&lt;/code&gt;__ | +---------------------------------------------------------+------------+------------------------------------+----------------------------------------------------------------------------+ | &lt;code&gt;v1.16 &amp;lt;https://github.com/cilium/cilium/tree/v1.16&amp;gt;&lt;/code&gt;__ | 2025-07-16 | &lt;code&gt;quay.io/cilium/cilium:v1.16.12&lt;/code&gt; | &lt;code&gt;Release Notes &amp;lt;https://github.com/cilium/cilium/releases/tag/v1.16.12&amp;gt;&lt;/code&gt;__ | +---------------------------------------------------------+------------+------------------------------------+----------------------------------------------------------------------------+&lt;/p&gt; 
&lt;h2&gt;Architectures&lt;/h2&gt; 
&lt;p&gt;Cilium images are distributed for AMD64 and AArch64 architectures.&lt;/p&gt; 
&lt;h2&gt;Software Bill of Materials&lt;/h2&gt; 
&lt;p&gt;Starting with Cilium version 1.13.0, all images include a Software Bill of Materials (SBOM). The SBOM is generated in &lt;code&gt;SPDX&lt;/code&gt;_ format. More information on this is available on &lt;code&gt;Cilium SBOM&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;.. _&lt;code&gt;SPDX&lt;/code&gt;: &lt;a href="https://spdx.dev/"&gt;https://spdx.dev/&lt;/a&gt; .. _&lt;code&gt;Cilium SBOM&lt;/code&gt;: &lt;a href="https://docs.cilium.io/en/latest/configuration/sbom/"&gt;https://docs.cilium.io/en/latest/configuration/sbom/&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;p&gt;For development and testing purpose, the Cilium community publishes snapshots, early release candidates (RC) and CI container images build from the &lt;code&gt;main branch &amp;lt;https://github.com/cilium/cilium/commits/main&amp;gt;&lt;/code&gt;_. These images are not for use in production.&lt;/p&gt; 
&lt;p&gt;For testing upgrades to new development releases please consult the latest development build of the &lt;code&gt;Cilium Upgrade Guide&lt;/code&gt;_.&lt;/p&gt; 
&lt;p&gt;Listed below are branches for testing along with their snapshots or RC releases, corresponding image pull tags and their release notes where applicable:&lt;/p&gt; 
&lt;p&gt;+----------------------------------------------------------------------------+------------+-----------------------------------------+---------------------------------------------------------------------------------+ | &lt;code&gt;main &amp;lt;https://github.com/cilium/cilium/commits/main&amp;gt;&lt;/code&gt;__ | daily | &lt;code&gt;quay.io/cilium/cilium-ci:latest&lt;/code&gt; | N/A | +----------------------------------------------------------------------------+------------+-----------------------------------------+---------------------------------------------------------------------------------+&lt;/p&gt; 
&lt;h1&gt;Functionality Overview&lt;/h1&gt; 
&lt;p&gt;.. begin-functionality-overview&lt;/p&gt; 
&lt;h2&gt;CNI (Container Network Interface)&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;Cilium as a CNI plugin &amp;lt;https://cilium.io/use-cases/cni/&amp;gt;&lt;/code&gt;_ provides a fast, scalable, and secure networking layer for Kubernetes clusters. Built on eBPF, it offers several deployment options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Overlay networking:&lt;/strong&gt; encapsulation-based virtual network spanning all hosts with support for VXLAN and Geneve. It works on almost any network infrastructure as the only requirement is IP connectivity between hosts which is typically already given.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Native routing mode:&lt;/strong&gt; Use of the regular routing table of the Linux host. The network is required to be capable of routing the IP addresses of the application containers. It integrates with cloud routers, routing daemons, and IPv6-native infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flexible routing options:&lt;/strong&gt; Cilium can automate route learning and advertisement in common topologies such as using L2 neighbor discovery when nodes share a layer 2 domain, or BGP when routing across layer 3 boundaries.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each mode is designed for maximum interoperability with existing infrastructure while minimizing operational burden.&lt;/p&gt; 
&lt;h2&gt;Load Balancing&lt;/h2&gt; 
&lt;p&gt;Cilium implements distributed load balancing for traffic between application containers and to/from external services. The load balancing is implemented in eBPF using efficient hashtables enabling high service density and low latency at scale.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;East-west load balancing&lt;/strong&gt; rewrites service connections at the socket level (&lt;code&gt;connect()&lt;/code&gt;), avoiding the overhead of per-packet NAT and fully &lt;code&gt;replacing kube-proxy &amp;lt;https://cilium.io/use-cases/kube-proxy/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;North-south load balancing&lt;/strong&gt; supports XDP for high-throughput scenarios and &lt;code&gt;layer 4 load balancing &amp;lt;https://cilium.io/use-cases/load-balancer/&amp;gt;&lt;/code&gt;_ including Direct Server Return (DSR), and Maglev consistent hashing.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Cluster Mesh&lt;/h2&gt; 
&lt;p&gt;Cilium &lt;code&gt;Cluster Mesh &amp;lt;https://cilium.io/use-cases/cluster-mesh/&amp;gt;&lt;/code&gt;_ enables secure, seamless connectivity across multiple Kubernetes clusters. For operators running hybrid or multi-cloud environments, Cluster Mesh ensures a consistent security and connectivity experience.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Global service discovery&lt;/strong&gt;: Workloads across clusters can discover and connect to services as if they were local. This enables fault tolerance, like automatically failing over to backends in another cluster, and exposes shared services like logging, auth, or databases across environments.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified identity model:&lt;/strong&gt; Security policies are enforced based on identity, not IP address, across all clusters.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Network Policy&lt;/h2&gt; 
&lt;p&gt;Cilium &lt;code&gt;Network Policy &amp;lt;https://cilium.io/use-cases/network-policy/&amp;gt;&lt;/code&gt;_ provides identity-aware enforcement across L3-L7. Typical container firewalls secure workloads by filtering on source IP addresses and destination ports. This concept requires the firewalls on all servers to be manipulated whenever a container is started anywhere in the cluster.&lt;/p&gt; 
&lt;p&gt;In order to avoid this situation which limits scale, Cilium assigns a security identity to groups of application containers which share identical security policies. The identity is then associated with all network packets emitted by the application containers, allowing to validate the identity at the receiving node.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Identity-based security&lt;/strong&gt; removes reliance on brittle IP addresses.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;L3/L4 policies&lt;/strong&gt; restrict traffic based on labels, protocols, and ports.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;DNS-based policies:&lt;/strong&gt; Allow or deny traffic to FQDNs or wildcard domains (e.g., &lt;code&gt;api.example.com&lt;/code&gt;, &lt;code&gt;*.trusted.com&lt;/code&gt;). This is especially useful for securing egress traffic to third-party services.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;L7-aware policies&lt;/strong&gt; allow filtering by HTTP method, URL path, gRPC call, and more:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Example: Allow only GET requests to &lt;code&gt;/public/.*&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Enforce the presence of headers like &lt;code&gt;X-Token: [0-9]+&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CIDR-based egress and ingress policies are also supported for controlling access to external IPs, ideal for integrating with legacy systems or regulatory boundaries.&lt;/p&gt; 
&lt;h2&gt;Service Mesh&lt;/h2&gt; 
&lt;p&gt;With Cilium &lt;code&gt;Service Mesh &amp;lt;https://cilium.io/use-cases/service-mesh/&amp;gt;&lt;/code&gt;_, operators gain the benefits of fine-grained traffic control, encryption, observability, access control, without the cost and complexity of traditional proxy-based designs. Key features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mutual authentication&lt;/strong&gt; with automatic identity-based encryption between workloads using IPSec or WireGuard.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;L7-aware policy enforcement&lt;/strong&gt; for security and compliance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deep integration with the Kubernetes Gateway API :&lt;/strong&gt; Acts as a &lt;code&gt;Gateway API &amp;lt;https://cilium.io/use-cases/gateway-api/&amp;gt;&lt;/code&gt;_ compliant data plane, allowing you to declaratively manage ingress, traffic splitting, and routing behavior using Kubernetes-native CRDs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Observability and Troubleshooting&lt;/h2&gt; 
&lt;p&gt;Observability is built into Cilium from the ground up, providing rich visibility that helps operators diagnose and understand system behavior including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hubble&lt;/strong&gt;: A fully integrated observability platform that offers real-time service maps, flow visibility with identity and label metadata, and DNS-aware filtering and protocol-specific insights&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Metrics and alerting&lt;/strong&gt;: Integration with Prometheus, Grafana, and other monitoring systems.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Drop reasons and audit trails&lt;/strong&gt;: Get actionable insights into why traffic was dropped, including policy or port violations and issues like failed DNS lookups.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;.. end-functionality-overview&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Why Cilium?&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Architecture and Concepts&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Installing Cilium&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Frequently Asked Questions&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;Contributing_&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Community&lt;/h1&gt; 
&lt;h2&gt;Slack&lt;/h2&gt; 
&lt;p&gt;Join the Cilium &lt;code&gt;Slack channel &amp;lt;https://slack.cilium.io&amp;gt;&lt;/code&gt;_ to chat with Cilium developers and other Cilium users. This is a good place to learn about Cilium, ask questions, and share your experiences.&lt;/p&gt; 
&lt;h2&gt;Special Interest Groups (SIG)&lt;/h2&gt; 
&lt;p&gt;See &lt;code&gt;Special Interest groups &amp;lt;https://github.com/cilium/community/blob/main/sigs.yaml&amp;gt;&lt;/code&gt;_ for a list of all SIGs and their meeting times.&lt;/p&gt; 
&lt;h2&gt;Developer meetings&lt;/h2&gt; 
&lt;p&gt;The Cilium developer community hangs out on Zoom to chat. Everybody is welcome.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Weekly, Wednesday, 5:00 pm &lt;code&gt;Europe/Zurich time &amp;lt;https://time.is/Canton_of_Zurich&amp;gt;&lt;/code&gt;__ (CET/CEST), usually equivalent to 8:00 am PT, or 11:00 am ET. &lt;code&gt;Meeting Notes and Zoom Info&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;Third Wednesday of each month, 9:00 am &lt;code&gt;Japan time &amp;lt;https://time.is/Tokyo&amp;gt;&lt;/code&gt;__ (JST). &lt;code&gt;APAC Meeting Notes and Zoom Info&lt;/code&gt;_&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;eBPF &amp;amp; Cilium Office Hours livestream&lt;/h2&gt; 
&lt;p&gt;We host a weekly community &lt;code&gt;YouTube livestream called eCHO &amp;lt;https://www.youtube.com/channel/UCJFUxkVQTBJh3LD1wYBWvuQ&amp;gt;&lt;/code&gt;_ which (very loosely!) stands for eBPF &amp;amp; Cilium Office Hours. Join us live, catch up with past episodes, or head over to the &lt;code&gt;eCHO repo &amp;lt;https://github.com/isovalent/eCHO&amp;gt;&lt;/code&gt;_ and let us know your ideas for topics we should cover.&lt;/p&gt; 
&lt;h2&gt;Governance&lt;/h2&gt; 
&lt;p&gt;The Cilium project is governed by a group of &lt;code&gt;Maintainers and Committers &amp;lt;https://raw.githubusercontent.com/cilium/cilium/main/MAINTAINERS.md&amp;gt;&lt;/code&gt;&lt;strong&gt;. How they are selected and govern is outlined in our &lt;code&gt;governance document &amp;lt;https://github.com/cilium/community/blob/main/GOVERNANCE.md&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;A list of adopters of the Cilium project who are deploying it in production, and of their use cases, can be found in file &lt;code&gt;USERS.md &amp;lt;https://github.com/cilium/cilium/blob/main/USERS.md&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;.. _apache-license: LICENSE .. _bsd-license: bpf/LICENSE.BSD-2-Clause .. _gpl-license: bpf/LICENSE.GPL-2.0&lt;/p&gt; 
&lt;p&gt;The Cilium user space components are licensed under the &lt;code&gt;Apache License, Version 2.0 &amp;lt;apache-license_&amp;gt;&lt;/code&gt;&lt;strong&gt;. The BPF code templates are dual-licensed under the &lt;code&gt;General Public License, Version 2.0 (only) &amp;lt;gpl-license_&amp;gt;&lt;/code&gt;&lt;/strong&gt; and the &lt;code&gt;2-Clause BSD License &amp;lt;bsd-license_&amp;gt;&lt;/code&gt;__ (you can use the terms of either license, at your option).&lt;/p&gt; 
&lt;p&gt;.. _&lt;code&gt;Cilium Upgrade Guide&lt;/code&gt;: &lt;a href="https://docs.cilium.io/en/stable/operations/upgrade/"&gt;https://docs.cilium.io/en/stable/operations/upgrade/&lt;/a&gt; .. _&lt;code&gt;Why Cilium?&lt;/code&gt;: &lt;a href="https://docs.cilium.io/en/stable/overview/intro"&gt;https://docs.cilium.io/en/stable/overview/intro&lt;/a&gt; .. _&lt;code&gt;Getting Started&lt;/code&gt;: &lt;a href="https://docs.cilium.io/en/stable/#getting-started"&gt;https://docs.cilium.io/en/stable/#getting-started&lt;/a&gt; .. _&lt;code&gt;Architecture and Concepts&lt;/code&gt;: &lt;a href="https://docs.cilium.io/en/stable/overview/component-overview/"&gt;https://docs.cilium.io/en/stable/overview/component-overview/&lt;/a&gt; .. _&lt;code&gt;Installing Cilium&lt;/code&gt;: &lt;a href="https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/"&gt;https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/&lt;/a&gt; .. _&lt;code&gt;Frequently Asked Questions&lt;/code&gt;: &lt;a href="https://github.com/cilium/cilium/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+label%3Akind%2Fquestion+"&gt;https://github.com/cilium/cilium/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+label%3Akind%2Fquestion+&lt;/a&gt; .. _Contributing: &lt;a href="https://docs.cilium.io/en/stable/contributing/development/"&gt;https://docs.cilium.io/en/stable/contributing/development/&lt;/a&gt; .. _Prerequisites: &lt;a href="https://docs.cilium.io/en/stable/operations/system_requirements/"&gt;https://docs.cilium.io/en/stable/operations/system_requirements/&lt;/a&gt; .. _&lt;code&gt;eBPF&lt;/code&gt;: &lt;a href="https://ebpf.io"&gt;https://ebpf.io&lt;/a&gt; .. _&lt;code&gt;eBPF.io&lt;/code&gt;: &lt;a href="https://ebpf.io"&gt;https://ebpf.io&lt;/a&gt; .. _&lt;code&gt;Meeting Notes and Zoom Info&lt;/code&gt;: &lt;a href="https://docs.google.com/document/d/1Y_4chDk4rznD6UgXPlPvn3Dc7l-ZutGajUv1eF0VDwQ/edit#"&gt;https://docs.google.com/document/d/1Y_4chDk4rznD6UgXPlPvn3Dc7l-ZutGajUv1eF0VDwQ/edit#&lt;/a&gt; .. _&lt;code&gt;APAC Meeting Notes and Zoom Info&lt;/code&gt;: &lt;a href="https://docs.google.com/document/d/1egv4qLydr0geP-GjQexYKm4tz3_tHy-LCBjVQcXcT5M/edit#"&gt;https://docs.google.com/document/d/1egv4qLydr0geP-GjQexYKm4tz3_tHy-LCBjVQcXcT5M/edit#&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |go-report| image:: &lt;a href="https://goreportcard.com/badge/github.com/cilium/cilium"&gt;https://goreportcard.com/badge/github.com/cilium/cilium&lt;/a&gt; :alt: Go Report Card :target: &lt;a href="https://goreportcard.com/report/github.com/cilium/cilium"&gt;https://goreportcard.com/report/github.com/cilium/cilium&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |go-doc| image:: &lt;a href="https://godoc.org/github.com/cilium/cilium?status.svg"&gt;https://godoc.org/github.com/cilium/cilium?status.svg&lt;/a&gt; :alt: GoDoc :target: &lt;a href="https://godoc.org/github.com/cilium/cilium"&gt;https://godoc.org/github.com/cilium/cilium&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |rtd| image:: &lt;a href="https://readthedocs.org/projects/docs/badge/?version=latest"&gt;https://readthedocs.org/projects/docs/badge/?version=latest&lt;/a&gt; :alt: Read the Docs :target: &lt;a href="https://docs.cilium.io/"&gt;https://docs.cilium.io/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |apache| image:: &lt;a href="https://img.shields.io/badge/license-Apache-blue.svg"&gt;https://img.shields.io/badge/license-Apache-blue.svg&lt;/a&gt; :alt: Apache licensed :target: apache-license_&lt;/p&gt; 
&lt;p&gt;.. |bsd| image:: &lt;a href="https://img.shields.io/badge/license-BSD-blue.svg"&gt;https://img.shields.io/badge/license-BSD-blue.svg&lt;/a&gt; :alt: BSD licensed :target: bsd-license_&lt;/p&gt; 
&lt;p&gt;.. |gpl| image:: &lt;a href="https://img.shields.io/badge/license-GPL-blue.svg"&gt;https://img.shields.io/badge/license-GPL-blue.svg&lt;/a&gt; :alt: GPL licensed :target: gpl-license_&lt;/p&gt; 
&lt;p&gt;.. |slack| image:: &lt;a href="https://img.shields.io/badge/slack-cilium-brightgreen.svg?logo=slack"&gt;https://img.shields.io/badge/slack-cilium-brightgreen.svg?logo=slack&lt;/a&gt; :alt: Join the Cilium slack channel :target: &lt;a href="https://slack.cilium.io"&gt;https://slack.cilium.io&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |cii| image:: &lt;a href="https://bestpractices.coreinfrastructure.org/projects/1269/badge"&gt;https://bestpractices.coreinfrastructure.org/projects/1269/badge&lt;/a&gt; :alt: CII Best Practices :target: &lt;a href="https://bestpractices.coreinfrastructure.org/projects/1269"&gt;https://bestpractices.coreinfrastructure.org/projects/1269&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |clomonitor| image:: &lt;a href="https://img.shields.io/endpoint?url=https://clomonitor.io/api/projects/cncf/cilium/badge"&gt;https://img.shields.io/endpoint?url=https://clomonitor.io/api/projects/cncf/cilium/badge&lt;/a&gt; :alt: CLOMonitor :target: &lt;a href="https://clomonitor.io/projects/cncf/cilium"&gt;https://clomonitor.io/projects/cncf/cilium&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |artifacthub| image:: &lt;a href="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/cilium"&gt;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/cilium&lt;/a&gt; :alt: Artifact Hub :target: &lt;a href="https://artifacthub.io/packages/helm/cilium/cilium"&gt;https://artifacthub.io/packages/helm/cilium/cilium&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |fossa| image:: &lt;a href="https://app.fossa.com/api/projects/custom%2B162%2Fgit%40github.com%3Acilium%2Fcilium.git.svg?type=shield"&gt;https://app.fossa.com/api/projects/custom%2B162%2Fgit%40github.com%3Acilium%2Fcilium.git.svg?type=shield&lt;/a&gt; :alt: FOSSA Status :target: &lt;a href="https://app.fossa.com/projects/custom%2B162%2Fgit%40github.com%3Acilium%2Fcilium.git?ref=badge_shield"&gt;https://app.fossa.com/projects/custom%2B162%2Fgit%40github.com%3Acilium%2Fcilium.git?ref=badge_shield&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |gateway-api| image:: &lt;a href="https://img.shields.io/badge/Gateway%20API%20Conformance%20v1.2.0-Cilium-green"&gt;https://img.shields.io/badge/Gateway%20API%20Conformance%20v1.2.0-Cilium-green&lt;/a&gt; :alt: Gateway API Status :target: &lt;a href="https://github.com/kubernetes-sigs/gateway-api/tree/main/conformance/reports/v1.2.0/cilium-cilium"&gt;https://github.com/kubernetes-sigs/gateway-api/tree/main/conformance/reports/v1.2.0/cilium-cilium&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;.. |codespaces| image:: &lt;a href="https://img.shields.io/badge/Open_in_GitHub_Codespaces-gray?logo=github"&gt;https://img.shields.io/badge/Open_in_GitHub_Codespaces-gray?logo=github&lt;/a&gt; :alt: Github Codespaces :target: &lt;a href="https://github.com/codespaces/new?hide_repo_select=true&amp;amp;ref=master&amp;amp;repo=48109239&amp;amp;machine=standardLinux32gb&amp;amp;location=WestEurope"&gt;https://github.com/codespaces/new?hide_repo_select=true&amp;amp;ref=master&amp;amp;repo=48109239&amp;amp;machine=standardLinux32gb&amp;amp;location=WestEurope&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fleetdm/fleet</title>
      <link>https://github.com/fleetdm/fleet</link>
      <description>&lt;p&gt;Open device management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://fleetdm.com"&gt;&lt;img width="200" alt="Fleet logo, landscape, dark text, transparent background" src="https://github.com/user-attachments/assets/5b52c536-f33e-4159-b2a3-d48f31868cd2" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;h4&gt;&lt;a href="https://fleetdm.com/announcements"&gt;News&lt;/a&gt; &amp;nbsp; · &amp;nbsp; &lt;a href="https://github.com/fleetdm/fleet/issues/new"&gt;Report a bug&lt;/a&gt; &amp;nbsp; · &amp;nbsp; &lt;a href="https://fleetdm.com/handbook/company"&gt;Handbook&lt;/a&gt; &amp;nbsp; · &amp;nbsp; &lt;a href="https://fleetdm.com/handbook/company/why-this-way#why-open-source"&gt;Why open source?&lt;/a&gt; &amp;nbsp; · &amp;nbsp; &lt;a href="https://fleetdm.com/logos"&gt;Art&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Open-source platform for IT and security teams with thousands of computers. Designed for APIs, GitOps, webhooks, YAML, and humans.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://fleetdm.com/logos"&gt;&lt;img src="https://github.com/fleetdm/fleet/assets/618009/f835ec29-1cb9-49ba-a0f3-395ffd9d5c9f" alt="A glass city in the clouds" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What's it for?&lt;/h2&gt; 
&lt;p&gt;Organizations like Fastly and Gusto use Fleet for vulnerability reporting, detection engineering, device management (MDM), device health monitoring, posture-based access control, managing unused software licenses, and more.&lt;/p&gt; 
&lt;h4&gt;Explore data&lt;/h4&gt; 
&lt;p&gt;To see what kind of data you can use Fleet to gather, check out the &lt;a href="https://fleetdm.com/tables"&gt;table reference documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Out-of-the-box policies&lt;/h4&gt; 
&lt;p&gt;Fleet includes out-of-the box support for all &lt;a href="https://fleetdm.com/docs/using-fleet/cis-benchmarks"&gt;CIS benchmarks for macOS and Windows&lt;/a&gt;, as well as many &lt;a href="https://fleetdm.com/queries"&gt;simpler queries&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Take as much or as little as you need for your organization.&lt;/p&gt; 
&lt;h4&gt;Supported platforms&lt;/h4&gt; 
&lt;p&gt;Here are the platforms Fleet currently supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux (all distros)&lt;/li&gt; 
 &lt;li&gt;macOS&lt;/li&gt; 
 &lt;li&gt;Windows&lt;/li&gt; 
 &lt;li&gt;Chromebooks&lt;/li&gt; 
 &lt;li&gt;Amazon Web Services (AWS)&lt;/li&gt; 
 &lt;li&gt;Google Cloud (GCP)&lt;/li&gt; 
 &lt;li&gt;Azure (Microsoft cloud)&lt;/li&gt; 
 &lt;li&gt;Data centers&lt;/li&gt; 
 &lt;li&gt;Containers (kube, etc)&lt;/li&gt; 
 &lt;li&gt;Linux-based IoT devices&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Lighter than air&lt;/h2&gt; 
&lt;p&gt;Fleet is lightweight and modular. You can use it for security without using it for MDM, and vice versa. You can turn off features you are not using.&lt;/p&gt; 
&lt;h4&gt;Openness&lt;/h4&gt; 
&lt;p&gt;Fleet is dedicated to flexibility, accessibility, and clarity. We think &lt;a href="https://fleetdm.com/handbook/company#openness"&gt;everyone can contribute&lt;/a&gt; and that tools should be as easy as possible for everyone to understand.&lt;/p&gt; 
&lt;h4&gt;Good neighbors&lt;/h4&gt; 
&lt;p&gt;Fleet has no ambition to replace all of your other tools. (Though it might replace some, if you want it to.) Ready-to-use, enterprise-friendly integrations exist for Snowflake, Splunk, GitHub Actions, Vanta, Elastic Jira, Zendesk, and more.&lt;/p&gt; 
&lt;p&gt;Fleet plays well with Munki, Chef, Puppet, and Ansible, as well as with security tools like Crowdstrike and SentinelOne. For example, you can use the free version of Fleet to quickly report on what hosts are &lt;em&gt;actually&lt;/em&gt; running your EDR agent.&lt;/p&gt; 
&lt;h4&gt;Free as in free&lt;/h4&gt; 
&lt;p&gt;The free version of Fleet will &lt;a href="https://fleetdm.com/pricing"&gt;always be free&lt;/a&gt;. Fleet is &lt;a href="https://linkedin.com/company/fleetdm"&gt;independently backed&lt;/a&gt; and actively maintained with the help of many amazing &lt;a href="https://github.com/fleetdm/fleet/graphs/contributors"&gt;contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Longevity&lt;/h4&gt; 
&lt;p&gt;The &lt;a href="https://fleetdm.com/handbook/company"&gt;company behind Fleet&lt;/a&gt; is founded (and majority-owned) by &lt;a href="https://fleetdm.com/handbook/company/why-this-way#why-open-source"&gt;true believers in open source&lt;/a&gt;. The company's business model is influenced by GitLab (NYSE: GTLB), with great investors, happy customers, and the capacity to become profitable at any time.&lt;/p&gt; 
&lt;p&gt;In keeping with Fleet's value of openness, &lt;a href="https://fleetdm.com/handbook/company"&gt;Fleet Device Management's company handbook&lt;/a&gt; is public and open source. You can read about the &lt;a href="https://fleetdm.com/handbook/company#history"&gt;history of Fleet and osquery&lt;/a&gt; and our commitment to improving the product.&lt;/p&gt; 
&lt;!-- &gt; To upgrade from Fleet ≤3.2.0, just follow the upgrading steps for the earliest subsequent major release from this repository (it'll work out of the box until the release of Fleet 5.0). --&gt; 
&lt;h2&gt;Is it any good?&lt;/h2&gt; 
&lt;p&gt;Fleet is used in production by IT and security teams with thousands of laptops and servers. Many deployments support tens of thousands of hosts, and a few large organizations manage deployments as large as 400,000+ hosts.&lt;/p&gt; 
&lt;h2&gt;Chat&lt;/h2&gt; 
&lt;p&gt;Please join us in &lt;a href="https://www.macadmins.org/"&gt;MacAdmins Slack&lt;/a&gt; or in &lt;a href="https://fleetdm.com/slack"&gt;osquery Slack&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Fleet community is full of &lt;a href="https://fleetdm.com/handbook/company#empathy"&gt;kind and helpful people&lt;/a&gt;. Whether or not you are a paying customer, if you need help, just ask.&lt;/p&gt; 
&lt;h2&gt;Contributing &amp;nbsp; &lt;a href="https://github.com/fleetdm/fleet/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/fleetdm/fleet/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Run Tests" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://goreportcard.com/report/github.com/fleetdm/fleet"&gt;&lt;img src="https://goreportcard.com/badge/github.com/fleetdm/fleet" alt="Go Report Card" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/5537"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/5537/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/fleetctl"&gt;&lt;img src="https://img.shields.io/twitter/follow/fleetctl.svg?style=social&amp;amp;maxAge=3600" alt="Twitter Follow" /&gt;&lt;/a&gt; &amp;nbsp;&lt;/h2&gt; 
&lt;p&gt;The landscape of cybersecurity and IT is too complex. Let's open it up.&lt;/p&gt; 
&lt;p&gt;Contributions are welcome, whether you answer questions on &lt;a href="https://fleetdm.com/slack"&gt;Slack&lt;/a&gt; / &lt;a href="https://github.com/fleetdm/fleet/issues"&gt;GitHub&lt;/a&gt; / &lt;a href="https://stackoverflow.com/search?q=osquery"&gt;StackOverflow&lt;/a&gt; / &lt;a href="https://linkedin.com/company/fleetdm"&gt;LinkedIn&lt;/a&gt; / &lt;a href="https://twitter.com/fleetctl"&gt;Twitter&lt;/a&gt;, improve the documentation or &lt;a href="https://raw.githubusercontent.com/fleetdm/fleet/main/website"&gt;website&lt;/a&gt;, write a tutorial, give a talk at a conference or local meetup, give an &lt;a href="https://fleetdm.com/podcasts"&gt;interview on a podcast&lt;/a&gt;, troubleshoot reported issues, or &lt;a href="https://fleetdm.com/docs/contributing/contributing"&gt;submit a patch&lt;/a&gt;. The Fleet code of conduct is &lt;a href="https://github.com/fleetdm/fleet/raw/main/CODE_OF_CONDUCT.md"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- - Great contributions are motivated by real-world use cases or learning.
- Some of the most valuable contributions might not touch any code at all.
- Small, iterative, simple (boring) changes are the easiest to merge. --&gt; 
&lt;h2&gt;What's next?&lt;/h2&gt; 
&lt;p&gt;To see what Fleet can do, head over to &lt;a href="https://fleetdm.com"&gt;fleetdm.com&lt;/a&gt; and try it out for yourself, grab time with one of the maintainers to discuss, or visit the docs and roll it out to your organization.&lt;/p&gt; 
&lt;h4&gt;Production deployment&lt;/h4&gt; 
&lt;p&gt;Fleet is simple enough to &lt;a href="https://fleetdm.com/docs/get-started/tutorials-and-guides"&gt;spin up for yourself&lt;/a&gt;. Or you can have us &lt;a href="https://fleetdm.com/pricing"&gt;host it for you&lt;/a&gt;. Premium features are &lt;a href="https://fleetdm.com/pricing"&gt;available&lt;/a&gt; either way.&lt;/p&gt; 
&lt;h4&gt;Documentation&lt;/h4&gt; 
&lt;p&gt;Complete documentation for Fleet can be found at &lt;a href="https://fleetdm.com/docs"&gt;https://fleetdm.com/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The free version of Fleet is available under the MIT license. The commercial license is also designed to allow contributions to paid features for users whose employment agreements allow them to contribute to open source projects. (See LICENSE.md for details.)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Fleet is built on &lt;a href="https://github.com/osquery/osquery"&gt;osquery&lt;/a&gt;, &lt;a href="https://github.com/micromdm/nanomdm"&gt;nanoMDM&lt;/a&gt;, &lt;a href="https://github.com/macadmins/nudge"&gt;Nudge&lt;/a&gt;, and &lt;a href="https://github.com/swiftDialog/swiftDialog"&gt;swiftDialog&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>fullstorydev/grpcurl</title>
      <link>https://github.com/fullstorydev/grpcurl</link>
      <description>&lt;p&gt;Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPCurl&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://circleci.com/gh/fullstorydev/grpcurl/tree/master"&gt;&lt;img src="https://circleci.com/gh/fullstorydev/grpcurl/tree/master.svg?style=svg" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/fullstorydev/grpcurl"&gt;&lt;img src="https://goreportcard.com/badge/github.com/fullstorydev/grpcurl" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://snapcraft.io/grpcurl"&gt;&lt;img src="https://snapcraft.io/grpcurl/badge.svg?sanitize=true" alt="Snap Release Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grpcurl&lt;/code&gt; is a command-line tool that lets you interact with gRPC servers. It's basically &lt;code&gt;curl&lt;/code&gt; for gRPC servers.&lt;/p&gt; 
&lt;p&gt;The main purpose for this tool is to invoke RPC methods on a gRPC server from the command-line. gRPC servers use a binary encoding on the wire (&lt;a href="https://developers.google.com/protocol-buffers/"&gt;protocol buffers&lt;/a&gt;, or "protobufs" for short). So they are basically impossible to interact with using regular &lt;code&gt;curl&lt;/code&gt; (and older versions of &lt;code&gt;curl&lt;/code&gt; that do not support HTTP/2 are of course non-starters). This program accepts messages using JSON encoding, which is much more friendly for both humans and scripts.&lt;/p&gt; 
&lt;p&gt;With this tool you can also browse the schema for gRPC services, either by querying a server that supports &lt;a href="https://github.com/grpc/grpc/raw/master/src/proto/grpc/reflection/v1/reflection.proto"&gt;server reflection&lt;/a&gt;, by reading proto source files, or by loading in compiled "protoset" files (files that contain encoded file &lt;a href="https://github.com/google/protobuf/raw/master/src/google/protobuf/descriptor.proto"&gt;descriptor protos&lt;/a&gt;). In fact, the way the tool transforms JSON request data into a binary encoded protobuf is using that very same schema. So, if the server you interact with does not support reflection, you will either need the proto source files that define the service or need protoset files that &lt;code&gt;grpcurl&lt;/code&gt; can use.&lt;/p&gt; 
&lt;p&gt;This repo also provides a library package, &lt;code&gt;github.com/fullstorydev/grpcurl&lt;/code&gt;, that has functions for simplifying the construction of other command-line tools that dynamically invoke gRPC endpoints. This code is a great example of how to use the various packages of the &lt;a href="https://godoc.org/github.com/jhump/protoreflect"&gt;protoreflect&lt;/a&gt; library, and shows off what they can do.&lt;/p&gt; 
&lt;p&gt;See also the &lt;a href="https://www.youtube.com/watch?v=dDr-8kbMnaw"&gt;&lt;code&gt;grpcurl&lt;/code&gt; talk at GopherCon 2018&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;grpcurl&lt;/code&gt; supports all kinds of RPC methods, including streaming methods. You can even operate bi-directional streaming methods interactively by running &lt;code&gt;grpcurl&lt;/code&gt; from an interactive terminal and using stdin as the request body!&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grpcurl&lt;/code&gt; supports both secure/TLS servers &lt;em&gt;and&lt;/em&gt; plain-text servers (i.e. no TLS) and has numerous options for TLS configuration. It also supports mutual TLS, where the client is required to present a client certificate.&lt;/p&gt; 
&lt;p&gt;As mentioned above, &lt;code&gt;grpcurl&lt;/code&gt; works seamlessly if the server supports the reflection service. If not, you can supply the &lt;code&gt;.proto&lt;/code&gt; source files or you can supply protoset files (containing compiled descriptors, produced by &lt;code&gt;protoc&lt;/code&gt;) to &lt;code&gt;grpcurl&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Binaries&lt;/h3&gt; 
&lt;p&gt;Download the binary from the &lt;a href="https://github.com/fullstorydev/grpcurl/releases"&gt;releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;h3&gt;Homebrew (macOS)&lt;/h3&gt; 
&lt;p&gt;On macOS, &lt;code&gt;grpcurl&lt;/code&gt; is available via Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;brew install grpcurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;For platforms that support Docker, you can download an image that lets you run &lt;code&gt;grpcurl&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Download image
docker pull fullstorydev/grpcurl:latest
# Run the tool
docker run fullstorydev/grpcurl api.grpc.me:443 list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that there are some pitfalls when using docker:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you need to interact with a server listening on the host's loopback network, you must specify the host as &lt;code&gt;host.docker.internal&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt; (for Mac or Windows) &lt;em&gt;OR&lt;/em&gt; have the container use the host network with &lt;code&gt;-network="host"&lt;/code&gt; (Linux only).&lt;/li&gt; 
 &lt;li&gt;If you need to provide proto source files or descriptor sets, you must mount the folder containing the files as a volume (&lt;code&gt;-v $(pwd):/protos&lt;/code&gt;) and adjust the import paths to container paths accordingly.&lt;/li&gt; 
 &lt;li&gt;If you want to provide the request message via stdin, using the &lt;code&gt;-d @&lt;/code&gt; option, you need to use the &lt;code&gt;-i&lt;/code&gt; flag on the docker command.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other Packages&lt;/h3&gt; 
&lt;p&gt;There are numerous other ways to install &lt;code&gt;grpcurl&lt;/code&gt;, thanks to support from third parties that have created recipes/packages for it. These include other ways to install &lt;code&gt;grpcurl&lt;/code&gt; on a variety of environments, including Windows and myriad Linux distributions.&lt;/p&gt; 
&lt;p&gt;You can see more details and the full list of other packages for &lt;code&gt;grpcurl&lt;/code&gt; at &lt;em&gt;repology.org&lt;/em&gt;: &lt;a href="https://repology.org/project/grpcurl/information"&gt;https://repology.org/project/grpcurl/information&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Snap&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;grpcurl&lt;/code&gt; using the snap package:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;snap install grpcurl&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;From Source&lt;/h3&gt; 
&lt;p&gt;If you already have the &lt;a href="https://golang.org/doc/install"&gt;Go SDK&lt;/a&gt; installed, you can use the &lt;code&gt;go&lt;/code&gt; tool to install &lt;code&gt;grpcurl&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This installs the command into the &lt;code&gt;bin&lt;/code&gt; sub-folder of wherever your &lt;code&gt;$GOPATH&lt;/code&gt; environment variable points. (If you have no &lt;code&gt;GOPATH&lt;/code&gt; environment variable set, the default install location is &lt;code&gt;$HOME/go/bin&lt;/code&gt;). If this directory is already in your &lt;code&gt;$PATH&lt;/code&gt;, then you should be good to go.&lt;/p&gt; 
&lt;p&gt;If you have already pulled down this repo to a location that is not in your &lt;code&gt;$GOPATH&lt;/code&gt; and want to build from the sources, you can &lt;code&gt;cd&lt;/code&gt; into the repo and then run &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you encounter compile errors and are using a version of the Go SDK older than 1.13, you could have out-dated versions of &lt;code&gt;grpcurl&lt;/code&gt;'s dependencies. You can update the dependencies by running &lt;code&gt;make updatedeps&lt;/code&gt;. Or, if you are using Go 1.11 or 1.12, you can add &lt;code&gt;GO111MODULE=on&lt;/code&gt; as a prefix to the commands above, which will also build using the right versions of dependencies (vs. whatever you may already have in your &lt;code&gt;GOPATH&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The usage doc for the tool explains the numerous options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;grpcurl -help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the sections below, you will find numerous examples demonstrating how to use &lt;code&gt;grpcurl&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Invoking RPCs&lt;/h3&gt; 
&lt;p&gt;Invoking an RPC on a trusted server (e.g. TLS without self-signed key or custom CA) that requires no client certs and supports server reflection is the simplest thing to do with &lt;code&gt;grpcurl&lt;/code&gt;. This minimal invocation sends an empty request body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;grpcurl grpc.server.com:443 my.custom.server.Service/Method

# no TLS
grpcurl -plaintext grpc.server.com:80 my.custom.server.Service/Method
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To send a non-empty request, use the &lt;code&gt;-d&lt;/code&gt; argument. Note that all arguments must come &lt;em&gt;before&lt;/em&gt; the server address and method name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;grpcurl -d '{"id": 1234, "tags": ["foo","bar"]}' \
    grpc.server.com:443 my.custom.server.Service/Method
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As can be seen in the example, the supplied body must be in JSON format. The body will be parsed and then transmitted to the server in the protobuf binary format.&lt;/p&gt; 
&lt;p&gt;If you want to include &lt;code&gt;grpcurl&lt;/code&gt; in a command pipeline, such as when using &lt;code&gt;jq&lt;/code&gt; to create a request body, you can use &lt;code&gt;-d @&lt;/code&gt;, which tells &lt;code&gt;grpcurl&lt;/code&gt; to read the actual request body from stdin:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;grpcurl -d @ grpc.server.com:443 my.custom.server.Service/Method &amp;lt;&amp;lt;EOM
{
  "id": 1234,
  "tags": [
    "foor",
    "bar"
  ]
}
EOM
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Adding Headers/Metadata to Request&lt;/h3&gt; 
&lt;p&gt;Adding of headers / metadata to a rpc request is possible via the &lt;code&gt;-H name:value&lt;/code&gt; command line option. Multiple headers can be added in a similar fashion. Example :&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;grpcurl -H header1:value1 -H header2:value2 -d '{"id": 1234, "tags": ["foo","bar"]}' grpc.server.com:443 my.custom.server.Service/Method
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more usage guide, check out the help docs via &lt;code&gt;grpcurl -help&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Listing Services&lt;/h3&gt; 
&lt;p&gt;To list all services exposed by a server, use the "list" verb. When using &lt;code&gt;.proto&lt;/code&gt; source or protoset files instead of server reflection, this lists all services defined in the source or protoset files.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Server supports reflection
grpcurl localhost:8787 list

# Using compiled protoset files
grpcurl -protoset my-protos.bin list

# Using proto sources
grpcurl -import-path ../protos -proto my-stuff.proto list

# Export proto files (use -proto-out-dir to specify the output directory)
grpcurl -plaintext -proto-out-dir "out_protos" "localhost:8787" describe my.custom.server.Service

# Export protoset file (use -protoset-out to specify the output file)
grpcurl -plaintext -protoset-out "out.protoset" "localhost:8787" describe my.custom.server.Service

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The "list" verb also lets you see all methods in a particular service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;grpcurl localhost:8787 list my.custom.server.Service
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Describing Elements&lt;/h3&gt; 
&lt;p&gt;The "describe" verb will print the type of any symbol that the server knows about or that is found in a given protoset file. It also prints a description of that symbol, in the form of snippets of proto source. It won't necessarily be the original source that defined the element, but it will be equivalent.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Server supports reflection
grpcurl localhost:8787 describe my.custom.server.Service.MethodOne

# Using compiled protoset files
grpcurl -protoset my-protos.bin describe my.custom.server.Service.MethodOne

# Using proto sources
grpcurl -import-path ../protos -proto my-stuff.proto describe my.custom.server.Service.MethodOne
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Descriptor Sources&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;grpcurl&lt;/code&gt; tool can operate on a variety of sources for descriptors. The descriptors are required, in order for &lt;code&gt;grpcurl&lt;/code&gt; to understand the RPC schema, translate inputs into the protobuf binary format as well as translate responses from the binary format into text. The sections below document the supported sources and what command-line flags are needed to use them.&lt;/p&gt; 
&lt;h3&gt;Server Reflection&lt;/h3&gt; 
&lt;p&gt;Without any additional command-line flags, &lt;code&gt;grpcurl&lt;/code&gt; will try to use &lt;a href="https://github.com/grpc/grpc/raw/master/src/proto/grpc/reflection/v1/reflection.proto"&gt;server reflection&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Examples for how to set up server reflection can be found &lt;a href="https://github.com/grpc/grpc/raw/master/doc/server-reflection.md#known-implementations"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When using reflection, the server address (host:port or path to Unix socket) is required even for "list" and "describe" operations, so that &lt;code&gt;grpcurl&lt;/code&gt; can connect to the server and ask it for its descriptors.&lt;/p&gt; 
&lt;h3&gt;Proto Source Files&lt;/h3&gt; 
&lt;p&gt;To use &lt;code&gt;grpcurl&lt;/code&gt; on servers that do not support reflection, you can use &lt;code&gt;.proto&lt;/code&gt; source files.&lt;/p&gt; 
&lt;p&gt;In addition to using &lt;code&gt;-proto&lt;/code&gt; flags to point &lt;code&gt;grpcurl&lt;/code&gt; at the relevant proto source file(s), you may also need to supply &lt;code&gt;-import-path&lt;/code&gt; flags to tell &lt;code&gt;grpcurl&lt;/code&gt; the folders from which dependencies can be imported.&lt;/p&gt; 
&lt;p&gt;Just like when compiling with &lt;code&gt;protoc&lt;/code&gt;, you do &lt;em&gt;not&lt;/em&gt; need to provide an import path for the location of the standard protos included with &lt;code&gt;protoc&lt;/code&gt; (which contain various "well-known types" with a package definition of &lt;code&gt;google.protobuf&lt;/code&gt;). These files are "known" by &lt;code&gt;grpcurl&lt;/code&gt; as a snapshot of their descriptors is built into the &lt;code&gt;grpcurl&lt;/code&gt; binary.&lt;/p&gt; 
&lt;p&gt;When using proto sources, you can omit the server address (host:port or path to Unix socket) when using the "list" and "describe" operations since they only need to consult the proto source files.&lt;/p&gt; 
&lt;h3&gt;Protoset Files&lt;/h3&gt; 
&lt;p&gt;You can also use compiled protoset files with &lt;code&gt;grpcurl&lt;/code&gt;. If you are scripting &lt;code&gt;grpcurl&lt;/code&gt; and need to re-use the same proto sources for many invocations, you will see better performance by using protoset files (since it skips the parsing and compilation steps with each invocation).&lt;/p&gt; 
&lt;p&gt;Protoset files contain binary encoded &lt;code&gt;google.protobuf.FileDescriptorSet&lt;/code&gt; protos. To create a protoset file, invoke &lt;code&gt;protoc&lt;/code&gt; with the &lt;code&gt;*.proto&lt;/code&gt; files that define the service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;protoc --proto_path=. \
    --descriptor_set_out=myservice.protoset \
    --include_imports \
    my/custom/server/service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--descriptor_set_out&lt;/code&gt; argument is what tells &lt;code&gt;protoc&lt;/code&gt; to produce a protoset, and the &lt;code&gt;--include_imports&lt;/code&gt; argument is necessary for the protoset to contain everything that &lt;code&gt;grpcurl&lt;/code&gt; needs to process and understand the schema.&lt;/p&gt; 
&lt;p&gt;When using protosets, you can omit the server address (host:port or path to Unix socket) when using the "list" and "describe" operations since they only need to consult the protoset files.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sashabaranov/go-openai</title>
      <link>https://github.com/sashabaranov/go-openai</link>
      <description>&lt;p&gt;OpenAI ChatGPT, GPT-3, GPT-4, DALL·E, Whisper API wrapper for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go OpenAI&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/sashabaranov/go-openai"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/sashabaranov/go-openai.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/sashabaranov/go-openai"&gt;&lt;img src="https://goreportcard.com/badge/github.com/sashabaranov/go-openai" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/sashabaranov/go-openai"&gt;&lt;img src="https://codecov.io/gh/sashabaranov/go-openai/branch/master/graph/badge.svg?token=bCbIfHLIsW" alt="codecov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This library provides unofficial Go clients for &lt;a href="https://platform.openai.com/"&gt;OpenAI API&lt;/a&gt;. We support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ChatGPT 4o, o1&lt;/li&gt; 
 &lt;li&gt;GPT-3, GPT-4&lt;/li&gt; 
 &lt;li&gt;DALL·E 2, DALL·E 3, GPT Image 1&lt;/li&gt; 
 &lt;li&gt;Whisper&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;go get github.com/sashabaranov/go-openai
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Currently, go-openai requires Go version 1.18 or greater.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;ChatGPT example usage:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"
	openai "github.com/sashabaranov/go-openai"
)

func main() {
	client := openai.NewClient("your token")
	resp, err := client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: openai.GPT3Dot5Turbo,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleUser,
					Content: "Hello!",
				},
			},
		},
	)

	if err != nil {
		fmt.Printf("ChatCompletion error: %v\n", err)
		return
	}

	fmt.Println(resp.Choices[0].Message.Content)
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Getting an OpenAI API Key:&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Visit the OpenAI website at &lt;a href="https://platform.openai.com/account/api-keys"&gt;https://platform.openai.com/account/api-keys&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you don't have an account, click on "Sign Up" to create one. If you do, click "Log In".&lt;/li&gt; 
 &lt;li&gt;Once logged in, navigate to your API key management page.&lt;/li&gt; 
 &lt;li&gt;Click on "Create new secret key".&lt;/li&gt; 
 &lt;li&gt;Enter a name for your new key, then click "Create secret key".&lt;/li&gt; 
 &lt;li&gt;Your new API key will be displayed. Use this key to interact with the OpenAI API.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Your API key is sensitive information. Do not share it with anyone.&lt;/p&gt; 
&lt;h3&gt;Other examples:&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;ChatGPT streaming completion&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"errors"
	"fmt"
	"io"
	openai "github.com/sashabaranov/go-openai"
)

func main() {
	c := openai.NewClient("your token")
	ctx := context.Background()

	req := openai.ChatCompletionRequest{
		Model:     openai.GPT3Dot5Turbo,
		MaxTokens: 20,
		Messages: []openai.ChatCompletionMessage{
			{
				Role:    openai.ChatMessageRoleUser,
				Content: "Lorem ipsum",
			},
		},
		Stream: true,
	}
	stream, err := c.CreateChatCompletionStream(ctx, req)
	if err != nil {
		fmt.Printf("ChatCompletionStream error: %v\n", err)
		return
	}
	defer stream.Close()

	fmt.Printf("Stream response: ")
	for {
		response, err := stream.Recv()
		if errors.Is(err, io.EOF) {
			fmt.Println("\nStream finished")
			return
		}

		if err != nil {
			fmt.Printf("\nStream error: %v\n", err)
			return
		}

		fmt.Printf(response.Choices[0].Delta.Content)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GPT-3 completion&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"
	openai "github.com/sashabaranov/go-openai"
)

func main() {
	c := openai.NewClient("your token")
	ctx := context.Background()

	req := openai.CompletionRequest{
		Model:     openai.GPT3Babbage002,
		MaxTokens: 5,
		Prompt:    "Lorem ipsum",
	}
	resp, err := c.CreateCompletion(ctx, req)
	if err != nil {
		fmt.Printf("Completion error: %v\n", err)
		return
	}
	fmt.Println(resp.Choices[0].Text)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GPT-3 streaming completion&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"errors"
	"context"
	"fmt"
	"io"
	openai "github.com/sashabaranov/go-openai"
)

func main() {
	c := openai.NewClient("your token")
	ctx := context.Background()

	req := openai.CompletionRequest{
		Model:     openai.GPT3Babbage002,
		MaxTokens: 5,
		Prompt:    "Lorem ipsum",
		Stream:    true,
	}
	stream, err := c.CreateCompletionStream(ctx, req)
	if err != nil {
		fmt.Printf("CompletionStream error: %v\n", err)
		return
	}
	defer stream.Close()

	for {
		response, err := stream.Recv()
		if errors.Is(err, io.EOF) {
			fmt.Println("Stream finished")
			return
		}

		if err != nil {
			fmt.Printf("Stream error: %v\n", err)
			return
		}


		fmt.Printf("Stream response: %v\n", response)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Audio Speech-To-Text&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"

	openai "github.com/sashabaranov/go-openai"
)

func main() {
	c := openai.NewClient("your token")
	ctx := context.Background()

	req := openai.AudioRequest{
		Model:    openai.Whisper1,
		FilePath: "recording.mp3",
	}
	resp, err := c.CreateTranscription(ctx, req)
	if err != nil {
		fmt.Printf("Transcription error: %v\n", err)
		return
	}
	fmt.Println(resp.Text)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Audio Captions&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"
	"os"

	openai "github.com/sashabaranov/go-openai"
)

func main() {
	c := openai.NewClient(os.Getenv("OPENAI_KEY"))

	req := openai.AudioRequest{
		Model:    openai.Whisper1,
		FilePath: os.Args[1],
		Format:   openai.AudioResponseFormatSRT,
	}
	resp, err := c.CreateTranscription(context.Background(), req)
	if err != nil {
		fmt.Printf("Transcription error: %v\n", err)
		return
	}
	f, err := os.Create(os.Args[1] + ".srt")
	if err != nil {
		fmt.Printf("Could not open file: %v\n", err)
		return
	}
	defer f.Close()
	if _, err := f.WriteString(resp.Text); err != nil {
		fmt.Printf("Error writing to file: %v\n", err)
		return
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;DALL-E 2 image generation&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"bytes"
	"context"
	"encoding/base64"
	"fmt"
	openai "github.com/sashabaranov/go-openai"
	"image/png"
	"os"
)

func main() {
	c := openai.NewClient("your token")
	ctx := context.Background()

	// Sample image by link
	reqUrl := openai.ImageRequest{
		Prompt:         "Parrot on a skateboard performs a trick, cartoon style, natural light, high detail",
		Size:           openai.CreateImageSize256x256,
		ResponseFormat: openai.CreateImageResponseFormatURL,
		N:              1,
	}

	respUrl, err := c.CreateImage(ctx, reqUrl)
	if err != nil {
		fmt.Printf("Image creation error: %v\n", err)
		return
	}
	fmt.Println(respUrl.Data[0].URL)

	// Example image as base64
	reqBase64 := openai.ImageRequest{
		Prompt:         "Portrait of a humanoid parrot in a classic costume, high detail, realistic light, unreal engine",
		Size:           openai.CreateImageSize256x256,
		ResponseFormat: openai.CreateImageResponseFormatB64JSON,
		N:              1,
	}

	respBase64, err := c.CreateImage(ctx, reqBase64)
	if err != nil {
		fmt.Printf("Image creation error: %v\n", err)
		return
	}

	imgBytes, err := base64.StdEncoding.DecodeString(respBase64.Data[0].B64JSON)
	if err != nil {
		fmt.Printf("Base64 decode error: %v\n", err)
		return
	}

	r := bytes.NewReader(imgBytes)
	imgData, err := png.Decode(r)
	if err != nil {
		fmt.Printf("PNG decode error: %v\n", err)
		return
	}

	file, err := os.Create("example.png")
	if err != nil {
		fmt.Printf("File creation error: %v\n", err)
		return
	}
	defer file.Close()

	if err := png.Encode(file, imgData); err != nil {
		fmt.Printf("PNG encode error: %v\n", err)
		return
	}

	fmt.Println("The image was saved as example.png")
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GPT Image 1 image generation&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"encoding/base64"
	"fmt"
	"os"

	openai "github.com/sashabaranov/go-openai"
)

func main() {
	c := openai.NewClient("your token")
	ctx := context.Background()

	req := openai.ImageRequest{
		Prompt:            "Parrot on a skateboard performing a trick. Large bold text \"SKATE MASTER\" banner at the bottom of the image. Cartoon style, natural light, high detail, 1:1 aspect ratio.",
		Background:        openai.CreateImageBackgroundOpaque,
		Model:             openai.CreateImageModelGptImage1,
		Size:              openai.CreateImageSize1024x1024,
		N:                 1,
		Quality:           openai.CreateImageQualityLow,
		OutputCompression: 100,
		OutputFormat:      openai.CreateImageOutputFormatJPEG,
		// Moderation: 		 openai.CreateImageModerationLow,
		// User: 					 "",
	}

	resp, err := c.CreateImage(ctx, req)
	if err != nil {
		fmt.Printf("Image creation Image generation with GPT Image 1error: %v\n", err)
		return
	}

	fmt.Println("Image Base64:", resp.Data[0].B64JSON)

	// Decode the base64 data
	imgBytes, err := base64.StdEncoding.DecodeString(resp.Data[0].B64JSON)
	if err != nil {
		fmt.Printf("Base64 decode error: %v\n", err)
		return
	}

	// Write image to file
	outputPath := "generated_image.jpg"
	err = os.WriteFile(outputPath, imgBytes, 0644)
	if err != nil {
		fmt.Printf("Failed to write image file: %v\n", err)
		return
	}

	fmt.Printf("The image was saved as %s\n", outputPath)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Configuring proxy&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;config := openai.DefaultConfig("token")
proxyUrl, err := url.Parse("http://localhost:{port}")
if err != nil {
	panic(err)
}
transport := &amp;amp;http.Transport{
	Proxy: http.ProxyURL(proxyUrl),
}
config.HTTPClient = &amp;amp;http.Client{
	Transport: transport,
}

c := openai.NewClientWithConfig(config)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;See also: &lt;a href="https://pkg.go.dev/github.com/sashabaranov/go-openai#ClientConfig"&gt;https://pkg.go.dev/github.com/sashabaranov/go-openai#ClientConfig&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ChatGPT support context&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"bufio"
	"context"
	"fmt"
	"os"
	"strings"

	"github.com/sashabaranov/go-openai"
)

func main() {
	client := openai.NewClient("your token")
	messages := make([]openai.ChatCompletionMessage, 0)
	reader := bufio.NewReader(os.Stdin)
	fmt.Println("Conversation")
	fmt.Println("---------------------")

	for {
		fmt.Print("-&amp;gt; ")
		text, _ := reader.ReadString('\n')
		// convert CRLF to LF
		text = strings.Replace(text, "\n", "", -1)
		messages = append(messages, openai.ChatCompletionMessage{
			Role:    openai.ChatMessageRoleUser,
			Content: text,
		})

		resp, err := client.CreateChatCompletion(
			context.Background(),
			openai.ChatCompletionRequest{
				Model:    openai.GPT3Dot5Turbo,
				Messages: messages,
			},
		)

		if err != nil {
			fmt.Printf("ChatCompletion error: %v\n", err)
			continue
		}

		content := resp.Choices[0].Message.Content
		messages = append(messages, openai.ChatCompletionMessage{
			Role:    openai.ChatMessageRoleAssistant,
			Content: content,
		})
		fmt.Println(content)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Azure OpenAI ChatGPT&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"

	openai "github.com/sashabaranov/go-openai"
)

func main() {
	config := openai.DefaultAzureConfig("your Azure OpenAI Key", "https://your Azure OpenAI Endpoint")
	// If you use a deployment name different from the model name, you can customize the AzureModelMapperFunc function
	// config.AzureModelMapperFunc = func(model string) string {
	// 	azureModelMapping := map[string]string{
	// 		"gpt-3.5-turbo": "your gpt-3.5-turbo deployment name",
	// 	}
	// 	return azureModelMapping[model]
	// }

	client := openai.NewClientWithConfig(config)
	resp, err := client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: openai.GPT3Dot5Turbo,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleUser,
					Content: "Hello Azure OpenAI!",
				},
			},
		},
	)
	if err != nil {
		fmt.Printf("ChatCompletion error: %v\n", err)
		return
	}

	fmt.Println(resp.Choices[0].Message.Content)
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Embedding Semantic Similarity&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"log"
	openai "github.com/sashabaranov/go-openai"

)

func main() {
	client := openai.NewClient("your-token")

	// Create an EmbeddingRequest for the user query
	queryReq := openai.EmbeddingRequest{
		Input: []string{"How many chucks would a woodchuck chuck"},
		Model: openai.AdaEmbeddingV2,
	}

	// Create an embedding for the user query
	queryResponse, err := client.CreateEmbeddings(context.Background(), queryReq)
	if err != nil {
		log.Fatal("Error creating query embedding:", err)
	}

	// Create an EmbeddingRequest for the target text
	targetReq := openai.EmbeddingRequest{
		Input: []string{"How many chucks would a woodchuck chuck if the woodchuck could chuck wood"},
		Model: openai.AdaEmbeddingV2,
	}

	// Create an embedding for the target text
	targetResponse, err := client.CreateEmbeddings(context.Background(), targetReq)
	if err != nil {
		log.Fatal("Error creating target embedding:", err)
	}

	// Now that we have the embeddings for the user query and the target text, we
	// can calculate their similarity.
	queryEmbedding := queryResponse.Data[0]
	targetEmbedding := targetResponse.Data[0]

	similarity, err := queryEmbedding.DotProduct(&amp;amp;targetEmbedding)
	if err != nil {
		log.Fatal("Error calculating dot product:", err)
	}

	log.Printf("The similarity score between the query and the target is %f", similarity)
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Azure OpenAI Embeddings&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"

	openai "github.com/sashabaranov/go-openai"
)

func main() {

	config := openai.DefaultAzureConfig("your Azure OpenAI Key", "https://your Azure OpenAI Endpoint")
	config.APIVersion = "2023-05-15" // optional update to latest API version

	//If you use a deployment name different from the model name, you can customize the AzureModelMapperFunc function
	//config.AzureModelMapperFunc = func(model string) string {
	//    azureModelMapping := map[string]string{
	//        "gpt-3.5-turbo":"your gpt-3.5-turbo deployment name",
	//    }
	//    return azureModelMapping[model]
	//}

	input := "Text to vectorize"

	client := openai.NewClientWithConfig(config)
	resp, err := client.CreateEmbeddings(
		context.Background(),
		openai.EmbeddingRequest{
			Input: []string{input},
			Model: openai.AdaEmbeddingV2,
		})

	if err != nil {
		fmt.Printf("CreateEmbeddings error: %v\n", err)
		return
	}

	vectors := resp.Data[0].Embedding // []float32 with 1536 dimensions

	fmt.Println(vectors[:10], "...", vectors[len(vectors)-10:])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;JSON Schema for function calling&lt;/summary&gt; 
 &lt;p&gt;It is now possible for chat completion to choose to call a function for more information (&lt;a href="https://platform.openai.com/docs/guides/gpt/function-calling"&gt;see developer docs here&lt;/a&gt;).&lt;/p&gt; 
 &lt;p&gt;In order to describe the type of functions that can be called, a JSON schema must be provided. Many JSON schema libraries exist and are more advanced than what we can offer in this library, however we have included a simple &lt;code&gt;jsonschema&lt;/code&gt; package for those who want to use this feature without formatting their own JSON schema payload.&lt;/p&gt; 
 &lt;p&gt;The developer documents give this JSON schema definition as an example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "name":"get_current_weather",
  "description":"Get the current weather in a given location",
  "parameters":{
    "type":"object",
    "properties":{
        "location":{
          "type":"string",
          "description":"The city and state, e.g. San Francisco, CA"
        },
        "unit":{
          "type":"string",
          "enum":[
              "celsius",
              "fahrenheit"
          ]
        }
    },
    "required":[
        "location"
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Using the &lt;code&gt;jsonschema&lt;/code&gt; package, this schema could be created using structs as such:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;FunctionDefinition{
  Name: "get_current_weather",
  Parameters: jsonschema.Definition{
    Type: jsonschema.Object,
    Properties: map[string]jsonschema.Definition{
      "location": {
        Type: jsonschema.String,
        Description: "The city and state, e.g. San Francisco, CA",
      },
      "unit": {
        Type: jsonschema.String,
        Enum: []string{"celsius", "fahrenheit"},
      },
    },
    Required: []string{"location"},
  },
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The &lt;code&gt;Parameters&lt;/code&gt; field of a &lt;code&gt;FunctionDefinition&lt;/code&gt; can accept either of the above styles, or even a nested struct from another library (as long as it can be marshalled into JSON).&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Error handling&lt;/summary&gt; 
 &lt;p&gt;Open-AI maintains clear documentation on how to &lt;a href="https://platform.openai.com/docs/guides/error-codes/api-errors"&gt;handle API errors&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;e := &amp;amp;openai.APIError{}
if errors.As(err, &amp;amp;e) {
  switch e.HTTPStatusCode {
    case 401:
      // invalid auth or key (do not retry)
    case 429:
      // rate limiting or engine overload (wait and retry) 
    case 500:
      // openai server error (retry)
    default:
      // unhandled
  }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Fine Tune Model&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"
	"github.com/sashabaranov/go-openai"
)

func main() {
	client := openai.NewClient("your token")
	ctx := context.Background()

	// create a .jsonl file with your training data for conversational model
	// {"prompt": "&amp;lt;prompt text&amp;gt;", "completion": "&amp;lt;ideal generated text&amp;gt;"}
	// {"prompt": "&amp;lt;prompt text&amp;gt;", "completion": "&amp;lt;ideal generated text&amp;gt;"}
	// {"prompt": "&amp;lt;prompt text&amp;gt;", "completion": "&amp;lt;ideal generated text&amp;gt;"}

	// chat models are trained using the following file format:
	// {"messages": [{"role": "system", "content": "Marv is a factual chatbot that is also sarcastic."}, {"role": "user", "content": "What's the capital of France?"}, {"role": "assistant", "content": "Paris, as if everyone doesn't know that already."}]}
	// {"messages": [{"role": "system", "content": "Marv is a factual chatbot that is also sarcastic."}, {"role": "user", "content": "Who wrote 'Romeo and Juliet'?"}, {"role": "assistant", "content": "Oh, just some guy named William Shakespeare. Ever heard of him?"}]}
	// {"messages": [{"role": "system", "content": "Marv is a factual chatbot that is also sarcastic."}, {"role": "user", "content": "How far is the Moon from Earth?"}, {"role": "assistant", "content": "Around 384,400 kilometers. Give or take a few, like that really matters."}]}

	// you can use openai cli tool to validate the data
	// For more info - https://platform.openai.com/docs/guides/fine-tuning

	file, err := client.CreateFile(ctx, openai.FileRequest{
		FilePath: "training_prepared.jsonl",
		Purpose:  "fine-tune",
	})
	if err != nil {
		fmt.Printf("Upload JSONL file error: %v\n", err)
		return
	}

	// create a fine tuning job
	// Streams events until the job is done (this often takes minutes, but can take hours if there are many jobs in the queue or your dataset is large)
	// use below get method to know the status of your model
	fineTuningJob, err := client.CreateFineTuningJob(ctx, openai.FineTuningJobRequest{
		TrainingFile: file.ID,
		Model:        "davinci-002", // gpt-3.5-turbo-0613, babbage-002.
	})
	if err != nil {
		fmt.Printf("Creating new fine tune model error: %v\n", err)
		return
	}

	fineTuningJob, err = client.RetrieveFineTuningJob(ctx, fineTuningJob.ID)
	if err != nil {
		fmt.Printf("Getting fine tune model error: %v\n", err)
		return
	}
	fmt.Println(fineTuningJob.FineTunedModel)

	// once the status of fineTuningJob is `succeeded`, you can use your fine tune model in Completion Request or Chat Completion Request

	// resp, err := client.CreateCompletion(ctx, openai.CompletionRequest{
	//	 Model:  fineTuningJob.FineTunedModel,
	//	 Prompt: "your prompt",
	// })
	// if err != nil {
	//	 fmt.Printf("Create completion error %v\n", err)
	//	 return
	// }
	//
	// fmt.Println(resp.Choices[0].Text)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Structured Outputs&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"
	"log"

	"github.com/sashabaranov/go-openai"
	"github.com/sashabaranov/go-openai/jsonschema"
)

func main() {
	client := openai.NewClient("your token")
	ctx := context.Background()

	type Result struct {
		Steps []struct {
			Explanation string `json:"explanation"`
			Output      string `json:"output"`
		} `json:"steps"`
		FinalAnswer string `json:"final_answer"`
	}
	var result Result
	schema, err := jsonschema.GenerateSchemaForType(result)
	if err != nil {
		log.Fatalf("GenerateSchemaForType error: %v", err)
	}
	resp, err := client.CreateChatCompletion(ctx, openai.ChatCompletionRequest{
		Model: openai.GPT4oMini,
		Messages: []openai.ChatCompletionMessage{
			{
				Role:    openai.ChatMessageRoleSystem,
				Content: "You are a helpful math tutor. Guide the user through the solution step by step.",
			},
			{
				Role:    openai.ChatMessageRoleUser,
				Content: "how can I solve 8x + 7 = -23",
			},
		},
		ResponseFormat: &amp;amp;openai.ChatCompletionResponseFormat{
			Type: openai.ChatCompletionResponseFormatTypeJSONSchema,
			JSONSchema: &amp;amp;openai.ChatCompletionResponseFormatJSONSchema{
				Name:   "math_reasoning",
				Schema: schema,
				Strict: true,
			},
		},
	})
	if err != nil {
		log.Fatalf("CreateChatCompletion error: %v", err)
	}
	err = schema.Unmarshal(resp.Choices[0].Message.Content, &amp;amp;result)
	if err != nil {
		log.Fatalf("Unmarshal schema error: %v", err)
	}
	fmt.Println(result)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; See the `examples/` folder for more. 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h3&gt;Why don't we get the same answer when specifying a temperature field of 0 and asking the same question?&lt;/h3&gt; 
&lt;p&gt;Even when specifying a temperature field of 0, it doesn't guarantee that you'll always get the same response. Several factors come into play.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go OpenAI Behavior: When you specify a temperature field of 0 in Go OpenAI, the omitempty tag causes that field to be removed from the request. Consequently, the OpenAI API applies the default value of 1.&lt;/li&gt; 
 &lt;li&gt;Token Count for Input/Output: If there's a large number of tokens in the input and output, setting the temperature to 0 can still result in non-deterministic behavior. In particular, when using around 32k tokens, the likelihood of non-deterministic behavior becomes highest even with a temperature of 0.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Due to the factors mentioned above, different answers may be returned even for the same question.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Workarounds:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;As of November 2023, use &lt;a href="https://platform.openai.com/docs/guides/text-generation/reproducible-outputs"&gt;the new &lt;code&gt;seed&lt;/code&gt; parameter&lt;/a&gt; in conjunction with the &lt;code&gt;system_fingerprint&lt;/code&gt; response field, alongside Temperature management.&lt;/li&gt; 
 &lt;li&gt;Try using &lt;code&gt;math.SmallestNonzeroFloat32&lt;/code&gt;: By specifying &lt;code&gt;math.SmallestNonzeroFloat32&lt;/code&gt; in the temperature field instead of 0, you can mimic the behavior of setting it to 0.&lt;/li&gt; 
 &lt;li&gt;Limiting Token Count: By limiting the number of tokens in the input and output and especially avoiding large requests close to 32k tokens, you can reduce the risk of non-deterministic behavior.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By adopting these strategies, you can expect more consistent results.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Related Issues:&lt;/strong&gt;&lt;br /&gt; &lt;a href="https://github.com/sashabaranov/go-openai/issues/9"&gt;omitempty option of request struct will generate incorrect request when parameter is 0.&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Does Go OpenAI provide a method to count tokens?&lt;/h3&gt; 
&lt;p&gt;No, Go OpenAI does not offer a feature to count tokens, and there are no plans to provide such a feature in the future. However, if there's a way to implement a token counting feature with zero dependencies, it might be possible to merge that feature into Go OpenAI. Otherwise, it would be more appropriate to implement it in a dedicated library or repository.&lt;/p&gt; 
&lt;p&gt;For counting tokens, you might find the following links helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pkoukk/tiktoken-go#counting-tokens-for-chat-api-calls"&gt;Counting Tokens For Chat API Calls&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openai/openai-cookbook/raw/main/examples/How_to_count_tokens_with_tiktoken.ipynb"&gt;How to count tokens with tiktoken&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Related Issues:&lt;/strong&gt;&lt;br /&gt; &lt;a href="https://github.com/sashabaranov/go-openai/issues/62"&gt;Is it possible to join the implementation of GPT3 Tokenizer&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;By following &lt;a href="https://github.com/sashabaranov/go-openai/raw/master/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt;, we hope to ensure that your contributions are made smoothly and efficiently.&lt;/p&gt; 
&lt;h2&gt;Thank you&lt;/h2&gt; 
&lt;p&gt;We want to take a moment to express our deepest gratitude to the &lt;a href="https://github.com/sashabaranov/go-openai/graphs/contributors"&gt;contributors&lt;/a&gt; and sponsors of this project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://carsonkahn.com"&gt;Carson Kahn&lt;/a&gt; of &lt;a href="https://spindleai.com"&gt;Spindle AI&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To all of you: thank you. You've helped us achieve more than we ever imagined possible. Can't wait to see where we go next, together!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>maximhq/bifrost</title>
      <link>https://github.com/maximhq/bifrost</link>
      <description>&lt;p&gt;The Fastest LLM Gateway with built in OTel observability and MCP gateway&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://www.producthunt.com/products/maxim-ai?embed=true&amp;amp;utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_source=badge-bifrost-2" target="_blank"&gt;&lt;img src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=1000604&amp;amp;theme=dark&amp;amp;t=1754378611200" alt="Bifrost - The fastest LLM gateway in the market | Product Hunt" style="width: 250px; height: 54px;" width="250" height="54" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;Bifrost&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/maximhq/bifrost/core"&gt;&lt;img src="https://goreportcard.com/badge/github.com/maximhq/bifrost/core" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;The fastest way to build AI applications that never go down.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Bifrost is a high-performance AI gateway that connects you to 10+ providers (OpenAI, Anthropic, Bedrock, and more) through a single API. Get automatic failover, load balancing, and zero-downtime deployments in under 30 seconds.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/media/cover.png" alt="Bifrost" /&gt;&lt;/p&gt; 
&lt;p&gt;🚀 &lt;strong&gt;Just launched:&lt;/strong&gt; Native MCP (Model Context Protocol) support for seamless tool integration&lt;br /&gt; ⚡ &lt;strong&gt;Performance:&lt;/strong&gt; Adds only 11µs latency while handling 5,000+ RPS&lt;br /&gt; 🛡️ &lt;strong&gt;Reliability:&lt;/strong&gt; 100% uptime with automatic provider failover&lt;/p&gt; 
&lt;h2&gt;⚡ Quickstart (30 seconds)&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Go from zero to production-ready AI gateway in under a minute.&lt;/strong&gt; Here's how:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;What You Need&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Any AI provider API key (OpenAI, Anthropic, Bedrock, etc.)&lt;/li&gt; 
 &lt;li&gt;Node.js 18+ installed (or use Docker instead via &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/quickstart/http-transport.md"&gt;Docker installation&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;20 seconds of your time ⏰&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Using Bifrost HTTP Transport&lt;/h3&gt; 
&lt;p&gt;📖 For detailed setup guides with multiple providers, advanced configuration, and language examples, see &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/quickstart/http-transport.md"&gt;Quick Start Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Start Bifrost&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 🔧 Run Bifrost binary
npx @maximhq/bifrost
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Open the built-in web interface and configure bifrost&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 🖥️ Open the web interface in your browser
open http://localhost:8080

# Or simply open http://localhost:8080 manually in your browser
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Test it works&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -X POST http://localhost:8080/v1/chat/completions \
  -H "Content-Type: application/json" \
  -d '{
    "model": "openai/gpt-4o-mini",
    "messages": [
      {"role": "user", "content": "Hello from Bifrost! 🌈"}
    ]
  }'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;🎉 Boom! You're done!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Your AI gateway is now running with a beautiful web interface. You can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;🖥️ Configure everything visually&lt;/strong&gt; - No more JSON files!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📊 Monitor requests in real-time&lt;/strong&gt; - See logs, analytics, and metrics&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔄 Add providers and MCP clients on-the-fly&lt;/strong&gt; - Scale and failover without restarts&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🚀 Drop into existing code&lt;/strong&gt; - Zero changes to your OpenAI/Anthropic apps&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Want more?&lt;/strong&gt; See our &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/quickstart/http-transport.md"&gt;Complete Setup Guide&lt;/a&gt; for multi-provider configuration, failover strategies, and production deployment.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;📑 Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#bifrost"&gt;Bifrost&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-quickstart-30-seconds"&gt;⚡ Quickstart (30 seconds)&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#using-bifrost-http-transport"&gt;Using Bifrost HTTP Transport&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-table-of-contents"&gt;📑 Table of Contents&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-features"&gt;✨ Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#%EF%B8%8F-repository-structure"&gt;🏗️ Repository Structure&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-getting-started"&gt;🚀 Getting Started&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#1-as-a-go-package-core-integration"&gt;1. As a Go Package (Core Integration)&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#2-as-an-http-api-transport-layer"&gt;2. As an HTTP API (Transport Layer)&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#3-as-a-drop-in-replacement-zero-code-changes"&gt;3. As a Drop-in Replacement (Zero Code Changes)&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-performance"&gt;📊 Performance&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-key-performance-highlights"&gt;🔑 Key Performance Highlights&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-documentation"&gt;📚 Documentation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-need-help"&gt;💬 Need Help?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#%EF%B8%8F-development--build-requirements"&gt;🛠️ Development &amp;amp; Build Requirements&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#cross-platform-compilation-with-cgo"&gt;Cross-Platform Compilation with CGO&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#required-homebrew-packages"&gt;Required Homebrew Packages&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#supported-target-platforms"&gt;Supported Target Platforms&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#compiler-details"&gt;Compiler Details&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#building-from-source"&gt;Building from Source&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#prerequisites-for-building"&gt;Prerequisites for Building&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-contributing"&gt;🤝 Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/#-license"&gt;📄 License&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;🖥️ Built-in Web UI&lt;/strong&gt;: Visual configuration, real-time monitoring, and analytics dashboard - no config files needed&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🚀 Zero-Config Startup &amp;amp; Easy Integration&lt;/strong&gt;: Start immediately with dynamic provider configuration, or integrate existing SDKs by simply updating the &lt;code&gt;base_url&lt;/code&gt; - one line of code to get running&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔄 Multi-Provider Support&lt;/strong&gt;: Integrate with OpenAI, Anthropic, Amazon Bedrock, Mistral, Ollama, and more through a single API&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🛡️ Fallback Mechanisms&lt;/strong&gt;: Automatically retry failed requests with alternative models or providers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔑 Dynamic Key Management&lt;/strong&gt;: Rotate and manage API keys efficiently with weighted distribution&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⚡ Connection Pooling&lt;/strong&gt;: Optimize network resources for better performance&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🎯 Concurrency Control&lt;/strong&gt;: Manage rate limits and parallel requests effectively&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔌 Flexible Transports&lt;/strong&gt;: Multiple transports for easy integration into your infra&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🏗️ Plugin First Architecture&lt;/strong&gt;: No callback hell, simple addition/creation of custom plugins&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🛠️ MCP Integration&lt;/strong&gt;: Built-in Model Context Protocol (MCP) support for external tool integration and execution&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⚙️ Custom Configuration&lt;/strong&gt;: Offers granular control over pool sizes, network retry settings, fallback providers, and network proxy configurations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📊 Built-in Observability&lt;/strong&gt;: Native Prometheus metrics out of the box, no wrappers, no sidecars, just drop it in and scrape&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔧 SDK Support&lt;/strong&gt;: Bifrost is available as a Go package, so you can use it directly in your own applications&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🏗️ Repository Structure&lt;/h2&gt; 
&lt;p&gt;Bifrost is built with a modular architecture:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;bifrost/
├── ci/                   # CI/CD pipeline scripts and npx configuration
│
├── core/                 # Core functionality and shared components
│   ├── providers/        # Provider-specific implementations
│   ├── schemas/          # Interfaces and structs used in bifrost
│   ├── bifrost.go        # Main Bifrost implementation
│
├── docs/                 # Documentations for Bifrost's configurations and contribution guides
│   └── ...
│
├── tests/                # All test setups related to /core and /transports
│   └── ...
│
├── transports/           # Interface layers (HTTP, gRPC, etc.)
│   ├── bifrost-http/     # HTTP transport implementation
│   └── ...
│
├── ui/                  # UI files for the web interface of the HTTP transport
│   └── ...
│
└── plugins/              # Plugin Implementations
    ├── maxim/
    └── ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The system uses a provider-agnostic approach with well-defined interfaces to easily extend to new AI providers. All interfaces are defined in &lt;code&gt;core/schemas/&lt;/code&gt; and can be used as a reference for contributions.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; 
&lt;p&gt;There are three ways to use Bifrost - choose the one that fits your needs:&lt;/p&gt; 
&lt;h3&gt;1. As a Go Package (Core Integration)&lt;/h3&gt; 
&lt;p&gt;For direct integration into your Go applications. Provides maximum performance and control.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;📖 &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/quickstart/go-package.md"&gt;2-Minute Go Package Setup&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Quick example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get github.com/maximhq/bifrost/core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. As an HTTP API (Transport Layer)&lt;/h3&gt; 
&lt;p&gt;For language-agnostic integration and microservices architecture.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;📖 &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/quickstart/http-transport.md"&gt;30-Second HTTP Transport Setup&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Quick example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx @maximhq/bifrost
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. As a Drop-in Replacement (Zero Code Changes)&lt;/h3&gt; 
&lt;p&gt;Replace existing OpenAI/Anthropic APIs without changing your application code.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;📖 &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/http-transport/integrations/README.md"&gt;1-Minute Drop-in Integration&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Quick example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;- base_url = "https://api.openai.com"
+ base_url = "http://localhost:8080/openai"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📊 Performance&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Bifrost adds virtually zero overhead to your AI requests.&lt;/strong&gt; In our sustained 5,000 RPS benchmark (see full methodology in &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/benchmarks.md"&gt;docs/benchmarks.md&lt;/a&gt;), the gateway added only &lt;strong&gt;11 µs&lt;/strong&gt; of overhead per request – that's &lt;strong&gt;less than 0.001%&lt;/strong&gt; of a typical GPT-4o response time.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Translation:&lt;/strong&gt; Your users won't notice Bifrost is there, but you'll sleep better knowing your AI never goes down.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Metric&lt;/th&gt; 
   &lt;th&gt;t3.medium&lt;/th&gt; 
   &lt;th&gt;t3.xlarge&lt;/th&gt; 
   &lt;th&gt;Δ&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Added latency (Bifrost overhead)&lt;/td&gt; 
   &lt;td&gt;59 µs&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;11 µs&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;-81 %&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Success rate @ 5 k RPS&lt;/td&gt; 
   &lt;td&gt;100 %&lt;/td&gt; 
   &lt;td&gt;100 %&lt;/td&gt; 
   &lt;td&gt;No failed requests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Avg. queue wait time&lt;/td&gt; 
   &lt;td&gt;47 µs&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.67 µs&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;-96 %&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Avg. request latency (incl. provider)&lt;/td&gt; 
   &lt;td&gt;2.12 s&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;1.61 s&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;-24 %&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;🔑 Key Performance Highlights&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Perfect Success Rate&lt;/strong&gt; – 100 % request success rate on both instance types even at 5 k RPS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tiny Total Overhead&lt;/strong&gt; – &amp;lt; 15 µs additional latency per request on average.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Efficient Queue Management&lt;/strong&gt; – just &lt;strong&gt;1.67 µs&lt;/strong&gt; average wait time on the t3.xlarge test.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast Key Selection&lt;/strong&gt; – ~&lt;strong&gt;10 ns&lt;/strong&gt; to pick the right weighted API key.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Bifrost is deliberately configurable so you can dial the &lt;strong&gt;speed ↔ memory&lt;/strong&gt; trade-off:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Config Knob&lt;/th&gt; 
   &lt;th&gt;Effect&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;initial_pool_size&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;How many objects are pre-allocated. Higher = faster, more memory&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;buffer_size&lt;/code&gt; &amp;amp; &lt;code&gt;concurrency&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Queue depth and max parallel workers (can be set per provider)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Retry / Timeout&lt;/td&gt; 
   &lt;td&gt;Tune aggressiveness for each provider to meet your SLOs&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Choose higher settings (like the t3.xlarge profile above) for raw speed, or lower ones (t3.medium) for reduced memory footprint – or find the sweet spot for your workload.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Need more numbers?&lt;/strong&gt; Dive into the &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/benchmarks.md"&gt;full benchmark report&lt;/a&gt; for breakdowns of every internal stage (JSON marshalling, HTTP call, parsing, etc.), hardware sizing guides and tuning tips.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Everything you need to master Bifrost, from 30-second setup to production-scale deployments.&lt;/strong&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;🚀 I want to get started (2 minutes)&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/README.md"&gt;📖 Documentation Hub&lt;/a&gt;&lt;/strong&gt; - Your complete roadmap to Bifrost&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/quickstart/go-package.md"&gt;🔧 Go Package Setup&lt;/a&gt;&lt;/strong&gt; - Direct integration into your Go app&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/quickstart/http-transport.md"&gt;🌐 HTTP API Setup&lt;/a&gt;&lt;/strong&gt; - Language-agnostic service deployment&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/http-transport/integrations/README.md"&gt;🔄 Drop-in Replacement&lt;/a&gt;&lt;/strong&gt; - Replace OpenAI/Anthropic with zero code changes&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;🎯 I want to understand what Bifrost can do&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/providers.md"&gt;🔗 Multi-Provider Support&lt;/a&gt;&lt;/strong&gt; - Connect to 10+ AI providers with one API&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/providers.md#fallback-mechanisms"&gt;🛡️ Fallback &amp;amp; Reliability&lt;/a&gt;&lt;/strong&gt; - Never lose a request with automatic failover&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/http-transport/configuration/mcp.md"&gt;🛠️ MCP Tool Integration&lt;/a&gt;&lt;/strong&gt; - Give your AI external capabilities&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/http-transport/configuration/plugins.md"&gt;🔌 Plugin Ecosystem&lt;/a&gt;&lt;/strong&gt; - Extend Bifrost with custom middleware&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/key-management.md"&gt;🔑 Key Management&lt;/a&gt;&lt;/strong&gt; - Rotate API keys without downtime&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/networking.md"&gt;📡 Networking&lt;/a&gt;&lt;/strong&gt; - Proxies, timeouts, and connection tuning&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;⚙️ I want to deploy this to production&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/architecture/README.md"&gt;🏗️ System Architecture&lt;/a&gt;&lt;/strong&gt; - Understand how Bifrost works internally&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/benchmarks.md"&gt;📊 Performance Tuning&lt;/a&gt;&lt;/strong&gt; - Squeeze out every microsecond&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/http-transport/README.md"&gt;🚀 Production Deployment&lt;/a&gt;&lt;/strong&gt; - Scale to millions of requests&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/README.md"&gt;🔧 Complete API Reference&lt;/a&gt;&lt;/strong&gt; - Every endpoint, parameter, and response&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/errors.md"&gt;🐛 Error Handling&lt;/a&gt;&lt;/strong&gt; - Troubleshoot like a pro&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;📱 I'm migrating from another tool&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/http-transport/integrations/migration-guide.md"&gt;🔄 Migration Guides&lt;/a&gt;&lt;/strong&gt; - Step-by-step migration from OpenAI, Anthropic, LiteLLM&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/examples/"&gt;🎓 Real-World Examples&lt;/a&gt;&lt;/strong&gt; - Production-ready code samples&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/usage/errors.md"&gt;❓ Common Questions&lt;/a&gt;&lt;/strong&gt; - Solutions to frequent issues&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;💬 Need Help?&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;🔗 &lt;a href="https://getmax.im/bifrost-discord"&gt;Join our Discord&lt;/a&gt;&lt;/strong&gt; for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;❓ Quick setup assistance and troubleshooting&lt;/li&gt; 
 &lt;li&gt;💡 Best practices and configuration tips&lt;/li&gt; 
 &lt;li&gt;🤝 Community discussions and support&lt;/li&gt; 
 &lt;li&gt;🚀 Real-time help with integrations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🛠️ Development &amp;amp; Build Requirements&lt;/h2&gt; 
&lt;h3&gt;Cross-Platform Compilation with CGO&lt;/h3&gt; 
&lt;p&gt;Bifrost uses CGO for cross-platform compilation to ensure optimal performance across different architectures. To build Bifrost from source for all supported platforms, you'll need to install the following cross-compilation toolchains via Homebrew:&lt;/p&gt; 
&lt;h4&gt;Required Homebrew Packages&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install minimal cross-compilation toolchains for all target platforms
brew install FiloSottile/musl-cross/musl-cross mingw-w64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Supported Target Platforms&lt;/h4&gt; 
&lt;p&gt;The build system supports the following platform/architecture combinations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;code&gt;darwin/amd64&lt;/code&gt;, &lt;code&gt;darwin/arm64&lt;/code&gt; (native compilation)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt; (via musl-cross)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;windows/amd64&lt;/code&gt; (via mingw-w64)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Compiler Details&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
   &lt;th&gt;C Compiler&lt;/th&gt; 
   &lt;th&gt;C++ Compiler&lt;/th&gt; 
   &lt;th&gt;Package Source&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;x86_64-linux-musl-gcc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;x86_64-linux-musl-g++&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;musl-cross&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;aarch64-linux-musl-gcc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;aarch64-linux-musl-g++&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;musl-cross&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;x86_64-w64-mingw32-gcc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;x86_64-w64-mingw32-g++&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;mingw-w64&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;amd64/arm64&lt;/td&gt; 
   &lt;td&gt;Native system compiler&lt;/td&gt; 
   &lt;td&gt;Native system compiler&lt;/td&gt; 
   &lt;td&gt;Xcode Command Line Tools&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Building from Source&lt;/h4&gt; 
&lt;p&gt;Once you have the required toolchains installed, you can build Bifrost using the provided build script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build for all platforms
./ci/scripts/go-executable-build.sh bifrost-http ./dist/apps/bifrost "" ./transports/bifrost-http

# The script will automatically detect and use the appropriate cross-compilers
# for each target platform
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The build script includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Static linking&lt;/strong&gt; for Linux builds (using musl libc for maximum compatibility)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CGO support&lt;/strong&gt; for all platforms to ensure optimal performance&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automatic compiler detection&lt;/strong&gt; and validation before building&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Prerequisites for Building&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Go 1.21+&lt;/strong&gt; - Required for building the application&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cross-compilation toolchains&lt;/strong&gt; - Install via the Homebrew packages above&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; - For cloning and version management&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The build process uses fully static linking for Linux builds to ensure maximum compatibility across different distributions. Windows builds use mingw-w64 for cross-compilation from macOS/Linux environments.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;p&gt;See our &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/docs/contributing/README.md"&gt;Contributing Guide&lt;/a&gt;&lt;/strong&gt; for detailed information on how to contribute to Bifrost. We welcome contributions of all kinds—whether it's bug fixes, features, documentation improvements, or new ideas. Feel free to open an issue, and once it's assigned, submit a Pull Request.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the Apache 2.0 License - see the &lt;a href="https://raw.githubusercontent.com/maximhq/bifrost/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;p&gt;Built with ❤️ by &lt;a href="https://github.com/maximhq"&gt;Maxim&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>samber/lo</title>
      <link>https://github.com/samber/lo</link>
      <description>&lt;p&gt;💥 A Lodash-style Go library based on Go 1.18+ Generics (map, filter, contains, find...)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lo - Iterate over slices, maps, channels...&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/samber/lo/releases"&gt;&lt;img src="https://img.shields.io/github/tag/samber/lo.svg?sanitize=true" alt="tag" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/Go-%3E%3D%201.18-%23007d9c" alt="Go Version" /&gt; &lt;a href="https://pkg.go.dev/github.com/samber/lo"&gt;&lt;img src="https://godoc.org/github.com/samber/lo?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;img src="https://github.com/samber/lo/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt; &lt;a href="https://goreportcard.com/report/github.com/samber/lo"&gt;&lt;img src="https://goreportcard.com/badge/github.com/samber/lo" alt="Go report" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/samber/lo"&gt;&lt;img src="https://img.shields.io/codecov/c/github/samber/lo" alt="Coverage" /&gt;&lt;/a&gt; &lt;a href="https://github.com/samber/lo/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/samber/lo" alt="Contributors" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/samber/lo/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/samber/lo" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;✨ &lt;strong&gt;&lt;code&gt;samber/lo&lt;/code&gt; is a Lodash-style Go library based on Go 1.18+ Generics.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A utility library based on Go 1.18+ generics that makes it easier to work with slices, maps, strings, channels, and functions. It provides dozens of handy methods to simplify common coding tasks and improve code readability. It may look like &lt;a href="https://github.com/lodash/lodash"&gt;Lodash&lt;/a&gt; in some aspects.&lt;/p&gt; 
&lt;p&gt;5 to 10 helpers may overlap with those from the Go standard library, in packages &lt;code&gt;slices&lt;/code&gt; and &lt;code&gt;maps&lt;/code&gt;. I feel this library is legitimate and offers many more valuable abstractions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samber/do"&gt;samber/do&lt;/a&gt;: A dependency injection toolkit based on Go 1.18+ Generics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samber/mo"&gt;samber/mo&lt;/a&gt;: Monads based on Go 1.18+ Generics (Option, Result, Either...)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Why this name?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;I wanted a &lt;strong&gt;short name&lt;/strong&gt;, similar to "Lodash", and no Go package uses this name.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/samber/lo/master/img/logo-full.png" alt="lo" /&gt;&lt;/p&gt; 
&lt;h2&gt;🚀 Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get github.com/samber/lo@v1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This library is v1 and follows SemVer strictly.&lt;/p&gt; 
&lt;p&gt;No breaking changes will be made to exported APIs before v2.0.0.&lt;/p&gt; 
&lt;p&gt;This library has no dependencies outside the Go standard library.&lt;/p&gt; 
&lt;h2&gt;💡 Usage&lt;/h2&gt; 
&lt;p&gt;You can import &lt;code&gt;lo&lt;/code&gt; using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    "github.com/samber/lo"
    lop "github.com/samber/lo/parallel"
    lom "github.com/samber/lo/mutable"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then use one of the helpers below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;names := lo.Uniq([]string{"Samuel", "John", "Samuel"})
// []string{"Samuel", "John"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tips for lazy developers&lt;/h3&gt; 
&lt;p&gt;I cannot recommend it, but in case you are too lazy for repeating &lt;code&gt;lo.&lt;/code&gt; everywhere, you can import the entire library into the namespace.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    . "github.com/samber/lo"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I take no responsibility on this junk. 😁 💩&lt;/p&gt; 
&lt;h2&gt;🤠 Spec&lt;/h2&gt; 
&lt;p&gt;GoDoc: &lt;a href="https://godoc.org/github.com/samber/lo"&gt;https://godoc.org/github.com/samber/lo&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Supported helpers for slices:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filter"&gt;Filter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#map"&gt;Map&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqmap"&gt;UniqMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filtermap"&gt;FilterMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#flatmap"&gt;FlatMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reduce"&gt;Reduce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reduceright"&gt;ReduceRight&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#foreach"&gt;ForEach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#foreachwhile"&gt;ForEachWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#times"&gt;Times&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniq"&gt;Uniq&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqby"&gt;UniqBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#groupby"&gt;GroupBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#groupbymap"&gt;GroupByMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#chunk"&gt;Chunk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partitionby"&gt;PartitionBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#flatten"&gt;Flatten&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#interleave"&gt;Interleave&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#shuffle"&gt;Shuffle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reverse"&gt;Reverse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fill"&gt;Fill&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#repeat"&gt;Repeat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#repeatby"&gt;RepeatBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keyby"&gt;KeyBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slicetomap-alias-associate"&gt;SliceToMap / Associate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filterslicetomap"&gt;FilterSliceToMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keyify"&gt;Keyify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#drop"&gt;Drop&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#dropright"&gt;DropRight&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#dropwhile"&gt;DropWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#droprightwhile"&gt;DropRightWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#DropByIndex"&gt;DropByIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reject"&gt;Reject&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#rejectmap"&gt;RejectMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filterreject"&gt;FilterReject&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#count"&gt;Count&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countby"&gt;CountBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countvalues"&gt;CountValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countvaluesby"&gt;CountValuesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#subset"&gt;Subset&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slice"&gt;Slice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#replace"&gt;Replace&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#replaceall"&gt;ReplaceAll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#compact"&gt;Compact&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#issorted"&gt;IsSorted&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#issortedbykey"&gt;IsSortedByKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#Splice"&gt;Splice&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for maps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keys"&gt;Keys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqkeys"&gt;UniqKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#haskey"&gt;HasKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#valueor"&gt;ValueOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#values"&gt;Values&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqvalues"&gt;UniqValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickby"&gt;PickBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickbykeys"&gt;PickByKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickbyvalues"&gt;PickByValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitby"&gt;OmitBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitbykeys"&gt;OmitByKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitbyvalues"&gt;OmitByValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#entries-alias-topairs"&gt;Entries / ToPairs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromentries-alias-frompairs"&gt;FromEntries / FromPairs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#invert"&gt;Invert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assign"&gt;Assign (merge of maps)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapkeys"&gt;MapKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapvalues"&gt;MapValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapentries"&gt;MapEntries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maptoslice"&gt;MapToSlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FilterMapToSlice"&gt;FilterMapToSlice&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported math helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#range--rangefrom--rangewithsteps"&gt;Range / RangeFrom / RangeWithSteps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#clamp"&gt;Clamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sum"&gt;Sum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sumby"&gt;SumBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#product"&gt;Product&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#productby"&gt;ProductBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mean"&gt;Mean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#meanby"&gt;MeanBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mode"&gt;Mode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for strings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#randomstring"&gt;RandomString&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#substring"&gt;Substring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#chunkstring"&gt;ChunkString&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#runelength"&gt;RuneLength&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pascalcase"&gt;PascalCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#camelcase"&gt;CamelCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#kebabcase"&gt;KebabCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#snakecase"&gt;SnakeCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#words"&gt;Words&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#capitalize"&gt;Capitalize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ellipsis"&gt;Ellipsis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for tuples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#t2---t9"&gt;T2 -&amp;gt; T9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unpack2---unpack9"&gt;Unpack2 -&amp;gt; Unpack9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#zip2---zip9"&gt;Zip2 -&amp;gt; Zip9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#zipby2---zipby9"&gt;ZipBy2 -&amp;gt; ZipBy9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unzip2---unzip9"&gt;Unzip2 -&amp;gt; Unzip9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unzipby2---unzipby9"&gt;UnzipBy2 -&amp;gt; UnzipBy9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#crossjoin2---crossjoin9"&gt;CrossJoin2 -&amp;gt; CrossJoin2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#crossjoinby2---crossjoinby9"&gt;CrossJoinBy2 -&amp;gt; CrossJoinBy2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for time and duration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#duration"&gt;Duration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#duration0---duration10"&gt;Duration0 -&amp;gt; Duration10&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#channeldispatcher"&gt;ChannelDispatcher&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slicetochannel"&gt;SliceToChannel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#generator"&gt;Generator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#buffer"&gt;Buffer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#bufferwithcontext"&gt;BufferWithContext&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#bufferwithtimeout"&gt;BufferWithTimeout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fanin"&gt;FanIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fanout"&gt;FanOut&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported intersection helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#contains"&gt;Contains&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#containsby"&gt;ContainsBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#every"&gt;Every&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#everyby"&gt;EveryBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#some"&gt;Some&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#someby"&gt;SomeBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#none"&gt;None&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#noneby"&gt;NoneBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#intersect"&gt;Intersect&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#difference"&gt;Difference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#union"&gt;Union&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#without"&gt;Without&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutby"&gt;WithoutBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutempty"&gt;WithoutEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutnth"&gt;WithoutNth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ElementsMatch"&gt;ElementsMatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ElementsMatchBy"&gt;ElementsMatchBy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported search helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#indexof"&gt;IndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#lastindexof"&gt;LastIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#find"&gt;Find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findindexof"&gt;FindIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findlastindexof"&gt;FindLastIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findorelse"&gt;FindOrElse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findkey"&gt;FindKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findkeyby"&gt;FindKeyBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#finduniques"&gt;FindUniques&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#finduniquesby"&gt;FindUniquesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findduplicates"&gt;FindDuplicates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findduplicatesby"&gt;FindDuplicatesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#min"&gt;Min&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minindex"&gt;MinIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minby"&gt;MinBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minindexby"&gt;MinIndexBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#earliest"&gt;Earliest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#earliestby"&gt;EarliestBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#max"&gt;Max&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxindex"&gt;MaxIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxby"&gt;MaxBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxindexby"&gt;MaxIndexBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#latest"&gt;Latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#latestby"&gt;LatestBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#first"&gt;First&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FirstOrEmpty"&gt;FirstOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FirstOr"&gt;FirstOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#last"&gt;Last&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#LastOrEmpty"&gt;LastOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#LastOr"&gt;LastOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nth"&gt;Nth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nthor"&gt;NthOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nthorempty"&gt;NthOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sample"&gt;Sample&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sampleby"&gt;SampleBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#samples"&gt;Samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#samplesby"&gt;SamplesBy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Conditional helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ternary"&gt;Ternary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ternaryf"&gt;TernaryF&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#if--elseif--else"&gt;If / ElseIf / Else&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#switch--case--default"&gt;Switch / Case / Default&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Type manipulation helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnil"&gt;IsNil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnotnil"&gt;IsNotNil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#toptr"&gt;ToPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nil"&gt;Nil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#emptyabletoptr"&gt;EmptyableToPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromptr"&gt;FromPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromptror"&gt;FromPtrOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tosliceptr"&gt;ToSlicePtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromsliceptr"&gt;FromSlicePtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromsliceptror"&gt;FromSlicePtrOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#toanyslice"&gt;ToAnySlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromanyslice"&gt;FromAnySlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#empty"&gt;Empty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isempty"&gt;IsEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnotempty"&gt;IsNotEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesce"&gt;Coalesce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesceorempty"&gt;CoalesceOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesceslice"&gt;CoalesceSlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescesliceorempty"&gt;CoalesceSliceOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescemap"&gt;CoalesceMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescemaporempty"&gt;CoalesceMapOrEmpty&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Function helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partial"&gt;Partial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partial2---partial5"&gt;Partial2 -&amp;gt; Partial5&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Concurrency helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attempt"&gt;Attempt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwhile"&gt;AttemptWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwithdelay"&gt;AttemptWithDelay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwhilewithdelay"&gt;AttemptWhileWithDelay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#debounce"&gt;Debounce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#debounceby"&gt;DebounceBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;Throttle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleWithCount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleByWithCount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#synchronize"&gt;Synchronize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#async"&gt;Async&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#transaction"&gt;Transaction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#waitfor"&gt;WaitFor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#waitforwithcontext"&gt;WaitForWithContext&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Error handling:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#validate"&gt;Validate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#must"&gt;Must&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#try"&gt;Try&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#try0-6"&gt;Try1 -&amp;gt; Try6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tryor"&gt;TryOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tryor0-6"&gt;TryOr1 -&amp;gt; TryOr6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trycatch"&gt;TryCatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trywitherrorvalue"&gt;TryWithErrorValue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trycatchwitherrorvalue"&gt;TryCatchWithErrorValue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#errorsas"&gt;ErrorsAs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assert"&gt;Assert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assertf"&gt;Assertf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Constraints:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clonable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Filter&lt;/h3&gt; 
&lt;p&gt;Iterates over a collection and returns an array of all the elements the predicate function returns &lt;code&gt;true&lt;/code&gt; for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;even := lo.Filter([]int{1, 2, 3, 4}, func(x int, index int) bool {
    return x%2 == 0
})
// []int{2, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Apjg3WeSi7K"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Mutable: like &lt;code&gt;lo.Filter()&lt;/code&gt;, but the slice is updated in place.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{1, 2, 3, 4}
newList := lom.Filter(list, func(x int) bool {
    return x%2 == 0
})

list
// []int{2, 4, 3, 4}

newList
// []int{2, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Map&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice of one type and transforms it into a slice of another type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.Map([]int64{1, 2, 3, 4}, func(x int64, index int) string {
    return strconv.FormatInt(x, 10)
})
// []string{"1", "2", "3", "4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/OkPcYAhBo0D"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.Map()&lt;/code&gt;, but the mapper function is called in a goroutine. Results are returned in the same order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.Map([]int64{1, 2, 3, 4}, func(x int64, _ int) string {
    return strconv.FormatInt(x, 10)
})
// []string{"1", "2", "3", "4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Mutable: like &lt;code&gt;lo.Map()&lt;/code&gt;, but the slice is updated in place.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{1, 2, 3, 4}
lom.Map(list, func(x int) int {
    return x*2
})
// []int{2, 4, 6, 8}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;UniqMap&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice and transforms it to a slice of another type with unique values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type User struct {
    Name string
    Age  int
}
users := []User{{Name: "Alex", Age: 10}, {Name: "Alex", Age: 12}, {Name: "Bob", Age: 11}, {Name: "Alice", Age: 20}}

names := lo.UniqMap(users, func(u User, index int) string {
    return u.Name
})
// []string{"Alex", "Bob", "Alice"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FilterMap&lt;/h3&gt; 
&lt;p&gt;Returns a slice which obtained after both filtering and mapping using the given callback function.&lt;/p&gt; 
&lt;p&gt;The callback function should return two values: the result of the mapping operation and whether the result element should be included or not.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;matching := lo.FilterMap([]string{"cpu", "gpu", "mouse", "keyboard"}, func(x string, _ int) (string, bool) {
    if strings.HasSuffix(x, "pu") {
        return "xpu", true
    }
    return "", false
})
// []string{"xpu", "xpu"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-AuYXfy7opz"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FlatMap&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice and transforms and flattens it to a slice of another type. The transform function can either return a slice or a &lt;code&gt;nil&lt;/code&gt;, and in the &lt;code&gt;nil&lt;/code&gt; case no value is added to the final slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.FlatMap([]int64{0, 1, 2}, func(x int64, _ int) []string {
    return []string{
        strconv.FormatInt(x, 10),
        strconv.FormatInt(x, 10),
    }
})
// []string{"0", "0", "1", "1", "2", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/YSoYmQTA8-U"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reduce&lt;/h3&gt; 
&lt;p&gt;Reduces a collection to a single value. The value is calculated by accumulating the result of running each element in the collection through an accumulator function. Each successive invocation is supplied with the return value returned by the previous call.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sum := lo.Reduce([]int{1, 2, 3, 4}, func(agg int, item int, _ int) int {
    return agg + item
}, 0)
// 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/R4UHXZNaaUG"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ReduceRight&lt;/h3&gt; 
&lt;p&gt;Like &lt;code&gt;lo.Reduce&lt;/code&gt; except that it iterates over elements of collection from right to left.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.ReduceRight([][]int{{0, 1}, {2, 3}, {4, 5}}, func(agg []int, item []int, _ int) []int {
    return append(agg, item...)
}, []int{})
// []int{4, 5, 2, 3, 0, 1}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Fq3W70l7wXF"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ForEach&lt;/h3&gt; 
&lt;p&gt;Iterates over elements of a collection and invokes the function over each element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.ForEach([]string{"hello", "world"}, func(x string, _ int) {
    println(x)
})
// prints "hello\nworld\n"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/oofyiUPRf8t"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.ForEach()&lt;/code&gt;, but the callback is called as a goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.ForEach([]string{"hello", "world"}, func(x string, _ int) {
    println(x)
})
// prints "hello\nworld\n" or "world\nhello\n"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ForEachWhile&lt;/h3&gt; 
&lt;p&gt;Iterates over collection elements and invokes iteratee for each element collection return value decide to continue or break, like do while().&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int64{1, 2, -42, 4}

lo.ForEachWhile(list, func(x int64, _ int) bool {
	if x &amp;lt; 0 {
		return false
	}
	fmt.Println(x)
	return true
})
// 1
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/QnLGt35tnow"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Times&lt;/h3&gt; 
&lt;p&gt;Times invokes the iteratee n times, returning an array of the results of each invocation. The iteratee is invoked with index as argument.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.Times(3, func(i int) string {
    return strconv.FormatInt(int64(i), 10)
})
// []string{"0", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/vgQj3Glr6lT"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.Times()&lt;/code&gt;, but callback is called in goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.Times(3, func(i int) string {
    return strconv.FormatInt(int64(i), 10)
})
// []string{"0", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Uniq&lt;/h3&gt; 
&lt;p&gt;Returns a duplicate-free version of an array, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqValues := lo.Uniq([]int{1, 2, 2, 1})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/DTzbeXZ6iEN"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqBy&lt;/h3&gt; 
&lt;p&gt;Returns a duplicate-free version of an array, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in array to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqValues := lo.UniqBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// []int{0, 1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/g42Z3QSb53u"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;GroupBy&lt;/h3&gt; 
&lt;p&gt;Returns an object composed of keys generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

groups := lo.GroupBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// map[int][]int{0: []int{0, 3}, 1: []int{1, 4}, 2: []int{2, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/XnQBd_v6brd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.GroupBy()&lt;/code&gt;, but callback is called in goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.GroupBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// map[int][]int{0: []int{0, 3}, 1: []int{1, 4}, 2: []int{2, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GroupByMap&lt;/h3&gt; 
&lt;p&gt;Returns an object composed of keys generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

groups := lo.GroupByMap([]int{0, 1, 2, 3, 4, 5}, func(i int) (int, int) {
    return i%3, i*2
})
// map[int][]int{0: []int{0, 6}, 1: []int{2, 8}, 2: []int{4, 10}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chunk&lt;/h3&gt; 
&lt;p&gt;Returns an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Chunk([]int{0, 1, 2, 3, 4, 5}, 2)
// [][]int{{0, 1}, {2, 3}, {4, 5}}

lo.Chunk([]int{0, 1, 2, 3, 4, 5, 6}, 2)
// [][]int{{0, 1}, {2, 3}, {4, 5}, {6}}

lo.Chunk([]int{}, 2)
// [][]int{}

lo.Chunk([]int{0}, 2)
// [][]int{{0}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/EeKl0AuTehH"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PartitionBy&lt;/h3&gt; 
&lt;p&gt;Returns an array of elements split into groups. The order of grouped values is determined by the order they occur in collection. The grouping is generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

partitions := lo.PartitionBy([]int{-2, -1, 0, 1, 2, 3, 4, 5}, func(x int) string {
    if x &amp;lt; 0 {
        return "negative"
    } else if x%2 == 0 {
        return "even"
    }
    return "odd"
})
// [][]int{{-2, -1}, {0, 2, 4}, {1, 3, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/NfQ_nGjkgXW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.PartitionBy()&lt;/code&gt;, but callback is called in goroutine. Results are returned in the same order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

partitions := lop.PartitionBy([]int{-2, -1, 0, 1, 2, 3, 4, 5}, func(x int) string {
    if x &amp;lt; 0 {
        return "negative"
    } else if x%2 == 0 {
        return "even"
    }
    return "odd"
})
// [][]int{{-2, -1}, {0, 2, 4}, {1, 3, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Flatten&lt;/h3&gt; 
&lt;p&gt;Returns an array a single level deep.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;flat := lo.Flatten([][]int{{0, 1}, {2, 3, 4, 5}})
// []int{0, 1, 2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rbp9ORaMpjw"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Interleave&lt;/h3&gt; 
&lt;p&gt;Round-robin alternating input slices and sequentially appending value at index into result.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;interleaved := lo.Interleave([]int{1, 4, 7}, []int{2, 5, 8}, []int{3, 6, 9})
// []int{1, 2, 3, 4, 5, 6, 7, 8, 9}

interleaved := lo.Interleave([]int{1}, []int{2, 5, 8}, []int{3, 6}, []int{4, 7, 9, 10})
// []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-RJkTLQEDVt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Shuffle&lt;/h3&gt; 
&lt;p&gt;Returns an array of shuffled values. Uses the Fisher-Yates shuffle algorithm.&lt;/p&gt; 
&lt;p&gt;⚠️ This helper is &lt;strong&gt;mutable&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{0, 1, 2, 3, 4, 5}
lom.Shuffle(list)

list
// []int{1, 4, 0, 3, 5, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2xb3WdLjeSJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reverse&lt;/h3&gt; 
&lt;p&gt;Reverses array so that the first element becomes the last, the second element becomes the second to last, and so on.&lt;/p&gt; 
&lt;p&gt;⚠️ This helper is &lt;strong&gt;mutable&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{0, 1, 2, 3, 4, 5}
lom.Reverse(list)

list
// []int{5, 4, 3, 2, 1, 0}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/O-M5pmCRgzV"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Fill&lt;/h3&gt; 
&lt;p&gt;Fills elements of array with &lt;code&gt;initial&lt;/code&gt; value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
  bar string
}

func (f foo) Clone() foo {
  return foo{f.bar}
}

initializedSlice := lo.Fill([]foo{foo{"a"}, foo{"a"}}, foo{"b"})
// []foo{foo{"b"}, foo{"b"}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VwR34GzqEub"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Repeat&lt;/h3&gt; 
&lt;p&gt;Builds a slice with N copies of initial value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
  bar string
}

func (f foo) Clone() foo {
  return foo{f.bar}
}

slice := lo.Repeat(2, foo{"a"})
// []foo{foo{"a"}, foo{"a"}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/g3uHXbmc3b6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RepeatBy&lt;/h3&gt; 
&lt;p&gt;Builds a slice with values returned by N calls of callback.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.RepeatBy(0, func (i int) string {
    return strconv.FormatInt(int64(math.Pow(float64(i), 2)), 10)
})
// []string{}

slice := lo.RepeatBy(5, func(i int) string {
    return strconv.FormatInt(int64(math.Pow(float64(i), 2)), 10)
})
// []string{"0", "1", "4", "9", "16"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ozZLCtX_hNU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;KeyBy&lt;/h3&gt; 
&lt;p&gt;Transforms a slice or an array of structs to a map based on a pivot callback.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.KeyBy([]string{"a", "aa", "aaa"}, func(str string) int {
    return len(str)
})
// map[int]string{1: "a", 2: "aa", 3: "aaa"}

type Character struct {
  dir  string
  code int
}
characters := []Character{
    {dir: "left", code: 97},
    {dir: "right", code: 100},
}
result := lo.KeyBy(characters, func(char Character) string {
    return string(rune(char.code))
})
//map[a:{dir:left code:97} d:{dir:right code:100}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mdaClUAT-zZ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SliceToMap (alias: Associate)&lt;/h3&gt; 
&lt;p&gt;Returns a map containing key-value pairs provided by transform function applied to elements of the given slice. If any of two pairs would have the same key the last one gets added to the map.&lt;/p&gt; 
&lt;p&gt;The order of keys in returned map is not specified and is not guaranteed to be the same from the original array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []*foo{{baz: "apple", bar: 1}, {baz: "banana", bar: 2}}

aMap := lo.SliceToMap(in, func (f *foo) (string, int) {
    return f.baz, f.bar
})
// map[string][int]{ "apple":1, "banana":2 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/WHa2CfMO3Lr"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FilterSliceToMap&lt;/h3&gt; 
&lt;p&gt;Returns a map containing key-value pairs provided by transform function applied to elements of the given slice.&lt;/p&gt; 
&lt;p&gt;If any of two pairs would have the same key the last one gets added to the map.&lt;/p&gt; 
&lt;p&gt;The order of keys in returned map is not specified and is not guaranteed to be the same from the original array.&lt;/p&gt; 
&lt;p&gt;The third return value of the transform function is a boolean that indicates whether the key-value pair should be included in the map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []string{"a", "aa", "aaa"}

result := lo.FilterSliceToMap(list, func(str string) (string, int, bool) {
    return str, len(str), len(str) &amp;gt; 1
})
// map[string][int]{"aa":2 "aaa":3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Keyify&lt;/h3&gt; 
&lt;p&gt;Returns a map with each unique element of the slice as a key.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;set := lo.Keyify([]int{1, 1, 2, 3, 4})
// map[int]struct{}{1:{}, 2:{}, 3:{}, 4:{}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Drop&lt;/h3&gt; 
&lt;p&gt;Drops n elements from the beginning of a slice or array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.Drop([]int{0, 1, 2, 3, 4, 5}, 2)
// []int{2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/JswS7vXRJP2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropRight&lt;/h3&gt; 
&lt;p&gt;Drops n elements from the end of a slice or array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropRight([]int{0, 1, 2, 3, 4, 5}, 2)
// []int{0, 1, 2, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/GG0nXkSJJa3"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropWhile&lt;/h3&gt; 
&lt;p&gt;Drop elements from the beginning of a slice or array while the predicate returns true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropWhile([]string{"a", "aa", "aaa", "aa", "aa"}, func(val string) bool {
    return len(val) &amp;lt;= 2
})
// []string{"aaa", "aa", "aa"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/7gBPYw2IK16"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropRightWhile&lt;/h3&gt; 
&lt;p&gt;Drop elements from the end of a slice or array while the predicate returns true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropRightWhile([]string{"a", "aa", "aaa", "aa", "aa"}, func(val string) bool {
    return len(val) &amp;lt;= 2
})
// []string{"a", "aa", "aaa"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/3-n71oEC0Hz"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropByIndex&lt;/h3&gt; 
&lt;p&gt;Drops elements from a slice or array by the index. A negative index will drop elements from the end of the slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropByIndex([]int{0, 1, 2, 3, 4, 5}, 2, 4, -1)
// []int{0, 1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/JswS7vXRJP2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reject&lt;/h3&gt; 
&lt;p&gt;The opposite of Filter, this method returns the elements of collection that predicate does not return truthy for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;odd := lo.Reject([]int{1, 2, 3, 4}, func(x int, _ int) bool {
    return x%2 == 0
})
// []int{1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/YkLMODy1WEL"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RejectMap&lt;/h3&gt; 
&lt;p&gt;The opposite of FilterMap, this method returns a slice which obtained after both filtering and mapping using the given callback function.&lt;/p&gt; 
&lt;p&gt;The callback function should return two values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the result of the mapping operation and&lt;/li&gt; 
 &lt;li&gt;whether the result element should be included or not.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;items := lo.RejectMap([]int{1, 2, 3, 4}, func(x int, _ int) (int, bool) {
    return x*10, x%2 == 0
})
// []int{10, 30}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FilterReject&lt;/h3&gt; 
&lt;p&gt;Mixes Filter and Reject, this method returns two slices, one for the elements of collection that predicate returns truthy for and one for the elements that predicate does not return truthy for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;kept, rejected := lo.FilterReject([]int{1, 2, 3, 4}, func(x int, _ int) bool {
    return x%2 == 0
})
// []int{2, 4}
// []int{1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Count&lt;/h3&gt; 
&lt;p&gt;Counts the number of elements in the collection that compare equal to value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count := lo.Count([]int{1, 5, 1}, 1)
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Y3FlK54yveC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountBy&lt;/h3&gt; 
&lt;p&gt;Counts the number of elements in the collection for which predicate is true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count := lo.CountBy([]int{1, 5, 1}, func(i int) bool {
    return i &amp;lt; 4
})
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ByQbNYQQi4X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountValues&lt;/h3&gt; 
&lt;p&gt;Counts the number of each element in the collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.CountValues([]int{})
// map[int]int{}

lo.CountValues([]int{1, 2})
// map[int]int{1: 1, 2: 1}

lo.CountValues([]int{1, 2, 2})
// map[int]int{1: 1, 2: 2}

lo.CountValues([]string{"foo", "bar", ""})
// map[string]int{"": 1, "foo": 1, "bar": 1}

lo.CountValues([]string{"foo", "bar", "bar"})
// map[string]int{"foo": 1, "bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-p-PyLT4dfy"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountValuesBy&lt;/h3&gt; 
&lt;p&gt;Counts the number of each element in the collection. It ss equivalent to chaining lo.Map and lo.CountValues.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;isEven := func(v int) bool {
    return v%2==0
}

lo.CountValuesBy([]int{}, isEven)
// map[bool]int{}

lo.CountValuesBy([]int{1, 2}, isEven)
// map[bool]int{false: 1, true: 1}

lo.CountValuesBy([]int{1, 2, 2}, isEven)
// map[bool]int{false: 1, true: 2}

length := func(v string) int {
    return len(v)
}

lo.CountValuesBy([]string{"foo", "bar", ""}, length)
// map[int]int{0: 1, 3: 2}

lo.CountValuesBy([]string{"foo", "bar", "bar"}, length)
// map[int]int{3: 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2U0dG1SnOmS"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Subset&lt;/h3&gt; 
&lt;p&gt;Returns a copy of a slice from &lt;code&gt;offset&lt;/code&gt; up to &lt;code&gt;length&lt;/code&gt; elements. Like &lt;code&gt;slice[start:start+length]&lt;/code&gt;, but does not panic on overflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 2, 3, 4}

sub := lo.Subset(in, 2, 3)
// []int{2, 3, 4}

sub := lo.Subset(in, -4, 3)
// []int{1, 2, 3}

sub := lo.Subset(in, -2, math.MaxUint)
// []int{3, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tOQu1GhFcog"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Slice&lt;/h3&gt; 
&lt;p&gt;Returns a copy of a slice from &lt;code&gt;start&lt;/code&gt; up to, but not including &lt;code&gt;end&lt;/code&gt;. Like &lt;code&gt;slice[start:end]&lt;/code&gt;, but does not panic on overflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 2, 3, 4}

slice := lo.Slice(in, 0, 5)
// []int{0, 1, 2, 3, 4}

slice := lo.Slice(in, 2, 3)
// []int{2}

slice := lo.Slice(in, 2, 6)
// []int{2, 3, 4}

slice := lo.Slice(in, 4, 3)
// []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8XWYhfMMA1h"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Replace&lt;/h3&gt; 
&lt;p&gt;Returns a copy of the slice with the first n non-overlapping instances of old replaced by new.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, 1)
// []int{42, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, -1, 42, 1)
// []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, 2)
// []int{42, 1, 42, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, -1)
// []int{42, 1, 42, 1, 2, 3, 42}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/XfPzmf9gql6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ReplaceAll&lt;/h3&gt; 
&lt;p&gt;Returns a copy of the slice with all non-overlapping instances of old replaced by new.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.ReplaceAll(in, 0, 42)
// []int{42, 1, 42, 1, 2, 3, 42}

slice := lo.ReplaceAll(in, -1, 42)
// []int{0, 1, 0, 1, 2, 3, 0}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/a9xZFUHfYcV"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Compact&lt;/h3&gt; 
&lt;p&gt;Returns a slice of all non-zero elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []string{"", "foo", "", "bar", ""}

slice := lo.Compact(in)
// []string{"foo", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tXiy-iK6PAc"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsSorted&lt;/h3&gt; 
&lt;p&gt;Checks if a slice is sorted.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.IsSorted([]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mc3qR-t4mcx"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsSortedByKey&lt;/h3&gt; 
&lt;p&gt;Checks if a slice is sorted by iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.IsSortedByKey([]string{"a", "bb", "ccc"}, func(s string) int {
    return len(s)
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/wiG6XyBBu49"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Splice&lt;/h3&gt; 
&lt;p&gt;Splice inserts multiple elements at index i. A negative index counts back from the end of the slice. The helper is protected against overflow errors.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Splice([]string{"a", "b"}, 1, "1", "2")
// []string{"a", "1", "2", "b"}

// negative
result = lo.Splice([]string{"a", "b"}, -1, "1", "2")
// []string{"a", "1", "2", "b"}

// overflow
result = lo.Splice([]string{"a", "b"}, 42, "1", "2")
// []string{"a", "b", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/wiG6XyBBu49"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Keys&lt;/h3&gt; 
&lt;p&gt;Creates a slice of the map keys.&lt;/p&gt; 
&lt;p&gt;Use the UniqKeys variant to deduplicate common keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;keys := lo.Keys(map[string]int{"foo": 1, "bar": 2})
// []string{"foo", "bar"}

keys := lo.Keys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []string{"foo", "bar", "baz"}

keys := lo.Keys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 3})
// []string{"foo", "bar", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Uu11fHASqrU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqKeys&lt;/h3&gt; 
&lt;p&gt;Creates an array of unique map keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;keys := lo.UniqKeys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []string{"foo", "bar", "baz"}

keys := lo.UniqKeys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 3})
// []string{"foo", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TPKAb6ILdHk"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;HasKey&lt;/h3&gt; 
&lt;p&gt;Returns whether the given key exists.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;exists := lo.HasKey(map[string]int{"foo": 1, "bar": 2}, "foo")
// true

exists := lo.HasKey(map[string]int{"foo": 1, "bar": 2}, "baz")
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/aVwubIvECqS"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Values&lt;/h3&gt; 
&lt;p&gt;Creates an array of the map values.&lt;/p&gt; 
&lt;p&gt;Use the UniqValues variant to deduplicate common values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;values := lo.Values(map[string]int{"foo": 1, "bar": 2})
// []int{1, 2}

values := lo.Values(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []int{1, 2, 3}

values := lo.Values(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 2})
// []int{1, 2, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/nnRTQkzQfF6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqValues&lt;/h3&gt; 
&lt;p&gt;Creates an array of unique map values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2})
// []int{1, 2}

values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []int{1, 2, 3}

values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 2})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/nf6bXMh7rM3"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ValueOr&lt;/h3&gt; 
&lt;p&gt;Returns the value of the given key or the fallback value if the key is not present.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;value := lo.ValueOr(map[string]int{"foo": 1, "bar": 2}, "foo", 42)
// 1

value := lo.ValueOr(map[string]int{"foo": 1, "bar": 2}, "baz", 42)
// 42
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/bAq9mHErB4V"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickBy&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given predicate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(key string, value int) bool {
    return value%2 == 1
})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/kdg8GR_QMmf"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickByKeys&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickByKeys(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []string{"foo", "baz"})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/R1imbuci9qU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickByValues&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickByValues(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []int{1, 3})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/1zdzSvbfsJc"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitBy&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given predicate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(key string, value int) bool {
    return value%2 == 1
})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/EtBsR43bdsd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitByKeys&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitByKeys(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []string{"foo", "baz"})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/t1QjCrs-ysk"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitByValues&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitByValues(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []int{1, 3})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/9UYZi-hrs8j"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Entries (alias: ToPairs)&lt;/h3&gt; 
&lt;p&gt;Transforms a map into array of key/value pairs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;entries := lo.Entries(map[string]int{"foo": 1, "bar": 2})
// []lo.Entry[string, int]{
//     {
//         Key: "foo",
//         Value: 1,
//     },
//     {
//         Key: "bar",
//         Value: 2,
//     },
// }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/3Dhgx46gawJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FromEntries (alias: FromPairs)&lt;/h3&gt; 
&lt;p&gt;Transforms an array of key/value pairs into a map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.FromEntries([]lo.Entry[string, int]{
    {
        Key: "foo",
        Value: 1,
    },
    {
        Key: "bar",
        Value: 2,
    },
})
// map[string]int{"foo": 1, "bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/oIr5KHFGCEN"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Invert&lt;/h3&gt; 
&lt;p&gt;Creates a map composed of the inverted keys and values. If map contains duplicate values, subsequent values overwrite property assignments of previous values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m1 := lo.Invert(map[string]int{"a": 1, "b": 2})
// map[int]string{1: "a", 2: "b"}

m2 := lo.Invert(map[string]int{"a": 1, "b": 2, "c": 1})
// map[int]string{1: "c", 2: "b"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rFQ4rak6iA1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assign&lt;/h3&gt; 
&lt;p&gt;Merges multiple maps from left to right.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mergedMaps := lo.Assign(
    map[string]int{"a": 1, "b": 2},
    map[string]int{"b": 3, "c": 4},
)
// map[string]int{"a": 1, "b": 3, "c": 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VhwfJOyxf5o"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ChunkEntries&lt;/h3&gt; 
&lt;p&gt;Splits a map into an array of elements in groups of a length equal to its size. If the map cannot be split evenly, the final chunk will contain the remaining elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;maps := lo.ChunkEntries(
    map[string]int{
        "a": 1,
        "b": 2,
        "c": 3,
        "d": 4,
        "e": 5,
    },
    3,
)
// []map[string]int{
//    {"a": 1, "b": 2, "c": 3},
//    {"d": 4, "e": 5},
// }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/X_YQL6mmoD-"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapKeys&lt;/h3&gt; 
&lt;p&gt;Manipulates a map keys and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m2 := lo.MapKeys(map[int]int{1: 1, 2: 2, 3: 3, 4: 4}, func(_ int, v int) string {
    return strconv.FormatInt(int64(v), 10)
})
// map[string]int{"1": 1, "2": 2, "3": 3, "4": 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/9_4WPIqOetJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapValues&lt;/h3&gt; 
&lt;p&gt;Manipulates a map values and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m1 := map[int]int64{1: 1, 2: 2, 3: 3}

m2 := lo.MapValues(m1, func(x int64, _ int) string {
    return strconv.FormatInt(x, 10)
})
// map[int]string{1: "1", 2: "2", 3: "3"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/T_8xAfvcf0W"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapEntries&lt;/h3&gt; 
&lt;p&gt;Manipulates a map entries and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := map[string]int{"foo": 1, "bar": 2}

out := lo.MapEntries(in, func(k string, v int) (int, string) {
    return v,k
})
// map[int]string{1: "foo", 2: "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VuvNQzxKimT"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapToSlice&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice based on specific iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := map[int]int64{1: 4, 2: 5, 3: 6}

s := lo.MapToSlice(m, func(k int, v int64) string {
    return fmt.Sprintf("%d_%d", k, v)
})
// []string{"1_4", "2_5", "3_6"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ZuiCZpDt6LD"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FilterMapToSlice&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice based on specific iteratee. The iteratee returns a value and a boolean. If the boolean is true, the value is added to the result slice.&lt;/p&gt; 
&lt;p&gt;If the boolean is false, the value is not added to the result slice. The order of the keys in the input map is not specified and the order of the keys in the output slice is not guaranteed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;kv := map[int]int64{1: 1, 2: 2, 3: 3, 4: 4}

result := lo.FilterMapToSlice(kv, func(k int, v int64) (string, bool) {
    return fmt.Sprintf("%d_%d", k, v), k%2 == 0
})
// []{"2_2", "4_4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Range / RangeFrom / RangeWithSteps&lt;/h3&gt; 
&lt;p&gt;Creates an array of numbers (positive and/or negative) progressing from start up to, but not including end.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Range(4)
// [0, 1, 2, 3]

result := lo.Range(-4)
// [0, -1, -2, -3]

result := lo.RangeFrom(1, 5)
// [1, 2, 3, 4, 5]

result := lo.RangeFrom[float64](1.0, 5)
// [1.0, 2.0, 3.0, 4.0, 5.0]

result := lo.RangeWithSteps(0, 20, 5)
// [0, 5, 10, 15]

result := lo.RangeWithSteps[float32](-1.0, -4.0, -1.0)
// [-1.0, -2.0, -3.0]

result := lo.RangeWithSteps(1, 4, -1)
// []

result := lo.Range(0)
// []
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/0r6VimXAi9H"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Clamp&lt;/h3&gt; 
&lt;p&gt;Clamps number within the inclusive lower and upper bounds.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r1 := lo.Clamp(0, -10, 10)
// 0

r2 := lo.Clamp(-42, -10, 10)
// -10

r3 := lo.Clamp(42, -10, 10)
// 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/RU4lJNC2hlI"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Sum&lt;/h3&gt; 
&lt;p&gt;Sums the values in a collection.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
sum := lo.Sum(list)
// 15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/upfeJVqs4Bt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SumBy&lt;/h3&gt; 
&lt;p&gt;Summarizes the values in a collection using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;strings := []string{"foo", "bar"}
sum := lo.SumBy(strings, func(item string) int {
    return len(item)
})
// 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Product&lt;/h3&gt; 
&lt;p&gt;Calculates the product of the values in a collection.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
product := lo.Product(list)
// 120
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2_kjM_smtAH"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ProductBy&lt;/h3&gt; 
&lt;p&gt;Calculates the product of the values in a collection using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;strings := []string{"foo", "bar"}
product := lo.ProductBy(strings, func(item string) int {
    return len(item)
})
// 9
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/wadzrWr9Aer"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Mean&lt;/h3&gt; 
&lt;p&gt;Calculates the mean of a collection of numbers.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mean := lo.Mean([]int{2, 3, 4, 5})
// 3

mean := lo.Mean([]float64{2, 3, 4, 5})
// 3.5

mean := lo.Mean([]float64{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MeanBy&lt;/h3&gt; 
&lt;p&gt;Calculates the mean of a collection of numbers using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []string{"aa", "bbb", "cccc", "ddddd"}
mapper := func(item string) float64 {
    return float64(len(item))
}

mean := lo.MeanBy(list, mapper)
// 3.5

mean := lo.MeanBy([]float64{}, mapper)
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Mode&lt;/h3&gt; 
&lt;p&gt;Calculates the mode(most frequent value) of a collection of numbers.&lt;/p&gt; 
&lt;p&gt;If multiple values ​​have the same highest frequency, then multiple values ​​are returned.&lt;/p&gt; 
&lt;p&gt;If the collection is empty, the zero value of &lt;code&gt;T[]&lt;/code&gt; is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mode := lo.Mode([]int{2, 2, 3, 4})
// [2]

mode := lo.Mode([]float64{2, 2, 3, 3})
// [2, 3]

mode := lo.Mode([]float64{})
// []

mode := lo.Mode([]int{1, 2, 3, 4, 5, 6, 7, 8, 9})
// [1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RandomString&lt;/h3&gt; 
&lt;p&gt;Returns a random string of the specified length and made of the specified charset.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.RandomString(5, lo.LettersCharset)
// example: "eIGbt"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rRseOQVVum4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Substring&lt;/h3&gt; 
&lt;p&gt;Return part of a string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sub := lo.Substring("hello", 2, 3)
// "llo"

sub := lo.Substring("hello", -4, 3)
// "ell"

sub := lo.Substring("hello", -2, math.MaxUint)
// "lo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TQlxQi82Lu1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ChunkString&lt;/h3&gt; 
&lt;p&gt;Returns an array of strings split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.ChunkString("123456", 2)
// []string{"12", "34", "56"}

lo.ChunkString("1234567", 2)
// []string{"12", "34", "56", "7"}

lo.ChunkString("", 2)
// []string{""}

lo.ChunkString("1", 2)
// []string{"1"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/__FLTuJVz54"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RuneLength&lt;/h3&gt; 
&lt;p&gt;An alias to utf8.RuneCountInString which returns the number of runes in string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sub := lo.RuneLength("hellô")
// 5

sub := len("hellô")
// 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tuhgW_lWY8l"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PascalCase&lt;/h3&gt; 
&lt;p&gt;Converts string to pascal case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.PascalCase("hello_world")
// HelloWorld
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/iZkdeLP9oiB"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CamelCase&lt;/h3&gt; 
&lt;p&gt;Converts string to camel case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.CamelCase("hello_world")
// helloWorld
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/dtyFB58MBRp"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;KebabCase&lt;/h3&gt; 
&lt;p&gt;Converts string to kebab case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.KebabCase("helloWorld")
// hello-world
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2YTuPafwECA"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SnakeCase&lt;/h3&gt; 
&lt;p&gt;Converts string to snake case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.SnakeCase("HelloWorld")
// hello_world
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/QVKJG9nOnDg"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Words&lt;/h3&gt; 
&lt;p&gt;Splits string into an array of its words.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Words("helloWorld")
// []string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2P4zhqqq61g"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Capitalize&lt;/h3&gt; 
&lt;p&gt;Converts the first character of string to upper case and the remaining to lower case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Capitalize("heLLO")
// Hello
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ellipsis&lt;/h3&gt; 
&lt;p&gt;Trims and truncates a string to a specified length &lt;strong&gt;in bytes&lt;/strong&gt; and appends an ellipsis if truncated. If the string contains non-ASCII characters (which may occupy multiple bytes in UTF-8), truncating by byte length may split a character in the middle, potentially resulting in garbled output.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Ellipsis("  Lorem Ipsum  ", 5)
// Lo...

str := lo.Ellipsis("Lorem Ipsum", 100)
// Lorem Ipsum

str := lo.Ellipsis("Lorem Ipsum", 3)
// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;T2 -&amp;gt; T9&lt;/h3&gt; 
&lt;p&gt;Creates a tuple from a list of values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuple1 := lo.T2("x", 1)
// Tuple2[string, int]{A: "x", B: 1}

func example() (string, int) { return "y", 2 }
tuple2 := lo.T2(example())
// Tuple2[string, int]{A: "y", B: 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/IllL3ZO4BQm"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Unpack2 -&amp;gt; Unpack9&lt;/h3&gt; 
&lt;p&gt;Returns values contained in tuple.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r1, r2 := lo.Unpack2(lo.Tuple2[string, int]{"a", 1})
// "a", 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unpack is also available as a method of TupleX.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuple2 := lo.T2("a", 1)
a, b := tuple2.Unpack()
// "a", 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/xVP_k0kJ96W"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Zip2 -&amp;gt; Zip9&lt;/h3&gt; 
&lt;p&gt;Zip creates a slice of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.&lt;/p&gt; 
&lt;p&gt;When collections have different size, the Tuple attributes are filled with zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuples := lo.Zip2([]string{"a", "b"}, []int{1, 2})
// []Tuple2[string, int]{{A: "a", B: 1}, {A: "b", B: 2}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/jujaA6GaJTp"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ZipBy2 -&amp;gt; ZipBy9&lt;/h3&gt; 
&lt;p&gt;ZipBy creates a slice of transformed elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.&lt;/p&gt; 
&lt;p&gt;When collections have different size, the Tuple attributes are filled with zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;items := lo.ZipBy2([]string{"a", "b"}, []int{1, 2}, func(a string, b int) string {
    return fmt.Sprintf("%s-%d", a, b)
})
// []string{"a-1", "b-2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Unzip2 -&amp;gt; Unzip9&lt;/h3&gt; 
&lt;p&gt;Unzip accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;a, b := lo.Unzip2([]Tuple2[string, int]{{A: "a", B: 1}, {A: "b", B: 2}})
// []string{"a", "b"}
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ciHugugvaAW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UnzipBy2 -&amp;gt; UnzipBy9&lt;/h3&gt; 
&lt;p&gt;UnzipBy2 iterates over a collection and creates an array regrouping the elements to their pre-zip configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;a, b := lo.UnzipBy2([]string{"hello", "john", "doe"}, func(str string) (string, int) {
    return str, len(str)
})
// []string{"hello", "john", "doe"}
// []int{5, 4, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CrossJoin2 -&amp;gt; CrossJoin9&lt;/h3&gt; 
&lt;p&gt;Combines every items from one list with every items from others. It is the cartesian product of lists received as arguments. It returns an empty list if a list is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CrossJoin2([]string{"hello", "john", "doe"}, []int{1, 2})
// lo.Tuple2{"hello", 1}
// lo.Tuple2{"hello", 2}
// lo.Tuple2{"john", 1}
// lo.Tuple2{"john", 2}
// lo.Tuple2{"doe", 1}
// lo.Tuple2{"doe", 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CrossJoinBy2 -&amp;gt; CrossJoinBy9&lt;/h3&gt; 
&lt;p&gt;Combines every items from one list with every items from others. It is the cartesian product of lists received as arguments. The project function is used to create the output values. It returns an empty list if a list is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CrossJoinBy2([]string{"hello", "john", "doe"}, []int{1, 2}, func(a A, b B) string {
    return fmt.Sprintf("%s - %d", a, b)
})
// "hello - 1"
// "hello - 2"
// "john - 1"
// "john - 2"
// "doe - 1"
// "doe - 2"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Duration&lt;/h3&gt; 
&lt;p&gt;Returns the time taken to execute a function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duration := lo.Duration(func() {
    // very long job
})
// 3s
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Duration0 -&amp;gt; Duration10&lt;/h3&gt; 
&lt;p&gt;Returns the time taken to execute a function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duration := lo.Duration0(func() {
    // very long job
})
// 3s

err, duration := lo.Duration1(func() error {
    // very long job
    return fmt.Errorf("an error")
})
// an error
// 3s

str, nbr, err, duration := lo.Duration3(func() (string, int, error) {
    // very long job
    return "hello", 42, nil
})
// hello
// 42
// nil
// 3s
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ChannelDispatcher&lt;/h3&gt; 
&lt;p&gt;Distributes messages from input channels into N child channels. Close events are propagated to children.&lt;/p&gt; 
&lt;p&gt;Underlying channels can have a fixed buffer capacity or be unbuffered when cap is 0.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := make(chan int, 42)
for i := 0; i &amp;lt;= 10; i++ {
    ch &amp;lt;- i
}

children := lo.ChannelDispatcher(ch, 5, 10, DispatchingStrategyRoundRobin[int])
// []&amp;lt;-chan int{...}

consumer := func(c &amp;lt;-chan int) {
    for {
        msg, ok := &amp;lt;-c
        if !ok {
            println("closed")

            break
        }

        println(msg)
    }
}

for i := range children {
    go consumer(children[i])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Many distributions strategies are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyRoundRobin&lt;/a&gt;: Distributes messages in a rotating sequential manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyRandom&lt;/a&gt;: Distributes messages in a random manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyWeightedRandom&lt;/a&gt;: Distributes messages in a weighted manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyFirst&lt;/a&gt;: Distributes messages in the first non-full channel.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyLeast&lt;/a&gt;: Distributes messages in the emptiest channel.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyMost&lt;/a&gt;: Distributes to the fullest channel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some strategies bring fallback, in order to favor non-blocking behaviors. See implementations.&lt;/p&gt; 
&lt;p&gt;For custom strategies, just implement the &lt;code&gt;lo.DispatchingStrategy&lt;/code&gt; prototype:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type DispatchingStrategy[T any] func(message T, messageIndex uint64, channels []&amp;lt;-chan T) int
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Eg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type Message struct {
    TenantID uuid.UUID
}

func hash(id uuid.UUID) int {
    h := fnv.New32a()
    h.Write([]byte(id.String()))
    return int(h.Sum32())
}

// Routes messages per TenantID.
customStrategy := func(message string, messageIndex uint64, channels []&amp;lt;-chan string) int {
    destination := hash(message) % len(channels)

    // check if channel is full
    if len(channels[destination]) &amp;lt; cap(channels[destination]) {
        return destination
    }

    // fallback when child channel is full
    return utils.DispatchingStrategyRoundRobin(message, uint64(destination), channels)
}

children := lo.ChannelDispatcher(ch, 5, 10, customStrategy)
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SliceToChannel&lt;/h3&gt; 
&lt;p&gt;Returns a read-only channels of collection elements. Channel is closed after last element. Channel capacity can be customized.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}

for v := range lo.SliceToChannel(2, list) {
    println(v)
}
// prints 1, then 2, then 3, then 4, then 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ChannelToSlice&lt;/h3&gt; 
&lt;p&gt;Returns a slice built from channels items. Blocks until channel closes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
ch := lo.SliceToChannel(2, list)

items := ChannelToSlice(ch)
// []int{1, 2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Generator&lt;/h3&gt; 
&lt;p&gt;Implements the generator design pattern. Channel is closed after last element. Channel capacity can be customized.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;generator := func(yield func(int)) {
    yield(1)
    yield(2)
    yield(3)
}

for v := range lo.Generator(2, generator) {
    println(v)
}
// prints 1, then 2, then 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Buffer&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.SliceToChannel(2, []int{1, 2, 3, 4, 5})

items1, length1, duration1, ok1 := lo.Buffer(ch, 3)
// []int{1, 2, 3}, 3, 0s, true
items2, length2, duration2, ok2 := lo.Buffer(ch, 3)
// []int{4, 5}, 2, 0s, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

for {
    // read 1k items
    items, length, _, ok := lo.Buffer(ch, 1000)

    // do batching stuff

    if !ok {
        break
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;BufferWithContext&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel, with timeout. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ctx, cancel := context.WithCancel(context.TODO())
go func() {
    ch &amp;lt;- 0
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 1
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 2
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 3
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 4
    time.Sleep(10*time.Millisecond)
    cancel()
}()

items1, length1, duration1, ok1 := lo.BufferWithContext(ctx, ch, 3)
// []int{0, 1, 2}, 3, 20ms, true
items2, length2, duration2, ok2 := lo.BufferWithContext(ctx, ch, 3)
// []int{3, 4}, 2, 30ms, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;BufferWithTimeout&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel, with timeout. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;generator := func(yield func(int)) {
    for i := 0; i &amp;lt; 5; i++ {
        yield(i)
        time.Sleep(35*time.Millisecond)
    }
}

ch := lo.Generator(0, generator)

items1, length1, duration1, ok1 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{1, 2}, 2, 100ms, true
items2, length2, duration2, ok2 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{3, 4, 5}, 3, 75ms, true
items3, length3, duration2, ok3 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{}, 0, 10ms, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

for {
    // read 1k items
    // wait up to 1 second
    items, length, _, ok := lo.BufferWithTimeout(ch, 1000, 1*time.Second)

    // do batching stuff

    if !ok {
        break
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: Multithreaded RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

// 5 workers
// prefetch 1k messages per worker
children := lo.ChannelDispatcher(ch, 5, 1000, lo.DispatchingStrategyFirst[int])

consumer := func(c &amp;lt;-chan int) {
    for {
        // read 1k items
        // wait up to 1 second
        items, length, _, ok := lo.BufferWithTimeout(ch, 1000, 1*time.Second)

        // do batching stuff

        if !ok {
            break
        }
    }
}

for i := range children {
    go consumer(children[i])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FanIn&lt;/h3&gt; 
&lt;p&gt;Merge messages from multiple input channels into a single buffered channel. Output messages has no priority. When all upstream channels reach EOF, downstream channel closes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;stream1 := make(chan int, 42)
stream2 := make(chan int, 42)
stream3 := make(chan int, 42)

all := lo.FanIn(100, stream1, stream2, stream3)
// &amp;lt;-chan int
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FanOut&lt;/h3&gt; 
&lt;p&gt;Broadcasts all the upstream messages to multiple downstream channels. When upstream channel reach EOF, downstream channels close. If any downstream channels is full, broadcasting is paused.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;stream := make(chan int, 42)

all := lo.FanOut(5, 100, stream)
// [5]&amp;lt;-chan int
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Contains&lt;/h3&gt; 
&lt;p&gt;Returns true if an element is present in a collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;present := lo.Contains([]int{0, 1, 2, 3, 4, 5}, 5)
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ContainsBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate function returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;present := lo.ContainsBy([]int{0, 1, 2, 3, 4, 5}, func(x int) bool {
    return x == 3
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Every&lt;/h3&gt; 
&lt;p&gt;Returns true if all elements of a subset are contained into a collection or if the subset is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Every([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// true

ok := lo.Every([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EveryBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate returns true for all elements in the collection or if the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := EveryBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 5
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Some&lt;/h3&gt; 
&lt;p&gt;Returns true if at least 1 element of a subset is contained into a collection. If the subset is empty Some returns false.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Some([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// true

ok := lo.Some([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SomeBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate returns true for any of the elements in the collection. If the collection is empty SomeBy returns false.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := SomeBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 3
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;None&lt;/h3&gt; 
&lt;p&gt;Returns true if no element of a subset are contained into a collection or if the subset is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := None([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// false
b := None([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NoneBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate returns true for none of the elements in the collection or if the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := NoneBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 0
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Intersect&lt;/h3&gt; 
&lt;p&gt;Returns the intersection between two collections.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// []int{0, 2}

result2 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// []int{0}

result3 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})
// []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Difference&lt;/h3&gt; 
&lt;p&gt;Returns the difference between two collections.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The first value is the collection of element absent of list2.&lt;/li&gt; 
 &lt;li&gt;The second value is the collection of element absent of list1.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;left, right := lo.Difference([]int{0, 1, 2, 3, 4, 5}, []int{0, 2, 6})
// []int{1, 3, 4, 5}, []int{6}

left, right := lo.Difference([]int{0, 1, 2, 3, 4, 5}, []int{0, 1, 2, 3, 4, 5})
// []int{}, []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Union&lt;/h3&gt; 
&lt;p&gt;Returns all distinct elements from given collections. Result will not change the order of elements relatively.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;union := lo.Union([]int{0, 1, 2, 3, 4, 5}, []int{0, 2}, []int{0, 10})
// []int{0, 1, 2, 3, 4, 5, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Without&lt;/h3&gt; 
&lt;p&gt;Returns slice excluding all given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.Without([]int{0, 2, 10}, 2)
// []int{0, 10}

subset := lo.Without([]int{0, 2, 10}, 0, 1, 2, 3, 4, 5)
// []int{10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutBy&lt;/h3&gt; 
&lt;p&gt;Filters a slice by excluding elements whose extracted keys match any in the exclude list.&lt;/p&gt; 
&lt;p&gt;It returns a new slice containing only the elements whose keys are not in the exclude list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type struct User {
    ID int
    Name string
}

// original users
users := []User{
    {ID: 1, Name: "Alice"},
    {ID: 2, Name: "Bob"},
    {ID: 3, Name: "Charlie"},
}

// extract function to get the user ID
getID := func(user User) int {
    return user.ID
}

// exclude users with IDs 2 and 3
excludedIDs := []int{2, 3}

// filtering users
filteredUsers := lo.WithoutBy(users, getID, excludedIDs...)
// []User[{ID: 1, Name: "Alice"}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutEmpty&lt;/h3&gt; 
&lt;p&gt;Returns slice excluding zero values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.WithoutEmpty([]int{0, 2, 10})
// []int{2, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutNth&lt;/h3&gt; 
&lt;p&gt;Returns slice excluding nth value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.WithoutNth([]int{-2, -1, 0, 1, 2}, 3, -42, 1)
// []int{-2, 0, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ElementsMatch&lt;/h3&gt; 
&lt;p&gt;Returns true if lists contain the same set of elements (including empty set).&lt;/p&gt; 
&lt;p&gt;If there are duplicate elements, the number of appearances of each of them in both lists should match.&lt;/p&gt; 
&lt;p&gt;The order of elements is not checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := lo.ElementsMatch([]int{1, 1, 2}, []int{2, 1, 1})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ElementsMatchBy&lt;/h3&gt; 
&lt;p&gt;Returns true if lists contain the same set of elements' keys (including empty set).&lt;/p&gt; 
&lt;p&gt;If there are duplicate keys, the number of appearances of each of them in both lists should match.&lt;/p&gt; 
&lt;p&gt;The order of elements is not checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := lo.ElementsMatchBy(
    []someType{a, b},
    []someType{b, a},
    func(item someType) string { return item.ID() },
)
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IndexOf&lt;/h3&gt; 
&lt;p&gt;Returns the index at which the first occurrence of a value is found in an array or return -1 if the value cannot be found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;found := lo.IndexOf([]int{0, 1, 2, 1, 2, 3}, 2)
// 2

notFound := lo.IndexOf([]int{0, 1, 2, 1, 2, 3}, 6)
// -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LastIndexOf&lt;/h3&gt; 
&lt;p&gt;Returns the index at which the last occurrence of a value is found in an array or return -1 if the value cannot be found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;found := lo.LastIndexOf([]int{0, 1, 2, 1, 2, 3}, 2)
// 4

notFound := lo.LastIndexOf([]int{0, 1, 2, 1, 2, 3}, 6)
// -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Find&lt;/h3&gt; 
&lt;p&gt;Search an element in a slice based on a predicate. It returns element and true if element was found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, ok := lo.Find([]string{"a", "b", "c", "d"}, func(i string) bool {
    return i == "b"
})
// "b", true

str, ok := lo.Find([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindIndexOf&lt;/h3&gt; 
&lt;p&gt;FindIndexOf searches an element in a slice based on a predicate and returns the index and true. It returns -1 and false if the element is not found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, index, ok := lo.FindIndexOf([]string{"a", "b", "a", "b"}, func(i string) bool {
    return i == "b"
})
// "b", 1, true

str, index, ok := lo.FindIndexOf([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", -1, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindLastIndexOf&lt;/h3&gt; 
&lt;p&gt;FindLastIndexOf searches an element in a slice based on a predicate and returns the index and true. It returns -1 and false if the element is not found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, index, ok := lo.FindLastIndexOf([]string{"a", "b", "a", "b"}, func(i string) bool {
    return i == "b"
})
// "b", 4, true

str, index, ok := lo.FindLastIndexOf([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", -1, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindOrElse&lt;/h3&gt; 
&lt;p&gt;Search an element in a slice based on a predicate. It returns the element if found or a given fallback value otherwise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.FindOrElse([]string{"a", "b", "c", "d"}, "x", func(i string) bool {
    return i == "b"
})
// "b"

str := lo.FindOrElse([]string{"foobar"}, "x", func(i string) bool {
    return i == "b"
})
// "x"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindKey&lt;/h3&gt; 
&lt;p&gt;Returns the key of the first value matching.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1, ok1 := lo.FindKey(map[string]int{"foo": 1, "bar": 2, "baz": 3}, 2)
// "bar", true

result2, ok2 := lo.FindKey(map[string]int{"foo": 1, "bar": 2, "baz": 3}, 42)
// "", false

type test struct {
    foobar string
}
result3, ok3 := lo.FindKey(map[string]test{"foo": test{"foo"}, "bar": test{"bar"}, "baz": test{"baz"}}, test{"foo"})
// "foo", true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindKeyBy&lt;/h3&gt; 
&lt;p&gt;Returns the key of the first element predicate returns truthy for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1, ok1 := lo.FindKeyBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(k string, v int) bool {
    return k == "foo"
})
// "foo", true

result2, ok2 := lo.FindKeyBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(k string, v int) bool {
    return false
})
// "", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindUniques&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all the unique elements of the collection. The order of result values is determined by the order they occur in the array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqueValues := lo.FindUniques([]int{1, 2, 2, 1, 2, 3})
// []int{3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindUniquesBy&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all the unique elements of the collection. The order of result values is determined by the order they occur in the array. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in array to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqueValues := lo.FindUniquesBy([]int{3, 4, 5, 6, 7}, func(i int) int {
    return i%3
})
// []int{5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindDuplicates&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the first occurrence of each duplicated elements of the collection. The order of result values is determined by the order they occur in the array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duplicatedValues := lo.FindDuplicates([]int{1, 2, 2, 1, 2, 3})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindDuplicatesBy&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the first occurrence of each duplicated elements of the collection. The order of result values is determined by the order they occur in the array. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in array to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duplicatedValues := lo.FindDuplicatesBy([]int{3, 4, 5, 6, 7}, func(i int) int {
    return i%3
})
// []int{3, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Min&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min := lo.Min([]int{1, 2, 3})
// 1

min := lo.Min([]int{})
// 0

min := lo.Min([]time.Duration{time.Second, time.Hour})
// 1s
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MinIndex&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection and the index of the minimum value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min, index := lo.MinIndex([]int{1, 2, 3})
// 1, 0

min, index := lo.MinIndex([]int{})
// 0, -1

min, index := lo.MinIndex([]time.Duration{time.Second, time.Hour})
// 1s, 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MinBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection using the given comparison function.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the smallest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min := lo.MinBy([]string{"s1", "string2", "s3"}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "s1"

min := lo.MinBy([]string{}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MinIndexBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection using the given comparison function and the index of the minimum value.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the smallest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min, index := lo.MinIndexBy([]string{"s1", "string2", "s3"}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "s1", 0

min, index := lo.MinIndexBy([]string{}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "", -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Earliest&lt;/h3&gt; 
&lt;p&gt;Search the minimum time.Time of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;earliest := lo.Earliest(time.Now(), time.Time{})
// 0001-01-01 00:00:00 +0000 UTC
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EarliestBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum time.Time of a collection using the given iteratee function.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
    bar time.Time
}

earliest := lo.EarliestBy([]foo{{time.Now()}, {}}, func(i foo) time.Time {
    return i.bar
})
// {bar:{2023-04-01 01:02:03 +0000 UTC}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Max&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max := lo.Max([]int{1, 2, 3})
// 3

max := lo.Max([]int{})
// 0

max := lo.Max([]time.Duration{time.Second, time.Hour})
// 1h
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxIndex&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection and the index of the maximum value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max, index := lo.MaxIndex([]int{1, 2, 3})
// 3, 2

max, index := lo.MaxIndex([]int{})
// 0, -1

max, index := lo.MaxIndex([]time.Duration{time.Second, time.Hour})
// 1h, 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection using the given comparison function.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the greatest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max := lo.MaxBy([]string{"string1", "s2", "string3"}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "string1"

max := lo.MaxBy([]string{}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxIndexBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection using the given comparison function and the index of the maximum value.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the greatest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max, index := lo.MaxIndexBy([]string{"string1", "s2", "string3"}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "string1", 0

max, index := lo.MaxIndexBy([]string{}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "", -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Latest&lt;/h3&gt; 
&lt;p&gt;Search the maximum time.Time of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;latest := lo.Latest(time.Now(), time.Time{})
// 2023-04-01 01:02:03 +0000 UTC
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LatestBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum time.Time of a collection using the given iteratee function.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
    bar time.Time
}

latest := lo.LatestBy([]foo{{time.Now()}, {}}, func(i foo) time.Time {
    return i.bar
})
// {bar:{2023-04-01 01:02:03 +0000 UTC}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;First&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection and check for availability of the first element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first, ok := lo.First([]int{1, 2, 3})
// 1, true

first, ok := lo.First([]int{})
// 0, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FirstOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection or zero value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first := lo.FirstOrEmpty([]int{1, 2, 3})
// 1

first := lo.FirstOrEmpty([]int{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FirstOr&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection or the fallback value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first := lo.FirstOr([]int{1, 2, 3}, 245)
// 1

first := lo.FirstOr([]int{}, 31)
// 31
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Last&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or error if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last, ok := lo.Last([]int{1, 2, 3})
// 3
// true

last, ok := lo.Last([]int{})
// 0
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LastOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or zero value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last := lo.LastOrEmpty([]int{1, 2, 3})
// 3

last := lo.LastOrEmpty([]int{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LastOr&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or the fallback value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last := lo.LastOr([]int{1, 2, 3}, 245)
// 3

last := lo.LastOr([]int{}, 31)
// 31
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Nth&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of collection. If &lt;code&gt;nth&lt;/code&gt; is negative, the nth element from the end is returned. An error is returned when nth is out of slice bounds.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth, err := lo.Nth([]int{0, 1, 2, 3}, 2)
// 2

nth, err := lo.Nth([]int{0, 1, 2, 3}, -2)
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NthOr&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of the collection. If &lt;code&gt;nth&lt;/code&gt; is negative, it returns the &lt;code&gt;nth&lt;/code&gt; element from the end. If &lt;code&gt;nth&lt;/code&gt; is out of slice bounds, it returns the provided fallback value&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth := lo.NthOr([]int{10, 20, 30, 40, 50}, 2, -1)
// 30

nth := lo.NthOr([]int{10, 20, 30, 40, 50}, -1, -1)
// 50

nth := lo.NthOr([]int{10, 20, 30, 40, 50}, 5, -1)
// -1 (fallback value)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NthOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of the collection. If &lt;code&gt;nth&lt;/code&gt; is negative, it returns the &lt;code&gt;nth&lt;/code&gt; element from the end. If &lt;code&gt;nth&lt;/code&gt; is out of slice bounds, it returns the zero value for the element type (e.g., 0 for integers, "" for strings, etc).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, 2)
// 30

nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, -1)
// 50

nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, 5)
// 0 (zero value for int)

nth := lo.NthOrEmpty([]string{"apple", "banana", "cherry"}, 2)
// "cherry"

nth := lo.NthOrEmpty([]string{"apple", "banana", "cherry"}, 5)
// "" (zero value for string)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sample&lt;/h3&gt; 
&lt;p&gt;Returns a random item from collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Sample([]string{"a", "b", "c"})
// a random string from []string{"a", "b", "c"}

lo.Sample([]string{})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SampleBy&lt;/h3&gt; 
&lt;p&gt;Returns a random item from collection, using a given random integer generator.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "math/rand"

r := rand.New(rand.NewSource(42))
lo.SampleBy([]string{"a", "b", "c"}, r.Intn)
// a random string from []string{"a", "b", "c"}, using a seeded random generator

lo.SampleBy([]string{}, r.Intn)
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Samples&lt;/h3&gt; 
&lt;p&gt;Returns N random unique items from collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Samples([]string{"a", "b", "c"}, 3)
// []string{"a", "b", "c"} in random order
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SamplesBy&lt;/h3&gt; 
&lt;p&gt;Returns N random unique items from collection, using a given random integer generator.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r := rand.New(rand.NewSource(42))
lo.SamplesBy([]string{"a", "b", "c"}, 3, r.Intn)
// []string{"a", "b", "c"} in random order, using a seeded random generator
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ternary&lt;/h3&gt; 
&lt;p&gt;A 1 line if/else statement.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Ternary(true, "a", "b")
// "a"

result := lo.Ternary(false, "a", "b")
// "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Take care to avoid dereferencing potentially nil pointers in your A/B expressions, because they are both evaluated. See TernaryF to avoid this problem.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/t-D7WBL44h2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TernaryF&lt;/h3&gt; 
&lt;p&gt;A 1 line if/else statement whose options are functions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.TernaryF(true, func() string { return "a" }, func() string { return "b" })
// "a"

result := lo.TernaryF(false, func() string { return "a" }, func() string { return "b" })
// "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Useful to avoid nil-pointer dereferencing in initializations, or avoid running unnecessary code&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var s *string

someStr := TernaryF(s == nil, func() string { return uuid.New().String() }, func() string { return *s })
// ef782193-c30c-4e2e-a7ae-f8ab5e125e02
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/AO4VW20JoqM"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;If / ElseIf / Else&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.If(true, 1).
    ElseIf(false, 2).
    Else(3)
// 1

result := lo.If(false, 1).
    ElseIf(true, 2).
    Else(3)
// 2

result := lo.If(false, 1).
    ElseIf(false, 2).
    Else(3)
// 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.IfF(true, func () int {
        return 1
    }).
    ElseIfF(false, func () int {
        return 2
    }).
    ElseF(func () int {
        return 3
    })
// 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Mixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.IfF(true, func () int {
        return 1
    }).
    Else(42)
// 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/WSw3ApMxhyW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Switch / Case / Default&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "1"

result := lo.Switch(2).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "2"

result := lo.Switch(42).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    CaseF(1, func() string {
        return "1"
    }).
    CaseF(2, func() string {
        return "2"
    }).
    DefaultF(func() string {
        return "3"
    })
// "1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Mixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    CaseF(1, func() string {
        return "1"
    }).
    Default("42")
// "1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TGbKUMAeRUd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsNil&lt;/h3&gt; 
&lt;p&gt;Checks if a value is nil or if it's a reference type with a nil underlying value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var x int
lo.IsNil(x)
// false

var k struct{}
lo.IsNil(k)
// false

var i *int
lo.IsNil(i)
// true

var ifaceWithNilValue any = (*string)(nil)
lo.IsNil(ifaceWithNilValue)
// true
ifaceWithNilValue == nil
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsNotNil&lt;/h3&gt; 
&lt;p&gt;Checks if a value is not nil or if it's not a reference type with a nil underlying value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var x int
lo.IsNotNil(x)
// true

var k struct{}
lo.IsNotNil(k)
// true

var i *int
lo.IsNotNil(i)
// false

var ifaceWithNilValue any = (*string)(nil)
lo.IsNotNil(ifaceWithNilValue)
// false
ifaceWithNilValue == nil
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ToPtr&lt;/h3&gt; 
&lt;p&gt;Returns a pointer copy of the value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.ToPtr("hello world")
// *string{"hello world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Nil&lt;/h3&gt; 
&lt;p&gt;Returns a nil pointer of type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.Nil[float64]()
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EmptyableToPtr&lt;/h3&gt; 
&lt;p&gt;Returns a pointer copy of value if it's nonzero. Otherwise, returns nil pointer.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.EmptyableToPtr(nil)
// nil

ptr := lo.EmptyableToPtr("")
// nil

ptr := lo.EmptyableToPtr([]int{})
// *[]int{}

ptr := lo.EmptyableToPtr("hello world")
// *string{"hello world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromPtr&lt;/h3&gt; 
&lt;p&gt;Returns the pointer value or empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := "hello world"
value := lo.FromPtr(&amp;amp;str)
// "hello world"

value := lo.FromPtr(nil)
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromPtrOr&lt;/h3&gt; 
&lt;p&gt;Returns the pointer value or the fallback value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := "hello world"
value := lo.FromPtrOr(&amp;amp;str, "empty")
// "hello world"

value := lo.FromPtrOr(nil, "empty")
// "empty"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ToSlicePtr&lt;/h3&gt; 
&lt;p&gt;Returns a slice of pointer copy of value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.ToSlicePtr([]string{"hello", "world"})
// []*string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromSlicePtr&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the pointer values. Returns a zero value in case of a nil pointer element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str1 := "hello"
str2 := "world"

ptr := lo.FromSlicePtr[string]([]*string{&amp;amp;str1, &amp;amp;str2, nil})
// []string{"hello", "world", ""}

ptr := lo.Compact(
    lo.FromSlicePtr[string]([]*string{&amp;amp;str1, &amp;amp;str2, nil}),
)
// []string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromSlicePtrOr&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the pointer values or the fallback value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str1 := "hello"
str2 := "world"

ptr := lo.FromSlicePtrOr([]*string{&amp;amp;str1, nil, &amp;amp;str2}, "fallback value")
// []string{"hello", "fallback value", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/CuXGVzo9G65"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ToAnySlice&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all elements mapped to &lt;code&gt;any&lt;/code&gt; type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;elements := lo.ToAnySlice([]int{1, 5, 1})
// []any{1, 5, 1}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromAnySlice&lt;/h3&gt; 
&lt;p&gt;Returns an &lt;code&gt;any&lt;/code&gt; slice with all elements mapped to a type. Returns false in case of type conversion failure.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;elements, ok := lo.FromAnySlice([]any{"foobar", 42})
// []string{}, false

elements, ok := lo.FromAnySlice([]any{"foobar", "42"})
// []string{"foobar", "42"}, true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Empty&lt;/h3&gt; 
&lt;p&gt;Returns the &lt;a href="https://go.dev/ref/spec#The_zero_value"&gt;zero value&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Empty[int]()
// 0
lo.Empty[string]()
// ""
lo.Empty[bool]()
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsEmpty&lt;/h3&gt; 
&lt;p&gt;Returns true if argument is a zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.IsEmpty(0)
// true
lo.IsEmpty(42)
// false

lo.IsEmpty("")
// true
lo.IsEmpty("foobar")
// false

type test struct {
    foobar string
}

lo.IsEmpty(test{foobar: ""})
// true
lo.IsEmpty(test{foobar: "foobar"})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsNotEmpty&lt;/h3&gt; 
&lt;p&gt;Returns true if argument is a zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.IsNotEmpty(0)
// false
lo.IsNotEmpty(42)
// true

lo.IsNotEmpty("")
// false
lo.IsNotEmpty("foobar")
// true

type test struct {
    foobar string
}

lo.IsNotEmpty(test{foobar: ""})
// false
lo.IsNotEmpty(test{foobar: "foobar"})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Coalesce&lt;/h3&gt; 
&lt;p&gt;Returns the first non-empty arguments. Arguments must be comparable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.Coalesce(0, 1, 2, 3)
// 1 true

result, ok := lo.Coalesce("")
// "" false

var nilStr *string
str := "foobar"
result, ok := lo.Coalesce(nil, nilStr, &amp;amp;str)
// &amp;amp;"foobar" true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-empty arguments. Arguments must be comparable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceOrEmpty(0, 1, 2, 3)
// 1

result := lo.CoalesceOrEmpty("")
// ""

var nilStr *string
str := "foobar"
result := lo.CoalesceOrEmpty(nil, nilStr, &amp;amp;str)
// &amp;amp;"foobar"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceSlice&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.CoalesceSlice([]int{1, 2, 3}, []int{4, 5, 6})
// [1, 2, 3]
// true

result, ok := lo.CoalesceSlice(nil, []int{})
// []
// true

result, ok := lo.CoalesceSlice([]int(nil))
// []
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceSliceOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceSliceOrEmpty([]int{1, 2, 3}, []int{4, 5, 6})
// [1, 2, 3]

result := lo.CoalesceSliceOrEmpty(nil, []int{})
// []
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceMap&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.CoalesceMap(map[string]int{"1": 1, "2": 2, "3": 3}, map[string]int{"4": 4, "5": 5, "6": 6})
// {"1": 1, "2": 2, "3": 3}
// true

result, ok := lo.CoalesceMap(nil, map[string]int{})
// {}
// true

result, ok := lo.CoalesceMap(map[string]int(nil))
// {}
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceMapOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceMapOrEmpty(map[string]int{"1": 1, "2": 2, "3": 3}, map[string]int{"4": 4, "5": 5, "6": 6})
// {"1": 1, "2": 2, "3": 3}

result := lo.CoalesceMapOrEmpty(nil, map[string]int{})
// {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Partial&lt;/h3&gt; 
&lt;p&gt;Returns new function that, when called, has its first argument set to the provided value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;add := func(x, y int) int { return x + y }
f := lo.Partial(add, 5)

f(10)
// 15

f(42)
// 47
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Partial2 -&amp;gt; Partial5&lt;/h3&gt; 
&lt;p&gt;Returns new function that, when called, has its first argument set to the provided value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;add := func(x, y, z int) int { return x + y + z }
f := lo.Partial2(add, 42)

f(10, 5)
// 57

f(42, -4)
// 80
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Attempt&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output. Returns either the caught error or nil.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;iter, err := lo.Attempt(42, func(i int) error {
    if i == 5 {
        return nil
    }

    return fmt.Errorf("failed")
})
// 6
// nil

iter, err := lo.Attempt(2, func(i int) error {
    if i == 5 {
        return nil
    }

    return fmt.Errorf("failed")
})
// 2
// error "failed"

iter, err := lo.Attempt(0, func(i int) error {
    if i &amp;lt; 42 {
        return fmt.Errorf("failed")
    }

    return nil
})
// 43
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look on &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/3ggJZ2ZKcMj"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWithDelay&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output, with a pause between each call. Returns either the caught error or nil.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;iter, duration, err := lo.AttemptWithDelay(5, 2*time.Second, func(i int, duration time.Duration) error {
    if i == 2 {
        return nil
    }

    return fmt.Errorf("failed")
})
// 3
// ~ 4 seconds
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look on &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tVs6CygC7m1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWhile&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output. Returns either the caught error or nil, along with a bool value to determine whether the function should be invoked again. It will terminate the invoke immediately if the second return value is false.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count1, err1 := lo.AttemptWhile(5, func(i int) (error, bool) {
    err := doMockedHTTPRequest(i)
    if err != nil {
        if errors.Is(err, ErrBadRequest) { // lets assume ErrBadRequest is a critical error that needs to terminate the invoke
            return err, false // flag the second return value as false to terminate the invoke
        }

        return err, true
    }

    return nil, false
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look on &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/M2wVq24PaZM"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWhileWithDelay&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output, with a pause between each call. Returns either the caught error or nil, along with a bool value to determine whether the function should be invoked again. It will terminate the invoke immediately if the second return value is false.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count1, time1, err1 := lo.AttemptWhileWithDelay(5, time.Millisecond, func(i int, d time.Duration) (error, bool) {
    err := doMockedHTTPRequest(i)
    if err != nil {
        if errors.Is(err, ErrBadRequest) { // lets assume ErrBadRequest is a critical error that needs to terminate the invoke
            return err, false // flag the second return value as false to terminate the invoke
        }

        return err, true
    }

    return nil, false
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look on &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/cfcmhvLO-nv"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Debounce&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;NewDebounce&lt;/code&gt; creates a debounced instance that delays invoking functions given until after wait milliseconds have elapsed, until &lt;code&gt;cancel&lt;/code&gt; is called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
    println("Called once after 100ms when debounce stopped invoking!")
}

debounce, cancel := lo.NewDebounce(100 * time.Millisecond, f)
for j := 0; j &amp;lt; 10; j++ {
    debounce()
}

time.Sleep(1 * time.Second)
cancel()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mz32VMK2nqe"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DebounceBy&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;NewDebounceBy&lt;/code&gt; creates a debounced instance for each distinct key, that delays invoking functions given until after wait milliseconds have elapsed, until &lt;code&gt;cancel&lt;/code&gt; is called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func(key string, count int) {
    println(key + ": Called once after 100ms when debounce stopped invoking!")
}

debounce, cancel := lo.NewDebounceBy(100 * time.Millisecond, f)
for j := 0; j &amp;lt; 10; j++ {
    debounce("first key")
    debounce("second key")
}

time.Sleep(1 * time.Second)
cancel("first key")
cancel("second key")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/d3Vpt6pxhY8"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Throttle&lt;/h3&gt; 
&lt;p&gt;Creates a throttled instance that invokes given functions only once in every interval.&lt;/p&gt; 
&lt;p&gt;This returns 2 functions, First one is throttled function and Second one is a function to reset interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
	println("Called once in every 100ms")
}

throttle, reset := lo.NewThrottle(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle()
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;NewThrottleWithCount&lt;/code&gt; is NewThrottle with count limit, throttled function will be invoked count times in every interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
	println("Called three times in every 100ms")
}

throttle, reset := lo.NewThrottleWithCount(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle()
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;NewThrottleBy&lt;/code&gt; and &lt;code&gt;NewThrottleByWithCount&lt;/code&gt; are NewThrottle with sharding key, throttled function will be invoked count times in every interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func(key string) {
	println(key, "Called three times in every 100ms")
}

throttle, reset := lo.NewThrottleByWithCount(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle("foo")
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Synchronize&lt;/h3&gt; 
&lt;p&gt;Wraps the underlying callback in a mutex. It receives an optional mutex.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;s := lo.Synchronize()

for i := 0; i &amp;lt; 10; i++ {
    go s.Do(func () {
        println("will be called sequentially")
    })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is equivalent to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mu := sync.Mutex{}

func foobar() {
    mu.Lock()
    defer mu.Unlock()

    // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Async&lt;/h3&gt; 
&lt;p&gt;Executes a function in a goroutine and returns the result in a channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.Async(func() error { time.Sleep(10 * time.Second); return nil })
// chan error (nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Async{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;Executes a function in a goroutine and returns the result in a channel. For function with multiple return values, the results will be returned as a tuple inside the channel. For function without return, struct{} will be returned in the channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.Async0(func() { time.Sleep(10 * time.Second) })
// chan struct{}

ch := lo.Async1(func() int {
  time.Sleep(10 * time.Second);
  return 42
})
// chan int (42)

ch := lo.Async2(func() (int, string) {
  time.Sleep(10 * time.Second);
  return 42, "Hello"
})
// chan lo.Tuple2[int, string] ({42, "Hello"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Transaction&lt;/h3&gt; 
&lt;p&gt;Implements a Saga pattern.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;transaction := NewTransaction().
    Then(
        func(state int) (int, error) {
            fmt.Println("step 1")
            return state + 10, nil
        },
        func(state int) int {
            fmt.Println("rollback 1")
            return state - 10
        },
    ).
    Then(
        func(state int) (int, error) {
            fmt.Println("step 2")
            return state + 15, nil
        },
        func(state int) int {
            fmt.Println("rollback 2")
            return state - 15
        },
    ).
    Then(
        func(state int) (int, error) {
            fmt.Println("step 3")

            if true {
                return state, fmt.Errorf("error")
            }

            return state + 42, nil
        },
        func(state int) int {
            fmt.Println("rollback 3")
            return state - 42
        },
    )

_, _ = transaction.Process(-5)

// Output:
// step 1
// step 2
// step 3
// rollback 2
// rollback 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WaitFor&lt;/h3&gt; 
&lt;p&gt;Runs periodically until a condition is validated.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;alwaysTrue := func(i int) bool { return true }
alwaysFalse := func(i int) bool { return false }
laterTrue := func(i int) bool {
    return i &amp;gt; 5
}

iterations, duration, ok := lo.WaitFor(alwaysTrue, 10*time.Millisecond, 2 * time.Millisecond)
// 1
// 1ms
// true

iterations, duration, ok := lo.WaitFor(alwaysFalse, 10*time.Millisecond, time.Millisecond)
// 10
// 10ms
// false

iterations, duration, ok := lo.WaitFor(laterTrue, 10*time.Millisecond, time.Millisecond)
// 7
// 7ms
// true

iterations, duration, ok := lo.WaitFor(laterTrue, 10*time.Millisecond, 5*time.Millisecond)
// 2
// 10ms
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WaitForWithContext&lt;/h3&gt; 
&lt;p&gt;Runs periodically until a condition is validated or context is invalid.&lt;/p&gt; 
&lt;p&gt;The condition receives also the context, so it can invalidate the process in the condition checker&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ctx := context.Background()

alwaysTrue := func(_ context.Context, i int) bool { return true }
alwaysFalse := func(_ context.Context, i int) bool { return false }
laterTrue := func(_ context.Context, i int) bool {
    return i &amp;gt;= 5
}

iterations, duration, ok := lo.WaitForWithContext(ctx, alwaysTrue, 10*time.Millisecond, 2 * time.Millisecond)
// 1
// 1ms
// true

iterations, duration, ok := lo.WaitForWithContext(ctx, alwaysFalse, 10*time.Millisecond, time.Millisecond)
// 10
// 10ms
// false

iterations, duration, ok := lo.WaitForWithContext(ctx, laterTrue, 10*time.Millisecond, time.Millisecond)
// 5
// 5ms
// true

iterations, duration, ok := lo.WaitForWithContext(ctx, laterTrue, 10*time.Millisecond, 5*time.Millisecond)
// 2
// 10ms
// false

expiringCtx, cancel := context.WithTimeout(ctx, 5*time.Millisecond)
iterations, duration, ok := lo.WaitForWithContext(expiringCtx, alwaysFalse, 100*time.Millisecond, time.Millisecond)
// 5
// 5.1ms
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Validate&lt;/h3&gt; 
&lt;p&gt;Helper function that creates an error when a condition is not met.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := []string{"a"}
val := lo.Validate(len(slice) == 0, "Slice should be empty but contains %v", slice)
// error("Slice should be empty but contains [a]")

slice := []string{}
val := lo.Validate(len(slice) == 0, "Slice should be empty but contains %v", slice)
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/vPyh51XpCBt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Must&lt;/h3&gt; 
&lt;p&gt;Wraps a function call to panics if second argument is &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, returns the value otherwise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;val := lo.Must(time.Parse("2006-01-02", "2022-01-15"))
// 2022-01-15

val := lo.Must(time.Parse("2006-01-02", "bad-value"))
// panics
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TMoWrRp3DyC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Must{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;Must* has the same behavior as Must, but returns multiple values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func example0() (error)
func example1() (int, error)
func example2() (int, string, error)
func example3() (int, string, time.Date, error)
func example4() (int, string, time.Date, bool, error)
func example5() (int, string, time.Date, bool, float64, error)
func example6() (int, string, time.Date, bool, float64, byte, error)

lo.Must0(example0())
val1 := lo.Must1(example1())    // alias to Must
val1, val2 := lo.Must2(example2())
val1, val2, val3 := lo.Must3(example3())
val1, val2, val3, val4 := lo.Must4(example4())
val1, val2, val3, val4, val5 := lo.Must5(example5())
val1, val2, val3, val4, val5, val6 := lo.Must6(example6())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can wrap functions like &lt;code&gt;func (...) (..., ok bool)&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// math.Signbit(float64) bool
lo.Must0(math.Signbit(v))

// bytes.Cut([]byte,[]byte) ([]byte, []byte, bool)
before, after := lo.Must2(bytes.Cut(s, sep))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can give context to the panic message by adding some printf-like arguments.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;val, ok := lo.Find(myString, func(i string) bool {
    return i == requiredChar
})
lo.Must0(ok, "'%s' must always contain '%s'", myString, requiredChar)

list := []int{0, 1, 2}
item := 5
lo.Must0(lo.Contains(list, item), "'%s' must always contain '%s'", list, item)
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TMoWrRp3DyC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Try&lt;/h3&gt; 
&lt;p&gt;Calls the function and returns false in case of error and panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Try(func() error {
    panic("error")
    return nil
})
// false

ok := lo.Try(func() error {
    return nil
})
// true

ok := lo.Try(func() error {
    return fmt.Errorf("error")
})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mTyyWUvn9u4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Try{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but the callback returns 2 variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Try2(func() (string, error) {
    panic("error")
    return "", nil
})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mTyyWUvn9u4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryOr&lt;/h3&gt; 
&lt;p&gt;Calls the function and return a default value in case of error and on panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, ok := lo.TryOr(func() (string, error) {
    panic("error")
    return "hello", nil
}, "world")
// world
// false

str, ok := lo.TryOr(func() error {
    return "hello", nil
}, "world")
// hello
// true

str, ok := lo.TryOr(func() error {
    return "hello", fmt.Errorf("error")
}, "world")
// world
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/B4F7Wg2Zh9X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryOr{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;TryOr&lt;/code&gt;, but the callback returns &lt;code&gt;X&lt;/code&gt; variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, nbr, ok := lo.TryOr2(func() (string, int, error) {
    panic("error")
    return "hello", 42, nil
}, "world", 21)
// world
// 21
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/B4F7Wg2Zh9X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryWithErrorValue&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but also returns the value passed to panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err, ok := lo.TryWithErrorValue(func() error {
    panic("error")
    return nil
})
// "error", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Kc7afQIT2Fs"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryCatch&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but calls the catch function in case of error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;caught := false

ok := lo.TryCatch(func() error {
    panic("error")
    return nil
}, func() {
    caught = true
})
// false
// caught == true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/PnOON-EqBiU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryCatchWithErrorValue&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;TryWithErrorValue&lt;/code&gt;, but calls the catch function in case of error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;caught := false

ok := lo.TryCatchWithErrorValue(func() error {
    panic("error")
    return nil
}, func(val any) {
    caught = val == "error"
})
// false
// caught == true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8Pc9gwX_GZO"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ErrorsAs&lt;/h3&gt; 
&lt;p&gt;A shortcut for:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err := doSomething()

var rateLimitErr *RateLimitError
if ok := errors.As(err, &amp;amp;rateLimitErr); ok {
    // retry later
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;1 line &lt;code&gt;lo&lt;/code&gt; helper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err := doSomething()

if rateLimitErr, ok := lo.ErrorsAs[*RateLimitError](err); ok {
    // retry later
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8wk5rH8UfrE"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assert&lt;/h3&gt; 
&lt;p&gt;Does nothing when the condition is &lt;code&gt;true&lt;/code&gt;, otherwise it panics with an optional message.&lt;/p&gt; 
&lt;p&gt;Think twice before using it, given that &lt;a href="https://go.dev/doc/faq#assertions"&gt;Go intentionally omits assertions from its standard library&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assert(age &amp;gt;= 15)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assert(age &amp;gt;= 15, "user age must be &amp;gt;= 15")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Xv8LLKBMNwI"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assertf&lt;/h3&gt; 
&lt;p&gt;Like &lt;code&gt;Assert&lt;/code&gt;, but with &lt;code&gt;fmt.Printf&lt;/code&gt;-like formatting.&lt;/p&gt; 
&lt;p&gt;Think twice before using it, given that &lt;a href="https://go.dev/doc/faq#assertions"&gt;Go intentionally omits assertions from its standard library&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assertf(age &amp;gt;= 15, "user age must be &amp;gt;= 15, got %d", age)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TVPEmVcyrdY"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h2&gt;🛩 Benchmark&lt;/h2&gt; 
&lt;p&gt;We executed a simple benchmark with a dead-simple &lt;code&gt;lo.Map&lt;/code&gt; loop:&lt;/p&gt; 
&lt;p&gt;See the full implementation &lt;a href="https://raw.githubusercontent.com/samber/lo/master/map_benchmark_test.go"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;_ = lo.Map[int64](arr, func(x int64, i int) string {
    return strconv.FormatInt(x, 10)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Here is a comparison between &lt;code&gt;lo.Map&lt;/code&gt;, &lt;code&gt;lop.Map&lt;/code&gt;, &lt;code&gt;go-funk&lt;/code&gt; library and a simple Go &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go test -benchmem -bench ./...
goos: linux
goarch: amd64
pkg: github.com/samber/lo
cpu: Intel(R) Core(TM) i5-7267U CPU @ 3.10GHz
cpu: Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz
BenchmarkMap/lo.Map-8         	       8	 132728237 ns/op	39998945 B/op	 1000002 allocs/op
BenchmarkMap/lop.Map-8        	       2	 503947830 ns/op	119999956 B/op	 3000007 allocs/op
BenchmarkMap/reflect-8        	       2	 826400560 ns/op	170326512 B/op	 4000042 allocs/op
BenchmarkMap/for-8            	       9	 126252954 ns/op	39998674 B/op	 1000001 allocs/op
PASS
ok  	github.com/samber/lo	6.657s
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; is way faster (x7) than &lt;code&gt;go-funk&lt;/code&gt;, a reflection-based Map implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; has the same allocation profile as &lt;code&gt;for&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; is 4% slower than &lt;code&gt;for&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lop.Map&lt;/code&gt; is slower than &lt;code&gt;lo.Map&lt;/code&gt; because it implies more memory allocation and locks. &lt;code&gt;lop.Map&lt;/code&gt; will be useful for long-running callbacks, such as i/o bound processing.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;for&lt;/code&gt; beats other implementations for memory and CPU.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ping me on Twitter &lt;a href="https://twitter.com/samuelberthe"&gt;@samuelberthe&lt;/a&gt; (DMs, mentions, whatever :))&lt;/li&gt; 
 &lt;li&gt;Fork the &lt;a href="https://github.com/samber/lo"&gt;project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fix &lt;a href="https://github.com/samber/lo/issues"&gt;open issues&lt;/a&gt; or request new features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Don't hesitate ;)&lt;/p&gt; 
&lt;p&gt;Helper naming: helpers must be self-explanatory and respect standards (other languages, libraries...). Feel free to suggest many names in your contributions.&lt;/p&gt; 
&lt;h3&gt;With Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker-compose run --rm dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Without Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install some dev dependencies
make tools

# Run tests
make test
# or
make watch-test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;👤 Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://contrib.rocks/image?repo=samber/lo" alt="Contributors" /&gt;&lt;/p&gt; 
&lt;h2&gt;💫 Show your support&lt;/h2&gt; 
&lt;p&gt;Give a ⭐️ if this project helped you!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sponsors/samber"&gt;&lt;img src="https://img.shields.io/github/sponsors/samber?style=for-the-badge" alt="GitHub Sponsors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📝 License&lt;/h2&gt; 
&lt;p&gt;Copyright © 2022 &lt;a href="https://github.com/samber"&gt;Samuel Berthe&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project is under &lt;a href="https://raw.githubusercontent.com/samber/lo/master/LICENSE"&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>argoproj/argo-cd</title>
      <link>https://github.com/argoproj/argo-cd</link>
      <description>&lt;p&gt;Declarative Continuous Deployment for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Releases:&lt;/strong&gt; &lt;a href="https://github.com/argoproj/argo-cd/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/argoproj/argo-cd?label=argo-cd" alt="Release Version" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/argo/argo-cd"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/argo-cd" alt="Artifact HUB" /&gt;&lt;/a&gt; &lt;a href="https://slsa.dev"&gt;&lt;img src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true" alt="SLSA 3" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;a href="https://github.com/argoproj/argo-cd/actions?query=workflow%3A%22Integration+tests%22"&gt;&lt;img src="https://github.com/argoproj/argo-cd/workflows/Integration%20tests/badge.svg?branch=master" alt="Integration tests" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/argoproj/argo-cd"&gt;&lt;img src="https://codecov.io/gh/argoproj/argo-cd/branch/master/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/4486"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/4486/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/argoproj/argo-cd"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/argoproj/argo-cd/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Social:&lt;/strong&gt; &lt;a href="https://twitter.com/argoproj"&gt;&lt;img src="https://img.shields.io/twitter/follow/argoproj?style=social" alt="Twitter Follow" /&gt;&lt;/a&gt; &lt;a href="https://argoproj.github.io/community/join-slack"&gt;&lt;img src="https://img.shields.io/badge/slack-argoproj-brightgreen.svg?logo=slack" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/argoproj/"&gt;&lt;img src="https://img.shields.io/badge/LinkedIn-argoproj-blue.svg?logo=linkedin" alt="LinkedIn" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Argo CD - Declarative Continuous Delivery for Kubernetes&lt;/h1&gt; 
&lt;h2&gt;What is Argo CD?&lt;/h2&gt; 
&lt;p&gt;Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/argoproj/argo-cd/master/docs/assets/argocd-ui.gif" alt="Argo CD UI" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/0WAm0y2vLIo"&gt;&lt;img src="https://img.youtube.com/vi/0WAm0y2vLIo/0.jpg" alt="Argo CD Demo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Why Argo CD?&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Application definitions, configurations, and environments should be declarative and version controlled.&lt;/li&gt; 
 &lt;li&gt;Application deployment and lifecycle management should be automated, auditable, and easy to understand.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Who uses Argo CD?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/argoproj/argo-cd/master/USERS.md"&gt;Official Argo CD user list&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;To learn more about Argo CD &lt;a href="https://argo-cd.readthedocs.io/"&gt;go to the complete documentation&lt;/a&gt;. Check live demo at &lt;a href="https://cd.apps.argoproj.io/"&gt;https://cd.apps.argoproj.io/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;h3&gt;Contribution, Discussion and Support&lt;/h3&gt; 
&lt;p&gt;You can reach the Argo CD community and developers via the following channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Q &amp;amp; A : &lt;a href="https://github.com/argoproj/argo-cd/discussions"&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chat : &lt;a href="https://argoproj.github.io/community/join-slack"&gt;The #argo-cd Slack channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Contributors Office Hours: &lt;a href="https://calendar.google.com/calendar/u/0/embed?src=argoproj@gmail.com"&gt;Every Thursday&lt;/a&gt; | &lt;a href="https://docs.google.com/document/d/1xkoFkVviB70YBzSEa4bDnu-rUZ1sIFtwKKG1Uw8XsY8"&gt;Agenda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;User Community meeting: &lt;a href="https://calendar.google.com/calendar/u/0/embed?src=argoproj@gmail.com"&gt;First Wednesday of the month&lt;/a&gt; | &lt;a href="https://docs.google.com/document/d/1ttgw98MO45Dq7ZUHpIiOIEfbyeitKHNfMjbY5dLLMKQ"&gt;Agenda&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Participation in the Argo CD project is governed by the &lt;a href="https://github.com/cncf/foundation/raw/master/code-of-conduct.md"&gt;CNCF Code of Conduct&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Blogs and Presentations&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://github.com/terrytangyuan/awesome-argo"&gt;Awesome-Argo: A Curated List of Awesome Projects and Resources Related to Argo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://akuity.io/blog/secret-ingredients-of-continuous-delivery-at-enterprise-scale-with-argocd/"&gt;Unveil the Secret Ingredients of Continuous Delivery at Enterprise Scale with Argo CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/avPUQin9kzU"&gt;GitOps Without Pipelines With ArgoCD Image Updater&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/eEcgn_gU3SM"&gt;Combining Argo CD (GitOps), Crossplane (Control Plane), And KubeVela (OAM)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/yrj4lmScKHQ"&gt;How to Apply GitOps to Everything - Combining Argo CD and Crossplane&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/nkPoPaVzExY"&gt;Couchbase - How To Run a Database Cluster in Kubernetes Using Argo CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/XNXJtxkUKeY"&gt;Automation of Everything - How To Combine Argo Events, Workflows &amp;amp; Pipelines, CD, and Rollouts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/cpAaI8p4R60"&gt;Environments Based On Pull Requests (PRs): Using Argo CD To Apply GitOps Principles On Previews&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/vpWQeoaiRM4"&gt;Argo CD: Applying GitOps Principles To Manage Production Environment In Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://codefresh.io/continuous-deployment/creating-temporary-preview-environments-based-pull-requests-argo-cd-codefresh/"&gt;Creating Temporary Preview Environments Based On Pull Requests With Argo CD And Codefresh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=r50tRQjisxw"&gt;Tutorial: Everything You Need To Become A GitOps Ninja&lt;/a&gt; 90m tutorial on GitOps and Argo CD.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.inovex.de/blog/spinnaker-vs-argo-cd-vs-tekton-vs-jenkins-x/"&gt;Comparison of Argo CD, Spinnaker, Jenkins X, and Tekton&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.ibm.com/cloud/blog/simplify-and-automate-deployments-using-gitops-with-ibm-multicloud-manager-3-1-2"&gt;Simplify and Automate Deployments Using GitOps with IBM Multicloud Manager 3.1.2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://v0-6.kubeflow.org/docs/use-cases/gitops-for-kubeflow/"&gt;GitOps for Kubeflow using Argo CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/webinar-series-gitops-tool-sets-on-kubernetes-with-circleci-and-argo-cd"&gt;GitOps Toolsets on Kubernetes with CircleCI and Argo CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OdzH82VpMwI&amp;amp;feature=youtu.be"&gt;CI/CD in Light Speed with K8s and Argo CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VXrGp5er1ZE&amp;amp;t=0s&amp;amp;index=135&amp;amp;list=PLj6h78yzYM2PZf9eA7bhWnIh_mK1vyOfU"&gt;Machine Learning as Code&lt;/a&gt;. Among other things, describes how Kubeflow uses Argo CD to implement GitOPs for ML&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=aWDIQMbp1cc&amp;amp;feature=youtu.be&amp;amp;t=1m4s"&gt;Argo CD - GitOps Continuous Delivery for Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2WSJF7d8dUg&amp;amp;feature=youtu.be"&gt;Introduction to Argo CD : Kubernetes DevOps CI/CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/riskified-technology/gitops-deployment-and-kubernetes-f1ab289efa4b"&gt;GitOps Deployment and Kubernetes - using Argo CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://itnext.io/deploy-argo-cd-with-ingress-and-tls-in-three-steps-no-yaml-yak-shaving-required-bc536d401491"&gt;Deploy Argo CD with Ingress and TLS in Three Steps: No YAML Yak Shaving Required&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://codefresh.io/events/cncf-member-webinar-gitops-continuous-delivery-argo-codefresh/"&gt;GitOps Continuous Delivery with Argo and Codefresh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mjpitz.com/blog/2020/12/03/renovate-your-gitops/"&gt;Stay up to date with Argo CD and Renovate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.arthurkoziel.com/setting-up-argocd-with-helm/"&gt;Setting up Argo CD with Helm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://thenewstack.io/applied-gitops-with-argocd/"&gt;Applied GitOps with Argo CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cncf.io/blog/2020/12/17/solving-configuration-drift-using-gitops-with-argo-cd/"&gt;Solving configuration drift using GitOps with Argo CD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blogs.sap.com/2021/05/06/decentralized-gitops-over-environments/"&gt;Decentralized GitOps over environments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/AvLuplh1skA"&gt;Getting Started with ArgoCD for GitOps Deployments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/17894DTru2Y"&gt;Using Argo CD &amp;amp; Datree for Stable Kubernetes CI/CD Deployments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://amralaayassen.medium.com/how-to-create-argocd-applications-automatically-using-applicationset-automation-of-the-gitops-59455eaf4f72"&gt;How to create Argo CD Applications Automatically using ApplicationSet? "Automation of GitOps"&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cncf.io/blog/2022/12/16/progressive-delivery-with-service-mesh-argo-rollouts-with-istio/"&gt;Progressive Delivery with Service Mesh – Argo Rollouts with Istio&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>RezaSi/go-interview-practice</title>
      <link>https://github.com/RezaSi/go-interview-practice</link>
      <description>&lt;p&gt;Go Interview Practice is a series of coding challenges to help you prepare for technical interviews in Go. Solve problems, submit your solutions, and receive instant feedback with automated testing. Track your progress with per-challenge scoreboards and improve your coding skills step by step.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Interview Practice&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/RezaSi/go-interview-practice/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/RezaSi/go-interview-practice?style=for-the-badge&amp;amp;logo=github&amp;amp;color=yellow" alt="GitHub Stars" /&gt;&lt;/a&gt; &lt;a href="https://golang.org/"&gt;&lt;img src="https://img.shields.io/badge/Go-1.19+-00ADD8?style=for-the-badge&amp;amp;logo=go" alt="Go Version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/RezaSi/go-interview-practice"&gt;&lt;img src="https://img.shields.io/badge/Challenges-30+-brightgreen?style=for-the-badge&amp;amp;logo=checkmarx" alt="Challenges" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;a href="https://trendshift.io/repositories/14255" target="_blank"&gt; &lt;img src="https://trendshift.io/api/badge/repositories/14255" alt="RezaSi%2Fgo-interview-practice | Trendshift" style="width: 250px;" width="250" /&gt; &lt;/a&gt; 
 &lt;p&gt;&lt;strong&gt;⭐ Star the repo if it’s useful to you&lt;/strong&gt; &lt;br /&gt; &lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Welcome to the &lt;strong&gt;Go Interview Practice&lt;/strong&gt; repository! Master Go programming and ace your technical interviews with our interactive coding challenges.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Visual Overview&lt;/h2&gt; 
&lt;h3&gt;Interactive Challenge Platform&lt;/h3&gt; 
&lt;p&gt;Our comprehensive web interface provides everything you need to practice and master Go programming:&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;video src="https://github.com/user-attachments/assets/23468aab-a032-4326-9d05-84de86c9128c" controls width="90%"&gt;&lt;/video&gt; 
 &lt;p&gt;&lt;em&gt;A brief introduction to the project&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Code &amp;amp; Test Experience&lt;/h3&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/images/challenge.png" alt="Go Interview Practice Web UI - challenge" width="48%" style="margin-right: 2%;" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/images/result.png" alt="Go Interview Practice Web UI - result" width="48%" /&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td align="center" width="48%"&gt; &lt;strong&gt;Interactive Code Editor&lt;/strong&gt;&lt;br /&gt; &lt;em&gt;Write, edit, and test your Go solutions&lt;br /&gt;with syntax highlighting and real-time feedback&lt;/em&gt; &lt;/td&gt; 
    &lt;td width="4%"&gt;&lt;/td&gt; 
    &lt;td align="center" width="48%"&gt; &lt;strong&gt;Instant Results &amp;amp; Analytics&lt;/strong&gt;&lt;br /&gt; &lt;em&gt;Get immediate test results, performance metrics,&lt;br /&gt;and detailed execution analysis&lt;/em&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Competitive Leaderboard&lt;/h3&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/images/scoreboard.png" alt="Go Interview Practice - Main Leaderboard" width="90%" /&gt; 
 &lt;p&gt;&lt;em&gt;Beautiful leaderboard showcasing top developers with challenge completion indicators, rankings, and achievements&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h2&gt;🏆 Top 10 Leaderboard&lt;/h2&gt; 
&lt;p&gt;Our most accomplished Go developers, ranked by number of challenges completed:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The data below is automatically updated by GitHub Actions when challenge scoreboards change.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;🏅&lt;/th&gt; 
   &lt;th align="center"&gt;Developer&lt;/th&gt; 
   &lt;th align="center"&gt;Solved&lt;/th&gt; 
   &lt;th align="center"&gt;Rate&lt;/th&gt; 
   &lt;th align="center"&gt;Achievement&lt;/th&gt; 
   &lt;th align="left"&gt;Progress&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥇&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/odelbos.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/odelbos"&gt;odelbos&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;29&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;96.7%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Master&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅✅✅✅✅✅✅✅✅⬜✅✅✅&lt;br /&gt;✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥈&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/mick4711.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/mick4711"&gt;mick4711&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;23&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;76.7%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Master&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅✅✅✅✅✅✅✅⬜⬜✅✅⬜&lt;br /&gt;✅✅✅✅✅✅✅✅⬜⬜✅✅⬜⬜✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥉&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/y1hao.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/y1hao"&gt;y1hao&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;21&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;70.0%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Master&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅✅✅✅✅✅⬜✅⬜⬜✅✅⬜&lt;br /&gt;✅✅✅✅✅✅✅✅⬜⬜⬜✅⬜⬜✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;4&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/JackDalberg.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/JackDalberg"&gt;JackDalberg&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;20&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;66.7%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Master&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅✅✅✅✅✅⬜✅⬜⬜✅✅⬜&lt;br /&gt;⬜✅✅✅✅✅✅✅⬜⬜⬜✅⬜⬜✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;5&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/Gandook.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/Gandook"&gt;Gandook&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;18&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;60.0%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Expert&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅✅⬜✅✅✅⬜✅⬜⬜✅⬜⬜&lt;br /&gt;⬜✅✅✅⬜✅✅✅✅✅⬜✅⬜⬜⬜&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;6&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/ashwinipatankar.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/ashwinipatankar"&gt;ashwinipatankar&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;18&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;60.0%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Expert&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅⬜✅✅✅⬜✅✅⬜⬜✅✅⬜&lt;br /&gt;⬜✅✅✅⬜✅✅✅⬜⬜⬜✅⬜⬜✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;7&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/PolinaSvet.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/PolinaSvet"&gt;PolinaSvet&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;15&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;50.0%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Expert&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅✅✅✅✅⬜⬜✅⬜⬜✅✅⬜&lt;br /&gt;✅✅✅⬜⬜✅✅⬜⬜⬜⬜⬜⬜⬜⬜&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;8&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/KhaledMosaad.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/KhaledMosaad"&gt;KhaledMosaad&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;14&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;46.7%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Advanced&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅⬜⬜✅⬜⬜⬜⬜⬜⬜✅⬜⬜&lt;br /&gt;⬜✅✅✅⬜✅✅✅⬜⬜✅✅⬜⬜✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;9&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/RezaSi.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/RezaSi"&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;14&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;46.7%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Advanced&lt;/td&gt; 
   &lt;td align="left"&gt;✅✅✅✅✅✅⬜⬜⬜✅⬜⬜✅⬜⬜&lt;br /&gt;⬜✅✅✅⬜✅✅✅⬜⬜⬜⬜⬜⬜⬜&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;10&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/MYK12397.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/MYK12397"&gt;MYK12397&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;11&lt;/strong&gt;/30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;36.7%&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;Advanced&lt;/td&gt; 
   &lt;td align="left"&gt;⬜✅✅⬜✅✅✅⬜⬜⬜⬜⬜⬜⬜⬜&lt;br /&gt;⬜✅✅✅⬜✅⬜⬜✅⬜⬜⬜⬜⬜✅&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;✅ Completed • ⬜ Not Completed&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;All 30 challenges shown in two rows&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;em&gt;Updated automatically based on 30 available challenges&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Challenge Progress Overview&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Total Challenges Available&lt;/strong&gt;: 30&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Active Developers&lt;/strong&gt;: 77&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Most Challenges Solved&lt;/strong&gt;: 29 by odelbos&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- END_CLASSIC_LEADERBOARD --&gt; 
&lt;h2&gt;🚀 Package Challenges Leaderboard&lt;/h2&gt; 
&lt;p&gt;Master Go packages through hands-on challenges! Each package offers a structured learning path with real-world scenarios.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The data below is automatically updated by GitHub Actions when package challenge scoreboards change.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;🏅&lt;/th&gt; 
   &lt;th align="center"&gt;Developer&lt;/th&gt; 
   &lt;th align="center"&gt;Total Solved&lt;/th&gt; 
   &lt;th align="center"&gt;Packages&lt;/th&gt; 
   &lt;th align="center"&gt;Achievement&lt;/th&gt; 
   &lt;th align="left"&gt;Challenge Distribution&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥇&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/odelbos.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/odelbos"&gt;odelbos&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;4&lt;/strong&gt; pkgs&lt;/td&gt; 
   &lt;td align="center"&gt;🔥 Package Master&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;cobra&lt;/strong&gt;: 4 • &lt;strong&gt;fiber&lt;/strong&gt;: 3 • &lt;strong&gt;gin&lt;/strong&gt;: 3 • &lt;strong&gt;gorm&lt;/strong&gt;: 5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥈&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/RezaSi.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/RezaSi"&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;3&lt;/strong&gt; pkgs&lt;/td&gt; 
   &lt;td align="center"&gt;🚀 Package Intermediate&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;cobra&lt;/strong&gt;: 1 • &lt;strong&gt;gin&lt;/strong&gt;: 1 • &lt;strong&gt;gorm&lt;/strong&gt;: 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥉&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/ashwinipatankar.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/ashwinipatankar"&gt;ashwinipatankar&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;1&lt;/strong&gt; pkg&lt;/td&gt; 
   &lt;td align="center"&gt;🚀 Package Intermediate&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;cobra&lt;/strong&gt;: 3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;4&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/GleeN987.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/GleeN987"&gt;GleeN987&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;1&lt;/strong&gt; pkg&lt;/td&gt; 
   &lt;td align="center"&gt;🌱 Package Beginner&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;gin&lt;/strong&gt;: 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;5&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://github.com/MarioPaez.png" width="24" height="24" style="border-radius: 50%;" /&gt;&lt;br /&gt;&lt;strong&gt;&lt;a href="https://github.com/MarioPaez"&gt;MarioPaez&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;1&lt;/strong&gt; pkg&lt;/td&gt; 
   &lt;td align="center"&gt;🌱 Package Beginner&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;gin&lt;/strong&gt;: 1&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;🚀 &lt;strong&gt;Package Challenges&lt;/strong&gt; - Learn Go packages through practical, real-world scenarios&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;📦 Per-Package Progress&lt;/h3&gt; 
&lt;h4&gt;Cobra Package&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Rank&lt;/th&gt; 
   &lt;th align="center"&gt;Developer&lt;/th&gt; 
   &lt;th align="center"&gt;Completed&lt;/th&gt; 
   &lt;th align="left"&gt;Progress&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥇&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/odelbos"&gt;odelbos&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;4/4&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩 100%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥈&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/ashwinipatankar"&gt;ashwinipatankar&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;3/4&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩🟩🟩🟩🟩🟩⬜⬜⬜ 75%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥉&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/RezaSi"&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1/4&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩⬜⬜⬜⬜⬜⬜⬜⬜ 25%&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Fiber Package&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Rank&lt;/th&gt; 
   &lt;th align="center"&gt;Developer&lt;/th&gt; 
   &lt;th align="center"&gt;Completed&lt;/th&gt; 
   &lt;th align="left"&gt;Progress&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥇&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/odelbos"&gt;odelbos&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;3/4&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩🟩🟩🟩🟩🟩⬜⬜⬜ 75%&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Gin Package&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Rank&lt;/th&gt; 
   &lt;th align="center"&gt;Developer&lt;/th&gt; 
   &lt;th align="center"&gt;Completed&lt;/th&gt; 
   &lt;th align="left"&gt;Progress&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥇&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/odelbos"&gt;odelbos&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;3/4&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩🟩🟩🟩🟩🟩⬜⬜⬜ 75%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥈&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/GleeN987"&gt;GleeN987&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1/4&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩⬜⬜⬜⬜⬜⬜⬜⬜ 25%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥉&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/MarioPaez"&gt;MarioPaez&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1/4&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩⬜⬜⬜⬜⬜⬜⬜⬜ 25%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;4&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/RezaSi"&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1/4&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩⬜⬜⬜⬜⬜⬜⬜⬜ 25%&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Gorm Package&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Rank&lt;/th&gt; 
   &lt;th align="center"&gt;Developer&lt;/th&gt; 
   &lt;th align="center"&gt;Completed&lt;/th&gt; 
   &lt;th align="left"&gt;Progress&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥇&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/odelbos"&gt;odelbos&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;5/5&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩 100%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;🥈&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;a href="https://github.com/RezaSi"&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1/5&lt;/td&gt; 
   &lt;td align="left"&gt;🟩🟩⬜⬜⬜⬜⬜⬜⬜⬜ 20%&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;📊 Package Challenge Statistics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Total Package Challenges Available&lt;/strong&gt;: 17&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Active Package Learners&lt;/strong&gt;: 5&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Available Packages&lt;/strong&gt;: 4 (cobra, fiber, gin, gorm)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Most Package Challenges Solved&lt;/strong&gt;: 15 by odelbos&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- END_PACKAGE_LEADERBOARD --&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Interactive Web UI&lt;/strong&gt; - Code, test, and submit solutions in your browser&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automated Testing&lt;/strong&gt; - Get immediate feedback on your solutions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automated Scoreboards&lt;/strong&gt; - Solutions are automatically scored and ranked&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🏆 Profile Badges&lt;/strong&gt; - Beautiful auto-updating badges for GitHub profiles, LinkedIn, and portfolios&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance Analytics&lt;/strong&gt; - Track execution time and memory usage for your solutions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive Learning&lt;/strong&gt; - Each challenge includes detailed explanations and resources&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Progressive Difficulty&lt;/strong&gt; - From beginner to advanced Go concepts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: You must fork this repository first before cloning, otherwise you won't be able to push your solutions or create pull requests!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Option 1: Web UI (Recommended)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1. First, fork this repository on GitHub
#    Go to https://github.com/RezaSi/go-interview-practice
#    Click the "Fork" button in the top-right corner

# 2. Clone your forked repository (replace 'yourusername' with your GitHub username)
git clone https://github.com/yourusername/go-interview-practice.git
cd go-interview-practice

# 3. Start the web interface
cd web-ui
go run main.go

# 4. Open http://localhost:8080 in your browser

# 5. Optional: Enable AI Features (Recommended) 🤖
# Add your free Gemini API key to enable AI interview simulation
echo "AI_PROVIDER=gemini" &amp;gt; web-ui/.env
echo "GEMINI_API_KEY=your_actual_api_key_here" &amp;gt;&amp;gt; web-ui/.env
# Get your free API key: https://makersuite.google.com/app/apikey
# Note: .env files are automatically ignored by git for security
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;After solving challenges and submitting solutions:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Your solutions will be automatically saved to your local repository&lt;/li&gt; 
 &lt;li&gt;Follow the provided Git commands to commit and push your changes&lt;/li&gt; 
 &lt;li&gt;Create a pull request to contribute your solutions back to the main project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Option 2: GitHub Codespaces (Cloud Development + Web UI)&lt;/h3&gt; 
&lt;p&gt;Want to get started instantly without setting up anything locally? Use GitHub Codespaces!&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Fork this repository&lt;/strong&gt; (if you haven't already)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open in Codespaces&lt;/strong&gt;: Click the green "Code" button on your forked repository, then select "Codespaces" tab&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Create Codespace&lt;/strong&gt;: Click "Create codespace on main"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Start the Web UI&lt;/strong&gt;: Once the codespace loads, open a terminal and run: &lt;pre&gt;&lt;code class="language-bash"&gt;cd web-ui
go run main.go
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optional: Enable AI Features&lt;/strong&gt;: Add your Gemini API key: &lt;pre&gt;&lt;code class="language-bash"&gt;echo "AI_PROVIDER=gemini" &amp;gt; .env
echo "GEMINI_API_KEY=your_actual_api_key_here" &amp;gt;&amp;gt; .env
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Access the Web UI&lt;/strong&gt;: Click on the "Ports" tab in the bottom panel, then click the "Open in Browser" button next to port 8080&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Benefits of using Codespaces:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;No local setup required&lt;/li&gt; 
 &lt;li&gt;Pre-configured Go environment&lt;/li&gt; 
 &lt;li&gt;Full VS Code experience in the browser&lt;/li&gt; 
 &lt;li&gt;Automatic port forwarding for the web UI&lt;/li&gt; 
 &lt;li&gt;All dependencies pre-installed&lt;/li&gt; 
 &lt;li&gt;Works on any device with a browser&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Option 3: Command Line&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1. Fork the repository first (see step 1 above)
# 2. Clone your fork and set up a challenge workspace
git clone https://github.com/yourusername/go-interview-practice.git
cd go-interview-practice
./create_submission.sh 1  # For challenge #1

# 3. Implement your solution in the editor of your choice

# 4. Run tests
cd challenge-1
./run_tests.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Scoreboards&lt;/h2&gt; 
&lt;p&gt;Each challenge has its own scoreboard that tracks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Successful submissions by user&lt;/li&gt; 
 &lt;li&gt;Execution time rankings&lt;/li&gt; 
 &lt;li&gt;Code efficiency metrics&lt;/li&gt; 
 &lt;li&gt;Completion dates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;View global and per-challenge scoreboards in the Web UI to compare your solutions with others.&lt;/p&gt; 
&lt;h2&gt;Profile Badges for Contributors&lt;/h2&gt; 
&lt;p&gt;Showcase your Go programming achievements with auto-updating profile badges for GitHub profiles, portfolios, and personal websites.&lt;/p&gt; 
&lt;h3&gt;Examples&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/RezaSi/go-interview-practice"&gt;&lt;img src="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/badges/RezaSi.svg?sanitize=true" alt="Go Interview Practice Achievement" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/RezaSi/go-interview-practice"&gt;&lt;img src="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/badges/RezaSi_compact.svg?sanitize=true" alt="Go Interview Practice Compact" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Quick Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-markdown"&gt;[![Go Interview Practice Achievement](https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/badges/YOUR_USERNAME.svg)](https://github.com/RezaSi/go-interview-practice)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After contributing solutions, your badges are automatically generated in &lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/badges/"&gt;&lt;code&gt;badges/YOUR_USERNAME_badges.md&lt;/code&gt;&lt;/a&gt; with multiple formats ready to use.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/docs/profile-badges-guide.md"&gt;Complete Badge Guide &amp;amp; Examples →&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Challenge Categories&lt;/h2&gt; 
&lt;h3&gt;Beginner&lt;/h3&gt; 
&lt;p&gt;Perfect for those new to Go or brushing up on fundamentals&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-1"&gt;Challenge 1&lt;/a&gt;&lt;/strong&gt;: Sum of Two Numbers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-2"&gt;Challenge 2&lt;/a&gt;&lt;/strong&gt;: Reverse a String&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-3"&gt;Challenge 3&lt;/a&gt;&lt;/strong&gt;: Employee Data Management&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-6"&gt;Challenge 6&lt;/a&gt;&lt;/strong&gt;: Word Frequency Counter&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-18"&gt;Challenge 18&lt;/a&gt;&lt;/strong&gt;: Temperature Converter&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-21"&gt;Challenge 21&lt;/a&gt;&lt;/strong&gt;: Binary Search Implementation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-22"&gt;Challenge 22&lt;/a&gt;&lt;/strong&gt;: Greedy Coin Change&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Intermediate&lt;/h3&gt; 
&lt;p&gt;For developers familiar with Go who want to deepen their knowledge&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-4"&gt;Challenge 4&lt;/a&gt;&lt;/strong&gt;: Concurrent Graph BFS Queries&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-5"&gt;Challenge 5&lt;/a&gt;&lt;/strong&gt;: HTTP Authentication Middleware&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-7"&gt;Challenge 7&lt;/a&gt;&lt;/strong&gt;: Bank Account with Error Handling&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-10"&gt;Challenge 10&lt;/a&gt;&lt;/strong&gt;: Polymorphic Shape Calculator&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-13"&gt;Challenge 13&lt;/a&gt;&lt;/strong&gt;: SQL Database Operations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-14"&gt;Challenge 14&lt;/a&gt;&lt;/strong&gt;: Microservices with gRPC&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-16"&gt;Challenge 16&lt;/a&gt;&lt;/strong&gt;: Performance Optimization&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-17"&gt;Challenge 17&lt;/a&gt;&lt;/strong&gt;: Interactive Debugging Tutorial&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-19"&gt;Challenge 19&lt;/a&gt;&lt;/strong&gt;: Slice Operations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-20"&gt;Challenge 20&lt;/a&gt;&lt;/strong&gt;: Circuit Breaker Pattern&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-23"&gt;Challenge 23&lt;/a&gt;&lt;/strong&gt;: String Pattern Matching&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-27"&gt;Challenge 27&lt;/a&gt;&lt;/strong&gt;: Go Generics Data Structures&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-30"&gt;Challenge 30&lt;/a&gt;&lt;/strong&gt;: Context Management Implementation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Advanced&lt;/h3&gt; 
&lt;p&gt;Challenging problems that test mastery of Go and computer science concepts&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-8"&gt;Challenge 8&lt;/a&gt;&lt;/strong&gt;: Chat Server with Channels&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-9"&gt;Challenge 9&lt;/a&gt;&lt;/strong&gt;: RESTful Book Management API&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-11"&gt;Challenge 11&lt;/a&gt;&lt;/strong&gt;: Concurrent Web Content Aggregator&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-12"&gt;Challenge 12&lt;/a&gt;&lt;/strong&gt;: File Processing Pipeline&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-15"&gt;Challenge 15&lt;/a&gt;&lt;/strong&gt;: OAuth2 Authentication&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-24"&gt;Challenge 24&lt;/a&gt;&lt;/strong&gt;: Dynamic Programming - Longest Increasing Subsequence&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-25"&gt;Challenge 25&lt;/a&gt;&lt;/strong&gt;: Graph Algorithms - Shortest Path&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-26"&gt;Challenge 26&lt;/a&gt;&lt;/strong&gt;: Regular Expression Text Processor&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-28"&gt;Challenge 28&lt;/a&gt;&lt;/strong&gt;: Cache Implementation with Multiple Eviction Policies&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-29"&gt;Challenge 29&lt;/a&gt;&lt;/strong&gt;: Rate Limiter Implementation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Use This Repository&lt;/h2&gt; 
&lt;h3&gt;1. Explore Challenges&lt;/h3&gt; 
&lt;p&gt;Browse challenges through the web UI or in the code repository. Each challenge includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Detailed problem statement&lt;/li&gt; 
 &lt;li&gt;Function signature to implement&lt;/li&gt; 
 &lt;li&gt;Comprehensive test cases&lt;/li&gt; 
 &lt;li&gt;Learning resources&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. Implement Your Solution&lt;/h3&gt; 
&lt;p&gt;Write code that solves the challenge requirements and passes all test cases.&lt;/p&gt; 
&lt;h3&gt;3. Test &amp;amp; Refine&lt;/h3&gt; 
&lt;p&gt;Use the built-in testing tools to validate your solution, then refine it for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Correctness&lt;/li&gt; 
 &lt;li&gt;Efficiency&lt;/li&gt; 
 &lt;li&gt;Code quality&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. Submit &amp;amp; Compare&lt;/h3&gt; 
&lt;p&gt;Submit your passing solution to be added to the scoreboard:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Your solution is automatically tested and scored&lt;/li&gt; 
 &lt;li&gt;Execution time and resource usage are recorded&lt;/li&gt; 
 &lt;li&gt;Your solution is ranked among other submissions&lt;/li&gt; 
 &lt;li&gt;Access detailed performance metrics to optimize further&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. Learn &amp;amp; Progress&lt;/h3&gt; 
&lt;p&gt;Review the learning materials to deepen your understanding of the concepts used.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions! You can contribute in several ways:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Submit Solutions:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Solve existing classic or package challenges&lt;/li&gt; 
 &lt;li&gt;Submit your solutions via pull request&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Add New Challenges:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Classic Challenges:&lt;/strong&gt; Algorithm and data structure problems&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Package Challenges:&lt;/strong&gt; Framework-specific practical applications (Gin, Cobra, GORM, etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Quick Steps:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Choose challenge type (classic or package-based)&lt;/li&gt; 
 &lt;li&gt;Follow our template structure&lt;/li&gt; 
 &lt;li&gt;Submit a pull request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for detailed guidelines on both challenge types.&lt;/p&gt; 
&lt;h2&gt;🏢 Premium Business Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Thank you to our premium sponsors who make this project possible!&lt;/em&gt;&lt;/p&gt; 
&lt;!-- 
Premium sponsor logos will appear here when we have them. Format:
&lt;div align="center"&gt;
&lt;a href="https://company-website.com" target="_blank"&gt;
&lt;img src="https://company-logo-url.com/logo.png" alt="Company Name" height="60" style="margin: 0 20px;"&gt;
&lt;/a&gt;
&lt;/div&gt;
--&gt; 
&lt;p&gt;&lt;em&gt;Interested in premium sponsorship? &lt;a href="https://github.com/sponsors/RezaSi"&gt;Contact us&lt;/a&gt; to feature your company logo here and on our platform!&lt;/em&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#RezaSi/go-interview-practice&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=RezaSi/go-interview-practice&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Happy Coding!&lt;/strong&gt; 💻&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>netbirdio/netbird</title>
      <link>https://github.com/netbirdio/netbird</link>
      <description>&lt;p&gt;Connect your devices into a secure WireGuard®-based overlay network with SSO, MFA and granular access controls.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;p align="center"&gt; &lt;img width="234" src="https://raw.githubusercontent.com/netbirdio/netbird/main/docs/media/logo-full.png" /&gt; &lt;/p&gt; 
 &lt;p&gt; &lt;a href="https://img.shields.io/badge/license-BSD--3-blue)"&gt; &lt;img src="https://sonarcloud.io/api/project_badges/measure?project=netbirdio_netbird&amp;amp;metric=alert_status" /&gt; &lt;/a&gt; &lt;a href="https://github.com/netbirdio/netbird/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/badge/license-BSD--3-blue" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://docs.netbird.io/slack-url"&gt; &lt;img src="https://img.shields.io/badge/slack-@netbird-red.svg?logo=slack" /&gt; &lt;/a&gt; &lt;a href="https://forum.netbird.io"&gt; &lt;img src="https://img.shields.io/badge/community forum-@netbird-red.svg?logo=discourse" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://gurubase.io/g/netbird"&gt; &lt;img src="https://img.shields.io/badge/Gurubase-Ask%20NetBird%20Guru-006BFF" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;strong&gt; Start using NetBird at &lt;a href="https://netbird.io/pricing"&gt;netbird.io&lt;/a&gt; &lt;br /&gt; See &lt;a href="https://netbird.io/docs/"&gt;Documentation&lt;/a&gt; &lt;br /&gt; Join our &lt;a href="https://docs.netbird.io/slack-url"&gt;Slack channel&lt;/a&gt; or our &lt;a href="https://forum.netbird.io"&gt;Community forum&lt;/a&gt; &lt;br /&gt; &lt;/strong&gt; &lt;br /&gt; &lt;a href="https://registry.terraform.io/providers/netbirdio/netbird/latest"&gt; New: NetBird terraform provider &lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;strong&gt;NetBird combines a configuration-free peer-to-peer private network and a centralized access control system in a single platform, making it easy to create secure private networks for your organization or home.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Connect.&lt;/strong&gt; NetBird creates a WireGuard-based overlay network that automatically connects your machines over an encrypted tunnel, leaving behind the hassle of opening ports, complex firewall rules, VPN gateways, and so forth.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Secure.&lt;/strong&gt; NetBird enables secure remote access by applying granular access policies while allowing you to manage them intuitively from a single place. Works universally on any infrastructure.&lt;/p&gt; 
&lt;h3&gt;Open Source Network Security in a Single Platform&lt;/h3&gt; 
&lt;img width="1188" alt="centralized-network-management 1" src="https://github.com/user-attachments/assets/c28cc8e4-15d2-4d2f-bb97-a6433db39d56" /&gt; 
&lt;h3&gt;NetBird on Lawrence Systems (Video)&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kwrff6h0rEw"&gt;&lt;img src="https://img.youtube.com/vi/Kwrff6h0rEw/0.jpg" alt="Watch the video" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Key features&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Connectivity&lt;/th&gt; 
   &lt;th&gt;Management&lt;/th&gt; 
   &lt;th&gt;Security&lt;/th&gt; 
   &lt;th&gt;Automation&lt;/th&gt; 
   &lt;th&gt;Platforms&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Kernel WireGuard&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://github.com/netbirdio/dashboard"&gt;Admin Web UI&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/installation#running-net-bird-with-sso-login"&gt;SSO &amp;amp; MFA support&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/api"&gt;Public API&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Linux&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Peer-to-peer connections&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Auto peer discovery and configuration&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/manage-network-access"&gt;Access control - groups &amp;amp; rules&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/register-machines-using-setup-keys"&gt;Setup keys for bulk network provisioning&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Mac&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Connection relay fallback&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/selfhosted/identity-providers"&gt;IdP integrations&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/audit-events-logging"&gt;Activity logging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/selfhosted/selfhosted-quickstart"&gt;Self-hosting quickstart script&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Windows&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/routing-traffic-to-private-networks"&gt;Routes to external networks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/manage-dns-in-your-network"&gt;Private DNS&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/manage-posture-checks"&gt;Device posture checks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] IdP groups sync with JWT&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Android&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] NAT traversal with BPF&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/add-users-to-your-network"&gt;Multiuser support&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Peer-to-peer encryption&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] iOS&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://netbird.io/knowledge-hub/the-first-quantum-resistant-mesh-vpn"&gt;Quantum-resistance with Rosenpass&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] OpenWRT&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/enforce-periodic-user-authentication"&gt;Periodic re-authentication&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] &lt;a href="https://docs.netbird.io/how-to/netbird-on-faas"&gt;Serverless&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;
    &lt;ul&gt;
     &lt;li&gt;- [x] Docker&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Quickstart with NetBird Cloud&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download and install NetBird at &lt;a href="https://app.netbird.io/install"&gt;https://app.netbird.io/install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Follow the steps to sign-up with Google, Microsoft, GitHub or your email address.&lt;/li&gt; 
 &lt;li&gt;Check NetBird &lt;a href="https://app.netbird.io/"&gt;admin UI&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Add more machines.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Quickstart with self-hosted NetBird&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This is the quickest way to try self-hosted NetBird. It should take around 5 minutes to get started if you already have a public domain and a VM. Follow the &lt;a href="https://docs.netbird.io/selfhosted/selfhosted-guide#advanced-guide-with-a-custom-identity-provider"&gt;Advanced guide with a custom identity provider&lt;/a&gt; for installations with different IDPs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Infrastructure requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Linux VM with at least &lt;strong&gt;1CPU&lt;/strong&gt; and &lt;strong&gt;2GB&lt;/strong&gt; of memory.&lt;/li&gt; 
 &lt;li&gt;The VM should be publicly accessible on TCP ports &lt;strong&gt;80&lt;/strong&gt; and &lt;strong&gt;443&lt;/strong&gt; and UDP ports: &lt;strong&gt;3478&lt;/strong&gt;, &lt;strong&gt;49152-65535&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Public domain&lt;/strong&gt; name pointing to the VM.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Software requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker installed on the VM with the docker-compose plugin (&lt;a href="https://docs.docker.com/engine/install/"&gt;Docker installation guide&lt;/a&gt;) or docker with docker-compose in version 2 or higher.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://jqlang.github.io/jq/"&gt;jq&lt;/a&gt; installed. In most distributions Usually available in the official repositories and can be installed with &lt;code&gt;sudo apt install jq&lt;/code&gt; or &lt;code&gt;sudo yum install jq&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://curl.se/"&gt;curl&lt;/a&gt; installed. Usually available in the official repositories and can be installed with &lt;code&gt;sudo apt install curl&lt;/code&gt; or &lt;code&gt;sudo yum install curl&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download and run the installation script:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export NETBIRD_DOMAIN=netbird.example.com; curl -fsSL https://github.com/netbirdio/netbird/releases/latest/download/getting-started-with-zitadel.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Once finished, you can manage the resources via &lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;A bit on NetBird internals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Every machine in the network runs &lt;a href="https://raw.githubusercontent.com/netbirdio/netbird/main/client/"&gt;NetBird Agent (or Client)&lt;/a&gt; that manages WireGuard.&lt;/li&gt; 
 &lt;li&gt;Every agent connects to &lt;a href="https://raw.githubusercontent.com/netbirdio/netbird/main/management/"&gt;Management Service&lt;/a&gt; that holds network state, manages peer IPs, and distributes network updates to agents (peers).&lt;/li&gt; 
 &lt;li&gt;NetBird agent uses WebRTC ICE implemented in &lt;a href="https://github.com/pion/ice"&gt;pion/ice library&lt;/a&gt; to discover connection candidates when establishing a peer-to-peer connection between machines.&lt;/li&gt; 
 &lt;li&gt;Connection candidates are discovered with the help of &lt;a href="https://en.wikipedia.org/wiki/STUN"&gt;STUN&lt;/a&gt; servers.&lt;/li&gt; 
 &lt;li&gt;Agents negotiate a connection through &lt;a href="https://raw.githubusercontent.com/netbirdio/netbird/main/signal/"&gt;Signal Service&lt;/a&gt; passing p2p encrypted messages with candidates.&lt;/li&gt; 
 &lt;li&gt;Sometimes the NAT traversal is unsuccessful due to strict NATs (e.g. mobile carrier-grade NAT) and a p2p connection isn't possible. When this occurs the system falls back to a relay server called &lt;a href="https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT"&gt;TURN&lt;/a&gt;, and a secure WireGuard tunnel is established via the TURN server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://github.com/coturn/coturn"&gt;Coturn&lt;/a&gt; is the one that has been successfully used for STUN and TURN in NetBird setups.&lt;/p&gt; 
&lt;p float="left" align="middle"&gt; &lt;img src="https://docs.netbird.io/docs-static/img/architecture/high-level-dia.png" width="700" /&gt; &lt;/p&gt; 
&lt;p&gt;See a complete &lt;a href="https://docs.netbird.io/about-netbird/how-netbird-works#architecture"&gt;architecture overview&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Community projects&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/physk/netbird-installer"&gt;NetBird installer script&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://galaxy.ansible.com/ui/repo/published/dominion_solutions/netbird/"&gt;NetBird ansible collection by Dominion Solutions&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;main&lt;/code&gt; branch may be in an &lt;em&gt;unstable or even broken state&lt;/em&gt; during development. For stable versions, see &lt;a href="https://github.com/netbirdio/netbird/releases"&gt;releases&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Support acknowledgement&lt;/h3&gt; 
&lt;p&gt;In November 2022, NetBird joined the &lt;a href="https://www.forschung-it-sicherheit-kommunikationssysteme.de/foerderung/bekanntmachungen/startup-secure"&gt;StartUpSecure program&lt;/a&gt; sponsored by The Federal Ministry of Education and Research of The Federal Republic of Germany. Together with &lt;a href="https://cispa.de/en"&gt;CISPA Helmholtz Center for Information Security&lt;/a&gt; NetBird brings the security best practices and simplicity to private networking.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/700848/203091324-c6d311a0-22b5-4b05-a288-91cbc6cdcc46.png" alt="CISPA_Logo_BLACK_EN_RZ_RGB (1)" /&gt;&lt;/p&gt; 
&lt;h3&gt;Testimonials&lt;/h3&gt; 
&lt;p&gt;We use open-source technologies like &lt;a href="https://www.wireguard.com/"&gt;WireGuard®&lt;/a&gt;, &lt;a href="https://github.com/pion/ice"&gt;Pion ICE (WebRTC)&lt;/a&gt;, &lt;a href="https://github.com/coturn/coturn"&gt;Coturn&lt;/a&gt;, and &lt;a href="https://rosenpass.eu"&gt;Rosenpass&lt;/a&gt;. We very much appreciate the work these guys are doing and we'd greatly appreciate if you could support them in any way (e.g., by giving a star or a contribution).&lt;/p&gt; 
&lt;h3&gt;Legal&lt;/h3&gt; 
&lt;p&gt;This repository is licensed under BSD-3-Clause license that applies to all parts of the repository except for the directories management/, signal/ and relay/. Those directories are licensed under the GNU Affero General Public License version 3.0 (AGPLv3). See the respective LICENSE files inside each directory.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;WireGuard&lt;/em&gt; and the &lt;em&gt;WireGuard&lt;/em&gt; logo are &lt;a href="https://www.wireguard.com/trademark-policy/"&gt;registered trademarks&lt;/a&gt; of Jason A. Donenfeld.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>anchore/syft</title>
      <link>https://github.com/anchore/syft</link>
      <description>&lt;p&gt;CLI tool and library for generating a Software Bill of Materials from container images and filesystems&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://user-images.githubusercontent.com/5199289/136844524-1527b09f-c5cb-4aa9-be54-5aa92a6086c1.png" width="271" alt="Cute pink owl syft logo" /&gt; &lt;/p&gt; 
&lt;h1&gt;Syft&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;A CLI tool and Go library for generating a Software Bill of Materials (SBOM) from container images and filesystems. Exceptional for vulnerability detection when used with a scanner like &lt;a href="https://github.com/anchore/grype"&gt;Grype&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &amp;nbsp;&lt;a href="https://github.com/anchore/syft/actions/workflows/validations.yaml" target="_blank"&gt;&lt;img alt="Validations" src="https://github.com/anchore/syft/actions/workflows/validations.yaml/badge.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://goreportcard.com/report/github.com/anchore/syft" target="_blank"&gt;&lt;img alt="Go Report Card" src="https://goreportcard.com/badge/github.com/anchore/syft" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://github.com/anchore/syft/releases/latest" target="_blank"&gt;&lt;img alt="GitHub release" src="https://img.shields.io/github/release/anchore/syft.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://github.com/anchore/syft" target="_blank"&gt;&lt;img alt="GitHub go.mod Go version" src="https://img.shields.io/github/go-mod/go-version/anchore/syft.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="" target="_blank"&gt;&lt;img alt="License: Apache-2.0" src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://anchore.com/discourse" target="_blank"&gt;&lt;img alt="Join our Discourse" src="https://img.shields.io/badge/Discourse-Join-blue?logo=discourse" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a rel="me" href="https://fosstodon.org/@syft"&gt;&lt;img alt="Follow on Mastodon" src="https://img.shields.io/badge/Mastodon-Follow-blue?logoColor=white&amp;amp;logo=mastodon" /&gt;&lt;/a&gt;&amp;nbsp; &lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/590471/90277200-2a253000-de33-11ea-893f-32c219eea11a.gif" alt="syft-demo" /&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Syft is a powerful and easy-to-use open-source tool for generating Software Bill of Materials (SBOMs) for container images and filesystems. It provides detailed visibility into the packages and dependencies in your software, helping you manage vulnerabilities, license compliance, and software supply chain security.&lt;/p&gt; 
&lt;p&gt;Syft development is sponsored by &lt;a href="https://anchore.com/"&gt;Anchore&lt;/a&gt;, and is released under the &lt;a href="https://github.com/anchore/syft?tab=Apache-2.0-1-ov-file"&gt;Apache-2.0 License&lt;/a&gt;. For commercial support options with Syft or Grype, please &lt;a href="https://get.anchore.com/contact/"&gt;contact Anchore&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generates SBOMs for container images, filesystems, archives, and more to discover packages and libraries&lt;/li&gt; 
 &lt;li&gt;Supports OCI, Docker and &lt;a href="https://github.com/sylabs/singularity"&gt;Singularity&lt;/a&gt; image formats&lt;/li&gt; 
 &lt;li&gt;Linux distribution identification&lt;/li&gt; 
 &lt;li&gt;Works seamlessly with &lt;a href="https://github.com/anchore/grype"&gt;Grype&lt;/a&gt; (a fast, modern vulnerability scanner)&lt;/li&gt; 
 &lt;li&gt;Able to create signed SBOM attestations using the &lt;a href="https://github.com/in-toto/attestation/raw/main/spec/README.md"&gt;in-toto specification&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Convert between SBOM formats, such as CycloneDX, SPDX, and Syft's own format.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Syft binaries are provided for Linux, macOS and Windows.&lt;/p&gt; 
&lt;h3&gt;Recommended&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://get.anchore.io/syft | sudo sh -s -- -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Install script options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-b&lt;/code&gt;: Specify a custom installation directory (defaults to &lt;code&gt;./bin&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: More verbose logging levels (&lt;code&gt;-d&lt;/code&gt; for debug, &lt;code&gt;-dd&lt;/code&gt; for trace)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: Verify the signature of the downloaded artifact before installation (requires &lt;a href="https://github.com/sigstore/cosign"&gt;&lt;code&gt;cosign&lt;/code&gt;&lt;/a&gt; to be installed)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew install syft
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scoop&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;scoop install syft
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chocolatey&lt;/h3&gt; 
&lt;p&gt;The chocolatey distribution of Syft is community-maintained and not distributed by the Anchore team&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;choco install syft -y
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Nix&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Nix packaging of Syft is &lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/sy/syft/package.nix"&gt;community maintained&lt;/a&gt;. Syft is available in the &lt;a href="https://wiki.nixos.org/wiki/Nix_channels#The_official_channels"&gt;stable channel&lt;/a&gt; since NixOS &lt;code&gt;22.05&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-env -i syft
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;... or, just try it out in an ephemeral nix shell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-shell -p syft
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;h3&gt;SBOM&lt;/h3&gt; 
&lt;p&gt;To generate an SBOM for a container image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;syft &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above output includes only software that is visible in the container (i.e., the squashed representation of the image). To include software from all image layers in the SBOM, regardless of its presence in the final image, provide &lt;code&gt;--scope all-layers&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;syft &amp;lt;image&amp;gt; --scope all-layers
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Output formats&lt;/h3&gt; 
&lt;p&gt;The output format for Syft is configurable as well using the &lt;code&gt;-o&lt;/code&gt; (or &lt;code&gt;--output&lt;/code&gt;) option:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;syft &amp;lt;image&amp;gt; -o &amp;lt;format&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where the &lt;code&gt;formats&lt;/code&gt; available are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;syft-json&lt;/code&gt;: Use this to get as much information out of Syft as possible!&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;syft-text&lt;/code&gt;: A row-oriented, human-and-machine-friendly output.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cyclonedx-xml&lt;/code&gt;: A XML report conforming to the &lt;a href="https://cyclonedx.org/specification/overview/"&gt;CycloneDX 1.6 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cyclonedx-xml@1.5&lt;/code&gt;: A XML report conforming to the &lt;a href="https://cyclonedx.org/specification/overview/"&gt;CycloneDX 1.5 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cyclonedx-json&lt;/code&gt;: A JSON report conforming to the &lt;a href="https://cyclonedx.org/specification/overview/"&gt;CycloneDX 1.6 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cyclonedx-json@1.5&lt;/code&gt;: A JSON report conforming to the &lt;a href="https://cyclonedx.org/specification/overview/"&gt;CycloneDX 1.5 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;spdx-tag-value&lt;/code&gt;: A tag-value formatted report conforming to the &lt;a href="https://spdx.github.io/spdx-spec/v2.3/"&gt;SPDX 2.3 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;spdx-tag-value@2.2&lt;/code&gt;: A tag-value formatted report conforming to the &lt;a href="https://spdx.github.io/spdx-spec/v2.2.2/"&gt;SPDX 2.2 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;spdx-json&lt;/code&gt;: A JSON report conforming to the &lt;a href="https://github.com/spdx/spdx-spec/raw/v2.3/schemas/spdx-schema.json"&gt;SPDX 2.3 JSON Schema&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;spdx-json@2.2&lt;/code&gt;: A JSON report conforming to the &lt;a href="https://github.com/spdx/spdx-spec/raw/v2.2/schemas/spdx-schema.json"&gt;SPDX 2.2 JSON Schema&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;github-json&lt;/code&gt;: A JSON report conforming to GitHub's dependency snapshot format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;syft-table&lt;/code&gt;: A columnar summary (default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;template&lt;/code&gt;: Lets the user specify the output format. See &lt;a href="https://raw.githubusercontent.com/anchore/syft/main/#using-templates"&gt;"Using templates"&lt;/a&gt; below.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that flags using the @
 &lt;version&gt;
   can be used for earlier versions of each specification as well.
 &lt;/version&gt;&lt;/p&gt; 
&lt;h3&gt;Supported Ecosystems&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Alpine (apk)&lt;/li&gt; 
 &lt;li&gt;Bitnami packages&lt;/li&gt; 
 &lt;li&gt;C (conan)&lt;/li&gt; 
 &lt;li&gt;C++ (conan)&lt;/li&gt; 
 &lt;li&gt;Dart (pubs)&lt;/li&gt; 
 &lt;li&gt;Debian (dpkg)&lt;/li&gt; 
 &lt;li&gt;Dotnet (deps.json)&lt;/li&gt; 
 &lt;li&gt;Objective-C (cocoapods)&lt;/li&gt; 
 &lt;li&gt;Elixir (mix)&lt;/li&gt; 
 &lt;li&gt;Erlang (rebar3)&lt;/li&gt; 
 &lt;li&gt;Go (go.mod, Go binaries)&lt;/li&gt; 
 &lt;li&gt;Haskell (cabal, stack)&lt;/li&gt; 
 &lt;li&gt;Java (jar, ear, war, par, sar, nar, native-image)&lt;/li&gt; 
 &lt;li&gt;JavaScript (npm, yarn)&lt;/li&gt; 
 &lt;li&gt;Jenkins Plugins (jpi, hpi)&lt;/li&gt; 
 &lt;li&gt;Linux kernel archives (vmlinz)&lt;/li&gt; 
 &lt;li&gt;Linux kernel modules (ko)&lt;/li&gt; 
 &lt;li&gt;Nix (outputs in /nix/store)&lt;/li&gt; 
 &lt;li&gt;PHP (composer, PECL, Pear)&lt;/li&gt; 
 &lt;li&gt;Python (wheel, egg, poetry, requirements.txt, uv)&lt;/li&gt; 
 &lt;li&gt;Red Hat (rpm)&lt;/li&gt; 
 &lt;li&gt;Ruby (gem)&lt;/li&gt; 
 &lt;li&gt;Rust (cargo.lock, auditable binary)&lt;/li&gt; 
 &lt;li&gt;Swift (cocoapods, swift-package-manager)&lt;/li&gt; 
 &lt;li&gt;Wordpress plugins&lt;/li&gt; 
 &lt;li&gt;Terraform providers (.terraform.lock.hcl)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/anchore/syft/wiki"&gt;wiki&lt;/a&gt; contains further details on the following topics:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/supported-sources"&gt;Supported Sources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/file-selection"&gt;File Selection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/excluding-file-paths"&gt;Excluding file paths&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/output-formats"&gt;Output formats&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/package-cataloger-selection"&gt;Package Cataloger Selection&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/package-cataloger-selection#concepts"&gt;Concepts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/package-cataloger-selection#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/using-templates"&gt;Using templates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/multiple-outputs"&gt;Multiple outputs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/private-registry-authentication"&gt;Private Registry Authentication&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/private-registry-authentication#local-docker"&gt;Local Docker Credentials&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/private-registry-authentication#docker-credentials-in-kubernetes"&gt;Docker Credentials in Kubernetes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/attestation"&gt;Attestation (experimental)&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/attestation#keyless-support"&gt;Keyless Support&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/attestation#local-private-key-support"&gt;Local private key support&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/attestation#adding-an-sbom-to-an-image-as-an-attestation-using-syft"&gt;Adding an SBOM to an image as an attestation using Syft&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anchore/syft/wiki/configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href="https://raw.githubusercontent.com/anchore/syft/main/CONTRIBUTING.md"&gt;contributing&lt;/a&gt; guide and &lt;a href="https://raw.githubusercontent.com/anchore/syft/main/DEVELOPING.md"&gt;developer&lt;/a&gt; docs.&lt;/p&gt; 
&lt;h2&gt;Syft Team Meetings&lt;/h2&gt; 
&lt;p&gt;The Syft Team hold regular community meetings online. All are welcome to join to bring topics for discussion.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check the &lt;a href="https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t"&gt;calendar&lt;/a&gt; for the next meeting date.&lt;/li&gt; 
 &lt;li&gt;Add items to the &lt;a href="https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing"&gt;agenda&lt;/a&gt; (join &lt;a href="https://groups.google.com/g/anchore-oss-community"&gt;this group&lt;/a&gt; for write access to the &lt;a href="https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing"&gt;agenda&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;See you there!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Syft Logo&lt;/h2&gt; 
&lt;p xmlns:cc="http://creativecommons.org/ns#" xmlns:dct="http://purl.org/dc/terms/"&gt;&lt;a property="dct:title" rel="cc:attributionURL" href="https://anchore.com/wp-content/uploads/2024/11/syft-logo.svg"&gt;Syft Logo&lt;/a&gt; by &lt;a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://anchore.com/"&gt;Anchore&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="license noopener noreferrer" style="display:inline-block;"&gt;CC BY 4.0&lt;img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?sanitize=true" alt="" /&gt;&lt;img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?sanitize=true" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>containers/kubernetes-mcp-server</title>
      <link>https://github.com/containers/kubernetes-mcp-server</link>
      <description>&lt;p&gt;Model Context Protocol (MCP) server for Kubernetes and OpenShift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubernetes MCP Server&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/containers/kubernetes-mcp-server/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/containers/kubernetes-mcp-server" alt="GitHub License" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/kubernetes-mcp-server"&gt;&lt;img src="https://img.shields.io/npm/v/kubernetes-mcp-server" alt="npm" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/kubernetes-mcp-server/"&gt;&lt;img src="https://img.shields.io/pypi/v/kubernetes-mcp-server" alt="PyPI - Version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/containers/kubernetes-mcp-server/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/containers/kubernetes-mcp-server?sort=semver" alt="GitHub release (latest SemVer)" /&gt;&lt;/a&gt; &lt;a href="https://github.com/containers/kubernetes-mcp-server/actions/workflows/build.yaml"&gt;&lt;img src="https://github.com/containers/kubernetes-mcp-server/actions/workflows/build.yaml/badge.svg?sanitize=true" alt="Build" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/#features"&gt;✨ Features&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/#getting-started"&gt;🚀 Getting Started&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/#demos"&gt;🎥 Demos&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/#configuration"&gt;⚙️ Configuration&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/#tools"&gt;🛠️ Tools&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/#development"&gt;🧑‍💻 Development&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/be2b67b3-fc1c-4d11-ae46-93deba8ed98e"&gt;https://github.com/user-attachments/assets/be2b67b3-fc1c-4d11-ae46-93deba8ed98e&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;✨ Features &lt;a id="features"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;A powerful and flexible Kubernetes &lt;a href="https://blog.marcnuri.com/model-context-protocol-mcp-introduction"&gt;Model Context Protocol (MCP)&lt;/a&gt; server implementation with support for &lt;strong&gt;Kubernetes&lt;/strong&gt; and &lt;strong&gt;OpenShift&lt;/strong&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Configuration&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Automatically detect changes in the Kubernetes configuration and update the MCP server.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; and manage the current &lt;a href="https://blog.marcnuri.com/where-is-my-default-kubeconfig-file"&gt;Kubernetes &lt;code&gt;.kube/config&lt;/code&gt;&lt;/a&gt; or in-cluster configuration.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Generic Kubernetes Resources&lt;/strong&gt;: Perform operations on &lt;strong&gt;any&lt;/strong&gt; Kubernetes or OpenShift resource. 
  &lt;ul&gt; 
   &lt;li&gt;Any CRUD operation (Create or Update, Get, List, Delete).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Pods&lt;/strong&gt;: Perform Pod-specific operations. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;List&lt;/strong&gt; pods in all namespaces or in a specific namespace.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Get&lt;/strong&gt; a pod by name from the specified namespace.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Delete&lt;/strong&gt; a pod by name from the specified namespace.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Show logs&lt;/strong&gt; for a pod by name from the specified namespace.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Top&lt;/strong&gt; gets resource usage metrics for all pods or a specific pod in the specified namespace.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Exec&lt;/strong&gt; into a pod and run a command.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Run&lt;/strong&gt; a container image in a pod and optionally expose it.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Namespaces&lt;/strong&gt;: List Kubernetes Namespaces.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Events&lt;/strong&gt;: View Kubernetes events in all namespaces or in a specific namespace.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Projects&lt;/strong&gt;: List OpenShift Projects.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;☸️ Helm&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Install&lt;/strong&gt; a Helm chart in the current or provided namespace.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;List&lt;/strong&gt; Helm releases in all namespaces or in a specific namespace.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Uninstall&lt;/strong&gt; a Helm release in the current or provided namespace.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Unlike other Kubernetes MCP server implementations, this &lt;strong&gt;IS NOT&lt;/strong&gt; just a wrapper around &lt;code&gt;kubectl&lt;/code&gt; or &lt;code&gt;helm&lt;/code&gt; command-line tools. It is a &lt;strong&gt;Go-based native implementation&lt;/strong&gt; that interacts directly with the Kubernetes API server.&lt;/p&gt; 
&lt;p&gt;There is &lt;strong&gt;NO NEED&lt;/strong&gt; for external dependencies or tools to be installed on the system. If you're using the native binaries you don't need to have Node or Python installed on your system.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Lightweight&lt;/strong&gt;: The server is distributed as a single native binary for Linux, macOS, and Windows.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ High-Performance / Low-Latency&lt;/strong&gt;: Directly interacts with the Kubernetes API server without the overhead of calling and waiting for external commands.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Cross-Platform&lt;/strong&gt;: Available as a native binary for Linux, macOS, and Windows, as well as an npm package, a Python package, and container/Docker image.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Configurable&lt;/strong&gt;: Supports &lt;a href="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/#configuration"&gt;command-line arguments&lt;/a&gt; to configure the server behavior.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;✅ Well tested&lt;/strong&gt;: The server has an extensive test suite to ensure its reliability and correctness across different Kubernetes environments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Getting Started &lt;a id="getting-started"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Access to a Kubernetes cluster.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Claude Desktop&lt;/h3&gt; 
&lt;h4&gt;Using npx&lt;/h4&gt; 
&lt;p&gt;If you have npm installed, this is the fastest way to get started with &lt;code&gt;kubernetes-mcp-server&lt;/code&gt; on Claude Desktop.&lt;/p&gt; 
&lt;p&gt;Open your &lt;code&gt;claude_desktop_config.json&lt;/code&gt; and add the mcp server to the list of &lt;code&gt;mcpServers&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "kubernetes": {
      "command": "npx",
      "args": [
        "-y",
        "kubernetes-mcp-server@latest"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;VS Code / VS Code Insiders&lt;/h3&gt; 
&lt;p&gt;Install the Kubernetes MCP server extension in VS Code Insiders by pressing the following link:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522kubernetes%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522kubernetes-mcp-server%2540latest%2522%255D%257D"&gt;&lt;img src="https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&amp;amp;label=Install%20Server&amp;amp;color=0098FF" alt="Install in VS Code" /&gt;&lt;/a&gt; &lt;a href="https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522kubernetes%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522kubernetes-mcp-server%2540latest%2522%255D%257D"&gt;&lt;img alt="Install in VS Code Insiders" src="https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&amp;amp;label=Install%20Server&amp;amp;color=24bfa5" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Alternatively, you can install the extension manually by running the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# For VS Code
code --add-mcp '{"name":"kubernetes","command":"npx","args":["kubernetes-mcp-server@latest"]}'
# For VS Code Insiders
code-insiders --add-mcp '{"name":"kubernetes","command":"npx","args":["kubernetes-mcp-server@latest"]}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cursor&lt;/h3&gt; 
&lt;p&gt;Install the Kubernetes MCP server extension in Cursor by pressing the following link:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://cursor.com/install-mcp?name=kubernetes-mcp-server&amp;amp;config=JTdCJTIyY29tbWFuZCUyMiUzQSUyMm5weCUyMC15JTIwa3ViZXJuZXRlcy1tY3Atc2VydmVyJTQwbGF0ZXN0JTIyJTdE"&gt;&lt;img src="https://cursor.com/deeplink/mcp-install-dark.svg?sanitize=true" alt="Install MCP Server" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Alternatively, you can install the extension manually by editing the &lt;code&gt;mcp.json&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "kubernetes-mcp-server": {
      "command": "npx",
      "args": ["-y", "kubernetes-mcp-server@latest"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Goose CLI&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://blog.marcnuri.com/goose-on-machine-ai-agent-cli-introduction"&gt;Goose CLI&lt;/a&gt; is the easiest (and cheapest) way to get rolling with artificial intelligence (AI) agents.&lt;/p&gt; 
&lt;h4&gt;Using npm&lt;/h4&gt; 
&lt;p&gt;If you have npm installed, this is the fastest way to get started with &lt;code&gt;kubernetes-mcp-server&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Open your goose &lt;code&gt;config.yaml&lt;/code&gt; and add the mcp server to the list of &lt;code&gt;mcpServers&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;extensions:
  kubernetes:
    command: npx
    args:
      - -y
      - kubernetes-mcp-server@latest

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🎥 Demos &lt;a id="demos"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Diagnosing and automatically fixing an OpenShift Deployment&lt;/h3&gt; 
&lt;p&gt;Demo showcasing how Kubernetes MCP server is leveraged by Claude Desktop to automatically diagnose and fix a deployment in OpenShift without any user assistance.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/a576176d-a142-4c19-b9aa-a83dc4b8d941"&gt;https://github.com/user-attachments/assets/a576176d-a142-4c19-b9aa-a83dc4b8d941&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;em&gt;Vibe Coding&lt;/em&gt; a simple game and deploying it to OpenShift&lt;/h3&gt; 
&lt;p&gt;In this demo, I walk you through the process of &lt;em&gt;Vibe Coding&lt;/em&gt; a simple game using VS Code and how to leverage &lt;a href="https://github.com/manusa/podman-mcp-server"&gt;Podman MCP server&lt;/a&gt; and Kubernetes MCP server to deploy it to OpenShift.&lt;/p&gt; 
&lt;a href="https://www.youtube.com/watch?v=l05jQDSrzVI" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/docs/images/vibe-coding.jpg" alt="Vibe Coding: Build &amp;amp; Deploy a Game on Kubernetes" width="240" /&gt; &lt;/a&gt; 
&lt;h3&gt;Supercharge GitHub Copilot with Kubernetes MCP Server in VS Code - One-Click Setup!&lt;/h3&gt; 
&lt;p&gt;In this demo, I'll show you how to set up Kubernetes MCP server in VS code just by clicking a link.&lt;/p&gt; 
&lt;a href="https://youtu.be/AI4ljYMkgtA" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/containers/kubernetes-mcp-server/main/docs/images/kubernetes-mcp-server-github-copilot.jpg" alt="Supercharge GitHub Copilot with Kubernetes MCP Server in VS Code - One-Click Setup!" width="240" /&gt; &lt;/a&gt; 
&lt;h2&gt;⚙️ Configuration &lt;a id="configuration"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;The Kubernetes MCP server can be configured using command line (CLI) arguments.&lt;/p&gt; 
&lt;p&gt;You can run the CLI executable either by using &lt;code&gt;npx&lt;/code&gt;, &lt;code&gt;uvx&lt;/code&gt;, or by downloading the &lt;a href="https://github.com/containers/kubernetes-mcp-server/releases/latest"&gt;latest release binary&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Run the Kubernetes MCP server using npx (in case you have npm and node installed)
npx kubernetes-mcp-server@latest --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Run the Kubernetes MCP server using uvx (in case you have uv and python installed)
uvx kubernetes-mcp-server@latest --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Run the Kubernetes MCP server using the latest release binary
./kubernetes-mcp-server --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration Options&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--port&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Starts the MCP server in Streamable HTTP mode (path /mcp) and Server-Sent Event (SSE) (path /sse) mode and listens on the specified port .&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--log-level&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the logging level (values &lt;a href="https://github.com/kubernetes/community/raw/master/contributors/devel/sig-instrumentation/logging.md"&gt;from 0-9&lt;/a&gt;). Similar to &lt;a href="https://kubernetes.io/docs/reference/kubectl/quick-reference/#kubectl-output-verbosity-and-debugging"&gt;kubectl logging levels&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--kubeconfig&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to the Kubernetes configuration file. If not provided, it will try to resolve the configuration (in-cluster, default location, etc.).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--list-output&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Output format for resource list operations (one of: yaml, table) (default "table")&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--read-only&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;If set, the MCP server will run in read-only mode, meaning it will not allow any write operations (create, update, delete) on the Kubernetes cluster. This is useful for debugging or inspecting the cluster without making changes.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;--disable-destructive&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;If set, the MCP server will disable all destructive operations (delete, update, etc.) on the Kubernetes cluster. This is useful for debugging or inspecting the cluster without accidentally making changes. This option has no effect when &lt;code&gt;--read-only&lt;/code&gt; is used.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;🛠️ Tools &lt;a id="tools"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;configuration_view&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Get the current Kubernetes configuration content as a kubeconfig YAML&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;minified&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;, optional, default: &lt;code&gt;true&lt;/code&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Return a minified version of the configuration&lt;/li&gt; 
   &lt;li&gt;If &lt;code&gt;true&lt;/code&gt;, keeps only the current-context and relevant configuration pieces&lt;/li&gt; 
   &lt;li&gt;If &lt;code&gt;false&lt;/code&gt;, returns all contexts, clusters, auth-infos, and users&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;events_list&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;List all the Kubernetes events in the current cluster from all namespaces&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to retrieve the events from. If not provided, will list events from all namespaces&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;helm_install&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Install a Helm chart in the current or provided namespace with the provided name and chart&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;chart&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Helm chart to install&lt;/li&gt; 
   &lt;li&gt;Can be a local path or a remote URL&lt;/li&gt; 
   &lt;li&gt;Example: &lt;code&gt;./my-chart.tgz&lt;/code&gt; or &lt;code&gt;https://example.com/my-chart.tgz&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;values&lt;/code&gt; (&lt;code&gt;object&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Values to pass to the Helm chart&lt;/li&gt; 
   &lt;li&gt;Example: &lt;code&gt;{"key": "value"}&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Helm release&lt;/li&gt; 
   &lt;li&gt;Random name if not provided&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to install the Helm chart in&lt;/li&gt; 
   &lt;li&gt;If not provided, will use the configured namespace&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;helm_list&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;List all the Helm releases in the current or provided namespace (or in all namespaces if specified)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to list the Helm releases from&lt;/li&gt; 
   &lt;li&gt;If not provided, will use the configured namespace&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all_namespaces&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;If &lt;code&gt;true&lt;/code&gt;, will list Helm releases from all namespaces&lt;/li&gt; 
   &lt;li&gt;If &lt;code&gt;false&lt;/code&gt;, will list Helm releases from the specified namespace&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;helm_uninstall&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Uninstall a Helm release in the current or provided namespace with the provided name&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Helm release to uninstall&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to uninstall the Helm release from&lt;/li&gt; 
   &lt;li&gt;If not provided, will use the configured namespace&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;namespaces_list&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;List all the Kubernetes namespaces in the current cluster&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; None&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;pods_delete&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Delete a Kubernetes Pod in the current or provided namespace with the provided name&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Pod to delete&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to delete the Pod from&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;pods_exec&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Execute a command in a Kubernetes Pod in the current or provided namespace with the provided name and command&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;command&lt;/code&gt; (&lt;code&gt;string[]&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Command to execute in the Pod container&lt;/li&gt; 
   &lt;li&gt;First item is the command, rest are arguments&lt;/li&gt; 
   &lt;li&gt;Example: &lt;code&gt;["ls", "-l", "/tmp"]&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (string, required) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Pod&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (string, required) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace of the Pod&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;container&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Pod container to get logs from&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;pods_get&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Get a Kubernetes Pod in the current or provided namespace with the provided name&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Pod&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to get the Pod from&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;pods_list&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;List all the Kubernetes pods in the current cluster from all namespaces&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;labelSelector&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Kubernetes label selector (e.g., 'app=myapp,env=prod' or 'app in (myapp,yourapp)'). Use this option to filter the pods by label&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;pods_list_in_namespace&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;List all the Kubernetes pods in the specified namespace in the current cluster&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to list pods from&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;labelSelector&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Kubernetes label selector (e.g., 'app=myapp,env=prod' or 'app in (myapp,yourapp)'). Use this option to filter the pods by label&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;pods_log&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Get the logs of a Kubernetes Pod in the current or provided namespace with the provided name&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Pod to get logs from&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to get the Pod logs from&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;container&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Pod container to get logs from&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;pods_run&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Run a Kubernetes Pod in the current or provided namespace with the provided container image and optional name&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;image&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Container Image to run in the Pod&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to run the Pod in&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Pod (random name if not provided)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;port&lt;/code&gt; (&lt;code&gt;number&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;TCP/IP port to expose from the Pod container&lt;/li&gt; 
   &lt;li&gt;No port exposed if not provided&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;pods_top&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Lists the resource consumption (CPU and memory) as recorded by the Kubernetes Metrics Server for the specified Kubernetes Pods in the all namespaces, the provided namespace, or the current namespace&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;all_namespaces&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;, optional, default: &lt;code&gt;true&lt;/code&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;If &lt;code&gt;true&lt;/code&gt;, lists resource consumption for Pods in all namespaces&lt;/li&gt; 
   &lt;li&gt;If &lt;code&gt;false&lt;/code&gt;, lists resource consumption for Pods in the configured or provided namespace&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to list the Pod resources from&lt;/li&gt; 
   &lt;li&gt;If not provided, will list Pods from the configured namespace (in case all_namespaces is false)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the Pod to get resource consumption from&lt;/li&gt; 
   &lt;li&gt;If not provided, will list resource consumption for all Pods in the applicable namespace(s)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;label_selector&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Kubernetes label selector (e.g. 'app=myapp,env=prod' or 'app in (myapp,yourapp)'), use this option when you want to filter the pods by label (Optional, only applicable when name is not provided)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;projects_list&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;List all the OpenShift projects in the current cluster&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;resources_create_or_update&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Create or update a Kubernetes resource in the current cluster by providing a YAML or JSON representation of the resource&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;resource&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;A JSON or YAML containing a representation of the Kubernetes resource&lt;/li&gt; 
   &lt;li&gt;Should include top-level fields such as apiVersion, kind, metadata, and spec&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Common apiVersion and kind include:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;v1 Pod&lt;/li&gt; 
 &lt;li&gt;v1 Service&lt;/li&gt; 
 &lt;li&gt;v1 Node&lt;/li&gt; 
 &lt;li&gt;apps/v1 Deployment&lt;/li&gt; 
 &lt;li&gt;networking.k8s.io/v1 Ingress&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;resources_delete&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Delete a Kubernetes resource in the current cluster&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;apiVersion&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;apiVersion of the resource (e.g., &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;apps/v1&lt;/code&gt;, &lt;code&gt;networking.k8s.io/v1&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;kind&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;kind of the resource (e.g., &lt;code&gt;Pod&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, &lt;code&gt;Deployment&lt;/code&gt;, &lt;code&gt;Ingress&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the resource&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to delete the namespaced resource from&lt;/li&gt; 
   &lt;li&gt;Ignored for cluster-scoped resources&lt;/li&gt; 
   &lt;li&gt;Uses configured namespace if not provided&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;resources_get&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Get a Kubernetes resource in the current cluster&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;apiVersion&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;apiVersion of the resource (e.g., &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;apps/v1&lt;/code&gt;, &lt;code&gt;networking.k8s.io/v1&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;kind&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;kind of the resource (e.g., &lt;code&gt;Pod&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, &lt;code&gt;Deployment&lt;/code&gt;, &lt;code&gt;Ingress&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;Name of the resource&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to retrieve the namespaced resource from&lt;/li&gt; 
   &lt;li&gt;Ignored for cluster-scoped resources&lt;/li&gt; 
   &lt;li&gt;Uses configured namespace if not provided&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;resources_list&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;List Kubernetes resources and objects in the current cluster&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;apiVersion&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;apiVersion of the resources (e.g., &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;apps/v1&lt;/code&gt;, &lt;code&gt;networking.k8s.io/v1&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;kind&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, required) 
  &lt;ul&gt; 
   &lt;li&gt;kind of the resources (e.g., &lt;code&gt;Pod&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, &lt;code&gt;Deployment&lt;/code&gt;, &lt;code&gt;Ingress&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;namespace&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Namespace to retrieve the namespaced resources from&lt;/li&gt; 
   &lt;li&gt;Ignored for cluster-scoped resources&lt;/li&gt; 
   &lt;li&gt;Lists resources from all namespaces if not provided&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;labelSelector&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) 
  &lt;ul&gt; 
   &lt;li&gt;Kubernetes label selector (e.g., 'app=myapp,env=prod' or 'app in (myapp,yourapp)'). Use this option to filter the pods by label.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🧑‍💻 Development &lt;a id="development"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Running with mcp-inspector&lt;/h3&gt; 
&lt;p&gt;Compile the project and run the Kubernetes MCP server with &lt;a href="https://modelcontextprotocol.io/docs/tools/inspector"&gt;mcp-inspector&lt;/a&gt; to inspect the MCP server.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Compile the project
make build
# Run the Kubernetes MCP server with mcp-inspector
npx @modelcontextprotocol/inspector@latest $(pwd)/kubernetes-mcp-server
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>open-telemetry/opentelemetry-go</title>
      <link>https://github.com/open-telemetry/opentelemetry-go</link>
      <description>&lt;p&gt;OpenTelemetry Go API and SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTelemetry-Go&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/open-telemetry/opentelemetry-go/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/open-telemetry/opentelemetry-go/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt; &lt;a href="https://app.codecov.io/gh/open-telemetry/opentelemetry-go?branch=main"&gt;&lt;img src="https://codecov.io/gh/open-telemetry/opentelemetry-go/coverage.svg?branch=main" alt="codecov.io" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/go.opentelemetry.io/otel"&gt;&lt;img src="https://pkg.go.dev/badge/go.opentelemetry.io/otel" alt="PkgGoDev" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/go.opentelemetry.io/otel"&gt;&lt;img src="https://goreportcard.com/badge/go.opentelemetry.io/otel" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/open-telemetry/opentelemetry-go"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/open-telemetry/opentelemetry-go/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/9996"&gt;&lt;img src="https://www.bestpractices.dev/projects/9996/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://issues.oss-fuzz.com/issues?q=project:opentelemetry-go"&gt;&lt;img src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/opentelemetry-go.svg?sanitize=true" alt="Fuzzing Status" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/custom%2B162%2Fgithub.com%2Fopen-telemetry%2Fopentelemetry-go?ref=badge_shield&amp;amp;issueType=license"&gt;&lt;img src="https://app.fossa.com/api/projects/custom%2B162%2Fgithub.com%2Fopen-telemetry%2Fopentelemetry-go.svg?type=shield&amp;amp;issueType=license" alt="FOSSA Status" /&gt;&lt;/a&gt; &lt;a href="https://cloud-native.slack.com/archives/C01NPAXACKT"&gt;&lt;img src="https://img.shields.io/badge/slack-@cncf/otel--go-brightgreen.svg?logo=slack" alt="Slack" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenTelemetry-Go is the &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt; implementation of &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;. It provides a set of APIs to directly measure performance and behavior of your software and send this data to observability platforms.&lt;/p&gt; 
&lt;h2&gt;Project Status&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Signal&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Traces&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Metrics&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Logs&lt;/td&gt; 
   &lt;td&gt;Beta&lt;a href="https://github.com/orgs/open-telemetry/projects/43"&gt;^1&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Progress and status specific to this repository is tracked in our &lt;a href="https://github.com/open-telemetry/opentelemetry-go/projects"&gt;project boards&lt;/a&gt; and &lt;a href="https://github.com/open-telemetry/opentelemetry-go/milestones"&gt;milestones&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Project versioning information and stability guarantees can be found in the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/VERSIONING.md"&gt;versioning documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Compatibility&lt;/h3&gt; 
&lt;p&gt;OpenTelemetry-Go ensures compatibility with the current supported versions of the &lt;a href="https://golang.org/doc/devel/release#policy"&gt;Go language&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Each major Go release is supported until there are two newer major releases. For example, Go 1.5 was supported until the Go 1.7 release, and Go 1.6 was supported until the Go 1.8 release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For versions of Go that are no longer supported upstream, opentelemetry-go will stop ensuring compatibility with these versions in the following manner:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A minor release of opentelemetry-go will be made to add support for the new supported release of Go.&lt;/li&gt; 
 &lt;li&gt;The following minor release of opentelemetry-go will remove compatibility testing for the oldest (now archived upstream) version of Go. This, and future, releases of opentelemetry-go may include features only supported by the currently supported versions of Go.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Currently, this project supports the following environments.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;OS&lt;/th&gt; 
   &lt;th&gt;Go Version&lt;/th&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 13&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 13&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;While this project should work for other systems, no compatibility guarantees are made for those systems currently.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a getting started guide on &lt;a href="https://opentelemetry.io/docs/languages/go/getting-started/"&gt;opentelemetry.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;OpenTelemetry's goal is to provide a single set of APIs to capture distributed traces and metrics from your application and send them to an observability platform. This project allows you to do just that for applications written in Go. There are two steps to this process: instrument your application, and configure an exporter.&lt;/p&gt; 
&lt;h3&gt;Instrumentation&lt;/h3&gt; 
&lt;p&gt;To start capturing distributed traces and metric events from your application it first needs to be instrumented. The easiest way to do this is by using an instrumentation library for your code. Be sure to check out &lt;a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation"&gt;the officially supported instrumentation libraries&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you need to extend the telemetry an instrumentation library provides or want to build your own instrumentation for your application directly you will need to use the &lt;a href="https://pkg.go.dev/go.opentelemetry.io/otel"&gt;Go otel&lt;/a&gt; package. The &lt;a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/examples"&gt;examples&lt;/a&gt; are a good way to see some practical uses of this process.&lt;/p&gt; 
&lt;h3&gt;Export&lt;/h3&gt; 
&lt;p&gt;Now that your application is instrumented to collect telemetry, it needs an export pipeline to send that telemetry to an observability platform.&lt;/p&gt; 
&lt;p&gt;All officially supported exporters for the OpenTelemetry project are contained in the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters"&gt;exporters directory&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Exporter&lt;/th&gt; 
   &lt;th align="center"&gt;Logs&lt;/th&gt; 
   &lt;th align="center"&gt;Metrics&lt;/th&gt; 
   &lt;th align="center"&gt;Traces&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/otlp/"&gt;OTLP&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/prometheus/"&gt;Prometheus&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/stdout/"&gt;stdout&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/zipkin/"&gt;Zipkin&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/CONTRIBUTING.md"&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes-sigs/controller-runtime</title>
      <link>https://github.com/kubernetes-sigs/controller-runtime</link>
      <description>&lt;p&gt;Repo for the controller-runtime subproject of kubebuilder (sig-apimachinery)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://goreportcard.com/report/sigs.k8s.io/controller-runtime"&gt;&lt;img src="https://goreportcard.com/badge/sigs.k8s.io/controller-runtime" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime"&gt;&lt;img src="https://pkg.go.dev/badge/sigs.k8s.io/controller-runtime" alt="godoc" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Kubernetes controller-runtime Project&lt;/h1&gt; 
&lt;p&gt;The Kubernetes controller-runtime Project is a set of go libraries for building Controllers. It is leveraged by &lt;a href="https://book.kubebuilder.io/"&gt;Kubebuilder&lt;/a&gt; and &lt;a href="https://github.com/operator-framework/operator-sdk"&gt;Operator SDK&lt;/a&gt;. Both are a great place to start for new projects. See &lt;a href="https://book.kubebuilder.io/quick-start.html"&gt;Kubebuilder's Quick Start&lt;/a&gt; to see how it can be used.&lt;/p&gt; 
&lt;p&gt;Documentation:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg"&gt;Package overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/builder#example-Builder"&gt;Basic controller using builder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/manager#example-New"&gt;Creating a manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/controller#example-New"&gt;Creating a controller&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubernetes-sigs/controller-runtime/raw/main/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubernetes-sigs/controller-runtime/raw/main/designs"&gt;Designs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Versioning, Maintenance, and Compatibility&lt;/h1&gt; 
&lt;p&gt;The full documentation can be found at &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/VERSIONING.md"&gt;VERSIONING.md&lt;/a&gt;, but TL;DR:&lt;/p&gt; 
&lt;p&gt;Users:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We stick to a zero major version&lt;/li&gt; 
 &lt;li&gt;We publish a minor version for each Kubernetes minor release and allow breaking changes between minor versions&lt;/li&gt; 
 &lt;li&gt;We publish patch versions as needed and we don't allow breaking changes in them&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Contributors:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All code PR must be labeled with &lt;span&gt;🐛&lt;/span&gt; (patch fixes), &lt;span&gt;✨&lt;/span&gt; (backwards-compatible features), or &lt;span&gt;⚠&lt;/span&gt; (breaking changes)&lt;/li&gt; 
 &lt;li&gt;Breaking changes will find their way into the next major release, other changes will go into an semi-immediate patch or minor release&lt;/li&gt; 
 &lt;li&gt;For a quick PR template suggesting the right information, use one of these PR templates: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/.github/PULL_REQUEST_TEMPLATE/breaking_change.md"&gt;Breaking Changes/Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/.github/PULL_REQUEST_TEMPLATE/compat_feature.md"&gt;Backwards-Compatible Features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/.github/PULL_REQUEST_TEMPLATE/bug_fix.md"&gt;Bug fixes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/.github/PULL_REQUEST_TEMPLATE/docs.md"&gt;Documentation Changes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/.github/PULL_REQUEST_TEMPLATE/other.md"&gt;Test/Build/Other Changes&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;Every minor version of controller-runtime has been tested with a specific minor version of client-go. A controller-runtime minor version &lt;em&gt;may&lt;/em&gt; be compatible with other client-go minor versions, but this is by chance and neither supported nor tested. In general, we create one minor version of controller-runtime for each minor version of client-go and other k8s.io/* dependencies.&lt;/p&gt; 
&lt;p&gt;The minimum Go version of controller-runtime is the highest minimum Go version of our Go dependencies. Usually, this will be identical to the minimum Go version of the corresponding k8s.io/* dependencies.&lt;/p&gt; 
&lt;p&gt;Compatible k8s.io/*, client-go and minimum Go versions can be looked up in our &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/go.mod"&gt;go.mod&lt;/a&gt; file.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;k8s.io/*, client-go&lt;/th&gt; 
   &lt;th align="center"&gt;minimum Go version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CR v0.21&lt;/td&gt; 
   &lt;td align="center"&gt;v0.33&lt;/td&gt; 
   &lt;td align="center"&gt;1.24&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CR v0.20&lt;/td&gt; 
   &lt;td align="center"&gt;v0.32&lt;/td&gt; 
   &lt;td align="center"&gt;1.23&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CR v0.19&lt;/td&gt; 
   &lt;td align="center"&gt;v0.31&lt;/td&gt; 
   &lt;td align="center"&gt;1.22&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CR v0.18&lt;/td&gt; 
   &lt;td align="center"&gt;v0.30&lt;/td&gt; 
   &lt;td align="center"&gt;1.22&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CR v0.17&lt;/td&gt; 
   &lt;td align="center"&gt;v0.29&lt;/td&gt; 
   &lt;td align="center"&gt;1.21&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CR v0.16&lt;/td&gt; 
   &lt;td align="center"&gt;v0.28&lt;/td&gt; 
   &lt;td align="center"&gt;1.20&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CR v0.15&lt;/td&gt; 
   &lt;td align="center"&gt;v0.27&lt;/td&gt; 
   &lt;td align="center"&gt;1.20&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/FAQ.md"&gt;FAQ.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community, discussion, contribution, and support&lt;/h2&gt; 
&lt;p&gt;Learn how to engage with the Kubernetes community on the &lt;a href="http://kubernetes.io/community/"&gt;community page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can reach the maintainers of this project at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Slack channel: &lt;a href="https://kubernetes.slack.com/archives/C02MRBMN00Z"&gt;#controller-runtime&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google Group: &lt;a href="https://groups.google.com/forum/#!forum/kubebuilder"&gt;kubebuilder@googlegroups.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are greatly appreciated. The maintainers actively manage the issues list, and try to highlight issues suitable for newcomers. The project follows the typical GitHub pull request model. See &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more details. Before starting any work, please either comment on an existing issue, or file a new one.&lt;/p&gt; 
&lt;h2&gt;Code of conduct&lt;/h2&gt; 
&lt;p&gt;Participation in the Kubernetes community is governed by the &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/main/code-of-conduct.md"&gt;Kubernetes Code of Conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openai/openai-go</title>
      <link>https://github.com/openai/openai-go</link>
      <description>&lt;p&gt;The official Go library for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Go API Library&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/openai/openai-go/v2"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/openai/openai-go.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The OpenAI Go library provides convenient access to the &lt;a href="https://platform.openai.com/docs"&gt;OpenAI REST API&lt;/a&gt; from applications written in Go.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The latest version of this package has small and limited breaking changes. See the &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/CHANGELOG.md"&gt;changelog&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;!-- x-release-please-start-version --&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"github.com/openai/openai-go/v2" // imported as openai
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- x-release-please-end --&gt; 
&lt;p&gt;Or to pin the version:&lt;/p&gt; 
&lt;!-- x-release-please-start-version --&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get -u 'github.com/openai/openai-go@v2.0.2'
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- x-release-please-end --&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;This library requires Go 1.21+.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The full API of this library can be found in &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/api.md"&gt;api.md&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"

	"github.com/openai/openai-go/v2"
	"github.com/openai/openai-go/v2/option"
	"github.com/openai/openai-go/v2/shared"
)

func main() {
	client := openai.NewClient(
		option.WithAPIKey("My API Key"), // defaults to os.LookupEnv("OPENAI_API_KEY")
	)
	chatCompletion, err := client.Chat.Completions.New(context.TODO(), openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{
			openai.UserMessage("Say this is a test"),
		},
		Model: openai.ChatModelGPT4o,
	})
	if err != nil {
		panic(err.Error())
	}
	println(chatCompletion.Choices[0].Message.Content)
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Conversations&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;param := openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage("What kind of houseplant is easy to take care of?"),
	},
	Seed:     openai.Int(1),
	Model:    openai.ChatModelGPT4o,
}

completion, err := client.Chat.Completions.New(ctx, param)

param.Messages = append(param.Messages, completion.Choices[0].Message.ToParam())
param.Messages = append(param.Messages, openai.UserMessage("How big are those?"))

// continue the conversation
completion, err = client.Chat.Completions.New(ctx, param)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Streaming responses&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;question := "Write an epic"

stream := client.Chat.Completions.NewStreaming(ctx, openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage(question),
	},
	Seed:  openai.Int(0),
	Model: openai.ChatModelGPT4o,
})

// optionally, an accumulator helper can be used
acc := openai.ChatCompletionAccumulator{}

for stream.Next() {
	chunk := stream.Current()
	acc.AddChunk(chunk)

	if content, ok := acc.JustFinishedContent(); ok {
		println("Content stream finished:", content)
	}

	// if using tool calls
	if tool, ok := acc.JustFinishedToolCall(); ok {
		println("Tool call stream finished:", tool.Index, tool.Name, tool.Arguments)
	}

	if refusal, ok := acc.JustFinishedRefusal(); ok {
		println("Refusal stream finished:", refusal)
	}

	// it's best to use chunks after handling JustFinished events
	if len(chunk.Choices) &amp;gt; 0 {
		println(chunk.Choices[0].Delta.Content)
	}
}

if stream.Err() != nil {
	panic(stream.Err())
}

// After the stream is finished, acc can be used like a ChatCompletion
_ = acc.Choices[0].Message.Content
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/examples/chat-completion-accumulating/main.go"&gt;full streaming and accumulation example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tool calling&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;import (
	"encoding/json"
	// ...
)

// ...

question := "What is the weather in New York City?"

params := openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage(question),
	},
	Tools: []openai.ChatCompletionToolParam{
		{
			Function: openai.FunctionDefinitionParam{
				Name:        "get_weather",
				Description: openai.String("Get weather at the given location"),
				Parameters: openai.FunctionParameters{
					"type": "object",
					"properties": map[string]interface{}{
						"location": map[string]string{
							"type": "string",
						},
					},
					"required": []string{"location"},
				},
			},
		},
	},
	Model: openai.ChatModelGPT4o,
}

// If there is a was a function call, continue the conversation
params.Messages = append(params.Messages, completion.Choices[0].Message.ToParam())
for _, toolCall := range toolCalls {
	if toolCall.Function.Name == "get_weather" {
		// Extract the location from the function call arguments
		var args map[string]interface{}
		err := json.Unmarshal([]byte(toolCall.Function.Arguments), &amp;amp;args)
		if err != nil {
			panic(err)
		}
		location := args["location"].(string)

		// Simulate getting weather data
		weatherData := getWeather(location)

		// Print the weather data
		fmt.Printf("Weather in %s: %s\n", location, weatherData)

		params.Messages = append(params.Messages, openai.ToolMessage(weatherData, toolCall.ID))
	}
}

// ... continue the conversation with the information provided by the tool
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/examples/chat-completion-tool-calling/main.go"&gt;full tool calling example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Structured outputs&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;import (
	"encoding/json"
	"github.com/invopop/jsonschema"
	// ...
)

// A struct that will be converted to a Structured Outputs response schema
type HistoricalComputer struct {
	Origin       Origin   `json:"origin" jsonschema_description:"The origin of the computer"`
	Name         string   `json:"full_name" jsonschema_description:"The name of the device model"`
	Legacy       string   `json:"legacy" jsonschema:"enum=positive,enum=neutral,enum=negative" jsonschema_description:"Its influence on the field of computing"`
	NotableFacts []string `json:"notable_facts" jsonschema_description:"A few key facts about the computer"`
}

type Origin struct {
	YearBuilt    int64  `json:"year_of_construction" jsonschema_description:"The year it was made"`
	Organization string `json:"organization" jsonschema_description:"The organization that was in charge of its development"`
}

func GenerateSchema[T any]() interface{} {
	// Structured Outputs uses a subset of JSON schema
	// These flags are necessary to comply with the subset
	reflector := jsonschema.Reflector{
		AllowAdditionalProperties: false,
		DoNotReference:            true,
	}
	var v T
	schema := reflector.Reflect(v)
	return schema
}

// Generate the JSON schema at initialization time
var HistoricalComputerResponseSchema = GenerateSchema[HistoricalComputer]()

func main() {

	// ...

	question := "What computer ran the first neural network?"

	schemaParam := openai.ResponseFormatJSONSchemaJSONSchemaParam{
		Name:        "historical_computer",
		Description: openai.String("Notable information about a computer"),
		Schema:      HistoricalComputerResponseSchema,
		Strict:      openai.Bool(true),
	}

	chat, _ := client.Chat.Completions.New(ctx, openai.ChatCompletionNewParams{
		// ...
		ResponseFormat: openai.ChatCompletionNewParamsResponseFormatUnion{
			OfJSONSchema: &amp;amp;openai.ResponseFormatJSONSchemaParam{
				JSONSchema: schemaParam,
			},
		},
		// only certain models can perform structured outputs
		Model: openai.ChatModelGPT4o2024_08_06,
	})

	// extract into a well-typed struct
	var historicalComputer HistoricalComputer
	_ = json.Unmarshal([]byte(chat.Choices[0].Message.Content), &amp;amp;historicalComputer)

	historicalComputer.Name
	historicalComputer.Origin.YearBuilt
	historicalComputer.Origin.Organization
	for i, fact := range historicalComputer.NotableFacts {
		// ...
	}
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/examples/structured-outputs/main.go"&gt;full structured outputs example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h3&gt;Request fields&lt;/h3&gt; 
&lt;p&gt;The openai library uses the &lt;a href="https://tip.golang.org/doc/go1.24#encodingjsonpkgencodingjson"&gt;&lt;code&gt;omitzero&lt;/code&gt;&lt;/a&gt; semantics from the Go 1.24+ &lt;code&gt;encoding/json&lt;/code&gt; release for request fields.&lt;/p&gt; 
&lt;p&gt;Required primitive fields (&lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc.) feature the tag &lt;code&gt;`json:"...,required"`&lt;/code&gt;. These fields are always serialized, even their zero values.&lt;/p&gt; 
&lt;p&gt;Optional primitive types are wrapped in a &lt;code&gt;param.Opt[T]&lt;/code&gt;. These fields can be set with the provided constructors, &lt;code&gt;openai.String(string)&lt;/code&gt;, &lt;code&gt;openai.Int(int64)&lt;/code&gt;, etc.&lt;/p&gt; 
&lt;p&gt;Any &lt;code&gt;param.Opt[T]&lt;/code&gt;, map, slice, struct or string enum uses the tag &lt;code&gt;`json:"...,omitzero"`&lt;/code&gt;. Its zero value is considered omitted.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;param.IsOmitted(any)&lt;/code&gt; function can confirm the presence of any &lt;code&gt;omitzero&lt;/code&gt; field.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;p := openai.ExampleParams{
	ID:   "id_xxx",             // required property
	Name: openai.String("..."), // optional property

	Point: openai.Point{
		X: 0,             // required field will serialize as 0
		Y: openai.Int(1), // optional field will serialize as 1
		// ... omitted non-required fields will not be serialized
	},

	Origin: openai.Origin{}, // the zero value of [Origin] is considered omitted
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To send &lt;code&gt;null&lt;/code&gt; instead of a &lt;code&gt;param.Opt[T]&lt;/code&gt;, use &lt;code&gt;param.Null[T]()&lt;/code&gt;. To send &lt;code&gt;null&lt;/code&gt; instead of a struct &lt;code&gt;T&lt;/code&gt;, use &lt;code&gt;param.NullStruct[T]()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;p.Name = param.Null[string]()       // 'null' instead of string
p.Point = param.NullStruct[Point]() // 'null' instead of struct

param.IsNull(p.Name)  // true
param.IsNull(p.Point) // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Request structs contain a &lt;code&gt;.SetExtraFields(map[string]any)&lt;/code&gt; method which can send non-conforming fields in the request body. Extra fields overwrite any struct fields with a matching key. For security reasons, only use &lt;code&gt;SetExtraFields&lt;/code&gt; with trusted data.&lt;/p&gt; 
&lt;p&gt;To send a custom value instead of a struct, use &lt;code&gt;param.Override[T](value)&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// In cases where the API specifies a given type,
// but you want to send something else, use [SetExtraFields]:
p.SetExtraFields(map[string]any{
	"x": 0.01, // send "x" as a float instead of int
})

// Send a number instead of an object
custom := param.Override[openai.FooParams](12)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Request unions&lt;/h3&gt; 
&lt;p&gt;Unions are represented as a struct with fields prefixed by "Of" for each of it's variants, only one field can be non-zero. The non-zero field will be serialized.&lt;/p&gt; 
&lt;p&gt;Sub-properties of the union can be accessed via methods on the union struct. These methods return a mutable pointer to the underlying data, if present.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Only one field can be non-zero, use param.IsOmitted() to check if a field is set
type AnimalUnionParam struct {
	OfCat *Cat `json:",omitzero,inline`
	OfDog *Dog `json:",omitzero,inline`
}

animal := AnimalUnionParam{
	OfCat: &amp;amp;Cat{
		Name: "Whiskers",
		Owner: PersonParam{
			Address: AddressParam{Street: "3333 Coyote Hill Rd", Zip: 0},
		},
	},
}

// Mutating a field
if address := animal.GetOwner().GetAddress(); address != nil {
	address.ZipCode = 94304
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Response objects&lt;/h3&gt; 
&lt;p&gt;All fields in response structs are ordinary value types (not pointers or wrappers). Response structs also include a special &lt;code&gt;JSON&lt;/code&gt; field containing metadata about each property.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type Animal struct {
	Name   string `json:"name,nullable"`
	Owners int    `json:"owners"`
	Age    int    `json:"age"`
	JSON   struct {
		Name        respjson.Field
		Owner       respjson.Field
		Age         respjson.Field
		ExtraFields map[string]respjson.Field
	} `json:"-"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To handle optional data, use the &lt;code&gt;.Valid()&lt;/code&gt; method on the JSON field. &lt;code&gt;.Valid()&lt;/code&gt; returns true if a field is not &lt;code&gt;null&lt;/code&gt;, not present, or couldn't be marshaled.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;.Valid()&lt;/code&gt; is false, the corresponding field will simply be its zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;raw := `{"owners": 1, "name": null}`

var res Animal
json.Unmarshal([]byte(raw), &amp;amp;res)

// Accessing regular fields

res.Owners // 1
res.Name   // ""
res.Age    // 0

// Optional field checks

res.JSON.Owners.Valid() // true
res.JSON.Name.Valid()   // false
res.JSON.Age.Valid()    // false

// Raw JSON values

res.JSON.Owners.Raw()                  // "1"
res.JSON.Name.Raw() == "null"          // true
res.JSON.Name.Raw() == respjson.Null   // true
res.JSON.Age.Raw() == ""               // true
res.JSON.Age.Raw() == respjson.Omitted // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These &lt;code&gt;.JSON&lt;/code&gt; structs also include an &lt;code&gt;ExtraFields&lt;/code&gt; map containing any properties in the json response that were not specified in the struct. This can be useful for API features not yet present in the SDK.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;body := res.JSON.ExtraFields["my_unexpected_field"].Raw()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Response Unions&lt;/h3&gt; 
&lt;p&gt;In responses, unions are represented by a flattened struct containing all possible fields from each of the object variants. To convert it to a variant use the &lt;code&gt;.AsFooVariant()&lt;/code&gt; method or the &lt;code&gt;.AsAny()&lt;/code&gt; method if present.&lt;/p&gt; 
&lt;p&gt;If a response value union contains primitive values, primitive fields will be alongside the properties but prefixed with &lt;code&gt;Of&lt;/code&gt; and feature the tag &lt;code&gt;json:"...,inline"&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type AnimalUnion struct {
	// From variants [Dog], [Cat]
	Owner Person `json:"owner"`
	// From variant [Dog]
	DogBreed string `json:"dog_breed"`
	// From variant [Cat]
	CatBreed string `json:"cat_breed"`
	// ...

	JSON struct {
		Owner respjson.Field
		// ...
	} `json:"-"`
}

// If animal variant
if animal.Owner.Address.ZipCode == "" {
	panic("missing zip code")
}

// Switch on the variant
switch variant := animal.AsAny().(type) {
case Dog:
case Cat:
default:
	panic("unexpected type")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RequestOptions&lt;/h3&gt; 
&lt;p&gt;This library uses the functional options pattern. Functions defined in the &lt;code&gt;option&lt;/code&gt; package return a &lt;code&gt;RequestOption&lt;/code&gt;, which is a closure that mutates a &lt;code&gt;RequestConfig&lt;/code&gt;. These options can be supplied to the client or at individual requests. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;client := openai.NewClient(
	// Adds a header to every request made by the client
	option.WithHeader("X-Some-Header", "custom_header_info"),
)

client.Chat.Completions.New(context.TODO(), ...,
	// Override the header
	option.WithHeader("X-Some-Header", "some_other_custom_header_info"),
	// Add an undocumented field to the request body, using sjson syntax
	option.WithJSONSet("some.json.path", map[string]string{"my": "object"}),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The request option &lt;code&gt;option.WithDebugLog(nil)&lt;/code&gt; may be helpful while debugging.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://pkg.go.dev/github.com/openai/openai-go/option"&gt;full list of request options&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Pagination&lt;/h3&gt; 
&lt;p&gt;This library provides some conveniences for working with paginated list endpoints.&lt;/p&gt; 
&lt;p&gt;You can use &lt;code&gt;.ListAutoPaging()&lt;/code&gt; methods to iterate through items across all pages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;iter := client.FineTuning.Jobs.ListAutoPaging(context.TODO(), openai.FineTuningJobListParams{
	Limit: openai.Int(20),
})
// Automatically fetches more pages as needed.
for iter.Next() {
	fineTuningJob := iter.Current()
	fmt.Printf("%+v\n", fineTuningJob)
}
if err := iter.Err(); err != nil {
	panic(err.Error())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use simple &lt;code&gt;.List()&lt;/code&gt; methods to fetch a single page and receive a standard response object with additional helper methods like &lt;code&gt;.GetNextPage()&lt;/code&gt;, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;page, err := client.FineTuning.Jobs.List(context.TODO(), openai.FineTuningJobListParams{
	Limit: openai.Int(20),
})
for page != nil {
	for _, job := range page.Data {
		fmt.Printf("%+v\n", job)
	}
	page, err = page.GetNextPage()
}
if err != nil {
	panic(err.Error())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Errors&lt;/h3&gt; 
&lt;p&gt;When the API returns a non-success status code, we return an error with type &lt;code&gt;*openai.Error&lt;/code&gt;. This contains the &lt;code&gt;StatusCode&lt;/code&gt;, &lt;code&gt;*http.Request&lt;/code&gt;, and &lt;code&gt;*http.Response&lt;/code&gt; values of the request, as well as the JSON of the error body (much like other response objects in the SDK).&lt;/p&gt; 
&lt;p&gt;To handle errors, we recommend that you use the &lt;code&gt;errors.As&lt;/code&gt; pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;_, err := client.FineTuning.Jobs.New(context.TODO(), openai.FineTuningJobNewParams{
	Model:        openai.FineTuningJobNewParamsModelBabbage002,
	TrainingFile: "file-abc123",
})
if err != nil {
	var apierr *openai.Error
	if errors.As(err, &amp;amp;apierr) {
		println(string(apierr.DumpRequest(true)))  // Prints the serialized HTTP request
		println(string(apierr.DumpResponse(true))) // Prints the serialized HTTP response
	}
	panic(err.Error()) // GET "/fine_tuning/jobs": 400 Bad Request { ... }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When other errors occur, they are returned unwrapped; for example, if HTTP transport fails, you might receive &lt;code&gt;*url.Error&lt;/code&gt; wrapping &lt;code&gt;*net.OpError&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Timeouts&lt;/h3&gt; 
&lt;p&gt;Requests do not time out by default; use context to configure a timeout for a request lifecycle.&lt;/p&gt; 
&lt;p&gt;Note that if a request is &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/#retries"&gt;retried&lt;/a&gt;, the context timeout does not start over. To set a per-retry timeout, use &lt;code&gt;option.WithRequestTimeout()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// This sets the timeout for the request, including all the retries.
ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)
defer cancel()
client.Chat.Completions.New(
	ctx,
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String("How can I list all files in a directory using Python?"),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	// This sets the per-retry timeout
	option.WithRequestTimeout(20*time.Second),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;File uploads&lt;/h3&gt; 
&lt;p&gt;Request parameters that correspond to file uploads in multipart requests are typed as &lt;code&gt;io.Reader&lt;/code&gt;. The contents of the &lt;code&gt;io.Reader&lt;/code&gt; will by default be sent as a multipart form part with the file name of "anonymous_file" and content-type of "application/octet-stream".&lt;/p&gt; 
&lt;p&gt;The file name and content-type can be customized by implementing &lt;code&gt;Name() string&lt;/code&gt; or &lt;code&gt;ContentType() string&lt;/code&gt; on the run-time type of &lt;code&gt;io.Reader&lt;/code&gt;. Note that &lt;code&gt;os.File&lt;/code&gt; implements &lt;code&gt;Name() string&lt;/code&gt;, so a file returned by &lt;code&gt;os.Open&lt;/code&gt; will be sent with the file name on disk.&lt;/p&gt; 
&lt;p&gt;We also provide a helper &lt;code&gt;openai.File(reader io.Reader, filename string, contentType string)&lt;/code&gt; which can be used to wrap any &lt;code&gt;io.Reader&lt;/code&gt; with the appropriate file name and content type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// A file from the file system
file, err := os.Open("input.jsonl")
openai.FileNewParams{
	File:    file,
	Purpose: openai.FilePurposeFineTune,
}

// A file from a string
openai.FileNewParams{
	File:    strings.NewReader("my file contents"),
	Purpose: openai.FilePurposeFineTune,
}

// With a custom filename and contentType
openai.FileNewParams{
	File:    openai.File(strings.NewReader(`{"hello": "foo"}`), "file.go", "application/json"),
	Purpose: openai.FilePurposeFineTune,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Webhook Verification&lt;/h2&gt; 
&lt;p&gt;Verifying webhook signatures is &lt;em&gt;optional but encouraged&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;For more information about webhooks, see &lt;a href="https://platform.openai.com/docs/guides/webhooks"&gt;the API docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Parsing webhook payloads&lt;/h3&gt; 
&lt;p&gt;For most use cases, you will likely want to verify the webhook and parse the payload at the same time. To achieve this, we provide the method &lt;code&gt;client.Webhooks.Unwrap()&lt;/code&gt;, which parses a webhook request and verifies that it was sent by OpenAI. This method will return an error if the signature is invalid.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter should be the raw JSON bytes sent from the server (do not parse it first). The &lt;code&gt;Unwrap()&lt;/code&gt; method will parse this JSON for you into an event object after verifying the webhook was sent from OpenAI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"io"
	"log"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/openai/openai-go/v2"
	"github.com/openai/openai-go/v2/option"
	"github.com/openai/openai-go/v2/webhooks"
)

func main() {
	client := openai.NewClient(
		option.WithWebhookSecret(os.Getenv("OPENAI_WEBHOOK_SECRET")), // env var used by default; explicit here.
	)

	r := gin.Default()

	r.POST("/webhook", func(c *gin.Context) {
		body, err := io.ReadAll(c.Request.Body)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Error reading request body"})
			return
		}
		defer c.Request.Body.Close()

		webhookEvent, err := client.Webhooks.Unwrap(body, c.Request.Header)
		if err != nil {
			log.Printf("Invalid webhook signature: %v", err)
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid signature"})
			return
		}

		switch event := webhookEvent.AsAny().(type) {
		case webhooks.ResponseCompletedWebhookEvent:
			log.Printf("Response completed: %+v", event.Data)
		case webhooks.ResponseFailedWebhookEvent:
			log.Printf("Response failed: %+v", event.Data)
		default:
			log.Printf("Unhandled event type: %T", event)
		}

		c.JSON(http.StatusOK, gin.H{"message": "ok"})
	})

	r.Run(":8000")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Verifying webhook payloads directly&lt;/h3&gt; 
&lt;p&gt;In some cases, you may want to verify the webhook separately from parsing the payload. If you prefer to handle these steps separately, we provide the method &lt;code&gt;client.Webhooks.VerifySignature()&lt;/code&gt; to &lt;em&gt;only verify&lt;/em&gt; the signature of a webhook request. Like &lt;code&gt;Unwrap()&lt;/code&gt;, this method will return an error if the signature is invalid.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter should be the raw JSON bytes sent from the server (do not parse it first). You will then need to parse the body after verifying the signature.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/openai/openai-go/v2"
	"github.com/openai/openai-go/v2/option"
)

func main() {
	client := openai.NewClient(
		option.WithWebhookSecret(os.Getenv("OPENAI_WEBHOOK_SECRET")), // env var used by default; explicit here.
	)

	r := gin.Default()

	r.POST("/webhook", func(c *gin.Context) {
		body, err := io.ReadAll(c.Request.Body)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Error reading request body"})
			return
		}
		defer c.Request.Body.Close()

		err = client.Webhooks.VerifySignature(body, c.Request.Header)
		if err != nil {
			log.Printf("Invalid webhook signature: %v", err)
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid signature"})
			return
		}

		c.JSON(http.StatusOK, gin.H{"message": "ok"})
	})

	r.Run(":8000")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Retries&lt;/h3&gt; 
&lt;p&gt;Certain errors will be automatically retried 2 times by default, with a short exponential backoff. We retry by default all connection errors, 408 Request Timeout, 409 Conflict, 429 Rate Limit, and &amp;gt;=500 Internal errors.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;WithMaxRetries&lt;/code&gt; option to configure or disable this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Configure the default for all requests:
client := openai.NewClient(
	option.WithMaxRetries(0), // default is 2
)

// Override per-request:
client.Chat.Completions.New(
	context.TODO(),
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String("How can I get the name of the current day in JavaScript?"),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	option.WithMaxRetries(5),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Accessing raw response data (e.g. response headers)&lt;/h3&gt; 
&lt;p&gt;You can access the raw HTTP response data by using the &lt;code&gt;option.WithResponseInto()&lt;/code&gt; request option. This is useful when you need to examine response headers, status codes, or other details.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Create a variable to store the HTTP response
var response *http.Response
chatCompletion, err := client.Chat.Completions.New(
	context.TODO(),
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String("Say this is a test"),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	option.WithResponseInto(&amp;amp;response),
)
if err != nil {
	// handle error
}
fmt.Printf("%+v\n", chatCompletion)

fmt.Printf("Status Code: %d\n", response.StatusCode)
fmt.Printf("Headers: %+#v\n", response.Header)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Making custom/undocumented requests&lt;/h3&gt; 
&lt;p&gt;This library is typed for convenient access to the documented API. If you need to access undocumented endpoints, params, or response properties, the library can still be used.&lt;/p&gt; 
&lt;h4&gt;Undocumented endpoints&lt;/h4&gt; 
&lt;p&gt;To make requests to undocumented endpoints, you can use &lt;code&gt;client.Get&lt;/code&gt;, &lt;code&gt;client.Post&lt;/code&gt;, and other HTTP verbs. &lt;code&gt;RequestOptions&lt;/code&gt; on the client, such as retries, will be respected when making these requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var (
    // params can be an io.Reader, a []byte, an encoding/json serializable object,
    // or a "…Params" struct defined in this library.
    params map[string]any

    // result can be an []byte, *http.Response, a encoding/json deserializable object,
    // or a model defined in this library.
    result *http.Response
)
err := client.Post(context.Background(), "/unspecified", params, &amp;amp;result)
if err != nil {
    …
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Undocumented request params&lt;/h4&gt; 
&lt;p&gt;To make requests using undocumented parameters, you may use either the &lt;code&gt;option.WithQuerySet()&lt;/code&gt; or the &lt;code&gt;option.WithJSONSet()&lt;/code&gt; methods.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;params := FooNewParams{
    ID:   "id_xxxx",
    Data: FooNewParamsData{
        FirstName: openai.String("John"),
    },
}
client.Foo.New(context.Background(), params, option.WithJSONSet("data.last_name", "Doe"))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Undocumented response properties&lt;/h4&gt; 
&lt;p&gt;To access undocumented response properties, you may either access the raw JSON of the response as a string with &lt;code&gt;result.JSON.RawJSON()&lt;/code&gt;, or get the raw JSON of a particular field on the result with &lt;code&gt;result.JSON.Foo.Raw()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Any fields that are not present on the response struct will be saved and can be accessed by &lt;code&gt;result.JSON.ExtraFields()&lt;/code&gt; which returns the extra fields as a &lt;code&gt;map[string]Field&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Middleware&lt;/h3&gt; 
&lt;p&gt;We provide &lt;code&gt;option.WithMiddleware&lt;/code&gt; which applies the given middleware to requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func Logger(req *http.Request, next option.MiddlewareNext) (res *http.Response, err error) {
	// Before the request
	start := time.Now()
	LogReq(req)

	// Forward the request to the next handler
	res, err = next(req)

	// Handle stuff after the request
	end := time.Now()
	LogRes(res, err, start - end)

    return res, err
}

client := openai.NewClient(
	option.WithMiddleware(Logger),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When multiple middlewares are provided as variadic arguments, the middlewares are applied left to right. If &lt;code&gt;option.WithMiddleware&lt;/code&gt; is given multiple times, for example first in the client then the method, the middleware in the client will run first and the middleware given in the method will run next.&lt;/p&gt; 
&lt;p&gt;You may also replace the default &lt;code&gt;http.Client&lt;/code&gt; with &lt;code&gt;option.WithHTTPClient(client)&lt;/code&gt;. Only one http client is accepted (this overwrites any previous client) and receives requests after any middleware has been applied.&lt;/p&gt; 
&lt;h2&gt;Microsoft Azure OpenAI&lt;/h2&gt; 
&lt;p&gt;To use this library with [Azure OpenAI]&lt;a href="https://learn.microsoft.com/azure/ai-services/openai/overview"&gt;https://learn.microsoft.com/azure/ai-services/openai/overview&lt;/a&gt;), use the option.RequestOption functions in the &lt;code&gt;azure&lt;/code&gt; package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/openai/openai-go/v2"
	"github.com/openai/openai-go/v2/azure"
)

func main() {
	const azureOpenAIEndpoint = "https://&amp;lt;azure-openai-resource&amp;gt;.openai.azure.com"

	// The latest API versions, including previews, can be found here:
	// ttps://learn.microsoft.com/en-us/azure/ai-services/openai/reference#rest-api-versionng
	const azureOpenAIAPIVersion = "2024-06-01"

	tokenCredential, err := azidentity.NewDefaultAzureCredential(nil)

	if err != nil {
		fmt.Printf("Failed to create the DefaultAzureCredential: %s", err)
		os.Exit(1)
	}

	client := openai.NewClient(
		azure.WithEndpoint(azureOpenAIEndpoint, azureOpenAIAPIVersion),

		// Choose between authenticating using a TokenCredential or an API Key
		azure.WithTokenCredential(tokenCredential),
		// or azure.WithAPIKey(azureOpenAIAPIKey),
	)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Semantic versioning&lt;/h2&gt; 
&lt;p&gt;This package generally follows &lt;a href="https://semver.org/spec/v2.0.0.html"&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals.)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; 
&lt;p&gt;We are keen for your feedback; please open an &lt;a href="https://www.github.com/openai/openai-go/issues"&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/CONTRIBUTING.md"&gt;the contributing documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>