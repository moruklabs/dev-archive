<rss version="2.0">
  <channel>
    <title>GitHub Python Daily Trending</title>
    <description>Daily Trending of Python in GitHub</description>
    <pubDate>Wed, 23 Jul 2025 01:35:12 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>jlowin/fastmcp</title>
      <link>https://github.com/jlowin/fastmcp</link>
      <description>&lt;p&gt;ğŸš€ The fast, Pythonic way to build MCP servers and clients&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;!-- omit in toc --&gt; 
 &lt;h1&gt;FastMCP v2 ğŸš€&lt;/h1&gt; 
 &lt;p&gt;&lt;strong&gt;The fast, Pythonic way to build MCP servers and clients.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;Made with â˜•ï¸� by &lt;a href="https://www.prefect.io/"&gt;Prefect&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://gofastmcp.com"&gt;&lt;img src="https://img.shields.io/badge/docs-gofastmcp.com-blue" alt="Docs"&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/fastmcp"&gt;&lt;img src="https://img.shields.io/pypi/v/fastmcp.svg?sanitize=true" alt="PyPI - Version"&gt;&lt;/a&gt; &lt;a href="https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml"&gt;&lt;img src="https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg?sanitize=true" alt="Tests"&gt;&lt;/a&gt; &lt;a href="https://github.com/jlowin/fastmcp/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/jlowin/fastmcp.svg?sanitize=true" alt="License"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://trendshift.io/repositories/13266" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/13266" alt="jlowin%2Ffastmcp | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note]&lt;/p&gt; 
 &lt;h4&gt;Beyond the Protocol&lt;/h4&gt; 
 &lt;p&gt;FastMCP is the standard framework for working with the Model Context Protocol. FastMCP 1.0 was incorporated into the &lt;a href="https://github.com/modelcontextprotocol/python-sdk"&gt;official MCP Python SDK&lt;/a&gt; in 2024.&lt;/p&gt; 
 &lt;p&gt;This is FastMCP 2.0, the &lt;strong&gt;actively maintained version&lt;/strong&gt; that provides a complete toolkit for working with the MCP ecosystem.&lt;/p&gt; 
 &lt;p&gt;FastMCP 2.0 has a comprehensive set of features that go far beyond the core MCP specification, all in service of providing &lt;strong&gt;the simplest path to production&lt;/strong&gt;. These include deployment, auth, clients, server proxying and composition, generating servers from REST APIs, dynamic tool rewriting, built-in testing tools, integrations, and more.&lt;/p&gt; 
 &lt;p&gt;Ready to upgrade or get started? Follow the &lt;a href="https://gofastmcp.com/getting-started/installation"&gt;installation instructions&lt;/a&gt;, which include steps for upgrading from the official MCP SDK.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;p&gt;The &lt;a href="https://modelcontextprotocol.io"&gt;Model Context Protocol (MCP)&lt;/a&gt; is a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers and clients simple and intuitive. Create tools, expose resources, define prompts, and connect components with clean, Pythonic code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# server.py
from fastmcp import FastMCP

mcp = FastMCP("Demo ğŸš€")

@mcp.tool
def add(a: int, b: int) -&amp;gt; int:
    """Add two numbers"""
    return a + b

if __name__ == "__main__":
    mcp.run()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the server locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fastmcp run server.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ğŸ“š Documentation&lt;/h3&gt; 
&lt;p&gt;FastMCP's complete documentation is available at &lt;strong&gt;&lt;a href="https://gofastmcp.com"&gt;gofastmcp.com&lt;/a&gt;&lt;/strong&gt;, including detailed guides, API references, and advanced patterns. This readme provides only a high-level overview.&lt;/p&gt; 
&lt;p&gt;Documentation is also available in &lt;a href="https://llmstxt.org/"&gt;llms.txt format&lt;/a&gt;, which is a simple markdown standard that LLMs can consume easily.&lt;/p&gt; 
&lt;p&gt;There are two ways to access the LLM-friendly documentation:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://gofastmcp.com/llms.txt"&gt;&lt;code&gt;llms.txt&lt;/code&gt;&lt;/a&gt; is essentially a sitemap, listing all the pages in the documentation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gofastmcp.com/llms-full.txt"&gt;&lt;code&gt;llms-full.txt&lt;/code&gt;&lt;/a&gt; contains the entire documentation. Note this may exceed the context window of your LLM.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;!-- omit in toc --&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#what-is-mcp"&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#why-fastmcp"&gt;Why FastMCP?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#core-concepts"&gt;Core Concepts&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#the-fastmcp-server"&gt;The &lt;code&gt;FastMCP&lt;/code&gt; Server&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#tools"&gt;Tools&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#resources--templates"&gt;Resources &amp;amp; Templates&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#prompts"&gt;Prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#context"&gt;Context&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#mcp-clients"&gt;MCP Clients&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#advanced-features"&gt;Advanced Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#proxy-servers"&gt;Proxy Servers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#composing-mcp-servers"&gt;Composing MCP Servers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#openapi--fastapi-generation"&gt;OpenAPI &amp;amp; FastAPI Generation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#authentication--security"&gt;Authentication &amp;amp; Security&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#running-your-server"&gt;Running Your Server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#contributing"&gt;Contributing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#unit-tests"&gt;Unit Tests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#static-checks"&gt;Static Checks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlowin/fastmcp/main/#pull-requests"&gt;Pull Requests&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;What is MCP?&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://modelcontextprotocol.io"&gt;Model Context Protocol (MCP)&lt;/a&gt; lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. It is often described as "the USB-C port for AI", providing a uniform way to connect LLMs to resources they can use. It may be easier to think of it as an API, but specifically designed for LLM interactions. MCP servers can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Expose data through &lt;strong&gt;Resources&lt;/strong&gt; (think of these sort of like GET endpoints; they are used to load information into the LLM's context)&lt;/li&gt; 
 &lt;li&gt;Provide functionality through &lt;strong&gt;Tools&lt;/strong&gt; (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)&lt;/li&gt; 
 &lt;li&gt;Define interaction patterns through &lt;strong&gt;Prompts&lt;/strong&gt; (reusable templates for LLM interactions)&lt;/li&gt; 
 &lt;li&gt;And more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;FastMCP provides a high-level, Pythonic interface for building, managing, and interacting with these servers.&lt;/p&gt; 
&lt;h2&gt;Why FastMCP?&lt;/h2&gt; 
&lt;p&gt;The MCP protocol is powerful but implementing it involves a lot of boilerplate - server setup, protocol handlers, content types, error management. FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It's designed to be high-level and Pythonic; in most cases, decorating a function is all you need.&lt;/p&gt; 
&lt;p&gt;FastMCP 2.0 has evolved into a comprehensive platform that goes far beyond basic protocol implementation. While 1.0 provided server-building capabilities (and is now part of the official MCP SDK), 2.0 offers a complete ecosystem including client libraries, authentication systems, deployment tools, integrations with major AI platforms, testing frameworks, and production-ready infrastructure patterns.&lt;/p&gt; 
&lt;p&gt;FastMCP aims to be:&lt;/p&gt; 
&lt;p&gt;ğŸš€ &lt;strong&gt;Fast:&lt;/strong&gt; High-level interface means less code and faster development&lt;/p&gt; 
&lt;p&gt;ğŸ�€ &lt;strong&gt;Simple:&lt;/strong&gt; Build MCP servers with minimal boilerplate&lt;/p&gt; 
&lt;p&gt;ğŸ�� &lt;strong&gt;Pythonic:&lt;/strong&gt; Feels natural to Python developers&lt;/p&gt; 
&lt;p&gt;ğŸ”� &lt;strong&gt;Complete:&lt;/strong&gt; A comprehensive platform for all MCP use cases, from dev to prod&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;We recommend installing FastMCP with &lt;a href="https://docs.astral.sh/uv/"&gt;uv&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv pip install fastmcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For full installation instructions, including verification, upgrading from the official MCPSDK, and developer setup, see the &lt;a href="https://gofastmcp.com/getting-started/installation"&gt;&lt;strong&gt;Installation Guide&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Core Concepts&lt;/h2&gt; 
&lt;p&gt;These are the building blocks for creating MCP servers and clients with FastMCP.&lt;/p&gt; 
&lt;h3&gt;The &lt;code&gt;FastMCP&lt;/code&gt; Server&lt;/h3&gt; 
&lt;p&gt;The central object representing your MCP application. It holds your tools, resources, and prompts, manages connections, and can be configured with settings like authentication.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from fastmcp import FastMCP

# Create a server instance
mcp = FastMCP(name="MyAssistantServer")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://gofastmcp.com/servers/fastmcp"&gt;&lt;strong&gt;FastMCP Server Documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;p&gt;Tools allow LLMs to perform actions by executing your Python functions (sync or async). Ideal for computations, API calls, or side effects (like &lt;code&gt;POST&lt;/code&gt;/&lt;code&gt;PUT&lt;/code&gt;). FastMCP handles schema generation from type hints and docstrings. Tools can return various types, including text, JSON-serializable objects, and even images or audio aided by the FastMCP media helper classes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;@mcp.tool
def multiply(a: float, b: float) -&amp;gt; float:
    """Multiplies two numbers."""
    return a * b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://gofastmcp.com/servers/tools"&gt;&lt;strong&gt;Tools Documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Resources &amp;amp; Templates&lt;/h3&gt; 
&lt;p&gt;Resources expose read-only data sources (like &lt;code&gt;GET&lt;/code&gt; requests). Use &lt;code&gt;@mcp.resource("your://uri")&lt;/code&gt;. Use &lt;code&gt;{placeholders}&lt;/code&gt; in the URI to create dynamic templates that accept parameters, allowing clients to request specific data subsets.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# Static resource
@mcp.resource("config://version")
def get_version(): 
    return "2.0.1"

# Dynamic resource template
@mcp.resource("users://{user_id}/profile")
def get_profile(user_id: int):
    # Fetch profile for user_id...
    return {"name": f"User {user_id}", "status": "active"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://gofastmcp.com/servers/resources"&gt;&lt;strong&gt;Resources &amp;amp; Templates Documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Prompts&lt;/h3&gt; 
&lt;p&gt;Prompts define reusable message templates to guide LLM interactions. Decorate functions with &lt;code&gt;@mcp.prompt&lt;/code&gt;. Return strings or &lt;code&gt;Message&lt;/code&gt; objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;@mcp.prompt
def summarize_request(text: str) -&amp;gt; str:
    """Generate a prompt asking for a summary."""
    return f"Please summarize the following text:\n\n{text}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://gofastmcp.com/servers/prompts"&gt;&lt;strong&gt;Prompts Documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Context&lt;/h3&gt; 
&lt;p&gt;Access MCP session capabilities within your tools, resources, or prompts by adding a &lt;code&gt;ctx: Context&lt;/code&gt; parameter. Context provides methods for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Logging:&lt;/strong&gt; Log messages to MCP clients with &lt;code&gt;ctx.info()&lt;/code&gt;, &lt;code&gt;ctx.error()&lt;/code&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLM Sampling:&lt;/strong&gt; Use &lt;code&gt;ctx.sample()&lt;/code&gt; to request completions from the client's LLM.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP Request:&lt;/strong&gt; Use &lt;code&gt;ctx.http_request()&lt;/code&gt; to make HTTP requests to other servers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Resource Access:&lt;/strong&gt; Use &lt;code&gt;ctx.read_resource()&lt;/code&gt; to access resources on the server&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Progress Reporting:&lt;/strong&gt; Use &lt;code&gt;ctx.report_progress()&lt;/code&gt; to report progress to the client.&lt;/li&gt; 
 &lt;li&gt;and more...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To access the context, add a parameter annotated as &lt;code&gt;Context&lt;/code&gt; to any mcp-decorated function. FastMCP will automatically inject the correct context object when the function is called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from fastmcp import FastMCP, Context

mcp = FastMCP("My MCP Server")

@mcp.tool
async def process_data(uri: str, ctx: Context):
    # Log a message to the client
    await ctx.info(f"Processing {uri}...")

    # Read a resource from the server
    data = await ctx.read_resource(uri)

    # Ask client LLM to summarize the data
    summary = await ctx.sample(f"Summarize: {data.content[:500]}")

    # Return the summary
    return summary.text
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://gofastmcp.com/servers/context"&gt;&lt;strong&gt;Context Documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;MCP Clients&lt;/h3&gt; 
&lt;p&gt;Interact with &lt;em&gt;any&lt;/em&gt; MCP server programmatically using the &lt;code&gt;fastmcp.Client&lt;/code&gt;. It supports various transports (Stdio, SSE, In-Memory) and often auto-detects the correct one. The client can also handle advanced patterns like server-initiated &lt;strong&gt;LLM sampling requests&lt;/strong&gt; if you provide an appropriate handler.&lt;/p&gt; 
&lt;p&gt;Critically, the client allows for efficient &lt;strong&gt;in-memory testing&lt;/strong&gt; of your servers by connecting directly to a &lt;code&gt;FastMCP&lt;/code&gt; server instance via the &lt;code&gt;FastMCPTransport&lt;/code&gt;, eliminating the need for process management or network calls during tests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from fastmcp import Client

async def main():
    # Connect via stdio to a local script
    async with Client("my_server.py") as client:
        tools = await client.list_tools()
        print(f"Available tools: {tools}")
        result = await client.call_tool("add", {"a": 5, "b": 3})
        print(f"Result: {result.text}")

    # Connect via SSE
    async with Client("http://localhost:8000/sse") as client:
        # ... use the client
        pass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use clients to test servers, use the following pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from fastmcp import FastMCP, Client

mcp = FastMCP("My MCP Server")

async def main():
    # Connect via in-memory transport
    async with Client(mcp) as client:
        # ... use the client
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FastMCP also supports connecting to multiple servers through a single unified client using the standard MCP configuration format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from fastmcp import Client

# Standard MCP configuration with multiple servers
config = {
    "mcpServers": {
        "weather": {"url": "https://weather-api.example.com/mcp"},
        "assistant": {"command": "python", "args": ["./assistant_server.py"]}
    }
}

# Create a client that connects to all servers
client = Client(config)

async def main():
    async with client:
        # Access tools and resources with server prefixes
        forecast = await client.call_tool("weather_get_forecast", {"city": "London"})
        answer = await client.call_tool("assistant_answer_question", {"query": "What is MCP?"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://gofastmcp.com/clients/client"&gt;&lt;strong&gt;Client Documentation&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://gofastmcp.com/clients/transports"&gt;&lt;strong&gt;Transports Documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Advanced Features&lt;/h2&gt; 
&lt;p&gt;FastMCP introduces powerful ways to structure and deploy your MCP applications.&lt;/p&gt; 
&lt;h3&gt;Proxy Servers&lt;/h3&gt; 
&lt;p&gt;Create a FastMCP server that acts as an intermediary for another local or remote MCP server using &lt;code&gt;FastMCP.as_proxy()&lt;/code&gt;. This is especially useful for bridging transports (e.g., remote SSE to local Stdio) or adding a layer of logic to a server you don't control.&lt;/p&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://gofastmcp.com/patterns/proxy"&gt;&lt;strong&gt;Proxying Documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Composing MCP Servers&lt;/h3&gt; 
&lt;p&gt;Build modular applications by mounting multiple &lt;code&gt;FastMCP&lt;/code&gt; instances onto a parent server using &lt;code&gt;mcp.mount()&lt;/code&gt; (live link) or &lt;code&gt;mcp.import_server()&lt;/code&gt; (static copy).&lt;/p&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://gofastmcp.com/patterns/composition"&gt;&lt;strong&gt;Composition Documentation&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;OpenAPI &amp;amp; FastAPI Generation&lt;/h3&gt; 
&lt;p&gt;Automatically generate FastMCP servers from existing OpenAPI specifications (&lt;code&gt;FastMCP.from_openapi()&lt;/code&gt;) or FastAPI applications (&lt;code&gt;FastMCP.from_fastapi()&lt;/code&gt;), instantly bringing your web APIs to the MCP ecosystem.&lt;/p&gt; 
&lt;p&gt;Learn more: &lt;a href="https://gofastmcp.com/servers/openapi#openapi-integration"&gt;&lt;strong&gt;OpenAPI Integration&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://gofastmcp.com/deployment/asgi#fastapi-integration"&gt;&lt;strong&gt;FastAPI Integration&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Authentication &amp;amp; Security&lt;/h3&gt; 
&lt;p&gt;FastMCP provides built-in authentication support to secure both your MCP servers and clients in production environments. Protect your server endpoints from unauthorized access and authenticate your clients against secured MCP servers using industry-standard protocols.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Server Protection&lt;/strong&gt;: Secure your FastMCP server endpoints with configurable authentication providers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Client Authentication&lt;/strong&gt;: Connect to authenticated MCP servers with automatic credential management&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Production Ready&lt;/strong&gt;: Support for common authentication patterns used in enterprise environments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Learn more in the &lt;strong&gt;Authentication Documentation&lt;/strong&gt; for &lt;a href="https://gofastmcp.com/servers/auth"&gt;servers&lt;/a&gt; and &lt;a href="https://gofastmcp.com/clients/auth"&gt;clients&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Running Your Server&lt;/h2&gt; 
&lt;p&gt;The main way to run a FastMCP server is by calling the &lt;code&gt;run()&lt;/code&gt; method on your server instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# server.py
from fastmcp import FastMCP

mcp = FastMCP("Demo ğŸš€")

@mcp.tool
def hello(name: str) -&amp;gt; str:
    return f"Hello, {name}!"

if __name__ == "__main__":
    mcp.run()  # Default: uses STDIO transport
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FastMCP supports three transport protocols:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;STDIO (Default)&lt;/strong&gt;: Best for local tools and command-line scripts.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;mcp.run(transport="stdio")  # Default, so transport argument is optional
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Streamable HTTP&lt;/strong&gt;: Recommended for web deployments.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;mcp.run(transport="http", host="127.0.0.1", port=8000, path="/mcp")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;SSE&lt;/strong&gt;: For compatibility with existing SSE clients.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;mcp.run(transport="sse", host="127.0.0.1", port=8000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://gofastmcp.com/deployment/running-server"&gt;&lt;strong&gt;Running Server Documentation&lt;/strong&gt;&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are the core of open source! We welcome improvements and features.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Python 3.10+&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.astral.sh/uv/"&gt;uv&lt;/a&gt; (Recommended for environment management)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/jlowin/fastmcp.git 
cd fastmcp
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create and sync the environment:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;uv sync
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This installs all dependencies, including dev tools.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Activate the virtual environment (e.g., &lt;code&gt;source .venv/bin/activate&lt;/code&gt; or via your IDE).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Unit Tests&lt;/h3&gt; 
&lt;p&gt;FastMCP has a comprehensive unit test suite. All PRs must introduce or update tests as appropriate and pass the full suite.&lt;/p&gt; 
&lt;p&gt;Run tests using pytest:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pytest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or if you want an overview of the code coverage&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv run pytest --cov=src --cov=examples --cov-report=html
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Static Checks&lt;/h3&gt; 
&lt;p&gt;FastMCP uses &lt;code&gt;pre-commit&lt;/code&gt; for code formatting, linting, and type-checking. All PRs must pass these checks (they run automatically in CI).&lt;/p&gt; 
&lt;p&gt;Install the hooks locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv run pre-commit install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The hooks will now run automatically on &lt;code&gt;git commit&lt;/code&gt;. You can also run them manually at any time:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pre-commit run --all-files
# or via uv
uv run pre-commit run --all-files
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pull Requests&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository on GitHub.&lt;/li&gt; 
 &lt;li&gt;Create a feature branch from &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Make your changes, including tests and documentation updates.&lt;/li&gt; 
 &lt;li&gt;Ensure tests and pre-commit hooks pass.&lt;/li&gt; 
 &lt;li&gt;Commit your changes and push to your fork.&lt;/li&gt; 
 &lt;li&gt;Open a pull request against the &lt;code&gt;main&lt;/code&gt; branch of &lt;code&gt;jlowin/fastmcp&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Please open an issue or discussion for questions or suggestions before starting significant work!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hacksider/Deep-Live-Cam</title>
      <link>https://github.com/hacksider/Deep-Live-Cam</link>
      <description>&lt;p&gt;real time face swap and one-click video deepfake with only a single image&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;Deep-Live-Cam&lt;/h1&gt; 
&lt;p align="center"&gt; Real-time face swap and video deepfake with a single click and only a single image. &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://trendshift.io/repositories/11395" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/11395" alt="hacksider%2FDeep-Live-Cam | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/hacksider/Deep-Live-Cam/main/media/demo.gif" alt="Demo GIF" width="800"&gt; &lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;This deepfake software is designed to be a productive tool for the AI-generated media industry. It can assist artists in animating custom characters, creating engaging content, and even using models for clothing design.&lt;/p&gt; 
&lt;p&gt;We are aware of the potential for unethical applications and are committed to preventative measures. A built-in check prevents the program from processing inappropriate media (nudity, graphic content, sensitive material like war footage, etc.). We will continue to develop this project responsibly, adhering to the law and ethics. We may shut down the project or add watermarks if legally required.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Ethical Use: Users are expected to use this software responsibly and legally. If using a real person's face, obtain their consent and clearly label any output as a deepfake when sharing online.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Content Restrictions: The software includes built-in checks to prevent processing inappropriate media, such as nudity, graphic content, or sensitive material.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Legal Compliance: We adhere to all relevant laws and ethical guidelines. If legally required, we may shut down the project or add watermarks to the output.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;User Responsibility: We are not responsible for end-user actions. Users must ensure their use of the software aligns with ethical standards and legal requirements.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By using this software, you agree to these terms and commit to using it in a manner that respects the rights and dignity of others.&lt;/p&gt; 
&lt;p&gt;Users are expected to use this software responsibly and legally. If using a real person's face, obtain their consent and clearly label any output as a deepfake when sharing online. We are not responsible for end-user actions.&lt;/p&gt; 
&lt;h2&gt;Exclusive v2.1 Quick Start - Pre-built (Windows/Mac Silicon)&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://deeplivecam.net/index.php/quickstart"&gt; &lt;img src="https://raw.githubusercontent.com/hacksider/Deep-Live-Cam/main/media/Download.png" width="285" height="77"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://deeplivecam.net/index.php/quickstart"&gt; &lt;h5&gt;This is the fastest build you can get if you have a discrete NVIDIA or AMD GPU or Mac Silicon, And you'll receive special priority support.&lt;/h5&gt; &lt;h6&gt;These Pre-builts are perfect for non-technical users or those who don't have time to, or can't manually install all the requirements. Just a heads-up: this is an open-source project, so you can also install it manually.&lt;/h6&gt; &lt;h2&gt;TLDR; Live Deepfake in just 3 Clicks&lt;/h2&gt; &lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/af825228-852c-411b-b787-ffd9aac72fc6" alt="easysteps"&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Select a face&lt;/li&gt; 
  &lt;li&gt;Select which camera to use&lt;/li&gt; 
  &lt;li&gt;Press live!&lt;/li&gt; 
 &lt;/ol&gt; &lt;h2&gt;Features &amp;amp; Uses - Everything is in real-time&lt;/h2&gt; &lt;h3&gt;Mouth Mask&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Retain your original mouth for accurate movement using Mouth Mask&lt;/strong&gt;&lt;/p&gt; &lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/hacksider/Deep-Live-Cam/main/media/ludwig.gif" alt="resizable-gif"&gt; &lt;/p&gt; &lt;h3&gt;Face Mapping&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Use different faces on multiple subjects simultaneously&lt;/strong&gt;&lt;/p&gt; &lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/hacksider/Deep-Live-Cam/main/media/streamers.gif" alt="face_mapping_source"&gt; &lt;/p&gt; &lt;h3&gt;Your Movie, Your Face&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Watch movies with any face in real-time&lt;/strong&gt;&lt;/p&gt; &lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/hacksider/Deep-Live-Cam/main/media/movie.gif" alt="movie"&gt; &lt;/p&gt; &lt;h3&gt;Live Show&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Run Live shows and performances&lt;/strong&gt;&lt;/p&gt; &lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/hacksider/Deep-Live-Cam/main/media/live_show.gif" alt="show"&gt; &lt;/p&gt; &lt;h3&gt;Memes&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Create Your Most Viral Meme Yet&lt;/strong&gt;&lt;/p&gt; &lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/hacksider/Deep-Live-Cam/main/media/meme.gif" alt="show" width="450"&gt; &lt;br&gt; &lt;sub&gt;Created using Many Faces feature in Deep-Live-Cam&lt;/sub&gt; &lt;/p&gt; &lt;h3&gt;Omegle&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Surprise people on Omegle&lt;/strong&gt;&lt;/p&gt; &lt;p align="center"&gt; 
  &lt;video src="https://github.com/user-attachments/assets/2e9b9b82-fa04-4b70-9f56-b1f68e7672d0" width="450" controls&gt;&lt;/video&gt; &lt;/p&gt; &lt;h2&gt;Installation (Manual)&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;Please be aware that the installation requires technical skills and is not for beginners. Consider downloading the quickstart version.&lt;/strong&gt;&lt;/p&gt; &lt;/a&gt;
&lt;details&gt;
 &lt;a href="https://deeplivecam.net/index.php/quickstart"&gt; &lt;summary&gt;Click to see the process&lt;/summary&gt; &lt;h3&gt;Installation&lt;/h3&gt; &lt;p&gt;This is more likely to work on your computer but will be slower as it utilizes the CPU.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1. Set up Your Platform&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Python (3.11 recommended)&lt;/li&gt; 
   &lt;li&gt;pip&lt;/li&gt; 
   &lt;li&gt;git&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OlNWCpFdVMA"&gt;ffmpeg&lt;/a&gt; - &lt;code&gt;iex (irm ffmpeg.tc.ht)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/"&gt;Visual Studio 2022 Runtimes (Windows)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt;&lt;/a&gt; 
 &lt;p&gt;&lt;strong&gt;2. Clone the Repository&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/hacksider/Deep-Live-Cam.git
cd Deep-Live-Cam
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;3. Download the Models&lt;/strong&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;a href="https://huggingface.co/hacksider/deep-live-cam/resolve/main/GFPGANv1.4.pth"&gt;GFPGANv1.4&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://huggingface.co/hacksider/deep-live-cam/resolve/main/inswapper_128_fp16.onnx"&gt;inswapper_128_fp16.onnx&lt;/a&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;Place these files in the "&lt;strong&gt;models&lt;/strong&gt;" folder.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;4. Install Dependencies&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;We highly recommend using a &lt;code&gt;venv&lt;/code&gt; to avoid issues.&lt;/p&gt; 
 &lt;p&gt;For Windows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;python -m venv venv
venv\Scripts\activate
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Linux:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Ensure you use the installed Python 3.10
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;For macOS:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Apple Silicon (M1/M2/M3) requires specific setup:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Install Python 3.11 (specific version is important)
brew install python@3.11

# Install tkinter package (required for the GUI)
brew install python-tk@3.10

# Create and activate virtual environment with Python 3.11
python3.11 -m venv venv
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;** In case something goes wrong and you need to reinstall the virtual environment **&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Deactivate the virtual environment
rm -rf venv

# Reinstall the virtual environment
python -m venv venv
source venv/bin/activate

# install the dependencies again
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Run:&lt;/strong&gt; If you don't have a GPU, you can run Deep-Live-Cam using &lt;code&gt;python run.py&lt;/code&gt;. Note that initial execution will download models (~300MB).&lt;/p&gt; 
 &lt;h3&gt;GPU Acceleration&lt;/h3&gt; 
 &lt;p&gt;&lt;strong&gt;CUDA Execution Provider (Nvidia)&lt;/strong&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Install &lt;a href="https://developer.nvidia.com/cuda-12-8-0-download-archive"&gt;CUDA Toolkit 12.8.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Install &lt;a href="https://developer.nvidia.com/rdp/cudnn-archive"&gt;cuDNN v8.9.7 for CUDA 12.x&lt;/a&gt; (required for onnxruntime-gpu): 
   &lt;ul&gt; 
    &lt;li&gt;Download cuDNN v8.9.7 for CUDA 12.x&lt;/li&gt; 
    &lt;li&gt;Make sure the cuDNN bin directory is in your system PATH&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Install dependencies:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128
pip uninstall onnxruntime onnxruntime-gpu
pip install onnxruntime-gpu==1.21.0
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="3"&gt; 
  &lt;li&gt;Usage:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;python run.py --execution-provider cuda
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;CoreML Execution Provider (Apple Silicon)&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Apple Silicon (M1/M2/M3) specific installation:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Make sure you've completed the macOS setup above using Python 3.10.&lt;/li&gt; 
  &lt;li&gt;Install dependencies:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip uninstall onnxruntime onnxruntime-silicon
pip install onnxruntime-silicon==1.13.1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="3"&gt; 
  &lt;li&gt;Usage (important: specify Python 3.10):&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;python3.10 run.py --execution-provider coreml
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Important Notes for macOS:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You &lt;strong&gt;must&lt;/strong&gt; use Python 3.10, not newer versions like 3.11 or 3.13&lt;/li&gt; 
  &lt;li&gt;Always run with &lt;code&gt;python3.10&lt;/code&gt; command not just &lt;code&gt;python&lt;/code&gt; if you have multiple Python versions installed&lt;/li&gt; 
  &lt;li&gt;If you get error about &lt;code&gt;_tkinter&lt;/code&gt; missing, reinstall the tkinter package: &lt;code&gt;brew reinstall python-tk@3.10&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;If you get model loading errors, check that your models are in the correct folder&lt;/li&gt; 
  &lt;li&gt;If you encounter conflicts with other Python versions, consider uninstalling them: &lt;pre&gt;&lt;code class="language-bash"&gt;# List all installed Python versions
brew list | grep python

# Uninstall conflicting versions if needed
brew uninstall --ignore-dependencies python@3.11 python@3.13

# Keep only Python 3.11
brew cleanup
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;CoreML Execution Provider (Apple Legacy)&lt;/strong&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Install dependencies:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip uninstall onnxruntime onnxruntime-coreml
pip install onnxruntime-coreml==1.21.0
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="2"&gt; 
  &lt;li&gt;Usage:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;python run.py --execution-provider coreml
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;DirectML Execution Provider (Windows)&lt;/strong&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Install dependencies:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip uninstall onnxruntime onnxruntime-directml
pip install onnxruntime-directml==1.21.0
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="2"&gt; 
  &lt;li&gt;Usage:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;python run.py --execution-provider directml
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;OpenVINOâ„¢ Execution Provider (Intel)&lt;/strong&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Install dependencies:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip uninstall onnxruntime onnxruntime-openvino
pip install onnxruntime-openvino==1.21.0
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="2"&gt; 
  &lt;li&gt;Usage:&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;python run.py --execution-provider openvino
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Image/Video Mode&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Execute &lt;code&gt;python run.py&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Choose a source face image and a target image/video.&lt;/li&gt; 
 &lt;li&gt;Click "Start".&lt;/li&gt; 
 &lt;li&gt;The output will be saved in a directory named after the target video.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2. Webcam Mode&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Execute &lt;code&gt;python run.py&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Select a source face image.&lt;/li&gt; 
 &lt;li&gt;Click "Live".&lt;/li&gt; 
 &lt;li&gt;Wait for the preview to appear (10-30 seconds).&lt;/li&gt; 
 &lt;li&gt;Use a screen capture tool like OBS to stream.&lt;/li&gt; 
 &lt;li&gt;To change the face, select a new source image.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Command Line Arguments (Unmaintained)&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;options:
  -h, --help                                               show this help message and exit
  -s SOURCE_PATH, --source SOURCE_PATH                     select a source image
  -t TARGET_PATH, --target TARGET_PATH                     select a target image or video
  -o OUTPUT_PATH, --output OUTPUT_PATH                     select output file or directory
  --frame-processor FRAME_PROCESSOR [FRAME_PROCESSOR ...]  frame processors (choices: face_swapper, face_enhancer, ...)
  --keep-fps                                               keep original fps
  --keep-audio                                             keep original audio
  --keep-frames                                            keep temporary frames
  --many-faces                                             process every face
  --map-faces                                              map source target faces
  --mouth-mask                                             mask the mouth region
  --video-encoder {libx264,libx265,libvpx-vp9}             adjust output video encoder
  --video-quality [0-51]                                   adjust output video quality
  --live-mirror                                            the live camera display as you see it in the front-facing camera frame
  --live-resizable                                         the live camera frame is resizable
  --max-memory MAX_MEMORY                                  maximum amount of RAM in GB
  --execution-provider {cpu} [{cpu} ...]                   available execution provider (choices: cpu, ...)
  --execution-threads EXECUTION_THREADS                    number of execution threads
  -v, --version                                            show program's version number and exit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Looking for a CLI mode? Using the -s/--source argument will make the run program in cli mode.&lt;/p&gt; 
&lt;h2&gt;Press&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;We are always open to criticism and are ready to improve, that's why we didn't cherry-pick anything.&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://arstechnica.com/information-technology/2024/08/new-ai-tool-enables-real-time-face-swapping-on-webcams-raising-fraud-concerns/"&gt;&lt;em&gt;"Deep-Live-Cam goes viral, allowing anyone to become a digital doppelganger"&lt;/em&gt;&lt;/a&gt; - Ars Technica&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dataconomy.com/2024/08/15/what-is-deep-live-cam-github-deepfake/"&gt;&lt;em&gt;"Thanks Deep Live Cam, shapeshifters are among us now"&lt;/em&gt;&lt;/a&gt; - Dataconomy&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.newsbytesapp.com/news/science/deep-live-cam-ai-impersonation-tool-goes-viral/story"&gt;&lt;em&gt;"This free AI tool lets you become anyone during video-calls"&lt;/em&gt;&lt;/a&gt; - NewsBytes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.creativebloq.com/ai/ok-this-viral-ai-live-stream-software-is-truly-terrifying"&gt;&lt;em&gt;"OK, this viral AI live stream software is truly terrifying"&lt;/em&gt;&lt;/a&gt; - Creative Bloq&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://petapixel.com/2024/08/14/deep-live-cam-deepfake-ai-tool-lets-you-become-anyone-in-a-video-call-with-single-photo-mark-zuckerberg-jd-vance-elon-musk/"&gt;&lt;em&gt;"Deepfake AI Tool Lets You Become Anyone in a Video Call With Single Photo"&lt;/em&gt;&lt;/a&gt; - PetaPixel&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.techeblog.com/deep-live-cam-ai-transform-face/"&gt;&lt;em&gt;"Deep-Live-Cam Uses AI to Transform Your Face in Real-Time, Celebrities Included"&lt;/em&gt;&lt;/a&gt; - TechEBlog&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://telegrafi.com/en/a-tool-that-makes-you-look-like-anyone-during-a-video-call-is-going-viral-on-the-Internet/"&gt;&lt;em&gt;"An AI tool that "makes you look like anyone" during a video call is going viral online"&lt;/em&gt;&lt;/a&gt; - Telegrafi&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://decrypt.co/244565/this-deepfake-tool-turning-images-into-livestreams-is-topping-the-github-charts"&gt;&lt;em&gt;"This Deepfake Tool Turning Images Into Livestreams is Topping the GitHub Charts"&lt;/em&gt;&lt;/a&gt; - Emerge&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.digitalmusicnews.com/2024/08/15/face-swapping-ai-real-time-mimic/"&gt;&lt;em&gt;"New Real-Time Face-Swapping AI Allows Anyone to Mimic Famous Faces"&lt;/em&gt;&lt;/a&gt; - Digital Music News&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.diyphotography.net/this-real-time-webcam-deepfake-tool-raises-alarms-about-the-future-of-identity-theft/"&gt;&lt;em&gt;"This real-time webcam deepfake tool raises alarms about the future of identity theft"&lt;/em&gt;&lt;/a&gt; - DIYPhotography&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?time_continue=1074&amp;amp;v=py4Tc-Y8BcY"&gt;&lt;em&gt;"That's Crazy, Oh God. That's Fucking Freaky Dude... That's So Wild Dude"&lt;/em&gt;&lt;/a&gt; - SomeOrdinaryGamers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/live/mFsCe7AIxq8?feature=shared&amp;amp;t=2686"&gt;&lt;em&gt;"Alright look look look, now look chat, we can do any face we want to look like chat"&lt;/em&gt;&lt;/a&gt; - IShowSpeed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wnCghLjqv3s&amp;amp;t=551s"&gt;&lt;em&gt;"They do a pretty good job matching poses, expression and even the lighting"&lt;/em&gt;&lt;/a&gt; - TechLinked (LTT)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt;: for making video-related operations easy&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deepinsight"&gt;deepinsight&lt;/a&gt;: for their &lt;a href="https://github.com/deepinsight/insightface"&gt;insightface&lt;/a&gt; project which provided a well-made library and models. Please be reminded that the &lt;a href="https://github.com/deepinsight/insightface?tab=readme-ov-file#license"&gt;use of the model is for non-commercial research purposes only&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/havok2-htwo"&gt;havok2-htwo&lt;/a&gt;: for sharing the code for webcam&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/GosuDRM"&gt;GosuDRM&lt;/a&gt;: for the open version of roop&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pereiraroland26"&gt;pereiraroland26&lt;/a&gt;: Multiple faces support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vic4key"&gt;vic4key&lt;/a&gt;: For supporting/contributing to this project&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kier007"&gt;kier007&lt;/a&gt;: for improving the user experience&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qitianai"&gt;qitianai&lt;/a&gt;: for multi-lingual support&lt;/li&gt; 
 &lt;li&gt;and &lt;a href="https://github.com/hacksider/Deep-Live-Cam/graphs/contributors"&gt;all developers&lt;/a&gt; behind libraries used in this project.&lt;/li&gt; 
 &lt;li&gt;Footnote: Please be informed that the base author of the code is &lt;a href="https://github.com/s0md3v/roop"&gt;s0md3v&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;All the wonderful users who helped make this project go viral by starring the repo â�¤ï¸�&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://github.com/hacksider/Deep-Live-Cam/stargazers"&gt;&lt;img src="https://reporoster.com/stars/hacksider/Deep-Live-Cam" alt="Stargazers"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/fec8e29c45dfdb9c5916f3a7830e1249308d20e1.svg?sanitize=true" alt="Alt" title="Repobeats analytics image"&gt;&lt;/p&gt; 
&lt;h2&gt;Stars to the Moon ğŸš€&lt;/h2&gt; 
&lt;a href="https://star-history.com/#hacksider/deep-live-cam&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=hacksider/deep-live-cam&amp;amp;type=Date&amp;amp;theme=dark"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=hacksider/deep-live-cam&amp;amp;type=Date"&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=hacksider/deep-live-cam&amp;amp;type=Date"&gt; 
 &lt;/picture&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>p1ngul1n0/blackbird</title>
      <link>https://github.com/p1ngul1n0/blackbird</link>
      <description>&lt;p&gt;An OSINT tool to search for accounts by username and email in social networks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blackbird&lt;/h1&gt; 
&lt;figure&gt;
 &lt;img src="https://raw.githubusercontent.com/p1ngul1n0/blackbird/main/docs/.gitbook/assets/ai-demo.png" alt=""&gt;
 &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Blackbird is a powerful OSINT tool that combines fast username and email searches across more than 600 platforms with free AI-powered profiling. By leveraging community-driven projects like WhatsMyName, it ensures low false positive rates and high-quality results. Features include smart filters, polished PDF/CSV exports, and fully automated analysis â€” all from a single CLI.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;a href="https://cutt.ly/frtVNzQQ"&gt;&lt;img src="https://raw.githubusercontent.com/p1ngul1n0/blackbird/main/docs/.gitbook/assets/sherlockeye_cover.jpg" alt="SherlockEyeCover"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Setup&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/p1ngul1n0/blackbird
cd blackbird
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Install requirements&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Search by username&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python blackbird.py --username johndoe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Search by email&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python blackbird.py --email johndoe@example.com 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Export results to PDF&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python blackbird.py --email  --pdf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;âœ¨ AI (Free)&lt;/h2&gt; 
&lt;p&gt;Blackbird integrates an AI engine that analyzes the sites where a username or email is found and returns a behavioral and technical profile of the user â€” helping you understand more, with less effort.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;No sensitive data is shared â€” only site names are sent&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Usage is completely free, with a fair daily limit&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;AI results are also included in PDF exports (&lt;code&gt;--pdf&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Generate an API key:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python blackbird.py --setup-ai
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Use it&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python blackbird.py --username johndoe --ai
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;More&lt;/h2&gt; 
&lt;p&gt;For more details about the project, visit the &lt;a href="https://p1ngul1n0.gitbook.io/blackbird/"&gt;Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Project Developer&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.linkedin.com/in/lucas-antoniaci/"&gt;Lucas Antoniaci&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;WhatsMyName&lt;/h3&gt; 
&lt;p&gt;Blackbird is fully integrated with &lt;a href="https://github.com/WebBreacher/WhatsMyName"&gt;WhatsMyName&lt;/a&gt; project, witch has 600+ sites to perform accurate reverse username search.&lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.digitalocean.com/?refcode=eae02be1dd10&amp;amp;utm_campaign=Referral_Invite&amp;amp;utm_medium=Referral_Program&amp;amp;utm_source=badge"&gt;&lt;img src="https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%203.svg?sanitize=true" alt="DigitalOcean Referral Badge"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Disclaimer&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;This or previous program is for Educational purpose ONLY. Do not use it without permission. 
The usual disclaimer applies, especially the fact that me (P1ngul1n0) is not liable for any 
damages caused by direct or indirect use of the information or functionality provided by these 
programs. The author or any Internet provider bears NO responsibility for content or misuse 
of these programs or any derivatives thereof. By using these programs you accept the fact 
that any damage (dataloss, system crash, system compromise, etc.) caused by the use of these 
programs is not P1ngul1n0's responsibility.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>unclecode/crawl4ai</title>
      <link>https://github.com/unclecode/crawl4ai</link>
      <description>&lt;p&gt;ğŸš€ğŸ¤– Crawl4AI: Open-source LLM Friendly Web Crawler &amp; Scraper. Don't be shy, join here: https://discord.gg/jP8KfhDhyN&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ğŸš€ğŸ¤– Crawl4AI: Open-source LLM Friendly Web Crawler &amp;amp; Scraper.&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://trendshift.io/repositories/11716" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/11716" alt="unclecode%2Fcrawl4ai | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/unclecode/crawl4ai/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/unclecode/crawl4ai?style=social" alt="GitHub Stars"&gt;&lt;/a&gt; &lt;a href="https://github.com/unclecode/crawl4ai/network/members"&gt;&lt;img src="https://img.shields.io/github/forks/unclecode/crawl4ai?style=social" alt="GitHub Forks"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://badge.fury.io/py/crawl4ai"&gt;&lt;img src="https://badge.fury.io/py/crawl4ai.svg?sanitize=true" alt="PyPI version"&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/crawl4ai/"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/crawl4ai" alt="Python Version"&gt;&lt;/a&gt; &lt;a href="https://pepy.tech/project/crawl4ai"&gt;&lt;img src="https://static.pepy.tech/badge/crawl4ai/month" alt="Downloads"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://x.com/crawl4ai"&gt; &lt;img src="https://img.shields.io/badge/Follow%20on%20X-000000?style=for-the-badge&amp;amp;logo=x&amp;amp;logoColor=white" alt="Follow on X"&gt; &lt;/a&gt; &lt;a href="https://www.linkedin.com/company/crawl4ai"&gt; &lt;img src="https://img.shields.io/badge/Follow%20on%20LinkedIn-0077B5?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white" alt="Follow on LinkedIn"&gt; &lt;/a&gt; &lt;a href="https://discord.gg/jP8KfhDhyN"&gt; &lt;img src="https://img.shields.io/badge/Join%20our%20Discord-5865F2?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white" alt="Join our Discord"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Crawl4AI is the #1 trending GitHub repository, actively maintained by a vibrant community. It delivers blazing-fast, AI-ready web crawling tailored for LLMs, AI agents, and data pipelines. Open source, flexible, and built for real-time performance, Crawl4AI empowers developers with unmatched speed, precision, and deployment ease.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/unclecode/crawl4ai/main/#-recent-updates"&gt;âœ¨ Check out latest update v0.7.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ğŸ�‰ &lt;strong&gt;Version 0.7.0 is now available!&lt;/strong&gt; The Adaptive Intelligence Update introduces groundbreaking features: Adaptive Crawling that learns website patterns, Virtual Scroll support for infinite pages, intelligent Link Preview with 3-layer scoring, Async URL Seeder for massive discovery, and significant performance improvements. &lt;a href="https://docs.crawl4ai.com/blog/release-v0.7.0"&gt;Read the release notes â†’&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ¤“ &lt;strong&gt;My Personal Story&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;My journey with computers started in childhood when my dad, a computer scientist, introduced me to an Amstrad computer. Those early days sparked a fascination with technology, leading me to pursue computer science and specialize in NLP during my postgraduate studies. It was during this time that I first delved into web crawling, building tools to help researchers organize papers and extract information from publications a challenging yet rewarding experience that honed my skills in data extraction.&lt;/p&gt; 
 &lt;p&gt;Fast forward to 2023, I was working on a tool for a project and needed a crawler to convert a webpage into markdown. While exploring solutions, I found one that claimed to be open-source but required creating an account and generating an API token. Worse, it turned out to be a SaaS model charging $16, and its quality didnâ€™t meet my standards. Frustrated, I realized this was a deeper problem. That frustration turned into turbo anger mode, and I decided to build my own solution. In just a few days, I created Crawl4AI. To my surprise, it went viral, earning thousands of GitHub stars and resonating with a global community.&lt;/p&gt; 
 &lt;p&gt;I made Crawl4AI open-source for two reasons. First, itâ€™s my way of giving back to the open-source community that has supported me throughout my career. Second, I believe data should be accessible to everyone, not locked behind paywalls or monopolized by a few. Open access to data lays the foundation for the democratization of AI, a vision where individuals can train their own models and take ownership of their information. This library is the first step in a larger journey to create the best open-source data extraction and generation tool the world has ever seen, built collaboratively by a passionate community.&lt;/p&gt; 
 &lt;p&gt;Thank you to everyone who has supported this project, used it, and shared feedback. Your encouragement motivates me to dream even bigger. Join us, file issues, submit PRs, or spread the word. Together, we can build a tool that truly empowers people to access their own data and reshape the future of AI.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;ğŸ§� Why Crawl4AI?&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Built for LLMs&lt;/strong&gt;: Creates smart, concise Markdown optimized for RAG and fine-tuning applications.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lightning Fast&lt;/strong&gt;: Delivers results 6x faster with real-time, cost-efficient performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible Browser Control&lt;/strong&gt;: Offers session management, proxies, and custom hooks for seamless data access.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Heuristic Intelligence&lt;/strong&gt;: Uses advanced algorithms for efficient extraction, reducing reliance on costly models.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source &amp;amp; Deployable&lt;/strong&gt;: Fully open-source with no API keysâ€”ready for Docker and cloud integration.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Thriving Community&lt;/strong&gt;: Actively maintained by a vibrant community and the #1 trending GitHub repository.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;ğŸš€ Quick Start&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Crawl4AI:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install the package
pip install -U crawl4ai

# For pre release versions
pip install crawl4ai --pre

# Run post-installation setup
crawl4ai-setup

# Verify your installation
crawl4ai-doctor
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you encounter any browser-related issues, you can install them manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python -m playwright install --with-deps chromium
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Run a simple web crawl with Python:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import asyncio
from crawl4ai import *

async def main():
    async with AsyncWebCrawler() as crawler:
        result = await crawler.arun(
            url="https://www.nbcnews.com/business",
        )
        print(result.markdown)

if __name__ == "__main__":
    asyncio.run(main())
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Or use the new command-line interface:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Basic crawl with markdown output
crwl https://www.nbcnews.com/business -o markdown

# Deep crawl with BFS strategy, max 10 pages
crwl https://docs.crawl4ai.com --deep-crawl bfs --max-pages 10

# Use LLM extraction with a specific question
crwl https://www.example.com/products -q "Extract all product prices"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;âœ¨ Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ“� &lt;strong&gt;Markdown Generation&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;ğŸ§¹ &lt;strong&gt;Clean Markdown&lt;/strong&gt;: Generates clean, structured Markdown with accurate formatting.&lt;/li&gt; 
  &lt;li&gt;ğŸ�¯ &lt;strong&gt;Fit Markdown&lt;/strong&gt;: Heuristic-based filtering to remove noise and irrelevant parts for AI-friendly processing.&lt;/li&gt; 
  &lt;li&gt;ğŸ”— &lt;strong&gt;Citations and References&lt;/strong&gt;: Converts page links into a numbered reference list with clean citations.&lt;/li&gt; 
  &lt;li&gt;ğŸ› ï¸� &lt;strong&gt;Custom Strategies&lt;/strong&gt;: Users can create their own Markdown generation strategies tailored to specific needs.&lt;/li&gt; 
  &lt;li&gt;ğŸ“š &lt;strong&gt;BM25 Algorithm&lt;/strong&gt;: Employs BM25-based filtering for extracting core information and removing irrelevant content.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ“Š &lt;strong&gt;Structured Data Extraction&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;ğŸ¤– &lt;strong&gt;LLM-Driven Extraction&lt;/strong&gt;: Supports all LLMs (open-source and proprietary) for structured data extraction.&lt;/li&gt; 
  &lt;li&gt;ğŸ§± &lt;strong&gt;Chunking Strategies&lt;/strong&gt;: Implements chunking (topic-based, regex, sentence-level) for targeted content processing.&lt;/li&gt; 
  &lt;li&gt;ğŸŒŒ &lt;strong&gt;Cosine Similarity&lt;/strong&gt;: Find relevant content chunks based on user queries for semantic extraction.&lt;/li&gt; 
  &lt;li&gt;ğŸ”� &lt;strong&gt;CSS-Based Extraction&lt;/strong&gt;: Fast schema-based data extraction using XPath and CSS selectors.&lt;/li&gt; 
  &lt;li&gt;ğŸ”§ &lt;strong&gt;Schema Definition&lt;/strong&gt;: Define custom schemas for extracting structured JSON from repetitive patterns.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸŒ� &lt;strong&gt;Browser Integration&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;ğŸ–¥ï¸� &lt;strong&gt;Managed Browser&lt;/strong&gt;: Use user-owned browsers with full control, avoiding bot detection.&lt;/li&gt; 
  &lt;li&gt;ğŸ”„ &lt;strong&gt;Remote Browser Control&lt;/strong&gt;: Connect to Chrome Developer Tools Protocol for remote, large-scale data extraction.&lt;/li&gt; 
  &lt;li&gt;ğŸ‘¤ &lt;strong&gt;Browser Profiler&lt;/strong&gt;: Create and manage persistent profiles with saved authentication states, cookies, and settings.&lt;/li&gt; 
  &lt;li&gt;ğŸ”’ &lt;strong&gt;Session Management&lt;/strong&gt;: Preserve browser states and reuse them for multi-step crawling.&lt;/li&gt; 
  &lt;li&gt;ğŸ§© &lt;strong&gt;Proxy Support&lt;/strong&gt;: Seamlessly connect to proxies with authentication for secure access.&lt;/li&gt; 
  &lt;li&gt;âš™ï¸� &lt;strong&gt;Full Browser Control&lt;/strong&gt;: Modify headers, cookies, user agents, and more for tailored crawling setups.&lt;/li&gt; 
  &lt;li&gt;ğŸŒ� &lt;strong&gt;Multi-Browser Support&lt;/strong&gt;: Compatible with Chromium, Firefox, and WebKit.&lt;/li&gt; 
  &lt;li&gt;ğŸ“� &lt;strong&gt;Dynamic Viewport Adjustment&lt;/strong&gt;: Automatically adjusts the browser viewport to match page content, ensuring complete rendering and capturing of all elements.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ”� &lt;strong&gt;Crawling &amp;amp; Scraping&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;ğŸ–¼ï¸� &lt;strong&gt;Media Support&lt;/strong&gt;: Extract images, audio, videos, and responsive image formats like &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;picture&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;ğŸš€ &lt;strong&gt;Dynamic Crawling&lt;/strong&gt;: Execute JS and wait for async or sync for dynamic content extraction.&lt;/li&gt; 
  &lt;li&gt;ğŸ“¸ &lt;strong&gt;Screenshots&lt;/strong&gt;: Capture page screenshots during crawling for debugging or analysis.&lt;/li&gt; 
  &lt;li&gt;ğŸ“‚ &lt;strong&gt;Raw Data Crawling&lt;/strong&gt;: Directly process raw HTML (&lt;code&gt;raw:&lt;/code&gt;) or local files (&lt;code&gt;file://&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;ğŸ”— &lt;strong&gt;Comprehensive Link Extraction&lt;/strong&gt;: Extracts internal, external links, and embedded iframe content.&lt;/li&gt; 
  &lt;li&gt;ğŸ› ï¸� &lt;strong&gt;Customizable Hooks&lt;/strong&gt;: Define hooks at every step to customize crawling behavior.&lt;/li&gt; 
  &lt;li&gt;ğŸ’¾ &lt;strong&gt;Caching&lt;/strong&gt;: Cache data for improved speed and to avoid redundant fetches.&lt;/li&gt; 
  &lt;li&gt;ğŸ“„ &lt;strong&gt;Metadata Extraction&lt;/strong&gt;: Retrieve structured metadata from web pages.&lt;/li&gt; 
  &lt;li&gt;ğŸ“¡ &lt;strong&gt;IFrame Content Extraction&lt;/strong&gt;: Seamless extraction from embedded iframe content.&lt;/li&gt; 
  &lt;li&gt;ğŸ•µï¸� &lt;strong&gt;Lazy Load Handling&lt;/strong&gt;: Waits for images to fully load, ensuring no content is missed due to lazy loading.&lt;/li&gt; 
  &lt;li&gt;ğŸ”„ &lt;strong&gt;Full-Page Scanning&lt;/strong&gt;: Simulates scrolling to load and capture all dynamic content, perfect for infinite scroll pages.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸš€ &lt;strong&gt;Deployment&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;ğŸ�³ &lt;strong&gt;Dockerized Setup&lt;/strong&gt;: Optimized Docker image with FastAPI server for easy deployment.&lt;/li&gt; 
  &lt;li&gt;ğŸ”‘ &lt;strong&gt;Secure Authentication&lt;/strong&gt;: Built-in JWT token authentication for API security.&lt;/li&gt; 
  &lt;li&gt;ğŸ”„ &lt;strong&gt;API Gateway&lt;/strong&gt;: One-click deployment with secure token authentication for API-based workflows.&lt;/li&gt; 
  &lt;li&gt;ğŸŒ� &lt;strong&gt;Scalable Architecture&lt;/strong&gt;: Designed for mass-scale production and optimized server performance.&lt;/li&gt; 
  &lt;li&gt;â˜�ï¸� &lt;strong&gt;Cloud Deployment&lt;/strong&gt;: Ready-to-deploy configurations for major cloud platforms.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ�¯ &lt;strong&gt;Additional Features&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;ğŸ•¶ï¸� &lt;strong&gt;Stealth Mode&lt;/strong&gt;: Avoid bot detection by mimicking real users.&lt;/li&gt; 
  &lt;li&gt;ğŸ�·ï¸� &lt;strong&gt;Tag-Based Content Extraction&lt;/strong&gt;: Refine crawling based on custom tags, headers, or metadata.&lt;/li&gt; 
  &lt;li&gt;ğŸ”— &lt;strong&gt;Link Analysis&lt;/strong&gt;: Extract and analyze all links for detailed data exploration.&lt;/li&gt; 
  &lt;li&gt;ğŸ›¡ï¸� &lt;strong&gt;Error Handling&lt;/strong&gt;: Robust error management for seamless execution.&lt;/li&gt; 
  &lt;li&gt;ğŸ”� &lt;strong&gt;CORS &amp;amp; Static Serving&lt;/strong&gt;: Supports filesystem-based caching and cross-origin requests.&lt;/li&gt; 
  &lt;li&gt;ğŸ“– &lt;strong&gt;Clear Documentation&lt;/strong&gt;: Simplified and updated guides for onboarding and advanced usage.&lt;/li&gt; 
  &lt;li&gt;ğŸ™Œ &lt;strong&gt;Community Recognition&lt;/strong&gt;: Acknowledges contributors and pull requests for transparency.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Try it Now!&lt;/h2&gt; 
&lt;p&gt;âœ¨ Play around with this &lt;a href="https://colab.research.google.com/drive/1SgRPrByQLzjRfwoRNq1wSGE9nYY_EE8C?usp=sharing"&gt;&lt;img src="https://colab.research.google.com/assets/colab-badge.svg?sanitize=true" alt="Open In Colab"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;âœ¨ Visit our &lt;a href="https://docs.crawl4ai.com/"&gt;Documentation Website&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation ğŸ› ï¸�&lt;/h2&gt; 
&lt;p&gt;Crawl4AI offers flexible installation options to suit various use cases. You can install it as a Python package or use Docker.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ�� &lt;strong&gt;Using pip&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Choose the installation option that best fits your needs:&lt;/p&gt; 
 &lt;h3&gt;Basic Installation&lt;/h3&gt; 
 &lt;p&gt;For basic web crawling and scraping tasks:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip install crawl4ai
crawl4ai-setup # Setup the browser
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;By default, this will install the asynchronous version of Crawl4AI, using Playwright for web crawling.&lt;/p&gt; 
 &lt;p&gt;ğŸ‘‰ &lt;strong&gt;Note&lt;/strong&gt;: When you install Crawl4AI, the &lt;code&gt;crawl4ai-setup&lt;/code&gt; should automatically install and set up Playwright. However, if you encounter any Playwright-related errors, you can manually install it using one of these methods:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Through the command line:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;playwright install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;If the above doesn't work, try this more specific command:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;python -m playwright install chromium
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;This second method has proven to be more reliable in some cases.&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;h3&gt;Installation with Synchronous Version&lt;/h3&gt; 
 &lt;p&gt;The sync version is deprecated and will be removed in future versions. If you need the synchronous version using Selenium:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip install crawl4ai[sync]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr&gt; 
 &lt;h3&gt;Development Installation&lt;/h3&gt; 
 &lt;p&gt;For contributors who plan to modify the source code:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/unclecode/crawl4ai.git
cd crawl4ai
pip install -e .                    # Basic installation in editable mode
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Install optional features:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;pip install -e ".[torch]"           # With PyTorch features
pip install -e ".[transformer]"     # With Transformer features
pip install -e ".[cosine]"          # With cosine similarity features
pip install -e ".[sync]"            # With synchronous crawling (Selenium)
pip install -e ".[all]"             # Install all optional features
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ�³ &lt;strong&gt;Docker Deployment&lt;/strong&gt;&lt;/summary&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;ğŸš€ &lt;strong&gt;Now Available!&lt;/strong&gt; Our completely redesigned Docker implementation is here! This new solution makes deployment more efficient and seamless than ever.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;New Docker Features&lt;/h3&gt; 
 &lt;p&gt;The new Docker implementation includes:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Browser pooling&lt;/strong&gt; with page pre-warming for faster response times&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Interactive playground&lt;/strong&gt; to test and generate request code&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;MCP integration&lt;/strong&gt; for direct connection to AI tools like Claude Code&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Comprehensive API endpoints&lt;/strong&gt; including HTML extraction, screenshots, PDF generation, and JavaScript execution&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Multi-architecture support&lt;/strong&gt; with automatic detection (AMD64/ARM64)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Optimized resources&lt;/strong&gt; with improved memory management&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Getting Started&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Pull and run the latest release candidate
docker pull unclecode/crawl4ai:0.7.0
docker run -d -p 11235:11235 --name crawl4ai --shm-size=1g unclecode/crawl4ai:0.7.0

# Visit the playground at http://localhost:11235/playground
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For complete documentation, see our &lt;a href="https://docs.crawl4ai.com/core/docker-deployment/"&gt;Docker Deployment Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h3&gt;Quick Test&lt;/h3&gt; 
&lt;p&gt;Run a quick test (works for both Docker options):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import requests

# Submit a crawl job
response = requests.post(
    "http://localhost:11235/crawl",
    json={"urls": ["https://example.com"], "priority": 10}
)
if response.status_code == 200:
    print("Crawl job submitted successfully.")
    
if "results" in response.json():
    results = response.json()["results"]
    print("Crawl job completed. Results:")
    for result in results:
        print(result)
else:
    task_id = response.json()["task_id"]
    print(f"Crawl job submitted. Task ID:: {task_id}")
    result = requests.get(f"http://localhost:11235/task/{task_id}")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more examples, see our &lt;a href="https://github.com/unclecode/crawl4ai/raw/main/docs/examples/docker_example.py"&gt;Docker Examples&lt;/a&gt;. For advanced configuration, environment variables, and usage examples, see our &lt;a href="https://docs.crawl4ai.com/basic/docker-deployment/"&gt;Docker Deployment Guide&lt;/a&gt;.&lt;/p&gt;  
&lt;h2&gt;ğŸ”¬ Advanced Usage Examples ğŸ”¬&lt;/h2&gt; 
&lt;p&gt;You can check the project structure in the directory &lt;a href="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/examples"&gt;https://github.com/unclecode/crawl4ai/docs/examples&lt;/a&gt;. Over there, you can find a variety of examples; here, some popular examples are shared.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ“� &lt;strong&gt;Heuristic Markdown Generation with Clean and Fit Markdown&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import asyncio
from crawl4ai import AsyncWebCrawler, BrowserConfig, CrawlerRunConfig, CacheMode
from crawl4ai.content_filter_strategy import PruningContentFilter, BM25ContentFilter
from crawl4ai.markdown_generation_strategy import DefaultMarkdownGenerator

async def main():
    browser_config = BrowserConfig(
        headless=True,  
        verbose=True,
    )
    run_config = CrawlerRunConfig(
        cache_mode=CacheMode.ENABLED,
        markdown_generator=DefaultMarkdownGenerator(
            content_filter=PruningContentFilter(threshold=0.48, threshold_type="fixed", min_word_threshold=0)
        ),
        # markdown_generator=DefaultMarkdownGenerator(
        #     content_filter=BM25ContentFilter(user_query="WHEN_WE_FOCUS_BASED_ON_A_USER_QUERY", bm25_threshold=1.0)
        # ),
    )
    
    async with AsyncWebCrawler(config=browser_config) as crawler:
        result = await crawler.arun(
            url="https://docs.micronaut.io/4.7.6/guide/",
            config=run_config
        )
        print(len(result.markdown.raw_markdown))
        print(len(result.markdown.fit_markdown))

if __name__ == "__main__":
    asyncio.run(main())
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ–¥ï¸� &lt;strong&gt;Executing JavaScript &amp;amp; Extract Structured Data without LLMs&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import asyncio
from crawl4ai import AsyncWebCrawler, BrowserConfig, CrawlerRunConfig, CacheMode
from crawl4ai import JsonCssExtractionStrategy
import json

async def main():
    schema = {
    "name": "KidoCode Courses",
    "baseSelector": "section.charge-methodology .w-tab-content &amp;gt; div",
    "fields": [
        {
            "name": "section_title",
            "selector": "h3.heading-50",
            "type": "text",
        },
        {
            "name": "section_description",
            "selector": ".charge-content",
            "type": "text",
        },
        {
            "name": "course_name",
            "selector": ".text-block-93",
            "type": "text",
        },
        {
            "name": "course_description",
            "selector": ".course-content-text",
            "type": "text",
        },
        {
            "name": "course_icon",
            "selector": ".image-92",
            "type": "attribute",
            "attribute": "src"
        }
    }
}

    extraction_strategy = JsonCssExtractionStrategy(schema, verbose=True)

    browser_config = BrowserConfig(
        headless=False,
        verbose=True
    )
    run_config = CrawlerRunConfig(
        extraction_strategy=extraction_strategy,
        js_code=["""(async () =&amp;gt; {const tabs = document.querySelectorAll("section.charge-methodology .tabs-menu-3 &amp;gt; div");for(let tab of tabs) {tab.scrollIntoView();tab.click();await new Promise(r =&amp;gt; setTimeout(r, 500));}})();"""],
        cache_mode=CacheMode.BYPASS
    )
        
    async with AsyncWebCrawler(config=browser_config) as crawler:
        
        result = await crawler.arun(
            url="https://www.kidocode.com/degrees/technology",
            config=run_config
        )

        companies = json.loads(result.extracted_content)
        print(f"Successfully extracted {len(companies)} companies")
        print(json.dumps(companies[0], indent=2))


if __name__ == "__main__":
    asyncio.run(main())
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ“š &lt;strong&gt;Extracting Structured Data with LLMs&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import os
import asyncio
from crawl4ai import AsyncWebCrawler, BrowserConfig, CrawlerRunConfig, CacheMode, LLMConfig
from crawl4ai import LLMExtractionStrategy
from pydantic import BaseModel, Field

class OpenAIModelFee(BaseModel):
    model_name: str = Field(..., description="Name of the OpenAI model.")
    input_fee: str = Field(..., description="Fee for input token for the OpenAI model.")
    output_fee: str = Field(..., description="Fee for output token for the OpenAI model.")

async def main():
    browser_config = BrowserConfig(verbose=True)
    run_config = CrawlerRunConfig(
        word_count_threshold=1,
        extraction_strategy=LLMExtractionStrategy(
            # Here you can use any provider that Litellm library supports, for instance: ollama/qwen2
            # provider="ollama/qwen2", api_token="no-token", 
            llm_config = LLMConfig(provider="openai/gpt-4o", api_token=os.getenv('OPENAI_API_KEY')), 
            schema=OpenAIModelFee.schema(),
            extraction_type="schema",
            instruction="""From the crawled content, extract all mentioned model names along with their fees for input and output tokens. 
            Do not miss any models in the entire content. One extracted model JSON format should look like this: 
            {"model_name": "GPT-4", "input_fee": "US$10.00 / 1M tokens", "output_fee": "US$30.00 / 1M tokens"}."""
        ),            
        cache_mode=CacheMode.BYPASS,
    )
    
    async with AsyncWebCrawler(config=browser_config) as crawler:
        result = await crawler.arun(
            url='https://openai.com/api/pricing/',
            config=run_config
        )
        print(result.extracted_content)

if __name__ == "__main__":
    asyncio.run(main())
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ¤– &lt;strong&gt;Using You own Browser with Custom User Profile&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import os, sys
from pathlib import Path
import asyncio, time
from crawl4ai import AsyncWebCrawler, BrowserConfig, CrawlerRunConfig, CacheMode

async def test_news_crawl():
    # Create a persistent user data directory
    user_data_dir = os.path.join(Path.home(), ".crawl4ai", "browser_profile")
    os.makedirs(user_data_dir, exist_ok=True)

    browser_config = BrowserConfig(
        verbose=True,
        headless=True,
        user_data_dir=user_data_dir,
        use_persistent_context=True,
    )
    run_config = CrawlerRunConfig(
        cache_mode=CacheMode.BYPASS
    )
    
    async with AsyncWebCrawler(config=browser_config) as crawler:
        url = "ADDRESS_OF_A_CHALLENGING_WEBSITE"
        
        result = await crawler.arun(
            url,
            config=run_config,
            magic=True,
        )
        
        print(f"Successfully crawled {url}")
        print(f"Content length: {len(result.markdown)}")
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;âœ¨ Recent Updates&lt;/h2&gt; 
&lt;h3&gt;Version 0.7.0 Release Highlights - The Adaptive Intelligence Update&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ§  Adaptive Crawling&lt;/strong&gt;: Your crawler now learns and adapts to website patterns automatically:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;config = AdaptiveConfig(
    confidence_threshold=0.7, # Min confidence to stop crawling
    max_depth=5, # Maximum crawl depth
    max_pages=20, # Maximum number of pages to crawl
    strategy="statistical"
)

async with AsyncWebCrawler() as crawler:
    adaptive_crawler = AdaptiveCrawler(crawler, config)
    state = await adaptive_crawler.digest(
        start_url="https://news.example.com",
        query="latest news content"
    )
# Crawler learns patterns and improves extraction over time
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸŒŠ Virtual Scroll Support&lt;/strong&gt;: Complete content extraction from infinite scroll pages:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;scroll_config = VirtualScrollConfig(
    container_selector="[data-testid='feed']",
    scroll_count=20,
    scroll_by="container_height",
    wait_after_scroll=1.0
)

result = await crawler.arun(url, config=CrawlerRunConfig(
    virtual_scroll_config=scroll_config
))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ”— Intelligent Link Analysis&lt;/strong&gt;: 3-layer scoring system for smart link prioritization:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;link_config = LinkPreviewConfig(
    query="machine learning tutorials",
    score_threshold=0.3,
    concurrent_requests=10
)

result = await crawler.arun(url, config=CrawlerRunConfig(
    link_preview_config=link_config,
    score_links=True
))
# Links ranked by relevance and quality
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ�£ Async URL Seeder&lt;/strong&gt;: Discover thousands of URLs in seconds:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;seeder = AsyncUrlSeeder(SeedingConfig(
    source="sitemap+cc",
    pattern="*/blog/*",
    query="python tutorials",
    score_threshold=0.4
))

urls = await seeder.discover("https://example.com")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;âš¡ Performance Boost&lt;/strong&gt;: Up to 3x faster with optimized resource handling and memory efficiency&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read the full details in our &lt;a href="https://docs.crawl4ai.com/blog/release-v0.7.0"&gt;0.7.0 Release Notes&lt;/a&gt; or check the &lt;a href="https://github.com/unclecode/crawl4ai/raw/main/CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Previous Version: 0.6.0 Release Highlights&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸŒ� World-aware Crawling&lt;/strong&gt;: Set geolocation, language, and timezone for authentic locale-specific content:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;  crun_cfg = CrawlerRunConfig(
      url="https://browserleaks.com/geo",          # test page that shows your location
      locale="en-US",                              # Accept-Language &amp;amp; UI locale
      timezone_id="America/Los_Angeles",           # JS Date()/Intl timezone
      geolocation=GeolocationConfig(                 # override GPS coords
          latitude=34.0522,
          longitude=-118.2437,
          accuracy=10.0,
      )
  )
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ“Š Table-to-DataFrame Extraction&lt;/strong&gt;: Extract HTML tables directly to CSV or pandas DataFrames:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;  crawler = AsyncWebCrawler(config=browser_config)
  await crawler.start()

  try:
      # Set up scraping parameters
      crawl_config = CrawlerRunConfig(
          table_score_threshold=8,  # Strict table detection
      )

      # Execute market data extraction
      results: List[CrawlResult] = await crawler.arun(
          url="https://coinmarketcap.com/?page=1", config=crawl_config
      )

      # Process results
      raw_df = pd.DataFrame()
      for result in results:
          if result.success and result.media["tables"]:
              raw_df = pd.DataFrame(
                  result.media["tables"][0]["rows"],
                  columns=result.media["tables"][0]["headers"],
              )
              break
      print(raw_df.head())

  finally:
      await crawler.stop()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸš€ Browser Pooling&lt;/strong&gt;: Pages launch hot with pre-warmed browser instances for lower latency and memory usage&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ•¸ï¸� Network and Console Capture&lt;/strong&gt;: Full traffic logs and MHTML snapshots for debugging:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;crawler_config = CrawlerRunConfig(
    capture_network=True,
    capture_console=True,
    mhtml=True
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ”Œ MCP Integration&lt;/strong&gt;: Connect to AI tools like Claude Code through the Model Context Protocol&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Add Crawl4AI to Claude Code
claude mcp add --transport sse c4ai-sse http://localhost:11235/mcp/sse
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ–¥ï¸� Interactive Playground&lt;/strong&gt;: Test configurations and generate API requests with the built-in web interface at &lt;code&gt;http://localhost:11235//playground&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ�³ Revamped Docker Deployment&lt;/strong&gt;: Streamlined multi-architecture Docker image with improved resource efficiency&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ğŸ“± Multi-stage Build System&lt;/strong&gt;: Optimized Dockerfile with platform-specific performance enhancements&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Previous Version: 0.5.0 Major Release Highlights&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸš€ Deep Crawling System&lt;/strong&gt;: Explore websites beyond initial URLs with BFS, DFS, and BestFirst strategies&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;âš¡ Memory-Adaptive Dispatcher&lt;/strong&gt;: Dynamically adjusts concurrency based on system memory&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ”„ Multiple Crawling Strategies&lt;/strong&gt;: Browser-based and lightweight HTTP-only crawlers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ’» Command-Line Interface&lt;/strong&gt;: New &lt;code&gt;crwl&lt;/code&gt; CLI provides convenient terminal access&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ‘¤ Browser Profiler&lt;/strong&gt;: Create and manage persistent browser profiles&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ§  Crawl4AI Coding Assistant&lt;/strong&gt;: AI-powered coding assistant&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ��ï¸� LXML Scraping Mode&lt;/strong&gt;: Fast HTML parsing using the &lt;code&gt;lxml&lt;/code&gt; library&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸŒ� Proxy Rotation&lt;/strong&gt;: Built-in support for proxy switching&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ¤– LLM Content Filter&lt;/strong&gt;: Intelligent markdown generation using LLMs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ“„ PDF Processing&lt;/strong&gt;: Extract text, images, and metadata from PDF files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read the full details in our &lt;a href="https://docs.crawl4ai.com/blog/releases/0.5.0.html"&gt;0.5.0 Release Notes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Version Numbering in Crawl4AI&lt;/h2&gt; 
&lt;p&gt;Crawl4AI follows standard Python version numbering conventions (PEP 440) to help users understand the stability and features of each release.&lt;/p&gt; 
&lt;h3&gt;Version Numbers Explained&lt;/h3&gt; 
&lt;p&gt;Our version numbers follow this pattern: &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; (e.g., 0.4.3)&lt;/p&gt; 
&lt;h4&gt;Pre-release Versions&lt;/h4&gt; 
&lt;p&gt;We use different suffixes to indicate development stages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;dev&lt;/code&gt; (0.4.3dev1): Development versions, unstable&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;a&lt;/code&gt; (0.4.3a1): Alpha releases, experimental features&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;b&lt;/code&gt; (0.4.3b1): Beta releases, feature complete but needs testing&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rc&lt;/code&gt; (0.4.3): Release candidates, potential final version&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Installation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Regular installation (stable version):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U crawl4ai
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install pre-release versions:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;pip install crawl4ai --pre
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install specific version:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;pip install crawl4ai==0.4.3b1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Why Pre-releases?&lt;/h4&gt; 
&lt;p&gt;We use pre-releases to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Test new features in real-world scenarios&lt;/li&gt; 
 &lt;li&gt;Gather feedback before final releases&lt;/li&gt; 
 &lt;li&gt;Ensure stability for production users&lt;/li&gt; 
 &lt;li&gt;Allow early adopters to try new features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For production environments, we recommend using the stable version. For testing new features, you can opt-in to pre-releases using the &lt;code&gt;--pre&lt;/code&gt; flag.&lt;/p&gt; 
&lt;h2&gt;ğŸ“– Documentation &amp;amp; Roadmap&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;ğŸš¨ &lt;strong&gt;Documentation Update Alert&lt;/strong&gt;: We're undertaking a major documentation overhaul next week to reflect recent updates and improvements. Stay tuned for a more comprehensive and up-to-date guide!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For current documentation, including installation instructions, advanced features, and API reference, visit our &lt;a href="https://docs.crawl4ai.com/"&gt;Documentation Website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To check our development plans and upcoming features, visit our &lt;a href="https://github.com/unclecode/crawl4ai/raw/main/ROADMAP.md"&gt;Roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ“ˆ &lt;strong&gt;Development TODOs&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; 0. Graph Crawler: Smart website traversal using graph search algorithms for comprehensive nested page extraction&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 1. Question-Based Crawler: Natural language driven web discovery and content extraction&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 2. Knowledge-Optimal Crawler: Smart crawling that maximizes knowledge while minimizing data extraction&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 3. Agentic Crawler: Autonomous system for complex multi-step crawling operations&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 4. Automated Schema Generator: Convert natural language to extraction schemas&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 5. Domain-Specific Scrapers: Pre-configured extractors for common platforms (academic, e-commerce)&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 6. Web Embedding Index: Semantic search infrastructure for crawled content&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 7. Interactive Playground: Web UI for testing, comparing strategies with AI assistance&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 8. Performance Monitor: Real-time insights into crawler operations&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 9. Cloud Integration: One-click deployment solutions across cloud providers&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 10. Sponsorship Program: Structured support system with tiered benefits&lt;/li&gt; 
  &lt;li&gt;&lt;input type="checkbox" disabled&gt; 11. Educational Content: "How to Crawl" video series and interactive tutorials&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;ğŸ¤� Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions from the open-source community. Check out our &lt;a href="https://github.com/unclecode/crawl4ai/raw/main/CONTRIBUTORS.md"&gt;contribution guidelines&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;I'll help modify the license section with badges. For the halftone effect, here's a version with it:&lt;/p&gt; 
&lt;p&gt;Here's the updated license section:&lt;/p&gt; 
&lt;h2&gt;ğŸ“„ License &amp;amp; Attribution&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the Apache License 2.0 with a required attribution clause. See the &lt;a href="https://github.com/unclecode/crawl4ai/raw/main/LICENSE"&gt;Apache 2.0 License&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h3&gt;Attribution Requirements&lt;/h3&gt; 
&lt;p&gt;When using Crawl4AI, you must include one of the following attribution methods:&lt;/p&gt; 
&lt;h4&gt;1. Badge Attribution (Recommended)&lt;/h4&gt; 
&lt;p&gt;Add one of these badges to your README, documentation, or website:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Theme&lt;/th&gt; 
   &lt;th&gt;Badge&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Disco Theme (Animated)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/unclecode/crawl4ai"&gt;&lt;img src="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/assets/powered-by-disco.svg?sanitize=true" alt="Powered by Crawl4AI" width="200"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Night Theme (Dark with Neon)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/unclecode/crawl4ai"&gt;&lt;img src="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/assets/powered-by-night.svg?sanitize=true" alt="Powered by Crawl4AI" width="200"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Dark Theme (Classic)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/unclecode/crawl4ai"&gt;&lt;img src="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/assets/powered-by-dark.svg?sanitize=true" alt="Powered by Crawl4AI" width="200"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Light Theme (Classic)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/unclecode/crawl4ai"&gt;&lt;img src="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/assets/powered-by-light.svg?sanitize=true" alt="Powered by Crawl4AI" width="200"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;HTML code for adding the badges:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!-- Disco Theme (Animated) --&amp;gt;
&amp;lt;a href="https://github.com/unclecode/crawl4ai"&amp;gt;
  &amp;lt;img src="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/assets/powered-by-disco.svg" alt="Powered by Crawl4AI" width="200"/&amp;gt;
&amp;lt;/a&amp;gt;

&amp;lt;!-- Night Theme (Dark with Neon) --&amp;gt;
&amp;lt;a href="https://github.com/unclecode/crawl4ai"&amp;gt;
  &amp;lt;img src="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/assets/powered-by-night.svg" alt="Powered by Crawl4AI" width="200"/&amp;gt;
&amp;lt;/a&amp;gt;

&amp;lt;!-- Dark Theme (Classic) --&amp;gt;
&amp;lt;a href="https://github.com/unclecode/crawl4ai"&amp;gt;
  &amp;lt;img src="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/assets/powered-by-dark.svg" alt="Powered by Crawl4AI" width="200"/&amp;gt;
&amp;lt;/a&amp;gt;

&amp;lt;!-- Light Theme (Classic) --&amp;gt;
&amp;lt;a href="https://github.com/unclecode/crawl4ai"&amp;gt;
  &amp;lt;img src="https://raw.githubusercontent.com/unclecode/crawl4ai/main/docs/assets/powered-by-light.svg" alt="Powered by Crawl4AI" width="200"/&amp;gt;
&amp;lt;/a&amp;gt;

&amp;lt;!-- Simple Shield Badge --&amp;gt;
&amp;lt;a href="https://github.com/unclecode/crawl4ai"&amp;gt;
  &amp;lt;img src="https://img.shields.io/badge/Powered%20by-Crawl4AI-blue?style=flat-square" alt="Powered by Crawl4AI"/&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. Text Attribution&lt;/h4&gt; 
&lt;p&gt;Add this line to your documentation:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;This project uses Crawl4AI (https://github.com/unclecode/crawl4ai) for web data extraction.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ğŸ“š Citation&lt;/h2&gt; 
&lt;p&gt;If you use Crawl4AI in your research or project, please cite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{crawl4ai2024,
  author = {UncleCode},
  title = {Crawl4AI: Open-source LLM Friendly Web Crawler &amp;amp; Scraper},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub Repository},
  howpublished = {\url{https://github.com/unclecode/crawl4ai}},
  commit = {Please use the commit hash you're working with}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Text citation format:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;UncleCode. (2024). Crawl4AI: Open-source LLM Friendly Web Crawler &amp;amp; Scraper [Computer software]. 
GitHub. https://github.com/unclecode/crawl4ai
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ğŸ“§ Contact&lt;/h2&gt; 
&lt;p&gt;For questions, suggestions, or feedback, feel free to reach out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GitHub: &lt;a href="https://github.com/unclecode"&gt;unclecode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Twitter: &lt;a href="https://twitter.com/unclecode"&gt;@unclecode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Website: &lt;a href="https://crawl4ai.com"&gt;crawl4ai.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Happy Crawling! ğŸ•¸ï¸�ğŸš€&lt;/p&gt; 
&lt;h2&gt;ğŸ—¾ Mission&lt;/h2&gt; 
&lt;p&gt;Our mission is to unlock the value of personal and enterprise data by transforming digital footprints into structured, tradeable assets. Crawl4AI empowers individuals and organizations with open-source tools to extract and structure data, fostering a shared data economy.&lt;/p&gt; 
&lt;p&gt;We envision a future where AI is powered by real human knowledge, ensuring data creators directly benefit from their contributions. By democratizing data and enabling ethical sharing, we are laying the foundation for authentic AI advancement.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ”‘ &lt;strong&gt;Key Opportunities&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Data Capitalization&lt;/strong&gt;: Transform digital footprints into measurable, valuable assets.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Authentic AI Data&lt;/strong&gt;: Provide AI systems with real human insights.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Shared Economy&lt;/strong&gt;: Create a fair data marketplace that benefits data creators.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸš€ &lt;strong&gt;Development Pathway&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;Open-Source Tools&lt;/strong&gt;: Community-driven platforms for transparent data extraction.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Digital Asset Structuring&lt;/strong&gt;: Tools to organize and value digital knowledge.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Ethical Data Marketplace&lt;/strong&gt;: A secure, fair platform for exchanging structured data.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;For more details, see our &lt;a href="https://raw.githubusercontent.com/unclecode/crawl4ai/main/MISSION.md"&gt;full mission statement&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#unclecode/crawl4ai&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=unclecode/crawl4ai&amp;amp;type=Date" alt="Star History Chart"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>roboflow/supervision</title>
      <link>https://github.com/roboflow/supervision</link>
      <description>&lt;p&gt;We write your reusable computer vision tools. ğŸ’œ&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt; &lt;a align="center" href="" target="https://supervision.roboflow.com"&gt; &lt;img width="100%" src="https://media.roboflow.com/open-source/supervision/rf-supervision-banner.png?updatedAt=1678995927529"&gt; &lt;/a&gt; &lt;/p&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;a href="https://github.com/roboflow/notebooks"&gt;notebooks&lt;/a&gt; | &lt;a href="https://github.com/roboflow/inference"&gt;inference&lt;/a&gt; | &lt;a href="https://github.com/autodistill/autodistill"&gt;autodistill&lt;/a&gt; | &lt;a href="https://github.com/roboflow/multimodal-maestro"&gt;maestro&lt;/a&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;a href="https://badge.fury.io/py/supervision"&gt;&lt;img src="https://badge.fury.io/py/supervision.svg?sanitize=true" alt="version"&gt;&lt;/a&gt; &lt;a href="https://pypistats.org/packages/supervision"&gt;&lt;img src="https://img.shields.io/pypi/dm/supervision" alt="downloads"&gt;&lt;/a&gt; &lt;a href="https://snyk.io/advisor/python/supervision"&gt;&lt;img src="https://snyk.io/advisor/python/supervision/badge.svg?sanitize=true" alt="snyk"&gt;&lt;/a&gt; &lt;a href="https://github.com/roboflow/supervision/raw/main/LICENSE.md"&gt;&lt;img src="https://img.shields.io/pypi/l/supervision" alt="license"&gt;&lt;/a&gt; &lt;a href="https://badge.fury.io/py/supervision"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/supervision" alt="python-version"&gt;&lt;/a&gt; &lt;a href="https://colab.research.google.com/github/roboflow/supervision/blob/main/demo.ipynb"&gt;&lt;img src="https://colab.research.google.com/assets/colab-badge.svg?sanitize=true" alt="colab"&gt;&lt;/a&gt; &lt;a href="https://huggingface.co/spaces/Roboflow/Annotators"&gt;&lt;img src="https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue" alt="gradio"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/GbfgXGJ8Bk"&gt;&lt;img src="https://img.shields.io/discord/1159501506232451173?logo=discord&amp;amp;label=discord&amp;amp;labelColor=fff&amp;amp;color=5865f2&amp;amp;link=https%3A%2F%2Fdiscord.gg%2FGbfgXGJ8Bk" alt="discord"&gt;&lt;/a&gt; &lt;a href="https://squidfunk.github.io/mkdocs-material/"&gt;&lt;img src="https://img.shields.io/badge/Material_for_MkDocs-526CFE?logo=MaterialForMkDocs&amp;amp;logoColor=white" alt="built-with-material-for-mkdocs"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;div align="center"&gt; 
  &lt;a href="https://trendshift.io/repositories/124" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/124" alt="roboflow%2Fsupervision | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h2&gt;ğŸ‘‹ hello&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;We write your reusable computer vision tools.&lt;/strong&gt; Whether you need to load your dataset from your hard drive, draw detections on an image or video, or count how many detections are in a zone. You can count on us! ğŸ¤�&lt;/p&gt; 
&lt;h2&gt;ğŸ’» install&lt;/h2&gt; 
&lt;p&gt;Pip install the supervision package in a &lt;a href="https://www.python.org/"&gt;&lt;strong&gt;Python&amp;gt;=3.9&lt;/strong&gt;&lt;/a&gt; environment.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install supervision
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read more about conda, mamba, and installing from source in our &lt;a href="https://roboflow.github.io/supervision/"&gt;guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;ğŸ”¥ quickstart&lt;/h2&gt; 
&lt;h3&gt;models&lt;/h3&gt; 
&lt;p&gt;Supervision was designed to be model agnostic. Just plug in any classification, detection, or segmentation model. For your convenience, we have created &lt;a href="https://supervision.roboflow.com/latest/detection/core/#detections"&gt;connectors&lt;/a&gt; for the most popular libraries like Ultralytics, Transformers, or MMDetection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import cv2
import supervision as sv
from ultralytics import YOLO

image = cv2.imread(...)
model = YOLO("yolov8s.pt")
result = model(image)[0]
detections = sv.Detections.from_ultralytics(result)

len(detections)
# 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;ğŸ‘‰ more model connectors&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;inference&lt;/p&gt; &lt;p&gt;Running with &lt;a href="https://github.com/roboflow/inference"&gt;Inference&lt;/a&gt; requires a &lt;a href="https://docs.roboflow.com/api-reference/authentication#retrieve-an-api-key"&gt;Roboflow API KEY&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;import cv2
import supervision as sv
from inference import get_model

image = cv2.imread(...)
model = get_model(model_id="yolov8s-640", api_key=&amp;lt;ROBOFLOW API KEY&amp;gt;)
result = model.infer(image)[0]
detections = sv.Detections.from_inference(result)

len(detections)
# 5
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;annotators&lt;/h3&gt; 
&lt;p&gt;Supervision offers a wide range of highly customizable &lt;a href="https://supervision.roboflow.com/latest/detection/annotators/"&gt;annotators&lt;/a&gt;, allowing you to compose the perfect visualization for your use case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import cv2
import supervision as sv

image = cv2.imread(...)
detections = sv.Detections(...)

box_annotator = sv.BoxAnnotator()
annotated_frame = box_annotator.annotate(
  scene=image.copy(),
  detections=detections)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/roboflow/supervision/assets/26109316/691e219c-0565-4403-9218-ab5644f39bce"&gt;https://github.com/roboflow/supervision/assets/26109316/691e219c-0565-4403-9218-ab5644f39bce&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;datasets&lt;/h3&gt; 
&lt;p&gt;Supervision provides a set of &lt;a href="https://supervision.roboflow.com/latest/datasets/core/"&gt;utils&lt;/a&gt; that allow you to load, split, merge, and save datasets in one of the supported formats.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import supervision as sv
from roboflow import Roboflow

project = Roboflow().workspace(&amp;lt;WORKSPACE_ID&amp;gt;).project(&amp;lt;PROJECT_ID&amp;gt;)
dataset = project.version(&amp;lt;PROJECT_VERSION&amp;gt;).download("coco")

ds = sv.DetectionDataset.from_coco(
    images_directory_path=f"{dataset.location}/train",
    annotations_path=f"{dataset.location}/train/_annotations.coco.json",
)

path, image, annotation = ds[0]
    # loads image on demand

for path, image, annotation in ds:
    # loads image on demand
&lt;/code&gt;&lt;/pre&gt; 
&lt;details close&gt; 
 &lt;summary&gt;ğŸ‘‰ more dataset utils&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;load&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;dataset = sv.DetectionDataset.from_yolo(
    images_directory_path=...,
    annotations_directory_path=...,
    data_yaml_path=...
)

dataset = sv.DetectionDataset.from_pascal_voc(
    images_directory_path=...,
    annotations_directory_path=...
)

dataset = sv.DetectionDataset.from_coco(
    images_directory_path=...,
    annotations_path=...
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;split&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;train_dataset, test_dataset = dataset.split(split_ratio=0.7)
test_dataset, valid_dataset = test_dataset.split(split_ratio=0.5)

len(train_dataset), len(test_dataset), len(valid_dataset)
# (700, 150, 150)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;merge&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;ds_1 = sv.DetectionDataset(...)
len(ds_1)
# 100
ds_1.classes
# ['dog', 'person']

ds_2 = sv.DetectionDataset(...)
len(ds_2)
# 200
ds_2.classes
# ['cat']

ds_merged = sv.DetectionDataset.merge([ds_1, ds_2])
len(ds_merged)
# 300
ds_merged.classes
# ['cat', 'dog', 'person']
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;save&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;dataset.as_yolo(
    images_directory_path=...,
    annotations_directory_path=...,
    data_yaml_path=...
)

dataset.as_pascal_voc(
    images_directory_path=...,
    annotations_directory_path=...
)

dataset.as_coco(
    images_directory_path=...,
    annotations_path=...
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;convert&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;sv.DetectionDataset.from_yolo(
    images_directory_path=...,
    annotations_directory_path=...,
    data_yaml_path=...
).as_pascal_voc(
    images_directory_path=...,
    annotations_directory_path=...
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;ğŸ�¬ tutorials&lt;/h2&gt; 
&lt;p&gt;Want to learn how to use Supervision? Explore our &lt;a href="https://supervision.roboflow.com/develop/how_to/detect_and_annotate/"&gt;how-to guides&lt;/a&gt;, &lt;a href="https://github.com/roboflow/supervision/tree/develop/examples"&gt;end-to-end examples&lt;/a&gt;, &lt;a href="https://roboflow.github.io/cheatsheet-supervision/"&gt;cheatsheet&lt;/a&gt;, and &lt;a href="https://supervision.roboflow.com/develop/cookbooks/"&gt;cookbooks&lt;/a&gt;!&lt;/p&gt; 
&lt;br&gt; 
&lt;p align="left"&gt; &lt;a href="https://youtu.be/hAWpsIuem10" title="Dwell Time Analysis with Computer Vision | Real-Time Stream Processing"&gt;&lt;img src="https://github.com/SkalskiP/SkalskiP/assets/26109316/a742823d-c158-407d-b30f-063a5d11b4e1" alt="Dwell Time Analysis with Computer Vision | Real-Time Stream Processing" width="300px" align="left"&gt;&lt;/a&gt; &lt;a href="https://youtu.be/hAWpsIuem10" title="Dwell Time Analysis with Computer Vision | Real-Time Stream Processing"&gt;&lt;strong&gt;Dwell Time Analysis with Computer Vision | Real-Time Stream Processing&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;
&lt;div&gt;
 &lt;strong&gt;Created: 5 Apr 2024&lt;/strong&gt;
&lt;/div&gt; 
&lt;br&gt;Learn how to use computer vision to analyze wait times and optimize processes. This tutorial covers object detection, tracking, and calculating time spent in designated zones. Use these techniques to improve customer experience in retail, traffic management, or other scenarios.
&lt;p&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p align="left"&gt; &lt;a href="https://youtu.be/uWP6UjDeZvY" title="Speed Estimation &amp;amp; Vehicle Tracking | Computer Vision | Open Source"&gt;&lt;img src="https://github.com/SkalskiP/SkalskiP/assets/26109316/61a444c8-b135-48ce-b979-2a5ab47c5a91" alt="Speed Estimation &amp;amp; Vehicle Tracking | Computer Vision | Open Source" width="300px" align="left"&gt;&lt;/a&gt; &lt;a href="https://youtu.be/uWP6UjDeZvY" title="Speed Estimation &amp;amp; Vehicle Tracking | Computer Vision | Open Source"&gt;&lt;strong&gt;Speed Estimation &amp;amp; Vehicle Tracking | Computer Vision | Open Source&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;
&lt;div&gt;
 &lt;strong&gt;Created: 11 Jan 2024&lt;/strong&gt;
&lt;/div&gt; 
&lt;br&gt;Learn how to track and estimate the speed of vehicles using YOLO, ByteTrack, and Roboflow Inference. This comprehensive tutorial covers object detection, multi-object tracking, filtering detections, perspective transformation, speed estimation, visualization improvements, and more.
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;ğŸ’œ built with supervision&lt;/h2&gt; 
&lt;p&gt;Did you build something cool using supervision? &lt;a href="https://github.com/roboflow/supervision/discussions/categories/built-with-supervision"&gt;Let us know!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/26109316/207858600-ee862b22-0353-440b-ad85-caa0c4777904.mp4"&gt;https://user-images.githubusercontent.com/26109316/207858600-ee862b22-0353-440b-ad85-caa0c4777904.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/roboflow/supervision/assets/26109316/c9436828-9fbf-4c25-ae8c-60e9c81b3900"&gt;https://github.com/roboflow/supervision/assets/26109316/c9436828-9fbf-4c25-ae8c-60e9c81b3900&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/roboflow/supervision/assets/26109316/3ac6982f-4943-4108-9b7f-51787ef1a69f"&gt;https://github.com/roboflow/supervision/assets/26109316/3ac6982f-4943-4108-9b7f-51787ef1a69f&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;ğŸ“š documentation&lt;/h2&gt; 
&lt;p&gt;Visit our &lt;a href="https://roboflow.github.io/supervision"&gt;documentation&lt;/a&gt; page to learn how supervision can help you build computer vision applications faster and more reliably.&lt;/p&gt; 
&lt;h2&gt;ğŸ�† contribution&lt;/h2&gt; 
&lt;p&gt;We love your input! Please see our &lt;a href="https://github.com/roboflow/supervision/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to get started. Thank you ğŸ™� to all our contributors!&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/roboflow/supervision/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=roboflow/supervision"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;div align="center"&gt; 
 &lt;div align="center"&gt; 
  &lt;a href="https://youtube.com/roboflow"&gt; &lt;img src="https://media.roboflow.com/notebooks/template/icons/purple/youtube.png?ik-sdk-version=javascript-1.4.3&amp;amp;updatedAt=1672949634652" width="3%"&gt; &lt;/a&gt; 
  &lt;img src="https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png" width="3%"&gt; 
  &lt;a href="https://roboflow.com"&gt; &lt;img src="https://media.roboflow.com/notebooks/template/icons/purple/roboflow-app.png?ik-sdk-version=javascript-1.4.3&amp;amp;updatedAt=1672949746649" width="3%"&gt; &lt;/a&gt; 
  &lt;img src="https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png" width="3%"&gt; 
  &lt;a href="https://www.linkedin.com/company/roboflow-ai/"&gt; &lt;img src="https://media.roboflow.com/notebooks/template/icons/purple/linkedin.png?ik-sdk-version=javascript-1.4.3&amp;amp;updatedAt=1672949633691" width="3%"&gt; &lt;/a&gt; 
  &lt;img src="https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png" width="3%"&gt; 
  &lt;a href="https://docs.roboflow.com"&gt; &lt;img src="https://media.roboflow.com/notebooks/template/icons/purple/knowledge.png?ik-sdk-version=javascript-1.4.3&amp;amp;updatedAt=1672949634511" width="3%"&gt; &lt;/a&gt; 
  &lt;img src="https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png" width="3%"&gt; 
  &lt;a href="https://discuss.roboflow.com"&gt; &lt;img src="https://media.roboflow.com/notebooks/template/icons/purple/forum.png?ik-sdk-version=javascript-1.4.3&amp;amp;updatedAt=1672949633584" width="3%"&gt; &lt;img src="https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png" width="3%"&gt; &lt;/a&gt;
  &lt;a href="https://blog.roboflow.com"&gt; &lt;img src="https://media.roboflow.com/notebooks/template/icons/purple/blog.png?ik-sdk-version=javascript-1.4.3&amp;amp;updatedAt=1672949633605" width="3%"&gt; &lt;/a&gt;  
 &lt;/div&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>OpenBB-finance/OpenBB</title>
      <link>https://github.com/OpenBB-finance/OpenBB</link>
      <description>&lt;p&gt;Investment Research for Everyone, Everywhere.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; 
&lt;img src="https://github.com/OpenBB-finance/OpenBB/raw/develop/images/platform-light.svg?raw=true#gh-light-mode-only" alt="OpenBB Platform logo" width="600"&gt; 
&lt;img src="https://github.com/OpenBB-finance/OpenBB/raw/develop/images/platform-dark.svg?raw=true#gh-dark-mode-only" alt="OpenBB Platform logo" width="600"&gt; 
&lt;br&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;a href="https://x.com/openbb_finance"&gt;&lt;img src="https://img.shields.io/twitter/url/https/twitter.com/openbb_finance.svg?style=social&amp;amp;label=Follow%20%40openbb_finance" alt="Twitter"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/xPHTuHCmuV"&gt;&lt;img src="https://img.shields.io/discord/831165782750789672" alt="Discord Shield"&gt;&lt;/a&gt; &lt;a href="https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/OpenBB-finance/OpenBB"&gt;&lt;img src="https://img.shields.io/static/v1?label=Dev%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode" alt="Open in Dev Containers"&gt;&lt;/a&gt; &lt;a href="https://codespaces.new/OpenBB-finance/OpenBB"&gt; &lt;img src="https://github.com/codespaces/badge.svg?sanitize=true" height="20"&gt; &lt;/a&gt; &lt;a target="_blank" href="https://colab.research.google.com/github/OpenBB-finance/OpenBB/blob/develop/examples/googleColab.ipynb"&gt; &lt;img src="https://colab.research.google.com/assets/colab-badge.svg?sanitize=true" alt="Open In Colab"&gt; &lt;/a&gt; &lt;a href="https://pypi.org/project/openbb/"&gt;&lt;img src="https://img.shields.io/pypi/v/openbb?color=blue&amp;amp;label=PyPI%20Package" alt="PyPI"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The first financial Platform that is open source.&lt;/p&gt; 
&lt;p&gt;The OpenBB Platform offers access to equity, options, crypto, forex, macro economy, fixed income, and more while also offering a broad range of extensions to enhance the user experience according to their needs.&lt;/p&gt; 
&lt;p&gt;Get started with: &lt;code&gt;pip install openbb&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from openbb import obb
output = obb.equity.price.historical("AAPL")
df = output.to_dataframe()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can sign up to the &lt;a href="https://my.openbb.co/login"&gt;OpenBB Hub&lt;/a&gt; to get the most out of the OpenBB ecosystem.&lt;/p&gt; 
&lt;p&gt;Data integrations available can be found here: &lt;a href="https://docs.openbb.co/platform/reference"&gt;https://docs.openbb.co/platform/reference&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;OpenBB Workspace&lt;/h2&gt; 
&lt;p&gt;While the OpenBB Platform is all about an integration to dozens of different data vendors, the interface is either Python or a CLI.&lt;/p&gt; 
&lt;p&gt;If you want an enterprise UI to visualize this datasets and use AI agents on top, you can find OpenBB Workspace at &lt;a href="https://pro.openbb.co"&gt;https://pro.openbb.co&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://pro.openbb.co"&gt; 
 &lt;div align="center"&gt; 
  &lt;img src="https://openbb-cms.directus.app/assets/f69b6aaf-0821-4bc8-a43c-715e03a924ef.png" alt="Logo" width="1000"&gt; 
 &lt;/div&gt; &lt;/a&gt; 
&lt;p&gt;Data integration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can learn more about adding data to the OpenBB workspace from the &lt;a href="https://docs.openbb.co/workspace"&gt;docs&lt;/a&gt; or &lt;a href="https://github.com/OpenBB-finance/backends-for-openbb"&gt;this open source repository&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;AI Agents integration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can learn more about adding AI agents to the OpenBB workspace from &lt;a href="https://github.com/OpenBB-finance/agents-for-openbb"&gt;this open source repository&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Integrating OpenBB Platform to the OpenBB Workspace&lt;/h3&gt; 
&lt;p&gt;Connect this library to the OpenBB Workspace with a few simple commands, in a Python (3.9.21 - 3.12) environment.&lt;/p&gt; 
&lt;h4&gt;Run OpenBB Platform backend&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the packages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install "openbb[all]"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Start the API server over localhost.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;openbb-api
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will launch a FastAPI server, via Uvicorn, at &lt;code&gt;127.0.0.1:6900&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can check that it works by going to &lt;a href="http://127.0.0.1:6900"&gt;http://127.0.0.1:6900&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Integrate OpenBB Platform backend to OpenBB Workspace&lt;/h4&gt; 
&lt;p&gt;Sign-in to the &lt;a href="https://pro.openbb.co/"&gt;OpenBB Workspace&lt;/a&gt;, and follow the following steps:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/75cffb4a-5e95-470a-b9d0-6ffd4067e069" alt="CleanShot 2025-05-17 at 09 51 56@2x"&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to the "Apps" tab&lt;/li&gt; 
 &lt;li&gt;Click on "Connect backend"&lt;/li&gt; 
 &lt;li&gt;Fill in the form with: Name: OpenBB Platform URL: &lt;a href="http://127.0.0.1:6900"&gt;http://127.0.0.1:6900&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Click on "Test". You should get a "Test successful" with the number of apps found.&lt;/li&gt; 
 &lt;li&gt;Click on "Add".&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;That's it.&lt;/p&gt; 
&lt;hr&gt; 
&lt;!-- TABLE OF CONTENTS --&gt; 
&lt;details closed="closed"&gt; 
 &lt;summary&gt;&lt;h2 style="display: inline-block"&gt;Table of Contents&lt;/h2&gt;&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenBB-finance/OpenBB/develop/#1-installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenBB-finance/OpenBB/develop/#2-contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenBB-finance/OpenBB/develop/#3-license"&gt;License&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenBB-finance/OpenBB/develop/#4-disclaimer"&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenBB-finance/OpenBB/develop/#5-contacts"&gt;Contacts&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenBB-finance/OpenBB/develop/#6-star-history"&gt;Star History&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/OpenBB-finance/OpenBB/develop/#7-contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h2&gt;1. Installation&lt;/h2&gt; 
&lt;p&gt;The OpenBB Platform can be installed as a &lt;a href="https://pypi.org/project/openbb/"&gt;PyPI package&lt;/a&gt; by running &lt;code&gt;pip install openbb&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;or by cloning the repository directly with &lt;code&gt;git clone https://github.com/OpenBB-finance/OpenBB.git&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Please find more about the installation process, in the &lt;a href="https://docs.openbb.co/platform/installation"&gt;OpenBB Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;OpenBB Platform CLI installation&lt;/h3&gt; 
&lt;p&gt;The OpenBB Platform CLI is a command-line interface that allows you to access the OpenBB Platform directly from your command line.&lt;/p&gt; 
&lt;p&gt;It can be installed by running &lt;code&gt;pip install openbb-cli&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;or by cloning the repository directly with &lt;code&gt;git clone https://github.com/OpenBB-finance/OpenBB.git&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Please find more about the installation process in the &lt;a href="https://docs.openbb.co/cli/installation"&gt;OpenBB Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;2. Contributing&lt;/h2&gt; 
&lt;p&gt;There are three main ways of contributing to this project. (Hopefully you have starred the project by now â­�ï¸�)&lt;/p&gt; 
&lt;h3&gt;Become a Contributor&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;More information on our &lt;a href="https://docs.openbb.co/platform/developer_guide/misc/contributing"&gt;Contributing Documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Create a GitHub ticket&lt;/h3&gt; 
&lt;p&gt;Before creating a ticket make sure the one you are creating doesn't exist already &lt;a href="https://github.com/OpenBB-finance/OpenBB/issues"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenBB-finance/OpenBB/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=%5BBug%5D"&gt;Report bug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenBB-finance/OpenBB/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=enhancement.md&amp;amp;title=%5BIMPROVE%5D"&gt;Suggest improvement&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenBB-finance/OpenBB/issues/new?assignees=&amp;amp;labels=new+feature&amp;amp;template=feature_request.md&amp;amp;title=%5BFR%5D"&gt;Request a feature&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Provide feedback&lt;/h3&gt; 
&lt;p&gt;We are most active on &lt;a href="https://openbb.co/discord"&gt;our Discord&lt;/a&gt;, but feel free to reach out to us in any of &lt;a href="https://openbb.co/links"&gt;our social media&lt;/a&gt; for feedback.&lt;/p&gt; 
&lt;h2&gt;3. License&lt;/h2&gt; 
&lt;p&gt;Distributed under the AGPLv3 License. See &lt;a href="https://github.com/OpenBB-finance/OpenBB/raw/main/LICENSE"&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;4. Disclaimer&lt;/h2&gt; 
&lt;p&gt;Trading in financial instruments involves high risks including the risk of losing some, or all, of your investment amount, and may not be suitable for all investors.&lt;/p&gt; 
&lt;p&gt;Before deciding to trade in a financial instrument you should be fully informed of the risks and costs associated with trading the financial markets, carefully consider your investment objectives, level of experience, and risk appetite, and seek professional advice where needed.&lt;/p&gt; 
&lt;p&gt;The data contained in the OpenBB Platform is not necessarily accurate.&lt;/p&gt; 
&lt;p&gt;OpenBB and any provider of the data contained in this website will not accept liability for any loss or damage as a result of your trading, or your reliance on the information displayed.&lt;/p&gt; 
&lt;p&gt;All names, logos, and brands of third parties that may be referenced in our sites, products or documentation are trademarks of their respective owners. Unless otherwise specified, OpenBB and its products and services are not endorsed by, sponsored by, or affiliated with these third parties.&lt;/p&gt; 
&lt;p&gt;Our use of these names, logos, and brands is for identification purposes only, and does not imply any such endorsement, sponsorship, or affiliation.&lt;/p&gt; 
&lt;h2&gt;5. Contacts&lt;/h2&gt; 
&lt;p&gt;If you have any questions about the platform or anything OpenBB, feel free to email us at &lt;code&gt;support@openbb.co&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;If you want to say hi, or are interested in partnering with us, feel free to reach us at &lt;code&gt;hello@openbb.co&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Any of our social media platforms: &lt;a href="https://openbb.co/links"&gt;openbb.co/links&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;6. Star History&lt;/h2&gt; 
&lt;p&gt;This is a proxy of our growth and that we are just getting started.&lt;/p&gt; 
&lt;p&gt;But for more metrics important to us check &lt;a href="https://openbb.co/open"&gt;openbb.co/open&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://api.star-history.com/svg?repos=openbb-finance/OpenBB&amp;amp;type=Date&amp;amp;theme=dark"&gt;&lt;img src="https://api.star-history.com/svg?repos=openbb-finance/OpenBB&amp;amp;type=Date&amp;amp;theme=dark" alt="Star History Chart"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;7. Contributors&lt;/h2&gt; 
&lt;p&gt;OpenBB wouldn't be OpenBB without you. If we are going to disrupt financial industry, every contribution counts. Thank you for being part of this journey.&lt;/p&gt; 
&lt;a href="https://github.com/OpenBB-finance/OpenBB/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=OpenBB-finance/OpenBB" width="800"&gt; &lt;/a&gt; 
&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt; 
&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt;</description>
    </item>
    
    <item>
      <title>myshell-ai/OpenVoice</title>
      <link>https://github.com/myshell-ai/OpenVoice</link>
      <description>&lt;p&gt;Instant voice cloning by MIT and MyShell. Audio foundation model.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;div&gt;
  &amp;nbsp;
 &lt;/div&gt; 
 &lt;img src="https://raw.githubusercontent.com/myshell-ai/OpenVoice/main/resources/openvoicelogo.jpg" width="400"&gt; 
 &lt;p&gt;&lt;a href="https://arxiv.org/abs/2312.01479"&gt;Paper&lt;/a&gt; | &lt;a href="https://research.myshell.ai/open-voice"&gt;Website&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href="https://trendshift.io/repositories/6161" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/6161" alt="myshell-ai%2FOpenVoice | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;h3&gt;OpenVoice V1&lt;/h3&gt; 
&lt;p&gt;As we detailed in our &lt;a href="https://arxiv.org/abs/2312.01479"&gt;paper&lt;/a&gt; and &lt;a href="https://research.myshell.ai/open-voice"&gt;website&lt;/a&gt;, the advantages of OpenVoice are three-fold:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Accurate Tone Color Cloning.&lt;/strong&gt; OpenVoice can accurately clone the reference tone color and generate speech in multiple languages and accents.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Flexible Voice Style Control.&lt;/strong&gt; OpenVoice enables granular control over voice styles, such as emotion and accent, as well as other style parameters including rhythm, pauses, and intonation.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. Zero-shot Cross-lingual Voice Cloning.&lt;/strong&gt; Neither of the language of the generated speech nor the language of the reference speech needs to be presented in the massive-speaker multi-lingual training dataset.&lt;/p&gt; 
&lt;h3&gt;OpenVoice V2&lt;/h3&gt; 
&lt;p&gt;In April 2024, we released OpenVoice V2, which includes all features in V1 and has:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Better Audio Quality.&lt;/strong&gt; OpenVoice V2 adopts a different training strategy that delivers better audio quality.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Native Multi-lingual Support.&lt;/strong&gt; English, Spanish, French, Chinese, Japanese and Korean are natively supported in OpenVoice V2.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. Free Commercial Use.&lt;/strong&gt; Starting from April 2024, both V2 and V1 are released under MIT License. Free for commercial use.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/myshell-ai/OpenVoice/assets/40556743/3cba936f-82bf-476c-9e52-09f0f417bb2f"&gt;Video&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenVoice has been powering the instant voice cloning capability of &lt;a href="https://app.myshell.ai/explore"&gt;myshell.ai&lt;/a&gt; since May 2023. Until Nov 2023, the voice cloning model has been used tens of millions of times by users worldwide, and witnessed the explosive user growth on the platform.&lt;/p&gt; 
&lt;h2&gt;Main Contributors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.qinzy.tech"&gt;Zengyi Qin&lt;/a&gt; at MIT&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://wl-zhao.github.io"&gt;Wenliang Zhao&lt;/a&gt; at Tsinghua University&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://yuxumin.github.io"&gt;Xumin Yu&lt;/a&gt; at Tsinghua University&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/ethan_myshell"&gt;Ethan Sun&lt;/a&gt; at MyShell&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Use&lt;/h2&gt; 
&lt;p&gt;Please see &lt;a href="https://raw.githubusercontent.com/myshell-ai/OpenVoice/main/docs/USAGE.md"&gt;usage&lt;/a&gt; for detailed instructions.&lt;/p&gt; 
&lt;h2&gt;Common Issues&lt;/h2&gt; 
&lt;p&gt;Please see &lt;a href="https://raw.githubusercontent.com/myshell-ai/OpenVoice/main/docs/QA.md"&gt;QA&lt;/a&gt; for common questions and answers. We will regularly update the question and answer list.&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;@article{qin2023openvoice,
  title={OpenVoice: Versatile Instant Voice Cloning},
  author={Qin, Zengyi and Zhao, Wenliang and Yu, Xumin and Sun, Xin},
  journal={arXiv preprint arXiv:2312.01479},
  year={2023}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;OpenVoice V1 and V2 are MIT Licensed. Free for both commercial and research use.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;This implementation is based on several excellent projects, &lt;a href="https://github.com/coqui-ai/TTS"&gt;TTS&lt;/a&gt;, &lt;a href="https://github.com/jaywalnut310/vits"&gt;VITS&lt;/a&gt;, and &lt;a href="https://github.com/daniilrobnikov/vits2"&gt;VITS2&lt;/a&gt;. Thanks for their awesome work!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>virattt/ai-hedge-fund</title>
      <link>https://github.com/virattt/ai-hedge-fund</link>
      <description>&lt;p&gt;An AI Hedge Fund Team&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Hedge Fund&lt;/h1&gt; 
&lt;p&gt;This is a proof of concept for an AI-powered hedge fund. The goal of this project is to explore the use of AI to make trading decisions. This project is for &lt;strong&gt;educational&lt;/strong&gt; purposes only and is not intended for real trading or investment.&lt;/p&gt; 
&lt;p&gt;This system employs several agents working together:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Aswath Damodaran Agent - The Dean of Valuation, focuses on story, numbers, and disciplined valuation&lt;/li&gt; 
 &lt;li&gt;Ben Graham Agent - The godfather of value investing, only buys hidden gems with a margin of safety&lt;/li&gt; 
 &lt;li&gt;Bill Ackman Agent - An activist investor, takes bold positions and pushes for change&lt;/li&gt; 
 &lt;li&gt;Cathie Wood Agent - The queen of growth investing, believes in the power of innovation and disruption&lt;/li&gt; 
 &lt;li&gt;Charlie Munger Agent - Warren Buffett's partner, only buys wonderful businesses at fair prices&lt;/li&gt; 
 &lt;li&gt;Michael Burry Agent - The Big Short contrarian who hunts for deep value&lt;/li&gt; 
 &lt;li&gt;Peter Lynch Agent - Practical investor who seeks "ten-baggers" in everyday businesses&lt;/li&gt; 
 &lt;li&gt;Phil Fisher Agent - Meticulous growth investor who uses deep "scuttlebutt" research&lt;/li&gt; 
 &lt;li&gt;Rakesh Jhunjhunwala Agent - The Big Bull of India&lt;/li&gt; 
 &lt;li&gt;Stanley Druckenmiller Agent - Macro legend who hunts for asymmetric opportunities with growth potential&lt;/li&gt; 
 &lt;li&gt;Warren Buffett Agent - The oracle of Omaha, seeks wonderful companies at a fair price&lt;/li&gt; 
 &lt;li&gt;Valuation Agent - Calculates the intrinsic value of a stock and generates trading signals&lt;/li&gt; 
 &lt;li&gt;Sentiment Agent - Analyzes market sentiment and generates trading signals&lt;/li&gt; 
 &lt;li&gt;Fundamentals Agent - Analyzes fundamental data and generates trading signals&lt;/li&gt; 
 &lt;li&gt;Technicals Agent - Analyzes technical indicators and generates trading signals&lt;/li&gt; 
 &lt;li&gt;Risk Manager - Calculates risk metrics and sets position limits&lt;/li&gt; 
 &lt;li&gt;Portfolio Manager - Makes final trading decisions and generates orders&lt;/li&gt; 
&lt;/ol&gt; 
&lt;img width="1042" alt="Screenshot 2025-03-22 at 6 19 07 PM" src="https://github.com/user-attachments/assets/cbae3dcf-b571-490d-b0ad-3f0f035ac0d4"&gt; 
&lt;p&gt;Note: the system does not actually make any trades.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://twitter.com/virattt"&gt;&lt;img src="https://img.shields.io/twitter/follow/virattt?style=social" alt="Twitter Follow"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;This project is for &lt;strong&gt;educational and research purposes only&lt;/strong&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not intended for real trading or investment&lt;/li&gt; 
 &lt;li&gt;No investment advice or guarantees provided&lt;/li&gt; 
 &lt;li&gt;Creator assumes no liability for financial losses&lt;/li&gt; 
 &lt;li&gt;Consult a financial advisor for investment decisions&lt;/li&gt; 
 &lt;li&gt;Past performance does not indicate future results&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By using this software, you agree to use it solely for learning purposes.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#how-to-install"&gt;How to Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#how-to-run"&gt;How to Run&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#%EF%B8%8F-command-line-interface"&gt;âŒ¨ï¸� Command Line Interface&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#%EF%B8%8F-web-application"&gt;ğŸ–¥ï¸� Web Application (NEW!)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#feature-requests"&gt;Feature Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Install&lt;/h2&gt; 
&lt;p&gt;Before you can run the AI Hedge Fund, you'll need to install it and set up your API keys. These steps are common to both the full-stack web application and command line interface.&lt;/p&gt; 
&lt;h3&gt;1. Clone the Repository&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/virattt/ai-hedge-fund.git
cd ai-hedge-fund
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Set Up Your API Keys&lt;/h3&gt; 
&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file for your API keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create .env file for your API keys (in the root directory)
cp .env.example .env
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open and edit the &lt;code&gt;.env&lt;/code&gt; file to add your API keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# For running LLMs hosted by openai (gpt-4o, gpt-4o-mini, etc.)
OPENAI_API_KEY=your-openai-api-key

# For running LLMs hosted by groq (deepseek, llama3, etc.)
GROQ_API_KEY=your-groq-api-key

# For getting financial data to power the hedge fund
FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: You must set at least one LLM API key (&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;, &lt;code&gt;GROQ_API_KEY&lt;/code&gt;, &lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;, or &lt;code&gt;DEEPSEEK_API_KEY&lt;/code&gt;) for the hedge fund to work.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Financial Data&lt;/strong&gt;: Data for AAPL, GOOGL, MSFT, NVDA, and TSLA is free and does not require an API key. For any other ticker, you will need to set the &lt;code&gt;FINANCIAL_DATASETS_API_KEY&lt;/code&gt; in the .env file.&lt;/p&gt; 
&lt;h2&gt;How to Run&lt;/h2&gt; 
&lt;h3&gt;âŒ¨ï¸� Command Line Interface&lt;/h3&gt; 
&lt;p&gt;For users who prefer working with command line tools, you can run the AI Hedge Fund directly via terminal. This approach offers more granular control and is useful for automation, scripting, and integration purposes.&lt;/p&gt; 
&lt;img width="992" alt="Screenshot 2025-01-06 at 5 50 17 PM" src="https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b"&gt; 
&lt;p&gt;Choose one of the following installation methods:&lt;/p&gt; 
&lt;h4&gt;Using Poetry&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Poetry (if not already installed):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSL https://install.python-poetry.org | python3 -
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Install dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using Docker&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Make sure you have Docker installed on your system. If not, you can download it from &lt;a href="https://www.docker.com/get-started"&gt;Docker's official website&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Navigate to the docker directory:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd docker
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Build the Docker image:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# On Linux/Mac:
./run.sh build

# On Windows:
run.bat build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running the AI Hedge Fund (with Poetry)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry run python src/main.py --ticker AAPL,MSFT,NVDA
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running the AI Hedge Fund (with Docker)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Navigate to the docker directory first
cd docker

# On Linux/Mac:
./run.sh --ticker AAPL,MSFT,NVDA main

# On Windows:
run.bat --ticker AAPL,MSFT,NVDA main
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also specify a &lt;code&gt;--ollama&lt;/code&gt; flag to run the AI hedge fund using local LLMs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With Poetry:
poetry run python src/main.py --ticker AAPL,MSFT,NVDA --ollama

# With Docker (from docker/ directory):
# On Linux/Mac:
./run.sh --ticker AAPL,MSFT,NVDA --ollama main

# On Windows:
run.bat --ticker AAPL,MSFT,NVDA --ollama main
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also specify a &lt;code&gt;--show-reasoning&lt;/code&gt; flag to print the reasoning of each agent to the console.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With Poetry:
poetry run python src/main.py --ticker AAPL,MSFT,NVDA --show-reasoning

# With Docker (from docker/ directory):
# On Linux/Mac:
./run.sh --ticker AAPL,MSFT,NVDA --show-reasoning main

# On Windows:
run.bat --ticker AAPL,MSFT,NVDA --show-reasoning main
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can optionally specify the start and end dates to make decisions for a specific time period.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With Poetry:
poetry run python src/main.py --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 

# With Docker (from docker/ directory):
# On Linux/Mac:
./run.sh --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 main

# On Windows:
run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 main
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running the Backtester (with Poetry)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running the Backtester (with Docker)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Navigate to the docker directory first
cd docker

# On Linux/Mac:
./run.sh --ticker AAPL,MSFT,NVDA backtest

# On Windows:
run.bat --ticker AAPL,MSFT,NVDA backtest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example Output:&lt;/strong&gt; &lt;img width="941" alt="Screenshot 2025-01-06 at 5 47 52 PM" src="https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47"&gt;&lt;/p&gt; 
&lt;p&gt;You can optionally specify the start and end dates to backtest over a specific time period.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With Poetry:
poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01

# With Docker (from docker/ directory):
# On Linux/Mac:
./run.sh --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest

# On Windows:
run.bat --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 backtest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also specify a &lt;code&gt;--ollama&lt;/code&gt; flag to run the backtester using local LLMs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# With Poetry:
poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama

# With Docker (from docker/ directory):
# On Linux/Mac:
./run.sh --ticker AAPL,MSFT,NVDA --ollama backtest

# On Windows:
run.bat --ticker AAPL,MSFT,NVDA --ollama backtest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ğŸ–¥ï¸� Web Application&lt;/h3&gt; 
&lt;p&gt;The new way to run the AI Hedge Fund is through our web application that provides a user-friendly interface. &lt;strong&gt;This is recommended for most users, especially those who prefer visual interfaces over command line tools.&lt;/strong&gt;&lt;/p&gt; 
&lt;img width="1721" alt="Screenshot 2025-06-28 at 6 41 03â€¯PM" src="https://github.com/user-attachments/assets/b95ab696-c9f4-416c-9ad1-51feb1f5374b"&gt; 
&lt;h4&gt;For Mac/Linux:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd app &amp;amp;&amp;amp; ./run.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you get a "permission denied" error, run this first:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd app &amp;amp;&amp;amp; chmod +x run.sh &amp;amp;&amp;amp; ./run.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;For Windows:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Go to /app directory
cd app

# Run the app
\.run.bat
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;That's it!&lt;/strong&gt; These scripts will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check for required dependencies (Node.js, Python, Poetry)&lt;/li&gt; 
 &lt;li&gt;Install all dependencies automatically&lt;/li&gt; 
 &lt;li&gt;Start both frontend and backend services&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automatically open your web browser&lt;/strong&gt; to the application&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Detailed Setup Instructions&lt;/h4&gt; 
&lt;p&gt;For detailed setup instructions, troubleshooting, and advanced configuration options, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/app/README.md"&gt;Full-Stack App Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/app/frontend/README.md"&gt;Frontend Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/app/backend/README.md"&gt;Backend Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create a feature branch&lt;/li&gt; 
 &lt;li&gt;Commit your changes&lt;/li&gt; 
 &lt;li&gt;Push to the branch&lt;/li&gt; 
 &lt;li&gt;Create a Pull Request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Please keep your pull requests small and focused. This will make it easier to review and merge.&lt;/p&gt; 
&lt;h2&gt;Feature Requests&lt;/h2&gt; 
&lt;p&gt;If you have a feature request, please open an &lt;a href="https://github.com/virattt/ai-hedge-fund/issues"&gt;issue&lt;/a&gt; and make sure it is tagged with &lt;code&gt;enhancement&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>frappe/hrms</title>
      <link>https://github.com/frappe/hrms</link>
      <description>&lt;p&gt;Open Source HR and Payroll Software&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://frappe.io/hr"&gt; &lt;img src="https://raw.githubusercontent.com/frappe/hrms/develop/.github/frappe-hr-logo.png" height="80px" width="80px" alt="Frappe HR Logo"&gt; &lt;/a&gt; 
 &lt;h2&gt;Frappe HR&lt;/h2&gt; 
 &lt;p align="center"&gt; &lt;/p&gt;
 &lt;p&gt;Open Source, modern, and easy-to-use HR and Payroll Software&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/frappe/hrms/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/frappe/hrms/actions/workflows/ci.yml/badge.svg?branch=develop" alt="CI"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/frappe/hrms"&gt;&lt;img src="https://codecov.io/gh/frappe/hrms/branch/develop/graph/badge.svg?token=0TwvyUg3I5" alt="codecov"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/frappe/hrms/develop/.github/hrms-hero.png"&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://frappe.io/hr"&gt;Website&lt;/a&gt; - 
 &lt;a href="https://docs.frappe.io/hr/introduction"&gt;Documentation&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Frappe HR&lt;/h2&gt; 
&lt;p&gt;Frappe HR has everything you need to drive excellence within the company. It's a complete HRMS solution with over 13 different modules right from Employee Management, Onboarding, Leaves, to Payroll, Taxation, and more!&lt;/p&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;When Frappe team started growing in terms of size, we needed an open-source HR and Payroll software. We didn't find any "true" open-source HR software out there and so decided to build one ourselves. Initially, it was a set of modules within ERPNext but version 14 onwards, as the modules became more mature, Frappe HR was created as a separate product.&lt;/p&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Employee Lifecycle&lt;/strong&gt;: From onboarding employees, managing promotions and transfers, all the way to documenting feedback with exit interviews, make life easier for employees throughout their life cycle.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Leave and Attendance&lt;/strong&gt;: Configure leave policies, pull regional holidays with a click, check-in and check-out with geolocation capturing, track leave balances and attendance with reports.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Expense Claims and Advances&lt;/strong&gt;: Manage employee advances, claim expenses, configure multi-level approval workflows, all this with seamless integration with ERPNext accounting.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance Management&lt;/strong&gt;: Track goals, align goals with key result areas (KRAs), enable employees to evaluate themselves, make managing appraisal cycles easy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Payroll &amp;amp; Taxation&lt;/strong&gt;: Create salary structures, configure income tax slabs, run standard payroll, accomodate additional salaries and off cycle payments, view income breakup on salary slips and so much more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Frappe HR Mobile App&lt;/strong&gt;: Apply for and approve leaves on the go, check-in and check-out, access employee profile right from the mobile app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details open&gt; 
 &lt;summary&gt;View Screenshots&lt;/summary&gt; 
 &lt;img src="https://raw.githubusercontent.com/frappe/hrms/develop/.github/hrms-appraisal.png"&gt; 
 &lt;img src="https://raw.githubusercontent.com/frappe/hrms/develop/.github/hrms-requisition.png"&gt; 
 &lt;img src="https://raw.githubusercontent.com/frappe/hrms/develop/.github/hrms-attendance.png"&gt; 
 &lt;img src="https://raw.githubusercontent.com/frappe/hrms/develop/.github/hrms-salary.png"&gt; 
 &lt;img src="https://raw.githubusercontent.com/frappe/hrms/develop/.github/hrms-pwa.png"&gt; 
&lt;/details&gt; 
&lt;h3&gt;Under the Hood&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/frappe/frappe"&gt;&lt;strong&gt;Frappe Framework&lt;/strong&gt;&lt;/a&gt;: A full-stack web application framework written in Python and Javascript. The framework provides a robust foundation for building web applications, including a database abstraction layer, user authentication, and a REST API.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/frappe/frappe-ui"&gt;&lt;strong&gt;Frappe UI&lt;/strong&gt;&lt;/a&gt;: A Vue-based UI library, to provide a modern user interface. The Frappe UI library provides a variety of components that can be used to build single-page applications on top of the Frappe Framework.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Production Setup&lt;/h2&gt; 
&lt;h3&gt;Managed Hosting&lt;/h3&gt; 
&lt;p&gt;You can try &lt;a href="https://frappecloud.com"&gt;Frappe Cloud&lt;/a&gt;, a simple, user-friendly and sophisticated &lt;a href="https://github.com/frappe/press"&gt;open-source&lt;/a&gt; platform to host Frappe applications with peace of mind.&lt;/p&gt; 
&lt;p&gt;It takes care of installation, setup, upgrades, monitoring, maintenance and support of your Frappe deployments. It is a fully featured developer platform with an ability to manage and control multiple Frappe deployments.&lt;/p&gt; 
&lt;div&gt; 
 &lt;a href="https://frappecloud.com/hrms/signup" target="_blank"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="https://frappe.io/files/try-on-fc-white.png"&gt; 
   &lt;img src="https://frappe.io/files/try-on-fc-black.png" alt="Try on Frappe Cloud" height="28"&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Development setup&lt;/h2&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;You need Docker, docker-compose and git setup on your machine. Refer &lt;a href="https://docs.docker.com/"&gt;Docker documentation&lt;/a&gt;. After that, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/frappe/hrms
cd hrms/docker
docker-compose up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Wait for some time until the setup script creates a site. After that you can access &lt;code&gt;http://localhost:8000&lt;/code&gt; in your browser and the login screen for HR should show up.&lt;/p&gt; 
&lt;p&gt;Use the following credentials to log in:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Username: &lt;code&gt;Administrator&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Password: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Local&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Set up bench by following the &lt;a href="https://frappeframework.com/docs/user/en/installation"&gt;Installation Steps&lt;/a&gt; and start the server and keep it running &lt;pre&gt;&lt;code class="language-sh"&gt;$ bench start
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;In a separate terminal window, run the following commands &lt;pre&gt;&lt;code class="language-sh"&gt;$ bench new-site hrms.local
$ bench get-app erpnext
$ bench get-app hrms
$ bench --site hrms.local install-app hrms
$ bench --site hrms.local add-to-hosts
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;You can access the site at &lt;code&gt;http://hrms.local:8080&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Learning and Community&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://frappe.school"&gt;Frappe School&lt;/a&gt; - Learn Frappe Framework and ERPNext from the various courses by the maintainers or from the community.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.frappe.io/hr"&gt;Documentation&lt;/a&gt; - Extensive documentation for Frappe HR.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discuss.erpnext.com/"&gt;User Forum&lt;/a&gt; - Engage with the community of ERPNext users and service providers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://t.me/frappehr"&gt;Telegram Group&lt;/a&gt; - Get instant help from the community of users.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://github.com/frappe/erpnext/wiki/Issue-Guidelines"&gt;Issue Guidelines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://erpnext.com/security"&gt;Report Security Vulnerabilities&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/frappe/erpnext/wiki/Contribution-Guidelines"&gt;Pull Request Requirements&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Logo and Trademark Policy&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href="https://raw.githubusercontent.com/frappe/hrms/develop/TRADEMARK_POLICY.md"&gt;Logo and Trademark Policy&lt;/a&gt;.&lt;/p&gt; 
&lt;br&gt; 
&lt;br&gt; 
&lt;div align="center" style="padding-top: 0.75rem;"&gt; 
 &lt;a href="https://frappe.io" target="_blank"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="https://frappe.io/files/Frappe-white.png"&gt; 
   &lt;img src="https://frappe.io/files/Frappe-black.png" alt="Frappe Technologies" height="28"&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>hesreallyhim/awesome-claude-code</title>
      <link>https://github.com/hesreallyhim/awesome-claude-code</link>
      <description>&lt;p&gt;A curated list of awesome commands, files, and workflows for Claude Code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;/h1&gt; 
&lt;!-- [![Awesome](https://awesome.re/badge-flat2.svg)](https://awesome.re) --&gt; 
&lt;pre style="display: inline-block; text-align: left;"&gt;
 â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ”�    â–ˆâ–ˆâ”�â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ–ˆâ”�   â–ˆâ–ˆâ–ˆâ”�â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�
â–ˆâ–ˆâ”Œâ”€â”€â–ˆâ–ˆâ”�â–ˆâ–ˆâ”‚    â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”Œâ”€â”€â”€â”€â”˜â–ˆâ–ˆâ”Œâ”€â”€â”€â”€â”˜â–ˆâ–ˆâ”Œâ”€â”€â”€â–ˆâ–ˆâ”�â–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ–ˆâ–ˆâ”‚â–ˆâ–ˆâ”Œâ”€â”€â”€â”€â”˜
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚ â–ˆâ”� â–ˆâ–ˆâ”‚â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�â–ˆâ–ˆâ”‚   â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”Œâ–ˆâ–ˆâ–ˆâ–ˆâ”Œâ–ˆâ–ˆâ”‚â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�
â–ˆâ–ˆâ”Œâ”€â”€â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚â–ˆâ–ˆâ–ˆâ”�â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”Œâ”€â”€â”˜  â””â”€â”€â”€â”€â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚   â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚â””â–ˆâ–ˆâ”Œâ”˜â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”Œâ”€â”€â”˜
â–ˆâ–ˆâ”‚  â–ˆâ–ˆâ”‚â””â–ˆâ–ˆâ–ˆâ”Œâ–ˆâ–ˆâ–ˆâ”Œâ”˜â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”‚â””â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”Œâ”˜â–ˆâ–ˆâ”‚ â””â”€â”˜ â–ˆâ–ˆâ”‚â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�
â””â”€â”˜  â””â”€â”˜ â””â”€â”€â”˜â””â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”€â”˜â””â”€â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”˜ â””â”€â”˜     â””â”€â”˜â””â”€â”€â”€â”€â”€â”€â”˜

 â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

 â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�â–ˆâ–ˆâ”�      â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ”�   â–ˆâ–ˆâ”�â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�     â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”� â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�
â–ˆâ–ˆâ”Œâ”€â”€â”€â”€â”˜â–ˆâ–ˆâ”‚     â–ˆâ–ˆâ”Œâ”€â”€â–ˆâ–ˆâ”�â–ˆâ–ˆâ”‚   â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”Œâ”€â”€â–ˆâ–ˆâ”�â–ˆâ–ˆâ”Œâ”€â”€â”€â”€â”˜    â–ˆâ–ˆâ”Œâ”€â”€â”€â”€â”˜â–ˆâ–ˆâ”Œâ”€â”€â”€â–ˆâ–ˆâ”�â–ˆâ–ˆâ”Œâ”€â”€â–ˆâ–ˆâ”�â–ˆâ–ˆâ”Œâ”€â”€â”€â”€â”˜
â–ˆâ–ˆâ”‚     â–ˆâ–ˆâ”‚     â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚   â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚  â–ˆâ–ˆâ”‚â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�      â–ˆâ–ˆâ”‚     â–ˆâ–ˆâ”‚   â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚  â–ˆâ–ˆâ”‚â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�
â–ˆâ–ˆâ”‚     â–ˆâ–ˆâ”‚     â–ˆâ–ˆâ”Œâ”€â”€â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚   â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚  â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”Œâ”€â”€â”˜      â–ˆâ–ˆâ”‚     â–ˆâ–ˆâ”‚   â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”‚  â–ˆâ–ˆâ”‚â–ˆâ–ˆâ”Œâ”€â”€â”˜
â””â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�â–ˆâ–ˆâ”‚  â–ˆâ–ˆâ”‚â””â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”Œâ”˜â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”Œâ”˜â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�    â””â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�â””â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”Œâ”˜â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”Œâ”˜â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”�
 â””â”€â”€â”€â”€â”€â”˜â””â”€â”€â”€â”€â”€â”€â”˜â””â”€â”˜  â””â”€â”˜ â””â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”€â”˜     â””â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”˜ â””â”€â”€â”€â”€â”€â”€â”˜
&lt;/pre&gt; 
&lt;!--lint enable remark-lint:awesome-badge--&gt; 
&lt;p&gt;&lt;a href="https://awesome.re"&gt;&lt;img src="https://awesome.re/badge-flat2.svg?sanitize=true" alt="Awesome"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!--lint enable remark-lint:awesome-badge--&gt; 
&lt;!--lint disable double-link--&gt; 
&lt;p&gt;This is a curated list of slash-commands, &lt;code&gt;CLAUDE.md&lt;/code&gt; files, CLI tools, and other resources and guides for enhancing your &lt;a href="https://docs.anthropic.com/en/docs/claude-code"&gt;Claude Code&lt;/a&gt; workflow, productivity, and vibes.&lt;/p&gt; 
&lt;!--lint enable double-link--&gt; 
&lt;p&gt;Claude Code is a cutting-edge CLI-based coding assistant and agent that you can access in your terminal or IDE. It is a rapidly evolving tool that offers a number of powerful capabilities, and allows for a lot of configuration, in a lot of different ways. Users are actively working out best practices and workflows. It is the hope that this repo will help the community share knowledge and understand how to get the most out of Claude Code.&lt;/p&gt; 
&lt;h3&gt;Announcements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;2025-07-18 - I ended up over-engineering the submission workflow, but I think it's done, I just have to smoke test it and update the docs. For anyone with existing PR's, don't worry about updating them (for formatting purposes, that is), I can take care of it myself. For anoyne with new PR's, you &lt;em&gt;should&lt;/em&gt; be able to run &lt;code&gt;make submit&lt;/code&gt; from the root directory of your fork for an interactive experience (as I said, needs smoke testing) - alternatively, add your entry to the bottom of &lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/THE_RESOURCES_TABLE.csv"&gt;&lt;code&gt;THE_RESOURCES_TABLE&lt;/code&gt;&lt;/a&gt; and run &lt;code&gt;make generate&lt;/code&gt; to automatically update the &lt;code&gt;README.md&lt;/code&gt; based on the information you filled in. If it's not working, just open a PR with the relevant information and I'll deal with it, I created this mess anyway ğŸ˜ƒ.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;p&gt;â–ª&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#workflows--knowledge-guides-"&gt;Workflows &amp;amp; Knowledge Guides&lt;/a&gt;&lt;br&gt; â–ª&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#tooling-"&gt;Tooling&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#ide-integrations"&gt;IDE Integrations&lt;/a&gt;&lt;br&gt; â–ª&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#hooks-"&gt;Hooks&lt;/a&gt;&lt;br&gt; â–ª&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#slash-commands-"&gt;Slash-Commands&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#version-control--git"&gt;Version Control &amp;amp; Git&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#code-analysis--testing"&gt;Code Analysis &amp;amp; Testing&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#context-loading--priming"&gt;Context Loading &amp;amp; Priming&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#documentation--changelogs"&gt;Documentation &amp;amp; Changelogs&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#ci--deployment"&gt;CI / Deployment&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#project--task-management"&gt;Project &amp;amp; Task Management&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;br&gt; â–ª&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#claudemd-files-"&gt;CLAUDE.md Files&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#language-specific"&gt;Language-Specific&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#domain-specific"&gt;Domain-Specific&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;â–«&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#project-scaffolding--mcp"&gt;Project Scaffolding &amp;amp; MCP&lt;/a&gt;&lt;br&gt; â–ª&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/#official-documentation-"&gt;Official Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Workflows &amp;amp; Knowledge Guides ğŸ§ &lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A &lt;strong&gt;workflow&lt;/strong&gt; is a tightly coupled set of Claude Code-native resources that facilitate specific projects&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/cloudartisan/cloudartisan.github.io/tree/main/.claude/commands"&gt;&lt;code&gt;Blogging Platform Instructions&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/cloudartisan"&gt;cloudartisan&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;CC-BY-SA-4.0&lt;br&gt; Provides a well-structured set of commands for publishing and maintaining a blogging platform, including commands for creating posts, managing categories, and handling media files.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://claudelog.com"&gt;&lt;code&gt;ClaudeLog&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://www.reddit.com/user/inventor_black/"&gt;InventorBlack&lt;/a&gt;&lt;br&gt; A comprehensive knowledge repository that features detailed breakdowns of advanced Claude Code mechanics including &lt;a href="https://claudelog.com/mechanics/claude-md-supremacy"&gt;CLAUDE.md best practices&lt;/a&gt;, practical technique guides like &lt;a href="https://claudelog.com/mechanics/plan-mode"&gt;plan mode&lt;/a&gt;, and a &lt;a href="https://claudelog.com/configuration"&gt;configuration guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/disler/just-prompt/tree/main/.claude/commands"&gt;&lt;code&gt;Context Priming&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/disler"&gt;disler&lt;/a&gt;&lt;br&gt; Provides a systematic approach to priming Claude Code with comprehensive project context through specialized commands for different project scenarios and development contexts.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/kingler/n8n_agent/tree/main/.claude/commands"&gt;&lt;code&gt;n8n_agent&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/kingler"&gt;kingler&lt;/a&gt;&lt;br&gt; Amazing comprehensive set of comments for code analysis, QA, design, documentation, project structure, project management, optimization, and many more.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/steadycursor/steadystart/tree/main/.claude/commands"&gt;&lt;code&gt;Project Bootstrapping and Task Management&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/steadycursor"&gt;steadycursor&lt;/a&gt;&lt;br&gt; Provides a structured set of commands for bootstrapping and managing a new project, including meta-commands for creating and editing custom slash-commands.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/scopecraft/command/tree/main/.claude/commands"&gt;&lt;code&gt;Project Management, Implementation, Planning, and Release&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/scopecraft"&gt;scopecraft&lt;/a&gt;&lt;br&gt; Really comprehensive set of commands for all aspects of SDLC.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/harperreed/dotfiles/tree/master/.claude/commands"&gt;&lt;code&gt;Project Workflow System&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/harperreed"&gt;harperreed&lt;/a&gt;&lt;br&gt; A set of commands that provide a comprehensive workflow system for managing projects, including task management, code review, and deployment processes.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://diwank.space/field-notes-from-shipping-real-code-with-claude"&gt;&lt;code&gt;Shipping Real Code w/ Claude&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/creatorrr"&gt;Diwank&lt;/a&gt;&lt;br&gt; A detailed blog post explaining the author's process for shipping a product with Claude Code, including CLAUDE.md files and other interesting resources.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Helmi/claude-simone"&gt;&lt;code&gt;Simone&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Helmi"&gt;Helmi&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; A broader project management workflow for Claude Code that encompasses not just a set of commands, but a system of documents, guidelines, and processes to facilitate project planning and execution.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/wcygan/dotfiles/tree/d8ab6b9f5a7a81007b7f5fa3025d4f83ce12cc02/claude/commands"&gt;&lt;code&gt;Slash-commands megalist&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/wcygan"&gt;wcygan&lt;/a&gt;&lt;br&gt; A pretty stunning list (88 at the time of this post!) of slash-commands ranging from agent orchestration, code review, project management, security, documentation, self-assessment, almost anything you can dream of.&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Tooling ğŸ§°&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Tooling&lt;/strong&gt; denotes applications that are built on top of Claude Code and consist of more components than slash-commands and &lt;code&gt;CLAUDE.md&lt;/code&gt; files&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/ryoppippi/ccusage"&gt;&lt;code&gt;CC Usage&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/ryoppippi"&gt;ryoppippi&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Handy CLI tool for managing and analyzing Claude Code usage, based on analyzing local Claude Code logs. Presents a nice dashboard regarding cost information, token consumption, etc.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/nyatinte/ccexp"&gt;&lt;code&gt;ccexp&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/nyatinte"&gt;nyatinte&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Interactive CLI tool for discovering and managing Claude Code configuration files and slash commands with a beautiful terminal UI.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/ruvnet/claude-code-flow"&gt;&lt;code&gt;Claude Code Flow&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/ruvnet"&gt;ruvnet&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; This mode serves as a code-first orchestration layer, enabling Claude to write, edit, test, and optimize code autonomously across recursive agent cycles.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/possibilities/claude-composer"&gt;&lt;code&gt;Claude Composer&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/possibilities"&gt;Mike Bannister&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Unlicense&lt;br&gt; A tool that adds small enhancements to Claude Code.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/claude-did-this/claude-hub"&gt;&lt;code&gt;Claude Hub&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/claude-did-this"&gt;Claude Did This&lt;/a&gt;&lt;br&gt; A webhook service that connects Claude Code to GitHub repositories, enabling AI-powered code assistance directly through pull requests and issues. This integration allows Claude to analyze repositories, answer technical questions, and help developers understand and improve their codebase through simple @mentions.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/smtg-ai/claude-squad"&gt;&lt;code&gt;Claude Squad&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/smtg-ai"&gt;smtg-ai&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;AGPL-3.0&lt;br&gt; Claude Squad is a terminal app that manages multiple Claude Code, Codex (and other local agents including Aider) in separate workspaces, allowing you to work on multiple tasks simultaneously.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/parruda/claude-swarm"&gt;&lt;code&gt;Claude Swarm&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/parruda"&gt;parruda&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Launch Claude Code session that is connected to a swarm of Claude Code Agents.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/eyaltoledano/claude-task-master"&gt;&lt;code&gt;Claude Task Master&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/eyaltoledano"&gt;eyaltoledano&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;NOASSERTION&lt;br&gt; A task management system for AI-driven development with Claude, designed to work seamlessly with Cursor AI.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/grahama1970/claude-task-runner"&gt;&lt;code&gt;Claude Task Runner&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/grahama1970"&gt;grahama1970&lt;/a&gt;&lt;br&gt; A specialized tool to manage context isolation and focused task execution with Claude Code, solving the critical challenge of context length limitations and task focus when working with Claude on complex, multi-step projects.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/dagger/container-use"&gt;&lt;code&gt;Container Use&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/dagger"&gt;dagger&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Development environments for coding agents. Enable multiple agents to work safely and independently with your preferred stack.&lt;/p&gt; 
&lt;h3&gt;IDE Integrations&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/stevemolitor/claude-code.el"&gt;&lt;code&gt;claude-code.el&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/stevemolitor"&gt;stevemolitor&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; An Emacs interface for Claude Code CLI.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/greggh/claude-code.nvim"&gt;&lt;code&gt;claude-code.nvim&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/greggh"&gt;greggh&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; A seamless integration between Claude Code AI assistant and Neovim.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/stravu/crystal"&gt;&lt;code&gt;crystal&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/stravu"&gt;stravu&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; A full-fledged desktop application for orchestrating, monitoring, and interacting with Claude Code agents.&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Hooks ğŸª�&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Hooks&lt;/strong&gt; are a brand new API for Claude Code that allows users to activate commands and run scripts at different points in Claude's agentic lifecycle.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;[Experimental]&lt;/strong&gt; - The resources listed in this section have not been fully vetted and may not work as expected, given the bleeding-edge nature of Claude Code hooks. Nevertheless, I wished to include them at least as a source of inspiration and to explore this unknown terrain. YMMV!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/beyondcode/claude-hooks-sdk"&gt;&lt;code&gt;claude-code-hooks-sdk&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/beyondcode"&gt;beyondcode&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; A Laravel-inspired PHP SDK for building Claude Code hook responses with a clean, fluent API. This SDK makes it easy to create structured JSON responses for Claude Code hooks using an expressive, chainable interface.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/johnlindquist/claude-hooks"&gt;&lt;code&gt;claude-hooks&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/johnlindquist"&gt;John Lindquist&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; A TypeScript-based system for configuring and customizing Claude Code hooks with a powerful and flexible interface.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Veraticus/nix-config/tree/main/home-manager/claude-code/hooks"&gt;&lt;code&gt;Linting, testing, and notifications (in go)&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Veraticus"&gt;Josh Symonds&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Nice set of hooks for enforcing code quality (linting, testing, notifications), with a nice configuration setup as well.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/nizos/tdd-guard"&gt;&lt;code&gt;TDD Guard&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/nizos"&gt;Nizar Selander&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; A hooks-driven system that monitors file operations in real-time and blocks changes that violate TDD principles.&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Slash-Commands ğŸ”ª&lt;/h2&gt; 
&lt;h3&gt;Version Control &amp;amp; Git&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/danielscholl/mvn-mcp-server/raw/main/.claude/commands/bug-fix.md"&gt;&lt;code&gt;/bug-fix&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/danielscholl"&gt;danielscholl&lt;/a&gt;&lt;br&gt; Streamlines bug fixing by creating a GitHub issue first, then a feature branch for implementing and thoroughly testing the solution before merging.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/evmts/tevm-monorepo/raw/main/.claude/commands/commit.md"&gt;&lt;code&gt;/commit&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/evmts"&gt;evmts&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Creates git commits using conventional commit format with appropriate emojis, following project standards and creating descriptive messages that explain the purpose of changes.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/steadycursor/steadystart/raw/main/.claude/commands/2-commit-fast.md"&gt;&lt;code&gt;/commit-fast&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/steadycursor"&gt;steadycursor&lt;/a&gt;&lt;br&gt; Automates git commit process by selecting the first suggested message, generating structured commits with consistent formatting while skipping manual confirmation and removing Claude co-Contributorship footer&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/toyamarinyon/giselle/raw/main/.claude/commands/create-pr.md"&gt;&lt;code&gt;/create-pr&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/toyamarinyon"&gt;toyamarinyon&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Streamlines pull request creation by handling the entire workflow: creating a new branch, committing changes, formatting modified files with Biome, and submitting the PR.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/liam-hq/liam/raw/main/.claude/commands/create-pull-request.md"&gt;&lt;code&gt;/create-pull-request&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/liam-hq"&gt;liam-hq&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Provides comprehensive PR creation guidance with GitHub CLI, enforcing title conventions, following template structure, and offering concrete command examples with best practices.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/evmts/tevm-monorepo/raw/main/.claude/commands/create-worktrees.md"&gt;&lt;code&gt;/create-worktrees&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/evmts"&gt;evmts&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Creates git worktrees for all open PRs or specific branches, handling branches with slashes, cleaning up stale worktrees, and supporting custom branch creation for development.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/jeremymailen/kotlinter-gradle/raw/master/.claude/commands/fix-github-issue.md"&gt;&lt;code&gt;/fix-github-issue&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/jeremymailen"&gt;jeremymailen&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Analyzes and fixes GitHub issues using a structured approach with GitHub CLI for issue details, implementing necessary code changes, running tests, and creating proper commit messages.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/metabase/metabase/raw/master/.claude/commands/fix-issue.md"&gt;&lt;code&gt;/fix-issue&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/metabase"&gt;metabase&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;NOASSERTION&lt;br&gt; Addresses GitHub issues by taking issue number as parameter, analyzing context, implementing solution, and testing/validating the fix for proper integration.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/metabase/metabase/raw/master/.claude/commands/fix-pr.md"&gt;&lt;code&gt;/fix-pr&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/metabase"&gt;metabase&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;NOASSERTION&lt;br&gt; Fetches and fixes unresolved PR comments by automatically retrieving feedback, addressing reviewer concerns, making targeted code improvements, and streamlining the review process.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/evmts/tevm-monorepo/raw/main/.claude/commands/husky.md"&gt;&lt;code&gt;/husky&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/evmts"&gt;evmts&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Sets up and manages Husky Git hooks by configuring pre-commit hooks, establishing commit message standards, integrating with linting tools, and ensuring code quality on commits.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/arkavo-org/opentdf-rs/raw/main/.claude/commands/pr-review.md"&gt;&lt;code&gt;/pr-review&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/arkavo-org"&gt;arkavo-org&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Reviews pull request changes to provide feedback, check for issues, and suggest improvements before merging into the main codebase.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/giselles-ai/giselle/raw/main/.claude/commands/update-branch-name.md"&gt;&lt;code&gt;/update-branch-name&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/giselles-ai"&gt;giselles-ai&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Updates branch names with proper prefixes and formats, enforcing naming conventions, supporting semantic prefixes, and managing remote branch updates.&lt;/p&gt; 
&lt;h3&gt;Code Analysis &amp;amp; Testing&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/rygwdn/slack-tools/raw/main/.claude/commands/check.md"&gt;&lt;code&gt;/check&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/rygwdn"&gt;rygwdn&lt;/a&gt;&lt;br&gt; Performs comprehensive code quality and security checks, featuring static analysis integration, security vulnerability scanning, code style enforcement, and detailed reporting.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Graphlet-AI/eridu/raw/main/.claude/commands/clean.md"&gt;&lt;code&gt;/clean&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Graphlet-AI"&gt;Graphlet-AI&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Addresses code formatting and quality issues by fixing black formatting problems, organizing imports with isort, resolving flake8 linting issues, and correcting mypy type errors.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/kingler/n8n_agent/raw/main/.claude/commands/code_analysis.md"&gt;&lt;code&gt;/code_analysis&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/kingler"&gt;kingler&lt;/a&gt;&lt;br&gt; Provides a menu of advanced code analysis commands for deep inspection, including knowledge graph generation, optimization suggestions, and quality evaluation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/to4iki/ai-project-rules/raw/main/.claude/commands/optimize.md"&gt;&lt;code&gt;/optimize&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/to4iki"&gt;to4iki&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Analyzes code performance to identify bottlenecks, proposing concrete optimizations with implementation guidance for improved application performance.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rzykov/metabase/raw/master/.claude/commands/repro-issue.md"&gt;&lt;code&gt;/repro-issue&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/rzykov"&gt;rzykov&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;NOASSERTION&lt;br&gt; Creates reproducible test cases for GitHub issues, ensuring tests fail reliably and documenting clear reproduction steps for developers.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/zscott/pane/raw/main/.claude/commands/tdd.md"&gt;&lt;code&gt;/tdd&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/zscott"&gt;zscott&lt;/a&gt;&lt;br&gt; Guides development using Test-Driven Development principles, enforcing Red-Green-Refactor discipline, integrating with git workflow, and managing PR creation.&lt;/p&gt; 
&lt;h3&gt;Context Loading &amp;amp; Priming&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/elizaOS/elizaos.github.io/raw/main/.claude/commands/context-prime.md"&gt;&lt;code&gt;/context-prime&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/elizaOS"&gt;elizaOS&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Primes Claude with comprehensive project understanding by loading repository structure, setting development context, establishing project goals, and defining collaboration parameters.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/okuvshynov/cubestat/raw/main/.claude/commands/initref.md"&gt;&lt;code&gt;/initref&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/okuvshynov"&gt;okuvshynov&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Initializes reference documentation structure with standard doc templates, API reference setup, documentation conventions, and placeholder content generation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/ethpandaops/xatu-data/raw/master/.claude/commands/load-llms-txt.md"&gt;&lt;code&gt;/load-llms-txt&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/ethpandaops"&gt;ethpandaops&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Loads LLM configuration files to context, importing specific terminology, model configurations, and establishing baseline terminology for AI discussions.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Mjvolk3/torchcell/raw/main/.claude/commands/load_coo_context.md"&gt;&lt;code&gt;/load_coo_context&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Mjvolk3"&gt;Mjvolk3&lt;/a&gt;&lt;br&gt; References specific files for sparse matrix operations, explains transform usage, compares with previous approaches, and sets data formatting context for development.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Mjvolk3/torchcell/raw/main/.claude/commands/load_dango_pipeline.md"&gt;&lt;code&gt;/load_dango_pipeline&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Mjvolk3"&gt;Mjvolk3&lt;/a&gt;&lt;br&gt; Sets context for model training by referencing pipeline files, establishing working context, and preparing for pipeline work with relevant documentation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/yzyydev/AI-Engineering-Structure/raw/main/.claude/commands/prime.md"&gt;&lt;code&gt;/prime&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/yzyydev"&gt;yzyydev&lt;/a&gt;&lt;br&gt; Sets up initial project context by viewing directory structure and reading key files, creating standardized context with directory visualization and key documentation focus.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/ddisisto/si/raw/main/.claude/commands/rsi.md"&gt;&lt;code&gt;/rsi&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/ddisisto"&gt;ddisisto&lt;/a&gt;&lt;br&gt; Reads all commands and key project files to optimize AI-assisted development by streamlining the process, loading command context, and setting up for better development workflow.&lt;/p&gt; 
&lt;h3&gt;Documentation &amp;amp; Changelogs&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/berrydev-ai/blockdoc-python/raw/main/.claude/commands/add-to-changelog.md"&gt;&lt;code&gt;/add-to-changelog&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/berrydev-ai"&gt;berrydev-ai&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Adds new entries to changelog files while maintaining format consistency, properly documenting changes, and following established project standards for version tracking.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/jerseycheese/Narraitor/tree/feature/issue-227-ai-suggestions/.claude/commands/analyze-issue.md"&gt;&lt;code&gt;/create-docs&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/jerseycheese"&gt;jerseycheese&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Analyzes code structure and purpose to create comprehensive documentation detailing inputs/outputs, behavior, user interaction flows, and edge cases with error handling.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/slunsford/coffee-analytics/raw/main/.claude/commands/docs.md"&gt;&lt;code&gt;/docs&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/slunsford"&gt;slunsford&lt;/a&gt;&lt;br&gt; Generates comprehensive documentation that follows project structure, documenting APIs and usage patterns with consistent formatting for better user understanding.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/hackdays-io/toban-contribution-viewer/raw/main/.claude/commands/explain-issue-fix.md"&gt;&lt;code&gt;/explain-issue-fix&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/hackdays-io"&gt;hackdays-io&lt;/a&gt;&lt;br&gt; Documents solution approaches for GitHub issues, explaining technical decisions, detailing challenges overcome, and providing implementation context for better understanding.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Consiliency/Flutter-Structurizr/raw/main/.claude/commands/update-docs.md"&gt;&lt;code&gt;/update-docs&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Consiliency"&gt;Consiliency&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Reviews current documentation status, updates implementation progress, reviews phase documents, and maintains documentation consistency across the project.&lt;/p&gt; 
&lt;h3&gt;CI / Deployment&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/kelp/webdown/raw/main/.claude/commands/release.md"&gt;&lt;code&gt;/release&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/kelp"&gt;kelp&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Manages software releases by updating changelogs, reviewing README changes, evaluating version increments, and documenting release changes for better version tracking.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/hackdays-io/toban-contribution-viewer/raw/main/.claude/commands/run-ci.md"&gt;&lt;code&gt;/run-ci&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/hackdays-io"&gt;hackdays-io&lt;/a&gt;&lt;br&gt; Activates virtual environments, runs CI-compatible check scripts, iteratively fixes errors, and ensures all tests pass before completion.&lt;/p&gt; 
&lt;h3&gt;Project &amp;amp; Task Management&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/scopecraft/command/raw/main/.claude/commands/create-command.md"&gt;&lt;code&gt;/create-command&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/scopecraft"&gt;scopecraft&lt;/a&gt;&lt;br&gt; Guides Claude through creating new custom commands with proper structure by analyzing requirements, templating commands by category, enforcing command standards, and creating supporting documentation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/taddyorg/inkverse/raw/main/.claude/commands/create-jtbd.md"&gt;&lt;code&gt;/create-jtbd&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/taddyorg"&gt;taddyorg&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;AGPL-3.0&lt;br&gt; Creates Jobs-to-be-Done frameworks that outline user needs with structured format, focusing on specific user problems and organizing by job categories for product development.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/taddyorg/inkverse/raw/main/.claude/commands/create-prd.md"&gt;&lt;code&gt;/create-prd&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/taddyorg"&gt;taddyorg&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;AGPL-3.0&lt;br&gt; Generates comprehensive product requirement documents outlining detailed specifications, requirements, and features following standardized document structure and format.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Wirasm/claudecode-utils/raw/main/.claude/commands/create-prp.md"&gt;&lt;code&gt;/create-prp&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Wirasm"&gt;Wirasm&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Creates product requirement plans by reading PRP methodology, following template structure, creating comprehensive requirements, and structuring product definitions for development.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/disler/just-prompt/raw/main/.claude/commands/project_hello_w_name.md"&gt;&lt;code&gt;/project_hello_w_name&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/disler"&gt;disler&lt;/a&gt;&lt;br&gt; Creates customizable greeting components with name input, demonstrating argument passing, component reusability, state management, and user input handling.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/chrisleyva/todo-slash-command/raw/main/todo.md"&gt;&lt;code&gt;/todo&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/chrisleyva"&gt;chrisleyva&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; A convenient command to quickly manage project todo items without leaving the Claude Code interface, featuring due dates, sorting, task prioritization, and comprehensive todo list management.&lt;/p&gt; 
&lt;h3&gt;Miscellaneous&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/TuckerTucker/tkr-portfolio/raw/main/.claude/commands/five.md"&gt;&lt;code&gt;/five&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/TuckerTucker"&gt;TuckerTucker&lt;/a&gt;&lt;br&gt; Applies the "five whys" methodology to perform root cause analysis, identify underlying issues, and create solution approaches for complex problems.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Mjvolk3/torchcell/raw/main/.claude/commands/fixing_go_in_graph.md"&gt;&lt;code&gt;/fixing_go_in_graph&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Mjvolk3"&gt;Mjvolk3&lt;/a&gt;&lt;br&gt; Focuses on Gene Ontology annotation integration in graph databases, handling multiple data sources, addressing graph representation issues, and ensuring correct data incorporation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/GaloyMoney/lana-bank/raw/main/.claude/commands/mermaid.md"&gt;&lt;code&gt;/mermaid&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/GaloyMoney"&gt;GaloyMoney&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;NOASSERTION&lt;br&gt; Generates Mermaid diagrams from SQL schema files, creating entity relationship diagrams with table properties, validating diagram compilation, and ensuring complete entity coverage.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Mjvolk3/torchcell/raw/main/.claude/commands/review_dcell_model.md"&gt;&lt;code&gt;/review_dcell_model&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Mjvolk3"&gt;Mjvolk3&lt;/a&gt;&lt;br&gt; Reviews old Dcell implementation files, comparing with newer Dango model, noting changes over time, and analyzing refactoring approaches for better code organization.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/zuplo/docs/raw/main/.claude/commands/use-stepper.md"&gt;&lt;code&gt;/use-stepper&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/zuplo"&gt;zuplo&lt;/a&gt;&lt;br&gt; Reformats documentation to use React Stepper component, transforming heading formats, applying proper indentation, and maintaining markdown compatibility with admonition formatting.&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;CLAUDE.md Files ğŸ“‚&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;code&gt;CLAUDE.md&lt;/code&gt; files&lt;/strong&gt; are files that contain important guidelines and context-specfic information or instructions that help Claude Code to better understand your project and your coding standards&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Language-Specific&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/didalgolab/ai-intellij-plugin/raw/main/CLAUDE.md"&gt;&lt;code&gt;AI IntelliJ Plugin&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/didalgolab"&gt;didalgolab&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Provides comprehensive Gradle commands for IntelliJ plugin development with platform-specific coding patterns, detailed package structure guidelines, and clear internationalization standards.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/alexei-led/aws-mcp-server/raw/main/CLAUDE.md"&gt;&lt;code&gt;AWS MCP Server&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/alexei-led"&gt;alexei-led&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Features multiple Python environment setup options with detailed code style guidelines, comprehensive error handling recommendations, and security considerations for AWS CLI interactions.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/touchlab/DroidconKotlin/raw/main/CLAUDE.md"&gt;&lt;code&gt;DroidconKotlin&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/touchlab"&gt;touchlab&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Delivers comprehensive Gradle commands for cross-platform Kotlin Multiplatform development with clear module structure and practical guidance for dependency injection.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/expectedparrot/edsl/raw/main/CLAUDE.md"&gt;&lt;code&gt;EDSL&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/expectedparrot"&gt;expectedparrot&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Offers detailed build and test commands with strict code style enforcement, comprehensive testing requirements, and standardized development workflow using Black and mypy.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/giselles-ai/giselle/raw/main/CLAUDE.md"&gt;&lt;code&gt;Giselle&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/giselles-ai"&gt;giselles-ai&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Provides detailed build and test commands using pnpm and Vitest with strict code formatting requirements and comprehensive naming conventions for code consistency.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/hashintel/hash/raw/main/CLAUDE.md"&gt;&lt;code&gt;HASH&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/hashintel"&gt;hashintel&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;NOASSERTION&lt;br&gt; Features comprehensive repository structure breakdown with strong emphasis on coding standards, detailed Rust documentation guidelines, and systematic PR review process.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/inkline/inkline/raw/main/CLAUDE.md"&gt;&lt;code&gt;Inkline&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/inkline"&gt;inkline&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;NOASSERTION&lt;br&gt; Structures development workflow using pnpm with emphasis on TypeScript and Vue 3 Composition API, detailed component creation process, and comprehensive testing recommendations.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/mattgodbolt/jsbeeb/raw/main/CLAUDE.md"&gt;&lt;code&gt;JSBeeb&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/mattgodbolt"&gt;mattgodbolt&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;GPL-3.0&lt;br&gt; Provides development guide for JavaScript BBC Micro emulator with build and testing instructions, architecture documentation, and debugging workflows.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/LamoomAI/lamoom-python/raw/main/CLAUDE.md"&gt;&lt;code&gt;Lamoom Python&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/LamoomAI"&gt;LamoomAI&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Apache-2.0&lt;br&gt; Serves as reference for production prompt engineering library with load balancing of AI Models, API documentation, and usage patterns with examples.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/langchain-ai/langgraphjs/raw/main/CLAUDE.md"&gt;&lt;code&gt;LangGraphJS&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/langchain-ai"&gt;langchain-ai&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Offers comprehensive build and test commands with detailed TypeScript style guidelines, layered library architecture, and monorepo structure using yarn workspaces.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/metabase/metabase/raw/master/CLAUDE.md"&gt;&lt;code&gt;Metabase&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/metabase"&gt;metabase&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;NOASSERTION&lt;br&gt; Details workflow for REPL-driven development in Clojure/ClojureScript with emphasis on incremental development, testing, and step-by-step approach for feature implementation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sgcarstrends/backend/raw/main/CLAUDE.md"&gt;&lt;code&gt;SG Cars Trends Backend&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/sgcarstrends"&gt;sgcarstrends&lt;/a&gt;&lt;br&gt; Provides comprehensive structure for TypeScript monorepo projects with detailed commands for development, testing, deployment, and AWS/Cloudflare integration.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/spylang/spy/raw/main/CLAUDE.md"&gt;&lt;code&gt;SPy&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/spylang"&gt;spylang&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Enforces strict coding conventions with comprehensive testing guidelines, multiple code compilation options, and backend-specific test decorators for targeted filtering.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/KarpelesLab/tpl/raw/master/CLAUDE.md"&gt;&lt;code&gt;TPL&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/KarpelesLab"&gt;KarpelesLab&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Details Go project conventions with comprehensive error handling recommendations, table-driven testing approach guidelines, and modernization suggestions for latest Go features.&lt;/p&gt; 
&lt;h3&gt;Domain-Specific&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/Layr-Labs/avs-vibe-developer-guide/raw/master/CLAUDE.md"&gt;&lt;code&gt;AVS Vibe Developer Guide&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Layr-Labs"&gt;Layr-Labs&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Structures AI-assisted EigenLayer AVS development workflow with consistent naming conventions for prompt files and established terminology standards for blockchain concepts.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/CommE2E/comm/raw/master/CLAUDE.md"&gt;&lt;code&gt;Comm&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/CommE2E"&gt;CommE2E&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;BSD-3-Clause&lt;br&gt; Serves as a development reference for E2E-encrypted messaging applications with code organization architecture, security implementation details, and testing procedures.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/badass-courses/course-builder/raw/main/CLAUDE.md"&gt;&lt;code&gt;Course Builder&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/badass-courses"&gt;badass-courses&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Enables real-time multiplayer capabilities for collaborative course creation with diverse tech stack integration and monorepo architecture using Turborepo.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/eastlondoner/cursor-tools/raw/main/CLAUDE.md"&gt;&lt;code&gt;Cursor Tools&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/eastlondoner"&gt;eastlondoner&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Creates a versatile AI command interface supporting multiple providers and models with flexible command options and browser automation through "Stagehand" feature.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/soramimi/Guitar/raw/master/CLAUDE.md"&gt;&lt;code&gt;Guitar&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/soramimi"&gt;soramimi&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;GPL-2.0&lt;br&gt; Serves as development guide for Guitar Git GUI Client with build commands for various platforms, code style guidelines for contributing, and project structure explanation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Fimeg/NetworkChronicles/raw/legacy-v1/CLAUDE.md"&gt;&lt;code&gt;Network Chronicles&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Fimeg"&gt;Fimeg&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Presents detailed implementation plan for AI-driven game characters with technical specifications for LLM integration, character guidelines, and service discovery mechanics.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/different-ai/note-companion/raw/master/CLAUDE.md"&gt;&lt;code&gt;Note Companion&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/different-ai"&gt;different-ai&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Provides detailed styling isolation techniques for Obsidian plugins using Tailwind with custom prefix to prevent style conflicts and practical troubleshooting steps.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/ParetoSecurity/pareto-mac/raw/main/CLAUDE.md"&gt;&lt;code&gt;Pareto Mac&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/ParetoSecurity"&gt;ParetoSecurity&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;GPL-3.0&lt;br&gt; Serves as development guide for Mac security audit tool with build instructions, contribution guidelines, testing procedures, and workflow documentation.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/steadycursor/steadystart/raw/main/CLAUDE.md"&gt;&lt;code&gt;SteadyStart&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/steadycursor"&gt;steadycursor&lt;/a&gt;&lt;br&gt; Clear and direct instructives about style, permissions, Claude's "role", communications, and documentation of Claude Code sessions for other team members to stay abreast.&lt;/p&gt; 
&lt;h3&gt;Project Scaffolding &amp;amp; MCP&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/basicmachines-co/basic-memory/raw/main/CLAUDE.md"&gt;&lt;code&gt;Basic Memory&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/basicmachines-co"&gt;basicmachines-co&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;AGPL-3.0&lt;br&gt; Presents an innovative AI-human collaboration framework with Model Context Protocol for bidirectional LLM-markdown communication and flexible knowledge structure for complex projects.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/grahama1970/claude-code-mcp-enhanced/raw/main/CLAUDE.md"&gt;&lt;code&gt;claude-code-mcp-enhanced&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/grahama1970"&gt;grahama1970&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Provides detailed and emphatic instructions for Claude to follow as a coding agent, with testing guidance, code examples, and compliance checks.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Family-IT-Guy/perplexity-mcp/raw/main/CLAUDE.md"&gt;&lt;code&gt;Perplexity MCP&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/Family-IT-Guy"&gt;Family-IT-Guy&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;ISC&lt;br&gt; Offers clear step-by-step installation instructions with multiple configuration options, detailed troubleshooting guidance, and concise architecture overview of the MCP protocol.&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Official Documentation ğŸ�›ï¸�&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Links to some of Anthropic's terrific documentation and resources regarding Claude Code&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!--lint disable double-link--&gt; 
&lt;p&gt;&lt;a href="https://docs.anthropic.com/en/docs/claude-code"&gt;&lt;code&gt;Anthropic Documentation&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/anthropics"&gt;Anthropic&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;Â©&lt;br&gt; The official documentation for Claude Code, including installation instructions, usage guidelines, API references, tutorials, examples, loads of information that I won't list individually. Like Claude Code, the documentation is frequently updated.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/anthropics/anthropic-quickstarts/raw/main/CLAUDE.md"&gt;&lt;code&gt;Anthropic Quickstarts&lt;/code&gt;&lt;/a&gt; &amp;nbsp; by &amp;nbsp; &lt;a href="https://github.com/anthropics"&gt;Anthropic&lt;/a&gt; &amp;nbsp;&amp;nbsp;âš–ï¸�&amp;nbsp;&amp;nbsp;MIT&lt;br&gt; Offers comprehensive development guides for three distinct AI-powered demo projects with standardized workflows, strict code style guidelines, and containerization instructions.&lt;/p&gt; 
&lt;h2&gt;Contributing ğŸŒ»&lt;/h2&gt; 
&lt;p&gt;Please note that this project is released with a &lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/code-of-conduct.md"&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; 
&lt;p&gt;Regarding content, we especially welcome:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Proven, effective resources that follow best practices and may even be in use in production.&lt;/li&gt; 
 &lt;li&gt;Innovative, creative, or experimental workflows that perhaps are still being iterated upon, but have high potential value, and push the boundaries of Claude Code's documented capabilities and use cases.&lt;/li&gt; 
 &lt;li&gt;Additional libraries and tooling that are built on top of Claude Code and offer enhanced functionality.&lt;/li&gt; 
 &lt;li&gt;Applications of Claude Code outside of the traditional "coding assistant" context, e.g., CI/CD integration, testing, documentation, dev-ops, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/hesreallyhim/awesome-claude-code/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to contribute to this project. Or, fire up Claude Code and invoke the &lt;code&gt;/project:add-new-resource&lt;/code&gt; command and let Claude walk you through it!&lt;/p&gt; 
&lt;p&gt;If you have any suggestions or thoughts on how to improve the repo, or how to best organize the list, feel free to start a Discussion topic. This is meant to be for the Claude Code community, and in general I prefer not to act on sole authority.&lt;/p&gt; 
&lt;h3&gt;A note about licenses&lt;/h3&gt; 
&lt;p&gt;Because simply listing a hyperlink does not qualify as redistribution, the license of the original source is not relevant to its inclusion. However, for posterity and convenience, we do host copies of all resources whose license permits it. Therefore, please include information about the resource's license. Additionally, take note: &lt;em&gt;if you do not include a LICENSE in your GitHub repo, then by default it is fully copyrighted and redistribution is not allowed&lt;/em&gt;. So, if you are intending to make an open source project, it's critical to pick from one of the many available open source licenses. This is just a reminder that without a LICENSE, your project is not open source (it's merely source-code-available) - it may of course still be included on this list, but this notice is to inform readers about the default rules regarding GitHub and LICENSE files. See &lt;a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository"&gt;here&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WEIFENG2333/VideoCaptioner</title>
      <link>https://github.com/WEIFENG2333/VideoCaptioner</link>
      <description>&lt;p&gt;ğŸ�¬ å�¡å�¡å­—å¹•åŠ©æ‰‹ | VideoCaptioner - åŸºäº� LLM çš„æ™ºèƒ½å­—å¹•åŠ©æ‰‹ - è§†é¢‘å­—å¹•ç”Ÿæˆ�ã€�æ–­å�¥ã€�æ ¡æ­£ã€�å­—å¹•ç¿»è¯‘å…¨æµ�ç¨‹å¤„ç�†ï¼�- A powered tool for easy and efficient video subtitling.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/images/logo.png" alt="VideoCaptioner Logo" width="100"&gt; 
 &lt;p&gt;å�¡å�¡å­—å¹•åŠ©æ‰‹&lt;/p&gt; 
 &lt;h1&gt;VideoCaptioner&lt;/h1&gt; 
 &lt;p&gt;ä¸€æ¬¾åŸºäº�å¤§è¯­è¨€æ¨¡å�‹(LLM)çš„è§†é¢‘å­—å¹•å¤„ç�†åŠ©æ‰‹ï¼Œæ”¯æŒ�è¯­éŸ³è¯†åˆ«ã€�å­—å¹•æ–­å�¥ã€�ä¼˜åŒ–ã€�ç¿»è¯‘å…¨æµ�ç¨‹å¤„ç�†&lt;/p&gt; 
 &lt;p&gt;ç®€ä½“ä¸­æ–‡ / &lt;a href="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/README_TW.md"&gt;æ­£é«”ä¸­æ–‡&lt;/a&gt; / &lt;a href="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/README_EN.md"&gt;English&lt;/a&gt; / &lt;a href="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/README_JA.md"&gt;æ—¥æœ¬èª�&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;ğŸ“– é¡¹ç›®ä»‹ç»�&lt;/h2&gt; 
&lt;p&gt;å�¡å�¡å­—å¹•åŠ©æ‰‹ï¼ˆVideoCaptionerï¼‰æ“�ä½œç®€å�•ä¸”æ— éœ€é«˜é…�ç½®ï¼Œæ”¯æŒ�ç½‘ç»œè°ƒç”¨å’Œæœ¬åœ°ç¦»çº¿ï¼ˆæ”¯æŒ�è°ƒç”¨GPUï¼‰ä¸¤ç§�æ–¹å¼�è¿›è¡Œè¯­éŸ³è¯†åˆ«ï¼Œåˆ©ç”¨å�¯ç”¨é€šè¿‡å¤§è¯­è¨€æ¨¡å�‹è¿›è¡Œå­—å¹•æ™ºèƒ½æ–­å�¥ã€�æ ¡æ­£ã€�ç¿»è¯‘ï¼Œå­—å¹•è§†é¢‘å…¨æµ�ç¨‹ä¸€é”®å¤„ç�†ï¼�ä¸ºè§†é¢‘é…�ä¸Šæ•ˆæ�œæƒŠè‰³çš„å­—å¹•ã€‚&lt;/p&gt; 
&lt;p&gt;æœ€æ–°ç‰ˆæœ¬å·²ç»�æ”¯æŒ� VAD ã€� äººå£°åˆ†ç¦»ã€� å­—çº§æ—¶é—´æˆ³ æ‰¹é‡�å­—å¹•ç­‰å®�ç”¨åŠŸèƒ½&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ğŸ�¯ æ— éœ€GPUå�³å�¯ä½¿ç”¨å¼ºå¤§çš„è¯­éŸ³è¯†åˆ«å¼•æ“�ï¼Œç”Ÿæˆ�ç²¾å‡†å­—å¹•&lt;/li&gt; 
 &lt;li&gt;âœ‚ï¸� åŸºäº� LLM çš„æ™ºèƒ½åˆ†å‰²ä¸�æ–­å�¥ï¼Œå­—å¹•é˜…è¯»æ›´è‡ªç„¶æµ�ç•…&lt;/li&gt; 
 &lt;li&gt;ğŸ”„ AIå­—å¹•å¤šçº¿ç¨‹ä¼˜åŒ–ä¸�ç¿»è¯‘ï¼Œè°ƒæ•´å­—å¹•æ ¼å¼�ã€�è¡¨è¾¾æ›´åœ°é�“ä¸“ä¸š&lt;/li&gt; 
 &lt;li&gt;ğŸ�¬ æ”¯æŒ�æ‰¹é‡�è§†é¢‘å­—å¹•å�ˆæˆ�ï¼Œæ��å�‡å¤„ç�†æ•ˆç�‡&lt;/li&gt; 
 &lt;li&gt;ğŸ“� ç›´è§‚çš„å­—å¹•ç¼–è¾‘æŸ¥çœ‹ç•Œé�¢ï¼Œæ”¯æŒ�å®�æ—¶é¢„è§ˆå’Œå¿«æ�·ç¼–è¾‘&lt;/li&gt; 
 &lt;li&gt;ğŸ¤– æ¶ˆè€—æ¨¡å�‹ Token å°‘ï¼Œä¸”å†…ç½®åŸºç¡€ LLM æ¨¡å�‹ï¼Œä¿�è¯�å¼€ç®±å�³ç”¨&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ğŸ“¸ ç•Œé�¢é¢„è§ˆ&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://h1.appinn.me/file/1731487405884_main.png" alt="è½¯ä»¶ç•Œé�¢é¢„è§ˆ" width="90%" style="border-radius: 5px;"&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src="https://h1.appinn.me/file/1731487410170_preview1.png" alt="é¡µé�¢é¢„è§ˆ"&gt; &lt;img src="https://h1.appinn.me/file/1731487410832_preview2.png" alt="é¡µé�¢é¢„è§ˆ"&gt;&lt;/p&gt; 
&lt;h2&gt;ğŸ§ª æµ‹è¯•&lt;/h2&gt; 
&lt;p&gt;å…¨æµ�ç¨‹å¤„ç�†ä¸€ä¸ª14åˆ†é’Ÿ1080Pçš„ &lt;a href="https://www.bilibili.com/video/BV1jT411X7Dz"&gt;Bç«™è‹±æ–‡ TED è§†é¢‘&lt;/a&gt;ï¼Œè°ƒç”¨æœ¬åœ° Whisper æ¨¡å�‹è¿›è¡Œè¯­éŸ³è¯†åˆ«ï¼Œä½¿ç”¨ &lt;code&gt;gpt-4o-mini&lt;/code&gt; æ¨¡å�‹ä¼˜åŒ–å’Œç¿»è¯‘ä¸ºä¸­æ–‡ï¼Œæ€»å…±æ¶ˆè€—æ—¶é—´çº¦ &lt;strong&gt;4 åˆ†é’Ÿ&lt;/strong&gt;ã€‚&lt;/p&gt; 
&lt;p&gt;è¿‘å��å�°è®¡ç®—ï¼Œæ¨¡å�‹ä¼˜åŒ–å’Œç¿»è¯‘æ¶ˆè€—è´¹ç”¨ä¸�è¶³ ï¿¥0.01ï¼ˆä»¥OpenAIå®˜æ–¹ä»·æ ¼ä¸ºè®¡ç®—ï¼‰&lt;/p&gt; 
&lt;p&gt;å…·ä½“å­—å¹•å’Œè§†é¢‘å�ˆæˆ�çš„æ•ˆæ�œçš„æµ‹è¯•ç»“æ�œå›¾ç‰‡ï¼Œè¯·å�‚è€ƒ &lt;a href="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/test.md"&gt;TEDè§†é¢‘æµ‹è¯•&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;ğŸš€ å¿«é€Ÿå¼€å§‹&lt;/h2&gt; 
&lt;h3&gt;Windows ç”¨æˆ·&lt;/h3&gt; 
&lt;p&gt;è½¯ä»¶è¾ƒä¸ºè½»é‡�ï¼Œæ‰“åŒ…å¤§å°�ä¸�è¶³ 60M,å·²é›†æˆ�æ‰€æœ‰å¿…è¦�ç�¯å¢ƒï¼Œä¸‹è½½å��å�¯ç›´æ�¥è¿�è¡Œã€‚&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;ä»� &lt;a href="https://github.com/WEIFENG2333/VideoCaptioner/releases"&gt;Release&lt;/a&gt; é¡µé�¢ä¸‹è½½æœ€æ–°ç‰ˆæœ¬çš„å�¯æ‰§è¡Œç¨‹åº�ã€‚æˆ–è€…ï¼š&lt;a href="https://wwwm.lanzoue.com/ii14G2pdsbej"&gt;è“�å¥�ç›˜ä¸‹è½½&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;æ‰“å¼€å®‰è£…åŒ…è¿›è¡Œå®‰è£…&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;LLM API é…�ç½®ï¼Œï¼ˆç”¨äº�å­—å¹•æ–­å�¥ã€�æ ¡æ­£ï¼‰ï¼Œå�¯ä½¿ç”¨ &lt;a href="https://api.videocaptioner.cn"&gt;âœ¨æœ¬é¡¹ç›®çš„ä¸­è½¬ç«™ &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ç¿»è¯‘é…�ç½®ï¼Œé€‰æ‹©æ˜¯å�¦å�¯ç”¨ç¿»è¯‘ï¼Œç¿»è¯‘æœ�åŠ¡ï¼ˆé»˜è®¤ä½¿ç”¨å¾®è½¯ç¿»è¯‘ï¼Œè´¨é‡�ä¸€èˆ¬ï¼Œæ�¨è��ä½¿ç”¨å¤§æ¨¡å�‹ç¿»è¯‘ï¼‰&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;è¯­éŸ³è¯†åˆ«é…�ç½®ï¼ˆé»˜è®¤ä½¿ç”¨Bæ�¥å�£ï¼Œä¸­è‹±ä»¥å¤–çš„è¯­è¨€è¯·ä½¿ç”¨æœ¬åœ°è½¬å½•ï¼‰&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;æ‹–æ‹½è§†é¢‘æ–‡ä»¶åˆ°è½¯ä»¶çª—å�£ï¼Œå�³å�¯å…¨è‡ªåŠ¨å¤„ç�†&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;æ��ç¤ºï¼šæ¯�ä¸€ä¸ªæ­¥éª¤å�‡æ”¯æŒ�å�•ç‹¬å¤„ç�†ï¼Œå�‡æ”¯æŒ�æ–‡ä»¶æ‹–æ‹½ã€‚è½¯ä»¶å…·ä½“æ¨¡å�‹é€‰æ‹©å’Œå�‚æ•°é…�ç½®è¯´æ˜�ï¼Œè¯·æŸ¥çœ‹ä¸‹æ–‡ã€‚&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;MacOS ç”¨æˆ·&lt;/summary&gt; 
 &lt;p&gt;ç”±äº�æœ¬äººç¼ºå°‘ Macï¼Œæ‰€ä»¥æ²¡æ³•æµ‹è¯•å’Œæ‰“åŒ…ï¼Œæš‚æ— æ³•æ��ä¾› MacOS çš„å�¯æ‰§è¡Œç¨‹åº�ã€‚&lt;/p&gt; 
 &lt;p&gt;Mac ç”¨æˆ·è¯·è‡ªè¡Œä½¿ç”¨ä¸‹è½½æº�ç �å’Œå®‰è£… python ä¾�èµ–è¿�è¡Œã€‚ï¼ˆæœ¬åœ° Whisper åŠŸèƒ½æš‚ä¸�æ”¯æŒ� MacOSï¼‰&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;å®‰è£… ffmpeg å’Œ Aria2 ä¸‹è½½å·¥å…·&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;brew install ffmpeg
brew install aria2
brew install python@3.**
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="2"&gt; 
  &lt;li&gt;å…‹éš†é¡¹ç›®&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/WEIFENG2333/VideoCaptioner.git
cd VideoCaptioner
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="3"&gt; 
  &lt;li&gt;å®‰è£…ä¾�èµ–&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;python3.** -m venv venv
source venv/bin/activate
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="4"&gt; 
  &lt;li&gt;è¿�è¡Œç¨‹åº�&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;python main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Docker éƒ¨ç½²ï¼ˆbetaï¼‰&lt;/summary&gt; 
 &lt;p&gt;ç›®å‰�æœ¬é¡¹ç›®streamlitåº”ç”¨å› ä¸ºé¡¹ç›®é‡�æ�„è¿‡ï¼ŒDockerä¸�å�¯ä»¥ä½¿ç”¨ã€‚æ¬¢è¿�å�„ä½�PRè´¡çŒ®æ–°ä»£ç �ã€‚&lt;/p&gt; 
 &lt;h3&gt;1. å…‹éš†é¡¹ç›®&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/WEIFENG2333/VideoCaptioner.git
cd VideoCaptioner

&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;2. æ�„å»ºé•œåƒ�&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;docker build -t video-captioner .
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;3. è¿�è¡Œå®¹å™¨&lt;/h3&gt; 
 &lt;p&gt;ä½¿ç”¨è‡ªå®šä¹‰APIé…�ç½®è¿�è¡Œï¼š&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d \
  -p 8501:8501 \
  -v $(pwd)/temp:/app/temp \
  -e OPENAI_BASE_URL="ä½ çš„APIåœ°å�€" \
  -e OPENAI_API_KEY="ä½ çš„APIå¯†é’¥" \
  --name video-captioner \
  video-captioner
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;4. è®¿é—®åº”ç”¨&lt;/h3&gt; 
 &lt;p&gt;æ‰“å¼€æµ�è§ˆå™¨è®¿é—®ï¼š&lt;code&gt;http://localhost:8501&lt;/code&gt;&lt;/p&gt; 
 &lt;h3&gt;æ³¨æ„�äº‹é¡¹&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;å®¹å™¨å†…å·²é¢„è£…ffmpegç­‰å¿…è¦�ä¾�èµ–&lt;/li&gt; 
  &lt;li&gt;å¦‚éœ€ä½¿ç”¨å…¶ä»–æ¨¡å�‹ï¼Œè¯·é€šè¿‡ç�¯å¢ƒå�˜é‡�é…�ç½®&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;âš™ï¸� åŸºæœ¬é…�ç½®&lt;/h2&gt; 
&lt;h3&gt;1. LLM API é…�ç½®è¯´æ˜�&lt;/h3&gt; 
&lt;p&gt;LLM å¤§æ¨¡å�‹æ˜¯ç”¨æ�¥å­—å¹•æ®µå�¥ã€�å­—å¹•ä¼˜åŒ–ã€�ä»¥å�Šå­—å¹•ç¿»è¯‘ï¼ˆå¦‚æ�œé€‰æ‹©äº†LLM å¤§æ¨¡å�‹ç¿»è¯‘ï¼‰ã€‚&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;é…�ç½®é¡¹&lt;/th&gt; 
   &lt;th&gt;è¯´æ˜�&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SiliconCloud&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://cloud.siliconflow.cn/i/onCHcaDx"&gt;SiliconCloud å®˜ç½‘&lt;/a&gt;é…�ç½®æ–¹æ³•è¯·å�‚è€ƒ&lt;a href="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/llm_config.md"&gt;é…�ç½®æ–‡æ¡£&lt;/a&gt;&lt;br&gt;è¯¥å¹¶å�‘è¾ƒä½�ï¼Œå»ºè®®æŠŠçº¿ç¨‹è®¾ç½®ä¸º5ä»¥ä¸‹ã€‚&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepSeek&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://platform.deepseek.com"&gt;DeepSeek å®˜ç½‘&lt;/a&gt;ï¼Œå»ºè®®ä½¿ç”¨ &lt;code&gt;deepseek-v3&lt;/code&gt; æ¨¡å�‹ï¼Œ&lt;br&gt;å®˜æ–¹ç½‘ç«™æœ€è¿‘æœ�åŠ¡å¥½åƒ�å¹¶ä¸�å¤ªç¨³å®šã€‚&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ollamaæœ¬åœ°&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://ollama.com"&gt;Ollama å®˜ç½‘&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;å†…ç½®å…¬ç›Šæ¨¡å�‹&lt;/td&gt; 
   &lt;td&gt;å†…ç½®åŸºç¡€å¤§è¯­è¨€æ¨¡å�‹ï¼ˆ&lt;code&gt;gpt-4o-mini&lt;/code&gt;ï¼‰(å…¬ç›Šæœ�åŠ¡ä¸�ç¨³å®šï¼Œå¼ºçƒˆå»ºè®®è¯·ä½¿ç”¨è‡ªå·±çš„æ¨¡å�‹API)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OpenAIå…¼å®¹æ�¥å�£&lt;/td&gt; 
   &lt;td&gt;å¦‚æ�œæœ‰å…¶ä»–æœ�åŠ¡å•†çš„APIï¼Œå�¯ç›´æ�¥åœ¨è½¯ä»¶ä¸­å¡«å†™ã€‚base_url å’Œapi_key&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;æ³¨ï¼šå¦‚æ�œç”¨çš„ API æœ�åŠ¡å•†ä¸�æ”¯æŒ�é«˜å¹¶å�‘ï¼Œè¯·åœ¨è½¯ä»¶è®¾ç½®ä¸­å°†â€œçº¿ç¨‹æ•°â€�è°ƒä½�ï¼Œé�¿å…�è¯·æ±‚é”™è¯¯ã€‚&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;å¦‚æ�œå¸Œæœ›é«˜å¹¶å�‘âš¡ï¸�ï¼Œæˆ–è€…å¸Œæœ›åœ¨åœ¨è½¯ä»¶å†…ä½¿ç”¨ä½¿ç”¨ OpenAI æˆ–è€… Claude ç­‰ä¼˜è´¨å¤§æ¨¡å�‹è¿›è¡Œå­—å¹•æ ¡æ­£å’Œç¿»è¯‘ã€‚&lt;/p&gt; 
&lt;p&gt;å�¯ä½¿ç”¨æœ¬é¡¹ç›®çš„âœ¨LLM APIä¸­è½¬ç«™âœ¨ï¼š &lt;a href="https://api.videocaptioner.cn"&gt;https://api.videocaptioner.cn&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;å…¶æ”¯æŒ�é«˜å¹¶å�‘ï¼Œæ€§ä»·æ¯”æ��é«˜ï¼Œä¸”æœ‰å›½å†…å¤–å¤§é‡�æ¨¡å�‹å�¯æŒ‘é€‰ã€‚&lt;/p&gt; 
&lt;p&gt;æ³¨å†Œè�·å�–keyä¹‹å��ï¼Œè®¾ç½®ä¸­æŒ‰ç…§ä¸‹é�¢é…�ç½®ï¼š&lt;/p&gt; 
&lt;p&gt;BaseURL: &lt;code&gt;https://api.videocaptioner.cn/v1&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;API-key: &lt;code&gt;ä¸ªäººä¸­å¿ƒ-API ä»¤ç‰Œé¡µé�¢è‡ªè¡Œè�·å�–ã€‚&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;ğŸ’¡ æ¨¡å�‹é€‰æ‹©å»ºè®® (æœ¬äººåœ¨å�„è´¨é‡�å±‚çº§ä¸­ç²¾é€‰å‡ºçš„é«˜æ€§ä»·æ¯”æ¨¡å�‹)ï¼š&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;é«˜è´¨é‡�ä¹‹é€‰ï¼š &lt;code&gt;claude-3-5-sonnet-20241022&lt;/code&gt; (è€—è´¹æ¯”ä¾‹ï¼š3)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;è¾ƒé«˜è´¨é‡�ä¹‹é€‰ï¼š &lt;code&gt;gemini-2.0-flash&lt;/code&gt;ã€�&lt;code&gt;deepseek-chat&lt;/code&gt; (è€—è´¹æ¯”ä¾‹ï¼š1)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;ä¸­è´¨é‡�ä¹‹é€‰ï¼š &lt;code&gt;gpt-4o-mini&lt;/code&gt;ã€�&lt;code&gt;gemini-1.5-flash&lt;/code&gt; (è€—è´¹æ¯”ä¾‹ï¼š0.15)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;æœ¬ç«™æ”¯æŒ�è¶…é«˜å¹¶å�‘ï¼Œè½¯ä»¶ä¸­çº¿ç¨‹æ•°ç›´æ�¥æ‹‰æ»¡å�³å�¯~ å¤„ç�†é€Ÿåº¦é��å¸¸å¿«~&lt;/p&gt; 
&lt;p&gt;æ›´è¯¦ç»†çš„APIé…�ç½®æ•™ç¨‹ï¼š&lt;a href="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/llm_config.md#%E4%B8%AD%E8%BD%AC%E7%AB%99%E9%85%8D%E7%BD%AE"&gt;ä¸­è½¬ç«™é…�ç½®é…�ç½®&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;2. ç¿»è¯‘é…�ç½®&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;é…�ç½®é¡¹&lt;/th&gt; 
   &lt;th&gt;è¯´æ˜�&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;LLM å¤§æ¨¡å�‹ç¿»è¯‘&lt;/td&gt; 
   &lt;td&gt;ğŸŒŸ ç¿»è¯‘è´¨é‡�æœ€å¥½çš„é€‰æ‹©ã€‚ä½¿ç”¨ AI å¤§æ¨¡å�‹è¿›è¡Œç¿»è¯‘,èƒ½æ›´å¥½ç�†è§£ä¸Šä¸‹æ–‡,ç¿»è¯‘æ›´è‡ªç„¶ã€‚éœ€è¦�åœ¨è®¾ç½®ä¸­é…�ç½® LLM API(æ¯”å¦‚ OpenAIã€�DeepSeek ç­‰)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepLx ç¿»è¯‘&lt;/td&gt; 
   &lt;td&gt;ç¿»è¯‘è¾ƒå�¯é� ã€‚åŸºäº� DeepL ç¿»è¯‘, éœ€è¦�è¦�é…�ç½®è‡ªå·±çš„å��ç«¯æ�¥å�£ã€‚&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;å¾®è½¯ç¿»è¯‘&lt;/td&gt; 
   &lt;td&gt;ä½¿ç”¨å¾®è½¯çš„ç¿»è¯‘æœ�åŠ¡, é€Ÿåº¦é��å¸¸å¿«&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;è°·æ­Œç¿»è¯‘&lt;/td&gt; 
   &lt;td&gt;è°·æ­Œçš„ç¿»è¯‘æœ�åŠ¡,é€Ÿåº¦å¿«,ä½†éœ€è¦�èƒ½è®¿é—®è°·æ­Œçš„ç½‘ç»œç�¯å¢ƒ&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;æ�¨è��ä½¿ç”¨ &lt;code&gt;LLM å¤§æ¨¡å�‹ç¿»è¯‘&lt;/code&gt; ï¼Œç¿»è¯‘è´¨é‡�æœ€å¥½ã€‚&lt;/p&gt; 
&lt;h3&gt;3. è¯­éŸ³è¯†åˆ«æ�¥å�£è¯´æ˜�&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;æ�¥å�£å��ç§°&lt;/th&gt; 
   &lt;th&gt;æ”¯æŒ�è¯­è¨€&lt;/th&gt; 
   &lt;th&gt;è¿�è¡Œæ–¹å¼�&lt;/th&gt; 
   &lt;th&gt;è¯´æ˜�&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Bæ�¥å�£&lt;/td&gt; 
   &lt;td&gt;ä»…æ”¯æŒ�ä¸­æ–‡ã€�è‹±æ–‡&lt;/td&gt; 
   &lt;td&gt;åœ¨çº¿&lt;/td&gt; 
   &lt;td&gt;å…�è´¹ã€�é€Ÿåº¦è¾ƒå¿«&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Jæ�¥å�£&lt;/td&gt; 
   &lt;td&gt;ä»…æ”¯æŒ�ä¸­æ–‡ã€�è‹±æ–‡&lt;/td&gt; 
   &lt;td&gt;åœ¨çº¿&lt;/td&gt; 
   &lt;td&gt;å…�è´¹ã€�é€Ÿåº¦è¾ƒå¿«&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;WhisperCpp&lt;/td&gt; 
   &lt;td&gt;ä¸­æ–‡ã€�æ—¥è¯­ã€�éŸ©è¯­ã€�è‹±æ–‡ç­‰ 99 ç§�è¯­è¨€ï¼Œå¤–è¯­æ•ˆæ�œè¾ƒå¥½&lt;/td&gt; 
   &lt;td&gt;æœ¬åœ°&lt;/td&gt; 
   &lt;td&gt;ï¼ˆå®�é™…ä½¿ç”¨ä¸�ç¨³å®šï¼‰éœ€è¦�ä¸‹è½½è½¬å½•æ¨¡å�‹&lt;br&gt;ä¸­æ–‡å»ºè®®mediumä»¥ä¸Šæ¨¡å�‹&lt;br&gt;è‹±æ–‡ç­‰ä½¿ç”¨è¾ƒå°�æ¨¡å�‹å�³å�¯è¾¾åˆ°ä¸�é”™æ•ˆæ�œã€‚&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;fasterWhisper ğŸ‘�&lt;/td&gt; 
   &lt;td&gt;ä¸­æ–‡ã€�è‹±æ–‡ç­‰å¤š99ç§�è¯­è¨€ï¼Œå¤–è¯­æ•ˆæ�œä¼˜ç§€ï¼Œæ—¶é—´è½´æ›´å‡†ç¡®&lt;/td&gt; 
   &lt;td&gt;æœ¬åœ°&lt;/td&gt; 
   &lt;td&gt;ï¼ˆğŸŒŸæ��åŠ›æ�¨è��ğŸŒŸï¼‰éœ€è¦�ä¸‹è½½ç¨‹åº�å’Œè½¬å½•æ¨¡å�‹&lt;br&gt;æ”¯æŒ�CUDA,é€Ÿåº¦æ›´å¿«ï¼Œè½¬å½•å‡†ç¡®ã€‚&lt;br&gt;è¶…çº§å‡†ç¡®çš„æ—¶é—´æˆ³å­—å¹•ã€‚&lt;br&gt;å»ºè®®ä¼˜å…ˆä½¿ç”¨&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;4. æœ¬åœ° Whisper è¯­éŸ³è¯†åˆ«æ¨¡å�‹&lt;/h3&gt; 
&lt;p&gt;Whisper ç‰ˆæœ¬æœ‰ WhisperCpp å’Œ fasterWhisperï¼ˆæ�¨è��ï¼‰ ä¸¤ç§�ï¼Œå��è€…æ•ˆæ�œæ›´å¥½ï¼Œéƒ½éœ€è¦�è‡ªè¡Œåœ¨è½¯ä»¶å†…ä¸‹è½½æ¨¡å�‹ã€‚&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;æ¨¡å�‹&lt;/th&gt; 
   &lt;th&gt;ç£�ç›˜ç©ºé—´&lt;/th&gt; 
   &lt;th&gt;å†…å­˜å� ç”¨&lt;/th&gt; 
   &lt;th&gt;è¯´æ˜�&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Tiny&lt;/td&gt; 
   &lt;td&gt;75 MiB&lt;/td&gt; 
   &lt;td&gt;~273 MB&lt;/td&gt; 
   &lt;td&gt;è½¬å½•å¾ˆä¸€èˆ¬ï¼Œä»…ç”¨äº�æµ‹è¯•&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Small&lt;/td&gt; 
   &lt;td&gt;466 MiB&lt;/td&gt; 
   &lt;td&gt;~852 MB&lt;/td&gt; 
   &lt;td&gt;è‹±æ–‡è¯†åˆ«æ•ˆæ�œå·²ç»�ä¸�é”™&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Medium&lt;/td&gt; 
   &lt;td&gt;1.5 GiB&lt;/td&gt; 
   &lt;td&gt;~2.1 GB&lt;/td&gt; 
   &lt;td&gt;ä¸­æ–‡è¯†åˆ«å»ºè®®è‡³å°‘ä½¿ç”¨æ­¤ç‰ˆæœ¬&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Large-v2 ğŸ‘�&lt;/td&gt; 
   &lt;td&gt;2.9 GiB&lt;/td&gt; 
   &lt;td&gt;~3.9 GB&lt;/td&gt; 
   &lt;td&gt;æ•ˆæ�œå¥½ï¼Œé…�ç½®å…�è®¸æƒ…å†µæ�¨è��ä½¿ç”¨&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Large-v3&lt;/td&gt; 
   &lt;td&gt;2.9 GiB&lt;/td&gt; 
   &lt;td&gt;~3.9 GB&lt;/td&gt; 
   &lt;td&gt;ç¤¾åŒºå��é¦ˆå�¯èƒ½ä¼šå‡ºç�°å¹»è§‰/å­—å¹•é‡�å¤�é—®é¢˜&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;æ�¨è��æ¨¡å�‹: &lt;code&gt;Large-v2&lt;/code&gt; ç¨³å®šä¸”è´¨é‡�è¾ƒå¥½ã€‚&lt;/p&gt; 
&lt;p&gt;æ³¨ï¼šä»¥ä¸Šæ¨¡å�‹å›½å†…ç½‘ç»œå�¯ç›´æ�¥åœ¨è½¯ä»¶å†…ä¸‹è½½ã€‚&lt;/p&gt; 
&lt;h3&gt;5. æ–‡ç¨¿åŒ¹é…�&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;åœ¨"å­—å¹•ä¼˜åŒ–ä¸�ç¿»è¯‘"é¡µé�¢ï¼ŒåŒ…å�«"æ–‡ç¨¿åŒ¹é…�"é€‰é¡¹ï¼Œæ”¯æŒ�ä»¥ä¸‹&lt;strong&gt;ä¸€ç§�æˆ–è€…å¤šç§�&lt;/strong&gt;å†…å®¹ï¼Œè¾…åŠ©æ ¡æ­£å­—å¹•å’Œç¿»è¯‘:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;ç±»å�‹&lt;/th&gt; 
   &lt;th&gt;è¯´æ˜�&lt;/th&gt; 
   &lt;th&gt;å¡«å†™ç¤ºä¾‹&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;æœ¯è¯­è¡¨&lt;/td&gt; 
   &lt;td&gt;ä¸“ä¸šæœ¯è¯­ã€�äººå��ã€�ç‰¹å®šè¯�è¯­çš„ä¿®æ­£å¯¹ç…§è¡¨&lt;/td&gt; 
   &lt;td&gt;æœºå™¨å­¦ä¹ -&amp;gt;Machine Learning&lt;br&gt;é©¬æ–¯å…‹-&amp;gt;Elon Musk&lt;br&gt;æ‰“call -&amp;gt; åº”æ�´&lt;br&gt;å›¾ç�µæ–‘å›¾&lt;br&gt;å…¬äº¤è½¦æ‚–è®º&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;å�Ÿå­—å¹•æ–‡ç¨¿&lt;/td&gt; 
   &lt;td&gt;è§†é¢‘çš„å�Ÿæœ‰æ–‡ç¨¿æˆ–ç›¸å…³å†…å®¹&lt;/td&gt; 
   &lt;td&gt;å®Œæ•´çš„æ¼”è®²ç¨¿ã€�è¯¾ç¨‹è®²ä¹‰ç­‰&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ä¿®æ­£è¦�æ±‚&lt;/td&gt; 
   &lt;td&gt;å†…å®¹ç›¸å…³çš„å…·ä½“ä¿®æ­£è¦�æ±‚&lt;/td&gt; 
   &lt;td&gt;ç»Ÿä¸€äººç§°ä»£è¯�ã€�è§„èŒƒä¸“ä¸šæœ¯è¯­ç­‰&lt;br&gt;å¡«å†™&lt;strong&gt;å†…å®¹ç›¸å…³&lt;/strong&gt;çš„è¦�æ±‚å�³å�¯ï¼Œ&lt;a href="https://github.com/WEIFENG2333/VideoCaptioner/issues/59#issuecomment-2495849752"&gt;ç¤ºä¾‹å�‚è€ƒ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;å¦‚æ�œéœ€è¦�æ–‡ç¨¿è¿›è¡Œå­—å¹•ä¼˜åŒ–è¾…åŠ©ï¼Œå…¨æµ�ç¨‹å¤„ç�†æ—¶ï¼Œå…ˆå¡«å†™æ–‡ç¨¿ä¿¡æ�¯ï¼Œå†�è¿›è¡Œå¼€å§‹ä»»åŠ¡å¤„ç�†&lt;/li&gt; 
 &lt;li&gt;æ³¨æ„�: ä½¿ç”¨ä¸Šä¸‹æ–‡å�‚æ•°é‡�ä¸�é«˜çš„å°�å�‹LLMæ¨¡å�‹æ—¶ï¼Œå»ºè®®æ�§åˆ¶æ–‡ç¨¿å†…å®¹åœ¨1å�ƒå­—å†…ï¼Œå¦‚æ�œä½¿ç”¨ä¸Šä¸‹æ–‡è¾ƒå¤§çš„æ¨¡å�‹ï¼Œåˆ™å�¯ä»¥é€‚å½“å¢�åŠ æ–‡ç¨¿å†…å®¹ã€‚&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;æ— ç‰¹æ®Šéœ€æ±‚ï¼Œä¸€èˆ¬ä¸�å¡«å†™ã€‚&lt;/p&gt; 
&lt;h3&gt;6. Cookie é…�ç½®è¯´æ˜�&lt;/h3&gt; 
&lt;p&gt;å¦‚æ�œä½¿ç”¨URLä¸‹è½½åŠŸèƒ½æ—¶ï¼Œå¦‚æ�œé�‡åˆ°ä»¥ä¸‹æƒ…å†µ:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;ä¸‹è½½è§†é¢‘ç½‘ç«™éœ€è¦�ç™»å½•ä¿¡æ�¯æ‰�å�¯ä»¥ä¸‹è½½ï¼›&lt;/li&gt; 
 &lt;li&gt;å�ªèƒ½ä¸‹è½½è¾ƒä½�åˆ†è¾¨ç�‡çš„è§†é¢‘ï¼›&lt;/li&gt; 
 &lt;li&gt;ç½‘ç»œæ�¡ä»¶è¾ƒå·®æ—¶éœ€è¦�éªŒè¯�ï¼›&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;è¯·å�‚è€ƒ &lt;a href="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/get_cookies.md"&gt;Cookie é…�ç½®è¯´æ˜�&lt;/a&gt; è�·å�–Cookieä¿¡æ�¯ï¼Œå¹¶å°†cookies.txtæ–‡ä»¶æ”¾ç½®åˆ°è½¯ä»¶å®‰è£…ç›®å½•çš„ &lt;code&gt;AppData&lt;/code&gt; ç›®å½•ä¸‹ï¼Œå�³å�¯æ­£å¸¸ä¸‹è½½é«˜è´¨é‡�è§†é¢‘ã€‚&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ğŸ’¡ è½¯ä»¶æµ�ç¨‹ä»‹ç»�&lt;/h2&gt; 
&lt;p&gt;ç¨‹åº�ç®€å�•çš„å¤„ç�†æµ�ç¨‹å¦‚ä¸‹:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;è¯­éŸ³è¯†åˆ«è½¬å½• -&amp;gt; å­—å¹•æ–­å�¥(å�¯é€‰) -&amp;gt; å­—å¹•ä¼˜åŒ–ç¿»è¯‘(å�¯é€‰) -&amp;gt; å­—å¹•è§†é¢‘å�ˆæˆ�
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;âœ¨ è½¯ä»¶ä¸»è¦�åŠŸèƒ½&lt;/h2&gt; 
&lt;p&gt;è½¯ä»¶åˆ©ç”¨å¤§è¯­è¨€æ¨¡å�‹(LLM)åœ¨ç�†è§£ä¸Šä¸‹æ–‡æ–¹é�¢çš„ä¼˜åŠ¿ï¼Œå¯¹è¯­éŸ³è¯†åˆ«ç”Ÿæˆ�çš„å­—å¹•è¿›ä¸€æ­¥å¤„ç�†ã€‚æœ‰æ•ˆä¿®æ­£é”™åˆ«å­—ã€�ç»Ÿä¸€ä¸“ä¸šæœ¯è¯­ï¼Œè®©å­—å¹•å†…å®¹æ›´åŠ å‡†ç¡®è¿�è´¯ï¼Œä¸ºç”¨æˆ·å¸¦æ�¥å‡ºè‰²çš„è§‚çœ‹ä½“éªŒï¼�&lt;/p&gt; 
&lt;h4&gt;1. å¤šå¹³å�°è§†é¢‘ä¸‹è½½ä¸�å¤„ç�†&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;æ”¯æŒ�å›½å†…å¤–ä¸»æµ�è§†é¢‘å¹³å�°ï¼ˆBç«™ã€�Youtubeã€�å°�çº¢ä¹¦ã€�TikTokã€�Xã€�è¥¿ç“œè§†é¢‘ã€�æŠ–éŸ³ç­‰ï¼‰&lt;/li&gt; 
 &lt;li&gt;è‡ªåŠ¨æ��å�–è§†é¢‘å�Ÿæœ‰å­—å¹•å¤„ç�†&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;2. ä¸“ä¸šçš„è¯­éŸ³è¯†åˆ«å¼•æ“�&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;æ��ä¾›å¤šç§�æ�¥å�£åœ¨çº¿è¯†åˆ«ï¼Œæ•ˆæ�œåª²ç¾�å‰ªæ˜ ï¼ˆå…�è´¹ã€�é«˜é€Ÿï¼‰&lt;/li&gt; 
 &lt;li&gt;æ”¯æŒ�æœ¬åœ°Whisperæ¨¡å�‹ï¼ˆä¿�æŠ¤éš�ç§�ã€�å�¯ç¦»çº¿ï¼‰&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;3. å­—å¹•æ™ºèƒ½çº é”™&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;è‡ªåŠ¨ä¼˜åŒ–ä¸“ä¸šæœ¯è¯­ã€�ä»£ç �ç‰‡æ®µå’Œæ•°å­¦å…¬å¼�æ ¼å¼�&lt;/li&gt; 
 &lt;li&gt;ä¸Šä¸‹æ–‡è¿›è¡Œæ–­å�¥ä¼˜åŒ–ï¼Œæ��å�‡é˜…è¯»ä½“éªŒ&lt;/li&gt; 
 &lt;li&gt;æ”¯æŒ�æ–‡ç¨¿æ��ç¤ºï¼Œä½¿ç”¨å�Ÿæœ‰æ–‡ç¨¿æˆ–è€…ç›¸å…³æ��ç¤ºä¼˜åŒ–å­—å¹•æ–­å�¥&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;4. é«˜è´¨é‡�å­—å¹•ç¿»è¯‘&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;ç»“å�ˆä¸Šä¸‹æ–‡çš„æ™ºèƒ½ç¿»è¯‘ï¼Œç¡®ä¿�è¯‘æ–‡å…¼é¡¾å…¨æ–‡&lt;/li&gt; 
 &lt;li&gt;é€šè¿‡PromptæŒ‡å¯¼å¤§æ¨¡å�‹å��æ€�ç¿»è¯‘ï¼Œæ��å�‡ç¿»è¯‘è´¨é‡�&lt;/li&gt; 
 &lt;li&gt;ä½¿ç”¨åº�åˆ—æ¨¡ç³ŠåŒ¹é…�ç®—æ³•ã€�ä¿�è¯�æ—¶é—´è½´å®Œå…¨ä¸€è‡´&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;5. å­—å¹•æ ·å¼�è°ƒæ•´&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;ä¸°å¯Œçš„å­—å¹•æ ·å¼�æ¨¡æ�¿ï¼ˆç§‘æ™®é£�ã€�æ–°é—»é£�ã€�ç•ªå‰§é£�ç­‰ç­‰ï¼‰&lt;/li&gt; 
 &lt;li&gt;å¤šç§�æ ¼å¼�å­—å¹•è§†é¢‘ï¼ˆSRTã€�ASSã€�VTTã€�TXTï¼‰&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;é’ˆå¯¹å°�ç™½ç”¨æˆ·ï¼Œå¯¹ä¸€äº›è½¯ä»¶å†…çš„é€‰é¡¹è¯´æ˜�ï¼š&lt;/p&gt; 
&lt;h4&gt;1. è¯­éŸ³è½¬å½•é¡µé�¢&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;VADè¿‡æ»¤&lt;/code&gt;ï¼šå¼€å�¯å��ï¼ŒVADï¼ˆè¯­éŸ³æ´»åŠ¨æ£€æµ‹ï¼‰å°†è¿‡æ»¤æ— äººå£°çš„è¯­éŸ³ç‰‡æ®µï¼Œä»�è€Œå‡�å°‘å¹»è§‰ç�°è±¡ã€‚å»ºè®®ä¿�æŒ�é»˜è®¤å¼€å�¯çŠ¶æ€�ã€‚å¦‚æ�œä¸�æ‡‚ï¼Œå…¶ä»–VADé€‰é¡¹å»ºè®®ç›´æ�¥ä¿�æŒ�é»˜è®¤å�³å�¯ã€‚&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;éŸ³é¢‘åˆ†ç¦»&lt;/code&gt;ï¼šå¼€å�¯å��ï¼Œä½¿ç”¨MDX-Netè¿›è¡Œé™�å™ªå¤„ç�†ï¼Œèƒ½å¤Ÿæœ‰æ•ˆåˆ†ç¦»äººå£°å’ŒèƒŒæ™¯éŸ³ä¹�ï¼Œä»�è€Œæ��å�‡éŸ³é¢‘è´¨é‡�ã€‚å»ºè®®å�ªåœ¨å˜ˆæ�‚çš„è§†é¢‘ä¸­å¼€å�¯ã€‚&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;2. å­—å¹•ä¼˜åŒ–ä¸�ç¿»è¯‘é¡µé�¢&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;æ™ºèƒ½æ–­å�¥&lt;/code&gt;ï¼šå¼€å�¯å��ï¼Œå…¨æµ�ç¨‹å¤„ç�†æ—¶ç”Ÿæˆ�å­—çº§æ—¶é—´æˆ³ï¼Œç„¶å��é€šè¿‡LLMå¤§æ¨¡å�‹è¿›è¡Œæ–­å�¥ï¼Œä»�è€Œåœ¨è§†é¢‘æœ‰æ›´å®Œç¾�çš„è§‚çœ‹ä½“éªŒã€‚æœ‰æŒ‰ç…§å�¥å­�æ–­å�¥å’ŒæŒ‰ç…§è¯­ä¹‰æ–­å�¥ä¸¤ç§�æ¨¡å¼�ã€‚å�¯æ ¹æ�®è‡ªå·±çš„éœ€æ±‚é…�ç½®ã€‚&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;å­—å¹•æ ¡æ­£&lt;/code&gt;ï¼šå¼€å�¯å��ï¼Œä¼šé€šè¿‡LLMå¤§æ¨¡å�‹å¯¹å­—å¹•å†…å®¹è¿›è¡Œæ ¡æ­£(å¦‚ï¼šè‹±æ–‡å�•è¯�å¤§å°�å†™ã€�æ ‡ç‚¹ç¬¦å�·ã€�é”™åˆ«å­—ã€�æ•°å­¦å…¬å¼�å’Œä»£ç �çš„æ ¼å¼�ç­‰)ï¼Œæ��å�‡å­—å¹•çš„è´¨é‡�ã€‚&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;å��æ€�ç¿»è¯‘&lt;/code&gt;ï¼šå¼€å�¯å��ï¼Œä¼šé€šè¿‡LLMå¤§æ¨¡å�‹è¿›è¡Œå��æ€�ç¿»è¯‘ï¼Œæ��å�‡ç¿»è¯‘çš„è´¨é‡�ã€‚ç›¸åº”çš„ä¼šå¢�åŠ è¯·æ±‚çš„æ—¶é—´å’Œæ¶ˆè€—çš„Tokenã€‚(é€‰é¡¹åœ¨ è®¾ç½®é¡µ-LLMå¤§æ¨¡å�‹ç¿»è¯‘-å��æ€�ç¿»è¯‘ ä¸­å¼€å�¯ã€‚)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;æ–‡ç¨¿æ��ç¤º&lt;/code&gt;ï¼šå¡«å†™å��ï¼Œè¿™éƒ¨åˆ†ä¹Ÿå°†ä½œä¸ºæ��ç¤ºè¯�å�‘é€�ç»™å¤§æ¨¡å�‹ï¼Œè¾…åŠ©å­—å¹•ä¼˜åŒ–å’Œç¿»è¯‘ã€‚&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;3. å­—å¹•è§†é¢‘å�ˆæˆ�é¡µé�¢&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;è§†é¢‘å�ˆæˆ�&lt;/code&gt;ï¼šå¼€å�¯å��ï¼Œä¼šæ ¹æ�®å�ˆæˆ�å­—å¹•è§†é¢‘ï¼›å…³é—­å°†è·³è¿‡è§†é¢‘å�ˆæˆ�çš„æµ�ç¨‹ã€‚&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;è½¯å­—å¹•&lt;/code&gt;ï¼šå¼€å�¯å��ï¼Œå­—å¹•ä¸�ä¼šçƒ§å½•åˆ°è§†é¢‘ä¸­ï¼Œå¤„ç�†é€Ÿåº¦æ��å¿«ã€‚ä½†æ˜¯è½¯å­—å¹•éœ€è¦�ä¸€äº›æ’­æ”¾å™¨ï¼ˆå¦‚PotPlayerï¼‰æ”¯æŒ�æ‰�å�¯ä»¥è¿›è¡Œæ˜¾ç¤ºæ’­æ”¾ã€‚è€Œä¸”è½¯å­—å¹•çš„æ ·å¼�ä¸�æ˜¯è½¯ä»¶å†…è°ƒæ•´çš„å­—å¹•æ ·å¼�ï¼Œè€Œæ˜¯æ’­æ”¾å™¨é»˜è®¤çš„ç™½è‰²æ ·å¼�ã€‚&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;å®‰è£…è½¯ä»¶çš„ä¸»è¦�ç›®å½•ç»“æ�„è¯´æ˜�å¦‚ä¸‹ï¼š&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;VideoCaptioner/
â”œâ”€â”€ runtime/                    # è¿�è¡Œç�¯å¢ƒç›®å½•
â”œâ”€â”€ resources/               # è½¯ä»¶èµ„æº�æ–‡ä»¶ç›®å½•ï¼ˆäºŒè¿›åˆ¶ç¨‹åº�ã€�å›¾æ ‡ç­‰,ä»¥å�Šä¸‹è½½çš„faster-whisperç¨‹åº�ï¼‰
â”œâ”€â”€ work-dir/               # å·¥ä½œç›®å½•ï¼Œå¤„ç�†å®Œæˆ�çš„è§†é¢‘å’Œå­—å¹•æ–‡ä»¶ä¿�å­˜åœ¨è¿™é‡Œ
â”œâ”€â”€ AppData/                    # åº”ç”¨æ•°æ�®ç›®å½•
    â”œâ”€â”€ cache/              # ç¼“å­˜ç›®å½•ï¼Œç¼“å­˜è½¬å½•ã€�å¤§æ¨¡å�‹è¯·æ±‚çš„æ•°æ�®ã€‚
    â”œâ”€â”€ models/              # å­˜æ”¾ Whisper æ¨¡å�‹æ–‡ä»¶
    â”œâ”€â”€ logs/               # æ—¥å¿—ç›®å½•ï¼Œè®°å½•è½¯ä»¶è¿�è¡ŒçŠ¶æ€�
    â”œâ”€â”€ settings.json          # å­˜å‚¨ç”¨æˆ·è®¾ç½®
    â””â”€â”€  cookies.txt           # è§†é¢‘å¹³å�°çš„ cookie ä¿¡æ�¯ï¼ˆä¸‹è½½é«˜æ¸…è§†é¢‘æ—¶éœ€è¦�ï¼‰
â””â”€â”€ VideoCaptioner.exe      # ä¸»ç¨‹åº�æ‰§è¡Œæ–‡ä»¶
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ğŸ“� è¯´æ˜�&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;å­—å¹•æ–­å�¥çš„è´¨é‡�å¯¹è§‚çœ‹ä½“éªŒè‡³å…³é‡�è¦�ã€‚è½¯ä»¶èƒ½å°†é€�å­—å­—å¹•æ™ºèƒ½é‡�ç»„ä¸ºç¬¦å�ˆè‡ªç„¶è¯­è¨€ä¹ æƒ¯çš„æ®µè�½ï¼Œå¹¶ä¸�è§†é¢‘ç”»é�¢å®Œç¾�å�Œæ­¥ã€‚&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;åœ¨å¤„ç�†è¿‡ç¨‹ä¸­ï¼Œä»…å�‘å¤§è¯­è¨€æ¨¡å�‹å�‘é€�æ–‡æœ¬å†…å®¹ï¼Œä¸�åŒ…å�«æ—¶é—´è½´ä¿¡æ�¯ï¼Œè¿™å¤§å¤§é™�ä½�äº†å¤„ç�†å¼€é”€ã€‚&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;åœ¨ç¿»è¯‘ç�¯èŠ‚ï¼Œæˆ‘ä»¬é‡‡ç”¨å�´æ�©è¾¾æ��å‡ºçš„"ç¿»è¯‘-å��æ€�-ç¿»è¯‘"æ–¹æ³•è®ºã€‚è¿™ç§�è¿­ä»£ä¼˜åŒ–çš„æ–¹å¼�ç¡®ä¿�äº†ç¿»è¯‘çš„å‡†ç¡®æ€§ã€‚&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;å¡«å…¥ YouTube é“¾æ�¥æ—¶è¿›è¡Œå¤„ç�†æ—¶ï¼Œä¼šè‡ªåŠ¨ä¸‹è½½è§†é¢‘çš„å­—å¹•ï¼Œä»�è€Œçœ�å�»è½¬å½•æ­¥éª¤ï¼Œæ��å¤§åœ°èŠ‚çœ�æ“�ä½œæ—¶é—´ã€‚&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;ğŸ¤� è´¡çŒ®æŒ‡å�—&lt;/h2&gt; 
&lt;p&gt;ä½œè€…æ˜¯ä¸€å��å¤§ä¸‰å­¦ç”Ÿï¼Œä¸ªäººèƒ½åŠ›å’Œé¡¹ç›®éƒ½è¿˜æœ‰è®¸å¤šä¸�è¶³ï¼Œé¡¹ç›®ä¹Ÿåœ¨ä¸�æ–­å®Œå–„ä¸­ï¼Œå¦‚æ�œåœ¨ä½¿ç”¨è¿‡ç¨‹é�‡åˆ°çš„Bugï¼Œæ¬¢è¿�æ��äº¤ &lt;a href="https://github.com/WEIFENG2333/VideoCaptioner/issues"&gt;Issue&lt;/a&gt; å’Œ Pull Request å¸®åŠ©æ”¹è¿›é¡¹ç›®ã€‚&lt;/p&gt; 
&lt;h2&gt;æ›´æ–°æ—¥å¿—&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;2025.02.07&lt;/summary&gt; ### Bug ä¿®å¤�ä¸�å…¶ä»–æ”¹è¿› - ä¿®å¤�è°·æ­Œç¿»è¯‘è¯­è¨€ä¸�æ­£ç¡®çš„é—®é¢˜ã€‚ - ä¿®éƒ¨å¾®è½¯ç¿»è¯‘ä¸�å‡†ç¡®çš„é—®é¢˜ã€‚ - ä¿®å¤�è¿�è¡Œè®¾å¤‡ä¸�é€‰æ‹©cudaæ—¶æ˜¾ç¤ºæŠ¥ winErrorçš„é”™è¯¯ - ä¿®å¤�å�ˆæˆ�å¤±è´¥çš„é—®é¢˜ - ä¿®å¤�asså�•è¯­å­—å¹•æ²¡æœ‰å†…å®¹çš„é—®é¢˜ 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;2024.2.06&lt;/summary&gt; 
 &lt;h3&gt;æ ¸å¿ƒåŠŸèƒ½å¢�å¼º&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;å®Œæ•´é‡�æ�„ä»£ç �æ�¶æ�„ï¼Œä¼˜åŒ–æ•´ä½“æ€§èƒ½&lt;/li&gt; 
  &lt;li&gt;å­—å¹•ä¼˜åŒ–ä¸�ç¿»è¯‘åŠŸèƒ½æ¨¡å�—åˆ†ç¦»ï¼Œæ��ä¾›æ›´ç�µæ´»çš„å¤„ç�†é€‰é¡¹&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�æ‰¹é‡�å¤„ç�†åŠŸèƒ½ï¼šæ”¯æŒ�æ‰¹é‡�å­—å¹•ã€�æ‰¹é‡�è½¬å½•ã€�æ‰¹é‡�å­—å¹•è§†é¢‘å�ˆæˆ�&lt;/li&gt; 
  &lt;li&gt;å…¨é�¢ä¼˜åŒ– UI ç•Œé�¢ä¸�äº¤äº’ç»†èŠ‚&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;AI æ¨¡å�‹ä¸�ç¿»è¯‘å�‡çº§&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;æ‰©å±• LLM æ”¯æŒ�ï¼šæ–°å¢� SiliconCloudã€�DeepSeekã€�Ollamaã€�Geminiã€�ChatGLM ç­‰æ¨¡å�‹&lt;/li&gt; 
  &lt;li&gt;é›†æˆ�å¤šç§�ç¿»è¯‘æœ�åŠ¡ï¼šDeepLxã€�Bingã€�Googleã€�LLM&lt;/li&gt; 
  &lt;li&gt;æ–°å¢� faster-whisper-large-v3-turbo æ¨¡å�‹æ”¯æŒ�&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�å¤šç§� VADï¼ˆè¯­éŸ³æ´»åŠ¨æ£€æµ‹ï¼‰æ–¹æ³•&lt;/li&gt; 
  &lt;li&gt;æ”¯æŒ�è‡ªå®šä¹‰å��æ€�ç¿»è¯‘å¼€å…³&lt;/li&gt; 
  &lt;li&gt;å­—å¹•æ–­å�¥æ”¯æŒ�è¯­ä¹‰/å�¥å­�ä¸¤ç§�æ¨¡å¼�&lt;/li&gt; 
  &lt;li&gt;å­—å¹•æ–­å�¥ã€�ä¼˜åŒ–ã€�ç¿»è¯‘æ��ç¤ºè¯�çš„ä¼˜åŒ–&lt;/li&gt; 
  &lt;li&gt;å­—å¹•ã€�è½¬å½•ç¼“å­˜æœºåˆ¶çš„ä¼˜åŒ–&lt;/li&gt; 
  &lt;li&gt;ä¼˜åŒ–ä¸­æ–‡å­—å¹•è‡ªåŠ¨æ�¢è¡ŒåŠŸèƒ½&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�ç«–å±�å­—å¹•æ ·å¼�&lt;/li&gt; 
  &lt;li&gt;æ”¹è¿›å­—å¹•æ—¶é—´è½´åˆ‡æ�¢æœºåˆ¶ï¼Œæ¶ˆé™¤é—ªçƒ�é—®é¢˜&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Bug ä¿®å¤�ä¸�å…¶ä»–æ”¹è¿›&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;ä¿®å¤� Whisper API æ— æ³•ä½¿ç”¨é—®é¢˜&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�å¤šç§�å­—å¹•è§†é¢‘æ ¼å¼�æ”¯æŒ�&lt;/li&gt; 
  &lt;li&gt;ä¿®å¤�éƒ¨åˆ†æƒ…å†µè½¬å½•é”™è¯¯çš„é—®é¢˜&lt;/li&gt; 
  &lt;li&gt;ä¼˜åŒ–è§†é¢‘å·¥ä½œç›®å½•ç»“æ�„&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�æ—¥å¿—æŸ¥çœ‹åŠŸèƒ½&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�æ³°è¯­ã€�å¾·è¯­ç­‰è¯­è¨€çš„å­—å¹•ä¼˜åŒ–&lt;/li&gt; 
  &lt;li&gt;ä¿®å¤�è¯¸å¤šBug...&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;2024.12.07&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;æ–°å¢� Faster-whisper æ”¯æŒ�ï¼ŒéŸ³é¢‘è½¬å­—å¹•è´¨é‡�æ›´ä¼˜&lt;/li&gt; 
  &lt;li&gt;æ”¯æŒ�Vadè¯­éŸ³æ–­ç‚¹æ£€æµ‹ï¼Œå¤§å¤§å‡�å°‘å¹»è§‰ç�°è±¡&lt;/li&gt; 
  &lt;li&gt;æ”¯æŒ�äººå£°éŸ³åˆ†ç¦»ï¼Œåˆ†ç¦»è§†é¢‘èƒŒæ™¯å™ªéŸ³&lt;/li&gt; 
  &lt;li&gt;æ”¯æŒ�å…³é—­è§†é¢‘å�ˆæˆ�&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�å­—å¹•æœ€å¤§é•¿åº¦è®¾ç½®&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�å­—å¹•æœ«å°¾æ ‡ç‚¹å�»é™¤è®¾ç½®&lt;/li&gt; 
  &lt;li&gt;ä¼˜åŒ–å’Œç¿»è¯‘çš„æ��ç¤ºè¯�ä¼˜åŒ–&lt;/li&gt; 
  &lt;li&gt;ä¼˜åŒ–LLMå­—å¹•æ–­å�¥é”™è¯¯çš„æƒ…å†µ&lt;/li&gt; 
  &lt;li&gt;ä¿®å¤�éŸ³é¢‘è½¬æ�¢æ ¼å¼�ä¸�ä¸€è‡´é—®é¢˜&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;2024.11.23&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;æ–°å¢� Whisper-v3 æ¨¡å�‹æ”¯æŒ�ï¼Œå¤§å¹…æ��å�‡è¯­éŸ³è¯†åˆ«å‡†ç¡®ç�‡&lt;/li&gt; 
  &lt;li&gt;ä¼˜åŒ–å­—å¹•æ–­å�¥ç®—æ³•ï¼Œæ��ä¾›æ›´è‡ªç„¶çš„é˜…è¯»ä½“éªŒ&lt;/li&gt; 
  &lt;li&gt;ä¿®å¤�æ£€æµ‹æ¨¡å�‹å�¯ç”¨æ€§æ—¶çš„ç¨³å®šæ€§é—®é¢˜&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;2024.11.20&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;æ”¯æŒ�è‡ªå®šä¹‰è°ƒèŠ‚å­—å¹•ä½�ç½®å’Œæ ·å¼�&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�å­—å¹•ä¼˜åŒ–å’Œç¿»è¯‘è¿‡ç¨‹çš„å®�æ—¶æ—¥å¿—æŸ¥çœ‹&lt;/li&gt; 
  &lt;li&gt;ä¿®å¤�ä½¿ç”¨ API æ—¶çš„è‡ªåŠ¨ç¿»è¯‘é—®é¢˜&lt;/li&gt; 
  &lt;li&gt;ä¼˜åŒ–è§†é¢‘å·¥ä½œç›®å½•ç»“æ�„,æ��å�‡æ–‡ä»¶ç®¡ç�†æ•ˆç�‡&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;2024.11.17&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;æ”¯æŒ�å�Œè¯­/å�•è¯­å­—å¹•ç�µæ´»å¯¼å‡º&lt;/li&gt; 
  &lt;li&gt;æ–°å¢�æ–‡ç¨¿åŒ¹é…�æ��ç¤ºå¯¹é½�åŠŸèƒ½&lt;/li&gt; 
  &lt;li&gt;ä¿®å¤�å­—å¹•å¯¼å…¥æ—¶çš„ç¨³å®šæ€§é—®é¢˜&lt;/li&gt; 
  &lt;li&gt;ä¿®å¤�é��ä¸­æ–‡è·¯å¾„ä¸‹è½½æ¨¡å�‹çš„å…¼å®¹æ€§é—®é¢˜&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;2024.11.13&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;æ–°å¢� Whisper API è°ƒç”¨æ”¯æŒ�&lt;/li&gt; 
  &lt;li&gt;æ”¯æŒ�å¯¼å…¥ cookie.txt ä¸‹è½½å�„å¤§è§†é¢‘å¹³å�°èµ„æº�&lt;/li&gt; 
  &lt;li&gt;å­—å¹•æ–‡ä»¶å��è‡ªåŠ¨ä¸�è§†é¢‘ä¿�æŒ�ä¸€è‡´&lt;/li&gt; 
  &lt;li&gt;è½¯ä»¶ä¸»é¡µæ–°å¢�è¿�è¡Œæ—¥å¿—å®�æ—¶æŸ¥çœ‹&lt;/li&gt; 
  &lt;li&gt;ç»Ÿä¸€å’Œå®Œå–„è½¯ä»¶å†…éƒ¨åŠŸèƒ½&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;ğŸ’– æ”¯æŒ�ä½œè€…&lt;/h2&gt; 
&lt;p&gt;å¦‚æ�œè§‰å¾—é¡¹ç›®å¯¹ä½ æœ‰å¸®åŠ©ï¼Œå�¯ä»¥ç»™é¡¹ç›®ç‚¹ä¸ªStarï¼Œè¿™å°†æ˜¯å¯¹æˆ‘æœ€å¤§çš„é¼“åŠ±å’Œæ”¯æŒ�ï¼�&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;æ��åŠ©æ”¯æŒ�&lt;/summary&gt; 
 &lt;div align="center"&gt; 
  &lt;img src="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/images/alipay.jpg" alt="æ”¯ä»˜å®�äºŒç»´ç �" width="30%"&gt; 
  &lt;img src="https://raw.githubusercontent.com/WEIFENG2333/VideoCaptioner/master/docs/images/wechat.jpg" alt="å¾®ä¿¡äºŒç»´ç �" width="30%"&gt; 
 &lt;/div&gt; 
&lt;/details&gt; 
&lt;h2&gt;â­� Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#WEIFENG2333/VideoCaptioner&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=WEIFENG2333/VideoCaptioner&amp;amp;type=Date" alt="Star History Chart"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>paperless-ngx/paperless-ngx</title>
      <link>https://github.com/paperless-ngx/paperless-ngx</link>
      <description>&lt;p&gt;A community-supported supercharged document management system: scan, index and archive all your documents&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/paperless-ngx/paperless-ngx/actions"&gt;&lt;img src="https://github.com/paperless-ngx/paperless-ngx/workflows/ci/badge.svg?sanitize=true" alt="ci"&gt;&lt;/a&gt; &lt;a href="https://crowdin.com/project/paperless-ngx"&gt;&lt;img src="https://badges.crowdin.net/paperless-ngx/localized.svg?sanitize=true" alt="Crowdin"&gt;&lt;/a&gt; &lt;a href="https://docs.paperless-ngx.com"&gt;&lt;img src="https://img.shields.io/github/deployments/paperless-ngx/paperless-ngx/github-pages?label=docs" alt="Documentation Status"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/paperless-ngx/paperless-ngx"&gt;&lt;img src="https://codecov.io/gh/paperless-ngx/paperless-ngx/branch/main/graph/badge.svg?token=VK6OUPJ3TY" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/%23paperlessngx%3Amatrix.org"&gt;&lt;img src="https://matrix.to/img/matrix-badge.svg?sanitize=true" alt="Chat on Matrix"&gt;&lt;/a&gt; &lt;a href="https://demo.paperless-ngx.com"&gt;&lt;img src="https://cronitor.io/badges/ve7ItY/production/W5E_B9jkelG9ZbDiNHUPQEVH3MY.svg?sanitize=true" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/paperless-ngx/paperless-ngx/blob/main/resources/logo/web/png/White%20logo%20-%20no%20background.png" width="50%"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/paperless-ngx/paperless-ngx/raw/main/resources/logo/web/png/Black%20logo%20-%20no%20background.png" width="50%"&gt; 
  &lt;img src="https://github.com/paperless-ngx/paperless-ngx/raw/main/resources/logo/web/png/Black%20logo%20-%20no%20background.png" width="50%"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;!-- omit in toc --&gt; 
&lt;h1&gt;Paperless-ngx&lt;/h1&gt; 
&lt;p&gt;Paperless-ngx is a document management system that transforms your physical documents into a searchable online archive so you can keep, well, &lt;em&gt;less paper&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Paperless-ngx is the official successor to the original &lt;a href="https://github.com/the-paperless-project/paperless"&gt;Paperless&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/jonaswinkler/paperless-ng"&gt;Paperless-ng&lt;/a&gt; projects and is designed to distribute the responsibility of advancing and supporting the project among a team of people. &lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#community-support"&gt;Consider joining us!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Thanks to the generous folks at &lt;a href="https://m.do.co/c/8d70b916d462"&gt;DigitalOcean&lt;/a&gt;, a demo is available at &lt;a href="https://demo.paperless-ngx.com"&gt;demo.paperless-ngx.com&lt;/a&gt; using login &lt;code&gt;demo&lt;/code&gt; / &lt;code&gt;demo&lt;/code&gt;. &lt;em&gt;Note: demo content is reset frequently and confidential information should not be uploaded.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#getting-started"&gt;Getting started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#contributing"&gt;Contributing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#community-support"&gt;Community Support&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#translation"&gt;Translation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#feature-requests"&gt;Feature Requests&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#bugs"&gt;Bugs&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#related-projects"&gt;Related Projects&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/dev/#important-note"&gt;Important Note&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="right"&gt;This project is supported by:&lt;br&gt; &lt;a href="https://m.do.co/c/8d70b916d462" style="padding-top: 4px; display: block;"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_white.svg" width="140px"&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg" width="140px"&gt; 
   &lt;img src="https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_black_.svg?sanitize=true" width="140px"&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/main/docs/assets/screenshots/documents-smallcards-dark.png"&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/main/docs/assets/screenshots/documents-smallcards.png"&gt; 
 &lt;img src="https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/main/docs/assets/screenshots/documents-smallcards.png"&gt; 
&lt;/picture&gt; 
&lt;p&gt;A full list of &lt;a href="https://docs.paperless-ngx.com/#features"&gt;features&lt;/a&gt; and &lt;a href="https://docs.paperless-ngx.com/#screenshots"&gt;screenshots&lt;/a&gt; are available in the &lt;a href="https://docs.paperless-ngx.com/"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting started&lt;/h1&gt; 
&lt;p&gt;The easiest way to deploy paperless is &lt;code&gt;docker compose&lt;/code&gt;. The files in the &lt;a href="https://github.com/paperless-ngx/paperless-ngx/tree/main/docker/compose"&gt;&lt;code&gt;/docker/compose&lt;/code&gt; directory&lt;/a&gt; are configured to pull the image from the GitHub container registry.&lt;/p&gt; 
&lt;p&gt;If you'd like to jump right in, you can configure a &lt;code&gt;docker compose&lt;/code&gt; environment with our install script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bash -c "$(curl -L https://raw.githubusercontent.com/paperless-ngx/paperless-ngx/main/install-paperless-ngx.sh)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More details and step-by-step guides for alternative installation methods can be found in &lt;a href="https://docs.paperless-ngx.com/setup/#installation"&gt;the documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Migrating from Paperless-ng is easy, just drop in the new docker image! See the &lt;a href="https://docs.paperless-ngx.com/setup/#migrating-to-paperless-ngx"&gt;documentation on migrating&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;!-- omit in toc --&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;The documentation for Paperless-ngx is available at &lt;a href="https://docs.paperless-ngx.com/"&gt;https://docs.paperless-ngx.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;If you feel like contributing to the project, please do! Bug fixes, enhancements, visual fixes etc. are always welcome. If you want to implement something big: Please start a discussion about that! The &lt;a href="https://docs.paperless-ngx.com/development/"&gt;documentation&lt;/a&gt; has some basic information on how to get started.&lt;/p&gt; 
&lt;h2&gt;Community Support&lt;/h2&gt; 
&lt;p&gt;People interested in continuing the work on paperless-ngx are encouraged to reach out here on github and in the &lt;a href="https://matrix.to/#/%23paperless:matrix.org"&gt;Matrix Room&lt;/a&gt;. If you would like to contribute to the project on an ongoing basis there are multiple &lt;a href="https://github.com/orgs/paperless-ngx/people"&gt;teams&lt;/a&gt; (frontend, ci/cd, etc) that could use your help so please reach out!&lt;/p&gt; 
&lt;h2&gt;Translation&lt;/h2&gt; 
&lt;p&gt;Paperless-ngx is available in many languages that are coordinated on Crowdin. If you want to help out by translating paperless-ngx into your language, please head over to &lt;a href="https://crowdin.com/project/paperless-ngx"&gt;https://crowdin.com/project/paperless-ngx&lt;/a&gt;, and thank you! More details can be found in &lt;a href="https://github.com/paperless-ngx/paperless-ngx/raw/main/CONTRIBUTING.md#translating-paperless-ngx"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feature Requests&lt;/h2&gt; 
&lt;p&gt;Feature requests can be submitted via &lt;a href="https://github.com/paperless-ngx/paperless-ngx/discussions/categories/feature-requests"&gt;GitHub Discussions&lt;/a&gt;, you can search for existing ideas, add your own and vote for the ones you care about.&lt;/p&gt; 
&lt;h2&gt;Bugs&lt;/h2&gt; 
&lt;p&gt;For bugs please &lt;a href="https://github.com/paperless-ngx/paperless-ngx/issues"&gt;open an issue&lt;/a&gt; or &lt;a href="https://github.com/paperless-ngx/paperless-ngx/discussions"&gt;start a discussion&lt;/a&gt; if you have questions.&lt;/p&gt; 
&lt;h1&gt;Related Projects&lt;/h1&gt; 
&lt;p&gt;Please see &lt;a href="https://github.com/paperless-ngx/paperless-ngx/wiki/Related-Projects"&gt;the wiki&lt;/a&gt; for a user-maintained list of related projects and software that is compatible with Paperless-ngx.&lt;/p&gt; 
&lt;h1&gt;Important Note&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Document scanners are typically used to scan sensitive documents like your social insurance number, tax records, invoices, etc. &lt;strong&gt;Paperless-ngx should never be run on an untrusted host&lt;/strong&gt; because information is stored in clear text without encryption. No guarantees are made regarding security (but we do try!) and you use the app at your own risk. &lt;strong&gt;The safest way to run Paperless-ngx is on a local server in your own home with backups in place&lt;/strong&gt;.&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>sooperset/mcp-atlassian</title>
      <link>https://github.com/sooperset/mcp-atlassian</link>
      <description>&lt;p&gt;MCP server for Atlassian tools (Confluence, Jira)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Atlassian&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/pypi/v/mcp-atlassian" alt="PyPI Version"&gt; &lt;img src="https://img.shields.io/pypi/dm/mcp-atlassian" alt="PyPI - Downloads"&gt; &lt;img src="https://static.pepy.tech/personalized-badge/mcp-atlassian?period=total&amp;amp;units=international_system&amp;amp;left_color=grey&amp;amp;right_color=blue&amp;amp;left_text=Total%20Downloads" alt="PePy - Total Downloads"&gt; &lt;a href="https://github.com/sooperset/mcp-atlassian/actions/workflows/tests.yml"&gt;&lt;img src="https://github.com/sooperset/mcp-atlassian/actions/workflows/tests.yml/badge.svg?sanitize=true" alt="Run Tests"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/license/sooperset/mcp-atlassian" alt="License"&gt;&lt;/p&gt; 
&lt;p&gt;Model Context Protocol (MCP) server for Atlassian products (Confluence and Jira). This integration supports both Confluence &amp;amp; Jira Cloud and Server/Data Center deployments.&lt;/p&gt; 
&lt;h2&gt;Example Usage&lt;/h2&gt; 
&lt;p&gt;Ask your AI assistant to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ“� Automatic Jira Updates&lt;/strong&gt; - "Update Jira from our meeting notes"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ”� AI-Powered Confluence Search&lt;/strong&gt; - "Find our OKR guide in Confluence and summarize it"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ�› Smart Jira Issue Filtering&lt;/strong&gt; - "Show me urgent bugs in PROJ project from last week"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ğŸ“„ Content Creation &amp;amp; Management&lt;/strong&gt; - "Create a tech design doc for XYZ feature"&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature Demo&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/35303504-14c6-4ae4-913b-7c25ea511c3e"&gt;https://github.com/user-attachments/assets/35303504-14c6-4ae4-913b-7c25ea511c3e&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Confluence Demo&lt;/summary&gt; 
 &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/7fe9c488-ad0c-4876-9b54-120b666bb785"&gt;https://github.com/user-attachments/assets/7fe9c488-ad0c-4876-9b54-120b666bb785&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Compatibility&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Product&lt;/th&gt; 
   &lt;th&gt;Deployment Type&lt;/th&gt; 
   &lt;th&gt;Support Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Confluence&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Cloud&lt;/td&gt; 
   &lt;td&gt;âœ… Fully supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Confluence&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Server/Data Center&lt;/td&gt; 
   &lt;td&gt;âœ… Supported (version 6.0+)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Jira&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Cloud&lt;/td&gt; 
   &lt;td&gt;âœ… Fully supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Jira&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Server/Data Center&lt;/td&gt; 
   &lt;td&gt;âœ… Supported (version 8.14+)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Quick Start Guide&lt;/h2&gt; 
&lt;h3&gt;ğŸ”� 1. Authentication Setup&lt;/h3&gt; 
&lt;p&gt;MCP Atlassian supports three authentication methods:&lt;/p&gt; 
&lt;h4&gt;A. API Token Authentication (Cloud) - &lt;strong&gt;Recommended&lt;/strong&gt;&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to &lt;a href="https://id.atlassian.com/manage-profile/security/api-tokens"&gt;https://id.atlassian.com/manage-profile/security/api-tokens&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Click &lt;strong&gt;Create API token&lt;/strong&gt;, name it&lt;/li&gt; 
 &lt;li&gt;Copy the token immediately&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;B. Personal Access Token (Server/Data Center)&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to your profile (avatar) â†’ &lt;strong&gt;Profile&lt;/strong&gt; â†’ &lt;strong&gt;Personal Access Tokens&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Click &lt;strong&gt;Create token&lt;/strong&gt;, name it, set expiry&lt;/li&gt; 
 &lt;li&gt;Copy the token immediately&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;C. OAuth 2.0 Authentication (Cloud) - &lt;strong&gt;Advanced&lt;/strong&gt;&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] OAuth 2.0 is more complex to set up but provides enhanced security features. For most users, API Token authentication (Method A) is simpler and sufficient.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to &lt;a href="https://developer.atlassian.com/console/myapps/"&gt;Atlassian Developer Console&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Create an "OAuth 2.0 (3LO) integration" app&lt;/li&gt; 
 &lt;li&gt;Configure &lt;strong&gt;Permissions&lt;/strong&gt; (scopes) for Jira/Confluence&lt;/li&gt; 
 &lt;li&gt;Set &lt;strong&gt;Callback URL&lt;/strong&gt; (e.g., &lt;code&gt;http://localhost:8080/callback&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Run setup wizard: &lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -i \
  -p 8080:8080 \
  -v "${HOME}/.mcp-atlassian:/home/app/.mcp-atlassian" \
  ghcr.io/sooperset/mcp-atlassian:latest --oauth-setup -v
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Follow prompts for &lt;code&gt;Client ID&lt;/code&gt;, &lt;code&gt;Secret&lt;/code&gt;, &lt;code&gt;URI&lt;/code&gt;, and &lt;code&gt;Scope&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Complete browser authorization&lt;/li&gt; 
 &lt;li&gt;Add obtained credentials to &lt;code&gt;.env&lt;/code&gt; or IDE config: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;ATLASSIAN_OAUTH_CLOUD_ID&lt;/code&gt; (from wizard)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ATLASSIAN_OAUTH_CLIENT_ID&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ATLASSIAN_OAUTH_CLIENT_SECRET&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ATLASSIAN_OAUTH_REDIRECT_URI&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ATLASSIAN_OAUTH_SCOPE&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] For the standard OAuth flow described above, include &lt;code&gt;offline_access&lt;/code&gt; in your scope (e.g., &lt;code&gt;read:jira-work write:jira-work offline_access&lt;/code&gt;). This allows the server to refresh the access token automatically.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;Alternative: Using a Pre-existing OAuth Access Token (BYOT)&lt;/summary&gt; 
 &lt;p&gt;If you are running mcp-atlassian part of a larger system that manages Atlassian OAuth 2.0 access tokens externally (e.g., through a central identity provider or another application), you can provide an access token directly to this MCP server. This method bypasses the interactive setup wizard and the server's internal token management (including refresh capabilities).&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;A valid Atlassian OAuth 2.0 Access Token with the necessary scopes for the intended operations.&lt;/li&gt; 
  &lt;li&gt;The corresponding &lt;code&gt;ATLASSIAN_OAUTH_CLOUD_ID&lt;/code&gt; for your Atlassian instance.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;Configuration:&lt;/strong&gt; To use this method, set the following environment variables (or use the corresponding command-line flags when starting the server):&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;ATLASSIAN_OAUTH_CLOUD_ID&lt;/code&gt;: Your Atlassian Cloud ID. (CLI: &lt;code&gt;--oauth-cloud-id&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;ATLASSIAN_OAUTH_ACCESS_TOKEN&lt;/code&gt;: Your pre-existing OAuth 2.0 access token. (CLI: &lt;code&gt;--oauth-access-token&lt;/code&gt;)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;Important Considerations for BYOT:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Token Lifecycle Management:&lt;/strong&gt; When using BYOT, the MCP server &lt;strong&gt;does not&lt;/strong&gt; handle token refresh. The responsibility for obtaining, refreshing (before expiry), and revoking the access token lies entirely with you or the external system providing the token.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Unused Variables:&lt;/strong&gt; The standard OAuth client variables (&lt;code&gt;ATLASSIAN_OAUTH_CLIENT_ID&lt;/code&gt;, &lt;code&gt;ATLASSIAN_OAUTH_CLIENT_SECRET&lt;/code&gt;, &lt;code&gt;ATLASSIAN_OAUTH_REDIRECT_URI&lt;/code&gt;, &lt;code&gt;ATLASSIAN_OAUTH_SCOPE&lt;/code&gt;) are &lt;strong&gt;not&lt;/strong&gt; used and can be omitted when configuring for BYOT.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;No Setup Wizard:&lt;/strong&gt; The &lt;code&gt;--oauth-setup&lt;/code&gt; wizard is not applicable and should not be used for this approach.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;No Token Cache Volume:&lt;/strong&gt; The Docker volume mount for token storage (e.g., &lt;code&gt;-v "${HOME}/.mcp-atlassian:/home/app/.mcp-atlassian"&lt;/code&gt;) is also not necessary if you are exclusively using the BYOT method, as no tokens are stored or managed by this server.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; The provided access token must already have the necessary permissions (scopes) for the Jira/Confluence operations you intend to perform.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;This option is useful in scenarios where OAuth credential management is centralized or handled by other infrastructure components.&lt;/p&gt; 
&lt;/details&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;strong&gt;Multi-Cloud OAuth Support&lt;/strong&gt;: If you're building a multi-tenant application where users provide their own OAuth tokens, see the &lt;a href="https://raw.githubusercontent.com/sooperset/mcp-atlassian/main/#multi-cloud-oauth-support"&gt;Multi-Cloud OAuth Support&lt;/a&gt; section for minimal configuration setup.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;ğŸ“¦ 2. Installation&lt;/h3&gt; 
&lt;p&gt;MCP Atlassian is distributed as a Docker image. This is the recommended way to run the server, especially for IDE integration. Ensure you have Docker installed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Pull Pre-built Image
docker pull ghcr.io/sooperset/mcp-atlassian:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ğŸ› ï¸� IDE Integration&lt;/h2&gt; 
&lt;p&gt;MCP Atlassian is designed to be used with AI assistants through IDE integration.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;strong&gt;For Claude Desktop&lt;/strong&gt;: Locate and edit the configuration file directly:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;%APPDATA%\Claude\claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;~/.config/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;For Cursor&lt;/strong&gt;: Open Settings â†’ MCP â†’ + Add new global MCP server&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;âš™ï¸� Configuration Methods&lt;/h3&gt; 
&lt;p&gt;There are two main approaches to configure the Docker container:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Passing Variables Directly&lt;/strong&gt; (shown in examples below)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Using an Environment File&lt;/strong&gt; with &lt;code&gt;--env-file&lt;/code&gt; flag (shown in collapsible sections)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Common environment variables include:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;CONFLUENCE_SPACES_FILTER&lt;/code&gt;: Filter by space keys (e.g., "DEV,TEAM,DOC")&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;JIRA_PROJECTS_FILTER&lt;/code&gt;: Filter by project keys (e.g., "PROJ,DEV,SUPPORT")&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;READ_ONLY_MODE&lt;/code&gt;: Set to "true" to disable write operations&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MCP_VERBOSE&lt;/code&gt;: Set to "true" for more detailed logging&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MCP_LOGGING_STDOUT&lt;/code&gt;: Set to "true" to log to stdout instead of stderr&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;ENABLED_TOOLS&lt;/code&gt;: Comma-separated list of tool names to enable (e.g., "confluence_search,jira_get_issue")&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;See the &lt;a href="https://github.com/sooperset/mcp-atlassian/raw/main/.env.example"&gt;.env.example&lt;/a&gt; file for all available options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;ğŸ“� Configuration Examples&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Method 1 (Passing Variables Directly):&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e", "CONFLUENCE_URL",
        "-e", "CONFLUENCE_USERNAME",
        "-e", "CONFLUENCE_API_TOKEN",
        "-e", "JIRA_URL",
        "-e", "JIRA_USERNAME",
        "-e", "JIRA_API_TOKEN",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "CONFLUENCE_URL": "https://your-company.atlassian.net/wiki",
        "CONFLUENCE_USERNAME": "your.email@company.com",
        "CONFLUENCE_API_TOKEN": "your_confluence_api_token",
        "JIRA_URL": "https://your-company.atlassian.net",
        "JIRA_USERNAME": "your.email@company.com",
        "JIRA_API_TOKEN": "your_jira_api_token"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Alternative: Using Environment File&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "--env-file",
        "/path/to/your/mcp-atlassian.env",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Server/Data Center Configuration&lt;/summary&gt; 
 &lt;p&gt;For Server/Data Center deployments, use direct variable passing:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-e", "CONFLUENCE_URL",
        "-e", "CONFLUENCE_PERSONAL_TOKEN",
        "-e", "CONFLUENCE_SSL_VERIFY",
        "-e", "JIRA_URL",
        "-e", "JIRA_PERSONAL_TOKEN",
        "-e", "JIRA_SSL_VERIFY",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "CONFLUENCE_URL": "https://confluence.your-company.com",
        "CONFLUENCE_PERSONAL_TOKEN": "your_confluence_pat",
        "CONFLUENCE_SSL_VERIFY": "false",
        "JIRA_URL": "https://jira.your-company.com",
        "JIRA_PERSONAL_TOKEN": "your_jira_pat",
        "JIRA_SSL_VERIFY": "false"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE] Set &lt;code&gt;CONFLUENCE_SSL_VERIFY&lt;/code&gt; and &lt;code&gt;JIRA_SSL_VERIFY&lt;/code&gt; to "false" only if you have self-signed certificates.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;OAuth 2.0 Configuration (Cloud Only)&lt;/summary&gt; 
 &lt;a name="oauth-20-configuration-example-cloud-only"&gt;&lt;/a&gt; 
 &lt;p&gt;These examples show how to configure &lt;code&gt;mcp-atlassian&lt;/code&gt; in your IDE (like Cursor or Claude Desktop) when using OAuth 2.0 for Atlassian Cloud.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Example for Standard OAuth 2.0 Flow (using Setup Wizard):&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This configuration is for when you use the server's built-in OAuth client and have completed the &lt;a href="https://raw.githubusercontent.com/sooperset/mcp-atlassian/main/#c-oauth-20-authentication-cloud---advanced"&gt;OAuth setup wizard&lt;/a&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-v", "&amp;lt;path_to_your_home&amp;gt;/.mcp-atlassian:/home/app/.mcp-atlassian",
        "-e", "JIRA_URL",
        "-e", "CONFLUENCE_URL",
        "-e", "ATLASSIAN_OAUTH_CLIENT_ID",
        "-e", "ATLASSIAN_OAUTH_CLIENT_SECRET",
        "-e", "ATLASSIAN_OAUTH_REDIRECT_URI",
        "-e", "ATLASSIAN_OAUTH_SCOPE",
        "-e", "ATLASSIAN_OAUTH_CLOUD_ID",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "JIRA_URL": "https://your-company.atlassian.net",
        "CONFLUENCE_URL": "https://your-company.atlassian.net/wiki",
        "ATLASSIAN_OAUTH_CLIENT_ID": "YOUR_OAUTH_APP_CLIENT_ID",
        "ATLASSIAN_OAUTH_CLIENT_SECRET": "YOUR_OAUTH_APP_CLIENT_SECRET",
        "ATLASSIAN_OAUTH_REDIRECT_URI": "http://localhost:8080/callback",
        "ATLASSIAN_OAUTH_SCOPE": "read:jira-work write:jira-work read:confluence-content.all write:confluence-content offline_access",
        "ATLASSIAN_OAUTH_CLOUD_ID": "YOUR_CLOUD_ID_FROM_SETUP_WIZARD"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For the Standard Flow: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;ATLASSIAN_OAUTH_CLOUD_ID&lt;/code&gt; is obtained from the &lt;code&gt;--oauth-setup&lt;/code&gt; wizard output or is known for your instance.&lt;/li&gt; 
     &lt;li&gt;Other &lt;code&gt;ATLASSIAN_OAUTH_*&lt;/code&gt; client variables are from your OAuth app in the Atlassian Developer Console.&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;JIRA_URL&lt;/code&gt; and &lt;code&gt;CONFLUENCE_URL&lt;/code&gt; for your Cloud instances are always required.&lt;/li&gt; 
     &lt;li&gt;The volume mount (&lt;code&gt;-v .../.mcp-atlassian:/home/app/.mcp-atlassian&lt;/code&gt;) is crucial for persisting the OAuth tokens obtained by the wizard, enabling automatic refresh.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Example for Pre-existing Access Token (BYOT - Bring Your Own Token):&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;This configuration is for when you are providing your own externally managed OAuth 2.0 access token.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-e", "JIRA_URL",
        "-e", "CONFLUENCE_URL",
        "-e", "ATLASSIAN_OAUTH_CLOUD_ID",
        "-e", "ATLASSIAN_OAUTH_ACCESS_TOKEN",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "JIRA_URL": "https://your-company.atlassian.net",
        "CONFLUENCE_URL": "https://your-company.atlassian.net/wiki",
        "ATLASSIAN_OAUTH_CLOUD_ID": "YOUR_KNOWN_CLOUD_ID",
        "ATLASSIAN_OAUTH_ACCESS_TOKEN": "YOUR_PRE_EXISTING_OAUTH_ACCESS_TOKEN"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For the BYOT Method: 
    &lt;ul&gt; 
     &lt;li&gt;You primarily need &lt;code&gt;JIRA_URL&lt;/code&gt;, &lt;code&gt;CONFLUENCE_URL&lt;/code&gt;, &lt;code&gt;ATLASSIAN_OAUTH_CLOUD_ID&lt;/code&gt;, and &lt;code&gt;ATLASSIAN_OAUTH_ACCESS_TOKEN&lt;/code&gt;.&lt;/li&gt; 
     &lt;li&gt;Standard OAuth client variables (&lt;code&gt;ATLASSIAN_OAUTH_CLIENT_ID&lt;/code&gt;, &lt;code&gt;CLIENT_SECRET&lt;/code&gt;, &lt;code&gt;REDIRECT_URI&lt;/code&gt;, &lt;code&gt;SCOPE&lt;/code&gt;) are &lt;strong&gt;not&lt;/strong&gt; used.&lt;/li&gt; 
     &lt;li&gt;Token lifecycle (e.g., refreshing the token before it expires and restarting mcp-atlassian) is your responsibility, as the server will not refresh BYOT tokens.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Proxy Configuration&lt;/summary&gt; 
 &lt;p&gt;MCP Atlassian supports routing API requests through standard HTTP/HTTPS/SOCKS proxies. Configure using environment variables:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Supports standard &lt;code&gt;HTTP_PROXY&lt;/code&gt;, &lt;code&gt;HTTPS_PROXY&lt;/code&gt;, &lt;code&gt;NO_PROXY&lt;/code&gt;, &lt;code&gt;SOCKS_PROXY&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;Service-specific overrides are available (e.g., &lt;code&gt;JIRA_HTTPS_PROXY&lt;/code&gt;, &lt;code&gt;CONFLUENCE_NO_PROXY&lt;/code&gt;).&lt;/li&gt; 
  &lt;li&gt;Service-specific variables override global ones for that service.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Add the relevant proxy variables to the &lt;code&gt;args&lt;/code&gt; (using &lt;code&gt;-e&lt;/code&gt;) and &lt;code&gt;env&lt;/code&gt; sections of your MCP configuration:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e", "... existing Confluence/Jira vars",
        "-e", "HTTP_PROXY",
        "-e", "HTTPS_PROXY",
        "-e", "NO_PROXY",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "... existing Confluence/Jira vars": "...",
        "HTTP_PROXY": "http://proxy.internal:8080",
        "HTTPS_PROXY": "http://proxy.internal:8080",
        "NO_PROXY": "localhost,.your-company.com"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Credentials in proxy URLs are masked in logs. If you set &lt;code&gt;NO_PROXY&lt;/code&gt;, it will be respected for requests to matching hosts.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Custom HTTP Headers Configuration&lt;/summary&gt; 
 &lt;p&gt;MCP Atlassian supports adding custom HTTP headers to all API requests. This feature is particularly useful in corporate environments where additional headers are required for security, authentication, or routing purposes.&lt;/p&gt; 
 &lt;p&gt;Custom headers are configured using environment variables with comma-separated key=value pairs:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e", "CONFLUENCE_URL",
        "-e", "CONFLUENCE_USERNAME",
        "-e", "CONFLUENCE_API_TOKEN",
        "-e", "CONFLUENCE_CUSTOM_HEADERS",
        "-e", "JIRA_URL",
        "-e", "JIRA_USERNAME",
        "-e", "JIRA_API_TOKEN",
        "-e", "JIRA_CUSTOM_HEADERS",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "CONFLUENCE_URL": "https://your-company.atlassian.net/wiki",
        "CONFLUENCE_USERNAME": "your.email@company.com",
        "CONFLUENCE_API_TOKEN": "your_confluence_api_token",
        "CONFLUENCE_CUSTOM_HEADERS": "X-Confluence-Service=mcp-integration,X-Custom-Auth=confluence-token,X-ALB-Token=secret-token",
        "JIRA_URL": "https://your-company.atlassian.net",
        "JIRA_USERNAME": "your.email@company.com",
        "JIRA_API_TOKEN": "your_jira_api_token",
        "JIRA_CUSTOM_HEADERS": "X-Forwarded-User=service-account,X-Company-Service=mcp-atlassian,X-Jira-Client=mcp-integration"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Security Considerations:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Custom header values are masked in debug logs to protect sensitive information&lt;/li&gt; 
  &lt;li&gt;Ensure custom headers don't conflict with standard HTTP or Atlassian API headers&lt;/li&gt; 
  &lt;li&gt;Avoid including sensitive authentication tokens in custom headers if already using basic auth or OAuth&lt;/li&gt; 
  &lt;li&gt;Headers are sent with every API request - verify they don't interfere with API functionality&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Multi-Cloud OAuth Support&lt;/summary&gt; 
 &lt;p&gt;MCP Atlassian supports multi-cloud OAuth scenarios where each user connects to their own Atlassian cloud instance. This is useful for multi-tenant applications, chatbots, or services where users provide their own OAuth tokens.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Minimal OAuth Configuration:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Enable minimal OAuth mode (no client credentials required):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;docker run -e ATLASSIAN_OAUTH_ENABLE=true -p 9000:9000 \
  ghcr.io/sooperset/mcp-atlassian:latest \
  --transport streamable-http --port 9000
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Users provide authentication via HTTP headers:&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;Authorization: Bearer &amp;lt;user_oauth_token&amp;gt;&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;X-Atlassian-Cloud-Id: &amp;lt;user_cloud_id&amp;gt;&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;strong&gt;Example Integration (Python):&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import asyncio
from mcp.client.streamable_http import streamablehttp_client
from mcp import ClientSession

user_token = "user-specific-oauth-token"
user_cloud_id = "user-specific-cloud-id"

async def main():
    # Connect to streamable HTTP server with custom headers
    async with streamablehttp_client(
        "http://localhost:9000/mcp",
        headers={
            "Authorization": f"Bearer {user_token}",
            "X-Atlassian-Cloud-Id": user_cloud_id
        }
    ) as (read_stream, write_stream, _):
        # Create a session using the client streams
        async with ClientSession(read_stream, write_stream) as session:
            # Initialize the connection
            await session.initialize()

            # Example: Get a Jira issue
            result = await session.call_tool(
                "jira_get_issue",
                {"issue_key": "PROJ-123"}
            )
            print(result)

asyncio.run(main())
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Configuration Notes:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Each request can use a different cloud instance via the &lt;code&gt;X-Atlassian-Cloud-Id&lt;/code&gt; header&lt;/li&gt; 
  &lt;li&gt;User tokens are isolated per request - no cross-tenant data leakage&lt;/li&gt; 
  &lt;li&gt;Falls back to global &lt;code&gt;ATLASSIAN_OAUTH_CLOUD_ID&lt;/code&gt; if header not provided&lt;/li&gt; 
  &lt;li&gt;Compatible with standard OAuth 2.0 bearer token authentication&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Single Service Configurations&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;For Confluence Cloud only:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-e", "CONFLUENCE_URL",
        "-e", "CONFLUENCE_USERNAME",
        "-e", "CONFLUENCE_API_TOKEN",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "CONFLUENCE_URL": "https://your-company.atlassian.net/wiki",
        "CONFLUENCE_USERNAME": "your.email@company.com",
        "CONFLUENCE_API_TOKEN": "your_api_token"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Confluence Server/DC, use:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-e", "CONFLUENCE_URL",
        "-e", "CONFLUENCE_PERSONAL_TOKEN",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "CONFLUENCE_URL": "https://confluence.your-company.com",
        "CONFLUENCE_PERSONAL_TOKEN": "your_personal_token"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;For Jira Cloud only:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-e", "JIRA_URL",
        "-e", "JIRA_USERNAME",
        "-e", "JIRA_API_TOKEN",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "JIRA_URL": "https://your-company.atlassian.net",
        "JIRA_USERNAME": "your.email@company.com",
        "JIRA_API_TOKEN": "your_api_token"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For Jira Server/DC, use:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "-e", "JIRA_URL",
        "-e", "JIRA_PERSONAL_TOKEN",
        "ghcr.io/sooperset/mcp-atlassian:latest"
      ],
      "env": {
        "JIRA_URL": "https://jira.your-company.com",
        "JIRA_PERSONAL_TOKEN": "your_personal_token"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;ğŸ‘¥ HTTP Transport Configuration&lt;/h3&gt; 
&lt;p&gt;Instead of using &lt;code&gt;stdio&lt;/code&gt;, you can run the server as a persistent HTTP service using either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;sse&lt;/code&gt; (Server-Sent Events) transport at &lt;code&gt;/sse&lt;/code&gt; endpoint&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;streamable-http&lt;/code&gt; transport at &lt;code&gt;/mcp&lt;/code&gt; endpoint&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Both transport types support single-user and multi-user authentication:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Authentication Options:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Single-User&lt;/strong&gt;: Use server-level authentication configured via environment variables&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-User&lt;/strong&gt;: Each user provides their own authentication: 
  &lt;ul&gt; 
   &lt;li&gt;Cloud: OAuth 2.0 Bearer tokens&lt;/li&gt; 
   &lt;li&gt;Server/Data Center: Personal Access Tokens (PATs)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;Basic HTTP Transport Setup&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Start the server with your chosen transport:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# For SSE transport
docker run --rm -p 9000:9000 \
  --env-file /path/to/your/.env \
  ghcr.io/sooperset/mcp-atlassian:latest \
  --transport sse --port 9000 -vv

# OR for streamable-http transport
docker run --rm -p 9000:9000 \
  --env-file /path/to/your/.env \
  ghcr.io/sooperset/mcp-atlassian:latest \
  --transport streamable-http --port 9000 -vv
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Configure your IDE (single-user example):&lt;/p&gt; &lt;p&gt;&lt;strong&gt;SSE Transport Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian-http": {
      "url": "http://localhost:9000/sse"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Streamable-HTTP Transport Example:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian-service": {
      "url": "http://localhost:9000/mcp"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Multi-User Authentication Setup&lt;/summary&gt; 
 &lt;p&gt;Here's a complete example of setting up multi-user authentication with streamable-HTTP transport:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;First, run the OAuth setup wizard to configure the server's OAuth credentials:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -i \
  -p 8080:8080 \
  -v "${HOME}/.mcp-atlassian:/home/app/.mcp-atlassian" \
  ghcr.io/sooperset/mcp-atlassian:latest --oauth-setup -v
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Start the server with streamable-HTTP transport:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -p 9000:9000 \
  --env-file /path/to/your/.env \
  ghcr.io/sooperset/mcp-atlassian:latest \
  --transport streamable-http --port 9000 -vv
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Configure your IDE's MCP settings:&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;strong&gt;Choose the appropriate Authorization method for your Atlassian deployment:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Cloud (OAuth 2.0):&lt;/strong&gt; Use this if your organization is on Atlassian Cloud and you have an OAuth access token for each user.&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Server/Data Center (PAT):&lt;/strong&gt; Use this if you are on Atlassian Server or Data Center and each user has a Personal Access Token (PAT).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;Cloud (OAuth 2.0) Example:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian-service": {
      "url": "http://localhost:9000/mcp",
      "headers": {
        "Authorization": "Bearer &amp;lt;USER_OAUTH_ACCESS_TOKEN&amp;gt;"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Server/Data Center (PAT) Example:&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcpServers": {
    "mcp-atlassian-service": {
      "url": "http://localhost:9000/mcp",
      "headers": {
        "Authorization": "Token &amp;lt;USER_PERSONAL_ACCESS_TOKEN&amp;gt;"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="4"&gt; 
  &lt;li&gt;Required environment variables in &lt;code&gt;.env&lt;/code&gt;: &lt;pre&gt;&lt;code class="language-bash"&gt;JIRA_URL=https://your-company.atlassian.net
CONFLUENCE_URL=https://your-company.atlassian.net/wiki
ATLASSIAN_OAUTH_CLIENT_ID=your_oauth_app_client_id
ATLASSIAN_OAUTH_CLIENT_SECRET=your_oauth_app_client_secret
ATLASSIAN_OAUTH_REDIRECT_URI=http://localhost:8080/callback
ATLASSIAN_OAUTH_SCOPE=read:jira-work write:jira-work read:confluence-content.all write:confluence-content offline_access
ATLASSIAN_OAUTH_CLOUD_ID=your_cloud_id_from_setup_wizard
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!NOTE]&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The server should have its own fallback authentication configured (e.g., via environment variables for API token, PAT, or its own OAuth setup using --oauth-setup). This is used if a request doesn't include user-specific authentication.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;OAuth&lt;/strong&gt;: Each user needs their own OAuth access token from your Atlassian OAuth app.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;PAT&lt;/strong&gt;: Each user provides their own Personal Access Token.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Multi-Cloud&lt;/strong&gt;: For OAuth users, optionally include &lt;code&gt;X-Atlassian-Cloud-Id&lt;/code&gt; header to specify which Atlassian cloud instance to use&lt;/li&gt; 
   &lt;li&gt;The server will use the user's token for API calls when provided, falling back to server auth if not&lt;/li&gt; 
   &lt;li&gt;User tokens should have appropriate scopes for their needed operations&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;h3&gt;Key Tools&lt;/h3&gt; 
&lt;h4&gt;Jira Tools&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;jira_get_issue&lt;/code&gt;: Get details of a specific issue&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jira_search&lt;/code&gt;: Search issues using JQL&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jira_create_issue&lt;/code&gt;: Create a new issue&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jira_update_issue&lt;/code&gt;: Update an existing issue&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jira_transition_issue&lt;/code&gt;: Transition an issue to a new status&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jira_add_comment&lt;/code&gt;: Add a comment to an issue&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Confluence Tools&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;confluence_search&lt;/code&gt;: Search Confluence content using CQL&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;confluence_get_page&lt;/code&gt;: Get content of a specific page&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;confluence_create_page&lt;/code&gt;: Create a new page&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;confluence_update_page&lt;/code&gt;: Update an existing page&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;View All Tools&lt;/summary&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Operation&lt;/th&gt; 
    &lt;th&gt;Jira Tools&lt;/th&gt; 
    &lt;th&gt;Confluence Tools&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Read&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_search&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_search&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_issue&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_get_page&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_all_projects&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_get_page_children&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_project_issues&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_get_comments&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_worklog&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_get_labels&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_transitions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_search_user&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_search_fields&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_agile_boards&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_board_issues&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_sprints_from_board&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_sprint_issues&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_issue_link_types&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_batch_get_changelogs&lt;/code&gt;*&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_user_profile&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_download_attachments&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_get_project_versions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Write&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_create_issue&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_create_page&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_update_issue&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_update_page&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_delete_issue&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_delete_page&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_batch_create_issues&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_add_label&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_add_comment&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;confluence_add_comment&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_transition_issue&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_add_worklog&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_link_to_epic&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_create_sprint&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_update_sprint&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_create_issue_link&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_remove_issue_link&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_create_version&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;code&gt;jira_batch_create_versions&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;p&gt;*Tool only available on Jira Cloud&lt;/p&gt;  
&lt;h3&gt;Tool Filtering and Access Control&lt;/h3&gt; 
&lt;p&gt;The server provides two ways to control tool access:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tool Filtering&lt;/strong&gt;: Use &lt;code&gt;--enabled-tools&lt;/code&gt; flag or &lt;code&gt;ENABLED_TOOLS&lt;/code&gt; environment variable to specify which tools should be available:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Via environment variable
ENABLED_TOOLS="confluence_search,jira_get_issue,jira_search"

# Or via command line flag
docker run ... --enabled-tools "confluence_search,jira_get_issue,jira_search" ...
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Read/Write Control&lt;/strong&gt;: Tools are categorized as read or write operations. When &lt;code&gt;READ_ONLY_MODE&lt;/code&gt; is enabled, only read operations are available regardless of &lt;code&gt;ENABLED_TOOLS&lt;/code&gt; setting.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Troubleshooting &amp;amp; Debugging&lt;/h2&gt; 
&lt;h3&gt;Common Issues&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Authentication Failures&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;For Cloud: Check your API tokens (not your account password)&lt;/li&gt; 
   &lt;li&gt;For Server/Data Center: Verify your personal access token is valid and not expired&lt;/li&gt; 
   &lt;li&gt;For older Confluence servers: Some older versions require basic authentication with &lt;code&gt;CONFLUENCE_USERNAME&lt;/code&gt; and &lt;code&gt;CONFLUENCE_API_TOKEN&lt;/code&gt; (where token is your password)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SSL Certificate Issues&lt;/strong&gt;: If using Server/Data Center and encounter SSL errors, set &lt;code&gt;CONFLUENCE_SSL_VERIFY=false&lt;/code&gt; or &lt;code&gt;JIRA_SSL_VERIFY=false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Permission Errors&lt;/strong&gt;: Ensure your Atlassian account has sufficient permissions to access the spaces/projects&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom Headers Issues&lt;/strong&gt;: See the &lt;a href="https://raw.githubusercontent.com/sooperset/mcp-atlassian/main/#debugging-custom-headers"&gt;"Debugging Custom Headers"&lt;/a&gt; section below to analyze and resolve issues with custom headers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Debugging Custom Headers&lt;/h3&gt; 
&lt;p&gt;To verify custom headers are being applied correctly:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enable Debug Logging&lt;/strong&gt;: Set &lt;code&gt;MCP_VERY_VERBOSE=true&lt;/code&gt; to see detailed request logs&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# In your .env file or environment
MCP_VERY_VERBOSE=true
MCP_LOGGING_STDOUT=true
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Check Header Parsing&lt;/strong&gt;: Custom headers appear in logs with masked values for security:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;DEBUG Custom headers applied: {'X-Forwarded-User': '***', 'X-ALB-Token': '***'}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Verify Service-Specific Headers&lt;/strong&gt;: Check logs to confirm the right headers are being used:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;DEBUG Jira request headers: service-specific headers applied
DEBUG Confluence request headers: service-specific headers applied
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Test Header Format&lt;/strong&gt;: Ensure your header string format is correct:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Correct format
JIRA_CUSTOM_HEADERS=X-Custom=value1,X-Other=value2
CONFLUENCE_CUSTOM_HEADERS=X-Custom=value1,X-Other=value2

# Incorrect formats (will be ignored)
JIRA_CUSTOM_HEADERS="X-Custom=value1,X-Other=value2"  # Extra quotes
JIRA_CUSTOM_HEADERS=X-Custom: value1,X-Other: value2  # Colon instead of equals
JIRA_CUSTOM_HEADERS=X-Custom = value1               # Spaces around equals
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Security Note&lt;/strong&gt;: Header values containing sensitive information (tokens, passwords) are automatically masked in logs to prevent accidental exposure.&lt;/p&gt; 
&lt;h3&gt;Debugging Tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Using MCP Inspector for testing
npx @modelcontextprotocol/inspector uvx mcp-atlassian ...

# For local development version
npx @modelcontextprotocol/inspector uv --directory /path/to/your/mcp-atlassian run mcp-atlassian ...

# View logs
# macOS
tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
# Windows
type %APPDATA%\Claude\logs\mcp*.log | more
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Never share API tokens&lt;/li&gt; 
 &lt;li&gt;Keep .env files secure and private&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://raw.githubusercontent.com/sooperset/mcp-atlassian/main/SECURITY.md"&gt;SECURITY.md&lt;/a&gt; for best practices&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions to MCP Atlassian! If you'd like to contribute:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check out our &lt;a href="https://raw.githubusercontent.com/sooperset/mcp-atlassian/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; guide for detailed development setup instructions.&lt;/li&gt; 
 &lt;li&gt;Make changes and submit a pull request.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;We use pre-commit hooks for code quality and follow semantic versioning for releases.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under MIT - see &lt;a href="https://raw.githubusercontent.com/sooperset/mcp-atlassian/main/LICENSE"&gt;LICENSE&lt;/a&gt; file. This is not an official Atlassian product.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hummingbot/hummingbot</title>
      <link>https://github.com/hummingbot/hummingbot</link>
      <description>&lt;p&gt;Open source software that helps you create and deploy high-frequency crypto trading bots&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/3213d7f8-414b-4df8-8c1b-a0cd142a82d8" alt="Hummingbot"&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href="https://github.com/hummingbot/hummingbot/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-informational.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/_hummingbot"&gt;&lt;img src="https://img.shields.io/twitter/url?url=https://twitter.com/_hummingbot?style=social&amp;amp;label=_hummingbot" alt="Twitter"&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@hummingbot"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UCxzzdEnDRbylLMWmaMjywOA" alt="Youtube"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/hummingbot"&gt;&lt;img src="https://img.shields.io/discord/530578568154054663?logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Hummingbot is an open-source framework that helps you design and deploy automated trading strategies, or &lt;strong&gt;bots&lt;/strong&gt;, that can run on many centralized or decentralized exchanges. Over the past year, Hummingbot users have generated over $34 billion in trading volume across 140+ unique trading venues.&lt;/p&gt; 
&lt;p&gt;The Hummingbot codebase is free and publicly available under the Apache 2.0 open-source license. Our mission is to &lt;strong&gt;democratize high-frequency trading&lt;/strong&gt; by creating a global community of algorithmic traders and developers that share knowledge and contribute to the codebase.&lt;/p&gt; 
&lt;h2&gt;Quick Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://hummingbot.org"&gt;Website and Docs&lt;/a&gt;: Official Hummingbot website and documeniuntation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hummingbot.org/installation/docker/"&gt;Installation&lt;/a&gt;: Install Hummingbot on various platforms&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/hummingbot"&gt;Discord&lt;/a&gt;: The main gathering spot for the global Hummingbot community&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/c/hummingbot"&gt;YouTube&lt;/a&gt;: Videos that teach you how to get the most of of Hummingbot&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/_hummingbot"&gt;Twitter&lt;/a&gt;: Get the latest announcements about Hummingbot&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://p.datadoghq.com/sb/a96a744f5-a15479d77992ccba0d23aecfd4c87a52"&gt;Reported Volumes&lt;/a&gt;: Reported trading volumes across all Hummingbot instances&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hummingbot.substack.com"&gt;Newsletter&lt;/a&gt;: Get our newsletter whenever we ship a new release&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Exchange Connectors&lt;/h2&gt; 
&lt;p&gt;Hummingbot connectors standardize REST and WebSocket API interfaces to different types of exchanges, enabling you to build sophisticated trading strategies that can be deployed across many exchanges with minimal changes. We classify exchanges into the following categories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;CEX&lt;/strong&gt;: Centralized exchanges that take custody of your funds. Use API keys to connect with Hummingbot.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DEX&lt;/strong&gt;: Decentralized, non-custodial exchanges that operate on a blockchain. Use wallet keys to connect with Hummingbot.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In addition, connectors differ based on the type of market supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;CLOB Spot&lt;/strong&gt;: Connectors to spot markets on central limit order book (CLOB) exchanges&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CLOB Perp&lt;/strong&gt;: Connectors to perpetual futures markets on CLOB exchanges&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AMM&lt;/strong&gt;: Connectors to spot markets on Automatic Market Maker (AMM) decentralized exchanges&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Exchange Sponsors&lt;/h3&gt; 
&lt;p&gt;We are grateful for the following exchanges that support the development and maintenance of Hummingbot via broker partnerships and sponsorships.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Connector ID&lt;/th&gt; 
   &lt;th&gt;Exchange&lt;/th&gt; 
   &lt;th&gt;CEX/DEX&lt;/th&gt; 
   &lt;th&gt;Market Type&lt;/th&gt; 
   &lt;th&gt;Docs&lt;/th&gt; 
   &lt;th&gt;Discount&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;binance&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://accounts.binance.com/register?ref=CBWO4LU6"&gt;Binance&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/binance/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://accounts.binance.com/register?ref=CBWO4LU6"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d10%25&amp;amp;color=orange" alt="Sign up for Binance using Hummingbot's referral link for a 10% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;binance_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://accounts.binance.com/register?ref=CBWO4LU6"&gt;Binance&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/binance/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://accounts.binance.com/register?ref=CBWO4LU6"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d10%25&amp;amp;color=orange" alt="Sign up for Binance using Hummingbot's referral link for a 10% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gate_io&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.gate.io/referral/invite/HBOTGATE_0_103"&gt;Gate.io&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/gate-io/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.gate.io/referral/invite/HBOTGATE_0_103"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d20%25&amp;amp;color=orange" alt="Sign up for Gate.io using Hummingbot's referral link for a 10% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gate_io_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.gate.io/referral/invite/HBOTGATE_0_103"&gt;Gate.io&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/gate-io/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.gate.io/referral/invite/HBOTGATE_0_103"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d20%25&amp;amp;color=orange" alt="Sign up for Gate.io using Hummingbot's referral link for a 20% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;htx&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.htx.com.pk/invite/en-us/1h?invite_code=re4w9223"&gt;HTX (Huobi)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/huobi/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.htx.com.pk/invite/en-us/1h?invite_code=re4w9223"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d20%25&amp;amp;color=orange" alt="Sign up for HTX using Hummingbot's referral link for a 20% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;kucoin&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.kucoin.com/r/af/hummingbot"&gt;KuCoin&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/kucoin/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.kucoin.com/r/af/hummingbot"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d20%25&amp;amp;color=orange" alt="Sign up for Kucoin using Hummingbot's referral link for a 20% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;kucoin_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.kucoin.com/r/af/hummingbot"&gt;KuCoin&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/kucoin/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.kucoin.com/r/af/hummingbot"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d20%25&amp;amp;color=orange" alt="Sign up for Kucoin using Hummingbot's referral link for a 20% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;okx&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.okx.com/join/1931920269"&gt;OKX&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/okx/okx/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.okx.com/join/1931920269"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d20%25&amp;amp;color=orange" alt="Sign up for Kucoin using Hummingbot's referral link for a 20% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;okx_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.okx.com/join/1931920269"&gt;OKX&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/okx/okx/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.okx.com/join/1931920269"&gt;&lt;img src="https://img.shields.io/static/v1?label=Fee&amp;amp;message=%2d20%25&amp;amp;color=orange" alt="Sign up for Kucoin using Hummingbot's referral link for a 20% discount!"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dydx_v4_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.dydx.exchange/"&gt;dYdX&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/dydx/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;hyperliquid_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hyperliquid.io/"&gt;Hyperliquid&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/hyperliquid/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;xrpl&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://xrpl.org/"&gt;XRP Ledger&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/xrpl/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Other Exchange Connectors&lt;/h3&gt; 
&lt;p&gt;Currently, the master branch of Hummingbot also includes the following exchange connectors, which are maintained and updated through the Hummingbot Foundation governance process. See &lt;a href="https://hummingbot.org/governance/"&gt;Governance&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Connector ID&lt;/th&gt; 
   &lt;th&gt;Exchange&lt;/th&gt; 
   &lt;th&gt;CEX/DEX&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Docs&lt;/th&gt; 
   &lt;th&gt;Discount&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ascend_ex&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;AscendEx&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/ascendex/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;balancer&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Balancer&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/balancer/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bing_x&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;BingX&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/bing_x/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bitget_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bitget&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/bitget-perpetual/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bitmart&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;BitMart&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/bitmart/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bitrue&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bitrue&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/bitrue/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bitstamp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bitstamp&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/bitstamp/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;btc_markets&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;BTC Markets&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/btc-markets/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bybit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bybit&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/bybit/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;bybit_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bybit&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/bybit/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;carbon&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Carbon&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/carbon/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;coinbase_advanced_trade&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Coinbase&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/coinbase/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;cube&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Cube&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/cube/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;curve&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Curve&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/curve/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dexalot&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Dexalot&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/dexalot/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;injective_v2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Injective Helix&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/injective/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;injective_v2_perpetual&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Injective Helix&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;CLOB Perp&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/injective/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;kraken&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Kraken&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/kraken/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mad_meerkat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Mad Meerkat&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/mad-meerkat/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;mexc&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;MEXC&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/mexc/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;openocean&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;OpenOcean&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/openocean/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;pancakeswap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;PancakeSwap&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/pancakeswap/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;pangolin&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pangolin&lt;/td&gt; 
   &lt;td&gt;CEX&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/pangolin/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quickswap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;QuickSwap&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/quickswap/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;sushiswap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;SushiSwap&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/sushiswap/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;tinyman&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Tinyman&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/tinyman/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;traderjoe&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Trader Joe&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/traderjoe/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;uniswap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Uniswap&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/gateway/uniswap/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;vertex&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Vertex&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;CLOB Spot&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/vertex/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;vvs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;VVS&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/vvs/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;xsswap&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;XSSwap&lt;/td&gt; 
   &lt;td&gt;DEX&lt;/td&gt; 
   &lt;td&gt;AMM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hummingbot.org/exchanges/xswap/"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Other Hummingbot Repos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hummingbot/deploy"&gt;Deploy&lt;/a&gt;: Deploy Hummingbot in various configurations with Docker&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hummingbot/dashboard"&gt;Dashboard&lt;/a&gt;: Web app that help you create, backtest, deploy, and manage Hummingbot instances&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hummingbot/quants-lab"&gt;Quants Lab&lt;/a&gt;: Juypter notebooks that enable you to fetch data and perform research using Hummingbot&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hummingbot/gateway"&gt;Gateway&lt;/a&gt;: Typescript based API client for DEX connectors&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hummingbot/hummingbot-site"&gt;Hummingbot Site&lt;/a&gt;: Official documentation for Hummingbot - we welcome contributions here too!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;The Hummingbot architecture features modular components that can be maintained and extended by individual community members.&lt;/p&gt; 
&lt;p&gt;We welcome contributions from the community! Please review these &lt;a href="https://raw.githubusercontent.com/hummingbot/hummingbot/master/CONTRIBUTING.md"&gt;guidelines&lt;/a&gt; before submitting a pull request.&lt;/p&gt; 
&lt;p&gt;To have your exchange connector or other pull request merged into the codebase, please submit a New Connector Proposal or Pull Request Proposal, following these &lt;a href="https://hummingbot.org/governance/proposals/"&gt;guidelines&lt;/a&gt;. Note that you will need some amount of &lt;a href="https://etherscan.io/token/0xe5097d9baeafb89f9bcb78c9290d545db5f9e9cb"&gt;HBOT tokens&lt;/a&gt; in your Ethereum wallet to submit a proposal.&lt;/p&gt; 
&lt;h2&gt;Legal&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;License&lt;/strong&gt;: Hummingbot is open source and licensed under &lt;a href="https://raw.githubusercontent.com/hummingbot/hummingbot/master/LICENSE"&gt;Apache 2.0&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data collection&lt;/strong&gt;: See &lt;a href="https://hummingbot.org/reporting/"&gt;Reporting&lt;/a&gt; for information on anonymous data collection and reporting in Hummingbot.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>seleniumbase/SeleniumBase</title>
      <link>https://github.com/seleniumbase/SeleniumBase</link>
      <description>&lt;p&gt;Python APIs for web automation, testing, and bypassing bot-detection.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SeleniumBase&lt;/h1&gt; 
&lt;p align="center"&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/"&gt;&lt;img src="https://seleniumbase.github.io/cdn/img/super_logo_sb3.png" alt="SeleniumBase" title="SeleniumBase" width="350"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center" class="hero__title"&gt;&lt;b&gt;All-in-one Browser Automation Framework:&lt;br&gt;Web Crawling / Testing / Scraping / Stealth&lt;/b&gt;&lt;/p&gt; 
&lt;p align="center"&gt;&lt;a href="https://pypi.python.org/pypi/seleniumbase" target="_blank"&gt;&lt;img src="https://img.shields.io/pypi/v/seleniumbase.svg?color=3399EE" alt="PyPI version"&gt;&lt;/a&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/releases" target="_blank"&gt;&lt;img src="https://img.shields.io/github/v/release/seleniumbase/SeleniumBase.svg?color=22AAEE" alt="GitHub version"&gt;&lt;/a&gt; &lt;a href="https://seleniumbase.io"&gt;&lt;img src="https://img.shields.io/badge/docs-seleniumbase.io-11BBAA.svg?sanitize=true" alt="SeleniumBase Docs"&gt;&lt;/a&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/actions" target="_blank"&gt;&lt;img src="https://github.com/seleniumbase/SeleniumBase/workflows/CI%20build/badge.svg?sanitize=true" alt="SeleniumBase GitHub Actions"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/EdhQTn3EyE" target="_blank"&gt;&lt;img src="https://img.shields.io/discord/727927627830001734?color=7289DA&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#python_installation"&gt;ğŸš€ Start&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/features_list.md"&gt;ğŸ�° Features&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/customizing_test_runs.md"&gt;ğŸ�›ï¸� Options&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/ReadMe.md"&gt;ğŸ“š Examples&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/console_scripts/ReadMe.md"&gt;ğŸŒ  Scripts&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/mobile_testing.md"&gt;ğŸ“± Mobile&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/method_summary.md"&gt;ğŸ“˜ APIs&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/syntax_formats.md"&gt; ğŸ”  Formats&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/recorder_mode.md"&gt;ğŸ”´ Recorder&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/example_logs/ReadMe.md"&gt;ğŸ“Š Dashboard&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/locale_codes.md"&gt;ğŸ—¾ Locales&lt;/a&gt; | &lt;a href="https://seleniumbase.io/devices/?url=seleniumbase.com"&gt;ğŸ’» Farm&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/commander.md"&gt;ğŸ�–ï¸� GUI&lt;/a&gt; | &lt;a href="https://seleniumbase.io/demo_page"&gt;ğŸ“° TestPage&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/uc_mode.md"&gt;ğŸ‘¤ UC Mode&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/cdp_mode/ReadMe.md"&gt;ğŸ�™ CDP Mode&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/chart_maker/ReadMe.md"&gt;ğŸ“¶ Charts&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/utilities/selenium_grid/ReadMe.md"&gt;ğŸŒ� Grid&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/how_it_works.md"&gt;ğŸ‘�ï¸� How&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/examples/migration/raw_selenium"&gt;ğŸš� Migrate&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/case_plans.md"&gt;ğŸ—‚ï¸� CasePlans&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/examples/boilerplates"&gt;â™»ï¸� Template&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/master_qa/ReadMe.md"&gt;ğŸ§¬ Hybrid&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/tour_examples/ReadMe.md"&gt;ğŸš� Tours&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/github/workflows/ReadMe.md"&gt;ğŸ¤– CI/CD&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/js_package_manager.md"&gt;ğŸ•¹ï¸� JSMgr&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/translations.md"&gt;ğŸŒ� Translator&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/presenter/ReadMe.md"&gt;ğŸ��ï¸� Presenter&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/dialog_boxes/ReadMe.md"&gt;ğŸ›‚ Dialog&lt;/a&gt; | &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/visual_testing/ReadMe.md"&gt;ğŸ–¼ï¸� Visual&lt;/a&gt; &lt;br&gt; &lt;/p&gt; 
&lt;p&gt;SeleniumBase is the professional toolkit for web automation activities. Built for testing websites, bypassing CAPTCHAs, enhancing productivity, completing tasks, and scaling your business.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;ğŸ“š Learn from &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/examples"&gt;&lt;strong&gt;over 200 examples&lt;/strong&gt; in the &lt;strong&gt;SeleniumBase/examples/&lt;/strong&gt; folder&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;ğŸ�™ Note that &lt;a translate="no" href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/uc_mode.md"&gt;&lt;b&gt;UC Mode&lt;/b&gt;&lt;/a&gt; / &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/cdp_mode/ReadMe.md"&gt;&lt;b&gt;CDP Mode&lt;/b&gt;&lt;/a&gt; (Stealth Mode) have their own ReadMe files.&lt;/p&gt; 
&lt;p&gt;â„¹ï¸� Most scripts run with raw &lt;code translate="no"&gt;&lt;b&gt;python&lt;/b&gt;&lt;/code&gt;, although some scripts use &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/syntax_formats.md"&gt;Syntax Formats&lt;/a&gt; that expect &lt;a href="https://docs.pytest.org/en/latest/how-to/usage.html" translate="no"&gt;&lt;b&gt;pytest&lt;/b&gt;&lt;/a&gt; (a Python unit-testing framework included with SeleniumBase that can discover, collect, and run tests automatically).&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="left"&gt;ğŸ“— Here's &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/raw_google.py"&gt;raw_google.py&lt;/a&gt;, which performs a Google search:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from seleniumbase import SB

with SB(test=True, uc=True) as sb:
    sb.open("https://google.com/ncr")
    sb.type('[title="Search"]', "SeleniumBase GitHub page\n")
    sb.click('[href*="github.com/seleniumbase/"]')
    sb.save_screenshot_to_logs()  # ./latest_logs/
    print(sb.get_page_title())
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;python raw_google.py&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/raw_google.py"&gt;&lt;img src="https://seleniumbase.github.io/cdn/gif/google_search.gif" alt="SeleniumBase Test" title="SeleniumBase Test" width="480"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="left"&gt;ğŸ“— Here's an example of bypassing Cloudflare's challenge page: &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/cdp_mode/raw_gitlab.py"&gt;SeleniumBase/examples/cdp_mode/raw_gitlab.py&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from seleniumbase import SB

with SB(uc=True, test=True, locale="en") as sb:
    url = "https://gitlab.com/users/sign_in"
    sb.activate_cdp_mode(url)
    sb.uc_gui_click_captcha()
    sb.sleep(2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://seleniumbase.github.io/other/cf_sec.jpg" title="SeleniumBase" width="332"&gt; &lt;img src="https://seleniumbase.github.io/other/gitlab_bypass.png" title="SeleniumBase" width="288"&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="left"&gt;ğŸ“— Here's &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_get_swag.py"&gt;test_get_swag.py&lt;/a&gt;, which tests an e-commerce site:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from seleniumbase import BaseCase
BaseCase.main(__name__, __file__)  # Call pytest

class MyTestClass(BaseCase):
    def test_swag_labs(self):
        self.open("https://www.saucedemo.com")
        self.type("#user-name", "standard_user")
        self.type("#password", "secret_sauce\n")
        self.assert_element("div.inventory_list")
        self.click('button[name*="backpack"]')
        self.click("#shopping_cart_container a")
        self.assert_text("Backpack", "div.cart_item")
        self.click("button#checkout")
        self.type("input#first-name", "SeleniumBase")
        self.type("input#last-name", "Automation")
        self.type("input#postal-code", "77123")
        self.click("input#continue")
        self.click("button#finish")
        self.assert_text("Thank you for your order!")
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;pytest test_get_swag.py&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_get_swag.py"&gt;&lt;img src="https://seleniumbase.github.io/cdn/gif/fast_swag_2.gif" alt="SeleniumBase Test" title="SeleniumBase Test" width="480"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;(The default browser is &lt;code&gt;--chrome&lt;/code&gt; if not set.)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;p align="left"&gt;ğŸ“— Here's &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_coffee_cart.py" target="_blank"&gt;test_coffee_cart.py&lt;/a&gt;, which verifies an e-commerce site:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_coffee_cart.py --demo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align="left"&gt;&lt;a href="https://seleniumbase.io/coffee/" target="_blank"&gt;&lt;img src="https://seleniumbase.github.io/cdn/gif/coffee_cart.gif" width="480" alt="SeleniumBase Coffee Cart Test" title="SeleniumBase Coffee Cart Test"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;(&lt;code translate="no"&gt;--demo&lt;/code&gt; mode slows down tests and highlights actions)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a id="multiple_examples"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="left"&gt;ğŸ“— Here's &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_demo_site.py" target="_blank"&gt;test_demo_site.py&lt;/a&gt;, which covers several actions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_demo_site.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align="left"&gt;&lt;a href="https://seleniumbase.io/demo_page" target="_blank"&gt;&lt;img src="https://seleniumbase.github.io/cdn/gif/demo_page_5.gif" width="480" alt="SeleniumBase Example" title="SeleniumBase Example"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Easy to type, click, select, toggle, drag &amp;amp; drop, and more.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;(For more examples, see the &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/ReadMe.md"&gt;SeleniumBase/examples/&lt;/a&gt; folder.)&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="left"&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/"&gt;&lt;img src="https://seleniumbase.github.io/cdn/img/super_logo_sb3.png" alt="SeleniumBase" title="SeleniumBase" width="232"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p dir="auto"&gt;&lt;strong&gt;Explore the README:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul dir="auto"&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#install_seleniumbase"&gt;&lt;strong&gt;Get Started / Installation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#basic_example_and_usage"&gt;&lt;strong&gt;Basic Example / Usage&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#common_methods"&gt;&lt;strong&gt;Common Test Methods&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#fun_facts"&gt;&lt;strong&gt;Fun Facts / Learn More&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#demo_mode_and_debugging"&gt;&lt;strong&gt;Demo Mode / Debugging&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#command_line_options"&gt;&lt;strong&gt;Command-line Options&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#directory_configuration"&gt;&lt;strong&gt;Directory Configuration&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#seleniumbase_dashboard"&gt;&lt;strong&gt;SeleniumBase Dashboard&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#creating_visual_reports"&gt;&lt;strong&gt;Generating Test Reports&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;details&gt; 
 &lt;summary&gt; â–¶ï¸� How is &lt;b&gt;SeleniumBase&lt;/b&gt; different from raw Selenium? (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; 
 &lt;div&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase is a Python framework for browser automation and testing. SeleniumBase uses &lt;a href="https://www.w3.org/TR/webdriver2/#endpoints" target="_blank"&gt;Selenium/WebDriver&lt;/a&gt; APIs and incorporates test-runners such as &lt;code translate="no"&gt;pytest&lt;/code&gt;, &lt;code translate="no"&gt;pynose&lt;/code&gt;, and &lt;code translate="no"&gt;behave&lt;/code&gt; to provide organized structure, test discovery, test execution, test state (&lt;i&gt;eg. passed, failed, or skipped&lt;/i&gt;), and command-line options for changing default settings (&lt;i&gt;eg. browser selection&lt;/i&gt;). With raw Selenium, you would need to set up your own options-parser for configuring tests from the command-line.&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase's driver manager gives you more control over automatic driver downloads. (Use &lt;code translate="no"&gt;--driver-version=VER&lt;/code&gt; with your &lt;code translate="no"&gt;pytest&lt;/code&gt; run command to specify the version.) By default, SeleniumBase will download a driver version that matches your major browser version if not set.&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase automatically detects between CSS Selectors and XPath, which means you don't need to specify the type of selector in your commands (&lt;i&gt;but optionally you could&lt;/i&gt;).&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase methods often perform multiple actions in a single method call. For example, &lt;code translate="no"&gt;self.type(selector, text)&lt;/code&gt; does the following:&lt;br&gt;1. Waits for the element to be visible.&lt;br&gt;2. Waits for the element to be interactive.&lt;br&gt;3. Clears the text field.&lt;br&gt;4. Types in the new text.&lt;br&gt;5. Presses Enter/Submit if the text ends in &lt;code translate="no"&gt;"\n"&lt;/code&gt;.&lt;br&gt;With raw Selenium, those actions require multiple method calls.&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase uses default timeout values when not set:&lt;br&gt; âœ… &lt;code translate="no"&gt;self.click("button")&lt;/code&gt;&lt;br&gt; With raw Selenium, methods would fail instantly (&lt;i&gt;by default&lt;/i&gt;) if an element needed more time to load:&lt;br&gt; â�Œ &lt;code translate="no"&gt;self.driver.find_element(by="css selector", value="button").click()&lt;/code&gt;&lt;br&gt; (Reliable code is better than unreliable code.)&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase lets you change the explicit timeout values of methods:&lt;br&gt; âœ… &lt;code translate="no"&gt;self.click("button", timeout=10)&lt;/code&gt;&lt;br&gt; With raw Selenium, that requires more code:&lt;br&gt; â�Œ &lt;code translate="no"&gt;WebDriverWait(driver, 10).until(EC.element_to_be_clickable("css selector", "button")).click()&lt;/code&gt;&lt;br&gt; (Simple code is better than complex code.)&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase gives you clean error output when a test fails. With raw Selenium, error messages can get very messy.&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase gives you the option to generate a dashboard and reports for tests. It also saves screenshots from failing tests to the &lt;code translate="no"&gt;./latest_logs/&lt;/code&gt; folder. Raw &lt;a href="https://www.selenium.dev/documentation/webdriver/" translate="no" target="_blank"&gt;Selenium&lt;/a&gt; does not have these options out-of-the-box.&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase includes desktop GUI apps for running tests, such as &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/commander.md" translate="no"&gt;SeleniumBase Commander&lt;/a&gt; for &lt;code translate="no"&gt;pytest&lt;/code&gt; and &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/behave_bdd/ReadMe.md" translate="no"&gt;SeleniumBase Behave GUI&lt;/a&gt; for &lt;code translate="no"&gt;behave&lt;/code&gt;.&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase has its own &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/recorder_mode.md"&gt;Recorder / Test Generator&lt;/a&gt; for creating tests from manual browser actions.&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase comes with &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/case_plans.md"&gt;test case management software, ("CasePlans")&lt;/a&gt;, for organizing tests and step descriptions.&lt;/p&gt; 
  &lt;p&gt;ğŸ’¡ SeleniumBase includes tools for &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/chart_maker/ReadMe.md"&gt;building data apps, ("ChartMaker")&lt;/a&gt;, which can generate JavaScript from Python.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;p&gt;ğŸ“š &lt;b&gt;Learn about different ways of writing tests:&lt;/b&gt;&lt;/p&gt; 
&lt;p align="left"&gt;ğŸ“—ğŸ“� Here's &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_simple_login.py"&gt;test_simple_login.py&lt;/a&gt;, which uses &lt;code translate="no"&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/fixtures/base_case.py"&gt;BaseCase&lt;/a&gt;&lt;/code&gt; class inheritance, and runs with &lt;a href="https://docs.pytest.org/en/latest/how-to/usage.html"&gt;pytest&lt;/a&gt; or &lt;a href="https://github.com/mdmintz/pynose"&gt;pynose&lt;/a&gt;. (Use &lt;code translate="no"&gt;self.driver&lt;/code&gt; to access Selenium's raw &lt;code translate="no"&gt;driver&lt;/code&gt;.)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from seleniumbase import BaseCase
BaseCase.main(__name__, __file__)

class TestSimpleLogin(BaseCase):
    def test_simple_login(self):
        self.open("seleniumbase.io/simple/login")
        self.type("#username", "demo_user")
        self.type("#password", "secret_pass")
        self.click('a:contains("Sign in")')
        self.assert_exact_text("Welcome!", "h1")
        self.assert_element("img#image1")
        self.highlight("#image1")
        self.click_link("Sign out")
        self.assert_text("signed out", "#top_message")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align="left"&gt;ğŸ“˜ğŸ“� Here's &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/raw_login_sb.py"&gt;raw_login_sb.py&lt;/a&gt;, which uses the &lt;b&gt;&lt;code translate="no"&gt;SB&lt;/code&gt;&lt;/b&gt; Context Manager. Runs with pure &lt;code translate="no"&gt;python&lt;/code&gt;. (Use &lt;code translate="no"&gt;sb.driver&lt;/code&gt; to access Selenium's raw &lt;code translate="no"&gt;driver&lt;/code&gt;.)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from seleniumbase import SB

with SB() as sb:
    sb.open("seleniumbase.io/simple/login")
    sb.type("#username", "demo_user")
    sb.type("#password", "secret_pass")
    sb.click('a:contains("Sign in")')
    sb.assert_exact_text("Welcome!", "h1")
    sb.assert_element("img#image1")
    sb.highlight("#image1")
    sb.click_link("Sign out")
    sb.assert_text("signed out", "#top_message")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align="left"&gt;ğŸ“™ğŸ“� Here's &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/raw_login_driver.py"&gt;raw_login_driver.py&lt;/a&gt;, which uses the &lt;b&gt;&lt;code translate="no"&gt;Driver&lt;/code&gt;&lt;/b&gt; Manager. Runs with pure &lt;code translate="no"&gt;python&lt;/code&gt;. (The &lt;code&gt;driver&lt;/code&gt; is an improved version of Selenium's raw &lt;code translate="no"&gt;driver&lt;/code&gt;, with more methods.)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from seleniumbase import Driver

driver = Driver()
try:
    driver.open("seleniumbase.io/simple/login")
    driver.type("#username", "demo_user")
    driver.type("#password", "secret_pass")
    driver.click('a:contains("Sign in")')
    driver.assert_exact_text("Welcome!", "h1")
    driver.assert_element("img#image1")
    driver.highlight("#image1")
    driver.click_link("Sign out")
    driver.assert_text("signed out", "#top_message")
finally:
    driver.quit()
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a id="python_installation"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src="https://seleniumbase.github.io/cdn/img/python_logo.png" title="SeleniumBase" width="42"&gt; Set up Python &amp;amp; Git:&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.python.org/downloads/"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=FACE42" title="Supported Python Versions"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ğŸ”µ Add &lt;b&gt;&lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;&lt;/b&gt; to your System PATH.&lt;/p&gt; 
&lt;p&gt;ğŸ”µ Using a &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/virtualenv_instructions.md"&gt;Python virtual env&lt;/a&gt; is recommended.&lt;/p&gt; 
&lt;p&gt;&lt;a id="install_seleniumbase"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Install SeleniumBase:&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;You can install &lt;code&gt;seleniumbase&lt;/code&gt; from &lt;a href="https://pypi.org/project/seleniumbase/"&gt;PyPI&lt;/a&gt; or &lt;a href="https://github.com/seleniumbase/SeleniumBase"&gt;GitHub&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;How to install &lt;code&gt;seleniumbase&lt;/code&gt; from PyPI:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pip install seleniumbase
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Add &lt;code&gt;--upgrade&lt;/code&gt; OR &lt;code&gt;-U&lt;/code&gt; to upgrade SeleniumBase.)&lt;/li&gt; 
 &lt;li&gt;(Add &lt;code&gt;--force-reinstall&lt;/code&gt; to upgrade indirect packages.)&lt;/li&gt; 
 &lt;li&gt;(Use &lt;code&gt;pip3&lt;/code&gt; if multiple versions of Python are present.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;How to install &lt;code&gt;seleniumbase&lt;/code&gt; from a GitHub clone:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;git clone https://github.com/seleniumbase/SeleniumBase.git
cd SeleniumBase/
pip install -e .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;How to upgrade an existing install from a GitHub clone:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;git pull
pip install -e .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Type &lt;code&gt;seleniumbase&lt;/code&gt; or &lt;code&gt;sbase&lt;/code&gt; to verify that SeleniumBase was installed successfully:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt; ___      _          _             ___              
/ __| ___| |___ _ _ (_)_  _ _ __  | _ ) __ _ ______ 
\__ \/ -_) / -_) ' \| | \| | '  \ | _ \/ _` (_-&amp;lt; -_)
|___/\___|_\___|_||_|_|\_,_|_|_|_\|___/\__,_/__|___|
----------------------------------------------------

â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚  * USAGE: "seleniumbase [COMMAND] [PARAMETERS]"  â”‚
â”‚  *    OR:        "sbase [COMMAND] [PARAMETERS]"  â”‚
â”‚                                                  â”‚
â”‚ COMMANDS:        PARAMETERS / DESCRIPTIONS:      â”‚
â”‚    get / install    [DRIVER_NAME] [OPTIONS]      â”‚
â”‚    methods          (List common Python methods) â”‚
â”‚    options          (List common pytest options) â”‚
â”‚    behave-options   (List common behave options) â”‚
â”‚    gui / commander  [OPTIONAL PATH or TEST FILE] â”‚
â”‚    behave-gui       (SBase Commander for Behave) â”‚
â”‚    caseplans        [OPTIONAL PATH or TEST FILE] â”‚
â”‚    mkdir            [DIRECTORY] [OPTIONS]        â”‚
â”‚    mkfile           [FILE.py] [OPTIONS]          â”‚
â”‚    mkrec / codegen  [FILE.py] [OPTIONS]          â”‚
â”‚    recorder         (Open Recorder Desktop App.) â”‚
â”‚    record           (If args: mkrec. Else: App.) â”‚
â”‚    mkpres           [FILE.py] [LANG]             â”‚
â”‚    mkchart          [FILE.py] [LANG]             â”‚
â”‚    print            [FILE] [OPTIONS]             â”‚
â”‚    translate        [SB_FILE.py] [LANG] [ACTION] â”‚
â”‚    convert          [WEBDRIVER_UNITTEST_FILE.py] â”‚
â”‚    extract-objects  [SB_FILE.py]                 â”‚
â”‚    inject-objects   [SB_FILE.py] [OPTIONS]       â”‚
â”‚    objectify        [SB_FILE.py] [OPTIONS]       â”‚
â”‚    revert-objects   [SB_FILE.py] [OPTIONS]       â”‚
â”‚    encrypt / obfuscate                           â”‚
â”‚    decrypt / unobfuscate                         â”‚
â”‚    proxy            (Start a basic proxy server) â”‚
â”‚    download server  (Get Selenium Grid JAR file) â”‚
â”‚    grid-hub         [start|stop] [OPTIONS]       â”‚
â”‚    grid-node        [start|stop] --hub=[HOST/IP] â”‚
â”‚                                                  â”‚
â”‚ *  EXAMPLE =&amp;gt; "sbase get chromedriver stable"    â”‚
â”‚ *  For command info =&amp;gt; "sbase help [COMMAND]"    â”‚
â”‚ *  For info on all commands =&amp;gt; "sbase --help"    â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ğŸ”µ Downloading webdrivers:&lt;/h3&gt; 
&lt;p&gt;âœ… SeleniumBase automatically downloads webdrivers as needed, such as &lt;code&gt;chromedriver&lt;/code&gt;.&lt;/p&gt; 
&lt;div&gt;&lt;/div&gt; 
&lt;details&gt; 
 &lt;summary&gt; â–¶ï¸� Here's sample output from a chromedriver download. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-zsh"&gt;*** chromedriver to download = 131.0.6778.108 (Latest Stable) 

Downloading chromedriver-mac-arm64.zip from:
https://storage.googleapis.com/chrome-for-testing-public/131.0.6778.108/mac-arm64/chromedriver-mac-arm64.zip ...
Download Complete!

Extracting ['chromedriver'] from chromedriver-mac-arm64.zip ...
Unzip Complete!

The file [chromedriver] was saved to:
~/github/SeleniumBase/seleniumbase/drivers/
chromedriver

Making [chromedriver 131.0.6778.108] executable ...
[chromedriver 131.0.6778.108] is now ready for use!
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;a id="basic_example_and_usage"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Basic Example / Usage:&lt;/h2&gt; 
&lt;p&gt;ğŸ”µ If you've cloned SeleniumBase, you can run tests from the &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/examples"&gt;examples/&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p align="left"&gt;Here's &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/my_first_test.py"&gt;my_first_test.py&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;cd examples/
pytest my_first_test.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/my_first_test.py"&gt;&lt;img src="https://seleniumbase.github.io/cdn/gif/fast_swag_2.gif" alt="SeleniumBase Test" title="SeleniumBase Test" width="480"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="left"&gt;&lt;b&gt;Here's the full code for &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/my_first_test.py"&gt;my_first_test.py&lt;/a&gt;:&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from seleniumbase import BaseCase
BaseCase.main(__name__, __file__)

class MyTestClass(BaseCase):
    def test_swag_labs(self):
        self.open("https://www.saucedemo.com")
        self.type("#user-name", "standard_user")
        self.type("#password", "secret_sauce\n")
        self.assert_element("div.inventory_list")
        self.assert_exact_text("Products", "span.title")
        self.click('button[name*="backpack"]')
        self.click("#shopping_cart_container a")
        self.assert_exact_text("Your Cart", "span.title")
        self.assert_text("Backpack", "div.cart_item")
        self.click("button#checkout")
        self.type("#first-name", "SeleniumBase")
        self.type("#last-name", "Automation")
        self.type("#postal-code", "77123")
        self.click("input#continue")
        self.assert_text("Checkout: Overview")
        self.assert_text("Backpack", "div.cart_item")
        self.assert_text("29.99", "div.inventory_item_price")
        self.click("button#finish")
        self.assert_exact_text("Thank you for your order!", "h2")
        self.assert_element('img[alt="Pony Express"]')
        self.js_click("a#logout_sidebar_link")
        self.assert_element("div#login_button_container")
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;By default, &lt;strong&gt;&lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;CSS Selectors&lt;/a&gt;&lt;/strong&gt; are used for finding page elements.&lt;/li&gt; 
 &lt;li&gt;If you're new to CSS Selectors, games like &lt;a href="http://flukeout.github.io/"&gt;CSS Diner&lt;/a&gt; can help you learn.&lt;/li&gt; 
 &lt;li&gt;For more reading, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors"&gt;here's an advanced guide on CSS attribute selectors&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a id="common_methods"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Here are some common SeleniumBase methods:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.open(url)  # Navigate the browser window to the URL.
self.type(selector, text)  # Update the field with the text.
self.click(selector)  # Click the element with the selector.
self.click_link(link_text)  # Click the link containing text.
self.go_back()  # Navigate back to the previous URL.
self.select_option_by_text(dropdown_selector, option)
self.hover_and_click(hover_selector, click_selector)
self.drag_and_drop(drag_selector, drop_selector)
self.get_text(selector)  # Get the text from the element.
self.get_current_url()  # Get the URL of the current page.
self.get_page_source()  # Get the HTML of the current page.
self.get_attribute(selector, attribute)  # Get element attribute.
self.get_title()  # Get the title of the current page.
self.switch_to_frame(frame)  # Switch into the iframe container.
self.switch_to_default_content()  # Leave the iframe container.
self.open_new_window()  # Open a new window in the same browser.
self.switch_to_window(window)  # Switch to the browser window.
self.switch_to_default_window()  # Switch to the original window.
self.get_new_driver(OPTIONS)  # Open a new driver with OPTIONS.
self.switch_to_driver(driver)  # Switch to the browser driver.
self.switch_to_default_driver()  # Switch to the original driver.
self.wait_for_element(selector)  # Wait until element is visible.
self.is_element_visible(selector)  # Return element visibility.
self.is_text_visible(text, selector)  # Return text visibility.
self.sleep(seconds)  # Do nothing for the given amount of time.
self.save_screenshot(name)  # Save a screenshot in .png format.
self.assert_element(selector)  # Verify the element is visible.
self.assert_text(text, selector)  # Verify text in the element.
self.assert_exact_text(text, selector)  # Verify text is exact.
self.assert_title(title)  # Verify the title of the web page.
self.assert_downloaded_file(file)  # Verify file was downloaded.
self.assert_no_404_errors()  # Verify there are no broken links.
self.assert_no_js_errors()  # Verify there are no JS errors.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ For the complete list of SeleniumBase methods, see: &lt;b&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/method_summary.md"&gt;Method Summary&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a id="fun_facts"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Fun Facts / Learn More:&lt;/h2&gt; 
&lt;p&gt;âœ… SeleniumBase automatically handles common &lt;a href="https://www.selenium.dev/documentation/webdriver/" target="_blank"&gt;WebDriver&lt;/a&gt; actions such as launching web browsers before tests, saving screenshots during failures, and closing web browsers after tests.&lt;/p&gt; 
&lt;p&gt;âœ… SeleniumBase lets you customize tests via &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/customizing_test_runs.md"&gt;command-line options&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;âœ… SeleniumBase uses simple syntax for commands. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.type("input", "dogs\n")  # (The "\n" presses ENTER)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Most SeleniumBase scripts can be run with &lt;code translate="no"&gt;pytest&lt;/code&gt;, &lt;code translate="no"&gt;pynose&lt;/code&gt;, or pure &lt;code translate="no"&gt;python&lt;/code&gt;. Not all test runners can run all test formats. For example, tests that use the &lt;code&gt;sb&lt;/code&gt; pytest fixture can only be run with &lt;code&gt;pytest&lt;/code&gt;. (See &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/syntax_formats.md"&gt;Syntax Formats&lt;/a&gt;) There's also a &lt;a href="https://behave.readthedocs.io/en/stable/gherkin.html#features" target="_blank"&gt;Gherkin&lt;/a&gt; test format that runs with &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/behave_bdd/ReadMe.md"&gt;behave&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest coffee_cart_tests.py --rs
pytest test_sb_fixture.py --demo
pytest test_suite.py --rs --html=report.html --dashboard

pynose basic_test.py --mobile
pynose test_suite.py --headless --report --show-report

python raw_sb.py
python raw_test_scripts.py

behave realworld.feature
behave calculator.feature -D rs -D dashboard
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;âœ… &lt;code translate="no"&gt;pytest&lt;/code&gt; includes automatic test discovery. If you don't specify a specific file or folder to run, &lt;code translate="no"&gt;pytest&lt;/code&gt; will automatically search through all subdirectories for tests to run based on the following criteria:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Python files that start with &lt;code&gt;test_&lt;/code&gt; or end with &lt;code&gt;_test.py&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Python methods that start with &lt;code&gt;test_&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With a SeleniumBase &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/pytest.ini"&gt;pytest.ini&lt;/a&gt; file present, you can modify default discovery settings. The Python class name can be anything because &lt;code&gt;seleniumbase.BaseCase&lt;/code&gt; inherits &lt;code&gt;unittest.TestCase&lt;/code&gt; to trigger autodiscovery.&lt;/p&gt; 
&lt;p&gt;âœ… You can do a pre-flight check to see which tests would get discovered by &lt;code translate="no"&gt;pytest&lt;/code&gt; before the actual run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest --co -q
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;âœ… You can be more specific when calling &lt;code translate="no"&gt;pytest&lt;/code&gt; or &lt;code translate="no"&gt;pynose&lt;/code&gt; on a file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest [FILE_NAME.py]::[CLASS_NAME]::[METHOD_NAME]

pynose [FILE_NAME.py]:[CLASS_NAME].[METHOD_NAME]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;âœ… No More Flaky Tests! SeleniumBase methods automatically wait for page elements to finish loading before interacting with them (&lt;i&gt;up to a timeout limit&lt;/i&gt;). This means &lt;b&gt;you no longer need random &lt;span&gt;&lt;code translate="no"&gt;time.sleep()&lt;/code&gt;&lt;/span&gt; statements&lt;/b&gt; in your scripts.&lt;/p&gt; 
&lt;img src="https://img.shields.io/badge/Flaky%20Tests%3F-%20NO%21-11BBDD.svg?sanitize=true" alt="NO MORE FLAKY TESTS!"&gt; 
&lt;p&gt;âœ… SeleniumBase supports all major browsers and operating systems:&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Browsers:&lt;/b&gt; Chrome, Edge, Firefox, and Safari.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Systems:&lt;/b&gt; Linux/Ubuntu, macOS, and Windows.&lt;/p&gt; 
&lt;p&gt;âœ… SeleniumBase works on all popular CI/CD platforms:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/github/workflows/ReadMe.md"&gt;&lt;img alt="GitHub Actions integration" src="https://img.shields.io/badge/GitHub_Actions-12B2C2.svg?logo=GitHubActions&amp;amp;logoColor=CFFFC2"&gt;&lt;/a&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/azure/jenkins/ReadMe.md"&gt;&lt;img alt="Jenkins integration" src="https://img.shields.io/badge/Jenkins-32B242.svg?logo=jenkins&amp;amp;logoColor=white"&gt;&lt;/a&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/azure/azure_pipelines/ReadMe.md"&gt;&lt;img alt="Azure integration" src="https://img.shields.io/badge/Azure-2288EE.svg?logo=AzurePipelines&amp;amp;logoColor=white"&gt;&lt;/a&gt; &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/google_cloud/ReadMe.md"&gt;&lt;img alt="Google Cloud integration" src="https://img.shields.io/badge/Google_Cloud-11CAE8.svg?logo=GoogleCloud&amp;amp;logoColor=EE0066"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#utilizing_advanced_features"&gt;&lt;img alt="AWS integration" src="https://img.shields.io/badge/AWS-4488DD.svg?logo=AmazonAWS&amp;amp;logoColor=FFFF44"&gt;&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Personal_computer" target="_blank"&gt;&lt;img alt="Your Computer" src="https://img.shields.io/badge/%F0%9F%92%BB_Your_Computer-44E6E6.svg?sanitize=true"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;âœ… SeleniumBase includes an automated/manual hybrid solution called &lt;b&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/master_qa/ReadMe.md"&gt;MasterQA&lt;/a&gt;&lt;/b&gt; to speed up manual testing with automation while manual testers handle validation.&lt;/p&gt; 
&lt;p&gt;âœ… SeleniumBase supports &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/examples/offline_examples"&gt;running tests while offline&lt;/a&gt; (&lt;i&gt;assuming webdrivers have previously been downloaded when online&lt;/i&gt;).&lt;/p&gt; 
&lt;p&gt;âœ… For a full list of SeleniumBase features, &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/features_list.md"&gt;Click Here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a id="demo_mode_and_debugging"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Demo Mode / Debugging:&lt;/h2&gt; 
&lt;p&gt;ğŸ”µ &lt;b&gt;Demo Mode&lt;/b&gt; helps you see what a test is doing. If a test is moving too fast for your eyes, run it in &lt;b&gt;Demo Mode&lt;/b&gt; to pause the browser briefly between actions, highlight page elements being acted on, and display assertions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest my_first_test.py --demo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;code&gt;time.sleep(seconds)&lt;/code&gt; can be used to make a test wait at a specific spot:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import time; time.sleep(3)  # Do nothing for 3 seconds.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Debug Mode&lt;/strong&gt; with Python's built-in &lt;strong&gt;&lt;a href="https://docs.python.org/3/library/pdb.html"&gt;pdb&lt;/a&gt;&lt;/strong&gt; library helps you debug tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import pdb; pdb.set_trace()
import pytest; pytest.set_trace()
breakpoint()  # Shortcut for "import pdb; pdb.set_trace()"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;(&lt;strong&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/strong&gt; commands: &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt; =&amp;gt; &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;step&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;ğŸ”µ To pause an active test that throws an exception or error, (&lt;em&gt;and keep the browser window open while &lt;strong&gt;Debug Mode&lt;/strong&gt; begins in the console&lt;/em&gt;), add &lt;strong&gt;&lt;code&gt;--pdb&lt;/code&gt;&lt;/strong&gt; as a &lt;code&gt;pytest&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_fail.py --pdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ To start tests in Debug Mode, add &lt;strong&gt;&lt;code&gt;--trace&lt;/code&gt;&lt;/strong&gt; as a &lt;code&gt;pytest&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_coffee_cart.py --trace
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/mdmintz/pdbp"&gt;&lt;img src="https://seleniumbase.github.io/cdn/gif/coffee_pdbp.gif" alt="SeleniumBase test with the pdbp (Pdb+) debugger" title="SeleniumBase test with the pdbp (Pdb+) debugger"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a id="command_line_options"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;ğŸ”µ Command-line Options:&lt;/h2&gt; 
&lt;p&gt;&lt;a id="pytest_options"&gt;&lt;/a&gt; âœ… Here are some useful command-line options that come with &lt;code translate="no"&gt;pytest&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;-v  # Verbose mode. Prints the full name of each test and shows more details.
-q  # Quiet mode. Print fewer details in the console output when running tests.
-x  # Stop running the tests after the first failure is reached.
--html=report.html  # Creates a detailed pytest-html report after tests finish.
--co | --collect-only  # Show what tests would get run. (Without running them)
--co -q  # (Both options together!) - Do a dry run with full test names shown.
-n=NUM  # Multithread the tests using that many threads. (Speed up test runs!)
-s  # See print statements. (Should be on by default with pytest.ini present.)
--junit-xml=report.xml  # Creates a junit-xml report after tests finish.
--pdb  # If a test fails, enter Post Mortem Debug Mode. (Don't use with CI!)
--trace  # Enter Debug Mode at the beginning of each test. (Don't use with CI!)
-m=MARKER  # Run tests with the specified pytest marker.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a id="new_pytest_options"&gt;&lt;/a&gt; âœ… SeleniumBase provides additional &lt;code translate="no"&gt;pytest&lt;/code&gt; command-line options for tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;--browser=BROWSER  # (The web browser to use. Default: "chrome".)
--chrome  # (Shortcut for "--browser=chrome". On by default.)
--edge  # (Shortcut for "--browser=edge".)
--firefox  # (Shortcut for "--browser=firefox".)
--safari  # (Shortcut for "--browser=safari".)
--settings-file=FILE  # (Override default SeleniumBase settings.)
--env=ENV  # (Set the test env. Access with "self.env" in tests.)
--account=STR  # (Set account. Access with "self.account" in tests.)
--data=STRING  # (Extra test data. Access with "self.data" in tests.)
--var1=STRING  # (Extra test data. Access with "self.var1" in tests.)
--var2=STRING  # (Extra test data. Access with "self.var2" in tests.)
--var3=STRING  # (Extra test data. Access with "self.var3" in tests.)
--variables=DICT  # (Extra test data. Access with "self.variables".)
--user-data-dir=DIR  # (Set the Chrome user data directory to use.)
--protocol=PROTOCOL  # (The Selenium Grid protocol: http|https.)
--server=SERVER  # (The Selenium Grid server/IP used for tests.)
--port=PORT  # (The Selenium Grid port used by the test server.)
--cap-file=FILE  # (The web browser's desired capabilities to use.)
--cap-string=STRING  # (The web browser's desired capabilities to use.)
--proxy=SERVER:PORT  # (Connect to a proxy server:port as tests are running)
--proxy=USERNAME:PASSWORD@SERVER:PORT  # (Use an authenticated proxy server)
--proxy-bypass-list=STRING # (";"-separated hosts to bypass, Eg "*.foo.com")
--proxy-pac-url=URL  # (Connect to a proxy server using a PAC_URL.pac file.)
--proxy-pac-url=USERNAME:PASSWORD@URL  # (Authenticated proxy with PAC URL.)
--proxy-driver  # (If a driver download is needed, will use: --proxy=PROXY.)
--multi-proxy  # (Allow multiple authenticated proxies when multi-threaded.)
--agent=STRING  # (Modify the web browser's User-Agent string.)
--mobile  # (Use the mobile device emulator while running tests.)
--metrics=STRING  # (Set mobile metrics: "CSSWidth,CSSHeight,PixelRatio".)
--chromium-arg="ARG=N,ARG2"  # (Set Chromium args, ","-separated, no spaces.)
--firefox-arg="ARG=N,ARG2"  # (Set Firefox args, comma-separated, no spaces.)
--firefox-pref=SET  # (Set a Firefox preference:value set, comma-separated.)
--extension-zip=ZIP  # (Load a Chrome Extension .zip|.crx, comma-separated.)
--extension-dir=DIR  # (Load a Chrome Extension directory, comma-separated.)
--disable-features="F1,F2"  # (Disable features, comma-separated, no spaces.)
--binary-location=PATH  # (Set path of the Chromium browser binary to use.)
--driver-version=VER  # (Set the chromedriver or uc_driver version to use.)
--sjw  # (Skip JS Waits for readyState to be "complete" or Angular to load.)
--wfa  # (Wait for AngularJS to be done loading after specific web actions.)
--pls=PLS  # (Set pageLoadStrategy on Chrome: "normal", "eager", or "none".)
--headless  # (The default headless mode. Linux uses this mode by default.)
--headless1  # (Use Chrome's old headless mode. Fast, but has limitations.)
--headless2  # (Use Chrome's new headless mode, which supports extensions.)
--headed  # (Run tests in headed/GUI mode on Linux OS, where not default.)
--xvfb  # (Run tests using the Xvfb virtual display server on Linux OS.)
--xvfb-metrics=STRING  # (Set Xvfb display size on Linux: "Width,Height".)
--locale=LOCALE_CODE  # (Set the Language Locale Code for the web browser.)
--interval=SECONDS  # (The autoplay interval for presentations &amp;amp; tour steps)
--start-page=URL  # (The starting URL for the web browser when tests begin.)
--archive-logs  # (Archive existing log files instead of deleting them.)
--archive-downloads  # (Archive old downloads instead of deleting them.)
--time-limit=SECONDS  # (Safely fail any test that exceeds the time limit.)
--slow  # (Slow down the automation. Faster than using Demo Mode.)
--demo  # (Slow down and visually see test actions as they occur.)
--demo-sleep=SECONDS  # (Set the wait time after Slow &amp;amp; Demo Mode actions.)
--highlights=NUM  # (Number of highlight animations for Demo Mode actions.)
--message-duration=SECONDS  # (The time length for Messenger alerts.)
--check-js  # (Check for JavaScript errors after page loads.)
--ad-block  # (Block some types of display ads from loading.)
--host-resolver-rules=RULES  # (Set host-resolver-rules, comma-separated.)
--block-images  # (Block images from loading during tests.)
--do-not-track  # (Indicate to websites that you don't want to be tracked.)
--verify-delay=SECONDS  # (The delay before MasterQA verification checks.)
--ee | --esc-end  # (Lets the user end the current test via the ESC key.)
--recorder  # (Enables the Recorder for turning browser actions into code.)
--rec-behave  # (Same as Recorder Mode, but also generates behave-gherkin.)
--rec-sleep  # (If the Recorder is enabled, also records self.sleep calls.)
--rec-print  # (If the Recorder is enabled, prints output after tests end.)
--disable-cookies  # (Disable Cookies on websites. Pages might break!)
--disable-js  # (Disable JavaScript on websites. Pages might break!)
--disable-csp  # (Disable the Content Security Policy of websites.)
--disable-ws  # (Disable Web Security on Chromium-based browsers.)
--enable-ws  # (Enable Web Security on Chromium-based browsers.)
--enable-sync  # (Enable "Chrome Sync" on websites.)
--uc | --undetected  # (Use undetected-chromedriver to evade bot-detection.)
--uc-cdp-events  # (Capture CDP events when running in "--undetected" mode.)
--log-cdp  # ("goog:loggingPrefs", {"performance": "ALL", "browser": "ALL"})
--remote-debug  # (Sync to Chrome Remote Debugger chrome://inspect/#devices)
--ftrace | --final-trace  # (Debug Mode after each test. Don't use with CI!)
--dashboard  # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html)
--dash-title=STRING  # (Set the title shown for the generated dashboard.)
--enable-3d-apis  # (Enables WebGL and 3D APIs.)
--swiftshader  # (Chrome "--use-gl=angle" / "--use-angle=swiftshader-webgl")
--incognito  # (Enable Chrome's Incognito mode.)
--guest  # (Enable Chrome's Guest mode.)
--dark  # (Enable Chrome's Dark mode.)
--devtools  # (Open Chrome's DevTools when the browser opens.)
--rs | --reuse-session  # (Reuse browser session for all tests.)
--rcs | --reuse-class-session  # (Reuse session for tests in class.)
--crumbs  # (Delete all cookies between tests reusing a session.)
--disable-beforeunload  # (Disable the "beforeunload" event on Chrome.)
--window-position=X,Y  # (Set the browser's starting window position.)
--window-size=WIDTH,HEIGHT  # (Set the browser's starting window size.)
--maximize  # (Start tests with the browser window maximized.)
--screenshot  # (Save a screenshot at the end of each test.)
--no-screenshot  # (No screenshots saved unless tests directly ask it.)
--visual-baseline  # (Set the visual baseline for Visual/Layout tests.)
--wire  # (Use selenium-wire's webdriver for replacing selenium webdriver.)
--external-pdf  # (Set Chromium "plugins.always_open_pdf_externally":True.)
--timeout-multiplier=MULTIPLIER  # (Multiplies the default timeout values.)
--list-fail-page  # (After each failing test, list the URL of the failure.)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(See the full list of command-line option definitions &lt;strong&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/plugins/pytest_plugin.py"&gt;here&lt;/a&gt;&lt;/strong&gt;. For detailed examples of command-line options, see &lt;strong&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/customizing_test_runs.md"&gt;customizing_test_runs.md&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;ğŸ”µ During test failures, logs and screenshots from the most recent test run will get saved to the &lt;code&gt;latest_logs/&lt;/code&gt; folder. Those logs will get moved to &lt;code&gt;archived_logs/&lt;/code&gt; if you add --archive_logs to command-line options, or have &lt;code&gt;ARCHIVE_EXISTING_LOGS&lt;/code&gt; set to True in &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/config/settings.py"&gt;settings.py&lt;/a&gt;, otherwise log files with be cleaned up at the start of the next test run. The &lt;code&gt;test_suite.py&lt;/code&gt; collection contains tests that fail on purpose so that you can see how logging works.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;cd examples/

pytest test_suite.py --chrome

pytest test_suite.py --firefox
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An easy way to override seleniumbase/config/settings.py is by using a custom settings file. Here's the command-line option to add to tests: (See &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/custom_settings.py"&gt;examples/custom_settings.py&lt;/a&gt;) &lt;code&gt;--settings_file=custom_settings.py&lt;/code&gt; (Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.)&lt;/p&gt; 
&lt;p&gt;ğŸ”µ To pass additional data from the command-line to tests, add &lt;code&gt;--data="ANY STRING"&lt;/code&gt;. Inside your tests, you can use &lt;code&gt;self.data&lt;/code&gt; to access that.&lt;/p&gt; 
&lt;p&gt;&lt;a id="directory_configuration"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Directory Configuration:&lt;/h2&gt; 
&lt;p&gt;ğŸ”µ When running tests with &lt;strong&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/strong&gt;, you'll want a copy of &lt;strong&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/pytest.ini"&gt;pytest.ini&lt;/a&gt;&lt;/strong&gt; in your root folders. When running tests with &lt;strong&gt;&lt;code&gt;pynose&lt;/code&gt;&lt;/strong&gt;, you'll want a copy of &lt;strong&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/setup.cfg"&gt;setup.cfg&lt;/a&gt;&lt;/strong&gt; in your root folders. These files specify default configuration details for tests. Test folders should also include a blank &lt;strong&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/offline_examples/__init__.py"&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/a&gt;&lt;/strong&gt; file to allow your test files to import other files from that folder.&lt;/p&gt; 
&lt;p&gt;ğŸ”µ &lt;code&gt;sbase mkdir DIR&lt;/code&gt; creates a folder with config files and sample tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;sbase mkdir ui_tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;That new folder will have these files:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;ui_tests/
â”œâ”€â”€ __init__.py
â”œâ”€â”€ my_first_test.py
â”œâ”€â”€ parameterized_test.py
â”œâ”€â”€ pytest.ini
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ setup.cfg
â”œâ”€â”€ test_demo_site.py
â””â”€â”€ boilerplates/
    â”œâ”€â”€ __init__.py
    â”œâ”€â”€ base_test_case.py
    â”œâ”€â”€ boilerplate_test.py
    â”œâ”€â”€ classic_obj_test.py
    â”œâ”€â”€ page_objects.py
    â”œâ”€â”€ sb_fixture_test.py
    â””â”€â”€ samples/
        â”œâ”€â”€ __init__.py
        â”œâ”€â”€ google_objects.py
        â”œâ”€â”€ google_test.py
        â”œâ”€â”€ sb_swag_test.py
        â””â”€â”€ swag_labs_test.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;b&gt;ProTipâ„¢:&lt;/b&gt; You can also create a boilerplate folder without any sample tests in it by adding &lt;code&gt;-b&lt;/code&gt; or &lt;code&gt;--basic&lt;/code&gt; to the &lt;code&gt;sbase mkdir&lt;/code&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;sbase mkdir ui_tests --basic
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;That new folder will have these files:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;ui_tests/
â”œâ”€â”€ __init__.py
â”œâ”€â”€ pytest.ini
â”œâ”€â”€ requirements.txt
â””â”€â”€ setup.cfg
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of those files, the &lt;code&gt;pytest.ini&lt;/code&gt; config file is the most important, followed by a blank &lt;code&gt;__init__.py&lt;/code&gt; file. There's also a &lt;code&gt;setup.cfg&lt;/code&gt; file (for pynose). Finally, the &lt;code&gt;requirements.txt&lt;/code&gt; file can be used to help you install seleniumbase into your environments (if it's not already installed).&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Log files from failed tests:&lt;/h3&gt; 
&lt;p&gt;Let's try an example of a test that fails:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;""" test_fail.py """
from seleniumbase import BaseCase
BaseCase.main(__name__, __file__)

class MyTestClass(BaseCase):

    def test_find_army_of_robots_on_xkcd_desert_island(self):
        self.open("https://xkcd.com/731/")
        self.assert_element("div#ARMY_OF_ROBOTS", timeout=1)  # This should fail
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run it from the &lt;code&gt;examples/&lt;/code&gt; folder like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_fail.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ You'll notice that a logs folder, &lt;code&gt;./latest_logs/&lt;/code&gt;, was created to hold information (and screenshots) about the failing test. During test runs, past results get moved to the archived_logs folder if you have ARCHIVE_EXISTING_LOGS set to True in &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/config/settings.py"&gt;settings.py&lt;/a&gt;, or if your run tests with &lt;code&gt;--archive-logs&lt;/code&gt;. If you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a id="seleniumbase_dashboard"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; SeleniumBase Dashboard:&lt;/h2&gt; 
&lt;p&gt;ğŸ”µ The &lt;code&gt;--dashboard&lt;/code&gt; option for pytest generates a SeleniumBase Dashboard located at &lt;code&gt;dashboard.html&lt;/code&gt;, which updates automatically as tests run and produce results. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest --dashboard --rs --headless
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src="https://seleniumbase.github.io/cdn/img/dashboard_1.png" alt="The SeleniumBase Dashboard" title="The SeleniumBase Dashboard" width="380"&gt; 
&lt;p&gt;ğŸ”µ Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python's &lt;code&gt;http.server&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;python -m http.server 1948
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ Now you can navigate to &lt;code&gt;http://localhost:1948/dashboard.html&lt;/code&gt; in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use &lt;kbd&gt;Ctrl+C&lt;/kbd&gt; to stop the http server.)&lt;/p&gt; 
&lt;p&gt;ğŸ”µ Here's a full example of what the SeleniumBase Dashboard may look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_suite.py test_image_saving.py --dashboard --rs --headless
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src="https://seleniumbase.github.io/cdn/img/dashboard_2.png" alt="The SeleniumBase Dashboard" title="The SeleniumBase Dashboard" width="520"&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a id="creating_visual_reports"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Generating Test Reports:&lt;/h2&gt; 
&lt;h3&gt;ğŸ”µ &lt;code&gt;pytest&lt;/code&gt; HTML Reports:&lt;/h3&gt; 
&lt;p&gt;âœ… Using &lt;code&gt;--html=report.html&lt;/code&gt; gives you a fancy report of the name specified after your test suite completes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_suite.py --html=report.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src="https://seleniumbase.github.io/cdn/img/html_report.png" alt="Example Pytest Report" title="Example Pytest Report" width="520"&gt; 
&lt;p&gt;âœ… When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: &lt;code&gt;--dashboard --html=dashboard.html&lt;/code&gt;), then the Dashboard will become an advanced html report when all the tests complete.&lt;/p&gt; 
&lt;p&gt;âœ… Here's an example of an upgraded html report:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_suite.py --dashboard --html=report.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src="https://seleniumbase.github.io/cdn/img/dash_report.jpg" alt="Dashboard Pytest HTML Report" title="Dashboard Pytest HTML Report" width="520"&gt; 
&lt;p&gt;If viewing pytest html reports in &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt;, you may need to &lt;a href="https://stackoverflow.com/a/46197356/7058266"&gt;configure Jenkins settings&lt;/a&gt; for the html to render correctly. This is due to &lt;a href="https://www.jenkins.io/doc/book/system-administration/security/configuring-content-security-policy/"&gt;Jenkins CSP changes&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also use &lt;code&gt;--junit-xml=report.xml&lt;/code&gt; to get an xml report instead. Jenkins can use this file to display better reporting for your tests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_suite.py --junit-xml=report.xml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ğŸ”µ &lt;code&gt;pynose&lt;/code&gt; Reports:&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;--report&lt;/code&gt; option gives you a fancy report after your test suite completes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pynose test_suite.py --report
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src="https://seleniumbase.github.io/cdn/img/nose_report.png" alt="Example pynose Report" title="Example pynose Report" width="320"&gt; 
&lt;p&gt;(NOTE: You can add &lt;code&gt;--show-report&lt;/code&gt; to immediately display pynose reports after the test suite completes. Only use &lt;code&gt;--show-report&lt;/code&gt; when running tests locally because it pauses the test run.)&lt;/p&gt; 
&lt;h3&gt;ğŸ”µ &lt;code&gt;behave&lt;/code&gt; Dashboard &amp;amp; Reports:&lt;/h3&gt; 
&lt;p&gt;(The &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/examples/behave_bdd"&gt;behave_bdd/&lt;/a&gt; folder can be found in the &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/examples"&gt;examples/&lt;/a&gt; folder.)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;behave behave_bdd/features/ -D dashboard -D headless
&lt;/code&gt;&lt;/pre&gt; 
&lt;img src="https://seleniumbase.github.io/cdn/img/sb_behave_dashboard.png" title="SeleniumBase" width="520"&gt; 
&lt;p&gt;You can also use &lt;code&gt;--junit&lt;/code&gt; to get &lt;code&gt;.xml&lt;/code&gt; reports for each &lt;code translate="no"&gt;behave&lt;/code&gt; feature. Jenkins can use these files to display better reporting for your tests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;behave behave_bdd/features/ --junit -D rs -D headless
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ğŸ”µ Allure Reports:&lt;/h3&gt; 
&lt;p&gt;See: &lt;a href="https://allurereport.org/docs/pytest/"&gt;https://allurereport.org/docs/pytest/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;SeleniumBase no longer includes &lt;code&gt;allure-pytest&lt;/code&gt; as part of installed dependencies. If you want to use it, install it first:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pip install allure-pytest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now your tests can create Allure results files, which can be processed by Allure Reports.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest test_suite.py --alluredir=allure_results
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Using a Proxy Server:&lt;/h3&gt; 
&lt;p&gt;If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add &lt;code&gt;--proxy=IP_ADDRESS:PORT&lt;/code&gt; as an argument on the command line.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest proxy_test.py --proxy=IP_ADDRESS:PORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the proxy server that you wish to use requires authentication, you can do the following (Chromium only):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SeleniumBase also supports SOCKS4 and SOCKS5 proxies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest proxy_test.py --proxy="socks4://IP_ADDRESS:PORT"

pytest proxy_test.py --proxy="socks5://IP_ADDRESS:PORT"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To make things easier, you can add your frequently-used proxies to PROXY_LIST in &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/config/proxy_list.py"&gt;proxy_list.py&lt;/a&gt;, and then use &lt;code&gt;--proxy=KEY_FROM_PROXY_LIST&lt;/code&gt; to use the IP_ADDRESS:PORT of that key.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest proxy_test.py --proxy=proxy1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Changing the User-Agent:&lt;/h3&gt; 
&lt;p&gt;ğŸ”µ If you wish to change the User-Agent for your browser tests (Chromium and Firefox only), you can add &lt;code&gt;--agent="USER AGENT STRING"&lt;/code&gt; as an argument on the command-line.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest user_agent_test.py --agent="Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Handling Pop-Up Alerts:&lt;/h3&gt; 
&lt;p&gt;ğŸ”µ &lt;code translate="no"&gt;self.accept_alert()&lt;/code&gt; automatically waits for and accepts alert pop-ups. &lt;code translate="no"&gt;self.dismiss_alert()&lt;/code&gt; automatically waits for and dismisses alert pop-ups. On occasion, some methods like &lt;code translate="no"&gt;self.click(SELECTOR)&lt;/code&gt; might dismiss a pop-up on its own because they call JavaScript to make sure that the &lt;code translate="no"&gt;readyState&lt;/code&gt; of the page is &lt;code translate="no"&gt;complete&lt;/code&gt; before advancing. If you're trying to accept a pop-up that got dismissed this way, use this workaround: Call &lt;code translate="no"&gt;self.find_element(SELECTOR).click()&lt;/code&gt; instead, (which will let the pop-up remain on the screen), and then use &lt;code translate="no"&gt;self.accept_alert()&lt;/code&gt; to accept the pop-up (&lt;a href="https://github.com/seleniumbase/SeleniumBase/issues/600#issuecomment-647270426"&gt;more on that here&lt;/a&gt;). If pop-ups are intermittent, wrap code in a try/except block.&lt;/p&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Building Guided Tours for Websites:&lt;/h3&gt; 
&lt;p&gt;ğŸ”µ Learn about &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/tour_examples/ReadMe.md"&gt;SeleniumBase Interactive Walkthroughs&lt;/a&gt; (in the &lt;code&gt;examples/tour_examples/&lt;/code&gt; folder). It's great for prototyping a website onboarding experience.&lt;/p&gt; 
&lt;p&gt;&lt;a id="utilizing_advanced_features"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;div&gt;&lt;/div&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Production Environments &amp;amp; Integrations:&lt;/h3&gt; 
&lt;div&gt;&lt;/div&gt; 
&lt;details&gt; 
 &lt;summary&gt; â–¶ï¸� Here are some things you can do to set up a production environment for your testing. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can set up a &lt;a href="https://jenkins.io/" target="_blank"&gt;Jenkins&lt;/a&gt; build server for running tests at regular intervals. For a real-world Jenkins example of headless browser automation in action, check out the &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/azure/jenkins/ReadMe.md"&gt;SeleniumBase Jenkins example on Azure&lt;/a&gt; or the &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/google_cloud/ReadMe.md"&gt;SeleniumBase Jenkins example on Google Cloud&lt;/a&gt;.&lt;/li&gt; 
  &lt;li&gt;You can use &lt;a href="https://selenium.dev/documentation/en/grid/" target="_blank"&gt;the Selenium Grid&lt;/a&gt; to scale your testing by distributing tests on several machines with parallel execution. To do this, check out the &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/utilities/selenium_grid"&gt;SeleniumBase selenium_grid folder&lt;/a&gt;, which should have everything you need, including the &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/utilities/selenium_grid/ReadMe.md"&gt;Selenium Grid ReadMe&lt;/a&gt; to help you get started.&lt;/li&gt; 
  &lt;li&gt;If you're using the &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/mysql_installation.md"&gt;SeleniumBase MySQL feature&lt;/a&gt; to save results from tests running on a server machine, you can install &lt;a href="https://dev.mysql.com/downloads/tools/workbench/"&gt;MySQL Workbench&lt;/a&gt; to help you read &amp;amp; write from your DB more easily.&lt;/li&gt; 
  &lt;li&gt;If you're using AWS, you can set up an &lt;a href="https://aws.amazon.com/s3/" target="_blank"&gt;Amazon S3&lt;/a&gt; account for saving log files and screenshots from your tests. To activate this feature, modify &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/config/settings.py"&gt;settings.py&lt;/a&gt; with connection details in the S3 section, and add &lt;code translate="no"&gt;--with-s3-logging&lt;/code&gt; on the command-line when running your tests.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Here's an example of running tests with some additional features enabled:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-zsh"&gt;pytest [YOUR_TEST_FILE.py] --with-db-reporting --with-s3-logging
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;a id="detailed_method_specifications"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Detailed Method Specifications and Examples:&lt;/h3&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Navigating to a web page: (and related commands)&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.open("https://xkcd.com/378/")  # This method opens the specified page.

self.go_back()  # This method navigates the browser to the previous page.

self.go_forward()  # This method navigates the browser forward in history.

self.refresh_page()  # This method reloads the current page.

self.get_current_url()  # This method returns the current page URL.

self.get_page_source()  # This method returns the current page source.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;b&gt;ProTipâ„¢:&lt;/b&gt; You can use the &lt;code translate="no"&gt;self.get_page_source()&lt;/code&gt; method with Python's &lt;code translate="no"&gt;find()&lt;/code&gt; command to parse through HTML to find something specific. (For more advanced parsing, see the &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_parse_soup.py"&gt;BeautifulSoup example&lt;/a&gt;.)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;source = self.get_page_source()
head_open_tag = source.find('&amp;lt;head&amp;gt;')
head_close_tag = source.find('&amp;lt;/head&amp;gt;', head_open_tag)
everything_inside_head = source[head_open_tag+len('&amp;lt;head&amp;gt;'):head_close_tag]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Clicking:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To click an element on the page:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.click("div#my_id")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;ProTipâ„¢:&lt;/strong&gt; In most web browsers, you can right-click on a page and select &lt;code&gt;Inspect Element&lt;/code&gt; to see the CSS selector details that you'll need to create your own scripts.&lt;/p&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Typing Text:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code translate="no"&gt;self.type(selector, text)&lt;/code&gt; # updates the text from the specified element with the specified value. An exception is raised if the element is missing or if the text field is not editable. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.type("input#id_value", "2012")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code translate="no"&gt;self.add_text()&lt;/code&gt; or the &lt;a href="https://www.selenium.dev/documentation/webdriver/" target="_blank"&gt;WebDriver&lt;/a&gt; &lt;code translate="no"&gt;.send_keys()&lt;/code&gt; command, but those won't clear the text box first if there's already text inside.&lt;/p&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Getting the text from an element on a page:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;text = self.get_text("header h2")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Getting the attribute value from an element on a page:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;attribute = self.get_attribute("#comic img", "title")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Asserting existence of an element on a page within some number of seconds:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.wait_for_element_present("div.my_class", timeout=10)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(NOTE: You can also use: &lt;code&gt;self.assert_element_present(ELEMENT)&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Asserting visibility of an element on a page within some number of seconds:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.wait_for_element_visible("a.my_class", timeout=5)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(NOTE: The short versions of that are &lt;code&gt;self.find_element(ELEMENT)&lt;/code&gt; and &lt;code&gt;self.assert_element(ELEMENT)&lt;/code&gt;. The &lt;code&gt;find_element()&lt;/code&gt; version returns the element.)&lt;/p&gt; 
&lt;p&gt;Since the line above returns the element, you can combine that with &lt;code&gt;.click()&lt;/code&gt; as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.find_element("a.my_class", timeout=5).click()

# But you're better off using the following statement, which does the same thing:

self.click("a.my_class")  # DO IT THIS WAY!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;ProTipâ„¢:&lt;/strong&gt; You can use dots to signify class names (Ex: &lt;code&gt;div.class_name&lt;/code&gt;) as a simplified version of &lt;code&gt;div[class="class_name"]&lt;/code&gt; within a CSS selector.&lt;/p&gt; 
&lt;p&gt;You can also use &lt;code&gt;*=&lt;/code&gt; to search for any partial value in a CSS selector as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.click('a[name*="partial_name"]')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Asserting visibility of text inside an element on a page within some number of seconds:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.assert_text("Make it so!", "div#trek div.picard div.quotes")
self.assert_text("Tea. Earl Grey. Hot.", "div#trek div.picard div.quotes", timeout=3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(NOTE: &lt;code&gt;self.find_text(TEXT, ELEMENT)&lt;/code&gt; and &lt;code&gt;self.wait_for_text(TEXT, ELEMENT)&lt;/code&gt; also do this. For backwards compatibility, older method names were kept, but the default timeout may be different.)&lt;/p&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Asserting Anything:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.assert_true(var1 == var2)

self.assert_false(var1 == var2)

self.assert_equal(var1, var2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ &lt;strong&gt;Useful Conditional Statements: (with creative examples)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;â�“ &lt;code&gt;is_element_visible(selector):&lt;/code&gt; (visible on the page)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;if self.is_element_visible('div#warning'):
    print("Red Alert: Something bad might be happening!")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;â�“ &lt;code&gt;is_element_present(selector):&lt;/code&gt; (present in the HTML)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;if self.is_element_present('div#top_secret img.tracking_cookie'):
    self.contact_cookie_monster()  # Not a real SeleniumBase method
else:
    current_url = self.get_current_url()
    self.contact_the_nsa(url=current_url, message="Dark Zone Found")  # Not a real SeleniumBase method
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;def is_there_a_cloaked_klingon_ship_on_this_page():
    if self.is_element_present("div.ships div.klingon"):
        return not self.is_element_visible("div.ships div.klingon")
    return False
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;â�“ &lt;code&gt;is_text_visible(text, selector):&lt;/code&gt; (text visible on element)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;if self.is_text_visible("You Shall Not Pass!", "h1"):
    self.open("https://www.youtube.com/watch?v=3xYXUeSmb-Y")
&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt;&lt;/div&gt; 
&lt;details&gt; 
 &lt;summary&gt; â–¶ï¸� Click for a longer example of &lt;code translate="no"&gt;is_text_visible():&lt;/code&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;def get_mirror_universe_captain_picard_superbowl_ad(superbowl_year):
    selector = "div.superbowl_%s div.commercials div.transcript div.picard" % superbowl_year
    if self.is_text_visible("Yes, it was I who summoned you all here.", selector):
        return "Picard Paramount+ Superbowl Ad 2020"
    elif self.is_text_visible("Commander, signal the following: Our Network is Secure!"):
        return "Picard Mirror Universe iboss Superbowl Ad 2018"
    elif self.is_text_visible("For the Love of Marketing and Earl Grey Tea!", selector):
        return "Picard Mirror Universe HubSpot Superbowl Ad 2015"
    elif self.is_text_visible("Delivery Drones... Engage", selector):
        return "Picard Mirror Universe Amazon Superbowl Ad 2015"
    elif self.is_text_visible("Bing it on Screen!", selector):
        return "Picard Mirror Universe Microsoft Superbowl Ad 2015"
    elif self.is_text_visible("OK Glass, Make it So!", selector):
        return "Picard Mirror Universe Google Superbowl Ad 2015"
    elif self.is_text_visible("Number One, I've Never Seen Anything Like It.", selector):
        return "Picard Mirror Universe Tesla Superbowl Ad 2015"
    elif self.is_text_visible("Let us make sure history never forgets the name ... Facebook", selector):
        return "Picard Mirror Universe Facebook Superbowl Ad 2015"
    elif self.is_text_visible("""With the first link, the chain is forged.
                              The first speech censored, the first thought forbidden,
                              the first freedom denied, chains us all irrevocably.""", selector):
        return "Picard Mirror Universe Wikimedia Superbowl Ad 2015"
    else:
        raise Exception("Reports of my assimilation are greatly exaggerated.")
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;â�“ &lt;code&gt;is_link_text_visible(link_text):&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;if self.is_link_text_visible("Stop! Hammer time!"):
    self.click_link("Stop! Hammer time!")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ğŸ”µ Switching Tabs:&lt;/h3&gt; 
&lt;p&gt;If your test opens up a new tab/window, you can switch to it. (SeleniumBase automatically switches to new tabs that don't open to &lt;code translate="no"&gt;about:blank&lt;/code&gt; URLs.)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.switch_to_window(1)  # This switches to the new tab (0 is the first one)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ğŸ”µ How to handle iframes:&lt;/h3&gt; 
&lt;p&gt;ğŸ”µ &lt;b&gt;iframes&lt;/b&gt; follow the same principle as new windows: You must first switch to the iframe if you want to perform actions in there:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.switch_to_frame("iframe")
# ... Now perform actions inside the iframe
self.switch_to_parent_frame()  # Exit the current iframe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To exit from multiple iframes, use &lt;code&gt;self.switch_to_default_content()&lt;/code&gt;. (If inside a single iframe, this has the same effect as &lt;code&gt;self.switch_to_parent_frame()&lt;/code&gt;.)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.switch_to_frame('iframe[name="frame1"]')
self.switch_to_frame('iframe[name="frame2"]')
# ... Now perform actions inside the inner iframe
self.switch_to_default_content()  # Back to the main page
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ You can also use a context manager to act inside iframes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;with self.frame_switch("iframe"):
    # ... Now perform actions while inside the code block
# You have left the iframe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This also works with nested iframes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;with self.frame_switch('iframe[name="frame1"]'):
    with self.frame_switch('iframe[name="frame2"]'):
        # ... Now perform actions while inside the code block
    # You are now back inside the first iframe
# You have left all the iframes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ğŸ”µ How to execute custom jQuery scripts:&lt;/h3&gt; 
&lt;p&gt;jQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser. If the web page you're on already has jQuery loaded, you can start executing jQuery scripts immediately. You'd know this because the web page would contain something like the following in the HTML:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ğŸ”µ It's OK if you want to use jQuery on a page that doesn't have it loaded yet. To do so, run the following command first:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.activate_jquery()
&lt;/code&gt;&lt;/pre&gt; 
&lt;div&gt;&lt;/div&gt; 
&lt;details&gt; 
 &lt;summary&gt; â–¶ï¸� Here are some examples of using jQuery in your scripts. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;self.execute_script("jQuery, window.scrollTo(0, 600)")  # Scrolling the page

self.execute_script("jQuery('#annoying-widget').hide()")  # Hiding elements on a page

self.execute_script("jQuery('#hidden-widget').show(0)")  # Showing hidden elements on a page

self.execute_script("jQuery('#annoying-button a').remove()")  # Removing elements on a page

self.execute_script("jQuery('%s').mouseover()" % (mouse_over_item))  # Mouse-over elements on a page

self.execute_script("jQuery('input#the_id').val('my_text')")  # Fast text input on a page

self.execute_script("jQuery('div#dropdown a.link').click()")  # Click elements on a page

self.execute_script("return jQuery('div#amazing')[0].text")  # Returns the css "text" of the element given

self.execute_script("return jQuery('textarea')[2].value")  # Returns the css "value" of the 3rd textarea element on the page
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;(Most of the above commands can be done directly with built-in SeleniumBase methods.)&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;ğŸ”µ How to handle a restrictive CSP:&lt;/h3&gt; 
&lt;p&gt;â�— Some websites have a restrictive &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;Content Security Policy&lt;/a&gt; to prevent users from loading jQuery and other external libraries onto their websites. If you need to use jQuery or another JS library on those websites, add &lt;code&gt;--disable-csp&lt;/code&gt; as a &lt;code&gt;pytest&lt;/code&gt; command-line option to load a Chromium extension that bypasses the CSP.&lt;/p&gt; 
&lt;h3&gt;ğŸ”µ More JavaScript fun:&lt;/h3&gt; 
&lt;div&gt;&lt;/div&gt; 
&lt;details&gt; 
 &lt;summary&gt; â–¶ï¸� In this example, JavaScript creates a referral button on a page, which is then clicked. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;start_page = "https://xkcd.com/465/"
destination_page = "https://github.com/seleniumbase/SeleniumBase"
self.open(start_page)
referral_link = '''&amp;lt;a class='analytics test' href='%s'&amp;gt;Free-Referral Button!&amp;lt;/a&amp;gt;''' % destination_page
self.execute_script('''document.body.innerHTML = \"%s\"''' % referral_link)
self.click("a.analytics")  # Clicks the generated button
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;(Due to popular demand, this traffic generation example has been included in SeleniumBase with the &lt;code translate="no"&gt;self.generate_referral(start_page, end_page)&lt;/code&gt; and the &lt;code translate="no"&gt;self.generate_traffic(start_page, end_page, loops)&lt;/code&gt; methods.)&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;ğŸ”µ How to use deferred asserts:&lt;/h3&gt; 
&lt;p&gt;Let's say you want to verify multiple different elements on a web page in a single test, but you don't want the test to fail until you verified several elements at once so that you don't have to rerun the test to find more missing elements on the same page. That's where deferred asserts come in. Here's an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from seleniumbase import BaseCase
BaseCase.main(__name__, __file__)

class DeferredAssertTests(BaseCase):
    def test_deferred_asserts(self):
        self.open("https://xkcd.com/993/")
        self.wait_for_element("#comic")
        self.deferred_assert_element('img[alt="Brand Identity"]')
        self.deferred_assert_element('img[alt="Rocket Ship"]')  # Will Fail
        self.deferred_assert_element("#comicmap")
        self.deferred_assert_text("Fake Item", "ul.comicNav")  # Will Fail
        self.deferred_assert_text("Random", "ul.comicNav")
        self.deferred_assert_element('a[name="Super Fake !!!"]')  # Will Fail
        self.deferred_assert_exact_text("Brand Identity", "#ctitle")
        self.deferred_assert_exact_text("Fake Food", "#comic")  # Will Fail
        self.process_deferred_asserts()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code translate="no"&gt;deferred_assert_element()&lt;/code&gt; and &lt;code translate="no"&gt;deferred_assert_text()&lt;/code&gt; will save any exceptions that would be raised. To flush out all the failed deferred asserts into a single exception, make sure to call &lt;code translate="no"&gt;self.process_deferred_asserts()&lt;/code&gt; at the end of your test method. If your test hits multiple pages, you can call &lt;code translate="no"&gt;self.process_deferred_asserts()&lt;/code&gt; before navigating to a new page so that the screenshot from your log files matches the URL where the deferred asserts were made.&lt;/p&gt; 
&lt;h3&gt;ğŸ”µ How to access raw &lt;a href="https://www.selenium.dev/documentation/webdriver/" target="_blank"&gt;WebDriver&lt;/a&gt;:&lt;/h3&gt; 
&lt;p&gt;If you need access to any commands that come with standard &lt;a href="https://www.selenium.dev/documentation/webdriver/" target="_blank"&gt;WebDriver&lt;/a&gt;, you can call them directly like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;self.driver.delete_all_cookies()
capabilities = self.driver.capabilities
self.driver.find_elements("partial link text", "GitHub")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(In general, you'll want to use the SeleniumBase versions of methods when available.)&lt;/p&gt; 
&lt;h3&gt;ğŸ”µ How to retry failing tests automatically:&lt;/h3&gt; 
&lt;p&gt;You can use &lt;code translate="no"&gt;pytest --reruns=NUM&lt;/code&gt; to retry failing tests that many times. Add &lt;code translate="no"&gt;--reruns-delay=SECONDS&lt;/code&gt; to wait that many seconds between retries. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;pytest --reruns=1 --reruns-delay=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use the &lt;code translate="no"&gt;@retry_on_exception()&lt;/code&gt; decorator to retry failing methods. (First import: &lt;code translate="no"&gt;from seleniumbase import decorators&lt;/code&gt;). To learn more about SeleniumBase decorators, &lt;a href="https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/common"&gt;click here&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;"Catch bugs in QA before deploying code to Production!"&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p align="left"&gt;&lt;a href="https://seleniumbase.io/error_page" target="_blank"&gt;&lt;img src="https://seleniumbase.github.io/cdn/gif/error_page.gif" alt="Catch bugs in QA before deploying code to Production!" title="Catch bugs in QA before deploying code to Production!"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;img src="https://seleniumbase.github.io/img/logo7.png" title="SeleniumBase" width="32"&gt; Wrap-Up&lt;/h3&gt; 
&lt;p&gt; &lt;/p&gt;
&lt;div&gt;
 &lt;b&gt;If you see something, say something!&lt;/b&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;a href="https://github.com/seleniumbase/SeleniumBase/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;img src="https://img.shields.io/github/issues-closed-raw/seleniumbase/SeleniumBase.svg?color=22BB88" title="Closed Issues"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/seleniumbase/SeleniumBase/pulls?q=is%3Apr+is%3Aclosed"&gt;&lt;img src="https://img.shields.io/github/issues-pr-closed/seleniumbase/SeleniumBase.svg?logo=github&amp;amp;logoColor=white&amp;amp;color=22BB99" title="Closed Pull Requests"&gt;&lt;/a&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="left"&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase/"&gt;&lt;img src="https://seleniumbase.github.io/cdn/img/sb_logo_10t.png" alt="SeleniumBase" title="SeleniumBase" width="274"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://pypi.org/project/seleniumbase/" target="_blank"&gt;&lt;img src="https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=22AAEE&amp;amp;logo=python&amp;amp;logoColor=FEDC54" title="Supported Python Versions"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt;
&lt;div&gt; 
 &lt;span&gt;&lt;a href="https://www.youtube.com/playlist?list=PLp9uKicxkBc5UIlGi2BuE3aWC7JyXpD3m"&gt;&lt;img src="https://seleniumbase.github.io/cdn/img/youtube.png" title="SeleniumBase Playlist on YouTube" alt="SeleniumBase Playlist on YouTube" width="70"&gt;&lt;/a&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;a href="https://github.com/seleniumbase/SeleniumBase"&gt;&lt;img src="https://seleniumbase.github.io/img/social/share_github.svg?sanitize=true" title="SeleniumBase on GitHub" alt="SeleniumBase on GitHub" width="64"&gt;&lt;/a&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;a href="https://discord.gg/EdhQTn3EyE"&gt;&lt;img src="https://seleniumbase.github.io/other/discord_icon.png" title="SeleniumBase on Discord" alt="SeleniumBase on Discord" width="66"&gt;&lt;/a&gt;&lt;/span&gt; 
 &lt;span&gt;&lt;a href="https://www.facebook.com/SeleniumBase"&gt;&lt;img src="https://seleniumbase.io/img/social/share_facebook.svg?sanitize=true" title="SeleniumBase on Facebook" alt="SeleniumBase on Facebook" width="62"&gt;&lt;/a&gt;&lt;/span&gt; 
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt;
&lt;div&gt;
 &lt;b&gt;&lt;a href="https://github.com/mdmintz"&gt;https://github.com/mdmintz&lt;/a&gt;&lt;/b&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;div&gt;
 &lt;a href="https://github.com/seleniumbase/SeleniumBase/"&gt;&lt;img src="https://seleniumbase.github.io/cdn/img/super_logo_sb3.png" title="SeleniumBase" width="274"&gt;&lt;/a&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;a href="https://seleniumbase.io"&gt;&lt;img src="https://img.shields.io/badge/docs-seleniumbase.io-11BBAA.svg?sanitize=true" alt="SeleniumBase Docs"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/seleniumbase/SeleniumBase/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-22BBCC.svg?sanitize=true" title="SeleniumBase"&gt;&lt;/a&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;a href="https://github.com/seleniumbase/SeleniumBase"&gt;&lt;img src="https://img.shields.io/badge/tested%20with-SeleniumBase-04C38E.svg?sanitize=true" alt="Tested with SeleniumBase"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/seleniumbase/SeleniumBase/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/seleniumbase/seleniumbase.svg?color=19A57B" title="Stargazers"&gt;&lt;/a&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;a href="https://hellogithub.com/repository/c6be2d0f1969448697683d11a4ff915e" target="_blank"&gt;&lt;img src="https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=c6be2d0f1969448697683d11a4ff915e&amp;amp;claim_uid=xcrm4p9j3d6JCO5&amp;amp;theme=small" alt="Featuredï½œHelloGitHub"&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/EdhQTn3EyE" target="_blank"&gt;&lt;img src="https://img.shields.io/discord/727927627830001734?color=7289DA&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white"&gt;&lt;/a&gt;
&lt;/div&gt; 
&lt;div&gt;
 &lt;a href="https://pepy.tech/projects/seleniumbase?timeRange=threeMonths&amp;amp;category=version&amp;amp;includeCIDownloads=true&amp;amp;granularity=daily&amp;amp;viewType=line&amp;amp;versions=*" target="_blank"&gt;&lt;img src="https://static.pepy.tech/badge/seleniumbase" alt="SeleniumBase PyPI downloads"&gt;&lt;/a&gt; 
 &lt;img src="https://views.whatilearened.today/views/github/seleniumbase/SeleniumBase.svg?sanitize=true" width="98px" height="20px" alt="Views"&gt;
&lt;/div&gt; 
&lt;div align="left"&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>langchain-ai/open_deep_research</title>
      <link>https://github.com/langchain-ai/open_deep_research</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open Deep Research&lt;/h1&gt; 
&lt;img width="1388" height="298" alt="full_diagram" src="https://github.com/user-attachments/assets/12a2371b-8be2-4219-9b48-90503eb43c69"&gt; 
&lt;p&gt;Deep research has broken out as one of the most popular agent applications. This is a simple, configurable, fully open source deep research agent that works across many model providers, search tools, and MCP servers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read more in our &lt;a href="https://blog.langchain.com/open-deep-research/"&gt;blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See our &lt;a href="https://www.youtube.com/watch?v=agGiWUpxkhg"&gt;video&lt;/a&gt; for a quick overview&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ğŸš€ Quickstart&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository and activate a virtual environment:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/langchain-ai/open_deep_research.git
cd open_deep_research
uv venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Install dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv pip install -r pyproject.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Set up your &lt;code&gt;.env&lt;/code&gt; file to customize the environment variables (for model selection, search tools, and other configuration settings):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp .env.example .env
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Launch the assistant with the LangGraph server locally to open LangGraph Studio in your browser:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install dependencies and start the LangGraph server
uvx --refresh --from "langgraph-cli[inmem]" --with-editable . --python 3.11 langgraph dev --allow-blocking
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use this to open the Studio UI:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- ğŸš€ API: http://127.0.0.1:2024
- ğŸ�¨ Studio UI: https://smith.langchain.com/studio/?baseUrl=http://127.0.0.1:2024
- ğŸ“š API Docs: http://127.0.0.1:2024/docs
&lt;/code&gt;&lt;/pre&gt; 
&lt;img width="817" height="666" alt="Screenshot 2025-07-13 at 11 21 12â€¯PM" src="https://github.com/user-attachments/assets/052f2ed3-c664-4a4f-8ec2-074349dcaa3f"&gt; 
&lt;p&gt;Ask a question in the &lt;code&gt;messages&lt;/code&gt; input field and click &lt;code&gt;Submit&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Configurations&lt;/h3&gt; 
&lt;p&gt;Open Deep Research offers extensive configuration options to customize the research process and model behavior. All configurations can be set via the web UI, environment variables, or by modifying the configuration directly.&lt;/p&gt; 
&lt;h4&gt;General Settings&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Max Structured Output Retries&lt;/strong&gt; (default: 3): Maximum number of retries for structured output calls from models when parsing fails&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Allow Clarification&lt;/strong&gt; (default: true): Whether to allow the researcher to ask clarifying questions before starting research&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Max Concurrent Research Units&lt;/strong&gt; (default: 5): Maximum number of research units to run concurrently using sub-agents. Higher values enable faster research but may hit rate limits&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Research Configuration&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Search API&lt;/strong&gt; (default: Tavily): Choose from Tavily (works with all models), OpenAI Native Web Search, Anthropic Native Web Search, or None&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Max Researcher Iterations&lt;/strong&gt; (default: 3): Number of times the Research Supervisor will reflect on research and ask follow-up questions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Max React Tool Calls&lt;/strong&gt; (default: 5): Maximum number of tool calling iterations in a single researcher step&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Models&lt;/h4&gt; 
&lt;p&gt;Open Deep Research uses multiple specialized models for different research tasks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Summarization Model&lt;/strong&gt; (default: &lt;code&gt;openai:gpt-4.1-nano&lt;/code&gt;): Summarizes research results from search APIs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Research Model&lt;/strong&gt; (default: &lt;code&gt;openai:gpt-4.1&lt;/code&gt;): Conducts research and analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Compression Model&lt;/strong&gt; (default: &lt;code&gt;openai:gpt-4.1-mini&lt;/code&gt;): Compresses research findings from sub-agents&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Final Report Model&lt;/strong&gt; (default: &lt;code&gt;openai:gpt-4.1&lt;/code&gt;): Writes the final comprehensive report&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All models are configured using &lt;a href="https://python.langchain.com/docs/how_to/chat_models_universal_init/"&gt;init_chat_model() API&lt;/a&gt; which supports providers like OpenAI, Anthropic, Google Vertex AI, and others.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important Model Requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Structured Outputs&lt;/strong&gt;: All models must support structured outputs. Check support &lt;a href="https://python.langchain.com/docs/integrations/chat/"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Search API Compatibility&lt;/strong&gt;: Research and Compression models must support your selected search API:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Anthropic search requires Anthropic models with web search capability&lt;/li&gt; 
   &lt;li&gt;OpenAI search requires OpenAI models with web search capability&lt;/li&gt; 
   &lt;li&gt;Tavily works with all models&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tool Calling&lt;/strong&gt;: All models must support tool calling functionality&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Special Configurations&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For OpenRouter: Follow &lt;a href="https://github.com/langchain-ai/open_deep_research/issues/75#issuecomment-2811472408"&gt;this guide&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;For local models via Ollama: See &lt;a href="https://github.com/langchain-ai/open_deep_research/issues/65#issuecomment-2743586318"&gt;setup instructions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Example MCP (Model Context Protocol) Servers&lt;/h4&gt; 
&lt;p&gt;Open Deep Research supports MCP servers to extend research capabilities.&lt;/p&gt; 
&lt;h4&gt;Local MCP Servers&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Filesystem MCP Server&lt;/strong&gt; provides secure file system operations with robust access control:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read, write, and manage files and directories&lt;/li&gt; 
 &lt;li&gt;Perform operations like reading file contents, creating directories, moving files, and searching&lt;/li&gt; 
 &lt;li&gt;Restrict operations to predefined directories for security&lt;/li&gt; 
 &lt;li&gt;Support for both command-line configuration and dynamic MCP roots&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mcp-server-filesystem /path/to/allowed/dir1 /path/to/allowed/dir2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Remote MCP Servers&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Remote MCP servers&lt;/strong&gt; enable distributed agent coordination and support streamable HTTP requests. Unlike local servers, they can be multi-tenant and require more complex authentication.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Arcade MCP Server Example&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "url": "https://api.arcade.dev/v1/mcps/ms_0ujssxh0cECutqzMgbtXSGnjorm",
  "tools": ["Search_SearchHotels", "Search_SearchOneWayFlights", "Search_SearchRoundtripFlights"]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Remote servers can be configured as authenticated or unauthenticated and support JWT-based authentication through OAuth endpoints.&lt;/p&gt; 
&lt;h3&gt;Evaluation&lt;/h3&gt; 
&lt;p&gt;A comprehensive batch evaluation system designed for detailed analysis and comparative studies.&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-dimensional Scoring&lt;/strong&gt;: Specialized evaluators with 0-1 scale ratings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dataset-driven Evaluation&lt;/strong&gt;: Batch processing across multiple test cases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run comprehensive evaluation on LangSmith datasets
python tests/run_evaluate.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;Key Files:&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tests/run_evaluate.py&lt;/code&gt;: Main evaluation script&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/evaluators.py&lt;/code&gt;: Specialized evaluator functions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/prompts.py&lt;/code&gt;: Evaluation prompts for each dimension&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Deployments and Usages&lt;/h3&gt; 
&lt;h4&gt;LangGraph Studio&lt;/h4&gt; 
&lt;p&gt;Follow the &lt;a href="https://raw.githubusercontent.com/langchain-ai/open_deep_research/main/#-quickstart"&gt;quickstart&lt;/a&gt; to start LangGraph server locally and test the agent out on LangGraph Studio.&lt;/p&gt; 
&lt;h4&gt;Hosted deployment&lt;/h4&gt; 
&lt;p&gt;You can easily deploy to &lt;a href="https://langchain-ai.github.io/langgraph/concepts/#deployment-options"&gt;LangGraph Platform&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Open Agent Platform&lt;/h4&gt; 
&lt;p&gt;Open Agent Platform (OAP) is a UI from which non-technical users can build and configure their own agents. OAP is great for allowing users to configure the Deep Researcher with different MCP tools and search APIs that are best suited to their needs and the problems that they want to solve.&lt;/p&gt; 
&lt;p&gt;We've deployed Open Deep Research to our public demo instance of OAP. All you need to do is add your API Keys, and you can test out the Deep Researcher for yourself! Try it out &lt;a href="https://oap.langchain.com"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can also deploy your own instance of OAP, and make your own custom agents (like Deep Researcher) available on it to your users.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://docs.oap.langchain.com/quickstart"&gt;Deploy Open Agent Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.oap.langchain.com/setup/agents"&gt;Add Deep Researcher to OAP&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Updates ğŸ”¥&lt;/h3&gt; 
&lt;h3&gt;Legacy Implementations ğŸ�›ï¸�&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;src/legacy/&lt;/code&gt; folder contains two earlier implementations that provide alternative approaches to automated research:&lt;/p&gt; 
&lt;h4&gt;1. Workflow Implementation (&lt;code&gt;legacy/graph.py&lt;/code&gt;)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Plan-and-Execute&lt;/strong&gt;: Structured workflow with human-in-the-loop planning&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sequential Processing&lt;/strong&gt;: Creates sections one by one with reflection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interactive Control&lt;/strong&gt;: Allows feedback and approval of report plans&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Quality Focused&lt;/strong&gt;: Emphasizes accuracy through iterative refinement&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;2. Multi-Agent Implementation (&lt;code&gt;legacy/multi_agent.py&lt;/code&gt;)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Supervisor-Researcher Architecture&lt;/strong&gt;: Coordinated multi-agent system&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parallel Processing&lt;/strong&gt;: Multiple researchers work simultaneously&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Speed Optimized&lt;/strong&gt;: Faster report generation through concurrency&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MCP Support&lt;/strong&gt;: Extensive Model Context Protocol integration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;code&gt;src/legacy/legacy.md&lt;/code&gt; for detailed documentation, configuration options, and usage examples for both legacy implementations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Asabeneh/30-Days-Of-Python</title>
      <link>https://github.com/Asabeneh/30-Days-Of-Python</link>
      <description>&lt;p&gt;30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace. These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ğŸ�� 30 Days Of Python&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Learn with Asabeneh by joining the upcoming &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSf0oNIYR9XU1DCctfl-pY36KbWse-SQX5aQaUgetqSinFYnmQ/viewform"&gt;&lt;em&gt;CODING BOOTCAMP&lt;/em&gt;&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;# Day&lt;/th&gt; 
   &lt;th align="center"&gt;Topics&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;01&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/readme.md"&gt;Introduction&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;02&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md"&gt;Variables, Built-in Functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;03&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/03_Day_Operators/03_operators.md"&gt;Operators&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;04&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/04_Day_Strings/04_strings.md"&gt;Strings&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;05&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/05_Day_Lists/05_lists.md"&gt;Lists&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;06&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/06_Day_Tuples/06_tuples.md"&gt;Tuples&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;07&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/07_Day_Sets/07_sets.md"&gt;Sets&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;08&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/08_Day_Dictionaries/08_dictionaries.md"&gt;Dictionaries&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;09&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/09_Day_Conditionals/09_conditionals.md"&gt;Conditionals&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/10_Day_Loops/10_loops.md"&gt;Loops&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/11_Day_Functions/11_functions.md"&gt;Functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/12_Day_Modules/12_modules.md"&gt;Modules&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;13&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/13_Day_List_comprehension/13_list_comprehension.md"&gt;List Comprehension&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;14&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/14_Day_Higher_order_functions/14_higher_order_functions.md"&gt;Higher Order Functions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;15&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/15_Day_Python_type_errors/15_python_type_errors.md"&gt;Python Type Errors&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;16&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/16_Day_Python_date_time/16_python_datetime.md"&gt;Python Date time&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;17&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/17_Day_Exception_handling/17_exception_handling.md"&gt;Exception Handling&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;18&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/18_Day_Regular_expressions/18_regular_expressions.md"&gt;Regular Expressions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;19&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/19_Day_File_handling/19_file_handling.md"&gt;File Handling&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;20&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/20_Day_Python_package_manager/20_python_package_manager.md"&gt;Python Package Manager&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;21&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/21_Day_Classes_and_objects/21_classes_and_objects.md"&gt;Classes and Objects&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;22&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/22_Day_Web_scraping/22_web_scraping.md"&gt;Web Scraping&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/23_Day_Virtual_environment/23_virtual_environment.md"&gt;Virtual Environment&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;24&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/24_Day_Statistics/24_statistics.md"&gt;Statistics&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/25_Day_Pandas/25_pandas.md"&gt;Pandas&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;26&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/26_Day_Python_web/26_python_web.md"&gt;Python web&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;27&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/27_Day_Python_with_mongodb/27_python_with_mongodb.md"&gt;Python with MongoDB&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;28&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/28_Day_API/28_API.md"&gt;API&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;29&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/29_Day_Building_API/29_building_API.md"&gt;Building API&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/30_Day_Conclusions/30_conclusions.md"&gt;Conclusions&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Learn with Asabeneh by joining the upcoming &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSf0oNIYR9XU1DCctfl-pY36KbWse-SQX5aQaUgetqSinFYnmQ/viewform"&gt;&lt;em&gt;CODING BOOTCAMP&lt;/em&gt;&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;ğŸ§¡ğŸ§¡ğŸ§¡ HAPPY CODING ğŸ§¡ğŸ§¡ğŸ§¡&lt;/p&gt; 
&lt;div&gt; 
 &lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; 
 &lt;br&gt; 
 &lt;a href="https://www.paypal.me/asabeneh"&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/paypal_lg.png" alt="Paypal Logo" style="width:10%"&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h1&gt; 30 Days Of Python: Day 1 - Introduction&lt;/h1&gt; 
 &lt;a class="header-badge" target="_blank" href="https://www.linkedin.com/in/asabeneh/"&gt; &lt;img src="https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social"&gt; &lt;/a&gt; 
 &lt;a class="header-badge" target="_blank" href="https://twitter.com/Asabeneh"&gt; &lt;img alt="Twitter Follow" src="https://img.shields.io/twitter/follow/asabeneh?style=social"&gt; &lt;/a&gt; 
 &lt;p&gt;&lt;sub&gt;Author: &lt;a href="https://www.linkedin.com/in/asabeneh/" target="_blank"&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br&gt; &lt;small&gt; Second Edition: July, 2021&lt;/small&gt; &lt;/sub&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;ğŸ‡§ğŸ‡· &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/Portuguese/README.md"&gt;Portuguese&lt;/a&gt; ğŸ‡¨ğŸ‡³ &lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/Chinese/README.md"&gt;ä¸­æ–‡&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md"&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/30DaysOfPython_banner3@2x.png" alt="30DaysOfPython"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-30-days-of-python"&gt;ğŸ�� 30 Days Of Python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-day-1"&gt;ğŸ“˜ Day 1&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#welcome"&gt;Welcome&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#why-python-"&gt;Why Python ?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#environment-setup"&gt;Environment Setup&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#installing-python"&gt;Installing Python&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-shell"&gt;Python Shell&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#installing-visual-studio-code"&gt;Installing Visual Studio Code&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#how-to-use-visual-studio-code"&gt;How to use visual studio code&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#basic-python"&gt;Basic Python&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-syntax"&gt;Python Syntax&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-indentation"&gt;Python Indentation&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#data-types"&gt;Data types&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#number"&gt;Number&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#string"&gt;String&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#booleans"&gt;Booleans&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#list"&gt;List&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#dictionary"&gt;Dictionary&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#tuple"&gt;Tuple&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#set"&gt;Set&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#checking-data-types"&gt;Checking Data types&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-file"&gt;Python File&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-exercises---day-1"&gt;ğŸ’» Exercises - Day 1&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-1"&gt;Exercise: Level 1&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-2"&gt;Exercise: Level 2&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-3"&gt;Exercise: Level 3&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;ğŸ“˜ Day 1&lt;/h1&gt; 
&lt;h2&gt;Welcome&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; for deciding to participate in a &lt;em&gt;30 days of Python&lt;/em&gt; programming challenge. In this challenge, you will learn everything you need to be a python programmer and the whole concept of programming. At the end of the challenge, you will get a &lt;em&gt;30DaysOfPython&lt;/em&gt; programming challenge certificate.&lt;/p&gt; 
&lt;p&gt;If you would like to actively engage in the challenge, you may join the &lt;a href="https://t.me/ThirtyDaysOfPython"&gt;30DaysOfPython challenge&lt;/a&gt; telegram group.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Python is a high-level programming language for general-purpose programming. It is an open source, interpreted, objected-oriented programming language. Python was created by a Dutch programmer, Guido van Rossum. The name of the Python programming language was derived from a British sketch comedy series, &lt;em&gt;Monty Python's Flying Circus&lt;/em&gt;. The first version was released on February 20, 1991. This 30 days of Python challenge will help you learn the latest version of Python, Python 3 step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples, and many hands on exercises and projects.&lt;/p&gt; 
&lt;p&gt;This challenge is designed for beginners and professionals who want to learn python programming language. It may take 30 to 100 days to complete the challenge. People who actively participate in the telegram group have a high probability of completing the challenge.&lt;/p&gt; 
&lt;p&gt;This challenge is easy to read, written in conversational English, engaging, motivating and at the same time, it is very demanding. You need to allocate much time to finish this challenge. If you are a visual learner, you may get the video lesson on &lt;a href="https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw"&gt; Washera&lt;/a&gt; YouTube channel. You may start from &lt;a href="https://youtu.be/OCCWZheOesI"&gt;Python for Absolute Beginners video&lt;/a&gt;. Subscribe the channel, comment and ask questions on YouTube vidoes and be proactive, the author will eventually notice you.&lt;/p&gt; 
&lt;p&gt;The author likes to hear your opinion about the challenge, share the author by expressing your thoughts about the 30DaysOfPython challenge. You can leave your testimonial on this &lt;a href="https://www.asabeneh.com/testimonials"&gt;link&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Why Python ?&lt;/h2&gt; 
&lt;p&gt;It is a programming language which is very close to human language and because of that, it is easy to learn and use. Python is used by various industries and companies (including Google). It has been used to develop web applications, desktop applications, system administration, and machine learning libraries. Python is a highly embraced language in the data science and machine learning community. I hope this is enough to convince you to start learning Python. Python is eating the world and you are killing it before it eats you.&lt;/p&gt; 
&lt;h2&gt;Environment Setup&lt;/h2&gt; 
&lt;h3&gt;Installing Python&lt;/h3&gt; 
&lt;p&gt;To run a python script you need to install python. Let's &lt;a href="https://www.python.org/"&gt;download&lt;/a&gt; python. If your are a windows user. Click the button encircled in red.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.python.org/"&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/installing_on_windows.png" alt="installing on Windows"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you are a macOS user. Click the button encircled in red.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.python.org/"&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/installing_on_macOS.png" alt="installing on Windows"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To check if python is installed write the following command on your device terminal.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;python --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/python_versio.png" alt="Python Version"&gt;&lt;/p&gt; 
&lt;p&gt;As you can see from the terminal, I am using &lt;em&gt;Python 3.7.5&lt;/em&gt; version at the moment. Your version of Python might be different from mine by but it should be 3.6 or above. If you mange to see the python version, well done. Python has been installed on your machine. Continue to the next section.&lt;/p&gt; 
&lt;h3&gt;Python Shell&lt;/h3&gt; 
&lt;p&gt;Python is an interpreted scripting language, so it does not need to be compiled. It means it executes the code line by line. Python comes with a &lt;em&gt;Python Shell (Python Interactive Shell)&lt;/em&gt;. It is used to execute a single python command and get the result.&lt;/p&gt; 
&lt;p&gt;Python Shell waits for the Python code from the user. When you enter the code, it interprets the code and shows the result in the next line. Open your terminal or command prompt(cmd) and write:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;python
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_python_shell.png" alt="Python Scripting Shell"&gt;&lt;/p&gt; 
&lt;p&gt;The Python interactive shell is opened and it is waiting for you to write Python code(Python script). You will write your Python script next to this symbol &amp;gt;&amp;gt;&amp;gt; and then click Enter. Let us write our very first script on the Python scripting shell.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/adding_on_python_shell.png" alt="Python script on Python shell"&gt;&lt;/p&gt; 
&lt;p&gt;Well done, you wrote your first Python script on Python interactive shell. How do we close the Python interactive shell ? To close the shell, next to this symbol &amp;gt;&amp;gt; write &lt;strong&gt;exit()&lt;/strong&gt; command and press Enter.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/exit_from_shell.png" alt="Exit from python shell"&gt;&lt;/p&gt; 
&lt;p&gt;Now, you know how to open the Python interactive shell and how to exit from it.&lt;/p&gt; 
&lt;p&gt;Python will give you results if you write scripts that Python understands, if not it returns errors. Let's make a deliberate mistake and see what Python will return.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/invalid_syntax_error.png" alt="Invalid Syntax Error"&gt;&lt;/p&gt; 
&lt;p&gt;As you can see from the returned error, Python is so clever that it knows the mistake we made and which was &lt;em&gt;Syntax Error: invalid syntax&lt;/em&gt;. Using x as multiplication in Python is a syntax error because (x) is not a valid syntax in Python. Instead of (&lt;strong&gt;x&lt;/strong&gt;) we use asterisk (*) for multiplication. The returned error clearly shows what to fix.&lt;/p&gt; 
&lt;p&gt;The process of identifying and removing errors from a program is called &lt;em&gt;debugging&lt;/em&gt;. Let us debug it by putting * in place of &lt;strong&gt;x&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/fixing_syntax_error.png" alt="Fixing Syntax Error"&gt;&lt;/p&gt; 
&lt;p&gt;Our bug was fixed, the code ran and we got a result we were expecting. As a programmer you will see such kind of errors on daily basis. It is good to know how to debug. To be good at debugging you should understand what kind of errors you are facing. Some of the Python errors you may encounter are &lt;em&gt;SyntaxError&lt;/em&gt;, &lt;em&gt;IndexError&lt;/em&gt;, &lt;em&gt;NameError&lt;/em&gt;, &lt;em&gt;ModuleNotFoundError&lt;/em&gt;, &lt;em&gt;KeyError&lt;/em&gt;, &lt;em&gt;ImportError&lt;/em&gt;, &lt;em&gt;AttributeError&lt;/em&gt;, &lt;em&gt;TypeError&lt;/em&gt;, &lt;em&gt;ValueError&lt;/em&gt;, &lt;em&gt;ZeroDivisionError&lt;/em&gt; etc. We will see more about different Python &lt;strong&gt;&lt;em&gt;error types&lt;/em&gt;&lt;/strong&gt; in later sections.&lt;/p&gt; 
&lt;p&gt;Let us practice more how to use Python interactive shell. Go to your terminal or command prompt and write the word &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_python_shell.png" alt="Python Scripting Shell"&gt;&lt;/p&gt; 
&lt;p&gt;The Python interactive shell is opened. Let us do some basic mathematical operations (addition, subtraction, multiplication, division, modulus, exponential).&lt;/p&gt; 
&lt;p&gt;Let us do some maths first before we write any Python code:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2 + 3 is 5&lt;/li&gt; 
 &lt;li&gt;3 - 2 is 1&lt;/li&gt; 
 &lt;li&gt;3 * 2 is 6&lt;/li&gt; 
 &lt;li&gt;3 / 2 is 1.5&lt;/li&gt; 
 &lt;li&gt;3 ** 2 is the same as 3 * 3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In python we have the following additional operations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;3 % 2 = 1 =&amp;gt; which means finding the remainder&lt;/li&gt; 
 &lt;li&gt;3 // 2 = 1 =&amp;gt; which means removing the remainder&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Let us change the above mathematical expressions to Python code. The Python shell has been opened and let us write a comment at the very beginning of the shell.&lt;/p&gt; 
&lt;p&gt;A &lt;em&gt;comment&lt;/em&gt; is a part of the code which is not executed by python. So we can leave some text in our code to make our code more readable. Python does not run the comment part. A comment in python starts with hash(#) symbol. This is how you write a comment in python&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt; # comment starts with hash
 # this is a python comment, because it starts with a (#) symbol
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/maths_on_python_shell.png" alt="Maths on python shell"&gt;&lt;/p&gt; 
&lt;p&gt;Before we move on to the next section, let us practice more on the Python interactive shell. Close the opened shell by writing &lt;em&gt;exit()&lt;/em&gt; on the shell and open it again and let us practice how to write text on the Python shell.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/writing_string_on_shell.png" alt="Writing String on python shell"&gt;&lt;/p&gt; 
&lt;h3&gt;Installing Visual Studio Code&lt;/h3&gt; 
&lt;p&gt;The Python interactive shell is good to try and test small script codes but it will not be for a big project. In real work environment, developers use different code editors to write codes. In this 30 days of Python programming challenge we will use visual studio code. Visual studio code is a very popular open source text editor. I am a fan of vscode and I would recommend to &lt;a href="https://code.visualstudio.com/"&gt;download&lt;/a&gt; visual studio code, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/vscode.png" alt="Visual Studio Code"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you installed visual studio code, let us see how to use it. If you prefer a video, you can follow this Visual Studio Code for Python &lt;a href="https://www.youtube.com/watch?v=bn7Cx4z-vSo"&gt;Video tutorial&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;How to use visual studio code&lt;/h4&gt; 
&lt;p&gt;Open the visual studio code by double clicking the visual studio icon. When you open it you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/vscode_ui.png" alt="Visual studio Code"&gt;&lt;/p&gt; 
&lt;p&gt;Create a folder named 30DaysOfPython on your desktop. Then open it using visual studio code.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/how_to_open_project_on_vscode.png" alt="Opening Project on Visual studio"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_project.png" alt="Opening a project"&gt;&lt;/p&gt; 
&lt;p&gt;After opening it you will see shortcuts for creating files and folders inside of 30DaysOfPython project's directory. As you can see below, I have created the very first file, helloworld.py. You can do the same.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/helloworld.png" alt="Creating a python file"&gt;&lt;/p&gt; 
&lt;p&gt;After a long day of coding, you want to close your code editor, right? This is how you will close the opened project.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/closing_opened_project.png" alt="Closing project"&gt;&lt;/p&gt; 
&lt;p&gt;Congratulations, you have finished setting up the development environment. Let us start coding.&lt;/p&gt; 
&lt;h2&gt;Basic Python&lt;/h2&gt; 
&lt;h3&gt;Python Syntax&lt;/h3&gt; 
&lt;p&gt;A Python script can be written in Python interactive shell or in the code editor. A Python file has an extension .py.&lt;/p&gt; 
&lt;h3&gt;Python Indentation&lt;/h3&gt; 
&lt;p&gt;An indentation is a white space in a text. Indentation in many languages is used to increase code readability; however, Python uses indentation to create blocks of code. In other programming languages, curly brackets are used to create code blocks instead of indentation. One of the common bugs when writing Python code is incorrect indentation.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/indentation.png" alt="Indentation Error"&gt;&lt;/p&gt; 
&lt;h3&gt;Comments&lt;/h3&gt; 
&lt;p&gt;Comments play a crucial role in enhancing code readability and allowing developers to leave notes within their code. In Python, any text preceded by a hash (#) symbol is considered a comment and is not executed when the code runs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;    # This is the first comment
    # This is the second comment
    # Python is eating the world
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Triple quote can be used for multiline comment if it is not assigned to a variable&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;"""This is multiline comment
multiline comment takes multiple lines.
python is eating the world
"""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Data types&lt;/h3&gt; 
&lt;p&gt;In Python there are several types of data types. Let us get started with the most common ones. Different data types will be covered in detail in other sections. For the time being, let us just go through the different data types and get familiar with them. You do not have to have a clear understanding now.&lt;/p&gt; 
&lt;h4&gt;Number&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Integer: Integer(negative, zero and positive) numbers Example: ... -3, -2, -1, 0, 1, 2, 3 ...&lt;/li&gt; 
 &lt;li&gt;Float: Decimal number Example ... -3.5, -2.25, -1.0, 0.0, 1.1, 2.2, 3.5 ...&lt;/li&gt; 
 &lt;li&gt;Complex Example 1 + j, 2 + 4j&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;String&lt;/h4&gt; 
&lt;p&gt;A collection of one or more characters under a single or double quote. If a string is more than one sentence then we use a triple quote.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;'Asabeneh'
'Finland'
'Python'
'I love teaching'
'I hope you are enjoying the first day of 30DaysOfPython Challenge'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Booleans&lt;/h4&gt; 
&lt;p&gt;A boolean data type is either a True or False value. T and F should be always uppercase.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;    True  #  Is the light on? If it is on, then the value is True
    False # Is the light on? If it is off, then the value is False
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;List&lt;/h4&gt; 
&lt;p&gt;Python list is an ordered collection which allows to store different data type items. A list is similar to an array in JavaScript.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;[0, 1, 2, 3, 4, 5]  # all are the same data types - a list of numbers
['Banana', 'Orange', 'Mango', 'Avocado'] # all the same data types - a list of strings (fruits)
['Finland','Estonia', 'Sweden','Norway'] # all the same data types - a list of strings (countries)
['Banana', 10, False, 9.81] # different data types in the list - string, integer, boolean and float
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Dictionary&lt;/h4&gt; 
&lt;p&gt;A Python dictionary object is an unordered collection of data in a key value pair format.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;{
'first_name':'Asabeneh',
'last_name':'Yetayeh',
'country':'Finland', 
'age':250, 
'is_married':True,
'skills':['JS', 'React', 'Node', 'Python']
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Tuple&lt;/h4&gt; 
&lt;p&gt;A tuple is an ordered collection of different data types like list but tuples can not be modified once they are created. They are immutable.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;('Asabeneh', 'Pawel', 'Brook', 'Abraham', 'Lidiya') # Names
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;('Earth', 'Jupiter', 'Neptune', 'Mars', 'Venus', 'Saturn', 'Uranus', 'Mercury') # planets
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Set&lt;/h4&gt; 
&lt;p&gt;A set is a collection of data types similar to list and tuple. Unlike list and tuple, set is not an ordered collection of items. Like in Mathematics, set in Python stores only unique items.&lt;/p&gt; 
&lt;p&gt;In later sections, we will go in detail about each and every Python data type.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;{2, 4, 3, 5}
{3.14, 9.81, 2.7} # order is not important in set
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Checking Data types&lt;/h3&gt; 
&lt;p&gt;To check the data type of certain data/variable we use the &lt;strong&gt;type&lt;/strong&gt; function. In the following terminal you will see different python data types:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/checking_data_types.png" alt="Checking Data types"&gt;&lt;/p&gt; 
&lt;h3&gt;Python File&lt;/h3&gt; 
&lt;p&gt;First open your project folder, 30DaysOfPython. If you don't have this folder, create a folder name called 30DaysOfPython. Inside this folder, create a file called helloworld.py. Now, let's do what we did on python interactive shell using visual studio code.&lt;/p&gt; 
&lt;p&gt;The Python interactive shell was printing without using &lt;strong&gt;print&lt;/strong&gt; but on visual studio code to see our result we should use a built in function _print(). The &lt;em&gt;print()&lt;/em&gt; built-in function takes one or more arguments as follows &lt;em&gt;print('arument1', 'argument2', 'argument3')&lt;/em&gt;. See the examples below.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The file name is helloworld.py&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;# Day 1 - 30DaysOfPython Challenge

print(2 + 3)             # addition(+)
print(3 - 1)             # subtraction(-)
print(2 * 3)             # multiplication(*)
print(3 / 2)             # division(/)
print(3 ** 2)            # exponential(**)
print(3 % 2)             # modulus(%)
print(3 // 2)            # Floor division operator(//)

# Checking data types
print(type(10))          # Int
print(type(3.14))        # Float
print(type(1 + 3j))      # Complex number
print(type('Asabeneh'))  # String
print(type([1, 2, 3]))   # List
print(type({'name':'Asabeneh'})) # Dictionary
print(type({9.8, 3.14, 2.7}))    # Set
print(type((9.8, 3.14, 2.7)))    # Tuple
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run the python file check the image below. You can run the python file either by running the green button on Visual Studio Code or by typing &lt;em&gt;python helloworld.py&lt;/em&gt; in the terminal .&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/running_python_script.png" alt="Running python script"&gt;&lt;/p&gt; 
&lt;p&gt;ğŸŒ• You are amazing. You have just completed day 1 challenge and you are on your way to greatness. Now do some exercises for your brain and muscles.&lt;/p&gt; 
&lt;h2&gt;ğŸ’» Exercises - Day 1&lt;/h2&gt; 
&lt;h3&gt;Exercise: Level 1&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check the python version you are using&lt;/li&gt; 
 &lt;li&gt;Open the python interactive shell and do the following operations. The operands are 3 and 4. 
  &lt;ul&gt; 
   &lt;li&gt;addition(+)&lt;/li&gt; 
   &lt;li&gt;subtraction(-)&lt;/li&gt; 
   &lt;li&gt;multiplication(*)&lt;/li&gt; 
   &lt;li&gt;modulus(%)&lt;/li&gt; 
   &lt;li&gt;division(/)&lt;/li&gt; 
   &lt;li&gt;exponential(**)&lt;/li&gt; 
   &lt;li&gt;floor division operator(//)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Write strings on the python interactive shell. The strings are the following: 
  &lt;ul&gt; 
   &lt;li&gt;Your name&lt;/li&gt; 
   &lt;li&gt;Your family name&lt;/li&gt; 
   &lt;li&gt;Your country&lt;/li&gt; 
   &lt;li&gt;I am enjoying 30 days of python&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Check the data types of the following data: 
  &lt;ul&gt; 
   &lt;li&gt;10&lt;/li&gt; 
   &lt;li&gt;9.8&lt;/li&gt; 
   &lt;li&gt;3.14&lt;/li&gt; 
   &lt;li&gt;4 - 4j&lt;/li&gt; 
   &lt;li&gt;['Asabeneh', 'Python', 'Finland']&lt;/li&gt; 
   &lt;li&gt;Your name&lt;/li&gt; 
   &lt;li&gt;Your family name&lt;/li&gt; 
   &lt;li&gt;Your country&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Exercise: Level 2&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a folder named day_1 inside 30DaysOfPython folder. Inside day_1 folder, create a python file helloworld.py and repeat questions 1, 2, 3 and 4. Remember to use &lt;em&gt;print()&lt;/em&gt; when you are working on a python file. Navigate to the directory where you have saved your file, and run it.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Exercise: Level 3&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Write an example for different Python data types such as Number(Integer, Float, Complex), String, Boolean, List, Tuple, Set and Dictionary.&lt;/li&gt; 
 &lt;li&gt;Find an &lt;a href="https://en.wikipedia.org/wiki/Euclidean_distance#:~:text=In%20mathematics%2C%20the%20Euclidean%20distance,being%20called%20the%20Pythagorean%20distance."&gt;Euclidian distance&lt;/a&gt; between (2, 3) and (10, 8)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;ğŸ�‰ CONGRATULATIONS ! ğŸ�‰&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md"&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>soimort/you-get</title>
      <link>https://github.com/soimort/you-get</link>
      <description>&lt;p&gt;â�¬ Dumb downloader that scrapes the web&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;You-Get&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/soimort/you-get/actions"&gt;&lt;img src="https://github.com/soimort/you-get/workflows/develop/badge.svg?sanitize=true" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://pypi.python.org/pypi/you-get/"&gt;&lt;img src="https://img.shields.io/pypi/v/you-get.svg?sanitize=true" alt="PyPI version"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/soimort/you-get?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/Join%20Chat.svg?sanitize=true" alt="Gitter"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTICE (30 May 2022): Support for Python 3.5, 3.6 and 3.7 will eventually be dropped. (&lt;a href="https://github.com/soimort/you-get/wiki/TLS-1.3-post-handshake-authentication-(PHA)"&gt;see details here&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTICE (8 Mar 2019): Read &lt;a href="https://github.com/soimort/you-get/raw/develop/CONTRIBUTING.md"&gt;this&lt;/a&gt; if you are looking for the conventional "Issues" tab.&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href="https://you-get.org/"&gt;You-Get&lt;/a&gt; is a tiny command-line utility to download media contents (videos, audios, images) from the Web, in case there is no other handy way to do it.&lt;/p&gt; 
&lt;p&gt;Here's how you use &lt;code&gt;you-get&lt;/code&gt; to download a video from &lt;a href="https://www.youtube.com/watch?v=jNQXAC9IVRw"&gt;YouTube&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ you-get 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
site:                YouTube
title:               Me at the zoo
stream:
    - itag:          43
      container:     webm
      quality:       medium
      size:          0.5 MiB (564215 bytes)
    # download-with: you-get --itag=43 [URL]

Downloading Me at the zoo.webm ...
 100% (  0.5/  0.5MB) â”œâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”¤[1/1]    6 MB/s

Saving Me at the zoo.en.srt ... Done.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And here's why you might want to use it:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You enjoyed something on the Internet, and just want to download them for your own pleasure.&lt;/li&gt; 
 &lt;li&gt;You watch your favorite videos online from your computer, but you are prohibited from saving them. You feel that you have no control over your own computer. (And it's not how an open Web is supposed to work.)&lt;/li&gt; 
 &lt;li&gt;You want to get rid of any closed-source technology or proprietary JavaScript code, and disallow things like Flash running on your computer.&lt;/li&gt; 
 &lt;li&gt;You are an adherent of hacker culture and free software.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;What &lt;code&gt;you-get&lt;/code&gt; can do for you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download videos / audios from popular websites such as YouTube, Youku, Niconico, and a bunch more. (See the &lt;a href="https://raw.githubusercontent.com/soimort/you-get/develop/#supported-sites"&gt;full list of supported sites&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Stream an online video in your media player. No web browser, no more ads.&lt;/li&gt; 
 &lt;li&gt;Download images (of interest) by scraping a web page.&lt;/li&gt; 
 &lt;li&gt;Download arbitrary non-HTML contents, i.e., binary files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Interested? &lt;a href="https://raw.githubusercontent.com/soimort/you-get/develop/#installation"&gt;Install it&lt;/a&gt; now and &lt;a href="https://raw.githubusercontent.com/soimort/you-get/develop/#getting-started"&gt;get started by examples&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Are you a Python programmer? Then check out &lt;a href="https://github.com/soimort/you-get"&gt;the source&lt;/a&gt; and fork it!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://i.imgur.com/GfthFAz.png" alt=""&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;The following dependencies are recommended:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt;&lt;/strong&gt; 3.7.4 or above&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://www.ffmpeg.org/"&gt;FFmpeg&lt;/a&gt;&lt;/strong&gt; 1.0 or above&lt;/li&gt; 
 &lt;li&gt;(Optional) &lt;a href="https://rtmpdump.mplayerhq.hu/"&gt;RTMPDump&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Option 1: Install via pip&lt;/h3&gt; 
&lt;p&gt;The official release of &lt;code&gt;you-get&lt;/code&gt; is distributed on &lt;a href="https://pypi.python.org/pypi/you-get"&gt;PyPI&lt;/a&gt;, and can be installed easily from a PyPI mirror via the &lt;a href="https://en.wikipedia.org/wiki/Pip_(package_manager)"&gt;pip&lt;/a&gt; package manager: (Note that you must use the Python 3 version of &lt;code&gt;pip&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pip install you-get
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 2: Install via &lt;a href="https://github.com/zsh-users/antigen"&gt;Antigen&lt;/a&gt; (for Zsh users)&lt;/h3&gt; 
&lt;p&gt;Add the following line to your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;antigen bundle soimort/you-get
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 3: Download from GitHub&lt;/h3&gt; 
&lt;p&gt;You may either download the &lt;a href="https://github.com/soimort/you-get/archive/master.zip"&gt;stable&lt;/a&gt; (identical with the latest release on PyPI) or the &lt;a href="https://github.com/soimort/you-get/archive/develop.zip"&gt;develop&lt;/a&gt; (more hotfixes, unstable features) branch of &lt;code&gt;you-get&lt;/code&gt;. Unzip it, and put the directory containing the &lt;code&gt;you-get&lt;/code&gt; script into your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, run&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cd path/to/you-get
$ [sudo] python -m pip install .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cd path/to/you-get
$ python -m pip install . --user
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to install &lt;code&gt;you-get&lt;/code&gt; to a permanent path. (And don't omit the dot &lt;code&gt;.&lt;/code&gt; representing the current directory)&lt;/p&gt; 
&lt;p&gt;You can also use the &lt;a href="https://pipenv.pypa.io/en/latest"&gt;pipenv&lt;/a&gt; to install the &lt;code&gt;you-get&lt;/code&gt; in the Python virtual environment.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pipenv install -e .
$ pipenv run you-get --version
you-get: version 0.4.1555, a tiny downloader that scrapes the web.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 4: Git clone&lt;/h3&gt; 
&lt;p&gt;This is the recommended way for all developers, even if you don't often code in Python.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/soimort/you-get.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then put the cloned directory into your &lt;code&gt;PATH&lt;/code&gt;, or run &lt;code&gt;python -m pip install path/to/you-get&lt;/code&gt; to install &lt;code&gt;you-get&lt;/code&gt; to a permanent path.&lt;/p&gt; 
&lt;h3&gt;Option 5: Homebrew (Mac only)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;you-get&lt;/code&gt; easily via:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ brew install you-get
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 6: pkg (FreeBSD only)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;you-get&lt;/code&gt; easily via:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# pkg install you-get
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 7: Flox (Mac, Linux, and Windows WSL)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;you-get&lt;/code&gt; easily via:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ flox install you-get
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shell completion&lt;/h3&gt; 
&lt;p&gt;Completion definitions for Bash, Fish and Zsh can be found in &lt;a href="https://github.com/soimort/you-get/tree/develop/contrib/completion"&gt;&lt;code&gt;contrib/completion&lt;/code&gt;&lt;/a&gt;. Please consult your shell's manual for how to take advantage of them.&lt;/p&gt; 
&lt;h2&gt;Upgrading&lt;/h2&gt; 
&lt;p&gt;Based on which option you chose to install &lt;code&gt;you-get&lt;/code&gt;, you may upgrade it via:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pip install --upgrade you-get
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or download the latest release via:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get https://github.com/soimort/you-get/archive/master.zip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to get the latest &lt;code&gt;develop&lt;/code&gt; branch without messing up the PIP, you can try:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pip install --upgrade --force-reinstall git+https://github.com/soimort/you-get@develop
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Download a video&lt;/h3&gt; 
&lt;p&gt;When you get a video of interest, you might want to use the &lt;code&gt;--info&lt;/code&gt;/&lt;code&gt;-i&lt;/code&gt; option to see all available quality and formats:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get -i 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
site:                YouTube
title:               Me at the zoo
streams:             # Available quality and codecs
    [ DASH ] ____________________________________
    - itag:          242
      container:     webm
      quality:       320x240
      size:          0.6 MiB (618358 bytes)
    # download-with: you-get --itag=242 [URL]

    - itag:          395
      container:     mp4
      quality:       320x240
      size:          0.5 MiB (550743 bytes)
    # download-with: you-get --itag=395 [URL]

    - itag:          133
      container:     mp4
      quality:       320x240
      size:          0.5 MiB (498558 bytes)
    # download-with: you-get --itag=133 [URL]

    - itag:          278
      container:     webm
      quality:       192x144
      size:          0.4 MiB (392857 bytes)
    # download-with: you-get --itag=278 [URL]

    - itag:          160
      container:     mp4
      quality:       192x144
      size:          0.4 MiB (370882 bytes)
    # download-with: you-get --itag=160 [URL]

    - itag:          394
      container:     mp4
      quality:       192x144
      size:          0.4 MiB (367261 bytes)
    # download-with: you-get --itag=394 [URL]

    [ DEFAULT ] _________________________________
    - itag:          43
      container:     webm
      quality:       medium
      size:          0.5 MiB (568748 bytes)
    # download-with: you-get --itag=43 [URL]

    - itag:          18
      container:     mp4
      quality:       small
    # download-with: you-get --itag=18 [URL]

    - itag:          36
      container:     3gp
      quality:       small
    # download-with: you-get --itag=36 [URL]

    - itag:          17
      container:     3gp
      quality:       small
    # download-with: you-get --itag=17 [URL]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, the one on the top is the one you will get. If that looks cool to you, download it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
site:                YouTube
title:               Me at the zoo
stream:
    - itag:          242
      container:     webm
      quality:       320x240
      size:          0.6 MiB (618358 bytes)
    # download-with: you-get --itag=242 [URL]

Downloading Me at the zoo.webm ...
 100% (  0.6/  0.6MB) â”œâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”¤[2/2]    2 MB/s
Merging video parts... Merged into Me at the zoo.webm

Saving Me at the zoo.en.srt ... Done.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(If a YouTube video has any closed captions, they will be downloaded together with the video file, in SubRip subtitle format.)&lt;/p&gt; 
&lt;p&gt;Or, if you prefer another format (mp4), just use whatever the option &lt;code&gt;you-get&lt;/code&gt; shows to you:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get --itag=18 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;At this point, format selection has not been generally implemented for most of our supported sites; in that case, the default format to download is the one with the highest quality.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ffmpeg&lt;/code&gt; is a required dependency, for downloading and joining videos streamed in multiple parts (e.g. on some sites like Youku), and for YouTube videos of 1080p or high resolution.&lt;/li&gt; 
 &lt;li&gt;If you don't want &lt;code&gt;you-get&lt;/code&gt; to join video parts after downloading them, use the &lt;code&gt;--no-merge&lt;/code&gt;/&lt;code&gt;-n&lt;/code&gt; option.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Download anything else&lt;/h3&gt; 
&lt;p&gt;If you already have the URL of the exact resource you want, you can download it directly with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get https://stallman.org/rms.jpg
Site:       stallman.org
Title:      rms
Type:       JPEG Image (image/jpeg)
Size:       0.06 MiB (66482 Bytes)

Downloading rms.jpg ...
 100% (  0.1/  0.1MB) â”œâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”¤[1/1]  127 kB/s
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Otherwise, &lt;code&gt;you-get&lt;/code&gt; will scrape the web page and try to figure out if there's anything interesting to you:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get https://kopasas.tumblr.com/post/69361932517
Site:       Tumblr.com
Title:      [tumblr] tumblr_mxhg13jx4n1sftq6do1_640
Type:       Portable Network Graphics (image/png)
Size:       0.11 MiB (118484 Bytes)

Downloading [tumblr] tumblr_mxhg13jx4n1sftq6do1_640.png ...
 100% (  0.1/  0.1MB) â”œâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ”¤[1/1]   22 MB/s
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;This feature is an experimental one and far from perfect. It works best on scraping large-sized images from popular websites like Tumblr and Blogger, but there is really no universal pattern that can apply to any site on the Internet.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Search on Google Videos and download&lt;/h3&gt; 
&lt;p&gt;You can pass literally anything to &lt;code&gt;you-get&lt;/code&gt;. If it isn't a valid URL, &lt;code&gt;you-get&lt;/code&gt; will do a Google search and download the most relevant video for you. (It might not be exactly the thing you wish to see, but still very likely.)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get "Richard Stallman eats"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pause and resume a download&lt;/h3&gt; 
&lt;p&gt;You may use &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; to interrupt a download.&lt;/p&gt; 
&lt;p&gt;A temporary &lt;code&gt;.download&lt;/code&gt; file is kept in the output directory. Next time you run &lt;code&gt;you-get&lt;/code&gt; with the same arguments, the download progress will resume from the last session. In case the file is completely downloaded (the temporary &lt;code&gt;.download&lt;/code&gt; extension is gone), &lt;code&gt;you-get&lt;/code&gt; will just skip the download.&lt;/p&gt; 
&lt;p&gt;To enforce re-downloading, use the &lt;code&gt;--force&lt;/code&gt;/&lt;code&gt;-f&lt;/code&gt; option. (&lt;strong&gt;Warning:&lt;/strong&gt; doing so will overwrite any existing file or temporary file with the same name!)&lt;/p&gt; 
&lt;h3&gt;Set the path and name of downloaded file&lt;/h3&gt; 
&lt;p&gt;Use the &lt;code&gt;--output-dir&lt;/code&gt;/&lt;code&gt;-o&lt;/code&gt; option to set the path, and &lt;code&gt;--output-filename&lt;/code&gt;/&lt;code&gt;-O&lt;/code&gt; to set the name of the downloaded file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get -o ~/Videos -O zoo.webm 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;These options are helpful if you encounter problems with the default video titles, which may contain special characters that do not play well with your current shell / operating system / filesystem.&lt;/li&gt; 
 &lt;li&gt;These options are also helpful if you write a script to batch download files and put them into designated folders with designated names.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Proxy settings&lt;/h3&gt; 
&lt;p&gt;You may specify an HTTP proxy for &lt;code&gt;you-get&lt;/code&gt; to use, via the &lt;code&gt;--http-proxy&lt;/code&gt;/&lt;code&gt;-x&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get -x 127.0.0.1:8087 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, the system proxy setting (i.e. the environment variable &lt;code&gt;http_proxy&lt;/code&gt;) is applied by default. To disable any proxy, use the &lt;code&gt;--no-proxy&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you need to use proxies a lot (in case your network is blocking certain sites), you might want to use &lt;code&gt;you-get&lt;/code&gt; with &lt;a href="https://github.com/rofl0r/proxychains-ng"&gt;proxychains&lt;/a&gt; and set &lt;code&gt;alias you-get="proxychains -q you-get"&lt;/code&gt; (in Bash).&lt;/li&gt; 
 &lt;li&gt;For some websites (e.g. Youku), if you need access to some videos that are only available in mainland China, there is an option of using a specific proxy to extract video information from the site: &lt;code&gt;--extractor-proxy&lt;/code&gt;/&lt;code&gt;-y&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Watch a video&lt;/h3&gt; 
&lt;p&gt;Use the &lt;code&gt;--player&lt;/code&gt;/&lt;code&gt;-p&lt;/code&gt; option to feed the video into your media player of choice, e.g. &lt;code&gt;mpv&lt;/code&gt; or &lt;code&gt;vlc&lt;/code&gt;, instead of downloading it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get -p vlc 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you prefer to watch the video in a browser, just without ads or comment section:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ you-get -p chromium 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is possible to use the &lt;code&gt;-p&lt;/code&gt; option to start another download manager, e.g., &lt;code&gt;you-get -p uget-gtk 'https://www.youtube.com/watch?v=jNQXAC9IVRw'&lt;/code&gt;, though they may not play together very well.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Load cookies&lt;/h3&gt; 
&lt;p&gt;Not all videos are publicly available to anyone. If you need to log in your account to access something (e.g., a private video), it would be unavoidable to feed the browser cookies to &lt;code&gt;you-get&lt;/code&gt; via the &lt;code&gt;--cookies&lt;/code&gt;/&lt;code&gt;-c&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;As of now, we are supporting two formats of browser cookies: Mozilla &lt;code&gt;cookies.sqlite&lt;/code&gt; and Netscape &lt;code&gt;cookies.txt&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Reuse extracted data&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;--url&lt;/code&gt;/&lt;code&gt;-u&lt;/code&gt; to get a list of downloadable resource URLs extracted from the page. Use &lt;code&gt;--json&lt;/code&gt; to get an abstract of extracted data in the JSON format.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For the time being, this feature has &lt;strong&gt;NOT&lt;/strong&gt; been stabilized and the JSON schema may have breaking changes in the future.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Sites&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Site&lt;/th&gt; 
   &lt;th align="left"&gt;URL&lt;/th&gt; 
   &lt;th align="center"&gt;Videos?&lt;/th&gt; 
   &lt;th align="center"&gt;Images?&lt;/th&gt; 
   &lt;th align="center"&gt;Audios?&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.youtube.com/"&gt;https://www.youtube.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;X (Twitter)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://x.com/"&gt;https://x.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;VK&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://vk.com/"&gt;https://vk.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Vimeo&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://vimeo.com/"&gt;https://vimeo.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Veoh&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.veoh.com/"&gt;https://www.veoh.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;Tumblr&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.tumblr.com/"&gt;https://www.tumblr.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;TED&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.ted.com/"&gt;https://www.ted.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;SoundCloud&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://soundcloud.com/"&gt;https://soundcloud.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;SHOWROOM&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.showroom-live.com/"&gt;https://www.showroom-live.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Pinterest&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.pinterest.com/"&gt;https://www.pinterest.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;MTV81&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.mtv81.com/"&gt;https://www.mtv81.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Mixcloud&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.mixcloud.com/"&gt;https://www.mixcloud.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Metacafe&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.metacafe.com/"&gt;https://www.metacafe.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Magisto&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.magisto.com/"&gt;https://www.magisto.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Khan Academy&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.khanacademy.org/"&gt;https://www.khanacademy.org/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Internet Archive&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://archive.org/"&gt;https://archive.org/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;Instagram&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://instagram.com/"&gt;https://instagram.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;InfoQ&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.infoq.com/presentations/"&gt;https://www.infoq.com/presentations/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Imgur&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://imgur.com/"&gt;https://imgur.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Heavy Music Archive&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.heavy-music.ru/"&gt;https://www.heavy-music.ru/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Freesound&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.freesound.org/"&gt;https://www.freesound.org/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Flickr&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.flickr.com/"&gt;https://www.flickr.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;FC2 Video&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://video.fc2.com/"&gt;https://video.fc2.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Facebook&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.facebook.com/"&gt;https://www.facebook.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;eHow&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.ehow.com/"&gt;https://www.ehow.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Dailymotion&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.dailymotion.com/"&gt;https://www.dailymotion.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Coub&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://coub.com/"&gt;https://coub.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;CBS&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.cbs.com/"&gt;https://www.cbs.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Bandcamp&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://bandcamp.com/"&gt;https://bandcamp.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;AliveThai&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://alive.in.th/"&gt;https://alive.in.th/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;interest.me&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://ch.interest.me/tvn"&gt;https://ch.interest.me/tvn&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;755&lt;br&gt;ãƒŠãƒŠã‚´ãƒ¼ã‚´ãƒ¼&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://7gogo.jp/"&gt;https://7gogo.jp/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;niconico&lt;br&gt;ãƒ‹ã‚³ãƒ‹ã‚³å‹•ç”»&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.nicovideo.jp/"&gt;https://www.nicovideo.jp/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;163&lt;br&gt;ç½‘æ˜“è§†é¢‘&lt;br&gt;ç½‘æ˜“äº‘éŸ³ä¹�&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://v.163.com/"&gt;https://v.163.com/&lt;/a&gt;&lt;br&gt;&lt;a href="https://music.163.com/"&gt;https://music.163.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;56ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.56.com/"&gt;https://www.56.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;AcFun&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.acfun.cn/"&gt;https://www.acfun.cn/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;Baidu&lt;br&gt;ç™¾åº¦è´´å�§&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://tieba.baidu.com/"&gt;https://tieba.baidu.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;çˆ†ç±³èŠ±ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.baomihua.com/"&gt;https://www.baomihua.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;bilibili&lt;br&gt;å“”å“©å“”å“©&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.bilibili.com/"&gt;https://www.bilibili.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;è±†ç“£&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.douban.com/"&gt;https://www.douban.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;æ–—é±¼&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.douyutv.com/"&gt;https://www.douyutv.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;å‡¤å‡°è§†é¢‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://v.ifeng.com/"&gt;https://v.ifeng.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;é£�è¡Œç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.fun.tv/"&gt;https://www.fun.tv/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;iQIYI&lt;br&gt;çˆ±å¥‡è‰º&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.iqiyi.com/"&gt;https://www.iqiyi.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;æ¿€åŠ¨ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.joy.cn/"&gt;https://www.joy.cn/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;é…·6ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.ku6.com/"&gt;https://www.ku6.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;é…·ç‹—éŸ³ä¹�&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.kugou.com/"&gt;https://www.kugou.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;é…·æˆ‘éŸ³ä¹�&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.kuwo.cn/"&gt;https://www.kuwo.cn/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;ä¹�è§†ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.le.com/"&gt;https://www.le.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;è�”æ��FM&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.lizhi.fm/"&gt;https://www.lizhi.fm/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;æ‡’äººå�¬ä¹¦&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.lrts.me/"&gt;https://www.lrts.me/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;ç§’æ‹�&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.miaopai.com/"&gt;https://www.miaopai.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;MioMioå¼¹å¹•ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.miomio.tv/"&gt;https://www.miomio.tv/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;MissEvan&lt;br&gt;çŒ«è€³FM&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.missevan.com/"&gt;https://www.missevan.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;ç—�å®¢é‚¦&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.pixnet.net/"&gt;https://www.pixnet.net/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;PPTVè�šåŠ›&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.pptv.com/"&gt;https://www.pptv.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;é½�é²�ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://v.iqilu.com/"&gt;https://v.iqilu.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;QQ&lt;br&gt;è…¾è®¯è§†é¢‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://v.qq.com/"&gt;https://v.qq.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;ä¼�é¹…ç›´æ’­&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://live.qq.com/"&gt;https://live.qq.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Sina&lt;br&gt;æ–°æµªè§†é¢‘&lt;br&gt;å¾®å�šç§’æ‹�è§†é¢‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://video.sina.com.cn/"&gt;https://video.sina.com.cn/&lt;/a&gt;&lt;br&gt;&lt;a href="https://video.weibo.com/"&gt;https://video.weibo.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Sohu&lt;br&gt;æ�œç‹�è§†é¢‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://tv.sohu.com/"&gt;https://tv.sohu.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;Tudou&lt;br&gt;åœŸè±†&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.tudou.com/"&gt;https://www.tudou.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;é˜³å…‰å�«è§†&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.isuntv.com/"&gt;https://www.isuntv.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;Youku&lt;br&gt;ä¼˜é…·&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.youku.com/"&gt;https://www.youku.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;æˆ˜æ——TV&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.zhanqi.tv/lives"&gt;https://www.zhanqi.tv/lives&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;å¤®è§†ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.cntv.cn/"&gt;https://www.cntv.cn/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Naver&lt;br&gt;ë„¤ì�´ë²„&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://tvcast.naver.com/"&gt;https://tvcast.naver.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;èŠ’æ�œTV&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.mgtv.com/"&gt;https://www.mgtv.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;ç�«çŒ«TV&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.huomao.com/"&gt;https://www.huomao.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;é˜³å…‰å®½é¢‘ç½‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.365yg.com/"&gt;https://www.365yg.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;è¥¿ç“œè§†é¢‘&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.ixigua.com/"&gt;https://www.ixigua.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;æ–°ç‰‡åœº&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.xinpianchang.com/"&gt;https://www.xinpianchang.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;å¿«æ‰‹&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.kuaishou.com/"&gt;https://www.kuaishou.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;æŠ–éŸ³&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.douyin.com/"&gt;https://www.douyin.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;TikTok&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.tiktok.com/"&gt;https://www.tiktok.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;ä¸­å›½ä½“è‚²(TV)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://v.zhibo.tv/"&gt;https://v.zhibo.tv/&lt;/a&gt; &lt;br&gt;&lt;a href="https://video.zhibo.tv/"&gt;https://video.zhibo.tv/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;çŸ¥ä¹�&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.zhihu.com/"&gt;https://www.zhihu.com/&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;âœ“&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For all other sites not on the list, the universal extractor will take care of finding and downloading interesting resources from the page.&lt;/p&gt; 
&lt;h3&gt;Known bugs&lt;/h3&gt; 
&lt;p&gt;If something is broken and &lt;code&gt;you-get&lt;/code&gt; can't get you things you want, don't panic. (Yes, this happens all the time!)&lt;/p&gt; 
&lt;p&gt;Check if it's already a known problem on &lt;a href="https://github.com/soimort/you-get/wiki/Known-Bugs"&gt;https://github.com/soimort/you-get/wiki/Known-Bugs&lt;/a&gt;. If not, follow the guidelines on &lt;a href="https://github.com/soimort/you-get/raw/develop/CONTRIBUTING.md"&gt;how to report an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Involved&lt;/h2&gt; 
&lt;p&gt;You can reach us on the Gitter channel &lt;a href="https://gitter.im/soimort/you-get"&gt;#soimort/you-get&lt;/a&gt; (here's how you &lt;a href="https://irc.gitter.im"&gt;set up your IRC client&lt;/a&gt; for Gitter). If you have a quick question regarding &lt;code&gt;you-get&lt;/code&gt;, ask it there.&lt;/p&gt; 
&lt;p&gt;If you are seeking to report an issue or contribute, please make sure to read &lt;a href="https://github.com/soimort/you-get/raw/develop/CONTRIBUTING.md"&gt;the guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;h2&gt;Legal Issues&lt;/h2&gt; 
&lt;p&gt;This software is distributed under the &lt;a href="https://raw.github.com/soimort/you-get/master/LICENSE.txt"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In particular, please be aware that&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Translated to human words:&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;In case your use of the software forms the basis of copyright infringement, or you use the software for any other illegal purposes, the authors cannot take any responsibility for you.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;We only ship the code here, and how you are going to use it is left to your own discretion.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;p&gt;Made by &lt;a href="https://github.com/soimort"&gt;@soimort&lt;/a&gt;, who is in turn powered by &lt;span&gt;â˜•&lt;/span&gt;, &lt;span&gt;ğŸ�º&lt;/span&gt; and &lt;span&gt;ğŸ�œ&lt;/span&gt;.&lt;/p&gt; 
&lt;p&gt;You can find the &lt;a href="https://github.com/soimort/you-get/graphs/contributors"&gt;list of all contributors&lt;/a&gt; here.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>