<rss version="2.0">
  <channel>
    <title>GitHub All Languages Weekly Trending</title>
    <description>Weekly Trending of All Languages in GitHub</description>
    <pubDate>Wed, 23 Jul 2025 01:37:36 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>langchain-ai/open_deep_research</title>
      <link>https://github.com/langchain-ai/open_deep_research</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open Deep Research&lt;/h1&gt; 
&lt;img width="1388" height="298" alt="full_diagram" src="https://github.com/user-attachments/assets/12a2371b-8be2-4219-9b48-90503eb43c69"&gt; 
&lt;p&gt;Deep research has broken out as one of the most popular agent applications. This is a simple, configurable, fully open source deep research agent that works across many model providers, search tools, and MCP servers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read more in our &lt;a href="https://blog.langchain.com/open-deep-research/"&gt;blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See our &lt;a href="https://www.youtube.com/watch?v=agGiWUpxkhg"&gt;video&lt;/a&gt; for a quick overview&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üöÄ Quickstart&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository and activate a virtual environment:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/langchain-ai/open_deep_research.git
cd open_deep_research
uv venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Install dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv pip install -r pyproject.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Set up your &lt;code&gt;.env&lt;/code&gt; file to customize the environment variables (for model selection, search tools, and other configuration settings):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp .env.example .env
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Launch the assistant with the LangGraph server locally to open LangGraph Studio in your browser:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install dependencies and start the LangGraph server
uvx --refresh --from "langgraph-cli[inmem]" --with-editable . --python 3.11 langgraph dev --allow-blocking
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use this to open the Studio UI:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- üöÄ API: http://127.0.0.1:2024
- üé® Studio UI: https://smith.langchain.com/studio/?baseUrl=http://127.0.0.1:2024
- üìö API Docs: http://127.0.0.1:2024/docs
&lt;/code&gt;&lt;/pre&gt; 
&lt;img width="817" height="666" alt="Screenshot 2025-07-13 at 11 21 12‚ÄØPM" src="https://github.com/user-attachments/assets/052f2ed3-c664-4a4f-8ec2-074349dcaa3f"&gt; 
&lt;p&gt;Ask a question in the &lt;code&gt;messages&lt;/code&gt; input field and click &lt;code&gt;Submit&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Configurations&lt;/h3&gt; 
&lt;p&gt;Open Deep Research offers extensive configuration options to customize the research process and model behavior. All configurations can be set via the web UI, environment variables, or by modifying the configuration directly.&lt;/p&gt; 
&lt;h4&gt;General Settings&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Max Structured Output Retries&lt;/strong&gt; (default: 3): Maximum number of retries for structured output calls from models when parsing fails&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Allow Clarification&lt;/strong&gt; (default: true): Whether to allow the researcher to ask clarifying questions before starting research&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Max Concurrent Research Units&lt;/strong&gt; (default: 5): Maximum number of research units to run concurrently using sub-agents. Higher values enable faster research but may hit rate limits&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Research Configuration&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Search API&lt;/strong&gt; (default: Tavily): Choose from Tavily (works with all models), OpenAI Native Web Search, Anthropic Native Web Search, or None&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Max Researcher Iterations&lt;/strong&gt; (default: 3): Number of times the Research Supervisor will reflect on research and ask follow-up questions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Max React Tool Calls&lt;/strong&gt; (default: 5): Maximum number of tool calling iterations in a single researcher step&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Models&lt;/h4&gt; 
&lt;p&gt;Open Deep Research uses multiple specialized models for different research tasks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Summarization Model&lt;/strong&gt; (default: &lt;code&gt;openai:gpt-4.1-nano&lt;/code&gt;): Summarizes research results from search APIs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Research Model&lt;/strong&gt; (default: &lt;code&gt;openai:gpt-4.1&lt;/code&gt;): Conducts research and analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Compression Model&lt;/strong&gt; (default: &lt;code&gt;openai:gpt-4.1-mini&lt;/code&gt;): Compresses research findings from sub-agents&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Final Report Model&lt;/strong&gt; (default: &lt;code&gt;openai:gpt-4.1&lt;/code&gt;): Writes the final comprehensive report&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All models are configured using &lt;a href="https://python.langchain.com/docs/how_to/chat_models_universal_init/"&gt;init_chat_model() API&lt;/a&gt; which supports providers like OpenAI, Anthropic, Google Vertex AI, and others.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important Model Requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Structured Outputs&lt;/strong&gt;: All models must support structured outputs. Check support &lt;a href="https://python.langchain.com/docs/integrations/chat/"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Search API Compatibility&lt;/strong&gt;: Research and Compression models must support your selected search API:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Anthropic search requires Anthropic models with web search capability&lt;/li&gt; 
   &lt;li&gt;OpenAI search requires OpenAI models with web search capability&lt;/li&gt; 
   &lt;li&gt;Tavily works with all models&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tool Calling&lt;/strong&gt;: All models must support tool calling functionality&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Special Configurations&lt;/strong&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For OpenRouter: Follow &lt;a href="https://github.com/langchain-ai/open_deep_research/issues/75#issuecomment-2811472408"&gt;this guide&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;For local models via Ollama: See &lt;a href="https://github.com/langchain-ai/open_deep_research/issues/65#issuecomment-2743586318"&gt;setup instructions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Example MCP (Model Context Protocol) Servers&lt;/h4&gt; 
&lt;p&gt;Open Deep Research supports MCP servers to extend research capabilities.&lt;/p&gt; 
&lt;h4&gt;Local MCP Servers&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Filesystem MCP Server&lt;/strong&gt; provides secure file system operations with robust access control:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read, write, and manage files and directories&lt;/li&gt; 
 &lt;li&gt;Perform operations like reading file contents, creating directories, moving files, and searching&lt;/li&gt; 
 &lt;li&gt;Restrict operations to predefined directories for security&lt;/li&gt; 
 &lt;li&gt;Support for both command-line configuration and dynamic MCP roots&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mcp-server-filesystem /path/to/allowed/dir1 /path/to/allowed/dir2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Remote MCP Servers&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Remote MCP servers&lt;/strong&gt; enable distributed agent coordination and support streamable HTTP requests. Unlike local servers, they can be multi-tenant and require more complex authentication.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Arcade MCP Server Example&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "url": "https://api.arcade.dev/v1/mcps/ms_0ujssxh0cECutqzMgbtXSGnjorm",
  "tools": ["Search_SearchHotels", "Search_SearchOneWayFlights", "Search_SearchRoundtripFlights"]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Remote servers can be configured as authenticated or unauthenticated and support JWT-based authentication through OAuth endpoints.&lt;/p&gt; 
&lt;h3&gt;Evaluation&lt;/h3&gt; 
&lt;p&gt;A comprehensive batch evaluation system designed for detailed analysis and comparative studies.&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-dimensional Scoring&lt;/strong&gt;: Specialized evaluators with 0-1 scale ratings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dataset-driven Evaluation&lt;/strong&gt;: Batch processing across multiple test cases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run comprehensive evaluation on LangSmith datasets
python tests/run_evaluate.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;Key Files:&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;tests/run_evaluate.py&lt;/code&gt;: Main evaluation script&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/evaluators.py&lt;/code&gt;: Specialized evaluator functions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tests/prompts.py&lt;/code&gt;: Evaluation prompts for each dimension&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Deployments and Usages&lt;/h3&gt; 
&lt;h4&gt;LangGraph Studio&lt;/h4&gt; 
&lt;p&gt;Follow the &lt;a href="https://raw.githubusercontent.com/langchain-ai/open_deep_research/main/#-quickstart"&gt;quickstart&lt;/a&gt; to start LangGraph server locally and test the agent out on LangGraph Studio.&lt;/p&gt; 
&lt;h4&gt;Hosted deployment&lt;/h4&gt; 
&lt;p&gt;You can easily deploy to &lt;a href="https://langchain-ai.github.io/langgraph/concepts/#deployment-options"&gt;LangGraph Platform&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Open Agent Platform&lt;/h4&gt; 
&lt;p&gt;Open Agent Platform (OAP) is a UI from which non-technical users can build and configure their own agents. OAP is great for allowing users to configure the Deep Researcher with different MCP tools and search APIs that are best suited to their needs and the problems that they want to solve.&lt;/p&gt; 
&lt;p&gt;We've deployed Open Deep Research to our public demo instance of OAP. All you need to do is add your API Keys, and you can test out the Deep Researcher for yourself! Try it out &lt;a href="https://oap.langchain.com"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can also deploy your own instance of OAP, and make your own custom agents (like Deep Researcher) available on it to your users.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://docs.oap.langchain.com/quickstart"&gt;Deploy Open Agent Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.oap.langchain.com/setup/agents"&gt;Add Deep Researcher to OAP&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Updates üî•&lt;/h3&gt; 
&lt;h3&gt;Legacy Implementations üèõÔ∏è&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;src/legacy/&lt;/code&gt; folder contains two earlier implementations that provide alternative approaches to automated research:&lt;/p&gt; 
&lt;h4&gt;1. Workflow Implementation (&lt;code&gt;legacy/graph.py&lt;/code&gt;)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Plan-and-Execute&lt;/strong&gt;: Structured workflow with human-in-the-loop planning&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sequential Processing&lt;/strong&gt;: Creates sections one by one with reflection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interactive Control&lt;/strong&gt;: Allows feedback and approval of report plans&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Quality Focused&lt;/strong&gt;: Emphasizes accuracy through iterative refinement&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;2. Multi-Agent Implementation (&lt;code&gt;legacy/multi_agent.py&lt;/code&gt;)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Supervisor-Researcher Architecture&lt;/strong&gt;: Coordinated multi-agent system&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parallel Processing&lt;/strong&gt;: Multiple researchers work simultaneously&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Speed Optimized&lt;/strong&gt;: Faster report generation through concurrency&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MCP Support&lt;/strong&gt;: Extensive Model Context Protocol integration&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;code&gt;src/legacy/legacy.md&lt;/code&gt; for detailed documentation, configuration options, and usage examples for both legacy implementations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>musistudio/claude-code-router</title>
      <link>https://github.com/musistudio/claude-code-router</link>
      <description>&lt;p&gt;Use Claude Code as the foundation for coding infrastructure, allowing you to decide how to interact with the model while enjoying updates from Anthropic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Router&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/musistudio/claude-code-router/main/README_zh.md"&gt;‰∏≠ÊñáÁâà&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A powerful tool to route Claude Code requests to different models and customize any request.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/claude-code.png" alt=""&gt;&lt;/p&gt; 
&lt;h2&gt;‚ú® Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Model Routing&lt;/strong&gt;: Route requests to different models based on your needs (e.g., background tasks, thinking, long context).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-Provider Support&lt;/strong&gt;: Supports various model providers like OpenRouter, DeepSeek, Ollama, Gemini, Volcengine, and SiliconFlow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Request/Response Transformation&lt;/strong&gt;: Customize requests and responses for different providers using transformers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Model Switching&lt;/strong&gt;: Switch models on-the-fly within Claude Code using the &lt;code&gt;/model&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Actions Integration&lt;/strong&gt;: Trigger Claude Code tasks in your GitHub workflows.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt;: Extend functionality with custom transformers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; 
&lt;h3&gt;1. Installation&lt;/h3&gt; 
&lt;p&gt;First, ensure you have &lt;a href="https://docs.anthropic.com/en/docs/claude-code/quickstart"&gt;Claude Code&lt;/a&gt; installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;npm install -g @anthropic-ai/claude-code
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, install Claude Code Router:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;npm install -g @musistudio/claude-code-router
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Configuration&lt;/h3&gt; 
&lt;p&gt;Create and configure your &lt;code&gt;~/.claude-code-router/config.json&lt;/code&gt; file. For more details, you can refer to &lt;code&gt;config.example.json&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;config.json&lt;/code&gt; file has several key sections:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;PROXY_URL&lt;/code&gt;&lt;/strong&gt; (optional): You can set a proxy for API requests, for example: &lt;code&gt;"PROXY_URL": "http://127.0.0.1:7890"&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;LOG&lt;/code&gt;&lt;/strong&gt; (optional): You can enable logging by setting it to &lt;code&gt;true&lt;/code&gt;. The log file will be located at &lt;code&gt;$HOME/.claude-code-router.log&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;APIKEY&lt;/code&gt;&lt;/strong&gt; (optional): You can set a secret key to authenticate requests. When set, clients must provide this key in the &lt;code&gt;Authorization&lt;/code&gt; header (e.g., &lt;code&gt;Bearer your-secret-key&lt;/code&gt;) or the &lt;code&gt;x-api-key&lt;/code&gt; header. Example: &lt;code&gt;"APIKEY": "your-secret-key"&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/strong&gt; (optional): You can set the host address for the server. If &lt;code&gt;APIKEY&lt;/code&gt; is not set, the host will be forced to &lt;code&gt;127.0.0.1&lt;/code&gt; for security reasons to prevent unauthorized access. Example: &lt;code&gt;"HOST": "0.0.0.0"&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Providers&lt;/code&gt;&lt;/strong&gt;: Used to configure different model providers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/strong&gt;: Used to set up routing rules. &lt;code&gt;default&lt;/code&gt; specifies the default model, which will be used for all requests if no other route is configured.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is a comprehensive example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "APIKEY": "your-secret-key",
  "PROXY_URL": "http://127.0.0.1:7890",
  "LOG": true,
  "Providers": [
    {
      "name": "openrouter",
      "api_base_url": "https://openrouter.ai/api/v1/chat/completions",
      "api_key": "sk-xxx",
      "models": [
        "google/gemini-2.5-pro-preview",
        "anthropic/claude-sonnet-4",
        "anthropic/claude-3.5-sonnet",
        "anthropic/claude-3.7-sonnet:thinking"
      ],
      "transformer": {
        "use": ["openrouter"]
      }
    },
    {
      "name": "deepseek",
      "api_base_url": "https://api.deepseek.com/chat/completions",
      "api_key": "sk-xxx",
      "models": ["deepseek-chat", "deepseek-reasoner"],
      "transformer": {
        "use": ["deepseek"],
        "deepseek-chat": {
          "use": ["tooluse"]
        }
      }
    },
    {
      "name": "ollama",
      "api_base_url": "http://localhost:11434/v1/chat/completions",
      "api_key": "ollama",
      "models": ["qwen2.5-coder:latest"]
    },
    {
      "name": "gemini",
      "api_base_url": "https://generativelanguage.googleapis.com/v1beta/models/",
      "api_key": "sk-xxx",
      "models": ["gemini-2.5-flash", "gemini-2.5-pro"],
      "transformer": {
        "use": ["gemini"]
      }
    },
    {
      "name": "volcengine",
      "api_base_url": "https://ark.cn-beijing.volces.com/api/v3/chat/completions",
      "api_key": "sk-xxx",
      "models": ["deepseek-v3-250324", "deepseek-r1-250528"],
      "transformer": {
        "use": ["deepseek"]
      }
    }
  ],
  "Router": {
    "default": "deepseek,deepseek-chat",
    "background": "ollama,qwen2.5-coder:latest",
    "think": "deepseek,deepseek-reasoner",
    "longContext": "openrouter,google/gemini-2.5-pro-preview",
    "webSearch": "gemini,gemini-2.5-flash"
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. Running Claude Code with the Router&lt;/h3&gt; 
&lt;p&gt;Start Claude Code using the router:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ccr code
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Providers&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;Providers&lt;/code&gt; array is where you define the different model providers you want to use. Each provider object requires:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: A unique name for the provider.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;api_base_url&lt;/code&gt;: The full API endpoint for chat completions.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;api_key&lt;/code&gt;: Your API key for the provider.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;models&lt;/code&gt;: A list of model names available from this provider.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;transformer&lt;/code&gt; (optional): Specifies transformers to process requests and responses.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Transformers&lt;/h4&gt; 
&lt;p&gt;Transformers allow you to modify the request and response payloads to ensure compatibility with different provider APIs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Global Transformer&lt;/strong&gt;: Apply a transformer to all models from a provider. In this example, the &lt;code&gt;openrouter&lt;/code&gt; transformer is applied to all models under the &lt;code&gt;openrouter&lt;/code&gt; provider.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt; {
   "name": "openrouter",
   "api_base_url": "https://openrouter.ai/api/v1/chat/completions",
   "api_key": "sk-xxx",
   "models": [
     "google/gemini-2.5-pro-preview",
     "anthropic/claude-sonnet-4",
     "anthropic/claude-3.5-sonnet"
   ],
   "transformer": { "use": ["openrouter"] }
 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Model-Specific Transformer&lt;/strong&gt;: Apply a transformer to a specific model. In this example, the &lt;code&gt;deepseek&lt;/code&gt; transformer is applied to all models, and an additional &lt;code&gt;tooluse&lt;/code&gt; transformer is applied only to the &lt;code&gt;deepseek-chat&lt;/code&gt; model.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt; {
   "name": "deepseek",
   "api_base_url": "https://api.deepseek.com/chat/completions",
   "api_key": "sk-xxx",
   "models": ["deepseek-chat", "deepseek-reasoner"],
   "transformer": {
     "use": ["deepseek"],
     "deepseek-chat": { "use": ["tooluse"] }
   }
 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Passing Options to a Transformer&lt;/strong&gt;: Some transformers, like &lt;code&gt;maxtoken&lt;/code&gt;, accept options. To pass options, use a nested array where the first element is the transformer name and the second is an options object.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "siliconflow",
  "api_base_url": "https://api.siliconflow.cn/v1/chat/completions",
  "api_key": "sk-xxx",
  "models": ["moonshotai/Kimi-K2-Instruct"],
  "transformer": {
    "use": [
      [
        "maxtoken",
        {
          "max_tokens": 16384
        }
      ]
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Available Built-in Transformers:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;deepseek&lt;/code&gt;: Adapts requests/responses for DeepSeek API.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;gemini&lt;/code&gt;: Adapts requests/responses for Gemini API.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;openrouter&lt;/code&gt;: Adapts requests/responses for OpenRouter API.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;groq&lt;/code&gt;: Adapts requests/responses for groq API.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;maxtoken&lt;/code&gt;: Sets a specific &lt;code&gt;max_tokens&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tooluse&lt;/code&gt;: Optimizes tool usage for certain models via &lt;code&gt;tool_choice&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;gemini-cli&lt;/code&gt; (experimental): Unofficial support for Gemini via Gemini CLI &lt;a href="https://gist.github.com/musistudio/1c13a65f35916a7ab690649d3df8d1cd"&gt;gemini-cli.js&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Custom Transformers:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can also create your own transformers and load them via the &lt;code&gt;transformers&lt;/code&gt; field in &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "transformers": [
      {
        "path": "$HOME/.claude-code-router/plugins/gemini-cli.js",
        "options": {
          "project": "xxx"
        }
      }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Router&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;Router&lt;/code&gt; object defines which model to use for different scenarios:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;default&lt;/code&gt;: The default model for general tasks.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;background&lt;/code&gt;: A model for background tasks. This can be a smaller, local model to save costs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;think&lt;/code&gt;: A model for reasoning-heavy tasks, like Plan Mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;longContext&lt;/code&gt;: A model for handling long contexts (e.g., &amp;gt; 60K tokens).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;webSearch&lt;/code&gt;: Used for handling web search tasks and this requires the model itself to support the feature. If you're using openrouter, you need to add the &lt;code&gt;:online&lt;/code&gt; suffix after the model name.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also switch models dynamically in Claude Code with the &lt;code&gt;/model&lt;/code&gt; command: &lt;code&gt;/model provider_name,model_name&lt;/code&gt; Example: &lt;code&gt;/model openrouter,anthropic/claude-3.5-sonnet&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Custom Router&lt;/h4&gt; 
&lt;p&gt;For more advanced routing logic, you can specify a custom router script via the &lt;code&gt;CUSTOM_ROUTER_PATH&lt;/code&gt; in your &lt;code&gt;config.json&lt;/code&gt;. This allows you to implement complex routing rules beyond the default scenarios.&lt;/p&gt; 
&lt;p&gt;In your &lt;code&gt;config.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "CUSTOM_ROUTER_PATH": "$HOME/.claude-code-router/custom-router.js"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The custom router file must be a JavaScript module that exports an &lt;code&gt;async&lt;/code&gt; function. This function receives the request object and the config object as arguments and should return the provider and model name as a string (e.g., &lt;code&gt;"provider_name,model_name"&lt;/code&gt;), or &lt;code&gt;null&lt;/code&gt; to fall back to the default router.&lt;/p&gt; 
&lt;p&gt;Here is an example of a &lt;code&gt;custom-router.js&lt;/code&gt; based on &lt;code&gt;custom-router.example.js&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// $HOME/.claude-code-router/custom-router.js

/**
 * A custom router function to determine which model to use based on the request.
 *
 * @param {object} req - The request object from Claude Code, containing the request body.
 * @param {object} config - The application's config object.
 * @returns {Promise&amp;lt;string|null&amp;gt;} - A promise that resolves to the "provider,model_name" string, or null to use the default router.
 */
module.exports = async function router(req, config) {
  const userMessage = req.body.messages.find(m =&amp;gt; m.role === 'user')?.content;

  if (userMessage &amp;amp;&amp;amp; userMessage.includes('explain this code')) {
    // Use a powerful model for code explanation
    return 'openrouter,anthropic/claude-3.5-sonnet';
  }

  // Fallback to the default router configuration
  return null;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ü§ñ GitHub Actions&lt;/h2&gt; 
&lt;p&gt;Integrate Claude Code Router into your CI/CD pipeline. After setting up &lt;a href="https://docs.anthropic.com/en/docs/claude-code/github-actions"&gt;Claude Code Actions&lt;/a&gt;, modify your &lt;code&gt;.github/workflows/claude.yaml&lt;/code&gt; to use the router:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;name: Claude Code

on:
  issue_comment:
    types: [created]
  # ... other triggers

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' &amp;amp;&amp;amp; contains(github.event.comment.body, '@claude')) ||
      # ... other conditions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare Environment
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.claude-code-router
          cat &amp;lt;&amp;lt; 'EOF' &amp;gt; $HOME/.claude-code-router/config.json
          {
            "log": true,
            "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}",
            "OPENAI_BASE_URL": "https://api.deepseek.com",
            "OPENAI_MODEL": "deepseek-chat"
          }
          EOF
        shell: bash

      - name: Start Claude Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@1.0.8 start &amp;amp;
        shell: bash

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
        with:
          anthropic_api_key: "any-string-is-ok"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This setup allows for interesting automations, like running tasks during off-peak hours to reduce API costs.&lt;/p&gt; 
&lt;h2&gt;üìù Further Reading&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/en/project-motivation-and-how-it-works.md"&gt;Project Motivation and How It Works&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/en/maybe-we-can-do-more-with-the-route.md"&gt;Maybe We Can Do More with the Router&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‚ù§Ô∏è Support &amp;amp; Sponsoring&lt;/h2&gt; 
&lt;p&gt;If you find this project helpful, please consider sponsoring its development. Your support is greatly appreciated!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://ko-fi.com/F1F31GN2GM"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/alipay.jpg" width="200" alt="Alipay"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/wechat.jpg" width="200" alt="WeChat Pay"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Our Sponsors&lt;/h3&gt; 
&lt;p&gt;A huge thank you to all our sponsors for their generous support!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@Simon Leischnig&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/duanshuaimin"&gt;@duanshuaimin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vrgitadmin"&gt;@vrgitadmin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*o&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ceilwoo"&gt;@ceilwoo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*ËØ¥&lt;/li&gt; 
 &lt;li&gt;@*Êõ¥&lt;/li&gt; 
 &lt;li&gt;@K*g&lt;/li&gt; 
 &lt;li&gt;@R*R&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bobleer"&gt;@bobleer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*Ëãó&lt;/li&gt; 
 &lt;li&gt;@*Âàí&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Clarence-pan"&gt;@Clarence-pan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/carter003"&gt;@carter003&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@S*r&lt;/li&gt; 
 &lt;li&gt;@*Êôñ&lt;/li&gt; 
 &lt;li&gt;@*Êïè&lt;/li&gt; 
 &lt;li&gt;@Z*z&lt;/li&gt; 
 &lt;li&gt;@*ÁÑ∂&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cluic"&gt;@cluic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*Ëãó&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PromptExpert"&gt;@PromptExpert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*Â∫î&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yusnake"&gt;@yusnake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;@*È£û&lt;/li&gt; 
 &lt;li&gt;@Ëë£*&lt;/li&gt; 
 &lt;li&gt;@*Ê±Ä&lt;/li&gt; 
 &lt;li&gt;@*Ê∂Ø&lt;/li&gt; 
 &lt;li&gt;@*:-Ôºâ&lt;/li&gt; 
 &lt;li&gt;@**Á£ä&lt;/li&gt; 
 &lt;li&gt;@*Áê¢&lt;/li&gt; 
 &lt;li&gt;@*Êàê&lt;/li&gt; 
 &lt;li&gt;@Z*o&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(If your name is masked, please contact me via my homepage email to update it with your GitHub username.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>maybe-finance/maybe</title>
      <link>https://github.com/maybe-finance/maybe</link>
      <description>&lt;p&gt;The personal finance app for everyone&lt;/p&gt;&lt;hr&gt;&lt;img width="1190" alt="maybe_hero" src="https://github.com/user-attachments/assets/13fc5ef4-ce0f-4073-a163-9dbc3eb4c8e5"&gt; 
&lt;h1&gt;Maybe: The personal finance app for everyone&lt;/h1&gt; 
&lt;p&gt;&lt;b&gt;Get involved: &lt;a href="https://link.maybe.co/discord"&gt;Discord&lt;/a&gt; ‚Ä¢ &lt;a href="https://maybefinance.com"&gt;Website&lt;/a&gt; ‚Ä¢ &lt;a href="https://github.com/maybe-finance/maybe/issues"&gt;Issues&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; 
&lt;h2&gt;Backstory&lt;/h2&gt; 
&lt;p&gt;We spent the better part of 2021/2022 building a personal finance + wealth management app called, Maybe. Very full-featured, including an "Ask an Advisor" feature which connected users with an actual CFP/CFA to help them with their finances (all included in your subscription).&lt;/p&gt; 
&lt;p&gt;The business end of things didn't work out, and so we shut things down mid-2023.&lt;/p&gt; 
&lt;p&gt;We spent the better part of $1,000,000 building the app (employees + contractors, data providers/services, infrastructure, etc.).&lt;/p&gt; 
&lt;p&gt;We're now reviving the product as a fully open-source project. The goal is to let you run the app yourself, for free, and use it to manage your own finances and eventually offer a hosted version of the app for a small monthly fee.&lt;/p&gt; 
&lt;h2&gt;Maybe Hosting&lt;/h2&gt; 
&lt;p&gt;There are 2 primary ways to use the Maybe app:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Managed (easiest) - we're in alpha and release invites in our Discord&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/maybe-finance/maybe/main/docs/hosting/docker.md"&gt;Self-host with Docker&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before contributing, you'll likely find it helpful to &lt;a href="https://github.com/maybe-finance/maybe/wiki"&gt;understand context and general vision/direction&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once you've done that, please visit our &lt;a href="https://github.com/maybe-finance/maybe/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to get started!&lt;/p&gt; 
&lt;h3&gt;Performance Issues&lt;/h3&gt; 
&lt;p&gt;With data-heavy apps, inevitably, there are performance issues. We've set up a public dashboard showing the problematic requests, along with the stacktraces to help debug them.&lt;/p&gt; 
&lt;p&gt;Any contributions that help improve performance are very much welcome.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://oss.skylight.io/app/applications/XDpPIXEX52oi/recent/6h/endpoints"&gt;https://oss.skylight.io/app/applications/XDpPIXEX52oi/recent/6h/endpoints&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Local Development Setup&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;If you are trying to &lt;em&gt;self-host&lt;/em&gt; the Maybe app, stop here. You should &lt;a href="https://raw.githubusercontent.com/maybe-finance/maybe/main/docs/hosting/docker.md"&gt;read this guide to get started&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The instructions below are for developers to get started with contributing to the app.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;See &lt;code&gt;.ruby-version&lt;/code&gt; file for required Ruby version&lt;/li&gt; 
 &lt;li&gt;PostgreSQL &amp;gt;9.3 (ideally, latest stable version)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;After cloning the repo, the basic setup commands are:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd maybe
cp .env.local.example .env.local
bin/setup
bin/dev

# Optionally, load demo data
rake demo_data:default
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And visit &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to see the app. You can use the following credentials to log in (generated by DB seed):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Email: &lt;code&gt;user@maybe.local&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Password: &lt;code&gt;password&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For further instructions, see guides below.&lt;/p&gt; 
&lt;h3&gt;Multi-currency support&lt;/h3&gt; 
&lt;p&gt;If you'd like multi-currency support, there are a few extra steps to follow.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign up for an API key at &lt;a href="https://synthfinance.com"&gt;Synth&lt;/a&gt;. It's a Maybe product and the free plan is sufficient for basic multi-currency support.&lt;/li&gt; 
 &lt;li&gt;Add your API key to your &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Setup Guides&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maybe-finance/maybe/wiki/Mac-Dev-Setup-Guide"&gt;Mac dev setup guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maybe-finance/maybe/wiki/Linux-Dev-Setup-Guide"&gt;Linux dev setup guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/maybe-finance/maybe/wiki/Windows-Dev-Setup-Guide"&gt;Windows dev setup guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dev containers - visit &lt;a href="https://code.visualstudio.com/docs/devcontainers/containers"&gt;this guide&lt;/a&gt; to learn more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Repo Activity&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/7866c9790deba0baf63ca1688b209130b306ea4e.svg?sanitize=true" alt="Repo Activity" title="Repobeats analytics image"&gt;&lt;/p&gt; 
&lt;h2&gt;Copyright &amp;amp; license&lt;/h2&gt; 
&lt;p&gt;Maybe is distributed under an &lt;a href="https://github.com/maybe-finance/maybe/raw/main/LICENSE"&gt;AGPLv3 license&lt;/a&gt;. " Maybe" is a trademark of Maybe Finance, Inc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitleaks/gitleaks</title>
      <link>https://github.com/gitleaks/gitleaks</link>
      <description>&lt;p&gt;Find secrets with Gitleaks üîë&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gitleaks&lt;/h1&gt; 
&lt;pre&gt;&lt;code&gt;‚îå‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚îÇ‚ï≤  ‚îÇ
‚îÇ ‚îÇ ‚óã ‚îÇ
‚îÇ ‚óã ‚ñë ‚îÇ
‚îî‚îÄ‚ñë‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/gitleaks/gitleaks/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/gitleaks/gitleaks/actions/workflows/test.yml/badge.svg?sanitize=true" alt="GitHub Action Test"&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/zricethezav/gitleaks"&gt;&lt;img src="https://img.shields.io/docker/pulls/zricethezav/gitleaks.svg?sanitize=true" alt="Docker Hub"&gt;&lt;/a&gt; &lt;a href="https://gitleaks.io/playground"&gt;&lt;img src="https://img.shields.io/badge/gitleaks%20-playground-blue" alt="Gitleaks Playground"&gt;&lt;/a&gt; &lt;a href="https://github.com/gitleaks/gitleaks-action"&gt;&lt;img src="https://img.shields.io/badge/protected%20by-gitleaks-blue" alt="Gitleaks Action"&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/zricethezav/gitleaks/v8"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/gitleaks/gitleaks/v8?status" alt="GoDoc"&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/gitleaks/gitleaks/v8"&gt;&lt;img src="https://goreportcard.com/badge/github.com/gitleaks/gitleaks/v8" alt="GoReportCard"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/gitleaks/gitleaks/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/gitleaks/gitleaks.svg?sanitize=true" alt="License"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Join our Discord! &lt;a href="https://discord.gg/8Hzbrnkr7E"&gt;&lt;img src="https://img.shields.io/discord/1102689410522284044.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Gitleaks is a tool for &lt;strong&gt;detecting&lt;/strong&gt; secrets like passwords, API keys, and tokens in git repos, files, and whatever else you wanna throw at it via &lt;code&gt;stdin&lt;/code&gt;. If you wanna learn more about how the detection engine works check out this blog: &lt;a href="https://lookingatcomputer.substack.com/p/regex-is-almost-all-you-need"&gt;Regex is (almost) all you need&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;‚ûú  ~/code(master) gitleaks git -v

    ‚óã
    ‚îÇ‚ï≤
    ‚îÇ ‚óã
    ‚óã ‚ñë
    ‚ñë    gitleaks


Finding:     "export BUNDLE_ENTERPRISE__CONTRIBSYS__COM=cafebabe:deadbeef",
Secret:      cafebabe:deadbeef
RuleID:      sidekiq-secret
Entropy:     2.609850
File:        cmd/generate/config/rules/sidekiq.go
Line:        23
Commit:      cd5226711335c68be1e720b318b7bc3135a30eb2
Author:      John
Email:       john@users.noreply.github.com
Date:        2022-08-03T12:31:40Z
Fingerprint: cd5226711335c68be1e720b318b7bc3135a30eb2:cmd/generate/config/rules/sidekiq.go:sidekiq-secret:23
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Gitleaks can be installed using Homebrew, Docker, or Go. Gitleaks is also available in binary form for many popular platforms and OS types on the &lt;a href="https://github.com/gitleaks/gitleaks/releases"&gt;releases page&lt;/a&gt;. In addition, Gitleaks can be implemented as a pre-commit hook directly in your repo or as a GitHub action using &lt;a href="https://github.com/gitleaks/gitleaks-action"&gt;Gitleaks-Action&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installing&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# MacOS
brew install gitleaks

# Docker (DockerHub)
docker pull zricethezav/gitleaks:latest
docker run -v ${path_to_host_folder_to_scan}:/path zricethezav/gitleaks:latest [COMMAND] [OPTIONS] [SOURCE_PATH]

# Docker (ghcr.io)
docker pull ghcr.io/gitleaks/gitleaks:latest
docker run -v ${path_to_host_folder_to_scan}:/path ghcr.io/gitleaks/gitleaks:latest [COMMAND] [OPTIONS] [SOURCE_PATH]

# From Source (make sure `go` is installed)
git clone https://github.com/gitleaks/gitleaks.git
cd gitleaks
make build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GitHub Action&lt;/h3&gt; 
&lt;p&gt;Check out the official &lt;a href="https://github.com/gitleaks/gitleaks-action"&gt;Gitleaks GitHub Action&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;name: gitleaks
on: [pull_request, push, workflow_dispatch]
jobs:
  scan:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pre-Commit&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install pre-commit from &lt;a href="https://pre-commit.com/#install"&gt;https://pre-commit.com/#install&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file at the root of your repository with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repos:
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.24.2
    hooks:
      - id: gitleaks
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;for a &lt;a href="https://github.com/gitleaks/gitleaks/releases"&gt;native execution of gitleaks&lt;/a&gt; or use the &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/.pre-commit-hooks.yaml"&gt;&lt;code&gt;gitleaks-docker&lt;/code&gt; pre-commit ID&lt;/a&gt; for executing gitleaks using the &lt;a href="https://raw.githubusercontent.com/gitleaks/gitleaks/master/#docker"&gt;official Docker images&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Auto-update the config to the latest repos' versions by executing &lt;code&gt;pre-commit autoupdate&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install with &lt;code&gt;pre-commit install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you're all set!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;‚ûú git commit -m "this commit contains a secret"
Detect hardcoded secrets.................................................Failed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: to disable the gitleaks pre-commit hook you can prepend &lt;code&gt;SKIP=gitleaks&lt;/code&gt; to the commit command and it will skip running gitleaks&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;‚ûú SKIP=gitleaks git commit -m "skip gitleaks check"
Detect hardcoded secrets................................................Skipped
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Usage:
  gitleaks [command]

Available Commands:
  dir         scan directories or files for secrets
  git         scan git repositories for secrets
  help        Help about any command
  stdin       detect secrets from stdin
  version     display gitleaks version

Flags:
  -b, --baseline-path string          path to baseline with issues that can be ignored
  -c, --config string                 config file path
                                      order of precedence:
                                      1. --config/-c
                                      2. env var GITLEAKS_CONFIG
                                      3. env var GITLEAKS_CONFIG_TOML with the file content
                                      4. (target path)/.gitleaks.toml
                                      If none of the four options are used, then gitleaks will use the default config
      --diagnostics string            enable diagnostics (comma-separated list: cpu,mem,trace). cpu=CPU profiling, mem=memory profiling, trace=execution tracing
      --diagnostics-dir string        directory to store diagnostics output files (defaults to current directory)
      --enable-rule strings           only enable specific rules by id
      --exit-code int                 exit code when leaks have been encountered (default 1)
  -i, --gitleaks-ignore-path string   path to .gitleaksignore file or folder containing one (default ".")
  -h, --help                          help for gitleaks
      --ignore-gitleaks-allow         ignore gitleaks:allow comments
  -l, --log-level string              log level (trace, debug, info, warn, error, fatal) (default "info")
      --max-decode-depth int          allow recursive decoding up to this depth (default "0", no decoding is done)
      --max-archive-depth int         allow scanning into nested archives up to this depth (default "0", no archive traversal is done)
      --max-target-megabytes int      files larger than this will be skipped
      --no-banner                     suppress banner
      --no-color                      turn off color for verbose output
      --redact uint[=100]             redact secrets from logs and stdout. To redact only parts of the secret just apply a percent value from 0..100. For example --redact=20 (default 100%)
  -f, --report-format string          output format (json, csv, junit, sarif, template)
  -r, --report-path string            report file
      --report-template string        template file used to generate the report (implies --report-format=template)
  -v, --verbose                       show verbose output from scan
      --version                       version for gitleaks

Use "gitleaks [command] --help" for more information about a command.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commands&lt;/h3&gt; 
&lt;p&gt;‚ö†Ô∏è v8.19.0 introduced a change that deprecated &lt;code&gt;detect&lt;/code&gt; and &lt;code&gt;protect&lt;/code&gt;. Those commands are still available but are hidden in the &lt;code&gt;--help&lt;/code&gt; menu. Take a look at this &lt;a href="https://gist.github.com/zricethezav/b325bb93ebf41b9c0b0507acf12810d2"&gt;gist&lt;/a&gt; for easy command translations. If you find v8.19.0 broke an existing command (&lt;code&gt;detect&lt;/code&gt;/&lt;code&gt;protect&lt;/code&gt;), please open an issue.&lt;/p&gt; 
&lt;p&gt;There are three scanning modes: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt;, and &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Git&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;git&lt;/code&gt; command lets you scan local git repos. Under the hood, gitleaks uses the &lt;code&gt;git log -p&lt;/code&gt; command to scan patches. You can configure the behavior of &lt;code&gt;git log -p&lt;/code&gt; with the &lt;code&gt;log-opts&lt;/code&gt; option. For example, if you wanted to run gitleaks on a range of commits you could use the following command: &lt;code&gt;gitleaks git -v --log-opts="--all commitA..commitB" path_to_repo&lt;/code&gt;. See the &lt;a href="https://git-scm.com/docs/git-log"&gt;git log&lt;/a&gt; documentation for more information. If there is no target specified as a positional argument, then gitleaks will attempt to scan the current working directory as a git repo.&lt;/p&gt; 
&lt;h4&gt;Dir&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;dir&lt;/code&gt; (aliases include &lt;code&gt;files&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt;) command lets you scan directories and files. Example: &lt;code&gt;gitleaks dir -v path_to_directory_or_file&lt;/code&gt;. If there is no target specified as a positional argument, then gitleaks will scan the current working directory.&lt;/p&gt; 
&lt;h4&gt;Stdin&lt;/h4&gt; 
&lt;p&gt;You can also stream data to gitleaks with the &lt;code&gt;stdin&lt;/code&gt; command. Example: &lt;code&gt;cat some_file | gitleaks -v stdin&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Creating a baseline&lt;/h3&gt; 
&lt;p&gt;When scanning large repositories or repositories with a long history, it can be convenient to use a baseline. When using a baseline, gitleaks will ignore any old findings that are present in the baseline. A baseline can be any gitleaks report. To create a gitleaks report, run gitleaks with the &lt;code&gt;--report-path&lt;/code&gt; parameter.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gitleaks git --report-path gitleaks-report.json # This will save the report in a file called gitleaks-report.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once as baseline is created it can be applied when running the detect command again:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gitleaks git --baseline-path gitleaks-report.json --report-path findings.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After running the detect command with the --baseline-path parameter, report output (findings.json) will only contain new issues.&lt;/p&gt; 
&lt;h2&gt;Pre-Commit hook&lt;/h2&gt; 
&lt;p&gt;You can run Gitleaks as a pre-commit hook by copying the example &lt;code&gt;pre-commit.py&lt;/code&gt; script into your &lt;code&gt;.git/hooks/&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Load Configuration&lt;/h2&gt; 
&lt;p&gt;The order of precedence is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;--config/-c&lt;/code&gt; option: &lt;pre&gt;&lt;code class="language-bash"&gt;gitleaks git --config /home/dev/customgitleaks.toml .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Environment variable &lt;code&gt;GITLEAKS_CONFIG&lt;/code&gt; with the file path: &lt;pre&gt;&lt;code class="language-bash"&gt;export GITLEAKS_CONFIG="/home/dev/customgitleaks.toml"
gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Environment variable &lt;code&gt;GITLEAKS_CONFIG_TOML&lt;/code&gt; with the file content: &lt;pre&gt;&lt;code class="language-bash"&gt;export GITLEAKS_CONFIG_TOML=`cat customgitleaks.toml`
gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;A &lt;code&gt;.gitleaks.toml&lt;/code&gt; file within the target path: &lt;pre&gt;&lt;code class="language-bash"&gt;gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If none of the four options are used, then gitleaks will use the default config.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Gitleaks offers a configuration format you can follow to write your own secret detection rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# Title for the gitleaks configuration file.
title = "Custom Gitleaks configuration"

# You have basically two options for your custom configuration:
#
# 1. define your own configuration, default rules do not apply
#
#    use e.g., the default configuration as starting point:
#    https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml
#
# 2. extend a configuration, the rules are overwritten or extended
#
#    When you extend a configuration the extended rules take precedence over the
#    default rules. I.e., if there are duplicate rules in both the extended
#    configuration and the default configuration the extended rules or
#    attributes of them will override the default rules.
#    Another thing to know with extending configurations is you can chain
#    together multiple configuration files to a depth of 2. Allowlist arrays are
#    appended and can contain duplicates.

# useDefault and path can NOT be used at the same time. Choose one.
[extend]
# useDefault will extend the default gitleaks config built in to the binary
# the latest version is located at:
# https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml
useDefault = true
# or you can provide a path to a configuration to extend from.
# The path is relative to where gitleaks was invoked,
# not the location of the base config.
# path = "common_config.toml"
# If there are any rules you don't want to inherit, they can be specified here.
disabledRules = [ "generic-api-key"]

# An array of tables that contain information that define instructions
# on how to detect secrets
[[rules]]
# Unique identifier for this rule
id = "awesome-rule-1"

# Short human-readable description of the rule.
description = "awesome rule 1"

# Golang regular expression used to detect secrets. Note Golang's regex engine
# does not support lookaheads.
regex = '''one-go-style-regex-for-this-rule'''

# Int used to extract secret from regex match and used as the group that will have
# its entropy checked if `entropy` is set.
secretGroup = 3

# Float representing the minimum shannon entropy a regex group must have to be considered a secret.
entropy = 3.5

# Golang regular expression used to match paths. This can be used as a standalone rule or it can be used
# in conjunction with a valid `regex` entry.
path = '''a-file-path-regex'''

# Keywords are used for pre-regex check filtering. Rules that contain
# keywords will perform a quick string compare check to make sure the
# keyword(s) are in the content being scanned. Ideally these values should
# either be part of the identiifer or unique strings specific to the rule's regex
# (introduced in v8.6.0)
keywords = [
  "auth",
  "password",
  "token",
]

# Array of strings used for metadata and reporting purposes.
tags = ["tag","another tag"]

    # ‚ö†Ô∏è In v8.21.0 `[rules.allowlist]` was replaced with `[[rules.allowlists]]`.
    # This change was backwards-compatible: instances of `[rules.allowlist]` still  work.
    #
    # You can define multiple allowlists for a rule to reduce false positives.
    # A finding will be ignored if _ANY_ `[[rules.allowlists]]` matches.
    [[rules.allowlists]]
    description = "ignore commit A"
    # When multiple criteria are defined the default condition is "OR".
    # e.g., this can match on |commits| OR |paths| OR |stopwords|.
    condition = "OR"
    commits = [ "commit-A", "commit-B"]
    paths = [
      '''go\.mod''',
      '''go\.sum'''
    ]
    # note: stopwords targets the extracted secret, not the entire regex match
    # like 'regexes' does. (stopwords introduced in 8.8.0)
    stopwords = [
      '''client''',
      '''endpoint''',
    ]

    [[rules.allowlists]]
    # The "AND" condition can be used to make sure all criteria match.
    # e.g., this matches if |regexes| AND |paths| are satisfied.
    condition = "AND"
    # note: |regexes| defaults to check the _Secret_ in the finding.
    # Acceptable values for |regexTarget| are "secret" (default), "match", and "line".
    regexTarget = "match"
    regexes = [ '''(?i)parseur[il]''' ]
    paths = [ '''package-lock\.json''' ]

# You can extend a particular rule from the default config. e.g., gitlab-pat
# if you have defined a custom token prefix on your GitLab instance
[[rules]]
id = "gitlab-pat"
# all the other attributes from the default rule are inherited

    [[rules.allowlists]]
    regexTarget = "line"
    regexes = [ '''MY-glpat-''' ]


# ‚ö†Ô∏è In v8.25.0 `[allowlist]` was replaced with `[[allowlists]]`.
#
# Global allowlists have a higher order of precedence than rule-specific allowlists.
# If a commit listed in the `commits` field below is encountered then that commit will be skipped and no
# secrets will be detected for said commit. The same logic applies for regexes and paths.
[[allowlists]]
description = "global allow list"
commits = [ "commit-A", "commit-B", "commit-C"]
paths = [
  '''gitleaks\.toml''',
  '''(.*?)(jpg|gif|doc)'''
]
# note: (global) regexTarget defaults to check the _Secret_ in the finding.
# Acceptable values for regexTarget are "match" and "line"
regexTarget = "match"
regexes = [
  '''219-09-9999''',
  '''078-05-1120''',
  '''(9[0-9]{2}|666)-\d{2}-\d{4}''',
]
# note: stopwords targets the extracted secret, not the entire regex match
# like 'regexes' does. (stopwords introduced in 8.8.0)
stopwords = [
  '''client''',
  '''endpoint''',
]

# ‚ö†Ô∏è In v8.25.0, `[[allowlists]]` have a new field called |targetRules|.
#
# Common allowlists can be defined once and assigned to multiple rules using |targetRules|.
# This will only run on the specified rules, not globally.
[[allowlists]]
targetRules = ["awesome-rule-1", "awesome-rule-2"]
description = "Our test assets trigger false-positives in a couple rules."
paths = ['''tests/expected/._\.json$''']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the default &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/config/gitleaks.toml"&gt;gitleaks config&lt;/a&gt; for examples or follow the &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; if you would like to contribute to the default configuration. Additionally, you can check out &lt;a href="https://blog.gitleaks.io/stop-leaking-secrets-configuration-2-3-aeed293b1fbf"&gt;this gitleaks blog post&lt;/a&gt; which covers advanced configuration setups.&lt;/p&gt; 
&lt;h3&gt;Additional Configuration&lt;/h3&gt; 
&lt;h4&gt;Composite Rules (Multi-part or &lt;code&gt;required&lt;/code&gt; Rules)&lt;/h4&gt; 
&lt;p&gt;In v8.28.0 Gitleaks introduced composite rules, which are made up of a single "primary" rule and one or more auxiliary or &lt;code&gt;required&lt;/code&gt; rules. To create a composite rule, add a &lt;code&gt;[[rules.required]]&lt;/code&gt; table to the primary rule specifying an &lt;code&gt;id&lt;/code&gt; and optionally &lt;code&gt;withinLines&lt;/code&gt; and/or &lt;code&gt;withinColumns&lt;/code&gt; proximity constraints. A fragment is a chunk of content that Gitleaks processes at once (typically a file, part of a file, or git diff), and proximity matching instructs the primary rule to only report a finding if the auxiliary &lt;code&gt;required&lt;/code&gt; rules also find matches within the specified area of the fragment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Proximity matching:&lt;/strong&gt; Using the &lt;code&gt;withinLines&lt;/code&gt; and &lt;code&gt;withinColumns&lt;/code&gt; fields instructs the primary rule to only report a finding if the auxiliary &lt;code&gt;required&lt;/code&gt; rules also find matches within the specified proximity. You can set:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;withinLines: N&lt;/code&gt;&lt;/strong&gt; - required findings must be within N lines (vertically)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;withinColumns: N&lt;/code&gt;&lt;/strong&gt; - required findings must be within N characters (horizontally)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Both&lt;/strong&gt; - creates a rectangular search area (both constraints must be satisfied)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Neither&lt;/strong&gt; - fragment-level matching (required findings can be anywhere in the same fragment)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here are diagrams illustrating each proximity behavior:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;p = primary captured secret
a = auxiliary (required) captured secret
fragment = section of data gitleaks is looking at


    *Fragment-level proximity*               
    Any required finding in the fragment
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                       
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§fragment‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 
   ‚îÇ      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚î§     ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê       
   ‚îÇ             ‚îÇa‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÇ‚úì MATCH‚îÇ       
   ‚îÇ          ‚îå‚îÄ‚îê‚îî‚îÄ‚îò     ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò       
   ‚îÇ‚îå‚îÄ‚îê       ‚îÇp‚îÇ        ‚îÇ                 
   ‚îÇ‚îÇa‚îÇ    ‚îå‚îÄ‚îê‚îî‚îÄ‚îò        ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê       
   ‚îÇ‚îî‚îÄ‚îò    ‚îÇa‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÇ‚úì MATCH‚îÇ       
   ‚îî‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò       
     ‚îÇ    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                        
     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ‚úì MATCH‚îÇ                        
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                        
                                           
                                           
   *Column bounded proximity*
   `withinColumns = 3`                    
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                       
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚î§fragment‚îú‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îê                 
   ‚îÇ      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚î§     ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   
   ‚îÇ    ‚îÇ        ‚îÇa‚îÇ‚óÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÇ+1C ‚úì MATCH‚îÇ   
   ‚îÇ          ‚îå‚îÄ‚îê‚îî‚îÄ‚îò     ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   
   ‚îÇ‚îå‚îÄ‚îê ‚îÇ     ‚îÇp‚îÇ    ‚îÇ   ‚îÇ                 
‚îå‚îÄ‚îÄ‚ñ∂‚îÇa‚îÇ  ‚îå‚îÄ‚îê  ‚îî‚îÄ‚îò        ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   
‚îÇ  ‚îÇ‚îî‚îÄ‚îò ‚îÇ‚îÇa‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÇ-2C ‚úì MATCH‚îÇ   
‚îÇ  ‚îÇ       ‚îò             ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   
‚îÇ  ‚îî‚îÄ‚îÄ -3C ‚îÄ‚îÄ‚îÄ0C‚îÄ‚îÄ‚îÄ +3C ‚îÄ‚îò                 
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                             
‚îÇ  ‚îÇ -4C ‚úó NO‚îÇ                             
‚îî‚îÄ‚îÄ‚îÇ  MATCH  ‚îÇ                             
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                             
                                           
                                           
   *Line bounded proximity*
   `withinLines = 4`                      
         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                        
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§fragment‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                  
  +4L‚îÄ ‚îÄ ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îÄ ‚îÄ ‚îÄ‚îÇ                  
   ‚îÇ                    ‚îÇ                  
   ‚îÇ              ‚îå‚îÄ‚îê   ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   
   ‚îÇ         ‚îå‚îÄ‚îê  ‚îÇa‚îÇ‚óÄ‚îÄ‚îÄ‚îº‚îÄ‚îÇ+1L ‚úì MATCH ‚îÇ   
   0L  ‚îå‚îÄ‚îê   ‚îÇp‚îÇ  ‚îî‚îÄ‚îò   ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§   
   ‚îÇ   ‚îÇa‚îÇ‚óÄ‚îÄ‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÇ-1L ‚úì MATCH ‚îÇ   
   ‚îÇ   ‚îî‚îÄ‚îò              ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   
   ‚îÇ                    ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      
  -4L‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ‚îå‚îÄ‚îê‚îÄ‚îÇ ‚îÇ-5L ‚úó NO ‚îÇ      
   ‚îÇ                ‚îÇa‚îÇ‚óÄ‚îº‚îÄ‚îÇ  MATCH  ‚îÇ      
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      
                                           
                                           
   *Line and column bounded proximity*
   `withinLines = 4`                      
   `withinColumns = 3`                    
         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                        
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§fragment‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                  
  +4L   ‚îå‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥ ‚îê   ‚îÇ                  
   ‚îÇ            ‚îå‚îÄ‚îê     ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ    ‚îÇ       ‚îÇa‚îÇ‚óÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÇ+2L/+1C ‚úì MATCH‚îÇ
   ‚îÇ         ‚îå‚îÄ‚îê‚îî‚îÄ‚îò     ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
   0L   ‚îÇ    ‚îÇp‚îÇ    ‚îÇ   ‚îÇ                  
   ‚îÇ         ‚îî‚îÄ‚îò        ‚îÇ                  
   ‚îÇ    ‚îÇ           ‚îÇ   ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   
  -4L    ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ‚îå‚îÄ‚îê ‚îÇ ‚îÇ-5L/+3C ‚úó NO‚îÇ   
   ‚îÇ                ‚îÇa‚îÇ‚óÄ‚îº‚îÄ‚îÇ   MATCH    ‚îÇ   
   ‚îî‚îÄ‚îÄ‚îÄ-3C‚îÄ‚îÄ‚îÄ‚îÄ0L‚îÄ‚îÄ‚îÄ+3C‚î¥‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt;
 &lt;summary&gt;Some final quick thoughts on composite rules.&lt;/summary&gt;This is an experimental feature! It's subject to change so don't go sellin' a new B2B SaaS feature built ontop of this feature. Scan type (git vs dir) based context is interesting. I'm monitoring the situation. Composite rules might not be super useful for git scans because gitleaks only looks at additions in the git history. It could be useful to scan non-additions in git history for `required` rules. Oh, right this is a readme, I'll shut up now.
&lt;/details&gt; 
&lt;h4&gt;gitleaks:allow&lt;/h4&gt; 
&lt;p&gt;If you are knowingly committing a test secret that gitleaks will catch you can add a &lt;code&gt;gitleaks:allow&lt;/code&gt; comment to that line which will instruct gitleaks to ignore that secret. Ex:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class CustomClass:
    discord_client_secret = '8dyfuiRyq=vVc3RRr_edRk-fK__JItpZ'  #gitleaks:allow

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;.gitleaksignore&lt;/h4&gt; 
&lt;p&gt;You can ignore specific findings by creating a &lt;code&gt;.gitleaksignore&lt;/code&gt; file at the root of your repo. In release v8.10.0 Gitleaks added a &lt;code&gt;Fingerprint&lt;/code&gt; value to the Gitleaks report. Each leak, or finding, has a Fingerprint that uniquely identifies a secret. Add this fingerprint to the &lt;code&gt;.gitleaksignore&lt;/code&gt; file to ignore that specific secret. See Gitleaks' &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/.gitleaksignore"&gt;.gitleaksignore&lt;/a&gt; for an example. Note: this feature is experimental and is subject to change in the future.&lt;/p&gt; 
&lt;h4&gt;Decoding&lt;/h4&gt; 
&lt;p&gt;Sometimes secrets are encoded in a way that can make them difficult to find with just regex. Now you can tell gitleaks to automatically find and decode encoded text. The flag &lt;code&gt;--max-decode-depth&lt;/code&gt; enables this feature (the default value "0" means the feature is disabled by default).&lt;/p&gt; 
&lt;p&gt;Recursive decoding is supported since decoded text can also contain encoded text. The flag &lt;code&gt;--max-decode-depth&lt;/code&gt; sets the recursion limit. Recursion stops when there are no new segments of encoded text to decode, so setting a really high max depth doesn't mean it will make that many passes. It will only make as many as it needs to decode the text. Overall, decoding only minimally increases scan times.&lt;/p&gt; 
&lt;p&gt;The findings for encoded text differ from normal findings in the following ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The location points the bounds of the encoded text 
  &lt;ul&gt; 
   &lt;li&gt;If the rule matches outside the encoded text, the bounds are adjusted to include that as well&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The match and secret contain the decoded value&lt;/li&gt; 
 &lt;li&gt;Two tags are added &lt;code&gt;decoded:&amp;lt;encoding&amp;gt;&lt;/code&gt; and &lt;code&gt;decode-depth:&amp;lt;depth&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Currently supported encodings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;percent&lt;/strong&gt; - Any printable ASCII percent encoded values&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;hex&lt;/strong&gt; - Any printable ASCII hex encoded values &amp;gt;= 32 characters&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;base64&lt;/strong&gt; - Any printable ASCII base64 encoded values &amp;gt;= 16 characters&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Archive Scanning&lt;/h4&gt; 
&lt;p&gt;Sometimes secrets are packaged within archive files like zip files or tarballs, making them difficult to discover. Now you can tell gitleaks to automatically extract and scan the contents of archives. The flag &lt;code&gt;--max-archive-depth&lt;/code&gt; enables this feature for both &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; scan types. The default value of "0" means this feature is disabled by default.&lt;/p&gt; 
&lt;p&gt;Recursive scanning is supported since archives can also contain other archives. The &lt;code&gt;--max-archive-depth&lt;/code&gt; flag sets the recursion limit. Recursion stops when there are no new archives to extract, so setting a very high max depth just sets the potential to go that deep. It will only go as deep as it needs to.&lt;/p&gt; 
&lt;p&gt;The findings for secrets located within an archive will include the path to the file inside the archive. Inner paths are separated with &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Example finding (shortened for brevity):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Finding:     DB_PASSWORD=8ae31cacf141669ddfb5da
...
File:        testdata/archives/nested.tar.gz!archives/files.tar!files/.env.prod
Line:        4
Commit:      6e6ee6596d337bb656496425fb98644eb62b4a82
...
Fingerprint: 6e6ee6596d337bb656496425fb98644eb62b4a82:testdata/archives/nested.tar.gz!archives/files.tar!files/.env.prod:generic-api-key:4
Link:        https://github.com/leaktk/gitleaks/blob/6e6ee6596d337bb656496425fb98644eb62b4a82/testdata/archives/nested.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This means a secret was detected on line 4 of &lt;code&gt;files/.env.prod.&lt;/code&gt; which is in &lt;code&gt;archives/files.tar&lt;/code&gt; which is in &lt;code&gt;testdata/archives/nested.tar.gz&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Currently supported formats:&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/mholt/archives?tab=readme-ov-file#supported-compression-formats"&gt;compression&lt;/a&gt; and &lt;a href="https://github.com/mholt/archives?tab=readme-ov-file#supported-archive-formats"&gt;archive&lt;/a&gt; formats supported by mholt's &lt;a href="https://github.com/mholt/archives"&gt;archives package&lt;/a&gt; are supported.&lt;/p&gt; 
&lt;h4&gt;Reporting&lt;/h4&gt; 
&lt;p&gt;Gitleaks has built-in support for several report formats: &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/json_simple.json"&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/csv_simple.csv?plain=1"&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/junit_simple.xml"&gt;&lt;code&gt;junit&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/sarif_simple.sarif"&gt;&lt;code&gt;sarif&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If none of these formats fit your need, you can create your own report format with a &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-templates-in-go#step-4-writing-a-template"&gt;Go &lt;code&gt;text/template&lt;/code&gt; .tmpl file&lt;/a&gt; and the &lt;code&gt;--report-template&lt;/code&gt; flag. The template can use &lt;a href="https://masterminds.github.io/sprig/"&gt;extended functionality from the &lt;code&gt;Masterminds/sprig&lt;/code&gt; template library&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, the following template provides a custom JSON output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-gotemplate"&gt;# jsonextra.tmpl
[{{ $lastFinding := (sub (len . ) 1) }}
{{- range $i, $finding := . }}{{with $finding}}
    {
        "Description": {{ quote .Description }},
        "StartLine": {{ .StartLine }},
        "EndLine": {{ .EndLine }},
        "StartColumn": {{ .StartColumn }},
        "EndColumn": {{ .EndColumn }},
        "Line": {{ quote .Line }},
        "Match": {{ quote .Match }},
        "Secret": {{ quote .Secret }},
        "File": "{{ .File }}",
        "SymlinkFile": {{ quote .SymlinkFile }},
        "Commit": {{ quote .Commit }},
        "Entropy": {{ .Entropy }},
        "Author": {{ quote .Author }},
        "Email": {{ quote .Email }},
        "Date": {{ quote .Date }},
        "Message": {{ quote .Message }},
        "Tags": [{{ $lastTag := (sub (len .Tags ) 1) }}{{ range $j, $tag := .Tags }}{{ quote . }}{{ if ne $j $lastTag }},{{ end }}{{ end }}],
        "RuleID": {{ quote .RuleID }},
        "Fingerprint": {{ quote .Fingerprint }}
    }{{ if ne $i $lastFinding }},{{ end }}
{{- end}}{{ end }}
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ gitleaks dir ~/leaky-repo/ --report-path "report.json" --report-format template --report-template testdata/report/jsonextra.tmpl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sponsorships&lt;/h2&gt; 
&lt;p align="left"&gt; &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks"&gt;coderabbit.ai&lt;/a&gt;&lt;/h3&gt;
&lt;a href="https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks"&gt; &lt;/a&gt;
&lt;a href="https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks"&gt; &lt;img alt="CodeRabbit.ai Sponsorship" src="https://github.com/gitleaks/gitleaks/assets/15034943/76c30a85-887b-47ca-9956-17a8e55c6c41" width="200"&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;Exit Codes&lt;/h2&gt; 
&lt;p&gt;You can always set the exit code when leaks are encountered with the --exit-code flag. Default exit codes below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;0 - no leaks present
1 - leaks or error encountered
126 - unknown flag
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>getzep/graphiti</title>
      <link>https://github.com/getzep/graphiti</link>
      <description>&lt;p&gt;Build Real-Time Knowledge Graphs for AI Agents&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://www.getzep.com/"&gt; &lt;img src="https://github.com/user-attachments/assets/119c5682-9654-4257-8922-56b7cb8ffd73" width="150" alt="Zep Logo"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1 align="center"&gt; Graphiti &lt;/h1&gt; 
&lt;h2 align="center"&gt; Build Real-Time Knowledge Graphs for AI Agents&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/getzep/Graphiti/actions/workflows/lint.yml"&gt;&lt;img src="https://github.com/getzep/Graphiti/actions/workflows/lint.yml/badge.svg?style=flat" alt="Lint"&gt;&lt;/a&gt; &lt;a href="https://github.com/getzep/Graphiti/actions/workflows/unit_tests.yml"&gt;&lt;img src="https://github.com/getzep/Graphiti/actions/workflows/unit_tests.yml/badge.svg?sanitize=true" alt="Unit Tests"&gt;&lt;/a&gt; &lt;a href="https://github.com/getzep/Graphiti/actions/workflows/typecheck.yml"&gt;&lt;img src="https://github.com/getzep/Graphiti/actions/workflows/typecheck.yml/badge.svg?sanitize=true" alt="MyPy Check"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://img.shields.io/github/stars/getzep/graphiti" alt="GitHub Repo stars"&gt; &lt;a href="https://discord.com/invite/W8Kw6bsgXQ"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?&amp;amp;logo=discord&amp;amp;logoColor=white" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://arxiv.org/abs/2501.13956"&gt;&lt;img src="https://img.shields.io/badge/arXiv-2501.13956-b31b1b.svg?style=flat" alt="arXiv"&gt;&lt;/a&gt; &lt;a href="https://github.com/getzep/graphiti/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/getzep/graphiti?style=flat&amp;amp;label=Release&amp;amp;color=limegreen" alt="Release"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://trendshift.io/repositories/12986" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/12986" alt="getzep%2Fgraphiti | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span&gt;‚≠ê&lt;/span&gt; &lt;em&gt;Help us reach more developers and grow the Graphiti community. Star this repo!&lt;/em&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Check out the new &lt;a href="https://raw.githubusercontent.com/getzep/graphiti/main/mcp_server/README.md"&gt;MCP server for Graphiti&lt;/a&gt;! Give Claude, Cursor, and other MCP clients powerful Knowledge Graph-based memory.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Graphiti is a framework for building and querying temporally-aware knowledge graphs, specifically tailored for AI agents operating in dynamic environments. Unlike traditional retrieval-augmented generation (RAG) methods, Graphiti continuously integrates user interactions, structured and unstructured enterprise data, and external information into a coherent, queryable graph. The framework supports incremental data updates, efficient retrieval, and precise historical queries without requiring complete graph recomputation, making it suitable for developing interactive, context-aware AI applications.&lt;/p&gt; 
&lt;p&gt;Use Graphiti to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Integrate and maintain dynamic user interactions and business data.&lt;/li&gt; 
 &lt;li&gt;Facilitate state-based reasoning and task automation for agents.&lt;/li&gt; 
 &lt;li&gt;Query complex, evolving data with semantic, keyword, and graph-based search methods.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/getzep/graphiti/main/images/graphiti-graph-intro.gif" alt="Graphiti temporal walkthrough" width="700px"&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;A knowledge graph is a network of interconnected facts, such as &lt;em&gt;"Kendra loves Adidas shoes."&lt;/em&gt; Each fact is a "triplet" represented by two entities, or nodes ("Kendra", "Adidas shoes"), and their relationship, or edge ("loves"). Knowledge Graphs have been explored extensively for information retrieval. What makes Graphiti unique is its ability to autonomously build a knowledge graph while handling changing relationships and maintaining historical context.&lt;/p&gt; 
&lt;h2&gt;Graphiti and Zep Memory&lt;/h2&gt; 
&lt;p&gt;Graphiti powers the core of &lt;a href="https://www.getzep.com"&gt;Zep's memory layer&lt;/a&gt; for AI Agents.&lt;/p&gt; 
&lt;p&gt;Using Graphiti, we've demonstrated Zep is the &lt;a href="https://blog.getzep.com/state-of-the-art-agent-memory/"&gt;State of the Art in Agent Memory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Read our paper: &lt;a href="https://arxiv.org/abs/2501.13956"&gt;Zep: A Temporal Knowledge Graph Architecture for Agent Memory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We're excited to open-source Graphiti, believing its potential reaches far beyond AI memory applications.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://arxiv.org/abs/2501.13956"&gt;&lt;img src="https://raw.githubusercontent.com/getzep/graphiti/main/images/arxiv-screenshot.png" alt="Zep: A Temporal Knowledge Graph Architecture for Agent Memory" width="700px"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Why Graphiti?&lt;/h2&gt; 
&lt;p&gt;Traditional RAG approaches often rely on batch processing and static data summarization, making them inefficient for frequently changing data. Graphiti addresses these challenges by providing:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Real-Time Incremental Updates:&lt;/strong&gt; Immediate integration of new data episodes without batch recomputation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bi-Temporal Data Model:&lt;/strong&gt; Explicit tracking of event occurrence and ingestion times, allowing accurate point-in-time queries.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Efficient Hybrid Retrieval:&lt;/strong&gt; Combines semantic embeddings, keyword (BM25), and graph traversal to achieve low-latency queries without reliance on LLM summarization.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom Entity Definitions:&lt;/strong&gt; Flexible ontology creation and support for developer-defined entities through straightforward Pydantic models.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; Efficiently manages large datasets with parallel processing, suitable for enterprise environments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/getzep/graphiti/main/images/graphiti-intro-slides-stock-2.gif" alt="Graphiti structured + unstructured demo" width="700px"&gt; &lt;/p&gt; 
&lt;h2&gt;Graphiti vs. GraphRAG&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Aspect&lt;/th&gt; 
   &lt;th&gt;GraphRAG&lt;/th&gt; 
   &lt;th&gt;Graphiti&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Primary Use&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Static document summarization&lt;/td&gt; 
   &lt;td&gt;Dynamic data management&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Data Handling&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Batch-oriented processing&lt;/td&gt; 
   &lt;td&gt;Continuous, incremental updates&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Knowledge Structure&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Entity clusters &amp;amp; community summaries&lt;/td&gt; 
   &lt;td&gt;Episodic data, semantic entities, communities&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Retrieval Method&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Sequential LLM summarization&lt;/td&gt; 
   &lt;td&gt;Hybrid semantic, keyword, and graph-based search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Adaptability&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Low&lt;/td&gt; 
   &lt;td&gt;High&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Temporal Handling&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Basic timestamp tracking&lt;/td&gt; 
   &lt;td&gt;Explicit bi-temporal tracking&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Contradiction Handling&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;LLM-driven summarization judgments&lt;/td&gt; 
   &lt;td&gt;Temporal edge invalidation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Query Latency&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Seconds to tens of seconds&lt;/td&gt; 
   &lt;td&gt;Typically sub-second latency&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Custom Entity Types&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;Yes, customizable&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Scalability&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Moderate&lt;/td&gt; 
   &lt;td&gt;High, optimized for large datasets&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Graphiti is specifically designed to address the challenges of dynamic and frequently updated datasets, making it particularly suitable for applications requiring real-time interaction and precise historical queries.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Python 3.10 or higher&lt;/li&gt; 
 &lt;li&gt;Neo4j 5.26 / FalkorDB 1.1.2 or higher (serves as the embeddings storage backend)&lt;/li&gt; 
 &lt;li&gt;OpenAI API key (Graphiti defaults to OpenAI for LLM inference and embedding)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Graphiti works best with LLM services that support Structured Output (such as OpenAI and Gemini). Using other services may result in incorrect output schemas and ingestion failures. This is particularly problematic when using smaller models.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Optional:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Google Gemini, Anthropic, or Groq API key (for alternative LLM providers)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] The simplest way to install Neo4j is via &lt;a href="https://neo4j.com/download/"&gt;Neo4j Desktop&lt;/a&gt;. It provides a user-friendly interface to manage Neo4j instances and databases. Alternatively, you can use FalkorDB on-premises via Docker and instantly start with the quickstart example:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -p 6379:6379 -p 3000:3000 -it --rm falkordb/falkordb:latest

&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install graphiti-core
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv add graphiti-core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Installing with FalkorDB Support&lt;/h3&gt; 
&lt;p&gt;If you plan to use FalkorDB as your graph database backend, install with the FalkorDB extra:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install graphiti-core[falkordb]

# or with uv
uv add graphiti-core[falkordb]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;You can also install optional LLM providers as extras:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install with Anthropic support
pip install graphiti-core[anthropic]

# Install with Groq support
pip install graphiti-core[groq]

# Install with Google Gemini support
pip install graphiti-core[google-genai]

# Install with multiple providers
pip install graphiti-core[anthropic,groq,google-genai]

# Install with FalkorDB and LLM providers
pip install graphiti-core[falkordb,anthropic,google-genai]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Graphiti defaults to using OpenAI for LLM inference and embedding. Ensure that an &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; is set in your environment. Support for Anthropic and Groq LLM inferences is available, too. Other LLM providers may be supported via OpenAI compatible APIs.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For a complete working example, see the &lt;a href="https://raw.githubusercontent.com/getzep/graphiti/main/examples/quickstart/README.md"&gt;Quickstart Example&lt;/a&gt; in the examples directory. The quickstart demonstrates:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Connecting to a Neo4j or FalkorDB database&lt;/li&gt; 
 &lt;li&gt;Initializing Graphiti indices and constraints&lt;/li&gt; 
 &lt;li&gt;Adding episodes to the graph (both text and structured JSON)&lt;/li&gt; 
 &lt;li&gt;Searching for relationships (edges) using hybrid search&lt;/li&gt; 
 &lt;li&gt;Reranking search results using graph distance&lt;/li&gt; 
 &lt;li&gt;Searching for nodes using predefined search recipes&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The example is fully documented with clear explanations of each functionality and includes a comprehensive README with setup instructions and next steps.&lt;/p&gt; 
&lt;h2&gt;MCP Server&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;mcp_server&lt;/code&gt; directory contains a Model Context Protocol (MCP) server implementation for Graphiti. This server allows AI assistants to interact with Graphiti's knowledge graph capabilities through the MCP protocol.&lt;/p&gt; 
&lt;p&gt;Key features of the MCP server include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Episode management (add, retrieve, delete)&lt;/li&gt; 
 &lt;li&gt;Entity management and relationship handling&lt;/li&gt; 
 &lt;li&gt;Semantic and hybrid search capabilities&lt;/li&gt; 
 &lt;li&gt;Group management for organizing related data&lt;/li&gt; 
 &lt;li&gt;Graph maintenance operations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The MCP server can be deployed using Docker with Neo4j, making it easy to integrate Graphiti into your AI assistant workflows.&lt;/p&gt; 
&lt;p&gt;For detailed setup instructions and usage examples, see the &lt;a href="https://raw.githubusercontent.com/getzep/graphiti/main/mcp_server/README.md"&gt;MCP server README&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;REST Service&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;server&lt;/code&gt; directory contains an API service for interacting with the Graphiti API. It is built using FastAPI.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/getzep/graphiti/main/server/README.md"&gt;server README&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Optional Environment Variables&lt;/h2&gt; 
&lt;p&gt;In addition to the Neo4j and OpenAi-compatible credentials, Graphiti also has a few optional environment variables. If you are using one of our supported models, such as Anthropic or Voyage models, the necessary environment variables must be set.&lt;/p&gt; 
&lt;h3&gt;Database Configuration&lt;/h3&gt; 
&lt;p&gt;Database names are configured directly in the driver constructors:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Neo4j&lt;/strong&gt;: Database name defaults to &lt;code&gt;neo4j&lt;/code&gt; (hardcoded in Neo4jDriver)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;FalkorDB&lt;/strong&gt;: Database name defaults to &lt;code&gt;default_db&lt;/code&gt; (hardcoded in FalkorDriver)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As of v0.17.0, if you need to customize your database configuration, you can instantiate a database driver and pass it to the Graphiti constructor using the &lt;code&gt;graph_driver&lt;/code&gt; parameter.&lt;/p&gt; 
&lt;h4&gt;Neo4j with Custom Database Name&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from graphiti_core import Graphiti
from graphiti_core.driver.neo4j_driver import Neo4jDriver

# Create a Neo4j driver with custom database name
driver = Neo4jDriver(
    uri="bolt://localhost:7687",
    user="neo4j",
    password="password",
    database="my_custom_database"  # Custom database name
)

# Pass the driver to Graphiti
graphiti = Graphiti(graph_driver=driver)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;FalkorDB with Custom Database Name&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from graphiti_core import Graphiti
from graphiti_core.driver.falkordb_driver import FalkorDriver

# Create a FalkorDB driver with custom database name
driver = FalkorDriver(
    host="localhost",
    port=6379,
    username="falkor_user",  # Optional
    password="falkor_password",  # Optional
    database="my_custom_graph"  # Custom database name
)

# Pass the driver to Graphiti
graphiti = Graphiti(graph_driver=driver)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Performance Configuration&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;USE_PARALLEL_RUNTIME&lt;/code&gt; is an optional boolean variable that can be set to true if you wish to enable Neo4j's parallel runtime feature for several of our search queries. Note that this feature is not supported for Neo4j Community edition or for smaller AuraDB instances, as such this feature is off by default.&lt;/p&gt; 
&lt;h2&gt;Using Graphiti with Azure OpenAI&lt;/h2&gt; 
&lt;p&gt;Graphiti supports Azure OpenAI for both LLM inference and embeddings. Azure deployments often require different endpoints for LLM and embedding services, and separate deployments for default and small models.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from openai import AsyncAzureOpenAI
from graphiti_core import Graphiti
from graphiti_core.llm_client import LLMConfig, OpenAIClient
from graphiti_core.embedder.openai import OpenAIEmbedder, OpenAIEmbedderConfig
from graphiti_core.cross_encoder.openai_reranker_client import OpenAIRerankerClient

# Azure OpenAI configuration - use separate endpoints for different services
api_key = "&amp;lt;your-api-key&amp;gt;"
api_version = "&amp;lt;your-api-version&amp;gt;"
llm_endpoint = "&amp;lt;your-llm-endpoint&amp;gt;"  # e.g., "https://your-llm-resource.openai.azure.com/"
embedding_endpoint = "&amp;lt;your-embedding-endpoint&amp;gt;"  # e.g., "https://your-embedding-resource.openai.azure.com/"

# Create separate Azure OpenAI clients for different services
llm_client_azure = AsyncAzureOpenAI(
    api_key=api_key,
    api_version=api_version,
    azure_endpoint=llm_endpoint
)

embedding_client_azure = AsyncAzureOpenAI(
    api_key=api_key,
    api_version=api_version,
    azure_endpoint=embedding_endpoint
)

# Create LLM Config with your Azure deployment names
azure_llm_config = LLMConfig(
    small_model="gpt-4.1-nano",
    model="gpt-4.1-mini",
)

# Initialize Graphiti with Azure OpenAI clients
graphiti = Graphiti(
    "bolt://localhost:7687",
    "neo4j",
    "password",
    llm_client=OpenAIClient(
        llm_config=azure_llm_config,
        client=llm_client_azure
    ),
    embedder=OpenAIEmbedder(
        config=OpenAIEmbedderConfig(
            embedding_model="text-embedding-3-small-deployment"  # Your Azure embedding deployment name
        ),
        client=embedding_client_azure
    ),
    cross_encoder=OpenAIRerankerClient(
        llm_config=LLMConfig(
            model=azure_llm_config.small_model  # Use small model for reranking
        ),
        client=llm_client_azure
    )
)

# Now you can use Graphiti with Azure OpenAI
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure to replace the placeholder values with your actual Azure OpenAI credentials and deployment names that match your Azure OpenAI service configuration.&lt;/p&gt; 
&lt;h2&gt;Using Graphiti with Google Gemini&lt;/h2&gt; 
&lt;p&gt;Graphiti supports Google's Gemini models for LLM inference, embeddings, and cross-encoding/reranking. To use Gemini, you'll need to configure the LLM client, embedder, and the cross-encoder with your Google API key.&lt;/p&gt; 
&lt;p&gt;Install Graphiti:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv add "graphiti-core[google-genai]"

# or

pip install "graphiti-core[google-genai]"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from graphiti_core import Graphiti
from graphiti_core.llm_client.gemini_client import GeminiClient, LLMConfig
from graphiti_core.embedder.gemini import GeminiEmbedder, GeminiEmbedderConfig
from graphiti_core.cross_encoder.gemini_reranker_client import GeminiRerankerClient

# Google API key configuration
api_key = "&amp;lt;your-google-api-key&amp;gt;"

# Initialize Graphiti with Gemini clients
graphiti = Graphiti(
    "bolt://localhost:7687",
    "neo4j",
    "password",
    llm_client=GeminiClient(
        config=LLMConfig(
            api_key=api_key,
            model="gemini-2.0-flash"
        )
    ),
    embedder=GeminiEmbedder(
        config=GeminiEmbedderConfig(
            api_key=api_key,
            embedding_model="embedding-001"
        )
    ),
    cross_encoder=GeminiRerankerClient(
        config=LLMConfig(
            api_key=api_key,
            model="gemini-2.5-flash-lite-preview-06-17"
        )
    )
)

# Now you can use Graphiti with Google Gemini for all components
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Gemini reranker uses the &lt;code&gt;gemini-2.5-flash-lite-preview-06-17&lt;/code&gt; model by default, which is optimized for cost-effective and low-latency classification tasks. It uses the same boolean classification approach as the OpenAI reranker, leveraging Gemini's log probabilities feature to rank passage relevance.&lt;/p&gt; 
&lt;h2&gt;Using Graphiti with Ollama (Local LLM)&lt;/h2&gt; 
&lt;p&gt;Graphiti supports Ollama for running local LLMs and embedding models via Ollama's OpenAI-compatible API. This is ideal for privacy-focused applications or when you want to avoid API costs.&lt;/p&gt; 
&lt;p&gt;Install the models: ollama pull deepseek-r1:7b # LLM ollama pull nomic-embed-text # embeddings&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from graphiti_core import Graphiti
from graphiti_core.llm_client.config import LLMConfig
from graphiti_core.llm_client.openai_client import OpenAIClient
from graphiti_core.embedder.openai import OpenAIEmbedder, OpenAIEmbedderConfig
from graphiti_core.cross_encoder.openai_reranker_client import OpenAIRerankerClient

# Configure Ollama LLM client
llm_config = LLMConfig(
    api_key="abc",  # Ollama doesn't require a real API key
    model="deepseek-r1:7b",
    small_model="deepseek-r1:7b",
    base_url="http://localhost:11434/v1", # Ollama provides this port
)

llm_client = OpenAIClient(config=llm_config)

# Initialize Graphiti with Ollama clients
graphiti = Graphiti(
    "bolt://localhost:7687",
    "neo4j",
    "password",
    llm_client=llm_client,
    embedder=OpenAIEmbedder(
        config=OpenAIEmbedderConfig(
            api_key="abc",
            embedding_model="nomic-embed-text",
            embedding_dim=768,
            base_url="http://localhost:11434/v1",
        )
    ),
    cross_encoder=OpenAIRerankerClient(client=llm_client, config=llm_config),
)

# Now you can use Graphiti with local Ollama models
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure Ollama is running (&lt;code&gt;ollama serve&lt;/code&gt;) and that you have pulled the models you want to use.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://help.getzep.com/graphiti"&gt;Guides and API documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://help.getzep.com/graphiti/graphiti/quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://help.getzep.com/graphiti/graphiti/lang-graph-agent"&gt;Building an agent with LangChain's LangGraph and Graphiti&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Telemetry&lt;/h2&gt; 
&lt;p&gt;Graphiti collects anonymous usage statistics to help us understand how the framework is being used and improve it for everyone. We believe transparency is important, so here's exactly what we collect and why.&lt;/p&gt; 
&lt;h3&gt;What We Collect&lt;/h3&gt; 
&lt;p&gt;When you initialize a Graphiti instance, we collect:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Anonymous identifier&lt;/strong&gt;: A randomly generated UUID stored locally in &lt;code&gt;~/.cache/graphiti/telemetry_anon_id&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;System information&lt;/strong&gt;: Operating system, Python version, and system architecture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Graphiti version&lt;/strong&gt;: The version you're using&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configuration choices&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;LLM provider type (OpenAI, Azure, Anthropic, etc.)&lt;/li&gt; 
   &lt;li&gt;Database backend (Neo4j, FalkorDB)&lt;/li&gt; 
   &lt;li&gt;Embedder provider (OpenAI, Azure, Voyage, etc.)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;What We Don't Collect&lt;/h3&gt; 
&lt;p&gt;We are committed to protecting your privacy. We &lt;strong&gt;never&lt;/strong&gt; collect:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Personal information or identifiers&lt;/li&gt; 
 &lt;li&gt;API keys or credentials&lt;/li&gt; 
 &lt;li&gt;Your actual data, queries, or graph content&lt;/li&gt; 
 &lt;li&gt;IP addresses or hostnames&lt;/li&gt; 
 &lt;li&gt;File paths or system-specific information&lt;/li&gt; 
 &lt;li&gt;Any content from your episodes, nodes, or edges&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Why We Collect This Data&lt;/h3&gt; 
&lt;p&gt;This information helps us:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Understand which configurations are most popular to prioritize support and testing&lt;/li&gt; 
 &lt;li&gt;Identify which LLM and database providers to focus development efforts on&lt;/li&gt; 
 &lt;li&gt;Track adoption patterns to guide our roadmap&lt;/li&gt; 
 &lt;li&gt;Ensure compatibility across different Python versions and operating systems&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By sharing this anonymous information, you help us make Graphiti better for everyone in the community.&lt;/p&gt; 
&lt;h3&gt;View the Telemetry Code&lt;/h3&gt; 
&lt;p&gt;The Telemetry code &lt;a href="https://raw.githubusercontent.com/getzep/graphiti/main/graphiti_core/telemetry/telemetry.py"&gt;may be found here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How to Disable Telemetry&lt;/h3&gt; 
&lt;p&gt;Telemetry is &lt;strong&gt;opt-out&lt;/strong&gt; and can be disabled at any time. To disable telemetry collection:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Option 1: Environment Variable&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export GRAPHITI_TELEMETRY_ENABLED=false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Option 2: Set in your shell profile&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# For bash users (~/.bashrc or ~/.bash_profile)
echo 'export GRAPHITI_TELEMETRY_ENABLED=false' &amp;gt;&amp;gt; ~/.bashrc

# For zsh users (~/.zshrc)
echo 'export GRAPHITI_TELEMETRY_ENABLED=false' &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Option 3: Set for a specific Python session&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import os
os.environ['GRAPHITI_TELEMETRY_ENABLED'] = 'false'

# Then initialize Graphiti as usual
from graphiti_core import Graphiti
graphiti = Graphiti(...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Telemetry is automatically disabled during test runs (when &lt;code&gt;pytest&lt;/code&gt; is detected).&lt;/p&gt; 
&lt;h3&gt;Technical Details&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Telemetry uses PostHog for anonymous analytics collection&lt;/li&gt; 
 &lt;li&gt;All telemetry operations are designed to fail silently - they will never interrupt your application or affect Graphiti functionality&lt;/li&gt; 
 &lt;li&gt;The anonymous ID is stored locally and is not tied to any personal information&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status and Roadmap&lt;/h2&gt; 
&lt;p&gt;Graphiti is under active development. We aim to maintain API stability while working on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Supporting custom graph schemas: 
  &lt;ul&gt; 
   &lt;li&gt;Allow developers to provide their own defined node and edge classes when ingesting episodes&lt;/li&gt; 
   &lt;li&gt;Enable more flexible knowledge representation tailored to specific use cases&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Enhancing retrieval capabilities with more robust and configurable options&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled&gt; Graphiti MCP Server&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Expanding test coverage to ensure reliability and catch edge cases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We encourage and appreciate all forms of contributions, whether it's code, documentation, addressing GitHub Issues, or answering questions in the Graphiti Discord channel. For detailed guidelines on code contributions, please refer to &lt;a href="https://raw.githubusercontent.com/getzep/graphiti/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Join the &lt;a href="https://discord.com/invite/W8Kw6bsgXQ"&gt;Zep Discord server&lt;/a&gt; and make your way to the &lt;strong&gt;#Graphiti&lt;/strong&gt; channel!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>strapi/strapi</title>
      <link>https://github.com/strapi/strapi</link>
      <description>&lt;p&gt;üöÄ Strapi is the leading open-source headless CMS. It‚Äôs 100% JavaScript/TypeScript, fully customizable, and developer-first.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://strapi.io/#gh-light-mode-only"&gt; &lt;img src="https://strapi.io/assets/strapi-logo-dark.svg?sanitize=true" width="318px" alt="Strapi logo"&gt; &lt;/a&gt; &lt;a href="https://strapi.io/#gh-dark-mode-only"&gt; &lt;img src="https://strapi.io/assets/strapi-logo-light.svg?sanitize=true" width="318px" alt="Strapi logo"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt;Open-source headless CMS, self-hosted or Cloud you‚Äôre in control.&lt;/h3&gt; 
&lt;p align="center"&gt;The leading open-source headless CMS, 100% JavaScript/TypeScript, flexible and fully customizable.&lt;/p&gt; 
&lt;p align="center"&gt;&lt;a href="https://cloud.strapi.io/signups?source=github1"&gt;Cloud&lt;/a&gt; ¬∑ &lt;a href="https://strapi.io/demo?utm_campaign=Growth-Experiments&amp;amp;utm_source=strapi%2Fstrapi%20README.md"&gt;Try live demo&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.npmjs.org/package/@strapi/strapi"&gt; &lt;img src="https://img.shields.io/npm/v/@strapi/strapi/latest.svg?sanitize=true" alt="NPM Version"&gt; &lt;/a&gt; &lt;a href="https://github.com/strapi/strapi/actions/workflows/tests.yml"&gt; &lt;img src="https://github.com/strapi/strapi/actions/workflows/tests.yml/badge.svg?branch=main" alt="Tests"&gt; &lt;/a&gt; &lt;a href="https://discord.strapi.io"&gt; &lt;img src="https://img.shields.io/discord/811989166782021633?label=Discord" alt="Strapi on Discord"&gt; &lt;/a&gt; &lt;a href="https://github.com/strapi/strapi/actions/workflows/nightly.yml"&gt; &lt;img src="https://github.com/strapi/strapi/actions/workflows/nightly.yml/badge.svg?sanitize=true" alt="Strapi Nightly Release Build Status"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;p align="center"&gt; &lt;a href="https://strapi.io"&gt; &lt;img src="https://raw.githubusercontent.com/strapi/strapi/main/public/assets/admin-demo.gif" alt="Administration panel"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;Strapi Community Edition is a free and open-source headless CMS enabling you to manage any content, anywhere.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Self-hosted or Cloud&lt;/strong&gt;: You can host and scale Strapi projects the way you want. You can save time by deploying to &lt;a href="https://cloud.strapi.io/signups?source=github1"&gt;Strapi Cloud&lt;/a&gt; or deploy to the hosting platform you want**: AWS, Azure, Google Cloud, DigitalOcean.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modern Admin Panel&lt;/strong&gt;: Elegant, entirely customizable and a fully extensible admin panel.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-database support&lt;/strong&gt;: You can choose the database you prefer: PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blazing Fast and Robust&lt;/strong&gt;: Built on top of Node.js and TypeScript, Strapi delivers reliable and solid performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Front-end Agnostic&lt;/strong&gt;: Use any front-end framework (React, Next.js, Vue, Angular, etc.), mobile apps or even IoT.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure by default&lt;/strong&gt;: Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful CLI&lt;/strong&gt;: Scaffold projects and APIs on the fly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://docs.strapi.io/developer-docs/latest/getting-started/quick-start.html" target="_blank"&gt;Read the Getting Started tutorial&lt;/a&gt; or follow the steps below:&lt;/p&gt; 
&lt;h3&gt;‚è≥ Installation&lt;/h3&gt; 
&lt;p&gt;Install Strapi with this &lt;strong&gt;Quickstart&lt;/strong&gt; command to create a Strapi project instantly:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Use &lt;strong&gt;yarn&lt;/strong&gt; to install the Strapi project (recommended). &lt;a href="https://yarnpkg.com/lang/en/docs/install/"&gt;Install yarn with these docs&lt;/a&gt;.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;yarn create strapi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Using npx to install the Strapi project.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx create-strapi@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command generates a brand new project with the default features (authentication, permissions, content management, content type builder &amp;amp; file upload).&lt;/p&gt; 
&lt;p&gt;Enjoy üéâ&lt;/p&gt; 
&lt;h3&gt;üñê Requirements&lt;/h3&gt; 
&lt;p&gt;Complete installation requirements can be found in the documentation under &lt;a href="https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment.html"&gt;Installation Requirements&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Supported operating systems&lt;/strong&gt;:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;OS&lt;/th&gt; 
   &lt;th&gt;Recommended&lt;/th&gt; 
   &lt;th&gt;Minimum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;24.04&lt;/td&gt; 
   &lt;td&gt;LTS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Debian&lt;/td&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td&gt;LTS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;RHEL&lt;/td&gt; 
   &lt;td&gt;9&lt;/td&gt; 
   &lt;td&gt;LTS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;14&lt;/td&gt; 
   &lt;td&gt;12&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows Desktop&lt;/td&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows Server&lt;/td&gt; 
   &lt;td&gt;No Support&lt;/td&gt; 
   &lt;td&gt;No Support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Docker&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Strapi only supports maintenance and LTS versions of Node.js. Please refer to the &lt;a href="https://nodejs.org/en/about/releases/"&gt;Node.js release schedule&lt;/a&gt; for more information. NPM versions installed by default with Node.js are supported. Generally it's recommended to use yarn over npm where possible.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Strapi Version&lt;/th&gt; 
   &lt;th&gt;Recommended&lt;/th&gt; 
   &lt;th&gt;Minimum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5.0.0 and up&lt;/td&gt; 
   &lt;td&gt;20.x&lt;/td&gt; 
   &lt;td&gt;18.x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.14.5 and up&lt;/td&gt; 
   &lt;td&gt;20.x&lt;/td&gt; 
   &lt;td&gt;18.x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.11.0 and up&lt;/td&gt; 
   &lt;td&gt;18.x&lt;/td&gt; 
   &lt;td&gt;16.x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.3.9 to 4.10.x&lt;/td&gt; 
   &lt;td&gt;18.x&lt;/td&gt; 
   &lt;td&gt;14.x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4.0.x to 4.3.8&lt;/td&gt; 
   &lt;td&gt;16.x&lt;/td&gt; 
   &lt;td&gt;14.x&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Database&lt;/th&gt; 
   &lt;th&gt;Recommended&lt;/th&gt; 
   &lt;th&gt;Minimum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MySQL&lt;/td&gt; 
   &lt;td&gt;8.0&lt;/td&gt; 
   &lt;td&gt;8.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MariaDB&lt;/td&gt; 
   &lt;td&gt;11.2&lt;/td&gt; 
   &lt;td&gt;10.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PostgreSQL&lt;/td&gt; 
   &lt;td&gt;16.0&lt;/td&gt; 
   &lt;td&gt;14.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SQLite&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;We recommend always using the latest version of Strapi stable to start your new projects&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Content Types Builder&lt;/strong&gt;: Build the most flexible publishing experience for your content managers, by giving them the freedom to create any page on the go with &lt;a href="https://docs.strapi.io/user-docs/content-manager/writing-content#filling-up-fields"&gt;fields&lt;/a&gt;, components and &lt;a href="https://docs.strapi.io/user-docs/content-manager/writing-content#dynamic-zones"&gt;Dynamic Zones&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Media Library&lt;/strong&gt;: Upload your images, videos, audio or documents to the media library. Easily find the right asset, edit and reuse it.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Internationalization&lt;/strong&gt;: The Internationalization (i18n) plugin allows Strapi users to create, manage and distribute localized content in different languages, called "locales"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Role Based Access Control&lt;/strong&gt;: Create an unlimited number of custom roles and permissions for admin and end users.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GraphQL or REST&lt;/strong&gt;: Consume the API using REST or GraphQL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can unlock additional features such as SSO, Audit Logs, Review Workflows in &lt;a href="https://cloud.strapi.io/login?source=github1"&gt;Strapi Cloud&lt;/a&gt; or &lt;a href="https://strapi.io/enterprise?source=github1"&gt;Strapi Enterprise&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://strapi.io/overview"&gt;See more on our website&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href="https://raw.githubusercontent.com/strapi/strapi/develop/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; before submitting a Pull Request to the project.&lt;/p&gt; 
&lt;h2&gt;Community support&lt;/h2&gt; 
&lt;p&gt;For general help using Strapi, please refer to &lt;a href="https://docs.strapi.io"&gt;the official Strapi documentation&lt;/a&gt;. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.strapi.io"&gt;Discord&lt;/a&gt; (For live discussion with the Community and Strapi team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/strapi/strapi"&gt;GitHub&lt;/a&gt; (Bug reports, Contributions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://forum.strapi.io"&gt;Community Forum&lt;/a&gt; (Questions and Discussions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://feedback.strapi.io"&gt;Feedback section&lt;/a&gt; (Roadmap, Feature requests)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/strapijs"&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.facebook.com/Strapi-616063331867161"&gt;Facebook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/strapi"&gt;YouTube Channel&lt;/a&gt; (Learn from Video Tutorials)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migration&lt;/h2&gt; 
&lt;p&gt;Follow our &lt;a href="https://docs.strapi.io/developer-docs/latest/update-migration-guides/migration-guides.html"&gt;migration guides&lt;/a&gt; on the documentation to keep your projects up-to-date.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href="https://feedback.strapi.io"&gt;roadmap&lt;/a&gt; to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See our dedicated &lt;a href="https://github.com/strapi/documentation"&gt;repository&lt;/a&gt; for the Strapi documentation, or view our documentation live:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html"&gt;Developer docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.strapi.io/user-docs/latest/getting-started/introduction.html"&gt;User guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.strapi.io/cloud/intro"&gt;Cloud guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Try live demo&lt;/h2&gt; 
&lt;p&gt;See for yourself what's under the hood by getting access to a &lt;a href="https://strapi.io/demo"&gt;hosted Strapi project&lt;/a&gt; with sample data.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/strapi/strapi/develop/LICENSE"&gt;LICENSE&lt;/a&gt; file for licensing information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hyprwm/Hyprland</title>
      <link>https://github.com/hyprwm/Hyprland</link>
      <description>&lt;p&gt;Hyprland is an independent, highly customizable, dynamic tiling Wayland compositor that doesn't sacrifice on its looks.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/hyprwm/Hyprland/main/assets/header.svg?sanitize=true" width="750" height="300" alt="banner"&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;a href="https://github.com/hyprwm/Hyprland/actions/workflows/ci.yaml"&gt;&lt;img src="https://github.com/hyprwm/Hyprland/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="Badge Workflow"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/hyprwm/Hyprland/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/hyprwm/Hyprland" alt="Badge License"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/languages/top/hyprwm/Hyprland" alt="Badge Language"&gt; &lt;a href="https://github.com/hyprwm/Hyprland/pulls"&gt;&lt;img src="https://img.shields.io/github/issues-pr/hyprwm/Hyprland" alt="Badge Pull Requests"&gt;&lt;/a&gt; &lt;a href="https://github.com/hyprwm/Hyprland/issues"&gt;&lt;img src="https://img.shields.io/github/issues/hyprwm/Hyprland" alt="Badge Issues"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/Hi-mom!-ff69b4" alt="Badge Hi Mom"&gt;&lt;br&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;p&gt;Hyprland is a 100% independent, dynamic tiling Wayland compositor that doesn't sacrifice on its looks.&lt;/p&gt; 
 &lt;p&gt;It provides the latest Wayland features, is highly customizable, has all the eyecandy, the most powerful plugins, easy IPC, much more QoL stuff than other compositors and more... &lt;br&gt; &lt;br&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://wiki.hypr.land/Getting-Started/Installation/"&gt;&lt;kbd&gt;‚ÄÉ&lt;br&gt;‚ÄÉInstall‚ÄÉ&lt;br&gt;‚ÄÉ&lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;‚ÄÉ &lt;strong&gt;&lt;a href="https://wiki.hypr.land/Getting-Started/Master-Tutorial/"&gt;&lt;kbd&gt;‚ÄÉ&lt;br&gt;‚ÄÉQuick Start‚ÄÉ&lt;br&gt;‚ÄÉ&lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;‚ÄÉ &lt;strong&gt;&lt;a href="https://wiki.hypr.land/Configuring/"&gt;&lt;kbd&gt;‚ÄÉ&lt;br&gt;‚ÄÉConfigure‚ÄÉ&lt;br&gt;‚ÄÉ&lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;‚ÄÉ &lt;strong&gt;&lt;a href="https://wiki.hypr.land/Contributing-and-Debugging/"&gt;&lt;kbd&gt;‚ÄÉ&lt;br&gt;‚ÄÉContribute‚ÄÉ&lt;br&gt;‚ÄÉ&lt;/kbd&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;All of the eyecandy: gradient borders, blur, animations, shadows and much more&lt;/li&gt; 
 &lt;li&gt;A lot of customization&lt;/li&gt; 
 &lt;li&gt;100% independent, no wlroots, no libweston, no kwin, no mutter.&lt;/li&gt; 
 &lt;li&gt;Custom bezier curves for the best animations&lt;/li&gt; 
 &lt;li&gt;Powerful plugin support&lt;/li&gt; 
 &lt;li&gt;Built-in plugin manager&lt;/li&gt; 
 &lt;li&gt;Tearing support for better gaming performance&lt;/li&gt; 
 &lt;li&gt;Easily expandable and readable codebase&lt;/li&gt; 
 &lt;li&gt;Fast and active development&lt;/li&gt; 
 &lt;li&gt;Not afraid to provide bleeding-edge features&lt;/li&gt; 
 &lt;li&gt;Config reloaded instantly upon saving&lt;/li&gt; 
 &lt;li&gt;Fully dynamic workspaces&lt;/li&gt; 
 &lt;li&gt;Two built-in layouts and more available as plugins&lt;/li&gt; 
 &lt;li&gt;Global keybinds passed to your apps of choice&lt;/li&gt; 
 &lt;li&gt;Tiling/pseudotiling/floating/fullscreen windows&lt;/li&gt; 
 &lt;li&gt;Special workspaces (scratchpads)&lt;/li&gt; 
 &lt;li&gt;Window groups (tabbed mode)&lt;/li&gt; 
 &lt;li&gt;Powerful window/monitor/layer rules&lt;/li&gt; 
 &lt;li&gt;Socket-based IPC&lt;/li&gt; 
 &lt;li&gt;Native IME and Input Panels Support&lt;/li&gt; 
 &lt;li&gt;and much more...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;br&gt; 
&lt;div align="center"&gt; 
 &lt;h1&gt;Gallery&lt;/h1&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;img src="https://i.ibb.co/XxFY75Mk/greerggergerhtrytghjnyhjn.png" alt="Preview A"&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;img src="https://i.ibb.co/C1yTb0r/falf.png" alt="Preview B"&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;img src="https://i.ibb.co/2Yc4q835/hyprland-preview-b.png" alt="Preview C"&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;h1&gt;Special Thanks&lt;/h1&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://gitlab.freedesktop.org/wlroots/wlroots"&gt;wlroots&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For powering Hyprland in the past&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://gitlab.freedesktop.org/wlroots/wlroots/-/blob/master/tinywl/tinywl.c"&gt;tinywl&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/swaywm/sway"&gt;Sway&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the overkill way&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/inclement/vivarium"&gt;Vivarium&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the simple way&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://codeberg.org/dwl/dwl"&gt;dwl&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do stuff the hacky way&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/WayfireWM/wayfire"&gt;Wayfire&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;For showing how 2 do some graphics stuff&lt;/em&gt;&lt;/p&gt; 
&lt;!----&gt; 
&lt;!--{ Thanks }---------------------------------&gt; 
&lt;!--{ Images }---------------------------------&gt; 
&lt;!--{ Badges }---------------------------------&gt;</description>
    </item>
    
    <item>
      <title>microsoft/markitdown</title>
      <link>https://github.com/microsoft/markitdown</link>
      <description>&lt;p&gt;Python tool for converting files and office documents to Markdown.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MarkItDown&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pypi.org/project/markitdown/"&gt;&lt;img src="https://img.shields.io/pypi/v/markitdown.svg?sanitize=true" alt="PyPI"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/pypi/dd/markitdown" alt="PyPI - Downloads"&gt; &lt;a href="https://github.com/microsoft/autogen"&gt;&lt;img src="https://img.shields.io/badge/Built%20by-AutoGen%20Team-blue" alt="Built by AutoGen Team"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] MarkItDown now offers an MCP (Model Context Protocol) server for integration with LLM applications like Claude Desktop. See &lt;a href="https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp"&gt;markitdown-mcp&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Breaking changes between 0.0.1 to 0.1.0:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Dependencies are now organized into optional feature-groups (further details below). Use &lt;code&gt;pip install 'markitdown[all]'&lt;/code&gt; to have backward-compatible behavior.&lt;/li&gt; 
  &lt;li&gt;convert_stream() now requires a binary file-like object (e.g., a file opened in binary mode, or an io.BytesIO object). This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO.&lt;/li&gt; 
  &lt;li&gt;The DocumentConverter class interface has changed to read from file-like streams rather than file paths. &lt;em&gt;No temporary files are created anymore&lt;/em&gt;. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI (as in these examples), you should not need to change anything.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;MarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to &lt;a href="https://github.com/deanmalmgren/textract"&gt;textract&lt;/a&gt;, but with a focus on preserving important document structure and content as Markdown (including: headings, lists, tables, links, etc.) While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption.&lt;/p&gt; 
&lt;p&gt;MarkItDown currently supports the conversion from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;PDF&lt;/li&gt; 
 &lt;li&gt;PowerPoint&lt;/li&gt; 
 &lt;li&gt;Word&lt;/li&gt; 
 &lt;li&gt;Excel&lt;/li&gt; 
 &lt;li&gt;Images (EXIF metadata and OCR)&lt;/li&gt; 
 &lt;li&gt;Audio (EXIF metadata and speech transcription)&lt;/li&gt; 
 &lt;li&gt;HTML&lt;/li&gt; 
 &lt;li&gt;Text-based formats (CSV, JSON, XML)&lt;/li&gt; 
 &lt;li&gt;ZIP files (iterates over contents)&lt;/li&gt; 
 &lt;li&gt;Youtube URLs&lt;/li&gt; 
 &lt;li&gt;EPubs&lt;/li&gt; 
 &lt;li&gt;... and more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why Markdown?&lt;/h2&gt; 
&lt;p&gt;Markdown is extremely close to plain text, with minimal markup or formatting, but still provides a way to represent important document structure. Mainstream LLMs, such as OpenAI's GPT-4o, natively "&lt;em&gt;speak&lt;/em&gt;" Markdown, and often incorporate Markdown into their responses unprompted. This suggests that they have been trained on vast amounts of Markdown-formatted text, and understand it well. As a side benefit, Markdown conventions are also highly token-efficient.&lt;/p&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;p&gt;MarkItDown requires Python 3.10 or higher. It is recommended to use a virtual environment to avoid dependency conflicts.&lt;/p&gt; 
&lt;p&gt;With the standard Python installation, you can create and activate a virtual environment using the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python -m venv .venv
source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If using &lt;code&gt;uv&lt;/code&gt;, you can create a virtual environment with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv venv --python=3.12 .venv
source .venv/bin/activate
# NOTE: Be sure to use 'uv pip install' rather than just 'pip install' to install packages in this virtual environment
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using Anaconda, you can create a virtual environment with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;conda create -n markitdown python=3.12
conda activate markitdown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To install MarkItDown, use pip: &lt;code&gt;pip install 'markitdown[all]'&lt;/code&gt;. Alternatively, you can install it from the source:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone git@github.com:microsoft/markitdown.git
cd markitdown
pip install -e 'packages/markitdown[all]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Command-Line&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;markitdown path-to-file.pdf &amp;gt; document.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or use &lt;code&gt;-o&lt;/code&gt; to specify the output file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;markitdown path-to-file.pdf -o document.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also pipe content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cat path-to-file.pdf | markitdown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Optional Dependencies&lt;/h3&gt; 
&lt;p&gt;MarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the &lt;code&gt;[all]&lt;/code&gt; option. However, you can also install them individually for more control. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install 'markitdown[pdf, docx, pptx]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will install only the dependencies for PDF, DOCX, and PPTX files.&lt;/p&gt; 
&lt;p&gt;At the moment, the following optional dependencies are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;[all]&lt;/code&gt; Installs all optional dependencies&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[pptx]&lt;/code&gt; Installs dependencies for PowerPoint files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[docx]&lt;/code&gt; Installs dependencies for Word files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[xlsx]&lt;/code&gt; Installs dependencies for Excel files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[xls]&lt;/code&gt; Installs dependencies for older Excel files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[pdf]&lt;/code&gt; Installs dependencies for PDF files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[outlook]&lt;/code&gt; Installs dependencies for Outlook messages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[az-doc-intel]&lt;/code&gt; Installs dependencies for Azure Document Intelligence&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[audio-transcription]&lt;/code&gt; Installs dependencies for audio transcription of wav and mp3 files&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[youtube-transcription]&lt;/code&gt; Installs dependencies for fetching YouTube video transcription&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Plugins&lt;/h3&gt; 
&lt;p&gt;MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;markitdown --list-plugins
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable plugins use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;markitdown --use-plugins path-to-file.pdf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To find available plugins, search GitHub for the hashtag &lt;code&gt;#markitdown-plugin&lt;/code&gt;. To develop a plugin, see &lt;code&gt;packages/markitdown-sample-plugin&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Azure Document Intelligence&lt;/h3&gt; 
&lt;p&gt;To use Microsoft Document Intelligence for conversion:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;markitdown path-to-file.pdf -o document.md -d -e "&amp;lt;document_intelligence_endpoint&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More information about how to set up an Azure Document Intelligence Resource can be found &lt;a href="https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Python API&lt;/h3&gt; 
&lt;p&gt;Basic usage in Python:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from markitdown import MarkItDown

md = MarkItDown(enable_plugins=False) # Set to True to enable plugins
result = md.convert("test.xlsx")
print(result.text_content)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Document Intelligence conversion in Python:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from markitdown import MarkItDown

md = MarkItDown(docintel_endpoint="&amp;lt;document_intelligence_endpoint&amp;gt;")
result = md.convert("test.pdf")
print(result.text_content)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use Large Language Models for image descriptions, provide &lt;code&gt;llm_client&lt;/code&gt; and &lt;code&gt;llm_model&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from markitdown import MarkItDown
from openai import OpenAI

client = OpenAI()
md = MarkItDown(llm_client=client, llm_model="gpt-4o")
result = md.convert("example.jpg")
print(result.text_content)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t markitdown:latest .
docker run --rm -i markitdown:latest &amp;lt; ~/your-file.pdf &amp;gt; output.md
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href="https://cla.opensource.microsoft.com"&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; 
&lt;p&gt;This project has adopted the &lt;a href="https://opensource.microsoft.com/codeofconduct/"&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href="https://opensource.microsoft.com/codeofconduct/faq/"&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href="mailto:opencode@microsoft.com"&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; 
&lt;h3&gt;How to Contribute&lt;/h3&gt; 
&lt;p&gt;You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as 'open for contribution' and 'open for reviewing' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;&lt;/th&gt; 
    &lt;th&gt;All&lt;/th&gt; 
    &lt;th&gt;Especially Needs Help from Community&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://github.com/microsoft/markitdown/issues"&gt;All Issues&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://github.com/microsoft/markitdown/issues?q=is%3Aissue+is%3Aopen+label%3A%22open+for+contribution%22"&gt;Issues open for contribution&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;strong&gt;PRs&lt;/strong&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://github.com/microsoft/markitdown/pulls"&gt;All PRs&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;a href="https://github.com/microsoft/markitdown/pulls?q=is%3Apr+is%3Aopen+label%3A%22open+for+reviewing%22"&gt;PRs open for reviewing&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;h3&gt;Running Tests and Checks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Navigate to the MarkItDown package:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;cd packages/markitdown
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;code&gt;hatch&lt;/code&gt; in your environment and run tests:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;pip install hatch  # Other ways of installing hatch: https://hatch.pypa.io/dev/install/
hatch shell
hatch test
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(Alternative) Use the Devcontainer which has all the dependencies installed:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;# Reopen the project in Devcontainer and run:
hatch test
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run pre-commit checks before submitting a PR: &lt;code&gt;pre-commit run --all-files&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing 3rd-party Plugins&lt;/h3&gt; 
&lt;p&gt;You can also contribute by creating and sharing 3rd party plugins. See &lt;code&gt;packages/markitdown-sample-plugin&lt;/code&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Trademarks&lt;/h2&gt; 
&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href="https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general"&gt;Microsoft's Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lightricks/LTX-Video</title>
      <link>https://github.com/Lightricks/LTX-Video</link>
      <description>&lt;p&gt;Official repository for LTX-Video&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;LTX-Video&lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://www.lightricks.com/ltxv"&gt;&lt;img src="https://img.shields.io/badge/Website-LTXV-181717?logo=google-chrome" alt="Website"&gt;&lt;/a&gt; &lt;a href="https://huggingface.co/Lightricks/LTX-Video"&gt;&lt;img src="https://img.shields.io/badge/HuggingFace-Model-orange?logo=huggingface" alt="Model"&gt;&lt;/a&gt; &lt;a href="https://app.ltx.studio/motion-workspace?videoModel=ltxv-13b"&gt;&lt;img src="https://img.shields.io/badge/Demo-Try%20Now-brightgreen?logo=vercel" alt="Demo"&gt;&lt;/a&gt; &lt;a href="https://arxiv.org/abs/2501.00103"&gt;&lt;img src="https://img.shields.io/badge/Paper-arXiv-B31B1B?logo=arxiv" alt="Paper"&gt;&lt;/a&gt; &lt;a href="https://github.com/Lightricks/LTX-Video-Trainer"&gt;&lt;img src="https://img.shields.io/badge/LTXV-Trainer-9146FF?logo=github" alt="Trainer"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/Mn8BRgUKKy"&gt;&lt;img src="https://img.shields.io/badge/Join-Discord-5865F2?logo=discord" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;This is the official repository for LTX-Video.&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#news"&gt;What's new&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#models"&gt;Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#quick-start-guide"&gt;Quick Start Guide&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#online-inference"&gt;Online demo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#run-locally"&gt;Run locally&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#inference"&gt;Inference&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#comfyui-integration"&gt;ComfyUI Integration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#diffusers-integration"&gt;Diffusers Integration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#model-user-guide"&gt;Model User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#community-contribution"&gt;Community Contribution&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#training"&gt;Training&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#control-models"&gt;Control Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#join-us-"&gt;Join Us!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#acknowledgement"&gt;Acknowledgement&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;LTX-Video is the first DiT-based video generation model that can generate high-quality videos in &lt;em&gt;real-time&lt;/em&gt;. It can generate 30 FPS videos at 1216√ó704 resolution, faster than it takes to watch them. The model is trained on a large-scale dataset of diverse videos and can generate high-resolution videos with realistic and diverse content.&lt;/p&gt; 
&lt;p&gt;The model supports image-to-video, keyframe-based animation, video extension (both forward and backward), video-to-video transformations, and any combination of these features.&lt;/p&gt; 
&lt;h3&gt;Image-to-video examples&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00001.gif" alt="example1"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00002.gif" alt="example2"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00003.gif" alt="example3"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00004.gif" alt="example4"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00005.gif" alt="example5"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00006.gif" alt="example6"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00007.gif" alt="example7"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00008.gif" alt="example8"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_i2v_example_00009.gif" alt="example9"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Controlled video examples&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_ic_2v_example_00000.gif" alt="control0"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_ic_2v_example_00001.gif" alt="control1"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_ic_2v_example_00002.gif" alt="control2"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_ic_2v_example_00003.gif" alt="control3"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;img src="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/docs/_static/ltx-video_ic_2v_example_00004.gif" alt="control4"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;News&lt;/h1&gt; 
&lt;h2&gt;July, 16th, 2025: New Distilled models v0.9.8 with up to 60 seconds of video:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Long shot generation in LTXV-13B! 
  &lt;ul&gt; 
   &lt;li&gt;LTX-Video now supports up to 60 seconds of video.&lt;/li&gt; 
   &lt;li&gt;Compatible also with the official IC-LoRAs.&lt;/li&gt; 
   &lt;li&gt;Try now in &lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/tree/master/example_workflows/ltxv-13b-i2v-long-multi-prompt.json"&gt;ComfyUI&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Release a new distilled models: 
  &lt;ul&gt; 
   &lt;li&gt;13B distilled model &lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-13b-0.9.8-distilled.yaml"&gt;ltxv-13b-0.9.8-distilled&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;2B distilled model &lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-2b-0.9.8-distilled.yaml"&gt;ltxv-2b-0.9.8-distilled&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Both models are distilled from the same base model &lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-13b-0.9.8-dev.yaml"&gt;ltxv-13b-0.9.8-dev&lt;/a&gt; and are compatible for use together in the same multiscale pipeline.&lt;/li&gt; 
   &lt;li&gt;Improved prompt understanding and detail generation&lt;/li&gt; 
   &lt;li&gt;Includes corresponding FP8 weights and workflows.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Release a new detailer model &lt;a href="https://huggingface.co/Lightricks/LTX-Video-ICLoRA-detailer-13b-0.9.8"&gt;LTX-Video-ICLoRA-detailer-13B-0.9.8&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Available in &lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/tree/master/example_workflows/ltxv-13b-upscale.json"&gt;ComfyUI&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;July, 8th, 2025: New Control Models Released!&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Released three new control models for LTX-Video on HuggingFace: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Depth Control&lt;/strong&gt;: &lt;a href="https://huggingface.co/Lightricks/LTX-Video-ICLoRA-depth-13b-0.9.7"&gt;LTX-Video-ICLoRA-depth-13b-0.9.7&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Pose Control&lt;/strong&gt;: &lt;a href="https://huggingface.co/Lightricks/LTX-Video-ICLoRA-pose-13b-0.9.7"&gt;LTX-Video-ICLoRA-pose-13b-0.9.7&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Canny Control&lt;/strong&gt;: &lt;a href="https://huggingface.co/Lightricks/LTX-Video-ICLoRA-canny-13b-0.9.7"&gt;LTX-Video-ICLoRA-canny-13b-0.9.7&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;May, 14th, 2025: New distilled model 13B v0.9.7:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Release a new 13B distilled model &lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-13b-0.9.7-distilled.safetensors"&gt;ltxv-13b-0.9.7-distilled&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Amazing for iterative work - generates HD videos in 10 seconds, with low-res preview after just 3 seconds (on H100)!&lt;/li&gt; 
   &lt;li&gt;Does not require classifier-free guidance and spatio-temporal guidance.&lt;/li&gt; 
   &lt;li&gt;Supports sampling with 8 (recommended), or less diffusion steps.&lt;/li&gt; 
   &lt;li&gt;Also released a LoRA version of the distilled model, &lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-13b-0.9.7-distilled-lora128.safetensors"&gt;ltxv-13b-0.9.7-distilled-lora128&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Requires only 1GB of VRAM&lt;/li&gt; 
     &lt;li&gt;Can be used with the full 13B model for fast inference&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Release a new quantized distilled model &lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-13b-0.9.7-distilled-fp8.safetensors"&gt;ltxv-13b-0.9.7-distilled-fp8&lt;/a&gt; for &lt;em&gt;real-time&lt;/em&gt; generation (on H100) with even less VRAM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;May, 5th, 2025: New model 13B v0.9.7:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Release a new 13B model &lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-13b-0.9.7-dev.safetensors"&gt;ltxv-13b-0.9.7-dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Release a new quantized model &lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-13b-0.9.7-dev-fp8.safetensors"&gt;ltxv-13b-0.9.7-dev-fp8&lt;/a&gt; for faster inference with less VRam&lt;/li&gt; 
 &lt;li&gt;Release a new upscalers 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-temporal-upscaler-0.9.7.safetensors"&gt;ltxv-temporal-upscaler-0.9.7&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-spatial-upscaler-0.9.7.safetensors"&gt;ltxv-spatial-upscaler-0.9.7&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Breakthrough prompt adherence and physical understanding.&lt;/li&gt; 
 &lt;li&gt;New Pipeline for multi-scale video rendering for fast and high quality results&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;April, 15th, 2025: New checkpoints v0.9.6:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Release a new checkpoint &lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-2b-0.9.6-dev-04-25.safetensors"&gt;ltxv-2b-0.9.6-dev-04-25&lt;/a&gt; with improved quality&lt;/li&gt; 
 &lt;li&gt;Release a new distilled model &lt;a href="https://huggingface.co/Lightricks/LTX-Video/blob/main/ltxv-2b-0.9.6-distilled-04-25.safetensors"&gt;ltxv-2b-0.9.6-distilled-04-25&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;15x faster inference than non-distilled model.&lt;/li&gt; 
   &lt;li&gt;Does not require classifier-free guidance and spatio-temporal guidance.&lt;/li&gt; 
   &lt;li&gt;Supports sampling with 8 (recommended), or less diffusion steps.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Improved prompt adherence, motion quality and fine details.&lt;/li&gt; 
 &lt;li&gt;New default resolution and FPS: 1216 √ó 704 pixels at 30 FPS 
  &lt;ul&gt; 
   &lt;li&gt;Still real time on H100 with the distilled model.&lt;/li&gt; 
   &lt;li&gt;Other resolutions and FPS are still supported.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Support stochastic inference (can improve visual quality when using the distilled model)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;March, 5th, 2025: New checkpoint v0.9.5&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;New license for commercial use (&lt;a href="https://huggingface.co/Lightricks/LTX-Video/ltx-video-2b-v0.9.5.license.txt"&gt;OpenRail-M&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Release a new checkpoint v0.9.5 with improved quality&lt;/li&gt; 
 &lt;li&gt;Support keyframes and video extension&lt;/li&gt; 
 &lt;li&gt;Support higher resolutions&lt;/li&gt; 
 &lt;li&gt;Improved prompt understanding&lt;/li&gt; 
 &lt;li&gt;Improved VAE&lt;/li&gt; 
 &lt;li&gt;New online web app in &lt;a href="https://app.ltx.studio/ltx-video"&gt;LTX-Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Automatic prompt enhancement&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;February, 20th, 2025: More inference options&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Improve STG (Spatiotemporal Guidance) for LTX-Video&lt;/li&gt; 
 &lt;li&gt;Support MPS on macOS with PyTorch 2.3.0&lt;/li&gt; 
 &lt;li&gt;Add support for 8-bit model, LTX-VideoQ8&lt;/li&gt; 
 &lt;li&gt;Add TeaCache for LTX-Video&lt;/li&gt; 
 &lt;li&gt;Add &lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#comfyui-integration"&gt;ComfyUI-LTXTricks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Add Diffusion-Pipe&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;December 31st, 2024: Research paper&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Release the &lt;a href="https://arxiv.org/abs/2501.00103"&gt;research paper&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;December 20th, 2024: New checkpoint v0.9.1&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Release a new checkpoint v0.9.1 with improved quality&lt;/li&gt; 
 &lt;li&gt;Support for STG / PAG&lt;/li&gt; 
 &lt;li&gt;Support loading checkpoints of LTX-Video in Diffusers format (conversion is done on-the-fly)&lt;/li&gt; 
 &lt;li&gt;Support offloading unused parts to CPU&lt;/li&gt; 
 &lt;li&gt;Support the new timestep-conditioned VAE decoder&lt;/li&gt; 
 &lt;li&gt;Reference contributions from the community in the readme file&lt;/li&gt; 
 &lt;li&gt;Relax transformers dependency&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;November 21th, 2024: Initial release v0.9.0&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Initial release of LTX-Video&lt;/li&gt; 
 &lt;li&gt;Support text-to-video and image-to-video generation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Models &amp;amp; Workflows&lt;/h1&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
   &lt;th&gt;inference.py config&lt;/th&gt; 
   &lt;th&gt;ComfyUI workflow (Recommended)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ltxv-13b-0.9.8-dev&lt;/td&gt; 
   &lt;td&gt;Highest quality, requires more VRAM&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-13b-0.9.8-dev.yaml"&gt;ltxv-13b-0.9.8-dev.yaml&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/raw/master/example_workflows/ltxv-13b-i2v-base.json"&gt;ltxv-13b-i2v-base.json&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://app.ltx.studio/motion-workspace?videoModel=ltxv-13b"&gt;ltxv-13b-0.9.8-mix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Mix ltxv-13b-dev and ltxv-13b-distilled in the same multi-scale rendering workflow for balanced speed-quality&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/raw/master/example_workflows/ltxv-13b-i2v-mixed-multiscale.json"&gt;ltxv-13b-i2v-mixed-multiscale.json&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://app.ltx.studio/motion-workspace?videoModel=ltxv"&gt;ltxv-13b-0.9.8-distilled&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Faster, less VRAM usage, slight quality reduction compared to 13b. Ideal for rapid iterations&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-13b-0.9.8-distilled.yaml"&gt;ltxv-13b-0.9.8-distilled.yaml&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/raw/master/example_workflows/13b-distilled/ltxv-13b-dist-i2v-base.json"&gt;ltxv-13b-dist-i2v-base.json&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ltxv-2b-0.9.8-distilled&lt;/td&gt; 
   &lt;td&gt;Smaller model, slight quality reduction compared to 13b distilled. Ideal for fast generation with light VRAM usage&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-2b-0.9.8-distilled.yaml"&gt;ltxv-2b-0.9.8-distilled.yaml&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ltxv-13b-0.9.8-dev-fp8&lt;/td&gt; 
   &lt;td&gt;Quantized version of ltxv-13b&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-13b-0.9.8-dev-fp8.yaml"&gt;ltxv-13b-0.9.8-dev-fp8.yaml&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/raw/master/example_workflows/ltxv-13b-i2v-base-fp8.json"&gt;ltxv-13b-i2v-base-fp8.json&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ltxv-13b-0.9.8-distilled-fp8&lt;/td&gt; 
   &lt;td&gt;Quantized version of ltxv-13b-distilled&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-13b-0.9.8-distilled-fp8.yaml"&gt;ltxv-13b-0.9.8-distilled-fp8.yaml&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/raw/master/example_workflows/13b-distilled/ltxv-13b-dist-i2v-base-fp8.json"&gt;ltxv-13b-dist-i2v-base-fp8.json&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ltxv-2b-0.9.8-distilled-fp8&lt;/td&gt; 
   &lt;td&gt;Quantized version of ltxv-2b-distilled&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-2b-0.9.8-distilled-fp8.yaml"&gt;ltxv-2b-0.9.8-distilled-fp8.yaml&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ltxv-2b-0.9.6&lt;/td&gt; 
   &lt;td&gt;Good quality, lower VRAM requirement than ltxv-13b&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-2b-0.9.6-dev.yaml"&gt;ltxv-2b-0.9.6-dev.yaml&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/raw/master/example_workflows/low_level/ltxvideo-i2v.json"&gt;ltxvideo-i2v.json&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ltxv-2b-0.9.6-distilled&lt;/td&gt; 
   &lt;td&gt;15√ó faster, real-time capable, fewer steps needed, no STG/CFG required&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/LTX-Video/raw/main/configs/ltxv-2b-0.9.6-distilled.yaml"&gt;ltxv-2b-0.9.6-distilled.yaml&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/raw/master/example_workflows/low_level/ltxvideo-i2v-distilled.json"&gt;ltxvideo-i2v-distilled.json&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Quick Start Guide&lt;/h1&gt; 
&lt;h2&gt;Online inference&lt;/h2&gt; 
&lt;p&gt;The model is accessible right away via the following links:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://app.ltx.studio/motion-workspace?videoModel=ltxv-13b"&gt;LTX-Studio image-to-video (13B-mix)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://app.ltx.studio/motion-workspace?videoModel=ltxv"&gt;LTX-Studio image-to-video (13B distilled)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fal.ai/models/fal-ai/ltx-video-13b-dev/image-to-video"&gt;Fal.ai image-to-video (13B full)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fal.ai/models/fal-ai/ltx-video-13b-distilled/image-to-video"&gt;Fal.ai image-to-video (13B distilled)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://replicate.com/lightricks/ltx-video"&gt;Replicate image-to-video&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Run locally&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;The codebase was tested with Python 3.10.5, CUDA version 12.2, and supports PyTorch &amp;gt;= 2.1.2. On macOS, MPS was tested with PyTorch 2.3.0, and should support PyTorch == 2.3 or &amp;gt;= 2.6.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/Lightricks/LTX-Video.git
cd LTX-Video

# create env
python -m venv env
source env/bin/activate
python -m pip install -e .\[inference\]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;FP8 Kernels (optional)&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://github.com/Lightricks/LTXVideo-Q8-Kernels"&gt;FP8 kernels&lt;/a&gt; developed for LTX-Video provide performance boost on supported graphics cards (Ada architecture and later). To install FP8 kernels, follow the instructions in that repository.&lt;/p&gt; 
&lt;h3&gt;Inference&lt;/h3&gt; 
&lt;p&gt;üìù &lt;strong&gt;Note:&lt;/strong&gt; For best results, we recommend using our &lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#comfyui-integration"&gt;ComfyUI&lt;/a&gt; workflow. We're working on updating the inference.py script to match the high quality and output fidelity of ComfyUI.&lt;/p&gt; 
&lt;p&gt;To use our model, please follow the inference code in &lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/inference.py"&gt;inference.py&lt;/a&gt;:&lt;/p&gt; 
&lt;h4&gt;For image-to-video generation:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python inference.py --prompt "PROMPT" --conditioning_media_paths IMAGE_PATH --conditioning_start_frames 0 --height HEIGHT --width WIDTH --num_frames NUM_FRAMES --seed SEED --pipeline_config configs/ltxv-13b-0.9.8-distilled.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Extending a video:&lt;/h4&gt; 
&lt;p&gt;üìù &lt;strong&gt;Note:&lt;/strong&gt; Input video segments must contain a multiple of 8 frames plus 1 (e.g., 9, 17, 25, etc.), and the target frame number should be a multiple of 8.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python inference.py --prompt "PROMPT" --conditioning_media_paths VIDEO_PATH --conditioning_start_frames START_FRAME --height HEIGHT --width WIDTH --num_frames NUM_FRAMES --seed SEED --pipeline_config configs/ltxv-13b-0.9.8-distilled.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;For video generation with multiple conditions:&lt;/h4&gt; 
&lt;p&gt;You can now generate a video conditioned on a set of images and/or short video segments. Simply provide a list of paths to the images or video segments you want to condition on, along with their target frame numbers in the generated video. You can also specify the conditioning strength for each item (default: 1.0).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python inference.py --prompt "PROMPT" --conditioning_media_paths IMAGE_OR_VIDEO_PATH_1 IMAGE_OR_VIDEO_PATH_2 --conditioning_start_frames TARGET_FRAME_1 TARGET_FRAME_2 --height HEIGHT --width WIDTH --num_frames NUM_FRAMES --seed SEED --pipeline_config configs/ltxv-13b-0.9.8-distilled.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using as a library&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from ltx_video.inference import infer, InferenceConfig

infer(
    InferenceConfig(
        pipeline_config="configs/ltxv-13b-0.9.8-distilled.yaml",
        prompt=PROMPT,
        height=HEIGHT,
        width=WIDTH,
        num_frames=NUM_FRAMES,
        output_path="output.mp4",
    )
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;ComfyUI Integration&lt;/h2&gt; 
&lt;p&gt;To use our model with ComfyUI, please follow the instructions at &lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/"&gt;https://github.com/Lightricks/ComfyUI-LTXVideo/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Diffusers Integration&lt;/h2&gt; 
&lt;p&gt;To use our model with the Diffusers Python library, check out the &lt;a href="https://huggingface.co/docs/diffusers/main/en/api/pipelines/ltx_video"&gt;official documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Diffusers also support an 8-bit version of LTX-Video, &lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#ltx-videoq8"&gt;see details below&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Model User Guide&lt;/h1&gt; 
&lt;h2&gt;üìù Prompt Engineering&lt;/h2&gt; 
&lt;p&gt;When writing prompts, focus on detailed, chronological descriptions of actions and scenes. Include specific movements, appearances, camera angles, and environmental details - all in a single flowing paragraph. Start directly with the action, and keep descriptions literal and precise. Think like a cinematographer describing a shot list. Keep within 200 words. For best results, build your prompts using this structure:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Start with main action in a single sentence&lt;/li&gt; 
 &lt;li&gt;Add specific details about movements and gestures&lt;/li&gt; 
 &lt;li&gt;Describe character/object appearances precisely&lt;/li&gt; 
 &lt;li&gt;Include background and environment details&lt;/li&gt; 
 &lt;li&gt;Specify camera angles and movements&lt;/li&gt; 
 &lt;li&gt;Describe lighting and colors&lt;/li&gt; 
 &lt;li&gt;Note any changes or sudden events&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://raw.githubusercontent.com/Lightricks/LTX-Video/main/#introduction"&gt;examples&lt;/a&gt; for more inspiration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Automatic Prompt Enhancement&lt;/h3&gt; 
&lt;p&gt;When using &lt;code&gt;LTXVideoPipeline&lt;/code&gt; directly, you can enable prompt enhancement by setting &lt;code&gt;enhance_prompt=True&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;üéÆ Parameter Guide&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Resolution Preset: Higher resolutions for detailed scenes, lower for faster generation and simpler scenes. The model works on resolutions that are divisible by 32 and number of frames that are divisible by 8 + 1 (e.g. 257). In case the resolution or number of frames are not divisible by 32 or 8 + 1, the input will be padded with -1 and then cropped to the desired resolution and number of frames. The model works best on resolutions under 720 x 1280 and number of frames below 257&lt;/li&gt; 
 &lt;li&gt;Seed: Save seed values to recreate specific styles or compositions you like&lt;/li&gt; 
 &lt;li&gt;Guidance Scale: 3-3.5 are the recommended values&lt;/li&gt; 
 &lt;li&gt;Inference Steps: More steps (40+) for quality, fewer steps (20-30) for speed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;üìù For advanced parameters usage, please see &lt;code&gt;python inference.py --help&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Community Contribution&lt;/h2&gt; 
&lt;h3&gt;ComfyUI-LTXTricks üõ†Ô∏è&lt;/h3&gt; 
&lt;p&gt;A community project providing additional nodes for enhanced control over the LTX Video model. It includes implementations of advanced techniques like RF-Inversion, RF-Edit, FlowEdit, and more. These nodes enable workflows such as Image and Video to Video (I+V2V), enhanced sampling via Spatiotemporal Skip Guidance (STG), and interpolation with precise frame settings.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Repository:&lt;/strong&gt; &lt;a href="https://github.com/logtd/ComfyUI-LTXTricks"&gt;ComfyUI-LTXTricks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Features:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;üîÑ &lt;strong&gt;RF-Inversion:&lt;/strong&gt; Implements &lt;a href="https://rf-inversion.github.io/"&gt;RF-Inversion&lt;/a&gt; with an &lt;a href="https://github.com/logtd/ComfyUI-LTXTricks/raw/main/example_workflows/example_ltx_inversion.json"&gt;example workflow here&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;‚úÇÔ∏è &lt;strong&gt;RF-Edit:&lt;/strong&gt; Implements &lt;a href="https://github.com/wangjiangshan0725/RF-Solver-Edit"&gt;RF-Solver-Edit&lt;/a&gt; with an &lt;a href="https://github.com/logtd/ComfyUI-LTXTricks/raw/main/example_workflows/example_ltx_rf_edit.json"&gt;example workflow here&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;üåä &lt;strong&gt;FlowEdit:&lt;/strong&gt; Implements &lt;a href="https://github.com/fallenshock/FlowEdit"&gt;FlowEdit&lt;/a&gt; with an &lt;a href="https://github.com/logtd/ComfyUI-LTXTricks/raw/main/example_workflows/example_ltx_flow_edit.json"&gt;example workflow here&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;üé• &lt;strong&gt;I+V2V:&lt;/strong&gt; Enables Video to Video with a reference image. &lt;a href="https://github.com/logtd/ComfyUI-LTXTricks/raw/main/example_workflows/example_ltx_iv2v.json"&gt;Example workflow&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;‚ú® &lt;strong&gt;Enhance:&lt;/strong&gt; Partial implementation of &lt;a href="https://junhahyung.github.io/STGuidance/"&gt;STGuidance&lt;/a&gt;. &lt;a href="https://github.com/logtd/ComfyUI-LTXTricks/raw/main/example_workflows/example_ltxv_stg.json"&gt;Example workflow&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;üñºÔ∏è &lt;strong&gt;Interpolation and Frame Setting:&lt;/strong&gt; Nodes for precise control of latents per frame. &lt;a href="https://github.com/logtd/ComfyUI-LTXTricks/raw/main/example_workflows/example_ltx_interpolation.json"&gt;Example workflow&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;LTX-VideoQ8 üé± &lt;a id="ltx-videoq8"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;LTX-VideoQ8&lt;/strong&gt; is an 8-bit optimized version of &lt;a href="https://github.com/Lightricks/LTX-Video"&gt;LTX-Video&lt;/a&gt;, designed for faster performance on NVIDIA ADA GPUs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Repository:&lt;/strong&gt; &lt;a href="https://github.com/KONAKONA666/LTX-Video"&gt;LTX-VideoQ8&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Features:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;üöÄ Up to 3X speed-up with no accuracy loss&lt;/li&gt; 
   &lt;li&gt;üé• Generate 720x480x121 videos in under a minute on RTX 4060 (8GB VRAM)&lt;/li&gt; 
   &lt;li&gt;üõ†Ô∏è Fine-tune 2B transformer models with precalculated latents&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Community Discussion:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/StableDiffusion/comments/1h79ks2/fast_ltx_video_on_rtx_4060_and_other_ada_gpus/"&gt;Reddit Thread&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Diffusers integration:&lt;/strong&gt; A diffusers integration for the 8-bit model is already out! &lt;a href="https://github.com/sayakpaul/q8-ltx-video"&gt;Details here&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;TeaCache for LTX-Video üçµ &lt;a id="TeaCache"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;TeaCache&lt;/strong&gt; is a training-free caching approach that leverages timestep differences across model outputs to accelerate LTX-Video inference by up to 2x without significant visual quality degradation.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Repository:&lt;/strong&gt; &lt;a href="https://github.com/ali-vilab/TeaCache/tree/main/TeaCache4LTX-Video"&gt;TeaCache4LTX-Video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Features:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;üöÄ Speeds up LTX-Video inference.&lt;/li&gt; 
   &lt;li&gt;üìä Adjustable trade-offs between speed (up to 2x) and visual quality using configurable parameters.&lt;/li&gt; 
   &lt;li&gt;üõ†Ô∏è No retraining required: Works directly with existing models.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Your Contribution&lt;/h3&gt; 
&lt;p&gt;...is welcome! If you have a project or tool that integrates with LTX-Video, please let us know by opening an issue or pull request.&lt;/p&gt; 
&lt;h1&gt;‚ö°Ô∏è Training&lt;/h1&gt; 
&lt;p&gt;We provide an open-source repository for fine-tuning the LTX-Video model: &lt;a href="https://github.com/Lightricks/LTX-Video-Trainer"&gt;LTX-Video-Trainer&lt;/a&gt;. This repository supports both the 2B and 13B model variants, enabling full fine-tuning as well as LoRA (Low-Rank Adaptation) fine-tuning for more efficient training. This includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Control LoRAs&lt;/strong&gt;: Train custom control models like depth, pose, and canny control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Effect LoRAs&lt;/strong&gt;: Create specialized effects and transformations for video generation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Explore the repository to customize the model for your specific use cases! More information and training instructions can be found in the &lt;a href="https://github.com/Lightricks/LTX-Video-Trainer/raw/main/README.md"&gt;README&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;üé¨ Control Models&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo"&gt;ComfyUI-LTXVideo&lt;/a&gt; repository now contains workflows and models for 3 specialized models that enable precise control over LTX-Video generation:&lt;/p&gt; 
&lt;p&gt;Pose Control, Depth Control and Canny Control&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example ComfyUI Workflow (for all control types):&lt;/strong&gt; &lt;a href="https://github.com/Lightricks/ComfyUI-LTXVideo/raw/master/example_workflows/ic_lora/ic-lora.json"&gt;ic-lora.json&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;üöÄ Join Us&lt;/h1&gt; 
&lt;p&gt;Want to work on cutting-edge AI research and make a real impact on millions of users worldwide?&lt;/p&gt; 
&lt;p&gt;At &lt;strong&gt;Lightricks&lt;/strong&gt;, an AI-first company, we're revolutionizing how visual content is created.&lt;/p&gt; 
&lt;p&gt;If you are passionate about AI, computer vision, and video generation, we would love to hear from you!&lt;/p&gt; 
&lt;p&gt;Please visit our &lt;a href="https://careers.lightricks.com/careers?query=&amp;amp;office=all&amp;amp;department=R%26D"&gt;careers page&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h1&gt;Acknowledgement&lt;/h1&gt; 
&lt;p&gt;We are grateful for the following awesome projects when implementing LTX-Video:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebookresearch/DiT"&gt;DiT&lt;/a&gt; and &lt;a href="https://github.com/PixArt-alpha/PixArt-alpha"&gt;PixArt-alpha&lt;/a&gt;: vision transformers for image generation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;üìÑ Our tech report is out! If you find our work helpful, please ‚≠êÔ∏è star the repository and cite our paper.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@article{HaCohen2024LTXVideo,
  title={LTX-Video: Realtime Video Latent Diffusion},
  author={HaCohen, Yoav and Chiprut, Nisan and Brazowski, Benny and Shalem, Daniel and Moshe, Dudu and Richardson, Eitan and Levin, Eran and Shiran, Guy and Zabari, Nir and Gordon, Ori and Panet, Poriya and Weissbuch, Sapir and Kulikov, Victor and Bitterman, Yaki and Melumian, Zeev and Bibi, Ofir},
  journal={arXiv preprint arXiv:2501.00103},
  year={2024}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>lastmile-ai/mcp-agent</title>
      <link>https://github.com/lastmile-ai/mcp-agent</link>
      <description>&lt;p&gt;Build effective agents using Model Context Protocol and simple workflow patterns&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://mcp-agent.com"&gt;&lt;img src="https://github.com/user-attachments/assets/c8d059e5-bd56-4ea2-a72d-807fb4897bde" alt="Logo" width="300"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;em&gt;Build effective agents with Model Context Protocol using simple, composable patterns.&lt;/em&gt; &lt;/p&gt;
&lt;p align="center"&gt; &lt;a href="https://github.com/lastmile-ai/mcp-agent/tree/main/examples" target="_blank"&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.anthropic.com/research/building-effective-agents" target="_blank"&gt;&lt;strong&gt;Building Effective Agents&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://modelcontextprotocol.io/introduction" target="_blank"&gt;&lt;strong&gt;MCP&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://mcp-agent.com"&gt;&lt;img src="https://img.shields.io/badge/docs-8F?style=flat&amp;amp;link=https%3A%2F%2Fmcp-agent.com%2F"&gt;&lt;/a&gt;&lt;a&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/mcp-agent/"&gt;&lt;img src="https://img.shields.io/pypi/v/mcp-agent?color=%2334D058&amp;amp;label=pypi"&gt;&lt;/a&gt; &lt;a href="https://github.com/lastmile-ai/mcp-agent/issues"&gt;&lt;img src="https://img.shields.io/github/issues-raw/lastmile-ai/mcp-agent"&gt;&lt;/a&gt; &lt;a href="https://lmai.link/discord/mcp-agent"&gt;&lt;img src="https://shields.io/discord/1089284610329952357" alt="discord"&gt;&lt;/a&gt; &lt;img alt="Pepy Total Downloads" src="https://img.shields.io/pepy/dt/mcp-agent?label=pypi%20%7C%20downloads"&gt; &lt;a href="https://github.com/lastmile-ai/mcp-agent/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/pypi/l/mcp-agent"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://trendshift.io/repositories/13216" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/13216" alt="lastmile-ai%2Fmcp-agent | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;mcp-agent&lt;/code&gt;&lt;/strong&gt; is a simple, composable framework to build agents using &lt;a href="https://modelcontextprotocol.io/introduction"&gt;Model Context Protocol&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Inspiration&lt;/strong&gt;: Anthropic announced 2 foundational updates for AI application developers:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://www.anthropic.com/news/model-context-protocol"&gt;Model Context Protocol&lt;/a&gt; - a standardized interface to let any software be accessible to AI assistants via MCP servers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.anthropic.com/research/building-effective-agents"&gt;Building Effective Agents&lt;/a&gt; - a seminal writeup on simple, composable patterns for building production-ready AI agents.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;code&gt;mcp-agent&lt;/code&gt; puts these two foundational pieces into an AI application framework:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;It handles the pesky business of managing the lifecycle of MCP server connections so you don't have to.&lt;/li&gt; 
 &lt;li&gt;It implements every pattern described in Building Effective Agents, and does so in a &lt;em&gt;composable&lt;/em&gt; way, allowing you to chain these patterns together.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: It implements &lt;a href="https://github.com/openai/swarm"&gt;OpenAI's Swarm&lt;/a&gt; pattern for multi-agent orchestration, but in a model-agnostic way.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Altogether, this is the simplest and easiest way to build robust agent applications. Much like MCP, this project is in early development. We welcome all kinds of &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/CONTRIBUTING.md"&gt;contributions&lt;/a&gt;, feedback and your help in growing this to become a new standard.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;We recommend using &lt;a href="https://docs.astral.sh/uv/"&gt;uv&lt;/a&gt; to manage your Python projects:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv add "mcp-agent"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install mcp-agent
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] The &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples"&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory has several example applications to get started with. To run an example, clone this repo, then:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cd examples/basic/mcp_basic_agent # Or any other example
cp mcp_agent.secrets.yaml.example mcp_agent.secrets.yaml # Update API keys
uv run main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here is a basic "finder" agent that uses the fetch and filesystem servers to look up a file, read a blog and write a tweet. &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/basic/mcp_basic_agent/"&gt;Example link&lt;/a&gt;:&lt;/p&gt; 
&lt;details open&gt; 
 &lt;summary&gt;finder_agent.py&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import asyncio
import os

from mcp_agent.app import MCPApp
from mcp_agent.agents.agent import Agent
from mcp_agent.workflows.llm.augmented_llm_openai import OpenAIAugmentedLLM

app = MCPApp(name="hello_world_agent")

async def example_usage():
    async with app.run() as mcp_agent_app:
        logger = mcp_agent_app.logger
        # This agent can read the filesystem or fetch URLs
        finder_agent = Agent(
            name="finder",
            instruction="""You can read local files or fetch URLs.
                Return the requested information when asked.""",
            server_names=["fetch", "filesystem"], # MCP servers this Agent can use
        )

        async with finder_agent:
            # Automatically initializes the MCP servers and adds their tools for LLM use
            tools = await finder_agent.list_tools()
            logger.info(f"Tools available:", data=tools)

            # Attach an OpenAI LLM to the agent (defaults to GPT-4o)
            llm = await finder_agent.attach_llm(OpenAIAugmentedLLM)

            # This will perform a file lookup and read using the filesystem server
            result = await llm.generate_str(
                message="Show me what's in README.md verbatim"
            )
            logger.info(f"README.md contents: {result}")

            # Uses the fetch server to fetch the content from URL
            result = await llm.generate_str(
                message="Print the first two paragraphs from https://www.anthropic.com/research/building-effective-agents"
            )
            logger.info(f"Blog intro: {result}")

            # Multi-turn interactions by default
            result = await llm.generate_str("Summarize that in a 128-char tweet")
            logger.info(f"Tweet: {result}")

if __name__ == "__main__":
    asyncio.run(example_usage())

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;mcp_agent.config.yaml&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;execution_engine: asyncio
logger:
  transports: [console] # You can use [file, console] for both
  level: debug
  path: "logs/mcp-agent.jsonl" # Used for file transport
  # For dynamic log filenames:
  # path_settings:
  #   path_pattern: "logs/mcp-agent-{unique_id}.jsonl"
  #   unique_id: "timestamp"  # Or "session_id"
  #   timestamp_format: "%Y%m%d_%H%M%S"

mcp:
  servers:
    fetch:
      command: "uvx"
      args: ["mcp-server-fetch"]
    filesystem:
      command: "npx"
      args:
        [
          "-y",
          "@modelcontextprotocol/server-filesystem",
          "&amp;lt;add_your_directories&amp;gt;",
        ]

openai:
  # Secrets (API keys, etc.) are stored in an mcp_agent.secrets.yaml file which can be gitignored
  default_model: gpt-4o
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Agent output&lt;/summary&gt; 
 &lt;img width="2398" alt="Image" src="https://github.com/user-attachments/assets/eaa60fdf-bcc6-460b-926e-6fa8534e9089"&gt; 
&lt;/details&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#why-use-mcp-agent"&gt;Why use mcp-agent?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#examples"&gt;Example Applications&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#claude-desktop"&gt;Claude Desktop&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#streamlit"&gt;Streamlit&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#gmail-agent"&gt;Gmail Agent&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#simple-rag-chatbot"&gt;RAG&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#marimo"&gt;Marimo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#python"&gt;Python&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#swarm"&gt;Swarm (CLI)&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#core-components"&gt;Core Concepts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#workflows"&gt;Workflows Patterns&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#augmentedllm"&gt;Augmented LLM&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#parallel"&gt;Parallel&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#router"&gt;Router&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#intentclassifier"&gt;Intent-Classifier&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#orchestrator-workers"&gt;Orchestrator-Workers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#evaluator-optimizer"&gt;Evaluator-Optimizer&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#swarm-1"&gt;OpenAI Swarm&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#advanced"&gt;Advanced&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#composability"&gt;Composing multiple workflows&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#signaling-and-human-input"&gt;Signaling and Human input&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#app-config"&gt;App Config&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#mcp-server-management"&gt;MCP Server Management&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#faqs"&gt;FAQs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why use &lt;code&gt;mcp-agent&lt;/code&gt;?&lt;/h2&gt; 
&lt;p&gt;There are too many AI frameworks out there already. But &lt;code&gt;mcp-agent&lt;/code&gt; is the only one that is purpose-built for a shared protocol - &lt;a href="https://modelcontextprotocol.io/introduction"&gt;MCP&lt;/a&gt;. It is also the most lightweight, and is closer to an agent pattern library than a framework.&lt;/p&gt; 
&lt;p&gt;As &lt;a href="https://github.com/punkpeye/awesome-mcp-servers"&gt;more services become MCP-aware&lt;/a&gt;, you can use mcp-agent to build robust and controllable AI agents that can leverage those services out-of-the-box.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Before we go into the core concepts of mcp-agent, let's show what you can build with it.&lt;/p&gt; 
&lt;p&gt;In short, you can build any kind of AI application with mcp-agent: multi-agent collaborative workflows, human-in-the-loop workflows, RAG pipelines and more.&lt;/p&gt; 
&lt;h3&gt;Claude Desktop&lt;/h3&gt; 
&lt;p&gt;You can integrate mcp-agent apps into MCP clients like Claude Desktop.&lt;/p&gt; 
&lt;h4&gt;mcp-agent server&lt;/h4&gt; 
&lt;p&gt;This app wraps an mcp-agent application inside an MCP server, and exposes that server to Claude Desktop. The app exposes agents and workflows that Claude Desktop can invoke to service of the user's request.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/7807cffd-dba7-4f0c-9c70-9482fd7e0699"&gt;https://github.com/user-attachments/assets/7807cffd-dba7-4f0c-9c70-9482fd7e0699&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This demo shows a multi-agent evaluation task where each agent evaluates aspects of an input poem, and then an aggregator summarizes their findings into a final response.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;: Starting from a user's request over text, the application:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;dynamically defines agents to do the job&lt;/li&gt; 
 &lt;li&gt;uses the appropriate workflow to orchestrate those agents (in this case the Parallel workflow)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/basic/mcp_server_aggregator"&gt;examples/basic/mcp_server_aggregator&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Huge thanks to &lt;a href="https://github.com/StreetLamb"&gt;Jerron Lim (@StreetLamb)&lt;/a&gt; for developing and contributing this example!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Streamlit&lt;/h3&gt; 
&lt;p&gt;You can deploy mcp-agent apps using Streamlit.&lt;/p&gt; 
&lt;h4&gt;Gmail agent&lt;/h4&gt; 
&lt;p&gt;This app is able to perform read and write actions on gmail using text prompts -- i.e. read, delete, send emails, mark as read/unread, etc. It uses an MCP server for Gmail.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/54899cac-de24-4102-bd7e-4b2022c956e3"&gt;https://github.com/user-attachments/assets/54899cac-de24-4102-bd7e-4b2022c956e3&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href="https://github.com/jasonsum/gmail-mcp-server/raw/add-mcp-agent-streamlit/streamlit_app.py"&gt;gmail-mcp-server&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Huge thanks to &lt;a href="https://github.com/jasonsum"&gt;Jason Summer (@jasonsum)&lt;/a&gt; for developing and contributing this example!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Simple RAG Chatbot&lt;/h4&gt; 
&lt;p&gt;This app uses a Qdrant vector database (via an MCP server) to do Q&amp;amp;A over a corpus of text.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/f4dcd227-cae9-4a59-aa9e-0eceeb4acaf4"&gt;https://github.com/user-attachments/assets/f4dcd227-cae9-4a59-aa9e-0eceeb4acaf4&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/usecases/streamlit_mcp_rag_agent/"&gt;examples/usecases/streamlit_mcp_rag_agent&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Huge thanks to &lt;a href="https://github.com/StreetLamb"&gt;Jerron Lim (@StreetLamb)&lt;/a&gt; for developing and contributing this example!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Marimo&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/marimo-team/marimo"&gt;Marimo&lt;/a&gt; is a reactive Python notebook that replaces Jupyter and Streamlit. Here's the "file finder" agent from &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#quickstart"&gt;Quickstart&lt;/a&gt; implemented in Marimo:&lt;/p&gt; 
&lt;img src="https://github.com/user-attachments/assets/139a95a5-e3ac-4ea7-9c8f-bad6577e8597" width="400"&gt; 
&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/usecases/marimo_mcp_basic_agent/"&gt;examples/usecases/marimo_mcp_basic_agent&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Huge thanks to &lt;a href="https://github.com/akshayka"&gt;Akshay Agrawal (@akshayka)&lt;/a&gt; for developing and contributing this example!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;p&gt;You can write mcp-agent apps as Python scripts or Jupyter notebooks.&lt;/p&gt; 
&lt;h4&gt;Swarm&lt;/h4&gt; 
&lt;p&gt;This example demonstrates a multi-agent setup for handling different customer service requests in an airline context using the Swarm workflow pattern. The agents can triage requests, handle flight modifications, cancellations, and lost baggage cases.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/b314d75d-7945-4de6-965b-7f21eb14a8bd"&gt;https://github.com/user-attachments/assets/b314d75d-7945-4de6-965b-7f21eb14a8bd&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Link to code&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflows/workflow_swarm/"&gt;examples/workflows/workflow_swarm&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Core Components&lt;/h2&gt; 
&lt;p&gt;The following are the building blocks of the mcp-agent framework:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/app.py"&gt;MCPApp&lt;/a&gt;&lt;/strong&gt;: global state and app configuration&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MCP server management&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/gen_client.py"&gt;&lt;code&gt;gen_client&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/mcp_connection_manager.py"&gt;&lt;code&gt;MCPConnectionManager&lt;/code&gt;&lt;/a&gt; to easily connect to MCP servers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/agents/agent.py"&gt;Agent&lt;/a&gt;&lt;/strong&gt;: An Agent is an entity that has access to a set of MCP servers and exposes them to an LLM as tool calls. It has a name and purpose (instruction).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/llm/augmented_llm.py"&gt;AugmentedLLM&lt;/a&gt;&lt;/strong&gt;: An LLM that is enhanced with tools provided from a collection of MCP servers. Every Workflow pattern described below is an &lt;code&gt;AugmentedLLM&lt;/code&gt; itself, allowing you to compose and chain them together.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Everything in the framework is a derivative of these core capabilities.&lt;/p&gt; 
&lt;h2&gt;Workflows&lt;/h2&gt; 
&lt;p&gt;mcp-agent provides implementations for every pattern in Anthropic‚Äôs &lt;a href="https://www.anthropic.com/research/building-effective-agents"&gt;Building Effective Agents&lt;/a&gt;, as well as the OpenAI &lt;a href="https://github.com/openai/swarm"&gt;Swarm&lt;/a&gt; pattern. Each pattern is model-agnostic, and exposed as an &lt;code&gt;AugmentedLLM&lt;/code&gt;, making everything very composable.&lt;/p&gt; 
&lt;h3&gt;AugmentedLLM&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/llm/augmented_llm.py"&gt;AugmentedLLM&lt;/a&gt; is an LLM that has access to MCP servers and functions via Agents.&lt;/p&gt; 
&lt;p&gt;LLM providers implement the AugmentedLLM interface to expose 3 functions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;generate&lt;/code&gt;: Generate message(s) given a prompt, possibly over multiple iterations and making tool calls as needed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;generate_str&lt;/code&gt;: Calls &lt;code&gt;generate&lt;/code&gt; and returns result as a string output.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;generate_structured&lt;/code&gt;: Uses &lt;a href="https://github.com/instructor-ai/instructor"&gt;Instructor&lt;/a&gt; to return the generated result as a Pydantic model.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additionally, &lt;code&gt;AugmentedLLM&lt;/code&gt; has memory, to keep track of long or short-term history.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;from mcp_agent.agents.agent import Agent
from mcp_agent.workflows.llm.augmented_llm_anthropic import AnthropicAugmentedLLM

finder_agent = Agent(
    name="finder",
    instruction="You are an agent with filesystem + fetch access. Return the requested file or URL contents.",
    server_names=["fetch", "filesystem"],
)

async with finder_agent:
   llm = await finder_agent.attach_llm(AnthropicAugmentedLLM)

   result = await llm.generate_str(
      message="Print the first 2 paragraphs of https://www.anthropic.com/research/building-effective-agents",
      # Can override model, tokens and other defaults
   )
   logger.info(f"Result: {result}")

   # Multi-turn conversation
   result = await llm.generate_str(
      message="Summarize those paragraphs in a 128 character tweet",
   )
   logger.info(f"Result: {result}")
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/parallel/parallel_llm.py"&gt;Parallel&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F406bb032ca007fd1624f261af717d70e6ca86286-2401x1000.png&amp;amp;w=3840&amp;amp;q=75" alt="Parallel workflow (Image credit: Anthropic)"&gt;&lt;/p&gt; 
&lt;p&gt;Fan-out tasks to multiple sub-agents and fan-in the results. Each subtask is an AugmentedLLM, as is the overall Parallel workflow, meaning each subtask can optionally be a more complex workflow itself.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflows/workflow_parallel/main.py"&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;proofreader = Agent(name="proofreader", instruction="Review grammar...")
fact_checker = Agent(name="fact_checker", instruction="Check factual consistency...")
style_enforcer = Agent(name="style_enforcer", instruction="Enforce style guidelines...")

grader = Agent(name="grader", instruction="Combine feedback into a structured report.")

parallel = ParallelLLM(
    fan_in_agent=grader,
    fan_out_agents=[proofreader, fact_checker, style_enforcer],
    llm_factory=OpenAIAugmentedLLM,
)

result = await parallel.generate_str("Student short story submission: ...", RequestParams(model="gpt4-o"))
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/router/"&gt;Router&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F5c0c0e9fe4def0b584c04d37849941da55e5e71c-2401x1000.png&amp;amp;w=3840&amp;amp;q=75" alt="Router workflow (Image credit: Anthropic)"&gt;&lt;/p&gt; 
&lt;p&gt;Given an input, route to the &lt;code&gt;top_k&lt;/code&gt; most relevant categories. A category can be an Agent, an MCP server or a regular function.&lt;/p&gt; 
&lt;p&gt;mcp-agent provides several router implementations, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/router/router_embedding.py"&gt;&lt;code&gt;EmbeddingRouter&lt;/code&gt;&lt;/a&gt;: uses embedding models for classification&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/router/router_llm.py"&gt;&lt;code&gt;LLMRouter&lt;/code&gt;&lt;/a&gt;: uses LLMs for classification&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflows/workflow_router/main.py"&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;def print_hello_world:
     print("Hello, world!")

finder_agent = Agent(name="finder", server_names=["fetch", "filesystem"])
writer_agent = Agent(name="writer", server_names=["filesystem"])

llm = OpenAIAugmentedLLM()
router = LLMRouter(
    llm=llm,
    agents=[finder_agent, writer_agent],
    functions=[print_hello_world],
)

results = await router.route( # Also available: route_to_agent, route_to_server
    request="Find and print the contents of README.md verbatim",
    top_k=1
)
chosen_agent = results[0].result
async with chosen_agent:
    ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/intent_classifier/"&gt;IntentClassifier&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;A close sibling of Router, the Intent Classifier pattern identifies the &lt;code&gt;top_k&lt;/code&gt; Intents that most closely match a given input. Just like a Router, mcp-agent provides both an &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/intent_classifier/intent_classifier_embedding.py"&gt;embedding&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/intent_classifier/intent_classifier_llm.py"&gt;LLM-based&lt;/a&gt; intent classifier.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/evaluator_optimizer/evaluator_optimizer.py"&gt;Evaluator-Optimizer&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F14f51e6406ccb29e695da48b17017e899a6119c7-2401x1000.png&amp;amp;w=3840&amp;amp;q=75" alt="Evaluator-optimizer workflow (Image credit: Anthropic)"&gt;&lt;/p&gt; 
&lt;p&gt;One LLM (the ‚Äúoptimizer‚Äù) refines a response, another (the ‚Äúevaluator‚Äù) critiques it until a response exceeds a quality criteria.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflows/workflow_evaluator_optimizer/main.py"&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;optimizer = Agent(name="cover_letter_writer", server_names=["fetch"], instruction="Generate a cover letter ...")
evaluator = Agent(name="critiquer", instruction="Evaluate clarity, specificity, relevance...")

llm = EvaluatorOptimizerLLM(
    optimizer=optimizer,
    evaluator=evaluator,
    llm_factory=OpenAIAugmentedLLM,
    min_rating=QualityRating.EXCELLENT, # Keep iterating until the minimum quality bar is reached
)

result = await eo_llm.generate_str("Write a job cover letter for an AI framework developer role at LastMile AI.")
print("Final refined cover letter:", result)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/orchestrator/orchestrator.py"&gt;Orchestrator-workers&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F8985fc683fae4780fb34eab1365ab78c7e51bc8e-2401x1000.png&amp;amp;w=3840&amp;amp;q=75" alt="Orchestrator workflow (Image credit: Anthropic)"&gt;&lt;/p&gt; 
&lt;p&gt;A higher-level LLM generates a plan, then assigns them to sub-agents, and synthesizes the results. The Orchestrator workflow automatically parallelizes steps that can be done in parallel, and blocks on dependencies.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflows/workflow_orchestrator_worker/main.py"&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;finder_agent = Agent(name="finder", server_names=["fetch", "filesystem"])
writer_agent = Agent(name="writer", server_names=["filesystem"])
proofreader = Agent(name="proofreader", ...)
fact_checker = Agent(name="fact_checker", ...)
style_enforcer = Agent(name="style_enforcer", instructions="Use APA style guide from ...", server_names=["fetch"])

orchestrator = Orchestrator(
    llm_factory=AnthropicAugmentedLLM,
    available_agents=[finder_agent, writer_agent, proofreader, fact_checker, style_enforcer],
)

task = "Load short_story.md, evaluate it, produce a graded_report.md with multiple feedback aspects."
result = await orchestrator.generate_str(task, RequestParams(model="gpt-4o"))
print(result)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/workflows/swarm/swarm.py"&gt;Swarm&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;OpenAI has an experimental multi-agent pattern called &lt;a href="https://github.com/openai/swarm"&gt;Swarm&lt;/a&gt;, which we provide a model-agnostic reference implementation for in mcp-agent.&lt;/p&gt; 
&lt;img src="https://github.com/openai/swarm/raw/main/assets/swarm_diagram.png?raw=true" width="500"&gt; 
&lt;p&gt;The mcp-agent Swarm pattern works seamlessly with MCP servers, and is exposed as an &lt;code&gt;AugmentedLLM&lt;/code&gt;, allowing for composability with other patterns above.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflows/workflow_swarm/main.py"&gt;Link to full example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;triage_agent = SwarmAgent(...)
flight_mod_agent = SwarmAgent(...)
lost_baggage_agent = SwarmAgent(...)

# The triage agent decides whether to route to flight_mod_agent or lost_baggage_agent
swarm = AnthropicSwarm(agent=triage_agent, context_variables={...})

test_input = "My bag was not delivered!"
result = await swarm.generate_str(test_input)
print("Result:", result)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Advanced&lt;/h2&gt; 
&lt;h3&gt;Composability&lt;/h3&gt; 
&lt;p&gt;An example of composability is using an &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#evaluator-optimizer"&gt;Evaluator-Optimizer&lt;/a&gt; workflow as the planner LLM inside the &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/#orchestrator-workers"&gt;Orchestrator&lt;/a&gt; workflow. Generating a high-quality plan to execute is important for robust behavior, and an evaluator-optimizer can help ensure that.&lt;/p&gt; 
&lt;p&gt;Doing so is seamless in mcp-agent, because each workflow is implemented as an &lt;code&gt;AugmentedLLM&lt;/code&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;optimizer = Agent(name="plan_optimizer", server_names=[...], instruction="Generate a plan given an objective ...")
evaluator = Agent(name="plan_evaluator", instruction="Evaluate logic, ordering and precision of plan......")

planner_llm = EvaluatorOptimizerLLM(
    optimizer=optimizer,
    evaluator=evaluator,
    llm_factory=OpenAIAugmentedLLM,
    min_rating=QualityRating.EXCELLENT,
)

orchestrator = Orchestrator(
    llm_factory=AnthropicAugmentedLLM,
    available_agents=[finder_agent, writer_agent, proofreader, fact_checker, style_enforcer],
    planner=planner_llm # It's that simple
)

...
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Signaling and Human Input&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Signaling&lt;/strong&gt;: The framework can pause/resume tasks. The agent or LLM might ‚Äúsignal‚Äù that it needs user input, so the workflow awaits. A developer may signal during a workflow to seek approval or review before continuing with a workflow.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Human Input&lt;/strong&gt;: If an Agent has a &lt;code&gt;human_input_callback&lt;/code&gt;, the LLM can call a &lt;code&gt;__human_input__&lt;/code&gt; tool to request user input mid-workflow.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/workflows/workflow_swarm/main.py"&gt;Swarm example&lt;/a&gt; shows this in action.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;from mcp_agent.human_input.handler import console_input_callback

lost_baggage = SwarmAgent(
    name="Lost baggage traversal",
    instruction=lambda context_variables: f"""
        {
        FLY_AIR_AGENT_PROMPT.format(
            customer_context=context_variables.get("customer_context", "None"),
            flight_context=context_variables.get("flight_context", "None"),
        )
    }\n Lost baggage policy: policies/lost_baggage_policy.md""",
    functions=[
        escalate_to_agent,
        initiate_baggage_search,
        transfer_to_triage,
        case_resolved,
    ],
    server_names=["fetch", "filesystem"],
    human_input_callback=console_input_callback, # Request input from the console
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;App Config&lt;/h3&gt; 
&lt;p&gt;Create an &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/schema/mcp-agent.config.schema.json"&gt;&lt;code&gt;mcp_agent.config.yaml&lt;/code&gt;&lt;/a&gt; and a gitignored &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/basic/mcp_basic_agent/mcp_agent.secrets.yaml.example"&gt;&lt;code&gt;mcp_agent.secrets.yaml&lt;/code&gt;&lt;/a&gt; to define MCP app configuration. This controls logging, execution, LLM provider APIs, and MCP server configuration.&lt;/p&gt; 
&lt;h3&gt;MCP server management&lt;/h3&gt; 
&lt;p&gt;mcp-agent makes it trivial to connect to MCP servers. Create an &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/schema/mcp-agent.config.schema.json"&gt;&lt;code&gt;mcp_agent.config.yaml&lt;/code&gt;&lt;/a&gt; to define server configuration under the &lt;code&gt;mcp&lt;/code&gt; section:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;mcp:
  servers:
    fetch:
      command: "uvx"
      args: ["mcp-server-fetch"]
      description: "Fetch content at URLs from the world wide web"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/gen_client.py"&gt;&lt;code&gt;gen_client&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Manage the lifecycle of an MCP server within an async context manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from mcp_agent.mcp.gen_client import gen_client

async with gen_client("fetch") as fetch_client:
    # Fetch server is initialized and ready to use
    result = await fetch_client.list_tools()

# Fetch server is automatically disconnected/shutdown
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The gen_client function makes it easy to spin up connections to MCP servers.&lt;/p&gt; 
&lt;h4&gt;Persistent server connections&lt;/h4&gt; 
&lt;p&gt;In many cases, you want an MCP server to stay online for persistent use (e.g. in a multi-step tool use workflow). For persistent connections, use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/(src/mcp_agent/mcp/gen_client.py)"&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/gen_client.py"&gt;&lt;code&gt;disconnect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from mcp_agent.mcp.gen_client import connect, disconnect

fetch_client = None
try:
     fetch_client = connect("fetch")
     result = await fetch_client.list_tools()
finally:
     disconnect("fetch")
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/mcp_connection_manager.py"&gt;&lt;code&gt;MCPConnectionManager&lt;/code&gt;&lt;/a&gt; For even more fine-grained control over server connections, you can use the MCPConnectionManager.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;from mcp_agent.context import get_current_context
from mcp_agent.mcp.mcp_connection_manager import MCPConnectionManager

context = get_current_context()
connection_manager = MCPConnectionManager(context.server_registry)

async with connection_manager:
fetch_client = await connection_manager.get_server("fetch") # Initializes fetch server
result = fetch_client.list_tool()
fetch_client2 = await connection_manager.get_server("fetch") # Reuses same server connection

# All servers managed by connection manager are automatically disconnected/shut down
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;MCP Server Aggregator&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/mcp/mcp_aggregator.py"&gt;&lt;code&gt;MCPAggregator&lt;/code&gt;&lt;/a&gt; acts as a "server-of-servers". It provides a single MCP server interface for interacting with multiple MCP servers. This allows you to expose tools from multiple servers to LLM applications.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;from mcp_agent.mcp.mcp_aggregator import MCPAggregator

aggregator = await MCPAggregator.create(server_names=["fetch", "filesystem"])

async with aggregator:
   # combined list of tools exposed by 'fetch' and 'filesystem' servers
   tools = await aggregator.list_tools()

   # namespacing -- invokes the 'fetch' server to call the 'fetch' tool
   fetch_result = await aggregator.call_tool(name="fetch-fetch", arguments={"url": "https://www.anthropic.com/research/building-effective-agents"})

   # no namespacing -- first server in the aggregator exposing that tool wins
   read_file_result = await aggregator.call_tool(name="read_file", arguments={})
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome any and all kinds of contributions. Please see the &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/CONTRIBUTING.md"&gt;CONTRIBUTING guidelines&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Special Mentions&lt;/h3&gt; 
&lt;p&gt;There have already been incredible community contributors who are driving this project forward:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evalstate"&gt;Shaun Smith (@evalstate)&lt;/a&gt; -- who has been leading the charge on countless complex improvements, both to &lt;code&gt;mcp-agent&lt;/code&gt; and generally to the MCP ecosystem.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StreetLamb"&gt;Jerron Lim (@StreetLamb)&lt;/a&gt; -- who has contributed countless hours and excellent examples, and great ideas to the project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jasonsum"&gt;Jason Summer (@jasonsum)&lt;/a&gt; -- for identifying several issues and adapting his Gmail MCP server to work with mcp-agent&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;We will be adding a detailed roadmap (ideally driven by your feedback). The current set of priorities include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Durable Execution&lt;/strong&gt; -- allow workflows to pause/resume and serialize state so they can be replayed or be paused indefinitely. We are working on integrating &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/src/mcp_agent/executor/temporal.py"&gt;Temporal&lt;/a&gt; for this purpose.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt; -- adding support for long-term memory&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Streaming&lt;/strong&gt; -- Support streaming listeners for iterative progress&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Additional MCP capabilities&lt;/strong&gt; -- Expand beyond tool calls to support: 
  &lt;ul&gt; 
   &lt;li&gt;Resources&lt;/li&gt; 
   &lt;li&gt;Prompts&lt;/li&gt; 
   &lt;li&gt;Notifications&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQs&lt;/h2&gt; 
&lt;h3&gt;What are the core benefits of using mcp-agent?&lt;/h3&gt; 
&lt;p&gt;mcp-agent provides a streamlined approach to building AI agents using capabilities exposed by &lt;strong&gt;MCP&lt;/strong&gt; (Model Context Protocol) servers.&lt;/p&gt; 
&lt;p&gt;MCP is quite low-level, and this framework handles the mechanics of connecting to servers, working with LLMs, handling external signals (like human input) and supporting persistent state via durable execution. That lets you, the developer, focus on the core business logic of your AI application.&lt;/p&gt; 
&lt;p&gt;Core benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ü§ù &lt;strong&gt;Interoperability&lt;/strong&gt;: ensures that any tool exposed by any number of MCP servers can seamlessly plug in to your agents.&lt;/li&gt; 
 &lt;li&gt;‚õìÔ∏è &lt;strong&gt;Composability &amp;amp; Customizability&lt;/strong&gt;: Implements well-defined workflows, but in a composable way that enables compound workflows, and allows full customization across model provider, logging, orchestrator, etc.&lt;/li&gt; 
 &lt;li&gt;üíª &lt;strong&gt;Programmatic control flow&lt;/strong&gt;: Keeps things simple as developers just write code instead of thinking in graphs, nodes and edges. For branching logic, you write &lt;code&gt;if&lt;/code&gt; statements. For cycles, use &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt; 
 &lt;li&gt;üñêÔ∏è &lt;strong&gt;Human Input &amp;amp; Signals&lt;/strong&gt;: Supports pausing workflows for external signals, such as human input, which are exposed as tool calls an Agent can make.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Do you need an MCP client to use mcp-agent?&lt;/h3&gt; 
&lt;p&gt;No, you can use mcp-agent anywhere, since it handles MCPClient creation for you. This allows you to leverage MCP servers outside of MCP hosts like Claude Desktop.&lt;/p&gt; 
&lt;p&gt;Here's all the ways you can set up your mcp-agent application:&lt;/p&gt; 
&lt;h4&gt;MCP-Agent Server&lt;/h4&gt; 
&lt;p&gt;You can expose mcp-agent applications as MCP servers themselves (see &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/basic/mcp_agent_server"&gt;example&lt;/a&gt;), allowing MCP clients to interface with sophisticated AI workflows using the standard tools API of MCP servers. This is effectively a server-of-servers.&lt;/p&gt; 
&lt;h4&gt;MCP Client or Host&lt;/h4&gt; 
&lt;p&gt;You can embed mcp-agent in an MCP client directly to manage the orchestration across multiple MCP servers.&lt;/p&gt; 
&lt;h4&gt;Standalone&lt;/h4&gt; 
&lt;p&gt;You can use mcp-agent applications in a standalone fashion (i.e. they aren't part of an MCP client). The &lt;a href="https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/examples/"&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; are all standalone applications.&lt;/p&gt; 
&lt;h3&gt;Tell me a fun fact&lt;/h3&gt; 
&lt;p&gt;I debated naming this project &lt;em&gt;silsila&lt;/em&gt; (ÿ≥ŸÑÿ≥ŸÑ€Å), which means chain of events in Urdu. mcp-agent is more matter-of-fact, but there's still an easter egg in the project paying homage to silsila.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>actions/runner-images</title>
      <link>https://github.com/actions/runner-images</link>
      <description>&lt;p&gt;GitHub Actions runner images&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Actions Runner Images&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#about"&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#available-images"&gt;Available Images&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#announcements"&gt;Announcements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#image-definitions"&gt;Image Definitions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#image-releases"&gt;Image Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#software-and-image-support"&gt;Software and Image Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#how-to-interact-with-the-repo"&gt;How to Interact with the Repo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#faqs"&gt;FAQs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;This repository contains the source code used to create the VM images for &lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"&gt;GitHub-hosted runners&lt;/a&gt; used for Actions, as well as for &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent"&gt;Microsoft-hosted agents&lt;/a&gt; used for Azure Pipelines. To build a VM machine from this repo's source, see the &lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/docs/create-image-and-azure-resources.md"&gt;instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Available Images&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Image&lt;/th&gt; 
   &lt;th&gt;YAML Label&lt;/th&gt; 
   &lt;th&gt;Included Software&lt;/th&gt; 
   &lt;th&gt;Rollout Status of Latest Image Release&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu 24.04&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ubuntu-latest&lt;/code&gt; or &lt;code&gt;ubuntu-24.04&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/ubuntu/Ubuntu2404-Readme.md"&gt;ubuntu-24.04&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fubuntu24.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu 22.04&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ubuntu-22.04&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/ubuntu/Ubuntu2204-Readme.md"&gt;ubuntu-22.04&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fubuntu22.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 15&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;macos-15-large&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/macos/macos-15-Readme.md"&gt;macOS-15&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fmacos-15.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 15 Arm64&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;macos-15&lt;/code&gt; or &lt;code&gt;macos-15-xlarge&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/macos/macos-15-arm64-Readme.md"&gt;macOS-15-arm64&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fmacos-15-arm64.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 14&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;macos-latest-large&lt;/code&gt; or &lt;code&gt;macos-14-large&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/macos/macos-14-Readme.md"&gt;macOS-14&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fmacos-14.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 14 Arm64&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;macos-latest&lt;/code&gt;, &lt;code&gt;macos-14&lt;/code&gt;, &lt;code&gt;macos-latest-xlarge&lt;/code&gt; or &lt;code&gt;macos-14-xlarge&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/macos/macos-14-arm64-Readme.md"&gt;macOS-14-arm64&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fmacos-14-arm64.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 13&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;macos-13&lt;/code&gt; or &lt;code&gt;macos-13-large&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/macos/macos-13-Readme.md"&gt;macOS-13&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fmacos-13.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 13 Arm64&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;macos-13-xlarge&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/macos/macos-13-arm64-Readme.md"&gt;macOS-13-arm64&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fmacos-13-arm64.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows Server 2025&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;windows-2025&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/windows/Windows2025-Readme.md"&gt;windows-2025&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fwin25.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows Server 2022&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;windows-latest&lt;/code&gt; or &lt;code&gt;windows-2022&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/windows/Windows2022-Readme.md"&gt;windows-2022&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fsubir0071%2F385e39188f4280878bada99250e99db7%2Fraw%2Fwin22.json" alt="Endpoint Badge"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows Server 2019&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;windows-2019&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/actions/runner-images/raw/main/images/windows/Windows2019-Readme.md"&gt;windows-2019&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://img.shields.io/badge/-Deprecated-red" alt="Deprecated"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Label scheme&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;In general the &lt;code&gt;-latest&lt;/code&gt; label is used for the latest OS image version that is GA&lt;/li&gt; 
 &lt;li&gt;Before moving the&lt;code&gt;-latest&lt;/code&gt; label to a new OS version we will announce the change and give sufficient lead time for users to update their workflows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Announcements&lt;/h2&gt; 
&lt;p&gt;See notable upcoming changes by viewing issues with the &lt;a href="https://github.com/actions/runner-images/labels/Announcement"&gt;Announcement&lt;/a&gt; label.&lt;/p&gt; 
&lt;h2&gt;Image Definitions&lt;/h2&gt; 
&lt;h3&gt;Beta&lt;/h3&gt; 
&lt;p&gt;The purpose of a Beta is to collect feedback on an image before it is released to GA. The goal of a Beta is to identify and fix any potential issues that exist on that image. Images are updated on a weekly cadence. Any workflows that run on a beta image do not fall under the customer &lt;a href="https://github.com/customer-terms/github-online-services-sla"&gt;SLA&lt;/a&gt; in place for Actions. Customers choosing to use Beta images are encouraged to provide feedback in the runner-images repo by creating an issue. A Beta may take on different availability, i.e. public vs private.&lt;/p&gt; 
&lt;h3&gt;GA&lt;/h3&gt; 
&lt;p&gt;A GA (General Availability) image has been through a Beta period and is deemed ready for general use. Images are updated on a weekly cadence. In order to be moved to GA the image must meet the following criteria:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Has been through a Beta period (public or private)&lt;/li&gt; 
 &lt;li&gt;Most major software we install on the image has a compatible version for the underlying OS and&lt;/li&gt; 
 &lt;li&gt;All major bugs reported during the Beta period have been addressed.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This image type falls under the customer &lt;a href="https://github.com/customer-terms/github-online-services-sla"&gt;SLA&lt;/a&gt; for actions. GA images are eventually deprecated according to our guidelines as we only support the latest 2 versions of an OS.&lt;/p&gt; 
&lt;h4&gt;Latest Migration Process&lt;/h4&gt; 
&lt;p&gt;GitHub Actions and Azure DevOps use the &lt;code&gt;-latest&lt;/code&gt; YAML label (ex: &lt;code&gt;ubuntu-latest&lt;/code&gt;, &lt;code&gt;windows-latest&lt;/code&gt;, and &lt;code&gt;macos-latest&lt;/code&gt;). These labels point towards the newest stable OS version available.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;-latest&lt;/code&gt; migration process is gradual and happens over 1-2 months in order to allow customers to adapt their workflows to the newest OS version. During this process, any workflow using the &lt;code&gt;-latest&lt;/code&gt; label, may see changes in the OS version in their workflows or pipelines. To avoid unwanted migration, users can specify a specific OS version in the yaml file (ex: macos-14, windows-2022, ubuntu-22.04).&lt;/p&gt; 
&lt;h2&gt;Image Releases&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;How to best follow along with changes&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Find the latest releases for this repository &lt;a href="https://github.com/actions/runner-images/releases"&gt;here.&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Subscribe to the releases coming out of this repository, instructions &lt;a href="https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications#configuring-your-watch-settings-for-an-individual-repository"&gt;here.&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Upcoming changes: A pre-release is created when the deployment of an image has started. As soon as the deployment is finished, the pre-release is converted to a release. If you have subscribed to releases, you will get notified of pre-releases as well.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;You can also track upcoming changes using the &lt;a href="https://github.com/actions/runner-images/labels/awaiting-deployment"&gt;awaiting-deployment&lt;/a&gt; label.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For high impact changes, we will post these in advance to the GitHub Changelog on our &lt;a href="https://github.blog/changelog/"&gt;blog&lt;/a&gt; and on &lt;a href="https://twitter.com/GHchangelog"&gt;twitter&lt;/a&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Ex: breaking changes, GA or deprecation of images&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;Cadence&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We typically deploy weekly updates to the software on the runner images.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Software and Image Support&lt;/h2&gt; 
&lt;h3&gt;Support Policy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Tools and versions will typically be removed 6 months after they are deprecated or have reached end-of-life&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We support (at maximum) 2 GA images and 1 beta image at a time. We begin the deprecation process of the oldest image label once the newest OS image label has been released to GA.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The images generally contain the latest versions of packages installed except for Ubuntu LTS where we mostly rely on the Canonical-provided repositories.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Popular tools can have several versions installed side-by-side with the following strategy:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tool name&lt;/th&gt; 
   &lt;th&gt;Installation strategy&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Docker images&lt;/td&gt; 
   &lt;td&gt;not more than 3 latest LTS OS\tool versions. New images or new versions of current images are added using the standard tool request process&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Java&lt;/td&gt; 
   &lt;td&gt;all LTS versions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Node.js&lt;/td&gt; 
   &lt;td&gt;3 latest LTS versions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;3 latest minor versions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Python &lt;br&gt; Ruby&lt;/td&gt; 
   &lt;td&gt;5 most popular &lt;code&gt;major.minor&lt;/code&gt; versions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PyPy&lt;/td&gt; 
   &lt;td&gt;3 most popular &lt;code&gt;major.minor&lt;/code&gt; versions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;.NET Core&lt;/td&gt; 
   &lt;td&gt;2 latest LTS versions and 1 latest version. For each feature version only latest patch is installed. Note for &lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/docs/dotnet-ubuntu.md"&gt;Ubuntu images see details.&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GCC &lt;br&gt; GNU Fortran &lt;br&gt; Clang &lt;br&gt; GNU C++&lt;/td&gt; 
   &lt;td&gt;3 latest major versions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Android NDK&lt;/td&gt; 
   &lt;td&gt;1 latest non-LTS, 2 latest LTS versions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Xcode&lt;/td&gt; 
   &lt;td&gt;- only one major version of Xcode will be supported per macOS version &lt;br&gt; - all minor versions of the supported major version will be available &lt;br&gt; - beta and RC versions will be provided "as-is" in the latest available macOS image only no matter of beta/GA status of the image &lt;br&gt; - when a new patch version is released, the previous patch version will be replaced&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Package managers usage&lt;/h3&gt; 
&lt;p&gt;We use third-party package managers to install software during the image generation process. The table below lists the package managers and the software installed.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Third-party repositories are re-evaluated every year to identify if they are still useful and secure.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Operating system&lt;/th&gt; 
   &lt;th align="center"&gt;Package manager&lt;/th&gt; 
   &lt;th align="right"&gt;Third-party repos and packages&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Ubuntu&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://wiki.debian.org/Apt"&gt;APT&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="right"&gt;&lt;a href="https://download.docker.com/linux/ubuntu"&gt;docker&lt;/a&gt; &lt;br&gt; &lt;a href="https://packages.adoptium.net/artifactory/deb/"&gt;Eclipse-Temurin (Adoptium)&lt;/a&gt; &lt;br&gt; &lt;a href="https://packages.erlang-solutions.com/ubuntu"&gt;Erlang&lt;/a&gt; &lt;br&gt; &lt;a href="https://ppa.launchpad.net/mozillateam/ppa/ubuntu"&gt;Firefox&lt;/a&gt; &lt;br&gt; &lt;a href="https://packagecloud.io/install/repositories/github/git-lfs"&gt;git-lfs&lt;/a&gt; &lt;br&gt; &lt;a href="https://launchpad.net/~git-core/+archive/ubuntu/ppa"&gt;git&lt;/a&gt; &lt;br&gt; &lt;a href="https://packages.cloud.google.com/apt"&gt;Google Cloud CLI&lt;/a&gt; &lt;br&gt; &lt;a href="https://cli-assets.heroku.com/channels/stable/apt"&gt;Heroku&lt;/a&gt; &lt;br&gt; &lt;a href="https://dl.hhvm.com/ubuntu"&gt;HHvm&lt;/a&gt; &lt;br&gt; &lt;a href="https://repo.mongodb.org/apt/ubuntu"&gt;MongoDB&lt;/a&gt; &lt;br&gt; &lt;a href="https://download.mono-project.com/repo/ubuntu"&gt;Mono&lt;/a&gt; &lt;br&gt; &lt;a href="https://packages.microsoft.com/repos/edge"&gt;MS Edge&lt;/a&gt; &lt;br&gt; &lt;a href="https://apt.postgresql.org/pub/repos/apt/"&gt;PostgreSQL&lt;/a&gt; &lt;br&gt; &lt;a href="https://cloud.r-project.org/bin/linux/ubuntu"&gt;R&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://pypa.github.io/pipx"&gt;pipx&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="right"&gt;ansible-core &lt;br&gt;yamllint&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Windows&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="right"&gt;No third-party repos installed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;macOS&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="right"&gt;&lt;a href="https://github.com/aws/homebrew-tap"&gt;aws-cli v2&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/Azure/homebrew-bicep"&gt;azure/bicep&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/mongodb/homebrew-brew"&gt;mongodb/brew&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://pypa.github.io/pipx/"&gt;pipx&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="right"&gt;yamllint&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Image Deprecation Policy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Images begin the deprecation process of the oldest image label once a new GA OS version has been released.&lt;/li&gt; 
 &lt;li&gt;Deprecation process begins with an announcement that sets a date for deprecation&lt;/li&gt; 
 &lt;li&gt;As it gets closer to the date, GitHub begins doing scheduled brownouts of the image&lt;/li&gt; 
 &lt;li&gt;During this time there will be an Announcement pinned in the repo to remind users of the deprecation.&lt;/li&gt; 
 &lt;li&gt;Finally GitHub will deprecate the image and it will no longer be available&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Preinstallation Policy&lt;/h3&gt; 
&lt;p&gt;In general, these are the guidelines we follow when deciding what to pre-install on our images:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Popularity: widely-used tools and ecosystems will be given priority.&lt;/li&gt; 
 &lt;li&gt;Latest Technology: recent versions of tools will be given priority.&lt;/li&gt; 
 &lt;li&gt;Deprecation: end-of-life tools and versions will not be added.&lt;/li&gt; 
 &lt;li&gt;Licensing: MIT, Apache, or GNU licenses are allowed.&lt;/li&gt; 
 &lt;li&gt;Time &amp;amp; Space on the Image: we will evaluate how much time is saved and how much space is used by having the tool pre-installed.&lt;/li&gt; 
 &lt;li&gt;Support: If a tool requires the support of more than one version, we will consider the cost of this maintenance.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Default Version Update Policy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;In general, once a new version is installed on the image, we announce the default version update 2 weeks prior to deploying it.&lt;/li&gt; 
 &lt;li&gt;For potentially dangerous updates, we may extend the timeline up to 1 month between the announcement and deployment.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Interact with the Repo&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: To file a bug report, or request tools to be added/updated, please&amp;nbsp;&lt;a href="https://github.com/actions/runner-images/issues/new/choose"&gt;open an issue using the appropriate template&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Discussions&lt;/strong&gt;: If you want to share your thoughts about image configuration, installed software, or bring a new idea, please create a new topic in a&amp;nbsp;&lt;a href="https://github.com/actions/runner-images/discussions"&gt;discussion&lt;/a&gt;&amp;nbsp;for a corresponding category. Before making a new discussion please make sure no similar topics were created earlier.&lt;/li&gt; 
 &lt;li&gt;For general questions about using the runner images or writing your Actions workflow, please open requests in the &lt;a href="https://github.community/c/github-actions/41"&gt;GitHub Actions Community Forum&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQs&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;&lt;i&gt;What images are available for GitHub Actions and Azure DevOps?&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;The availability of images for GitHub Actions and Azure DevOps is the same. However, deprecation policies may differ. See documentation for more details:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners#supported-runners-and-hardware-resources"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;amp;tabs=yaml#software"&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;&lt;i&gt;What image version is used in my build?&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;Usually, image deployment takes 2-3 days, and documentation in the &lt;code&gt;main&lt;/code&gt; branch is only updated when deployment is finished. To find out which image version and what software versions are used in a specific build, see &lt;code&gt;Set up job&lt;/code&gt; (GitHub Actions) or &lt;code&gt;Initialize job&lt;/code&gt; (Azure DevOps) step log. &lt;img width="1440" alt="actions-runner-image" src="https://github.com/actions/runner-images/assets/88318005/922a8bf5-3e4d-4265-9527-b3b51e6bf9c8"&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;&lt;i&gt;Looking for other Linux distributions?&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;We do not plan to offer other Linux distributions. We recommend using Docker if you'd like to build using other distributions with the hosted runner images. Alternatively, you can leverage &lt;a href="https://help.github.com/en/actions/hosting-your-own-runners"&gt;self-hosted runners&lt;/a&gt; and fully customize your VM image to your needs.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;&lt;i&gt;How do I contribute to the macOS source?&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;macOS source lives in this repository and is available for everyone. However, macOS image-generation CI doesn't support external contributions yet so we are not able to accept pull-requests for now.&lt;/p&gt; 
 &lt;p&gt;We are in the process of preparing macOS CI to accept contributions. Until then, we appreciate your patience and ask you to continue to make tool requests by filing issues.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;&lt;i&gt;How does GitHub determine what tools are installed on the images?&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;For some tools, we always install the latest at the time of the deployment; for others, we pin the tool to specific version(s). For more details please see the &lt;a href="https://raw.githubusercontent.com/actions/runner-images/main/#preinstallation-policy"&gt;Preinstallation Policy&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;&lt;i&gt;How do I request that a new tool be pre-installed on the image?&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt; Please create an issue and get an approval from us to add this tool to the image before creating the pull request. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;&lt;i&gt;What branch should I use to build custom image?&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt; We strongly encourage customers to build their own images using the main branch. This repository contains multiple branches and releases that serve as document milestones to reflect what software is installed in the images at certain point of time. Current builds are not idempotent and if one tries to build a runner image using the specific tag it is not guaranteed that the build will succeed. 
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>facebookresearch/segment-anything</title>
      <link>https://github.com/facebookresearch/segment-anything</link>
      <description>&lt;p&gt;The repository provides code for running inference with the SegmentAnything Model (SAM), links for downloading the trained model checkpoints, and example notebooks that show how to use the model.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Latest updates -- SAM 2: Segment Anything in Images and Videos&lt;/h2&gt; 
&lt;p&gt;Please check out our new release on &lt;a href="https://github.com/facebookresearch/segment-anything-2"&gt;&lt;strong&gt;Segment Anything Model 2 (SAM 2)&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;SAM 2 code: &lt;a href="https://github.com/facebookresearch/segment-anything-2"&gt;https://github.com/facebookresearch/segment-anything-2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SAM 2 demo: &lt;a href="https://sam2.metademolab.com/"&gt;https://sam2.metademolab.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SAM 2 paper: &lt;a href="https://arxiv.org/abs/2408.00714"&gt;https://arxiv.org/abs/2408.00714&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/facebookresearch/segment-anything-2/raw/main/assets/model_diagram.png?raw=true" alt="SAM 2 architecture"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Segment Anything Model 2 (SAM 2)&lt;/strong&gt; is a foundation model towards solving promptable visual segmentation in images and videos. We extend SAM to video by considering images as a video with a single frame. The model design is a simple transformer architecture with streaming memory for real-time video processing. We build a model-in-the-loop data engine, which improves model and data via user interaction, to collect &lt;a href="https://ai.meta.com/datasets/segment-anything-video"&gt;&lt;strong&gt;our SA-V dataset&lt;/strong&gt;&lt;/a&gt;, the largest video segmentation dataset to date. SAM 2 trained on our data provides strong performance across a wide range of tasks and visual domains.&lt;/p&gt; 
&lt;h1&gt;Segment Anything&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://ai.facebook.com/research/"&gt;Meta AI Research, FAIR&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://alexander-kirillov.github.io/"&gt;Alexander Kirillov&lt;/a&gt;, &lt;a href="https://ericmintun.github.io/"&gt;Eric Mintun&lt;/a&gt;, &lt;a href="https://nikhilaravi.com/"&gt;Nikhila Ravi&lt;/a&gt;, &lt;a href="https://hanzimao.me/"&gt;Hanzi Mao&lt;/a&gt;, Chloe Rolland, Laura Gustafson, &lt;a href="https://tetexiao.com"&gt;Tete Xiao&lt;/a&gt;, &lt;a href="https://www.spencerwhitehead.com/"&gt;Spencer Whitehead&lt;/a&gt;, Alex Berg, Wan-Yen Lo, &lt;a href="https://pdollar.github.io/"&gt;Piotr Dollar&lt;/a&gt;, &lt;a href="https://www.rossgirshick.info/"&gt;Ross Girshick&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://ai.facebook.com/research/publications/segment-anything/"&gt;&lt;code&gt;Paper&lt;/code&gt;&lt;/a&gt;] [&lt;a href="https://segment-anything.com/"&gt;&lt;code&gt;Project&lt;/code&gt;&lt;/a&gt;] [&lt;a href="https://segment-anything.com/demo"&gt;&lt;code&gt;Demo&lt;/code&gt;&lt;/a&gt;] [&lt;a href="https://segment-anything.com/dataset/index.html"&gt;&lt;code&gt;Dataset&lt;/code&gt;&lt;/a&gt;] [&lt;a href="https://ai.facebook.com/blog/segment-anything-foundation-model-image-segmentation/"&gt;&lt;code&gt;Blog&lt;/code&gt;&lt;/a&gt;] [&lt;a href="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/#citing-segment-anything"&gt;&lt;code&gt;BibTeX&lt;/code&gt;&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/model_diagram.png?raw=true" alt="SAM design"&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;strong&gt;Segment Anything Model (SAM)&lt;/strong&gt; produces high quality object masks from input prompts such as points or boxes, and it can be used to generate masks for all objects in an image. It has been trained on a &lt;a href="https://segment-anything.com/dataset/index.html"&gt;dataset&lt;/a&gt; of 11 million images and 1.1 billion masks, and has strong zero-shot performance on a variety of segmentation tasks.&lt;/p&gt; 
&lt;p float="left"&gt; &lt;img src="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/masks1.png?raw=true" width="37.25%"&gt; &lt;img src="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/masks2.jpg?raw=true" width="61.5%"&gt; &lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The code requires &lt;code&gt;python&amp;gt;=3.8&lt;/code&gt;, as well as &lt;code&gt;pytorch&amp;gt;=1.7&lt;/code&gt; and &lt;code&gt;torchvision&amp;gt;=0.8&lt;/code&gt;. Please follow the instructions &lt;a href="https://pytorch.org/get-started/locally/"&gt;here&lt;/a&gt; to install both PyTorch and TorchVision dependencies. Installing both PyTorch and TorchVision with CUDA support is strongly recommended.&lt;/p&gt; 
&lt;p&gt;Install Segment Anything:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/facebookresearch/segment-anything.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or clone the repository locally and install with&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone git@github.com:facebookresearch/segment-anything.git
cd segment-anything; pip install -e .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following optional dependencies are necessary for mask post-processing, saving masks in COCO format, the example notebooks, and exporting the model in ONNX format. &lt;code&gt;jupyter&lt;/code&gt; is also required to run the example notebooks.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip install opencv-python pycocotools matplotlib onnxruntime onnx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a name="GettingStarted"&gt;&lt;/a&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;First download a &lt;a href="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/#model-checkpoints"&gt;model checkpoint&lt;/a&gt;. Then the model can be used in just a few lines to get masks from a given prompt:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;from segment_anything import SamPredictor, sam_model_registry
sam = sam_model_registry["&amp;lt;model_type&amp;gt;"](checkpoint="&amp;lt;path/to/checkpoint&amp;gt;")
predictor = SamPredictor(sam)
predictor.set_image(&amp;lt;your_image&amp;gt;)
masks, _, _ = predictor.predict(&amp;lt;input_prompts&amp;gt;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or generate masks for an entire image:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;from segment_anything import SamAutomaticMaskGenerator, sam_model_registry
sam = sam_model_registry["&amp;lt;model_type&amp;gt;"](checkpoint="&amp;lt;path/to/checkpoint&amp;gt;")
mask_generator = SamAutomaticMaskGenerator(sam)
masks = mask_generator.generate(&amp;lt;your_image&amp;gt;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additionally, masks can be generated for images from the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python scripts/amg.py --checkpoint &amp;lt;path/to/checkpoint&amp;gt; --model-type &amp;lt;model_type&amp;gt; --input &amp;lt;image_or_folder&amp;gt; --output &amp;lt;path/to/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the examples notebooks on &lt;a href="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/notebooks/predictor_example.ipynb"&gt;using SAM with prompts&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/notebooks/automatic_mask_generator_example.ipynb"&gt;automatically generating masks&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p float="left"&gt; &lt;img src="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/notebook1.png?raw=true" width="49.1%"&gt; &lt;img src="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/assets/notebook2.png?raw=true" width="48.9%"&gt; &lt;/p&gt; 
&lt;h2&gt;ONNX Export&lt;/h2&gt; 
&lt;p&gt;SAM's lightweight mask decoder can be exported to ONNX format so that it can be run in any environment that supports ONNX runtime, such as in-browser as showcased in the &lt;a href="https://segment-anything.com/demo"&gt;demo&lt;/a&gt;. Export the model with&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python scripts/export_onnx_model.py --checkpoint &amp;lt;path/to/checkpoint&amp;gt; --model-type &amp;lt;model_type&amp;gt; --output &amp;lt;path/to/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/facebookresearch/segment-anything/raw/main/notebooks/onnx_model_example.ipynb"&gt;example notebook&lt;/a&gt; for details on how to combine image preprocessing via SAM's backbone with mask prediction using the ONNX model. It is recommended to use the latest stable version of PyTorch for ONNX export.&lt;/p&gt; 
&lt;h3&gt;Web demo&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;demo/&lt;/code&gt; folder has a simple one page React app which shows how to run mask prediction with the exported ONNX model in a web browser with multithreading. Please see &lt;a href="https://github.com/facebookresearch/segment-anything/raw/main/demo/README.md"&gt;&lt;code&gt;demo/README.md&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;&lt;a name="Models"&gt;&lt;/a&gt;Model Checkpoints&lt;/h2&gt; 
&lt;p&gt;Three model versions of the model are available with different backbone sizes. These models can be instantiated by running&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;from segment_anything import sam_model_registry
sam = sam_model_registry["&amp;lt;model_type&amp;gt;"](checkpoint="&amp;lt;path/to/checkpoint&amp;gt;")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Click the links below to download the checkpoint for the corresponding model type.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;default&lt;/code&gt; or &lt;code&gt;vit_h&lt;/code&gt;: &lt;a href="https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth"&gt;ViT-H SAM model.&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vit_l&lt;/code&gt;: &lt;a href="https://dl.fbaipublicfiles.com/segment_anything/sam_vit_l_0b3195.pth"&gt;ViT-L SAM model.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vit_b&lt;/code&gt;: &lt;a href="https://dl.fbaipublicfiles.com/segment_anything/sam_vit_b_01ec64.pth"&gt;ViT-B SAM model.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Dataset&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://ai.facebook.com/datasets/segment-anything/"&gt;here&lt;/a&gt; for an overview of the datastet. The dataset can be downloaded &lt;a href="https://ai.facebook.com/datasets/segment-anything-downloads/"&gt;here&lt;/a&gt;. By downloading the datasets you agree that you have read and accepted the terms of the SA-1B Dataset Research License.&lt;/p&gt; 
&lt;p&gt;We save masks per image as a json file. It can be loaded as a dictionary in python in the below format.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;{
    "image"                 : image_info,
    "annotations"           : [annotation],
}

image_info {
    "image_id"              : int,              # Image id
    "width"                 : int,              # Image width
    "height"                : int,              # Image height
    "file_name"             : str,              # Image filename
}

annotation {
    "id"                    : int,              # Annotation id
    "segmentation"          : dict,             # Mask saved in COCO RLE format.
    "bbox"                  : [x, y, w, h],     # The box around the mask, in XYWH format
    "area"                  : int,              # The area in pixels of the mask
    "predicted_iou"         : float,            # The model's own prediction of the mask's quality
    "stability_score"       : float,            # A measure of the mask's quality
    "crop_box"              : [x, y, w, h],     # The crop of the image used to generate the mask, in XYWH format
    "point_coords"          : [[x, y]],         # The point coordinates input to the model to generate the mask
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Image ids can be found in sa_images_ids.txt which can be downloaded using the above &lt;a href="https://ai.facebook.com/datasets/segment-anything-downloads/"&gt;link&lt;/a&gt; as well.&lt;/p&gt; 
&lt;p&gt;To decode a mask in COCO RLE format into binary:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;from pycocotools import mask as mask_utils
mask = mask_utils.decode(annotation["segmentation"])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://github.com/cocodataset/cocoapi/raw/master/PythonAPI/pycocotools/mask.py"&gt;here&lt;/a&gt; for more instructions to manipulate masks stored in RLE format.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The model is licensed under the &lt;a href="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/LICENSE"&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/CONTRIBUTING.md"&gt;contributing&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/facebookresearch/segment-anything/main/CODE_OF_CONDUCT.md"&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;The Segment Anything project was made possible with the help of many contributors (alphabetical):&lt;/p&gt; 
&lt;p&gt;Aaron Adcock, Vaibhav Aggarwal, Morteza Behrooz, Cheng-Yang Fu, Ashley Gabriel, Ahuva Goldstand, Allen Goodman, Sumanth Gurram, Jiabo Hu, Somya Jain, Devansh Kukreja, Robert Kuo, Joshua Lane, Yanghao Li, Lilian Luong, Jitendra Malik, Mallika Malhotra, William Ngan, Omkar Parkhi, Nikhil Raina, Dirk Rowe, Neil Sejoor, Vanessa Stark, Bala Varadarajan, Bram Wasti, Zachary Winstrom&lt;/p&gt; 
&lt;h2&gt;Citing Segment Anything&lt;/h2&gt; 
&lt;p&gt;If you use SAM or SA-1B in your research, please use the following BibTeX entry.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@article{kirillov2023segany,
  title={Segment Anything},
  author={Kirillov, Alexander and Mintun, Eric and Ravi, Nikhila and Mao, Hanzi and Rolland, Chloe and Gustafson, Laura and Xiao, Tete and Whitehead, Spencer and Berg, Alexander C. and Lo, Wan-Yen and Doll{\'a}r, Piotr and Girshick, Ross},
  journal={arXiv:2304.02643},
  year={2023}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>vanna-ai/vanna</title>
      <link>https://github.com/vanna-ai/vanna</link>
      <description>&lt;p&gt;ü§ñ Chat with your SQL database üìä. Accurate Text-to-SQL Generation via LLMs using RAG üîÑ.&lt;/p&gt;&lt;hr&gt;&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;GitHub&lt;/th&gt; 
   &lt;th&gt;PyPI&lt;/th&gt; 
   &lt;th&gt;Documentation&lt;/th&gt; 
   &lt;th&gt;Gurubase&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vanna-ai/vanna"&gt;&lt;img src="https://img.shields.io/badge/GitHub-vanna-blue?logo=github" alt="GitHub"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://pypi.org/project/vanna/"&gt;&lt;img src="https://img.shields.io/pypi/v/vanna?logo=pypi" alt="PyPI"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://vanna.ai/docs/"&gt;&lt;img src="https://img.shields.io/badge/Documentation-vanna-blue?logo=read-the-docs" alt="Documentation"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://gurubase.io/g/vanna"&gt;&lt;img src="https://img.shields.io/badge/Gurubase-Ask%20Vanna%20Guru-006BFF" alt="Gurubase"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Vanna&lt;/h1&gt; 
&lt;p&gt;Vanna is an MIT-licensed open-source Python RAG (Retrieval-Augmented Generation) framework for SQL generation and related functionality.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/vanna-ai/vanna/assets/7146154/1901f47a-515d-4982-af50-f12761a3b2ce"&gt;https://github.com/vanna-ai/vanna/assets/7146154/1901f47a-515d-4982-af50-f12761a3b2ce&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/vanna-ai/vanna/assets/7146154/1c7c88ba-c144-4ecf-a028-cf5ba7344ca2" alt="vanna-quadrants"&gt;&lt;/p&gt; 
&lt;h2&gt;How Vanna works&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/vanna-ai/vanna/assets/7146154/1d2718ad-12a8-4a76-afa2-c61754462f93" alt="Screen Recording 2024-01-24 at 11 21 37‚ÄØAM"&gt;&lt;/p&gt; 
&lt;p&gt;Vanna works in two easy steps - train a RAG "model" on your data, and then ask questions which will return SQL queries that can be set up to automatically run on your database.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Train a RAG "model" on your data&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ask questions&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/vanna-ai/vanna/main/img/vanna-readme-diagram.png" alt=""&gt;&lt;/p&gt; 
&lt;p&gt;If you don't know what RAG is, don't worry -- you don't need to know how this works under the hood to use it. You just need to know that you "train" a model, which stores some metadata and then use it to "ask" questions.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/vanna-ai/vanna/raw/main/src/vanna/base/base.py"&gt;base class&lt;/a&gt; for more details on how this works under the hood.&lt;/p&gt; 
&lt;h2&gt;User Interfaces&lt;/h2&gt; 
&lt;p&gt;These are some of the user interfaces that we've built using Vanna. You can use these as-is or as a starting point for your own custom interface.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://vanna.ai/docs/postgres-openai-vanna-vannadb/"&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna-streamlit"&gt;vanna-ai/vanna-streamlit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna-flask"&gt;vanna-ai/vanna-flask&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna-slack"&gt;vanna-ai/vanna-slack&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported LLMs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/openai"&gt;OpenAI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/anthropic"&gt;Anthropic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/raw/main/src/vanna/google/gemini_chat.py"&gt;Gemini&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/raw/main/src/vanna/hf/hf.py"&gt;HuggingFace&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/bedrock"&gt;AWS Bedrock&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/ollama"&gt;Ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianwen"&gt;Qianwen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/qianfan"&gt;Qianfan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/ZhipuAI"&gt;Zhipu&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported VectorStores&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/azuresearch"&gt;AzureSearch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/opensearch"&gt;Opensearch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/pgvector"&gt;PgVector&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/pinecone"&gt;PineCone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/chromadb"&gt;ChromaDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/faiss"&gt;FAISS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/marqo"&gt;Marqo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/milvus"&gt;Milvus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/qdrant"&gt;Qdrant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/weaviate"&gt;Weaviate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vanna-ai/vanna/tree/main/src/vanna/oracle"&gt;Oracle&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Databases&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://prestodb.io/"&gt;PrestoDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hive.apache.org/"&gt;Apache Hive&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://clickhouse.com/"&gt;ClickHouse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.snowflake.com/en/"&gt;Snowflake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.oracle.com/"&gt;Oracle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads"&gt;Microsoft SQL Server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/bigquery"&gt;BigQuery&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://duckdb.org/"&gt;DuckDB&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://vanna.ai/docs/"&gt;documentation&lt;/a&gt; for specifics on your desired database, LLM, etc.&lt;/p&gt; 
&lt;p&gt;If you want to get a feel for how it works after training, you can try this &lt;a href="https://vanna.ai/docs/app/"&gt;Colab notebook&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install vanna
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are a number of optional packages that can be installed so see the &lt;a href="https://vanna.ai/docs/"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;Import&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://vanna.ai/docs/"&gt;documentation&lt;/a&gt; if you're customizing the LLM or vector database.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# The import statement will vary depending on your LLM and vector database. This is an example for OpenAI + ChromaDB

from vanna.openai.openai_chat import OpenAI_Chat
from vanna.chromadb.chromadb_vector import ChromaDB_VectorStore

class MyVanna(ChromaDB_VectorStore, OpenAI_Chat):
    def __init__(self, config=None):
        ChromaDB_VectorStore.__init__(self, config=config)
        OpenAI_Chat.__init__(self, config=config)

vn = MyVanna(config={'api_key': 'sk-...', 'model': 'gpt-4-...'})

# See the documentation for other options

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Training&lt;/h2&gt; 
&lt;p&gt;You may or may not need to run these &lt;code&gt;vn.train&lt;/code&gt; commands depending on your use case. See the &lt;a href="https://vanna.ai/docs/"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;These statements are shown to give you a feel for how it works.&lt;/p&gt; 
&lt;h3&gt;Train with DDL Statements&lt;/h3&gt; 
&lt;p&gt;DDL statements contain information about the table names, columns, data types, and relationships in your database.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;vn.train(ddl="""
    CREATE TABLE IF NOT EXISTS my-table (
        id INT PRIMARY KEY,
        name VARCHAR(100),
        age INT
    )
""")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Train with Documentation&lt;/h3&gt; 
&lt;p&gt;Sometimes you may want to add documentation about your business terminology or definitions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;vn.train(documentation="Our business defines XYZ as ...")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Train with SQL&lt;/h3&gt; 
&lt;p&gt;You can also add SQL queries to your training data. This is useful if you have some queries already laying around. You can just copy and paste those from your editor to begin generating new SQL.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;vn.train(sql="SELECT name, age FROM my-table WHERE name = 'John Doe'")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Asking questions&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;vn.ask("What are the top 10 customers by sales?")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You'll get SQL&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT c.c_name as customer_name,
        sum(l.l_extendedprice * (1 - l.l_discount)) as total_sales
FROM   snowflake_sample_data.tpch_sf1.lineitem l join snowflake_sample_data.tpch_sf1.orders o
        ON l.l_orderkey = o.o_orderkey join snowflake_sample_data.tpch_sf1.customer c
        ON o.o_custkey = c.c_custkey
GROUP BY customer_name
ORDER BY total_sales desc limit 10;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you've connected to a database, you'll get the table:&lt;/p&gt; 
&lt;div&gt; 
 &lt;table border="1" class="dataframe"&gt; 
  &lt;thead&gt; 
   &lt;tr style="text-align: right;"&gt; 
    &lt;th&gt;&lt;/th&gt; 
    &lt;th&gt;CUSTOMER_NAME&lt;/th&gt; 
    &lt;th&gt;TOTAL_SALES&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;th&gt;0&lt;/th&gt; 
    &lt;td&gt;Customer#000143500&lt;/td&gt; 
    &lt;td&gt;6757566.0218&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;1&lt;/th&gt; 
    &lt;td&gt;Customer#000095257&lt;/td&gt; 
    &lt;td&gt;6294115.3340&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;2&lt;/th&gt; 
    &lt;td&gt;Customer#000087115&lt;/td&gt; 
    &lt;td&gt;6184649.5176&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;3&lt;/th&gt; 
    &lt;td&gt;Customer#000131113&lt;/td&gt; 
    &lt;td&gt;6080943.8305&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;4&lt;/th&gt; 
    &lt;td&gt;Customer#000134380&lt;/td&gt; 
    &lt;td&gt;6075141.9635&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;5&lt;/th&gt; 
    &lt;td&gt;Customer#000103834&lt;/td&gt; 
    &lt;td&gt;6059770.3232&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;6&lt;/th&gt; 
    &lt;td&gt;Customer#000069682&lt;/td&gt; 
    &lt;td&gt;6057779.0348&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;7&lt;/th&gt; 
    &lt;td&gt;Customer#000102022&lt;/td&gt; 
    &lt;td&gt;6039653.6335&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;8&lt;/th&gt; 
    &lt;td&gt;Customer#000098587&lt;/td&gt; 
    &lt;td&gt;6027021.5855&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;th&gt;9&lt;/th&gt; 
    &lt;td&gt;Customer#000064660&lt;/td&gt; 
    &lt;td&gt;5905659.6159&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;p&gt;You'll also get an automated Plotly chart: &lt;img src="https://raw.githubusercontent.com/vanna-ai/vanna/main/img/top-10-customers.png" alt=""&gt;&lt;/p&gt; 
&lt;h2&gt;RAG vs. Fine-Tuning&lt;/h2&gt; 
&lt;p&gt;RAG&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Portable across LLMs&lt;/li&gt; 
 &lt;li&gt;Easy to remove training data if any of it becomes obsolete&lt;/li&gt; 
 &lt;li&gt;Much cheaper to run than fine-tuning&lt;/li&gt; 
 &lt;li&gt;More future-proof -- if a better LLM comes out, you can just swap it out&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Fine-Tuning&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Good if you need to minimize tokens in the prompt&lt;/li&gt; 
 &lt;li&gt;Slow to get started&lt;/li&gt; 
 &lt;li&gt;Expensive to train and run (generally)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why Vanna?&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;High accuracy on complex datasets.&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Vanna‚Äôs capabilities are tied to the training data you give it&lt;/li&gt; 
   &lt;li&gt;More training data means better accuracy for large and complex datasets&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure and private.&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Your database contents are never sent to the LLM or the vector database&lt;/li&gt; 
   &lt;li&gt;SQL execution happens in your local environment&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Self learning.&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If using via Jupyter, you can choose to "auto-train" it on the queries that were successfully executed&lt;/li&gt; 
   &lt;li&gt;If using via other interfaces, you can have the interface prompt the user to provide feedback on the results&lt;/li&gt; 
   &lt;li&gt;Correct question to SQL pairs are stored for future reference and make the future results more accurate&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Supports any SQL database.&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The package allows you to connect to any SQL database that you can otherwise connect to with Python&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Choose your front end.&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Most people start in a Jupyter Notebook.&lt;/li&gt; 
   &lt;li&gt;Expose to your end users via Slackbot, web app, Streamlit app, or a custom front end.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Extending Vanna&lt;/h2&gt; 
&lt;p&gt;Vanna is designed to connect to any database, LLM, and vector database. There's a &lt;a href="https://github.com/vanna-ai/vanna/raw/main/src/vanna/base/base.py"&gt;VannaBase&lt;/a&gt; abstract base class that defines some basic functionality. The package provides implementations for use with OpenAI and ChromaDB. You can easily extend Vanna to use your own LLM or vector database. See the &lt;a href="https://vanna.ai/docs/"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Vanna in 100 Seconds&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/vanna-ai/vanna/assets/7146154/eb90ee1e-aa05-4740-891a-4fc10e611cab"&gt;https://github.com/vanna-ai/vanna/assets/7146154/eb90ee1e-aa05-4740-891a-4fc10e611cab&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;More resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://vanna.ai/docs/"&gt;Full Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://vanna.ai"&gt;Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/qUZYKHremx"&gt;Discord group for support&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>