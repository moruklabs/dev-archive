<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Fri, 08 Aug 2025 01:35:40 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>zama-ai/fhevm</title>
      <link>https://github.com/zama-ai/fhevm</link>
      <description>&lt;p&gt;FHEVM, a full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/fhevm-header-dark.png"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/fhevm-header-light.png"&gt; 
  &lt;img width="500" alt="fhevm"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt; 📃 Read white paper&lt;/a&gt; |&lt;a href="https://docs.zama.ai/protocol"&gt; 📒 Documentation&lt;/a&gt; | &lt;a href="https://zama.ai/community"&gt; 💛 Community support&lt;/a&gt; | &lt;a href="https://github.com/zama-ai/awesome-zama"&gt; 📚 FHE resources by Zama&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/zama-ai/fhevm/releases"&gt; &lt;img src="https://img.shields.io/github/v/release/zama-ai/fhevm?style=flat-square"&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/fhevm/raw/main/LICENSE"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/License-BSD--3--Clause--Clear-%23ffb243?style=flat-square"&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/bounty-program"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/Contribute-Zama%20Bounty%20Program-%23ffd208?style=flat-square"&gt;&lt;/a&gt; &lt;a href="https://slsa.dev"&gt;&lt;img alt="SLSA 3" src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;strong&gt;Devnet EOL Notice&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;The &lt;strong&gt;Zama Confidential Protocol Testnet (FHEVM v0.7)&lt;/strong&gt; is officially released, featuring a new stack with improved resilience, scalability, and performance. &lt;a href="https://docs.zama.ai/protocol/zama-protocol-litepaper"&gt;Read the Litepaper ↗&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;The previous &lt;strong&gt;Hackathon Devnet (FHEVM v0.6)&lt;/strong&gt; will reach its end of life on &lt;strong&gt;August 4th&lt;/strong&gt;.&lt;/p&gt; 
 &lt;p&gt;To ensure the service continuity of your applications, please migrate your projects by following the &lt;a href="https://docs.zama.ai/protocol/solidity-guides/development-guide/migration"&gt;migration guide↗&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;h3&gt;What is FHEVM?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;FHEVM&lt;/strong&gt; is the core framework of the &lt;em&gt;Zama Confidential Blockchain Protocol&lt;/em&gt;. It enables confidential smart contracts on EVM-compatible blockchains by leveraging Fully Homomorphic Encryption (FHE), allowing encrypted data to be processed directly onchain.&lt;/p&gt; 
&lt;p&gt;FHEVM ensures both confidentiality and composability, with the following guarantees:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;End-to-end encryption of transactions and state:&lt;/strong&gt; Data included in transactions is encrypted and never visible to anyone.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Composability and data availability on-chain:&lt;/strong&gt; States are updated while remaining encrypted at all times.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No impact on existing dApps and state:&lt;/strong&gt; Encrypted state co-exists alongside public one, and doesn't impact existing dApps. &lt;br&gt;&lt;br&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Table of contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt;About&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#what-is-fhevm"&gt;What is FHEVM?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#project-structure"&gt;Project structure&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#main-features"&gt;Main features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#use-cases"&gt;Use cases&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#working-with-fhevm"&gt;Working with FHEVM&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#citations"&gt;Citations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#support"&gt;Support&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Project structure&lt;/h3&gt; 
&lt;p&gt;The directories of this repository are organized in the following way:&lt;/p&gt; 
&lt;h6&gt;FHEVM Contracts&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gateway-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart contracts managing the gateway between on-chain and off-chain components.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;host-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart Contracts deployed on the host chain for orchestrating FHE workflows.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Compute Engines&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;coprocessor/&lt;/code&gt;&lt;/strong&gt;: Rust-based coprocessor implementation for FHE operations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;kms-connector/&lt;/code&gt;&lt;/strong&gt;: Interface for integrating with Key Management Services (KMS) to handle encryption keys securely.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Utilities&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;charts/&lt;/code&gt;&lt;/strong&gt;: Helm charts and deployment configurations for the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;golden-container-images/&lt;/code&gt;&lt;/strong&gt;: Docker golden images for Node.js and Rust environments used as base images by the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;test-suite/&lt;/code&gt;&lt;/strong&gt;: Integration with docker-compose and tests covering end-to-end FHEVM stack behavior.&lt;/p&gt; &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Main features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Privacy by design:&lt;/strong&gt; Building decentralized apps with full privacy and confidentiality on Ethereum, leveraging FHE.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Solidity integration:&lt;/strong&gt; Write FHEVM contracts like any standard Solidity contract using Solidity. Compatible with existing toolchains — such as Hardhat and Foundry (&lt;em&gt;coming soon&lt;/em&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Programmable privacy:&lt;/strong&gt; Define exactly what data is encrypted and write the access control logic directly in your smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High precision encrypted integers :&lt;/strong&gt; Up to 256 bits of precision for integers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full range of operators:&lt;/strong&gt; All typical operators are available: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, ternary-if, boolean operations…. Consecutive FHE operations are not limited.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; The underlying FHE crypto-scheme of FHEVM is quantum-resistant. Decryption is managed via a key management system (KMS) using multi-party computation (MPC), ensuring security even if some parties are compromised or misbehaving.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Symbolic execution of FHE computations:&lt;/strong&gt; All FHE operations are executed symbolically on the host chain, significantly reducing execution time. The actual computations on encrypted data are offloaded asynchronously to our coprocessor, allowing for faster, efficient, and scalable processing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more about FHEVM features in the &lt;a href="https://docs.zama.ai/protocol"&gt;documentation&lt;/a&gt; and in our &lt;a href="https://github.com/zama-ai/fhevm/raw/main/fhevm-whitepaper.pdf"&gt;whitepaper&lt;/a&gt;.&lt;/em&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;Use cases&lt;/h3&gt; 
&lt;p&gt;FHEVM is built for developers to write confidential smart contracts without the need to learn cryptography. Leveraging FHEVM, you can unlock a myriad of new use cases such as DeFi, gaming, and more. For instance:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential transfers&lt;/strong&gt;: Keep balances and amounts private, without using mixers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tokenization&lt;/strong&gt;: Swap tokens and RWAs on-chain without others seeing the amounts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blind auctions&lt;/strong&gt;: Bid on items without revealing the amount or the winner.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;On-chain games&lt;/strong&gt;: Keep moves, selections, cards, or items hidden until ready to reveal.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential voting&lt;/strong&gt;: Prevents bribery and blackmailing by keeping votes private.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Encrypted DIDs&lt;/strong&gt;: Store identities on-chain and generate attestations without ZK.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more use cases in the &lt;a href="https://docs.zama.ai/protocol/examples"&gt;list of examples&lt;/a&gt;.&lt;/em&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol"&gt;Documentation&lt;/a&gt; — Official documentation of FHEVM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt;Whitepaper&lt;/a&gt; — Technical overview of FHEVM's cryptographic design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol/examples"&gt;Examples&lt;/a&gt; — Examples of building confidential smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/awesome-zama?tab=readme-ov-file#fhevm"&gt;Awesome Zama – FHEVM&lt;/a&gt; — Curated articles, talks, and ecosystem projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Working with FHEVM&lt;/h2&gt; 
&lt;h3&gt;Citations&lt;/h3&gt; 
&lt;p&gt;To cite FHEVM or the whitepaper in academic papers, please use the following entries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;@Misc{FHEVM,
title={{FHEVM: A full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications},
author={Zama},
year={2025},
note={\url{https://github.com/zama-ai/fhevm}},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;There are two ways to contribute to FHEVM:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/fhevm/issues/new/choose"&gt;Open issues&lt;/a&gt; to report bugs and typos, or to suggest new ideas&lt;/li&gt; 
 &lt;li&gt;Request to become an official contributor by emailing &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Becoming an approved contributor involves signing our Contributor License Agreement (CLA). Only approved contributors can send pull requests, so please make sure to get in touch before you do! &lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;This software is distributed under the &lt;strong&gt;BSD-3-Clause-Clear&lt;/strong&gt; license. Read &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/LICENSE"&gt;this&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Is Zama’s technology free to use?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Zama’s libraries are free to use under the BSD 3-Clause Clear license only for development, research, prototyping, and experimentation purposes. However, for any commercial use of Zama's open source code, companies must purchase Zama’s commercial patent license.&lt;/p&gt; 
 &lt;p&gt;Everything we do is open source, and we are very transparent on what it means for our users, you can read more about how we monetize our open source products at Zama in &lt;a href="https://www.zama.ai/post/open-source"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;What do I need to do if I want to use Zama’s technology for commercial purposes?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;To commercially use Zama’s technology you need to be granted Zama’s patent license. Please contact us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Do you file IP on your technology?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Yes, all Zama’s technologies are patented.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Can you customize a solution for my specific use case?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We are open to collaborating and advancing the FHE space with our partners. If you have specific needs, please email us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;a target="_blank" href="https://community.zama.ai"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/support-banner-dark.png"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/support-banner-light.png"&gt; 
  &lt;img alt="Support"&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;p&gt;🌟 If you find this project helpful or interesting, please consider giving it a star on GitHub! Your support helps to grow the community and motivates further development.&lt;/p&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ↑ Back to top &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Eventual-Inc/Daft</title>
      <link>https://github.com/Eventual-Inc/Daft</link>
      <description>&lt;p&gt;Distributed query engine providing simple and reliable data processing for any modality and scale&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|Banner|&lt;/p&gt; 
&lt;p&gt;|CI| |PyPI| |Latest Tag| |Coverage| |Slack|&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Website &amp;lt;https://www.daft.ai&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Docs &amp;lt;https://docs.daft.ai&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Installation &amp;lt;https://docs.daft.ai/en/stable/install/&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Daft Quickstart &amp;lt;https://docs.daft.ai/en/stable/quickstart/&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Community and Support &amp;lt;https://github.com/Eventual-Inc/Daft/discussions&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;h1&gt;Daft: Unified Engine for Data Analytics, Engineering &amp;amp; ML/AI&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;Daft &amp;lt;https://www.daft.ai&amp;gt;&lt;/code&gt;_ is a distributed query engine for large-scale data processing using Python or SQL, implemented in Rust.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Familiar interactive API:&lt;/strong&gt; Lazy Python Dataframe for rapid and interactive iteration, or SQL for analytical queries&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Focus on the what:&lt;/strong&gt; Powerful Query Optimizer that rewrites queries to be as efficient as possible&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Catalog integrations:&lt;/strong&gt; Full integration with data catalogs such as Apache Iceberg&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rich multimodal type-system:&lt;/strong&gt; Supports multimodal types such as Images, URLs, Tensors and more&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless Interchange&lt;/strong&gt;: Built on the &lt;code&gt;Apache Arrow &amp;lt;https://arrow.apache.org/docs/index.html&amp;gt;&lt;/code&gt;_ In-Memory Format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built for the cloud:&lt;/strong&gt; &lt;code&gt;Record-setting &amp;lt;https://www.daft.ai/blog/announcing-daft-02&amp;gt;&lt;/code&gt;_ I/O performance for integrations with S3 cloud storage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;About Daft&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Benchmarks&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Contributing&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Telemetry&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Related Projects&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;License&lt;/code&gt;_&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About Daft&lt;/h2&gt; 
&lt;p&gt;Daft was designed with the following principles in mind:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Any Data&lt;/strong&gt;: Beyond the usual strings/numbers/dates, Daft columns can also hold complex or nested multimodal data such as Images, Embeddings and Python objects efficiently with it's Arrow based memory representation. Ingestion and basic transformations of multimodal data is extremely easy and performant in Daft.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interactive Computing&lt;/strong&gt;: Daft is built for the interactive developer experience through notebooks or REPLs - intelligent caching/query optimizations accelerates your experimentation and data exploration.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Distributed Computing&lt;/strong&gt;: Some workloads can quickly outgrow your local laptop's computational resources - Daft integrates natively with &lt;code&gt;Ray &amp;lt;https://www.ray.io&amp;gt;&lt;/code&gt;_ for running dataframes on large clusters of machines with thousands of CPUs/GPUs.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Installation ^^^^^^^^^^^^&lt;/p&gt; 
&lt;p&gt;Install Daft with &lt;code&gt;pip install daft&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For more advanced installations (e.g. installing from source or with extra dependencies such as Ray and AWS utilities), please see our &lt;code&gt;Installation Guide &amp;lt;https://docs.daft.ai/en/stable/install/&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;p&gt;Quickstart ^^^^^^^^^^&lt;/p&gt; 
&lt;p&gt;Check out our &lt;code&gt;quickstart &amp;lt;https://docs.daft.ai/en/stable/quickstart/&amp;gt;&lt;/code&gt;_!&lt;/p&gt; 
&lt;p&gt;In this example, we load images from an AWS S3 bucket's URLs and resize each image in the dataframe:&lt;/p&gt; 
&lt;p&gt;.. code:: python&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import daft

# Load a dataframe from filepaths in an S3 bucket
df = daft.from_glob_path("s3://daft-public-data/laion-sample-images/*")

# 1. Download column of image URLs as a column of bytes
# 2. Decode the column of bytes into a column of images
df = df.with_column("image", df["path"].url.download().image.decode())

# Resize each image into 32x32
df = df.with_column("resized", df["image"].image.resize(32, 32))

df.show(3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;|Quickstart Image|&lt;/p&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;|Benchmark Image|&lt;/p&gt; 
&lt;p&gt;To see the full benchmarks, detailed setup, and logs, check out our &lt;code&gt;benchmarking page. &amp;lt;https://docs.daft.ai/en/stable/resources/benchmarks/tpch/&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;p&gt;More Resources ^^^^^^^^^^^^^^&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Daft Quickstart &amp;lt;https://docs.daft.ai/en/stable/quickstart/&amp;gt;&lt;/code&gt;_ - learn more about Daft's full range of capabilities including dataloading from URLs, joins, user-defined functions (UDF), groupby, aggregations and more.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;User Guide &amp;lt;https://docs.daft.ai/en/stable/&amp;gt;&lt;/code&gt;_ - take a deep-dive into each topic within Daft&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;API Reference &amp;lt;https://docs.daft.ai/en/stable/api/&amp;gt;&lt;/code&gt;_ - API reference for public classes/functions of Daft&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SQL Reference &amp;lt;https://docs.daft.ai/en/stable/sql/&amp;gt;&lt;/code&gt;_ - Daft SQL reference&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We &amp;lt;3 developers! To start contributing to Daft, please read &lt;code&gt;CONTRIBUTING.md &amp;lt;https://github.com/Eventual-Inc/Daft/blob/main/CONTRIBUTING.md&amp;gt;&lt;/code&gt;_ This document describes the development lifecycle and toolchain for working on Daft. It also details how to add new functionality to the core engine and expose it through a Python API.&lt;/p&gt; 
&lt;p&gt;Here's a list of &lt;code&gt;good first issues &amp;lt;https://github.com/Eventual-Inc/Daft/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&amp;gt;&lt;/code&gt;_ to get yourself warmed up with Daft. Comment in the issue to pick it up, and feel free to ask any questions!&lt;/p&gt; 
&lt;h2&gt;Telemetry&lt;/h2&gt; 
&lt;p&gt;To help improve Daft, we collect non-identifiable data via Scarf (&lt;a href="https://scarf.sh"&gt;https://scarf.sh&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;To disable this behavior, set the environment variable &lt;code&gt;DO_NOT_TRACK=true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The data that we collect is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Non-identifiable:&lt;/strong&gt; Events are keyed by a session ID which is generated on import of Daft&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Metadata-only:&lt;/strong&gt; We do not collect any of our users’ proprietary code or data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;For development only:&lt;/strong&gt; We do not buy or sell any user data&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Please see our &lt;code&gt;documentation &amp;lt;https://docs.daft.ai/en/stable/resources/telemetry/&amp;gt;&lt;/code&gt;_ for more details.&lt;/p&gt; 
&lt;p&gt;.. image:: &lt;a href="https://static.scarf.sh/a.png?x-pxid=31f8d5ba-7e09-4d75-8895-5252bbf06cf6"&gt;https://static.scarf.sh/a.png?x-pxid=31f8d5ba-7e09-4d75-8895-5252bbf06cf6&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;+---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | Engine | Query Optimizer | Multimodal | Distributed | Arrow Backed | Vectorized Execution Engine | Out-of-core | +===================================================+=================+===============+=============+=================+=============================+=============+ | Daft | Yes | Yes | Yes | Yes | Yes | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Pandas &amp;lt;https://github.com/pandas-dev/pandas&amp;gt;&lt;/code&gt;_ | No | Python object | No | optional &amp;gt;= 2.0 | Some(Numpy) | No | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Polars &amp;lt;https://github.com/pola-rs/polars&amp;gt;&lt;/code&gt;_ | Yes | Python object | No | Yes | Yes | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Modin &amp;lt;https://github.com/modin-project/modin&amp;gt;&lt;/code&gt;_ | Eagar | Python object | Yes | No | Some(Pandas) | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Pyspark &amp;lt;https://github.com/apache/spark&amp;gt;&lt;/code&gt;_ | Yes | No | Yes | Pandas UDF/IO | Pandas UDF | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Dask DF &amp;lt;https://github.com/dask/dask&amp;gt;&lt;/code&gt;_ | No | Python object | Yes | No | Some(Pandas) | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+&lt;/p&gt; 
&lt;p&gt;Check out our &lt;code&gt;engine comparison page &amp;lt;https://docs.daft.ai/en/stable/resources/engine_comparison/&amp;gt;&lt;/code&gt;_ for more details!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Daft has an Apache 2.0 license - please see the LICENSE file.&lt;/p&gt; 
&lt;p&gt;.. |Quickstart Image| image:: &lt;a href="https://github.com/Eventual-Inc/Daft/assets/17691182/dea2f515-9739-4f3e-ac58-cd96d51e44a8"&gt;https://github.com/Eventual-Inc/Daft/assets/17691182/dea2f515-9739-4f3e-ac58-cd96d51e44a8&lt;/a&gt; :alt: Dataframe code to load a folder of images from AWS S3 and create thumbnails :height: 256&lt;/p&gt; 
&lt;p&gt;.. |Benchmark Image| image:: &lt;a href="https://github-production-user-asset-6210df.s3.amazonaws.com/2550285/243524430-338e427d-f049-40b3-b555-4059d6be7bfd.png"&gt;https://github-production-user-asset-6210df.s3.amazonaws.com/2550285/243524430-338e427d-f049-40b3-b555-4059d6be7bfd.png&lt;/a&gt; :alt: Benchmarks for SF100 TPCH&lt;/p&gt; 
&lt;p&gt;.. |Banner| image:: &lt;a href="https://daft.ai/images/diagram.png"&gt;https://daft.ai/images/diagram.png&lt;/a&gt; :target: &lt;a href="https://www.daft.ai"&gt;https://www.daft.ai&lt;/a&gt; :alt: Daft dataframes can load any data such as PDF documents, images, protobufs, csv, parquet and audio files into a table dataframe structure for easy querying&lt;/p&gt; 
&lt;p&gt;.. |CI| image:: &lt;a href="https://github.com/Eventual-Inc/Daft/actions/workflows/pr-test-suite.yml/badge.svg"&gt;https://github.com/Eventual-Inc/Daft/actions/workflows/pr-test-suite.yml/badge.svg&lt;/a&gt; :target: &lt;a href="https://github.com/Eventual-Inc/Daft/actions/workflows/pr-test-suite.yml?query=branch:main"&gt;https://github.com/Eventual-Inc/Daft/actions/workflows/pr-test-suite.yml?query=branch:main&lt;/a&gt; :alt: Github Actions tests&lt;/p&gt; 
&lt;p&gt;.. |PyPI| image:: &lt;a href="https://img.shields.io/pypi/v/daft.svg?label=pip&amp;amp;logo=PyPI&amp;amp;logoColor=white"&gt;https://img.shields.io/pypi/v/daft.svg?label=pip&amp;amp;logo=PyPI&amp;amp;logoColor=white&lt;/a&gt; :target: &lt;a href="https://pypi.org/project/daft"&gt;https://pypi.org/project/daft&lt;/a&gt; :alt: PyPI&lt;/p&gt; 
&lt;p&gt;.. |Latest Tag| image:: &lt;a href="https://img.shields.io/github/v/tag/Eventual-Inc/Daft?label=latest&amp;amp;logo=GitHub"&gt;https://img.shields.io/github/v/tag/Eventual-Inc/Daft?label=latest&amp;amp;logo=GitHub&lt;/a&gt; :target: &lt;a href="https://github.com/Eventual-Inc/Daft/tags"&gt;https://github.com/Eventual-Inc/Daft/tags&lt;/a&gt; :alt: latest tag&lt;/p&gt; 
&lt;p&gt;.. |Coverage| image:: &lt;a href="https://codecov.io/gh/Eventual-Inc/Daft/branch/main/graph/badge.svg?token=J430QVFE89"&gt;https://codecov.io/gh/Eventual-Inc/Daft/branch/main/graph/badge.svg?token=J430QVFE89&lt;/a&gt; :target: &lt;a href="https://codecov.io/gh/Eventual-Inc/Daft"&gt;https://codecov.io/gh/Eventual-Inc/Daft&lt;/a&gt; :alt: Coverage&lt;/p&gt; 
&lt;p&gt;.. |Slack| image:: &lt;a href="https://img.shields.io/badge/slack-@distdata-purple.svg?logo=slack"&gt;https://img.shields.io/badge/slack-@distdata-purple.svg?logo=slack&lt;/a&gt; :target: &lt;a href="https://join.slack.com/t/dist-data/shared_invite/zt-2e77olvxw-uyZcPPV1SRchhi8ah6ZCtg"&gt;https://join.slack.com/t/dist-data/shared_invite/zt-2e77olvxw-uyZcPPV1SRchhi8ah6ZCtg&lt;/a&gt; :alt: slack community&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aome510/spotify-player</title>
      <link>https://github.com/aome510/spotify-player</link>
      <description>&lt;p&gt;A Spotify player in the terminal with full feature parity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spotify_player&lt;/h1&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#features"&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#spotify-connect"&gt;Spotify Connect&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#streaming"&gt;Streaming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#media-control"&gt;Media Control&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#image"&gt;Image&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#notify"&gt;Notify&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#mouse-support"&gt;Mouse support&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#daemon"&gt;Daemon&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#fuzzy-search"&gt;Fuzzy search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#cli-commands"&gt;CLI commands&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#configurations"&gt;Configurations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#caches"&gt;Caches&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#acknowledgement"&gt;Acknowledgement&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; is a fast, easy to use, and configurable terminal music player.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimalist UI with an intuitive paging and popup system.&lt;/li&gt; 
 &lt;li&gt;Highly &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md"&gt;configurable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Feature parity with the official Spotify application.&lt;/li&gt; 
 &lt;li&gt;Support remote control with &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#spotify-connect"&gt;Spotify Connect&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#streaming"&gt;streaming&lt;/a&gt; songs directly from the terminal.&lt;/li&gt; 
 &lt;li&gt;Support synced lyrics.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#media-control"&gt;cross-platform media control&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#image"&gt;image rendering&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#notify"&gt;desktop notification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support running the application as &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#daemon"&gt;a daemon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Offer a wide range of &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#cli-commands"&gt;CLI commands&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;A demo of &lt;code&gt;spotify_player&lt;/code&gt; &lt;code&gt;v0.5.0-pre-release&lt;/code&gt; on &lt;a href="https://www.youtube.com/watch/Jbfe9GLNWbA"&gt;youtube&lt;/a&gt; or on &lt;a href="https://asciinema.org/a/446913"&gt;asciicast&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;Checkout &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/examples/README.md"&gt;examples/README.md&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;By default, the application's installed binary is &lt;code&gt;spotify_player&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;A Spotify Premium account is &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt; 
&lt;h4&gt;Dependencies&lt;/h4&gt; 
&lt;h5&gt;Windows and MacOS&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust and cargo&lt;/a&gt; as the build dependencies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Linux&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust and cargo&lt;/a&gt; as the build dependencies&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;install &lt;code&gt;openssl&lt;/code&gt;, &lt;code&gt;alsa-lib&lt;/code&gt; (&lt;code&gt;streaming&lt;/code&gt; feature), &lt;code&gt;libdbus&lt;/code&gt; (&lt;code&gt;media-control&lt;/code&gt; feature).&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;For example, on Debian based systems, run the below command to install application's dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sudo apt install libssl-dev libasound2-dev libdbus-1-dev
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;On RHEL/Fedora based systems, run the below command to install application's dependencies :&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sudo dnf install openssl-devel alsa-lib-devel dbus-devel
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you're using &lt;code&gt;yum&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sudo yum install openssl-devel alsa-lib-devel dbus-devel
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Binaries&lt;/h3&gt; 
&lt;p&gt;Application's prebuilt binaries can be found in the &lt;a href="https://github.com/aome510/spotify-player/releases"&gt;Releases Page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: to run the application, Linux systems need to install additional dependencies as specified in the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#linux"&gt;Dependencies section&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;brew install spotify_player&lt;/code&gt; to install the application.&lt;/p&gt; 
&lt;h3&gt;Scoop&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;scoop install spotify-player&lt;/code&gt; to install the application.&lt;/p&gt; 
&lt;h3&gt;Cargo&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;cargo install spotify_player --locked&lt;/code&gt; to install the application from &lt;a href="https://crates.io/crates/spotify_player"&gt;crates.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;pacman -S spotify-player&lt;/code&gt; to install the application.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Defaults to PulseAudio / Pipewire audio backend. For a different one, please consider modifying the &lt;a href="https://gitlab.archlinux.org/archlinux/packaging/packages/spotify-player"&gt;official PKGBUILD&lt;/a&gt; and rebuilding it manually. See &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#audio-backend"&gt;Audio Backends&lt;/a&gt; for a list of options.&lt;/p&gt; 
&lt;h3&gt;Void Linux&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;xbps-install -S spotify-player&lt;/code&gt; to install the application.&lt;/p&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;pkg install spotify-player&lt;/code&gt; to install the &lt;code&gt;spotify_player&lt;/code&gt; binary from FreeBSD ports.&lt;/p&gt; 
&lt;h3&gt;NetBSD&lt;/h3&gt; 
&lt;p&gt;Using the package manager, run &lt;code&gt;pkgin install spotify-player&lt;/code&gt; to install from the official repositories.&lt;/p&gt; 
&lt;p&gt;Building from source,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd /usr/pkgsrc/audio/spotify-player
make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NixOS&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://search.nixos.org/packages?channel=unstable&amp;amp;show=spotify-player&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=spotify-player"&gt;spotify-player&lt;/a&gt; is available as a Nix package and can be installed via &lt;code&gt;nix-shell -p spotify-player&lt;/code&gt; or as part of your system configuration.&lt;/p&gt; 
&lt;p&gt;If you want to build the source locally you can run &lt;code&gt;nix-shell&lt;/code&gt; in the root of a checkout of the source code. The provided &lt;code&gt;shell.nix&lt;/code&gt; file will install the build prerequisites.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#streaming"&gt;streaming&lt;/a&gt; feature is disabled when using the docker image.&lt;/p&gt; 
&lt;p&gt;You can download the binary image of the latest build from the &lt;code&gt;master&lt;/code&gt; branch by running&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker pull aome510/spotify_player:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;then run&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm -it aome510/spotify_player:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to run the application.&lt;/p&gt; 
&lt;p&gt;You can also use your local config folder to configure the application or your local cache folder to store the application's cache data when running the docker image:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm \
-v $APP_CONFIG_FOLDER:/app/config/ \
-v $APP_CACHE_FOLDER:/app/cache/ \
-it aome510/spotify_player:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Spotify Connect&lt;/h3&gt; 
&lt;p&gt;To enable a full &lt;a href="https://www.spotify.com/us/connect/"&gt;Spotify connect&lt;/a&gt; support, user will need to register a Spotify application and specify the application's &lt;code&gt;client_id&lt;/code&gt; in the general configuration file as described in the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md#general"&gt;configuration documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;More details about registering a Spotify application can be found in the &lt;a href="https://developer.spotify.com/documentation/general/guides/authorization/app-settings/"&gt;official Spotify documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When &lt;code&gt;spotify_player&lt;/code&gt; runs with your own &lt;code&gt;client_id&lt;/code&gt;, press &lt;strong&gt;D&lt;/strong&gt; (default shortcut for &lt;code&gt;SwitchDevice&lt;/code&gt; command) to get the list of available devices, then press &lt;strong&gt;enter&lt;/strong&gt; (default shortcut for &lt;code&gt;ChooseSelected&lt;/code&gt; command) to connect to the selected device.&lt;/p&gt; 
&lt;h3&gt;Streaming&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; supports streaming, which needs to be built/installed with &lt;code&gt;streaming&lt;/code&gt; feature (&lt;strong&gt;enabled&lt;/strong&gt; by default) &lt;strong&gt;and&lt;/strong&gt; with an audio backend (&lt;code&gt;rodio-backend&lt;/code&gt; by default). The streaming feature allows to &lt;code&gt;spotify_player&lt;/code&gt; to play music directly from terminal.&lt;/p&gt; 
&lt;p&gt;The application uses &lt;a href="https://github.com/librespot-org/librespot"&gt;librespot&lt;/a&gt; library to create an integrated Spotify client while running. The integrated client will register a Spotify speaker device under the &lt;code&gt;spotify-player&lt;/code&gt; name, which is accessible on the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#spotify-connect"&gt;Spotify connect&lt;/a&gt; device list.&lt;/p&gt; 
&lt;h4&gt;Audio backend&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; uses &lt;a href="https://github.com/RustAudio/rodio"&gt;rodio&lt;/a&gt; as the default &lt;a href="https://github.com/librespot-org/librespot/wiki/Audio-Backends"&gt;audio backend&lt;/a&gt;. List of available audio backends:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;alsa-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pulseaudio-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rodio-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;portaudio-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jackaudio-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rodiojack-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sdl-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;gstreamer-backend&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;User can change the audio backend when building/installing the application by specifying the &lt;code&gt;--features&lt;/code&gt; option. For example, to install &lt;code&gt;spotify_player&lt;/code&gt; with &lt;code&gt;pulseaudio-backend&lt;/code&gt;, run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --no-default-features --features pulseaudio-backend
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;needs to specify &lt;code&gt;--no-default-features&lt;/code&gt; here because &lt;code&gt;rodio-backend&lt;/code&gt; is one of the default features.&lt;/li&gt; 
 &lt;li&gt;user will need to install additional dependencies depending on the selected audio backend. More details can be found in the &lt;a href="https://github.com/librespot-org/librespot/wiki/Compiling#general-dependencies"&gt;Librespot documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;streaming&lt;/code&gt; feature can be also disabled upon installing by running&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Media Control&lt;/h3&gt; 
&lt;p&gt;To enable media control support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;media-control&lt;/code&gt; feature (&lt;strong&gt;enabled&lt;/strong&gt; by default) and set the &lt;code&gt;enable_media_control&lt;/code&gt; config option to &lt;code&gt;true&lt;/code&gt; in the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md#media-control"&gt;general configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Media control support is implemented using &lt;a href="https://wiki.archlinux.org/title/MPRIS"&gt;MPRIS DBus&lt;/a&gt; on Linux and OS window event listener on Windows and MacOS.&lt;/p&gt; 
&lt;h3&gt;Image&lt;/h3&gt; 
&lt;p&gt;To enable image rendering support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;image&lt;/code&gt; feature (&lt;strong&gt;disabled&lt;/strong&gt; by default). To install the application with &lt;code&gt;image&lt;/code&gt; feature included, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features image
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; supports rendering image in a full resolution if the application is run on either &lt;a href="https://sw.kovidgoyal.net/kitty/graphics-protocol/"&gt;Kitty&lt;/a&gt; or &lt;a href="https://iterm2.com/documentation-images.html"&gt;iTerm2&lt;/a&gt;. Otherwise, the image will be displayed as &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;block characters&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; also supports rendering images with &lt;code&gt;sixel&lt;/code&gt; behind &lt;code&gt;sixel&lt;/code&gt; feature flag, which also enables &lt;code&gt;image&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features sixel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not all terminals supported by &lt;a href="https://github.com/saitoha/libsixel"&gt;libsixel&lt;/a&gt; are supported by &lt;code&gt;spotify_player&lt;/code&gt; as it relies on a &lt;a href="https://github.com/atanunq/viuer"&gt;third-party library&lt;/a&gt; for image rendering. A possible list of supported terminals can be found in &lt;a href="https://github.com/atanunq/viuer/raw/dc81f44a97727e04be0b000712e9233c92116ff8/src/printer/sixel.rs#L83-L95"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Images rendered by &lt;code&gt;sixel&lt;/code&gt; can have a &lt;em&gt;weird&lt;/em&gt; scale. It's recommended to tweak the &lt;code&gt;cover_img_scale&lt;/code&gt; config option to get the best result as the scaling works differently with different terminals and fonts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Examples of image rendering:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iTerm2:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/40011582/172966798-0aadc431-b0c3-4433-adf3-7526684fc2a0.png" alt="iTerm2"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Kitty:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/40011582/172967028-8cfb2daa-1642-499a-a5bf-8ed77f2b3fac.png" alt="kitty"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sixel (&lt;code&gt;foot&lt;/code&gt; terminal, &lt;code&gt;cover_img_scale=1.8&lt;/code&gt;):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/40011582/219880331-58ac1c30-bbb0-4c99-a6cc-e5b7c9c81455.png" alt="sixel"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Others:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/40011582/172967325-d2098037-e19e-440a-a38a-5b076253ecb1.png" alt="others"&gt;&lt;/p&gt; 
&lt;h4&gt;Pixelate&lt;/h4&gt; 
&lt;p&gt;If your terminal supports high-res images, but you like the pixelated look you can enable the &lt;code&gt;pixelate&lt;/code&gt; feature, which also enables the &lt;code&gt;image&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features pixelate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The amount of pixels can be tweaked via the &lt;code&gt;cover_img_pixels&lt;/code&gt; config option.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;code&gt;cover_img_pixels&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;8&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;16&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;32&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;64&lt;/code&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;example&lt;/td&gt; 
   &lt;td&gt;&lt;img width="100" alt="8x8" src="https://github.com/user-attachments/assets/4137aaea-ce28-4019-8cd5-2d14327e72e4"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img width="100" alt="16x16" src="https://github.com/user-attachments/assets/0ca94748-093a-468c-8fb3-1f5639666eb6"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img width="100" alt="32x32" src="https://github.com/user-attachments/assets/f5d0f2da-0439-47e4-91c9-3a2aa73ac90c"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img width="100" alt="64x64" src="https://github.com/user-attachments/assets/d06ef731-38fa-424d-9672-313f56c193d0"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To temporarily disable the &lt;code&gt;pixelate&lt;/code&gt; feature just set &lt;code&gt;cover_img_pixels&lt;/code&gt; to a high value like &lt;code&gt;512&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Notify&lt;/h3&gt; 
&lt;p&gt;To enable desktop notification support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;notify&lt;/code&gt; feature (&lt;strong&gt;disabled&lt;/strong&gt; by default). To install the application with &lt;code&gt;notify&lt;/code&gt; feature included, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features notify
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the notification support in &lt;code&gt;MacOS&lt;/code&gt; and &lt;code&gt;Windows&lt;/code&gt; are quite restricted compared to &lt;code&gt;Linux&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Mouse support&lt;/h3&gt; 
&lt;p&gt;Currently, the only supported use case for mouse is to seek to a position of the current playback by left-clicking to such position in the playback's progress bar.&lt;/p&gt; 
&lt;h3&gt;Daemon&lt;/h3&gt; 
&lt;p&gt;To enable a &lt;a href="https://en.wikipedia.org/wiki/Daemon_(computing)"&gt;daemon&lt;/a&gt; support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;daemon&lt;/code&gt; feature (&lt;strong&gt;disabled&lt;/strong&gt; by default). To install the application with &lt;code&gt;daemon&lt;/code&gt; feature included, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features daemon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run the application as a daemon by specifying the &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--daemon&lt;/code&gt; option: &lt;code&gt;spotify_player -d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;daemon&lt;/code&gt; feature is not supported on Windows&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;daemon&lt;/code&gt; feature requires the &lt;code&gt;streaming&lt;/code&gt; feature to be enabled and the application to be built with &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#audio-backend"&gt;an audio backend&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;because of the OS's restrictions, &lt;code&gt;daemon&lt;/code&gt; feature doesn't work with the &lt;code&gt;media-control&lt;/code&gt; feature on MacOS, which is &lt;strong&gt;enabled by default&lt;/strong&gt;. In other words, if you want to use the &lt;code&gt;daemon&lt;/code&gt; feature on MacOS, you must install the application with &lt;code&gt;media-control&lt;/code&gt; feature &lt;strong&gt;disabled&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --no-default-features --features daemon,rodio-backend
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Fuzzy search&lt;/h3&gt; 
&lt;p&gt;To enable &lt;a href="https://en.wikipedia.org/wiki/Approximate_string_matching"&gt;fuzzy search&lt;/a&gt; support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;fzf&lt;/code&gt; feature (&lt;strong&gt;disabled&lt;/strong&gt; by default).&lt;/p&gt; 
&lt;h3&gt;CLI Commands&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; offers several CLI commands to interact with Spotify:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: Get Spotify data (playlist/album/artist data, user's data, etc)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;playback&lt;/code&gt;: Interact with the playback (start a playback, play-pause, next, etc)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;search&lt;/code&gt;: Search spotify&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;connect&lt;/code&gt;: Connect to a Spotify device&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;like&lt;/code&gt;: Like currently playing track&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;authenticate&lt;/code&gt;: Authenticate the application&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;playlist&lt;/code&gt;: Playlist editing (new, delete, import, fork, etc)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more details, run &lt;code&gt;spotify_player -h&lt;/code&gt; or &lt;code&gt;spotify_player {command} -h&lt;/code&gt;, in which &lt;code&gt;{command}&lt;/code&gt; is a CLI command.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When using the CLI for the first time, you'll need to run &lt;code&gt;spotify_player authenticate&lt;/code&gt; to authenticate the application beforehand.&lt;/li&gt; 
 &lt;li&gt;Under the hood, CLI command is handled by sending requests to a &lt;code&gt;spotify_player&lt;/code&gt; client socket running on port &lt;code&gt;client_port&lt;/code&gt;, &lt;a href="https://github.com/aome510/spotify-player/raw/master/docs/config.md#general"&gt;a general application configuration&lt;/a&gt; with a default value of &lt;code&gt;8080&lt;/code&gt;. If there is no running application's instance, a new client will be created upon handling the CLI commands, which increases the latency of the command.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Scripting&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;spotify_player&lt;/code&gt; command-line interface makes scripting easy. With the &lt;code&gt;search&lt;/code&gt; subcommand, you can search Spotify and retrieve data in JSON format, enabling queries with tools like &lt;a href="https://jqlang.github.io/jq/"&gt;jq&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here’s an example of starting playback for the first track from a search query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;read -p "Search spotify: " query
spotify_player playback start track --id $(spotify_player search "$query" | jq '.tracks.[0].id' | xargs)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;To go to the shortcut help page, press &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;C-h&lt;/code&gt; (default shortcuts for &lt;code&gt;OpenCommandHelp&lt;/code&gt; command).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can search in the shortcut help page (and some other pages) using &lt;code&gt;Search&lt;/code&gt; command&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RefreshPlayback&lt;/code&gt; can be used to manually update the playback status.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RestartIntegratedClient&lt;/code&gt; is useful when user wants to switch to another audio device (headphone, earphone, etc) without restarting the application, as the integrated client will be re-initialized with the new device.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;List of supported commands:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Default shortcuts&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NextTrack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;next track&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PreviousTrack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;previous track&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ResumePause&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;resume/pause based on the current playback&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;space&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PlayRandom&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;play a random track in the current context&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Repeat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;cycle the repeat mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ToggleFakeTrackRepeatMode&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;toggle fake track repeat mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;M-r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Shuffle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;toggle the shuffle mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-s&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;VolumeChange&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;change playback volume by an offset (default shortcuts use 5%)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Mute&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;toggle playback volume between 0% and previous level&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SeekForward&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;seek forward by 5s&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SeekBackward&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;seek backward by 5s&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Quit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;quit the application&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-c&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ClosePopup&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;close a popup&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;esc&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SelectNextOrScrollDown&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the next item in a list/table or scroll down (supports vim-style count: 5j)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;C-n&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SelectPreviousOrScrollUp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the previous item in a list/table or scroll up (supports vim-style count: 10k)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;k&lt;/code&gt;, &lt;code&gt;C-p&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PageSelectNextOrScrollDown&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the next page item in a list/table or scroll a page down (supports vim-style count: 3C-f)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;page_down&lt;/code&gt;, &lt;code&gt;C-f&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PageSelectPreviousOrScrollUp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the previous page item in a list/table or scroll a page up (supports vim-style count: 2C-b)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;page_up&lt;/code&gt;, &lt;code&gt;C-b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SelectFirstOrScrollToTop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the first item in a list/table or scroll to the top&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g g&lt;/code&gt;, &lt;code&gt;home&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SelectLastOrScrollToBottom&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the last item in a list/table or scroll to the bottom&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;G&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ChooseSelected&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;choose the selected item&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RefreshPlayback&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;manually refresh the current playback&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RestartIntegratedClient&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;restart the integrated client (&lt;code&gt;streaming&lt;/code&gt; feature only)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ShowActionsOnSelectedItem&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup showing actions on a selected item&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g a&lt;/code&gt;, &lt;code&gt;C-space&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ShowActionsOnCurrentTrack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup showing actions on the current track&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;AddSelectedItemToQueue&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;add the selected item to queue&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;C-z&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FocusNextWindow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;focus the next focusable window (if any)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FocusPreviousWindow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;focus the previous focusable window (if any)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;backtab&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SwitchTheme&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for switching theme&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SwitchDevice&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for switching device&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Search&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for searching in the current page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BrowseUserPlaylists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for browsing user's playlists&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;u p&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BrowseUserFollowedArtists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for browsing user's followed artists&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;u a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BrowseUserSavedAlbums&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for browsing user's saved albums&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;u A&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CurrentlyPlayingContextPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the currently playing context page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g space&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;TopTrackPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the user top track page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g t&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RecentlyPlayedTrackPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the user recently played track page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LikedTrackPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the user liked track page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g y&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LyricsPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the lyrics page of the current track&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g L&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LibraryPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the user library page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g l&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SearchPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the search page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g s&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BrowsePage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the browse page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the queue page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;z&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;OpenCommandHelp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the command help page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;, &lt;code&gt;C-h&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PreviousPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the previous page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;backspace&lt;/code&gt;, &lt;code&gt;C-q&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;OpenSpotifyLinkFromClipboard&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a Spotify link from clipboard&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;O&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByTitle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's title&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s t&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByArtists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's artists&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByAlbum&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's album&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s A&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByAddedDate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's added date&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s D&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByDuration&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's duration&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s d&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortLibraryAlphabetically&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the library alphabetically&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s l a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortLibraryByRecent&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the library (playlists and albums) by recently added items&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s l r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ReverseOrder&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;reverse the order of the track table (if any)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MovePlaylistItemUp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;move playlist item up one position&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-k&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MovePlaylistItemDown&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;move playlist item down one position&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-j&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CreatePlaylist&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;create a new playlist&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;JumpToCurrentTrackInContext&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;jump to the current track in the context&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g c&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;JumpToHighlightTrackInContext&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;jump to the currently highlighted search result in the context&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-g&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To add new shortcuts or modify the default shortcuts, please refer to the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md#keymaps"&gt;keymaps section&lt;/a&gt; in the configuration documentation.&lt;/p&gt; 
&lt;h3&gt;Actions&lt;/h3&gt; 
&lt;p&gt;A general list of actions is available; however, not all Spotify items (track, album, artist, or playlist) implement each action. To get the list of available actions on an item, call the &lt;code&gt;ShowActionsOnCurrentTrack&lt;/code&gt; command or the &lt;code&gt;ShowActionsOnSelectedItem&lt;/code&gt; command, then press enter (default binding for the &lt;code&gt;ChooseSelected&lt;/code&gt; command) to initiate the selected action. Some actions may not appear in the popup but can be bound to a shortcut.&lt;/p&gt; 
&lt;p&gt;List of available actions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GoToArtist&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GoToAlbum&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GoToRadio&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AddToLibrary&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AddToPlaylist&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AddToQueue&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AddToLiked&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DeleteFromLiked&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DeleteFromLibrary&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DeleteFromPlaylist&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ShowActionsOnAlbum&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ShowActionsOnArtist&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ShowActionsOnShow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ToggleLiked&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopyLink&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Follow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Unfollow&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These actions can also be bound to a shortcut. To add new shortcuts, please refer to the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md#actions"&gt;actions section&lt;/a&gt; in the configuration documentation.&lt;/p&gt; 
&lt;h3&gt;Search Page&lt;/h3&gt; 
&lt;p&gt;When first entering the search page, the application focuses on the search input. User can then input text, delete one character backward using &lt;code&gt;backspace&lt;/code&gt;, or search the text using &lt;code&gt;enter&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To move the focus from the search input to the other windows such as track results, album results, etc, use &lt;code&gt;FocusNextWindow&lt;/code&gt; or &lt;code&gt;FocusPreviousWindow&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Configurations&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;spotify_player&lt;/code&gt; will look into &lt;code&gt;$HOME/.config/spotify-player&lt;/code&gt; for application's configuration files. This can be changed by either specifying &lt;code&gt;-c &amp;lt;FOLDER_PATH&amp;gt;&lt;/code&gt; or &lt;code&gt;--config-folder &amp;lt;FOLDER_PATH&amp;gt;&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;If an application configuration file is not found, one will be created with default values.&lt;/p&gt; 
&lt;p&gt;Please refer to &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md"&gt;the configuration documentation&lt;/a&gt; for more details on the configuration options.&lt;/p&gt; 
&lt;h2&gt;Caches&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;spotify_player&lt;/code&gt; will look into &lt;code&gt;$HOME/.cache/spotify-player&lt;/code&gt; for application's cache files, which include log files, Spotify's authorization credentials, audio cache files, etc. This can be changed by either specifying &lt;code&gt;-C &amp;lt;FOLDER_PATH&amp;gt;&lt;/code&gt; or &lt;code&gt;--cache-folder &amp;lt;FOLDER_PATH&amp;gt;&lt;/code&gt; option.&lt;/p&gt; 
&lt;h3&gt;Logging&lt;/h3&gt; 
&lt;p&gt;The application stores logs inside the &lt;code&gt;$APP_CACHE_FOLDER/spotify-player-*.log&lt;/code&gt; file. For debugging or submitting an issue, user can also refer to the backtrace file in &lt;code&gt;$APP_CACHE_FOLDER/spotify-player-*.backtrace&lt;/code&gt;, which includes the application's backtrace in case of panics/unexpected errors.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; uses &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable to define the application's &lt;a href="https://docs.rs/log/0.4.14/log/enum.Level.html"&gt;logging level&lt;/a&gt;. &lt;code&gt;RUST_LOG&lt;/code&gt; is default to be &lt;code&gt;spotify_player=INFO&lt;/code&gt;, which only shows the application's logs.&lt;/p&gt; 
&lt;h2&gt;Acknowledgement&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; and is built on top of awesome libraries such as &lt;a href="https://github.com/ratatui/ratatui"&gt;ratatui&lt;/a&gt;, &lt;a href="https://github.com/ramsayleung/rspotify"&gt;rspotify&lt;/a&gt;, &lt;a href="https://github.com/librespot-org/librespot"&gt;librespot&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/spotify_player/Cargo.toml"&gt;many more&lt;/a&gt;. It's highly inspired by &lt;a href="https://github.com/Rigellute/spotify-tui"&gt;spotify-tui&lt;/a&gt; and &lt;a href="https://github.com/hrkfdn/ncspot"&gt;ncspot&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openai/codex</title>
      <link>https://github.com/openai/codex</link>
      <description>&lt;p&gt;Lightweight coding agent that runs in your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;OpenAI Codex CLI&lt;/h1&gt; 
&lt;p align="center"&gt;&lt;code&gt;npm i -g @openai/codex&lt;/code&gt;&lt;br&gt;or &lt;code&gt;brew install codex&lt;/code&gt;&lt;/p&gt; 
&lt;p align="center"&gt;&lt;strong&gt;Codex CLI&lt;/strong&gt; is a coding agent from OpenAI that runs locally on your computer.&lt;br&gt;If you are looking for the &lt;em&gt;cloud-based agent&lt;/em&gt; from OpenAI, &lt;strong&gt;Codex Web&lt;/strong&gt;, see &lt;a href="https://chatgpt.com/codex"&gt;chatgpt.com/codex&lt;/a&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-splash.png" alt="Codex CLI splash" width="50%"&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;!-- Begin ToC --&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#quickstart"&gt;Quickstart&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#installing-and-running-codex-cli"&gt;Installing and running Codex CLI&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#using-codex-with-your-chatgpt-plan"&gt;Using Codex with your ChatGPT plan&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#usage-based-billing-alternative-use-an-openai-api-key"&gt;Usage-based billing alternative: Use an OpenAI API key&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#choosing-codexs-level-of-autonomy"&gt;Choosing Codex's level of autonomy&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#1-readwrite"&gt;&lt;strong&gt;1. Read/write&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#2-read-only"&gt;&lt;strong&gt;2. Read-only&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#3-advanced-configuration"&gt;&lt;strong&gt;3. Advanced configuration&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#can-i-run-without-any-approvals"&gt;Can I run without ANY approvals?&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#fine-tuning-in-configtoml"&gt;Fine-tuning in &lt;code&gt;config.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#example-prompts"&gt;Example prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#running-with-a-prompt-as-input"&gt;Running with a prompt as input&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#using-open-source-models"&gt;Using Open Source Models&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#platform-sandboxing-details"&gt;Platform sandboxing details&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#experimental-technology-disclaimer"&gt;Experimental technology disclaimer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#system-requirements"&gt;System requirements&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#cli-reference"&gt;CLI reference&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#memory--project-docs"&gt;Memory &amp;amp; project docs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#non-interactive--ci-mode"&gt;Non-interactive / CI mode&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#model-context-protocol-mcp"&gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#tracing--verbose-logging"&gt;Tracing / verbose logging&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#dotslash"&gt;DotSlash&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#zero-data-retention-zdr-usage"&gt;Zero data retention (ZDR) usage&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#codex-open-source-fund"&gt;Codex open source fund&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#contributing"&gt;Contributing&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#development-workflow"&gt;Development workflow&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#writing-high-impact-code-changes"&gt;Writing high-impact code changes&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#opening-a-pull-request"&gt;Opening a pull request&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#review-process"&gt;Review process&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#community-values"&gt;Community values&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#getting-help"&gt;Getting help&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#contributor-license-agreement-cla"&gt;Contributor license agreement (CLA)&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#quick-fixes"&gt;Quick fixes&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#releasing-codex"&gt;Releasing &lt;code&gt;codex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#security--responsible-ai"&gt;Security &amp;amp; responsible AI&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;!-- End ToC --&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Installing and running Codex CLI&lt;/h3&gt; 
&lt;p&gt;Install globally with your preferred package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;npm install -g @openai/codex  # Alternatively: `brew install codex`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then simply run &lt;code&gt;codex&lt;/code&gt; to get started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;You can also go to the &lt;a href="https://github.com/openai/codex/releases/latest"&gt;latest GitHub Release&lt;/a&gt; and download the appropriate binary for your platform.&lt;/summary&gt; 
 &lt;p&gt;Each GitHub Release contains many executables, but in practice, you likely want one of these:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;macOS 
   &lt;ul&gt; 
    &lt;li&gt;Apple Silicon/arm64: &lt;code&gt;codex-aarch64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;x86_64 (older Mac hardware): &lt;code&gt;codex-x86_64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Linux 
   &lt;ul&gt; 
    &lt;li&gt;x86_64: &lt;code&gt;codex-x86_64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;arm64: &lt;code&gt;codex-aarch64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Each archive contains a single entry with the platform baked into the name (e.g., &lt;code&gt;codex-x86_64-unknown-linux-musl&lt;/code&gt;), so you likely want to rename it to &lt;code&gt;codex&lt;/code&gt; after extracting it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Codex with your ChatGPT plan&lt;/h3&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-login.png" alt="Codex CLI login" width="50%"&gt; &lt;/p&gt; 
&lt;p&gt;After you run &lt;code&gt;codex&lt;/code&gt; select Sign in with ChatGPT. You'll need a Plus, Pro, or Team ChatGPT account, and will get access to our latest models, including &lt;code&gt;gpt-5&lt;/code&gt;, at no extra cost to your plan. (Enterprise is coming soon.)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Important: If you've used the Codex CLI before, you'll need to follow these steps to migrate from usage-based billing with your API key:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Update the CLI with &lt;code&gt;codex update&lt;/code&gt; and ensure &lt;code&gt;codex --version&lt;/code&gt; is greater than 0.13&lt;/li&gt; 
  &lt;li&gt;Ensure that there is no &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable set. (Check that &lt;code&gt;env | grep 'OPENAI_API_KEY'&lt;/code&gt; returns empty)&lt;/li&gt; 
  &lt;li&gt;Run &lt;code&gt;codex login&lt;/code&gt; again&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you encounter problems with the login flow, please comment on &lt;a href="https://github.com/openai/codex/issues/1243"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Usage-based billing alternative: Use an OpenAI API key&lt;/h3&gt; 
&lt;p&gt;If you prefer to pay-as-you-go, you can still authenticate with your OpenAI API key by setting it as an environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;export OPENAI_API_KEY="your-api-key-here"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: This command only sets the key for your current terminal session, which we recommend. To set it for all future sessions, you can also add the &lt;code&gt;export&lt;/code&gt; line to your shell's configuration file (e.g., &lt;code&gt;~/.zshrc&lt;/code&gt;).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Choosing Codex's level of autonomy&lt;/h3&gt; 
&lt;p&gt;We always recommend running Codex in its default sandbox that gives you strong guardrails around what the agent can do. The default sandbox prevents it from editing files outside its workspace, or from accessing the network.&lt;/p&gt; 
&lt;p&gt;When you launch Codex in a new folder, it detects whether the folder is version controlled and recommends one of two levels of autonomy:&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;1. Read/write&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Codex can run commands and write files in the workspace without approval.&lt;/li&gt; 
 &lt;li&gt;To write files in other folders, access network, update git or perform other actions protected by the sandbox, Codex will need your permission.&lt;/li&gt; 
 &lt;li&gt;By default, the workspace includes the current directory, as well as temporary directories like &lt;code&gt;/tmp&lt;/code&gt;. You can see what directories are in the workspace with the &lt;code&gt;/status&lt;/code&gt; command. See the docs for how to customize this behavior.&lt;/li&gt; 
 &lt;li&gt;Advanced: You can manually specify this configuration by running &lt;code&gt;codex --sandbox workspace-write --ask-for-approval on-request&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;This is the recommended default for version-controlled folders.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;2. Read-only&lt;/strong&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Codex can run read-only commands without approval.&lt;/li&gt; 
 &lt;li&gt;To edit files, access network, or perform other actions protected by the sandbox, Codex will need your permission.&lt;/li&gt; 
 &lt;li&gt;Advanced: You can manually specify this configuration by running &lt;code&gt;codex --sandbox read-only --ask-for-approval on-request&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;This is the recommended default non-version-controlled folders.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;strong&gt;3. Advanced configuration&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Codex gives you fine-grained control over the sandbox with the &lt;code&gt;--sandbox&lt;/code&gt; option, and over when it requests approval with the &lt;code&gt;--ask-for-approval&lt;/code&gt; option. Run &lt;code&gt;codex help&lt;/code&gt; for more on these options.&lt;/p&gt; 
&lt;h4&gt;Can I run without ANY approvals?&lt;/h4&gt; 
&lt;p&gt;Yes, run codex non-interactively with &lt;code&gt;--ask-for-approval never&lt;/code&gt;. This option works with all &lt;code&gt;--sandbox&lt;/code&gt; options, so you still have full control over Codex's level of autonomy. It will make its best attempt with whatever contrainsts you provide. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;code&gt;codex --ask-for-approval never --sandbox read-only&lt;/code&gt; when you are running many agents to answer questions in parallel in the same workspace.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;codex --ask-for-approval never --sandbox workspace-write&lt;/code&gt; when you want the agent to non-interactively take time to produce the best outcome, with strong guardrails around its behavior.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;codex --ask-for-approval never --sandbox danger-full-access&lt;/code&gt; to dangerously give the agent full autonomy. Because this disables important safety mechanisms, we recommend against using this unless running Codex in an isolated environment.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Fine-tuning in &lt;code&gt;config.toml&lt;/code&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# approval mode
approval_policy = "untrusted"
sandbox_mode    = "read-only"

# full-auto mode
approval_policy = "on-request"
sandbox_mode    = "workspace-write"

# Optional: allow network in workspace-write mode
[sandbox_workspace_write]
network_access = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also save presets as &lt;strong&gt;profiles&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[profiles.full_auto]
approval_policy = "on-request"
sandbox_mode    = "workspace-write"

[profiles.readonly_quiet]
approval_policy = "never"
sandbox_mode    = "read-only"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example prompts&lt;/h3&gt; 
&lt;p&gt;Below are a few bite-size examples you can copy-paste. Replace the text in quotes with your own task. See the &lt;a href="https://github.com/openai/codex/raw/main/codex-cli/examples/prompting_guide.md"&gt;prompting guide&lt;/a&gt; for more tips and usage patterns.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;✨&lt;/th&gt; 
   &lt;th&gt;What you type&lt;/th&gt; 
   &lt;th&gt;What happens&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex "Refactor the Dashboard component to React Hooks"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Codex rewrites the class component, runs &lt;code&gt;npm test&lt;/code&gt;, and shows the diff.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex "Generate SQL migrations for adding a users table"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Infers your ORM, creates migration files, and runs them in a sandboxed DB.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex "Write unit tests for utils/date.ts"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Generates tests, executes them, and iterates until they pass.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex "Bulk-rename *.jpeg -&amp;gt; *.jpg with git mv"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Safely renames files and updates imports/usages.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex "Explain what this regex does: ^(?=.*[A-Z]).{8,}$"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Outputs a step-by-step human explanation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex "Carefully review this repo, and propose 3 high impact well-scoped PRs"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Suggests impactful PRs in the current codebase.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;7&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex "Look for vulnerabilities and create a security review report"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Finds and explains security bugs.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Running with a prompt as input&lt;/h2&gt; 
&lt;p&gt;You can also run Codex CLI with a prompt as input:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;codex "explain this codebase to me"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;codex --full-auto "create the fanciest todo-list app"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That's it - Codex will scaffold a file, run it inside a sandbox, install any missing dependencies, and show you the live result. Approve the changes and they'll be committed to your working directory.&lt;/p&gt; 
&lt;h2&gt;Using Open Source Models&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Use &lt;code&gt;--profile&lt;/code&gt; to use other models&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Codex also allows you to use other providers that support the OpenAI Chat Completions (or Responses) API.&lt;/p&gt; 
 &lt;p&gt;To do so, you must first define custom &lt;a href="https://raw.githubusercontent.com/openai/codex/main/config.md#model_providers"&gt;providers&lt;/a&gt; in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. For example, the provider for a standard Ollama setup would be defined as follows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-toml"&gt;[model_providers.ollama]
name = "Ollama"
base_url = "http://localhost:11434/v1"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The &lt;code&gt;base_url&lt;/code&gt; will have &lt;code&gt;/chat/completions&lt;/code&gt; appended to it to build the full URL for the request.&lt;/p&gt; 
 &lt;p&gt;For providers that also require an &lt;code&gt;Authorization&lt;/code&gt; header of the form &lt;code&gt;Bearer: SECRET&lt;/code&gt;, an &lt;code&gt;env_key&lt;/code&gt; can be specified, which indicates the environment variable to read to use as the value of &lt;code&gt;SECRET&lt;/code&gt; when making a request:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-toml"&gt;[model_providers.openrouter]
name = "OpenRouter"
base_url = "https://openrouter.ai/api/v1"
env_key = "OPENROUTER_API_KEY"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Providers that speak the Responses API are also supported by adding &lt;code&gt;wire_api = "responses"&lt;/code&gt; as part of the definition. Accessing OpenAI models via Azure is an example of such a provider, though it also requires specifying additional &lt;code&gt;query_params&lt;/code&gt; that need to be appended to the request URL:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-toml"&gt;[model_providers.azure]
name = "Azure"
# Make sure you set the appropriate subdomain for this URL.
base_url = "https://YOUR_PROJECT_NAME.openai.azure.com/openai"
env_key = "AZURE_OPENAI_API_KEY"  # Or "OPENAI_API_KEY", whichever you use.
# Newer versions appear to support the responses API, see https://github.com/openai/codex/pull/1321
query_params = { api-version = "2025-04-01-preview" }
wire_api = "responses"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Once you have defined a provider you wish to use, you can configure it as your default provider as follows:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-toml"&gt;model_provider = "azure"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;[!TIP] If you find yourself experimenting with a variety of models and providers, then you likely want to invest in defining a &lt;em&gt;profile&lt;/em&gt; for each configuration like so:&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-toml"&gt;[profiles.o3]
model_provider = "azure"
model = "o3"

[profiles.mistral]
model_provider = "ollama"
model = "mistral"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This way, you can specify one command-line argument (.e.g., &lt;code&gt;--profile o3&lt;/code&gt;, &lt;code&gt;--profile mistral&lt;/code&gt;) to override multiple settings together.&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;Codex can run fully locally against an OpenAI-compatible OSS host (like Ollama) using the &lt;code&gt;--oss&lt;/code&gt; flag:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Interactive UI: 
  &lt;ul&gt; 
   &lt;li&gt;codex --oss&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Non-interactive (programmatic) mode: 
  &lt;ul&gt; 
   &lt;li&gt;echo "Refactor utils" | codex exec --oss&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Model selection when using &lt;code&gt;--oss&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you omit &lt;code&gt;-m/--model&lt;/code&gt;, Codex defaults to -m gpt-oss:20b and will verify it exists locally (downloading if needed).&lt;/li&gt; 
 &lt;li&gt;To pick a different size, pass one of: 
  &lt;ul&gt; 
   &lt;li&gt;-m "gpt-oss:20b"&lt;/li&gt; 
   &lt;li&gt;-m "gpt-oss:120b"&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Point Codex at your own OSS host:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;By default, &lt;code&gt;--oss&lt;/code&gt; talks to &lt;a href="http://localhost:11434/v1"&gt;http://localhost:11434/v1&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;To use a different host, set one of these environment variables before running Codex: 
  &lt;ul&gt; 
   &lt;li&gt;CODEX_OSS_BASE_URL, for example: 
    &lt;ul&gt; 
     &lt;li&gt;CODEX_OSS_BASE_URL="&lt;a href="http://my-ollama.example.com:11434/v1"&gt;http://my-ollama.example.com:11434/v1&lt;/a&gt;" codex --oss -m gpt-oss:20b&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;or CODEX_OSS_PORT (when the host is localhost): 
    &lt;ul&gt; 
     &lt;li&gt;CODEX_OSS_PORT=11434 codex --oss&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Advanced: you can persist this in your config instead of environment variables by overriding the built-in &lt;code&gt;oss&lt;/code&gt; provider in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[model_providers.oss]
name = "Open Source"
base_url = "http://my-ollama.example.com:11434/v1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Platform sandboxing details&lt;/h3&gt; 
&lt;p&gt;The mechanism Codex uses to implement the sandbox policy depends on your OS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS 12+&lt;/strong&gt; uses &lt;strong&gt;Apple Seatbelt&lt;/strong&gt; and runs commands using &lt;code&gt;sandbox-exec&lt;/code&gt; with a profile (&lt;code&gt;-p&lt;/code&gt;) that corresponds to the &lt;code&gt;--sandbox&lt;/code&gt; that was specified.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt; uses a combination of Landlock/seccomp APIs to enforce the &lt;code&gt;sandbox&lt;/code&gt; configuration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that when running Linux in a containerized environment such as Docker, sandboxing may not work if the host/container configuration does not support the necessary Landlock/seccomp APIs. In such cases, we recommend configuring your Docker container so that it provides the sandbox guarantees you are looking for and then running &lt;code&gt;codex&lt;/code&gt; with &lt;code&gt;--sandbox danger-full-access&lt;/code&gt; (or, more simply, the &lt;code&gt;--dangerously-bypass-approvals-and-sandbox&lt;/code&gt; flag) within your container.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Experimental technology disclaimer&lt;/h2&gt; 
&lt;p&gt;Codex CLI is an experimental project under active development. It is not yet stable, may contain bugs, incomplete features, or undergo breaking changes. We're building it in the open with the community and welcome:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug reports&lt;/li&gt; 
 &lt;li&gt;Feature requests&lt;/li&gt; 
 &lt;li&gt;Pull requests&lt;/li&gt; 
 &lt;li&gt;Good vibes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Help us improve by filing issues or submitting PRs (see the section below for how to contribute)!&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;System requirements&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Requirement&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Operating systems&lt;/td&gt; 
   &lt;td&gt;macOS 12+, Ubuntu 20.04+/Debian 10+, or Windows 11 &lt;strong&gt;via WSL2&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Git (optional, recommended)&lt;/td&gt; 
   &lt;td&gt;2.23+ for built-in PR helpers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;RAM&lt;/td&gt; 
   &lt;td&gt;4-GB minimum (8-GB recommended)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr&gt; 
&lt;h2&gt;CLI reference&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Purpose&lt;/th&gt; 
   &lt;th&gt;Example&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;codex&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Interactive TUI&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;codex "..."&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Initial prompt for interactive TUI&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex "fix lint errors"&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;codex exec "..."&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Non-interactive "automation mode"&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;codex exec "explain utils.ts"&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Key flags: &lt;code&gt;--model/-m&lt;/code&gt;, &lt;code&gt;--ask-for-approval/-a&lt;/code&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Memory &amp;amp; project docs&lt;/h2&gt; 
&lt;p&gt;You can give Codex extra instructions and guidance using &lt;code&gt;AGENTS.md&lt;/code&gt; files. Codex looks for &lt;code&gt;AGENTS.md&lt;/code&gt; files in the following places, and merges them top-down:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;~/.codex/AGENTS.md&lt;/code&gt; - personal global guidance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AGENTS.md&lt;/code&gt; at repo root - shared project notes&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AGENTS.md&lt;/code&gt; in the current working directory - sub-folder/feature specifics&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;h2&gt;Non-interactive / CI mode&lt;/h2&gt; 
&lt;p&gt;Run Codex head-less in pipelines. Example GitHub Action step:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- name: Update changelog via Codex
  run: |
    npm install -g @openai/codex
    export OPENAI_API_KEY="${{ secrets.OPENAI_KEY }}"
    codex exec --full-auto "update CHANGELOG for next release"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Model Context Protocol (MCP)&lt;/h2&gt; 
&lt;p&gt;The Codex CLI can be configured to leverage MCP servers by defining an &lt;a href="https://raw.githubusercontent.com/openai/codex/main/codex-rs/config.md#mcp_servers"&gt;&lt;code&gt;mcp_servers&lt;/code&gt;&lt;/a&gt; section in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. It is intended to mirror how tools such as Claude and Cursor define &lt;code&gt;mcpServers&lt;/code&gt; in their respective JSON config files, though the Codex format is slightly different since it uses TOML rather than JSON, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# IMPORTANT: the top-level key is `mcp_servers` rather than `mcpServers`.
[mcp_servers.server-name]
command = "npx"
args = ["-y", "mcp-server"]
env = { "API_KEY" = "value" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] It is somewhat experimental, but the Codex CLI can also be run as an MCP &lt;em&gt;server&lt;/em&gt; via &lt;code&gt;codex mcp&lt;/code&gt;. If you launch it with an MCP client such as &lt;code&gt;npx @modelcontextprotocol/inspector codex mcp&lt;/code&gt; and send it a &lt;code&gt;tools/list&lt;/code&gt; request, you will see that there is only one tool, &lt;code&gt;codex&lt;/code&gt;, that accepts a grab-bag of inputs, including a catch-all &lt;code&gt;config&lt;/code&gt; map for anything you might want to override. Feel free to play around with it and provide feedback via GitHub issues.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Tracing / verbose logging&lt;/h2&gt; 
&lt;p&gt;Because Codex is written in Rust, it honors the &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable to configure its logging behavior.&lt;/p&gt; 
&lt;p&gt;The TUI defaults to &lt;code&gt;RUST_LOG=codex_core=info,codex_tui=info&lt;/code&gt; and log messages are written to &lt;code&gt;~/.codex/log/codex-tui.log&lt;/code&gt;, so you can leave the following running in a separate terminal to monitor log messages as they are written:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;tail -F ~/.codex/log/codex-tui.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By comparison, the non-interactive mode (&lt;code&gt;codex exec&lt;/code&gt;) defaults to &lt;code&gt;RUST_LOG=error&lt;/code&gt;, but messages are printed inline, so there is no need to monitor a separate file.&lt;/p&gt; 
&lt;p&gt;See the Rust documentation on &lt;a href="https://docs.rs/env_logger/latest/env_logger/#enabling-logging"&gt;&lt;code&gt;RUST_LOG&lt;/code&gt;&lt;/a&gt; for more information on the configuration options.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;DotSlash&lt;/h3&gt; 
&lt;p&gt;The GitHub Release also contains a &lt;a href="https://dotslash-cli.com/"&gt;DotSlash&lt;/a&gt; file for the Codex CLI named &lt;code&gt;codex&lt;/code&gt;. Using a DotSlash file makes it possible to make a lightweight commit to source control to ensure all contributors use the same version of an executable, regardless of what platform they use for development.&lt;/p&gt;  
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Build from source&lt;/strong&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Clone the repository and navigate to the root of the Cargo workspace.
git clone https://github.com/openai/codex.git
cd codex/codex-rs

# Install the Rust toolchain, if necessary.
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
source "$HOME/.cargo/env"
rustup component add rustfmt
rustup component add clippy

# Build Codex.
cargo build

# Launch the TUI with a sample prompt.
cargo run --bin codex -- "explain this codebase to me"

# After making changes, ensure the code is clean.
cargo fmt -- --config imports_granularity=Item
cargo clippy --tests

# Run the tests.
cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Codex supports a rich set of configuration options documented in &lt;a href="https://raw.githubusercontent.com/openai/codex/main/codex-rs/config.md"&gt;&lt;code&gt;codex-rs/config.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;By default, Codex loads its configuration from &lt;code&gt;~/.codex/config.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Though &lt;code&gt;--config&lt;/code&gt; can be used to set/override ad-hoc config values for individual invocations of &lt;code&gt;codex&lt;/code&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;OpenAI released a model called Codex in 2021 - is this related?&lt;/summary&gt; 
 &lt;p&gt;In 2021, OpenAI released Codex, an AI system designed to generate code from natural language prompts. That original Codex model was deprecated as of March 2023 and is separate from the CLI tool.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Which models are supported?&lt;/summary&gt; 
 &lt;p&gt;Any model available with &lt;a href="https://platform.openai.com/docs/api-reference/responses"&gt;Responses API&lt;/a&gt;. The default is &lt;code&gt;o4-mini&lt;/code&gt;, but pass &lt;code&gt;--model gpt-4.1&lt;/code&gt; or set &lt;code&gt;model: gpt-4.1&lt;/code&gt; in your config file to override.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Why does &lt;code&gt;o3&lt;/code&gt; or &lt;code&gt;o4-mini&lt;/code&gt; not work for me?&lt;/summary&gt; 
 &lt;p&gt;It's possible that your &lt;a href="https://help.openai.com/en/articles/10910291-api-organization-verification"&gt;API account needs to be verified&lt;/a&gt; in order to start streaming responses and seeing chain of thought summaries from the API. If you're still running into issues, please let us know!&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;How do I stop Codex from editing my files?&lt;/summary&gt; 
 &lt;p&gt;Codex runs model-generated commands in a sandbox. If a proposed command or file change doesn't look right, you can simply type &lt;strong&gt;n&lt;/strong&gt; to deny the command or give the model feedback.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Does it work on Windows?&lt;/summary&gt; 
 &lt;p&gt;Not directly. It requires &lt;a href="https://learn.microsoft.com/en-us/windows/wsl/install"&gt;Windows Subsystem for Linux (WSL2)&lt;/a&gt; - Codex has been tested on macOS and Linux with Node 22.&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h2&gt;Zero data retention (ZDR) usage&lt;/h2&gt; 
&lt;p&gt;Codex CLI &lt;strong&gt;does&lt;/strong&gt; support OpenAI organizations with &lt;a href="https://platform.openai.com/docs/guides/your-data#zero-data-retention"&gt;Zero Data Retention (ZDR)&lt;/a&gt; enabled. If your OpenAI organization has Zero Data Retention enabled and you still encounter errors such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;OpenAI rejected the request. Error details: Status: 400, Code: unsupported_parameter, Type: invalid_request_error, Message: 400 Previous response cannot be used for this organization due to Zero Data Retention.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ensure you are running &lt;code&gt;codex&lt;/code&gt; with &lt;code&gt;--config disable_response_storage=true&lt;/code&gt; or add this line to &lt;code&gt;~/.codex/config.toml&lt;/code&gt; to avoid specifying the command line option each time:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;disable_response_storage = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/openai/codex/main/codex-rs/config.md#disable_response_storage"&gt;the configuration documentation on &lt;code&gt;disable_response_storage&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Codex open source fund&lt;/h2&gt; 
&lt;p&gt;We're excited to launch a &lt;strong&gt;$1 million initiative&lt;/strong&gt; supporting open source projects that use Codex CLI and other OpenAI models.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Grants are awarded up to &lt;strong&gt;$25,000&lt;/strong&gt; API credits.&lt;/li&gt; 
 &lt;li&gt;Applications are reviewed &lt;strong&gt;on a rolling basis&lt;/strong&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Interested? &lt;a href="https://openai.com/form/codex-open-source-fund/"&gt;Apply here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;This project is under active development and the code will likely change pretty significantly. We'll update this message once that's complete!&lt;/p&gt; 
&lt;p&gt;More broadly we welcome contributions - whether you are opening your very first pull request or you're a seasoned maintainer. At the same time we care about reliability and long-term maintainability, so the bar for merging code is intentionally &lt;strong&gt;high&lt;/strong&gt;. The guidelines below spell out what "high-quality" means in practice and should make the whole process transparent and friendly.&lt;/p&gt; 
&lt;h3&gt;Development workflow&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Create a &lt;em&gt;topic branch&lt;/em&gt; from &lt;code&gt;main&lt;/code&gt; - e.g. &lt;code&gt;feat/interactive-prompt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Keep your changes focused. Multiple unrelated fixes should be opened as separate PRs.&lt;/li&gt; 
 &lt;li&gt;Following the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/#development-workflow"&gt;development setup&lt;/a&gt; instructions above, ensure your change is free of lint warnings and test failures.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Writing high-impact code changes&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Start with an issue.&lt;/strong&gt; Open a new one or comment on an existing discussion so we can agree on the solution before code is written.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add or update tests.&lt;/strong&gt; Every new feature or bug-fix should come with test coverage that fails before your change and passes afterwards. 100% coverage is not required, but aim for meaningful assertions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Document behaviour.&lt;/strong&gt; If your change affects user-facing behaviour, update the README, inline help (&lt;code&gt;codex --help&lt;/code&gt;), or relevant example projects.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Keep commits atomic.&lt;/strong&gt; Each commit should compile and the tests should pass. This makes reviews and potential rollbacks easier.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Opening a pull request&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fill in the PR template (or include similar information) - &lt;strong&gt;What? Why? How?&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;strong&gt;all&lt;/strong&gt; checks locally (&lt;code&gt;cargo test &amp;amp;&amp;amp; cargo clippy --tests &amp;amp;&amp;amp; cargo fmt -- --config imports_granularity=Item&lt;/code&gt;). CI failures that could have been caught locally slow down the process.&lt;/li&gt; 
 &lt;li&gt;Make sure your branch is up-to-date with &lt;code&gt;main&lt;/code&gt; and that you have resolved merge conflicts.&lt;/li&gt; 
 &lt;li&gt;Mark the PR as &lt;strong&gt;Ready for review&lt;/strong&gt; only when you believe it is in a merge-able state.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Review process&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;One maintainer will be assigned as a primary reviewer.&lt;/li&gt; 
 &lt;li&gt;We may ask for changes - please do not take this personally. We value the work, we just also value consistency and long-term maintainability.&lt;/li&gt; 
 &lt;li&gt;When there is consensus that the PR meets the bar, a maintainer will squash-and-merge.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Community values&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Be kind and inclusive.&lt;/strong&gt; Treat others with respect; we follow the &lt;a href="https://www.contributor-covenant.org/"&gt;Contributor Covenant&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Assume good intent.&lt;/strong&gt; Written communication is hard - err on the side of generosity.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Teach &amp;amp; learn.&lt;/strong&gt; If you spot something confusing, open an issue or PR with improvements.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Getting help&lt;/h3&gt; 
&lt;p&gt;If you run into problems setting up the project, would like feedback on an idea, or just want to say &lt;em&gt;hi&lt;/em&gt; - please open a Discussion or jump into the relevant issue. We are happy to help.&lt;/p&gt; 
&lt;p&gt;Together we can make Codex CLI an incredible tool. &lt;strong&gt;Happy hacking!&lt;/strong&gt; &lt;span&gt;🚀&lt;/span&gt;&lt;/p&gt; 
&lt;h3&gt;Contributor license agreement (CLA)&lt;/h3&gt; 
&lt;p&gt;All contributors &lt;strong&gt;must&lt;/strong&gt; accept the CLA. The process is lightweight:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Open your pull request.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Paste the following comment (or reply &lt;code&gt;recheck&lt;/code&gt; if you've signed before):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-text"&gt;I have read the CLA Document and I hereby sign the CLA
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The CLA-Assistant bot records your signature in the repo and marks the status check as passed.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;No special Git commands, email attachments, or commit footers required.&lt;/p&gt; 
&lt;h4&gt;Quick fixes&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Scenario&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Amend last commit&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;git commit --amend -s --no-edit &amp;amp;&amp;amp; git push -f&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The &lt;strong&gt;DCO check&lt;/strong&gt; blocks merges until every commit in the PR carries the footer (with squash this is just the one).&lt;/p&gt; 
&lt;h3&gt;Releasing &lt;code&gt;codex&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;For admins only.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Make sure you are on &lt;code&gt;main&lt;/code&gt; and have no local changes. Then run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;VERSION=0.2.0  # Can also be 0.2.0-alpha.1 or any valid Rust version.
./codex-rs/scripts/create_github_release.sh "$VERSION"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will make a local commit on top of &lt;code&gt;main&lt;/code&gt; with &lt;code&gt;version&lt;/code&gt; set to &lt;code&gt;$VERSION&lt;/code&gt; in &lt;code&gt;codex-rs/Cargo.toml&lt;/code&gt; (note that on &lt;code&gt;main&lt;/code&gt;, we leave the version as &lt;code&gt;version = "0.0.0"&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;This will push the commit using the tag &lt;code&gt;rust-v${VERSION}&lt;/code&gt;, which in turn kicks off &lt;a href="https://raw.githubusercontent.com/openai/codex/main/.github/workflows/rust-release.yml"&gt;the release workflow&lt;/a&gt;. This will create a new GitHub Release named &lt;code&gt;$VERSION&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If everything looks good in the generated GitHub Release, uncheck the &lt;strong&gt;pre-release&lt;/strong&gt; box so it is the latest release.&lt;/p&gt; 
&lt;p&gt;Create a PR to update &lt;a href="https://github.com/Homebrew/homebrew-core/raw/main/Formula/c/codex.rb"&gt;&lt;code&gt;Formula/c/codex.rb&lt;/code&gt;&lt;/a&gt; on Homebrew.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Security &amp;amp; responsible AI&lt;/h2&gt; 
&lt;p&gt;Have you discovered a vulnerability or have concerns about model output? Please e-mail &lt;strong&gt;&lt;a href="mailto:security@openai.com"&gt;security@openai.com&lt;/a&gt;&lt;/strong&gt; and we will respond promptly.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/LICENSE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solana-labs/solana-program-library</title>
      <link>https://github.com/solana-labs/solana-program-library</link>
      <description>&lt;p&gt;A collection of Solana programs maintained by Solana Labs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PLEASE READ: This repo no longer contains the SPL program implementations&lt;/h1&gt; 
&lt;p&gt;This repo still exists in archived form, feel free to fork any reference implementations it still contains.&lt;/p&gt; 
&lt;h2&gt;Migrated Packages&lt;/h2&gt; 
&lt;p&gt;The Solana Program Library repository has been broken up into separate repos for each program and set of clients, under the &lt;a href="https://github.com/solana-program"&gt;solana-program organization&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The following programs have been moved:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/associated-token-account"&gt;Associated-Token-Account&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/feature-proposal"&gt;Feature Proposal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/instruction-padding"&gt;Instruction Padding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/libraries"&gt;Libraries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/memo"&gt;Memo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/record"&gt;Record&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/single-pool"&gt;Single Pool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/slashing"&gt;Slashing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/stake-pool"&gt;Stake Pool&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/token"&gt;Token&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/token-2022"&gt;Token-2022&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/token-group"&gt;Token-Group&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/token-metadata"&gt;Token-Metadata&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/transfer-hook"&gt;Token-2022 Transfer Hook&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The governance programs have been moved to &lt;a href="https://github.com/Mythic-Project/solana-program-library/tree/master/governance"&gt;https://github.com/Mythic-Project/solana-program-library/tree/master/governance&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Solana Program Library&lt;/h1&gt; 
&lt;p&gt;The Solana Program Library (SPL) is a collection of on-chain programs targeting the &lt;a href="https://medium.com/solana-labs/sealevel-parallel-processing-thousands-of-smart-contracts-d814b378192"&gt;Sealevel parallel runtime&lt;/a&gt;. These programs are tested against Solana's implementation of Sealevel, solana-runtime, and some are deployed to Mainnet Beta. As others implement Sealevel, we will graciously accept patches to ensure the programs here are portable across all implementations.&lt;/p&gt; 
&lt;p&gt;For more information see the &lt;a href="https://spl.solana.com"&gt;SPL documentation&lt;/a&gt; and the &lt;a href="https://solana-labs.github.io/solana-program-library/token/js/"&gt;Token TypeDocs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Deployments&lt;/h2&gt; 
&lt;p&gt;Only a subset of programs within the Solana Program Library repo are deployed to the Solana Mainnet Beta. Currently, this includes:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Program&lt;/th&gt; 
   &lt;th&gt;Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/token/tree/main/program"&gt;token&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/token-v3.4.0"&gt;3.4.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/associated-token-account/tree/main/program"&gt;associated-token-account&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/associated-token-account-v1.1.0"&gt;1.1.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/token-2022/tree/main/program"&gt;token-2022&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/token-2022-v1.0.0"&gt;1.0.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/governance/program"&gt;governance&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/governance-v3.1.0"&gt;3.1.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/stake-pool/tree/main/program"&gt;stake-pool&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/stake-pool-v1.0.0"&gt;1.0.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/account-compression/programs/account-compression"&gt;account-compression&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/account-compression-v0.1.3"&gt;0.1.3&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/shared-memory/program"&gt;shared-memory&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/commit/b40e0dd3fd6c0e509dc1e8dd3da0a6d609035bbd"&gt;1.0.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/feature-proposal/tree/main/program"&gt;feature-proposal&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/feature-proposal-v1.0.0"&gt;1.0.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/name-service/program"&gt;name-service&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/name-service-v0.3.0"&gt;0.3.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/memo/tree/main/program"&gt;memo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/memo-v3.0.0"&gt;3.0.0&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/single-pool/tree/main/program"&gt;single-pool&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/releases/tag/single-pool-v1.0.1"&gt;1.0.1&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Audits&lt;/h2&gt; 
&lt;p&gt;Only a subset of programs within the Solana Program Library repo are audited. Currently, this includes:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Program&lt;/th&gt; 
   &lt;th&gt;Last Audit Date&lt;/th&gt; 
   &lt;th&gt;Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/token"&gt;token&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;2022-08-04 (Peer review)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/commit/4fadd553e1c549afd1d62aeb5ffa7ef31d1999d1"&gt;4fadd55&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/associated-token-account"&gt;associated-token-account&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;2022-08-04 (Peer review)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/commit/c00194d2257302f028f44a403c6dee95c0f9c3bc"&gt;c00194d&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/token-2022"&gt;token-2022&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/security-audits/raw/master/spl/OtterSecToken2022Audit-2023-11-03.pdf"&gt;2023-11-03&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/e924132d65ba0896249fb4983f6f97caff15721a"&gt;e924132&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/stake-pool"&gt;stake-pool&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/security-audits/raw/master/spl/HalbornStakePoolAudit-2023-12-31.pdf"&gt;2023-12-31&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/commit/a17fffe70d6cc13742abfbc4a4a375b087580bc1"&gt;a17fffe&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/account-compression/programs/account-compression"&gt;account-compression&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/security-audits/raw/master/spl/OtterSecAccountCompressionAudit-2022-12-03.pdf"&gt;2022-12-05&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/commit/6e81794"&gt;6e81794&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/shared-memory/program"&gt;shared-memory&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/security-audits/raw/master/spl/KudelskiTokenSwapSharedMemAudit-2021-02-25.pdf"&gt;2021-02-25&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/commit/b40e0dd3fd6c0e509dc1e8dd3da0a6d609035bbd"&gt;b40e0dd&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-program/single-pool"&gt;single-pool&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/security-audits/raw/master/spl/ZellicSinglePoolAudit-2024-01-02.pdf"&gt;2024-01-02&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/commit/ef44df985e76a697ee9a8aabb3a223610e4cf1dc"&gt;ef44df9&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;All other programs may be updated from time to time. These programs are not audited, so fork and deploy them at your own risk. Here is the full list of unaudited programs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/binary-option/program"&gt;binary-option&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/binary-oracle-pair/program"&gt;binary-oracle-pair&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/feature-proposal"&gt;feature-proposal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/instruction-padding"&gt;instruction-padding&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/managed-token/program"&gt;managed-token&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/name-service/program"&gt;name-service&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-program/record"&gt;record&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/stateless-asks/program"&gt;stateless-asks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/token-lending/program"&gt;token-lending&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/token-swap/program"&gt;token-swap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/token-upgrade/program"&gt;token-upgrade&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;More information about the repository's security policy at &lt;a href="https://github.com/solana-labs/solana-program-library/tree/master/SECURITY.md"&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/solana-labs/security-audits"&gt;security-audits repo&lt;/a&gt; contains all past and present program audits.&lt;/p&gt; 
&lt;h2&gt;Program Packages&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Package&lt;/th&gt; 
   &lt;th align="left"&gt;Description&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-token&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;ERC20-like token program on Solana&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-token"&gt;&lt;img src="https://img.shields.io/crates/v/spl-token" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-token"&gt;&lt;img src="https://docs.rs/spl-token/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-token-2022&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Token program compatible with &lt;code&gt;spl-token&lt;/code&gt;, with extensions&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-token-2022"&gt;&lt;img src="https://img.shields.io/crates/v/spl-token-2022" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-token-2022"&gt;&lt;img src="https://docs.rs/spl-token-2022/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-associated-token-account&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Stateless protocol defining a canonical "associated" token account for a wallet&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-associated-token-account"&gt;&lt;img src="https://img.shields.io/crates/v/spl-associated-token-account" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-associated-token-account"&gt;&lt;img src="https://docs.rs/spl-associated-token-account/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-governance&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;DAO program using tokens for voting&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-governance"&gt;&lt;img src="https://img.shields.io/crates/v/spl-governance" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-governance"&gt;&lt;img src="https://docs.rs/spl-governance/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-account-compression&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Program for managing compressed accounts stored in an off-chain merkle tree&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-account-compression"&gt;&lt;img src="https://img.shields.io/crates/v/spl-account-compression" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-account-compression"&gt;&lt;img src="https://docs.rs/spl-account-compression/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-feature-proposal&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Program using tokens to vote on enabling Solana network features&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-feature-proposal"&gt;&lt;img src="https://img.shields.io/crates/v/spl-feature-proposal" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-feature-proposal"&gt;&lt;img src="https://docs.rs/spl-feature-proposal/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-noop&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Program that does nothing, used for logging instruction data&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-noop"&gt;&lt;img src="https://img.shields.io/crates/v/spl-noop" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-noop"&gt;&lt;img src="https://docs.rs/spl-noop/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-name-service&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Program for managing ownership of data on-chain&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-name-service"&gt;&lt;img src="https://img.shields.io/crates/v/spl-name-service" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-name-service"&gt;&lt;img src="https://docs.rs/spl-name-service/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-shared-memory&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Program for sharing data between programs&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-shared-memory"&gt;&lt;img src="https://img.shields.io/crates/v/spl-shared-memory" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-shared-memory"&gt;&lt;img src="https://docs.rs/spl-shared-memory/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-stake-pool&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Program for pooling stake accounts, managed by another entity&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-stake-pool"&gt;&lt;img src="https://img.shields.io/crates/v/spl-stake-pool" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-stake-pool"&gt;&lt;img src="https://docs.rs/spl-stake-pool/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-instruction-padding&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Program to padding to other instructions&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-instruction-padding"&gt;&lt;img src="https://img.shields.io/crates/v/spl-instruction-padding" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-instruction-padding"&gt;&lt;img src="https://docs.rs/spl-instruction-padding/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-concurrent-merkle-tree&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Library for on-chain representation of merkle tree&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-concurrent-merkle-tree"&gt;&lt;img src="https://img.shields.io/crates/v/spl-concurrent-merkle-tree" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-concurrent-merkle-tree"&gt;&lt;img src="https://docs.rs/spl-concurrent-merkle-tree/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-math&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Library for on-chain math&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-math"&gt;&lt;img src="https://img.shields.io/crates/v/spl-math" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-math"&gt;&lt;img src="https://docs.rs/spl-math/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-token-lending&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Over-collateralized lending program for tokens&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-token-lending"&gt;&lt;img src="https://img.shields.io/crates/v/spl-token-lending" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-token-lending"&gt;&lt;img src="https://docs.rs/spl-token-lending/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-token-swap&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;AMM for trading tokens&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-token-swap"&gt;&lt;img src="https://img.shields.io/crates/v/spl-token-swap" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-token-swap"&gt;&lt;img src="https://docs.rs/spl-token-swap/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-token-upgrade&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Protocol for burning one token type in exchange for another&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-token-upgrade"&gt;&lt;img src="https://img.shields.io/crates/v/spl-token-upgrade" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/spl-token-upgrade"&gt;&lt;img src="https://docs.rs/spl-token-upgrade/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;CLI Packages&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Package&lt;/th&gt; 
   &lt;th align="left"&gt;Description&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-token-cli&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;CLI for the token, token-2022, and associated-token-account programs&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-token-cli"&gt;&lt;img src="https://img.shields.io/crates/v/spl-token-cli" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-stake-pool-cli&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;CLI for the stake-pool program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-stake-pool-cli"&gt;&lt;img src="https://img.shields.io/crates/v/spl-stake-pool-cli" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-feature-proposal-cli&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;CLI for the feature-proposal program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-feature-proposal-cli"&gt;&lt;img src="https://img.shields.io/crates/v/spl-feature-proposal-cli" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-token-lending-cli&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;CLI for the token-lending program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-token-lending-cli"&gt;&lt;img src="https://img.shields.io/crates/v/spl-token-lending-cli" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;spl-token-upgrade-cli&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;CLI for the token-upgrade program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/spl-token-upgrade-cli"&gt;&lt;img src="https://img.shields.io/crates/v/spl-token-upgrade-cli" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;JavaScript Packages&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Package&lt;/th&gt; 
   &lt;th align="left"&gt;Description&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@solana/spl-token&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Bindings for the token, token-2022, and associated-token-account programs&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@solana/spl-token"&gt;&lt;img src="https://img.shields.io/npm/v/@solana/spl-token.svg?sanitize=true" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://solana-labs.github.io/solana-program-library/token/js"&gt;&lt;img src="https://img.shields.io/badge/docs-typedoc-blue" alt="Docs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@solana/spl-governance&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Bindings for the governance program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@solana/spl-governance"&gt;&lt;img src="https://img.shields.io/npm/v/@solana/spl-governance.svg?sanitize=true" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@solana/spl-account-compression&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Bindings for the account-compression program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@solana/spl-account-compression"&gt;&lt;img src="https://img.shields.io/npm/v/@solana/spl-account-compression.svg?sanitize=true" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://solana-labs.github.io/solana-program-library/account-compression/sdk/docs"&gt;&lt;img src="https://img.shields.io/badge/docs-typedoc-blue" alt="Docs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@solana/spl-name-service&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Bindings for the name-service program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@solana/spl-name-service"&gt;&lt;img src="https://img.shields.io/npm/v/@solana/spl-name-service.svg?sanitize=true" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@solana/spl-stake-pool&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Bindings for the stake-pool program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@solana/spl-stake-pool"&gt;&lt;img src="https://img.shields.io/npm/v/@solana/spl-stake-pool.svg?sanitize=true" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@solana/spl-token-lending&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Bindings for the token-lending program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@solana/spl-token-lending"&gt;&lt;img src="https://img.shields.io/npm/v/@solana/spl-token-lending.svg?sanitize=true" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@solana/spl-token-swap&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Bindings for the token-swap program&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@solana/spl-token-swap"&gt;&lt;img src="https://img.shields.io/npm/v/@solana/spl-token-swap.svg?sanitize=true" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;N/A&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Environment Setup&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the latest &lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;Solana tools&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Install the latest &lt;a href="https://rustup.rs/"&gt;Rust stable&lt;/a&gt;. If you already have Rust, run &lt;code&gt;rustup update&lt;/code&gt; to get the latest version.&lt;/li&gt; 
 &lt;li&gt;Install the &lt;code&gt;libudev&lt;/code&gt; development package for your distribution (&lt;code&gt;libudev-dev&lt;/code&gt; on Debian-derived distros, &lt;code&gt;libudev-devel&lt;/code&gt; on Redhat-derived).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;h3&gt;Build on-chain programs&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# To build all on-chain programs
$ cargo build-sbf

# To build a specific on-chain program
$ cd &amp;lt;program_name&amp;gt;/program
$ cargo build-sbf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build clients&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# To build all clients
$ cargo build

# To build a specific client
$ cd &amp;lt;program_name&amp;gt;/cli
$ cargo build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Test&lt;/h3&gt; 
&lt;p&gt;Unit tests contained within all projects can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo test      # &amp;lt;-- runs host-based tests
$ cargo test-sbf  # &amp;lt;-- runs BPF program tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run a specific program's tests, such as SPL Token:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cd token/program
$ cargo test      # &amp;lt;-- runs host-based tests
$ cargo test-sbf  # &amp;lt;-- runs BPF program tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Integration testing may be performed via the per-project .js bindings. See the &lt;a href="https://raw.githubusercontent.com/solana-labs/solana-program-library/master/token/js"&gt;token program's js project&lt;/a&gt; for an example.&lt;/p&gt; 
&lt;h3&gt;Common Issues&lt;/h3&gt; 
&lt;p&gt;Solutions to a few issues you might run into are mentioned here.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Failed to open: ../../deploy/spl_&amp;lt;program-name&amp;gt;.so&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Update your Rust and Cargo to the latest versions and re-run &lt;code&gt;cargo build-sbf&lt;/code&gt; in the relevant &lt;code&gt;&amp;lt;program-name&amp;gt;&lt;/code&gt; directory, or run it at the repository root to rebuild all on-chain programs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://solana.stackexchange.com/q/3029/36"&gt;Error while loading shared libraries. (libssl.so.1.1)&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A working solution was mentioned &lt;a href="https://solana.stackexchange.com/q/3029/36"&gt;here&lt;/a&gt;. Install libssl.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;wget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1l-1ubuntu1.2_amd64.deb
sudo dpkg -i libssl1.1_1.1.1l-1ubuntu1.2_amd64.deb
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;CPU or Memory usage at 100%&lt;/p&gt; &lt;p&gt;This is to be expected while building some of the programs in this library. The simplest solution is to add the &lt;code&gt;--jobs 1&lt;/code&gt; flag to the build commands to limit the number of parallel jobs to 1 and check if that fixes the issue. Although this will mean much longer build times.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Clippy&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo clippy
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Coverage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ ./coverage.sh  # Help wanted! Coverage build currently fails on MacOS due to an XCode `grcov` mismatch...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;MacOS&lt;/h4&gt; 
&lt;p&gt;You may need to pin your grcov version, and then rustup with the apple-darwin nightly toolchain:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ cargo install grcov --version 0.6.1
$ rustup toolchain install nightly-x86_64-apple-darwin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Release Process&lt;/h2&gt; 
&lt;p&gt;SPL programs are currently tagged and released manually. Each program is versioned independently of the others, with all new development occurring on master. Once a program is tested and deemed ready for release:&lt;/p&gt; 
&lt;h3&gt;Bump Version&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Increment the version number in the program's Cargo.toml&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;cargo build-sbf &amp;lt;program&amp;gt;&lt;/code&gt; to build binary. Note the location of the generated &lt;code&gt;spl_&amp;lt;program&amp;gt;.so&lt;/code&gt; for attaching to the GitHub release.&lt;/li&gt; 
 &lt;li&gt;Open a PR with these version changes and merge after passing CI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Create GitHub tag&lt;/h3&gt; 
&lt;p&gt;Program tags are of the form &lt;code&gt;&amp;lt;program&amp;gt;-vX.Y.Z&lt;/code&gt;. Create the new tag at the version-bump commit and push to the solana-program-library repository, eg:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git tag token-v1.0.0 b24bfe7
$ git push upstream --tags
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Publish GitHub release&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to &lt;a href="https://github.com/solana-labs/solana-program-library/releases"&gt;GitHub Releases UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Click "Draft new release", and enter the new tag in the "Tag version" box.&lt;/li&gt; 
 &lt;li&gt;Title the release "SPL 
  &lt;program&gt;
    vX.Y.Z", complete the description, and attach the 
   &lt;code&gt;spl_&amp;lt;program&amp;gt;.so&lt;/code&gt; binary
  &lt;/program&gt;&lt;/li&gt; 
 &lt;li&gt;Click "Publish release"&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Publish to Crates.io&lt;/h3&gt; 
&lt;p&gt;Navigate to the program directory and run &lt;code&gt;cargo package&lt;/code&gt; to test the build. Then run &lt;code&gt;cargo publish&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Disclaimer&lt;/h1&gt; 
&lt;p&gt;All claims, content, designs, algorithms, estimates, roadmaps, specifications, and performance measurements described in this project are done with the Solana Labs, Inc. (“SL”) best efforts. It is up to the reader to check and validate their accuracy and truthfulness. Furthermore nothing in this project constitutes a solicitation for investment.&lt;/p&gt; 
&lt;p&gt;Any content produced by SL or developer resources that SL provides, are for educational and inspiration purposes only. SL does not encourage, induce or sanction the deployment, integration or use of any such applications (including the code comprising the Solana blockchain protocol) in violation of applicable laws or regulations and hereby prohibits any such deployment, integration or use. This includes use of any such applications by the reader (a) in violation of export control or sanctions laws of the United States or any other applicable jurisdiction, (b) if the reader is located in or ordinarily resident in a country or territory subject to comprehensive sanctions administered by the U.S. Office of Foreign Assets Control (OFAC), or (c) if the reader is or is working on behalf of a Specially Designated National (SDN) or a person subject to similar blocking or denied party prohibitions.&lt;/p&gt; 
&lt;p&gt;The reader should be aware that U.S. export control and sanctions laws prohibit U.S. persons (and other persons that are subject to such laws) from transacting with persons in certain countries and territories or that are on the SDN list. Accordingly, there is a risk to individuals that other persons using any of the code contained in this repo, or a derivation thereof, may be sanctioned persons and that transactions with such persons would be a violation of U.S. export controls and sanctions law.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zed.dev"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/zed-industries/zed/main/assets/badge/v0.json" alt="Zed"&gt;&lt;/a&gt; &lt;a href="https://github.com/zed-industries/zed/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href="https://github.com/atom/atom"&gt;Atom&lt;/a&gt; and &lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;On macOS and Linux you can &lt;a href="https://zed.dev/download"&gt;download Zed directly&lt;/a&gt; or &lt;a href="https://zed.dev/docs/linux#installing-via-a-package-manager"&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (&lt;a href="https://github.com/zed-industries/zed/issues/5394"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Web (&lt;a href="https://github.com/zed-industries/zed/issues/5396"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md"&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md"&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md"&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md"&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we're hiring! Check out our &lt;a href="https://zed.dev/jobs"&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/EmbarkStudios/cargo-about"&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you've created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate's Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license's requirements. If you're unsure, ask a lawyer. Once you've verified that this system is acceptable add the license's SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href="https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration"&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>valadaptive/ntsc-rs</title>
      <link>https://github.com/valadaptive/ntsc-rs</link>
      <description>&lt;p&gt;Free, open-source VHS effect. Standalone application + plugin (After Effects, Premiere, and OpenFX).&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://ntsc.rs"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="./docs/img/logo-darkmode.svg"&gt; 
   &lt;img alt="ntsc-rs logo" src="https://raw.githubusercontent.com/valadaptive/ntsc-rs/main/docs/img/logo-lightmode.svg?sanitize=true"&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;ntsc-rs&lt;/strong&gt; is a video effect which emulates NTSC and VHS video artifacts. It can be used as an After Effects, Premiere, or OpenFX plugin, or as a standalone application.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/valadaptive/ntsc-rs/main/docs/img/appdemo.png" alt="Screenshot of the ntsc-rs standalone application"&gt;&lt;/p&gt; 
&lt;h2&gt;Download and Install&lt;/h2&gt; 
&lt;p&gt;The latest version of ntsc-rs can be downloaded from &lt;a href="https://github.com/valadaptive/ntsc-rs/releases"&gt;the releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;After downloading, &lt;a href="https://ntsc.rs/docs/standalone-installation/"&gt;read the documentation for how to run it&lt;/a&gt;. In particular, ntsc-rs will not work properly on Linux unless you install all of the GStreamer packages listed in the documentation.&lt;/p&gt; 
&lt;h2&gt;More information&lt;/h2&gt; 
&lt;p&gt;ntsc-rs is a rough Rust port of &lt;a href="https://github.com/JargeZ/ntscqt"&gt;ntscqt&lt;/a&gt;, a PyQt-based GUI for &lt;a href="https://github.com/zhuker/ntsc"&gt;ntsc&lt;/a&gt;, itself a Python port of &lt;a href="https://github.com/joncampbell123/composite-video-simulator"&gt;composite-video-simulator&lt;/a&gt;. Reimplementing the image processing in multithreaded Rust allows it to run at (mostly) real-time speeds.&lt;/p&gt; 
&lt;p&gt;It's not an exact port--some processing passes have visibly different results, and some new ones have been added.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>embassy-rs/embassy</title>
      <link>https://github.com/embassy-rs/embassy</link>
      <description>&lt;p&gt;Modern embedded framework, using Rust and async.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Embassy&lt;/h1&gt; 
&lt;p&gt;Embassy is the next-generation framework for embedded applications. Write safe, correct, and energy-efficient embedded code faster, using the Rust programming language, its async facilities, and the Embassy libraries.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://embassy.dev/book/index.html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.embassy.dev/"&gt;API reference&lt;/a&gt; - &lt;a href="https://embassy.dev/"&gt;Website&lt;/a&gt; - &lt;a href="https://matrix.to/#/%23embassy-rs:matrix.org"&gt;Chat&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;Rust + async ❤️ embedded&lt;/h2&gt; 
&lt;p&gt;The Rust programming language is blazingly fast and memory-efficient, with no runtime, garbage collector, or OS. It catches a wide variety of bugs at compile time, thanks to its full memory- and thread-safety, and expressive type system.&lt;/p&gt; 
&lt;p&gt;Rust's &lt;a href="https://rust-lang.github.io/async-book/"&gt;async/await&lt;/a&gt; allows for unprecedentedly easy and efficient multitasking in embedded systems. Tasks get transformed at compile time into state machines that get run cooperatively. It requires no dynamic memory allocation and runs on a single stack, so no per-task stack size tuning is required. It obsoletes the need for a traditional RTOS with kernel context switching, and is &lt;a href="https://tweedegolf.nl/en/blog/65/async-rust-vs-rtos-showdown"&gt;faster and smaller than one!&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Batteries included&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hardware Abstraction Layers&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;HALs implement safe, idiomatic Rust APIs to use the hardware capabilities, so raw register manipulation is not needed. The Embassy project maintains HALs for select hardware, but you can still use HALs from other projects with Embassy.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-stm32/"&gt;embassy-stm32&lt;/a&gt;, for all STM32 microcontroller families.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-nrf/"&gt;embassy-nrf&lt;/a&gt;, for the Nordic Semiconductor nRF52, nRF53, nRF54 and nRF91 series.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-rp/"&gt;embassy-rp&lt;/a&gt;, for the Raspberry Pi RP2040 and RP23xx microcontrollers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.embassy.dev/embassy-mspm0/"&gt;embassy-mspm0&lt;/a&gt;, for the Texas Instruments MSPM0 microcontrollers.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/esp-rs"&gt;esp-rs&lt;/a&gt;, for the Espressif Systems ESP32 series of chips. 
    &lt;ul&gt; 
     &lt;li&gt;Embassy HAL support for Espressif chips, as well as Async Wi-Fi, Bluetooth, and ESP-NOW, is being developed in the &lt;a href="https://github.com/esp-rs/esp-hal"&gt;esp-rs/esp-hal&lt;/a&gt; repository.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ch32-rs/ch32-hal"&gt;ch32-hal&lt;/a&gt;, for the WCH 32-bit RISC-V(CH32V) series of chips.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/AlexCharlton/mpfs-hal"&gt;mpfs-hal&lt;/a&gt;, for the Microchip PolarFire SoC.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/py32-rs/py32-hal"&gt;py32-hal&lt;/a&gt;, for the Puya Semiconductor PY32 series of microcontrollers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Time that Just Works&lt;/strong&gt; - No more messing with hardware timers. &lt;a href="https://docs.embassy.dev/embassy-time"&gt;embassy_time&lt;/a&gt; provides Instant, Duration, and Timer types that are globally available and never overflow.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Real-time ready&lt;/strong&gt; - Tasks on the same async executor run cooperatively, but you can create multiple executors with different priorities so that higher priority tasks preempt lower priority ones. See the &lt;a href="https://github.com/embassy-rs/embassy/raw/master/examples/nrf52840/src/bin/multiprio.rs"&gt;example&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Low-power ready&lt;/strong&gt; - Easily build devices with years of battery life. The async executor automatically puts the core to sleep when there's no work to do. Tasks are woken by interrupts, there is no busy-loop polling while waiting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt; - The &lt;a href="https://docs.embassy.dev/embassy-net/"&gt;embassy-net&lt;/a&gt; network stack implements extensive networking functionality, including Ethernet, IP, TCP, UDP, ICMP, and DHCP. Async drastically simplifies managing timeouts and serving multiple connections concurrently.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bluetooth&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/trouble"&gt;trouble&lt;/a&gt; crate provides a Bluetooth Low Energy 4.x and 5.x Host that runs on any microcontroller implementing the &lt;a href="https://github.com/embassy-rs/bt-hci"&gt;bt-hci&lt;/a&gt; traits (currently &lt;code&gt;nRF52&lt;/code&gt;, &lt;code&gt;rp2040&lt;/code&gt;, &lt;code&gt;rp23xx&lt;/code&gt; and &lt;code&gt;esp32&lt;/code&gt; and &lt;code&gt;serial&lt;/code&gt; controllers are supported).&lt;/li&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/nrf-softdevice"&gt;nrf-softdevice&lt;/a&gt; crate provides Bluetooth Low Energy 4.x and 5.x support for nRF52 microcontrollers.&lt;/li&gt; 
   &lt;li&gt;The &lt;a href="https://github.com/embassy-rs/embassy/tree/main/embassy-stm32-wpan"&gt;embassy-stm32-wpan&lt;/a&gt; crate provides Bluetooth Low Energy 5.x support for stm32wb microcontrollers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;LoRa&lt;/strong&gt; - The &lt;a href="https://github.com/lora-rs/lora-rs"&gt;lora-rs&lt;/a&gt; project provides an async LoRa and LoRaWAN stack that works well on Embassy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;USB&lt;/strong&gt; - &lt;a href="https://docs.embassy.dev/embassy-usb/"&gt;embassy-usb&lt;/a&gt; implements a device-side USB stack. Implementations for common classes such as USB serial (CDC ACM) and USB HID are available, and a rich builder API allows building your own.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bootloader and DFU&lt;/strong&gt; - &lt;a href="https://github.com/embassy-rs/embassy/tree/master/embassy-boot"&gt;embassy-boot&lt;/a&gt; is a lightweight bootloader supporting firmware application upgrades in a power-fail-safe way, with trial boots and rollbacks.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sneak peek&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust,ignore"&gt;use defmt::info;
use embassy_executor::Spawner;
use embassy_time::{Duration, Timer};
use embassy_nrf::gpio::{AnyPin, Input, Level, Output, OutputDrive, Pin, Pull};
use embassy_nrf::{Peri, Peripherals};

// Declare async tasks
#[embassy_executor::task]
async fn blink(pin: Peri&amp;lt;'static, AnyPin&amp;gt;) {
    let mut led = Output::new(pin, Level::Low, OutputDrive::Standard);

    loop {
        // Timekeeping is globally available, no need to mess with hardware timers.
        led.set_high();
        Timer::after_millis(150).await;
        led.set_low();
        Timer::after_millis(150).await;
    }
}

// Main is itself an async task as well.
#[embassy_executor::main]
async fn main(spawner: Spawner) {
    let p = embassy_nrf::init(Default::default());

    // Spawned tasks run in the background, concurrently.
    spawner.spawn(blink(p.P0_13.into())).unwrap();

    let mut button = Input::new(p.P0_11, Pull::Up);
    loop {
        // Asynchronously wait for GPIO events, allowing other tasks
        // to run, or the core to sleep.
        button.wait_for_low().await;
        info!("Button pressed!");
        button.wait_for_high().await;
        info!("Button released!");
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Examples are found in the &lt;code&gt;examples/&lt;/code&gt; folder separated by the chip manufacturer they are designed to run on. For example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;examples/nrf52840&lt;/code&gt; run on the &lt;code&gt;nrf52840-dk&lt;/code&gt; board (PCA10056) but should be easily adaptable to other nRF52 chips and boards.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/nrf5340&lt;/code&gt; run on the &lt;code&gt;nrf5340-dk&lt;/code&gt; board (PCA10095).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/stm32xx&lt;/code&gt; for the various STM32 families.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/rp&lt;/code&gt; are for the RP2040 chip.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;examples/std&lt;/code&gt; are designed to run locally on your PC.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Running examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;probe-rs&lt;/code&gt; following the instructions at &lt;a href="https://probe.rs"&gt;https://probe.rs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Change directory to the sample's base directory. For example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd examples/nrf52840
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Ensure &lt;code&gt;Cargo.toml&lt;/code&gt; sets the right feature for the name of the chip you are programming. If this name is incorrect, the example may fail to run or immediately crash after being programmed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure &lt;code&gt;.cargo/config.toml&lt;/code&gt; contains the name of the chip you are programming.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the example&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo run --release --bin blinky
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more help getting started, see &lt;a href="https://github.com/embassy-rs/embassy/wiki/Getting-Started"&gt;Getting Started&lt;/a&gt; and &lt;a href="https://github.com/embassy-rs/embassy/wiki/Running-the-Examples"&gt;Running the Examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Developing Embassy with Rust Analyzer-based editors&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://rust-analyzer.github.io/"&gt;Rust Analyzer&lt;/a&gt; is used by &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; and others. Given the multiple targets that Embassy serves, there is no Cargo workspace file. Instead, the Rust Analyzer must be told of the target project to work with. In the case of Visual Studio Code, please refer to the &lt;code&gt;.vscode/settings.json&lt;/code&gt; file's &lt;code&gt;rust-analyzer.linkedProjects&lt;/code&gt;setting.&lt;/p&gt; 
&lt;h2&gt;Minimum supported Rust version (MSRV)&lt;/h2&gt; 
&lt;p&gt;Embassy is guaranteed to compile on stable Rust 1.75 and up. It &lt;em&gt;might&lt;/em&gt; compile with older versions, but that may change in any new patch release.&lt;/p&gt; 
&lt;h2&gt;Why the name?&lt;/h2&gt; 
&lt;p&gt;EMBedded ASYnc! :)&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Embassy is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/embassy-rs/embassy/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/embassy-rs/embassy/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zellij-org/zellij</title>
      <link>https://github.com/zellij-org/zellij</link>
      <description>&lt;p&gt;A terminal workspace with batteries included&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;br&gt; &lt;img src="https://raw.githubusercontent.com/zellij-org/zellij/main/assets/logo.png" alt="logo" width="200"&gt; &lt;br&gt; Zellij &lt;br&gt; &lt;br&gt; &lt;/h1&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.gg/CrUAFH3"&gt;&lt;img alt="Discord Chat" src="https://img.shields.io/discord/771367133715628073?color=5865F2&amp;amp;label=discord&amp;amp;style=flat-square"&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/%23zellij_general:matrix.org"&gt;&lt;img alt="Matrix Chat" src="https://img.shields.io/matrix/zellij_general:matrix.org?color=1d7e64&amp;amp;label=matrix%20chat&amp;amp;style=flat-square&amp;amp;logo=matrix"&gt;&lt;/a&gt; &lt;a href="https://zellij.dev/documentation/"&gt;&lt;img alt="Zellij documentation" src="https://img.shields.io/badge/zellij-documentation-fc0060?style=flat-square"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/zellij-org/zellij/main/assets/demo.gif" alt="demo"&gt; &lt;/p&gt; 
&lt;h4 align="center"&gt; [&lt;a href="https://zellij.dev/documentation/installation"&gt;Installation&lt;/a&gt;] [&lt;a href="https://zellij.dev/screencasts/"&gt;Screencasts &amp;amp; Tutorials&lt;/a&gt;] [&lt;a href="https://zellij.dev/documentation/configuration"&gt;Configuration&lt;/a&gt;] [&lt;a href="https://zellij.dev/documentation/layouts"&gt;Layouts&lt;/a&gt;] [&lt;a href="https://zellij.dev/documentation/faq"&gt;FAQ&lt;/a&gt;] &lt;/h4&gt; 
&lt;h1&gt;What is this?&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/zellij-org/zellij/main/#origin-of-the-name"&gt;Zellij&lt;/a&gt; is a workspace aimed at developers, ops-oriented people and anyone who loves the terminal. Similar programs are sometimes called "Terminal Multiplexers".&lt;/p&gt; 
&lt;p&gt;Zellij is designed around the philosophy that one must not sacrifice simplicity for power, taking pride in its great experience out of the box as well as the advanced features it places at its users' fingertips.&lt;/p&gt; 
&lt;p&gt;Zellij is geared toward beginner and power users alike - allowing deep customizability, personal automation through &lt;a href="https://zellij.dev/documentation/layouts.html"&gt;layouts&lt;/a&gt;, true multiplayer collaboration, unique UX features such as floating and stacked panes, and a &lt;a href="https://zellij.dev/documentation/plugins.html"&gt;plugin system&lt;/a&gt; allowing one to create plugins in any language that compiles to WebAssembly.&lt;/p&gt; 
&lt;p&gt;You can get started by &lt;a href="https://zellij.dev/documentation/installation.html"&gt;installing&lt;/a&gt; Zellij and checking out the &lt;a href="https://zellij.dev/screencasts/"&gt;Screencasts &amp;amp; Tutorials&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For more details about our future plans, read about upcoming features in our &lt;a href="https://raw.githubusercontent.com/zellij-org/zellij/main/#roadmap"&gt;roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;How do I install it?&lt;/h2&gt; 
&lt;p&gt;The easiest way to install Zellij is through a &lt;a href="https://raw.githubusercontent.com/zellij-org/zellij/main/docs/THIRD_PARTY_INSTALL.md"&gt;package for your OS&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If one is not available for your OS, you could download a prebuilt binary from the &lt;a href="https://github.com/zellij-org/zellij/releases/latest"&gt;latest release&lt;/a&gt; and place it in your &lt;code&gt;$PATH&lt;/code&gt;. If you'd like, we could &lt;a href="https://raw.githubusercontent.com/zellij-org/zellij/main/#try-zellij-without-installing"&gt;automatically choose one for you&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also install (compile) with &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo install --locked zellij
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Try Zellij without installing&lt;/h4&gt; 
&lt;p&gt;bash/zsh:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bash &amp;lt;(curl -L https://zellij.dev/launch)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;fish/xonsh:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bash -c 'bash &amp;lt;(curl -L https://zellij.dev/launch)'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installing from &lt;code&gt;main&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Installing Zellij from the &lt;code&gt;main&lt;/code&gt; branch is not recommended. This branch represents pre-release code, is constantly being worked on and may contain broken or unusable features. In addition, using it may corrupt the cache for future versions, forcing users to clear it before they can use the officially released version.&lt;/p&gt; 
&lt;p&gt;That being said - no-one will stop you from using it (and bug reports involving new features are greatly appreciated), but please consider using the latest release instead as detailed at the top of this section.&lt;/p&gt; 
&lt;h2&gt;How do I start a development environment?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the project&lt;/li&gt; 
 &lt;li&gt;In the project folder, for debug builds run: &lt;code&gt;cargo xtask run&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;To run all tests: &lt;code&gt;cargo xtask test&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more build commands, see &lt;a href="https://raw.githubusercontent.com/zellij-org/zellij/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;For configuring Zellij, please see the &lt;a href="https://zellij.dev/documentation/configuration.html"&gt;Configuration Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;About issues in this repository&lt;/h2&gt; 
&lt;p&gt;Issues in this repository, whether open or closed, do not necessarily indicate a problem or a bug in the software. They only indicate that the reporter wanted to communicate their experiences or thoughts to the maintainers. The Zellij maintainers do their best to go over and reply to all issue reports, but unfortunately cannot promise these will always be dealt with or even read. Your understanding is appreciated.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Presented here is the project roadmap, divided into three main sections.&lt;/p&gt; 
&lt;p&gt;These are issues that are either being actively worked on or are planned for the near future.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;If you'll click on the image, you'll be led to an SVG version of it on the website where you can directly click on every issue&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://zellij.dev/roadmap"&gt;&lt;img src="https://github.com/zellij-org/zellij/assets/795598/9c5b573b-20f5-41c6-908b-6b21c5fd456e" alt="roadmap"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Origin of the Name&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Zellij"&gt;From Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Zellij (Arabic: الزليج, romanized: zillīj; also spelled zillij or zellige) is a style of mosaic tilework made from individually hand-chiseled tile pieces. The pieces were typically of different colours and fitted together to form various patterns on the basis of tessellations, most notably elaborate Islamic geometric motifs such as radiating star patterns composed of various polygons. This form of Islamic art is one of the main characteristics of architecture in the western Islamic world. It is found in the architecture of Morocco, the architecture of Algeria, early Islamic sites in Tunisia, and in the historic monuments of al-Andalus (in the Iberian Peninsula).&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT&lt;/p&gt; 
&lt;h2&gt;Sponsored by&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://terminaltrove.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/121595180?s=200&amp;amp;v=4" width="80px"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>paradigmxyz/reth</title>
      <link>https://github.com/paradigmxyz/reth</link>
      <description>&lt;p&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reth&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/bench.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/actions/workflows/bench.yml/badge.svg?sanitize=true" alt="bench status"&gt;&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/unit.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/workflows/unit/badge.svg?sanitize=true" alt="CI status"&gt;&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/lint.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/actions/workflows/lint.yml/badge.svg?sanitize=true" alt="cargo-lint status"&gt;&lt;/a&gt; &lt;a href="https://t.me/paradigm_reth"&gt;&lt;img src="https://img.shields.io/endpoint?color=neon&amp;amp;logo=telegram&amp;amp;label=chat&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth" alt="Telegram Chat"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-prod.png" alt=""&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://paradigmxyz.github.io/reth/installation/installation.html"&gt;Install&lt;/a&gt;&lt;/strong&gt; | &lt;a href="https://reth.rs"&gt;User Docs&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs"&gt;Developer Docs&lt;/a&gt; | &lt;a href="https://reth.rs/docs"&gt;Crate Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Reth?&lt;/h2&gt; 
&lt;p&gt;Reth (short for Rust Ethereum, &lt;a href="https://twitter.com/kelvinfichter/status/1597653609411268608"&gt;pronunciation&lt;/a&gt;) is a new Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient. Reth is an Execution Layer (EL) and is compatible with all Ethereum Consensus Layer (CL) implementations that support the &lt;a href="https://github.com/ethereum/execution-apis/tree/a0d03086564ab1838b462befbc083f873dcf0c0f/src/engine"&gt;Engine API&lt;/a&gt;. It is originally built and driven forward by &lt;a href="https://paradigm.xyz/"&gt;Paradigm&lt;/a&gt;, and is licensed under the Apache and MIT licenses.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;As a full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain. This includes sending and receiving transactions/logs/traces, as well as accessing and interacting with smart contracts. Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.&lt;/p&gt; 
&lt;p&gt;More concretely, our goals are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Every component of Reth is built to be used as a library: well-tested, heavily documented and benchmarked. We envision that developers will import the node's crates, mix and match, and innovate on top of them. Examples of such usage include but are not limited to spinning up standalone P2P networks, talking directly to a node's database, or "unbundling" the node into the components you need. To achieve that, we are licensing Reth under the Apache/MIT permissive license. You can learn more about the project's components &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Reth aims to be fast, so we used Rust and the &lt;a href="https://erigon.substack.com/p/erigon-stage-sync-and-control-flows"&gt;Erigon staged-sync&lt;/a&gt; node architecture. We also use our Ethereum libraries (including &lt;a href="https://github.com/alloy-rs/alloy/"&gt;Alloy&lt;/a&gt; and &lt;a href="https://github.com/bluealloy/revm/"&gt;revm&lt;/a&gt;) which we’ve battle-tested and optimized via &lt;a href="https://github.com/foundry-rs/foundry/"&gt;Foundry&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free for anyone to use any way they want&lt;/strong&gt;: Reth is free open source software, built for the community, by the community. By licensing the software under the Apache/MIT license, we want developers to use it without being bound by business licenses, or having to think about the implications of GPL-like licenses.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Client Diversity&lt;/strong&gt;: The Ethereum protocol becomes more antifragile when no node implementation dominates. This ensures that if there's a software bug, the network does not finalize a bad block. By building a new client, we hope to contribute to Ethereum's antifragility.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support as many EVM chains as possible&lt;/strong&gt;: We aspire that Reth can full-sync not only Ethereum, but also other chains like Optimism, Polygon, BNB Smart Chain, and more. If you're working on any of these projects, please reach out.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configurability&lt;/strong&gt;: We want to solve for node operators that care about fast historical queries, but also for hobbyists who cannot operate on large hardware. We also want to support teams and individuals who want both sync from genesis and via "fast sync". We envision that Reth will be configurable enough and provide configurable "profiles" for the tradeoffs that each team faces.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities.&lt;/p&gt; 
&lt;p&gt;More historical context below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We released 1.0 "production-ready" stable Reth in June 2024. 
  &lt;ul&gt; 
   &lt;li&gt;Reth completed an audit with &lt;a href="https://sigmaprime.io/"&gt;Sigma Prime&lt;/a&gt;, the developers of &lt;a href="https://github.com/sigp/lighthouse"&gt;Lighthouse&lt;/a&gt;, the Rust Consensus Layer implementation. Find it &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/audit/sigma_prime_audit_v2.pdf"&gt;here&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Revm (the EVM used in Reth) underwent an audit with &lt;a href="https://twitter.com/guidovranken"&gt;Guido Vranken&lt;/a&gt; (#1 &lt;a href="https://ethereum.org/en/bug-bounty"&gt;Ethereum Bug Bounty&lt;/a&gt;). We will publish the results soon.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;We released multiple iterative beta versions, up to &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.9"&gt;beta.9&lt;/a&gt; on Monday June 3rd 2024 the last beta release.&lt;/li&gt; 
 &lt;li&gt;We released &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1"&gt;beta&lt;/a&gt; on Monday March 4th 2024, our first breaking change to the database model, providing faster query speed, smaller database footprint, and allowing "history" to be mounted on separate drives.&lt;/li&gt; 
 &lt;li&gt;We shipped iterative improvements until the last alpha release on February 28th 2024, &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.21"&gt;0.1.0-alpha.21&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We &lt;a href="https://www.paradigm.xyz/2023/06/reth-alpha"&gt;initially announced&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.1"&gt;0.1.0-alpha.1&lt;/a&gt; in June 20th 2023.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database compatibility&lt;/h3&gt; 
&lt;p&gt;We do not have any breaking database changes since beta.1, and do not plan any in the near future.&lt;/p&gt; 
&lt;p&gt;Reth &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1"&gt;v0.2.0-beta.1&lt;/a&gt; includes a &lt;a href="https://github.com/paradigmxyz/reth/pull/5191"&gt;set of breaking database changes&lt;/a&gt; that makes it impossible to use database files produced by earlier versions.&lt;/p&gt; 
&lt;p&gt;If you had a database produced by alpha versions of Reth, you need to drop it with &lt;code&gt;reth db drop&lt;/code&gt; (using the same arguments such as &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;--datadir&lt;/code&gt; that you passed to &lt;code&gt;reth node&lt;/code&gt;), and resync using the same &lt;code&gt;reth node&lt;/code&gt; command you've used before.&lt;/p&gt; 
&lt;h2&gt;For Users&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://paradigmxyz.github.io/reth"&gt;Reth documentation&lt;/a&gt; for instructions on how to install and run Reth.&lt;/p&gt; 
&lt;h2&gt;For Developers&lt;/h2&gt; 
&lt;h3&gt;Using reth as a library&lt;/h3&gt; 
&lt;p&gt;You can use individual crates of reth in your project.&lt;/p&gt; 
&lt;p&gt;The crate docs can be found &lt;a href="https://paradigmxyz.github.io/reth/docs"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For a general overview of the crates, see &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;Project Layout&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you want to contribute, or follow along with contributor discussion, you can use our &lt;a href="https://t.me/paradigm_reth"&gt;main telegram&lt;/a&gt; to chat with us about the development of Reth!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Our contributor guidelines can be found in &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;See our &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs"&gt;contributor docs&lt;/a&gt; for more information on the project. A good starting point is &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;Project Layout&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building and testing&lt;/h3&gt; 
&lt;!--
When updating this, also update:
- clippy.toml
- Cargo.toml
- .github/workflows/lint.yml
--&gt; 
&lt;p&gt;The Minimum Supported Rust Version (MSRV) of this project is &lt;a href="https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/"&gt;1.86.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the docs for detailed instructions on how to &lt;a href="https://paradigmxyz.github.io/reth/installation/source"&gt;build from source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To fully test Reth, you will need to have &lt;a href="https://geth.ethereum.org/docs/getting-started/installing-geth"&gt;Geth installed&lt;/a&gt;, but it is possible to run a subset of tests without Geth.&lt;/p&gt; 
&lt;p&gt;First, clone the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/paradigmxyz/reth
cd reth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, run the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo nextest run --workspace

# Run the Ethereum Foundation tests
make ef-tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We highly recommend using &lt;a href="https://nexte.st/"&gt;&lt;code&gt;cargo nextest&lt;/code&gt;&lt;/a&gt; to speed up testing. Using &lt;code&gt;cargo test&lt;/code&gt; to run tests may work fine, but this is not tested and does not support more advanced features like retries for spurious failures.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Some tests use random number generators to generate test data. If you want to use a deterministic seed, you can set the &lt;code&gt;SEED&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions, first see if the answer to your question can be found in the &lt;a href="https://paradigmxyz.github.io/reth/"&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If the answer is not there:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join the &lt;a href="https://t.me/paradigm_reth"&gt;Telegram&lt;/a&gt; to get help, or&lt;/li&gt; 
 &lt;li&gt;Open a &lt;a href="https://github.com/paradigmxyz/reth/discussions/new"&gt;discussion&lt;/a&gt; with your question, or&lt;/li&gt; 
 &lt;li&gt;Open an issue with &lt;a href="https://github.com/paradigmxyz/reth/issues/new?assignees=&amp;amp;labels=C-bug%2CS-needs-triage&amp;amp;projects=&amp;amp;template=bug.yml"&gt;the bug&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/SECURITY.md"&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Reth is a new implementation of the Ethereum protocol. In the process of developing the node we investigated the design decisions other nodes have made to understand what is done well, what is not, and where we can improve the status quo.&lt;/p&gt; 
&lt;p&gt;None of this would have been possible without them, so big shoutout to the teams below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ethereum/go-ethereum/"&gt;Geth&lt;/a&gt;: We would like to express our heartfelt gratitude to the go-ethereum team for their outstanding contributions to Ethereum over the years. Their tireless efforts and dedication have helped to shape the Ethereum ecosystem and make it the vibrant and innovative community it is today. Thank you for your hard work and commitment to the project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ledgerwatch/erigon"&gt;Erigon&lt;/a&gt; (fka Turbo-Geth): Erigon pioneered the &lt;a href="https://erigon.substack.com/p/erigon-stage-sync-and-control-flows"&gt;"Staged Sync" architecture&lt;/a&gt; that Reth is using, as well as &lt;a href="https://github.com/ledgerwatch/erigon/wiki/Choice-of-storage-engine"&gt;introduced MDBX&lt;/a&gt; as the database of choice. We thank Erigon for pushing the state of the art research on the performance limits of Ethereum nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/akula-bft/akula/"&gt;Akula&lt;/a&gt;: Reth uses forks of the Apache versions of Akula's &lt;a href="https://github.com/paradigmxyz/reth/pull/132"&gt;MDBX Bindings&lt;/a&gt;, &lt;a href="https://github.com/paradigmxyz/reth/pull/63"&gt;FastRLP&lt;/a&gt; and &lt;a href="https://github.com/paradigmxyz/reth/pull/80"&gt;ECIES&lt;/a&gt; . Given that these packages were already released under the Apache License, and they implement standardized solutions, we decided not to reimplement them to iterate faster. We thank the Akula team for their contributions to the Rust Ethereum ecosystem and for publishing these packages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Warning&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;NippyJar&lt;/code&gt; and &lt;code&gt;Compact&lt;/code&gt; encoding formats and their implementations are designed for storing and retrieving data internally. They are not hardened to safely read potentially malicious data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust</title>
      <link>https://github.com/rust-lang/rust</link>
      <description>&lt;p&gt;Empowering everyone to build reliable and efficient software.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-dark.svg"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg"&gt; 
  &lt;img alt="The Rust Programming Language: A language empowering everyone to build reliable and efficient software" src="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg?sanitize=true" width="50%"&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Website&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn/get-started"&gt;Getting started&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn"&gt;Learn&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn#learn-use"&gt;Documentation&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;This is the main source code repository for &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;. It contains the compiler, standard library, and documentation.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Fast and memory-efficient, suitable for critical services, embedded devices, and easily integrated with other languages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliability:&lt;/strong&gt; Our rich type system and ownership model ensure memory and thread safety, reducing bugs at compile-time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Productivity:&lt;/strong&gt; Comprehensive documentation, a compiler committed to providing great diagnostics, and advanced tooling including package manager and build tool (&lt;a href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;), auto-formatter (&lt;a href="https://github.com/rust-lang/rustfmt"&gt;rustfmt&lt;/a&gt;), linter (&lt;a href="https://github.com/rust-lang/rust-clippy"&gt;Clippy&lt;/a&gt;) and editor support (&lt;a href="https://github.com/rust-lang/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Read &lt;a href="https://doc.rust-lang.org/book/ch01-01-installation.html"&gt;"Installation"&lt;/a&gt; from &lt;a href="https://doc.rust-lang.org/book/index.html"&gt;The Book&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing from Source&lt;/h2&gt; 
&lt;p&gt;If you really want to install from source (though this is not recommended), see &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/INSTALL.md"&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://www.rust-lang.org/community"&gt;https://www.rust-lang.org/community&lt;/a&gt; for a list of chat platforms and forums.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rust is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/COPYRIGHT"&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Trademark&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://rustfoundation.org/"&gt;The Rust Foundation&lt;/a&gt; owns and protects the Rust and Cargo trademarks and logos (the "Rust Trademarks").&lt;/p&gt; 
&lt;p&gt;If you want to use these names or brands, please read the &lt;a href="https://rustfoundation.org/policy/rust-trademark-policy/"&gt;Rust language trademark policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Third-party logos may be subject to third-party copyrights and trademarks. See &lt;a href="https://www.rust-lang.org/policies/licenses"&gt;Licenses&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aptos-labs/aptos-core</title>
      <link>https://github.com/aptos-labs/aptos-core</link>
      <description>&lt;p&gt;Aptos is a layer 1 blockchain built to support the widespread use of blockchain through better technology and user experience.&lt;/p&gt;&lt;hr&gt;&lt;a href="https://aptos.dev"&gt; &lt;img width="100%" src="https://raw.githubusercontent.com/aptos-labs/aptos-core/main/.assets/aptos_banner.png" alt="Aptos Banner"&gt; &lt;/a&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/aptos-labs/aptos-core/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-Apache-green.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://github.com/aptos-labs/aptos-core/actions/workflows/lint-test.yaml"&gt;&lt;img src="https://github.com/aptos-labs/aptos-core/actions/workflows/lint-test.yaml/badge.svg?sanitize=true" alt="Lint+Test"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/aptos-labs/aptos-core"&gt;&lt;img src="https://codecov.io/gh/aptos-labs/aptos-core/branch/main/graph/badge.svg?token=X01RKXSGDE" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/aptosnetwork"&gt;&lt;img src="https://img.shields.io/discord/945856774056083548?style=flat-square" alt="Discord chat"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Aptos is a layer 1 blockchain bringing a paradigm shift to Web3 through better technology and user experience. Built with Move to create a home for developers building next-gen applications.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://aptosfoundation.org/"&gt;Aptos Foundation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aptos.dev"&gt;Aptos Developer Network&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aptos.dev/guides/system-integrators-guide"&gt;Guide - Integrate with the Aptos Blockchain&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aptos.dev/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Follow us on &lt;a href="https://twitter.com/Aptos"&gt;Twitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join us on the &lt;a href="https://discord.gg/aptosnetwork"&gt;Aptos Discord&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;You can learn more about contributing to the Aptos project by reading our &lt;a href="https://github.com/aptos-labs/aptos-core/raw/main/CONTRIBUTING.md"&gt;Contribution Guide&lt;/a&gt; and by viewing our &lt;a href="https://github.com/aptos-labs/aptos-core/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Aptos Core is licensed under &lt;a href="https://github.com/aptos-labs/aptos-core/raw/main/LICENSE"&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Myriad-Dreamin/tinymist</title>
      <link>https://github.com/Myriad-Dreamin/tinymist</link>
      <description>&lt;p&gt;Tinymist [ˈtaɪni mɪst] is an integrated language service for Typst [taɪpst].&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tinymist&lt;/h1&gt; 
&lt;p&gt;Tinymist [ˈtaɪni mɪst] is an integrated language service for &lt;a href="https://typst.app/"&gt;Typst&lt;/a&gt; [taɪpst]. You can also call it &lt;ruby&gt;微&lt;rt&gt;wēi&lt;/rt&gt;&lt;/ruby&gt;&lt;ruby&gt;霭&lt;rt&gt;ǎi&lt;/rt&gt;&lt;/ruby&gt; in Chinese.&lt;/p&gt; 
&lt;p&gt;It contains:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;an analyzing library for Typst, see &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/crates/tinymist-query/"&gt;tinymist-query&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;a CLI for Typst, see &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/crates/tinymist/"&gt;tinymist&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;which provides a language server for Typst, see &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/language.html"&gt;Language Features&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;which provides a preview server for Typst, see &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/preview.html"&gt;Preview Feature&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;a VSCode extension for Typst, see &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/editors/vscode/"&gt;Tinymist VSCode Extension&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Language service (LSP) features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide"&gt;Semantic highlighting&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The "semantic highlighting" is supplementary to &lt;a href="https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide"&gt;"syntax highlighting"&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#provide-code-actions"&gt;Code actions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Also known as "quick fixes" or "refactorings".&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#format-source-code-in-an-editor"&gt;Formatting (Reformatting)&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Provide the user with support for formatting whole documents, using &lt;a href="https://github.com/astrale-sharp/typstfmt"&gt;typstfmt&lt;/a&gt; or &lt;a href="https://github.com/Enter-tainer/typstyle"&gt;typstyle&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#highlight-all-occurrences-of-a-symbol-in-a-document"&gt;Document highlight&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Highlight all break points in a loop context.&lt;/li&gt; 
   &lt;li&gt;(Todo) Highlight all exit points in a function context.&lt;/li&gt; 
   &lt;li&gt;(Todo) Highlight all captures in a closure context.&lt;/li&gt; 
   &lt;li&gt;(Todo) Highlight all occurrences of a symbol in a document.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentLink"&gt;Document links&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Renders path or link references in the document, such as &lt;code&gt;image("path.png")&lt;/code&gt; or &lt;code&gt;bibliography(style: "path.csl")&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/getstarted/userinterface#_outline-view"&gt;Document symbols&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Also known as "document outline" or "table of contents" &lt;em&gt;in Typst&lt;/em&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://burkeholland.gitbook.io/vs-code-can-do-that/exercise-3-navigation-and-refactoring/folding-sections"&gt;Folding ranges&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;You can collapse code/content blocks and headings.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#show-definitions-of-a-symbol"&gt;Goto definitions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Right-click on a symbol and select "Go to Definition".&lt;/li&gt; 
   &lt;li&gt;Or ctrl+click on a symbol.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#find-all-references-to-a-symbol"&gt;References&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Right-click on a symbol and select "Go to References" or "Find References".&lt;/li&gt; 
   &lt;li&gt;Or ctrl+click on a symbol.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#show-hovers"&gt;Hover tips&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Also known as "hovering tooltip".&lt;/li&gt; 
   &lt;li&gt;Render docs according to &lt;a href="https://github.com/Mc-Zen/tidy"&gt;tidy&lt;/a&gt; style.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.jetbrains.com/help/idea/inlay-hints.html"&gt;Inlay hints&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Inlay hints are special markers that appear in the editor and provide you with additional information about your code, like the names of the parameters that a called method expects.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#show-color-decorators"&gt;Color Provider&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;View all inlay colorful label for color literals in your document.&lt;/li&gt; 
   &lt;li&gt;Change the color literal's value by a color picker or its code presentation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup"&gt;Code Lens&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Should give contextual buttons along with code. For example, a button for exporting your document to various formats at the start of the document.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#rename-symbols"&gt;Rename symbols and embedded paths&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#help-with-function-and-method-signatures"&gt;Help with function and method signatures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#show-all-symbol-definitions-in-folder"&gt;Workspace Symbols&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-code-actions"&gt;Code Action&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Increasing/Decreasing heading levels.&lt;/li&gt; 
   &lt;li&gt;Turn equation into "inline", "block" or "multiple-line block" styles.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/raw/master/docs/dev/lsp-extensions.md#on-enter"&gt;experimental/onEnter&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; inside triple-slash comments automatically inserts &lt;code&gt;///&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; in the middle or after a trailing space in &lt;code&gt;//&lt;/code&gt; inserts &lt;code&gt;//&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; inside &lt;code&gt;//!&lt;/code&gt; doc comments automatically inserts &lt;code&gt;//!&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; inside equation markups automatically inserts indents.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Extra features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compiles to PDF on save (configurable to as-you-type, or other options). Check &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/export.html"&gt;Docs: Exporting Documents&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Also compiles to SVG, PNG, HTML, Markdown, Text, and other formats by commands, vscode tasks, or code lenses.&lt;/li&gt; 
 &lt;li&gt;Provides test, benchmark, coverage collecting on documents and modules. Check &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/testing.html"&gt;Docs: Testing Features&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Provides builtin linting. Check &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/linting.html"&gt;Docs: Linting Features&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Provides a status bar item to show the current document's compilation status and words count.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/tools/editor-tools/"&gt;Editor tools&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;View a list of templates in template gallery. (&lt;code&gt;tinymist.showTemplateGallery&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Click a button in template gallery to initialize a new project with a template. (&lt;code&gt;tinymist.initTemplate&lt;/code&gt; and &lt;code&gt;tinymist.initTemplateInPlace&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Trace execution in current document (&lt;code&gt;tinymist.profileCurrentFile&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Versioning and Release Cycle&lt;/h2&gt; 
&lt;p&gt;Tinymist's versions follow the &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt; scheme, in format of &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;. Besides, tinymist follows special rules for the version number:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If a version is suffixed with &lt;code&gt;-rcN&lt;/code&gt; (
  &lt;picture&gt;
   &lt;source media="(prefers-color-scheme: dark)" srcset="assets/images/introduction/frame_0.svg"&gt;
   &lt;img src="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/assets/images/introduction/frame_1.svg?sanitize=true" alt="typst-frame"&gt;
  &lt;/picture&gt;), e.g. &lt;code&gt;0.11.0-rc1&lt;/code&gt; and &lt;code&gt;0.12.1-rc1&lt;/code&gt;, it means this version is a release candidate. It is used to test publish script and E2E functionalities. These versions will not be published to the marketplace.&lt;/li&gt; 
 &lt;li&gt;If the &lt;code&gt;PATCH&lt;/code&gt; number is odd, e.g. &lt;code&gt;0.11.1&lt;/code&gt; and &lt;code&gt;0.12.3&lt;/code&gt;, it means this version is a nightly release. The nightly release will use both &lt;a href="https://github.com/Myriad-Dreamin/tinymist/tree/main"&gt;tinymist&lt;/a&gt; and &lt;a href="https://github.com/typst/typst/tree/main"&gt;typst&lt;/a&gt; at &lt;strong&gt;main branch&lt;/strong&gt;. They will be published as prerelease version to the marketplace. Note that in nightly releases, we change &lt;code&gt;#sys.version&lt;/code&gt; to the next minor release to help develop documents with nightly features. For example, in tinymist nightly v0.12.1 or v0.12.3, the &lt;code&gt;#sys.version&lt;/code&gt; is changed to &lt;code&gt;version(0, 13, 0)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Otherwise, if the &lt;code&gt;PATCH&lt;/code&gt; number is even, e.g. &lt;code&gt;0.11.0&lt;/code&gt; and &lt;code&gt;0.12.2&lt;/code&gt;, it means this version is a regular release. The regular release will always use the recent stable version of tinymist and typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The release cycle is as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If there is a typst version update, a new major or minor version will be released intermediately. This means tinymist will always align the minor version with typst.&lt;/li&gt; 
 &lt;li&gt;If there is at least a bug or feature added this week, a new patch version will be released.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Follow the instructions to enable tinymist in your favorite editor.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/vscode.html"&gt;VS Cod(e,ium)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/neovim.html"&gt;Neovim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/emacs.html"&gt;Emacs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/sublime-text.html"&gt;Sublime Text&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/helix.html"&gt;Helix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/zed.html"&gt;Zed&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installing Regular/Nightly Prebuilds from GitHub&lt;/h2&gt; 
&lt;p&gt;Note: if you are not knowing what is a regular/nightly release, please don't follow this section.&lt;/p&gt; 
&lt;p&gt;Besides published releases specific for each editors, you can also download the latest regular/nightly prebuilts from GitHub and install them manually.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Regular prebuilts can be found in &lt;a href="https://github.com/Myriad-Dreamin/tinymist/releases"&gt;GitHub Releases&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Nightly prebuilts can be found in &lt;a href="https://github.com/Myriad-Dreamin/tinymist/actions"&gt;GitHub Actions&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;(Suggested) Use the &lt;a href="https://github.com/hongjr03/tinymist-nightly-installer"&gt;tinymist-nightly-installer&lt;/a&gt; to install the nightly prebuilts automatically. 
    &lt;ul&gt; 
     &lt;li&gt;Unix (Bash): &lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSL https://github.com/hongjr03/tinymist-nightly-installer/releases/latest/download/run.sh | bash
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
     &lt;li&gt;Windows (PowerShell): &lt;pre&gt;&lt;code class="language-bash"&gt;iwr https://github.com/hongjr03/tinymist-nightly-installer/releases/latest/download/run.ps1 -UseBasicParsing | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;The prebuilts for other revisions can also be found manually. For example, if you are seeking a nightly release for the featured &lt;a href="https://github.com/Myriad-Dreamin/tinymist/pull/468"&gt;PR: build: bump version to 0.11.17-rc1&lt;/a&gt;, you could click and go to the &lt;a href="https://github.com/Myriad-Dreamin/tinymist/actions/runs/10120639466"&gt;action page&lt;/a&gt; run for the related commits and download the artifacts.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To install extension file (the file with &lt;code&gt;.vsix&lt;/code&gt; extension) manually, please &lt;kbd&gt;Ctrl+Shift+X&lt;/kbd&gt; in the editor window and drop the downloaded vsix file into the opened extensions view.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://myriad-dreamin.github.io/tinymist/"&gt;Online Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Packaging&lt;/h2&gt; 
&lt;p&gt;Stable Channel:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/tinymist/versions" target="_blank" rel="noopener noreferrer"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/tinymist.svg?sanitize=true" alt="Packaging status" style="max-width: 100%; height: auto;"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Nightly Channel:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/tinymist-nightly/versions" target="_blank" rel="noopener noreferrer"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/tinymist-nightly.svg?sanitize=true" alt="Packaging status" style="max-width: 100%; height: auto;"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;h3&gt;Short Terms&lt;/h3&gt; 
&lt;p&gt;To encourage contributions, we create many &lt;a href="https://github.com/Myriad-Dreamin/tinymist/pulls"&gt;Pull Requests&lt;/a&gt; in draft to navigate short-term plans. They give you a hint of what or where to start in this large repository.&lt;/p&gt; 
&lt;h3&gt;Long Terms&lt;/h3&gt; 
&lt;p&gt;We are planning to implement the following features in typst v0.14.0 or spare time in weekend:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Type checking: complete the type checker.&lt;/li&gt; 
 &lt;li&gt;Periscope renderer: It is disabled since vscode reject to render SVGs containing foreignObjects.&lt;/li&gt; 
 &lt;li&gt;Inlay hint: It is disabled &lt;em&gt;by default&lt;/em&gt; because of performance issues.&lt;/li&gt; 
 &lt;li&gt;Find references of dictionary fields and named function arguments.&lt;/li&gt; 
 &lt;li&gt;Improve symbol view's appearance.&lt;/li&gt; 
 &lt;li&gt;Improve package view. 
  &lt;ul&gt; 
   &lt;li&gt;Navigate to symbols by clicking on the symbol name in the view.&lt;/li&gt; 
   &lt;li&gt;Automatically locate the symbol item in the view when viewing local documentation.&lt;/li&gt; 
   &lt;li&gt;Remember the recently invoked package commands, e.g. "Open Docs of @preview/cetz:0.3.1", "Open directory of @preview/touying:0.5.3".&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Improve label view. 
  &lt;ul&gt; 
   &lt;li&gt;Group labels.&lt;/li&gt; 
   &lt;li&gt;Search labels.&lt;/li&gt; 
   &lt;li&gt;Keep (persist) group preferences.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Improve Typst Preview. 
  &lt;ul&gt; 
   &lt;li&gt;Pin drop-down: Set the file to preview in the drop-down for clients that doesn't support passing arguments to the preview command.&lt;/li&gt; 
   &lt;li&gt;Render in web worker (another thread) to reduce overhead on the electron's main thread.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Spell checking: There is already a branch but no suitable (default) spell checking library is found. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/crate-ci/typos"&gt;typos&lt;/a&gt; is great for typst. &lt;a href="https://github.com/Automattic/harper"&gt;harper&lt;/a&gt; looks promise.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are interested by any above features, please feel free to send Issues to discuss or PRs to implement to &lt;a href="https://github.com/Myriad-Dreamin/tinymist"&gt;GitHub.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file for contribution guidelines.&lt;/p&gt; 
&lt;h2&gt;Sponsoring&lt;/h2&gt; 
&lt;p&gt;Tinymist thrives on community love and remains proudly independent. While we don't accept direct project funding, we warmly welcome support for our maintainers' personal efforts. Please go to &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/MAINTAINERS.md"&gt;Maintainers Page&lt;/a&gt; and &lt;a href="https://github.com/Myriad-Dreamin/tinymist/graphs/contributors"&gt;Contributors Page&lt;/a&gt; and find their personal pages for more information. It is also welcomed to directly ask questions about sponsoring on the &lt;a href="https://github.com/Myriad-Dreamin/tinymist/issues/new"&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Partially code is inherited from &lt;a href="https://github.com/nvarner/typst-lsp"&gt;typst-lsp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/editors/vscode#symbol-view"&gt;integrating&lt;/a&gt; &lt;strong&gt;offline&lt;/strong&gt; handwritten-stroke recognizer is powered by &lt;a href="https://detypify.quarticcat.com/"&gt;Detypify&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/editors/vscode#preview-command"&gt;integrating&lt;/a&gt; preview service is powered by &lt;a href="https://github.com/Enter-tainer/typst-preview"&gt;typst-preview&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/editors/vscode#managing-local-packages"&gt;integrating&lt;/a&gt; local package management functions are adopted from &lt;a href="https://github.com/OrangeX4/vscode-typst-sync"&gt;vscode-typst-sync&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>trailbaseio/trailbase</title>
      <link>https://github.com/trailbaseio/trailbase</link>
      <description>&lt;p&gt;A blazingly fast, open-source application server with type-safe APIs, built-in JS/ES6/TS runtime, realtime, auth, and admin UI built on Rust, SQLite &amp; V8.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://trailbase.io" target="_blank"&gt; 
  &lt;picture&gt; 
   &lt;img alt="TrailBase logo" width="150" src="https://raw.githubusercontent.com/trailbaseio/trailbase/main/assets/logo.svg?sanitize=true"&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; An open, &lt;a href="https://trailbase.io/reference/benchmarks/"&gt;blazingly fast&lt;/a&gt;, single-executable Firebase alternative with type-safe REST &amp;amp; realtime APIs, built-in JS/ES6/TS runtime, SSR, auth and admin UI built on Rust, SQLite &amp;amp; V8. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; Simplify with fewer moving parts: an easy to self-host, single-executable, extensible backend for your mobile, web or desktop application. Sub-millisecond latencies eliminate the need for dedicated caches, no more stale or inconsistent data. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; &lt;a href="https://github.com/trailbaseio/trailbase/stargazers/"&gt; &lt;img src="https://img.shields.io/github/stars/trailbaseio/trailbase?style=social&amp;amp;label=Star"&gt; &lt;/a&gt; &lt;a href="https://github.com/trailbaseio/trailbase/actions?query=branch%3Amain"&gt; &lt;img src="https://github.com/trailbaseio/trailbase/actions/workflows/test.yml/badge.svg?branch=main" alt="Build Status"&gt; &lt;/a&gt; &lt;a href="https://github.com/trailbaseio/trailbase/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/badge/license-OSL_3.0-blue" alt="License - OSL 3.0"&gt; &lt;/a&gt; &lt;a href="https://trailbase.io/reference/roadmap/"&gt; &lt;img src="https://img.shields.io/badge/status-alpha-orange" alt="Status - Alpha"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;TrailBase&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;a href="https://demo.trailbase.io/_/admin?loginMessage=E-mail:%20admin@localhost%20%E2%80%A2%20Password:%20secret" target="_blank"&gt; 
  &lt;picture&gt; 
   &lt;img alt="Admin UI" width="600" src="https://raw.githubusercontent.com/trailbaseio/trailbase/main/docs/src/assets/shelve.webp"&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt; Try the &lt;a href="https://demo.trailbase.io/_/admin?loginMessage=E-mail:%20admin@localhost%20%E2%80%A2%20Password:%20secret" target="_blank"&gt; demo &lt;/a&gt; online &lt;/strong&gt; &lt;br&gt;Email: &lt;em&gt;admin@localhost&lt;/em&gt; &lt;br&gt;password: &lt;em&gt;secret&lt;/em&gt; &lt;/p&gt; 
&lt;p&gt;For more context, documentation, and a live demo, check out the website: &lt;a href="https://trailbase.io"&gt;trailbase.io&lt;/a&gt;. Questions? Thoughts? - Take a look at the &lt;a href="https://trailbase.io/reference/faq/"&gt;FAQ&lt;/a&gt; or reach out. If you like TrailBase or want to follow along, consider leaving a ⭐🙏.&lt;/p&gt; 
&lt;h2&gt;Project Structure &amp;amp; Releases&lt;/h2&gt; 
&lt;p&gt;This repository contains all components that make up TrailBase including the server, client libraries, tests, documentation and examples. Only the &lt;a href="https://github.com/trailbaseio/trailbase-benchmark"&gt;benchmarks&lt;/a&gt; are kept separately due to their external dependencies.&lt;/p&gt; 
&lt;p&gt;Pre-built static binaries are available as &lt;a href="https://github.com/trailbaseio/trailbase/releases/"&gt;GitHub releases&lt;/a&gt; for Linux, MacOS and Windows or &lt;a href="https://hub.docker.com/r/trailbase/trailbase"&gt;Docker images&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Client packages for various languages are available via:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.npmjs.com/package/trailbase"&gt;JavaScript/TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pub.dev/packages/trailbase"&gt;Dart/Flutter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/trailbase-client"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.nuget.org/packages/TrailBase/"&gt;C#/.Net&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trailbaseio/trailbase/tree/main/client/swift/trailbase"&gt;Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trailbaseio/trailbase/tree/main/client/go/trailbase"&gt;Go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/trailbase/"&gt;Python&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;TrailBase is a &lt;strong&gt;single static executable&lt;/strong&gt; and therefore very easy to &lt;a href="https://trailbase.io/getting-started/install/"&gt;deploy&lt;/a&gt;. You can simply download the appropriate pre-built &lt;a href="https://github.com/trailbaseio/trailbase/releases/"&gt;GitHub release&lt;/a&gt; bundle for your system (MacOS, Linux or Windows), unpack and run the executable w/o having to worry about dependencies or shared-library skew.&lt;/p&gt; 
&lt;p&gt;If you want to get started even quicker, install TrailBase with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Linux &amp;amp; MacOS
curl -sSL https://trailbase.io/install.sh | bash

# Windows
iwr https://trailbase.io/install.ps1 | iex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, run TrailBase using the Docker image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;alias trail='
  mkdir -p traildepot &amp;amp;&amp;amp; \
  docker run \
      --network host \
      --mount type=bind,source="$PWD"/traildepot,target=/app/traildepot \
      trailbase/trailbase /app/trail'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then execute &lt;code&gt;trail help&lt;/code&gt; to check that it is properly installed and list all available command line options.&lt;/p&gt; 
&lt;p&gt;To bring up the server on &lt;code&gt;localhost:4000&lt;/code&gt;, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;trail run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On first start, a &lt;code&gt;./traildepot&lt;/code&gt; folder will be bootstrapped, an admin user created and their credentials printed to the terminal. Afterwards open &lt;a href="http://localhost:4000/_/admin/"&gt;http://localhost:4000/_/admin/&lt;/a&gt; in your browser and use the credentials to log into the admin dashboard.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;If you have all the necessary build dependencies (Rust, protobuf, node.js, pnpm) installed, you can build TrailBase by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Windows only: make sure to enable symlinks (w/o `mklink` permissions for your
# user, git will fall back to copies).
git config core.symlinks true &amp;amp;&amp;amp; git reset --hard

# Download necessary git sub-modules.
git submodule update --init --recursive

# Install Javascript dependencies first. Required for the next step.
pnpm install

# Build the executable. Adding `--release` will yield a more optimized binary
# but slow builds significantly.
cargo build --bin trail
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build a static binary you'll need to explicitly specify the target platform, e.g. Linux with GNU glibc:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;RUSTFLAGS="-C target-feature=+crt-static" cargo build --target x86_64-unknown-linux-gnu --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if you want to build a Docker image or don't have to deal with build dependencies, you can simply run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Download necessary git sub-modules.
git submodule update --init --recursive

# Build the container as defined in `Dockerfile`.
docker build . -t trailbase
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are very much appreciated 🙏. For anything beyond bug fixes, let's briefly chat to see how a proposal fits into the overall roadmap and avoid any surprises.&lt;/p&gt; 
&lt;p&gt;We're not sure yet what the best setup or exact license is for compatibility between OSL-3.0 and more popular licenses or use as a framework. So we'd ask you to sign a simple CLA that retains your copyright, ensures that TrailBase will continue to forever be freely available under an OSI-approved copyleft license, while allowing for some flexibility and sub-licensing as established by much larger, successful projects such as Grafana or Element.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;TrailBase is free software under the terms of the &lt;a href="https://opensource.org/licenses/OSL-3.0"&gt;Open Software License 3.0 (OSL-3.0)&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We chose the OSL-3.0 over other, better known copyleft licenses due to its narrower definition of "derivative work" that &lt;strong&gt;only&lt;/strong&gt; covers modifications to TrailBase itself. This means that your application's original code is &lt;strong&gt;not&lt;/strong&gt; subject to the OSL-3.0's copyleft provisions. This is true whether you connect over the network (e.g. web, mobile, other services, etc.), you're serving static assets, using the runtime to write custom server-side logic or using TrailBase as a framework.&lt;/p&gt; 
&lt;p&gt;This limited scope is similar to the GPL's classpath or the LGPL's &lt;a href="https://en.wikipedia.org/wiki/GPL_linking_exception"&gt;linking exception&lt;/a&gt;. The goal is to allow building on top and around of TrailBase without any provisions rubbing off onto your original work, while making sure that fixes and improvements find their way back to the community. These are our intentions - we felt the need to spell them out explicitly because licensing is tricky and we ain't lawyers. Graciously, the license's author provides some more &lt;a href="https://rosenlaw.com/OSL3.0-explained.htm"&gt;explanations&lt;/a&gt;. If you have any concerns, please reach out.&lt;/p&gt; 
&lt;p&gt;If you require an &lt;a href="https://www.gnu.org/philosophy/selling-exceptions.html"&gt;exception&lt;/a&gt;, reach out to &lt;a href="mailto:contact@trailbase.io"&gt;contact@trailbase.io&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qdrant/qdrant</title>
      <link>https://github.com/qdrant/qdrant</link>
      <description>&lt;p&gt;Qdrant - High-performance, massive-scale Vector Database and Vector Search Engine for the next generation of AI. Also available in the cloud https://cloud.qdrant.io/&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/qdrant/qdrant/raw/master/docs/logo-dark.svg"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/qdrant/qdrant/raw/master/docs/logo-light.svg"&gt; 
  &lt;img height="100" alt="Qdrant" src="https://github.com/qdrant/qdrant/raw/master/docs/logo.svg?sanitize=true"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;Vector Search Engine for the next generation of AI applications&lt;/b&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/qdrant/qdrant/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/qdrant/qdrant/rust.yml?style=flat-square" alt="Tests status"&gt;&lt;/a&gt; &lt;a href="https://api.qdrant.tech/"&gt;&lt;img src="https://img.shields.io/badge/Docs-OpenAPI%203.0-success?style=flat-square" alt="OpenAPI Docs"&gt;&lt;/a&gt; &lt;a href="https://github.com/qdrant/qdrant/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/qdrant/qdrant?style=flat-square" alt="Apache 2.0 License"&gt;&lt;/a&gt; &lt;a href="https://qdrant.to/discord"&gt;&lt;img src="https://img.shields.io/discord/907569970500743200?logo=Discord&amp;amp;style=flat-square&amp;amp;color=7289da" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://qdrant.to/roadmap"&gt;&lt;img src="https://img.shields.io/badge/Roadmap-2025-bc1439.svg?style=flat-square" alt="Roadmap 2025"&gt;&lt;/a&gt; &lt;a href="https://cloud.qdrant.io/"&gt;&lt;img src="https://img.shields.io/badge/Qdrant-Cloud-24386C.svg?logo=cloud&amp;amp;style=flat-square" alt="Qdrant Cloud"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Qdrant&lt;/strong&gt; (read: &lt;em&gt;quadrant&lt;/em&gt;) is a vector similarity search engine and vector database. It provides a production-ready service with a convenient API to store, search, and manage points—vectors with an additional payload Qdrant is tailored to extended filtering support. It makes it useful for all sorts of neural-network or semantic-based matching, faceted search, and other applications.&lt;/p&gt; 
&lt;p&gt;Qdrant is written in Rust 🦀, which makes it fast and reliable even under high load. See &lt;a href="https://qdrant.tech/benchmarks/"&gt;benchmarks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!&lt;/p&gt; 
&lt;p&gt;Qdrant is also available as a fully managed &lt;strong&gt;&lt;a href="https://cloud.qdrant.io/"&gt;Qdrant Cloud&lt;/a&gt;&lt;/strong&gt; ⛅ including a &lt;strong&gt;free tier&lt;/strong&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md"&gt;Quick Start&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#clients"&gt;Client Libraries&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#demo-projects"&gt;Demo Projects&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#integrations"&gt;Integrations&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#contacts"&gt;Contact&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;pip install qdrant-client
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The python client offers a convenient way to start with Qdrant locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from qdrant_client import QdrantClient
qdrant = QdrantClient(":memory:") # Create in-memory Qdrant instance, for testing, CI/CD
# OR
client = QdrantClient(path="path/to/db")  # Persists changes to disk, fast prototyping
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Client-Server&lt;/h3&gt; 
&lt;p&gt;To experience the full power of Qdrant locally, run the container with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -p 6333:6333 qdrant/qdrant
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can connect to this with any client, including Python:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;qdrant = QdrantClient("http://localhost:6333") # Connect to existing Qdrant instance
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Before deploying Qdrant to production, be sure to read our &lt;a href="https://qdrant.tech/documentation/guides/installation/"&gt;installation&lt;/a&gt; and &lt;a href="https://qdrant.tech/documentation/guides/security/"&gt;security&lt;/a&gt; guides.&lt;/p&gt; 
&lt;h3&gt;Clients&lt;/h3&gt; 
&lt;p&gt;Qdrant offers the following client libraries to help you integrate it into your application stack with ease:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/go-client"&gt;Go client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/rust-client"&gt;Rust client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-js"&gt;JavaScript/TypeScript client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-client"&gt;Python client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-dotnet"&gt;.NET/C# client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/java-client"&gt;Java client&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Community: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://hexdocs.pm/qdrant/readme.html"&gt;Elixir&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hkulekci/qdrant-php"&gt;PHP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/andreibondarev/qdrant-ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/metaloom/qdrant-java-client"&gt;Java&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Where do I go from here?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md"&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;End to End &lt;a href="https://colab.research.google.com/drive/1Bz8RSVHwnNDaNtDwotfPj0w7AYzsdXZ-?usp=sharing"&gt;Colab Notebook&lt;/a&gt; demo with SentenceBERT and Qdrant&lt;/li&gt; 
 &lt;li&gt;Detailed &lt;a href="https://qdrant.tech/documentation/"&gt;Documentation&lt;/a&gt; are great starting points&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://qdrant.to/qdrant-tutorial"&gt;Step-by-Step Tutorial&lt;/a&gt; to create your first neural network project with Qdrant&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo Projects &lt;a href="https://replit.com/@qdrant"&gt;&lt;img align="right" src="https://replit.com/badge/github/qdrant/qdrant" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Discover Semantic Text Search 🔍&lt;/h3&gt; 
&lt;p&gt;Unlock the power of semantic embeddings with Qdrant, transcending keyword-based search to find meaningful connections in short texts. Deploy a neural search in minutes using a pre-trained neural network, and experience the future of text search. &lt;a href="https://qdrant.to/semantic-search-demo"&gt;Try it online!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Explore Similar Image Search - Food Discovery 🍕&lt;/h3&gt; 
&lt;p&gt;There's more to discovery than text search, especially when it comes to food. People often choose meals based on appearance rather than descriptions and ingredients. Let Qdrant help your users find their next delicious meal using visual search, even if they don't know the dish's name. &lt;a href="https://qdrant.to/food-discovery"&gt;Check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Master Extreme Classification - E-commerce Product Categorization 📺&lt;/h3&gt; 
&lt;p&gt;Enter the cutting-edge realm of extreme classification, an emerging machine learning field tackling multi-class and multi-label problems with millions of labels. Harness the potential of similarity learning models, and see how a pre-trained transformer model and Qdrant can revolutionize e-commerce product categorization. &lt;a href="https://qdrant.to/extreme-classification-demo"&gt;Play with it online!&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; More solutions &lt;/summary&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/text_search.png"&gt; &lt;/td&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/image_search.png"&gt; &lt;/td&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/recommendations.png"&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Semantic Text Search &lt;/td&gt; 
    &lt;td&gt; Similar Image Search &lt;/td&gt; 
    &lt;td&gt; Recommendations &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/chat_bots.png"&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/matching_engines.png"&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/anomalies_detection.png"&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Chat Bots &lt;/td&gt; 
    &lt;td&gt; Matching Engines &lt;/td&gt; 
    &lt;td&gt; Anomaly Detection &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;REST&lt;/h3&gt; 
&lt;p&gt;Online OpenAPI 3.0 documentation is available &lt;a href="https://api.qdrant.tech/"&gt;here&lt;/a&gt;. OpenAPI makes it easy to generate a client for virtually any framework or programming language.&lt;/p&gt; 
&lt;p&gt;You can also download raw OpenAPI &lt;a href="https://github.com/qdrant/qdrant/raw/master/docs/redoc/master/openapi.json"&gt;definitions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;gRPC&lt;/h3&gt; 
&lt;p&gt;For faster production-tier searches, Qdrant also provides a gRPC interface. You can find gRPC documentation &lt;a href="https://qdrant.tech/documentation/interfaces/#grpc-interface"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Filtering and Payload&lt;/h3&gt; 
&lt;p&gt;Qdrant can attach any JSON payloads to vectors, allowing for both the storage and filtering of data based on the values in these payloads. Payload supports a wide range of data types and query conditions, including keyword matching, full-text filtering, numerical ranges, geo-locations, and more.&lt;/p&gt; 
&lt;p&gt;Filtering conditions can be combined in various ways, including &lt;code&gt;should&lt;/code&gt;, &lt;code&gt;must&lt;/code&gt;, and &lt;code&gt;must_not&lt;/code&gt; clauses, ensuring that you can implement any desired business logic on top of similarity matching.&lt;/p&gt; 
&lt;h3&gt;Hybrid Search with Sparse Vectors&lt;/h3&gt; 
&lt;p&gt;To address the limitations of vector embeddings when searching for specific keywords, Qdrant introduces support for sparse vectors in addition to the regular dense ones.&lt;/p&gt; 
&lt;p&gt;Sparse vectors can be viewed as an generalization of BM25 or TF-IDF ranking. They enable you to harness the capabilities of transformer-based neural networks to weigh individual tokens effectively.&lt;/p&gt; 
&lt;h3&gt;Vector Quantization and On-Disk Storage&lt;/h3&gt; 
&lt;p&gt;Qdrant provides multiple options to make vector search cheaper and more resource-efficient. Built-in vector quantization reduces RAM usage by up to 97% and dynamically manages the trade-off between search speed and precision.&lt;/p&gt; 
&lt;h3&gt;Distributed Deployment&lt;/h3&gt; 
&lt;p&gt;Qdrant offers comprehensive horizontal scaling support through two key mechanisms:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Size expansion via sharding and throughput enhancement via replication&lt;/li&gt; 
 &lt;li&gt;Zero-downtime rolling updates and seamless dynamic scaling of the collections&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Highlighted Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Query Planning and Payload Indexes&lt;/strong&gt; - leverages stored payload information to optimize query execution strategy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SIMD Hardware Acceleration&lt;/strong&gt; - utilizes modern CPU x86-x64 and Neon architectures to deliver better performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Async I/O&lt;/strong&gt; - uses &lt;code&gt;io_uring&lt;/code&gt; to maximize disk throughput utilization even on a network-attached storage.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Write-Ahead Logging&lt;/strong&gt; - ensures data persistence with update confirmation, even during power outages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Integrations&lt;/h1&gt; 
&lt;p&gt;Examples and/or documentation of Qdrant integrations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.cohere.com/docs/qdrant-and-cohere"&gt;Cohere&lt;/a&gt; (&lt;a href="https://qdrant.tech/articles/qa-with-cohere-and-qdrant/"&gt;blogpost on building a QA app with Cohere and Qdrant&lt;/a&gt;) - Use Cohere embeddings with Qdrant&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docarray.org/user_guide/storing/index_qdrant/"&gt;DocArray&lt;/a&gt; - Use Qdrant as a document store in DocArray&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://haystack.deepset.ai/integrations/qdrant-document-store"&gt;Haystack&lt;/a&gt; - Use Qdrant as a document store with Haystack (&lt;a href="https://haystack.deepset.ai/blog/qdrant-integration"&gt;blogpost&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://python.langchain.com/docs/integrations/providers/qdrant/"&gt;LangChain&lt;/a&gt; (&lt;a href="https://qdrant.tech/articles/langchain-integration/"&gt;blogpost&lt;/a&gt;) - Use Qdrant as a memory backend for LangChain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gpt-index.readthedocs.io/en/latest/examples/vector_stores/QdrantIndexDemo.html"&gt;LlamaIndex&lt;/a&gt; - Use Qdrant as a Vector Store with LlamaIndex.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openai/chatgpt-retrieval-plugin/raw/main/docs/providers/qdrant/setup.md"&gt;OpenAI - ChatGPT retrieval plugin&lt;/a&gt; - Use Qdrant as a memory backend for ChatGPT&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devblogs.microsoft.com/semantic-kernel/the-power-of-persistent-memory-with-semantic-kernel-and-qdrant-vector-database/"&gt;Microsoft Semantic Kernel&lt;/a&gt; - Use Qdrant as persistent memory with Semantic Kernel&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contacts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Have questions? Join our &lt;a href="https://qdrant.to/discord"&gt;Discord channel&lt;/a&gt; or mention &lt;a href="https://qdrant.to/twitter"&gt;@qdrant_engine on Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Want to stay in touch with latest releases? Subscribe to our &lt;a href="https://qdrant.tech/subscribe/"&gt;Newsletters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Looking for a managed cloud? Check &lt;a href="https://qdrant.tech/pricing/"&gt;pricing&lt;/a&gt;, need something personalised? We're at &lt;a href="mailto:info@qdrant.tech"&gt;info@qdrant.tech&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Qdrant is licensed under the Apache License, Version 2.0. View a copy of the &lt;a href="https://github.com/qdrant/qdrant/raw/master/LICENSE"&gt;License file&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>seanmonstar/warp</title>
      <link>https://github.com/seanmonstar/warp</link>
      <description>&lt;p&gt;A super-easy, composable, web server framework for warp speeds.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;warp&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/warp"&gt;&lt;img src="https://img.shields.io/crates/v/warp.svg?sanitize=true" alt="crates.io"&gt;&lt;/a&gt; &lt;a href="https://docs.rs/warp"&gt;&lt;img src="https://docs.rs/warp/badge.svg?sanitize=true" alt="Released API docs"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/seanmonstar/warp/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed"&gt;&lt;/a&gt; &lt;a href="https://github.com/seanmonstar/warp/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/seanmonstar/warp/workflows/CI/badge.svg?sanitize=true" alt="GHA Build Status"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/RFsPjyt"&gt;&lt;img src="https://img.shields.io/discord/500028886025895936.svg?logo=discord" alt="Discord chat"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A super-easy, composable, web server framework for warp speeds.&lt;/p&gt; 
&lt;p&gt;The fundamental building block of &lt;code&gt;warp&lt;/code&gt; is the &lt;code&gt;Filter&lt;/code&gt;: they can be combined and composed to express rich requirements on requests.&lt;/p&gt; 
&lt;p&gt;Thanks to its &lt;code&gt;Filter&lt;/code&gt; system, warp provides these out of the box:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Path routing and parameter extraction&lt;/li&gt; 
 &lt;li&gt;Header requirements and extraction&lt;/li&gt; 
 &lt;li&gt;Query string deserialization&lt;/li&gt; 
 &lt;li&gt;JSON and Form bodies&lt;/li&gt; 
 &lt;li&gt;Multipart form data&lt;/li&gt; 
 &lt;li&gt;Static Files and Directories&lt;/li&gt; 
 &lt;li&gt;Websockets&lt;/li&gt; 
 &lt;li&gt;Access logging&lt;/li&gt; 
 &lt;li&gt;Gzip, Deflate, and Brotli compression&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Since it builds on top of &lt;a href="https://hyper.rs"&gt;hyper&lt;/a&gt;, you automatically get:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HTTP/1&lt;/li&gt; 
 &lt;li&gt;HTTP/2&lt;/li&gt; 
 &lt;li&gt;Asynchronous&lt;/li&gt; 
 &lt;li&gt;One of the fastest HTTP implementations&lt;/li&gt; 
 &lt;li&gt;Tested and &lt;strong&gt;correct&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;Add warp and Tokio to your dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;tokio = { version = "1", features = ["full"] }
warp = { version = "0.4", features = ["server"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then get started in your &lt;code&gt;main.rs&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use warp::Filter;

#[tokio::main]
async fn main() {
    // GET /hello/warp =&amp;gt; 200 OK with body "Hello, warp!"
    let hello = warp::path!("hello" / String)
        .map(|name| format!("Hello, {}!", name));

    warp::serve(hello)
        .run(([127, 0, 0, 1], 3030))
        .await;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information you can check the &lt;a href="https://docs.rs/warp"&gt;docs&lt;/a&gt; or the &lt;a href="https://github.com/seanmonstar/warp/tree/master/examples"&gt;examples&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rerun-io/rerun</title>
      <link>https://github.com/rerun-io/rerun</link>
      <description>&lt;p&gt;Visualize streams of multimodal data. Free, fast, easy to use, and simple to integrate. Built in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://www.rerun.io/"&gt; &lt;img alt="banner" src="https://user-images.githubusercontent.com/1148717/218142418-1d320929-6b7a-486e-8277-fbeef2432529.png"&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;h1 align="center"&gt; &lt;a href="https://pypi.org/project/rerun-sdk/"&gt; &lt;img alt="PyPi" src="https://img.shields.io/pypi/v/rerun-sdk.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://crates.io/crates/rerun"&gt; &lt;img alt="crates.io" src="https://img.shields.io/crates/v/rerun.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://github.com/rerun-io/rerun/raw/main/LICENSE-MIT"&gt; &lt;img alt="MIT" src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://github.com/rerun-io/rerun/raw/main/LICENSE-APACHE"&gt; &lt;img alt="Apache" src="https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://discord.gg/Gcm8BbTaAj"&gt; &lt;img alt="Rerun Discord" src="https://img.shields.io/discord/1062300748202921994?label=Rerun%20Discord"&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;h1&gt;Time-aware multimodal data stack and visualizations&lt;/h1&gt; 
&lt;p&gt;Rerun is building the multimodal data stack to model, ingest, store, query and view robotics-style data. It's used in areas like robotics, spatial and embodied AI, generative media, industrial processing, simulation, security, and health.&lt;/p&gt; 
&lt;p&gt;Rerun is easy to use! Use the Rerun SDK (available for C++, Python and Rust) to log data like images, tensors, point clouds, and text. Logs are streamed to the Rerun Viewer for live visualization or to file for later use. You can also query the logged data through &lt;a href="https://rerun.io/docs/howto/dataframe-api"&gt;our dataframe API&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/#getting-started"&gt;Get started&lt;/a&gt; in minutes – no account needed.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/viewer"&gt;Run the Rerun Viewer in your browser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/docs/getting-started/what-is-rerun"&gt;Read about what Rerun is and who it is for&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;A short taste&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;import rerun as rr  # pip install rerun-sdk

rr.init("rerun_example_app")

rr.spawn()  # Spawn a child process with a viewer and connect
# rr.save("recording.rrd")  # Stream all logs to disk
# rr.connect_grpc()  # Connect to a remote viewer

# Associate subsequent data with 42 on the “frame” timeline
rr.set_time("frame", sequence=42)

# Log colored 3D points to the entity at `path/to/points`
rr.log("path/to/points", rr.Points3D(positions, colors=colors))
…
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;img src="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/full.png" alt=""&gt; 
  &lt;source media="(max-width: 480px)" srcset="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/480w.png"&gt; 
  &lt;source media="(max-width: 768px)" srcset="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/768w.png"&gt; 
  &lt;source media="(max-width: 1024px)" srcset="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/1024w.png"&gt; 
  &lt;source media="(max-width: 1200px)" srcset="https://static.rerun.io/opf_screenshot/bee51040cba93c0bae62ef6c57fa703704012a41/1200w.png"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/docs/getting-started/quick-start/cpp"&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/docs/getting-started/quick-start/python"&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/a&gt;: &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or on &lt;a href="https://github.com/conda-forge/rerun-sdk-feedstock"&gt;&lt;code&gt;conda&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.rerun.io/docs/getting-started/quick-start/rust"&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/a&gt;: &lt;code&gt;cargo add rerun&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installing the Rerun Viewer binary&lt;/h3&gt; 
&lt;p&gt;To stream log data over the network or load our &lt;code&gt;.rrd&lt;/code&gt; data files you also need the &lt;code&gt;rerun&lt;/code&gt; binary. It can be installed with &lt;code&gt;pip install rerun-sdk&lt;/code&gt; or with &lt;code&gt;cargo install rerun-cli --locked --features nasm&lt;/code&gt; (see note below). Note that only the Python SDK comes bundled with the Viewer whereas C++ &amp;amp; Rust always rely on a separate install.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;nasm&lt;/code&gt; Cargo feature requires the &lt;a href="https://github.com/netwide-assembler/nasm"&gt;&lt;code&gt;nasm&lt;/code&gt;&lt;/a&gt; CLI to be installed and available in your path. Alternatively, you may skip enabling this feature, but this may result in inferior video decoding performance.&lt;/p&gt; 
&lt;p&gt;You should now be able to run &lt;code&gt;rerun --help&lt;/code&gt; in any terminal.&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📚 &lt;a href="http://rerun.io/docs"&gt;High-level docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⏃ &lt;a href="https://www.rerun.io/docs/reference/types"&gt;Loggable Types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⚙️ &lt;a href="http://rerun.io/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📖 &lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/docs/snippets/INDEX.md"&gt;Code snippets&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌊 &lt;a href="https://ref.rerun.io/docs/cpp"&gt;C++ API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🐍 &lt;a href="https://ref.rerun.io/docs/python"&gt;Python API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🦀 &lt;a href="https://docs.rs/rerun/"&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⁉️ &lt;a href="https://www.rerun.io/docs/getting-started/troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;We are in active development. There are many features we want to add, and the API is still evolving. &lt;em&gt;Expect breaking changes!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Some shortcomings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rerun-io/rerun/issues/7115"&gt;The viewer slows down when there are too many entities&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rerun-io/rerun/issues/1611"&gt;We don't support transparency yet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The data you want to visualize must fit in RAM 
  &lt;ul&gt; 
   &lt;li&gt;See &lt;a href="https://www.rerun.io/docs/howto/limit-ram"&gt;https://www.rerun.io/docs/howto/limit-ram&lt;/a&gt; for how to bound memory use.&lt;/li&gt; 
   &lt;li&gt;We plan on having a disk-based data store some time in the future.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rerun-io/rerun/issues/1136"&gt;Multi-million point clouds can be slow&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is Rerun for?&lt;/h2&gt; 
&lt;p&gt;Rerun is built to help you understand and improve complex processes that include rich multimodal data, like 2D, 3D, text, time series, tensors, etc. It is used in many industries, including robotics, simulation, computer vision, or anything that involves a lot of sensors or other signals that evolve over time.&lt;/p&gt; 
&lt;h3&gt;Example use case&lt;/h3&gt; 
&lt;p&gt;Say you're building a vacuum cleaning robot and it keeps running into walls. Why is it doing that? You need some tool to debug it, but a normal debugger isn't gonna be helpful. Similarly, just logging text won't be very helpful either. The robot may log "Going through doorway" but that won't explain why it thinks the wall is a door.&lt;/p&gt; 
&lt;p&gt;What you need is a visual and temporal debugger, that can log all the different representations of the world the robots holds in its little head, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RGB camera feed&lt;/li&gt; 
 &lt;li&gt;depth images&lt;/li&gt; 
 &lt;li&gt;lidar scan&lt;/li&gt; 
 &lt;li&gt;segmentation image (how the robot interprets what it sees)&lt;/li&gt; 
 &lt;li&gt;its 3D map of the apartment&lt;/li&gt; 
 &lt;li&gt;all the objects the robot has detected (or thinks it has detected), as 3D shapes in the 3D map&lt;/li&gt; 
 &lt;li&gt;its confidence in its prediction&lt;/li&gt; 
 &lt;li&gt;etc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You also want to see how all these streams of data evolve over time so you can go back and pinpoint exactly what went wrong, when and why.&lt;/p&gt; 
&lt;p&gt;Maybe it turns out that a glare from the sun hit one of the sensors in the wrong way, confusing the segmentation network leading to bad object detection. Or maybe it was a bug in the lidar scanning code. Or maybe the robot thought it was somewhere else in the apartment, because its odometry was broken. Or it could be one of a thousand other things. Rerun will help you find out!&lt;/p&gt; 
&lt;p&gt;But seeing the world from the point of the view of the robot is not just for debugging - it will also give you ideas on how to improve the algorithms, new test cases to set up, or datasets to collect. It will also let you explain the brains of the robot to your colleagues, boss, and customers. And so on. Seeing is believing, and an image is worth a thousand words, and multimodal temporal logging is worth a thousand images :)&lt;/p&gt; 
&lt;p&gt;While seeing and understanding your data is core to making progress in robotics, there is one more thing: You can also use the data you collected for visualization to create new datasets for training and evaluating the models and algorithms that run on your robot. Rerun provides query APIs to make it easy to extract clean datasets from your recording for exactly that purpose.&lt;/p&gt; 
&lt;p&gt;Of course, Rerun is useful for much more than just robots. Any time you have any form of sensors, or 2D or 3D state evolving over time, Rerun is a great tool.&lt;/p&gt; 
&lt;h2&gt;Business model&lt;/h2&gt; 
&lt;p&gt;Rerun uses an open-core model. Everything in this repository will stay open source and free (both as in beer and as in freedom).&lt;/p&gt; 
&lt;p&gt;We are also building a commercial data platform. Right now that is only available for a few select design partners. &lt;a href="https://rerun.io/pricing"&gt;Click here if you're interested&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Rerun open source project targets the needs of individual developers. The commercial product targets the needs specific to teams that build and run computer vision and robotics products.&lt;/p&gt; 
&lt;h2&gt;How to cite Rerun&lt;/h2&gt; 
&lt;p&gt;When using Rerun in your research, please cite it to acknowledge its contribution to your work. This can be done by including a reference to Rerun in the software or methods section of your paper.&lt;/p&gt; 
&lt;p&gt;Suggested citation format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{RerunSDK,
  title = {Rerun: A Visualization SDK for Multimodal Data},
  author = {{Rerun Development Team}},
  url = {https://www.rerun.io},
  version = {insert version number},
  date = {insert date of usage},
  year = {2024},
  publisher = {{Rerun Technologies AB}},
  address = {Online},
  note = {Available from https://www.rerun.io/ and https://github.com/rerun-io/rerun}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please replace "insert version number" with the version of Rerun you used and "insert date of usage" with the date(s) you used the tool in your research. This citation format helps ensure that Rerun's development team receives appropriate credit for their work and facilitates the tool's discovery by other researchers.&lt;/p&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/ARCHITECTURE.md"&gt;&lt;code&gt;ARCHITECTURE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_OF_CONDUCT.md"&gt;&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/CODE_STYLE.md"&gt;&lt;code&gt;CODE_STYLE.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/BUILD.md"&gt;&lt;code&gt;BUILD.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/rerun_py/README.md"&gt;&lt;code&gt;rerun_py/README.md&lt;/code&gt;&lt;/a&gt; - instructions for Python SDK&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rerun-io/rerun/main/rerun_cpp/README.md"&gt;&lt;code&gt;rerun_cpp/README.md&lt;/code&gt;&lt;/a&gt; - instructions for C++ SDK&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installing a pre-release Python SDK&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the correct &lt;code&gt;.whl&lt;/code&gt; from &lt;a href="https://github.com/rerun-io/rerun/releases"&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;pip install rerun_sdk&amp;lt;…&amp;gt;.whl&lt;/code&gt; (replace &lt;code&gt;&amp;lt;…&amp;gt;&lt;/code&gt; with the actual filename)&lt;/li&gt; 
 &lt;li&gt;Test it: &lt;code&gt;rerun --version&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>vectordotdev/vector</title>
      <link>https://github.com/vectordotdev/vector</link>
      <description>&lt;p&gt;A high-performance observability data pipeline.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/vectordotdev/vector/actions/workflows/nightly.yml"&gt;&lt;img src="https://github.com/vectordotdev/vector/actions/workflows/nightly.yml/badge.svg?sanitize=true" alt="Nightly"&gt;&lt;/a&gt; &lt;a href="https://github.com/vectordotdev/vector/actions/workflows/e2e.yml"&gt;&lt;img src="https://github.com/vectordotdev/vector/actions/workflows/e2e.yml/badge.svg?sanitize=true" alt="E2E Test Suite"&gt;&lt;/a&gt; &lt;a href="https://github.com/vectordotdev/vector/actions/workflows/component_features.yml"&gt;&lt;img src="https://github.com/vectordotdev/vector/actions/workflows/component_features.yml/badge.svg?sanitize=true" alt="Component Features"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/vectordotdev/vector/master/website/static/img/diagram.svg?sanitize=true" alt="Vector"&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://vector.dev/docs/setup/quickstart/"&gt;Quickstart&lt;/a&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://vector.dev/docs/"&gt;Docs&lt;/a&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://vector.dev/guides/"&gt;Guides&lt;/a&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://vector.dev/components/"&gt;Integrations&lt;/a&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://chat.vector.dev"&gt;Chat&lt;/a&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://vector.dev/releases/latest/download/"&gt;Download&lt;/a&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://rust-doc.vector.dev/"&gt;Rust Crate Docs&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;h2&gt;What is Vector?&lt;/h2&gt; 
&lt;p&gt;Vector is a high-performance, end-to-end (agent &amp;amp; aggregator) observability data pipeline that puts you in control of your observability data. &lt;a href="https://vector.dev/docs/reference/configuration/sources/"&gt;Collect&lt;/a&gt;, &lt;a href="https://vector.dev/docs/reference/configuration/transforms/"&gt;transform&lt;/a&gt;, and &lt;a href="https://vector.dev/docs/reference/configuration/sinks/"&gt;route&lt;/a&gt; all your logs and metrics to any vendors you want today and any other vendors you may want tomorrow. Vector enables dramatic cost reduction, novel data enrichment, and data security where you need it, not where it is most convenient for your vendors. Additionally, it is open source and up to 10x faster than every alternative in the space.&lt;/p&gt; 
&lt;p&gt;To get started, follow our &lt;a href="https://vector.dev/docs/setup/quickstart/"&gt;&lt;strong&gt;quickstart guide&lt;/strong&gt;&lt;/a&gt; or &lt;a href="https://vector.dev/docs/setup/installation/"&gt;&lt;strong&gt;install Vector&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Vector is maintained by Datadog's &lt;a href="https://opensource.datadoghq.com/about/#the-community-open-source-engineering-team"&gt;Community Open Source Engineering team&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Principles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt; - Built in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;, Vector's primary design goal is reliability.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;End-to-end&lt;/strong&gt; - Deploys as an &lt;a href="https://vector.dev/docs/setup/deployment/roles/#agent"&gt;agent&lt;/a&gt; or &lt;a href="https://vector.dev/docs/setup/deployment/roles/#aggregator"&gt;aggregator&lt;/a&gt;. Vector is a complete platform.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Unified&lt;/strong&gt; - &lt;a href="https://vector.dev/docs/architecture/data-model/log/"&gt;Logs&lt;/a&gt;, &lt;a href="https://vector.dev/docs/architecture/data-model/metric/"&gt;metrics&lt;/a&gt; (beta), and traces (coming soon). One tool for all of your data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Use cases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Reduce total observability costs.&lt;/li&gt; 
 &lt;li&gt;Transition vendors without disrupting workflows.&lt;/li&gt; 
 &lt;li&gt;Enhance data quality and improve insights.&lt;/li&gt; 
 &lt;li&gt;Consolidate agents and eliminate agent fatigue.&lt;/li&gt; 
 &lt;li&gt;Improve overall observability performance and reliability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vector is relied on by startups and enterprises like &lt;strong&gt;Atlassian&lt;/strong&gt;, &lt;strong&gt;T-Mobile&lt;/strong&gt;, &lt;strong&gt;Comcast&lt;/strong&gt;, &lt;strong&gt;Zendesk&lt;/strong&gt;, &lt;strong&gt;Discord&lt;/strong&gt;, &lt;strong&gt;Fastly&lt;/strong&gt;, &lt;strong&gt;CVS&lt;/strong&gt;, &lt;strong&gt;Trivago&lt;/strong&gt;, &lt;strong&gt;Tuple&lt;/strong&gt;, &lt;strong&gt;Douban&lt;/strong&gt;, &lt;strong&gt;Visa&lt;/strong&gt;, &lt;strong&gt;Mambu&lt;/strong&gt;, &lt;strong&gt;Blockfi&lt;/strong&gt;, &lt;strong&gt;Claranet&lt;/strong&gt;, &lt;strong&gt;Instacart&lt;/strong&gt;, &lt;strong&gt;Forcepoint&lt;/strong&gt;, and &lt;a href="https://github.com/vectordotdev/vector/issues/790"&gt;many more&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Vector is &lt;strong&gt;downloaded over 100,000 times per day&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Vector's largest user &lt;strong&gt;processes over 500TB daily&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Vector has &lt;strong&gt;over 500 contributors&lt;/strong&gt; and growing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;All user documentation is available at &lt;strong&gt;&lt;a href="https://vector.dev/docs"&gt;vector.dev/docs&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Other Resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://calendar.vector.dev"&gt;&lt;strong&gt;Vector Calendar&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Policies&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vectordotdev/vector/raw/master/CODE_OF_CONDUCT.md"&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vectordotdev/vector/raw/master/CONTRIBUTING.md"&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vectordotdev/vector/raw/master/PRIVACY.md"&gt;&lt;strong&gt;Privacy&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vectordotdev/vector/raw/master/RELEASES.md"&gt;&lt;strong&gt;Releases&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vectordotdev/vector/raw/master/VERSIONING.md"&gt;&lt;strong&gt;Versioning&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/vectordotdev/vector/security/policy"&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Comparisons&lt;/h2&gt; 
&lt;h3&gt;Performance&lt;/h3&gt; 
&lt;p&gt;The following performance tests demonstrate baseline performance between common protocols with the exception of the Regex Parsing test.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Test&lt;/th&gt; 
   &lt;th&gt;Vector&lt;/th&gt; 
   &lt;th&gt;Filebeat&lt;/th&gt; 
   &lt;th&gt;FluentBit&lt;/th&gt; 
   &lt;th&gt;FluentD&lt;/th&gt; 
   &lt;th&gt;Logstash&lt;/th&gt; 
   &lt;th&gt;SplunkUF&lt;/th&gt; 
   &lt;th&gt;SplunkHF&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/tcp_to_blackhole_performance"&gt;TCP to Blackhole&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;86mib/s&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
   &lt;td&gt;64.4mib/s&lt;/td&gt; 
   &lt;td&gt;27.7mib/s&lt;/td&gt; 
   &lt;td&gt;40.6mib/s&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/file_to_tcp_performance"&gt;File to TCP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;76.7mib/s&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;7.8mib/s&lt;/td&gt; 
   &lt;td&gt;35mib/s&lt;/td&gt; 
   &lt;td&gt;26.1mib/s&lt;/td&gt; 
   &lt;td&gt;3.1mib/s&lt;/td&gt; 
   &lt;td&gt;40.1mib/s&lt;/td&gt; 
   &lt;td&gt;39mib/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/regex_parsing_performance"&gt;Regex Parsing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;13.2mib/s&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;20.5mib/s&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;2.6mib/s&lt;/td&gt; 
   &lt;td&gt;4.6mib/s&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
   &lt;td&gt;7.8mib/s&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/tcp_to_http_performance"&gt;TCP to HTTP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;26.7mib/s&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
   &lt;td&gt;19.6mib/s&lt;/td&gt; 
   &lt;td&gt;&amp;lt;1mib/s&lt;/td&gt; 
   &lt;td&gt;2.7mib/s&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
   &lt;td&gt;n/a&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/tcp_to_tcp_performance"&gt;TCP to TCP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;69.9mib/s&lt;/td&gt; 
   &lt;td&gt;5mib/s&lt;/td&gt; 
   &lt;td&gt;67.1mib/s&lt;/td&gt; 
   &lt;td&gt;3.9mib/s&lt;/td&gt; 
   &lt;td&gt;10mib/s&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;&lt;strong&gt;70.4mib/s&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;7.6mib/s&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To learn more about our performance tests, please see the &lt;a href="https://github.com/vectordotdev/vector-test-harness/"&gt;Vector test harness&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Correctness&lt;/h3&gt; 
&lt;p&gt;The following correctness tests are not exhaustive, but they demonstrate fundamental differences in quality and attention to detail:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Test&lt;/th&gt; 
   &lt;th&gt;Vector&lt;/th&gt; 
   &lt;th&gt;Filebeat&lt;/th&gt; 
   &lt;th&gt;FluentBit&lt;/th&gt; 
   &lt;th&gt;FluentD&lt;/th&gt; 
   &lt;th&gt;Logstash&lt;/th&gt; 
   &lt;th&gt;Splunk UF&lt;/th&gt; 
   &lt;th&gt;Splunk HF&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/disk_buffer_persistence_correctness"&gt;Disk Buffer Persistence&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;⚠&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/file_rotate_create_correctness"&gt;File Rotate (create)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/file_rotate_truncate_correctness"&gt;File Rotate (copytruncate)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/file_truncate_correctness"&gt;File Truncation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/sighup_correctness"&gt;Process (SIGHUP)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;⚠&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vectordotdev/vector-test-harness/tree/master/cases/wrapped_json_correctness"&gt;JSON (wrapped)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To learn more about our correctness tests, please see the &lt;a href="https://github.com/vectordotdev/vector-test-harness/"&gt;Vector test harness&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;p&gt;Vector is an end-to-end, unified, open data platform.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;Vector&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;Beats&lt;/th&gt; 
   &lt;th&gt;Fluentbit&lt;/th&gt; 
   &lt;th&gt;Fluentd&lt;/th&gt; 
   &lt;th&gt;Logstash&lt;/th&gt; 
   &lt;th&gt;Splunk UF&lt;/th&gt; 
   &lt;th&gt;Splunk HF&lt;/th&gt; 
   &lt;th&gt;Telegraf&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;End-to-end&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Agent&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Aggregator&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Unified&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Logs&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Metrics&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;⚠&lt;/td&gt; 
   &lt;td&gt;⚠&lt;/td&gt; 
   &lt;td&gt;⚠&lt;/td&gt; 
   &lt;td&gt;⚠&lt;/td&gt; 
   &lt;td&gt;⚠&lt;/td&gt; 
   &lt;td&gt;⚠&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Traces&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Open&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Open-source&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Vendor-neutral&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Reliability&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Memory-safe&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Delivery guarantees&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-core&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;✓&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
   &lt;td&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;⚠ = Not interoperable, metrics are represented as structured logs&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="center"&gt; Developed with ❤️ by &lt;strong&gt;&lt;a href="https://datadoghq.com"&gt;Datadog&lt;/a&gt;&lt;/strong&gt; - &lt;a href="https://github.com/vectordotdev/vector/security/policy"&gt;Security Policy&lt;/a&gt; - &lt;a href="https://github.com/vectordotdev/vector/raw/master/PRIVACY.md"&gt;Privacy Policy&lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jj-vcs/jj</title>
      <link>https://github.com/jj-vcs/jj</link>
      <description>&lt;p&gt;A Git-compatible VCS that is both simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;div class="title-block" style="text-align: center;" align="center"&gt; 
 &lt;h1&gt;Jujutsu—a version control system&lt;/h1&gt; 
 &lt;p&gt;&lt;img title="jj logo" src="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/jj-logo.svg?sanitize=true" width="320" height="320"&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/martinvonz/jj" alt="Release"&gt;&lt;/a&gt; &lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/release-date/martinvonz/jj" alt="Release date"&gt;&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/jj-vcs/jj/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/martinvonz/jj" alt="License"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;img src="https://img.shields.io/badge/irc-%23jujutsu-blue.svg?sanitize=true" alt="IRC"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj"&gt;Homepage&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/roadmap"&gt;Development Roadmap&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Jujutsu is a powerful &lt;a href="https://en.wikipedia.org/wiki/Version_control"&gt;version control system&lt;/a&gt; for software projects. You use it to get a copy of your code, track changes to the code, and finally publish those changes for others to see and use. It is designed from the ground up to be easy to use—whether you're new or experienced, working on brand new projects alone, or large scale software projects with large histories and teams.&lt;/p&gt; 
&lt;p&gt;Jujutsu is unlike most other systems, because internally it abstracts the user interface and version control algorithms from the &lt;em&gt;storage systems&lt;/em&gt; used to serve your content. This allows it to serve as a VCS with many possible physical backends, that may have their own data or networking models—like &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; or &lt;a href="https://www.breezy-vcs.org/"&gt;Breezy&lt;/a&gt;, or hybrid systems like Google's cloud-based design, &lt;a href="https://youtu.be/W71BTkUbdqE?t=645"&gt;Piper/CitC&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Today, we use Git repositories as a storage layer to serve and track content, making it &lt;strong&gt;compatible with many of your favorite Git-based tools, right now!&lt;/strong&gt; All core developers use Jujutsu to develop Jujutsu, right here on GitHub. But it should hopefully work with your favorite Git forges, too.&lt;/p&gt; 
&lt;p&gt;We combine many distinct design choices and concepts from other version control systems into a single tool. Some of those sources of inspiration include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;: We make an effort to &lt;a href="https://github.com/jj-vcs/jj/discussions/49"&gt;be fast&lt;/a&gt;—with a snappy UX, efficient algorithms, correct data structures, and good-old-fashioned attention to detail. The default storage backend uses Git repositories for "physical storage", for wide interoperability and ease of onboarding.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mercurial &amp;amp; Sapling&lt;/strong&gt;: There are many Mercurial-inspired features, such as the &lt;a href="https://jj-vcs.github.io/jj/latest/revsets/"&gt;revset&lt;/a&gt; language to select commits. There is &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison/#the-index"&gt;no explicit index&lt;/a&gt; or staging area. Branches are "anonymous" like Mercurial, so you don't need to make up a name for each small change. Primitives for rewriting history are powerful and simple. Formatting output is done with a robust template language that can be configured by the user.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Darcs&lt;/strong&gt;: Jujutsu keeps track of conflicts as &lt;a href="https://jj-vcs.github.io/jj/latest/conflicts/"&gt;first-class objects&lt;/a&gt; in its model; they are first-class in the same way commits are, while alternatives like Git simply think of conflicts as textual diffs. While not as rigorous as systems like Darcs (which is based on a formalized theory of patches, as opposed to snapshots), the effect is that many forms of conflict resolution can be performed and propagated automatically.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And it adds several innovative, useful features of its own:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Working-copy-as-a-commit&lt;/strong&gt;: Changes to files are &lt;a href="https://jj-vcs.github.io/jj/latest/working-copy/"&gt;recorded automatically&lt;/a&gt; as normal commits, and amended on every subsequent change. This "snapshot" design simplifies the user-facing data model (commits are the only visible object), simplifies internal algorithms, and completely subsumes features like Git's stashes or the index/staging-area.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operation log &amp;amp; undo&lt;/strong&gt;: Jujutsu records every operation that is performed on the repository, from commits, to pulls, to pushes. This makes debugging problems like "what just happened?" or "how did I end up here?" easier, &lt;em&gt;especially&lt;/em&gt; when you're helping your coworker answer those questions about their repository! And because everything is recorded, you can undo that mistake you just made with ease. Version control has finally entered &lt;a href="https://en.wikipedia.org/wiki/Undo#History"&gt;the 1960s&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic rebase and conflict resolution&lt;/strong&gt;: When you modify a commit, every descendent is automatically rebased on top of the freshly-modified one. This makes "patch-based" workflows a breeze. If you resolve a conflict in a commit, the &lt;em&gt;resolution&lt;/em&gt; of that conflict is also propagated through descendants as well. In effect, this is a completely transparent version of &lt;code&gt;git rebase --update-refs&lt;/code&gt; combined with &lt;code&gt;git rerere&lt;/code&gt;, supported by design.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The following features are available for use, but experimental; they may have bugs, backwards incompatible storage changes, and user-interface changes!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Safe, concurrent replication&lt;/strong&gt;: Have you ever wanted to store your version controlled repositories inside a Dropbox folder? Or continuously backup repositories to S3? No? Well, now you can!&lt;/p&gt; &lt;p&gt;The fundamental problem with using filesystems like Dropbox and backup tools like &lt;code&gt;rsync&lt;/code&gt; on your typical Git/Mercurial repositories is that they rely on &lt;em&gt;local filesystem operations&lt;/em&gt; being atomic, serialized, and non-concurrent with respect to other reads and writes—which is &lt;em&gt;not&lt;/em&gt; true when operating on distributed file systems, or when operations like concurrent file copies (for backup) happen while lock files are being held.&lt;/p&gt; &lt;p&gt;Jujutsu is instead designed to be &lt;a href="https://jj-vcs.github.io/jj/latest/technical/concurrency/"&gt;safe under concurrent scenarios&lt;/a&gt;; simply using rsync or Dropbox and then using that resulting repository should never result in a repository in a &lt;em&gt;corrupt state&lt;/em&gt;. The worst that &lt;em&gt;should&lt;/em&gt; happen is that it will expose conflicts between the local and remote state, leaving you to resolve them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The command-line tool is called &lt;code&gt;jj&lt;/code&gt; for now because it's easy to type and easy to replace (rare in English). The project is called "Jujutsu" because it matches "jj".&lt;/p&gt; 
&lt;p&gt;Jujutsu is relatively young, with lots of work to still be done. If you have any questions, or want to talk about future plans, please join us on Discord &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord"&gt;&lt;/a&gt;, start a &lt;a href="https://github.com/jj-vcs/jj/discussions"&gt;GitHub Discussion&lt;/a&gt;, or send an IRC message to &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;code&gt;#jujutsu&lt;/code&gt; on Libera Chat&lt;/a&gt;. The developers monitor all of these channels[^bridge].&lt;/p&gt; 
&lt;p&gt;[^bridge]: To be more precise, the &lt;code&gt;#jujutsu&lt;/code&gt; Libera IRC channel is bridged to one of the channels on jj's Discord. Some of the developers stay on Discord and use the bridge to follow IRC.&lt;/p&gt; 
&lt;h3&gt;News and Updates 📣&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;December 2024&lt;/strong&gt;: The &lt;code&gt;jj&lt;/code&gt; Repository has moved to the &lt;code&gt;jj-vcs&lt;/code&gt; GitHub organisation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;November 2024&lt;/strong&gt;: Version 0.24 is released which adds &lt;code&gt;jj file annotate&lt;/code&gt;, which is equivalent to &lt;code&gt;git blame&lt;/code&gt; or &lt;code&gt;hg annotate&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;September 2024&lt;/strong&gt;: Martin gave a &lt;a href="https://www.youtube.com/watch?v=LV0JzI8IcCY"&gt;presentation about Jujutsu&lt;/a&gt; at Git Merge 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Version 0.14 is released, which deprecates &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/CHANGELOG.md#0140---2024-02-07"&gt;"jj checkout" and "jj merge"&lt;/a&gt;, as well as &lt;code&gt;jj init --git&lt;/code&gt;, which is now just called &lt;code&gt;jj git init&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Oct 2023&lt;/strong&gt;: Version 0.10.0 is released! Now includes a bundled merge and diff editor for all platforms, "immutable revsets" to avoid accidentally &lt;code&gt;edit&lt;/code&gt;-ing the wrong revisions, and lots of polish.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin gave a presentation about Google's plans for Jujutsu at Git Merge 2022! See the &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt; or the &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;recording&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Related Media&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mar 2024&lt;/strong&gt;: Chris Krycho started &lt;a href="https://www.youtube.com/playlist?list=PLelyiwKWHHAq01Pvmpf6x7J0y-yQpmtxp"&gt;a YouTube series about Jujutsu&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Chris Krycho published an article about Jujutsu called &lt;a href="https://v5.chriskrycho.com/essays/jj-init/"&gt;jj init&lt;/a&gt; and Steve Klabnik followed up with the &lt;a href="https://steveklabnik.github.io/jujutsu-tutorial/"&gt;Jujutsu Tutorial&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2024&lt;/strong&gt;: Jujutsu was featured in an LWN.net article called &lt;a href="https://lwn.net/Articles/958468/"&gt;Jujutsu: a new, Git-compatible version control system&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin's Talk about Jujutsu at Git Merge 2022, &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;video&lt;/a&gt; and the associated &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The wiki also contains a more extensive list of &lt;a href="https://github.com/jj-vcs/jj/wiki/Media"&gt;media references&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Jujutsu is an &lt;strong&gt;experimental version control system&lt;/strong&gt;. While Git compatibility is stable, and most developers use it daily for all their needs, there may still be work-in-progress features, suboptimal UX, and workflow gaps that make it unusable for your particular use.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Follow the &lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;installation instructions&lt;/a&gt; to obtain and configure &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The best way to get started is probably to go through &lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;the tutorial&lt;/a&gt;. Also see the &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison"&gt;Git comparison&lt;/a&gt;, which includes a table of &lt;code&gt;jj&lt;/code&gt; vs. &lt;code&gt;git&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;As you become more familiar with Jujutsu, the following resources may be helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/FAQ"&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/glossary"&gt;Glossary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help&lt;/code&gt; command (e.g. &lt;code&gt;jj help rebase&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help -k &amp;lt;keyword&amp;gt;&lt;/code&gt; command (e.g. &lt;code&gt;jj help -k config&lt;/code&gt;). Use &lt;code&gt;jj help --help&lt;/code&gt; to see what keywords are available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using a &lt;strong&gt;prerelease&lt;/strong&gt; version of &lt;code&gt;jj&lt;/code&gt;, you would want to consult &lt;a href="https://jj-vcs.github.io/jj/prerelease/"&gt;the docs for the prerelease (main branch) version&lt;/a&gt;. You can also get there from the docs for the latest release by using the website's version switcher. The version switcher is visible in the header of the website when you scroll to the top of any page.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Compatible with Git&lt;/h3&gt; 
&lt;p&gt;Jujutsu is designed so that the underlying data and storage model is abstract. Today, only the Git backend is production-ready. The Git backend uses the &lt;a href="https://github.com/Byron/gitoxide"&gt;gitoxide&lt;/a&gt; Rust library.&lt;/p&gt; 
&lt;p&gt;The Git backend is fully featured and maintained, and allows you to use Jujutsu with any Git remote. The commits you create will look like regular Git commits. You can fetch branches from a regular Git remote and push branches to the remote. You can always switch back to Git.&lt;/p&gt; 
&lt;p&gt;Here is how you can explore a GitHub repository with &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/git_compat.png"&gt; 
&lt;p&gt;You can even have a &lt;a href="https://jj-vcs.github.io/jj/latest/git-compatibility#co-located-jujutsugit-repos"&gt;"co-located" local repository&lt;/a&gt; where you can use both &lt;code&gt;jj&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; commands interchangeably.&lt;/p&gt; 
&lt;h3&gt;The working copy is automatically committed&lt;/h3&gt; 
&lt;p&gt;Jujutsu uses a real commit to represent the working copy. Checking out a commit results a new working-copy commit on top of the target commit. Almost all commands automatically amend the working-copy commit.&lt;/p&gt; 
&lt;p&gt;The working-copy being a commit means that commands never fail because the working copy is dirty (no "error: Your local changes to the following files..."), and there is no need for &lt;code&gt;git stash&lt;/code&gt;. Also, because the working copy is a commit, commands work the same way on the working-copy commit as on any other commit, so you can set the commit message before you're done with the changes.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/working_copy.png"&gt; 
&lt;h3&gt;The repo is the source of truth&lt;/h3&gt; 
&lt;p&gt;With Jujutsu, the working copy plays a smaller role than with Git. Commands snapshot the working copy before they start, then they update the repo, and then the working copy is updated (if the working-copy commit was modified). Almost all commands (even checkout!) operate on the commits in the repo, leaving the common functionality of snapshotting and updating of the working copy to centralized code. For example, &lt;code&gt;jj restore&lt;/code&gt; (similar to &lt;code&gt;git restore&lt;/code&gt;) can restore from any commit and into any commit, and &lt;code&gt;jj describe&lt;/code&gt; can set the commit message of any commit (defaults to the working-copy commit).&lt;/p&gt; 
&lt;h3&gt;Entire repo is under version control&lt;/h3&gt; 
&lt;p&gt;All operations you perform in the repo are recorded, along with a snapshot of the repo state after the operation. This means that you can easily revert to an earlier repo state, or to simply undo a particular operation (which does not necessarily have to be the most recent operation).&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/operation_log.png"&gt; 
&lt;h3&gt;Conflicts can be recorded in commits&lt;/h3&gt; 
&lt;p&gt;If an operation results in &lt;a href="https://jj-vcs.github.io/jj/latest/glossary#conflict"&gt;conflicts&lt;/a&gt;, information about those conflicts will be recorded in the commit(s). The operation will succeed. You can then resolve the conflicts later. One consequence of this design is that there's no need to continue interrupted operations. Instead, you get a single workflow for resolving conflicts, regardless of which command caused them. This design also lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).&lt;/p&gt; 
&lt;p&gt;Basic conflict resolution:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/resolve_conflicts.png"&gt; 
&lt;p&gt;Juggling conflicts:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/juggle_conflicts.png"&gt; 
&lt;h3&gt;Automatic rebase&lt;/h3&gt; 
&lt;p&gt;Whenever you modify a commit, any descendants of the old commit will be rebased onto the new commit. Thanks to the conflict design described above, that can be done even if there are conflicts. Bookmarks pointing to rebased commits will be updated. So will the working copy if it points to a rebased commit.&lt;/p&gt; 
&lt;h3&gt;Comprehensive support for rewriting history&lt;/h3&gt; 
&lt;p&gt;Besides the usual rebase command, there's &lt;code&gt;jj describe&lt;/code&gt; for editing the description (commit message) of an arbitrary commit. There's also &lt;code&gt;jj diffedit&lt;/code&gt;, which lets you edit the changes in a commit without checking it out. To split a commit into two, use &lt;code&gt;jj split&lt;/code&gt;. You can even move part of the changes in a commit to any other commit using &lt;code&gt;jj squash -i --from X --into Y&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;The tool is fairly feature-complete, but some important features like support for Git submodules are not yet completed. There are also several performance bugs. It's likely that workflows and setups different from what the core developers use are not well supported, e.g. there is no native support for email-based workflows.&lt;/p&gt; 
&lt;p&gt;Today, all core developers use &lt;code&gt;jj&lt;/code&gt; to work on &lt;code&gt;jj&lt;/code&gt;. I (Martin von Zweigbergk) have almost exclusively used &lt;code&gt;jj&lt;/code&gt; to develop the project itself since early January 2021. I haven't had to re-clone from source (I don't think I've even had to restore from backup).&lt;/p&gt; 
&lt;p&gt;There &lt;em&gt;will&lt;/em&gt; be changes to workflows and backward-incompatible changes to the on-disk formats before version 1.0.0. For any format changes, we'll try to implement transparent upgrades (as we've done with recent changes), or provide upgrade commands or scripts if requested.&lt;/p&gt; 
&lt;h2&gt;Related work&lt;/h2&gt; 
&lt;p&gt;There are several tools trying to solve similar problems as Jujutsu. See &lt;a href="https://jj-vcs.github.io/jj/latest/related-work"&gt;related work&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome outside contributions, and there's plenty of things to do, so don't be shy. Please ask if you want a pointer on something you can help with, and hopefully we can all figure something out.&lt;/p&gt; 
&lt;p&gt;We do have &lt;a href="https://jj-vcs.github.io/jj/prerelease/contributing/"&gt;a few policies and suggestions&lt;/a&gt; for contributors. The broad TL;DR:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug reports are very welcome!&lt;/li&gt; 
 &lt;li&gt;Every commit that lands in the &lt;code&gt;main&lt;/code&gt; branch is code reviewed.&lt;/li&gt; 
 &lt;li&gt;Please behave yourself, and obey the Community Guidelines.&lt;/li&gt; 
 &lt;li&gt;There &lt;strong&gt;is&lt;/strong&gt; a mandatory CLA you must agree to. Importantly, it &lt;strong&gt;does not&lt;/strong&gt; transfer copyright ownership to Google or anyone else; it simply gives us the right to safely redistribute and use your changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mandatory Google Disclaimer&lt;/h3&gt; 
&lt;p&gt;I (Martin von Zweigbergk, &lt;a href="mailto:martinvonz@google.com"&gt;martinvonz@google.com&lt;/a&gt;) started Jujutsu as a hobby project in late 2019, and it has evolved into my full-time project at Google, with several other Googlers (now) assisting development in various capacities. That said, &lt;strong&gt;this is not a Google product&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Jujutsu is available as Open Source Software, under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details about copyright and redistribution.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;jj&lt;/code&gt; logo was contributed by J. Jennings and is licensed under a Creative Commons License, see &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/LICENSE"&gt;&lt;code&gt;docs/images/LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nautechsystems/nautilus_trader</title>
      <link>https://github.com/nautechsystems/nautilus_trader</link>
      <description>&lt;p&gt;A high-performance algorithmic trading platform and event-driven backtester&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader-logo.png" width="500"&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://codecov.io/gh/nautechsystems/nautilus_trader"&gt;&lt;img src="https://codecov.io/gh/nautechsystems/nautilus_trader/branch/master/graph/badge.svg?token=DXO9QQI40H" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/nautechsystems/nautilus_trader"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="codspeed"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/pypi/pyversions/nautilus_trader" alt="pythons"&gt; &lt;img src="https://img.shields.io/pypi/v/nautilus_trader" alt="pypi-version"&gt; &lt;img src="https://img.shields.io/pypi/format/nautilus_trader?color=blue" alt="pypi-format"&gt; &lt;a href="https://pepy.tech/project/nautilus-trader"&gt;&lt;img src="https://pepy.tech/badge/nautilus-trader" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NautilusTrader"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Branch&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fmaster%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fnightly%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fdevelop%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=develop" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Rust&lt;/th&gt; 
   &lt;th align="left"&gt;Python&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13*&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;* Windows builds are currently pinned to CPython 3.13.2, see &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/docs/getting_started/installation.md"&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href="https://nautilustrader.io/docs/"&gt;https://nautilustrader.io/docs/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: &lt;a href="mailto:support@nautilustrader.io"&gt;support@nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is an open-source, high-performance, production-grade algorithmic trading platform, providing quantitative traders with the ability to backtest portfolios of automated trading strategies on historical data with an event-driven engine, and also deploy those same strategies live, with no code changes.&lt;/p&gt; 
&lt;p&gt;The platform is &lt;em&gt;AI-first&lt;/em&gt;, designed to develop and deploy algorithmic trading strategies within a highly performant and robust Python-native environment. This helps to address the parity challenge of keeping the Python research/backtest environment consistent with the production live trading environment.&lt;/p&gt; 
&lt;p&gt;NautilusTrader's design, architecture, and implementation philosophy prioritizes software correctness and safety at the highest level, with the aim of supporting Python-native, mission-critical, trading system backtesting and live deployment workloads.&lt;/p&gt; 
&lt;p&gt;The platform is also universal, and asset-class-agnostic — with any REST API or WebSocket feed able to be integrated via modular adapters. It supports high-frequency trading across a wide range of asset classes and instrument types including FX, Equities, Futures, Options, Crypto and Betting, enabling seamless operations across multiple venues simultaneously.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader.png" alt="nautilus-trader" title="nautilus-trader"&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Core is written in Rust with asynchronous networking using &lt;a href="https://crates.io/crates/tokio"&gt;tokio&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Rust-powered type- and thread-safety, with optional Redis-backed state persistence.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt;: OS independent, runs on Linux, macOS, and Windows. Deploy using Docker.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Modular adapters mean any REST API or WebSocket feed can be integrated.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: Time in force &lt;code&gt;IOC&lt;/code&gt;, &lt;code&gt;FOK&lt;/code&gt;, &lt;code&gt;GTC&lt;/code&gt;, &lt;code&gt;GTD&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, &lt;code&gt;AT_THE_OPEN&lt;/code&gt;, &lt;code&gt;AT_THE_CLOSE&lt;/code&gt;, advanced order types and conditional triggers. Execution instructions &lt;code&gt;post-only&lt;/code&gt;, &lt;code&gt;reduce-only&lt;/code&gt;, and icebergs. Contingency orders including &lt;code&gt;OCO&lt;/code&gt;, &lt;code&gt;OUO&lt;/code&gt;, &lt;code&gt;OTO&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Add user-defined custom components, or assemble entire systems from scratch leveraging the &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; and &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtesting&lt;/strong&gt;: Run with multiple venues, instruments and strategies simultaneously using historical quote tick, trade tick, bar, order book and custom data with nanosecond resolution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: Use identical strategy implementations between backtesting and live deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-venue&lt;/strong&gt;: Multiple venue capabilities facilitate market-making and statistical arbitrage strategies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Training&lt;/strong&gt;: Backtest engine fast enough to be used to train AI trading agents (RL/ES).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-art.png" alt="Alt text" title="nautilus"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;nautilus - from ancient Greek 'sailor' and naus 'ship'.&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;The nautilus shell consists of modular chambers with a growth factor which approximates a logarithmic spiral. The idea is that this can be translated to the aesthetics of design and architecture.&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Why NautilusTrader?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Highly performant event-driven Python&lt;/strong&gt;: Native binary core components.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parity between backtesting and live trading&lt;/strong&gt;: Identical strategy code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reduced operational risk&lt;/strong&gt;: Enhanced risk management functionality, logical accuracy, and type safety.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly extendable&lt;/strong&gt;: Message bus, custom components and actors, custom data, custom adapters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Traditionally, trading strategy research and backtesting might be conducted in Python using vectorized methods, with the strategy then needing to be reimplemented in a more event-driven way using C++, C#, Java or other statically typed language(s). The reasoning here is that vectorized backtesting code cannot express the granular time and event dependent complexity of real-time trading, where compiled languages have proven to be more suitable due to their inherently higher performance, and type safety.&lt;/p&gt; 
&lt;p&gt;One of the key advantages of NautilusTrader here, is that this reimplementation step is now circumvented - as the critical core components of the platform have all been written entirely in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; or &lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;. This means we're using the right tools for the job, where systems programming languages compile performant binaries, with CPython C extension modules then able to offer a Python-native environment, suitable for professional quantitative traders and trading firms.&lt;/p&gt; 
&lt;h2&gt;Why Python?&lt;/h2&gt; 
&lt;p&gt;Python was originally created decades ago as a simple scripting language with a clean straightforward syntax. It has since evolved into a fully fledged general purpose object-oriented programming language. Based on the TIOBE index, Python is currently the most popular programming language in the world. Not only that, Python has become the &lt;em&gt;de facto lingua franca&lt;/em&gt; of data science, machine learning, and artificial intelligence.&lt;/p&gt; 
&lt;p&gt;developer/user communities. However, Python has performance and typing limitations for large-scale, latency-sensitive systems. Cython addresses many of these issues by introducing static typing into Python's rich ecosystem of libraries and communities.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is "blazingly fast" and memory-efficient (comparable to C and C++) with no garbage collector. It can power mission-critical systems, run on embedded devices, and easily integrates with other languages.&lt;/p&gt; 
&lt;p&gt;Rust’s rich type system and ownership model guarantees memory-safety and thread-safety deterministically — eliminating many classes of bugs at compile-time.&lt;/p&gt; 
&lt;p&gt;The project increasingly utilizes Rust for core performance-critical components. Python bindings are implemented via Cython and &lt;a href="https://pyo3.rs"&gt;PyO3&lt;/a&gt;—no Rust toolchain is required at install time.&lt;/p&gt; 
&lt;p&gt;This project makes the &lt;a href="https://raphlinus.github.io/rust/2020/01/18/soundness-pledge.html"&gt;Soundness Pledge&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;“The intent of this project is to be free of soundness bugs. The developers will do their best to avoid them, and welcome help in analyzing and fixing them.”&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; NautilusTrader relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally equal to the latest stable release of Rust.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is modularly designed to work with &lt;em&gt;adapters&lt;/em&gt;, enabling connectivity to trading venues and data providers by translating their raw APIs into a unified interface and normalized domain model.&lt;/p&gt; 
&lt;p&gt;The following integrations are currently supported; see &lt;a href="https://nautilustrader.io/docs/latest/integrations/"&gt;docs/integrations/&lt;/a&gt; for details:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Name&lt;/th&gt; 
   &lt;th align="left"&gt;ID&lt;/th&gt; 
   &lt;th align="left"&gt;Type&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://betfair.com"&gt;Betfair&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BETFAIR&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sports Betting Exchange&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/betfair.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://binance.com"&gt;Binance&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://binance.us"&gt;Binance US&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.binance.com/en/futures"&gt;Binance Futures&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.bybit.com"&gt;Bybit&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BYBIT&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/bybit.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.coinbase.com/en/international-exchange"&gt;Coinbase International&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;COINBASE_INTX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/coinbase_intx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://databento.com"&gt;Databento&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DATABENTO&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/databento.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://dydx.exchange/"&gt;dYdX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DYDX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/dydx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://hyperliquid.xyz"&gt;Hyperliquid&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;HYPERLIQUID&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/building-orange" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/hyperliquid.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.interactivebrokers.com"&gt;Interactive Brokers&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;INTERACTIVE_BROKERS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Brokerage (multi-venue)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/ib.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://okx.com"&gt;OKX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;OKX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/beta-yellow" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/okx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://polymarket.com"&gt;Polymarket&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;POLYMARKET&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Prediction Market (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/polymarket.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://tardis.dev"&gt;Tardis&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;TARDIS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/tardis.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ID&lt;/strong&gt;: The default client ID for the integrations adapter clients.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: The type of integration (often the venue type).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;building&lt;/code&gt;: Under construction and likely not in a usable state.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: Completed to a minimally working state and in a beta testing phase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level (some bugs may still remain).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/integrations/index.html"&gt;Integrations&lt;/a&gt; documentation for further details.&lt;/p&gt; 
&lt;h2&gt;Versioning and releases&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NautilusTrader is still under active development&lt;/strong&gt;. Some features may be incomplete, and while the API is becoming more stable, breaking changes can occur between releases. We strive to document these changes in the release notes on a &lt;strong&gt;best-effort basis&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;We aim to follow a &lt;strong&gt;bi-weekly release schedule&lt;/strong&gt;, though experimental or larger features may cause delays.&lt;/p&gt; 
&lt;h3&gt;Branches&lt;/h3&gt; 
&lt;p&gt;We aim to maintain a stable, passing build across all branches.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: Reflects the source code for the latest released version; recommended for production use.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;: Daily snapshots of the &lt;code&gt;develop&lt;/code&gt; branch for early testing; merged at &lt;strong&gt;14:00 UTC&lt;/strong&gt; or on demand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt;: Active development branch for contributors and feature work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Our &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md"&gt;roadmap&lt;/a&gt; aims to achieve a &lt;strong&gt;stable API for version 2.x&lt;/strong&gt; (likely after the Rust port). Once this milestone is reached, we plan to implement a formal deprecation process for any API changes. This approach allows us to maintain a rapid development pace for now.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Precision mode&lt;/h2&gt; 
&lt;p&gt;NautilusTrader supports two precision modes for its core value types (&lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Quantity&lt;/code&gt;, &lt;code&gt;Money&lt;/code&gt;), which differ in their internal bit-width and maximum decimal precision.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High-precision&lt;/strong&gt;: 128-bit integers with up to 16 decimals of precision, and a larger value range.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Standard-precision&lt;/strong&gt;: 64-bit integers with up to 9 decimals of precision, and a smaller value range.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;By default, the official Python wheels &lt;strong&gt;ship&lt;/strong&gt; in high-precision (128-bit) mode on Linux and macOS. On Windows, only standard-precision (64-bit) is available due to the lack of native 128-bit integer support. For the Rust crates, the default is standard-precision unless you explicitly enable the &lt;code&gt;high-precision&lt;/code&gt; feature flag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rust feature flag&lt;/strong&gt;: To enable high-precision mode in Rust, add the &lt;code&gt;high-precision&lt;/code&gt; feature to your Cargo.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
nautilus_model = { version = "*", features = ["high-precision"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;We recommend using the latest supported version of Python and installing &lt;a href="https://pypi.org/project/nautilus_trader/"&gt;nautilus_trader&lt;/a&gt; inside a virtual environment to isolate dependencies.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;There are two supported ways to install&lt;/strong&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Pre-built binary wheel from PyPI &lt;em&gt;or&lt;/em&gt; the Nautech Systems package index.&lt;/li&gt; 
 &lt;li&gt;Build from source.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;We highly recommend installing using the &lt;a href="https://docs.astral.sh/uv"&gt;uv&lt;/a&gt; package manager with a "vanilla" CPython.&lt;/p&gt; 
 &lt;p&gt;Conda and other Python distributions &lt;em&gt;may&lt;/em&gt; work but aren’t officially supported.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;From PyPI&lt;/h3&gt; 
&lt;p&gt;To install the latest binary wheel (or sdist package) from PyPI using Python's pip package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From the Nautech Systems package index&lt;/h3&gt; 
&lt;p&gt;The Nautech Systems package index (&lt;code&gt;packages.nautechsystems.io&lt;/code&gt;) complies with &lt;a href="https://peps.python.org/pep-0503/"&gt;PEP-503&lt;/a&gt; and hosts both stable and development binary wheels for &lt;code&gt;nautilus_trader&lt;/code&gt;. This enables users to install either the latest stable release or pre-release versions for testing.&lt;/p&gt; 
&lt;h4&gt;Stable wheels&lt;/h4&gt; 
&lt;p&gt;Stable wheels correspond to official releases of &lt;code&gt;nautilus_trader&lt;/code&gt; on PyPI, and use standard versioning.&lt;/p&gt; 
&lt;p&gt;To install the latest stable release:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Development wheels&lt;/h4&gt; 
&lt;p&gt;Development wheels are published from both the &lt;code&gt;nightly&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches, allowing users to test features and fixes ahead of stable releases.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Wheels from the &lt;code&gt;develop&lt;/code&gt; branch are only built for the Linux x86_64 platform to save time and compute resources, while &lt;code&gt;nightly&lt;/code&gt; wheels support additional platforms as shown below.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Nightly&lt;/th&gt; 
   &lt;th align="left"&gt;Develop&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;This process also helps preserve compute resources and ensures easy access to the exact binaries tested in CI pipelines, while adhering to &lt;a href="https://peps.python.org/pep-0440/"&gt;PEP-440&lt;/a&gt; versioning standards:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; wheels use the version format &lt;code&gt;dev{date}+{build_number}&lt;/code&gt; (e.g., &lt;code&gt;1.208.0.dev20241212+7001&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; wheels use the version format &lt;code&gt;a{date}&lt;/code&gt; (alpha) (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;We do not recommend using development wheels in production environments, such as live trading controlling real capital.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installation commands&lt;/h4&gt; 
&lt;p&gt;By default, pip will install the latest stable release. Adding the &lt;code&gt;--pre&lt;/code&gt; flag ensures that pre-release versions, including development wheels, are considered.&lt;/p&gt; 
&lt;p&gt;To install the latest available pre-release (including development wheels):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --pre --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install a specific development wheel (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt; for December 12, 2024):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install nautilus_trader==1.208.0a20241212 --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available versions&lt;/h4&gt; 
&lt;p&gt;You can view all available versions of &lt;code&gt;nautilus_trader&lt;/code&gt; on the &lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;package index&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To programmatically fetch and list available versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -s https://packages.nautechsystems.io/simple/nautilus-trader/index.html | grep -oP '(?&amp;lt;=&amp;lt;a href=")[^"]+(?=")' | awk -F'#' '{print $1}' | sort
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Branch updates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): Build and publish continuously with every merged commit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): Build and publish daily when we automatically merge the &lt;code&gt;develop&lt;/code&gt; branch at &lt;strong&gt;14:00 UTC&lt;/strong&gt; (if there are changes).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Retention policies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): We retain only the most recent wheel build.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): We retain only the 10 most recent wheel builds.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;From Source&lt;/h3&gt; 
&lt;p&gt;It's possible to install from source using pip if you first install the build dependencies as specified in the &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; (the Rust toolchain installer):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl https://sh.rustup.rs -sSf | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Download and install &lt;a href="https://win.rustup.rs/x86_64"&gt;&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;Install "Desktop development with C++" with &lt;a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16"&gt;Build Tools for Visual Studio 2019&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;rustc --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;cargo&lt;/code&gt; in the current shell:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Start a new PowerShell&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://clang.llvm.org/"&gt;clang&lt;/a&gt; (a C language frontend for LLVM):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get install clang
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ol&gt; 
     &lt;li&gt; &lt;p&gt;Add Clang to your &lt;a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16"&gt;Build Tools for Visual Studio 2019&lt;/a&gt;:&lt;/p&gt; 
      &lt;ul&gt; 
       &lt;li&gt;Start | Visual Studio Installer | Modify | C++ Clang tools for Windows (12.0.0 - x64…) = checked | Modify&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;clang&lt;/code&gt; in the current shell:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-powershell"&gt;[System.Environment]::SetEnvironmentVariable('path', "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\Llvm\x64\bin\;" + $env:Path,"User")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;clang --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install uv (see the &lt;a href="https://docs.astral.sh/uv/getting-started/installation"&gt;uv installation guide&lt;/a&gt; for more details):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the source with &lt;code&gt;git&lt;/code&gt;, and install from the project's root directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;git clone --branch develop --depth 1 https://github.com/nautechsystems/nautilus_trader
cd nautilus_trader
uv sync --all-extras
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;--depth 1&lt;/code&gt; flag fetches just the latest commit for a faster, lightweight clone.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start="6"&gt; 
 &lt;li&gt; &lt;p&gt;Set environment variables for PyO3 compilation (Linux and macOS only):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Set the library path for the Python interpreter (in this case Python 3.13.4)
export LD_LIBRARY_PATH="$HOME/.local/share/uv/python/cpython-3.13.4-linux-x86_64-gnu/lib:$LD_LIBRARY_PATH"

# Set the Python executable path for PyO3
export PYO3_PYTHON=$(pwd)/.venv/bin/python
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Adjust the Python version and architecture in the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to match your system. Use &lt;code&gt;uv python list&lt;/code&gt; to find the exact path for your Python installation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for other options and further details.&lt;/p&gt; 
&lt;h2&gt;Redis&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href="https://redis.io"&gt;Redis&lt;/a&gt; with NautilusTrader is &lt;strong&gt;optional&lt;/strong&gt; and only required if configured as the backend for a &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; database or &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;. See the &lt;strong&gt;Redis&lt;/strong&gt; section of the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation#redis"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Makefile&lt;/h2&gt; 
&lt;p&gt;A &lt;code&gt;Makefile&lt;/code&gt; is provided to automate most installation and build tasks for development. Some of the targets include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;make install&lt;/code&gt;: Installs in &lt;code&gt;release&lt;/code&gt; build mode with all dependency groups and extras.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-debug&lt;/code&gt;: Same as &lt;code&gt;make install&lt;/code&gt; but with &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-just-deps&lt;/code&gt;: Installs just the &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; dependencies (does not install package).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;: Runs the build script in &lt;code&gt;release&lt;/code&gt; build mode (default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-debug&lt;/code&gt;: Runs the build script in &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;release&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel-debug&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;debug&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make cargo-test&lt;/code&gt;: Runs all Rust crate tests using &lt;code&gt;cargo-nextest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Deletes all build results, such as &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt; files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make distclean&lt;/code&gt;: &lt;strong&gt;CAUTION&lt;/strong&gt; Removes all artifacts not in the git index from the repository. This includes source files which have not been &lt;code&gt;git add&lt;/code&gt;ed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make docs&lt;/code&gt;: Builds the documentation HTML using Sphinx.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pre-commit&lt;/code&gt;: Runs the pre-commit checks over all files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make ruff&lt;/code&gt;: Runs ruff over all files using the &lt;code&gt;pyproject.toml&lt;/code&gt; config (with autofix).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pytest&lt;/code&gt;: Runs all tests with &lt;code&gt;pytest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make test-performance&lt;/code&gt;: Runs performance tests with &lt;a href="https://codspeed.io"&gt;codspeed&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make help&lt;/code&gt; for documentation on all available make targets.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/crates/infrastructure/TESTS.md"&gt;crates/infrastructure/TESTS.md&lt;/a&gt; file for running the infrastructure integration tests.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Indicators and strategies can be developed in both Python and Cython. For performance and latency-sensitive applications, we recommend using Cython. Below are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/indicators/ema_python.py"&gt;indicator&lt;/a&gt; example written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/indicators/"&gt;indicator&lt;/a&gt; examples written in Cython.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/strategies/"&gt;strategy&lt;/a&gt; examples written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/examples/backtest/"&gt;backtest&lt;/a&gt; examples using a &lt;code&gt;BacktestEngine&lt;/code&gt; directly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;p&gt;Docker containers are built using the base image &lt;code&gt;python:3.12-slim&lt;/code&gt; with the following variant tags:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:latest&lt;/code&gt; has the latest release version installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:latest&lt;/code&gt; has the latest release version installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can pull the container images as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/&amp;lt;image_variant_tag&amp;gt; --platform linux/amd64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can launch the backtest example container by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/jupyterlab:nightly --platform linux/amd64
docker run -p 8888:8888 ghcr.io/nautechsystems/jupyterlab:nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open your browser at the following address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http://127.0.0.1:8888/lab
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader currently exceeds the rate limit for Jupyter notebook logging (stdout output). Therefore, we set the &lt;code&gt;log_level&lt;/code&gt; to &lt;code&gt;ERROR&lt;/code&gt; in the examples. Lowering this level to see more logging will cause the notebook to hang during cell execution. We are investigating a fix that may involve either raising the configured rate limits for Jupyter or throttling the log flushing from Nautilus.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab/issues/12845"&gt;https://github.com/jupyterlab/jupyterlab/issues/12845&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/deshaw/jupyterlab-limit-output"&gt;https://github.com/deshaw/jupyterlab-limit-output&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;We aim to provide the most pleasant developer experience possible for this hybrid codebase of Python, Cython and Rust. See the &lt;a href="https://nautilustrader.io/docs/latest/developer_guide/index.html"&gt;Developer Guide&lt;/a&gt; for helpful information.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make build-debug&lt;/code&gt; to compile after changes to Rust or Cython code for the most efficient development workflow.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Testing with Rust&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://nexte.st"&gt;cargo-nextest&lt;/a&gt; is the standard Rust test runner for NautilusTrader. Its key benefit is isolating each test in its own process, ensuring test reliability by avoiding interference.&lt;/p&gt; 
&lt;p&gt;You can install cargo-nextest by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install cargo-nextest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run Rust tests with &lt;code&gt;make cargo-test&lt;/code&gt;, which uses &lt;strong&gt;cargo-nextest&lt;/strong&gt; with an efficient profile.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you for considering contributing to NautilusTrader! We welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, the first step is to open an &lt;a href="https://github.com/nautechsystems/nautilus_trader/issues"&gt;issue&lt;/a&gt; on GitHub to discuss it with the team. This helps to ensure that your contribution will be well-aligned with the goals of the project and avoids duplication of effort.&lt;/p&gt; 
&lt;p&gt;Before getting started, be sure to review the &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md#open-source-scope"&gt;open-source scope&lt;/a&gt; outlined in the project’s roadmap to understand what’s in and out of scope.&lt;/p&gt; 
&lt;p&gt;Once you're ready to start working on your contribution, make sure to follow the guidelines outlined in the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file. This includes signing a Contributor License Agreement (CLA) to ensure that your contributions can be included in the project.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Pull requests should target the &lt;code&gt;develop&lt;/code&gt; branch (the default branch). This is where new features and improvements are integrated before release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Thank you again for your interest in NautilusTrader! We look forward to reviewing your contributions and working with you to improve the project.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our community of users and contributors on &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord&lt;/a&gt; to chat and stay up-to-date with the latest announcements and features of NautilusTrader. Whether you're a developer looking to contribute or just want to learn more about the platform, all are welcome on our Discord server.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader does not issue, promote, or endorse any cryptocurrency tokens. Any claims or communications suggesting otherwise are unauthorized and false.&lt;/p&gt; 
 &lt;p&gt;All official updates and communications from NautilusTrader will be shared exclusively through &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;, our &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord server&lt;/a&gt;, or our X (Twitter) account: &lt;a href="https://x.com/NautilusTrader"&gt;@NautilusTrader&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;If you encounter any suspicious activity, please report it to the appropriate platform and contact us at &lt;a href="mailto:info@nautechsystems.io"&gt;info@nautechsystems.io&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The source code for NautilusTrader is available on GitHub under the &lt;a href="https://www.gnu.org/licenses/lgpl-3.0.en.html"&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. Contributions to the project are welcome and require the completion of a standard &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CLA.md"&gt;Contributor License Agreement (CLA)&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;NautilusTrader™ is developed and maintained by Nautech Systems, a technology company specializing in the development of high-performance trading systems. For more information, visit &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;© 2015-2025 Nautech Systems Pty Ltd. All rights reserved.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ns-logo.png" alt="nautechsystems" title="nautechsystems"&gt; &lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ferris.png" width="128"&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ai-dynamo/dynamo</title>
      <link>https://github.com/ai-dynamo/dynamo</link>
      <description>&lt;p&gt;A Datacenter Scale Distributed Inference Serving Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-banner.png" alt="Dynamo banner"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://github.com/ai-dynamo/dynamo/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/ai-dynamo/dynamo" alt="GitHub Release"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/D92uqZRjCZ"&gt;&lt;img src="https://dcbadge.limes.pink/api/server/D92uqZRjCZ?style=flat" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/ai-dynamo/dynamo"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;| &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/dynamo/issues/762"&gt;Roadmap&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://docs.nvidia.com/dynamo/latest/index.html"&gt;Documentation&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/dynamo/tree/main/examples"&gt;Examples&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/enhancements"&gt;Design Proposals&lt;/a&gt;&lt;/strong&gt; |&lt;/p&gt; 
&lt;h1&gt;NVIDIA Dynamo&lt;/h1&gt; 
&lt;p&gt;High-throughput, low-latency inference framework designed for serving generative AI and reasoning models in multi-node distributed environments.&lt;/p&gt; 
&lt;h2&gt;Latest News&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;[08/05] Deploy &lt;code&gt;openai/gpt-oss-120b&lt;/code&gt; with disaggregated serving on NVIDIA Blackwell GPUs using Dynamo &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends/trtllm/gpt-oss.md"&gt;➡️ link&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The Era of Multi-GPU, Multi-Node&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-gpu-vertical.png" alt="Multi Node Multi-GPU topology" width="600"&gt; &lt;/p&gt; 
&lt;p&gt;Large language models are quickly outgrowing the memory and compute budget of any single GPU. Tensor-parallelism solves the capacity problem by spreading each layer across many GPUs—and sometimes many servers—but it creates a new one: how do you coordinate those shards, route requests, and share KV cache fast enough to feel like one accelerator? This orchestration gap is exactly what NVIDIA Dynamo is built to close.&lt;/p&gt; 
&lt;p&gt;Dynamo is designed to be inference engine agnostic (supports TRT-LLM, vLLM, SGLang or others) and captures LLM-specific capabilities such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Disaggregated prefill &amp;amp; decode inference&lt;/strong&gt; – Maximizes GPU throughput and facilitates trade off between throughput and latency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic GPU scheduling&lt;/strong&gt; – Optimizes performance based on fluctuating demand&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLM-aware request routing&lt;/strong&gt; – Eliminates unnecessary KV cache re-computation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Accelerated data transfer&lt;/strong&gt; – Reduces inference response time using NIXL.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;KV cache offloading&lt;/strong&gt; – Leverages multiple memory hierarchies for higher system throughput&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-architecture.png" alt="Dynamo architecture" width="600"&gt; &lt;/p&gt; 
&lt;h2&gt;Framework Support Matrix&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;vLLM&lt;/th&gt; 
   &lt;th&gt;SGLang&lt;/th&gt; 
   &lt;th&gt;TensorRT-LLM&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/disagg_serving.md"&gt;&lt;strong&gt;Disaggregated Serving&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/disagg_serving.md#conditional-disaggregation"&gt;&lt;strong&gt;Conditional Disaggregation&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/kv_cache_routing.md"&gt;&lt;strong&gt;KV-Aware Routing&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/sla_planner.md"&gt;&lt;strong&gt;SLA-Based Planner&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/load_planner.md"&gt;&lt;strong&gt;Load Based Planner&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/kvbm_architecture.md"&gt;&lt;strong&gt;KVBM&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To learn more about each framework and their capabilities, check out each framework's README!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends/vllm/README.md"&gt;vLLM&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends/sglang/README.md"&gt;SGLang&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends/trtllm/README.md"&gt;TensorRT-LLM&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Built in Rust for performance and in Python for extensibility, Dynamo is fully open-source and driven by a transparent, OSS (Open Source Software) first development approach.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;The following examples require a few system level packages. Recommended to use Ubuntu 24.04 with a x86_64 CPU. See &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/support_matrix.md"&gt;docs/support_matrix.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;1. Initial setup&lt;/h2&gt; 
&lt;p&gt;The Dynamo team recommends the &lt;code&gt;uv&lt;/code&gt; Python package manager, although any way works. Install uv:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install etcd and NATS (required)&lt;/h3&gt; 
&lt;p&gt;To coordinate across a data center, Dynamo relies on etcd and NATS. To run Dynamo locally, these need to be available.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://etcd.io/"&gt;etcd&lt;/a&gt; can be run directly as &lt;code&gt;./etcd&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nats.io/"&gt;nats&lt;/a&gt; needs jetstream enabled: &lt;code&gt;nats-server -js&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To quickly setup etcd &amp;amp; NATS, you can also run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# At the root of the repository:
docker compose -f deploy/docker-compose.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;2. Select an engine&lt;/h2&gt; 
&lt;p&gt;We publish Python wheels specialized for each of our supported engines: vllm, sglang, trtllm, and llama.cpp. The examples that follow use SGLang; continue reading for other engines.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;uv venv venv
source venv/bin/activate
uv pip install pip

# Choose one
uv pip install "ai-dynamo[sglang]"  #replace with [vllm], [trtllm], etc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3. Run Dynamo&lt;/h2&gt; 
&lt;h3&gt;Running an LLM API server&lt;/h3&gt; 
&lt;p&gt;Dynamo provides a simple way to spin up a local set of inference components including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;OpenAI Compatible Frontend&lt;/strong&gt; – High performance OpenAI compatible http api server written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Basic and Kv Aware Router&lt;/strong&gt; – Route and load balance traffic to a set of workers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Workers&lt;/strong&gt; – Set of pre-configured LLM serving engines.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;# Start an OpenAI compatible HTTP server, a pre-processor (prompt templating and tokenization) and a router:
python -m dynamo.frontend --http-port 8080

# Start the SGLang engine, connecting to NATS and etcd to receive requests. You can run several of these,
# both for the same model and for multiple models. The frontend node will discover them.
python -m dynamo.sglang.worker --model deepseek-ai/DeepSeek-R1-Distill-Llama-8B --skip-tokenizer-init
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Send a Request&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl localhost:8080/v1/chat/completions   -H "Content-Type: application/json"   -d '{
    "model": "deepseek-ai/DeepSeek-R1-Distill-Llama-8B",
    "messages": [
    {
        "role": "user",
        "content": "Hello, how are you?"
    }
    ],
    "stream":false,
    "max_tokens": 300
  }' | jq
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Rerun with &lt;code&gt;curl -N&lt;/code&gt; and change &lt;code&gt;stream&lt;/code&gt; in the request to &lt;code&gt;true&lt;/code&gt; to get the responses as soon as the engine issues them.&lt;/p&gt; 
&lt;h3&gt;Deploying Dynamo&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow the &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/guides/dynamo_deploy/README.md"&gt;Quickstart Guide&lt;/a&gt; to deploy on Kubernetes.&lt;/li&gt; 
 &lt;li&gt;Check out &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends"&gt;Backends&lt;/a&gt; to deploy various workflow configurations (e.g. SGLang with router, vLLM with disaggregated serving, etc.)&lt;/li&gt; 
 &lt;li&gt;Run some &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/examples"&gt;Examples&lt;/a&gt; to learn about building components in Dynamo and exploring various integrations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Engines&lt;/h1&gt; 
&lt;p&gt;Dynamo is designed to be inference engine agnostic. To use any engine with Dynamo, NATS and etcd need to be installed, along with a Dynamo frontend (&lt;code&gt;python -m dynamo.frontend [--interactive]&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;vLLM&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install ai-dynamo[vllm]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.vllm --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;vLLM attempts to allocate enough KV cache for the full context length at startup. If that does not fit in your available memory pass &lt;code&gt;--context-length &amp;lt;value&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To specify which GPUs to use set environment variable &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;SGLang&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;# Install libnuma
apt install -y libnuma-dev

uv pip install ai-dynamo[sglang]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.sglang.worker --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can pass any sglang flags directly to this worker, see &lt;a href="https://docs.sglang.ai/backend/server_arguments.html"&gt;https://docs.sglang.ai/backend/server_arguments.html&lt;/a&gt; . See there to use multiple GPUs.&lt;/p&gt; 
&lt;h2&gt;TensorRT-LLM&lt;/h2&gt; 
&lt;p&gt;It is recommended to use &lt;a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch"&gt;NGC PyTorch Container&lt;/a&gt; for running the TensorRT-LLM engine.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] Ensure that you select a PyTorch container image version that matches the version of TensorRT-LLM you are using. For example, if you are using &lt;code&gt;tensorrt-llm==1.0.0rc4&lt;/code&gt;, use the PyTorch container image version &lt;code&gt;25.05&lt;/code&gt;. To find the correct PyTorch container version for your desired &lt;code&gt;tensorrt-llm&lt;/code&gt; release, visit the &lt;a href="https://github.com/NVIDIA/TensorRT-LLM/raw/main/docker/Dockerfile.multi"&gt;TensorRT-LLM Dockerfile.multi&lt;/a&gt; on GitHub. Switch to the branch that matches your &lt;code&gt;tensorrt-llm&lt;/code&gt; version, and look for the &lt;code&gt;BASE_TAG&lt;/code&gt; line to identify the recommended PyTorch container tag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] Launch container with the following additional settings &lt;code&gt;--shm-size=1g --ulimit memlock=-1&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install prerequisites&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Optional step: Only required for Blackwell and Grace Hopper
pip3 install torch==2.7.1 torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128

sudo apt-get -y install libopenmpi-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Tip] You can learn more about these prequisites and known issues with TensorRT-LLM pip based installation &lt;a href="https://nvidia.github.io/TensorRT-LLM/installation/linux.html"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;After installing the pre-requisites above, install Dynamo&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install ai-dynamo[trtllm]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.trtllm --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To specify which GPUs to use set environment variable &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Developing Locally&lt;/h1&gt; 
&lt;h2&gt;1. Install libraries&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install -y build-essential libhwloc-dev libudev-dev pkg-config libclang-dev protobuf-compiler python3-dev cmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;macOS:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;# if brew is not installed on your system, install it
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;brew install cmake protobuf

## Check that Metal is accessible
xcrun -sdk macosx metal
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If Metal is accessible, you should see an error like &lt;code&gt;metal: error: no input files&lt;/code&gt;, which confirms it is installed correctly.&lt;/p&gt; 
&lt;h2&gt;2. Install Rust&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3. Create a Python virtual env:&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;uv venv dynamo
source dynamo/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;4. Install build tools&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install pip maturin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/PyO3/maturin"&gt;Maturin&lt;/a&gt; is the Rust&amp;lt;-&amp;gt;Python bindings build tool.&lt;/p&gt; 
&lt;h2&gt;5. Build the Rust bindings&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;cd lib/bindings/python
maturin develop --uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;6. Install the wheel&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;cd $PROJECT_ROOT
uv pip install .
# For development, use
export PYTHONPATH="${PYTHONPATH}:$(pwd)/components/frontend/src:$(pwd)/components/planner/src:$(pwd)/components/backends/vllm/src:$(pwd)/components/backends/sglang/src:$(pwd)/components/backends/trtllm/src:$(pwd)/components/backends/llama_cpp/src:$(pwd)/components/backends/mocker/src"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] Editable (&lt;code&gt;-e&lt;/code&gt;) does not work because the &lt;code&gt;dynamo&lt;/code&gt; package is split over multiple directories, one per backend.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You should now be able to run &lt;code&gt;python -m dynamo.frontend&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Remember that nats and etcd must be running (see earlier).&lt;/p&gt; 
&lt;p&gt;Set the environment variable &lt;code&gt;DYN_LOG&lt;/code&gt; to adjust the logging level; for example, &lt;code&gt;export DYN_LOG=debug&lt;/code&gt;. It has the same syntax as &lt;code&gt;RUST_LOG&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you use vscode or cursor, we have a .devcontainer folder built on &lt;a href="https://code.visualstudio.com/docs/devcontainers/containers"&gt;Microsofts Extension&lt;/a&gt;. For instructions see the &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/.devcontainer/README.md"&gt;ReadMe&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>