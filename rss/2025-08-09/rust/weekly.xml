<rss version="2.0">
  <channel>
    <title>GitHub Rust Weekly Trending</title>
    <description>Weekly Trending of Rust in GitHub</description>
    <pubDate>Fri, 08 Aug 2025 01:43:50 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>elkowar/eww</title>
      <link>https://github.com/elkowar/eww</link>
      <description>&lt;p&gt;ElKowars wacky widgets&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://deps.rs/repo/github/elkowar/eww"&gt;&lt;img src="https://deps.rs/repo/github/elkowar/eww/status.svg?sanitize=true" alt="dependency status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Eww&lt;/h1&gt; 
&lt;img src="https://raw.githubusercontent.com/elkowar/eww/master/.github/EwwLogo.svg?sanitize=true" height="100" align="left"&gt; 
&lt;p&gt;Elkowars Wacky Widgets is a standalone widget system made in Rust that allows you to implement your own, custom widgets in any window manager.&lt;/p&gt; 
&lt;p&gt;Documentation &lt;strong&gt;and instructions on how to install&lt;/strong&gt; can be found &lt;a href="https://elkowar.github.io/eww"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Dharmx also wrote a nice, beginner friendly introductory guide for eww &lt;a href="https://dharmx.is-a.dev/eww-powermenu/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Check out another cool project by me&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/elkowar/yolk/refs/heads/main/.github/images/yolk_logo.svg?sanitize=true" height="100" align="right"&gt; 
&lt;p&gt;I'm currently busy working &lt;a href="https://github.com/elkowar/yolk"&gt;yolk&lt;/a&gt;, which is a dotfile management solution that supports a unique spin on templating: &lt;em&gt;templating without template files&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;To find out more, check out the &lt;a href="https://elkowar.github.io/yolk"&gt;website and documentation&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;(Note that some of these still make use of the old configuration syntax.)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;A basic bar, see &lt;a href="https://raw.githubusercontent.com/elkowar/eww/master/examples/eww-bar"&gt;examples&lt;/a&gt; &lt;img src="https://raw.githubusercontent.com/elkowar/eww/master/examples/eww-bar/eww-bar.png" alt="Example 1"&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/druskus20/eugh"&gt;Some setups by Druskus20&lt;/a&gt; &lt;img src="https://raw.githubusercontent.com/druskus20/eugh/master/polybar-replacement/.github/preview.png" alt="Druskus20-bar"&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/elkowar/dots-of-war/tree/master/eww-bar/.config/eww-bar"&gt;My own vertical bar&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;img src="https://raw.githubusercontent.com/elkowar/dots-of-war/master/eww-bar/.config/eww-bar/showcase.png" height="400" width="auto"&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rxyhn/bspdots"&gt;Vertical Bar by Rxyhn&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align="left"&gt; 
 &lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/93292023/152228869-d618335a-7a1e-40f7-95f9-b1cf401be89e.gif" alt="Rxyhn-rice"&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/Axarva/dotfiles-2.0"&gt;Setup by Axarva&lt;/a&gt; &lt;img src="https://raw.githubusercontent.com/Axarva/dotfiles-2.0/main/screenshots/center.png" alt="Axarva-rice"&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/adi1090x/widgets"&gt;Setup by adi1090x&lt;/a&gt; &lt;img src="https://raw.githubusercontent.com/adi1090x/widgets/main/previews/dashboard.png" alt="Nordic"&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/owenrumney/eww-bar"&gt;i3 Bar replacement by owenrumney&lt;/a&gt; &lt;img src="https://raw.githubusercontent.com/owenrumney/eww-bar/master/.github/topbar.gif" alt="Top bar"&gt; &lt;img src="https://raw.githubusercontent.com/owenrumney/eww-bar/master/.github/bottombar.gif" alt="Bottom bar"&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/iSparsh/gross"&gt;Setups by iSparsh&lt;/a&gt; &lt;img src="https://user-images.githubusercontent.com/57213270/140309158-e65cbc1d-f3a8-4aec-848c-eef800de3364.png" alt="iSparsh-gross"&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/Saimoomedits/eww-widgets"&gt;topbar by saimoomedits&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/72156551/153045183-227b62b2-223a-4a5b-a499-3f31044b5b65.gif" alt="eww-top-bar"&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Nycta-b424b3c7/eww_activate-linux"&gt;Activate Linux by Nycta&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align="left"&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Nycta-b424b3c7/eww_activate-linux/refs/heads/master/activate-linux.png" alt="Activate Linux"&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Contribewwting&lt;/h2&gt; 
&lt;p&gt;If you want to contribute anything, like adding new widgets, features, or subcommands (including sample configs), you should definitely do so.&lt;/p&gt; 
&lt;h3&gt;Steps&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork this repository&lt;/li&gt; 
 &lt;li&gt;Install dependencies&lt;/li&gt; 
 &lt;li&gt;Smash your head against the keyboard from frustration (coding is hard)&lt;/li&gt; 
 &lt;li&gt;Write down your changes in CHANGELOG.md&lt;/li&gt; 
 &lt;li&gt;Open a pull request once you're finished&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Widget&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Widget"&gt;https://en.wikipedia.org/wiki/Wikipedia:Widget&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nautechsystems/nautilus_trader</title>
      <link>https://github.com/nautechsystems/nautilus_trader</link>
      <description>&lt;p&gt;A high-performance algorithmic trading platform and event-driven backtester&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader-logo.png" width="500"&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://codecov.io/gh/nautechsystems/nautilus_trader"&gt;&lt;img src="https://codecov.io/gh/nautechsystems/nautilus_trader/branch/master/graph/badge.svg?token=DXO9QQI40H" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/nautechsystems/nautilus_trader"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="codspeed"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/pypi/pyversions/nautilus_trader" alt="pythons"&gt; &lt;img src="https://img.shields.io/pypi/v/nautilus_trader" alt="pypi-version"&gt; &lt;img src="https://img.shields.io/pypi/format/nautilus_trader?color=blue" alt="pypi-format"&gt; &lt;a href="https://pepy.tech/project/nautilus-trader"&gt;&lt;img src="https://pepy.tech/badge/nautilus-trader" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NautilusTrader"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Branch&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fmaster%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fnightly%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fdevelop%2Fversion.json" alt="version"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=develop" alt="build"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Rust&lt;/th&gt; 
   &lt;th align="left"&gt;Python&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.88.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13*&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;* Windows builds are currently pinned to CPython 3.13.2, see &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/docs/getting_started/installation.md"&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href="https://nautilustrader.io/docs/"&gt;https://nautilustrader.io/docs/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: &lt;a href="mailto:support@nautilustrader.io"&gt;support@nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is an open-source, high-performance, production-grade algorithmic trading platform, providing quantitative traders with the ability to backtest portfolios of automated trading strategies on historical data with an event-driven engine, and also deploy those same strategies live, with no code changes.&lt;/p&gt; 
&lt;p&gt;The platform is &lt;em&gt;AI-first&lt;/em&gt;, designed to develop and deploy algorithmic trading strategies within a highly performant and robust Python-native environment. This helps to address the parity challenge of keeping the Python research/backtest environment consistent with the production live trading environment.&lt;/p&gt; 
&lt;p&gt;NautilusTrader's design, architecture, and implementation philosophy prioritizes software correctness and safety at the highest level, with the aim of supporting Python-native, mission-critical, trading system backtesting and live deployment workloads.&lt;/p&gt; 
&lt;p&gt;The platform is also universal, and asset-class-agnostic — with any REST API or WebSocket feed able to be integrated via modular adapters. It supports high-frequency trading across a wide range of asset classes and instrument types including FX, Equities, Futures, Options, Crypto and Betting, enabling seamless operations across multiple venues simultaneously.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader.png" alt="nautilus-trader" title="nautilus-trader"&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Core is written in Rust with asynchronous networking using &lt;a href="https://crates.io/crates/tokio"&gt;tokio&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Rust-powered type- and thread-safety, with optional Redis-backed state persistence.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt;: OS independent, runs on Linux, macOS, and Windows. Deploy using Docker.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Modular adapters mean any REST API or WebSocket feed can be integrated.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: Time in force &lt;code&gt;IOC&lt;/code&gt;, &lt;code&gt;FOK&lt;/code&gt;, &lt;code&gt;GTC&lt;/code&gt;, &lt;code&gt;GTD&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, &lt;code&gt;AT_THE_OPEN&lt;/code&gt;, &lt;code&gt;AT_THE_CLOSE&lt;/code&gt;, advanced order types and conditional triggers. Execution instructions &lt;code&gt;post-only&lt;/code&gt;, &lt;code&gt;reduce-only&lt;/code&gt;, and icebergs. Contingency orders including &lt;code&gt;OCO&lt;/code&gt;, &lt;code&gt;OUO&lt;/code&gt;, &lt;code&gt;OTO&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Add user-defined custom components, or assemble entire systems from scratch leveraging the &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; and &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtesting&lt;/strong&gt;: Run with multiple venues, instruments and strategies simultaneously using historical quote tick, trade tick, bar, order book and custom data with nanosecond resolution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: Use identical strategy implementations between backtesting and live deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-venue&lt;/strong&gt;: Multiple venue capabilities facilitate market-making and statistical arbitrage strategies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Training&lt;/strong&gt;: Backtest engine fast enough to be used to train AI trading agents (RL/ES).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-art.png" alt="Alt text" title="nautilus"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;nautilus - from ancient Greek 'sailor' and naus 'ship'.&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;The nautilus shell consists of modular chambers with a growth factor which approximates a logarithmic spiral. The idea is that this can be translated to the aesthetics of design and architecture.&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Why NautilusTrader?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Highly performant event-driven Python&lt;/strong&gt;: Native binary core components.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parity between backtesting and live trading&lt;/strong&gt;: Identical strategy code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reduced operational risk&lt;/strong&gt;: Enhanced risk management functionality, logical accuracy, and type safety.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly extendable&lt;/strong&gt;: Message bus, custom components and actors, custom data, custom adapters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Traditionally, trading strategy research and backtesting might be conducted in Python using vectorized methods, with the strategy then needing to be reimplemented in a more event-driven way using C++, C#, Java or other statically typed language(s). The reasoning here is that vectorized backtesting code cannot express the granular time and event dependent complexity of real-time trading, where compiled languages have proven to be more suitable due to their inherently higher performance, and type safety.&lt;/p&gt; 
&lt;p&gt;One of the key advantages of NautilusTrader here, is that this reimplementation step is now circumvented - as the critical core components of the platform have all been written entirely in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; or &lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;. This means we're using the right tools for the job, where systems programming languages compile performant binaries, with CPython C extension modules then able to offer a Python-native environment, suitable for professional quantitative traders and trading firms.&lt;/p&gt; 
&lt;h2&gt;Why Python?&lt;/h2&gt; 
&lt;p&gt;Python was originally created decades ago as a simple scripting language with a clean straightforward syntax. It has since evolved into a fully fledged general purpose object-oriented programming language. Based on the TIOBE index, Python is currently the most popular programming language in the world. Not only that, Python has become the &lt;em&gt;de facto lingua franca&lt;/em&gt; of data science, machine learning, and artificial intelligence.&lt;/p&gt; 
&lt;p&gt;developer/user communities. However, Python has performance and typing limitations for large-scale, latency-sensitive systems. Cython addresses many of these issues by introducing static typing into Python's rich ecosystem of libraries and communities.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is "blazingly fast" and memory-efficient (comparable to C and C++) with no garbage collector. It can power mission-critical systems, run on embedded devices, and easily integrates with other languages.&lt;/p&gt; 
&lt;p&gt;Rust’s rich type system and ownership model guarantees memory-safety and thread-safety deterministically — eliminating many classes of bugs at compile-time.&lt;/p&gt; 
&lt;p&gt;The project increasingly utilizes Rust for core performance-critical components. Python bindings are implemented via Cython and &lt;a href="https://pyo3.rs"&gt;PyO3&lt;/a&gt;—no Rust toolchain is required at install time.&lt;/p&gt; 
&lt;p&gt;This project makes the &lt;a href="https://raphlinus.github.io/rust/2020/01/18/soundness-pledge.html"&gt;Soundness Pledge&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;“The intent of this project is to be free of soundness bugs. The developers will do their best to avoid them, and welcome help in analyzing and fixing them.”&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; NautilusTrader relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally equal to the latest stable release of Rust.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is modularly designed to work with &lt;em&gt;adapters&lt;/em&gt;, enabling connectivity to trading venues and data providers by translating their raw APIs into a unified interface and normalized domain model.&lt;/p&gt; 
&lt;p&gt;The following integrations are currently supported; see &lt;a href="https://nautilustrader.io/docs/latest/integrations/"&gt;docs/integrations/&lt;/a&gt; for details:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Name&lt;/th&gt; 
   &lt;th align="left"&gt;ID&lt;/th&gt; 
   &lt;th align="left"&gt;Type&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://betfair.com"&gt;Betfair&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BETFAIR&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sports Betting Exchange&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/betfair.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://binance.com"&gt;Binance&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://binance.us"&gt;Binance US&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.binance.com/en/futures"&gt;Binance Futures&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.bybit.com"&gt;Bybit&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BYBIT&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/bybit.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.coinbase.com/en/international-exchange"&gt;Coinbase International&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;COINBASE_INTX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/coinbase_intx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://databento.com"&gt;Databento&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DATABENTO&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/databento.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://dydx.exchange/"&gt;dYdX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DYDX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/dydx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://hyperliquid.xyz"&gt;Hyperliquid&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;HYPERLIQUID&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/building-orange" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/hyperliquid.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.interactivebrokers.com"&gt;Interactive Brokers&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;INTERACTIVE_BROKERS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Brokerage (multi-venue)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/ib.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://okx.com"&gt;OKX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;OKX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/beta-yellow" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/okx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://polymarket.com"&gt;Polymarket&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;POLYMARKET&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Prediction Market (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/polymarket.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://tardis.dev"&gt;Tardis&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;TARDIS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/tardis.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ID&lt;/strong&gt;: The default client ID for the integrations adapter clients.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: The type of integration (often the venue type).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;building&lt;/code&gt;: Under construction and likely not in a usable state.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: Completed to a minimally working state and in a beta testing phase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level (some bugs may still remain).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/integrations/index.html"&gt;Integrations&lt;/a&gt; documentation for further details.&lt;/p&gt; 
&lt;h2&gt;Versioning and releases&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NautilusTrader is still under active development&lt;/strong&gt;. Some features may be incomplete, and while the API is becoming more stable, breaking changes can occur between releases. We strive to document these changes in the release notes on a &lt;strong&gt;best-effort basis&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;We aim to follow a &lt;strong&gt;bi-weekly release schedule&lt;/strong&gt;, though experimental or larger features may cause delays.&lt;/p&gt; 
&lt;h3&gt;Branches&lt;/h3&gt; 
&lt;p&gt;We aim to maintain a stable, passing build across all branches.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: Reflects the source code for the latest released version; recommended for production use.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;: Daily snapshots of the &lt;code&gt;develop&lt;/code&gt; branch for early testing; merged at &lt;strong&gt;14:00 UTC&lt;/strong&gt; or on demand.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt;: Active development branch for contributors and feature work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Our &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md"&gt;roadmap&lt;/a&gt; aims to achieve a &lt;strong&gt;stable API for version 2.x&lt;/strong&gt; (likely after the Rust port). Once this milestone is reached, we plan to implement a formal deprecation process for any API changes. This approach allows us to maintain a rapid development pace for now.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Precision mode&lt;/h2&gt; 
&lt;p&gt;NautilusTrader supports two precision modes for its core value types (&lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Quantity&lt;/code&gt;, &lt;code&gt;Money&lt;/code&gt;), which differ in their internal bit-width and maximum decimal precision.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High-precision&lt;/strong&gt;: 128-bit integers with up to 16 decimals of precision, and a larger value range.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Standard-precision&lt;/strong&gt;: 64-bit integers with up to 9 decimals of precision, and a smaller value range.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;By default, the official Python wheels &lt;strong&gt;ship&lt;/strong&gt; in high-precision (128-bit) mode on Linux and macOS. On Windows, only standard-precision (64-bit) is available due to the lack of native 128-bit integer support. For the Rust crates, the default is standard-precision unless you explicitly enable the &lt;code&gt;high-precision&lt;/code&gt; feature flag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rust feature flag&lt;/strong&gt;: To enable high-precision mode in Rust, add the &lt;code&gt;high-precision&lt;/code&gt; feature to your Cargo.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
nautilus_model = { version = "*", features = ["high-precision"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;We recommend using the latest supported version of Python and installing &lt;a href="https://pypi.org/project/nautilus_trader/"&gt;nautilus_trader&lt;/a&gt; inside a virtual environment to isolate dependencies.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;There are two supported ways to install&lt;/strong&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Pre-built binary wheel from PyPI &lt;em&gt;or&lt;/em&gt; the Nautech Systems package index.&lt;/li&gt; 
 &lt;li&gt;Build from source.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;We highly recommend installing using the &lt;a href="https://docs.astral.sh/uv"&gt;uv&lt;/a&gt; package manager with a "vanilla" CPython.&lt;/p&gt; 
 &lt;p&gt;Conda and other Python distributions &lt;em&gt;may&lt;/em&gt; work but aren’t officially supported.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;From PyPI&lt;/h3&gt; 
&lt;p&gt;To install the latest binary wheel (or sdist package) from PyPI using Python's pip package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From the Nautech Systems package index&lt;/h3&gt; 
&lt;p&gt;The Nautech Systems package index (&lt;code&gt;packages.nautechsystems.io&lt;/code&gt;) complies with &lt;a href="https://peps.python.org/pep-0503/"&gt;PEP-503&lt;/a&gt; and hosts both stable and development binary wheels for &lt;code&gt;nautilus_trader&lt;/code&gt;. This enables users to install either the latest stable release or pre-release versions for testing.&lt;/p&gt; 
&lt;h4&gt;Stable wheels&lt;/h4&gt; 
&lt;p&gt;Stable wheels correspond to official releases of &lt;code&gt;nautilus_trader&lt;/code&gt; on PyPI, and use standard versioning.&lt;/p&gt; 
&lt;p&gt;To install the latest stable release:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Development wheels&lt;/h4&gt; 
&lt;p&gt;Development wheels are published from both the &lt;code&gt;nightly&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches, allowing users to test features and fixes ahead of stable releases.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Wheels from the &lt;code&gt;develop&lt;/code&gt; branch are only built for the Linux x86_64 platform to save time and compute resources, while &lt;code&gt;nightly&lt;/code&gt; wheels support additional platforms as shown below.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Nightly&lt;/th&gt; 
   &lt;th align="left"&gt;Develop&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;This process also helps preserve compute resources and ensures easy access to the exact binaries tested in CI pipelines, while adhering to &lt;a href="https://peps.python.org/pep-0440/"&gt;PEP-440&lt;/a&gt; versioning standards:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; wheels use the version format &lt;code&gt;dev{date}+{build_number}&lt;/code&gt; (e.g., &lt;code&gt;1.208.0.dev20241212+7001&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; wheels use the version format &lt;code&gt;a{date}&lt;/code&gt; (alpha) (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;We do not recommend using development wheels in production environments, such as live trading controlling real capital.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installation commands&lt;/h4&gt; 
&lt;p&gt;By default, pip will install the latest stable release. Adding the &lt;code&gt;--pre&lt;/code&gt; flag ensures that pre-release versions, including development wheels, are considered.&lt;/p&gt; 
&lt;p&gt;To install the latest available pre-release (including development wheels):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --pre --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install a specific development wheel (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt; for December 12, 2024):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install nautilus_trader==1.208.0a20241212 --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available versions&lt;/h4&gt; 
&lt;p&gt;You can view all available versions of &lt;code&gt;nautilus_trader&lt;/code&gt; on the &lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;package index&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To programmatically fetch and list available versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -s https://packages.nautechsystems.io/simple/nautilus-trader/index.html | grep -oP '(?&amp;lt;=&amp;lt;a href=")[^"]+(?=")' | awk -F'#' '{print $1}' | sort
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Branch updates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): Build and publish continuously with every merged commit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): Build and publish daily when we automatically merge the &lt;code&gt;develop&lt;/code&gt; branch at &lt;strong&gt;14:00 UTC&lt;/strong&gt; (if there are changes).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Retention policies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): We retain only the most recent wheel build.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): We retain only the 10 most recent wheel builds.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;From Source&lt;/h3&gt; 
&lt;p&gt;It's possible to install from source using pip if you first install the build dependencies as specified in the &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; (the Rust toolchain installer):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl https://sh.rustup.rs -sSf | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Download and install &lt;a href="https://win.rustup.rs/x86_64"&gt;&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;Install "Desktop development with C++" with &lt;a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16"&gt;Build Tools for Visual Studio 2019&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;rustc --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;cargo&lt;/code&gt; in the current shell:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Start a new PowerShell&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://clang.llvm.org/"&gt;clang&lt;/a&gt; (a C language frontend for LLVM):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get install clang
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ol&gt; 
     &lt;li&gt; &lt;p&gt;Add Clang to your &lt;a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;amp;rel=16"&gt;Build Tools for Visual Studio 2019&lt;/a&gt;:&lt;/p&gt; 
      &lt;ul&gt; 
       &lt;li&gt;Start | Visual Studio Installer | Modify | C++ Clang tools for Windows (12.0.0 - x64…) = checked | Modify&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;clang&lt;/code&gt; in the current shell:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-powershell"&gt;[System.Environment]::SetEnvironmentVariable('path', "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\Llvm\x64\bin\;" + $env:Path,"User")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;clang --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install uv (see the &lt;a href="https://docs.astral.sh/uv/getting-started/installation"&gt;uv installation guide&lt;/a&gt; for more details):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the source with &lt;code&gt;git&lt;/code&gt;, and install from the project's root directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;git clone --branch develop --depth 1 https://github.com/nautechsystems/nautilus_trader
cd nautilus_trader
uv sync --all-extras
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;--depth 1&lt;/code&gt; flag fetches just the latest commit for a faster, lightweight clone.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start="6"&gt; 
 &lt;li&gt; &lt;p&gt;Set environment variables for PyO3 compilation (Linux and macOS only):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Set the library path for the Python interpreter (in this case Python 3.13.4)
export LD_LIBRARY_PATH="$HOME/.local/share/uv/python/cpython-3.13.4-linux-x86_64-gnu/lib:$LD_LIBRARY_PATH"

# Set the Python executable path for PyO3
export PYO3_PYTHON=$(pwd)/.venv/bin/python
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Adjust the Python version and architecture in the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to match your system. Use &lt;code&gt;uv python list&lt;/code&gt; to find the exact path for your Python installation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for other options and further details.&lt;/p&gt; 
&lt;h2&gt;Redis&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href="https://redis.io"&gt;Redis&lt;/a&gt; with NautilusTrader is &lt;strong&gt;optional&lt;/strong&gt; and only required if configured as the backend for a &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; database or &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;. See the &lt;strong&gt;Redis&lt;/strong&gt; section of the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation#redis"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Makefile&lt;/h2&gt; 
&lt;p&gt;A &lt;code&gt;Makefile&lt;/code&gt; is provided to automate most installation and build tasks for development. Some of the targets include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;make install&lt;/code&gt;: Installs in &lt;code&gt;release&lt;/code&gt; build mode with all dependency groups and extras.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-debug&lt;/code&gt;: Same as &lt;code&gt;make install&lt;/code&gt; but with &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-just-deps&lt;/code&gt;: Installs just the &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; dependencies (does not install package).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;: Runs the build script in &lt;code&gt;release&lt;/code&gt; build mode (default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-debug&lt;/code&gt;: Runs the build script in &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;release&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel-debug&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;debug&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make cargo-test&lt;/code&gt;: Runs all Rust crate tests using &lt;code&gt;cargo-nextest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Deletes all build results, such as &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt; files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make distclean&lt;/code&gt;: &lt;strong&gt;CAUTION&lt;/strong&gt; Removes all artifacts not in the git index from the repository. This includes source files which have not been &lt;code&gt;git add&lt;/code&gt;ed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make docs&lt;/code&gt;: Builds the documentation HTML using Sphinx.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pre-commit&lt;/code&gt;: Runs the pre-commit checks over all files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make ruff&lt;/code&gt;: Runs ruff over all files using the &lt;code&gt;pyproject.toml&lt;/code&gt; config (with autofix).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pytest&lt;/code&gt;: Runs all tests with &lt;code&gt;pytest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make test-performance&lt;/code&gt;: Runs performance tests with &lt;a href="https://codspeed.io"&gt;codspeed&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make help&lt;/code&gt; for documentation on all available make targets.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/crates/infrastructure/TESTS.md"&gt;crates/infrastructure/TESTS.md&lt;/a&gt; file for running the infrastructure integration tests.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Indicators and strategies can be developed in both Python and Cython. For performance and latency-sensitive applications, we recommend using Cython. Below are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/indicators/ema_python.py"&gt;indicator&lt;/a&gt; example written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/indicators/"&gt;indicator&lt;/a&gt; examples written in Cython.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/strategies/"&gt;strategy&lt;/a&gt; examples written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/examples/backtest/"&gt;backtest&lt;/a&gt; examples using a &lt;code&gt;BacktestEngine&lt;/code&gt; directly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;p&gt;Docker containers are built using the base image &lt;code&gt;python:3.12-slim&lt;/code&gt; with the following variant tags:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:latest&lt;/code&gt; has the latest release version installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:latest&lt;/code&gt; has the latest release version installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can pull the container images as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/&amp;lt;image_variant_tag&amp;gt; --platform linux/amd64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can launch the backtest example container by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/jupyterlab:nightly --platform linux/amd64
docker run -p 8888:8888 ghcr.io/nautechsystems/jupyterlab:nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open your browser at the following address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http://127.0.0.1:8888/lab
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader currently exceeds the rate limit for Jupyter notebook logging (stdout output). Therefore, we set the &lt;code&gt;log_level&lt;/code&gt; to &lt;code&gt;ERROR&lt;/code&gt; in the examples. Lowering this level to see more logging will cause the notebook to hang during cell execution. We are investigating a fix that may involve either raising the configured rate limits for Jupyter or throttling the log flushing from Nautilus.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab/issues/12845"&gt;https://github.com/jupyterlab/jupyterlab/issues/12845&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/deshaw/jupyterlab-limit-output"&gt;https://github.com/deshaw/jupyterlab-limit-output&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;We aim to provide the most pleasant developer experience possible for this hybrid codebase of Python, Cython and Rust. See the &lt;a href="https://nautilustrader.io/docs/latest/developer_guide/index.html"&gt;Developer Guide&lt;/a&gt; for helpful information.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make build-debug&lt;/code&gt; to compile after changes to Rust or Cython code for the most efficient development workflow.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Testing with Rust&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://nexte.st"&gt;cargo-nextest&lt;/a&gt; is the standard Rust test runner for NautilusTrader. Its key benefit is isolating each test in its own process, ensuring test reliability by avoiding interference.&lt;/p&gt; 
&lt;p&gt;You can install cargo-nextest by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install cargo-nextest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run Rust tests with &lt;code&gt;make cargo-test&lt;/code&gt;, which uses &lt;strong&gt;cargo-nextest&lt;/strong&gt; with an efficient profile.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you for considering contributing to NautilusTrader! We welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, the first step is to open an &lt;a href="https://github.com/nautechsystems/nautilus_trader/issues"&gt;issue&lt;/a&gt; on GitHub to discuss it with the team. This helps to ensure that your contribution will be well-aligned with the goals of the project and avoids duplication of effort.&lt;/p&gt; 
&lt;p&gt;Before getting started, be sure to review the &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md#open-source-scope"&gt;open-source scope&lt;/a&gt; outlined in the project’s roadmap to understand what’s in and out of scope.&lt;/p&gt; 
&lt;p&gt;Once you're ready to start working on your contribution, make sure to follow the guidelines outlined in the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file. This includes signing a Contributor License Agreement (CLA) to ensure that your contributions can be included in the project.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Pull requests should target the &lt;code&gt;develop&lt;/code&gt; branch (the default branch). This is where new features and improvements are integrated before release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Thank you again for your interest in NautilusTrader! We look forward to reviewing your contributions and working with you to improve the project.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our community of users and contributors on &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord&lt;/a&gt; to chat and stay up-to-date with the latest announcements and features of NautilusTrader. Whether you're a developer looking to contribute or just want to learn more about the platform, all are welcome on our Discord server.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader does not issue, promote, or endorse any cryptocurrency tokens. Any claims or communications suggesting otherwise are unauthorized and false.&lt;/p&gt; 
 &lt;p&gt;All official updates and communications from NautilusTrader will be shared exclusively through &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;, our &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord server&lt;/a&gt;, or our X (Twitter) account: &lt;a href="https://x.com/NautilusTrader"&gt;@NautilusTrader&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;If you encounter any suspicious activity, please report it to the appropriate platform and contact us at &lt;a href="mailto:info@nautechsystems.io"&gt;info@nautechsystems.io&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The source code for NautilusTrader is available on GitHub under the &lt;a href="https://www.gnu.org/licenses/lgpl-3.0.en.html"&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. Contributions to the project are welcome and require the completion of a standard &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CLA.md"&gt;Contributor License Agreement (CLA)&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;NautilusTrader™ is developed and maintained by Nautech Systems, a technology company specializing in the development of high-performance trading systems. For more information, visit &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;© 2015-2025 Nautech Systems Pty Ltd. All rights reserved.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ns-logo.png" alt="nautechsystems" title="nautechsystems"&gt; &lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ferris.png" width="128"&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pola-rs/polars</title>
      <link>https://github.com/pola-rs/polars</link>
      <description>&lt;p&gt;Dataframes powered by a multithreaded, vectorized query engine, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://pola.rs"&gt; &lt;img src="https://raw.githubusercontent.com/pola-rs/polars-static/master/banner/polars_github_banner.svg?sanitize=true" alt="Polars logo"&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://crates.io/crates/polars"&gt; &lt;img src="https://img.shields.io/crates/v/polars.svg?sanitize=true" alt="crates.io Latest Release"&gt; &lt;/a&gt; 
 &lt;a href="https://pypi.org/project/polars/"&gt; &lt;img src="https://img.shields.io/pypi/v/polars.svg?sanitize=true" alt="PyPi Latest Release"&gt; &lt;/a&gt; 
 &lt;a href="https://www.npmjs.com/package/nodejs-polars"&gt; &lt;img src="https://img.shields.io/npm/v/nodejs-polars.svg?sanitize=true" alt="NPM Latest Release"&gt; &lt;/a&gt; 
 &lt;a href="https://community.r-multiverse.org/polars"&gt; &lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fcommunity.r-multiverse.org%2Fapi%2Fpackages%2Fpolars&amp;amp;query=%24.Version&amp;amp;label=r-multiverse" alt="R-multiverse Latest Release"&gt; &lt;/a&gt; 
 &lt;a href="https://doi.org/10.5281/zenodo.7697217"&gt; &lt;img src="https://zenodo.org/badge/DOI/10.5281/zenodo.7697217.svg?sanitize=true" alt="DOI Latest Release"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;b&gt;Documentation&lt;/b&gt;: &lt;a href="https://docs.pola.rs/api/python/stable/reference/index.html"&gt;Python&lt;/a&gt; - &lt;a href="https://docs.rs/polars/latest/polars/"&gt;Rust&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/nodejs-polars/index.html"&gt;Node.js&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/r-polars/index.html"&gt;R&lt;/a&gt; | &lt;b&gt;StackOverflow&lt;/b&gt;: &lt;a href="https://stackoverflow.com/questions/tagged/python-polars"&gt;Python&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/rust-polars"&gt;Rust&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/nodejs-polars"&gt;Node.js&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/r-polars"&gt;R&lt;/a&gt; | &lt;a href="https://docs.pola.rs/"&gt;User guide&lt;/a&gt; | &lt;a href="https://discord.gg/4UfP5cfBE7"&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Polars: Blazingly fast DataFrames in Rust, Python, Node.js, R, and SQL&lt;/h2&gt; 
&lt;p&gt;Polars is a DataFrame interface on top of an OLAP Query Engine implemented in Rust using &lt;a href="https://arrow.apache.org/docs/format/Columnar.html"&gt;Apache Arrow Columnar Format&lt;/a&gt; as the memory model.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lazy | eager execution&lt;/li&gt; 
 &lt;li&gt;Multi-threaded&lt;/li&gt; 
 &lt;li&gt;SIMD&lt;/li&gt; 
 &lt;li&gt;Query optimization&lt;/li&gt; 
 &lt;li&gt;Powerful expression API&lt;/li&gt; 
 &lt;li&gt;Hybrid Streaming (larger-than-RAM datasets)&lt;/li&gt; 
 &lt;li&gt;Rust | Python | NodeJS | R | ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more, read the &lt;a href="https://docs.pola.rs/"&gt;user guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Python&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; import polars as pl
&amp;gt;&amp;gt;&amp;gt; df = pl.DataFrame(
...     {
...         "A": [1, 2, 3, 4, 5],
...         "fruits": ["banana", "banana", "apple", "apple", "banana"],
...         "B": [5, 4, 3, 2, 1],
...         "cars": ["beetle", "audi", "beetle", "beetle", "beetle"],
...     }
... )

# embarrassingly parallel execution &amp;amp; very expressive query language
&amp;gt;&amp;gt;&amp;gt; df.sort("fruits").select(
...     "fruits",
...     "cars",
...     pl.lit("fruits").alias("literal_string_fruits"),
...     pl.col("B").filter(pl.col("cars") == "beetle").sum(),
...     pl.col("A").filter(pl.col("B") &amp;gt; 2).sum().over("cars").alias("sum_A_by_cars"),
...     pl.col("A").sum().over("fruits").alias("sum_A_by_fruits"),
...     pl.col("A").reverse().over("fruits").alias("rev_A_by_fruits"),
...     pl.col("A").sort_by("B").over("fruits").alias("sort_A_by_B_by_fruits"),
... )
shape: (5, 8)
┌──────────┬──────────┬──────────────┬─────┬─────────────┬─────────────┬─────────────┬─────────────┐
│ fruits   ┆ cars     ┆ literal_stri ┆ B   ┆ sum_A_by_ca ┆ sum_A_by_fr ┆ rev_A_by_fr ┆ sort_A_by_B │
│ ---      ┆ ---      ┆ ng_fruits    ┆ --- ┆ rs          ┆ uits        ┆ uits        ┆ _by_fruits  │
│ str      ┆ str      ┆ ---          ┆ i64 ┆ ---         ┆ ---         ┆ ---         ┆ ---         │
│          ┆          ┆ str          ┆     ┆ i64         ┆ i64         ┆ i64         ┆ i64         │
╞══════════╪══════════╪══════════════╪═════╪═════════════╪═════════════╪═════════════╪═════════════╡
│ "apple"  ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 7           ┆ 4           ┆ 4           │
│ "apple"  ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 7           ┆ 3           ┆ 3           │
│ "banana" ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 8           ┆ 5           ┆ 5           │
│ "banana" ┆ "audi"   ┆ "fruits"     ┆ 11  ┆ 2           ┆ 8           ┆ 2           ┆ 2           │
│ "banana" ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 8           ┆ 1           ┆ 1           │
└──────────┴──────────┴──────────────┴─────┴─────────────┴─────────────┴─────────────┴─────────────┘
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SQL&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; df = pl.scan_csv("docs/assets/data/iris.csv")
&amp;gt;&amp;gt;&amp;gt; ## OPTION 1
&amp;gt;&amp;gt;&amp;gt; # run SQL queries on frame-level
&amp;gt;&amp;gt;&amp;gt; df.sql("""
...	SELECT species,
...	  AVG(sepal_length) AS avg_sepal_length
...	FROM self
...	GROUP BY species
...	""").collect()
shape: (3, 2)
┌────────────┬──────────────────┐
│ species    ┆ avg_sepal_length │
│ ---        ┆ ---              │
│ str        ┆ f64              │
╞════════════╪══════════════════╡
│ Virginica  ┆ 6.588            │
│ Versicolor ┆ 5.936            │
│ Setosa     ┆ 5.006            │
└────────────┴──────────────────┘
&amp;gt;&amp;gt;&amp;gt; ## OPTION 2
&amp;gt;&amp;gt;&amp;gt; # use pl.sql() to operate on the global context
&amp;gt;&amp;gt;&amp;gt; df2 = pl.LazyFrame({
...    "species": ["Setosa", "Versicolor", "Virginica"],
...    "blooming_season": ["Spring", "Summer", "Fall"]
...})
&amp;gt;&amp;gt;&amp;gt; pl.sql("""
... SELECT df.species,
...     AVG(df.sepal_length) AS avg_sepal_length,
...     df2.blooming_season
... FROM df
... LEFT JOIN df2 ON df.species = df2.species
... GROUP BY df.species, df2.blooming_season
... """).collect()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SQL commands can also be run directly from your terminal using the Polars CLI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# run an inline SQL query
&amp;gt; polars -c "SELECT species, AVG(sepal_length) AS avg_sepal_length, AVG(sepal_width) AS avg_sepal_width FROM read_csv('docs/assets/data/iris.csv') GROUP BY species;"

# run interactively
&amp;gt; polars
Polars CLI v0.3.0
Type .help for help.

&amp;gt; SELECT species, AVG(sepal_length) AS avg_sepal_length, AVG(sepal_width) AS avg_sepal_width FROM read_csv('docs/assets/data/iris.csv') GROUP BY species;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the &lt;a href="https://github.com/pola-rs/polars-cli"&gt;Polars CLI repository&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Performance 🚀🚀&lt;/h2&gt; 
&lt;h3&gt;Blazingly fast&lt;/h3&gt; 
&lt;p&gt;Polars is very fast. In fact, it is one of the best performing solutions available. See the &lt;a href="https://www.pola.rs/benchmarks.html"&gt;PDS-H benchmarks&lt;/a&gt; results.&lt;/p&gt; 
&lt;h3&gt;Lightweight&lt;/h3&gt; 
&lt;p&gt;Polars is also very lightweight. It comes with zero required dependencies, and this shows in the import times:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;polars: 70ms&lt;/li&gt; 
 &lt;li&gt;numpy: 104ms&lt;/li&gt; 
 &lt;li&gt;pandas: 520ms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Handles larger-than-RAM data&lt;/h3&gt; 
&lt;p&gt;If you have data that does not fit into memory, Polars' query engine is able to process your query (or parts of your query) in a streaming fashion. This drastically reduces memory requirements, so you might be able to process your 250GB dataset on your laptop. Collect with &lt;code&gt;collect(engine='streaming')&lt;/code&gt; to run the query streaming. (This might be a little slower, but it is still very fast!)&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;p&gt;Install the latest Polars version with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install polars
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We also have a conda package (&lt;code&gt;conda install -c conda-forge polars&lt;/code&gt;), however pip is the preferred way to install Polars.&lt;/p&gt; 
&lt;p&gt;Install Polars with all optional dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install 'polars[all]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install a subset of all optional dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install 'polars[numpy,pandas,pyarrow]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.pola.rs/user-guide/installation/#feature-flags"&gt;User Guide&lt;/a&gt; for more details on optional dependencies&lt;/p&gt; 
&lt;p&gt;To see the current Polars version and a full list of its optional dependencies, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;pl.show_versions()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Releases happen quite often (weekly / every few days) at the moment, so updating Polars regularly to get the latest bugfixes / features might not be a bad idea.&lt;/p&gt; 
&lt;h3&gt;Rust&lt;/h3&gt; 
&lt;p&gt;You can take latest release from &lt;code&gt;crates.io&lt;/code&gt;, or if you want to use the latest features / performance improvements point to the &lt;code&gt;main&lt;/code&gt; branch of this repo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;polars = { git = "https://github.com/pola-rs/polars", rev = "&amp;lt;optional git tag&amp;gt;" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Requires Rust version &lt;code&gt;&amp;gt;=1.80&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Want to contribute? Read our &lt;a href="https://docs.pola.rs/development/contributing/"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Python: compile Polars from source&lt;/h2&gt; 
&lt;p&gt;If you want a bleeding edge release or maximal performance you should compile Polars from source.&lt;/p&gt; 
&lt;p&gt;This can be done by going through the following steps in sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the latest &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://maturin.rs/"&gt;maturin&lt;/a&gt;: &lt;code&gt;pip install maturin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cd py-polars&lt;/code&gt; and choose one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;, slow binary with debug assertions and symbols, fast compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-release&lt;/code&gt;, fast binary without debug assertions, minimal debug symbols, long compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-nodebug-release&lt;/code&gt;, same as build-release but without any debug symbols, slightly faster to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-debug-release&lt;/code&gt;, same as build-release but with full debug symbols, slightly slower to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-dist-release&lt;/code&gt;, fastest binary, extreme compile times&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By default the binary is compiled with optimizations turned on for a modern CPU. Specify &lt;code&gt;LTS_CPU=1&lt;/code&gt; with the command if your CPU is older and does not support e.g. AVX2.&lt;/p&gt; 
&lt;p&gt;Note that the Rust crate implementing the Python bindings is called &lt;code&gt;py-polars&lt;/code&gt; to distinguish from the wrapped Rust crate &lt;code&gt;polars&lt;/code&gt; itself. However, both the Python package and the Python module are named &lt;code&gt;polars&lt;/code&gt;, so you can &lt;code&gt;pip install polars&lt;/code&gt; and &lt;code&gt;import polars&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Using custom Rust functions in Python&lt;/h2&gt; 
&lt;p&gt;Extending Polars with UDFs compiled in Rust is easy. We expose PyO3 extensions for &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; data structures. See more in &lt;a href="https://github.com/pola-rs/polars/tree/main/pyo3-polars"&gt;https://github.com/pola-rs/polars/tree/main/pyo3-polars&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Going big...&lt;/h2&gt; 
&lt;p&gt;Do you expect more than 2^32 (~4.2 billion) rows? Compile Polars with the &lt;code&gt;bigidx&lt;/code&gt; feature flag or, for Python users, install &lt;code&gt;pip install polars-u64-idx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Don't use this unless you hit the row boundary as the default build of Polars is faster and consumes less memory.&lt;/p&gt; 
&lt;h2&gt;Legacy&lt;/h2&gt; 
&lt;p&gt;Do you want Polars to run on an old CPU (e.g. dating from before 2011), or on an &lt;code&gt;x86-64&lt;/code&gt; build of Python on Apple Silicon under Rosetta? Install &lt;code&gt;pip install polars-lts-cpu&lt;/code&gt;. This version of Polars is compiled without &lt;a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions"&gt;AVX&lt;/a&gt; target features.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.jetbrains.com"&gt;&lt;img src="https://www.jetbrains.com/company/brand/img/jetbrains_logo.png" height="50" alt="JetBrains logo"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>seanmonstar/warp</title>
      <link>https://github.com/seanmonstar/warp</link>
      <description>&lt;p&gt;A super-easy, composable, web server framework for warp speeds.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;warp&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/warp"&gt;&lt;img src="https://img.shields.io/crates/v/warp.svg?sanitize=true" alt="crates.io"&gt;&lt;/a&gt; &lt;a href="https://docs.rs/warp"&gt;&lt;img src="https://docs.rs/warp/badge.svg?sanitize=true" alt="Released API docs"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/seanmonstar/warp/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed"&gt;&lt;/a&gt; &lt;a href="https://github.com/seanmonstar/warp/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/seanmonstar/warp/workflows/CI/badge.svg?sanitize=true" alt="GHA Build Status"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/RFsPjyt"&gt;&lt;img src="https://img.shields.io/discord/500028886025895936.svg?logo=discord" alt="Discord chat"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A super-easy, composable, web server framework for warp speeds.&lt;/p&gt; 
&lt;p&gt;The fundamental building block of &lt;code&gt;warp&lt;/code&gt; is the &lt;code&gt;Filter&lt;/code&gt;: they can be combined and composed to express rich requirements on requests.&lt;/p&gt; 
&lt;p&gt;Thanks to its &lt;code&gt;Filter&lt;/code&gt; system, warp provides these out of the box:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Path routing and parameter extraction&lt;/li&gt; 
 &lt;li&gt;Header requirements and extraction&lt;/li&gt; 
 &lt;li&gt;Query string deserialization&lt;/li&gt; 
 &lt;li&gt;JSON and Form bodies&lt;/li&gt; 
 &lt;li&gt;Multipart form data&lt;/li&gt; 
 &lt;li&gt;Static Files and Directories&lt;/li&gt; 
 &lt;li&gt;Websockets&lt;/li&gt; 
 &lt;li&gt;Access logging&lt;/li&gt; 
 &lt;li&gt;Gzip, Deflate, and Brotli compression&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Since it builds on top of &lt;a href="https://hyper.rs"&gt;hyper&lt;/a&gt;, you automatically get:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HTTP/1&lt;/li&gt; 
 &lt;li&gt;HTTP/2&lt;/li&gt; 
 &lt;li&gt;Asynchronous&lt;/li&gt; 
 &lt;li&gt;One of the fastest HTTP implementations&lt;/li&gt; 
 &lt;li&gt;Tested and &lt;strong&gt;correct&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;Add warp and Tokio to your dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;tokio = { version = "1", features = ["full"] }
warp = { version = "0.4", features = ["server"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then get started in your &lt;code&gt;main.rs&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use warp::Filter;

#[tokio::main]
async fn main() {
    // GET /hello/warp =&amp;gt; 200 OK with body "Hello, warp!"
    let hello = warp::path!("hello" / String)
        .map(|name| format!("Hello, {}!", name));

    warp::serve(hello)
        .run(([127, 0, 0, 1], 3030))
        .await;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information you can check the &lt;a href="https://docs.rs/warp"&gt;docs&lt;/a&gt; or the &lt;a href="https://github.com/seanmonstar/warp/tree/master/examples"&gt;examples&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ajeetdsouza/zoxide</title>
      <link>https://github.com/ajeetdsouza/zoxide</link>
      <description>&lt;p&gt;A smarter cd command. Supports all major shells.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt;&lt;sup&gt;Special thanks to:&lt;/sup&gt;&lt;/p&gt; 
 &lt;div&gt;
  &lt;img src="https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/contrib/warp.png" width="230" alt="Warp"&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;sup&gt;&lt;b&gt;Warp, the intelligent terminal&lt;/b&gt;&lt;/sup&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;sup&gt;Available for MacOS, Linux, and Windows&lt;/sup&gt;
 &lt;/div&gt; 
 &lt;div&gt;
  &lt;sup&gt; Visit &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=zoxide_20231001"&gt;&lt;u&gt;warp.dev&lt;/u&gt;&lt;/a&gt; to learn more. &lt;/sup&gt;
 &lt;/div&gt; 
 &lt;hr&gt; 
 &lt;h1&gt;zoxide&lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://crates.io/crates/zoxide"&gt;&lt;img src="https://img.shields.io/crates/v/zoxide?logo=rust&amp;amp;logoColor=white&amp;amp;style=flat-square" alt="crates.io"&gt;&lt;/a&gt; &lt;a href="https://github.com/ajeetdsouza/zoxide/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/ajeetdsouza/zoxide/total?logo=github&amp;amp;logoColor=white&amp;amp;style=flat-square" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://builtwithnix.org/"&gt;&lt;img src="https://img.shields.io/badge/builtwith-nix-7d81f7?logo=nixos&amp;amp;logoColor=white&amp;amp;style=flat-square" alt="Built with Nix"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;zoxide is a &lt;strong&gt;smarter cd command&lt;/strong&gt;, inspired by z and autojump.&lt;/p&gt; 
 &lt;p&gt;It remembers which directories you use most frequently, so you can "jump" to them in just a few keystrokes.&lt;br&gt; zoxide works on all major shells.&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/#getting-started"&gt;Getting started&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/#installation"&gt;Installation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/#configuration"&gt;Configuration&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/#third-party-integrations"&gt;Integrations&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/contrib/tutorial.webp" alt="Tutorial"&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;z foo              # cd into highest ranked directory matching foo
z foo bar          # cd into highest ranked directory matching foo and bar
z foo /            # cd into a subdirectory starting with foo

z ~/foo            # z also works like a regular cd command
z foo/             # cd into relative path
z ..               # cd one level up
z -                # cd into previous directory

zi foo             # cd with interactive selection (using fzf)

z foo&amp;lt;SPACE&amp;gt;&amp;lt;TAB&amp;gt;  # show interactive completions (zoxide v0.8.0+, bash 4.4+/fish/zsh only)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read more about the matching algorithm &lt;a href="https://github.com/ajeetdsouza/zoxide/wiki/Algorithm#matching"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://app.warp.dev/drive/folder/zoxide-EyHNpQumHVWNcYB8GJgDxG?utm_source=github&amp;amp;utm_medium=warp_pack&amp;amp;utm_campaign=zoxide_20231001"&gt; &lt;img src="https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/contrib/warp-packs-green.png" alt="Follow tutorial in Warp"&gt; &lt;/a&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;zoxide can be installed in 4 easy steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install binary&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;zoxide runs on most major platforms. If your platform isn't listed below, please &lt;a href="https://github.com/ajeetdsouza/zoxide/issues/new"&gt;open an issue&lt;/a&gt;.&lt;/p&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Linux / WSL&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;The recommended way to install zoxide is via the install script:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
    &lt;p&gt;Or, you can use a package manager:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;Distribution&lt;/th&gt; 
       &lt;th&gt;Repository&lt;/th&gt; 
       &lt;th&gt;Instructions&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;strong&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;strong&gt;&lt;a href="https://crates.io/crates/zoxide"&gt;crates.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://github.com/asdf-vm/asdf"&gt;asdf&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;asdf plugin add zoxide https://github.com/nyrst/asdf-zoxide.git&lt;/code&gt; &lt;br&gt; &lt;code&gt;asdf install zoxide latest&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/zoxide"&gt;conda-forge&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://packages.guix.gnu.org/packages/zoxide/"&gt;guix&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;guix install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://formulae.brew.sh/formula-linux/zoxide"&gt;Linuxbrew&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;brew install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/zo/zoxide/package.nix"&gt;nixpkgs&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;AlmaLinux&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Alpine Linux 3.13+&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://pkgs.alpinelinux.org/packages?name=zoxide"&gt;Alpine Linux Packages&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;apk add zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Arch Linux&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/zoxide/"&gt;Arch Linux Extra&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;pacman -S zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;CentOS Stream&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;del&gt;Debian 11+&lt;/del&gt;[^1]&lt;/td&gt; 
       &lt;td&gt;&lt;del&gt;&lt;a href="https://packages.debian.org/stable/admin/zoxide"&gt;Debian Packages&lt;/a&gt;&lt;/del&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;del&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;/del&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Devuan 4.0+&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://pkginfo.devuan.org/cgi-bin/package-query.html?c=package&amp;amp;q=zoxide"&gt;Devuan Packages&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Exherbo Linux&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://gitlab.exherbo.org/exherbo/rust/-/tree/master/packages/sys-apps/zoxide"&gt;Exherbo packages&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;cave resolve -x repository/rust&lt;/code&gt; &lt;br&gt; &lt;code&gt;cave resolve -x zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Fedora 32+&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://src.fedoraproject.org/rpms/rust-zoxide"&gt;Fedora Packages&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Gentoo&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://packages.gentoo.org/packages/app-shells/zoxide"&gt;Gentoo Packages&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;emerge app-shells/zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Linux Mint&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://apt.cli.rs/"&gt;apt.cli.rs&lt;/a&gt; (unofficial)&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://github.com/emmatyping/apt.cli.rs#how-to-add-the-repo"&gt;Setup the repository&lt;/a&gt;, then &lt;code&gt;apt install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Manjaro&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;pacman -S zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;openSUSE Tumbleweed&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://build.opensuse.org/package/show/openSUSE:Factory/zoxide"&gt;openSUSE Factory&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;zypper install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;del&gt;Parrot OS&lt;/del&gt;[^1]&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;del&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;/del&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;del&gt;Raspbian 11+&lt;/del&gt;[^1]&lt;/td&gt; 
       &lt;td&gt;&lt;del&gt;&lt;a href="https://archive.raspbian.org/raspbian/pool/main/r/rust-zoxide/"&gt;Raspbian Packages&lt;/a&gt;&lt;/del&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;del&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;/del&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;RHEL 8+&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Rhino Linux&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://pacstall.dev/packages/zoxide-deb"&gt;Pacstall Packages&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;pacstall -I zoxide-deb&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Rocky Linux&lt;/td&gt; 
       &lt;td&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Slackware 15.0+&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://slackbuilds.org/repository/15.0/system/zoxide/"&gt;SlackBuilds&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://slackbuilds.org/howto/"&gt;Instructions&lt;/a&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Solus&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://github.com/getsolus/packages/tree/main/packages/z/zoxide/"&gt;Solus Packages&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;eopkg install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Ubuntu&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://apt.cli.rs/"&gt;apt.cli.rs&lt;/a&gt; (unofficial)&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://github.com/emmatyping/apt.cli.rs#how-to-add-the-repo"&gt;Setup the repository&lt;/a&gt;, then &lt;code&gt;apt install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Void Linux&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://github.com/void-linux/void-packages/tree/master/srcpkgs/zoxide"&gt;Void Linux Packages&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;xbps-install -S zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;macOS&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;Repository&lt;/th&gt; 
       &lt;th&gt;Instructions&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;strong&gt;&lt;a href="https://crates.io/crates/zoxide"&gt;crates.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;strong&gt;&lt;a href="https://formulae.brew.sh/formula/zoxide"&gt;Homebrew&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;brew install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;a href="https://github.com/asdf-vm/asdf"&gt;asdf&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;asdf plugin add zoxide https://github.com/nyrst/asdf-zoxide.git&lt;/code&gt; &lt;br&gt; &lt;code&gt;asdf install zoxide latest&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/zoxide"&gt;conda-forge&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;a href="https://ports.macports.org/port/zoxide/summary"&gt;MacPorts&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;port install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/zo/zoxide/package.nix"&gt;nixpkgs&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; 
    &lt;p&gt;Or, run this command in your terminal:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Windows&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;zoxide works with PowerShell, as well as shells running in Cygwin, Git Bash, and MSYS2.&lt;/p&gt; 
    &lt;p&gt;The recommended way to install zoxide is via &lt;code&gt;winget&lt;/code&gt;:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;winget install ajeetdsouza.zoxide
&lt;/code&gt;&lt;/pre&gt; 
    &lt;p&gt;Or, you can use an alternative package manager:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;Repository&lt;/th&gt; 
       &lt;th&gt;Instructions&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;strong&gt;&lt;a href="https://crates.io/crates/zoxide"&gt;crates.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;a href="https://community.chocolatey.org/packages/zoxide"&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;choco install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/zoxide"&gt;conda-forge&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;a href="https://github.com/ScoopInstaller/Main/tree/master/bucket/zoxide.json"&gt;Scoop&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;scoop install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; 
    &lt;p&gt;If you're using Cygwin, Git Bash, or MSYS2, you can also use the install script:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;BSD&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;Distribution&lt;/th&gt; 
       &lt;th&gt;Repository&lt;/th&gt; 
       &lt;th&gt;Instructions&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;strong&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;strong&gt;&lt;a href="https://crates.io/crates/zoxide"&gt;crates.io&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;DragonFly BSD&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://github.com/DragonFlyBSD/DPorts/tree/master/sysutils/zoxide"&gt;DPorts&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;FreeBSD&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://www.freshports.org/sysutils/zoxide/"&gt;FreshPorts&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;NetBSD&lt;/td&gt; 
       &lt;td&gt;&lt;a href="https://pkgsrc.se/sysutils/zoxide"&gt;pkgsrc&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;pkgin install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; 
    &lt;p&gt;Or, run this command in your terminal:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Android&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;Repository&lt;/th&gt; 
       &lt;th&gt;Instructions&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;a href="https://github.com/termux/termux-packages/tree/master/packages/zoxide"&gt;Termux&lt;/a&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; 
    &lt;p&gt;Or, run this command in your terminal:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Setup zoxide on your shell&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To start using zoxide, add it to your shell.&lt;/p&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Bash&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file (usually &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;eval "$(zoxide init bash)"
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Elvish&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file (usually &lt;code&gt;~/.elvish/rc.elv&lt;/code&gt;):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;eval (zoxide init elvish | slurp)
&lt;/code&gt;&lt;/pre&gt; 
    &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; zoxide only supports elvish v0.18.0 and above.&lt;/p&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Fish&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file (usually &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;zoxide init fish | source
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Nushell&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your env file (find it by running &lt;code&gt;$nu.env-path&lt;/code&gt; in Nushell):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;zoxide init nushell | save -f ~/.zoxide.nu
&lt;/code&gt;&lt;/pre&gt; 
    &lt;p&gt;Now, add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file (find it by running &lt;code&gt;$nu.config-path&lt;/code&gt; in Nushell):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;source ~/.zoxide.nu
&lt;/code&gt;&lt;/pre&gt; 
    &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; zoxide only supports Nushell v0.89.0+.&lt;/p&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;PowerShell&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file (find it by running &lt;code&gt;echo $profile&lt;/code&gt; in PowerShell):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-powershell"&gt;Invoke-Expression (&amp;amp; { (zoxide init powershell | Out-String) })
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Tcsh&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file (usually &lt;code&gt;~/.tcshrc&lt;/code&gt;):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;zoxide init tcsh &amp;gt; ~/.zoxide.tcsh
source ~/.zoxide.tcsh
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Xonsh&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file (usually &lt;code&gt;~/.xonshrc&lt;/code&gt;):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-python"&gt;execx($(zoxide init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Zsh&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file (usually &lt;code&gt;~/.zshrc&lt;/code&gt;):&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;eval "$(zoxide init zsh)"
&lt;/code&gt;&lt;/pre&gt; 
    &lt;p&gt;For completions to work, the above line must be added &lt;em&gt;after&lt;/em&gt; &lt;code&gt;compinit&lt;/code&gt; is called. You may have to rebuild your completions cache by running &lt;code&gt;rm ~/.zcompdump*; compinit&lt;/code&gt;.&lt;/p&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;Any POSIX shell&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Add this to the &lt;ins&gt;&lt;strong&gt;end&lt;/strong&gt;&lt;/ins&gt; of your config file:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;eval "$(zoxide init posix --hook prompt)"
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install fzf&lt;/strong&gt; &lt;sup&gt;(optional)&lt;/sup&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; is a command-line fuzzy finder, used by zoxide for completions / interactive selection. It can be installed from &lt;a href="https://github.com/junegunn/fzf#installation"&gt;here&lt;/a&gt;.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The minimum supported fzf version is v0.51.0.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Import your data&lt;/strong&gt; &lt;sup&gt;(optional)&lt;/sup&gt;&lt;/p&gt; &lt;p&gt;If you currently use any of these plugins, you may want to import your data into zoxide:&lt;/p&gt; 
  &lt;details&gt; 
   &lt;summary&gt;autojump&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Run this command in your terminal:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;zoxide import --from=autojump "/path/to/autojump/db"
&lt;/code&gt;&lt;/pre&gt; 
    &lt;p&gt;The path usually varies according to your system:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;OS&lt;/th&gt; 
       &lt;th&gt;Path&lt;/th&gt; 
       &lt;th&gt;Example&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Linux&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$XDG_DATA_HOME/autojump/autojump.txt&lt;/code&gt; or &lt;code&gt;$HOME/.local/share/autojump/autojump.txt&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;/home/alice/.local/share/autojump/autojump.txt&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;macOS&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$HOME/Library/autojump/autojump.txt&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;/Users/Alice/Library/autojump/autojump.txt&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Windows&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;%APPDATA%\autojump\autojump.txt&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;C:\Users\Alice\AppData\Roaming\autojump\autojump.txt&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;fasd, z, z.lua, zsh-z&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Run this command in your terminal:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-sh"&gt;zoxide import --from=z "path/to/z/db"
&lt;/code&gt;&lt;/pre&gt; 
    &lt;p&gt;The path usually varies according to your system:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;Plugin&lt;/th&gt; 
       &lt;th&gt;Path&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;fasd&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$_FASD_DATA&lt;/code&gt; or &lt;code&gt;$HOME/.fasd&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;z (bash/zsh)&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$_Z_DATA&lt;/code&gt; or &lt;code&gt;$HOME/.z&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;z (fish)&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$Z_DATA&lt;/code&gt; or &lt;code&gt;$XDG_DATA_HOME/z/data&lt;/code&gt; or &lt;code&gt;$HOME/.local/share/z/data&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;z.lua (bash/zsh)&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$_ZL_DATA&lt;/code&gt; or &lt;code&gt;$HOME/.zlua&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;z.lua (fish)&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$XDG_DATA_HOME/zlua/zlua.txt&lt;/code&gt; or &lt;code&gt;$HOME/.local/share/zlua/zlua.txt&lt;/code&gt; or &lt;code&gt;$_ZL_DATA&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;zsh-z&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$ZSHZ_DATA&lt;/code&gt; or &lt;code&gt;$_Z_DATA&lt;/code&gt; or &lt;code&gt;$HOME/.z&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; 
  &lt;details&gt; 
   &lt;summary&gt;ZLocation&lt;/summary&gt; 
   &lt;blockquote&gt; 
    &lt;p&gt;Run this command in PowerShell:&lt;/p&gt; 
    &lt;pre&gt;&lt;code class="language-powershell"&gt;$db = New-TemporaryFile
(Get-ZLocation).GetEnumerator() | ForEach-Object { Write-Output ($_.Name+'|'+$_.Value+'|0') } | Out-File $db
zoxide import --from=z $db
&lt;/code&gt;&lt;/pre&gt; 
   &lt;/blockquote&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;h3&gt;Flags&lt;/h3&gt; 
&lt;p&gt;When calling &lt;code&gt;zoxide init&lt;/code&gt;, the following flags are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--cmd&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Changes the prefix of the &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;zi&lt;/code&gt; commands.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;--cmd j&lt;/code&gt; would change the commands to (&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;ji&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;--cmd cd&lt;/code&gt; would replace the &lt;code&gt;cd&lt;/code&gt; command.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--hook &amp;lt;HOOK&amp;gt;&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Changes how often zoxide increments a directory's score:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;Hook&lt;/th&gt; 
       &lt;th&gt;Description&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;code&gt;none&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;Never&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;code&gt;prompt&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;At every shell prompt&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;&lt;code&gt;pwd&lt;/code&gt; (default)&lt;/td&gt; 
       &lt;td&gt;Whenever the directory is changed&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;--no-cmd&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Prevents zoxide from defining the &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;zi&lt;/code&gt; commands.&lt;/li&gt; 
   &lt;li&gt;These functions will still be available in your shell as &lt;code&gt;__zoxide_z&lt;/code&gt; and &lt;code&gt;__zoxide_zi&lt;/code&gt;, should you choose to redefine them.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Environment variables&lt;/h3&gt; 
&lt;p&gt;Environment variables[^2] can be used for configuration. They must be set before &lt;code&gt;zoxide init&lt;/code&gt; is called.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;_ZO_DATA_DIR&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Specifies the directory in which the database is stored.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;The default value varies across OSes:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;OS&lt;/th&gt; 
       &lt;th&gt;Path&lt;/th&gt; 
       &lt;th&gt;Example&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Linux / BSD&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$XDG_DATA_HOME&lt;/code&gt; or &lt;code&gt;$HOME/.local/share&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;/home/alice/.local/share&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;macOS&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$HOME/Library/Application Support&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;/Users/Alice/Library/Application Support&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Windows&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;%LOCALAPPDATA%&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;C:\Users\Alice\AppData\Local&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;_ZO_ECHO&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;When set to 1, &lt;code&gt;z&lt;/code&gt; will print the matched directory before navigating to it.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;_ZO_EXCLUDE_DIRS&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Excludes the specified directories from the database.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;This is provided as a list of &lt;a href="https://man7.org/linux/man-pages/man7/glob.7.html"&gt;globs&lt;/a&gt;, separated by OS-specific characters:&lt;/p&gt; 
    &lt;table&gt; 
     &lt;thead&gt; 
      &lt;tr&gt; 
       &lt;th&gt;OS&lt;/th&gt; 
       &lt;th&gt;Separator&lt;/th&gt; 
       &lt;th&gt;Example&lt;/th&gt; 
      &lt;/tr&gt; 
     &lt;/thead&gt; 
     &lt;tbody&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Linux / macOS / BSD&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;:&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$HOME:$HOME/private/*&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
      &lt;tr&gt; 
       &lt;td&gt;Windows&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;;&lt;/code&gt;&lt;/td&gt; 
       &lt;td&gt;&lt;code&gt;$HOME;$HOME/private/*&lt;/code&gt;&lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt; 
    &lt;/table&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;By default, this is set to &lt;code&gt;"$HOME"&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;_ZO_FZF_OPTS&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Custom options to pass to &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; during interactive selection. See &lt;a href="https://manpages.ubuntu.com/manpages/en/man1/fzf.1.html"&gt;&lt;code&gt;man fzf&lt;/code&gt;&lt;/a&gt; for the list of options.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;_ZO_MAXAGE&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Configures the &lt;a href="https://github.com/ajeetdsouza/zoxide/wiki/Algorithm#aging"&gt;aging algorithm&lt;/a&gt;, which limits the maximum number of entries in the database.&lt;/li&gt; 
   &lt;li&gt;By default, this is set to 10000.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;_ZO_RESOLVE_SYMLINKS&lt;/code&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;When set to 1, &lt;code&gt;z&lt;/code&gt; will resolve symlinks before adding directories to the database.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Third-party integrations&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Application&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Plugin&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/rjarry/aerc"&gt;aerc&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Email client&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.alfredapp.com/"&gt;alfred&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;macOS launcher&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/yihou/alfred-zoxide"&gt;alfred-zoxide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/mridgers/clink"&gt;clink&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Improved cmd.exe for Windows&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/shunsambongi/clink-zoxide"&gt;clink-zoxide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Text editor&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://gitlab.com/Vonfry/zoxide.el"&gt;zoxide.el&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/kyoheiu/felix"&gt;felix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;File manager&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/kamiyaa/joshuto"&gt;joshuto&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;File manager&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gokcehan/lf"&gt;lf&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;File manager&lt;/td&gt; 
   &lt;td&gt;See the &lt;a href="https://github.com/gokcehan/lf/wiki/Integrations#zoxide"&gt;wiki&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/jarun/nnn"&gt;nnn&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;File manager&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/jarun/nnn/raw/master/plugins/autojump"&gt;nnn-autojump&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ranger/ranger"&gt;ranger&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;File manager&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/jchook/ranger-zoxide"&gt;ranger-zoxide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/dsxmachina/rfm"&gt;rfm&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;File manager&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/joshmedeski/sesh"&gt;sesh&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/nvim-telescope/telescope.nvim"&gt;telescope.nvim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Fuzzy finder for Neovim&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/jvgrootveld/telescope-zoxide"&gt;telescope-zoxide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/27medkamal/tmux-session-wizard"&gt;tmux-session-wizard&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/omerxx/tmux-sessionx"&gt;tmux-sessionx&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/vim/vim"&gt;vim&lt;/a&gt; / &lt;a href="https://github.com/neovim/neovim"&gt;neovim&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Text editor&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/nanotee/zoxide.vim"&gt;zoxide.vim&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/sayanarijit/xplr"&gt;xplr&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;File manager&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/sayanarijit/zoxide.xplr"&gt;zoxide.xplr&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/xxh/xxh"&gt;xxh&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Transports shell configuration over SSH&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/xxh/xxh-plugin-prerun-zoxide"&gt;xxh-plugin-prerun-zoxide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/sxyazi/yazi"&gt;yazi&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;File manager&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Mellbourn/zabb"&gt;zabb&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Finds the shortest possible query for a path&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/roberte777/zesh"&gt;zesh&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;zellij&lt;/code&gt; session manager&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/marlonrichert/zsh-autocomplete"&gt;zsh-autocomplete&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Realtime completions for zsh&lt;/td&gt; 
   &lt;td&gt;Natively supported&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;[^1]: Debian and its derivatives update their packages very slowly. If you're using one of these distributions, consider using the install script instead.&lt;/p&gt; 
&lt;p&gt;[^2]: If you're not sure how to set an environment variable on your shell, check out the &lt;a href="https://github.com/ajeetdsouza/zoxide/wiki/HOWTO:-set-environment-variables" title="HOWTO: set environment variables"&gt;wiki&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gopher64/gopher64</title>
      <link>https://github.com/gopher64/gopher64</link>
      <description>&lt;p&gt;Highly compatible N64 emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gopher64&lt;/h1&gt; 
&lt;h2&gt;download&lt;/h2&gt; 
&lt;p&gt;Windows: &lt;a href="https://github.com/gopher64/gopher64/releases/latest/download/gopher64-windows-x86_64.exe"&gt;https://github.com/gopher64/gopher64/releases/latest/download/gopher64-windows-x86_64.exe&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Linux: &lt;a href="https://flathub.org/apps/io.github.gopher64.gopher64"&gt;https://flathub.org/apps/io.github.gopher64.gopher64&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;wiki&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/gopher64/gopher64/wiki"&gt;https://github.com/gopher64/gopher64/wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;discord&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/9RGXq8W8JQ"&gt;https://discord.gg/9RGXq8W8JQ&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;controls&lt;/h2&gt; 
&lt;p&gt;Keys are mapped according to &lt;a href="https://github.com/gopher64/gopher64/wiki/Default-Keyboard-Setup"&gt;these defaults&lt;/a&gt;. Xbox-style controllers also have a &lt;a href="https://github.com/gopher64/gopher64/wiki/Default-Gamepad-Setup"&gt;default mapping applied&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;netplay&lt;/h2&gt; 
&lt;p&gt;Gopher64 supports netplay (online play with others) via cloud hosted servers. You can also run the server (&lt;a href="https://github.com/gopher64/gopher64-netplay-server"&gt;https://github.com/gopher64/gopher64-netplay-server&lt;/a&gt;) yourself on a LAN.&lt;/p&gt; 
&lt;h2&gt;portable mode&lt;/h2&gt; 
&lt;p&gt;If you would like to keep all the game data in the same folder as the executable, you just need to create a file called "portable.txt" in the same directory as the executable.&lt;/p&gt; 
&lt;h2&gt;flatpak&lt;/h2&gt; 
&lt;p&gt;If you want to run the flatpak from the command line, you need to add the &lt;code&gt;--filesystem=host:ro&lt;/code&gt; option, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;flatpak run --filesystem=host:ro io.github.gopher64.gopher64 /path/to/rom.z64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;building and usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Linux only: install the SDL3 dependencies: &lt;a href="https://wiki.libsdl.org/SDL3/README-linux#build-dependencies"&gt;https://wiki.libsdl.org/SDL3/README-linux#build-dependencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install rust: &lt;a href="https://www.rust-lang.org/tools/install"&gt;https://www.rust-lang.org/tools/install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;git clone --recursive https://github.com/gopher64/gopher64.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cd gopher64&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cargo build --release&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;./target/release/gopher64 /path/to/rom.z64&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;contributing&lt;/h2&gt; 
&lt;p&gt;I am very open to contributions! Please contact me via a GitHub issue or Discord (loganmc10) before doing substantial work on a PR.&lt;/p&gt; 
&lt;h2&gt;license&lt;/h2&gt; 
&lt;p&gt;Gopher64 is licensed under the GPLv3 license. Many portions of gopher64 have been adapted from mupen64plus and/or ares. The license for mupen64plus can be found here: &lt;a href="https://github.com/mupen64plus/mupen64plus-core/raw/master/LICENSES"&gt;https://github.com/mupen64plus/mupen64plus-core/blob/master/LICENSES&lt;/a&gt;. The license for ares can be found here: &lt;a href="https://github.com/ares-emulator/ares/raw/master/LICENSE"&gt;https://github.com/ares-emulator/ares/blob/master/LICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;privacy and code signing policy&lt;/h2&gt; 
&lt;p&gt;Free code signing for the Windows release is provided by &lt;a href="https://about.signpath.io"&gt;SignPath.io&lt;/a&gt;, certificate by &lt;a href="https://signpath.org"&gt;SignPath Foundation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;During online netplay sessions, the server logs your IP address and basic session information (game title and session name) for operational purposes. No additional personal data is collected or stored.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PyO3/pyo3</title>
      <link>https://github.com/PyO3/pyo3</link>
      <description>&lt;p&gt;Rust bindings for the Python interpreter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PyO3&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/PyO3/pyo3/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/PyO3/pyo3/ci.yml?branch=main&amp;amp;logo=github&amp;amp;style=" alt="actions status"&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/PyO3/pyo3"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="benchmark"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/PyO3/pyo3"&gt;&lt;img src="https://img.shields.io/codecov/c/gh/PyO3/pyo3?logo=codecov" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/pyo3"&gt;&lt;img src="https://img.shields.io/crates/v/pyo3?logo=rust" alt="crates.io"&gt;&lt;/a&gt; &lt;a href="https://rust-lang.github.io/rfcs/2495-min-rust-version.html"&gt;&lt;img src="https://img.shields.io/badge/rustc-1.63+-blue?logo=rust" alt="minimum rustc 1.63"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/33kcChzH7f"&gt;&lt;img src="https://img.shields.io/discord/1209263839632424990?logo=discord" alt="discord server"&gt;&lt;/a&gt; &lt;a href="https://github.com/PyO3/pyo3/raw/main/Contributing.md"&gt;&lt;img src="https://img.shields.io/badge/contribute-on%20github-Green?logo=github" alt="contributing notes"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; bindings for &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;, including tools for creating native Python extension modules. Running and interacting with Python code from a Rust binary is also supported.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;User Guide: &lt;a href="https://pyo3.rs"&gt;stable&lt;/a&gt; | &lt;a href="https://pyo3.rs/main"&gt;main&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;API Documentation: &lt;a href="https://docs.rs/pyo3/"&gt;stable&lt;/a&gt; | &lt;a href="https://pyo3.rs/main/doc"&gt;main&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Requires Rust 1.74 or greater.&lt;/p&gt; 
&lt;p&gt;PyO3 supports the following Python distributions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPython 3.7 or greater&lt;/li&gt; 
 &lt;li&gt;PyPy 7.3 (Python 3.9+)&lt;/li&gt; 
 &lt;li&gt;GraalPy 24.2 or greater (Python 3.11+)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use PyO3 to write a native Python module in Rust, or to embed Python in a Rust binary. The following sections explain each of these in turn.&lt;/p&gt; 
&lt;h3&gt;Using Rust from Python&lt;/h3&gt; 
&lt;p&gt;PyO3 can be used to generate a native Python module. The easiest way to try this out for the first time is to use &lt;a href="https://github.com/PyO3/maturin"&gt;&lt;code&gt;maturin&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;maturin&lt;/code&gt; is a tool for building and publishing Rust-based Python packages with minimal configuration. The following steps install &lt;code&gt;maturin&lt;/code&gt;, use it to generate and build a new Python package, and then launch Python to import and execute a function from the package.&lt;/p&gt; 
&lt;p&gt;First, follow the commands below to create a new directory containing a new Python &lt;code&gt;virtualenv&lt;/code&gt;, and install &lt;code&gt;maturin&lt;/code&gt; into the virtualenv using Python's package manager, &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# (replace string_sum with the desired package name)
$ mkdir string_sum
$ cd string_sum
$ python -m venv .env
$ source .env/bin/activate
$ pip install maturin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Still inside this &lt;code&gt;string_sum&lt;/code&gt; directory, now run &lt;code&gt;maturin init&lt;/code&gt;. This will generate the new package source. When given the choice of bindings to use, select pyo3 bindings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ maturin init
✔ 🤷 What kind of bindings to use? · pyo3
  ✨ Done! New project created string_sum
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The most important files generated by this command are &lt;code&gt;Cargo.toml&lt;/code&gt; and &lt;code&gt;lib.rs&lt;/code&gt;, which will look roughly like the following:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[package]
name = "string_sum"
version = "0.1.0"
edition = "2021"

[lib]
# The name of the native library. This is the name which will be used in Python to import the
# library (i.e. `import string_sum`). If you change this, you must also change the name of the
# `#[pymodule]` in `src/lib.rs`.
name = "string_sum"
# "cdylib" is necessary to produce a shared library for Python to import from.
#
# Downstream Rust code (including code in `bin/`, `examples/`, and `tests/`) will not be able
# to `use string_sum;` unless the "rlib" or "lib" crate type is also included, e.g.:
# crate-type = ["cdylib", "rlib"]
crate-type = ["cdylib"]

[dependencies]
pyo3 = { version = "0.25.1", features = ["extension-module"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/lib.rs&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use pyo3::prelude::*;

/// Formats the sum of two numbers as string.
#[pyfunction]
fn sum_as_string(a: usize, b: usize) -&amp;gt; PyResult&amp;lt;String&amp;gt; {
    Ok((a + b).to_string())
}

/// A Python module implemented in Rust. The name of this function must match
/// the `lib.name` setting in the `Cargo.toml`, else Python will not be able to
/// import the module.
#[pymodule]
fn string_sum(m: &amp;amp;Bound&amp;lt;'_, PyModule&amp;gt;) -&amp;gt; PyResult&amp;lt;()&amp;gt; {
    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, run &lt;code&gt;maturin develop&lt;/code&gt;. This will build the package and install it into the Python virtualenv previously created and activated. The package is then ready to be used from &lt;code&gt;python&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ maturin develop
# lots of progress output as maturin runs the compilation...
$ python
&amp;gt;&amp;gt;&amp;gt; import string_sum
&amp;gt;&amp;gt;&amp;gt; string_sum.sum_as_string(5, 20)
'25'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To make changes to the package, just edit the Rust source code and then re-run &lt;code&gt;maturin develop&lt;/code&gt; to recompile.&lt;/p&gt; 
&lt;p&gt;To run this all as a single copy-and-paste, use the bash script below (replace &lt;code&gt;string_sum&lt;/code&gt; in the first command with the desired package name):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir string_sum &amp;amp;&amp;amp; cd "$_"
python -m venv .env
source .env/bin/activate
pip install maturin
maturin init --bindings pyo3
maturin develop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to be able to run &lt;code&gt;cargo test&lt;/code&gt; or use this project in a Cargo workspace and are running into linker issues, there are some workarounds in &lt;a href="https://pyo3.rs/latest/faq.html#i-cant-run-cargo-test-or-i-cant-build-in-a-cargo-workspace-im-having-linker-issues-like-symbol-not-found-or-undefined-reference-to-_pyexc_systemerror"&gt;the FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;As well as with &lt;code&gt;maturin&lt;/code&gt;, it is possible to build using &lt;a href="https://github.com/PyO3/setuptools-rust"&gt;&lt;code&gt;setuptools-rust&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://pyo3.rs/latest/building-and-distribution.html#manual-builds"&gt;manually&lt;/a&gt;. Both offer more flexibility than &lt;code&gt;maturin&lt;/code&gt; but require more configuration to get started.&lt;/p&gt; 
&lt;h3&gt;Using Python from Rust&lt;/h3&gt; 
&lt;p&gt;To embed Python into a Rust binary, you need to ensure that your Python installation contains a shared library. The following steps demonstrate how to ensure this (for Ubuntu), and then give some example code which runs an embedded Python interpreter.&lt;/p&gt; 
&lt;p&gt;To install the Python shared library on Ubuntu:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install python3-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install the Python shared library on RPM based distributions (e.g. Fedora, Red Hat, SuSE), install the &lt;code&gt;python3-devel&lt;/code&gt; package.&lt;/p&gt; 
&lt;p&gt;Start a new project with &lt;code&gt;cargo new&lt;/code&gt; and add &lt;code&gt;pyo3&lt;/code&gt; to the &lt;code&gt;Cargo.toml&lt;/code&gt; like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies.pyo3]
version = "0.25.1"
features = ["auto-initialize"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example program displaying the value of &lt;code&gt;sys.version&lt;/code&gt; and the current user name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use pyo3::prelude::*;
use pyo3::types::IntoPyDict;
use pyo3::ffi::c_str;

fn main() -&amp;gt; PyResult&amp;lt;()&amp;gt; {
    Python::attach(|py| {
        let sys = py.import("sys")?;
        let version: String = sys.getattr("version")?.extract()?;

        let locals = [("os", py.import("os")?)].into_py_dict(py)?;
        let code = c_str!("os.getenv('USER') or os.getenv('USERNAME') or 'Unknown'");
        let user: String = py.eval(code, None, Some(&amp;amp;locals))?.extract()?;

        println!("Hello {}, I'm Python {}", user, version);
        Ok(())
    })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The guide has &lt;a href="https://pyo3.rs/latest/python-from-rust.html"&gt;a section&lt;/a&gt; with lots of examples about this topic.&lt;/p&gt; 
&lt;h2&gt;Tools and libraries&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/maturin"&gt;maturin&lt;/a&gt; &lt;em&gt;Build and publish crates with pyo3, rust-cpython or cffi bindings as well as rust binaries as python packages&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust"&gt;setuptools-rust&lt;/a&gt; &lt;em&gt;Setuptools plugin for Rust support&lt;/em&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/pyo3-built"&gt;pyo3-built&lt;/a&gt; &lt;em&gt;Simple macro to expose metadata obtained with the &lt;a href="https://crates.io/crates/built"&gt;&lt;code&gt;built&lt;/code&gt;&lt;/a&gt; crate as a &lt;a href="https://docs.rs/pyo3/*/pyo3/types/struct.PyDict.html"&gt;&lt;code&gt;PyDict&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/rust-numpy"&gt;rust-numpy&lt;/a&gt; &lt;em&gt;Rust binding of NumPy C-API&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gperinazzo/dict-derive"&gt;dict-derive&lt;/a&gt; &lt;em&gt;Derive FromPyObject to automatically transform Python dicts into Rust structs&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vorner/pyo3-log"&gt;pyo3-log&lt;/a&gt; &lt;em&gt;Bridge from Rust to Python logging&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/davidhewitt/pythonize"&gt;pythonize&lt;/a&gt; &lt;em&gt;Serde serializer for converting Rust objects to JSON-compatible Python objects&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/pyo3-async-runtimes"&gt;pyo3-async-runtimes&lt;/a&gt; &lt;em&gt;Utilities for interoperability with Python's Asyncio library and Rust's async runtimes.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mityax/rustimport"&gt;rustimport&lt;/a&gt; &lt;em&gt;Directly import Rust files or crates from Python, without manual compilation step. Provides pyo3 integration by default and generates pyo3 binding code automatically.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/pyo3-arrow"&gt;pyo3-arrow&lt;/a&gt; &lt;em&gt;Lightweight &lt;a href="https://arrow.apache.org/"&gt;Apache Arrow&lt;/a&gt; integration for pyo3.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/pyo3-bytes"&gt;pyo3-bytes&lt;/a&gt; &lt;em&gt;Integration between &lt;a href="https://crates.io/crates/bytes"&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and pyo3.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/developmentseed/obstore/tree/main/pyo3-object_store"&gt;pyo3-object_store&lt;/a&gt; &lt;em&gt;Integration between &lt;a href="https://docs.rs/object_store"&gt;&lt;code&gt;object_store&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/PyO3/pyo3"&gt;&lt;code&gt;pyo3&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kylebarron/arro3"&gt;arro3&lt;/a&gt; &lt;em&gt;A minimal Python library for Apache Arrow, connecting to the Rust arrow crate.&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kylebarron/arro3/tree/main/arro3-compute"&gt;arro3-compute&lt;/a&gt; &lt;em&gt;&lt;code&gt;arro3-compute&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kylebarron/arro3/tree/main/arro3-core"&gt;arro3-core&lt;/a&gt; &lt;em&gt;&lt;code&gt;arro3-core&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/kylebarron/arro3/tree/main/arro3-io"&gt;arro3-io&lt;/a&gt; &lt;em&gt;&lt;code&gt;arro3-io&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fastlmm/bed-reader"&gt;bed-reader&lt;/a&gt; &lt;em&gt;Read and write the PLINK BED format, simply and efficiently.&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Shows Rayon/ndarray::parallel (including capturing errors, controlling thread num), Python types to Rust generics, Github Actions&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oconnor663/blake3-py"&gt;blake3-py&lt;/a&gt; &lt;em&gt;Python bindings for the &lt;a href="https://github.com/BLAKE3-team/BLAKE3"&gt;BLAKE3&lt;/a&gt; cryptographic hash function.&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Parallelized &lt;a href="https://github.com/oconnor663/blake3-py/raw/master/.github/workflows/dists.yml"&gt;builds&lt;/a&gt; on GitHub Actions for MacOS, Linux, Windows, including free-threaded 3.13t wheels.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cellular-raza.com"&gt;cellular_raza&lt;/a&gt; &lt;em&gt;A cellular agent-based simulation framework for building complex models from a clean slate.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sfu-db/connector-x/tree/main/connectorx-python"&gt;connector-x&lt;/a&gt; &lt;em&gt;Fastest library to load data from DB to DataFrames in Rust and Python.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pyca/cryptography/tree/main/src/rust"&gt;cryptography&lt;/a&gt; &lt;em&gt;Python cryptography library with some functionality in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Stranger6667/css-inline/tree/master/bindings/python"&gt;css-inline&lt;/a&gt; &lt;em&gt;CSS inlining for Python implemented in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/arrow-datafusion-python"&gt;datafusion-python&lt;/a&gt; &lt;em&gt;A Python library that binds to Apache Arrow in-memory query engine DataFusion.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/delta-io/delta-rs/tree/main/python"&gt;deltalake-python&lt;/a&gt; &lt;em&gt;Native Delta Lake Python binding based on delta-rs with Pandas integration.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yankun1992/fastbloom"&gt;fastbloom&lt;/a&gt; &lt;em&gt;A fast &lt;a href="https://github.com/yankun1992/fastbloom#BloomFilter"&gt;bloom filter&lt;/a&gt; | &lt;a href="https://github.com/yankun1992/fastbloom#countingbloomfilter"&gt;counting bloom filter&lt;/a&gt; implemented by Rust for Rust and Python!&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thedrow/fastuuid/"&gt;fastuuid&lt;/a&gt; &lt;em&gt;Python bindings to Rust's UUID library.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/feos-org/feos"&gt;feos&lt;/a&gt; &lt;em&gt;Lightning fast thermodynamic modeling in Rust with fully developed Python interface.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Nnamdi-sys/finalytics"&gt;finalytics&lt;/a&gt; &lt;em&gt;Investment Analysis library in Rust | Python.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jinlow/forust"&gt;forust&lt;/a&gt; &lt;em&gt;A lightweight gradient boosted decision tree library written in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kylebarron/geo-index"&gt;geo-index&lt;/a&gt; &lt;em&gt;A Rust crate and &lt;a href="https://github.com/kylebarron/geo-index/tree/main/python"&gt;Python library&lt;/a&gt; for packed, immutable, zero-copy spatial indexes.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emmett-framework/granian"&gt;granian&lt;/a&gt; &lt;em&gt;A Rust HTTP server for Python applications.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BooleanCat/haem"&gt;haem&lt;/a&gt; &lt;em&gt;A Python library for working on Bioinformatics problems.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deedy5/html2text_rs"&gt;html2text-rs&lt;/a&gt; &lt;em&gt;Python library for converting HTML to markup or plain text.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/PyO3/setuptools-rust/tree/main/examples/html-py-ever"&gt;html-py-ever&lt;/a&gt; &lt;em&gt;Using &lt;a href="https://github.com/servo/html5ever"&gt;html5ever&lt;/a&gt; through &lt;a href="https://github.com/kuchiki-rs/kuchiki"&gt;kuchiki&lt;/a&gt; to speed up html parsing and css-selecting.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/hudi-rs"&gt;hudi-rs&lt;/a&gt; &lt;em&gt;The native Rust implementation for Apache Hudi, with C++ &amp;amp; Python API bindings.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/m-ou-se/inline-python"&gt;inline-python&lt;/a&gt; &lt;em&gt;Inline Python code directly in your Rust code.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kushaldas/johnnycanencrypt"&gt;johnnycanencrypt&lt;/a&gt; OpenPGP library with Yubikey support.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema/tree/master/crates/jsonschema-py"&gt;jsonschema&lt;/a&gt; &lt;em&gt;A high-performance JSON Schema validator for Python.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cds-astro/mocpy"&gt;mocpy&lt;/a&gt; &lt;em&gt;Astronomical Python library offering data structures for describing any arbitrary coverage regions on the unit sphere.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/developmentseed/obstore"&gt;obstore&lt;/a&gt; &lt;em&gt;The simplest, highest-throughput Python interface to Amazon S3, Google Cloud Storage, Azure Storage, &amp;amp; other S3-compliant APIs, powered by Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/opendal/tree/main/bindings/python"&gt;opendal&lt;/a&gt; &lt;em&gt;A data access layer that allows users to easily and efficiently retrieve data from various storage services in a unified way.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ijl/orjson"&gt;orjson&lt;/a&gt; &lt;em&gt;Fast Python JSON library.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aviramha/ormsgpack"&gt;ormsgpack&lt;/a&gt; &lt;em&gt;Fast Python msgpack library.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pola-rs/polars"&gt;polars&lt;/a&gt; &lt;em&gt;Fast multi-threaded DataFrame library in Rust | Python | Node.js.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jupyter-server/pycrdt"&gt;pycrdt&lt;/a&gt; &lt;em&gt;Python bindings for the Rust CRDT implementation &lt;a href="https://github.com/y-crdt/y-crdt"&gt;Yrs&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pydantic/pydantic-core"&gt;pydantic-core&lt;/a&gt; &lt;em&gt;Core validation logic for pydantic written in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deedy5/primp"&gt;primp&lt;/a&gt; &lt;em&gt;The fastest python HTTP client that can impersonate web browsers by mimicking their headers and TLS/JA3/JA4/HTTP2 fingerprints.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/attack68/rateslib"&gt;rateslib&lt;/a&gt; &lt;em&gt;A fixed income library for Python using Rust extensions.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/online-ml/river"&gt;river&lt;/a&gt; &lt;em&gt;Online machine learning in python, the computationally heavy statistics algorithms are implemented in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sparckles/Robyn"&gt;robyn&lt;/a&gt; A Super Fast Async Python Web Framework with a Rust runtime.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cjermain/rust-python-coverage"&gt;rust-python-coverage&lt;/a&gt; &lt;em&gt;Example PyO3 project with automated test coverage for Rust and Python.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x676e67/rnet"&gt;rnet&lt;/a&gt; Asynchronous Python HTTP Client with Black Magic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lakehq/sail"&gt;sail&lt;/a&gt; &lt;em&gt;Unifying stream, batch, and AI workloads with Apache Spark compatibility.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openai/tiktoken"&gt;tiktoken&lt;/a&gt; &lt;em&gt;A fast BPE tokeniser for use with OpenAI's models.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huggingface/tokenizers/tree/main/bindings/python"&gt;tokenizers&lt;/a&gt; &lt;em&gt;Python bindings to the Hugging Face tokenizers (NLP) written in Rust.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://github.com/ringsaturn/tzfpy"&gt;tzfpy&lt;/a&gt; &lt;em&gt;A fast package to convert longitude/latitude to timezone name.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jessekrubin/utiles"&gt;utiles&lt;/a&gt; &lt;em&gt;Fast Python web-map tile utilities&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Articles and other media&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UmL_CA-v3O8"&gt;(Video) PyO3: From Python to Rust and Back Again&lt;/a&gt; - Jul 3, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust"&gt;Parsing Python ASTs 20x Faster with Rust&lt;/a&gt; - Jun 17, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UkZ_m3Wj2hA"&gt;(Video) How Python Harnesses Rust through PyO3&lt;/a&gt; - May 18, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lyG6AKzu4ew"&gt;(Video) Combining Rust and Python: The Best of Both Worlds?&lt;/a&gt; - Mar 1, 2024&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=T45ZEmSR1-s"&gt;(Video) Extending Python with Rust using PyO3&lt;/a&gt; - Dec 16, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://terencezl.github.io/blog/2023/06/06/a-week-of-pyo3-rust-numpy/"&gt;A Week of PyO3 + rust-numpy (How to Speed Up Your Data Pipeline X Times)&lt;/a&gt; - Jun 6, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rustacean-station.org/episode/david-hewitt/"&gt;(Podcast) PyO3 with David Hewitt&lt;/a&gt; - May 19, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ohadravid.github.io/posts/2023-03-rusty-python/"&gt;Making Python 100x faster with less than 100 lines of Rust&lt;/a&gt; - Mar 28, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fosdem.org/2023/schedule/event/rust_how_pydantic_v2_leverages_rusts_superpowers/"&gt;How Pydantic V2 leverages Rust's Superpowers&lt;/a&gt; - Feb 4, 2023&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://boring-guy.sh/posts/river-rust/"&gt;How we extended the River stats module with Rust using PyO3&lt;/a&gt; - Dec 23, 2022&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://towardsdatascience.com/nine-rules-for-writing-python-extensions-in-rust-d35ea3a4ec29?sk=f8d808d5f414154fdb811e4137011437"&gt;Nine Rules for Writing Python Extensions in Rust&lt;/a&gt; - Dec 31, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://saidvandeklundert.net/learn/2021-11-18-calling-rust-from-python-using-pyo3/"&gt;Calling Rust from Python using PyO3&lt;/a&gt; - Nov 18, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-XyWG_klSAw&amp;amp;t=320s"&gt;davidhewitt's 2021 talk at Rust Manchester meetup&lt;/a&gt; - Aug 19, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.waleedkhan.name/port-python-to-rust/"&gt;Incrementally porting a small Python project to Rust&lt;/a&gt; - Apr 29, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.vortexa.com/insight/integrating-rust-into-python"&gt;Vortexa - Integrating Rust into Python&lt;/a&gt; - Apr 12, 2021&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.yossarian.net/2020/08/02/Writing-and-publishing-a-python-module-in-rust"&gt;Writing and publishing a Python module in Rust&lt;/a&gt; - Aug 2, 2020&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Everyone is welcomed to contribute to PyO3! There are many ways to support the project, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;help PyO3 users with issues on GitHub and &lt;a href="https://discord.gg/33kcChzH7f"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;improve documentation&lt;/li&gt; 
 &lt;li&gt;write features and bugfixes&lt;/li&gt; 
 &lt;li&gt;publish blogs and examples of how to use PyO3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/PyO3/pyo3/raw/main/Contributing.md"&gt;contributing notes&lt;/a&gt; and &lt;a href="https://github.com/PyO3/pyo3/raw/main/Architecture.md"&gt;architecture guide&lt;/a&gt; have more resources if you wish to volunteer time for PyO3 and are searching where to start.&lt;/p&gt; 
&lt;p&gt;If you don't have time to contribute yourself but still wish to support the project's future success, some of our maintainers have GitHub sponsorship pages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sponsors/davidhewitt"&gt;davidhewitt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sponsors/messense"&gt;messense&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;PyO3 is licensed under the &lt;a href="https://raw.githubusercontent.com/PyO3/pyo3/main/LICENSE-APACHE"&gt;Apache-2.0 license&lt;/a&gt; or the &lt;a href="https://raw.githubusercontent.com/PyO3/pyo3/main/LICENSE-MIT"&gt;MIT license&lt;/a&gt;, at your option.&lt;/p&gt; 
&lt;p&gt;Python is licensed under the &lt;a href="https://docs.python.org/3/license.html"&gt;Python License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in PyO3 by you, as defined in the Apache License, shall be dual-licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.netlify.com"&gt; &lt;img src="https://www.netlify.com/v3/img/components/netlify-color-accent.svg?sanitize=true" alt="Deploys by Netlify"&gt; &lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zed.dev"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/zed-industries/zed/main/assets/badge/v0.json" alt="Zed"&gt;&lt;/a&gt; &lt;a href="https://github.com/zed-industries/zed/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href="https://github.com/atom/atom"&gt;Atom&lt;/a&gt; and &lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;On macOS and Linux you can &lt;a href="https://zed.dev/download"&gt;download Zed directly&lt;/a&gt; or &lt;a href="https://zed.dev/docs/linux#installing-via-a-package-manager"&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (&lt;a href="https://github.com/zed-industries/zed/issues/5394"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Web (&lt;a href="https://github.com/zed-industries/zed/issues/5396"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md"&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md"&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md"&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md"&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we're hiring! Check out our &lt;a href="https://zed.dev/jobs"&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/EmbarkStudios/cargo-about"&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you've created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate's Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license's requirements. If you're unsure, ask a lawyer. Once you've verified that this system is acceptable add the license's SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href="https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration"&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Orange-OpenSource/hurl</title>
      <link>https://github.com/Orange-OpenSource/hurl</link>
      <description>&lt;p&gt;Hurl, run and test HTTP requests with plain text.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="/docs/assets/img/logo-light.svg?sanitize=true"&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="/docs/assets/img/logo-dark.svg?sanitize=true"&gt; 
 &lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/logo-light.svg?sanitize=true" width="264px" alt="Hurl Logo"&gt; 
&lt;/picture&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl/actions"&gt;&lt;img src="https://github.com/Orange-OpenSource/hurl/workflows/test/badge.svg?sanitize=true" alt="deploy status"&gt;&lt;/a&gt; &lt;a href="https://Orange-OpenSource.github.io/hurl/coverage"&gt;&lt;img src="https://Orange-OpenSource.github.io/hurl/coverage/badges/flat.svg?sanitize=true" alt="coverage"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/hurl"&gt;&lt;img src="https://img.shields.io/crates/v/hurl.svg?sanitize=true" alt="Crates.io"&gt;&lt;/a&gt; &lt;a href="https://hurl.dev"&gt;&lt;img src="https://img.shields.io/badge/-documentation-ff0288" alt="documentation"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;What's Hurl?&lt;/h1&gt; 
&lt;p&gt;Hurl is a command line tool that runs &lt;b&gt;HTTP requests&lt;/b&gt; defined in a simple &lt;b&gt;plain text format&lt;/b&gt;.&lt;/p&gt; 
&lt;p&gt;It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile: it can be used for both &lt;b&gt;fetching data&lt;/b&gt; and &lt;b&gt;testing HTTP&lt;/b&gt; sessions.&lt;/p&gt; 
&lt;p&gt;Hurl makes it easy to work with &lt;b&gt;HTML&lt;/b&gt; content, &lt;b&gt;REST / SOAP / GraphQL&lt;/b&gt; APIs, or any other &lt;b&gt;XML / JSON&lt;/b&gt; based APIs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Go home and capture token
GET https://example.org
HTTP 200
[Captures]
csrf_token: xpath "string(//meta[@name='_csrf_token']/@content)"


# Do login!
POST https://example.org/login
X-CSRF-TOKEN: {{csrf_token}}
[Form]
user: toto
password: 1234
HTTP 302
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Chaining multiple requests is easy:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/health
GET https://example.org/api/step1
GET https://example.org/api/step2
GET https://example.org/api/step3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Also an HTTP Test Tool&lt;/h1&gt; 
&lt;p&gt;Hurl can run HTTP requests but can also be used to &lt;b&gt;test HTTP responses&lt;/b&gt;. Different types of queries and predicates are supported, from &lt;a href="https://en.wikipedia.org/wiki/XPath"&gt;XPath&lt;/a&gt; and &lt;a href="https://goessner.net/articles/JsonPath/"&gt;JSONPath&lt;/a&gt; on body response, to assert on status code and response headers.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/player.html?id=starwars&amp;amp;speed=3"&gt;&lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/poster-starwars.png" width="100%" alt="Hurl Demo"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It is well adapted for &lt;b&gt;REST / JSON APIs&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
{
    "id": "4568",
    "evaluate": true
}
HTTP 200
[Asserts]
header "X-Frame-Options" == "SAMEORIGIN"
jsonpath "$.status" == "RUNNING"    # Check the status code
jsonpath "$.tests" count == 25      # Check the number of items
jsonpath "$.id" matches /\d{4}/     # Check the format of the id
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;b&gt;HTML content&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Asserts]
xpath "normalize-space(//head/title)" == "Hello world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;b&gt;GraphQL&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/graphql
```graphql
{
  human(id: "1000") {
    name
    height(unit: FOOT)
  }
}
```
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and even &lt;b&gt;SOAP APIs&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/InStock
Content-Type: application/soap+xml; charset=utf-8
SOAPAction: "http://www.w3.org/2003/05/soap-envelope"
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:m="https://example.org"&amp;gt;
  &amp;lt;soap:Header&amp;gt;&amp;lt;/soap:Header&amp;gt;
  &amp;lt;soap:Body&amp;gt;
    &amp;lt;m:GetStockPrice&amp;gt;
      &amp;lt;m:StockName&amp;gt;GOOG&amp;lt;/m:StockName&amp;gt;
    &amp;lt;/m:GetStockPrice&amp;gt;
  &amp;lt;/soap:Body&amp;gt;
&amp;lt;/soap:Envelope&amp;gt;
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can also be used to test the &lt;b&gt;performance&lt;/b&gt; of HTTP endpoints&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/v1/pets
HTTP 200
[Asserts]
duration &amp;lt; 1000  # Duration in ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And check response bytes&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.tar.gz
HTTP 200
[Asserts]
sha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, Hurl is easy to &lt;b&gt;integrate in CI/CD&lt;/b&gt;, with text, JUnit, TAP and HTML reports&lt;/p&gt; 
&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="/docs/assets/img/home-waterfall-light.png"&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="/docs/assets/img/home-waterfall-dark.png"&gt; 
 &lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/home-waterfall-light.png" width="480" alt="HTML report"&gt; 
&lt;/picture&gt; 
&lt;h1&gt;Why Hurl?&lt;/h1&gt; 
&lt;ul class="showcase-container"&gt; 
 &lt;li&gt;&lt;b&gt;Text Format:&lt;/b&gt; for both devops and developers&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Fast CLI:&lt;/b&gt; a command line for local dev and continuous integration&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Single Binary:&lt;/b&gt; easy to install, with no runtime required&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Powered by curl&lt;/h1&gt; 
&lt;p&gt;Hurl is a lightweight binary written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;. Under the hood, Hurl HTTP engine is powered by &lt;a href="https://curl.se/libcurl/"&gt;libcurl&lt;/a&gt;, one of the most powerful and reliable file transfer libraries. With its text file format, Hurl adds syntactic sugar to run and test HTTP requests, but it's still the &lt;a href="https://curl.se"&gt;curl&lt;/a&gt; that we love: &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;efficient&lt;/strong&gt; and &lt;strong&gt;IPv6 / HTTP/3 ready&lt;/strong&gt;.&lt;/p&gt; 
&lt;h1&gt;Feedbacks&lt;/h1&gt; 
&lt;p&gt;To support its development, &lt;a href="https://github.com/Orange-OpenSource/hurl/stargazers"&gt;star Hurl on GitHub&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl/issues"&gt;Feedback, suggestion, bugs or improvements&lt;/a&gt; are welcome.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://hurl.dev/api/feedback
{
  "name": "John Doe",
  "feedback": "Hurl is awesome!"
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/license.html"&gt;License&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/blog/"&gt;Blog&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/tutorial/your-first-hurl-file.html"&gt;Tutorial&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/installation.html"&gt;Documentation&lt;/a&gt; (download &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/standalone/hurl-7.0.0.html"&gt;HTML&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/standalone/hurl-7.0.0.pdf"&gt;PDF&lt;/a&gt;, &lt;a href="https://hurl.dev/docs/standalone/hurl-7.0.0.html"&gt;Markdown&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl"&gt;GitHub&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#samples"&gt;Samples&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#getting-data"&gt;Getting Data&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http-headers"&gt;HTTP Headers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#query-params"&gt;Query Params&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#basic-authentication"&gt;Basic Authentication&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#passing-data-between-requests"&gt;Passing Data between Requests &lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-data"&gt;Sending Data&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-html-form-data"&gt;Sending HTML Form Data&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-multipart-form-data"&gt;Sending Multipart Form Data&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#posting-a-json-body"&gt;Posting a JSON Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#templating-a-json-body"&gt;Templating a JSON Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#templating-a-xml-body"&gt;Templating a XML Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-graphql-query"&gt;Using GraphQL Query&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-dynamic-datas"&gt;Using Dynamic Datas&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-response"&gt;Testing Response&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-status-code"&gt;Testing Status Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-response-headers"&gt;Testing Response Headers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-rest-apis"&gt;Testing REST APIs&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-html-response"&gt;Testing HTML Response&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-set-cookie-attributes"&gt;Testing Set-Cookie Attributes&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-bytes-content"&gt;Testing Bytes Content&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ssl-certificate"&gt;SSL Certificate&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#checking-full-body"&gt;Checking Full Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-redirections"&gt;Testing Redirections&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debug-tips"&gt;Debug Tips&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose-mode"&gt;Verbose Mode&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#error-format"&gt;Error Format&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output-response-body"&gt;Output Response Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#export-curl-commands"&gt;Export curl Commands&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-proxy"&gt;Using Proxy&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#reports"&gt;Reports&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#html-report"&gt;HTML Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json-report"&gt;JSON Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#junit-report"&gt;JUnit Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#tap-report"&gt;TAP Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json-output"&gt;JSON Output&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#others"&gt;Others&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http-version"&gt;HTTP Version&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ip-address"&gt;IP Address&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#polling-and-retry"&gt;Polling and Retry&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#delaying-requests"&gt;Delaying Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#skipping-requests"&gt;Skipping Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-endpoint-performance"&gt;Testing Endpoint Performance&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-soap-apis"&gt;Using SOAP APIs&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#capturing-and-using-a-csrf-token"&gt;Capturing and Using a CSRF Token&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#redacting-secrets"&gt;Redacting Secrets&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#checking-byte-order-mark-bom-in-response-body"&gt;Checking Byte Order Mark (BOM) in Response Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#aws-signature-version-4-requests"&gt;AWS Signature Version 4 Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-curl-options"&gt;Using curl Options&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#manual"&gt;Manual&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#name"&gt;Name&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#synopsis"&gt;Synopsis&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#description"&gt;Description&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#hurl-file-format"&gt;Hurl File Format&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#capturing-values"&gt;Capturing values&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#asserts"&gt;Asserts&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#options"&gt;Options&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#environment"&gt;Environment&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#exit-codes"&gt;Exit Codes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#www"&gt;WWW&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#see-also"&gt;See Also&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#binaries-installation"&gt;Binaries Installation&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#linux"&gt;Linux&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debian--ubuntu"&gt;Debian / Ubuntu&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#alpine"&gt;Alpine&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#arch-linux--manjaro"&gt;Arch Linux / Manjaro&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#nixos--nix"&gt;NixOS / Nix&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#macos"&gt;macOS&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#homebrew"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#macports"&gt;MacPorts&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#freebsd"&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#windows"&gt;Windows&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#zip-file"&gt;Zip File&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#installer"&gt;Installer&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#chocolatey"&gt;Chocolatey&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#scoop"&gt;Scoop&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#windows-package-manager"&gt;Windows Package Manager&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cargo"&gt;Cargo&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#conda-forge"&gt;conda-forge&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#npm"&gt;npm&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#building-from-sources"&gt;Building From Sources&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-linux"&gt;Build on Linux&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debian-based-distributions"&gt;Debian based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#fedora-based-distributions"&gt;Fedora based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#red-hat-based-distributions"&gt;Red Hat based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#arch-based-distributions"&gt;Arch based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#alpine-based-distributions"&gt;Alpine based distributions&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-macos"&gt;Build on macOS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-windows"&gt;Build on Windows&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Samples&lt;/h1&gt; 
&lt;p&gt;To run a sample, edit a file with the sample content, and run Hurl:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ vi sample.hurl

GET https://example.org

$ hurl sample.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, Hurl behaves like &lt;a href="https://curl.se"&gt;curl&lt;/a&gt; and outputs the last HTTP response's &lt;a href="https://hurl.dev/docs/entry.html"&gt;entry&lt;/a&gt;. To have a test oriented output, you can use &lt;a href="https://hurl.dev/docs/manual.html#test"&gt;&lt;code&gt;--test&lt;/code&gt; option&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test sample.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A particular response can be saved with &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options] section&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.ord/cats/123
[Options]
output: cat123.txt    # use - to output to stdout
HTTP 200

GET https://example.ord/dogs/567
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, Hurl can take files as input, or directories. In the latter case, Hurl will search files with &lt;code&gt;.hurl&lt;/code&gt; extension recursively.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test integration/*.hurl
$ hurl --test .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check &lt;a href="https://github.com/Orange-OpenSource/hurl/tree/master/integration/hurl/tests_ok"&gt;Hurl tests suite&lt;/a&gt; for more samples.&lt;/p&gt; 
&lt;h2&gt;Getting Data&lt;/h2&gt; 
&lt;p&gt;A simple GET:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Requests can be chained:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/a
GET https://example.org/b
HEAD https://example.org/c
GET https://example.org/c
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#method"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;HTTP Headers&lt;/h3&gt; 
&lt;p&gt;A simple GET with headers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news
User-Agent: Mozilla/5.0 
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#headers"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Query Params&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news
[Query]
order: newest
search: something to search
count: 100
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news?order=newest&amp;amp;search=something%20to%20search&amp;amp;count=100
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;With &lt;code&gt;[Query]&lt;/code&gt; section, params don't need to be URL escaped.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#query-parameters"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Basic Authentication&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/protected
[BasicAuth]
bob: secret
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#basic-authentication"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This is equivalent to construct the request with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Authorization&lt;/a&gt; header:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Authorization header value can be computed with `echo -n 'bob:secret' | base64`
GET https://example.org/protected
Authorization: Basic Ym9iOnNlY3JldA== 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Basic authentication section allows per request authentication. If you want to add basic authentication to all the requests of a Hurl file you could use &lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;-u/--user&lt;/code&gt; option&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --user bob:secret login.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;--user&lt;/code&gt;&lt;/a&gt; option can also be set per request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/login
[Options]
user: bob:secret
HTTP 200

GET https://example.org/login
[Options]
user: alice:secret
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Passing Data between Requests&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;Captures&lt;/a&gt; can be used to pass data from one request to another:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sample.org/orders
HTTP 201
[Captures]
order_id: jsonpath "$.order.id"

GET https://sample.org/orders/{{order_id}}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sending Data&lt;/h2&gt; 
&lt;h3&gt;Sending HTML Form Data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/contact
[Form]
default: false
token: {{token}}
email: john.doe@rookie.org
number: 33611223344
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#form-parameters"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Sending Multipart Form Data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/upload
[Multipart]
field1: value1
field2: file,example.txt;
# One can specify the file content type:
field3: file,example.zip; application/zip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multipart-form-data"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Multipart forms can also be sent with a &lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;multiline string body&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/upload
Content-Type: multipart/form-data; boundary="boundary"
```
--boundary
Content-Disposition: form-data; name="key1"

value1
--boundary
Content-Disposition: form-data; name="upload1"; filename="data.txt"
Content-Type: text/plain

Hello World!
--boundary
Content-Disposition: form-data; name="upload2"; filename="data.html"
Content-Type: text/html

&amp;lt;div&amp;gt;Hello &amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt;!&amp;lt;/div&amp;gt;
--boundary--
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In that case, files have to be inlined in the Hurl file.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Posting a JSON Body&lt;/h3&gt; 
&lt;p&gt;With an inline JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
{
    "id": "456",
    "evaluate": true
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#json-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With a local file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
Content-Type: application/json
file,data.json;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#file-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Templating a JSON Body&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;PUT https://example.org/api/hits
Content-Type: application/json
{
    "key0": "{{a_string}}",
    "key1": {{a_bool}},
    "key2": {{a_null}},
    "key3": {{a_number}}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variables can be initialized via command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --variable a_string=apple \
       --variable a_bool=true \
       --variable a_null=null \
       --variable a_number=42 \
       test.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Resulting in a PUT request with the following JSON body:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    "key0": "apple",
    "key1": true,
    "key2": null,
    "key3": 42
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Templating a XML Body&lt;/h3&gt; 
&lt;p&gt;Using templates with &lt;a href="https://hurl.dev/docs/request.html#xml-body"&gt;XML body&lt;/a&gt; is not currently supported in Hurl. You can use templates in &lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;XML multiline string body&lt;/a&gt; with variables to send a variable XML body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/echo/post/xml
```xml
&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;Request&amp;gt;
    &amp;lt;Login&amp;gt;{{login}}&amp;lt;/Login&amp;gt;
    &amp;lt;Password&amp;gt;{{password}}&amp;lt;/Password&amp;gt;
&amp;lt;/Request&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using GraphQL Query&lt;/h3&gt; 
&lt;p&gt;A simple GraphQL query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/starwars/graphql
```graphql
{
  human(id: "1000") {
    name
    height(unit: FOOT)
  }
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A GraphQL query with variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/starwars/graphql
```graphql
query Hero($episode: Episode, $withFriends: Boolean!) {
  hero(episode: $episode) {
    name
    friends @include(if: $withFriends) {
      name
    }
  }
}

variables {
  "episode": "JEDI",
  "withFriends": false
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GraphQL queries can also use &lt;a href="https://hurl.dev/docs/templates.html"&gt;Hurl templates&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#graphql-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using Dynamic Datas&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#functions"&gt;Functions&lt;/a&gt; like &lt;code&gt;newUuid&lt;/code&gt; and &lt;code&gt;newDate&lt;/code&gt; can be used in templates to create dynamic datas:&lt;/p&gt; 
&lt;p&gt;A file that creates a dynamic email (i.e &lt;code&gt;0531f78f-7f87-44be-a7f2-969a1c4e6d97@test.com&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/foo
{
  "name": "foo",
  "email": "{{newUuid}}@test.com"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A file that creates a dynamic query parameter (i.e &lt;code&gt;2024-12-02T10:35:44.461731Z&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/foo
[Query]
date: {{newDate}}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#functions"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Testing Response&lt;/h2&gt; 
&lt;p&gt;Responses are optional, everything after &lt;code&gt;HTTP&lt;/code&gt; is part of the response asserts.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# A request with (almost) no check:
GET https://foo.com

# A status code check:
GET https://foo.com
HTTP 200

# A test on response body
GET https://foo.com
HTTP 200
[Asserts]
jsonpath "$.state" == "running"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing Status Code&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order/435
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-status"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order/435
# Testing status code is in a 200-300 range
HTTP *
[Asserts]
status &amp;gt;= 200
status &amp;lt; 300
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#status-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Response Headers&lt;/h3&gt; 
&lt;p&gt;Use implicit response asserts to test header values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
Set-Cookie: theme=light
Set-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#headers"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or use explicit response asserts with &lt;a href="https://hurl.dev/docs/asserting-response.html#predicates"&gt;predicates&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 302
[Asserts]
header "Location" contains "www.example.net"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#header-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Implicit and explicit asserts can be combined:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
Set-Cookie: theme=light
Set-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT
[Asserts]
header "Location" contains "www.example.net"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing REST APIs&lt;/h3&gt; 
&lt;p&gt;Asserting JSON body response (node values, collection count etc...) with &lt;a href="https://goessner.net/articles/JsonPath/"&gt;JSONPath&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order
screencapability: low
HTTP 200
[Asserts]
jsonpath "$.validated" == true
jsonpath "$.userInfo.firstName" == "Franck"
jsonpath "$.userInfo.lastName" == "Herbert"
jsonpath "$.hasDevice" == false
jsonpath "$.links" count == 12
jsonpath "$.state" != null
jsonpath "$.order" matches "^order-\\d{8}$"
jsonpath "$.order" matches /^order-\d{8}$/  # Alternative syntax with regex literal
jsonpath "$.id" matches /(?i)[a-z]*/        # See syntax for flags &amp;lt;https://docs.rs/regex/latest/regex/#grouping-and-flags&amp;gt;
jsonpath "$.created" isIsoDate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#jsonpath-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing HTML Response&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
Content-Type: text/html; charset=UTF-8
[Asserts]
xpath "string(/html/head/title)" contains "Example" # Check title
xpath "count(//p)" == 2  # Check the number of p
xpath "//p" count == 2  # Similar assert for p
xpath "boolean(count(//h2))" == false  # Check there is no h2  
xpath "//h2" not exists  # Similar assert for h2
xpath "string(//div[1])" matches /Hello.*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#xpath-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Set-Cookie Attributes&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/home
HTTP 200
[Asserts]
cookie "JSESSIONID" == "8400BAFE2F66443613DC38AE3D9D6239"
cookie "JSESSIONID[Value]" == "8400BAFE2F66443613DC38AE3D9D6239"
cookie "JSESSIONID[Expires]" contains "Wed, 13 Jan 2021"
cookie "JSESSIONID[Secure]" exists
cookie "JSESSIONID[HttpOnly]" exists
cookie "JSESSIONID[SameSite]" == "Lax"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#cookie-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Bytes Content&lt;/h3&gt; 
&lt;p&gt;Check the SHA-256 response body hash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.tar.gz
HTTP 200
[Asserts]
sha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#sha-256-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;SSL Certificate&lt;/h3&gt; 
&lt;p&gt;Check the properties of a SSL certificate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Asserts]
certificate "Subject" == "CN=example.org"
certificate "Issuer" == "C=US, O=Let's Encrypt, CN=R3"
certificate "Expire-Date" daysAfterNow &amp;gt; 15
certificate "Serial-Number" matches /[\da-f]+/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#ssl-certificate-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Checking Full Body&lt;/h3&gt; 
&lt;p&gt;Use implicit body to test an exact JSON body match:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/cats/123
HTTP 200
{
  "name" : "Purrsloud",
  "species" : "Cat",
  "favFoods" : ["wet food", "dry food", "&amp;lt;strong&amp;gt;any&amp;lt;/strong&amp;gt; food"],
  "birthYear" : 2016,
  "photo" : "https://learnwebcode.github.io/json-example/images/cat-2.jpg"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#json-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or an explicit assert file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
[Asserts]
body == file,cat.json;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#body-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Implicit asserts supports XML body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/catalog
HTTP 200
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;catalog&amp;gt;
   &amp;lt;book id="bk101"&amp;gt;
      &amp;lt;author&amp;gt;Gambardella, Matthew&amp;lt;/author&amp;gt;
      &amp;lt;title&amp;gt;XML Developer's Guide&amp;lt;/title&amp;gt;
      &amp;lt;genre&amp;gt;Computer&amp;lt;/genre&amp;gt;
      &amp;lt;price&amp;gt;44.95&amp;lt;/price&amp;gt;
      &amp;lt;publish_date&amp;gt;2000-10-01&amp;lt;/publish_date&amp;gt;
      &amp;lt;description&amp;gt;An in-depth look at creating applications with XML.&amp;lt;/description&amp;gt;
   &amp;lt;/book&amp;gt;
&amp;lt;/catalog&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#xml-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Plain text:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/models
HTTP 200
```
Year,Make,Model,Description,Price
1997,Ford,E350,"ac, abs, moon",3000.00
1999,Chevy,"Venture ""Extended Edition""","",4900.00
1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00
1996,Jeep,Grand Cherokee,"MUST SELL! air, moon roof, loaded",4799.00
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;One line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/helloworld
HTTP 200
`Hello world!`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#oneline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;File:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
file,data.bin;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#file-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Redirections&lt;/h3&gt; 
&lt;p&gt;By default, Hurl doesn't follow redirection so each step of a redirect must be run manually and can be analysed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
HTTP 301
[Asserts]
header "Location" == "https://example.org/step2"


GET https://example.org/step2
HTTP 301
[Asserts]
header "Location" == "https://example.org/step3"


GET https://example.org/step3
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;a href="https://hurl.dev/docs/manual.html#location"&gt;&lt;code&gt;--location&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://hurl.dev/docs/manual.html#location-trusted"&gt;&lt;code&gt;--location-trusted&lt;/code&gt;&lt;/a&gt; (either with command line option or per request), Hurl follows redirection and each step of the redirection can be checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
[Options]
location: true
HTTP 200
[Asserts]
redirects count == 2
redirects nth 0 location == "https://example.org/step2"
redirects nth 1 location == "https://example.org/step3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
[Options]
location-trusted: true
HTTP 200
[Asserts]
redirects last location == "https://example.org/step2"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#redirects-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Debug Tips&lt;/h2&gt; 
&lt;h3&gt;Verbose Mode&lt;/h3&gt; 
&lt;p&gt;To get more info on a given request/response, use &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt; section&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200

GET https://example.org/api/cats/123
[Options]
very-verbose: true
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;--verbose&lt;/code&gt; and &lt;code&gt;--very-verbose&lt;/code&gt; can be also used globally as command line options.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#very-verbose"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Error Format&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --error-format long *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#error-format"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Output Response Body&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;--output&lt;/code&gt; on a specific request to get the response body (&lt;code&gt;-&lt;/code&gt; can be used as standard output):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com/failure
[Options]
# use - to output on standard output, foo.bin to save on disk 
output: -
HTTP 200

GET https://foo.com/success
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#output"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Export curl Commands&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl ---curl /tmp/curl.txt *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#curl"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using Proxy&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;--proxy&lt;/code&gt; on a specific request or globally as command line option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com/a
HTTP 200

GET https://foo.com/b
[Options]
proxy: localhost:8888
HTTP 200

GET https://foo.com/c
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Reports&lt;/h2&gt; 
&lt;h3&gt;HTML Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-html build/report/ *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JSON Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-json build/report/ *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JUnit Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-junit build/report.xml *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;TAP Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-tap build/report.txt *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JSON Output&lt;/h3&gt; 
&lt;p&gt;A structured output of running Hurl files can be obtained with &lt;a href="https://hurl.dev/docs/manual.html#json"&gt;&lt;code&gt;--json&lt;/code&gt; option&lt;/a&gt;. Each file will produce a JSON export of the run.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --json *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Others&lt;/h2&gt; 
&lt;h3&gt;HTTP Version&lt;/h3&gt; 
&lt;p&gt;Testing HTTP version (HTTP/1.0, HTTP/1.1, HTTP/2 or HTTP/3) can be done using implicit asserts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP/3 200

GET https://bar.com
HTTP/2 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-status"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or explicit:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP 200
[Asserts]
version == "3"

GET https://bar.com
HTTP 200
[Asserts]
version == "2"
version toFloat &amp;gt; 1.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;IP Address&lt;/h3&gt; 
&lt;p&gt;Testing the IP address of the response, as a string. This string may be IPv6 address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP 200
[Asserts]
ip == "2001:0db8:85a3:0000:0000:8a2e:0370:733"
ip startsWith "2001"
ip isIpv6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Polling and Retry&lt;/h3&gt; 
&lt;p&gt;Retry request on any errors (asserts, captures, status code, runtime etc...):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Create a new job
POST https://api.example.org/jobs
HTTP 201
[Captures]
job_id: jsonpath "$.id"
[Asserts]
jsonpath "$.state" == "RUNNING"


# Pull job status until it is completed
GET https://api.example.org/jobs/{{job_id}}
[Options]
retry: 10   # maximum number of retry, -1 for unlimited
retry-interval: 500ms
HTTP 200
[Asserts]
jsonpath "$.state" == "COMPLETED"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/entry.html#retry"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Delaying Requests&lt;/h3&gt; 
&lt;p&gt;Add delay for every request, or a particular request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Delaying this request by 5 seconds (aka sleep)
GET https://example.org/turtle
[Options]
delay: 5s
HTTP 200

# No delay!
GET https://example.org/turtle
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#delay"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Skipping Requests&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# a, c, d are run, b is skipped
GET https://example.org/a

GET https://example.org/b
[Options]
skip: true

GET https://example.org/c

GET https://example.org/d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#skip"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Endpoint Performance&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://sample.org/helloworld
HTTP *
[Asserts]
duration &amp;lt; 1000   # Check that response time is less than one second
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#duration-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using SOAP APIs&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/InStock
Content-Type: application/soap+xml; charset=utf-8
SOAPAction: "http://www.w3.org/2003/05/soap-envelope"
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:m="https://example.org"&amp;gt;
  &amp;lt;soap:Header&amp;gt;&amp;lt;/soap:Header&amp;gt;
  &amp;lt;soap:Body&amp;gt;
    &amp;lt;m:GetStockPrice&amp;gt;
      &amp;lt;m:StockName&amp;gt;GOOG&amp;lt;/m:StockName&amp;gt;
    &amp;lt;/m:GetStockPrice&amp;gt;
  &amp;lt;/soap:Body&amp;gt;
&amp;lt;/soap:Envelope&amp;gt;
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#xml-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Capturing and Using a CSRF Token&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Captures]
csrf_token: xpath "string(//meta[@name='_csrf_token']/@content)"


POST https://example.org/login?user=toto&amp;amp;password=1234
X-CSRF-TOKEN: {{csrf_token}}
HTTP 302
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html#xpath-capture"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Redacting Secrets&lt;/h3&gt; 
&lt;p&gt;Using command-line for known values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --secret token=1234 file.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org
X-Token: {{token}}
{
  "name": "Alice",
  "value": 100
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#secrets"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;code&gt;redact&lt;/code&gt; for dynamic values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Get an authorization token:
GET https://example.org/token
HTTP 200
[Captures]
token: header "X-Token" redact

# Send an authorized request:
POST https://example.org
X-Token: {{token}}
{
  "name": "Alice",
  "value": 100
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html#redacting-secrets"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Checking Byte Order Mark (BOM) in Response Body&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.bin
HTTP 200
[Asserts]
bytes startsWith hex,efbbbf;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#bytes-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;AWS Signature Version 4 Requests&lt;/h3&gt; 
&lt;p&gt;Generate signed API requests with &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html"&gt;AWS Signature Version 4&lt;/a&gt;, as used by several cloud providers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sts.eu-central-1.amazonaws.com/
[Options]
aws-sigv4: aws:amz:eu-central-1:sts
[Form]
Action: GetCallerIdentity
Version: 2011-06-15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Access Key is given per &lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;--user&lt;/code&gt;&lt;/a&gt;, either with command line option or within the &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt;&lt;/a&gt; section:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sts.eu-central-1.amazonaws.com/
[Options]
aws-sigv4: aws:amz:eu-central-1:sts
user: bob=secret
[Form]
Action: GetCallerIdentity
Version: 2011-06-15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#aws-sigv4"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using curl Options&lt;/h3&gt; 
&lt;p&gt;curl options (for instance &lt;a href="https://hurl.dev/docs/manual.html#resolve"&gt;&lt;code&gt;--resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://hurl.dev/docs/manual.html#connect-to"&gt;&lt;code&gt;--connect-to&lt;/code&gt;&lt;/a&gt;) can be used as CLI argument. In this case, they're applicable to each request of an Hurl file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --resolve foo.com:8000:127.0.0.1 foo.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt; section&lt;/a&gt; to configure a specific request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://bar.com
HTTP 200


GET http://foo.com:8000/resolve
[Options]
resolve: foo.com:8000:127.0.0.1
HTTP 200
`Hello World!`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#options"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Manual&lt;/h1&gt; 
&lt;h2&gt;Name&lt;/h2&gt; 
&lt;p&gt;hurl - run and test HTTP requests.&lt;/p&gt; 
&lt;h2&gt;Synopsis&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;hurl&lt;/strong&gt; [options] [FILE...]&lt;/p&gt; 
&lt;h2&gt;Description&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Hurl&lt;/strong&gt; is a command line tool that runs HTTP requests defined in a simple plain text format.&lt;/p&gt; 
&lt;p&gt;It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile, it can be used for fetching data and testing HTTP sessions: HTML content, REST / SOAP / GraphQL APIs, or any other XML / JSON based APIs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl session.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If no input files are specified, input is read from stdin.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ echo GET http://httpbin.org/get | hurl
    {
      "args": {},
      "headers": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip",
        "Content-Length": "0",
        "Host": "httpbin.org",
        "User-Agent": "hurl/0.99.10",
        "X-Amzn-Trace-Id": "Root=1-5eedf4c7-520814d64e2f9249ea44e0"
      },
      "origin": "1.2.3.4",
      "url": "http://httpbin.org/get"
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can take files as input, or directories. In the latter case, Hurl will search files with &lt;code&gt;.hurl&lt;/code&gt; extension recursively.&lt;/p&gt; 
&lt;p&gt;Output goes to stdout by default. To have output go to a file, use the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output"&gt;&lt;code&gt;-o, --output&lt;/code&gt;&lt;/a&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl -o output input.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, Hurl executes all HTTP requests and outputs the response body of the last HTTP call.&lt;/p&gt; 
&lt;p&gt;To have a test oriented output, you can use &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Hurl File Format&lt;/h2&gt; 
&lt;p&gt;The Hurl file format is fully documented in &lt;a href="https://hurl.dev/docs/hurl-file.html"&gt;https://hurl.dev/docs/hurl-file.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It consists of one or several HTTP requests&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org/endpoint1
GET http://example.org/endpoint2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Capturing values&lt;/h3&gt; 
&lt;p&gt;A value from an HTTP response can be-reused for successive HTTP requests.&lt;/p&gt; 
&lt;p&gt;A typical example occurs with CSRF tokens.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
# Capture the CSRF token value from html body.
[Captures]
csrf_token: xpath "normalize-space(//meta[@name='_csrf_token']/@content)"

# Do the login !
POST https://example.org/login?user=toto&amp;amp;password=1234
X-CSRF-TOKEN: {{csrf_token}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More information on captures can be found here &lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;https://hurl.dev/docs/capturing-response.html&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Asserts&lt;/h3&gt; 
&lt;p&gt;The HTTP response defined in the Hurl file are used to make asserts. Responses are optional.&lt;/p&gt; 
&lt;p&gt;At the minimum, response includes assert on the HTTP status code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It can also include asserts on the response headers&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
Location: http://www.example.org
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Explicit asserts can be included by combining a query and a predicate&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
[Asserts]
xpath "string(//title)" == "301 Moved"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the addition of asserts, Hurl can be used as a testing tool to run scenarios.&lt;/p&gt; 
&lt;p&gt;More information on asserts can be found here &lt;a href="https://hurl.dev/docs/asserting-response.html"&gt;https://hurl.dev/docs/asserting-response.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;p&gt;Options that exist in curl have exactly the same semantics.&lt;/p&gt; 
&lt;p&gt;Options specified on the command line are defined for every Hurl file's entry, except if they are tagged as cli-only (can not be defined in the Hurl request [Options] entry)&lt;/p&gt; 
&lt;p&gt;For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --location foo.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will follow redirection for each entry in &lt;code&gt;foo.hurl&lt;/code&gt;. You can also define an option only for a particular entry with an &lt;code&gt;[Options]&lt;/code&gt; section. For instance, this Hurl file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 301

GET https://example.org
[Options]
location: true
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will follow a redirection only for the second entry.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#aws-sigv4" id="aws-sigv4"&gt;&lt;code&gt;--aws-sigv4 &amp;lt;PROVIDER1[:PROVIDER2[:REGION[:SERVICE]]]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate an &lt;code&gt;Authorization&lt;/code&gt; header with an AWS SigV4 signature.&lt;br&gt;&lt;br&gt;Use &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user"&gt;&lt;code&gt;-u, --user&lt;/code&gt;&lt;/a&gt; to specify Access Key Id (username) and Secret Key (password).&lt;br&gt;&lt;br&gt;To use temporary session credentials (e.g. for an AWS IAM Role), add the &lt;code&gt;X-Amz-Security-Token&lt;/code&gt; header containing the session token.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cacert" id="cacert"&gt;&lt;code&gt;--cacert &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specifies the certificate file for peer verification. The file may contain multiple CA certificates and must be in PEM format.&lt;br&gt;Normally Hurl is built to use a default file for this, so this option is typically used to alter that default file.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cert" id="cert"&gt;&lt;code&gt;-E, --cert &amp;lt;CERTIFICATE[:PASSWORD]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Client certificate file and password.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#key"&gt;&lt;code&gt;--key&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#color" id="color"&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Colorize debug output (the HTTP response output is not colorized).&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#compressed" id="compressed"&gt;&lt;code&gt;--compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Request a compressed response using one of the algorithms br, gzip, deflate and automatically decompress the content.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-timeout" id="connect-timeout"&gt;&lt;code&gt;--connect-timeout &amp;lt;SECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum time in seconds that you allow Hurl's connection to take.&lt;br&gt;&lt;br&gt;You can specify time units in the connect timeout expression. Set Hurl to use a connect timeout of 20 seconds with &lt;code&gt;--connect-timeout 20s&lt;/code&gt; or set it to 35,000 milliseconds with &lt;code&gt;--connect-timeout 35000ms&lt;/code&gt;. No spaces allowed.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-time"&gt;&lt;code&gt;-m, --max-time&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-to" id="connect-to"&gt;&lt;code&gt;--connect-to &amp;lt;HOST1:PORT1:HOST2:PORT2&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead. This option can be used several times in a command line.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#resolve"&gt;&lt;code&gt;--resolve&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#continue-on-error" id="continue-on-error"&gt;&lt;code&gt;--continue-on-error&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Continue executing requests to the end of the Hurl file even when an assert error occurs.&lt;br&gt;By default, Hurl exits after an assert error in the HTTP response.&lt;br&gt;&lt;br&gt;Note that this option does not affect the behavior with multiple input Hurl files.&lt;br&gt;&lt;br&gt;All the input files are executed independently. The result of one file does not affect the execution of the other Hurl files.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie" id="cookie"&gt;&lt;code&gt;-b, --cookie &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Read cookies from FILE (using the Netscape cookie file format).&lt;br&gt;&lt;br&gt;Combined with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie-jar"&gt;&lt;code&gt;-c, --cookie-jar&lt;/code&gt;&lt;/a&gt;, you can simulate a cookie storage between successive Hurl runs.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie-jar" id="cookie-jar"&gt;&lt;code&gt;-c, --cookie-jar &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write cookies to FILE after running the session.&lt;br&gt;The file will be written using the Netscape cookie file format.&lt;br&gt;&lt;br&gt;Combined with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie"&gt;&lt;code&gt;-b, --cookie&lt;/code&gt;&lt;/a&gt;, you can simulate a cookie storage between successive Hurl runs.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#curl" id="curl"&gt;&lt;code&gt;--curl &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Export each request to a list of curl commands.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#delay" id="delay"&gt;&lt;code&gt;--delay &amp;lt;MILLISECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Sets delay before each request (aka sleep). The delay is not applied to requests that have been retried because of &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry"&gt;&lt;code&gt;--retry&lt;/code&gt;&lt;/a&gt;. See &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry-interval"&gt;&lt;code&gt;--retry-interval&lt;/code&gt;&lt;/a&gt; to space retried requests.&lt;br&gt;&lt;br&gt;You can specify time units in the delay expression. Set Hurl to use a delay of 2 seconds with &lt;code&gt;--delay 2s&lt;/code&gt; or set it to 500 milliseconds with &lt;code&gt;--delay 500ms&lt;/code&gt;. No spaces allowed.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#error-format" id="error-format"&gt;&lt;code&gt;--error-format &amp;lt;FORMAT&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Control the format of error message (short by default or long)&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#file-root" id="file-root"&gt;&lt;code&gt;--file-root &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set root directory to import files in Hurl. This is used for files in multipart form data, request body and response output.&lt;br&gt;When it is not explicitly defined, files are relative to the Hurl file's directory.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#from-entry" id="from-entry"&gt;&lt;code&gt;--from-entry &amp;lt;ENTRY_NUMBER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Execute Hurl file from ENTRY_NUMBER (starting at 1).&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#glob" id="glob"&gt;&lt;code&gt;--glob &amp;lt;GLOB&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify input files that match the given glob pattern.&lt;br&gt;&lt;br&gt;Multiple glob flags may be used. This flag supports common Unix glob patterns like *, ? and [].&lt;br&gt;However, to avoid your shell accidentally expanding glob patterns before Hurl handles them, you must use single quotes or double quotes around each pattern.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#header" id="header"&gt;&lt;code&gt;-H, --header &amp;lt;HEADER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add an extra header to include in information sent. Can be used several times in a command&lt;br&gt;&lt;br&gt;Do not add newlines or carriage returns&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http10" id="http10"&gt;&lt;code&gt;-0, --http1.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 1.0 instead of using its internally preferred HTTP version.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http11" id="http11"&gt;&lt;code&gt;--http1.1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 1.1.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http2" id="http2"&gt;&lt;code&gt;--http2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 2.&lt;br&gt;For HTTPS, this means Hurl negotiates HTTP/2 in the TLS handshake. Hurl does this by default.&lt;br&gt;For HTTP, this means Hurl attempts to upgrade the request to HTTP/2 using the Upgrade: request header.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http3" id="http3"&gt;&lt;code&gt;--http3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to try HTTP/3 to the host in the URL, but fallback to earlier HTTP versions if the HTTP/3 connection establishment fails. HTTP/3 is only available for HTTPS and not for HTTP URLs.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ignore-asserts" id="ignore-asserts"&gt;&lt;code&gt;--ignore-asserts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Ignore all asserts defined in the Hurl file.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#include" id="include"&gt;&lt;code&gt;-i, --include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Include the HTTP headers in the output&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#insecure" id="insecure"&gt;&lt;code&gt;-k, --insecure&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option explicitly allows Hurl to perform "insecure" SSL connections and transfers.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ipv4" id="ipv4"&gt;&lt;code&gt;-4, --ipv4&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option tells Hurl to use IPv4 addresses only when resolving host names, and not for example try IPv6.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ipv6" id="ipv6"&gt;&lt;code&gt;-6, --ipv6&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option tells Hurl to use IPv6 addresses only when resolving host names, and not for example try IPv4.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs" id="jobs"&gt;&lt;code&gt;--jobs &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum number of parallel jobs in parallel mode. Default value corresponds (in most cases) to the&lt;br&gt;current amount of CPUs.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#parallel"&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json" id="json"&gt;&lt;code&gt;--json&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Output each Hurl file result to JSON. The format is very closed to HAR format.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#key" id="key"&gt;&lt;code&gt;--key &amp;lt;KEY&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Private key file name.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#limit-rate" id="limit-rate"&gt;&lt;code&gt;--limit-rate &amp;lt;SPEED&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the maximum transfer rate you want Hurl to use, for both downloads and uploads. This feature is useful if you have a limited pipe and you would like your transfer not to use your entire bandwidth. To make it slower than it otherwise would be.&lt;br&gt;The given speed is measured in bytes/second.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location" id="location"&gt;&lt;code&gt;-L, --location&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Follow redirect. To limit the amount of redirects to follow use the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-redirs"&gt;&lt;code&gt;--max-redirs&lt;/code&gt;&lt;/a&gt; option&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location-trusted" id="location-trusted"&gt;&lt;code&gt;--location-trusted&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location"&gt;&lt;code&gt;-L, --location&lt;/code&gt;&lt;/a&gt;, but allows sending the name + password to all hosts that the site may redirect to.&lt;br&gt;This may or may not introduce a security breach if the site redirects you to a site to which you send your authentication info (which is plaintext in the case of HTTP Basic authentication).&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-filesize" id="max-filesize"&gt;&lt;code&gt;--max-filesize &amp;lt;BYTES&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the maximum size in bytes of a file to download. If the file requested is larger than this value, the transfer does not start.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-redirs" id="max-redirs"&gt;&lt;code&gt;--max-redirs &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set maximum number of redirection-followings allowed&lt;br&gt;&lt;br&gt;By default, the limit is set to 50 redirections. Set this option to -1 to make it unlimited.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-time" id="max-time"&gt;&lt;code&gt;-m, --max-time &amp;lt;SECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum time in seconds that you allow a request/response to take. This is the standard timeout.&lt;br&gt;&lt;br&gt;You can specify time units in the maximum time expression. Set Hurl to use a maximum time of 20 seconds with &lt;code&gt;--max-time 20s&lt;/code&gt; or set it to 35,000 milliseconds with &lt;code&gt;--max-time 35000ms&lt;/code&gt;. No spaces allowed.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-timeout"&gt;&lt;code&gt;--connect-timeout&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#negotiate" id="negotiate"&gt;&lt;code&gt;--negotiate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to use Negotiate (SPNEGO) authentication.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc" id="netrc"&gt;&lt;code&gt;-n, --netrc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scan the .netrc file in the user's home directory for the username and password.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file"&gt;&lt;code&gt;--netrc-file&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file" id="netrc-file"&gt;&lt;code&gt;--netrc-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc"&gt;&lt;code&gt;--netrc&lt;/code&gt;&lt;/a&gt;, but provide the path to the netrc file.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional" id="netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Similar to &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc"&gt;&lt;code&gt;--netrc&lt;/code&gt;&lt;/a&gt;, but make the .netrc usage optional.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file"&gt;&lt;code&gt;--netrc-file&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color" id="no-color"&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Do not colorize output.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-output" id="no-output"&gt;&lt;code&gt;--no-output&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Suppress output. By default, Hurl outputs the body of the last response.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#noproxy" id="noproxy"&gt;&lt;code&gt;--noproxy &amp;lt;HOST(S)&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Comma-separated list of hosts which do not use a proxy.&lt;br&gt;&lt;br&gt;Override value from Environment variable no_proxy.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ntlm" id="ntlm"&gt;&lt;code&gt;--ntlm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to use NTLM authentication&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output" id="output"&gt;&lt;code&gt;-o, --output &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write output to FILE instead of stdout. Use '-' for stdout in [Options] sections.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#parallel" id="parallel"&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run files in parallel.&lt;br&gt;&lt;br&gt;Each Hurl file is executed in its own worker thread, without sharing anything with the other workers. The default run mode is sequential. Parallel execution is by default in &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt; mode.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs"&gt;&lt;code&gt;--jobs&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#path-as-is" id="path-as-is"&gt;&lt;code&gt;--path-as-is&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to not handle sequences of /../ or /./ in the given URL path. Normally Hurl will squash or merge them according to standards but with this option set you tell it not to do that.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#pinnedpubkey" id="pinnedpubkey"&gt;&lt;code&gt;--pinnedpubkey &amp;lt;HASHES&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does not exactly match the public key provided to this option, Hurl aborts the connection before sending or receiving any data.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#progress-bar" id="progress-bar"&gt;&lt;code&gt;--progress-bar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Display a progress bar in test mode. The progress bar is displayed only in interactive TTYs. This option forces the progress bar to be displayed even in non-interactive TTYs.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#proxy" id="proxy"&gt;&lt;code&gt;-x, --proxy &amp;lt;[PROTOCOL://]HOST[:PORT]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use the specified proxy.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#repeat" id="repeat"&gt;&lt;code&gt;--repeat &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Repeat the input files sequence NUM times, -1 for infinite loop. Given a.hurl, b.hurl, c.hurl as input, repeat two&lt;br&gt;times will run a.hurl, b.hurl, c.hurl, a.hurl, b.hurl, c.hurl.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-html" id="report-html"&gt;&lt;code&gt;--report-html &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate HTML report in DIR.&lt;br&gt;&lt;br&gt;If the HTML report already exists, it will be updated with the new test results.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-json" id="report-json"&gt;&lt;code&gt;--report-json &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate JSON report in DIR.&lt;br&gt;&lt;br&gt;If the JSON report already exists, it will be updated with the new test results.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-junit" id="report-junit"&gt;&lt;code&gt;--report-junit &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate JUnit File.&lt;br&gt;&lt;br&gt;If the FILE report already exists, it will be updated with the new test results.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-tap" id="report-tap"&gt;&lt;code&gt;--report-tap &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate TAP report.&lt;br&gt;&lt;br&gt;If the FILE report already exists, it will be updated with the new test results.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#resolve" id="resolve"&gt;&lt;code&gt;--resolve &amp;lt;HOST:PORT:ADDR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Provide a custom address for a specific host and port pair. Using this, you can make the Hurl requests(s) use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry" id="retry"&gt;&lt;code&gt;--retry &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum number of retries, 0 for no retries, -1 for unlimited retries. Retry happens if any error occurs (asserts, captures, runtimes etc...).&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry-interval" id="retry-interval"&gt;&lt;code&gt;--retry-interval &amp;lt;MILLISECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Duration in milliseconds between each retry. Default is 1000 ms.&lt;br&gt;&lt;br&gt;You can specify time units in the retry interval expression. Set Hurl to use a retry interval of 2 seconds with &lt;code&gt;--retry-interval 2s&lt;/code&gt; or set it to 500 milliseconds with &lt;code&gt;--retry-interval 500ms&lt;/code&gt;. No spaces allowed.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secret" id="secret"&gt;&lt;code&gt;--secret &amp;lt;NAME=VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define secret value to be redacted from logs and report. When defined, secrets can be used as variable everywhere variables are used.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secrets-file" id="secrets-file"&gt;&lt;code&gt;--secrets-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define a secrets file in which you define your secrets&lt;br&gt;&lt;br&gt;Each secret is defined as name=value exactly as with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secret"&gt;&lt;code&gt;--secret&lt;/code&gt;&lt;/a&gt; option.&lt;br&gt;&lt;br&gt;Note that defining a secret twice produces an error.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ssl-no-revoke" id="ssl-no-revoke"&gt;&lt;code&gt;--ssl-no-revoke&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;(Windows) This option tells Hurl to disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test" id="test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Activate test mode: with this, the HTTP response is not outputted anymore, progress is reported for each Hurl file tested, and a text summary is displayed when all files have been run.&lt;br&gt;&lt;br&gt;In test mode, files are executed in parallel. To run test in a sequential way use &lt;code&gt;--job 1&lt;/code&gt;.&lt;br&gt;&lt;br&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs"&gt;&lt;code&gt;--jobs&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#to-entry" id="to-entry"&gt;&lt;code&gt;--to-entry &amp;lt;ENTRY_NUMBER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Execute Hurl file to ENTRY_NUMBER (starting at 1).&lt;br&gt;Ignore the remaining of the file. It is useful for debugging a session.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#unix-socket" id="unix-socket"&gt;&lt;code&gt;--unix-socket &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;(HTTP) Connect through this Unix domain socket, instead of using the network.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user" id="user"&gt;&lt;code&gt;-u, --user &amp;lt;USER:PASSWORD&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add basic Authentication header to each request.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user-agent" id="user-agent"&gt;&lt;code&gt;-A, --user-agent &amp;lt;NAME&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the User-Agent string to send to the HTTP server.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable" id="variable"&gt;&lt;code&gt;--variable &amp;lt;NAME=VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define variable (name/value) to be used in Hurl templates.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variables-file" id="variables-file"&gt;&lt;code&gt;--variables-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set properties file in which your define your variables.&lt;br&gt;&lt;br&gt;Each variable is defined as name=value exactly as with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable"&gt;&lt;code&gt;--variable&lt;/code&gt;&lt;/a&gt; option.&lt;br&gt;&lt;br&gt;Note that defining a variable twice produces an error.&lt;br&gt;&lt;br&gt;This is a cli-only option.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose" id="verbose"&gt;&lt;code&gt;-v, --verbose&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Turn on verbose output on standard error stream.&lt;br&gt;Useful for debugging.&lt;br&gt;&lt;br&gt;A line starting with '&amp;gt;' means data sent by Hurl.&lt;br&gt;A line staring with '&amp;lt;' means data received by Hurl.&lt;br&gt;A line starting with '*' means additional info provided by Hurl.&lt;br&gt;&lt;br&gt;If you only want HTTP headers in the output, &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#include"&gt;&lt;code&gt;-i, --include&lt;/code&gt;&lt;/a&gt; might be the option you're looking for.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#very-verbose" id="very-verbose"&gt;&lt;code&gt;--very-verbose&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Turn on more verbose output on standard error stream.&lt;br&gt;&lt;br&gt;In contrast to &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose"&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt; option, this option outputs the full HTTP body request and response on standard error. In addition, lines starting with '**' are libcurl debug logs.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#help" id="help"&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Usage help. This lists all current command line options with a short description.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#version" id="version"&gt;&lt;code&gt;-V, --version&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Prints version information&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Environment&lt;/h2&gt; 
&lt;p&gt;Environment variables can only be specified in lowercase.&lt;/p&gt; 
&lt;p&gt;Using an environment variable to set the proxy has the same effect as using the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#proxy"&gt;&lt;code&gt;-x, --proxy&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;http_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use for HTTP.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;https_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use for HTTPS.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;all_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use if no protocol-specific proxy is set.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;no_proxy &amp;lt;comma-separated list of hosts&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;List of host names that shouldn't go through any proxy.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HURL_name value&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Define variable (name/value) to be used in Hurl templates. This is similar than &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable"&gt;&lt;code&gt;--variable&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variables-file"&gt;&lt;code&gt;--variables-file&lt;/code&gt;&lt;/a&gt; options.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When set to a non-empty string, do not colorize output (see &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color"&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; option).&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Exit Codes&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Success.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Failed to parse command-line options.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Input File Parsing Error.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Runtime error (such as failure to connect to host).&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Assert Error.&lt;br&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;WWW&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev"&gt;https://hurl.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;See Also&lt;/h2&gt; 
&lt;p&gt;curl(1) hurlfmt(1)&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Binaries Installation&lt;/h2&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;Precompiled binary (depending on libc &amp;gt;=2.35) is available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ INSTALL_DIR=/tmp
$ VERSION=7.0.0
$ curl --silent --location https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl-$VERSION-x86_64-unknown-linux-gnu.tar.gz | tar xvz -C $INSTALL_DIR
$ export PATH=$INSTALL_DIR/hurl-$VERSION-x86_64-unknown-linux-gnu/bin:$PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Debian / Ubuntu&lt;/h4&gt; 
&lt;p&gt;For Debian &amp;gt;=12 / Ubuntu &amp;gt;=22.04, Hurl can be installed using a binary .deb file provided in each Hurl release.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ VERSION=7.0.0
$ curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl_${VERSION}_amd64.deb
$ sudo apt update &amp;amp;&amp;amp; sudo apt install ./hurl_${VERSION}_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Ubuntu &amp;gt;=18.04, Hurl can be installed from &lt;code&gt;ppa:lepapareil/hurl&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ VERSION=7.0.0
$ sudo apt-add-repository -y ppa:lepapareil/hurl
$ sudo apt install hurl="${VERSION}"*
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Alpine&lt;/h4&gt; 
&lt;p&gt;Hurl is available on &lt;code&gt;testing&lt;/code&gt; channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arch Linux / Manjaro&lt;/h4&gt; 
&lt;p&gt;Hurl is available on &lt;a href="https://archlinux.org/packages/extra/x86_64/hurl/"&gt;extra&lt;/a&gt; channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ pacman -Sy hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;NixOS / Nix&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://search.nixos.org/packages?from=0&amp;amp;size=1&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=hurl"&gt;NixOS / Nix package&lt;/a&gt; is available on stable channel.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;Precompiled binaries for Intel and ARM CPUs are available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Homebrew&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ brew install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;MacPorts&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo port install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo pkg install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Windows requires the &lt;a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#latest-microsoft-visual-c-redistributable-version"&gt;Visual C++ Redistributable Package&lt;/a&gt; to be installed manually, as this is not included in the installer.&lt;/p&gt; 
&lt;h4&gt;Zip File&lt;/h4&gt; 
&lt;p&gt;Hurl can be installed from a standalone zip file at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;. You will need to update your &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt; 
&lt;h4&gt;Installer&lt;/h4&gt; 
&lt;p&gt;An executable installer is also available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Chocolatey&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ choco install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Scoop&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ scoop install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Windows Package Manager&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ winget install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cargo&lt;/h3&gt; 
&lt;p&gt;If you're a Rust programmer, Hurl can be installed with cargo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cargo install --locked hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;conda-forge&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ conda install -c conda-forge hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can also be installed with &lt;a href="https://conda-forge.org"&gt;&lt;code&gt;conda-forge&lt;/code&gt;&lt;/a&gt; powered package manager like &lt;a href="https://prefix.dev"&gt;&lt;code&gt;pixi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ docker pull ghcr.io/orange-opensource/hurl:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;npm&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ npm install --save-dev @orangeopensource/hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building From Sources&lt;/h2&gt; 
&lt;p&gt;Hurl sources are available in &lt;a href="https://github.com/Orange-OpenSource/hurl"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Build on Linux&lt;/h3&gt; 
&lt;p&gt;Hurl depends on libssl, libcurl and libxml2 native libraries. You will need their development files in your platform.&lt;/p&gt; 
&lt;h4&gt;Debian based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apt install -y build-essential pkg-config libssl-dev libcurl4-openssl-dev libxml2-dev libclang-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fedora based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ dnf install -y pkgconf-pkg-config gcc openssl-devel libxml2-devel clang-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Red Hat based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ yum install -y pkg-config gcc openssl-devel libxml2-devel clang-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arch based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ pacman -S --noconfirm pkgconf gcc glibc openssl libxml2 clang
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Alpine based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apk add curl-dev gcc libxml2-dev musl-dev openssl-dev clang-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build on macOS&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ xcode-select --install
$ brew install pkg-config
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;. You should &lt;a href="https://www.rust-lang.org/tools/install"&gt;install&lt;/a&gt; the latest stable release.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ curl https://sh.rustup.rs -sSf | sh -s -- -y
$ source $HOME/.cargo/env
$ rustc --version
$ cargo --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then build hurl:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ git clone https://github.com/Orange-OpenSource/hurl
$ cd hurl
$ cargo build --release
$ ./target/release/hurl --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build on Windows&lt;/h3&gt; 
&lt;p&gt;Please follow the &lt;a href="https://github.com/Orange-OpenSource/hurl/raw/master/contrib/windows/README.md"&gt;contrib on Windows section&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitbutlerapp/gitbutler</title>
      <link>https://github.com/gitbutlerapp/gitbutler</link>
      <description>&lt;p&gt;The GitButler version control client, backed by Git, powered by Tauri/Rust/Svelte&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img align="center" width="128px" src="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/crates/gitbutler-tauri/icons/128x128@2x.png"&gt; 
 &lt;h1 align="center"&gt;&lt;b&gt;GitButler&lt;/b&gt;&lt;/h1&gt; 
 &lt;p align="center"&gt; Git branch management tool, built from the ground up for modern workflows &lt;br&gt; &lt;a href="https://gitbutler.com"&gt;&lt;strong&gt;gitbutler.com »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;b&gt;Download for &lt;/b&gt; macOS (&lt;a href="https://app.gitbutler.com/downloads/release/darwin/aarch64/dmg"&gt;Apple Silicon&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/darwin/x86_64/dmg"&gt;Intel&lt;/a&gt;) · Linux (&lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/gz"&gt;AppImage&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/deb"&gt;deb&lt;/a&gt;) · Windows (&lt;a href="https://app.gitbutler.com/downloads/release/windows/x86_64/msi"&gt;msi&lt;/a&gt;) &lt;br&gt; &lt;br&gt; (Unstable Nightly releases can be found &lt;a href="https://app.gitbutler.com/downloads"&gt;here&lt;/a&gt;) &lt;/p&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/bf9bdb33-a979-47a0-b2b2-8fff5ea53afb" alt="gitbutler_client"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml"&gt;&lt;img src="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt; &lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=gitbutler"&gt;&lt;img src="https://img.shields.io/badge/Twitter-black?logo=x&amp;amp;logoColor=white" alt="TWEET"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;&lt;img src="https://img.shields.io/discord/1060193121130000425?label=Discord&amp;amp;color=5865F2" alt="DISCORD"&gt;&lt;/a&gt; &lt;a href="https://www.instagram.com/gitbutler/"&gt;&lt;img src="https://img.shields.io/badge/Instagram-E4405F?logo=instagram&amp;amp;logoColor=white" alt="INSTA"&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@gitbutlerapp"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UCEwkZIHGqsTGYvX8wgD0LoQ" alt="YOUTUBE"&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/gitbutlerapp/gitbutler"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="DEEPWIKI"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/fb23382bcf57c609832661874d3019a43555d6ae.svg?sanitize=true" alt="Alt" title="Repobeats analytics for GitButler"&gt;&lt;/p&gt; 
&lt;p&gt;GitButler is a git client that lets you work on multiple branches at the same time. It allows you to quickly organize file changes into separate branches while still having them applied to your working directory. You can then push branches individually to your remote, or directly create pull requests.&lt;/p&gt; 
&lt;p&gt;In a nutshell, it's a more flexible version of &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git rebase -i&lt;/code&gt;, allowing you to efficiently multitask across branches.&lt;/p&gt; 
&lt;h2&gt;How Does It Work?&lt;/h2&gt; 
&lt;p&gt;GitButler keeps track of uncommitted changes in a layer on top of Git. Changes to files or parts of files can be grouped into what we call virtual branches. Whenever you are happy with the contents of a virtual branch, you can push it to a remote. GitButler makes sure that the state of other virtual branches is kept separate.&lt;/p&gt; 
&lt;h2&gt;How Do GB's Virtual Branches Differ From Git Branches?&lt;/h2&gt; 
&lt;p&gt;The branches that we know and love in Git are separate universes, and switching between them is a full context switch. GitButler allows you to work with multiple branches in parallel in the same working directory. This effectively means having the content of multiple branches available at the same time.&lt;/p&gt; 
&lt;p&gt;GitButler is aware of changes before they are committed. This allows it to keep a record of which virtual branch each individual diff belongs to. Effectively, this means that you can separate out individual branches with their content at any time to push them to a remote or to unapply them from your working directory.&lt;/p&gt; 
&lt;p&gt;And finally, while in Git it is preferable that you create your desired branch ahead of time, using GitButler you can move changes between virtual branches at any point during development.&lt;/p&gt; 
&lt;h2&gt;Why GitButler?&lt;/h2&gt; 
&lt;p&gt;We love Git. Our own &lt;a href="https://github.com/schacon"&gt;@schacon&lt;/a&gt; has even published the &lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git&lt;/a&gt; book. At the same time, Git's user interface hasn't been fundamentally changed for 15 years. While it was written for Linux kernel devs sending patches to each other over mailing lists, most developers today have different workflows and needs.&lt;/p&gt; 
&lt;p&gt;Instead of trying to fit the semantics of the Git CLI into a graphical interface, we are starting with the developer workflow and mapping it back to Git.&lt;/p&gt; 
&lt;h2&gt;Tech&lt;/h2&gt; 
&lt;p&gt;GitButler is a &lt;a href="https://tauri.app/"&gt;Tauri&lt;/a&gt;-based application. Its UI is written in &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; using &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; and its backend is written in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Main Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Virtual Branches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Organize work on multiple branches simultaneously, rather than constantly switching branches&lt;/li&gt; 
   &lt;li&gt;Automatically create new branches when needed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy Commit Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Undo, Amend and Squash commits by dragging and dropping&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Undo Timeline&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Logs all operations and changes and allows you to easily undo or revert any operation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Integration&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Authenticate to GitHub to open Pull Requests, list branches and statuses and more&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy SSH Key Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;GitButler can generate an SSH key to upload to GitHub automatically&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Tooling&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically write commit messages based on your work in progress&lt;/li&gt; 
   &lt;li&gt;Automatically create descriptive branch names&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Commit Signing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Easy commit signing with GPG or SSH&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Uses&lt;/h2&gt; 
&lt;h3&gt;Fixing a Bug While Working on a Feature&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say that while developing a feature, you encounter a bug that you wish to fix. It's often desirable that you ship the fix as a separate contribution (Pull request).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git you can stash your changes and switch to another branch, where you can commit, and push your fix.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;With GitButler&lt;/em&gt; you simply assign your fix to a separate virtual branch, which you can individually push (or directly create a PR). An additional benefit is that you can retain the fix in your working directory while waiting for CI and/or code review.&lt;/p&gt; 
&lt;h3&gt;Trying Someone Else's Branch Together With My Work in Progress&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say you want to test a branch from someone else for the purpose of code review.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git trying out someone else's branch is a full context switch away from your own work. &lt;em&gt;With GitButler&lt;/em&gt; you can apply and unapply (add / remove) any remote branch directly into your working directory.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find our end user documentation at: &lt;a href="https://docs.gitbutler.com"&gt;https://docs.gitbutler.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Bugs and Feature Requests&lt;/h2&gt; 
&lt;p&gt;If you have a bug or feature request, feel free to open an &lt;a href="https://github.com/gitbutlerapp/gitbutler/issues/new"&gt;issue&lt;/a&gt;, or &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;join our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AI Commit Message Generation&lt;/h2&gt; 
&lt;p&gt;Commit message generation is an opt-in feature. You can enable it while adding your repository for the first time or later in the project settings.&lt;/p&gt; 
&lt;p&gt;Currently, GitButler uses OpenAI's API for diff summarization, which means that if enabled, code diffs would be sent to OpenAI's servers.&lt;/p&gt; 
&lt;p&gt;Our goal is to make this feature more modular such that in the future you can modify the prompt as well as plug a different LLM endpoints (including local ones).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;So you want to help out? Please check out the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;p&gt;If you want to skip right to getting the code to actually compile, take a look at the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/DEVELOPMENT.md"&gt;DEVELOPMENT.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Want to show your support? Add a GitButler badge to your project's README:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-md"&gt;[![GitButler](https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D)](https://gitbutler.com/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bee-san/RustScan</title>
      <link>https://github.com/bee-san/RustScan</link>
      <description>&lt;p&gt;🤖 The Modern Port Scanner 🤖&lt;/p&gt;&lt;hr&gt;&lt;div align="center" markdown="1"&gt; 
 &lt;p&gt;➡️ &lt;a href="http://discord.skerritt.blog" title="Discord blog"&gt;Discord&lt;/a&gt; | &lt;a href="https://github.com/RustScan/RustScan/wiki/Installation-Guide" title="Installation Guide Wiki"&gt;Installation Guide&lt;/a&gt; | &lt;a href="https://github.com/RustScan/RustScan#-usage"&gt;Usage Guide&lt;/a&gt; ⬅️&lt;/p&gt; 
 &lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/rustscan.png" height="400px" width="400px"&gt; 
 &lt;!--&lt;u&gt;**The Modern Port Scanner.**&lt;/u&gt;--&gt; 
 &lt;p&gt;&lt;strong&gt;Fast, smart, effective.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://img.shields.io/archlinux/v/extra/x86_64/rustscan?style=plastic&amp;amp;logo=archlinux&amp;amp;link=https%3A%2F%2Farchlinux.org%2Fpackages%2Fextra%2Fx86_64%2Frustscan%2F" alt="Arch Linux package"&gt; &lt;img src="https://img.shields.io/badge/Built%20with-Rust-Purple" alt="Built with Rust"&gt; &lt;img src="https://img.shields.io/github/downloads/rustscan/rustscan/total?label=GitHub%20Downloads" alt="GitHub All Releases"&gt; &lt;img src="https://img.shields.io/crates/d/rustscan?label=Cargo%20Downloads" alt="Crates.io"&gt; &lt;img src="https://img.shields.io/discord/754001738184392704" alt="Discord"&gt; &lt;img src="https://github.com/RustScan/RustScan/actions/workflows/build.yml/badge.svg?branch=master" alt="Actions"&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;🤔 What is this?&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/fast.gif" alt="fast" title="Speed"&gt;&lt;/p&gt; 
&lt;p&gt;The Modern Port Scanner. &lt;strong&gt;Find ports quickly (3 seconds at its fastest)&lt;/strong&gt;. Run scripts through our scripting engine (Python, Lua, Shell supported).&lt;/p&gt; 
&lt;h1&gt;🛠️ Installation&lt;/h1&gt; 
&lt;p&gt;You can install RustScan's binary from our &lt;a href="https://github.com/RustScan/RustScan/releases"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We would prefer you to install with a package manager so it is tested and works for your system.&lt;/p&gt; 
&lt;p&gt;RustScan is in many repositories already. Install it with whatever tools you wish:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/rustscan/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/rustscan.svg?sanitize=true" alt="Packaging status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;RustScan only officially supports Cargo installations, if you want to use that please install Rust and then &lt;code&gt;cargo install rustscan&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Example installations include:&lt;/p&gt; 
&lt;p&gt;MacOS:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  brew install rustscan
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Arch:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  yay rustscan
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;✨ Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Scans all 65k ports in &lt;strong&gt;3 seconds&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Full scripting engine support. Automatically pipe results into Nmap, or use our scripts (or write your own) to do whatever you want.&lt;/li&gt; 
 &lt;li&gt;Adaptive learning. RustScan improves the more you use it. No bloated machine learning here, just basic maths.&lt;/li&gt; 
 &lt;li&gt;The usuals you would expect. IPv6, CIDR, file input and more.&lt;/li&gt; 
 &lt;li&gt;Automatically pipes ports into Nmap.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;‼️ Important Links&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;
    &lt;!--Installation Guide--&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;
    &lt;!--Documentation--&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;
    &lt;!--Discord--&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;span&gt;📖&lt;/span&gt; &lt;a href="https://github.com/RustScan/RustScan#-full-installation-guide" title="Full installation guide"&gt;Installation Guide&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;📚&lt;/span&gt; &lt;a href="https://github.com/bee-san/RustScan/wiki" title="Rustscan"&gt;Documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;🦜&lt;/span&gt; &lt;a href="http://discord.skerritt.blog" title="Discord blog"&gt;Discord&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;🙋 Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📖 &lt;a href="https://github.com/RustScan/RustScan/wiki/Installation-Guide" title="Installation Guide Wiki"&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🐋 &lt;a href="https://github.com/RustScan/RustScan/wiki/Installation-Guide#docker-" title="Docker Installation Guide Wiki"&gt;Docker Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🦜 &lt;a href="http://discord.skerritt.blog" title="Discord blog"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🤸 &lt;a href="https://github.com/RustScan/RustScan/wiki/Usage" title="Basic Usage of Rustscan"&gt;Usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;🔭 Why RustScan?&lt;/h1&gt; 
&lt;p&gt;RustScan is a modern take on the port scanner. Sleek &amp;amp; fast. All while providing extensive extendability to you.&lt;/p&gt; 
&lt;p&gt;Not to mention RustScan uses Adaptive Learning to improve itself over time, making it the best port scanner for &lt;strong&gt;you&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;🧋 Speed&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/fast.gif" alt="fast" title="Speed"&gt;&lt;/p&gt; 
&lt;p&gt;Speed is guaranteed via RustScan. However, if you want to run a slow scan due to stealth, that is possible too.&lt;/p&gt; 
&lt;p&gt;Firstly, let's talk code.&lt;/p&gt; 
&lt;p&gt;We have tests that check to see if RustScan is significantly slower than the previous version. If it is, the continuous integration fails, and we can't commit code to master unless we make it faster.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sharkdp/hyperfine" title="Hyperfine"&gt;HyperFine&lt;/a&gt; is used to monitor RustScan's performance over time to answer the question, "Are we getting faster? Are we getting slower?".&lt;/p&gt; 
&lt;p&gt;Every pull request is reviewed by &lt;strong&gt;one&lt;/strong&gt; person, but more often than not, &lt;strong&gt;two&lt;/strong&gt; people review it. We test it manually and ensure the code doesn't negatively affect performance.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/RustScan/RustScan/wiki/Increasing-Speed-&amp;amp;-Accuracy" title="Increasing Speed &amp;amp; Accuracy"&gt;Read more here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;⚙️ Extensible&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/scripts.gif" alt="scripts" title="Scripts"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;em&gt;RustScan piping results into the custom Python script&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;RustScan has a new scripting engine that allows anyone to write scripts in most languages. Python, Lua, and Shell are all supported.&lt;/p&gt; 
&lt;p&gt;Want to take your found ports and pipe them into Nmap for further analysis? That's possible. Want to run &lt;code&gt;smb-enum&lt;/code&gt; if SMB is found open? Possible.&lt;/p&gt; 
&lt;p&gt;The possibilities are endless -- and you can write scripts in whatever language you feel comfortable with.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/RustScan/RustScan/wiki/RustScan-Scripting-Engine" title="Scripting Engine"&gt;Read more here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🌊 Adaptive&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/adaptive.gif" alt="adaptive" title="Adaptive"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;em&gt;RustScan automatically fine-tunes itself to match the host OS&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;RustScan has a cool set of features called "Adaptive Learning". These features "learn" about the environment you are scanning and how &lt;em&gt;you&lt;/em&gt; use RustScan to &lt;strong&gt;improve itself over time&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;We use this umbrella term for any feature that fits this criterion. The list constantly changes, so &lt;a href="https://github.com/RustScan/RustScan/wiki/Adaptive-Learning" title="Adaptive Learning"&gt;check out our wiki for more information&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;👩‍🦯 Accessible&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/bee-san/RustScan/master/pictures/accessible.gif" alt="fast" title="Fast"&gt;&lt;/p&gt; 
&lt;p&gt;RustScan is one of the first penetration testing tools that aims to be entirely accessible.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://bees.substack.com/p/making-hacking-accessible" title="Making Hacking Accessible"&gt;Most penetration testing tools are not accessible&lt;/a&gt;, which negatively affects the whole industry.&lt;/p&gt; 
&lt;p&gt;RustScan has continuous integration testing that aims to ensure it is accessible, and we are constantly working on ways to improve our accessibility and ensure &lt;em&gt;everyone&lt;/em&gt; can use RustScan.&lt;/p&gt; 
&lt;h1&gt;🤸 Usage&lt;/h1&gt; 
&lt;p&gt;We have 2 usage guides. &lt;a href="https://github.com/RustScan/RustScan/wiki/Usage" title="Basic Usage of Rustscan"&gt;Basic Usage&lt;/a&gt; and &lt;a href="https://github.com/RustScan/RustScan/wiki/Things-you-may-want-to-do-with-RustScan-but-don't-understand-how" title="Things you may want to do with rustscan but don't know how"&gt;Things you may want to do&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We also have documentation about our config file &lt;a href="https://github.com/RustScan/RustScan/wiki/Config-File" title="RustScan Configuration File"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;🎪 Community&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/RustScan/RustScan/wiki/Contributing" title="Learn how to contribute"&gt;Contributing&lt;/a&gt; Read this to learn how.&lt;/p&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#contributors-"&gt;&lt;img src="https://img.shields.io/badge/all_contributors-26-orange.svg?style=flat-square" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href="https://allcontributors.org/docs/en/emoji-key"&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://skerritt.blog"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/10378052?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Bee&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#infra-beeskerritt" title="Infrastructure (Hosting, Build-Tools, etc)"&gt;🚇&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=beeskerritt" title="Tests"&gt;⚠️&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=beesan" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-beeskerritt" title="Design"&gt;🎨&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://sakiir.ovh"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/9950578?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;SakiiR&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=SakiiR" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3ASakiiR" title="Bug reports"&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/smackhack"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/48143394?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;smackhack&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#ideas-smackhack" title="Ideas, Planning, &amp;amp; Feedback"&gt;🤔&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#example-smackhack" title="Examples"&gt;💡&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://bernardoamc.github.io/"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/428984?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Bernardo Araujo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=bernardoamc" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Abernardoamc" title="Bug reports"&gt;🐛&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-bernardoamc" title="Design"&gt;🎨&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Isona"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/11759523?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Izzy Whistlecroft&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3AIsona" title="Bug reports"&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://imlonghao.com"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/4951333?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;imlonghao&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Aimlonghao" title="Bug reports"&gt;🐛&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#maintenance-imlonghao" title="Maintenance"&gt;🚧&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/royharoush"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/8113056?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;royharoush&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#ideas-royharoush" title="Ideas, Planning, &amp;amp; Feedback"&gt;🤔&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-royharoush" title="Design"&gt;🎨&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Atul9"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/3390330?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Atul Bhosale&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=Atul9" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://tgotwig.dev"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/30773779?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Thomas Gotwig&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#platform-TGotwig" title="Packaging/porting to new platform"&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/remigourdon"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/2874133?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rémi Gourdon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=remigourdon" title="Documentation"&gt;📖&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=remigourdon" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://cmnatic.co.uk"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/4163116?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ben (CMNatic)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=cmnatic" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=cmnatic" title="Documentation"&gt;📖&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-cmnatic" title="Design"&gt;🎨&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Ferryistaken"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/47927670?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alessandro Ferrari&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#content-Ferryistaken" title="Content"&gt;🖋&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/Phenomite"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/8285537?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Phenomite&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#content-Phenomite" title="Content"&gt;🖋&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://supersandro.de/"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/7258858?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sandro&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#content-SuperSandro2000" title="Content"&gt;🖋&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3ASuperSandro2000" title="Bug reports"&gt;🐛&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=SuperSandro2000" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://swag.lgbt"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/25358963?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Cass&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#platform-caass" title="Packaging/porting to new platform"&gt;📦&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=caass" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Acaass" title="Bug reports"&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/niklasmohrin"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/47574893?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Niklas Mohrin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=niklasmohrin" title="Documentation"&gt;📖&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=niklasmohrin" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Aniklasmohrin" title="Bug reports"&gt;🐛&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://liberapay.com/Artem4/"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/5614476?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Artem Polishchuk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#platform-tim77" title="Packaging/porting to new platform"&gt;📦&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/buermarc"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/44375277?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;buermarc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=buermarc" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/bergabman"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/44554109?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;bergabman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=bergabman" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/issues?q=author%3Abergabman" title="Bug reports"&gt;🐛&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#design-bergabman" title="Design"&gt;🎨&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/dmitris"&gt;&lt;img src="https://avatars0.githubusercontent.com/u/31205?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dmitry Savintsev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=dmitris" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/bofh69"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/1444315?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sebastian Andersson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=bofh69" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/mattcorbin"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/6537765?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Matt Corbin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=mattcorbin" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="http://rootsploit.com"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/67270834?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;RootSploit&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://raw.githubusercontent.com/bee-san/RustScan/master/#blog-rootsploit" title="Blogposts"&gt;📝&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/eiffel-fl"&gt;&lt;img src="https://avatars2.githubusercontent.com/u/12171754?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;eiffel-fl&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=eiffel-fl" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/u5surf"&gt;&lt;img src="https://avatars1.githubusercontent.com/u/14180225?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Y.Horie&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=u5surf" title="Code"&gt;💻&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/okrplay"&gt;&lt;img src="https://avatars3.githubusercontent.com/u/32576280?v=4" width="100px;" alt=""&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Oskar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/RustScan/RustScan/commits?author=okrplay" title="Code"&gt;💻&lt;/a&gt; &lt;a href="https://github.com/RustScan/RustScan/commits?author=okrplay" title="Tests"&gt;⚠️&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- markdownlint-enable --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href="https://github.com/all-contributors/all-contributors"&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;!--Links--&gt; 
&lt;!--Pictures--&gt;</description>
    </item>
    
    <item>
      <title>openobserve/openobserve</title>
      <link>https://github.com/openobserve/openobserve</link>
      <description>&lt;p&gt;🚀 10x easier, 🚀 140x lower storage cost, 🚀 high performance, 🚀 petabyte scale - Elasticsearch/Splunk/Datadog alternative for 🚀 (logs, metrics, traces, RUM, Error tracking, Session replay).&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://openobserve.ai"&gt;&lt;img src="https://openobserve.ai/img/logo/o2-logo-readme.svg?sanitize=true" alt="OpenObserve"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;em&gt;🚀 10x easier, 🚀 140x lower storage cost, 🚀 high performance, 🚀 petabyte scale - Elasticsearch/Splunk/Datadog alternative for 🚀 (logs, metrics, traces).&lt;/em&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/openobserve/openobserve" target="_blank"&gt; &lt;img src="https://img.shields.io/github/last-commit/openobserve/openobserve" alt="Last Commit"&gt; &lt;/a&gt; &lt;a href="https://github.com/openobserve/openobserve/stargazers" target="_blank"&gt; &lt;img src="https://img.shields.io/github/stars/openobserve/openobserve" alt="GitHub Stars"&gt; &lt;/a&gt; &lt;a href="https://github.com/openobserve/openobserve/issues" target="_blank"&gt; &lt;img src="https://img.shields.io/github/issues/openobserve/openobserve" alt="GitHub Issues"&gt; &lt;/a&gt; &lt;a href="https://github.com/openobserve/openobserve/graphs/contributors" target="_blank"&gt; &lt;img src="https://img.shields.io/github/contributors/openobserve/openobserve" alt="Contributors"&gt; &lt;/a&gt; &lt;a href="https://github.com/openobserve/openobserve/releases" target="_blank"&gt; &lt;img src="https://img.shields.io/github/v/release/openobserve/openobserve" alt="GitHub Release"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;OpenObserve (O2 for short) is a cloud-native observability platform built specifically for logs, metrics, traces, analytics, RUM (Real User Monitoring - Performance, Errors, Session Replay) designed to work at petabyte scale.&lt;/p&gt; 
&lt;p&gt;It is straightforward and easy to operate, in contrast to Elasticsearch, which requires understanding and tuning numerous settings. Get OpenObserve up and running in under 2 minutes.&lt;/p&gt; 
&lt;p&gt;OpenObserve serves as a seamless replacement for Elasticsearch for users who ingest data using APIs and perform searches. OpenObserve comes with its own user interface, eliminating the need for separate installation.&lt;/p&gt; 
&lt;p&gt;You can reduce your log storage costs by ~140x compared to Elasticsearch by using OpenObserve. Below, we present the results from pushing logs from our production Kubernetes cluster to both Elasticsearch and OpenObserve using Fluent Bit.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/zo_vs_es.png" alt="OpenObserve Vs Elasticsearch"&gt;&lt;/p&gt; 
&lt;h2&gt;🎥 Introduction Video&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4VwuC1tpRP4"&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/o2_intro.webp" alt="OpenObserve Introduction"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🌟 Features:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Logs, Metrics, Traces&lt;/strong&gt;: Comprehensive support for various data types.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OpenTelemetry Support&lt;/strong&gt;: Full compatibility with OTLP for logs, metrics, and traces.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Real User Monitoring (RUM)&lt;/strong&gt;: Includes performance tracking, error logging, and session replay.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dashboards, Reports, Alerts&lt;/strong&gt;: Features over 18 different chart types for comprehensive data visualization for on-the-fly analysis and reporting along with alerting.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Pipelines&lt;/strong&gt;: Enrich, redact, reduce, normalize data on the fly. Stream processing for logs to metrics and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced Embedded GUI&lt;/strong&gt;: Intuitive and user-friendly interface.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQL and PromQL Support&lt;/strong&gt;: Query logs and traces with SQL, and metrics with SQL and PromQL.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Single Binary or HA Installation&lt;/strong&gt;: Install using a single binary for small deployments or in HA mode for large deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Versatile Storage Options&lt;/strong&gt;: Supports local disk, S3, MinIO, GCS, Azure Blob Storage.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High Availability and Clustering&lt;/strong&gt;: Ensures reliable and scalable performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Schema&lt;/strong&gt;: Adapts to your data structure seamlessly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built-in Authentication&lt;/strong&gt;: Secure and ready to use.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ease of Operation&lt;/strong&gt;: Designed for simplicity and efficiency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless Upgrades&lt;/strong&gt;: Hassle-free updates.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multilingual UI&lt;/strong&gt;: Supports 11 languages, including English, Spanish, German, French, Chinese, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a full list of features, check the &lt;a href="https://openobserve.ai/docs/#project-status-features-and-roadmap"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;⚡️ Quick start&lt;/h2&gt; 
&lt;h3&gt;🐳 Docker:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d \
      --name openobserve \
      -v $PWD/data:/data \
      -p 5080:5080 \
      -e ZO_ROOT_USER_EMAIL="root@example.com" \
      -e ZO_ROOT_USER_PASSWORD="Complexpass#123" \
      public.ecr.aws/zinclabs/openobserve:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;🐙 Docker Compose:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:latest
    restart: unless-stopped
    environment:
      ZO_ROOT_USER_EMAIL: "root@example.com"
      ZO_ROOT_USER_PASSWORD: "Complexpass#123"
    ports:
      - "5080:5080"
    volumes:
      - data:/data
volumes:
  data:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For other ways to quickly install OpenObserve or use OpenObserve cloud, check &lt;a href="https://openobserve.ai/docs/quickstart"&gt;quickstart documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For installing OpenObserve in HA mode, check &lt;a href="https://openobserve.ai/docs/ha_deployment/"&gt;HA deployment documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- ## Enterprise Vs Open source Vs Cloud edition

OpenObserve is available in three different editions:


| Feature | Open Source (Self hosted) | Enterprise (Self hosted) | Cloud |
| --- | --- | --- | --- | 
| Logs | ✅ | ✅ | ✅ |
| Metrics | ✅ | ✅ | ✅ |
| Traces | ✅ | ✅ | ✅ |
| RUM | ✅ | ✅ | ✅ |
| Alerts | ✅ | ✅ | ✅ |
| Dashboards | ✅ | ✅ | ✅ |
| Reports | ✅ | ✅ | ✅ |
| VRL functions | ✅ | ✅ | ✅ |
| Pipelines | ✅ | ✅ | ✅ |
| High Availability | ✅ | ✅ | ✅ |
| Multitenancy (Organizations) | ✅ | ✅ | ✅ |
| Dynamic schema and schema evolution | ✅ | ✅ | ✅ |
| Advanced multilingual GUI | ✅ | ✅ | ✅ |
| Single Sign On | ❌ | ✅ | ✅ |
| Role Based Access Control (RBAC) | ❌ | ✅ | ✅ |
| Federated search / Super cluster | ❌ | ✅ | ❌ |
| Query management | ❌ | ✅ | ❌ |
| Workload management (QoS) | ❌ | ✅ | ❌ |
| Audit trail | ❌ | ✅ | ❌ |
| Ability to influence roadmap | ❌ | ✅ | ✅ on enterprise plan |
| License | AGPL | Enterprise | Cloud |
| Support | Community | Enterprise | Cloud |
| Cost | Free | If self hosted, free for up to 200 GB/Day data ingested &lt;br&gt; Paid thereafter  | Free 200 GB/Month data ingested &lt;br&gt; Paid thereafter | --&gt; 
&lt;h2&gt;📷 Screenshots&lt;/h2&gt; 
&lt;h3&gt;Home&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/zo_home.png" alt="Home"&gt;&lt;/p&gt; 
&lt;h3&gt;Logs&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/logs.png" alt="Logs"&gt;&lt;/p&gt; 
&lt;h3&gt;Traces (OpenTelemetry)&lt;/h3&gt; 
&lt;p&gt;Trace details page &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/traces.png" alt="Traces using OpenTelemetry"&gt;&lt;/p&gt; 
&lt;p&gt;Golden metrics based on traces &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/traces-overall.png" alt="Traces golden metrics"&gt;&lt;/p&gt; 
&lt;h3&gt;Visualizations and Dashboards&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/dashboard.png" alt="Dashboard"&gt; &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/dashboard2.png" alt="Dashboard"&gt; &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/create-panel.png" alt="Create panel"&gt; &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/map.png" alt="Map"&gt;&lt;/p&gt; 
&lt;h3&gt;Front end monitoring&lt;/h3&gt; 
&lt;p&gt;Performance analytics &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/performance.png" alt="Performance"&gt;&lt;/p&gt; 
&lt;p&gt;Session replay &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/session-replay.png" alt="Session replay"&gt;&lt;/p&gt; 
&lt;p&gt;Error tracking &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/error-tracking.png" alt="Error tracking"&gt;&lt;/p&gt; 
&lt;h3&gt;Alerts&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/alerts.png" alt="Alerts"&gt;&lt;/p&gt; 
&lt;h3&gt;Streams&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/streams.png" alt="Streams"&gt;&lt;/p&gt; 
&lt;h3&gt;Ingestion&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/ingestion1.png" alt="Ingestion"&gt;&lt;/p&gt; 
&lt;h3&gt;Pipeline&lt;/h3&gt; 
&lt;p&gt;Pipeline &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/pipeline.png" alt="Pipeline"&gt;&lt;/p&gt; 
&lt;p&gt;Function &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/function.png" alt="Function"&gt;&lt;/p&gt; 
&lt;h3&gt;IAM&lt;/h3&gt; 
&lt;p&gt;SSO (Single Sign On) &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/sso.png" alt="SSO"&gt;&lt;/p&gt; 
&lt;p&gt;RBAC (Role Based Access Control) &lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/iam_rbac.png" alt="RBAC"&gt;&lt;/p&gt; 
&lt;h3&gt;SBOM&lt;/h3&gt; 
&lt;p&gt;Software Bill of Materials for OpenObserve&lt;/p&gt; 
&lt;h4&gt;Rust&lt;/h4&gt; 
&lt;p&gt;SBOM can be found &lt;a href="https://raw.githubusercontent.com/openobserve/openobserve/main/openobserve.cdx.xml"&gt;here&lt;/a&gt;. You can analyze it using &lt;a href="https://dependencytrack.org/"&gt;dependency track&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In order to generate the SBOM, you can use the following commands:&lt;/p&gt; 
&lt;p&gt;Install cargo-cyclonedx:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install cargo-cyclonedx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Generate the SBOM:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo-cyclonedx cyclonedx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JavaScript&lt;/h4&gt; 
&lt;p&gt;SBOM can be found &lt;a href="https://raw.githubusercontent.com/openobserve/openobserve/main/web/sbom.json"&gt;here&lt;/a&gt;. You can analyze it using &lt;a href="https://dependencytrack.org/"&gt;dependency track&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In order to generate the SBOM, you can use the following commands:&lt;/p&gt; 
&lt;p&gt;Install cyclonedx-npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install --global @cyclonedx/cyclonedx-npm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Generate the SBOM:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd web
cyclonedx-npm &amp;gt; sbom.json         
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⚖️ License&lt;/h2&gt; 
&lt;p&gt;OpenObserve is licensed under the AGPL-3.0 license. For more details, see the &lt;a href="https://github.com/openobserve/openobserve/raw/main/LICENSE"&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🌍 Community&lt;/h2&gt; 
&lt;h3&gt;🔗 Join OpenObserve community on Slack&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://short.openobserve.ai/community"&gt;&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/slack.png" alt="Slack"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Easiest way to get support is to join the &lt;a href="https://short.openobserve.ai/community"&gt;Slack channel&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;📱 Join OpenObserve community on WeChat&lt;/h3&gt; 
&lt;img src="https://raw.githubusercontent.com/openobserve/openobserve/main/screenshots/wechat_qr.jpg" width="300"&gt;</description>
    </item>
    
    <item>
      <title>fish-shell/fish-shell</title>
      <link>https://github.com/fish-shell/fish-shell</link>
      <description>&lt;p&gt;The user-friendly command line shell.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. |Cirrus CI| image:: &lt;a href="https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master"&gt;https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master&lt;/a&gt; :target: &lt;a href="https://cirrus-ci.com/github/fish-shell/fish-shell"&gt;https://cirrus-ci.com/github/fish-shell/fish-shell&lt;/a&gt; :alt: Cirrus CI Build Status&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;fish &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ - the friendly interactive shell |Build Status| |Cirrus CI|&lt;/h1&gt; 
&lt;p&gt;fish is a smart and user-friendly command line shell for macOS, Linux, and the rest of the family. fish includes features like syntax highlighting, autosuggest-as-you-type, and fancy tab completions that just work, with no configuration required.&lt;/p&gt; 
&lt;p&gt;For downloads, screenshots and more, go to &lt;a href="https://fishshell.com/"&gt;https://fishshell.com/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;fish generally works like other shells, like bash or zsh. A few important differences can be found at &lt;a href="https://fishshell.com/docs/current/tutorial.html"&gt;https://fishshell.com/docs/current/tutorial.html&lt;/a&gt; by searching for the magic phrase “unlike other shells”.&lt;/p&gt; 
&lt;p&gt;Detailed user documentation is available by running &lt;code&gt;help&lt;/code&gt; within fish, and also at &lt;a href="https://fishshell.com/docs/current/index.html"&gt;https://fishshell.com/docs/current/index.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting fish&lt;/h2&gt; 
&lt;p&gt;macOS&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
fish can be installed:

-  using `Homebrew &amp;lt;http://brew.sh/&amp;gt;`__: ``brew install fish``
-  using `MacPorts &amp;lt;https://www.macports.org/&amp;gt;`__:
   ``sudo port install fish``
-  using the `installer from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__
-  as a `standalone app from fishshell.com &amp;lt;https://fishshell.com/&amp;gt;`__

Note: The minimum supported macOS version is 10.10 "Yosemite".

Packages for Linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Packages for Debian, Fedora, openSUSE, and Red Hat Enterprise Linux/CentOS are available from the &lt;code&gt;openSUSE Build Service &amp;lt;https://software.opensuse.org/download.html?project=shells%3Afish&amp;amp;package=fish&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;Packages for Ubuntu are available from the &lt;code&gt;fish PPA &amp;lt;https://launchpad.net/~fish-shell/+archive/ubuntu/release-4&amp;gt;&lt;/code&gt;__, and can be installed using the following commands:&lt;/p&gt; 
&lt;p&gt;::&lt;/p&gt; 
&lt;p&gt;sudo apt-add-repository ppa:fish-shell/release-4 sudo apt update sudo apt install fish&lt;/p&gt; 
&lt;p&gt;Instructions for other distributions may be found at &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;Windows&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
-  On Windows 10/11, fish can be installed under the WSL Windows Subsystem
   for Linux with the instructions for the appropriate distribution
   listed above under “Packages for Linux”, or from source with the
   instructions below.
-  Fish can also be installed on all versions of Windows using
   `Cygwin &amp;lt;https://cygwin.com/&amp;gt;`__ or `MSYS2 &amp;lt;https://github.com/Berrysoft/fish-msys2&amp;gt;`__.

Building from source
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If packages are not available for your platform, GPG-signed tarballs are available from &lt;code&gt;fishshell.com &amp;lt;https://fishshell.com/&amp;gt;&lt;/code&gt;__ and &lt;code&gt;fish-shell on GitHub &amp;lt;https://github.com/fish-shell/fish-shell/releases&amp;gt;&lt;/code&gt;__. See the &lt;code&gt;Building &amp;lt;#building&amp;gt;&lt;/code&gt;_ section for instructions.&lt;/p&gt; 
&lt;h2&gt;Running fish&lt;/h2&gt; 
&lt;p&gt;Once installed, run &lt;code&gt;fish&lt;/code&gt; from your current shell to try fish out!&lt;/p&gt; 
&lt;p&gt;Dependencies&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
Running fish requires:

-  some common \*nix system utilities (currently ``mktemp``), in
   addition to the basic POSIX utilities (``cat``, ``cut``, ``dirname``,
   ``file``, ``ls``, ``mkdir``, ``mkfifo``, ``rm``, ``sort``, ``tee``, ``tr``,
   ``uname`` and ``sed`` at least, but the full coreutils plus ``find`` and
   ``awk`` is preferred)
-  The gettext library, if compiled with
   translation support

The following optional features also have specific requirements:

-  builtin commands that have the ``--help`` option or print usage
   messages require ``nroff`` or ``mandoc`` for
   display
-  automated completion generation from manual pages requires Python 3.5+
-  the ``fish_config`` web configuration tool requires Python 3.5+ and a web browser
-  system clipboard integration (with the default Ctrl-V and Ctrl-X
   bindings) require either the ``xsel``, ``xclip``,
   ``wl-copy``/``wl-paste`` or ``pbcopy``/``pbpaste`` utilities
-  full completions for ``yarn`` and ``npm`` require the
   ``all-the-package-names`` NPM module
-  ``colorls`` is used, if installed, to add color when running ``ls`` on platforms
   that do not have color support (such as OpenBSD)

Building
--------

.. _dependencies-1:

Dependencies
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compiling fish requires:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Rust (version 1.70 or later)&lt;/li&gt; 
 &lt;li&gt;CMake (version 3.15 or later)&lt;/li&gt; 
 &lt;li&gt;a C compiler (for system feature detection and the test helper binary)&lt;/li&gt; 
 &lt;li&gt;PCRE2 (headers and libraries) - optional, this will be downloaded if missing&lt;/li&gt; 
 &lt;li&gt;gettext (headers and libraries) - optional, for translation support&lt;/li&gt; 
 &lt;li&gt;an Internet connection, as other dependencies will be downloaded automatically&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sphinx is also optionally required to build the documentation from a cloned git repository.&lt;/p&gt; 
&lt;p&gt;Additionally, running the full test suite requires Python 3, tmux, and the pexpect package.&lt;/p&gt; 
&lt;p&gt;Building from source with CMake&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
Rather than building from source, consider using a packaged build for your platform. Using the
steps below makes fish difficult to uninstall or upgrade. Release packages are available from the
links above, and up-to-date `development builds of fish are available for many platforms
&amp;lt;https://github.com/fish-shell/fish-shell/wiki/Development-builds&amp;gt;`__

To install into ``/usr/local``, run:

.. code:: bash

   mkdir build; cd build
   cmake ..
   cmake --build .
   sudo cmake --install .

The install directory can be changed using the
``-DCMAKE_INSTALL_PREFIX`` parameter for ``cmake``.

CMake Build options
~~~~~~~~~~~~~~~~~~~

In addition to the normal CMake build options (like ``CMAKE_INSTALL_PREFIX``), fish's CMake build has some other options available to customize it.

- Rust_COMPILER=path - the path to rustc. If not set, cmake will check $PATH and ~/.cargo/bin
- Rust_CARGO=path - the path to cargo. If not set, cmake will check $PATH and ~/.cargo/bin
- Rust_CARGO_TARGET=target - the target to pass to cargo. Set this for cross-compilation.
- BUILD_DOCS=ON|OFF - whether to build the documentation. This is automatically set to OFF when Sphinx isn't installed.
- INSTALL_DOCS=ON|OFF - whether to install the docs. This is automatically set to on when BUILD_DOCS is or prebuilt documentation is available (like when building in-tree from a tarball).
- FISH_USE_SYSTEM_PCRE2=ON|OFF - whether to use an installed pcre2. This is normally autodetected.
- MAC_CODESIGN_ID=String|OFF - the codesign ID to use on Mac, or "OFF" to disable codesigning.
- WITH_GETTEXT=ON|OFF - whether to build with gettext support for translations.
- extra_functionsdir, extra_completionsdir and extra_confdir - to compile in an additional directory to be searched for functions, completions and configuration snippets

Building fish with embedded data (experimental)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also build fish with the data files embedded.&lt;/p&gt; 
&lt;p&gt;This will include all the datafiles like the included functions or web configuration tool in the main &lt;code&gt;fish&lt;/code&gt; binary.&lt;/p&gt; 
&lt;p&gt;Fish will then read these right from its own binary, and print them out when needed. Some files, like the webconfig tool and the manpage completion generator, will be extracted to a temporary directory on-demand. You can list the files with &lt;code&gt;status list-files&lt;/code&gt; and print one with &lt;code&gt;status get-file path/to/file&lt;/code&gt; (e.g. &lt;code&gt;status get-file functions/fish_prompt.fish&lt;/code&gt; to get the default prompt).&lt;/p&gt; 
&lt;p&gt;To install fish with embedded files, just use &lt;code&gt;cargo&lt;/code&gt;, like::&lt;/p&gt; 
&lt;p&gt;cargo install --path /path/to/fish # if you have a git clone cargo install --git &lt;a href="https://github.com/fish-shell/fish-shell"&gt;https://github.com/fish-shell/fish-shell&lt;/a&gt; --tag 4.0.0 # to build from git with a specific version cargo install --git &lt;a href="https://github.com/fish-shell/fish-shell"&gt;https://github.com/fish-shell/fish-shell&lt;/a&gt; # to build the current development snapshot without cloning&lt;/p&gt; 
&lt;p&gt;This will place the binaries in &lt;code&gt;~/.cargo/bin/&lt;/code&gt;, but you can place them wherever you want.&lt;/p&gt; 
&lt;p&gt;This build won't have the HTML docs (&lt;code&gt;help&lt;/code&gt; will open the online version) or translations.&lt;/p&gt; 
&lt;p&gt;It will try to build the man pages with sphinx-build. If that is not available and you would like to include man pages, you need to install it and retrigger the build script, e.g. by setting FISH_BUILD_DOCS=1::&lt;/p&gt; 
&lt;p&gt;FISH_BUILD_DOCS=1 cargo install --path .&lt;/p&gt; 
&lt;p&gt;Setting it to "0" disables the inclusion of man pages.&lt;/p&gt; 
&lt;p&gt;You can also link this build statically (but not against glibc) and move it to other computers.&lt;/p&gt; 
&lt;h2&gt;Contributing Changes to the Code&lt;/h2&gt; 
&lt;p&gt;See the &lt;code&gt;Guide for Developers &amp;lt;CONTRIBUTING.rst&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;h2&gt;Contact Us&lt;/h2&gt; 
&lt;p&gt;Questions, comments, rants and raves can be posted to the official fish mailing list at &lt;a href="https://lists.sourceforge.net/lists/listinfo/fish-users"&gt;https://lists.sourceforge.net/lists/listinfo/fish-users&lt;/a&gt; or join us on our &lt;code&gt;matrix channel &amp;lt;https://matrix.to/#/#fish-shell:matrix.org&amp;gt;&lt;/code&gt;&lt;strong&gt;. Or use the &lt;code&gt;fish tag on Unix &amp;amp; Linux Stackexchange &amp;lt;https://unix.stackexchange.com/questions/tagged/fish&amp;gt;&lt;/code&gt;&lt;/strong&gt;. There is also a fish tag on Stackoverflow, but it is typically a poor fit.&lt;/p&gt; 
&lt;p&gt;Found a bug? Have an awesome idea? Please &lt;code&gt;open an issue &amp;lt;https://github.com/fish-shell/fish-shell/issues/new&amp;gt;&lt;/code&gt;__.&lt;/p&gt; 
&lt;p&gt;.. |Build Status| image:: &lt;a href="https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg"&gt;https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg&lt;/a&gt; :target: &lt;a href="https://github.com/fish-shell/fish-shell/actions"&gt;https://github.com/fish-shell/fish-shell/actions&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>unionlabs/union</title>
      <link>https://github.com/unionlabs/union</link>
      <description>&lt;p&gt;The trust-minimized, zero-knowledge bridging protocol, designed for censorship resistance, extremely high security, and usage in decentralized finance.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="./.github/images/union-logo-white.svg"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="./.github/images/union-logo-black.svg"&gt; 
  &lt;img alt="Union" src="https://raw.githubusercontent.com/unionlabs/union/main/.github/images/union-logo-black.svg?sanitize=true" width="100%"&gt; 
 &lt;/picture&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://garnix.io"&gt;&lt;img src="https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fgarnix.io%2Fapi%2Fbadges%2Funionlabs%2Funion%3Fbranch%3Dmain" alt="built with garnix"&gt;&lt;/a&gt; &lt;a href="https://docs.union.build" title="Official Union Docs"&gt;&lt;img src="https://img.shields.io/badge/docs-main-blue" alt="Docs"&gt;&lt;/a&gt; &lt;a href="https://discord.union.build"&gt;&lt;img src="https://img.shields.io/discord/1158939416870522930?logo=discord" alt="Discord badge"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=union_build"&gt;&lt;img src="https://img.shields.io/twitter/follow/union_build.svg?style=social&amp;amp;label=Follow" alt="Twitter handle"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Union is the hyper-efficient zero-knowledge infrastructure layer for general message passing, asset transfers, NFTs, and DeFi. Its based on &lt;a href="https://union.build/docs/concepts/consensus-verification/"&gt;Consensus Verification&lt;/a&gt; and has no dependencies on trusted third parties, oracles, multi-signatures or MPC. It implements &lt;a href="https://github.com/cosmos/ibc" title="cosmos/ibc"&gt;IBC&lt;/a&gt; for compatibility with &lt;a href="https://cosmos.network"&gt;Cosmos&lt;/a&gt; chains and connects to EVM chains like &lt;a href="https://ethereum.org"&gt;Ethereum&lt;/a&gt;, &lt;a href="https://github.com/berachain/beacon-kit"&gt;Berachain (beacon-kit)&lt;/a&gt;, &lt;a href="https://github.com/OffchainLabs/arbitrum"&gt;Arbitrum&lt;/a&gt;, and more.&lt;/p&gt; 
&lt;p&gt;The upgradability of contracts on other chains, connections, token configurations, and evolution of the protocol will all be controlled by decentralized governance, aligning the priorities of Union with its users, validators, and operators.&lt;/p&gt; 
&lt;h2&gt;Components&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Language(s)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/uniond/README.md"&gt;&lt;code&gt;uniond&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The Union node implementation, using &lt;a href="https://github.com/unionlabs/cometbls"&gt;&lt;code&gt;CometBLS&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://go.dev/"&gt;Go&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/galoisd"&gt;&lt;code&gt;galoisd&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;The zero-knowledge prover implementation&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; &lt;a href="https://github.com/ConsenSys/gnark"&gt;Gnark&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/voyager"&gt;&lt;code&gt;voyager&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Modular hyper-performant cross-ecosystem relayer&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/hubble"&gt;&lt;code&gt;hubble&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Multi-ecosystem, GMP-enabled chain indexer&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/cosmwasm"&gt;&lt;code&gt;cosmwasm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://cosmwasm.com/"&gt;CosmWasm&lt;/a&gt; smart contract stack&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/cosmwasm/ibc-union/lightclient"&gt;&lt;code&gt;light-clients&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://a16zcrypto.com/posts/article/an-introduction-to-light-clients/"&gt;Light Clients&lt;/a&gt; for various ecosystems&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/unionvisor/README.md"&gt;&lt;code&gt;unionvisor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Node supervisor intended for production usage&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/drip"&gt;&lt;code&gt;drip&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Faucet for &lt;a href="https://cosmos.network"&gt;Cosmos&lt;/a&gt; chains: &lt;a href="https://app.union.build/faucet"&gt;app.union.build/faucet&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/evm"&gt;&lt;code&gt;evm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://ethereum.org/en/developers/docs/evm/"&gt;EVM&lt;/a&gt; smart contract stack&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://soliditylang.org/"&gt;Solidity&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/app2"&gt;&lt;code&gt;app&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://app.union.build"&gt;app.union.build&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/site"&gt;&lt;code&gt;site&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://union.build"&gt;union.build&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; &lt;a href="https://astro.build"&gt;Astro&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/unionlabs/union/main/ts-sdk"&gt;&lt;code&gt;TypeScript SDK&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;TypeScript SDK for interacting with Union&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Install &lt;a href="https://zero-to-nix.com/"&gt;Nix&lt;/a&gt; to &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Reproducible_builds"&gt;reproducibly build&lt;/a&gt; any component&lt;/em&gt;, and to enter a dev shell with &lt;em&gt;all dependencies&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;(Note that some components can only be built on Linux. If you are using macOS, we recommend using &lt;a href="https://orbstack.dev/"&gt;OrbStack&lt;/a&gt; to easily set up a &lt;a href="https://nixos.org"&gt;NixOS&lt;/a&gt; VM within two minutes. Most Union developers use macOS with &lt;a href="https://orbstack.dev/"&gt;OrbStack&lt;/a&gt;, and there is no need to install Nix inside of the &lt;a href="https://nixos.org"&gt;NixOS&lt;/a&gt; VM.)&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can now &lt;em&gt;reproducibly&lt;/em&gt; build any of Union's components from source:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix build .#uniond -L
nix build .#voyager -L
nix build .#app -L

# to see all packages, run:
nix flake show
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The result of whatever you build will be in &lt;code&gt;result/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can now also enter our dev shell, which has all of the dependencies (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, etc.) you need to work on any component: &lt;em&gt;(Don't worry, this will not affect your system outside of this repo)&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix develop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the following to format the entire repo and check your spelling before each PR:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix run .#pre-commit -L
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check the &lt;code&gt;#developers&lt;/code&gt; channel on &lt;a href="https://discord.union.build"&gt;Union's discord&lt;/a&gt; if you need any help with this.&lt;/p&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;p&gt;The official docs are hosted &lt;a href="https://docs.union.build" title="Official Union Docs"&gt;here&lt;/a&gt;. Each individual component also has accompanying developer documentation for contributors, which you can find in each &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aome510/spotify-player</title>
      <link>https://github.com/aome510/spotify-player</link>
      <description>&lt;p&gt;A Spotify player in the terminal with full feature parity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spotify_player&lt;/h1&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#features"&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#spotify-connect"&gt;Spotify Connect&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#streaming"&gt;Streaming&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#media-control"&gt;Media Control&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#image"&gt;Image&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#notify"&gt;Notify&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#mouse-support"&gt;Mouse support&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#daemon"&gt;Daemon&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#fuzzy-search"&gt;Fuzzy search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#cli-commands"&gt;CLI commands&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#configurations"&gt;Configurations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#caches"&gt;Caches&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#acknowledgement"&gt;Acknowledgement&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; is a fast, easy to use, and configurable terminal music player.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimalist UI with an intuitive paging and popup system.&lt;/li&gt; 
 &lt;li&gt;Highly &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md"&gt;configurable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Feature parity with the official Spotify application.&lt;/li&gt; 
 &lt;li&gt;Support remote control with &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#spotify-connect"&gt;Spotify Connect&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#streaming"&gt;streaming&lt;/a&gt; songs directly from the terminal.&lt;/li&gt; 
 &lt;li&gt;Support synced lyrics.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#media-control"&gt;cross-platform media control&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#image"&gt;image rendering&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#notify"&gt;desktop notification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support running the application as &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#daemon"&gt;a daemon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Offer a wide range of &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#cli-commands"&gt;CLI commands&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;A demo of &lt;code&gt;spotify_player&lt;/code&gt; &lt;code&gt;v0.5.0-pre-release&lt;/code&gt; on &lt;a href="https://www.youtube.com/watch/Jbfe9GLNWbA"&gt;youtube&lt;/a&gt; or on &lt;a href="https://asciinema.org/a/446913"&gt;asciicast&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;Checkout &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/examples/README.md"&gt;examples/README.md&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;By default, the application's installed binary is &lt;code&gt;spotify_player&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;A Spotify Premium account is &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt; 
&lt;h4&gt;Dependencies&lt;/h4&gt; 
&lt;h5&gt;Windows and MacOS&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust and cargo&lt;/a&gt; as the build dependencies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Linux&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust and cargo&lt;/a&gt; as the build dependencies&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;install &lt;code&gt;openssl&lt;/code&gt;, &lt;code&gt;alsa-lib&lt;/code&gt; (&lt;code&gt;streaming&lt;/code&gt; feature), &lt;code&gt;libdbus&lt;/code&gt; (&lt;code&gt;media-control&lt;/code&gt; feature).&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;For example, on Debian based systems, run the below command to install application's dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sudo apt install libssl-dev libasound2-dev libdbus-1-dev
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;On RHEL/Fedora based systems, run the below command to install application's dependencies :&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sudo dnf install openssl-devel alsa-lib-devel dbus-devel
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or if you're using &lt;code&gt;yum&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sudo yum install openssl-devel alsa-lib-devel dbus-devel
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Binaries&lt;/h3&gt; 
&lt;p&gt;Application's prebuilt binaries can be found in the &lt;a href="https://github.com/aome510/spotify-player/releases"&gt;Releases Page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: to run the application, Linux systems need to install additional dependencies as specified in the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#linux"&gt;Dependencies section&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;brew install spotify_player&lt;/code&gt; to install the application.&lt;/p&gt; 
&lt;h3&gt;Scoop&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;scoop install spotify-player&lt;/code&gt; to install the application.&lt;/p&gt; 
&lt;h3&gt;Cargo&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;cargo install spotify_player --locked&lt;/code&gt; to install the application from &lt;a href="https://crates.io/crates/spotify_player"&gt;crates.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;pacman -S spotify-player&lt;/code&gt; to install the application.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Defaults to PulseAudio / Pipewire audio backend. For a different one, please consider modifying the &lt;a href="https://gitlab.archlinux.org/archlinux/packaging/packages/spotify-player"&gt;official PKGBUILD&lt;/a&gt; and rebuilding it manually. See &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#audio-backend"&gt;Audio Backends&lt;/a&gt; for a list of options.&lt;/p&gt; 
&lt;h3&gt;Void Linux&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;xbps-install -S spotify-player&lt;/code&gt; to install the application.&lt;/p&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;pkg install spotify-player&lt;/code&gt; to install the &lt;code&gt;spotify_player&lt;/code&gt; binary from FreeBSD ports.&lt;/p&gt; 
&lt;h3&gt;NetBSD&lt;/h3&gt; 
&lt;p&gt;Using the package manager, run &lt;code&gt;pkgin install spotify-player&lt;/code&gt; to install from the official repositories.&lt;/p&gt; 
&lt;p&gt;Building from source,&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd /usr/pkgsrc/audio/spotify-player
make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NixOS&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://search.nixos.org/packages?channel=unstable&amp;amp;show=spotify-player&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=spotify-player"&gt;spotify-player&lt;/a&gt; is available as a Nix package and can be installed via &lt;code&gt;nix-shell -p spotify-player&lt;/code&gt; or as part of your system configuration.&lt;/p&gt; 
&lt;p&gt;If you want to build the source locally you can run &lt;code&gt;nix-shell&lt;/code&gt; in the root of a checkout of the source code. The provided &lt;code&gt;shell.nix&lt;/code&gt; file will install the build prerequisites.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#streaming"&gt;streaming&lt;/a&gt; feature is disabled when using the docker image.&lt;/p&gt; 
&lt;p&gt;You can download the binary image of the latest build from the &lt;code&gt;master&lt;/code&gt; branch by running&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker pull aome510/spotify_player:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;then run&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm -it aome510/spotify_player:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;to run the application.&lt;/p&gt; 
&lt;p&gt;You can also use your local config folder to configure the application or your local cache folder to store the application's cache data when running the docker image:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm \
-v $APP_CONFIG_FOLDER:/app/config/ \
-v $APP_CACHE_FOLDER:/app/cache/ \
-it aome510/spotify_player:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Spotify Connect&lt;/h3&gt; 
&lt;p&gt;To enable a full &lt;a href="https://www.spotify.com/us/connect/"&gt;Spotify connect&lt;/a&gt; support, user will need to register a Spotify application and specify the application's &lt;code&gt;client_id&lt;/code&gt; in the general configuration file as described in the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md#general"&gt;configuration documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;More details about registering a Spotify application can be found in the &lt;a href="https://developer.spotify.com/documentation/general/guides/authorization/app-settings/"&gt;official Spotify documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When &lt;code&gt;spotify_player&lt;/code&gt; runs with your own &lt;code&gt;client_id&lt;/code&gt;, press &lt;strong&gt;D&lt;/strong&gt; (default shortcut for &lt;code&gt;SwitchDevice&lt;/code&gt; command) to get the list of available devices, then press &lt;strong&gt;enter&lt;/strong&gt; (default shortcut for &lt;code&gt;ChooseSelected&lt;/code&gt; command) to connect to the selected device.&lt;/p&gt; 
&lt;h3&gt;Streaming&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; supports streaming, which needs to be built/installed with &lt;code&gt;streaming&lt;/code&gt; feature (&lt;strong&gt;enabled&lt;/strong&gt; by default) &lt;strong&gt;and&lt;/strong&gt; with an audio backend (&lt;code&gt;rodio-backend&lt;/code&gt; by default). The streaming feature allows to &lt;code&gt;spotify_player&lt;/code&gt; to play music directly from terminal.&lt;/p&gt; 
&lt;p&gt;The application uses &lt;a href="https://github.com/librespot-org/librespot"&gt;librespot&lt;/a&gt; library to create an integrated Spotify client while running. The integrated client will register a Spotify speaker device under the &lt;code&gt;spotify-player&lt;/code&gt; name, which is accessible on the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#spotify-connect"&gt;Spotify connect&lt;/a&gt; device list.&lt;/p&gt; 
&lt;h4&gt;Audio backend&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; uses &lt;a href="https://github.com/RustAudio/rodio"&gt;rodio&lt;/a&gt; as the default &lt;a href="https://github.com/librespot-org/librespot/wiki/Audio-Backends"&gt;audio backend&lt;/a&gt;. List of available audio backends:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;alsa-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pulseaudio-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rodio-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;portaudio-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jackaudio-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rodiojack-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sdl-backend&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;gstreamer-backend&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;User can change the audio backend when building/installing the application by specifying the &lt;code&gt;--features&lt;/code&gt; option. For example, to install &lt;code&gt;spotify_player&lt;/code&gt; with &lt;code&gt;pulseaudio-backend&lt;/code&gt;, run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --no-default-features --features pulseaudio-backend
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;needs to specify &lt;code&gt;--no-default-features&lt;/code&gt; here because &lt;code&gt;rodio-backend&lt;/code&gt; is one of the default features.&lt;/li&gt; 
 &lt;li&gt;user will need to install additional dependencies depending on the selected audio backend. More details can be found in the &lt;a href="https://github.com/librespot-org/librespot/wiki/Compiling#general-dependencies"&gt;Librespot documentation&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;streaming&lt;/code&gt; feature can be also disabled upon installing by running&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Media Control&lt;/h3&gt; 
&lt;p&gt;To enable media control support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;media-control&lt;/code&gt; feature (&lt;strong&gt;enabled&lt;/strong&gt; by default) and set the &lt;code&gt;enable_media_control&lt;/code&gt; config option to &lt;code&gt;true&lt;/code&gt; in the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md#media-control"&gt;general configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Media control support is implemented using &lt;a href="https://wiki.archlinux.org/title/MPRIS"&gt;MPRIS DBus&lt;/a&gt; on Linux and OS window event listener on Windows and MacOS.&lt;/p&gt; 
&lt;h3&gt;Image&lt;/h3&gt; 
&lt;p&gt;To enable image rendering support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;image&lt;/code&gt; feature (&lt;strong&gt;disabled&lt;/strong&gt; by default). To install the application with &lt;code&gt;image&lt;/code&gt; feature included, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features image
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; supports rendering image in a full resolution if the application is run on either &lt;a href="https://sw.kovidgoyal.net/kitty/graphics-protocol/"&gt;Kitty&lt;/a&gt; or &lt;a href="https://iterm2.com/documentation-images.html"&gt;iTerm2&lt;/a&gt;. Otherwise, the image will be displayed as &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;block characters&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; also supports rendering images with &lt;code&gt;sixel&lt;/code&gt; behind &lt;code&gt;sixel&lt;/code&gt; feature flag, which also enables &lt;code&gt;image&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features sixel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not all terminals supported by &lt;a href="https://github.com/saitoha/libsixel"&gt;libsixel&lt;/a&gt; are supported by &lt;code&gt;spotify_player&lt;/code&gt; as it relies on a &lt;a href="https://github.com/atanunq/viuer"&gt;third-party library&lt;/a&gt; for image rendering. A possible list of supported terminals can be found in &lt;a href="https://github.com/atanunq/viuer/raw/dc81f44a97727e04be0b000712e9233c92116ff8/src/printer/sixel.rs#L83-L95"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Images rendered by &lt;code&gt;sixel&lt;/code&gt; can have a &lt;em&gt;weird&lt;/em&gt; scale. It's recommended to tweak the &lt;code&gt;cover_img_scale&lt;/code&gt; config option to get the best result as the scaling works differently with different terminals and fonts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Examples of image rendering:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iTerm2:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/40011582/172966798-0aadc431-b0c3-4433-adf3-7526684fc2a0.png" alt="iTerm2"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Kitty:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/40011582/172967028-8cfb2daa-1642-499a-a5bf-8ed77f2b3fac.png" alt="kitty"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sixel (&lt;code&gt;foot&lt;/code&gt; terminal, &lt;code&gt;cover_img_scale=1.8&lt;/code&gt;):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/40011582/219880331-58ac1c30-bbb0-4c99-a6cc-e5b7c9c81455.png" alt="sixel"&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Others:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/40011582/172967325-d2098037-e19e-440a-a38a-5b076253ecb1.png" alt="others"&gt;&lt;/p&gt; 
&lt;h4&gt;Pixelate&lt;/h4&gt; 
&lt;p&gt;If your terminal supports high-res images, but you like the pixelated look you can enable the &lt;code&gt;pixelate&lt;/code&gt; feature, which also enables the &lt;code&gt;image&lt;/code&gt; feature:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features pixelate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The amount of pixels can be tweaked via the &lt;code&gt;cover_img_pixels&lt;/code&gt; config option.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;code&gt;cover_img_pixels&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;8&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;16&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;32&lt;/code&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;code&gt;64&lt;/code&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;example&lt;/td&gt; 
   &lt;td&gt;&lt;img width="100" alt="8x8" src="https://github.com/user-attachments/assets/4137aaea-ce28-4019-8cd5-2d14327e72e4"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img width="100" alt="16x16" src="https://github.com/user-attachments/assets/0ca94748-093a-468c-8fb3-1f5639666eb6"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img width="100" alt="32x32" src="https://github.com/user-attachments/assets/f5d0f2da-0439-47e4-91c9-3a2aa73ac90c"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img width="100" alt="64x64" src="https://github.com/user-attachments/assets/d06ef731-38fa-424d-9672-313f56c193d0"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To temporarily disable the &lt;code&gt;pixelate&lt;/code&gt; feature just set &lt;code&gt;cover_img_pixels&lt;/code&gt; to a high value like &lt;code&gt;512&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Notify&lt;/h3&gt; 
&lt;p&gt;To enable desktop notification support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;notify&lt;/code&gt; feature (&lt;strong&gt;disabled&lt;/strong&gt; by default). To install the application with &lt;code&gt;notify&lt;/code&gt; feature included, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features notify
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the notification support in &lt;code&gt;MacOS&lt;/code&gt; and &lt;code&gt;Windows&lt;/code&gt; are quite restricted compared to &lt;code&gt;Linux&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Mouse support&lt;/h3&gt; 
&lt;p&gt;Currently, the only supported use case for mouse is to seek to a position of the current playback by left-clicking to such position in the playback's progress bar.&lt;/p&gt; 
&lt;h3&gt;Daemon&lt;/h3&gt; 
&lt;p&gt;To enable a &lt;a href="https://en.wikipedia.org/wiki/Daemon_(computing)"&gt;daemon&lt;/a&gt; support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;daemon&lt;/code&gt; feature (&lt;strong&gt;disabled&lt;/strong&gt; by default). To install the application with &lt;code&gt;daemon&lt;/code&gt; feature included, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --features daemon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run the application as a daemon by specifying the &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--daemon&lt;/code&gt; option: &lt;code&gt;spotify_player -d&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;daemon&lt;/code&gt; feature is not supported on Windows&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;daemon&lt;/code&gt; feature requires the &lt;code&gt;streaming&lt;/code&gt; feature to be enabled and the application to be built with &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/#audio-backend"&gt;an audio backend&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;because of the OS's restrictions, &lt;code&gt;daemon&lt;/code&gt; feature doesn't work with the &lt;code&gt;media-control&lt;/code&gt; feature on MacOS, which is &lt;strong&gt;enabled by default&lt;/strong&gt;. In other words, if you want to use the &lt;code&gt;daemon&lt;/code&gt; feature on MacOS, you must install the application with &lt;code&gt;media-control&lt;/code&gt; feature &lt;strong&gt;disabled&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install spotify_player --no-default-features --features daemon,rodio-backend
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Fuzzy search&lt;/h3&gt; 
&lt;p&gt;To enable &lt;a href="https://en.wikipedia.org/wiki/Approximate_string_matching"&gt;fuzzy search&lt;/a&gt; support, &lt;code&gt;spotify_player&lt;/code&gt; needs to be built/installed with &lt;code&gt;fzf&lt;/code&gt; feature (&lt;strong&gt;disabled&lt;/strong&gt; by default).&lt;/p&gt; 
&lt;h3&gt;CLI Commands&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; offers several CLI commands to interact with Spotify:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: Get Spotify data (playlist/album/artist data, user's data, etc)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;playback&lt;/code&gt;: Interact with the playback (start a playback, play-pause, next, etc)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;search&lt;/code&gt;: Search spotify&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;connect&lt;/code&gt;: Connect to a Spotify device&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;like&lt;/code&gt;: Like currently playing track&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;authenticate&lt;/code&gt;: Authenticate the application&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;playlist&lt;/code&gt;: Playlist editing (new, delete, import, fork, etc)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more details, run &lt;code&gt;spotify_player -h&lt;/code&gt; or &lt;code&gt;spotify_player {command} -h&lt;/code&gt;, in which &lt;code&gt;{command}&lt;/code&gt; is a CLI command.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When using the CLI for the first time, you'll need to run &lt;code&gt;spotify_player authenticate&lt;/code&gt; to authenticate the application beforehand.&lt;/li&gt; 
 &lt;li&gt;Under the hood, CLI command is handled by sending requests to a &lt;code&gt;spotify_player&lt;/code&gt; client socket running on port &lt;code&gt;client_port&lt;/code&gt;, &lt;a href="https://github.com/aome510/spotify-player/raw/master/docs/config.md#general"&gt;a general application configuration&lt;/a&gt; with a default value of &lt;code&gt;8080&lt;/code&gt;. If there is no running application's instance, a new client will be created upon handling the CLI commands, which increases the latency of the command.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Scripting&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;spotify_player&lt;/code&gt; command-line interface makes scripting easy. With the &lt;code&gt;search&lt;/code&gt; subcommand, you can search Spotify and retrieve data in JSON format, enabling queries with tools like &lt;a href="https://jqlang.github.io/jq/"&gt;jq&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here’s an example of starting playback for the first track from a search query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;read -p "Search spotify: " query
spotify_player playback start track --id $(spotify_player search "$query" | jq '.tracks.[0].id' | xargs)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;To go to the shortcut help page, press &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;C-h&lt;/code&gt; (default shortcuts for &lt;code&gt;OpenCommandHelp&lt;/code&gt; command).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can search in the shortcut help page (and some other pages) using &lt;code&gt;Search&lt;/code&gt; command&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RefreshPlayback&lt;/code&gt; can be used to manually update the playback status.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RestartIntegratedClient&lt;/code&gt; is useful when user wants to switch to another audio device (headphone, earphone, etc) without restarting the application, as the integrated client will be re-initialized with the new device.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;List of supported commands:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Default shortcuts&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NextTrack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;next track&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PreviousTrack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;previous track&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ResumePause&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;resume/pause based on the current playback&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;space&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PlayRandom&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;play a random track in the current context&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Repeat&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;cycle the repeat mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ToggleFakeTrackRepeatMode&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;toggle fake track repeat mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;M-r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Shuffle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;toggle the shuffle mode&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-s&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;VolumeChange&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;change playback volume by an offset (default shortcuts use 5%)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Mute&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;toggle playback volume between 0% and previous level&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SeekForward&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;seek forward by 5s&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SeekBackward&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;seek backward by 5s&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Quit&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;quit the application&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-c&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ClosePopup&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;close a popup&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;esc&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SelectNextOrScrollDown&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the next item in a list/table or scroll down (supports vim-style count: 5j)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;C-n&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SelectPreviousOrScrollUp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the previous item in a list/table or scroll up (supports vim-style count: 10k)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;k&lt;/code&gt;, &lt;code&gt;C-p&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PageSelectNextOrScrollDown&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the next page item in a list/table or scroll a page down (supports vim-style count: 3C-f)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;page_down&lt;/code&gt;, &lt;code&gt;C-f&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PageSelectPreviousOrScrollUp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the previous page item in a list/table or scroll a page up (supports vim-style count: 2C-b)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;page_up&lt;/code&gt;, &lt;code&gt;C-b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SelectFirstOrScrollToTop&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the first item in a list/table or scroll to the top&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g g&lt;/code&gt;, &lt;code&gt;home&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SelectLastOrScrollToBottom&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;select the last item in a list/table or scroll to the bottom&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;G&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ChooseSelected&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;choose the selected item&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RefreshPlayback&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;manually refresh the current playback&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RestartIntegratedClient&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;restart the integrated client (&lt;code&gt;streaming&lt;/code&gt; feature only)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ShowActionsOnSelectedItem&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup showing actions on a selected item&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g a&lt;/code&gt;, &lt;code&gt;C-space&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ShowActionsOnCurrentTrack&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup showing actions on the current track&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;AddSelectedItemToQueue&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;add the selected item to queue&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;C-z&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FocusNextWindow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;focus the next focusable window (if any)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;FocusPreviousWindow&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;focus the previous focusable window (if any)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;backtab&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SwitchTheme&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for switching theme&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SwitchDevice&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for switching device&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Search&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for searching in the current page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BrowseUserPlaylists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for browsing user's playlists&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;u p&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BrowseUserFollowedArtists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for browsing user's followed artists&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;u a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BrowseUserSavedAlbums&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a popup for browsing user's saved albums&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;u A&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CurrentlyPlayingContextPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the currently playing context page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g space&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;TopTrackPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the user top track page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g t&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RecentlyPlayedTrackPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the user recently played track page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LikedTrackPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the user liked track page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g y&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LyricsPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the lyrics page of the current track&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g L&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;LibraryPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the user library page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g l&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SearchPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the search page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g s&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BrowsePage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the browse page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the queue page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;z&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;OpenCommandHelp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the command help page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;, &lt;code&gt;C-h&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PreviousPage&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;go to the previous page&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;backspace&lt;/code&gt;, &lt;code&gt;C-q&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;OpenSpotifyLinkFromClipboard&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;open a Spotify link from clipboard&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;O&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByTitle&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's title&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s t&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByArtists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's artists&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByAlbum&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's album&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s A&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByAddedDate&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's added date&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s D&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortTrackByDuration&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the track table (if any) by track's duration&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s d&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortLibraryAlphabetically&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the library alphabetically&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s l a&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SortLibraryByRecent&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;sort the library (playlists and albums) by recently added items&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s l r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ReverseOrder&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;reverse the order of the track table (if any)&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;s r&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MovePlaylistItemUp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;move playlist item up one position&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-k&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MovePlaylistItemDown&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;move playlist item down one position&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-j&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CreatePlaylist&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;create a new playlist&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;JumpToCurrentTrackInContext&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;jump to the current track in the context&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;g c&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;JumpToHighlightTrackInContext&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;jump to the currently highlighted search result in the context&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;C-g&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To add new shortcuts or modify the default shortcuts, please refer to the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md#keymaps"&gt;keymaps section&lt;/a&gt; in the configuration documentation.&lt;/p&gt; 
&lt;h3&gt;Actions&lt;/h3&gt; 
&lt;p&gt;A general list of actions is available; however, not all Spotify items (track, album, artist, or playlist) implement each action. To get the list of available actions on an item, call the &lt;code&gt;ShowActionsOnCurrentTrack&lt;/code&gt; command or the &lt;code&gt;ShowActionsOnSelectedItem&lt;/code&gt; command, then press enter (default binding for the &lt;code&gt;ChooseSelected&lt;/code&gt; command) to initiate the selected action. Some actions may not appear in the popup but can be bound to a shortcut.&lt;/p&gt; 
&lt;p&gt;List of available actions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GoToArtist&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GoToAlbum&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GoToRadio&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AddToLibrary&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AddToPlaylist&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AddToQueue&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AddToLiked&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DeleteFromLiked&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DeleteFromLibrary&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DeleteFromPlaylist&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ShowActionsOnAlbum&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ShowActionsOnArtist&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ShowActionsOnShow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ToggleLiked&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CopyLink&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Follow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Unfollow&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These actions can also be bound to a shortcut. To add new shortcuts, please refer to the &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md#actions"&gt;actions section&lt;/a&gt; in the configuration documentation.&lt;/p&gt; 
&lt;h3&gt;Search Page&lt;/h3&gt; 
&lt;p&gt;When first entering the search page, the application focuses on the search input. User can then input text, delete one character backward using &lt;code&gt;backspace&lt;/code&gt;, or search the text using &lt;code&gt;enter&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To move the focus from the search input to the other windows such as track results, album results, etc, use &lt;code&gt;FocusNextWindow&lt;/code&gt; or &lt;code&gt;FocusPreviousWindow&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Configurations&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;spotify_player&lt;/code&gt; will look into &lt;code&gt;$HOME/.config/spotify-player&lt;/code&gt; for application's configuration files. This can be changed by either specifying &lt;code&gt;-c &amp;lt;FOLDER_PATH&amp;gt;&lt;/code&gt; or &lt;code&gt;--config-folder &amp;lt;FOLDER_PATH&amp;gt;&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;If an application configuration file is not found, one will be created with default values.&lt;/p&gt; 
&lt;p&gt;Please refer to &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/docs/config.md"&gt;the configuration documentation&lt;/a&gt; for more details on the configuration options.&lt;/p&gt; 
&lt;h2&gt;Caches&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;spotify_player&lt;/code&gt; will look into &lt;code&gt;$HOME/.cache/spotify-player&lt;/code&gt; for application's cache files, which include log files, Spotify's authorization credentials, audio cache files, etc. This can be changed by either specifying &lt;code&gt;-C &amp;lt;FOLDER_PATH&amp;gt;&lt;/code&gt; or &lt;code&gt;--cache-folder &amp;lt;FOLDER_PATH&amp;gt;&lt;/code&gt; option.&lt;/p&gt; 
&lt;h3&gt;Logging&lt;/h3&gt; 
&lt;p&gt;The application stores logs inside the &lt;code&gt;$APP_CACHE_FOLDER/spotify-player-*.log&lt;/code&gt; file. For debugging or submitting an issue, user can also refer to the backtrace file in &lt;code&gt;$APP_CACHE_FOLDER/spotify-player-*.backtrace&lt;/code&gt;, which includes the application's backtrace in case of panics/unexpected errors.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; uses &lt;code&gt;RUST_LOG&lt;/code&gt; environment variable to define the application's &lt;a href="https://docs.rs/log/0.4.14/log/enum.Level.html"&gt;logging level&lt;/a&gt;. &lt;code&gt;RUST_LOG&lt;/code&gt; is default to be &lt;code&gt;spotify_player=INFO&lt;/code&gt;, which only shows the application's logs.&lt;/p&gt; 
&lt;h2&gt;Acknowledgement&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;spotify_player&lt;/code&gt; is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; and is built on top of awesome libraries such as &lt;a href="https://github.com/ratatui/ratatui"&gt;ratatui&lt;/a&gt;, &lt;a href="https://github.com/ramsayleung/rspotify"&gt;rspotify&lt;/a&gt;, &lt;a href="https://github.com/librespot-org/librespot"&gt;librespot&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/aome510/spotify-player/master/spotify_player/Cargo.toml"&gt;many more&lt;/a&gt;. It's highly inspired by &lt;a href="https://github.com/Rigellute/spotify-tui"&gt;spotify-tui&lt;/a&gt; and &lt;a href="https://github.com/hrkfdn/ncspot"&gt;ncspot&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudflare/quiche</title>
      <link>https://github.com/cloudflare/quiche</link>
      <description>&lt;p&gt;🥧 Savoury implementation of the QUIC transport protocol and HTTP/3&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudflare/quiche/master/quiche.svg?sanitize=true" alt="quiche"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/quiche"&gt;&lt;img src="https://img.shields.io/crates/v/quiche.svg?sanitize=true" alt="crates.io"&gt;&lt;/a&gt; &lt;a href="https://docs.rs/quiche"&gt;&lt;img src="https://docs.rs/quiche/badge.svg?sanitize=true" alt="docs.rs"&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/BSD-2-Clause"&gt;&lt;img src="https://img.shields.io/github/license/cloudflare/quiche.svg?sanitize=true" alt="license"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/cloudflare/quiche/stable.yml?branch=master" alt="build"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.quic.tech/quiche/"&gt;quiche&lt;/a&gt; is an implementation of the QUIC transport protocol and HTTP/3 as specified by the &lt;a href="https://quicwg.org/"&gt;IETF&lt;/a&gt;. It provides a low level API for processing QUIC packets and handling connection state. The application is responsible for providing I/O (e.g. sockets handling) as well as an event loop with support for timers.&lt;/p&gt; 
&lt;p&gt;For more information on how quiche came about and some insights into its design you can read a &lt;a href="https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/"&gt;post&lt;/a&gt; on Cloudflare's blog that goes into some more detail.&lt;/p&gt; 
&lt;h2&gt;Who uses quiche?&lt;/h2&gt; 
&lt;h3&gt;Cloudflare&lt;/h3&gt; 
&lt;p&gt;quiche powers Cloudflare edge network's &lt;a href="https://blog.cloudflare.com/http3-the-past-present-and-future/"&gt;HTTP/3 support&lt;/a&gt;. The &lt;a href="https://cloudflare-quic.com"&gt;cloudflare-quic.com&lt;/a&gt; website can be used for testing and experimentation.&lt;/p&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;p&gt;Android's DNS resolver uses quiche to &lt;a href="https://security.googleblog.com/2022/07/dns-over-http3-in-android.html"&gt;implement DNS over HTTP/3&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;curl&lt;/h3&gt; 
&lt;p&gt;quiche can be &lt;a href="https://github.com/curl/curl/raw/master/docs/HTTP3.md#quiche-version"&gt;integrated into curl&lt;/a&gt; to provide support for HTTP/3.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Command-line apps&lt;/h3&gt; 
&lt;p&gt;Before diving into the quiche API, here are a few examples on how to use the quiche tools provided as part of the &lt;a href="https://raw.githubusercontent.com/cloudflare/quiche/master/apps/"&gt;quiche-apps&lt;/a&gt; crate.&lt;/p&gt; 
&lt;p&gt;After cloning the project according to the command mentioned in the &lt;a href="https://raw.githubusercontent.com/cloudflare/quiche/master/#building"&gt;building&lt;/a&gt; section, the client can be run as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo run --bin quiche-client -- https://cloudflare-quic.com/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;while the server can be run as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo run --bin quiche-server -- --cert apps/src/bin/cert.crt --key apps/src/bin/cert.key
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(note that the certificate provided is self-signed and should not be used in production)&lt;/p&gt; 
&lt;p&gt;Use the &lt;code&gt;--help&lt;/code&gt; command-line flag to get a more detailed description of each tool's options.&lt;/p&gt; 
&lt;h3&gt;Configuring connections&lt;/h3&gt; 
&lt;p&gt;The first step in establishing a QUIC connection using quiche is creating a &lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let mut config = quiche::Config::new(quiche::PROTOCOL_VERSION)?;
config.set_application_protos(&amp;amp;[b"example-proto"]);

// Additional configuration specific to application and use case...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; object controls important aspects of the QUIC connection such as QUIC version, ALPN IDs, flow control, congestion control, idle timeout and other properties or features.&lt;/p&gt; 
&lt;p&gt;QUIC is a general-purpose transport protocol and there are several configuration properties where there is no reasonable default value. For example, the permitted number of concurrent streams of any particular type is dependent on the application running over QUIC, and other use-case specific concerns.&lt;/p&gt; 
&lt;p&gt;quiche defaults several properties to zero, applications most likely need to set these to something else to satisfy their needs using the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_streams_bidi"&gt;&lt;code&gt;set_initial_max_streams_bidi()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_streams_uni"&gt;&lt;code&gt;set_initial_max_streams_uni()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_data"&gt;&lt;code&gt;set_initial_max_data()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_bidi_local"&gt;&lt;code&gt;set_initial_max_stream_data_bidi_local()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_bidi_remote"&gt;&lt;code&gt;set_initial_max_stream_data_bidi_remote()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_uni"&gt;&lt;code&gt;set_initial_max_stream_data_uni()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; also holds TLS configuration. This can be changed by mutators on the an existing object, or by constructing a TLS context manually and creating a configuration using &lt;a href="https://docs.quic.tech/quiche/struct.Config.html#method.with_boring_ssl_ctx_builder"&gt;&lt;code&gt;with_boring_ssl_ctx_builder()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A configuration object can be shared among multiple connections.&lt;/p&gt; 
&lt;h3&gt;Connection setup&lt;/h3&gt; 
&lt;p&gt;On the client-side the &lt;a href="https://docs.quic.tech/quiche/fn.connect.html"&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; utility function can be used to create a new connection, while &lt;a href="https://docs.quic.tech/quiche/fn.accept.html"&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/a&gt; is for servers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// Client connection.
let conn = quiche::connect(Some(&amp;amp;server_name), &amp;amp;scid, local, peer, &amp;amp;mut config)?;

// Server connection.
let conn = quiche::accept(&amp;amp;scid, None, local, peer, &amp;amp;mut config)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Handling incoming packets&lt;/h3&gt; 
&lt;p&gt;Using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.recv"&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; method the application can process incoming packets that belong to that connection from the network:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let to = socket.local_addr().unwrap();

loop {
    let (read, from) = socket.recv_from(&amp;amp;mut buf).unwrap();

    let recv_info = quiche::RecvInfo { from, to };

    let read = match conn.recv(&amp;amp;mut buf[..read], recv_info) {
        Ok(v) =&amp;gt; v,

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Generating outgoing packets&lt;/h3&gt; 
&lt;p&gt;Outgoing packet are generated using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.send"&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;loop {
    let (write, send_info) = match conn.send(&amp;amp;mut out) {
        Ok(v) =&amp;gt; v,

        Err(quiche::Error::Done) =&amp;gt; {
            // Done writing.
            break;
        },

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };

    socket.send_to(&amp;amp;out[..write], &amp;amp;send_info.to).unwrap();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When packets are sent, the application is responsible for maintaining a timer to react to time-based connection events. The timer expiration can be obtained using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.timeout"&gt;&lt;code&gt;timeout()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let timeout = conn.timeout();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The application is responsible for providing a timer implementation, which can be specific to the operating system or networking framework used. When a timer expires, the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.on_timeout"&gt;&lt;code&gt;on_timeout()&lt;/code&gt;&lt;/a&gt; method should be called, after which additional packets might need to be sent on the network:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// Timeout expired, handle it.
conn.on_timeout();

// Send more packets as needed after timeout.
loop {
    let (write, send_info) = match conn.send(&amp;amp;mut out) {
        Ok(v) =&amp;gt; v,

        Err(quiche::Error::Done) =&amp;gt; {
            // Done writing.
            break;
        },

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };

    socket.send_to(&amp;amp;out[..write], &amp;amp;send_info.to).unwrap();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Pacing&lt;/h4&gt; 
&lt;p&gt;It is recommended that applications &lt;a href="https://datatracker.ietf.org/doc/html/rfc9002#section-7.7"&gt;pace&lt;/a&gt; sending of outgoing packets to avoid creating packet bursts that could cause short-term congestion and losses in the network.&lt;/p&gt; 
&lt;p&gt;quiche exposes pacing hints for outgoing packets through the [&lt;code&gt;at&lt;/code&gt;] field of the [&lt;code&gt;SendInfo&lt;/code&gt;] structure that is returned by the &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.send"&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method. This field represents the time when a specific packet should be sent into the network.&lt;/p&gt; 
&lt;p&gt;Applications can use these hints by artificially delaying the sending of packets through platform-specific mechanisms (such as the &lt;a href="https://man7.org/linux/man-pages/man8/tc-etf.8.html"&gt;&lt;code&gt;SO_TXTIME&lt;/code&gt;&lt;/a&gt; socket option on Linux), or custom methods (for example by using user-space timers).&lt;/p&gt; 
&lt;h3&gt;Sending and receiving stream data&lt;/h3&gt; 
&lt;p&gt;After some back and forth, the connection will complete its handshake and will be ready for sending or receiving application data.&lt;/p&gt; 
&lt;p&gt;Data can be sent on a stream by using the &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.stream_send"&gt;&lt;code&gt;stream_send()&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;if conn.is_established() {
    // Handshake completed, send some data on stream 0.
    conn.stream_send(0, b"hello", true)?;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The application can check whether there are any readable streams by using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.readable"&gt;&lt;code&gt;readable()&lt;/code&gt;&lt;/a&gt; method, which returns an iterator over all the streams that have outstanding data to read.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.stream_recv"&gt;&lt;code&gt;stream_recv()&lt;/code&gt;&lt;/a&gt; method can then be used to retrieve the application data from the readable stream:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;if conn.is_established() {
    // Iterate over readable streams.
    for stream_id in conn.readable() {
        // Stream is readable, read until there's no more data.
        while let Ok((read, fin)) = conn.stream_recv(stream_id, &amp;amp;mut buf) {
            println!("Got {} bytes on stream {}", read, stream_id);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;HTTP/3&lt;/h3&gt; 
&lt;p&gt;The quiche &lt;a href="https://docs.quic.tech/quiche/h3/index.html"&gt;HTTP/3 module&lt;/a&gt; provides a high level API for sending and receiving HTTP requests and responses on top of the QUIC transport protocol.&lt;/p&gt; 
&lt;p&gt;Have a look at the [quiche/examples/] directory for more complete examples on how to use the quiche API, including examples on how to use quiche in C/C++ applications (see below for more information).&lt;/p&gt; 
&lt;h2&gt;Calling quiche from C/C++&lt;/h2&gt; 
&lt;p&gt;quiche exposes a &lt;a href="https://github.com/cloudflare/quiche/raw/master/quiche/include/quiche.h"&gt;thin C API&lt;/a&gt; on top of the Rust API that can be used to more easily integrate quiche into C/C++ applications (as well as in other languages that allow calling C APIs via some form of FFI). The C API follows the same design of the Rust one, modulo the constraints imposed by the C language itself.&lt;/p&gt; 
&lt;p&gt;When running &lt;code&gt;cargo build&lt;/code&gt;, a static library called &lt;code&gt;libquiche.a&lt;/code&gt; will be built automatically alongside the Rust one. This is fully stand-alone and can be linked directly into C/C++ applications.&lt;/p&gt; 
&lt;p&gt;Note that in order to enable the FFI API, the &lt;code&gt;ffi&lt;/code&gt; feature must be enabled (it is disabled by default), by passing &lt;code&gt;--features ffi&lt;/code&gt; to &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;quiche requires Rust 1.82 or later to build. The latest stable Rust release can be installed using &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once the Rust build environment is setup, the quiche source code can be fetched using git:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ git clone --recursive https://github.com/cloudflare/quiche
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then built using cargo:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo build --examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;cargo can also be used to run the testsuite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;a href="https://boringssl.googlesource.com/boringssl/"&gt;BoringSSL&lt;/a&gt;, which is used to implement QUIC's cryptographic handshake based on TLS, needs to be built and linked to quiche. This is done automatically when building quiche using cargo, but requires the &lt;code&gt;cmake&lt;/code&gt; command to be available during the build process. On Windows you also need &lt;a href="https://www.nasm.us/"&gt;NASM&lt;/a&gt;. The &lt;a href="https://github.com/google/boringssl/raw/master/BUILDING.md"&gt;official BoringSSL documentation&lt;/a&gt; has more details.&lt;/p&gt; 
&lt;p&gt;In alternative you can use your own custom build of BoringSSL by configuring the BoringSSL directory with the &lt;code&gt;QUICHE_BSSL_PATH&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ QUICHE_BSSL_PATH="/path/to/boringssl" cargo build --examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively you can use &lt;a href="https://github.com/quictls/openssl"&gt;OpenSSL/quictls&lt;/a&gt;. To enable quiche to use this vendor the &lt;code&gt;openssl&lt;/code&gt; feature can be added to the &lt;code&gt;--feature&lt;/code&gt; list. Be aware that &lt;code&gt;0-RTT&lt;/code&gt; is not supported if this vendor is used.&lt;/p&gt; 
&lt;h3&gt;Building for Android&lt;/h3&gt; 
&lt;p&gt;Building quiche for Android (NDK version 19 or higher, 21 recommended), can be done using &lt;a href="https://docs.rs/crate/cargo-ndk"&gt;cargo-ndk&lt;/a&gt; (v2.0 or later).&lt;/p&gt; 
&lt;p&gt;First the &lt;a href="https://developer.android.com/ndk"&gt;Android NDK&lt;/a&gt; needs to be installed, either using Android Studio or directly, and the &lt;code&gt;ANDROID_NDK_HOME&lt;/code&gt; environment variable needs to be set to the NDK installation path, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ export ANDROID_NDK_HOME=/usr/local/share/android-ndk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then the Rust toolchain for the Android architectures needed can be installed as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the minimum API level is 21 for all target architectures.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.rs/crate/cargo-ndk"&gt;cargo-ndk&lt;/a&gt; (v2.0 or later) also needs to be installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo install cargo-ndk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally the quiche library can be built using the following procedure. Note that the &lt;code&gt;-t &amp;lt;architecture&amp;gt;&lt;/code&gt; and &lt;code&gt;-p &amp;lt;NDK version&amp;gt;&lt;/code&gt; options are mandatory.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo ndk -t arm64-v8a -p 21 -- build --features ffi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://github.com/cloudflare/quiche/raw/master/tools/android/build_android_ndk19.sh"&gt;build_android_ndk19.sh&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Building for iOS&lt;/h3&gt; 
&lt;p&gt;To build quiche for iOS, you need the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install Xcode command-line tools. You can install them with Xcode or with the following command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ xcode-select --install
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the Rust toolchain for iOS architectures:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ rustup target add aarch64-apple-ios x86_64-apple-ios
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;cargo-lipo&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo install cargo-lipo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build libquiche, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo lipo --features ffi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo lipo --features ffi --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;iOS build is tested in Xcode 10.1 and Xcode 11.2.&lt;/p&gt; 
&lt;h3&gt;Building Docker images&lt;/h3&gt; 
&lt;p&gt;In order to build the Docker images, simply run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ make docker-build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find the quiche Docker images on the following Docker Hub repositories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/repository/docker/cloudflare/quiche"&gt;cloudflare/quiche&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/repository/docker/cloudflare/quiche-qns"&gt;cloudflare/quiche-qns&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;latest&lt;/code&gt; tag will be updated whenever quiche master branch updates.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;cloudflare/quiche&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Provides a server and client installed in /usr/local/bin.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;cloudflare/quiche-qns&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Provides the script to test quiche within the &lt;a href="https://github.com/marten-seemann/quic-interop-runner"&gt;quic-interop-runner&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2018-2019, Cloudflare, Inc.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/cloudflare/quiche/tree/master/COPYING"&gt;COPYING&lt;/a&gt; for the license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>glzr-io/glazewm</title>
      <link>https://github.com/glzr-io/glazewm</link>
      <description>&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3wm.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;V3 is finally out - check out the changelog &lt;a href="https://github.com/glzr-io/GlazeWM/releases"&gt;here&lt;/a&gt; 🔥&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;br&gt; 
 &lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/logo.svg?sanitize=true" width="230" alt="GlazeWM logo"&gt; 
 &lt;br&gt; 
 &lt;h1&gt;GlazeWM&lt;/h1&gt; 
 &lt;p&gt;&lt;strong&gt;A tiling window manager for Windows inspired by i3wm.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/ud6z3qjRvM"&gt;&lt;img src="https://img.shields.io/discord/1041662798196908052.svg?logo=discord&amp;amp;colorB=7289DA" alt="Discord invite"&gt;&lt;/a&gt; &lt;a href="https://github.com/glzr-io/glazewm/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/glzr-io/glazewm/total?logo=github&amp;amp;logoColor=white" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://github.com/orgs/glzr-io/projects/4/views/1?sliceBy%5Bvalue%5D=good+first+issue"&gt;&lt;img src="https://img.shields.io/badge/good_first_issues-7057ff" alt="Good first issues"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;GlazeWM lets you easily organize windows and adjust their layout on the fly by using keyboard-driven commands.&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#installation"&gt;Installation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#default-keybindings"&gt;Default keybindings&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#config-documentation"&gt;Config documentation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/glzr-io/glazewm/main/#faq"&gt;FAQ&lt;/a&gt; • &lt;a href="https://github.com/glzr-io/glazewm/raw/main/CONTRIBUTING.md"&gt;Contributing ↗&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/demo.webp" alt="Demo video"&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;🌟 Key features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple YAML configuration&lt;/li&gt; 
 &lt;li&gt;Multi-monitor support&lt;/li&gt; 
 &lt;li&gt;Customizable rules for specific windows&lt;/li&gt; 
 &lt;li&gt;Easy one-click installation&lt;/li&gt; 
 &lt;li&gt;Integration with &lt;a href="https://github.com/glzr-io/zebar"&gt;Zebar&lt;/a&gt; as a status bar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;The latest version of GlazeWM is downloadable via &lt;a href="https://github.com/glzr-io/GlazeWM/releases"&gt;releases&lt;/a&gt;.&lt;/strong&gt; Zebar can optionally be installed as well via a checkbox during installation.&lt;/p&gt; 
&lt;p&gt;GlazeWM is also available through several package managers:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Winget&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;winget install GlazeWM
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Chocolatey&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install glazewm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Scoop&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;scoop bucket add extras
scoop install extras/glazewm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Help fix something that annoys you, or add a feature you've been wanting for a long time! Contributions are very welcome.&lt;/p&gt; 
&lt;p&gt;Local development and guidelines are available in the &lt;a href="https://github.com/glzr-io/glazewm/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Default keybindings&lt;/h2&gt; 
&lt;p&gt;On the first launch of GlazeWM, a default configuration can optionally be generated.&lt;/p&gt; 
&lt;p&gt;Below is a cheat sheet of all available commands and their default keybindings.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/glzr-io/glazewm/main/resources/assets/cheatsheet.png" alt="Infographic"&gt;&lt;/p&gt; 
&lt;h2&gt;Config documentation&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/glzr-io/glazewm/raw/main/resources/assets/sample-config.yaml"&gt;default config&lt;/a&gt; file is generated at &lt;code&gt;%userprofile%\.glzr\glazewm\config.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To use a different config file location, you can launch the GlazeWM executable with the CLI argument &lt;code&gt;--config="..."&lt;/code&gt;, like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./glazewm.exe start --config="C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or pass a value for the &lt;code&gt;GLAZEWM_CONFIG_PATH&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;setx GLAZEWM_CONFIG_PATH "C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the benefit of using a custom path being that you can choose a different name for the config file, such as &lt;code&gt;glazewm.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Config: General&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;general:
  # Commands to run when the WM has started (e.g. to run a script or launch
  # another application).
  startup_commands: []

  # Commands to run just before the WM is shutdown.
  shutdown_commands: []

  # Commands to run after the WM config has reloaded.
  config_reload_commands: []

  # Whether to automatically focus windows underneath the cursor.
  focus_follows_cursor: false

  # Whether to switch back and forth between the previously focused
  # workspace when focusing the current workspace.
  toggle_workspace_on_refocus: false

  cursor_jump:
    # Whether to automatically move the cursor on the specified trigger.
    enabled: true

    # Trigger for cursor jump:
    # - 'monitor_focus': Jump when focus changes between monitors.
    # - 'window_focus': Jump when focus changes between windows.
    trigger: "monitor_focus"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Keybindings&lt;/h3&gt; 
&lt;p&gt;The available keyboard shortcuts can be customized via the &lt;code&gt;keybindings&lt;/code&gt; option. A keybinding consists of one or more key combinations and one or more commands to run when pressed.&lt;/p&gt; 
&lt;p&gt;It's recommended to use the alt key for keybindings. The Windows key is unfortunately a pain to remap, since the OS reserves certain keybindings (e.g. &lt;code&gt;lwin+l&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;keybindings:
  # Command(s) to run.
  - commands: ["focus --workspace 1"]

    # Key combination(s) to trigger the keybinding.
    bindings: ["alt+1"]

  # Multiple commands can be run in a sequence (e.g. to move a window to a
  # workspace + focus workspace).
  - commands: ["move --workspace 1", "focus --workspace 1"]
    bindings: ["alt+shift+1"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Full list of keys that can be used for keybindings:&lt;/strong&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Keys list&lt;/summary&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Key&lt;/th&gt; 
    &lt;th&gt;Description&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;a&lt;/code&gt; - &lt;code&gt;z&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Alphabetical letter keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;0&lt;/code&gt; - &lt;code&gt;9&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Number keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;numpad0&lt;/code&gt; - &lt;code&gt;numpad9&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Numerical keypad keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;f1&lt;/code&gt; - &lt;code&gt;f24&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Function keys&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lshift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rshift&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right SHIFT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;control&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lctrl&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rctrl&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right CTRL key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;Either left or right ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lalt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;ralt&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right ALT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;lwin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The left ⊞ Windows logo key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;rwin&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The right ⊞ Windows logo key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;space&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The spacebar key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ESCAPE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;back&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The BACKSPACE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The TAB key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ENTER key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;left&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ← arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;right&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The → arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ↑ arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The ↓ arrow key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;num_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The NUM LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;scroll_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The SCROLL LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;caps_lock&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The CAPS LOCK key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;page_up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PAGE UP key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;page_down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PAGE DOWN key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The INSERT key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The DELETE key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The END key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;home&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The HOME key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;print_screen&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The PRINT SCREEN key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;multiply&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;*&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;+&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;subtract&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;-&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The DEL key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;divide&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;/&lt;/code&gt; key (only on numpad)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_up&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume up key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_down&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume down key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;volume_mute&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The volume mute key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_next_track&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media next track key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_prev_track&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media prev track key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_stop&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media stop key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;media_play_pause&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The media play/pause key&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_semicolon&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;;&lt;/code&gt;/&lt;code&gt;:&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_question&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;/&lt;/code&gt;/&lt;code&gt;?&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_tilde&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;`&lt;/code&gt;/&lt;code&gt;~&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_open_brackets&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;[&lt;/code&gt;/&lt;code&gt;{&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_pipe&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;\&lt;/code&gt;/&lt;code&gt;|&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_close_brackets&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;]&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_quotes&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;'&lt;/code&gt;/&lt;code&gt;"&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_plus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;=&lt;/code&gt;/&lt;code&gt;+&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_comma&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;,&lt;/code&gt;/&lt;code&gt;&amp;lt;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_minus&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;-&lt;/code&gt;/&lt;code&gt;_&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;code&gt;oem_period&lt;/code&gt;&lt;/td&gt; 
    &lt;td&gt;The &lt;code&gt;.&lt;/code&gt;/&lt;code&gt;&amp;gt;&lt;/code&gt; key on a US standard keyboard (varies by keyboard)&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;p&gt;If a key is not in the list above, it is likely still supported if you use its character in a keybinding (e.g. &lt;code&gt;alt+å&lt;/code&gt; for the Norwegian Å character).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;German and US international keyboards treat the right-side alt key differently. For these keyboard layouts, use &lt;code&gt;ralt+ctrl&lt;/code&gt; instead of &lt;code&gt;ralt&lt;/code&gt; to bind the right-side alt key.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Config: Gaps&lt;/h3&gt; 
&lt;p&gt;The gaps between windows can be changed via the &lt;code&gt;gaps&lt;/code&gt; property in the config file. Inner and outer gaps are set separately.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;gaps:
  # Gap between adjacent windows.
  inner_gap: "20px"

  # Gap between windows and the screen edge.
  outer_gap:
    top: "20px"
    right: "20px"
    bottom: "20px"
    left: "20px"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Workspaces&lt;/h3&gt; 
&lt;p&gt;Workspaces need to be predefined via the &lt;code&gt;workspaces&lt;/code&gt; property in the config file. A workspace is automatically assigned to each monitor on startup.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;workspaces:
  # This is the unique ID for the workspace. It's used in keybinding
  # commands, and is also the label shown in 3rd-party apps (e.g. Zebar) if
  # `display_name` is not provided.
  - name: "1"

    # Optional override for the workspace label used in 3rd-party apps.
    # Does not need to be unique.
    display_name: "Work"

    # Optionally force the workspace on a specific monitor if it exists.
    # 0 is your leftmost screen, 1 is the next one to the right, and so on.
    bind_to_monitor: 0

    # Optionally prevent workspace from being deactivated when empty.
    keep_alive: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window rules&lt;/h3&gt; 
&lt;p&gt;Commands can be run when a window is first launched. This is useful for adding window-specific behaviors like always starting a window as fullscreen or assigning to a specific workspace.&lt;/p&gt; 
&lt;p&gt;Windows can be targeted by their process, class, and title. Multiple matching criteria can be used together to target a window more precisely.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_rules:
  - commands: ["move --workspace 1"]
    match:
      # Move browsers to workspace 1.
      - window_process: { regex: "msedge|brave|chrome" }

  - commands: ["ignore"]
    match:
      # Ignores any Zebar windows.
      - window_process: { equals: "zebar" }

      # Ignores picture-in-picture windows for browsers.
      # Note that *both* the title and class must match for the rule to run.
      - window_title: { regex: "[Pp]icture.in.[Pp]icture" }
        window_class: { regex: "Chrome_WidgetWin_1|MozillaDialogClass" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window effects&lt;/h3&gt; 
&lt;p&gt;Visual effects can be applied to windows via the &lt;code&gt;window_effects&lt;/code&gt; option. Currently, colored borders are the only effect available with more to come in the future.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Window effects are exclusive to Windows 11.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_effects:
  # Visual effects to apply to the focused window.
  focused_window:
    # Highlight the window with a colored border.
    border:
      enabled: true
      color: "#0000ff"

  # Visual effects to apply to non-focused windows.
  other_windows:
    border:
      enabled: false
      color: "#d3d3d3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Window behavior&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;window_behavior&lt;/code&gt; config option exists to customize the states that a window can be in (&lt;code&gt;tiling&lt;/code&gt;, &lt;code&gt;floating&lt;/code&gt;, &lt;code&gt;minimized&lt;/code&gt;, and &lt;code&gt;fullscreen&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_behavior:
  # New windows are created in this state whenever possible.
  # Allowed values: 'tiling', 'floating'.
  initial_state: "tiling"

  # Sets the default options for when a new window is created. This also
  # changes the defaults for when the state change commands, like
  # `set-floating`, are used without any flags.
  state_defaults:
    floating:
      # Whether to center floating windows by default.
      centered: true

      # Whether to show floating windows as always on top.
      shown_on_top: false

    fullscreen:
      # Maximize the window if possible. If the window doesn't have a
      # maximize button, then it'll be made fullscreen normally instead.
      maximized: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config: Binding modes&lt;/h3&gt; 
&lt;p&gt;Binding modes are used to modify keybindings while GlazeWM is running.&lt;/p&gt; 
&lt;p&gt;A binding mode can be enabled with &lt;code&gt;wm-enable-binding-mode --name &amp;lt;NAME&amp;gt;&lt;/code&gt; and disabled with &lt;code&gt;wm-disable-binding-mode --name &amp;lt;NAME&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;binding_modes:
  # When enabled, the focused window can be resized via arrow keys or HJKL.
  - name: "resize"
    keybindings:
      - commands: ["resize --width -2%"]
        bindings: ["h", "left"]
      - commands: ["resize --width +2%"]
        bindings: ["l", "right"]
      - commands: ["resize --height +2%"]
        bindings: ["k", "up"]
      - commands: ["resize --height -2%"]
        bindings: ["j", "down"]
      # Press enter/escape to return to default keybindings.
      - commands: ["wm-disable-binding-mode --name resize"]
        bindings: ["escape", "enter"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Q: How do I run GlazeWM on startup?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Create a shortcut for the executable by right-clicking on the GlazeWM executable -&amp;gt; &lt;code&gt;Create shortcut&lt;/code&gt;. Put the shortcut in your startup folder, which you can get to by entering &lt;code&gt;shell:startup&lt;/code&gt; in the top bar in File Explorer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How can I create &lt;code&gt;&amp;lt;insert layout&amp;gt;&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can create custom layouts by changing the tiling direction with &lt;code&gt;alt+v&lt;/code&gt;. This changes where the next window is placed &lt;em&gt;in relation to the current window&lt;/em&gt;. If the current window's direction is horizontal, the new window will be placed to the right of it. If it is vertical, it will be placed below it. This also applies when moving windows; the tiling direction of the stationary window will affect where the moved window will be placed.&lt;/p&gt; 
&lt;p&gt;Community-made scripts like &lt;a href="https://github.com/Dutch-Raptor/GAT-GWM"&gt;Dutch-Raptor/GAT-GWM&lt;/a&gt; and &lt;a href="https://github.com/burgr033/GlazeWM-autotiling-python"&gt;burgr033/GlazeWM-autotiling-python&lt;/a&gt; can be used to automatically change the tiling direction. Native support for automatic layouts isn't &lt;em&gt;currently&lt;/em&gt; supported.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How do I create a rule for &lt;code&gt;&amp;lt;insert application&amp;gt;&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;To match a specific application, you need a command to execute and either the window's process name, title, or class name. For example, if you use Flow-Launcher and want to make the settings window float, you can do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;window_rules:
  - commands: ["set-floating"]
    match:
      - window_process: { equals: "Flow.Launcher" }
        window_title: { equals: "Settings" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Programs like Winlister or AutoHotkey's Window Spy can be useful for getting info about a window.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How can I ignore GlazeWM's keybindings when &lt;code&gt;&amp;lt;insert application&amp;gt;&lt;/code&gt; is focused?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This isn't currently supported, however, the keybinding &lt;code&gt;alt+shift+p&lt;/code&gt; in the default config is used to disable all other keybindings until &lt;code&gt;alt+shift+p&lt;/code&gt; is pressed again.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>0xPlaygrounds/rig</title>
      <link>https://github.com/0xPlaygrounds/rig</link>
      <description>&lt;p&gt;⚙️🦀 Build portable, modular &amp; lightweight Fullstack Agents&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="img/rig-playgrounds-dark.svg"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="img/rig-playgrounds-light.svg"&gt; 
  &lt;img src="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/img/rig-playgrounds-light.svg?sanitize=true" style="width: 40%; height: 40%;" alt="Rig logo"&gt; 
 &lt;/picture&gt; &lt;br&gt; &lt;a href="https://docs.rig.rs"&gt;&lt;img src="https://img.shields.io/badge/%F0%9F%93%96%20docs-rig.rs-dca282.svg?sanitize=true"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://docs.rs/rig-core/latest/rig/"&gt;&lt;img src="https://img.shields.io/badge/docs-API%20Reference-dca282.svg?sanitize=true"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://crates.io/crates/rig-core"&gt;&lt;img src="https://img.shields.io/crates/v/rig-core.svg?color=dca282"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://crates.io/crates/rig-core"&gt;&lt;img src="https://img.shields.io/crates/d/rig-core.svg?color=dca282"&gt;&lt;/a&gt; &lt;br&gt; &lt;a href="https://discord.gg/playgrounds"&gt;&lt;img src="https://img.shields.io/discord/511303648119226382?color=%236d82cc&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://github.com/0xPlaygrounds/rig"&gt;&lt;img src="https://img.shields.io/github/stars/0xPlaygrounds/rig?style=social" alt="stars - rig"&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=""&gt;&lt;img src="https://img.shields.io/badge/built_with-Rust-dca282.svg?logo=rust"&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/Playgrounds0x"&gt;&lt;img src="https://img.shields.io/twitter/follow/Playgrounds0x"&gt;&lt;/a&gt; &amp;nbsp; &lt;br&gt; &lt;/p&gt; &amp;nbsp; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://docs.rig.rs"&gt;📑 Docs&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://rig.rs"&gt;🌐 Website&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://github.com/0xPlaygrounds/rig/issues/new"&gt;🤝 Contribute&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href="https://docs.rig.rs/guides"&gt;✍🏽 Blogs&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;✨ If you would like to help spread the word about Rig, please consider starring the repo!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Here be dragons! As we plan to ship a torrent of features in the following months, future updates &lt;strong&gt;will&lt;/strong&gt; contain &lt;strong&gt;breaking changes&lt;/strong&gt;. With Rig evolving, we'll annotate changes and highlight migration paths as we encounter them.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#table-of-contents"&gt;Table of contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#what-is-rig"&gt;What is Rig?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#high-level-features"&gt;High-level features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#who-is-using-rig-in-production"&gt;Who's using Rig in production?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#get-started"&gt;Get Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#simple-example"&gt;Simple example:&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/#integrations"&gt;Integrations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is Rig?&lt;/h2&gt; 
&lt;p&gt;Rig is a Rust library for building scalable, modular, and ergonomic &lt;strong&gt;LLM-powered&lt;/strong&gt; applications.&lt;/p&gt; 
&lt;p&gt;More information about this crate can be found in the &lt;a href="https://docs.rig.rs"&gt;official&lt;/a&gt; &amp;amp; &lt;a href="https://docs.rs/rig-core/latest/rig/"&gt;crate&lt;/a&gt; (API Reference) documentations.&lt;/p&gt; 
&lt;h2&gt;High-level features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full support for LLM completion and embedding workflows&lt;/li&gt; 
 &lt;li&gt;Simple but powerful common abstractions over LLM providers (e.g. OpenAI, Cohere) and vector stores (e.g. MongoDB, SQlite, in-memory)&lt;/li&gt; 
 &lt;li&gt;Integrate LLMs in your app with minimal boilerplate&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Who is using Rig in production?&lt;/h2&gt; 
&lt;p&gt;Below is a non-exhaustive list of companies and people who are using Rig in production:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/firstbatchxyz/dkn-compute-node"&gt;Dria Compute Node&lt;/a&gt; - a node that serves computation results within the Dria Knowledge Network&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/modelcontextprotocol/rust-sdk"&gt;The MCP Rust SDK&lt;/a&gt; - the official Model Context Protocol Rust SDK. Has an example for usage with Rig.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buger/probe"&gt;Probe&lt;/a&gt; - an AI-friendly, fully local semantic code search tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NethermindEth/nine"&gt;NINE&lt;/a&gt; - Neural Interconnected Nodes Engine, by &lt;a href="https://www.nethermind.io/"&gt;Nethermind.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0xPlaygrounds/rig-onchain-kit"&gt;rig-onchain-kit&lt;/a&gt; - the Rig Onchain Kit. Intended to make interactions between Solana/EVM and Rig much easier to implement.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/linera-io/linera-protocol"&gt;Linera Protocol&lt;/a&gt; - Decentralized blockchain infrastructure designed for highly scalable, secure, low-latency Web3 applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/piotrostr/listen"&gt;Listen&lt;/a&gt; - A framework aiming to become the go-to framework for AI portfolio management agents. Powers &lt;a href="https://app.listen-rs.com/"&gt;the Listen app.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Are you also using Rig in production? &lt;a href="https://www.github.com/0xPlaygrounds/rig/issues"&gt;Open an issue&lt;/a&gt; to have your name added!&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo add rig-core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Simple example:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use rig::{completion::Prompt, providers::openai};

#[tokio::main]
async fn main() {
    // Create OpenAI client and model
    // This requires the `OPENAI_API_KEY` environment variable to be set.
    let openai_client = openai::Client::from_env();

    let gpt4 = openai_client.agent("gpt-4").build();

    // Prompt the model and print its response
    let response = gpt4
        .prompt("Who are you?")
        .await
        .expect("Failed to prompt GPT-4");

    println!("GPT-4: {response}");
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note using &lt;code&gt;#[tokio::main]&lt;/code&gt; requires you enable tokio's &lt;code&gt;macros&lt;/code&gt; and &lt;code&gt;rt-multi-thread&lt;/code&gt; features or just &lt;code&gt;full&lt;/code&gt; to enable all features (&lt;code&gt;cargo add tokio --features macros,rt-multi-thread&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;You can find more examples each crate's &lt;code&gt;examples&lt;/code&gt; (ie. &lt;a href="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/rig-core/examples"&gt;&lt;code&gt;rig-core/examples&lt;/code&gt;&lt;/a&gt;) directory. More detailed use cases walkthroughs are regularly published on our &lt;a href="https://dev.to/0thtachi"&gt;Dev.to Blog&lt;/a&gt; and added to Rig's official documentation &lt;a href="http://docs.rig.rs"&gt;(docs.rig.rs)&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Integrations&lt;/h2&gt; 
&lt;p&gt;Vector stores are available as separate companion-crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MongoDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-mongodb"&gt;&lt;code&gt;rig-mongodb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;LanceDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-lancedb"&gt;&lt;code&gt;rig-lancedb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Neo4j: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-neo4j"&gt;&lt;code&gt;rig-neo4j&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Qdrant: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-qdrant"&gt;&lt;code&gt;rig-qdrant&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SQLite: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-sqlite"&gt;&lt;code&gt;rig-sqlite&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SurrealDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-surrealdb"&gt;&lt;code&gt;rig-surrealdb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Milvus: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-milvus"&gt;&lt;code&gt;rig-milvus&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ScyllaDB: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-scylladb"&gt;&lt;code&gt;rig-scylladb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;AWS S3Vectors: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-s3vectors"&gt;&lt;code&gt;rig-s3vectors&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following providers are available as separate companion-crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fastembed: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-fastembed"&gt;&lt;code&gt;rig-fastembed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Eternal AI: &lt;a href="https://github.com/0xPlaygrounds/rig/tree/main/rig-eternalai"&gt;&lt;code&gt;rig-eternalai&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="center"&gt; &lt;br&gt; &lt;br&gt; &lt;img src="https://raw.githubusercontent.com/0xPlaygrounds/rig/main/img/built-by-playgrounds.svg?sanitize=true" alt="Build by Playgrounds" width="30%"&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qdrant/qdrant</title>
      <link>https://github.com/qdrant/qdrant</link>
      <description>&lt;p&gt;Qdrant - High-performance, massive-scale Vector Database and Vector Search Engine for the next generation of AI. Also available in the cloud https://cloud.qdrant.io/&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://github.com/qdrant/qdrant/raw/master/docs/logo-dark.svg"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/qdrant/qdrant/raw/master/docs/logo-light.svg"&gt; 
  &lt;img height="100" alt="Qdrant" src="https://github.com/qdrant/qdrant/raw/master/docs/logo.svg?sanitize=true"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;Vector Search Engine for the next generation of AI applications&lt;/b&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/qdrant/qdrant/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/qdrant/qdrant/rust.yml?style=flat-square" alt="Tests status"&gt;&lt;/a&gt; &lt;a href="https://api.qdrant.tech/"&gt;&lt;img src="https://img.shields.io/badge/Docs-OpenAPI%203.0-success?style=flat-square" alt="OpenAPI Docs"&gt;&lt;/a&gt; &lt;a href="https://github.com/qdrant/qdrant/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/qdrant/qdrant?style=flat-square" alt="Apache 2.0 License"&gt;&lt;/a&gt; &lt;a href="https://qdrant.to/discord"&gt;&lt;img src="https://img.shields.io/discord/907569970500743200?logo=Discord&amp;amp;style=flat-square&amp;amp;color=7289da" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://qdrant.to/roadmap"&gt;&lt;img src="https://img.shields.io/badge/Roadmap-2025-bc1439.svg?style=flat-square" alt="Roadmap 2025"&gt;&lt;/a&gt; &lt;a href="https://cloud.qdrant.io/"&gt;&lt;img src="https://img.shields.io/badge/Qdrant-Cloud-24386C.svg?logo=cloud&amp;amp;style=flat-square" alt="Qdrant Cloud"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Qdrant&lt;/strong&gt; (read: &lt;em&gt;quadrant&lt;/em&gt;) is a vector similarity search engine and vector database. It provides a production-ready service with a convenient API to store, search, and manage points—vectors with an additional payload Qdrant is tailored to extended filtering support. It makes it useful for all sorts of neural-network or semantic-based matching, faceted search, and other applications.&lt;/p&gt; 
&lt;p&gt;Qdrant is written in Rust 🦀, which makes it fast and reliable even under high load. See &lt;a href="https://qdrant.tech/benchmarks/"&gt;benchmarks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!&lt;/p&gt; 
&lt;p&gt;Qdrant is also available as a fully managed &lt;strong&gt;&lt;a href="https://cloud.qdrant.io/"&gt;Qdrant Cloud&lt;/a&gt;&lt;/strong&gt; ⛅ including a &lt;strong&gt;free tier&lt;/strong&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md"&gt;Quick Start&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#clients"&gt;Client Libraries&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#demo-projects"&gt;Demo Projects&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#integrations"&gt;Integrations&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/#contacts"&gt;Contact&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;pip install qdrant-client
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The python client offers a convenient way to start with Qdrant locally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from qdrant_client import QdrantClient
qdrant = QdrantClient(":memory:") # Create in-memory Qdrant instance, for testing, CI/CD
# OR
client = QdrantClient(path="path/to/db")  # Persists changes to disk, fast prototyping
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Client-Server&lt;/h3&gt; 
&lt;p&gt;To experience the full power of Qdrant locally, run the container with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -p 6333:6333 qdrant/qdrant
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can connect to this with any client, including Python:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;qdrant = QdrantClient("http://localhost:6333") # Connect to existing Qdrant instance
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Before deploying Qdrant to production, be sure to read our &lt;a href="https://qdrant.tech/documentation/guides/installation/"&gt;installation&lt;/a&gt; and &lt;a href="https://qdrant.tech/documentation/guides/security/"&gt;security&lt;/a&gt; guides.&lt;/p&gt; 
&lt;h3&gt;Clients&lt;/h3&gt; 
&lt;p&gt;Qdrant offers the following client libraries to help you integrate it into your application stack with ease:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Official: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/go-client"&gt;Go client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/rust-client"&gt;Rust client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-js"&gt;JavaScript/TypeScript client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-client"&gt;Python client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/qdrant-dotnet"&gt;.NET/C# client&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/qdrant/java-client"&gt;Java client&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Community: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://hexdocs.pm/qdrant/readme.html"&gt;Elixir&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/hkulekci/qdrant-php"&gt;PHP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/andreibondarev/qdrant-ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/metaloom/qdrant-java-client"&gt;Java&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Where do I go from here?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qdrant/qdrant/master/docs/QUICK_START.md"&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;End to End &lt;a href="https://colab.research.google.com/drive/1Bz8RSVHwnNDaNtDwotfPj0w7AYzsdXZ-?usp=sharing"&gt;Colab Notebook&lt;/a&gt; demo with SentenceBERT and Qdrant&lt;/li&gt; 
 &lt;li&gt;Detailed &lt;a href="https://qdrant.tech/documentation/"&gt;Documentation&lt;/a&gt; are great starting points&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://qdrant.to/qdrant-tutorial"&gt;Step-by-Step Tutorial&lt;/a&gt; to create your first neural network project with Qdrant&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo Projects &lt;a href="https://replit.com/@qdrant"&gt;&lt;img align="right" src="https://replit.com/badge/github/qdrant/qdrant" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Discover Semantic Text Search 🔍&lt;/h3&gt; 
&lt;p&gt;Unlock the power of semantic embeddings with Qdrant, transcending keyword-based search to find meaningful connections in short texts. Deploy a neural search in minutes using a pre-trained neural network, and experience the future of text search. &lt;a href="https://qdrant.to/semantic-search-demo"&gt;Try it online!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Explore Similar Image Search - Food Discovery 🍕&lt;/h3&gt; 
&lt;p&gt;There's more to discovery than text search, especially when it comes to food. People often choose meals based on appearance rather than descriptions and ingredients. Let Qdrant help your users find their next delicious meal using visual search, even if they don't know the dish's name. &lt;a href="https://qdrant.to/food-discovery"&gt;Check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Master Extreme Classification - E-commerce Product Categorization 📺&lt;/h3&gt; 
&lt;p&gt;Enter the cutting-edge realm of extreme classification, an emerging machine learning field tackling multi-class and multi-label problems with millions of labels. Harness the potential of similarity learning models, and see how a pre-trained transformer model and Qdrant can revolutionize e-commerce product categorization. &lt;a href="https://qdrant.to/extreme-classification-demo"&gt;Play with it online!&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt; More solutions &lt;/summary&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/text_search.png"&gt; &lt;/td&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/image_search.png"&gt; &lt;/td&gt; 
    &lt;td width="30%"&gt; &lt;img src="https://qdrant.tech/content/images/recommendations.png"&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Semantic Text Search &lt;/td&gt; 
    &lt;td&gt; Similar Image Search &lt;/td&gt; 
    &lt;td&gt; Recommendations &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/chat_bots.png"&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/matching_engines.png"&gt; &lt;/td&gt; 
    &lt;td&gt; &lt;img width="300px" src="https://qdrant.tech/content/images/anomalies_detection.png"&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; Chat Bots &lt;/td&gt; 
    &lt;td&gt; Matching Engines &lt;/td&gt; 
    &lt;td&gt; Anomaly Detection &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;REST&lt;/h3&gt; 
&lt;p&gt;Online OpenAPI 3.0 documentation is available &lt;a href="https://api.qdrant.tech/"&gt;here&lt;/a&gt;. OpenAPI makes it easy to generate a client for virtually any framework or programming language.&lt;/p&gt; 
&lt;p&gt;You can also download raw OpenAPI &lt;a href="https://github.com/qdrant/qdrant/raw/master/docs/redoc/master/openapi.json"&gt;definitions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;gRPC&lt;/h3&gt; 
&lt;p&gt;For faster production-tier searches, Qdrant also provides a gRPC interface. You can find gRPC documentation &lt;a href="https://qdrant.tech/documentation/interfaces/#grpc-interface"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Filtering and Payload&lt;/h3&gt; 
&lt;p&gt;Qdrant can attach any JSON payloads to vectors, allowing for both the storage and filtering of data based on the values in these payloads. Payload supports a wide range of data types and query conditions, including keyword matching, full-text filtering, numerical ranges, geo-locations, and more.&lt;/p&gt; 
&lt;p&gt;Filtering conditions can be combined in various ways, including &lt;code&gt;should&lt;/code&gt;, &lt;code&gt;must&lt;/code&gt;, and &lt;code&gt;must_not&lt;/code&gt; clauses, ensuring that you can implement any desired business logic on top of similarity matching.&lt;/p&gt; 
&lt;h3&gt;Hybrid Search with Sparse Vectors&lt;/h3&gt; 
&lt;p&gt;To address the limitations of vector embeddings when searching for specific keywords, Qdrant introduces support for sparse vectors in addition to the regular dense ones.&lt;/p&gt; 
&lt;p&gt;Sparse vectors can be viewed as an generalization of BM25 or TF-IDF ranking. They enable you to harness the capabilities of transformer-based neural networks to weigh individual tokens effectively.&lt;/p&gt; 
&lt;h3&gt;Vector Quantization and On-Disk Storage&lt;/h3&gt; 
&lt;p&gt;Qdrant provides multiple options to make vector search cheaper and more resource-efficient. Built-in vector quantization reduces RAM usage by up to 97% and dynamically manages the trade-off between search speed and precision.&lt;/p&gt; 
&lt;h3&gt;Distributed Deployment&lt;/h3&gt; 
&lt;p&gt;Qdrant offers comprehensive horizontal scaling support through two key mechanisms:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Size expansion via sharding and throughput enhancement via replication&lt;/li&gt; 
 &lt;li&gt;Zero-downtime rolling updates and seamless dynamic scaling of the collections&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Highlighted Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Query Planning and Payload Indexes&lt;/strong&gt; - leverages stored payload information to optimize query execution strategy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SIMD Hardware Acceleration&lt;/strong&gt; - utilizes modern CPU x86-x64 and Neon architectures to deliver better performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Async I/O&lt;/strong&gt; - uses &lt;code&gt;io_uring&lt;/code&gt; to maximize disk throughput utilization even on a network-attached storage.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Write-Ahead Logging&lt;/strong&gt; - ensures data persistence with update confirmation, even during power outages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Integrations&lt;/h1&gt; 
&lt;p&gt;Examples and/or documentation of Qdrant integrations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.cohere.com/docs/qdrant-and-cohere"&gt;Cohere&lt;/a&gt; (&lt;a href="https://qdrant.tech/articles/qa-with-cohere-and-qdrant/"&gt;blogpost on building a QA app with Cohere and Qdrant&lt;/a&gt;) - Use Cohere embeddings with Qdrant&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docarray.org/user_guide/storing/index_qdrant/"&gt;DocArray&lt;/a&gt; - Use Qdrant as a document store in DocArray&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://haystack.deepset.ai/integrations/qdrant-document-store"&gt;Haystack&lt;/a&gt; - Use Qdrant as a document store with Haystack (&lt;a href="https://haystack.deepset.ai/blog/qdrant-integration"&gt;blogpost&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://python.langchain.com/docs/integrations/providers/qdrant/"&gt;LangChain&lt;/a&gt; (&lt;a href="https://qdrant.tech/articles/langchain-integration/"&gt;blogpost&lt;/a&gt;) - Use Qdrant as a memory backend for LangChain.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gpt-index.readthedocs.io/en/latest/examples/vector_stores/QdrantIndexDemo.html"&gt;LlamaIndex&lt;/a&gt; - Use Qdrant as a Vector Store with LlamaIndex.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openai/chatgpt-retrieval-plugin/raw/main/docs/providers/qdrant/setup.md"&gt;OpenAI - ChatGPT retrieval plugin&lt;/a&gt; - Use Qdrant as a memory backend for ChatGPT&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://devblogs.microsoft.com/semantic-kernel/the-power-of-persistent-memory-with-semantic-kernel-and-qdrant-vector-database/"&gt;Microsoft Semantic Kernel&lt;/a&gt; - Use Qdrant as persistent memory with Semantic Kernel&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contacts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Have questions? Join our &lt;a href="https://qdrant.to/discord"&gt;Discord channel&lt;/a&gt; or mention &lt;a href="https://qdrant.to/twitter"&gt;@qdrant_engine on Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Want to stay in touch with latest releases? Subscribe to our &lt;a href="https://qdrant.tech/subscribe/"&gt;Newsletters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Looking for a managed cloud? Check &lt;a href="https://qdrant.tech/pricing/"&gt;pricing&lt;/a&gt;, need something personalised? We're at &lt;a href="mailto:info@qdrant.tech"&gt;info@qdrant.tech&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Qdrant is licensed under the Apache License, Version 2.0. View a copy of the &lt;a href="https://github.com/qdrant/qdrant/raw/master/LICENSE"&gt;License file&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true" alt="RustDesk - Your remote desktop"&gt;&lt;br&gt; &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build"&gt;Build&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker"&gt;Docker&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure"&gt;Structure&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot"&gt;Snapshot&lt;/a&gt;&lt;br&gt; [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md"&gt;Українська&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md"&gt;česky&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md"&gt;中文&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md"&gt;Magyar&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md"&gt;Español&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md"&gt;فارسی&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md"&gt;Français&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md"&gt;Deutsch&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md"&gt;Polski&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md"&gt;Indonesian&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md"&gt;Suomi&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md"&gt;മലയാളം&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md"&gt;日本語&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md"&gt;Nederlands&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md"&gt;Italiano&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md"&gt;Русский&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md"&gt;Português (Brasil)&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md"&gt;Esperanto&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md"&gt;한국어&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md"&gt;العربي&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md"&gt;Tiếng Việt&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md"&gt;Dansk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md"&gt;Ελληνικά&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md"&gt;Türkçe&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md"&gt;Norsk&lt;/a&gt;]&lt;br&gt; &lt;b&gt;We need your help to translate this README, &lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/lang"&gt;RustDesk UI&lt;/a&gt; and &lt;a href="https://github.com/rustdesk/doc.rustdesk.com"&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Chat with us: &lt;a href="https://discord.gg/nDceKgxnkV"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/rustdesk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/rustdesk"&gt;Reddit&lt;/a&gt; | &lt;a href="https://www.youtube.com/@rustdesk"&gt;YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://ko-fi.com/I2I04VU09"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop solution, written in Rust. Works out of the box with no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href="https://rustdesk.com/server"&gt;set up your own&lt;/a&gt;, or &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png" alt="image"&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases"&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases/tag/nightly"&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://f-droid.org/en/packages/com.carriez.flutter_hbb"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" height="80"&gt;&lt;/a&gt; &lt;a href="https://flathub.org/apps/com.rustdesk.RustDesk"&gt;&lt;img src="https://flathub.org/api/badge?svg&amp;amp;locale=en" alt="Get it on Flathub" height="80"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href="https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml"&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"&gt;Windows&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so"&gt;Linux&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib"&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw Steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://rustdesk.com/docs/en/dev/build/"&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to Build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i 's/CFLAGS+=-I/CFLAGS+=-fPIC -I/g' Makefile
sed -i 's/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g' Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone --recurse-submodules https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t "rustdesk-builder" .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID="$(id -u)" -e PGID="$(id -g)" rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you're running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you run these commands from the root of the RustDesk repository, or the application may not find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common"&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/scrap"&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/enigo"&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard"&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/ui"&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/server"&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/client.rs"&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs"&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href="https://github.com/rustdesk/rustdesk-server"&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/platform"&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter"&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js"&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651" alt="Connection Manager"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea" alt="Connected to a Windows PC"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad" alt="File Transfer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5" alt="TCP Tunneling"&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>servo/servo</title>
      <link>https://github.com/servo/servo</link>
      <description>&lt;p&gt;Servo aims to empower developers with a lightweight, high-performance alternative for embedding web technologies in applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Servo Parallel Browser Engine Project&lt;/h1&gt; 
&lt;p&gt;Servo is a prototype web browser engine written in the &lt;a href="https://github.com/rust-lang/rust"&gt;Rust&lt;/a&gt; language. It is currently developed on 64-bit macOS, 64-bit Linux, 64-bit Windows, 64-bit OpenHarmony, and Android.&lt;/p&gt; 
&lt;p&gt;Servo welcomes contribution from everyone. Check out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://book.servo.org"&gt;Servo Book&lt;/a&gt; for documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://servo.org/"&gt;servo.org&lt;/a&gt; for news and guides&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Coordination of Servo development happens:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Here in the Github Issues&lt;/li&gt; 
 &lt;li&gt;On the &lt;a href="https://servo.zulipchat.com/"&gt;Servo Zulip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;In video calls advertised in the &lt;a href="https://github.com/servo/project/issues"&gt;Servo Project&lt;/a&gt; repo.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;For more detailed build instructions, see the Servo book under &lt;a href="https://book.servo.org/hacking/setting-up-your-environment.html"&gt;Setting up your environment&lt;/a&gt;, &lt;a href="https://book.servo.org/hacking/building-servo.html"&gt;Building Servo&lt;/a&gt;, &lt;a href="https://book.servo.org/hacking/building-for-android.html"&gt;Building for Android&lt;/a&gt; and &lt;a href="https://book.servo.org/hacking/building-for-openharmony.html"&gt;Building for OpenHarmony&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download and install &lt;a href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt; and &lt;a href="https://brew.sh/"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt;: &lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;rustup&lt;/code&gt;: &lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;./mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;curl&lt;/code&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Arch: &lt;code&gt;sudo pacman -S --needed curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Debian, Ubuntu: &lt;code&gt;sudo apt install curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Fedora: &lt;code&gt;sudo dnf install curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Gentoo: &lt;code&gt;sudo emerge net-misc/curl&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt;: &lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;rustup&lt;/code&gt;: &lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;./mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download &lt;a href="https://docs.astral.sh/uv/getting-started/installation/#standalone-installer"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://chocolatey.org/install#individual"&gt;&lt;code&gt;choco&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://win.rustup.rs/"&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Be sure to select &lt;em&gt;Quick install via the Visual Studio Community installer&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;In the Visual Studio Installer, ensure the following components are installed: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Windows 10/11 SDK (anything &amp;gt;= 10.0.19041.0)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.Windows{10, 11}SDK.{&amp;gt;=19041}&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.Tools.x86.x64&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;C++ ATL for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATL&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;C++ MFC for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATLMFC&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;.\mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;.\mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure that the following environment variables are set: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ANDROID_NDK_ROOT&lt;/code&gt;: &lt;code&gt;$ANDROID_SDK_ROOT/ndk/26.2.11394342/&lt;/code&gt; &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; can be any directory (such as &lt;code&gt;~/android-sdk&lt;/code&gt;). All of the Android build dependencies will be installed there.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install the latest version of the &lt;a href="https://developer.android.com/studio#command-tools"&gt;Android command-line tools&lt;/a&gt; to &lt;code&gt;$ANDROID_SDK_ROOT/cmdline-tools/latest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Run the following command to install the necessary components: &lt;pre&gt;&lt;code class="language-shell"&gt;sudo $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install \
 "build-tools;34.0.0" \
 "emulator" \
 "ndk;26.2.11394342" \
 "platform-tools" \
 "platforms;android-33" \
 "system-images;android-33;google_apis;x86_64"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Follow the instructions above for the platform you are building on&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;OpenHarmony&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow the instructions above for the platform you are building on to prepare the environment.&lt;/li&gt; 
 &lt;li&gt;Depending on the target distribution (e.g. &lt;code&gt;HarmonyOS NEXT&lt;/code&gt; vs pure &lt;code&gt;OpenHarmony&lt;/code&gt;) the build configuration will differ slightly.&lt;/li&gt; 
 &lt;li&gt;Ensure that the following environment variables are set 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DEVECO_SDK_HOME&lt;/code&gt; (Required when targeting &lt;code&gt;HarmonyOS NEXT&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;OHOS_BASE_SDK_HOME&lt;/code&gt; (Required when targeting &lt;code&gt;OpenHarmony&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;OHOS_SDK_NATIVE&lt;/code&gt; (e.g. &lt;code&gt;${DEVECO_SDK_HOME}/default/openharmony/native&lt;/code&gt; or &lt;code&gt;${OHOS_BASE_SDK_HOME}/${API_VERSION}/native&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;SERVO_OHOS_SIGNING_CONFIG&lt;/code&gt;: Path to json file containing a valid signing configuration for the demo app.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Review the detailed instructions at &lt;a href="https://book.servo.org/hacking/building-for-openharmony.html"&gt;Building for OpenHarmony&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The target distribution can be modified by passing &lt;code&gt;--flavor=&amp;lt;default|harmonyos&amp;gt;&lt;/code&gt; to `mach &amp;lt;build|package|install&amp;gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>hyperium/tonic</title>
      <link>https://github.com/hyperium/tonic</link>
      <description>&lt;p&gt;A native gRPC client &amp; server implementation with async/await support.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://github.com/hyperium/tonic/raw/master/.github/assets/tonic-banner.svg?sanitize=true" alt=""&gt;&lt;/p&gt; 
&lt;p&gt;A rust implementation of &lt;a href="https://grpc.io"&gt;gRPC&lt;/a&gt;, a high performance, open source, general RPC framework that puts mobile and HTTP/2 first.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt; is a gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility. This library was created to have first class support of async/await and to act as a core building block for production systems written in Rust.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/tonic"&gt;&lt;img src="https://img.shields.io/crates/v/tonic" alt="Crates.io"&gt;&lt;/a&gt; &lt;a href="https://docs.rs/tonic"&gt;&lt;img src="https://docs.rs/tonic/badge.svg?sanitize=true" alt="Documentation"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/tonic" alt="Crates.io"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/hyperium/tonic/tree/master/examples"&gt;Examples&lt;/a&gt; | &lt;a href="https://github.com/hyperium/tonic"&gt;Website&lt;/a&gt; | &lt;a href="https://docs.rs/tonic"&gt;Docs&lt;/a&gt; | &lt;a href="https://discord.gg/6yGkFeN"&gt;Chat&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt; is composed of three main components: the generic gRPC implementation, the high performance HTTP/2 implementation and the codegen powered by &lt;a href="https://github.com/tokio-rs/prost"&gt;&lt;code&gt;prost&lt;/code&gt;&lt;/a&gt;. The generic implementation can support any HTTP/2 implementation and any encoding via a set of generic traits. The HTTP/2 implementation is based on &lt;a href="https://github.com/hyperium/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;, a fast HTTP/1.1 and HTTP/2 client and server built on top of the robust &lt;a href="https://github.com/tokio-rs/tokio"&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt; stack. The codegen contains the tools to build clients and servers from &lt;a href="https://protobuf.dev/"&gt;&lt;code&gt;protobuf&lt;/code&gt;&lt;/a&gt; definitions.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bi-directional streaming&lt;/li&gt; 
 &lt;li&gt;High performance async io&lt;/li&gt; 
 &lt;li&gt;Interoperability&lt;/li&gt; 
 &lt;li&gt;TLS backed by &lt;a href="https://github.com/rustls/rustls"&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Load balancing&lt;/li&gt; 
 &lt;li&gt;Custom metadata&lt;/li&gt; 
 &lt;li&gt;Authentication&lt;/li&gt; 
 &lt;li&gt;Health Checking&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/hyperium/tonic/raw/master/examples/helloworld-tutorial.md"&gt;&lt;code&gt;helloworld&lt;/code&gt;&lt;/a&gt; tutorial provides a basic example of using &lt;code&gt;tonic&lt;/code&gt;, perfect for first time users!&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/hyperium/tonic/raw/master/examples/routeguide-tutorial.md"&gt;&lt;code&gt;routeguide&lt;/code&gt;&lt;/a&gt; tutorial provides a complete example of using &lt;code&gt;tonic&lt;/code&gt; and all its features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Examples can be found in &lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/examples"&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; and for more complex scenarios &lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/interop"&gt;&lt;code&gt;interop&lt;/code&gt;&lt;/a&gt; may be a good resource as it shows examples of many of the gRPC features.&lt;/p&gt; 
&lt;h3&gt;Rust Version&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;tonic&lt;/code&gt;'s MSRV is &lt;code&gt;1.75&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/tonic-build"&gt;&lt;code&gt;tonic-build&lt;/code&gt;&lt;/a&gt; uses &lt;code&gt;protoc&lt;/code&gt; &lt;a href="https://protobuf.dev/downloads/"&gt;Protocol Buffers compiler&lt;/a&gt; in some APIs which compile Protocol Buffers resource files such as &lt;a href="https://docs.rs/tonic-build/latest/tonic_build/fn.compile_protos.html"&gt;&lt;code&gt;tonic_build::compile_protos()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;First, see if the answer to your question can be found in the API documentation. If the answer is not there, there is an active community in the &lt;a href="https://discord.gg/6yGkFeN"&gt;Tonic Discord channel&lt;/a&gt;. We would be happy to try to answer your question. If that doesn't work, try opening an &lt;a href="https://github.com/hyperium/tonic/issues/new/choose"&gt;issue&lt;/a&gt; with the question.&lt;/p&gt; 
&lt;h2&gt;Project Layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;: Generic gRPC and HTTP/2 client/server implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/tonic-build"&gt;&lt;code&gt;tonic-build&lt;/code&gt;&lt;/a&gt;: &lt;a href="https://github.com/tokio-rs/prost"&gt;&lt;code&gt;prost&lt;/code&gt;&lt;/a&gt; based service codegen.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/tonic-types"&gt;&lt;code&gt;tonic-types&lt;/code&gt;&lt;/a&gt;: &lt;a href="https://github.com/tokio-rs/prost"&gt;&lt;code&gt;prost&lt;/code&gt;&lt;/a&gt; based grpc utility types including support for gRPC Well Known Types.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/tonic-health"&gt;&lt;code&gt;tonic-health&lt;/code&gt;&lt;/a&gt;: Implementation of the standard &lt;a href="https://grpc.io/docs/guides/health-checking/"&gt;gRPC health checking service&lt;/a&gt;. Also serves as an example of both unary and response streaming.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/tonic-reflection"&gt;&lt;code&gt;tonic-reflection&lt;/code&gt;&lt;/a&gt;: A tonic based gRPC reflection implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/examples"&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: Example gRPC implementations showing off tls, load balancing and bi-directional streaming.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/interop"&gt;&lt;code&gt;interop&lt;/code&gt;&lt;/a&gt;: Interop tests implementation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;🎈&lt;/span&gt; Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to help you get involved in the Tonic project.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/hyperium/tonic/master/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tonic by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>