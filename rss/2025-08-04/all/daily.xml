<rss version="2.0">
  <channel>
    <title>GitHub All Languages Daily Trending</title>
    <description>Daily Trending of All Languages in GitHub</description>
    <pubDate>Sun, 03 Aug 2025 01:30:07 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>tonsky/FiraCode</title>
      <link>https://github.com/tonsky/FiraCode</link>
      <description>&lt;p&gt;Free monospaced font with programming ligatures&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Fira Code: free monospaced font with programming ligatures&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/logo.svg?sanitize=true" alt="Fira Code"&gt;&lt;/p&gt; 
&lt;p&gt;Read in &lt;a href="https://raw.githubusercontent.com/tonsky/FiraCode/master/LEEME.md"&gt;Español&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/tonsky/FiraCode/master/README_CN.md"&gt;简体中文&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/tonsky/FiraCode/master/README_JA.md"&gt;日本語&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/tonsky/FiraCode/master/LEIAME.md"&gt;Português brasileiro&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Problem&lt;/h3&gt; 
&lt;p&gt;Programmers use a lot of symbols, often encoded with several characters. For the human brain, sequences like &lt;code&gt;-&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, or &lt;code&gt;:=&lt;/code&gt; are single logical tokens, even if they take two or three characters on the screen. Your eye spends a non-zero amount of energy to scan, parse and join multiple characters into a single logical one. Ideally, all programming languages should be designed with full-fledged Unicode symbols for operators, but that’s not the case yet.&lt;/p&gt; 
&lt;h3&gt;Solution&lt;/h3&gt; 
&lt;p&gt;Fira Code is a free monospaced font containing ligatures for common programming multi-character combinations. This is just a font rendering feature: underlying code remains ASCII-compatible. This helps to read and understand code faster. For some frequent sequences like &lt;code&gt;..&lt;/code&gt; or &lt;code&gt;//&lt;/code&gt;, ligatures allow us to correct spacing.&lt;/p&gt; 
&lt;h3&gt;Download &amp;amp; Install&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/tonsky/FiraCode/releases/download/6.2/Fira_Code_v6.2.zip"&gt;&lt;img alt="Fira_Code_v6.2.zip - December 6, 2021 - 2.5 MB" src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/download.png" width="520"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Then:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tonsky/FiraCode/wiki"&gt;How to Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tonsky/FiraCode/wiki#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/FiraCode"&gt;News &amp;amp; Updates&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;Fira Code is a personal, free-time project with no funding and a huge &lt;a href="https://github.com/tonsky/FiraCode/issues"&gt;feature request backlog&lt;/a&gt;. If you love it, consider supporting its development via &lt;a href="https://github.com/sponsors/tonsky"&gt;GitHub Sponsors&lt;/a&gt; or &lt;a href="https://patreon.com/tonsky"&gt;Patreon&lt;/a&gt;. Any help counts!&lt;/p&gt; 
&lt;h3&gt;What’s in the box?&lt;/h3&gt; 
&lt;p&gt;Left: ligatures as rendered in Fira Code. Right: same character sequences without ligatures.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/ligatures.png" width="754"&gt; 
&lt;p&gt;Fira Code comes with a huge variety of arrows. Even better: you can make them as long as you like and combine start/middle/end fragments however you want!&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/arrows.png" width="754"&gt; 
&lt;p&gt;Fira Code is not only about ligatures. Some fine-tuning is done for punctuation and frequent letter pairs.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/typographics.png" width="754"&gt; 
&lt;p&gt;Fira Code comes with a few different character variants (&lt;code&gt;cv01&lt;/code&gt;, &lt;code&gt;cv02&lt;/code&gt;, etc), stylistic sets (&lt;code&gt;ss01&lt;/code&gt;, &lt;code&gt;ss02&lt;/code&gt;, etc), and other font features (&lt;code&gt;zero&lt;/code&gt;, &lt;code&gt;onum&lt;/code&gt;, &lt;code&gt;calt&lt;/code&gt;, etc), so that everyone can choose what’s best for them. &lt;a href="https://github.com/tonsky/FiraCode/wiki/How-to-enable-stylistic-sets"&gt;How to enable&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/character_variants.png" width="754"&gt; 
&lt;p&gt;Some ligatures can be altered or enabled using stylistic sets/character variants:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/ligature_variants.png" width="754"&gt; 
&lt;p&gt;Being a programming font, Fira Code has fantastic support for ASCII/box drawing, powerline, and other forms of console UIs:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/console.png" width="754"&gt; 
&lt;p&gt;Fira Code is the first programming font to offer dedicated glyphs to render progress bars:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/progress.png" width="754"&gt; 
&lt;p&gt;In action:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/progress.gif" width="560"&gt; 
&lt;p&gt;We hope more programming fonts will adopt this convention and ship their own versions.&lt;/p&gt; 
&lt;p&gt;Unicode coverage makes Fira Code a great choice for mathematical writing:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/math.png" width="754"&gt; 
&lt;h3&gt;How does it look?&lt;/h3&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/samples.png" width="754"&gt; 
&lt;img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/extras/samples2.png" width="754"&gt; 
&lt;h3&gt;Editor compatibility list&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Works&lt;/th&gt; 
   &lt;th&gt;Doesn’t work&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Arduino IDE&lt;/strong&gt; (2.0+,same instructions as &lt;a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions"&gt;vscode&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Adobe Dreamweaver&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Abricotine&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Delphi IDE&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Android Studio&lt;/strong&gt; (2.3+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;Standalone &lt;strong&gt;Emacs&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/Emacs-instructions"&gt;workaround&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Anjuta&lt;/strong&gt; (unless at the EOF)&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;IDLE&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;AppCode&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;KDevelop 4&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Atom&lt;/strong&gt; 1.1 or newer (&lt;a href="https://github.com/tonsky/FiraCode/wiki/Atom-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Monkey Studio IDE&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;BBEdit&lt;/strong&gt; (14.6+ &lt;a href="https://github.com/tonsky/FiraCode/wiki/BBEdit-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;UltraEdit&lt;/strong&gt; (Windows)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Brackets&lt;/strong&gt; (with &lt;a href="https://github.com/polo2ro/firacode-in-brackets"&gt;this plugin&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Chocolat&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;CLion&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Cloud9&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/Cloud9-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Coda 2&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;CodeLite&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;CodeRunner&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Comma&lt;/strong&gt; (Under: Preferences &amp;gt; Editor &amp;gt; Font)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;CotEditor&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Eclipse&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;EditPad&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;elementary Code&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Geany&lt;/strong&gt; (1.37+)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;gEdit / Pluma&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;GNOME Builder&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Godot&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;GoormIDE&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/GoormIDE-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;gVim&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/issues/462"&gt;Windows&lt;/a&gt;, &lt;a href="https://vimhelp.org/options.txt.html#%27guiligatures%27"&gt;GTK&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;IntelliJ IDEA&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Kate, KWrite&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;KDevelop 5+&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Komodo&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Leafpad&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LibreOffice&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LightTable&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/LightTable-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;LINQPad&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;MacVim&lt;/strong&gt; 7.4 or newer (&lt;a href="https://github.com/tonsky/FiraCode/wiki/MacVim-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Mancy&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;MATLAB&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/MATLAB-for-Windows-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Meld&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Mousepad&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;NeoVim-gtk&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;NetBeans&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Notepad&lt;/strong&gt; (Windows)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Notepad++&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/issues/1555"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Notepad3&lt;/strong&gt; (&lt;a href="https://github.com/rizonesoft/Notepad3/issues/361#issuecomment-365977420"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Nova&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;PhpStorm&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;PyCharm&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;QOwnNotes&lt;/strong&gt; (21.16.6+)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;QtCreator&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Rider&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;RStudio&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/RStudio-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;RubyMine&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Scratch&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Scribus&lt;/strong&gt; (1.5.3+)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;SublimeText&lt;/strong&gt; (3146+)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Spyder IDE&lt;/strong&gt; (only with Qt5)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;SuperCollider 3&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;TeXShop&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;TextAdept&lt;/strong&gt; (Linux, macOS)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;TextEdit&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;TextMate 2&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;UltraEdit (UEX)&lt;/strong&gt; (Linux)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;VimR&lt;/strong&gt; (&lt;a href="https://github.com/qvacua/vimr/wiki#ligatures"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt; (2015+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/Visual-Studio-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; (&lt;a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;WebStorm&lt;/strong&gt; (2016.2+, &lt;a href="https://github.com/tonsky/FiraCode/wiki/IntelliJ-products-instructions"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Xamarin Studio/Monodevelop&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Xcode&lt;/strong&gt; (8.0+, otherwise &lt;a href="https://github.com/robertvojta/LigatureXcodePlugin"&gt;with plugin&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Xi&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Probably work: &lt;strong&gt;Smultron, Vico&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Under question: &lt;strong&gt;Code::Blocks IDE&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Zed&lt;/strong&gt; (&lt;a href="https://zed.dev/docs/configuring-zed#buffer-font-family"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Terminal compatibility list&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Works&lt;/th&gt; 
   &lt;th&gt;Doesn’t work&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;crosh (&lt;a href="https://github.com/tonsky/FiraCode/wiki/ChromeOS-Terminal"&gt;instructions&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;Alacritty&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ghostty&lt;/td&gt; 
   &lt;td&gt;Asbru Connection Manager&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hyper (see &lt;a href="https://github.com/vercel/hyper/issues/3607"&gt;#3607&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;Cmder&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iTerm 2&lt;/td&gt; 
   &lt;td&gt;ConEmu&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Kitty&lt;/td&gt; 
   &lt;td&gt;GNOME Terminal (&lt;a href="https://gitlab.gnome.org/GNOME/vte/-/issues/192"&gt;ticket&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Konsole&lt;/td&gt; 
   &lt;td&gt;gtkterm (&lt;a href="https://gitlab.gnome.org/GNOME/vte/-/issues/1661"&gt;ticket&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mintty&lt;/td&gt; 
   &lt;td&gt;guake (&lt;a href="https://gitlab.gnome.org/GNOME/vte/-/issues/1661"&gt;ticket&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;QTerminal&lt;/td&gt; 
   &lt;td&gt;LXTerminal (&lt;a href="https://gitlab.gnome.org/GNOME/vte/-/issues/1661"&gt;ticket&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;st (&lt;a href="https://st.suckless.org/patches/ligatures/"&gt;patch&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;mate-terminal&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Tabby&lt;/td&gt; 
   &lt;td&gt;PuTTY&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Terminal.app&lt;/td&gt; 
   &lt;td&gt;rxvt&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Termux&lt;/td&gt; 
   &lt;td&gt;sakura (&lt;a href="https://gitlab.gnome.org/GNOME/vte/-/issues/1661"&gt;ticket&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Token2Shell&lt;/td&gt; 
   &lt;td&gt;SecureCRT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Wez’s terminal&lt;/td&gt; 
   &lt;td&gt;Terminator (&lt;a href="https://gitlab.gnome.org/GNOME/vte/-/issues/1661"&gt;ticket&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows Terminal&lt;/td&gt; 
   &lt;td&gt;terminology&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ZOC (macOS)&lt;/td&gt; 
   &lt;td&gt;Tilix&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;Windows Console&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;xfce4-terminal (&lt;a href="https://gitlab.gnome.org/GNOME/vte/-/issues/1661"&gt;ticket&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;xterm&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;ZOC (Windows)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Browser support&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!-- HTML --&amp;gt;
&amp;lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/firacode@6.2.0/distr/fira_code.css"&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-css"&gt;/* CSS */
@import url(https://cdn.jsdelivr.net/npm/firacode@6.2.0/distr/fira_code.css);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-css"&gt;/* Specify in CSS */
code { font-family: 'Fira Code', monospace; }

@supports (font-variation-settings: normal) {
  code { font-family: 'Fira Code VF', monospace; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;IE 10+, Edge Legacy: enable with &lt;code&gt;font-feature-settings: "calt";&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Firefox&lt;/li&gt; 
 &lt;li&gt;Safari&lt;/li&gt; 
 &lt;li&gt;Chromium-based browsers (Chrome, Opera)&lt;/li&gt; 
 &lt;li&gt;ACE&lt;/li&gt; 
 &lt;li&gt;CodeMirror (enable with &lt;code&gt;font-variant-ligatures: contextual;&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Projects using Fira Code&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.blink.sh/"&gt;Blink Shell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://app.klipse.tech/"&gt;Klipse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://ilyabirman.net/"&gt;IlyaBirman.net&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://evilmartians.com/"&gt;EvilMartians.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://webmakerapp.com/"&gt;Web Maker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fromscratch.rocks/"&gt;FromScratch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pep20.org/"&gt;PEP20.org&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Alternatives&lt;/h3&gt; 
&lt;p&gt;Free monospaced fonts with ligatures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/i-tu/Hasklig"&gt;Hasklig&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://larsenwork.com/monoid/"&gt;Monoid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kika/fixedsys"&gt;Fixedsys Excelsior&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://be5invis.github.io/Iosevka/"&gt;Iosevka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SSNikolaevich/DejaVuSansCode"&gt;DejaVu Sans Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://rubjo.github.io/victor-mono/"&gt;Victor Mono&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/cascadia-code"&gt;Cascadia Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JetBrains/JetBrainsMono"&gt;JetBrains Mono&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Paid monospaced fonts with ligatures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://www.fsd.it/fonts/pragmatapro.htm"&gt;PragmataPro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.monolisa.dev/"&gt;Mono Lisa&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building Fira Code locally&lt;/h3&gt; 
&lt;p&gt;In case you want to alter FiraCode.glyphs and build OTF/TTF/WOFF files yourself, this is the setup I use on macOS:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# install all required build tools
./script/bootstrap_macos.sh

# build the font files
./script/build.sh

# install OTFs to ~/Library/Fonts
cp distr/otf/*.otf ~/Library/Fonts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can build Fira Code using Docker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# install dependencies in a container and build the font files
make

# package the font files from dist/ into a zip
make package
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to &lt;em&gt;permanently enable&lt;/em&gt; certain style sets or character variations, maybe because your editor of choice does not allow you to toggle these individually, you can provide the desired features as a comma separated list to the build script via the &lt;code&gt;-f / --features&lt;/code&gt; flag.&lt;br&gt;Default: none.&lt;/p&gt; 
&lt;p&gt;To separate different versions of your font you can specify the desired font family name with the &lt;code&gt;-n / --family-name&lt;/code&gt; flag. The special value 'features' will append a sorted, space separated list of enabled features to the default family name.&lt;br&gt;Default: "Fira Code"&lt;/p&gt; 
&lt;p&gt;You can also limit the font weights that will be created with the &lt;code&gt;-w / --weights&lt;/code&gt; option.&lt;br&gt;Default: "Light,Regular,Retina,Medium,SemiBold,Bold"&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# locally in your shell
./script/build.sh --features "ss02,ss08,ss10,cv03,cv07,cv14" --family-name "Fira Code straight" --weights "Regular,Bold"

# or via a docker container (creates the family name 'Fira Code cv01 cv02 cv06 cv31 onum ss01 ss03 ss04 zero')
docker run --rm -v "${PWD}":/opt tonsky/firacode:latest ./script/build.sh -f "cv01,cv02,cv06,ss01,zero,onum,ss03,ss04,cv31" -n "features"

# in Git Bash from Git for Windows, or any other MSYS2 based shell, you might need to disable path conversion
MSYS2_ARG_CONV_EXCL="*" docker run --rm -v "${PWD}":/opt tonsky/firacode:latest ./script/build.sh -f "ss02,ss03,ss04,ss05,ss06,ss07"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Credits&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Author: Nikita Prokopov &lt;a href="https://twitter.com/nikitonsky"&gt;@nikitonsky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Based on: &lt;a href="https://github.com/mozilla/Fira"&gt;Fira Mono&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Inspired by: &lt;a href="https://github.com/i-tu/Hasklig"&gt;Hasklig&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>OpenBAS-Platform/openbas</title>
      <link>https://github.com/OpenBAS-Platform/openbas</link>
      <description>&lt;p&gt;Open Adversary Exposure Validation Platform&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://openbas.io"&gt;&lt;img src="https://raw.githubusercontent.com/OpenBAS-Platform/openbas/master/.github/img/logo_openbas.png" alt="OpenBAS"&gt;&lt;/a&gt; &lt;/h1&gt; 
&lt;p align="center"&gt; &lt;a href="https://openbas.io" alt="Website"&gt;&lt;img src="https://img.shields.io/badge/website-openbas.io-blue.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://docs.openbas.io" alt="Documentation"&gt;&lt;img src="https://img.shields.io/badge/documentation-latest-orange.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://community.filigran.io" alt="Slack"&gt;&lt;img src="https://img.shields.io/badge/slack-3K%2B%20members-4A154B"&gt;&lt;/a&gt; &lt;a href="https://drone.filigran.io/OpenBAS-Platform/openbas"&gt;&lt;img src="https://drone.filigran.io/api/badges/OpenBAS-Platform/openbas/status.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/OpenBAS-Platform/openbas"&gt;&lt;img src="https://codecov.io/gh/OpenBAS-Platform/openbas/graph/badge.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://deepscan.io/dashboard#view=project&amp;amp;tid=11710&amp;amp;pid=14631&amp;amp;bid=276803"&gt;&lt;img src="https://deepscan.io/api/teams/11710/projects/14631/branches/276803/badge/grade.svg?sanitize=true" alt="DeepScan grade"&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/u/openbas" alt="Docker pulls"&gt;&lt;img src="https://img.shields.io/docker/pulls/openbas/platform"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;OpenBAS is an open source platform allowing organizations to plan, schedule and conduct cyber adversary simulation campaign and tests.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/OpenBAS-Platform/openbas/master/.github/img/screenshot.png" alt="Screenshot" title="Screenshot"&gt;&lt;/p&gt; 
&lt;h2&gt;Objective&lt;/h2&gt; 
&lt;p&gt;The goal is to create a powerful, reliable and open source tool to effectively plan and play all types of simulations, training and exercises from the technical level to the strategic one. Also, the platform is able to give you a proper overview of any security gaps regarding actual threats with knowledge coming from the &lt;a href="https://opencti.io"&gt;OpenCTI platform&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;OpenBAS aims to respond to these issues, which not only concern state services but also many private organizations. With different modules (scenarios, teams, simulations, verification of means of communication, encryption, etc.), the platform offers advantages such as collaborative work, real-time monitoring, statistics or the management of feedback.&lt;/p&gt; 
&lt;p&gt;Finally, OpenBAS supports different types of inject, allowing the tool to be integrated with emails, SMS platforms, social medias, alarm systems, etc. All currently supported integration can be found in the &lt;a href="https://docs.openbas.io/latest/development/injectors/"&gt;OpenBAS ecosystem&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Editions of the platform&lt;/h2&gt; 
&lt;p&gt;OpenBAS platform has 2 different editions: Community (CE) and Enterprise (EE). The purpose of the Enterprise Edition is to provide &lt;a href="https://filigran.io/offering/subscribe"&gt;additional and powerful features&lt;/a&gt; which require specific investments in research and development. You can enable the Enterprise Edition directly in the settings of the platform.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OpenBAS Community Edition, licensed under the &lt;a href="https://raw.githubusercontent.com/OpenBAS-Platform/openbas/master/LICENSE"&gt;Apache 2, Version 2.0 license&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;OpenBAS Enterprise Edition, licensed under the &lt;a href="https://raw.githubusercontent.com/OpenBAS-Platform/openbas/master/LICENSE"&gt;Enterprise Edition license&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To understand what OpenBAS Enterprise Edition brings in terms of features, just check the &lt;a href="https://filigran.io/offering/subscribe"&gt;Enterprise Editions page&lt;/a&gt; on the Filigran website. You can also try this edition by enabling it in the settings of the platform.&lt;/p&gt; 
&lt;h2&gt;Documentation and demonstration&lt;/h2&gt; 
&lt;p&gt;If you want to know more on OpenBAS, you can read the &lt;a href="https://docs.openbas.io"&gt;documentation on the tool&lt;/a&gt;. If you wish to discover how the OpenBAS platform is working, a &lt;a href="https://demo.openbas.io"&gt;demonstration instance&lt;/a&gt; is available and open to everyone. This instance is reset every night and is based on reference data maintained by the OpenBAS developers.&lt;/p&gt; 
&lt;h2&gt;Releases download&lt;/h2&gt; 
&lt;p&gt;The releases are available on the &lt;a href="https://github.com/OpenBAS-Platform/openbas/releases"&gt;Github releases page&lt;/a&gt;. You can also access the &lt;a href="https://releases.openbas.io"&gt;rolling release package&lt;/a&gt; generated from the mater branch of the repository.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;All you need to install the OpenBAS platform can be found in the &lt;a href="https://docs.openbas.io/latest/deployment/installation/"&gt;official documentation&lt;/a&gt;. For installation, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.openbas.io/latest/deployment/installation/#using-docker"&gt;Use Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.openbas.io/latest/deployment/installation/#manual-installation"&gt;Install manually&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;h3&gt;Code of Conduct&lt;/h3&gt; 
&lt;p&gt;OpenBAS has adopted a &lt;a href="https://raw.githubusercontent.com/OpenBAS-Platform/openbas/master/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; that we expect project participants to adhere to. Please read the &lt;a href="https://raw.githubusercontent.com/OpenBAS-Platform/openbas/master/CODE_OF_CONDUCT.md"&gt;full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; 
&lt;h3&gt;Contributing Guide&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href="https://raw.githubusercontent.com/OpenBAS-Platform/openbas/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to OpenBAS.&lt;/p&gt; 
&lt;h3&gt;Beginner friendly issues&lt;/h3&gt; 
&lt;p&gt;To help you get you familiar with our contribution process, we have a list of &lt;a href="https://github.com/OpenBAS-Platform/openbas/labels/good%20first%20issue"&gt;beginner friendly issues&lt;/a&gt; which are fairly easy to implement. This is a great place to get started.&lt;/p&gt; 
&lt;h3&gt;Development&lt;/h3&gt; 
&lt;p&gt;If you want to actively help OpenBAS, we created a &lt;a href="https://docs.openbas.io/latest/development/environment_ubuntu/"&gt;dedicated documentation&lt;/a&gt; about the deployment of a development environment and how to start the source code modification.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;h3&gt;Status &amp;amp; bugs&lt;/h3&gt; 
&lt;p&gt;Currently OpenBAS is under heavy development, if you wish to report bugs or ask for new features, you can directly use the &lt;a href="https://github.com/OpenBAS-Platform/openbas/issues"&gt;Github issues module&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Discussion&lt;/h3&gt; 
&lt;p&gt;If you need support or you wish to engage a discussion about the OpenBAS platform, feel free to join us on our &lt;a href="https://community.filigran.io"&gt;Slack channel&lt;/a&gt;. You can also send us an email to &lt;a href="mailto:contact@filigran.io"&gt;contact@filigran.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;h3&gt;Authors&lt;/h3&gt; 
&lt;p&gt;OpenBAS is a product designed and developed by the company &lt;a href="https://filigran.io"&gt;Filigran&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://filigran.io" alt="Filigran"&gt;&lt;img src="https://raw.githubusercontent.com/OpenBAS-Platform/openbas/master/.github/img/logo_filigran.png" width="300"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Data Collection&lt;/h3&gt; 
&lt;h4&gt;Usage telemetry&lt;/h4&gt; 
&lt;p&gt;To improve the features and the performances of OpenBAS, the platform collects anonymous statistical data related to its usage and health.&lt;/p&gt; 
&lt;p&gt;You can find all the details on collected data and associated usage in the &lt;a href="https://docs.openbas.io/latest/reference/deployment/telemetry/"&gt;usage telemetry documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trimstray/the-book-of-secret-knowledge</title>
      <link>https://github.com/trimstray/the-book-of-secret-knowledge</link>
      <description>&lt;p&gt;A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools and more.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt; &lt;img src="https://github.com/trimstray/the-book-of-secret-knowledge/raw/master/static/img/the-book-of-secret-knowledge-preview.png" alt="Master"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;"&lt;i&gt;Knowledge is powerful, be careful how you use it!&lt;/i&gt;"&lt;/p&gt; 
&lt;h4 align="center"&gt;A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools, and more.&lt;/h4&gt; 
&lt;br&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge/pulls"&gt; &lt;img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?longCache=true" alt="Pull Requests"&gt; &lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/LICENSE.md"&gt; &lt;img src="https://img.shields.io/badge/License-MIT-lightgrey.svg?longCache=true" alt="MIT License"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;hr&gt; 
&lt;h2&gt;&lt;span&gt;📔&lt;/span&gt; &amp;nbsp;What is it?&lt;/h2&gt; 
&lt;p&gt;This repository is a collection of various materials and tools that I use every day in my work. It contains a lot of useful information gathered in one piece. It is an invaluable source of knowledge for me that I often look back on.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🚻&lt;/span&gt; &amp;nbsp;For whom?&lt;/h2&gt; 
&lt;p&gt;For everyone, really. Here everyone can find their favourite tastes. But to be perfectly honest, it is aimed towards System and Network administrators, DevOps, Pentesters, and Security Researchers.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;ℹ&lt;/span&gt; &amp;nbsp;Contributing&lt;/h2&gt; 
&lt;p&gt;If you find something which doesn't make sense, or something doesn't seem right, please make a pull request and please add valid and well-reasoned explanations about your changes or comments.&lt;/p&gt; 
&lt;p&gt;A few simple rules for this project:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;inviting and clear&lt;/li&gt; 
 &lt;li&gt;not tiring&lt;/li&gt; 
 &lt;li&gt;useful&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These below rules may be better:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;easy to contribute to (Markdown + HTML ...)&lt;/li&gt; 
 &lt;li&gt;easy to find (simple TOC, maybe it's worth extending them?)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Url marked &lt;strong&gt;*&lt;/strong&gt; is temporary unavailable. Please don't delete it without confirming that it has permanently expired.&lt;/p&gt; 
&lt;p&gt;Before adding a pull request, please see the &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/.github/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;&lt;/strong&gt;. You should also remember about this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;+ This repository is not meant to contain everything but only good quality stuff.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All &lt;strong&gt;suggestions/PR&lt;/strong&gt; are welcome!&lt;/p&gt; 
&lt;h3&gt;Code Contributors&lt;/h3&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge/graphs/contributors"&gt;&lt;img src="https://opencollective.com/the-book-of-secret-knowledge/contributors.svg?width=890&amp;amp;button=false"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Financial Contributors&lt;/h3&gt; 
&lt;p align="left"&gt; &lt;a href="https://opencollective.com/the-book-of-secret-knowledge" alt="Financial Contributors on Open Collective"&gt; &lt;img src="https://img.shields.io/opencollective/backers/the-book-of-secret-knowledge?style=for-the-badge&amp;amp;color=FF4500&amp;amp;labelColor=A9A9A9"&gt;&lt;/a&gt;  &lt;a href="https://opencollective.com/the-book-of-secret-knowledge" alt="Financial Contributors on Open Collective"&gt; &lt;img src="https://img.shields.io/opencollective/sponsors/the-book-of-secret-knowledge?style=for-the-badge&amp;amp;color=FF4500&amp;amp;labelColor=A9A9A9"&gt;&lt;/a&gt;  &lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;📰&lt;/span&gt; &amp;nbsp;RSS Feed &amp;amp; Updates&lt;/h2&gt; 
&lt;p&gt;GitHub exposes an &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge/commits.atom"&gt;RSS/Atom&lt;/a&gt; feed of the commits, which may also be useful if you want to be kept informed about all changes.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;☑&lt;/span&gt; &amp;nbsp;ToDo&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Add new stuff...&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Add useful shell functions&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Add one-liners for collection tools (eg. CLI Tools)&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled&gt; Sort order in lists&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;New items are also added on a regular basis.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;💢&lt;/span&gt; &amp;nbsp;Table of Contents&lt;/h2&gt; 
&lt;p&gt;Only main chapters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#cli-tools-toc"&gt;CLI Tools&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#gui-tools-toc"&gt;GUI Tools&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#web-tools-toc"&gt;Web Tools&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#systemsservices-toc"&gt;Systems/Services&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#networks-toc"&gt;Networks&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#containersorchestration-toc"&gt;Containers/Orchestration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#manualshowtostutorials-toc"&gt;Manuals/Howtos/Tutorials&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#inspiring-lists-toc"&gt;Inspiring Lists&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#blogspodcastsvideos-toc"&gt;Blogs/Podcasts/Videos&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#hackingpenetration-testing-toc"&gt;Hacking/Penetration Testing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#your-daily-knowledge-and-news-toc"&gt;Your daily knowledge and news&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#other-cheat-sheets-toc"&gt;Other Cheat Sheets&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#shell-one-liners-toc"&gt;Shell One-liners&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#shell-tricks-toc"&gt;Shell Tricks&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#shell-functions-toc"&gt;Shell Functions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;🔱&lt;/span&gt; &amp;nbsp;The Book of Secret Knowledge (Chapters)&lt;/h2&gt; 
&lt;h4&gt;CLI Tools &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Shells&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.gnu.org/software/bash/"&gt;&lt;b&gt;GNU Bash&lt;/b&gt;&lt;/a&gt; - is an sh-compatible shell that incorporates useful features from the Korn shell and C shell.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.zsh.org/"&gt;&lt;b&gt;Zsh&lt;/b&gt;&lt;/a&gt; - is a shell designed for interactive use, although it is also a powerful scripting language.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tcl-lang.org/"&gt;&lt;b&gt;tclsh&lt;/b&gt;&lt;/a&gt; - is a very powerful cross-platform shell, suitable for a huge range of uses.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Bash-it/bash-it"&gt;&lt;b&gt;bash-it&lt;/b&gt;&lt;/a&gt; - is a framework for using, developing and maintaining shell scripts and custom commands.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ohmyz.sh/"&gt;&lt;b&gt;Oh My ZSH!&lt;/b&gt;&lt;/a&gt; - is the best framework for managing your Zsh configuration.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/oh-my-fish/oh-my-fish"&gt;&lt;b&gt;Oh My Fish&lt;/b&gt;&lt;/a&gt; - the Fishshell framework.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/starship/starship"&gt;&lt;b&gt;Starship&lt;/b&gt;&lt;/a&gt; - the cross-shell prompt written in Rust.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;&lt;b&gt;powerlevel10k&lt;/b&gt;&lt;/a&gt; - is a fast reimplementation of Powerlevel9k ZSH theme.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Shell plugins&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rupa/z"&gt;&lt;b&gt;z&lt;/b&gt;&lt;/a&gt; - tracks the folder you use the most and allow you to jump, without having to type the whole path.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/junegunn/fzf"&gt;&lt;b&gt;fzf&lt;/b&gt;&lt;/a&gt; - is a general-purpose command-line fuzzy finder.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/zsh-users/zsh-autosuggestions"&gt;&lt;b&gt;zsh-autosuggestions&lt;/b&gt;&lt;/a&gt; - Fish-like autosuggestions for Zsh.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting"&gt;&lt;b&gt;zsh-syntax-highlighting&lt;/b&gt;&lt;/a&gt; - Fish shell like syntax highlighting for Zsh.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;&lt;b&gt;Awesome ZSH Plugins&lt;/b&gt;&lt;/a&gt; - A list of frameworks, plugins, themes and tutorials for ZSH.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Managers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://midnight-commander.org/"&gt;&lt;b&gt;Midnight Commander&lt;/b&gt;&lt;/a&gt; - is a visual file manager, licensed under GNU General Public License.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ranger/ranger"&gt;&lt;b&gt;ranger&lt;/b&gt;&lt;/a&gt; - is a VIM-inspired filemanager for the console.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jarun/nnn"&gt;&lt;b&gt;nnn&lt;/b&gt;&lt;/a&gt; - is a tiny, lightning fast, feature-packed file manager.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.gnu.org/software/screen/"&gt;&lt;b&gt;screen&lt;/b&gt;&lt;/a&gt; - is a full-screen window manager that multiplexes a physical terminal.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/tmux/tmux/wiki"&gt;&lt;b&gt;tmux&lt;/b&gt;&lt;/a&gt; - is a terminal multiplexer, lets you switch easily between several programs in one terminal.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/peikk0/tmux-cssh"&gt;&lt;b&gt;tmux-cssh&lt;/b&gt;&lt;/a&gt; - is a tool to set comfortable and easy to use functionality tmux-sessions.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Text editors&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://ex-vi.sourceforge.net/"&gt;&lt;b&gt;vi&lt;/b&gt;&lt;/a&gt; - is one of the most common text editors on Unix.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.vim.org/"&gt;&lt;b&gt;vim&lt;/b&gt;&lt;/a&gt; - is a highly configurable text editor.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.gnu.org/software/emacs/"&gt;&lt;b&gt;emacs&lt;/b&gt;&lt;/a&gt; - is an extensible, customizable, free/libre text editor, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/zyedidia/micro"&gt;&lt;b&gt;micro&lt;/b&gt;&lt;/a&gt; - is a modern and intuitive terminal-based text editor.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://neovim.io/"&gt;&lt;b&gt;neovim&lt;/b&gt;&lt;/a&gt; - is a free open source, powerful, extensible and usable code editor.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.spacemacs.org/"&gt;&lt;b&gt;spacemacs&lt;/b&gt;&lt;/a&gt; - a community-driven Emacs distribution.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://spacevim.org/"&gt;&lt;b&gt;spacevim&lt;/b&gt;&lt;/a&gt; - a community-driven vim distribution.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Files and directories&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/sharkdp/fd"&gt;&lt;b&gt;fd&lt;/b&gt;&lt;/a&gt; - is a simple, fast and user-friendly alternative to find.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dev.yorhel.nl/ncdu"&gt;&lt;b&gt;ncdu&lt;/b&gt;&lt;/a&gt; - is an easy to use, fast disk usage analyzer.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Network&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.putty.org/"&gt;&lt;b&gt;PuTTY&lt;/b&gt;&lt;/a&gt; - is an SSH and telnet client, developed originally by Simon Tatham.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://mosh.org/"&gt;&lt;b&gt;Mosh&lt;/b&gt;&lt;/a&gt; - is a SSH wrapper designed to keep a SSH session alive over a volatile connection.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://eternalterminal.dev/"&gt;&lt;b&gt;Eternal Terminal&lt;/b&gt;&lt;/a&gt; - enables mouse-scrolling and tmux commands inside the SSH session.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nmap.org/"&gt;&lt;b&gt;nmap&lt;/b&gt;&lt;/a&gt; - is a free and open source (license) utility for network discovery and security auditing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/zmap/zmap"&gt;&lt;b&gt;zmap&lt;/b&gt;&lt;/a&gt; - is a fast single packet network scanner designed for Internet-wide network surveys.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/RustScan/RustScan"&gt;&lt;b&gt;Rust Scan&lt;/b&gt;&lt;/a&gt; - to find all open ports faster than Nmap.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/robertdavidgraham/masscan"&gt;&lt;b&gt;masscan&lt;/b&gt;&lt;/a&gt; - is the fastest Internet port scanner, spews SYN packets asynchronously.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/gvb84/pbscan"&gt;&lt;b&gt;pbscan&lt;/b&gt;&lt;/a&gt; - is a faster and more efficient stateless SYN scanner and banner grabber.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.hping.org/"&gt;&lt;b&gt;hping&lt;/b&gt;&lt;/a&gt; - is a command-line oriented TCP/IP packet assembler/analyzer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/traviscross/mtr"&gt;&lt;b&gt;mtr&lt;/b&gt;&lt;/a&gt; - is a tool that combines the functionality of the 'traceroute' and 'ping' programs in a single tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mehrdadrad/mylg"&gt;&lt;b&gt;mylg&lt;/b&gt;&lt;/a&gt; - utility which combines the functions of the different network probes in one diagnostic tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://netcat.sourceforge.net/"&gt;&lt;b&gt;netcat&lt;/b&gt;&lt;/a&gt; - utility which reads and writes data across network connections, using the TCP/IP protocol.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.dest-unreach.org/socat/"&gt;&lt;b&gt;socat&lt;/b&gt;&lt;/a&gt; - utility which transfers data between two objects.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.tcpdump.org/"&gt;&lt;b&gt;tcpdump&lt;/b&gt;&lt;/a&gt; - is a powerful command-line packet analyzer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.wireshark.org/docs/man-pages/tshark.html"&gt;&lt;b&gt;tshark&lt;/b&gt;&lt;/a&gt; - is a tool that allows us to dump and analyze network traffic (wireshark cli).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://termshark.io/"&gt;&lt;b&gt;Termshark&lt;/b&gt;&lt;/a&gt; - is a simple terminal user-interface for tshark.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jpr5/ngrep"&gt;&lt;b&gt;ngrep&lt;/b&gt;&lt;/a&gt; - is like GNU grep applied to the network layer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://netsniff-ng.org/"&gt;&lt;b&gt;netsniff-ng&lt;/b&gt;&lt;/a&gt; - is a Swiss army knife for your daily Linux network plumbing if you will.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mechpen/sockdump"&gt;&lt;b&gt;sockdump&lt;/b&gt;&lt;/a&gt; - dump unix domain socket traffic.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/google/stenographer"&gt;&lt;b&gt;stenographer&lt;/b&gt;&lt;/a&gt; - is a packet capture solution which aims to quickly spool all packets to disk.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/sachaos/tcpterm"&gt;&lt;b&gt;tcpterm&lt;/b&gt;&lt;/a&gt; - visualize packets in TUI.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/tgraf/bmon"&gt;&lt;b&gt;bmon&lt;/b&gt;&lt;/a&gt; - is a monitoring and debugging tool to capture networking related statistics and prepare them visually.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://iptraf.seul.org/2.6/manual.html#installation"&gt;&lt;b&gt;iptraf-ng&lt;/b&gt;&lt;/a&gt; - is a console-based network monitoring program for Linux that displays information about IP traffic.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/vergoh/vnstat"&gt;&lt;b&gt;vnstat&lt;/b&gt;&lt;/a&gt; - is a network traffic monitor for Linux and BSD.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://iperf.fr/"&gt;&lt;b&gt;iPerf3&lt;/b&gt;&lt;/a&gt; - is a tool for active measurements of the maximum achievable bandwidth on IP networks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Microsoft/Ethr"&gt;&lt;b&gt;ethr&lt;/b&gt;&lt;/a&gt; - is a Network Performance Measurement Tool for TCP, UDP &amp;amp; HTTP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jwbensley/Etherate"&gt;&lt;b&gt;Etherate&lt;/b&gt;&lt;/a&gt; - is a Linux CLI based Ethernet and MPLS traffic testing tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mpolden/echoip"&gt;&lt;b&gt;echoip&lt;/b&gt;&lt;/a&gt; - is a IP address lookup service.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/troglobit/nemesis"&gt;&lt;b&gt;Nemesis&lt;/b&gt;&lt;/a&gt; - packet manipulation CLI tool; craft and inject packets of several protocols.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/packetfu/packetfu"&gt;&lt;b&gt;packetfu&lt;/b&gt;&lt;/a&gt; - a mid-level packet manipulation library for Ruby.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://scapy.net/"&gt;&lt;b&gt;Scapy&lt;/b&gt;&lt;/a&gt; - packet manipulation library; forge, send, decode, capture packets of a wide number of protocols.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/SecureAuthCorp/impacket"&gt;&lt;b&gt;impacket&lt;/b&gt;&lt;/a&gt; - is a collection of Python classes for working with network protocols.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/arthepsy/ssh-audit"&gt;&lt;b&gt;ssh-audit&lt;/b&gt;&lt;/a&gt; - is a tool for SSH server auditing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://aria2.github.io/"&gt;&lt;b&gt;aria2&lt;/b&gt;&lt;/a&gt; - is a lightweight multi-protocol &amp;amp; multi-source command-line download utility.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/x-way/iptables-tracer"&gt;&lt;b&gt;iptables-tracer&lt;/b&gt;&lt;/a&gt; - observe the path of packets through the iptables chains.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/proabiral/inception"&gt;&lt;b&gt;inception&lt;/b&gt;&lt;/a&gt; - a highly configurable tool to check for whatever you like against any number of hosts.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://mremoteng.org/"&gt;&lt;b&gt;mRemoteNG&lt;/b&gt;&lt;/a&gt; - a fork of mRemote, multi-tabbed PuTTy on steroids!&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Network (DNS)&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/farrokhi/dnsdiag"&gt;&lt;b&gt;dnsdiag&lt;/b&gt;&lt;/a&gt; - is a DNS diagnostics and performance measurement tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mschwager/fierce"&gt;&lt;b&gt;fierce&lt;/b&gt;&lt;/a&gt; - is a DNS reconnaissance tool for locating non-contiguous IP space.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/subfinder/subfinder"&gt;&lt;b&gt;subfinder&lt;/b&gt;&lt;/a&gt; - is a subdomain discovery tool that discovers valid subdomains for websites.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/aboul3la/Sublist3r"&gt;&lt;b&gt;sublist3r&lt;/b&gt;&lt;/a&gt; - is a fast subdomains enumeration tool for penetration testers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/OWASP/Amass"&gt;&lt;b&gt;amass&lt;/b&gt;&lt;/a&gt; - is tool that obtains subdomain names by scraping data sources, crawling web archives, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/google/namebench"&gt;&lt;b&gt;namebench&lt;/b&gt;&lt;/a&gt; - provides personalized DNS server recommendations based on your browsing history.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/blechschmidt/massdns"&gt;&lt;b&gt;massdns&lt;/b&gt;&lt;/a&gt; - is a high-performance DNS stub resolver for bulk lookups and reconnaissance.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/guelfoweb/knock"&gt;&lt;b&gt;knock&lt;/b&gt;&lt;/a&gt; - is a tool to enumerate subdomains on a target domain through a wordlist.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/DNS-OARC/dnsperf"&gt;&lt;b&gt;dnsperf&lt;/b&gt;&lt;/a&gt; - DNS performance testing tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jedisct1/dnscrypt-proxy"&gt;&lt;b&gt;dnscrypt-proxy 2&lt;/b&gt;&lt;/a&gt; - a flexible DNS proxy, with support for encrypted DNS protocols.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dnsdb/dnsdbq"&gt;&lt;b&gt;dnsdbq&lt;/b&gt;&lt;/a&gt; - API client providing access to passive DNS database systems.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/looterz/grimd"&gt;&lt;b&gt;grimd&lt;/b&gt;&lt;/a&gt; - fast dns proxy, built to black-hole internet advertisements and malware servers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/elceef/dnstwist"&gt;&lt;b&gt;dnstwist&lt;/b&gt;&lt;/a&gt; - detect typosquatters, phishing attacks, fraud, and brand impersonation.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Network (HTTP)&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://curl.haxx.se/"&gt;&lt;b&gt;curl&lt;/b&gt;&lt;/a&gt; - is a command line tool and library for transferring data with URLs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gitlab.com/davidjpeacock/kurly"&gt;&lt;b&gt;kurly&lt;/b&gt;&lt;/a&gt; - is an alternative to the widely popular curl program, written in Golang.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jakubroztocil/httpie"&gt;&lt;b&gt;HTTPie&lt;/b&gt;&lt;/a&gt; - is an user-friendly HTTP client.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/asciimoo/wuzz"&gt;&lt;b&gt;wuzz&lt;/b&gt;&lt;/a&gt; - is an interactive cli tool for HTTP inspection.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/summerwind/h2spec"&gt;&lt;b&gt;h2spec&lt;/b&gt;&lt;/a&gt; - is a conformance testing tool for HTTP/2 implementation.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/gildasio/h2t"&gt;&lt;b&gt;h2t&lt;/b&gt;&lt;/a&gt; - is a simple tool to help sysadmins to hardening their websites.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/trimstray/htrace.sh"&gt;&lt;b&gt;htrace.sh&lt;/b&gt;&lt;/a&gt; - is a simple Swiss Army knife for http/https troubleshooting and profiling.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/reorx/httpstat"&gt;&lt;b&gt;httpstat&lt;/b&gt;&lt;/a&gt; - is a tool that visualizes curl statistics in a way of beauty and clarity.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/gchaincl/httplab"&gt;&lt;b&gt;httplab&lt;/b&gt;&lt;/a&gt; - is an interactive web server.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://lynx.browser.org/"&gt;&lt;b&gt;Lynx&lt;/b&gt;&lt;/a&gt; - is a text browser for the World Wide Web.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/browsh-org/browsh/"&gt;&lt;b&gt;Browsh&lt;/b&gt;&lt;/a&gt; - is a fully interactive, real-time, and modern text-based browser.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dhamaniasad/HeadlessBrowsers"&gt;&lt;b&gt;HeadlessBrowsers&lt;/b&gt;&lt;/a&gt; - a list of (almost) all headless web browsers in existence.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html"&gt;&lt;b&gt;ab&lt;/b&gt;&lt;/a&gt; - is a single-threaded command line tool for measuring the performance of HTTP web servers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.joedog.org/siege-home/"&gt;&lt;b&gt;siege&lt;/b&gt;&lt;/a&gt; - is an http load testing and benchmarking utility.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/wg/wrk"&gt;&lt;b&gt;wrk&lt;/b&gt;&lt;/a&gt; - is a modern HTTP benchmarking tool capable of generating significant load.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/giltene/wrk2"&gt;&lt;b&gt;wrk2&lt;/b&gt;&lt;/a&gt; - is a constant throughput, correct latency recording variant of wrk.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/tsenart/vegeta"&gt;&lt;b&gt;vegeta&lt;/b&gt;&lt;/a&gt; - is a constant throughput, correct latency recording variant of wrk.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/codesenberg/bombardier"&gt;&lt;b&gt;bombardier&lt;/b&gt;&lt;/a&gt; - is a fast cross-platform HTTP benchmarking tool written in Go.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/cmpxchg16/gobench"&gt;&lt;b&gt;gobench&lt;/b&gt;&lt;/a&gt; - http/https load testing and benchmarking tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rakyll/hey"&gt;&lt;b&gt;hey&lt;/b&gt;&lt;/a&gt; - HTTP load generator, ApacheBench (ab) replacement, formerly known as rakyll/boom.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/tarekziade/boom"&gt;&lt;b&gt;boom&lt;/b&gt;&lt;/a&gt; - is a script you can use to quickly smoke-test your web app deployment.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/shekyan/slowhttptest"&gt;&lt;b&gt;SlowHTTPTest&lt;/b&gt;&lt;/a&gt; - is a tool that simulates some Application Layer Denial of Service attacks by prolonging HTTP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/OJ/gobuster"&gt;&lt;b&gt;gobuster&lt;/b&gt;&lt;/a&gt; - is a free and open source directory/file &amp;amp; DNS busting tool written in Go.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ssllabs/ssllabs-scan"&gt;&lt;b&gt;ssllabs-scan&lt;/b&gt;&lt;/a&gt; - command-line reference-implementation client for SSL Labs APIs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mozilla/http-observatory"&gt;&lt;b&gt;http-observatory&lt;/b&gt;&lt;/a&gt; - Mozilla HTTP Observatory cli version.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hurl.dev"&gt;&lt;b&gt;Hurl&lt;/b&gt;&lt;/a&gt; - is a command line tool to run and test HTTP requests with plain text.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; SSL&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.openssl.org/"&gt;&lt;b&gt;openssl&lt;/b&gt;&lt;/a&gt; - is a robust, commercial-grade, and full-featured toolkit for the TLS and SSL protocols.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gnutls.org/manual/html_node/gnutls_002dcli-Invocation.html"&gt;&lt;b&gt;gnutls-cli&lt;/b&gt;&lt;/a&gt; - client program to set up a TLS connection to some other computer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/nabla-c0d3/sslyze"&gt;&lt;b&gt;sslyze &lt;/b&gt;&lt;/a&gt; - fast and powerful SSL/TLS server scanning library.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rbsec/sslscan"&gt;&lt;b&gt;sslscan&lt;/b&gt;&lt;/a&gt; - tests SSL/TLS enabled services to discover supported cipher suites.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/drwetter/testssl.sh"&gt;&lt;b&gt;testssl.sh&lt;/b&gt;&lt;/a&gt; - testing TLS/SSL encryption anywhere on any port.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mozilla/cipherscan"&gt;&lt;b&gt;cipherscan&lt;/b&gt;&lt;/a&gt; - a very simple way to find out which SSL ciphersuites are supported by a target.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.tarsnap.com/spiped.html"&gt;&lt;b&gt;spiped&lt;/b&gt;&lt;/a&gt; - is a utility for creating symmetrically encrypted and authenticated pipes between socket addresses.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/certbot/certbot"&gt;&lt;b&gt;Certbot&lt;/b&gt;&lt;/a&gt; - is EFF's tool to obtain certs from Let's Encrypt and (optionally) auto-enable HTTPS on your server.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/FiloSottile/mkcert"&gt;&lt;b&gt;mkcert&lt;/b&gt;&lt;/a&gt; - simple zero-config tool to make locally trusted development certificates with any names you'd like.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/square/certstrap"&gt;&lt;b&gt;certstrap&lt;/b&gt;&lt;/a&gt; - tools to bootstrap CAs, certificate requests, and signed certificates.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/yassineaboukir/sublert"&gt;&lt;b&gt;Sublert&lt;/b&gt;&lt;/a&gt; - is a security and reconnaissance tool to automatically monitor new subdomains.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/trimstray/mkchain"&gt;&lt;b&gt;mkchain&lt;/b&gt;&lt;/a&gt; - open source tool to help you build a valid SSL certificate chain.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Matty9191/ssl-cert-check"&gt;&lt;b&gt;ssl-cert-check&lt;/b&gt;&lt;/a&gt; - SSL Certification Expiration Checker.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Security&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/ch-selinux"&gt;&lt;b&gt;SELinux&lt;/b&gt;&lt;/a&gt; - provides a flexible Mandatory Access Control (MAC) system built into the Linux kernel.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://wiki.ubuntu.com/AppArmor"&gt;&lt;b&gt;AppArmor&lt;/b&gt;&lt;/a&gt; - proactively protects the operating system and applications from external or internal threats.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/grapheneX/grapheneX"&gt;&lt;b&gt;grapheneX&lt;/b&gt;&lt;/a&gt; - Automated System Hardening Framework.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dev-sec/"&gt;&lt;b&gt;DevSec Hardening Framework&lt;/b&gt;&lt;/a&gt; - Security + DevOps: Automatic Server Hardening.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Auditing Tools&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.ossec.net/"&gt;&lt;b&gt;ossec&lt;/b&gt;&lt;/a&gt; - actively monitoring all aspects of system activity with file integrity monitoring.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing"&gt;&lt;b&gt;auditd&lt;/b&gt;&lt;/a&gt; - provides a way to track security-relevant information on your system.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.nongnu.org/tiger/"&gt;&lt;b&gt;Tiger&lt;/b&gt;&lt;/a&gt; - is a security tool that can be use both as a security audit and intrusion detection system.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cisofy.com/lynis/"&gt;&lt;b&gt;Lynis&lt;/b&gt;&lt;/a&gt; - battle-tested security tool for systems running Linux, macOS, or Unix-based operating system.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rebootuser/LinEnum"&gt;&lt;b&gt;LinEnum&lt;/b&gt;&lt;/a&gt; - scripted Local Linux Enumeration &amp;amp; Privilege Escalation Checks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/installation/rkhunter"&gt;&lt;b&gt;Rkhunter&lt;/b&gt;&lt;/a&gt; - scanner tool for Linux systems that scans backdoors, rootkits and local exploits on your systems.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/hasherezade/pe-sieve"&gt;&lt;b&gt;PE-sieve&lt;/b&gt;&lt;/a&gt; - is a light-weight tool that helps to detect malware running on the system.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite"&gt;&lt;b&gt;PEASS&lt;/b&gt;&lt;/a&gt; - privilege escalation tools for Windows and Linux/Unix and MacOS.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; System Diagnostics/Debuggers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/strace/strace"&gt;&lt;b&gt;strace&lt;/b&gt;&lt;/a&gt; - diagnostic, debugging and instructional userspace utility for Linux.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://dtrace.org/blogs/about/"&gt;&lt;b&gt;DTrace&lt;/b&gt;&lt;/a&gt; - is a performance analysis and troubleshooting tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://en.wikipedia.org/wiki/Ltrace"&gt;&lt;b&gt;ltrace&lt;/b&gt;&lt;/a&gt; - is a library call tracer, used to trace calls made by programs to library functions.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/brainsmoke/ptrace-burrito"&gt;&lt;b&gt;ptrace-burrito&lt;/b&gt;&lt;/a&gt; - is a friendly wrapper around ptrace.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/brendangregg/perf-tools"&gt;&lt;b&gt;perf-tools&lt;/b&gt;&lt;/a&gt; - performance analysis tools based on Linux perf_events (aka perf) and ftrace.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/iovisor/bpftrace"&gt;&lt;b&gt;bpftrace&lt;/b&gt;&lt;/a&gt; - high-level tracing language for Linux eBPF.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/draios/sysdig"&gt;&lt;b&gt;sysdig&lt;/b&gt;&lt;/a&gt; - system exploration and troubleshooting tool with first class support for containers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.valgrind.org/"&gt;&lt;b&gt;Valgrind&lt;/b&gt;&lt;/a&gt; - is an instrumentation framework for building dynamic analysis tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/gperftools/gperftools"&gt;&lt;b&gt;gperftools&lt;/b&gt;&lt;/a&gt; - high-performance multi-threaded malloc() implementation, plus some performance analysis tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nicolargo.github.io/glances/"&gt;&lt;b&gt;glances&lt;/b&gt;&lt;/a&gt; - cross-platform system monitoring tool written in Python.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/hishamhm/htop"&gt;&lt;b&gt;htop&lt;/b&gt;&lt;/a&gt; - interactive text-mode process viewer for Unix systems. It aims to be a better 'top'.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/aristocratos/bashtop"&gt;&lt;b&gt;bashtop&lt;/b&gt;&lt;/a&gt; - Linux resource monitor written in pure Bash.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://nmon.sourceforge.net/pmwiki.php"&gt;&lt;b&gt;nmon&lt;/b&gt;&lt;/a&gt; - a single executable for performance monitoring and data analysis.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.atoptool.nl/"&gt;&lt;b&gt;atop&lt;/b&gt;&lt;/a&gt; - ASCII performance monitor. Includes statistics for CPU, memory, disk, swap, network, and processes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://en.wikipedia.org/wiki/Lsof"&gt;&lt;b&gt;lsof&lt;/b&gt;&lt;/a&gt; - displays in its output information about files that are opened by processes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.brendangregg.com/flamegraphs.html"&gt;&lt;b&gt;FlameGraph&lt;/b&gt;&lt;/a&gt; - stack trace visualizer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/zevv/lsofgraph"&gt;&lt;b&gt;lsofgraph&lt;/b&gt;&lt;/a&gt; - convert Unix lsof output to a graph showing FIFO and UNIX interprocess communication.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mozilla/rr"&gt;&lt;b&gt;rr&lt;/b&gt;&lt;/a&gt; - is a lightweight tool for recording, replaying and debugging execution of applications.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pcp.io/index.html"&gt;&lt;b&gt;Performance Co-Pilot&lt;/b&gt;&lt;/a&gt; - a system performance analysis toolkit.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/sharkdp/hexyl"&gt;&lt;b&gt;hexyl&lt;/b&gt;&lt;/a&gt; - a command-line hex viewer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/p403n1x87/austin"&gt;&lt;b&gt;Austin&lt;/b&gt;&lt;/a&gt; - Python frame stack sampler for CPython.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Log Analyzers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rcoh/angle-grinder"&gt;&lt;b&gt;angle-grinder&lt;/b&gt;&lt;/a&gt; - slice and dice log files on the command line.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://lnav.org"&gt;&lt;b&gt;lnav&lt;/b&gt;&lt;/a&gt; - log file navigator with search and automatic refresh.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://goaccess.io/"&gt;&lt;b&gt;GoAccess&lt;/b&gt;&lt;/a&gt; - real-time web log analyzer and interactive viewer that runs in a terminal.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/lebinh/ngxtop"&gt;&lt;b&gt;ngxtop&lt;/b&gt;&lt;/a&gt; - real-time metrics for nginx server.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Databases&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/xo/usql"&gt;&lt;b&gt;usql&lt;/b&gt;&lt;/a&gt; - universal command-line interface for SQL databases.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dbcli/pgcli"&gt;&lt;b&gt;pgcli&lt;/b&gt;&lt;/a&gt; - postgres CLI with autocompletion and syntax highlighting.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dbcli/mycli"&gt;&lt;b&gt;mycli&lt;/b&gt;&lt;/a&gt; - terminal client for MySQL with autocompletion and syntax highlighting.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dbcli/litecli"&gt;&lt;b&gt;litecli&lt;/b&gt;&lt;/a&gt; - SQLite CLI with autocompletion and syntax highlighting.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dbcli/mssql-cli"&gt;&lt;b&gt;mssql-cli&lt;/b&gt;&lt;/a&gt; - SQL Server CLI with autocompletion and syntax highlighting.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/osquery/osquery"&gt;&lt;b&gt;OSQuery&lt;/b&gt;&lt;/a&gt; - is a SQL powered operating system instrumentation, monitoring, and analytics framework.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ankane/pgsync"&gt;&lt;b&gt;pgsync&lt;/b&gt;&lt;/a&gt; - sync data from one Postgres database to another.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/laixintao/iredis"&gt;&lt;b&gt;iredis&lt;/b&gt;&lt;/a&gt; - a terminal client for redis with autocompletion and syntax highlighting.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.schemacrawler.com/diagramming.html"&gt;&lt;b&gt;SchemaCrawler&lt;/b&gt;&lt;/a&gt; - generates an E-R diagram of your database.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; TOR&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/GouveaHeitor/nipe"&gt;&lt;b&gt;Nipe&lt;/b&gt;&lt;/a&gt; - script to make Tor Network your default gateway.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/trimstray/multitor"&gt;&lt;b&gt;multitor&lt;/b&gt;&lt;/a&gt; - a tool that lets you create multiple TOR instances with a load-balancing.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Messengers/IRC Clients&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://irssi.org"&gt;&lt;b&gt;Irssi&lt;/b&gt;&lt;/a&gt; - is a free open source terminal based IRC client.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://weechat.org/"&gt;&lt;b&gt;WeeChat&lt;/b&gt;&lt;/a&gt; - is an extremely extensible and lightweight IRC client.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Productivity&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://taskwarrior.org"&gt;&lt;b&gt;taskwarrior&lt;/b&gt;&lt;/a&gt; - task management system, todo list &lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Other&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/skx/sysadmin-util"&gt;&lt;b&gt;sysadmin-util&lt;/b&gt;&lt;/a&gt; - tools for Linux/Unix sysadmins.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://inotify.aiken.cz/"&gt;&lt;b&gt;incron&lt;/b&gt;&lt;/a&gt; - is an inode-based filesystem notification technology.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/axkibe/lsyncd"&gt;&lt;b&gt;lsyncd&lt;/b&gt;&lt;/a&gt; - synchronizes local directories with remote targets (Live Syncing Daemon).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rgburke/grv"&gt;&lt;b&gt;GRV&lt;/b&gt;&lt;/a&gt; - is a terminal based interface for viewing Git repositories.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://jonas.github.io/tig/"&gt;&lt;b&gt;Tig&lt;/b&gt;&lt;/a&gt; - text-mode interface for Git.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/tldr-pages/tldr"&gt;&lt;b&gt;tldr&lt;/b&gt;&lt;/a&gt; - simplified and community-driven man pages.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mholt/archiver"&gt;&lt;b&gt;archiver&lt;/b&gt;&lt;/a&gt; - easily create and extract .zip, .tar, .tar.gz, .tar.bz2, .tar.xz, .tar.lz4, .tar.sz, and .rar.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/tj/commander.js"&gt;&lt;b&gt;commander.js&lt;/b&gt;&lt;/a&gt; - minimal CLI creator in JavaScript.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/tomnomnom/gron"&gt;&lt;b&gt;gron&lt;/b&gt;&lt;/a&gt; - make JSON greppable!&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/itchyny/bed"&gt;&lt;b&gt;bed&lt;/b&gt;&lt;/a&gt; - binary editor written in Go.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;GUI Tools &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Terminal emulators&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Guake/guake"&gt;&lt;b&gt;Guake&lt;/b&gt;&lt;/a&gt; - is a dropdown terminal made for the GNOME desktop environment.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gnometerminator.blogspot.com/p/introduction.html"&gt;&lt;b&gt;Terminator&lt;/b&gt;&lt;/a&gt; - is based on GNOME Terminal, useful features for sysadmins and other users.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://sw.kovidgoyal.net/kitty/"&gt;&lt;b&gt;Kitty&lt;/b&gt;&lt;/a&gt; - is a GPU based terminal emulator that supports smooth scrolling and images.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/alacritty/alacritty"&gt;&lt;b&gt;Alacritty&lt;/b&gt;&lt;/a&gt; - is a fast, cross-platform, OpenGL terminal emulator.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Network&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.wireshark.org/"&gt;&lt;b&gt;Wireshark&lt;/b&gt;&lt;/a&gt; - is the world’s foremost and widely-used network protocol analyzer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.ettercap-project.org/"&gt;&lt;b&gt;Ettercap&lt;/b&gt;&lt;/a&gt; - is a comprehensive network monitor tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://etherape.sourceforge.io/"&gt;&lt;b&gt;EtherApe&lt;/b&gt;&lt;/a&gt; - is a graphical network monitoring solution.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://packetsender.com/"&gt;&lt;b&gt;Packet Sender&lt;/b&gt;&lt;/a&gt; - is a networking utility for packet generation and built-in UDP/TCP/SSL client and servers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ostinato.org/"&gt;&lt;b&gt;Ostinato&lt;/b&gt;&lt;/a&gt; - is a packet crafter and traffic generator.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://jmeter.apache.org/"&gt;&lt;b&gt;JMeter™&lt;/b&gt;&lt;/a&gt; - open source software to load test functional behavior and measure performance.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/locustio/locust"&gt;&lt;b&gt;locust&lt;/b&gt;&lt;/a&gt; - scalable user load testing tool written in Python.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Browsers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.torproject.org/"&gt;&lt;b&gt;TOR Browser&lt;/b&gt;&lt;/a&gt; - protect your privacy and defend yourself against network surveillance and traffic analysis.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Password Managers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://keepassxc.org/"&gt;&lt;b&gt;KeePassXC&lt;/b&gt;&lt;/a&gt; - store your passwords safely and auto-type them into your everyday websites and apps.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://bitwarden.com/"&gt;&lt;b&gt;Bitwarden&lt;/b&gt;&lt;/a&gt; - open source password manager with built-in sync.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dani-garcia/vaultwarden/"&gt;&lt;b&gt;Vaultwarden&lt;/b&gt;&lt;/a&gt; - unofficial Bitwarden compatible server written in Rust.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Messengers/IRC Clients&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hexchat.github.io/index.html"&gt;&lt;b&gt;HexChat&lt;/b&gt;&lt;/a&gt; - is an IRC client based on XChat.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pidgin.im/"&gt;&lt;b&gt;Pidgin&lt;/b&gt;&lt;/a&gt; - is an easy to use and free chat client used by millions.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Messengers (end-to-end encryption)&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.signal.org/"&gt;&lt;b&gt;Signal&lt;/b&gt;&lt;/a&gt; - is an encrypted communications app.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://wire.com/en/"&gt;&lt;b&gt;Wire&lt;/b&gt;&lt;/a&gt; - secure messaging, file sharing, voice calls and video conferences.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/prof7bit/TorChat"&gt;&lt;b&gt;TorChat&lt;/b&gt;&lt;/a&gt; - decentralized anonymous instant messenger on top of Tor Hidden Services.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://matrix.org/"&gt;&lt;b&gt;Matrix&lt;/b&gt;&lt;/a&gt; - an open network for secure, decentralized, real-time communication.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Text editors&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.sublimetext.com/3"&gt;&lt;b&gt;Sublime Text&lt;/b&gt;&lt;/a&gt; - is a lightweight, cross-platform code editor known for its speed, ease of use.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://code.visualstudio.com/"&gt;&lt;b&gt;Visual Studio Code&lt;/b&gt;&lt;/a&gt; - an open-source and free source code editor developed by Microsoft.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://atom.io/"&gt;&lt;b&gt;Atom&lt;/b&gt;&lt;/a&gt; - a hackable text editor for the 21st Century.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Web Tools &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Browsers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.ssllabs.com/ssltest/viewMyClient.html"&gt;&lt;b&gt;SSL/TLS Capabilities of Your Browser&lt;/b&gt;&lt;/a&gt; - test your browser's SSL implementation.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://caniuse.com/"&gt;&lt;b&gt;Can I use&lt;/b&gt;&lt;/a&gt; - provides up-to-date browser support tables for support of front-end web technologies.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://panopticlick.eff.org/"&gt;&lt;b&gt;Panopticlick 3.0&lt;/b&gt;&lt;/a&gt; - is your browser safe against tracking?&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://privacy.net/analyzer/"&gt;&lt;b&gt;Privacy Analyzer&lt;/b&gt;&lt;/a&gt; - see what data is exposed from your browser.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://browserleaks.com/"&gt;&lt;b&gt;Web Browser Security&lt;/b&gt;&lt;/a&gt; - it's all about Web Browser fingerprinting.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.howsmyssl.com/"&gt;&lt;b&gt;How's My SSL?&lt;/b&gt;&lt;/a&gt; - help a web server developer learn what real world TLS clients were capable of.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://suche.org/sslClientInfo"&gt;&lt;b&gt;sslClientInfo&lt;/b&gt;&lt;/a&gt; - client test (incl TLSv1.3 information).&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; SSL/Security&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.ssllabs.com/ssltest/"&gt;&lt;b&gt;SSLLabs Server Test&lt;/b&gt;&lt;/a&gt; - performs a deep analysis of the configuration of any SSL web server.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dev.ssllabs.com/ssltest/"&gt;&lt;b&gt;SSLLabs Server Test (DEV)&lt;/b&gt;&lt;/a&gt; - performs a deep analysis of the configuration of any SSL web server.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.immuniweb.com/ssl/"&gt;&lt;b&gt;ImmuniWeb® SSLScan&lt;/b&gt;&lt;/a&gt; - test SSL/TLS (PCI DSS, HIPAA and NIST).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.jitbit.com/sslcheck/"&gt;&lt;b&gt;SSL Check&lt;/b&gt;&lt;/a&gt; - scan your website for non-secure content.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.ssltools.com"&gt;&lt;b&gt;SSL Scanner&lt;/b&gt;&lt;/a&gt; - analyze website security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cryptcheck.fr/"&gt;&lt;b&gt;CryptCheck&lt;/b&gt;&lt;/a&gt; - test your TLS server configuration (e.g. ciphers).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://urlscan.io/"&gt;&lt;b&gt;urlscan.io&lt;/b&gt;&lt;/a&gt; - service to scan and analyse websites.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://report-uri.com/home/tools"&gt;&lt;b&gt;Report URI&lt;/b&gt;&lt;/a&gt; - monitoring security policies like CSP and HPKP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://csp-evaluator.withgoogle.com/"&gt;&lt;b&gt;CSP Evaluator&lt;/b&gt;&lt;/a&gt; - allows developers and security experts to check if a Content Security Policy.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://uselesscsp.com/"&gt;&lt;b&gt;Useless CSP&lt;/b&gt;&lt;/a&gt; - public list about CSP in some big players (might make them care a bit more).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://whynohttps.com/"&gt;&lt;b&gt;Why No HTTPS?&lt;/b&gt;&lt;/a&gt; - top 100 websites by Alexa rank not automatically redirecting insecure requests.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ciphersuite.info/"&gt;&lt;b&gt;TLS Cipher Suite Search&lt;/b&gt;&lt;/a&gt;- cipher suite search engine.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/RaymiiOrg/cipherli.st"&gt;&lt;b&gt;cipherli.st&lt;/b&gt;&lt;/a&gt; - strong ciphers for Apache, Nginx, Lighttpd, and more.&lt;b&gt;*&lt;/b&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://2ton.com.au/dhtool/"&gt;&lt;b&gt;dhtool&lt;/b&gt;&lt;/a&gt; - public Diffie-Hellman parameter service/tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://badssl.com/"&gt;&lt;b&gt;badssl.com&lt;/b&gt;&lt;/a&gt; - memorable site for testing clients against bad SSL configs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tlsfun.de/"&gt;&lt;b&gt;tlsfun.de&lt;/b&gt;&lt;/a&gt; - registered for various tests regarding the TLS/SSL protocol.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://sslmate.com/caa/"&gt;&lt;b&gt;CAA Record Helper&lt;/b&gt;&lt;/a&gt; - generate a CAA policy.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ccadb.org/resources"&gt;&lt;b&gt;Common CA Database&lt;/b&gt;&lt;/a&gt; - repository of information about CAs, and their root and intermediate certificates.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://certstream.calidog.io/"&gt;&lt;b&gt;CERTSTREAM&lt;/b&gt;&lt;/a&gt; - real-time certificate transparency log update stream.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://crt.sh/"&gt;&lt;b&gt;crt.sh&lt;/b&gt;&lt;/a&gt; - discovers certificates by continually monitoring all of the publicly known CT.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hardenize.com/"&gt;&lt;b&gt;Hardenize&lt;/b&gt;&lt;/a&gt; - deploy the security standards.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cryptcheck.fr/suite/"&gt;&lt;b&gt;Cipher suite compatibility&lt;/b&gt;&lt;/a&gt; - test TLS cipher suite compatibility.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.urlvoid.com/"&gt;&lt;b&gt;urlvoid&lt;/b&gt;&lt;/a&gt; - this service helps you detect potentially malicious websites.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://securitytxt.org/"&gt;&lt;b&gt;security.txt&lt;/b&gt;&lt;/a&gt; - a proposed standard (generator) which allows websites to define security policies.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mozilla/ssl-config-generator"&gt;&lt;b&gt;ssl-config-generator&lt;/b&gt;&lt;/a&gt; - help you follow the Mozilla Server Side TLS configuration guidelines.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mjol/TLScan"&gt;&lt;b&gt;TLScan&lt;/b&gt;&lt;/a&gt; - pure python, SSL/TLS protocol and cipher scanner/enumerator.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; HTTP Headers &amp;amp; Web Linters&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://securityheaders.com/"&gt;&lt;b&gt;Security Headers&lt;/b&gt;&lt;/a&gt; - analyse the HTTP response headers (with rating system to the results).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://observatory.mozilla.org/"&gt;&lt;b&gt;Observatory by Mozilla&lt;/b&gt;&lt;/a&gt; - set of tools to analyze your website.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://webhint.io/"&gt;&lt;b&gt;webhint&lt;/b&gt;&lt;/a&gt; - is a linting tool that will help you with your site's accessibility, speed, security, and more.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; DNS&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://viewdns.info/"&gt;&lt;b&gt;ViewDNS&lt;/b&gt;&lt;/a&gt; - one source for free DNS related tools and information.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dnslookup.org/"&gt;&lt;b&gt;DNSLookup&lt;/b&gt;&lt;/a&gt; - is an advanced DNS lookup tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dnslytics.com/"&gt;&lt;b&gt;DNSlytics&lt;/b&gt;&lt;/a&gt; - online DNS investigation tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dnsspy.io/"&gt;&lt;b&gt;DNS Spy&lt;/b&gt;&lt;/a&gt; - monitor, validate and verify your DNS configurations.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://zonemaster.iis.se/en/"&gt;&lt;b&gt;Zonemaster&lt;/b&gt;&lt;/a&gt; - helps you to control how your DNS works.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://leafdns.com/"&gt;&lt;b&gt;Leaf DNS&lt;/b&gt;&lt;/a&gt; - comprehensive DNS tester.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://findsubdomains.com/"&gt;&lt;b&gt;Find subdomains online&lt;/b&gt;&lt;/a&gt; - find subdomains for security assessment penetration test.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dnsdumpster.com/"&gt;&lt;b&gt;DNSdumpster&lt;/b&gt;&lt;/a&gt; - dns recon &amp;amp; research, find &amp;amp; lookup dns records.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dnstable.com/"&gt;&lt;b&gt;DNS Table online&lt;/b&gt;&lt;/a&gt; - search for DNS records by domain, IP, CIDR, ISP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://intodns.com/"&gt;&lt;b&gt;intoDNS&lt;/b&gt;&lt;/a&gt; - DNS and mail server health checker.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.zonecut.net/dns/"&gt;&lt;b&gt;DNS Bajaj&lt;/b&gt;&lt;/a&gt; - check the delegation of your domain.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.buddyns.com/delegation-lab/"&gt;&lt;b&gt;BuddyDNS Delegation LAB&lt;/b&gt;&lt;/a&gt; - check, trace and visualize delegation of your domain.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dnssec-debugger.verisignlabs.com/"&gt;&lt;b&gt;dnssec-debugger&lt;/b&gt;&lt;/a&gt; - DS or DNSKEY records validator.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://ptrarchive.com/"&gt;&lt;b&gt;PTRarchive.com&lt;/b&gt;&lt;/a&gt; - this site is responsible for the safekeeping of historical reverse DNS records.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://xip.io/"&gt;&lt;b&gt;xip.io&lt;/b&gt;&lt;/a&gt; - wildcard DNS for everyone.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nip.io/"&gt;&lt;b&gt;nip.io&lt;/b&gt;&lt;/a&gt; - dead simple wildcard DNS for any IP Address.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ceipam.eu/en/dnslookup.php"&gt;&lt;b&gt;dnslookup (ceipam)&lt;/b&gt;&lt;/a&gt; - one of the best DNS propagation checker (and not only).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://whatsmydns.com"&gt;&lt;b&gt;What's My DNS&lt;/b&gt;&lt;/a&gt; - DNS propagation checking tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://blog.erbbysam.com/index.php/2019/02/09/dnsgrep/"&gt;&lt;b&gt;DNSGrep&lt;/b&gt;&lt;/a&gt; - quickly searching large DNS datasets.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Mail&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://luxsci.com/smtp-tls-checker"&gt;&lt;b&gt;smtp-tls-checker&lt;/b&gt;&lt;/a&gt; - check an email domain for SMTP TLS support.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://mxtoolbox.com/SuperTool.aspx"&gt;&lt;b&gt;MX Toolbox&lt;/b&gt;&lt;/a&gt; - all of your MX record, DNS, blacklist and SMTP diagnostics in one integrated tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.checktls.com/index.html"&gt;&lt;b&gt;Secure Email&lt;/b&gt;&lt;/a&gt; - complete email test tools for email technicians.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.blacklistalert.org/"&gt;&lt;b&gt;blacklistalert&lt;/b&gt;&lt;/a&gt; - checks to see if your domain is on a Real Time Spam Blacklist.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://multirbl.valli.org/"&gt;&lt;b&gt;MultiRBL&lt;/b&gt;&lt;/a&gt; - complete IP check for sending Mailservers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dkimvalidator.com/"&gt;&lt;b&gt;DKIM SPF &amp;amp; Spam Assassin Validator&lt;/b&gt;&lt;/a&gt; - checks mail authentication and scores messages with Spam Assassin.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Encoders/Decoders and Regex testing&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.url-encode-decode.com/"&gt;&lt;b&gt;URL Encode/Decode&lt;/b&gt;&lt;/a&gt; - tool from above to either encode or decode a string of text.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://uncoder.io/"&gt;&lt;b&gt;Uncoder&lt;/b&gt;&lt;/a&gt; - the online translator for search queries on log data.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://regex101.com/"&gt;&lt;b&gt;Regex101&lt;/b&gt;&lt;/a&gt; - online regex tester and debugger: PHP, PCRE, Python, Golang and JavaScript.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://regexr.com/"&gt;&lt;b&gt;RegExr&lt;/b&gt;&lt;/a&gt; - online tool to learn, build, &amp;amp; test Regular Expressions (RegEx / RegExp).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.regextester.com/"&gt;&lt;b&gt;RegEx Testing&lt;/b&gt;&lt;/a&gt; - online regex testing tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.regexpal.com/"&gt;&lt;b&gt;RegEx Pal&lt;/b&gt;&lt;/a&gt; - online regex testing tool + other tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gchq.github.io/CyberChef/"&gt;&lt;b&gt;The Cyber Swiss Army Knife&lt;/b&gt;&lt;/a&gt; - a web app for encryption, encoding, compression and data analysis.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Net-tools&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://toolbar.netcraft.com/site_report"&gt;&lt;b&gt;Netcraft&lt;/b&gt;&lt;/a&gt; - detailed report about the site, helping you to make informed choices about their integrity.&lt;b&gt;*&lt;/b&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://atlas.ripe.net/"&gt;&lt;b&gt;RIPE NCC Atlas&lt;/b&gt;&lt;/a&gt; - a global, open, distributed Internet measurement platform.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.robtex.com/"&gt;&lt;b&gt;Robtex&lt;/b&gt;&lt;/a&gt; - uses various sources to gather public information about IP numbers, domain names, host names, etc.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://securitytrails.com/"&gt;&lt;b&gt;Security Trails&lt;/b&gt;&lt;/a&gt; - APIs for Security Companies, Researchers and Teams.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tools.keycdn.com/curl"&gt;&lt;b&gt;Online Curl&lt;/b&gt;&lt;/a&gt; - curl test, analyze HTTP Response Headers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://extendsclass.com/"&gt;&lt;b&gt;Online Tools for Developers&lt;/b&gt;&lt;/a&gt; - HTTP API tools, testers, encoders, converters, formatters, and other tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ping.eu/"&gt;&lt;b&gt;Ping.eu&lt;/b&gt;&lt;/a&gt; - online Ping, Traceroute, DNS lookup, WHOIS and others.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://network-tools.com/"&gt;&lt;b&gt;Network-Tools&lt;/b&gt;&lt;/a&gt; - network tools for webmasters, IT technicians &amp;amp; geeks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://bgpview.io/"&gt;&lt;b&gt;BGPview&lt;/b&gt;&lt;/a&gt; - search for any ASN, IP, Prefix or Resource name.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://isbgpsafeyet.com/"&gt;&lt;b&gt;Is BGP safe yet?&lt;/b&gt;&lt;/a&gt; - check BGP (RPKI) security of ISPs and other major Internet players.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://riseup.net/"&gt;&lt;b&gt;Riseup&lt;/b&gt;&lt;/a&gt; - provides online communication tools for people and groups working on liberatory social change.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.virustotal.com/gui/home/upload"&gt;&lt;b&gt;VirusTotal&lt;/b&gt;&lt;/a&gt; - analyze suspicious files and URLs to detect types of malware.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Privacy&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.privacyguides.org/"&gt;&lt;b&gt;privacyguides.org&lt;/b&gt;&lt;/a&gt; - provides knowledge and tools to protect your privacy against global mass surveillance.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dnsprivacy.org/wiki/display/DP/DNS+Privacy+Test+Servers"&gt;&lt;b&gt;DNS Privacy Test Servers&lt;/b&gt;&lt;/a&gt; - DNS privacy recursive servers list (with a 'no logging' policy).&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Code parsers/playgrounds&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.shellcheck.net/"&gt;&lt;b&gt;ShellCheck&lt;/b&gt;&lt;/a&gt; - finds bugs in your shell scripts.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://explainshell.com/"&gt;&lt;b&gt;explainshell&lt;/b&gt;&lt;/a&gt; - get interactive help texts for shell commands.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://jsbin.com/?html,output"&gt;&lt;b&gt;jsbin&lt;/b&gt;&lt;/a&gt; - live pastebin for HTML, CSS &amp;amp; JavaScript, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://codesandbox.io/"&gt;&lt;b&gt;CodeSandbox&lt;/b&gt;&lt;/a&gt; - online code editor for web application development.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://sandbox.onlinephpfunctions.com/"&gt;&lt;b&gt;PHP Sandbox&lt;/b&gt;&lt;/a&gt; - test your PHP code with this code tester.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.repl.it/"&gt;&lt;b&gt;Repl.it&lt;/b&gt;&lt;/a&gt; - an instant IDE to learn, build, collaborate, and host all in one place.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.vclfiddle.net/"&gt;&lt;b&gt;vclFiddle&lt;/b&gt;&lt;/a&gt; - is an online tool for experimenting with the Varnish Cache VCL.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/hadolint/hadolint"&gt;&lt;b&gt;Haskell Dockerfile Linter&lt;/b&gt;&lt;/a&gt; - a smarter Dockerfile linter that helps you build best practice Docker images.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Performance&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gtmetrix.com/"&gt;&lt;b&gt;GTmetrix&lt;/b&gt;&lt;/a&gt; - analyze your site’s speed and make it faster.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://performance.sucuri.net/"&gt;&lt;b&gt;Sucuri loadtimetester&lt;/b&gt;&lt;/a&gt; - test here the performance of any of your sites from across the globe.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tools.pingdom.com/"&gt;&lt;b&gt;Pingdom Tools&lt;/b&gt;&lt;/a&gt; - analyze your site’s speed around the world.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pingme.io/"&gt;&lt;b&gt;PingMe.io&lt;/b&gt;&lt;/a&gt; - run website latency tests across multiple geographic regions.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;&lt;b&gt;PageSpeed Insights&lt;/b&gt;&lt;/a&gt; - analyze your site’s speed and make it faster.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://web.dev/"&gt;&lt;b&gt;web.dev&lt;/b&gt;&lt;/a&gt; - helps developers like you learn and apply the web's modern capabilities to your own sites and apps.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/GoogleChrome/lighthouse"&gt;&lt;b&gt;Lighthouse&lt;/b&gt;&lt;/a&gt; - automated auditing, performance metrics, and best practices for the web.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Mass scanners (search engines)&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://censys.io/"&gt;&lt;b&gt;Censys&lt;/b&gt;&lt;/a&gt; - platform that helps information security practitioners discover, monitor, and analyze devices.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.shodan.io/"&gt;&lt;b&gt;Shodan&lt;/b&gt;&lt;/a&gt; - the world's first search engine for Internet-connected devices.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://2000.shodan.io/#/"&gt;&lt;b&gt;Shodan 2000&lt;/b&gt;&lt;/a&gt; - this tool looks for randomly generated data from Shodan.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://viz.greynoise.io/table"&gt;&lt;b&gt;GreyNoise&lt;/b&gt;&lt;/a&gt; - mass scanner such as Shodan and Censys.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.zoomeye.org/"&gt;&lt;b&gt;ZoomEye&lt;/b&gt;&lt;/a&gt; - search engine for cyberspace that lets the user find specific network components.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://netograph.io/"&gt;&lt;b&gt;netograph&lt;/b&gt;&lt;/a&gt; - tools to monitor and understand deep structure of the web.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://fofa.so/"&gt;&lt;b&gt;FOFA&lt;/b&gt;&lt;/a&gt; - is a cyberspace search engine.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.onyphe.io/"&gt;&lt;b&gt;onyphe&lt;/b&gt;&lt;/a&gt; - is a search engine for open-source and cyber threat intelligence data collected.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://intelx.io/"&gt;&lt;b&gt;IntelligenceX&lt;/b&gt;&lt;/a&gt; - is a search engine and data archive.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://app.binaryedge.io/"&gt;&lt;b&gt;binaryedge&lt;/b&gt;&lt;/a&gt; - it scan the entire internet space and create real-time threat intelligence streams and reports.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://spyse.com/"&gt;&lt;b&gt;Spyse&lt;/b&gt;&lt;/a&gt; - Internet assets registry: networks, threats, web objects, etc.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://wigle.net/"&gt;&lt;b&gt;wigle&lt;/b&gt;&lt;/a&gt; - is a submission-based catalog of wireless networks. All the networks. Found by Everyone.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://publicwww.com/"&gt;&lt;b&gt;PublicWWW&lt;/b&gt;&lt;/a&gt; - find any alphanumeric snippet, signature or keyword in the web pages HTML, JS and CSS code.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://inteltechniques.com/index.html"&gt;&lt;b&gt;IntelTechniques&lt;/b&gt;&lt;/a&gt; - this repository contains hundreds of online search utilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hunter.io/"&gt;&lt;b&gt;hunter&lt;/b&gt;&lt;/a&gt; - lets you find email addresses in seconds and connect with the people that matter for your business.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ghostproject.fr/"&gt;&lt;b&gt;GhostProject?&lt;/b&gt;&lt;/a&gt; - search by full email address or username.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.databreaches.live/"&gt;&lt;b&gt;databreaches&lt;/b&gt;&lt;/a&gt; - was my email affected by data breach?&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://weleakinfo.com"&gt;&lt;b&gt;We Leak Info&lt;/b&gt;&lt;/a&gt; - world's fastest and largest data breach search engine.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pulsedive.com/"&gt;&lt;b&gt;Pulsedive&lt;/b&gt;&lt;/a&gt; - scans of malicious URLs, IPs, and domains, including port scans and web requests.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://buckets.grayhatwarfare.com/"&gt;&lt;b&gt;Buckets by Grayhatwarfar&lt;/b&gt;&lt;/a&gt; - database with public search for Open Amazon S3 Buckets and their contents.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://vigilante.pw/"&gt;&lt;b&gt;Vigilante.pw&lt;/b&gt;&lt;/a&gt; - the breached database directory.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://builtwith.com/"&gt;&lt;b&gt;builtwith&lt;/b&gt;&lt;/a&gt; - find out what websites are built with.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nerdydata.com/"&gt;&lt;b&gt;NerdyData&lt;/b&gt;&lt;/a&gt; - search the web's source code for technologies, across millions of sites.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://zorexeye.com/"&gt;&lt;b&gt;zorexeye&lt;/b&gt;&lt;/a&gt; - search for sites, images, apps, softwares &amp;amp; more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.mmnt.net/"&gt;&lt;b&gt;Mamont's open FTP Index&lt;/b&gt;&lt;/a&gt; - if a target has an open FTP site with accessible content it will be listed here.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://osintframework.com/"&gt;&lt;b&gt;OSINT Framework&lt;/b&gt;&lt;/a&gt; - focused on gathering information from free tools or resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.maltiverse.com/search"&gt;&lt;b&gt;maltiverse&lt;/b&gt;&lt;/a&gt; - is a service oriented to cybersecurity analysts.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://leakedsource.ru/main/"&gt;&lt;b&gt;Leaked Source&lt;/b&gt;&lt;/a&gt; - is a collaboration of data found online in the form of a lookup.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://search.weleakinfo.com/"&gt;&lt;b&gt;We Leak Info&lt;/b&gt;&lt;/a&gt; - to help everyday individuals secure their online life, avoiding getting hacked.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pipl.com/"&gt;&lt;b&gt;pipl&lt;/b&gt;&lt;/a&gt; - is the place to find the person behind the email address, social username or phone number.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://abuse.ch/"&gt;&lt;b&gt;abuse.ch&lt;/b&gt;&lt;/a&gt; - is operated by a random swiss guy fighting malware for non-profit.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://malc0de.com/database/"&gt;&lt;b&gt;malc0de&lt;/b&gt;&lt;/a&gt; - malware search engine.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cybercrime-tracker.net/index.php"&gt;&lt;b&gt;Cybercrime Tracker&lt;/b&gt;&lt;/a&gt; - monitors and tracks various malware families that are used to perpetrate cyber crimes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/eth0izzle/shhgit/"&gt;&lt;b&gt;shhgit&lt;/b&gt;&lt;/a&gt; - find GitHub secrets in real time.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://searchcode.com/"&gt;&lt;b&gt;searchcode&lt;/b&gt;&lt;/a&gt; - helping you find real world examples of functions, API's and libraries.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.insecam.org/"&gt;&lt;b&gt;Insecam&lt;/b&gt;&lt;/a&gt; - the world biggest directory of online surveillance security cameras.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://index-of.es/"&gt;&lt;b&gt;index-of&lt;/b&gt;&lt;/a&gt; - contains great stuff like: security, hacking, reverse engineering, cryptography, programming etc.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://opendata.rapid7.com/"&gt;&lt;b&gt;Rapid7 Labs Open Data&lt;/b&gt;&lt;/a&gt; - is a great resources of datasets from Project Sonar.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://webtechsurvey.com/common-response-headers"&gt;&lt;b&gt;Common Response Headers&lt;/b&gt;&lt;/a&gt; - the largest database of HTTP response headers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://labs.inquest.net"&gt;&lt;b&gt;InQuest Labs&lt;/b&gt;&lt;/a&gt; - InQuest Labs is an open, interactive, and API driven data portal for security researchers.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Generators&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://thispersondoesnotexist.com/"&gt;&lt;b&gt;thispersondoesnotexist&lt;/b&gt;&lt;/a&gt; - generate fake faces in one click - endless possibilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://generated.photos"&gt;&lt;b&gt;AI Generated Photos&lt;/b&gt;&lt;/a&gt; - 100.000 AI generated faces.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.fakenamegenerator.com/"&gt;&lt;b&gt;fakenamegenerator&lt;/b&gt;&lt;/a&gt; - your randomly generated identity.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tools.intigriti.io/redirector/"&gt;&lt;b&gt;Intigriti Redirector&lt;/b&gt;&lt;/a&gt; - open redirect/SSRF payload generator.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Passwords&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://haveibeenpwned.com/"&gt;&lt;b&gt;have i been pwned?&lt;/b&gt;&lt;/a&gt; - check if you have an account that has been compromised in a data breach.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.dehashed.com/"&gt;&lt;b&gt;dehashed&lt;/b&gt;&lt;/a&gt; - is a hacked database search engine.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://leakedsource.ru/"&gt;&lt;b&gt;Leaked Source&lt;/b&gt;&lt;/a&gt; - is a collaboration of data found online in the form of a lookup.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; CVE/Exploits databases&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cve.mitre.org/"&gt;&lt;b&gt;CVE Mitre&lt;/b&gt;&lt;/a&gt; - list of publicly known cybersecurity vulnerabilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.cvedetails.com/"&gt;&lt;b&gt;CVE Details&lt;/b&gt;&lt;/a&gt; - CVE security vulnerability advanced database.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.exploit-db.com/"&gt;&lt;b&gt;Exploit DB&lt;/b&gt;&lt;/a&gt; - CVE compliant archive of public exploits and corresponding vulnerable software.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://0day.today/"&gt;&lt;b&gt;0day.today&lt;/b&gt;&lt;/a&gt; - exploits market provides you the possibility to buy/sell zero-day exploits.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://sploitus.com/"&gt;&lt;b&gt;sploitus&lt;/b&gt;&lt;/a&gt; - the exploit and tools database.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cxsecurity.com/exploit/"&gt;&lt;b&gt;cxsecurity&lt;/b&gt;&lt;/a&gt; - free vulnerability database.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.vulncode-db.com/"&gt;&lt;b&gt;Vulncode-DB&lt;/b&gt;&lt;/a&gt; - is a database for vulnerabilities and their corresponding source code if available.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cveapi.com/"&gt;&lt;b&gt;cveapi&lt;/b&gt;&lt;/a&gt; - free API for CVE data.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Mobile apps scanners&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.immuniweb.com/mobile/"&gt;&lt;b&gt;ImmuniWeb® Mobile App Scanner&lt;/b&gt;&lt;/a&gt; - test security and privacy of mobile apps (iOS &amp;amp; Android).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://vulnerabilitytest.quixxi.com/"&gt;&lt;b&gt;Quixxi&lt;/b&gt;&lt;/a&gt; - free Mobile App Vulnerability Scanner for Android &amp;amp; iOS.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.ostorlab.co/scan/mobile/"&gt;&lt;b&gt;Ostorlab&lt;/b&gt;&lt;/a&gt; - analyzes mobile application to identify vulnerabilities and potential weaknesses.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Private Search Engines&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.startpage.com/"&gt;&lt;b&gt;Startpage&lt;/b&gt;&lt;/a&gt; - the world's most private search engine.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://searx.me/"&gt;&lt;b&gt;searX&lt;/b&gt;&lt;/a&gt; - a privacy-respecting, hackable metasearch engine.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://darksearch.io/"&gt;&lt;b&gt;darksearch&lt;/b&gt;&lt;/a&gt; - the 1st real Dark Web search engine.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.qwant.com/"&gt;&lt;b&gt;Qwant&lt;/b&gt;&lt;/a&gt; - the search engine that respects your privacy.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://duckduckgo.com/"&gt;&lt;b&gt;DuckDuckGo&lt;/b&gt;&lt;/a&gt; - the search engine that doesn't track you.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://swisscows.com/"&gt;&lt;b&gt;Swisscows&lt;/b&gt;&lt;/a&gt; - privacy safe web search&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://search.disconnect.me/"&gt;&lt;b&gt;Disconnect&lt;/b&gt;&lt;/a&gt; - the search engine that anonymizes your searches.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://metager.org/"&gt;&lt;b&gt;MetaGer&lt;/b&gt;&lt;/a&gt; - the search engine that uses anonymous proxy and hidden Tor branches.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Secure Webmail Providers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://countermail.com/"&gt;&lt;b&gt;CounterMail&lt;/b&gt;&lt;/a&gt; - online email service, designed to provide maximum security and privacy.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://mail2tor.com/"&gt;&lt;b&gt;Mail2Tor&lt;/b&gt;&lt;/a&gt; - is a Tor Hidden Service that allows anyone to send and receive emails anonymously.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tutanota.com/"&gt;&lt;b&gt;Tutanota&lt;/b&gt;&lt;/a&gt; - is the world's most secure email service and amazingly easy to use.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://protonmail.com/"&gt;&lt;b&gt;Protonmail&lt;/b&gt;&lt;/a&gt; - is the world's largest secure email service, developed by CERN and MIT scientists.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.startmail.com/en/"&gt;&lt;b&gt;Startmail&lt;/b&gt;&lt;/a&gt; - private &amp;amp; encrypted email made easy.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Crypto&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://keybase.io/"&gt;&lt;b&gt;Keybase&lt;/b&gt;&lt;/a&gt; - it's open source and powered by public-key cryptography.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; PGP Keyservers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://keyserver.ubuntu.com/"&gt;&lt;b&gt;SKS OpenPGP Key server&lt;/b&gt;&lt;/a&gt; - services for the SKS keyservers used by OpenPGP.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Systems/Services &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Operating Systems&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.slackware.com/"&gt;&lt;b&gt;Slackware&lt;/b&gt;&lt;/a&gt; - the most "Unix-like" Linux distribution.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.openbsd.org/"&gt;&lt;b&gt;OpenBSD&lt;/b&gt;&lt;/a&gt; - multi-platform 4.4BSD-based UNIX-like operating system.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hardenedbsd.org/"&gt;&lt;b&gt;HardenedBSD&lt;/b&gt;&lt;/a&gt; - HardenedBSD aims to implement innovative exploit mitigation and security solutions.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.kali.org/"&gt;&lt;b&gt;Kali Linux&lt;/b&gt;&lt;/a&gt; - Linux distribution used for Penetration Testing, Ethical Hacking and network security assessments.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.parrotsec.org/"&gt;&lt;b&gt;Parrot Security OS&lt;/b&gt;&lt;/a&gt; - cyber security GNU/Linux environment.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.backbox.org/"&gt;&lt;b&gt;Backbox Linux&lt;/b&gt;&lt;/a&gt; - penetration test and security assessment oriented Ubuntu-based Linux distribution.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://blackarch.org/"&gt;&lt;b&gt;BlackArch&lt;/b&gt;&lt;/a&gt; - is an Arch Linux-based penetration testing distribution for penetration testers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.pentoo.ch/"&gt;&lt;b&gt;Pentoo&lt;/b&gt;&lt;/a&gt; - is a security-focused livecd based on Gentoo.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://securityonion.net/"&gt;&lt;b&gt;Security Onion&lt;/b&gt;&lt;/a&gt; - Linux distro for intrusion detection, enterprise security monitoring, and log management.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tails.boum.org/"&gt;&lt;b&gt;Tails&lt;/b&gt;&lt;/a&gt; - is a live system that aims to preserve your privacy and anonymity.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/vedetta-com/vedetta"&gt;&lt;b&gt;vedetta&lt;/b&gt;&lt;/a&gt; - OpenBSD router boilerplate.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.qubes-os.org"&gt;&lt;b&gt;Qubes OS&lt;/b&gt;&lt;/a&gt; - is a security-oriented OS that uses Xen-based virtualization.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; HTTP(s) Services&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://varnish-cache.org/"&gt;&lt;b&gt;Varnish Cache&lt;/b&gt;&lt;/a&gt; - HTTP accelerator designed for content-heavy dynamic web sites.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nginx.org/"&gt;&lt;b&gt;Nginx&lt;/b&gt;&lt;/a&gt; - open source web and reverse proxy server that is similar to Apache, but very light weight.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://openresty.org/en/"&gt;&lt;b&gt;OpenResty&lt;/b&gt;&lt;/a&gt; - is a dynamic web platform based on NGINX and LuaJIT.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/alibaba/tengine"&gt;&lt;b&gt;Tengine&lt;/b&gt;&lt;/a&gt; - a distribution of Nginx with some advanced features.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://caddyserver.com/"&gt;&lt;b&gt;Caddy Server&lt;/b&gt;&lt;/a&gt; - is an open source, HTTP/2-enabled web server with HTTPS by default.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.haproxy.org/"&gt;&lt;b&gt;HAProxy&lt;/b&gt;&lt;/a&gt; - the reliable, high performance TCP/HTTP load balancer.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; DNS Services&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nlnetlabs.nl/projects/unbound/about/"&gt;&lt;b&gt;Unbound&lt;/b&gt;&lt;/a&gt; - validating, recursive, and caching DNS resolver (with TLS).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.knot-resolver.cz/"&gt;&lt;b&gt;Knot Resolver&lt;/b&gt;&lt;/a&gt; - caching full resolver implementation, including both a resolver library and a daemon.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.powerdns.com/"&gt;&lt;b&gt;PowerDNS&lt;/b&gt;&lt;/a&gt; - is an open source authoritative DNS server, written in C++ and licensed under the GPL.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Other Services&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/z3APA3A/3proxy"&gt;&lt;b&gt;3proxy&lt;/b&gt;&lt;/a&gt; - tiny free proxy server.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Security/hardening&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/EmeraldOnion"&gt;&lt;b&gt;Emerald Onion&lt;/b&gt;&lt;/a&gt; - is a 501(c)(3) nonprofit organization and transit internet service provider (ISP).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/pi-hole/pi-hole"&gt;&lt;b&gt;pi-hole&lt;/b&gt;&lt;/a&gt; - the Pi-hole® is a DNS sinkhole that protects your devices from unwanted content.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/stamparm/maltrail"&gt;&lt;b&gt;maltrail&lt;/b&gt;&lt;/a&gt; - malicious traffic detection system.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Netflix/security_monkey"&gt;&lt;b&gt;security_monkey&lt;/b&gt;&lt;/a&gt; - monitors AWS, GCP, OpenStack, and GitHub orgs for assets and their changes over time.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/firecracker-microvm/firecracker"&gt;&lt;b&gt;firecracker&lt;/b&gt;&lt;/a&gt; - secure and fast microVMs for serverless computing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/StreisandEffect/streisand"&gt;&lt;b&gt;streisand&lt;/b&gt;&lt;/a&gt; - sets up a new server running your choice of WireGuard, OpenSSH, OpenVPN, and more.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Networks &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Tools&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.capanalysis.net/ca/"&gt;&lt;b&gt;CapAnalysis&lt;/b&gt;&lt;/a&gt; - web visual tool to analyze large amounts of captured network traffic (PCAP analyzer).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/digitalocean/netbox"&gt;&lt;b&gt;netbox&lt;/b&gt;&lt;/a&gt; - IP address management (IPAM) and data center infrastructure management (DCIM) tool.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Labs&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://labs.networkreliability.engineering/"&gt;&lt;b&gt;NRE Labs&lt;/b&gt;&lt;/a&gt; - learn automation by doing it. Right now, right here, in your browser.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Other&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ee.lbl.gov/"&gt;&lt;b&gt;LBNL's Network Research Group&lt;/b&gt;&lt;/a&gt; - home page of the Network Research Group (NRG).&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Containers/Orchestration &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; CLI Tools&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/google/gvisor"&gt;&lt;b&gt;gvisor&lt;/b&gt;&lt;/a&gt; - container runtime sandbox.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bcicen/ctop"&gt;&lt;b&gt;ctop&lt;/b&gt;&lt;/a&gt; - top-like interface for container metrics.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Web Tools&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/moby/moby"&gt;&lt;b&gt;Moby&lt;/b&gt;&lt;/a&gt; - a collaborative project for the container ecosystem to assemble container-based system.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://traefik.io/"&gt;&lt;b&gt;Traefik&lt;/b&gt;&lt;/a&gt; - open source reverse proxy/load balancer provides easier integration with Docker and Let's encrypt.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Kong/kong"&gt;&lt;b&gt;kong&lt;/b&gt;&lt;/a&gt; - The Cloud-Native API Gateway.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rancher/rancher"&gt;&lt;b&gt;rancher&lt;/b&gt;&lt;/a&gt; - complete container management platform.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/portainer/portainer"&gt;&lt;b&gt;portainer&lt;/b&gt;&lt;/a&gt; - making Docker management easy.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jwilder/nginx-proxy"&gt;&lt;b&gt;nginx-proxy&lt;/b&gt;&lt;/a&gt; - automated nginx proxy for Docker containers using docker-gen.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bunkerity/bunkerized-nginx"&gt;&lt;b&gt;bunkerized-nginx&lt;/b&gt;&lt;/a&gt; - nginx docker image "secure by default".&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Security&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/docker/docker-bench-security"&gt;&lt;b&gt;docker-bench-security&lt;/b&gt;&lt;/a&gt; - checks for dozens of common best-practices around deploying Docker.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/aquasecurity/trivy"&gt;&lt;b&gt;trivy&lt;/b&gt;&lt;/a&gt; - vulnerability scanner for containers, suitable for CI.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://goharbor.io/"&gt;&lt;b&gt;Harbor&lt;/b&gt;&lt;/a&gt; - cloud native registry project that stores, signs, and scans content.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://houdini.secsi.io/"&gt;&lt;b&gt;Houdini&lt;/b&gt;&lt;/a&gt; - hundreds of offensive and useful docker images for network intrusion.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Manuals/Tutorials/Best Practices&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/wsargent/docker-cheat-sheet"&gt;&lt;b&gt;docker-cheat-sheet&lt;/b&gt;&lt;/a&gt; - a quick reference cheat sheet on Docker.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/veggiemonk/awesome-docker"&gt;&lt;b&gt;awesome-docker&lt;/b&gt;&lt;/a&gt; - a curated list of Docker resources and projects.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/yeasy/docker_practice"&gt;&lt;b&gt;docker_practice&lt;/b&gt;&lt;/a&gt; - learn and understand Docker technologies, with real DevOps practice!&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/docker/labs"&gt;&lt;b&gt;labs &lt;/b&gt;&lt;/a&gt; - is a collection of tutorials for learning how to use Docker with various tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jessfraz/dockerfiles"&gt;&lt;b&gt;dockerfiles&lt;/b&gt;&lt;/a&gt; - various Dockerfiles I use on the desktop and on servers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/kelseyhightower/kubernetes-the-hard-way"&gt;&lt;b&gt;kubernetes-the-hard-way&lt;/b&gt;&lt;/a&gt; - bootstrap Kubernetes the hard way on Google Cloud Platform. No scripts.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jamesward/kubernetes-the-easy-way"&gt;&lt;b&gt;kubernetes-the-easy-way&lt;/b&gt;&lt;/a&gt; - bootstrap Kubernetes the easy way on Google Cloud Platform. No scripts.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dennyzhang/cheatsheet-kubernetes-A4"&gt;&lt;b&gt;cheatsheet-kubernetes-A4&lt;/b&gt;&lt;/a&gt; - Kubernetes CheatSheets in A4.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/kabachook/k8s-security"&gt;&lt;b&gt;k8s-security&lt;/b&gt;&lt;/a&gt; - kubernetes security notes and best practices.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://learnk8s.io/production-best-practices/"&gt;&lt;b&gt;kubernetes-production-best-practices&lt;/b&gt;&lt;/a&gt; - checklists with best-practices for production-ready Kubernetes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/freach/kubernetes-security-best-practice"&gt;&lt;b&gt;kubernetes-production-best-practices&lt;/b&gt;&lt;/a&gt; - kubernetes security - best practice guide.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/hjacobs/kubernetes-failure-stories"&gt;&lt;b&gt;kubernetes-failure-stories&lt;/b&gt;&lt;/a&gt; - is a compilation of public failure/horror stories related to Kubernetes.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Manuals/Howtos/Tutorials &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Shell/Command line&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dylanaraps/pure-bash-bible"&gt;&lt;b&gt;pure-bash-bible&lt;/b&gt;&lt;/a&gt; - is a collection of pure bash alternatives to external processes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dylanaraps/pure-sh-bible"&gt;&lt;b&gt;pure-sh-bible&lt;/b&gt;&lt;/a&gt; - is a collection of pure POSIX sh alternatives to external processes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Idnan/bash-guide"&gt;&lt;b&gt;bash-guide&lt;/b&gt;&lt;/a&gt; - is a guide to learn bash.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/denysdovhan/bash-handbook"&gt;&lt;b&gt;bash-handbook&lt;/b&gt;&lt;/a&gt; - for those who wanna learn Bash.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://wiki.bash-hackers.org/start"&gt;&lt;b&gt;The Bash Hackers Wiki&lt;/b&gt;&lt;/a&gt; - hold documentation of any kind about GNU Bash.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html"&gt;&lt;b&gt;Shell &amp;amp; Utilities&lt;/b&gt;&lt;/a&gt; - describes the commands offered to application programs by POSIX-conformant systems.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jlevy/the-art-of-command-line"&gt;&lt;b&gt;the-art-of-command-line&lt;/b&gt;&lt;/a&gt; - master the command line, in one page.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://google.github.io/styleguide/shellguide.html"&gt;&lt;b&gt;Shell Style Guide&lt;/b&gt;&lt;/a&gt; - a shell style guide for Google-originated open-source projects.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Text Editors&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://vim.rtorr.com/"&gt;&lt;b&gt;Vim Cheat Sheet&lt;/b&gt;&lt;/a&gt; - great multi language vim guide.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Python&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://awesome-python.com/"&gt;&lt;b&gt;Awesome Python&lt;/b&gt;&lt;/a&gt; - a curated list of awesome Python frameworks, libraries, software and resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/gto76/python-cheatsheet"&gt;&lt;b&gt;python-cheatsheet&lt;/b&gt;&lt;/a&gt; - comprehensive Python cheatsheet.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.pythoncheatsheet.org/"&gt;&lt;b&gt;pythoncheatsheet.org&lt;/b&gt;&lt;/a&gt; - basic reference for beginner and advanced developers.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Sed &amp;amp; Awk &amp;amp; Other&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://posts.specterops.io/fawk-yeah-advanced-sed-and-awk-usage-parsing-for-pentesters-3-e5727e11a8ad?gi=c8f9506b26b6"&gt;&lt;b&gt;F’Awk Yeah!&lt;/b&gt;&lt;/a&gt; - advanced sed and awk usage (Parsing for Pentesters 3).&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; *nix &amp;amp; Network&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.cyberciti.biz/"&gt;&lt;b&gt;nixCraft&lt;/b&gt;&lt;/a&gt; - linux and unix tutorials for new and seasoned sysadmin.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.tecmint.com/"&gt;&lt;b&gt;TecMint&lt;/b&gt;&lt;/a&gt; - the ideal Linux blog for Sysadmins &amp;amp; Geeks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.omnisecu.com/index.php"&gt;&lt;b&gt;Omnisecu&lt;/b&gt;&lt;/a&gt; - free Networking, System Administration and Security tutorials.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/cirosantilli/linux-cheat"&gt;&lt;b&gt;linux-cheat&lt;/b&gt;&lt;/a&gt; - Linux tutorials and cheatsheets. Minimal examples. Mostly user-land CLI utilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/snori74/linuxupskillchallenge"&gt;&lt;b&gt;linuxupskillchallenge&lt;/b&gt;&lt;/a&gt; - learn the skills required to sysadmin.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://cb.vu/unixtoolbox.xhtml"&gt;&lt;b&gt;Unix Toolbox&lt;/b&gt;&lt;/a&gt; - Unix/Linux/BSD commands and tasks which are useful for IT work or for advanced users.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://linux-kernel-labs.github.io/refs/heads/master/index.html"&gt;&lt;b&gt;Linux Kernel Teaching&lt;/b&gt;&lt;/a&gt; - is a collection of lectures and labs Linux kernel topics.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://peteris.rocks/blog/htop/"&gt;&lt;b&gt;htop explained&lt;/b&gt;&lt;/a&gt; - explanation of everything you can see in htop/top on Linux.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://linuxguideandhints.com/"&gt;&lt;b&gt;Linux Guide and Hints&lt;/b&gt;&lt;/a&gt; - tutorials on system administration in Fedora and CentOS.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/NanXiao/strace-little-book"&gt;&lt;b&gt;strace-little-book&lt;/b&gt;&lt;/a&gt; - a little book which introduces strace.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/goldshtn/linux-tracing-workshop"&gt;&lt;b&gt;linux-tracing-workshop&lt;/b&gt;&lt;/a&gt; - examples and hands-on labs for Linux tracing tools workshops.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bagder/http2-explained"&gt;&lt;b&gt;http2-explained&lt;/b&gt;&lt;/a&gt; - a detailed document explaining and documenting HTTP/2.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bagder/http3-explained"&gt;&lt;b&gt;http3-explained&lt;/b&gt;&lt;/a&gt; - a document describing the HTTP/3 and QUIC protocols.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.manning.com/books/http2-in-action"&gt;&lt;b&gt;HTTP/2 in Action&lt;/b&gt;&lt;/a&gt; - an excellent introduction to the new HTTP/2 standard.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/"&gt;&lt;b&gt;Let's code a TCP/IP stack&lt;/b&gt;&lt;/a&gt; - great stuff to learn network and system programming at a deeper level.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/trimstray/nginx-admins-handbook"&gt;&lt;b&gt;Nginx Admin's Handbook&lt;/b&gt;&lt;/a&gt; - how to improve NGINX performance, security and other important things.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/digitalocean/nginxconfig.io"&gt;&lt;b&gt;nginxconfig.io&lt;/b&gt;&lt;/a&gt; - NGINX config generator on steroids.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://infosec.mozilla.org/guidelines/openssh"&gt;&lt;b&gt;openssh guideline&lt;/b&gt;&lt;/a&gt; - is to help operational teams with the configuration of OpenSSH server and client.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gravitational.com/blog/ssh-handshake-explained/"&gt;&lt;b&gt;SSH Handshake Explained&lt;/b&gt;&lt;/a&gt; - is a relatively brief description of the SSH handshake.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://kb.isc.org/docs/using-this-knowledgebase"&gt;&lt;b&gt;ISC's Knowledgebase&lt;/b&gt;&lt;/a&gt; - you'll find some general information about BIND 9, ISC DHCP, and Kea DHCP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://packetlife.net/"&gt;&lt;b&gt;PacketLife.net&lt;/b&gt;&lt;/a&gt; - a place to record notes while studying for Cisco's CCNP certification.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Microsoft&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/infosecn1nja/AD-Attack-Defense"&gt;&lt;b&gt;AD-Attack-Defense&lt;/b&gt;&lt;/a&gt; - attack and defend active directory using modern post exploitation activity.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Large-scale systems&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/donnemartin/system-design-primer"&gt;&lt;b&gt;The System Design Primer&lt;/b&gt;&lt;/a&gt; - learn how to design large-scale systems.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/binhnguyennus/awesome-scalability"&gt;&lt;b&gt;Awesome Scalability&lt;/b&gt;&lt;/a&gt; - best practices in building High Scalability, High Availability, High Stability, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://engineering.videoblocks.com/web-architecture-101-a3224e126947?gi=a896808d22a"&gt;&lt;b&gt;Web Architecture 101&lt;/b&gt;&lt;/a&gt; - the basic architecture concepts.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; System hardening&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.cisecurity.org/cis-benchmarks/"&gt;&lt;b&gt;CIS Benchmarks&lt;/b&gt;&lt;/a&gt; - secure configuration settings for over 100 technologies, available as a free PDF.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://highon.coffee/blog/security-harden-centos-7/"&gt;&lt;b&gt;Security Harden CentOS 7&lt;/b&gt;&lt;/a&gt; - this walks you through the steps required to security harden CentOS.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.lisenet.com/2017/centos-7-server-hardening-guide/"&gt;&lt;b&gt;CentOS 7 Server Hardening Guide&lt;/b&gt;&lt;/a&gt; - great guide for hardening CentOS; familiar with OpenSCAP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/decalage2/awesome-security-hardening"&gt;&lt;b&gt;awesome-security-hardening&lt;/b&gt;&lt;/a&gt; - is a collection of security hardening guides, tools and other resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/trimstray/the-practical-linux-hardening-guide"&gt;&lt;b&gt;The Practical Linux Hardening Guide&lt;/b&gt;&lt;/a&gt; - provides a high-level overview of hardening GNU/Linux systems.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://madaidans-insecurities.github.io/guides/linux-hardening.html"&gt;&lt;b&gt;Linux Hardening Guide&lt;/b&gt;&lt;/a&gt; - how to harden Linux as much as possible for security and privacy.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Security &amp;amp; Privacy&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hackingarticles.in/"&gt;&lt;b&gt;Hacking Articles&lt;/b&gt;&lt;/a&gt; - LRaj Chandel's Security &amp;amp; Hacking Blog.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/toniblyx/my-arsenal-of-aws-security-tools"&gt;&lt;b&gt;AWS security tools&lt;/b&gt;&lt;/a&gt; - make your AWS cloud environment more secure.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://inventory.rawsec.ml/index.html"&gt;&lt;b&gt;Rawsec's CyberSecurity Inventory&lt;/b&gt;&lt;/a&gt; - an inventory of tools and resources about CyberSecurity.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tls.ulfheim.net/"&gt;&lt;b&gt;The Illustrated TLS Connection&lt;/b&gt;&lt;/a&gt; - every byte of a TLS connection explained and reproduced.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices"&gt;&lt;b&gt;SSL Research&lt;/b&gt;&lt;/a&gt; - SSL and TLS Deployment Best Practices by SSL Labs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://selinuxgame.org/index.html"&gt;&lt;b&gt;SELinux Game&lt;/b&gt;&lt;/a&gt; - learn SELinux by doing. Solve Puzzles, show skillz.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://smallstep.com/blog/everything-pki.html"&gt;&lt;b&gt;Certificates and PKI&lt;/b&gt;&lt;/a&gt; - everything you should know about certificates and PKI but are too afraid to ask.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://appsecco.com/books/subdomain-enumeration/"&gt;&lt;b&gt;The Art of Subdomain Enumeration&lt;/b&gt;&lt;/a&gt; - a reference for subdomain enumeration techniques.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://lifehacker.com/the-comprehensive-guide-to-quitting-google-1830001964"&gt;&lt;b&gt;Quitting Google&lt;/b&gt;&lt;/a&gt; - the comprehensive guide to quitting Google.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Web Apps&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/Main_Page"&gt;&lt;b&gt;OWASP&lt;/b&gt;&lt;/a&gt; - worldwide not-for-profit charitable organization focused on improving the security of software.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project"&gt;&lt;b&gt;OWASP ASVS 3.0.1&lt;/b&gt;&lt;/a&gt; - OWASP Application Security Verification Standard Project.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Santandersecurityresearch/asvs"&gt;&lt;b&gt;OWASP ASVS 3.0.1 Web App&lt;/b&gt;&lt;/a&gt; - simple web app that helps developers understand the ASVS requirements.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/OWASP/ASVS/tree/master/4.0"&gt;&lt;b&gt;OWASP ASVS 4.0&lt;/b&gt;&lt;/a&gt; - is a list of application security requirements or tests.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/OWASP_Testing_Project"&gt;&lt;b&gt;OWASP Testing Guide v4&lt;/b&gt;&lt;/a&gt; - includes a "best practice" penetration testing framework.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/OWASP/DevGuide"&gt;&lt;b&gt;OWASP Dev Guide&lt;/b&gt;&lt;/a&gt; - this is the development version of the OWASP Developer Guide.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/OWASP/wstg"&gt;&lt;b&gt;OWASP WSTG&lt;/b&gt;&lt;/a&gt; - is a comprehensive open source guide to testing the security of web apps.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/OWASP_API_Security_Project"&gt;&lt;b&gt;OWASP API Security Project&lt;/b&gt;&lt;/a&gt; - focuses specifically on the top ten vulnerabilities in API security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://infosec.mozilla.org/guidelines/web_security.html"&gt;&lt;b&gt;Mozilla Web Security&lt;/b&gt;&lt;/a&gt; - help operational teams with creating secure web applications.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Netflix/security-bulletins"&gt;&lt;b&gt;security-bulletins&lt;/b&gt;&lt;/a&gt; - security bulletins that relate to Netflix Open Source.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/shieldfy/API-Security-Checklist"&gt;&lt;b&gt;API-Security-Checklist&lt;/b&gt;&lt;/a&gt; - security countermeasures when designing, testing, and releasing your API.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://enable-cors.org/index.html"&gt;&lt;b&gt;Enable CORS&lt;/b&gt;&lt;/a&gt; - enable cross-origin resource sharing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://appsecwiki.com/#/"&gt;&lt;b&gt;Application Security Wiki&lt;/b&gt;&lt;/a&gt; - is an initiative to provide all application security related resources at one place.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/GrrrDog/weird_proxies/wiki"&gt;&lt;b&gt;Weird Proxies&lt;/b&gt;&lt;/a&gt; - reverse proxy related attacks; it is a result of analysis of various proxies.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://dfir.it/blog/2015/08/12/webshell-every-time-the-same-purpose/"&gt;&lt;b&gt;Webshells&lt;/b&gt;&lt;/a&gt; - great series about malicious payloads.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://portswigger.net/blog/practical-web-cache-poisoning"&gt;&lt;b&gt;Practical Web Cache Poisoning&lt;/b&gt;&lt;/a&gt; - show you how to compromise websites by using esoteric web features.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bl4de/research/tree/master/hidden_directories_leaks"&gt;&lt;b&gt;Hidden directories and files&lt;/b&gt;&lt;/a&gt; - as a source of sensitive information about web application.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://bo0om.ru/en/"&gt;&lt;b&gt;Explosive blog&lt;/b&gt;&lt;/a&gt; - great blog about cybersec and pentests.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.netsparker.com/security-cookies-whitepaper/"&gt;&lt;b&gt;Security Cookies&lt;/b&gt;&lt;/a&gt; - this paper will take a close look at cookie security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/GitGuardian/APISecurityBestPractices"&gt;&lt;b&gt;APISecurityBestPractices&lt;/b&gt;&lt;/a&gt; - help you keep secrets (API keys, db credentials, certificates) out of source code.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; All-in-one&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://lzone.de/cheat-sheet/"&gt;&lt;b&gt;LZone Cheat Sheets&lt;/b&gt;&lt;/a&gt; - all cheat sheets.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rstacruz/cheatsheets"&gt;&lt;b&gt;Dan’s Cheat Sheets’s&lt;/b&gt;&lt;/a&gt; - massive cheat sheets documentation.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://devhints.io/"&gt;&lt;b&gt;Rico's cheatsheets&lt;/b&gt;&lt;/a&gt; - this is a modest collection of cheatsheets.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://devdocs.io/"&gt;&lt;b&gt;DevDocs API&lt;/b&gt;&lt;/a&gt; - combines multiple API documentations in a fast, organized, and searchable interface.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cheat.sh/"&gt;&lt;b&gt;cheat.sh&lt;/b&gt;&lt;/a&gt; - the only cheat sheet you need.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gnulinux.guru/"&gt;&lt;b&gt;gnulinux.guru&lt;/b&gt;&lt;/a&gt; - collection of cheat sheets about bash, vim and networking.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://andreasbm.github.io/web-skills/"&gt;&lt;b&gt;Web Skills&lt;/b&gt;&lt;/a&gt; - visual overview of useful skills to learn as a web developer.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Ebooks&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;&lt;b&gt;free-programming-books&lt;/b&gt;&lt;/a&gt; - list of free learning resources in many languages.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Other&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://bitvijays.github.io/LFC-VulnerableMachines.html"&gt;&lt;b&gt;CTF Series : Vulnerable Machines&lt;/b&gt;&lt;/a&gt; - the steps below could be followed to find vulnerabilities and exploits.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/manoelt/50M_CTF_Writeup"&gt;&lt;b&gt;50M_CTF_Writeup&lt;/b&gt;&lt;/a&gt; - $50 million CTF from Hackerone - writeup.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/j00ru/ctf-tasks"&gt;&lt;b&gt;ctf-tasks&lt;/b&gt;&lt;/a&gt; - an archive of low-level CTF challenges developed over the years.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hshrzd.wordpress.com/how-to-start/"&gt;&lt;b&gt;How to start RE/malware analysis?&lt;/b&gt;&lt;/a&gt; - collection of some hints and useful links for the beginners.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.kegel.com/c10k.html"&gt;&lt;b&gt;The C10K problem&lt;/b&gt;&lt;/a&gt; - it's time for web servers to handle ten thousand clients simultaneously, don't you think?&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://blog.benjojo.co.uk/post/why-is-ethernet-mtu-1500"&gt;&lt;b&gt;How 1500 bytes became the MTU of the internet&lt;/b&gt;&lt;/a&gt; - great story about the Maximum Transmission Unit.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://poormansprofiler.org/"&gt;&lt;b&gt;poor man's profiler&lt;/b&gt;&lt;/a&gt; - like dtrace's don't really provide methods to see what programs are blocking on.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nickcraver.com/blog/2017/05/22/https-on-stack-overflow/"&gt;&lt;b&gt;HTTPS on Stack Overflow&lt;/b&gt;&lt;/a&gt; - this is the story of a long journey regarding the implementation of SSL.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://drawings.jvns.ca/"&gt;&lt;b&gt;Julia's Drawings&lt;/b&gt;&lt;/a&gt; - some drawings about programming and unix world, zines about systems &amp;amp; debugging tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/corkami/collisions"&gt;&lt;b&gt;Hash collisions&lt;/b&gt;&lt;/a&gt; - this great repository is focused on hash collisions exploitation.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/in3rsha/sha256-animation"&gt;&lt;b&gt;sha256-animation&lt;/b&gt;&lt;/a&gt; - animation of the SHA-256 hash function in your terminal.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://sha256algorithm.com/"&gt;&lt;b&gt;sha256algorithm&lt;/b&gt;&lt;/a&gt; - sha256 algorithm explained online step by step visually.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://labs.ripe.net/Members/cteusche/bgp-meets-cat"&gt;&lt;b&gt;BGP Meets Cat&lt;/b&gt;&lt;/a&gt; - after 3072 hours of manipulating BGP, Job Snijders has succeeded in drawing a Nyancat.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/benjojo/bgp-battleships"&gt;&lt;b&gt;bgp-battleships&lt;/b&gt;&lt;/a&gt; - playing battleships over BGP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/alex/what-happens-when"&gt;&lt;b&gt;What happens when...&lt;/b&gt;&lt;/a&gt; - you type google.com into your browser and press enter?&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/vasanthk/how-web-works"&gt;&lt;b&gt;how-web-works&lt;/b&gt;&lt;/a&gt; - based on the 'What happens when...' repository.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://robertheaton.com/2018/11/28/https-in-the-real-world/"&gt;&lt;b&gt;HTTPS in the real world&lt;/b&gt;&lt;/a&gt; - great tutorial explain how HTTPS works in the real world.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://about.gitlab.com/2018/11/14/how-we-spent-two-weeks-hunting-an-nfs-bug/"&gt;&lt;b&gt;Gitlab and NFS bug&lt;/b&gt;&lt;/a&gt; - how we spent two weeks hunting an NFS bug in the Linux kernel.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/"&gt;&lt;b&gt;Gitlab melts down&lt;/b&gt;&lt;/a&gt; - postmortem on the database outage of January 31 2017 with the lessons we learned.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.catb.org/esr/faqs/hacker-howto.html"&gt;&lt;b&gt;How To Become A Hacker&lt;/b&gt;&lt;/a&gt; - if you want to be a hacker, keep reading.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/"&gt;&lt;b&gt;Operation Costs in CPU&lt;/b&gt;&lt;/a&gt; - should help to estimate costs of certain operations in CPU clocks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cstack.github.io/db_tutorial/"&gt;&lt;b&gt;Let's Build a Simple Database&lt;/b&gt;&lt;/a&gt; - writing a sqlite clone from scratch in C.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://djhworld.github.io/post/2019/05/21/i-dont-know-how-cpus-work-so-i-simulated-one-in-code/"&gt;&lt;b&gt;simple-computer&lt;/b&gt;&lt;/a&gt; - great resource to understand how computers work under the hood.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.troyhunt.com/working-with-154-million-records-on/"&gt;&lt;b&gt;The story of "Have I been pwned?"&lt;/b&gt;&lt;/a&gt; - working with 154 million records on Azure Table Storage.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.top500.org/"&gt;&lt;b&gt;TOP500 Supercomputers&lt;/b&gt;&lt;/a&gt; - shows the 500 most powerful commercially available computer systems.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.shellntel.com/blog/2017/2/8/how-to-build-a-8-gpu-password-cracker"&gt;&lt;b&gt;How to build a 8 GPU password cracker&lt;/b&gt;&lt;/a&gt; - hours of frustration like desktop components do.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://home.cern/science/computing"&gt;&lt;b&gt;CERN Data Centre&lt;/b&gt;&lt;/a&gt; - 3D visualizations of the CERN computing environments (and more).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://howfuckedismydatabase.com/"&gt;&lt;b&gt;How fucked is my database&lt;/b&gt;&lt;/a&gt; - evaluate how fucked your database is with this handy website.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://krisbuytaert.be/blog/linux-troubleshooting-101-2016-edition/index.html"&gt;&lt;b&gt;Linux Troubleshooting 101 , 2016 Edition&lt;/b&gt;&lt;/a&gt; - everything is a DNS Problem...&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://open.buffer.com/5-whys-process/"&gt;&lt;b&gt;Five Whys&lt;/b&gt;&lt;/a&gt; - you know what the problem is, but you cannot solve it?&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gvnshtn.com/maersk-me-notpetya/"&gt;&lt;b&gt;Maersk, me &amp;amp; notPetya&lt;/b&gt;&lt;/a&gt; - how did ransomware successfully hijack hundreds of domain controllers?&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://howhttps.works/"&gt;&lt;b&gt;howhttps.works&lt;/b&gt;&lt;/a&gt; - how HTTPS works ...in a comic!&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://howdns.works/"&gt;&lt;b&gt;howdns.works&lt;/b&gt;&lt;/a&gt; - a fun and colorful explanation of how DNS works.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://postgresqlco.nf/en/doc/param/"&gt;&lt;b&gt;POSTGRESQLCO.NF&lt;/b&gt;&lt;/a&gt; - your postgresql.conf documentation and recommendations.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Inspiring Lists &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; SysOps/DevOps&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/kahun/awesome-sysadmin"&gt;&lt;b&gt;Awesome Sysadmin&lt;/b&gt;&lt;/a&gt; - amazingly awesome open source sysadmin resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/alebcay/awesome-shell"&gt;&lt;b&gt;Awesome Shell&lt;/b&gt;&lt;/a&gt; - awesome command-line frameworks, toolkits, guides and gizmos.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/learnbyexample/Command-line-text-processing"&gt;&lt;b&gt;Command-line-text-processing&lt;/b&gt;&lt;/a&gt; - finding text to search and replace, sorting to beautifying, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/caesar0301/awesome-pcaptools"&gt;&lt;b&gt;Awesome Pcaptools&lt;/b&gt;&lt;/a&gt; - collection of tools developed by other researchers to process network traces.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/zoidbergwill/awesome-ebpf"&gt;&lt;b&gt;awesome-ebpf&lt;/b&gt;&lt;/a&gt; - a curated list of awesome projects related to eBPF.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/leandromoreira/linux-network-performance-parameters"&gt;&lt;b&gt;Linux Network Performance&lt;/b&gt;&lt;/a&gt; - where some of the network sysctl variables fit into the Linux/Kernel network flow.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dhamaniasad/awesome-postgres"&gt;&lt;b&gt;Awesome Postgres&lt;/b&gt;&lt;/a&gt; - list of awesome PostgreSQL software, libraries, tools and resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/enochtangg/quick-SQL-cheatsheet"&gt;&lt;b&gt;quick-SQL-cheatsheet&lt;/b&gt;&lt;/a&gt; - a quick reminder of all SQL queries and examples on how to use them.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Kickball/awesome-selfhosted"&gt;&lt;b&gt;Awesome-Selfhosted&lt;/b&gt;&lt;/a&gt; - list of Free Software network services and web applications which can be hosted locally.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://wiki.archlinux.org/index.php/List_of_applications"&gt;&lt;b&gt;List of applications&lt;/b&gt;&lt;/a&gt; - huge list of apps sorted by category, as a reference for those looking for packages.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/InterviewMap/CS-Interview-Knowledge-Map"&gt;&lt;b&gt;CS-Interview-Knowledge-Map&lt;/b&gt;&lt;/a&gt; - build the best interview map.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Tikam02/DevOps-Guide"&gt;&lt;b&gt;DevOps-Guide&lt;/b&gt;&lt;/a&gt; - DevOps Guide from basic to advanced with Interview Questions and Notes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://issue.freebsdfoundation.org/publication/?m=33057&amp;amp;l=1&amp;amp;view=issuelistBrowser"&gt;&lt;b&gt;FreeBSD Journal&lt;/b&gt;&lt;/a&gt; - it is a great list of periodical magazines about FreeBSD and other important things.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bregman-arie/devops-interview-questions"&gt;&lt;b&gt;devops-interview-questions&lt;/b&gt;&lt;/a&gt; - contains interview questions on various DevOps and SRE related topics.&lt;br&gt;&lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Developers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;&lt;b&gt;Web Developer Roadmap&lt;/b&gt;&lt;/a&gt; - roadmaps, articles and resources to help you choose your path, learn and improve.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;&lt;b&gt;Front-End-Checklist&lt;/b&gt;&lt;/a&gt; - the perfect Front-End Checklist for modern websites and meticulous developers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/thedaviddias/Front-End-Performance-Checklist"&gt;&lt;b&gt;Front-End-Performance-Checklist&lt;/b&gt;&lt;/a&gt; - Front-End Performance Checklist that runs faster than the others.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://rszalski.github.io/magicmethods/"&gt;&lt;b&gt;Python's Magic Methods&lt;/b&gt;&lt;/a&gt; - what are magic methods? They're everything in object-oriented Python.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/satwikkansal/wtfpython"&gt;&lt;b&gt;wtfpython&lt;/b&gt;&lt;/a&gt; - a collection of surprising Python snippets and lesser-known features.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/twhite96/js-dev-reads"&gt;&lt;b&gt;js-dev-reads&lt;/b&gt;&lt;/a&gt; - a list of books and articles for the discerning web developer to read.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/RomuloOliveira/commit-messages-guide"&gt;&lt;b&gt;Commit messages guide&lt;/b&gt;&lt;/a&gt; - a guide to understand the importance of commit messages.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Security/Pentesting&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/qazbnm456/awesome-web-security"&gt;&lt;b&gt;Awesome Web Security&lt;/b&gt;&lt;/a&gt; - a curated list of Web Security materials and resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/joe-shenouda/awesome-cyber-skills"&gt;&lt;b&gt;awesome-cyber-skills&lt;/b&gt;&lt;/a&gt; - a curated list of hacking environments where you can train your cyber skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/devsecops/awesome-devsecops"&gt;&lt;b&gt;awesome-devsecops&lt;/b&gt;&lt;/a&gt; - an authoritative list of awesome devsecops tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jivoi/awesome-osint"&gt;&lt;b&gt;awesome-osint&lt;/b&gt;&lt;/a&gt; - is a curated list of amazingly awesome OSINT.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/HolyBugx/HolyTips"&gt;&lt;b&gt;HolyTips&lt;/b&gt;&lt;/a&gt; - tips and tutorials on Bug Bounty Hunting and Web App Security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/hslatman/awesome-threat-intelligence"&gt;&lt;b&gt;awesome-threat-intelligence&lt;/b&gt;&lt;/a&gt; - a curated list of Awesome Threat Intelligence resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/infosecn1nja/Red-Teaming-Toolkit"&gt;&lt;b&gt;Red-Teaming-Toolkit&lt;/b&gt;&lt;/a&gt; - a collection of open source and commercial tools that aid in red team operations.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/snoopysecurity/awesome-burp-extensions"&gt;&lt;b&gt;awesome-burp-extensions&lt;/b&gt;&lt;/a&gt; - a curated list of amazingly awesome Burp Extensions.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Hack-with-Github/Free-Security-eBooks"&gt;&lt;b&gt;Free Security eBooks&lt;/b&gt;&lt;/a&gt; - list of a Free Security and Hacking eBooks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/yeahhub/Hacking-Security-Ebooks"&gt;&lt;b&gt;Hacking-Security-Ebooks&lt;/b&gt;&lt;/a&gt; - top 100 Hacking &amp;amp; Security E-Books.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/nikitavoloboev/privacy-respecting"&gt;&lt;b&gt;privacy-respecting&lt;/b&gt;&lt;/a&gt; - curated list of privacy respecting services and software.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/wtsxDev/reverse-engineering"&gt;&lt;b&gt;reverse-engineering&lt;/b&gt;&lt;/a&gt; - list of awesome reverse engineering resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/michalmalik/linux-re-101"&gt;&lt;b&gt;linux-re-101&lt;/b&gt;&lt;/a&gt; - a collection of resources for linux reverse engineering.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/onethawt/reverseengineering-reading-list"&gt;&lt;b&gt;reverseengineering-reading-list&lt;/b&gt;&lt;/a&gt; - a list of Reverse Engineering articles, books, and papers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/0xInfection/Awesome-WAF"&gt;&lt;b&gt;Awesome-WAF&lt;/b&gt;&lt;/a&gt; - a curated list of awesome web-app firewall (WAF) stuff.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jakejarvis/awesome-shodan-queries"&gt;&lt;b&gt;awesome-shodan-queries&lt;/b&gt;&lt;/a&gt; - interesting, funny, and depressing search queries to plug into shodan.io.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/danielmiessler/RobotsDisallowed"&gt;&lt;b&gt;RobotsDisallowed&lt;/b&gt;&lt;/a&gt; - a curated list of the most common and most interesting robots.txt disallowed directories.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Kayzaks/HackingNeuralNetworks"&gt;&lt;b&gt;HackingNeuralNetworks&lt;/b&gt;&lt;/a&gt; - is a small course on exploiting and defending neural networks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gist.github.com/joepie91/7e5cad8c0726fd6a5e90360a754fc568"&gt;&lt;b&gt;wildcard-certificates&lt;/b&gt;&lt;/a&gt; - why you probably shouldn't use a wildcard certificate.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gist.github.com/joepie91/5a9909939e6ce7d09e29"&gt;&lt;b&gt;Don't use VPN services&lt;/b&gt;&lt;/a&gt; - which is what every third-party "VPN provider" does.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/InQuest/awesome-yara"&gt;&lt;b&gt;awesome-yara&lt;/b&gt;&lt;/a&gt; - a curated list of awesome YARA rules, tools, and people.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/drduh/macOS-Security-and-Privacy-Guide"&gt;&lt;b&gt;macOS-Security-and-Privacy-Guide&lt;/b&gt;&lt;/a&gt; - guide to securing and improving privacy on macOS.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/usnistgov/macos_security"&gt;&lt;b&gt;macos_security&lt;/b&gt;&lt;/a&gt; - macOS Security Compliance Project.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/PaulSec/awesome-sec-talks"&gt;&lt;b&gt;awesome-sec-talks&lt;/b&gt;&lt;/a&gt; - is a collected list of awesome security talks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/k4m4/movies-for-hackers"&gt;&lt;b&gt;Movies for Hackers&lt;/b&gt;&lt;/a&gt; - list of movies every hacker &amp;amp; cyberpunk must watch.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/danieldizzy/Cryptography_1"&gt;&lt;b&gt;Cryptography_1&lt;/b&gt;&lt;/a&gt; - materials used whilst taking Prof. Dan Boneh Stanford Crypto course.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ashutosh1206/Crypton"&gt;&lt;b&gt;Crypton&lt;/b&gt;&lt;/a&gt; - library to learn and practice Offensive and Defensive Cryptography.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Other&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.cheatography.com/"&gt;&lt;b&gt;Cheatography&lt;/b&gt;&lt;/a&gt; - over 3,000 free cheat sheets, revision aids and quick references.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mre/awesome-static-analysis"&gt;&lt;b&gt;awesome-static-analysis&lt;/b&gt;&lt;/a&gt; - static analysis tools for all programming languages.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ossu/computer-science"&gt;&lt;b&gt;computer-science&lt;/b&gt;&lt;/a&gt; - path to a free self-taught education in Computer Science.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/danluu/post-mortems"&gt;&lt;b&gt;post-mortems&lt;/b&gt;&lt;/a&gt; - is a collection of postmortems (config errors, hardware failures, and more).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;&lt;b&gt;build-your-own-x&lt;/b&gt;&lt;/a&gt; - build your own (insert technology here).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rby90/Project-Based-Tutorials-in-C"&gt;&lt;b&gt;Project-Based-Tutorials-in-C&lt;/b&gt;&lt;/a&gt; - is a curated list of project-based tutorials in C.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/kylelobo/The-Documentation-Compendium"&gt;&lt;b&gt;The-Documentation-Compendium&lt;/b&gt;&lt;/a&gt; - various README templates &amp;amp; tips on writing high-quality documentation.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mahmoud/awesome-python-applications"&gt;&lt;b&gt;awesome-python-applications&lt;/b&gt;&lt;/a&gt; - free software that works great, and also happens to be open-source Python.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/awesomedata/awesome-public-datasets"&gt;&lt;b&gt;awesome-public-datasets&lt;/b&gt;&lt;/a&gt; - a topic-centric list of HQ open datasets.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Sahith02/machine-learning-algorithms"&gt;&lt;b&gt;machine-learning-algorithms&lt;/b&gt;&lt;/a&gt; - a curated list of all machine learning algorithms and concepts.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Blogs/Podcasts/Videos &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; SysOps/DevOps&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/watch?v=nAFpkV5-vuI"&gt;&lt;b&gt;Varnish for PHP developers&lt;/b&gt;&lt;/a&gt; - very interesting presentation of Varnish by Mattias Geniar.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/watch?v=CZ3wIuvmHeM"&gt;&lt;b&gt;A Netflix Guide to Microservices&lt;/b&gt;&lt;/a&gt; - talks about the chaotic and vibrant world of microservices at Netflix.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Developers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/watch?v=yOyaJXpAYZQ"&gt;&lt;b&gt;Comparing C to machine lang&lt;/b&gt;&lt;/a&gt; - compare a simple C app with the compiled machine code of that program.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Geeky Persons&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.brendangregg.com/"&gt;&lt;b&gt;Brendan Gregg's Blog&lt;/b&gt;&lt;/a&gt; - is an industry expert in computing performance and cloud computing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gynvael.coldwind.pl/"&gt;&lt;b&gt;Gynvael "GynDream" Coldwind&lt;/b&gt;&lt;/a&gt; - is a IT security engineer at Google.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://lcamtuf.coredump.cx/"&gt;&lt;b&gt;Michał "lcamtuf" Zalewski&lt;/b&gt;&lt;/a&gt; - white hat hacker, computer security expert.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ma.ttias.be/"&gt;&lt;b&gt;Mattias Geniar&lt;/b&gt;&lt;/a&gt; - developer, sysadmin, blogger, podcaster and public speaker.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nickcraver.com/"&gt;&lt;b&gt;Nick Craver&lt;/b&gt;&lt;/a&gt; - software developer and systems administrator for Stack Exchange.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://scotthelme.co.uk/"&gt;&lt;b&gt;Scott Helme&lt;/b&gt;&lt;/a&gt; - security researcher, speaker and founder of securityheaders.com and report-uri.com.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://krebsonsecurity.com/"&gt;&lt;b&gt;Brian Krebs&lt;/b&gt;&lt;/a&gt; - The Washington Post and now an Independent investigative journalist.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.schneier.com/"&gt;&lt;b&gt;Bruce Schneier&lt;/b&gt;&lt;/a&gt; - is an internationally renowned security technologist, called a "security guru".&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://chrissymorgan.co.uk/"&gt;&lt;b&gt;Chrissy Morgan&lt;/b&gt;&lt;/a&gt; - advocate of practical learning, Chrissy also takes part in bug bounty programs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://blog.zsec.uk/"&gt;&lt;b&gt;Andy Gill&lt;/b&gt;&lt;/a&gt; - is a hacker at heart who works as a senior penetration tester.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://danielmiessler.com/"&gt;&lt;b&gt;Daniel Miessler&lt;/b&gt;&lt;/a&gt; - cybersecurity expert and writer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://samy.pl/"&gt;&lt;b&gt;Samy Kamkar&lt;/b&gt;&lt;/a&gt; - is an American privacy and security researcher, computer hacker.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.j4vv4d.com/"&gt;&lt;b&gt;Javvad Malik&lt;/b&gt;&lt;/a&gt; - is a security advocate at AlienVault, a blogger event speaker and industry commentator.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.grahamcluley.com/"&gt;&lt;b&gt;Graham Cluley&lt;/b&gt;&lt;/a&gt; - public speaker and independent computer security analyst.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://security.szurek.pl/"&gt;&lt;b&gt;Kacper Szurek&lt;/b&gt;&lt;/a&gt; - detection engineer at ESET.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.troyhunt.com/"&gt;&lt;b&gt;Troy Hunt&lt;/b&gt;&lt;/a&gt; - web security expert known for public education and outreach on security topics.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://raymii.org/s/index.html"&gt;&lt;b&gt;raymii.org&lt;/b&gt;&lt;/a&gt; - sysadmin specializing in building high availability cloud environments.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://robert.penz.name/"&gt;&lt;b&gt;Robert Penz&lt;/b&gt;&lt;/a&gt; - IT security expert.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Geeky Blogs&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://linux-audit.com/"&gt;&lt;b&gt;Linux Audit&lt;/b&gt;&lt;/a&gt; - the Linux security blog about auditing, hardening and compliance by Michael Boelen.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://linuxsecurity.expert/"&gt;&lt;b&gt; Linux Security Expert&lt;/b&gt;&lt;/a&gt; - trainings, howtos, checklists, security tools, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.grymoire.com/"&gt;&lt;b&gt;The Grymoire&lt;/b&gt;&lt;/a&gt; - collection of useful incantations for wizards, be you computer wizards, magicians, or whatever.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.secjuice.com"&gt;&lt;b&gt;Secjuice&lt;/b&gt;&lt;/a&gt; - is the only non-profit, independent and volunteer led publication in the information security space.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://duo.com/decipher"&gt;&lt;b&gt;Decipher&lt;/b&gt;&lt;/a&gt; - security news that informs and inspires.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Geeky Vendor Blogs&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.tenable.com/podcast"&gt;&lt;b&gt;Tenable Podcast&lt;/b&gt;&lt;/a&gt; - conversations and interviews related to Cyber Exposure, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nakedsecurity.sophos.com/"&gt;&lt;b&gt;Sophos&lt;/b&gt;&lt;/a&gt; - threat news room, giving you news, opinion, advice and research on computer security issues.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.tripwire.com/state-of-security/"&gt;&lt;b&gt;Tripwire State of Security&lt;/b&gt;&lt;/a&gt; - blog featuring the latest news, trends and insights on current security issues.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://blog.malwarebytes.com/"&gt;&lt;b&gt;Malwarebytes Labs Blog&lt;/b&gt;&lt;/a&gt; - security blog aims to provide insider news about cybersecurity.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.trustedsec.com/category/articles/"&gt;&lt;b&gt;TrustedSec&lt;/b&gt;&lt;/a&gt; - latest news, and trends about cybersecurity.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://portswigger.net/blog"&gt;&lt;b&gt;PortSwigger Web Security Blog&lt;/b&gt;&lt;/a&gt; - about web app security vulns and top tips from our team of web security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.alienvault.com/blogs"&gt;&lt;b&gt;AT&amp;amp;T Cybersecurity blog&lt;/b&gt;&lt;/a&gt; - news on emerging threats and practical advice to simplify threat detection.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://thycotic.com/company/blog/"&gt;&lt;b&gt;Thycotic&lt;/b&gt;&lt;/a&gt; - where CISOs and IT Admins come to learn about industry trends, IT security, and more.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Geeky Cybersecurity Podcasts&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://risky.biz/netcasts/risky-business/"&gt;&lt;b&gt;Risky Business&lt;/b&gt;&lt;/a&gt; - is a weekly information security podcast featuring news and in-depth interviews.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.vice.com/en_us/topic/cyber"&gt;&lt;b&gt;Cyber, by Motherboard&lt;/b&gt;&lt;/a&gt; - stories, and focus on the ideas about cybersecurity.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.tenable.com/podcast"&gt;&lt;b&gt;Tenable Podcast&lt;/b&gt;&lt;/a&gt; - conversations and interviews related to Cyber Exposure, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://podcasts.apple.com/gb/podcast/cybercrime-investigations/id1428801405"&gt;&lt;b&gt; Cybercrime Investigations&lt;/b&gt;&lt;/a&gt; - podcast by Geoff White about cybercrimes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://themanyhats.club/tag/episodes/"&gt;&lt;b&gt;The many hats club&lt;/b&gt;&lt;/a&gt; - featuring stories from a wide range of Infosec people (Whitehat, Greyhat and Blackhat).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://darknetdiaries.com/"&gt;&lt;b&gt;Darknet Diaries&lt;/b&gt;&lt;/a&gt; - true stories from the dark side of the Internet.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/playlist?list=PL423I_gHbWUXah3dmt_q_XNp0NlGAKjis"&gt;&lt;b&gt;OSINTCurious Webcasts&lt;/b&gt;&lt;/a&gt; - is the investigative curiosity that helps people be successful in OSINT.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/user/SecurityWeeklyTV"&gt;&lt;b&gt;Security Weekly&lt;/b&gt;&lt;/a&gt; - the latest information security and hacking news.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Geeky Cybersecurity Video Blogs&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/channel/UCzvJStjySZVvOBsPl-Vgj0g"&gt;&lt;b&gt;rev3rse security&lt;/b&gt;&lt;/a&gt; - offensive, binary exploitation, web app security, hardening, red team, blue team.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w"&gt;&lt;b&gt;LiveOverflow&lt;/b&gt;&lt;/a&gt; - a lot more advanced topics than what is typically offered in paid online courses - but for free.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/infoseccynic"&gt;&lt;b&gt;J4vv4D&lt;/b&gt;&lt;/a&gt; - the important information regarding our internet security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cybertalks.co.uk/"&gt;&lt;b&gt; CyberTalks&lt;/b&gt;&lt;/a&gt; - talks, interviews, and article about cybersecurity.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Best Personal Twitter Accounts&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/blackroomsec"&gt;&lt;b&gt;@blackroomsec&lt;/b&gt;&lt;/a&gt; - a white-hat hacker/pentester. Intergalactic Minesweeper Champion 1990.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/MarcoCiappelli"&gt;&lt;b&gt;@MarcoCiappelli&lt;/b&gt;&lt;/a&gt; - Co-Founder @ITSPmagazine, at the intersection of IT security and society.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/binitamshah"&gt;&lt;b&gt;@binitamshah&lt;/b&gt;&lt;/a&gt; - Linux Evangelist. Malwares. Kernel Dev. Security Enthusiast.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/joe_carson"&gt;&lt;b&gt;@joe_carson&lt;/b&gt;&lt;/a&gt; - an InfoSec Professional and Tech Geek.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/mikko"&gt;&lt;b&gt;@mikko&lt;/b&gt;&lt;/a&gt; - CRO at F-Secure, Reverse Engineer, TED Speaker, Supervillain.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/esrtweet"&gt;&lt;b&gt;@esrtweet&lt;/b&gt;&lt;/a&gt; - often referred to as ESR, is an American software developer, and open-source software advocate.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/gynvael"&gt;&lt;b&gt;@gynvael&lt;/b&gt;&lt;/a&gt; - security researcher/programmer, @DragonSectorCTF founder/player, technical streamer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/x0rz"&gt;&lt;b&gt;@x0rz&lt;/b&gt;&lt;/a&gt; - Security Researcher &amp;amp; Cyber Observer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/hasherezade"&gt;&lt;b&gt;@hasherezade&lt;/b&gt;&lt;/a&gt; - programmer, malware analyst. Author of PEbear, PEsieve, libPeConv.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/TinkerSec"&gt;&lt;b&gt;@TinkerSec&lt;/b&gt;&lt;/a&gt; - tinkerer, cypherpunk, hacker.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/alisaesage"&gt;&lt;b&gt;@alisaesage&lt;/b&gt;&lt;/a&gt; - independent hacker and researcher.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/SwiftOnSecurity"&gt;&lt;b&gt;@SwiftOnSecurity&lt;/b&gt;&lt;/a&gt; - systems security, industrial safety, sysadmin, author of decentsecurity.com.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/dakami"&gt;&lt;b&gt;@dakami&lt;/b&gt;&lt;/a&gt; - is one of just seven people with the authority to restore the DNS root keys.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/samykamkar"&gt;&lt;b&gt;@samykamkar&lt;/b&gt;&lt;/a&gt; - is a famous "grey hat" hacker, security researcher, creator of the MySpace "Samy" worm.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/securityweekly"&gt;&lt;b&gt;@securityweekly&lt;/b&gt;&lt;/a&gt; - founder &amp;amp; CTO of Security Weekly podcast network.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/jack_daniel"&gt;&lt;b&gt;@jack_daniel&lt;/b&gt;&lt;/a&gt; - @SecurityBSides co-founder.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/thegrugq"&gt;&lt;b&gt;@thegrugq&lt;/b&gt;&lt;/a&gt; - Security Researcher.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/matthew_d_green"&gt;&lt;b&gt;@matthew_d_green&lt;/b&gt;&lt;/a&gt; - a cryptographer and professor at Johns Hopkins University.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Best Commercial Twitter Accounts&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/haveibeenpwned"&gt;&lt;b&gt;@haveibeenpwned&lt;/b&gt;&lt;/a&gt; - check if you have an account that has been compromised in a data breach.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/bugcrowd"&gt;&lt;b&gt;@bugcrowd&lt;/b&gt;&lt;/a&gt; - trusted by more of the Fortune 500 than any other crowdsourced security platform.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/Malwarebytes"&gt;&lt;b&gt;@Malwarebytes&lt;/b&gt;&lt;/a&gt; - most trusted security company. Unmatched threat visibility.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/sansforensics"&gt;&lt;b&gt;@sansforensics&lt;/b&gt;&lt;/a&gt; - the world's leading Digital Forensics and Incident Response provider.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/attcyber"&gt;&lt;b&gt;@attcyber&lt;/b&gt;&lt;/a&gt; - AT&amp;amp;T Cybersecurity’s Edge-to-Edge technologies provide threat intelligence, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/TheManyHatsClub"&gt;&lt;b&gt;@TheManyHatsClub&lt;/b&gt;&lt;/a&gt; - an information security focused podcast and group of individuals from all walks of life.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/hedgehogsec"&gt;&lt;b&gt;@hedgehogsec&lt;/b&gt;&lt;/a&gt; - Hedgehog Cyber. Gibraltar and Manchester's top boutique information security firm.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/NCSC"&gt;&lt;b&gt;@NCSC&lt;/b&gt;&lt;/a&gt; - the National Cyber Security Centre. Helping to make the UK the safest place to live and work online.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/Synacktiv"&gt;&lt;b&gt;@Synacktiv&lt;/b&gt;&lt;/a&gt; - IT security experts.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; A piece of history&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://web.archive.org/web/20190221103734/https://ftp.arl.army.mil/~mike/howto/"&gt;&lt;b&gt;How to Do Things at ARL&lt;/b&gt;&lt;/a&gt; - how to configure modems, scan images, record CD-ROMs, and other.&lt;b&gt;*&lt;/b&gt;&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Other&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.youtube.com/watch?v=3QnD2c4Xovk"&gt;&lt;b&gt;Diffie-Hellman Key Exchange (short version)&lt;/b&gt;&lt;/a&gt; - how Diffie-Hellman Key Exchange worked.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Hacking/Penetration Testing &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Pentesters arsenal tools&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.syhunt.com/sandcat/"&gt;&lt;b&gt;Sandcat Browser&lt;/b&gt;&lt;/a&gt; - a penetration-oriented browser with plenty of advanced functionality already built in.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.metasploit.com/"&gt;&lt;b&gt;Metasploit&lt;/b&gt;&lt;/a&gt; - tool and framework for pentesting system, web and many more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://portswigger.net/burp"&gt;&lt;b&gt;Burp Suite&lt;/b&gt;&lt;/a&gt; - tool for testing web app security, intercepting proxy to replay, inject, scan and fuzz.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;&lt;b&gt;OWASP Zed Attack Proxy&lt;/b&gt;&lt;/a&gt; - intercepting proxy to replay, inject, scan and fuzz HTTP requests.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://w3af.org/"&gt;&lt;b&gt;w3af&lt;/b&gt;&lt;/a&gt; - is a Web Application Attack and Audit Framework.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://mitmproxy.org/"&gt;&lt;b&gt;mitmproxy&lt;/b&gt;&lt;/a&gt; - an interactive TLS-capable intercepting HTTP proxy for penetration testers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cirt.net/Nikto2"&gt;&lt;b&gt;Nikto2&lt;/b&gt;&lt;/a&gt; - web server scanner which performs comprehensive tests against web servers for multiple items.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://sqlmap.org/"&gt;&lt;b&gt;sqlmap&lt;/b&gt;&lt;/a&gt; - tool that automates the process of detecting and exploiting SQL injection flaws.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/lanmaster53/recon-ng"&gt;&lt;b&gt;Recon-ng&lt;/b&gt;&lt;/a&gt; - is a full-featured Web Reconnaissance framework written in Python.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Tib3rius/AutoRecon"&gt;&lt;b&gt;AutoRecon&lt;/b&gt;&lt;/a&gt; - is a network reconnaissance tool which performs automated enumeration of services.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.faradaysec.com/"&gt;&lt;b&gt;Faraday&lt;/b&gt;&lt;/a&gt; - an Integrated Multiuser Pentest Environment.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/s0md3v/Photon"&gt;&lt;b&gt;Photon&lt;/b&gt;&lt;/a&gt; - incredibly fast crawler designed for OSINT.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/s0md3v/XSStrike"&gt;&lt;b&gt;XSStrike&lt;/b&gt;&lt;/a&gt; - most advanced XSS detection suite.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/1N3/Sn1per"&gt;&lt;b&gt;Sn1per&lt;/b&gt;&lt;/a&gt; - automated pentest framework for offensive security experts.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/future-architect/vuls"&gt;&lt;b&gt;vuls&lt;/b&gt;&lt;/a&gt; - is an agent-less vulnerability scanner for Linux, FreeBSD, and other.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/google/tsunami-security-scanner"&gt;&lt;b&gt;tsunami&lt;/b&gt;&lt;/a&gt; - is a general purpose network security scanner with an extensible plugin system.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/michenriksen/aquatone"&gt;&lt;b&gt;aquatone&lt;/b&gt;&lt;/a&gt; - a tool for domain flyovers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/GitHackTools/BillCipher"&gt;&lt;b&gt;BillCipher&lt;/b&gt;&lt;/a&gt; - information gathering tool for a website or IP address.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Ekultek/WhatWaf"&gt;&lt;b&gt;WhatWaf&lt;/b&gt;&lt;/a&gt; - detect and bypass web application firewalls and protection systems.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/s0md3v/Corsy"&gt;&lt;b&gt;Corsy&lt;/b&gt;&lt;/a&gt; - CORS misconfiguration scanner.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/evyatarmeged/Raccoon"&gt;&lt;b&gt;Raccoon&lt;/b&gt;&lt;/a&gt; - is a high performance offensive security tool for reconnaissance and vulnerability scanning.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Nekmo/dirhunt"&gt;&lt;b&gt;dirhunt&lt;/b&gt;&lt;/a&gt; - find web directories without bruteforce.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.openwall.com/john/"&gt;&lt;b&gt;John The Ripper&lt;/b&gt;&lt;/a&gt; - is a fast password cracker, currently available for many flavors of Unix, Windows, and other.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hashcat.net/hashcat/"&gt;&lt;b&gt;hashcat&lt;/b&gt;&lt;/a&gt; - world's fastest and most advanced password recovery utility.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://lcamtuf.coredump.cx/p0f3/"&gt;&lt;b&gt;p0f&lt;/b&gt;&lt;/a&gt; - is a tool to identify the players behind any incidental TCP/IP communications.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/mozilla/ssh_scan"&gt;&lt;b&gt;ssh_scan&lt;/b&gt;&lt;/a&gt; - a prototype SSH configuration and policy scanner.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/woj-ciech/LeakLooker"&gt;&lt;b&gt;LeakLooker&lt;/b&gt;&lt;/a&gt; - find open databases - powered by Binaryedge.io&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/offensive-security/exploitdb"&gt;&lt;b&gt;exploitdb&lt;/b&gt;&lt;/a&gt; - searchable archive from The Exploit Database.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/vulnersCom/getsploit"&gt;&lt;b&gt;getsploit&lt;/b&gt;&lt;/a&gt; - is a command line utility for searching and downloading exploits.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/zardus/ctf-tools"&gt;&lt;b&gt;ctf-tools&lt;/b&gt;&lt;/a&gt; - some setup scripts for security research tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Gallopsled/pwntools"&gt;&lt;b&gt;pwntools&lt;/b&gt;&lt;/a&gt; - CTF framework and exploit development library.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bl4de/security-tools"&gt;&lt;b&gt;security-tools&lt;/b&gt;&lt;/a&gt; - collection of small security tools created mostly in Python. CTFs, pentests and so on.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/leonteale/pentestpackage"&gt;&lt;b&gt;pentestpackage&lt;/b&gt;&lt;/a&gt; - is a package of Pentest scripts.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/dloss/python-pentest-tools"&gt;&lt;b&gt;python-pentest-tools&lt;/b&gt;&lt;/a&gt; - python tools for penetration testers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/fuzzdb-project/fuzzdb"&gt;&lt;b&gt;fuzzdb&lt;/b&gt;&lt;/a&gt; - dictionary of attack patterns and primitives for black-box application fault injection.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/google/AFL"&gt;&lt;b&gt;AFL&lt;/b&gt;&lt;/a&gt; - is a free software fuzzer maintained by Google.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/AFLplusplus/AFLplusplus"&gt;&lt;b&gt;AFL++&lt;/b&gt;&lt;/a&gt; - is AFL with community patches.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/google/syzkaller"&gt;&lt;b&gt;syzkaller&lt;/b&gt;&lt;/a&gt; - is an unsupervised, coverage-guided kernel fuzzer.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/pwndbg/pwndbg"&gt;&lt;b&gt;pwndbg&lt;/b&gt;&lt;/a&gt; - exploit development and reverse engineering with GDB made easy.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/longld/peda"&gt;&lt;b&gt;GDB PEDA&lt;/b&gt;&lt;/a&gt; - Python Exploit Development Assistance for GDB.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hex-rays.com/products/ida/index.shtml"&gt;&lt;b&gt;IDA&lt;/b&gt;&lt;/a&gt; - multi-processor disassembler and debugger useful for reverse engineering malware.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/radare/radare2"&gt;&lt;b&gt;radare2&lt;/b&gt;&lt;/a&gt; - framework for reverse-engineering and analyzing binaries.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/threat9/routersploit"&gt;&lt;b&gt;routersploit&lt;/b&gt;&lt;/a&gt; - exploitation framework for embedded devices.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/NationalSecurityAgency/ghidra"&gt;&lt;b&gt;Ghidra&lt;/b&gt;&lt;/a&gt; - is a software reverse engineering (SRE) framework.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cutter.re/"&gt;&lt;b&gt;Cutter&lt;/b&gt;&lt;/a&gt; - is an SRE platform integrating Ghidra's decompiler.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/salesforce/vulnreport"&gt;&lt;b&gt;Vulnreport&lt;/b&gt;&lt;/a&gt; - open-source pentesting management and automation platform by Salesforce Product Security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/sc0tfree/mentalist"&gt;&lt;b&gt;Mentalist&lt;/b&gt;&lt;/a&gt; - is a graphical tool for custom wordlist generation.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/archerysec/archerysec"&gt;&lt;b&gt;archerysec&lt;/b&gt;&lt;/a&gt; - vulnerability assessment and management helps to perform scans and manage vulnerabilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/j3ssie/Osmedeus"&gt;&lt;b&gt;Osmedeus&lt;/b&gt;&lt;/a&gt; - fully automated offensive security tool for reconnaissance and vulnerability scanning.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/beefproject/beef"&gt;&lt;b&gt;beef&lt;/b&gt;&lt;/a&gt; - the browser exploitation framework project.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/NullArray/AutoSploit"&gt;&lt;b&gt;AutoSploit&lt;/b&gt;&lt;/a&gt; - automated mass exploiter.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/TH3xACE/SUDO_KILLER"&gt;&lt;b&gt;SUDO_KILLER&lt;/b&gt;&lt;/a&gt; - is a tool to identify and exploit sudo rules' misconfigurations and vulnerabilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/VirusTotal/yara"&gt;&lt;b&gt;yara&lt;/b&gt;&lt;/a&gt; - the pattern matching swiss knife.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/gentilkiwi/mimikatz"&gt;&lt;b&gt;mimikatz&lt;/b&gt;&lt;/a&gt; - a little tool to play with Windows security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/sherlock-project/sherlock"&gt;&lt;b&gt;sherlock&lt;/b&gt;&lt;/a&gt; - hunt down social media accounts by username across social networks.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://owasp.org/www-project-threat-dragon/"&gt;&lt;b&gt;OWASP Threat Dragon&lt;/b&gt;&lt;/a&gt; - is a tool used to create threat model diagrams and to record possible threats.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Pentests bookmarks collection&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.pentest-standard.org/index.php/Main_Page"&gt;&lt;b&gt;PTES&lt;/b&gt;&lt;/a&gt; - the penetration testing execution standard.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.amanhardikar.com/mindmaps/Practice.html"&gt;&lt;b&gt;Pentests MindMap&lt;/b&gt;&lt;/a&gt; - amazing mind map with vulnerable apps and systems.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.amanhardikar.com/mindmaps/webapptest.html"&gt;&lt;b&gt;WebApps Security Tests MindMap&lt;/b&gt;&lt;/a&gt; - incredible mind map for WebApps security tests.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://brutelogic.com.br/blog/"&gt;&lt;b&gt;Brute XSS&lt;/b&gt;&lt;/a&gt; - master the art of Cross Site Scripting.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet"&gt;&lt;b&gt;XSS cheat sheet&lt;/b&gt;&lt;/a&gt; - contains many vectors that can help you bypass WAFs and filters.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://jivoi.github.io/2015/07/03/offensive-security-bookmarks/"&gt;&lt;b&gt;Offensive Security Bookmarks&lt;/b&gt;&lt;/a&gt; - security bookmarks collection, all things that author need to pass OSCP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/coreb1t/awesome-pentest-cheat-sheets"&gt;&lt;b&gt;Awesome Pentest Cheat Sheets&lt;/b&gt;&lt;/a&gt; - collection of the cheat sheets useful for pentesting.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Hack-with-Github/Awesome-Hacking"&gt;&lt;b&gt;Awesome Hacking by HackWithGithub&lt;/b&gt;&lt;/a&gt; - awesome lists for hackers, pentesters and security researchers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/carpedm20/awesome-hacking"&gt;&lt;b&gt;Awesome Hacking by carpedm20&lt;/b&gt;&lt;/a&gt; - a curated list of awesome hacking tutorials, tools and resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/vitalysim/Awesome-Hacking-Resources"&gt;&lt;b&gt;Awesome Hacking Resources&lt;/b&gt;&lt;/a&gt; - collection of hacking/penetration testing resources to make you better.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/enaqx/awesome-pentest"&gt;&lt;b&gt;Awesome Pentest&lt;/b&gt;&lt;/a&gt; - collection of awesome penetration testing resources, tools and other shiny things.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/m4ll0k/Awesome-Hacking-Tools"&gt;&lt;b&gt;Awesome-Hacking-Tools&lt;/b&gt;&lt;/a&gt; - is a curated list of awesome Hacking Tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ksanchezcld/Hacking_Cheat_Sheet"&gt;&lt;b&gt;Hacking Cheat Sheet&lt;/b&gt;&lt;/a&gt; - author hacking and pentesting notes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/toolswatch/blackhat-arsenal-tools"&gt;&lt;b&gt;blackhat-arsenal-tools&lt;/b&gt;&lt;/a&gt; - official Black Hat arsenal security tools repository.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.peerlyst.com/posts/the-complete-list-of-infosec-related-cheat-sheets-claus-cramon"&gt;&lt;b&gt;Penetration Testing and WebApp Cheat Sheets&lt;/b&gt;&lt;/a&gt; - the complete list of Infosec related cheat sheets.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/The-Art-of-Hacking/h4cker"&gt;&lt;b&gt;Cyber Security Resources&lt;/b&gt;&lt;/a&gt; - includes thousands of cybersecurity-related references and resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jhaddix/pentest-bookmarks"&gt;&lt;b&gt;Pentest Bookmarks&lt;/b&gt;&lt;/a&gt; - there are a LOT of pentesting blogs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/OlivierLaflamme/Cheatsheet-God"&gt;&lt;b&gt;Cheatsheet-God&lt;/b&gt;&lt;/a&gt; - Penetration Testing Reference Bank - OSCP/PTP &amp;amp; PTX Cheatsheet.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Cyb3rWard0g/ThreatHunter-Playbook"&gt;&lt;b&gt;ThreatHunter-Playbook&lt;/b&gt;&lt;/a&gt; - to aid the development of techniques and hypothesis for hunting campaigns.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/hmaverickadams/Beginner-Network-Pentesting"&gt;&lt;b&gt;Beginner-Network-Pentesting&lt;/b&gt;&lt;/a&gt; - notes for beginner network pentesting course.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rewardone/OSCPRepo"&gt;&lt;b&gt;OSCPRepo&lt;/b&gt;&lt;/a&gt; - is a list of resources that author have been gathering in preparation for the OSCP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings"&gt;&lt;b&gt;PayloadsAllTheThings&lt;/b&gt;&lt;/a&gt; - a list of useful payloads and bypass for Web Application Security and Pentest/CTF.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/foospidy/payloads"&gt;&lt;b&gt;payloads&lt;/b&gt;&lt;/a&gt; - git all the Payloads! A collection of web attack payloads.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/payloadbox/command-injection-payload-list"&gt;&lt;b&gt;command-injection-payload-list&lt;/b&gt;&lt;/a&gt; - command injection payload list.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/jakejarvis/awesome-shodan-queries"&gt;&lt;b&gt;Awesome Shodan Search Queries&lt;/b&gt;&lt;/a&gt; - great search queries to plug into Shodan.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/s0md3v/AwesomeXSS"&gt;&lt;b&gt;AwesomeXSS&lt;/b&gt;&lt;/a&gt; - is a collection of Awesome XSS resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/JohnTroony/php-webshells"&gt;&lt;b&gt;php-webshells&lt;/b&gt;&lt;/a&gt; - common php webshells.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/"&gt;&lt;b&gt;Pentesting Tools Cheat Sheet&lt;/b&gt;&lt;/a&gt; - a quick reference high level overview for typical penetration testing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cheatsheetseries.owasp.org/"&gt;&lt;b&gt;OWASP Cheat Sheet Series&lt;/b&gt;&lt;/a&gt; - is a collection of high value information on specific application security topics.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://jeremylong.github.io/DependencyCheck/index.html"&gt;&lt;b&gt;OWASP dependency-check&lt;/b&gt;&lt;/a&gt; - is an open source solution the OWASP Top 10 2013 entry.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/OWASP_Proactive_Controls"&gt;&lt;b&gt;OWASP ProActive Controls&lt;/b&gt;&lt;/a&gt; - OWASP Top 10 Proactive Controls 2018.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/blaCCkHatHacEEkr/PENTESTING-BIBLE"&gt;&lt;b&gt;PENTESTING-BIBLE&lt;/b&gt;&lt;/a&gt; - hacking &amp;amp; penetration testing &amp;amp; red team &amp;amp; cyber security resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/nixawk/pentest-wiki"&gt;&lt;b&gt;pentest-wiki&lt;/b&gt;&lt;/a&gt; - is a free online security knowledge library for pentesters/researchers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://media.defcon.org/"&gt;&lt;b&gt;DEF CON Media Server&lt;/b&gt;&lt;/a&gt; - great stuff from DEFCON.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rshipp/awesome-malware-analysis"&gt;&lt;b&gt;Awesome Malware Analysis&lt;/b&gt;&lt;/a&gt; - a curated list of awesome malware analysis tools and resources.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/"&gt;&lt;b&gt;SQL Injection Cheat Sheet&lt;/b&gt;&lt;/a&gt; - detailed technical stuff about the many different variants of the SQL Injection.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://kb.entersoft.co.in/"&gt;&lt;b&gt;Entersoft Knowledge Base&lt;/b&gt;&lt;/a&gt; - great and detailed reference about vulnerabilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://html5sec.org/"&gt;&lt;b&gt;HTML5 Security Cheatsheet&lt;/b&gt;&lt;/a&gt; - a collection of HTML5 related XSS attack vectors.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://evuln.com/tools/xss-encoder/"&gt;&lt;b&gt;XSS String Encoder&lt;/b&gt;&lt;/a&gt; - for generating XSS code to check your input validation filters against XSS.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://gtfobins.github.io/"&gt;&lt;b&gt;GTFOBins&lt;/b&gt;&lt;/a&gt; - list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://guif.re/"&gt;&lt;b&gt;Guifre Ruiz Notes&lt;/b&gt;&lt;/a&gt; - collection of security, system, network and pentest cheatsheets.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://blog.safebuff.com/2016/07/03/SSRF-Tips/index.html"&gt;&lt;b&gt;SSRF Tips&lt;/b&gt;&lt;/a&gt; - a collection of SSRF Tips.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://shell-storm.org/repo/CTF/"&gt;&lt;b&gt;shell-storm repo CTF&lt;/b&gt;&lt;/a&gt; - great archive of CTFs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bl4de/ctf"&gt;&lt;b&gt;ctf&lt;/b&gt;&lt;/a&gt; - CTF (Capture The Flag) writeups, code snippets, notes, scripts.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/orangetw/My-CTF-Web-Challenges"&gt;&lt;b&gt;My-CTF-Web-Challenges&lt;/b&gt;&lt;/a&gt; - collection of CTF Web challenges.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/OWASP/owasp-mstg"&gt;&lt;b&gt;MSTG&lt;/b&gt;&lt;/a&gt; - The Mobile Security Testing Guide (MSTG) is a comprehensive manual for mobile app security testing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/sdcampbell/Internal-Pentest-Playbook"&gt;&lt;b&gt;Internal-Pentest-Playbook&lt;/b&gt;&lt;/a&gt; - notes on the most common things for an Internal Network Penetration Test.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/streaak/keyhacks"&gt;&lt;b&gt;KeyHacks&lt;/b&gt;&lt;/a&gt; - shows quick ways in which API keys leaked by a bug bounty program can be checked.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/securitum/research"&gt;&lt;b&gt;securitum/research&lt;/b&gt;&lt;/a&gt; - various Proof of Concepts of security research performed by Securitum.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/juliocesarfort/public-pentesting-reports"&gt;&lt;b&gt;public-pentesting-reports&lt;/b&gt;&lt;/a&gt; - is a list of public pentest reports released by several consulting security groups.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/djadmin/awesome-bug-bounty"&gt;&lt;b&gt;awesome-bug-bounty&lt;/b&gt;&lt;/a&gt; - is a comprehensive curated list of available Bug Bounty.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ngalongc/bug-bounty-reference"&gt;&lt;b&gt;bug-bounty-reference&lt;/b&gt;&lt;/a&gt; - is a list of bug bounty write-ups.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/devanshbatham/Awesome-Bugbounty-Writeups"&gt;&lt;b&gt;Awesome-Bugbounty-Writeups&lt;/b&gt;&lt;/a&gt; - is a curated list of bugbounty writeups.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pentester.land/list-of-bug-bounty-writeups.html"&gt;&lt;b&gt;Bug bounty writeups&lt;/b&gt;&lt;/a&gt; - list of bug bounty writeups (2012-2020).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hackso.me/"&gt;&lt;b&gt;hackso.me&lt;/b&gt;&lt;/a&gt; - a great journey into security.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Backdoors/exploits&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bartblaze/PHP-backdoors"&gt;&lt;b&gt;PHP-backdoors&lt;/b&gt;&lt;/a&gt; - a collection of PHP backdoors. For educational or testing purposes only.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Wordlists and Weak passwords&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://weakpass.com/"&gt;&lt;b&gt;Weakpass&lt;/b&gt;&lt;/a&gt; - for any kind of bruteforce find wordlists or unleash the power of them all at once!&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hashes.org/"&gt;&lt;b&gt;Hashes.org&lt;/b&gt;&lt;/a&gt; - is a free online hash resolving service incorporating many unparalleled techniques.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/danielmiessler/SecLists"&gt;&lt;b&gt;SecLists&lt;/b&gt;&lt;/a&gt; - collection of multiple types of lists used during security assessments, collected in one place.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/berzerk0/Probable-Wordlists"&gt;&lt;b&gt;Probable-Wordlists&lt;/b&gt;&lt;/a&gt; - sorted by probability originally created for password generation and testing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://wiki.skullsecurity.org/index.php?title=Passwords"&gt;&lt;b&gt;skullsecurity passwords&lt;/b&gt;&lt;/a&gt; - password dictionaries and leaked passwords repository.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://bezpieka.org/polski-slownik-premium-polish-wordlist"&gt;&lt;b&gt;Polish PREMIUM Dictionary&lt;/b&gt;&lt;/a&gt; - official dictionary created by the team on the forum bezpieka.org.&lt;b&gt;*&lt;/b&gt; &lt;sup&gt;&lt;a href="https://sourceforge.net/projects/kali-linux/files/Wordlist/"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;a href="https://sourceforge.net/projects/kali-linux/files/Wordlist/"&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;/a&gt;&lt;a href="https://github.com/insidetrust/statistically-likely-usernames"&gt;&lt;b&gt;statistically-likely-usernames&lt;/b&gt;&lt;/a&gt; - wordlists for creating statistically likely username lists.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Bounty platforms&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.yeswehack.com/"&gt;&lt;b&gt;YesWeHack&lt;/b&gt;&lt;/a&gt; - bug bounty platform with infosec jobs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.openbugbounty.org/"&gt;&lt;b&gt;Openbugbounty&lt;/b&gt;&lt;/a&gt; - allows any security researcher reporting a vulnerability on any website.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hackerone.com/"&gt;&lt;b&gt;hackerone&lt;/b&gt;&lt;/a&gt; - global hacker community to surface the most relevant security issues.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.bugcrowd.com/"&gt;&lt;b&gt;bugcrowd&lt;/b&gt;&lt;/a&gt; - crowdsourced cybersecurity for the enterprise.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://crowdshield.com/"&gt;&lt;b&gt;Crowdshield&lt;/b&gt;&lt;/a&gt; - crowdsourced security &amp;amp; bug bounty management.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.synack.com/"&gt;&lt;b&gt;Synack&lt;/b&gt;&lt;/a&gt; - crowdsourced security &amp;amp; bug bounty programs, crowd security intelligence platform, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hacktrophy.com/en/"&gt;&lt;b&gt;Hacktrophy&lt;/b&gt;&lt;/a&gt; - bug bounty platform.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Web Training Apps (local installation)&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project"&gt;&lt;b&gt;OWASP-VWAD&lt;/b&gt;&lt;/a&gt; - comprehensive and well maintained registry of all known vulnerable web applications.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.dvwa.co.uk/"&gt;&lt;b&gt;DVWA&lt;/b&gt;&lt;/a&gt; - PHP/MySQL web application that is damn vulnerable.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://metasploit.help.rapid7.com/docs/metasploitable-2"&gt;&lt;b&gt;metasploitable2&lt;/b&gt;&lt;/a&gt; - vulnerable web application amongst security researchers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rapid7/metasploitable3"&gt;&lt;b&gt;metasploitable3&lt;/b&gt;&lt;/a&gt; - is a VM that is built from the ground up with a large amount of security vulnerabilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/stamparm/DSVW"&gt;&lt;b&gt;DSVW&lt;/b&gt;&lt;/a&gt; - is a deliberately vulnerable web application written in under 100 lines of code.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://sourceforge.net/projects/mutillidae/"&gt;&lt;b&gt;OWASP Mutillidae II&lt;/b&gt;&lt;/a&gt; - free, open source, deliberately vulnerable web-application.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/OWASP_Juice_Shop_Project"&gt;&lt;b&gt;OWASP Juice Shop Project&lt;/b&gt;&lt;/a&gt; - the most bug-free vulnerable application in existence.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.owasp.org/index.php/Projects/OWASP_Node_js_Goat_Project"&gt;&lt;b&gt;OWASP Node js Goat Project&lt;/b&gt;&lt;/a&gt; - OWASP Top 10 security risks apply to web apps developed using Node.js.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/iteratec/juicy-ctf"&gt;&lt;b&gt;juicy-ctf&lt;/b&gt;&lt;/a&gt; - run Capture the Flags and Security Trainings with OWASP Juice Shop.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/OWASP/SecurityShepherd"&gt;&lt;b&gt;SecurityShepherd&lt;/b&gt;&lt;/a&gt; - web and mobile application security training platform.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/opendns/Security_Ninjas_AppSec_Training"&gt;&lt;b&gt;Security Ninjas&lt;/b&gt;&lt;/a&gt; - open source application security training program.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rapid7/hackazon"&gt;&lt;b&gt;hackazon&lt;/b&gt;&lt;/a&gt; - a modern vulnerable web app.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/appsecco/dvna"&gt;&lt;b&gt;dvna&lt;/b&gt;&lt;/a&gt; - damn vulnerable NodeJS application.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/DefectDojo/django-DefectDojo"&gt;&lt;b&gt;django-DefectDojo&lt;/b&gt;&lt;/a&gt; - is an open-source application vulnerability correlation and security orchestration tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://google-gruyere.appspot.com/"&gt;&lt;b&gt;Google Gruyere&lt;/b&gt;&lt;/a&gt; - web application exploits and defenses.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/amolnaik4/bodhi"&gt;&lt;b&gt;Bodhi&lt;/b&gt;&lt;/a&gt; - is a playground focused on learning the exploitation of client-side web vulnerabilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://websploit.h4cker.org/"&gt;&lt;b&gt;Websploit&lt;/b&gt;&lt;/a&gt; - single vm lab with the purpose of combining several vulnerable appliations in one environment.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/vulhub/vulhub"&gt;&lt;b&gt;vulhub&lt;/b&gt;&lt;/a&gt; - pre-built Vulnerable Environments based on docker-compose.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://rhinosecuritylabs.com/aws/introducing-cloudgoat-2/"&gt;&lt;b&gt;CloudGoat 2&lt;/b&gt;&lt;/a&gt; - the new &amp;amp; improved "Vulnerable by Design" AWS deployment tool.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/globocom/secDevLabs"&gt;&lt;b&gt;secDevLabs&lt;/b&gt;&lt;/a&gt; - is a laboratory for learning secure web development in a practical manner.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/incredibleindishell/CORS-vulnerable-Lab"&gt;&lt;b&gt;CORS-vulnerable-Lab&lt;/b&gt;&lt;/a&gt; - sample vulnerable code and its exploit code.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/moloch--/RootTheBox"&gt;&lt;b&gt;RootTheBox&lt;/b&gt;&lt;/a&gt; - a Game of Hackers (CTF Scoreboard &amp;amp; Game Manager).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://application.security/"&gt;&lt;b&gt;KONTRA&lt;/b&gt;&lt;/a&gt; - application security training (OWASP Top Web &amp;amp; Api).&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Labs (ethical hacking platforms/trainings/CTFs)&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.offensive-security.com/"&gt;&lt;b&gt;Offensive Security&lt;/b&gt;&lt;/a&gt; - true performance-based penetration testing training for over a decade.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hackthebox.eu/"&gt;&lt;b&gt;Hack The Box&lt;/b&gt;&lt;/a&gt; - online platform allowing you to test your penetration testing skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hacking-lab.com/index.html"&gt;&lt;b&gt;Hacking-Lab&lt;/b&gt;&lt;/a&gt; - online ethical hacking, computer network and security challenge platform.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://pwnable.kr/index.php"&gt;&lt;b&gt;pwnable.kr&lt;/b&gt;&lt;/a&gt; - non-commercial wargame site which provides various pwn challenges.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pwnable.tw/"&gt;&lt;b&gt;Pwnable.tw&lt;/b&gt;&lt;/a&gt; - is a wargame site for hackers to test and expand their binary exploiting skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://picoctf.com/"&gt;&lt;b&gt;picoCTF&lt;/b&gt;&lt;/a&gt; - is a free computer security game targeted at middle and high school students.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ctflearn.com/"&gt;&lt;b&gt;CTFlearn&lt;/b&gt;&lt;/a&gt; - is an online platform built to help ethical hackers learn and practice their cybersecurity knowledge.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ctftime.org/"&gt;&lt;b&gt;ctftime&lt;/b&gt;&lt;/a&gt; - CTF archive and a place, where you can get some another CTF-related info.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://silesiasecuritylab.com/"&gt;&lt;b&gt;Silesia Security Lab&lt;/b&gt;&lt;/a&gt; - high quality security testing services.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://practicalpentestlabs.com/"&gt;&lt;b&gt;Practical Pentest Labs&lt;/b&gt;&lt;/a&gt; - pentest lab, take your Hacking skills to the next level.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.root-me.org/?lang=en"&gt;&lt;b&gt;Root Me&lt;/b&gt;&lt;/a&gt; - the fast, easy, and affordable way to train your hacking skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://rozwal.to/login"&gt;&lt;b&gt;rozwal.to&lt;/b&gt;&lt;/a&gt; - a great platform to train your pentesting skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://tryhackme.com/"&gt;&lt;b&gt;TryHackMe&lt;/b&gt;&lt;/a&gt; - learning Cyber Security made easy.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hackxor.net/"&gt;&lt;b&gt;hackxor&lt;/b&gt;&lt;/a&gt; - is a realistic web application hacking game, designed to help players of all abilities develop their skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://hack-yourself-first.com/"&gt;&lt;b&gt;Hack Yourself First&lt;/b&gt;&lt;/a&gt; - it's full of nasty app sec holes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://overthewire.org/wargames/"&gt;&lt;b&gt;OverTheWire&lt;/b&gt;&lt;/a&gt; - can help you to learn and practice security concepts in the form of fun-filled games.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://labs.wizard-security.net/"&gt;&lt;b&gt;Wizard Labs&lt;/b&gt;&lt;/a&gt; - is an online Penetration Testing Lab.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pentesterlab.com/"&gt;&lt;b&gt;PentesterLab&lt;/b&gt;&lt;/a&gt; - provides vulnerable systems that can be used to test and understand vulnerabilities.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ringzer0ctf.com/"&gt;&lt;b&gt;RingZer0&lt;/b&gt;&lt;/a&gt; - tons of challenges designed to test and improve your hacking skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://www.try2hack.nl/"&gt;&lt;b&gt;try2hack&lt;/b&gt;&lt;/a&gt; - several security-oriented challenges for your entertainment.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.ubeeri.com/preconfig-labs"&gt;&lt;b&gt;Ubeeri&lt;/b&gt;&lt;/a&gt; - preconfigured lab environments.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://lab.pentestit.ru/"&gt;&lt;b&gt;Pentestit&lt;/b&gt;&lt;/a&gt; - emulate IT infrastructures of real companies for legal pen testing and improving pentest skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://microcorruption.com/login"&gt;&lt;b&gt;Microcorruption&lt;/b&gt;&lt;/a&gt; - reversal challenges done in the web interface.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://crackmes.one/"&gt;&lt;b&gt;Crackmes&lt;/b&gt;&lt;/a&gt; - download crackmes to help improve your reverse engineering skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://domgo.at/cxss/intro"&gt;&lt;b&gt;DomGoat&lt;/b&gt;&lt;/a&gt; - DOM XSS security learning and practicing platform.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://chall.stypr.com"&gt;&lt;b&gt;Stereotyped Challenges&lt;/b&gt;&lt;/a&gt; - upgrade your web hacking techniques today!&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.vulnhub.com/"&gt;&lt;b&gt;Vulnhub&lt;/b&gt;&lt;/a&gt; - allows anyone to gain practical 'hands-on' experience in digital security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://w3challs.com/"&gt;&lt;b&gt;W3Challs&lt;/b&gt;&lt;/a&gt; - is a penetration testing training platform, which offers various computer challenges.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ringzer0ctf.com/challenges"&gt;&lt;b&gt;RingZer0 CTF&lt;/b&gt;&lt;/a&gt; - offers you tons of challenges designed to test and improve your hacking skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hack.me/"&gt;&lt;b&gt;Hack.me&lt;/b&gt;&lt;/a&gt; - a platform where you can build, host and share vulnerable web apps for educational purposes.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hackthis.co.uk/levels/"&gt;&lt;b&gt;HackThis!&lt;/b&gt;&lt;/a&gt; - discover how hacks, dumps and defacements are performed and secure your website.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.enigmagroup.org/#"&gt;&lt;b&gt;Enigma Group WebApp Training&lt;/b&gt;&lt;/a&gt; - these challenges cover the exploits listed in the OWASP Top 10 Project.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://challenges.re/"&gt;&lt;b&gt;Reverse Engineering Challenges&lt;/b&gt;&lt;/a&gt; - challenges, exercises, problems and tasks - by level, by type, and more.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://0x00sec.org/"&gt;&lt;b&gt;0x00sec&lt;/b&gt;&lt;/a&gt; - the home of the Hacker - Malware, Reverse Engineering, and Computer Science.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.wechall.net/challs"&gt;&lt;b&gt;We Chall&lt;/b&gt;&lt;/a&gt; - there are exist a lots of different challenge types.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hackergateway.com/"&gt;&lt;b&gt;Hacker Gateway&lt;/b&gt;&lt;/a&gt; - is the go-to place for hackers who want to test their skills.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hacker101.com/"&gt;&lt;b&gt;Hacker101&lt;/b&gt;&lt;/a&gt; - is a free class for web security.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://contained.af/"&gt;&lt;b&gt;contained.af&lt;/b&gt;&lt;/a&gt; - a stupid game for learning about containers, capabilities, and syscalls.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://flaws.cloud/"&gt;&lt;b&gt;flAWS challenge!&lt;/b&gt;&lt;/a&gt; - a series of levels you'll learn about common mistakes and gotchas when using AWS.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cybersecurity.wtf"&gt;&lt;b&gt;CyberSec WTF&lt;/b&gt;&lt;/a&gt; - provides web hacking challenges derived from bounty write-ups.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://ctfchallenge.co.uk/login"&gt;&lt;b&gt;CTF Challenge&lt;/b&gt;&lt;/a&gt; - CTF Web App challenges.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://capturetheflag.withgoogle.com"&gt;&lt;b&gt;gCTF&lt;/b&gt;&lt;/a&gt; - most of the challenges used in the Google CTF 2017.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.hackthissite.org/pages/index/index.php"&gt;&lt;b&gt;Hack This Site&lt;/b&gt;&lt;/a&gt; - is a free, safe and legal training ground for hackers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://attackdefense.com"&gt;&lt;b&gt;Attack &amp;amp; Defense&lt;/b&gt;&lt;/a&gt; - is a browser-based cloud labs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cryptohack.org/"&gt;&lt;b&gt;Cryptohack&lt;/b&gt;&lt;/a&gt; - a fun platform for learning modern cryptography.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://cryptopals.com/"&gt;&lt;b&gt;Cryptopals&lt;/b&gt;&lt;/a&gt; - the cryptopals crypto challenges.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; CTF platforms&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/facebook/fbctf"&gt;&lt;b&gt;fbctf&lt;/b&gt;&lt;/a&gt; - platform to host Capture the Flag competitions.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/google/ctfscoreboard"&gt;&lt;b&gt;ctfscoreboard&lt;/b&gt;&lt;/a&gt; - scoreboard for Capture The Flag competitions.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Other resources&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/bugcrowd/bugcrowd_university"&gt;&lt;b&gt;Bugcrowd University&lt;/b&gt;&lt;/a&gt; - open source education content for the researcher community.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/rewardone/OSCPRepo"&gt;&lt;b&gt;OSCPRepo&lt;/b&gt;&lt;/a&gt; - a list of resources and scripts that I have been gathering in preparation for the OSCP.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://medium.com/@cxosmo/owasp-top-10-real-world-examples-part-1-a540c4ea2df5"&gt;&lt;b&gt;OWASP Top 10: Real-World Examples&lt;/b&gt;&lt;/a&gt; - test your web apps with real-world examples (two-part series).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="http://phrack.org/index.html"&gt;&lt;b&gt;phrack.org&lt;/b&gt;&lt;/a&gt; - an awesome collection of articles from several respected hackers and other thinkers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Gr1mmie/Practical-Ethical-Hacking-Resources"&gt;&lt;b&gt;Practical-Ethical-Hacking-Resources&lt;/b&gt;&lt;/a&gt; - compilation of resources from TCM's Udemy Course.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Your daily knowledge and news &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; RSS Readers&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://feedly.com/"&gt;&lt;b&gt;Feedly&lt;/b&gt;&lt;/a&gt; - organize, read and share what matters to you.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.inoreader.com/"&gt;&lt;b&gt;Inoreader&lt;/b&gt;&lt;/a&gt; - similar to feedly with a support for filtering what you fetch from rss.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; IRC Channels&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://wiki.hackerspaces.org/IRC_Channel"&gt;&lt;b&gt;#hackerspaces&lt;/b&gt;&lt;/a&gt; - hackerspace IRC channels.&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Security&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://thehackernews.com/"&gt;&lt;b&gt;The Hacker News&lt;/b&gt;&lt;/a&gt; - leading news source dedicated to promoting awareness for security experts and hackers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://latesthackingnews.com/"&gt;&lt;b&gt;Latest Hacking News&lt;/b&gt;&lt;/a&gt; - provides the latest hacking news, exploits and vulnerabilities for ethical hackers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://securitynewsletter.co/"&gt;&lt;b&gt;Security Newsletter&lt;/b&gt;&lt;/a&gt; - security news as a weekly digest (email notifications).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://security.googleblog.com/"&gt;&lt;b&gt;Google Online Security Blog&lt;/b&gt;&lt;/a&gt; - the latest news and insights from Google on security and safety on the Internet.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://blog.qualys.com/"&gt;&lt;b&gt;Qualys Blog&lt;/b&gt;&lt;/a&gt; - expert network security guidance and news.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.darkreading.com/"&gt;&lt;b&gt;DARKReading&lt;/b&gt;&lt;/a&gt; - connecting the Information Security Community.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.darknet.org.uk/"&gt;&lt;b&gt;Darknet&lt;/b&gt;&lt;/a&gt; - latest hacking tools, hacker news, cybersecurity best practices, ethical hacking &amp;amp; pen-testing.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://twitter.com/disclosedh1"&gt;&lt;b&gt;publiclyDisclosed&lt;/b&gt;&lt;/a&gt; - public disclosure watcher who keeps you up to date about the recently disclosed bugs.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.reddit.com/r/hacking/"&gt;&lt;b&gt;Reddit - Hacking&lt;/b&gt;&lt;/a&gt; - a subreddit dedicated to hacking and hackers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://packetstormsecurity.com/"&gt;&lt;b&gt;Packet Storm&lt;/b&gt;&lt;/a&gt; - information security services, news, files, tools, exploits, advisories and whitepapers.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://sekurak.pl/"&gt;&lt;b&gt;Sekurak&lt;/b&gt;&lt;/a&gt; - about security, penetration tests, vulnerabilities and many others (PL/EN).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://nfsec.pl/"&gt;&lt;b&gt;nf.sec&lt;/b&gt;&lt;/a&gt; - basic aspects and mechanisms of Linux operating system security (PL).&lt;br&gt; &lt;/p&gt; 
&lt;h5&gt;&lt;span&gt;▪&lt;/span&gt; Other/All-in-one&lt;/h5&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://changelog.com/"&gt;&lt;b&gt;Changelog&lt;/b&gt;&lt;/a&gt; - is a community of hackers; news &amp;amp; podcasts for developers and hackers.&lt;br&gt; &lt;/p&gt; 
&lt;h4&gt;Other Cheat Sheets &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h6&gt;Build your own DNS Servers&lt;/h6&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://calomel.org/unbound_dns.html"&gt;&lt;b&gt;Unbound DNS Tutorial&lt;/b&gt;&lt;/a&gt; - a validating, recursive, and caching DNS server.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.ctrl.blog/entry/knot-dns-resolver-tutorial.html"&gt;&lt;b&gt;Knot Resolver on Fedora&lt;/b&gt;&lt;/a&gt; - how to get faster and more secure DNS resolution with Knot Resolver on Fedora.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.aaflalo.me/2018/10/tutorial-setup-dns-over-https-server/"&gt;&lt;b&gt;DNS-over-HTTPS&lt;/b&gt;&lt;/a&gt; - tutorial to setup your own DNS-over-HTTPS (DoH) server.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/"&gt;&lt;b&gt;dns-over-https&lt;/b&gt;&lt;/a&gt; - a cartoon intro to DNS over HTTPS.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://www.aaflalo.me/2019/03/dns-over-tls/"&gt;&lt;b&gt;DNS-over-TLS&lt;/b&gt;&lt;/a&gt; - following to your DoH server, setup your DNS-over-TLS (DoT) server.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://zwischenzugs.com/2018/01/26/how-and-why-i-run-my-own-dns-servers/"&gt;&lt;b&gt;DNS Servers&lt;/b&gt;&lt;/a&gt; - how (and why) i run my own DNS Servers.&lt;br&gt; &lt;/p&gt; 
&lt;h6&gt;Build your own Certificate Authority&lt;/h6&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://jamielinux.com/docs/openssl-certificate-authority/"&gt;&lt;b&gt;OpenSSL Certificate Authority&lt;/b&gt;&lt;/a&gt; - build your own certificate authority (CA) using the OpenSSL tools.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/smallstep/certificates"&gt;&lt;b&gt;step-ca Certificate Authority&lt;/b&gt;&lt;/a&gt; - build your own certificate authority (CA) using open source step-ca.&lt;br&gt; &lt;/p&gt; 
&lt;h6&gt;Build your own System/Virtual Machine&lt;/h6&gt; 
&lt;p&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/cfenollosa/os-tutorial"&gt;&lt;b&gt;os-tutorial&lt;/b&gt;&lt;/a&gt; - how to create an OS from scratch.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://justinmeiners.github.io/lc3-vm/"&gt;&lt;b&gt;Write your Own Virtual Machine&lt;/b&gt;&lt;/a&gt; - how to write your own virtual machine (VM).&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/cirosantilli/x86-bare-metal-examples"&gt;&lt;b&gt;x86 Bare Metal Examples&lt;/b&gt;&lt;/a&gt; - dozens of minimal operating systems to learn x86 system programming.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/djhworld/simple-computer"&gt;&lt;b&gt;simple-computer&lt;/b&gt;&lt;/a&gt; - the scott CPU from "But How Do It Know?" by J. Clark Scott.&lt;br&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://littleosbook.github.io/"&gt;&lt;b&gt;littleosbook&lt;/b&gt;&lt;/a&gt; - the little book about OS development.&lt;br&gt; &lt;/p&gt; 
&lt;h6&gt;DNS Servers list (privacy)&lt;/h6&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;&lt;b&gt;&lt;u&gt;IP&lt;/u&gt;&lt;/b&gt;&lt;/th&gt; 
   &lt;th align="left"&gt;&lt;b&gt;&lt;u&gt;URL&lt;/u&gt;&lt;/b&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;84.200.69.80&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://dns.watch/"&gt;dns.watch&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;94.247.43.254&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.opennic.org/"&gt;opennic.org&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;64.6.64.6&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.verisign.com/en_US/security-services/public-dns/index.xhtml"&gt;verisign.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;89.233.43.71&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://blog.uncensoreddns.org/"&gt;censurfridns.dk&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;1.1.1.1&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://1.1.1.1/"&gt;cloudflare.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;94.130.110.185&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://dnsprivacy.at/"&gt;dnsprivacy.at&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h6&gt;TOP Browser extensions&lt;/h6&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;&lt;b&gt;&lt;u&gt;Extension name&lt;/u&gt;&lt;/b&gt;&lt;/th&gt; 
   &lt;th align="left"&gt;&lt;b&gt;&lt;u&gt;Description&lt;/u&gt;&lt;/b&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;IPvFoo&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Display the server IP address and HTTPS information across all page elements.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;FoxyProxy&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Simplifies configuring browsers to access proxy-servers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;HTTPS Everywhere&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Automatically use HTTPS security on many sites.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;uMatrix&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Point &amp;amp; click to forbid/allow any class of requests made by your browser.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;uBlock Origin&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;An efficient blocker: easy on memory and CPU footprint.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Session Buddy&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Manage browser tabs and bookmarks with ease.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;SuperSorter&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sort bookmarks recursively, delete duplicates, merge folders, and more.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Clear Cache&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Clear your cache and browsing data.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;d3coder&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Encoding/Decoding plugin for various types of encoding.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Web Developer&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Adds a toolbar button with various web developer tools.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;ThreatPinch Lookup&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Add threat intelligence hover tool tips.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h6&gt;TOP Burp extensions&lt;/h6&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;&lt;b&gt;&lt;u&gt;Extension name&lt;/u&gt;&lt;/b&gt;&lt;/th&gt; 
   &lt;th align="left"&gt;&lt;b&gt;&lt;u&gt;Description&lt;/u&gt;&lt;/b&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Active Scan++&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Extends Burp's active and passive scanning capabilities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Autorize&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Automatically detects authorization enforcement.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;AuthMatrix&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;A simple matrix grid to define the desired levels of access privilege.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Logger++&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Logs requests and responses for all Burp tools in a sortable table.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Bypass WAF&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Adds headers useful for bypassing some WAF devices.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;JSON Beautifier&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Beautifies JSON content in the HTTP message viewer.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;JSON Web Tokens&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Enables Burp to decode and manipulate JSON web tokens.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;CSP Auditor&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Displays CSP headers for responses, and passively reports CSP weaknesses.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;CSP-Bypass&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Passively scans for CSP headers that contain known bypasses.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Hackvertor&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Converts data using a tag-based configuration to apply various encoding.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;HTML5 Auditor&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Scans for usage of risky HTML5 features.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Software Vulnerability Scanner&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Vulnerability scanner based on vulners.com audit API.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Turbo Intruder&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Is a powerful bruteforcing tool.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;strong&gt;&lt;code&gt;Upload Scanner&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Upload a number of different file types, laced with different forms of payload.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h6&gt;Hack Mozilla Firefox address bar&lt;/h6&gt; 
&lt;p&gt;In Firefox's address bar, you can limit results by typing special characters before or after your term:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;^&lt;/code&gt; - for matches in your browsing history&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;*&lt;/code&gt; - for matches in your bookmarks.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;%&lt;/code&gt; - for matches in your currently open tabs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;#&lt;/code&gt; - for matches in page titles.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@&lt;/code&gt; - for matches in web addresses.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Chrome hidden commands&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;chrome://chrome-urls&lt;/code&gt; - list of all commands&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://flags&lt;/code&gt; - enable experiments and development features&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://interstitials&lt;/code&gt; - errors and warnings&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://net-internals&lt;/code&gt; - network internals (events, dns, cache)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://network-errors&lt;/code&gt; - network errors&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://net-export&lt;/code&gt; - start logging future network activity to a file&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://safe-browsing&lt;/code&gt; - safe browsing options&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://user-actions&lt;/code&gt; - record all user actions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://restart&lt;/code&gt; - restart chrome&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;chrome://dino&lt;/code&gt; - ERR_INTERNET_DISCONNECTED...&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cache:&amp;lt;website-address&amp;gt;&lt;/code&gt; - view the cached version of the web page&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Bypass WAFs by Shortening IP Address (by &lt;a href="https://twitter.com/0xInfection"&gt;0xInfection&lt;/a&gt;)&lt;/h6&gt; 
&lt;p&gt;IP addresses can be shortened by dropping the zeroes:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://1.0.0.1 → http://1.1
http://127.0.0.1 → http://127.1
http://192.168.0.1 → http://192.168.1

http://0xC0A80001 or http://3232235521 → 192.168.0.1
http://192.168.257 → 192.168.1.1
http://192.168.516 → 192.168.2.4
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This bypasses WAF filters for SSRF, open-redirect, etc where any IP as input gets blacklisted.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For more information please see &lt;a href="http://www.pc-help.org/obscure.htm"&gt;How to Obscure Any URL&lt;/a&gt; and &lt;a href="https://stuff-things.net/2014/09/25/magic-ip-address-shortcuts/"&gt;Magic IP Address Shortcuts&lt;/a&gt;.&lt;/p&gt; 
&lt;h6&gt;Hashing, encryption and encoding (by &lt;a href="https://twitter.com/spazef0rze"&gt;Michal Špaček&lt;/a&gt;)&lt;/h6&gt; 
&lt;p&gt;&lt;em&gt;Hashing&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;plaintext &lt;span&gt;➡&lt;/span&gt; hash&lt;br&gt; hash &lt;span&gt;⛔&lt;/span&gt; plaintext&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Symmetric encryption&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;plaintext &lt;span&gt;➡&lt;/span&gt; &lt;span&gt;🔑&lt;/span&gt; &lt;span&gt;➡&lt;/span&gt; ciphertext&lt;br&gt; plaintext &lt;span&gt;⬅&lt;/span&gt; &lt;span&gt;🔑&lt;/span&gt; &lt;span&gt;⬅&lt;/span&gt; ciphertext&lt;br&gt; (&lt;span&gt;🔑&lt;/span&gt; shared key)&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Asymmetric encryption&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;plaintext &lt;span&gt;➡&lt;/span&gt; &lt;span&gt;🔑&lt;/span&gt; &lt;span&gt;➡&lt;/span&gt; ciphertext&lt;br&gt; plaintext &lt;span&gt;⬅&lt;/span&gt; &lt;span&gt;〽&lt;/span&gt; &lt;span&gt;⬅&lt;/span&gt; ciphertext&lt;br&gt; (&lt;span&gt;🔑&lt;/span&gt; public key, &lt;span&gt;〽&lt;/span&gt; private key)&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Encoding&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;text &lt;span&gt;➡&lt;/span&gt; encoded&lt;br&gt; text &lt;span&gt;⬅&lt;/span&gt; encoded&lt;/p&gt; 
&lt;h4&gt;Shell One-liners &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;Table of Contents&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-terminal"&gt;terminal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-busybox"&gt;busybox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-mount"&gt;mount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-fuser"&gt;fuser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-lsof"&gt;lsof&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-ps"&gt;ps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-top"&gt;top&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-vmstat"&gt;vmstat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-iostat"&gt;iostat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-strace"&gt;strace&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-kill"&gt;kill&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-find"&gt;find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-diff"&gt;diff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-vimdiff"&gt;vimdiff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-tail"&gt;tail&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-cpulimit"&gt;cpulimit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-pwdx"&gt;pwdx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-tr"&gt;tr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-chmod"&gt;chmod&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-who"&gt;who&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-last"&gt;last&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-screen"&gt;screen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-script"&gt;script&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-du"&gt;du&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-inotifywait"&gt;inotifywait&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-openssl"&gt;openssl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-secure-delete"&gt;secure-delete&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-dd"&gt;dd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-gpg"&gt;gpg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-system-other"&gt;system-other&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-curl"&gt;curl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-httpie"&gt;httpie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-ssh"&gt;ssh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-linux-dev"&gt;linux-dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-tcpdump"&gt;tcpdump&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-tcpick"&gt;tcpick&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-ngrep"&gt;ngrep&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-hping3"&gt;hping3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-nmap"&gt;nmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-netcat"&gt;netcat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-socat"&gt;socat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-p0f"&gt;p0f&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-gnutls-cli"&gt;gnutls-cli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-netstat"&gt;netstat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-rsync"&gt;rsync&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-host"&gt;host&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-dig"&gt;dig&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-certbot"&gt;certbot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-network-other"&gt;network-other&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-git"&gt;git&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-awk"&gt;awk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-sed"&gt;sed&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-grep"&gt;grep&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#tool-perl"&gt;perl&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Linux_console"&gt;terminal&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Reload shell without exit&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Close shell keeping all subprocess running&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;disown -a &amp;amp;&amp;amp; exit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Exit without saving shell history&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;kill -9 $$
unset HISTFILE &amp;amp;&amp;amp; exit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Perform a branching conditional&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;true &amp;amp;&amp;amp; echo success
false || echo failed
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Pipe stdout and stderr to separate commands&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;some_command &amp;gt; &amp;gt;(/bin/cmd_for_stdout) 2&amp;gt; &amp;gt;(/bin/cmd_for_stderr)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Redirect stdout and stderr each to separate files and print both to the screen&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;(some_command 2&amp;gt;&amp;amp;1 1&amp;gt;&amp;amp;3 | tee errorlog ) 3&amp;gt;&amp;amp;1 1&amp;gt;&amp;amp;2 | tee stdoutlog
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;List of commands you use most often&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;history | \
awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | \
grep -v "./" | \
column -c3 -s " " -t | \
sort -nr | nl |  head -n 20
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Sterilize bash history&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;function sterile() {

  history | awk '$2 != "history" { $1=""; print $0 }' | egrep -vi "\
curl\b+.*(-E|--cert)\b+.*\b*|\
curl\b+.*--pass\b+.*\b*|\
curl\b+.*(-U|--proxy-user).*:.*\b*|\
curl\b+.*(-u|--user).*:.*\b*
.*(-H|--header).*(token|auth.*)\b+.*|\
wget\b+.*--.*password\b+.*\b*|\
http.?://.+:.+@.*\
" &amp;gt; $HOME/histbuff; history -r $HOME/histbuff;

}

export PROMPT_COMMAND="sterile"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Look also: &lt;a href="https://github.com/lbonanomi/go/raw/master/revisionist.go"&gt;A naive utility to censor credentials in command history&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h6&gt;Quickly backup a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp filename{,.orig}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Empty a file (truncate to 0 size)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt;filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Delete all files in a folder that don't match a certain file extension&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;rm !(*.foo|*.bar|*.baz)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Pass multi-line string to a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# cat  &amp;gt;filename ... - overwrite the file
# cat &amp;gt;&amp;gt;filename ... - append to a file
cat &amp;gt; filename &amp;lt;&amp;lt; __EOF__
data data data
__EOF__
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Edit a file on a remote host using vim&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;vim scp://user@host//etc/fstab
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Create a directory and change into it at the same time&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mkd() { mkdir -p "$@" &amp;amp;&amp;amp; cd "$@"; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Convert uppercase files to lowercase files&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;rename 'y/A-Z/a-z/' *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print a row of characters across the terminal&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;printf "%`tput cols`s" | tr ' ' '#'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show shell history without line numbers&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;history | cut -c 8-
fc -l -n 1 | sed 's/^\s*//'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Run command(s) after exit session&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cat &amp;gt; /etc/profile &amp;lt;&amp;lt; __EOF__
_after_logout() {

  username=$(whoami)

  for _pid in $(ps afx | grep sshd | grep "$username" | awk '{print $1}') ; do

    kill -9 $_pid

  done

}
trap _after_logout EXIT
__EOF__
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate a sequence of numbers&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;for ((i=1; i&amp;lt;=10; i+=2)) ; do echo $i ; done
# alternative: seq 1 2 10

for ((i=5; i&amp;lt;=10; ++i)) ; do printf '%02d\n' $i ; done
# alternative: seq -w 5 10

for i in {1..10} ; do echo $i ; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Simple Bash filewatching&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;unset MAIL; export MAILCHECK=1; export MAILPATH='$FILE_TO_WATCH?$MESSAGE'
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.busybox.net/"&gt;busybox&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Static HTTP web server&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;busybox httpd -p $PORT -h $HOME [-c httpd.conf]
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Mount_(Unix)"&gt;mount&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Mount a temporary ram partition&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mount -t tmpfs tmpfs /mnt -o size=64M
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; - filesystem type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-o&lt;/code&gt; - mount options&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Remount a filesystem as read/write&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mount -o remount,rw /
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Fuser_(Unix)"&gt;fuser&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show which processes use the files/directories&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fuser /var/log/daemon.log
fuser -v /home/supervisor
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Kills a process that is locking a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fuser -ki filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-i&lt;/code&gt; - interactive option&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Kills a process that is locking a file with specific signal&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fuser -k -HUP filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--list-signals&lt;/code&gt; - list available signal names&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Show what PID is listening on specific port&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fuser -v 53/udp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show all processes using the named filesystems or block device&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;fuser -mv /var/www
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Lsof"&gt;lsof&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show process that use internet connection at the moment&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -P -i -n
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show process that use specific port number&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -i tcp:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Lists all listening ports together with the PID of the associated process&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -Pan -i tcp -i udp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;List all open ports and their owning executables&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -i -P | grep -i "listen"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show all open ports&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -Pnl -i
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show open ports (LISTEN)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -Pni4 | grep LISTEN | column -t
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;List all files opened by a particular command&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -c "process"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;View user activity per directory&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -u username -a +D /etc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show 10 largest open files&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof / | \
awk '{ if($7 &amp;gt; 1048576) print $7/1048576 "MB" " " $9 " " $1 }' | \
sort -n -u | tail | column -t
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show current working directory of a process&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;lsof -p &amp;lt;PID&amp;gt; | grep cwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Ps_(Unix)"&gt;ps&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show a 4-way scrollable process tree with full details&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ps awwfux | less -S
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Processes per user counter&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ps hax -o user | sort | uniq -c | sort -r
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show all processes by name with main header&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ps -lfC nginx
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Find_(Unix)"&gt;find&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Find files that have been modified on your system in the past 60 minutes&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find / -mmin 60 -type f
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Find all files larger than 20M&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find / -type f -size +20M
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Find duplicate files (based on MD5 hash)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find -type f -exec md5sum '{}' ';' | sort | uniq --all-repeated=separate -w 33
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Change permission only for files&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd /var/www/site &amp;amp;&amp;amp; find . -type f -exec chmod 766 {} \;
cd /var/www/site &amp;amp;&amp;amp; find . -type f -exec chmod 664 {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Change permission only for directories&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd /var/www/site &amp;amp;&amp;amp; find . -type d -exec chmod g+x {} \;
cd /var/www/site &amp;amp;&amp;amp; find . -type d -exec chmod g+rwx {} +
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Find files and directories for specific user/group&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# User:
find . -user &amp;lt;username&amp;gt; -print
find /etc -type f -user &amp;lt;username&amp;gt; -name "*.conf"

# Group:
find /opt -group &amp;lt;group&amp;gt;
find /etc -type f -group &amp;lt;group&amp;gt; -iname "*.conf"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Find files and directories for all without specific user/group&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# User:
find . \! -user &amp;lt;username&amp;gt; -print

# Group:
find . \! -group &amp;lt;group&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Looking for files/directories that only have certain permission&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# User
find . -user &amp;lt;username&amp;gt; -perm -u+rw # -rw-r--r--
find /home -user $(whoami) -perm 777 # -rwxrwxrwx

# Group:
find /home -type d -group &amp;lt;group&amp;gt; -perm 755 # -rwxr-xr-x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Delete older files than 60 days&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find . -type f -mtime +60 -delete
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Recursively remove all empty sub-directories from a directory&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find . -depth  -type d  -empty -exec rmdir {} \;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;How to find all hard links to a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find &amp;lt;/path/to/dir&amp;gt; -xdev -samefile filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Recursively find the latest modified files&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find . -type f -exec stat --format '%Y :%y %n' "{}" \; | sort -nr | cut -d: -f2- | head
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Recursively find/replace of a string with sed&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find . -not -path '*/\.git*' -type f -print0 | xargs -0 sed -i 's/foo/bar/g'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Recursively find/replace of a string in directories and file names&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find . -depth -name '*test*' -execdir bash -c 'mv -v "$1" "${1//foo/bar}"' _ {} \;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Recursively find suid executables&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;find / \( -perm -4000 -o -perm -2000 \) -type f -exec ls -la {} \;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Top_(software)"&gt;top&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Use top to monitor only all processes with the specific string&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;top -p $(pgrep -d , &amp;lt;str&amp;gt;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;str&amp;gt;&lt;/code&gt; - process containing string (eg. nginx, worker)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Vmstat"&gt;vmstat&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show current system utilization (fields in kilobytes)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;vmstat 2 20 -t -w
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;2&lt;/code&gt; - number of times with a defined time interval (delay)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;20&lt;/code&gt; - each execution of the command (count)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; - show timestamp&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-w&lt;/code&gt; - wide output&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-S M&lt;/code&gt; - output of the fields in megabytes instead of kilobytes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Show current system utilization will get refreshed every 5 seconds&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;vmstat 5 -w
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Display report a summary of disk operations&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;vmstat -D
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Display report of event counters and memory stats&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;vmstat -s
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Display report about kernel objects stored in slab layer cache&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;vmstat -m
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Iostat"&gt;iostat&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show information about the CPU usage, and I/O statistics about all the partitions&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;iostat 2 10 -t -m
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;2&lt;/code&gt; - number of times with a defined time interval (delay)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;10&lt;/code&gt; - each execution of the command (count)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; - show timestamp&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-m&lt;/code&gt; - fields in megabytes (&lt;code&gt;-k&lt;/code&gt; - in kilobytes, default)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Show information only about the CPU utilization&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;iostat 2 10 -t -m -c
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show information only about the disk utilization&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;iostat 2 10 -t -m -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show information only about the LVM utilization&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;iostat -N
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Strace"&gt;strace&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Track with child processes&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1)
strace -f -p $(pidof glusterfsd)

# 2)
strace -f $(pidof php-fpm | sed 's/\([0-9]*\)/\-p \1/g')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Track process with 30 seconds limit&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;timeout 30 strace $(&amp;lt; /var/run/zabbix/zabbix_agentd.pid)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Track processes and redirect output to a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ps auxw | grep '[a]pache' | awk '{print " -p " $2}' | \
xargs strace -o /tmp/strace-apache-proc.out
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Track with print time spent in each syscall and limit length of print strings&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ps auxw | grep '[i]init_policy' | awk '{print " -p " $2}' | \
xargs strace -f -e trace=network -T -s 10000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Track the open request of a network port&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;strace -f -e trace=bind nc -l 80
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Track the open request of a network port (show TCP/UDP)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;strace -f -e trace=network nc -lu 80
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Kill_(command)"&gt;kill&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Kill a process running on port&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;kill -9 $(lsof -i :&amp;lt;port&amp;gt; | awk '{l=$2} END {print l}')
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Diff"&gt;diff&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Compare two directory trees&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;diff &amp;lt;(cd directory1 &amp;amp;&amp;amp; find | sort) &amp;lt;(cd directory2 &amp;amp;&amp;amp; find | sort)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Compare output of two commands&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;diff &amp;lt;(cat /etc/passwd) &amp;lt;(cut -f2 /etc/passwd)
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://vimdoc.sourceforge.net/htmldoc/diff.html"&gt;vimdiff&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Highlight the exact differences, based on characters and words&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;vimdiff file1 file2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Compare two JSON files&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;vimdiff &amp;lt;(jq -S . A.json) &amp;lt;(jq -S . B.json)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Compare Hex dump&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;d(){ vimdiff &amp;lt;(f $1) &amp;lt;(f $2);};f(){ hexdump -C $1 | cut -d' ' -f3- | tr -s ' ';}; d ~/bin1 ~/bin2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;diffchar&lt;/h6&gt; 
&lt;p&gt;Save &lt;a href="https://raw.githubusercontent.com/vim-scripts/diffchar.vim/master/plugin/diffchar.vim"&gt;diffchar&lt;/a&gt; @ &lt;code&gt;~/.vim/plugins&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Click &lt;code&gt;F7&lt;/code&gt; to switch between diff modes&lt;/p&gt; 
&lt;p&gt;Usefull &lt;code&gt;vimdiff&lt;/code&gt; commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;qa&lt;/code&gt; to exit all windows&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;:vertical resize 70&lt;/code&gt; to resize window&lt;/li&gt; 
 &lt;li&gt;set window width &lt;code&gt;Ctrl+W [N columns]+(Shift+)&amp;lt;\&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Tail_(Unix)"&gt;tail&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Annotate tail -f with timestamps&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tail -f file | while read ; do echo "$(date +%T.%N) $REPLY" ; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Analyse an Apache access log for the most common IP addresses&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tail -10000 access_log | awk '{print $1}' | sort | uniq -c | sort -n | tail
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Analyse web server log and show only 5xx http codes&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tail -n 100 -f /path/to/logfile | grep "HTTP/[1-2].[0-1]\" [5]"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Tar_(computing)"&gt;tar&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;System backup with exclude specific directories&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd /
tar -czvpf /mnt/system$(date +%d%m%Y%s).tgz --directory=/ \
--exclude=proc/* --exclude=sys/* --exclude=dev/* --exclude=mnt/* .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;System backup with exclude specific directories (pigz)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd /
tar cvpf /backup/snapshot-$(date +%d%m%Y%s).tgz --directory=/ \
--exclude=proc/* --exclude=sys/* --exclude=dev/* \
--exclude=mnt/* --exclude=tmp/* --use-compress-program=pigz .
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Dump_(program)"&gt;dump&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;System backup to file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dump -y -u -f /backup/system$(date +%d%m%Y%s).lzo /
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Restore system from lzo file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd /
restore -rf /backup/system$(date +%d%m%Y%s).lzo
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://cpulimit.sourceforge.net/"&gt;cpulimit&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Limit the cpu usage of a process&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cpulimit -p pid -l 50
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.cyberciti.biz/faq/unix-linux-pwdx-command-examples-usage-syntax/"&gt;pwdx&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show current working directory of a process&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pwdx &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.cyberciti.biz/faq/taskset-cpu-affinity-command/"&gt;taskset&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Start a command on only one CPU core&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;taskset -c 0 &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Tr_(Unix)"&gt;tr&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show directories in the PATH, one per line&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tr : '\n' &amp;lt;&amp;lt;&amp;lt;$PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Chmod"&gt;chmod&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Remove executable bit from all files in the current directory&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chmod -R -x+X *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Restore permission for /bin/chmod&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1:
cp /bin/ls chmod.01
cp /bin/chmod chmod.01
./chmod.01 700 file

# 2:
/bin/busybox chmod 0700 /bin/chmod

# 3:
setfacl --set u::rwx,g::---,o::--- /bin/chmod
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Who_(Unix)"&gt;who&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Find last reboot time&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;who -b
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Detect a user sudo-su'd into the current shell&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;[[ $(who -m | awk '{ print $1 }') == $(whoami) ]] || echo "You are su-ed to $(whoami)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.howtoforge.com/linux-last-command/"&gt;last&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Was the last reboot a panic?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;(last -x -f $(ls -1t /var/log/wtmp* | head -2 | tail -1); last -x -f /var/log/wtmp) | \
grep -A1 reboot | head -2 | grep -q shutdown &amp;amp;&amp;amp; echo "Expected reboot" || echo "Panic reboot"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/GNU_Screen"&gt;screen&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Start screen in detached mode&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;screen -d -m &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Attach to an existing screen session&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;screen -r -d &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Script_(Unix)"&gt;script&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Record and replay terminal session&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;### Record session
# 1)
script -t 2&amp;gt;~/session.time -a ~/session.log

# 2)
script --timing=session.time session.log

### Replay session
scriptreplay --timing=session.time session.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/GNU_Screen"&gt;du&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show 20 biggest directories with 'K M G'&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;du | \
sort -r -n | \
awk '{split("K M G",v); s=1; while($1&amp;gt;1024){$1/=1024; s++} print int($1)" "v[s]"\t"$2}' | \
head -n 20
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/GNU_Screen"&gt;inotifywait&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Init tool everytime a file in a directory is modified&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;while true ; do inotifywait -r -e MODIFY dir/ &amp;amp;&amp;amp; ls dir/ ; done;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.openssl.org/"&gt;openssl&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Testing connection to the remote host&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;echo | openssl s_client -connect google.com:443 -showcerts
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Testing connection to the remote host (debug mode)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;echo | openssl s_client -connect google.com:443 -showcerts -tlsextdebug -status
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Testing connection to the remote host (with SNI support)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;echo | openssl s_client -showcerts -servername google.com -connect google.com:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Testing connection to the remote host with specific ssl version&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;openssl s_client -tls1_2 -connect google.com:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Testing connection to the remote host with specific ssl cipher&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;openssl s_client -cipher 'AES128-SHA' -connect google.com:443
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Verify 0-RTT&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;_host="example.com"

cat &amp;gt; req.in &amp;lt;&amp;lt; __EOF__
HEAD / HTTP/1.1
Host: $_host
Connection: close
__EOF__

openssl s_client -connect ${_host}:443 -tls1_3 -sess_out session.pem -ign_eof &amp;lt; req.in
openssl s_client -connect ${_host}:443 -tls1_3 -sess_in session.pem -early_data req.in
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate private key without passphrase&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# _len: 2048, 4096
( _fd="private.key" ; _len="2048" ; \
openssl genrsa -out ${_fd} ${_len} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate private key with passphrase&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# _ciph: aes128, aes256
# _len: 2048, 4096
( _ciph="aes128" ; _fd="private.key" ; _len="2048" ; \
openssl genrsa -${_ciph} -out ${_fd} ${_len} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Remove passphrase from private key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; _fd_unp="private_unp.key" ; \
openssl rsa -in ${_fd} -out ${_fd_unp} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Encrypt existing private key with a passphrase&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# _ciph: aes128, aes256
( _ciph="aes128" ; _fd="private.key" ; _fd_pass="private_pass.key" ; \
openssl rsa -${_ciph} -in ${_fd} -out ${_fd_pass}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Check private key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; \
openssl rsa -check -in ${_fd} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Get public key from private key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; _fd_pub="public.key" ; \
openssl rsa -pubout -in ${_fd} -out ${_fd_pub} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate private key and CSR&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; _fd_csr="request.csr" ; _len="2048" ; \
openssl req -out ${_fd_csr} -new -newkey rsa:${_len} -nodes -keyout ${_fd} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate CSR&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; _fd_csr="request.csr" ; \
openssl req -out ${_fd_csr} -new -key ${_fd} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate CSR (metadata from existing certificate)&lt;/h6&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Where &lt;code&gt;private.key&lt;/code&gt; is the existing private key. As you can see you do not generate this CSR from your certificate (public key). Also you do not generate the "same" CSR, just a new one to request a new certificate.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; _fd_csr="request.csr" ; _fd_crt="cert.crt" ; \
openssl x509 -x509toreq -in ${_fd_crt} -out ${_fd_csr} -signkey ${_fd} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate CSR with -config param&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; _fd_csr="request.csr" ; \
openssl req -new -sha256 -key ${_fd} -out ${_fd_csr} \
-config &amp;lt;(
cat &amp;lt;&amp;lt; __EOF__
[req]
default_bits        = 2048
default_md          = sha256
prompt              = no
distinguished_name  = dn
req_extensions      = req_ext

[ dn ]
C   = "&amp;lt;two-letter ISO abbreviation for your country&amp;gt;"
ST  = "&amp;lt;state or province where your organisation is legally located&amp;gt;"
L   = "&amp;lt;city where your organisation is legally located&amp;gt;"
O   = "&amp;lt;legal name of your organisation&amp;gt;"
OU  = "&amp;lt;section of the organisation&amp;gt;"
CN  = "&amp;lt;fully qualified domain name&amp;gt;"

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = &amp;lt;fully qualified domain name&amp;gt;
DNS.2 = &amp;lt;next domain&amp;gt;
DNS.3 = &amp;lt;next domain&amp;gt;
__EOF__
))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Other values in &lt;code&gt;[ dn ]&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;countryName            = "DE"                     # C=
stateOrProvinceName    = "Hessen"                 # ST=
localityName           = "Keller"                 # L=
postalCode             = "424242"                 # L/postalcode=
postalAddress          = "Keller"                 # L/postaladdress=
streetAddress          = "Crater 1621"            # L/street=
organizationName       = "apfelboymschule"        # O=
organizationalUnitName = "IT Department"          # OU=
commonName             = "example.com"            # CN=
emailAddress           = "webmaster@example.com"  # CN/emailAddress=
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example of &lt;code&gt;oids&lt;/code&gt; (you'll probably also have to make OpenSSL know about the new fields required for EV by adding the following under &lt;code&gt;[new_oids]&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[req]
...
oid_section         = new_oids

[ new_oids ]
postalCode = 2.5.4.17
streetAddress = 2.5.4.9
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Full example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; _fd_csr="request.csr" ; \
openssl req -new -sha256 -key ${_fd} -out ${_fd_csr} \
-config &amp;lt;(
cat &amp;lt;&amp;lt; __EOF__
[req]
default_bits        = 2048
default_md          = sha256
prompt              = no
distinguished_name  = dn
req_extensions      = req_ext
oid_section         = new_oids

[ new_oids ]
serialNumber = 2.5.4.5
streetAddress = 2.5.4.9
postalCode = 2.5.4.17
businessCategory = 2.5.4.15

[ dn ]
serialNumber=00001111
businessCategory=Private Organization
jurisdictionC=DE
C=DE
ST=Hessen
L=Keller
postalCode=424242
streetAddress=Crater 1621
O=AV Company
OU=IT
CN=example.com

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = example.com
__EOF__
))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information please look at these great explanations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc5280"&gt;RFC 5280&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://apfelboymchen.net/gnu/notes/openssl%20multidomain%20with%20config%20files.html"&gt;How to create multidomain certificates using config files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/romainnorberg/464758a6620228b977212a3cf20c3e08"&gt;Generate a multi domains certificate using config files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://expeditedsecurity.com/blog/openssl-csr-command/"&gt;Your OpenSSL CSR command is out of date&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tbs-certificats.com/openssl-dem-server-cert.cnf"&gt;OpenSSL example configuration file&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.alvestrand.no/objectid/"&gt;Object Identifiers (OIDs)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openssl/openssl/raw/master/crypto/objects/objects.txt"&gt;openssl objects.txt&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;List available EC curves&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;openssl ecparam -list_curves
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print ECDSA private and public keys&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; \
openssl ec -in ${_fd} -noout -text )

# For x25519 only extracting public key
( _fd="private.key" ; _fd_pub="public.key" ; \
openssl pkey -in ${_fd} -pubout -out ${_fd_pub} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate ECDSA private key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# _curve: prime256v1, secp521r1, secp384r1
( _fd="private.key" ; _curve="prime256v1" ; \
openssl ecparam -out ${_fd} -name ${_curve} -genkey )

# _curve: X25519
( _fd="private.key" ; _curve="x25519" ; \
openssl genpkey -algorithm ${_curve} -out ${_fd} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate private key and CSR (ECC)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# _curve: prime256v1, secp521r1, secp384r1
( _fd="domain.com.key" ; _fd_csr="domain.com.csr" ; _curve="prime256v1" ; \
openssl ecparam -out ${_fd} -name ${_curve} -genkey ; \
openssl req -new -key ${_fd} -out ${_fd_csr} -sha256 )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate self-signed certificate&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# _len: 2048, 4096
( _fd="domain.key" ; _fd_out="domain.crt" ; _len="2048" ; _days="365" ; \
openssl req -newkey rsa:${_len} -nodes \
-keyout ${_fd} -x509 -days ${_days} -out ${_fd_out} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate self-signed certificate from existing private key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# _len: 2048, 4096
( _fd="domain.key" ; _fd_out="domain.crt" ; _days="365" ; \
openssl req -key ${_fd} -nodes \
-x509 -days ${_days} -out ${_fd_out} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate self-signed certificate from existing private key and csr&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# _len: 2048, 4096
( _fd="domain.key" ; _fd_csr="domain.csr" ; _fd_out="domain.crt" ; _days="365" ; \
openssl x509 -signkey ${_fd} -nodes \
-in ${_fd_csr} -req -days ${_days} -out ${_fd_out} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate DH public parameters&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _dh_size="2048" ; \
openssl dhparam -out /etc/nginx/ssl/dhparam_${_dh_size}.pem "$_dh_size" )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Display DH public parameters&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;openssl pkeyparam -in dhparam.pem -text
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Extract private key from pfx&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd_pfx="cert.pfx" ; _fd_key="key.pem" ; \
openssl pkcs12 -in ${_fd_pfx} -nocerts -nodes -out ${_fd_key} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Extract private key and certs from pfx&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd_pfx="cert.pfx" ; _fd_pem="key_certs.pem" ; \
openssl pkcs12 -in ${_fd_pfx} -nodes -out ${_fd_pem} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Extract certs from p7b&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# PKCS#7 file doesn't include private keys.
( _fd_p7b="cert.p7b" ; _fd_pem="cert.pem" ; \
openssl pkcs7 -inform DER -outform PEM -in ${_fd_p7b} -print_certs &amp;gt; ${_fd_pem})
# or:
openssl pkcs7 -print_certs -in -in ${_fd_p7b} -out ${_fd_pem})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Convert DER to PEM&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd_der="cert.crt" ; _fd_pem="cert.pem" ; \
openssl x509 -in ${_fd_der} -inform der -outform pem -out ${_fd_pem} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Convert PEM to DER&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd_der="cert.crt" ; _fd_pem="cert.pem" ; \
openssl x509 -in ${_fd_pem} -outform der -out ${_fd_der} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Verification of the private key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="private.key" ; \
openssl rsa -noout -text -in ${_fd} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Verification of the public key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1)
( _fd="public.key" ; \
openssl pkey -noout -text -pubin -in ${_fd} )

# 2)
( _fd="private.key" ; \
openssl rsa -inform PEM -noout -in ${_fd} &amp;amp;&amp;gt; /dev/null ; \
if [ $? = 0 ] ; then echo -en "OK\n" ; fi )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Verification of the certificate&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd="certificate.crt" ; # format: pem, cer, crt \
openssl x509 -noout -text -in ${_fd} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Verification of the CSR&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;( _fd_csr="request.csr" ; \
openssl req -text -noout -in ${_fd_csr} )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Check the private key and the certificate are match&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;(openssl rsa -noout -modulus -in private.key | openssl md5 ; \
openssl x509 -noout -modulus -in certificate.crt | openssl md5) | uniq
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Check the private key and the CSR are match&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;(openssl rsa -noout -modulus -in private.key | openssl md5 ; \
openssl req -noout -modulus -in request.csr | openssl md5) | uniq
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://wiki.archlinux.org/index.php/Securely_wipe_disk"&gt;secure-delete&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Secure delete with shred&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;shred -vfuz -n 10 file
shred --verbose --random-source=/dev/urandom -n 1 /dev/sda
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Secure delete with scrub&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;scrub -p dod /dev/sda
scrub -p dod -r file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Secure delete with badblocks&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;badblocks -s -w -t random -v /dev/sda
badblocks -c 10240 -s -w -t random -v /dev/sda
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Secure delete with secure-delete&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;srm -vz /tmp/file
sfill -vz /local
sdmem -v
swapoff /dev/sda5 &amp;amp;&amp;amp; sswap -vz /dev/sda5
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Dd_(Unix)"&gt;dd&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Show dd status every so often&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dd &amp;lt;dd_params&amp;gt; status=progress
watch --interval 5 killall -USR1 dd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Redirect output to a file with dd&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;echo "string" | dd of=filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.gnupg.org/"&gt;gpg&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Export public key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gpg --export --armor "&amp;lt;username&amp;gt;" &amp;gt; username.pkey
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--export&lt;/code&gt; - export all keys from all keyrings or specific key&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-a|--armor&lt;/code&gt; - create ASCII armored output&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Encrypt file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gpg -e -r "&amp;lt;username&amp;gt;" dump.sql
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-e|--encrypt&lt;/code&gt; - encrypt data&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-r|--recipient&lt;/code&gt; - encrypt for specific 
  &lt;username&gt;&lt;/username&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Decrypt file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gpg -o dump.sql -d dump.sql.gpg
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-o|--output&lt;/code&gt; - use as output file&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-d|--decrypt&lt;/code&gt; - decrypt data (default)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Search recipient&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gpg --keyserver hkp://keyserver.ubuntu.com --search-keys "&amp;lt;username&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--keyserver&lt;/code&gt; - set specific key server&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--search-keys&lt;/code&gt; - search for keys on a key server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;List all of the packets in an encrypted file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gpg --batch --list-packets archive.gpg
gpg2 --batch --list-packets archive.gpg
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge#tool-system-other"&gt;system-other&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Reboot system from init&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;exec /sbin/init 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Init system from single user mode&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;exec /sbin/init
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show current working directory of a process&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;readlink -f /proc/&amp;lt;PID&amp;gt;/cwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show actual pathname of the executed command&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;readlink -f /proc/&amp;lt;PID&amp;gt;/exe
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Tool: &lt;a href="https://curl.haxx.se"&gt;curl&lt;/a&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -Iks https://www.google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-I&lt;/code&gt; - show response headers only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-k&lt;/code&gt; - insecure connection when using ssl&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-s&lt;/code&gt; - silent mode (not display body)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -Iks --location -X GET -A "x-agent" https://www.google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--location&lt;/code&gt; - follow redirects&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-X&lt;/code&gt; - set method&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-A&lt;/code&gt; - set user-agent&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -Iks --location -X GET -A "x-agent" --proxy http://127.0.0.1:16379 https://www.google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--proxy [socks5://|http://]&lt;/code&gt; - set proxy server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -o file.pdf -C - https://example.com/Aiju2goo0Ja2.pdf
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-o&lt;/code&gt; - write output to file&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-C&lt;/code&gt; - resume the transfer&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Find your external IP address (external services)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl ipinfo.io
curl ipinfo.io/ip
curl icanhazip.com
curl ifconfig.me/ip ; echo
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Repeat URL request&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# URL sequence substitution with a dummy query string:
curl -ks https://example.com/?[1-20]

# With shell 'for' loop:
for i in {1..20} ; do curl -ks https://example.com/ ; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Check DNS and HTTP trace with headers for specific domains&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;### Set domains and external dns servers.
_domain_list=(google.com) ; _dns_list=("8.8.8.8" "1.1.1.1")

for _domain in "${_domain_list[@]}" ; do

  printf '=%.0s' {1..48}

  echo

  printf "[\\e[1;32m+\\e[m] resolve: %s\\n" "$_domain"

  for _dns in "${_dns_list[@]}" ; do

    # Resolve domain.
    host "${_domain}" "${_dns}"

    echo

  done

  for _proto in http https ; do

    printf "[\\e[1;32m+\\e[m] trace + headers: %s://%s\\n" "$_proto" "$_domain"

    # Get trace and http headers.
    curl -Iks -A "x-agent" --location "${_proto}://${_domain}"

    echo

  done

done

unset _domain_list _dns_list
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://httpie.org/"&gt;httpie&lt;/a&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http -p Hh https://www.google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-p&lt;/code&gt; - print request and response headers 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;H&lt;/code&gt; - request headers&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; - request body&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;h&lt;/code&gt; - response headers&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;b&lt;/code&gt; - response body&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http -p Hh https://www.google.com --follow --verify no
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-F, --follow&lt;/code&gt; - follow redirects&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--verify no&lt;/code&gt; - skip SSL verification&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http -p Hh https://www.google.com --follow --verify no \
--proxy http:http://127.0.0.1:16379
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--proxy [http:]&lt;/code&gt; - set proxy server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.openssh.com/"&gt;ssh&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Escape Sequence&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;# Supported escape sequences:
~.  - terminate connection (and any multiplexed sessions)
~B  - send a BREAK to the remote system
~C  - open a command line
~R  - Request rekey (SSH protocol 2 only)
~^Z - suspend ssh
~#  - list forwarded connections
~&amp;amp;  - background ssh (when waiting for connections to terminate)
~?  - this message
~~  - send the escape character by typing it twice
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Compare a remote file with a local file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh user@host cat /path/to/remotefile | diff /path/to/localfile -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;SSH connection through host in the middle&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh -t reachable_host ssh unreachable_host
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Run command over SSH on remote host&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cat &amp;gt; cmd.txt &amp;lt;&amp;lt; __EOF__
cat /etc/hosts
__EOF__

ssh host -l user $(&amp;lt;cmd.txt)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Get public key from private key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh-keygen -y -f ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Get all fingerprints&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh-keygen -l -f .ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;SSH authentication with user password&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no user@remote_host
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;SSH authentication with publickey&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes -i id_rsa user@remote_host
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Simple recording SSH session&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;function _ssh_sesslog() {

  _sesdir="&amp;lt;path/to/session/logs&amp;gt;"

  mkdir -p "${_sesdir}" &amp;amp;&amp;amp; \
  ssh $@ 2&amp;gt;&amp;amp;1 | tee -a "${_sesdir}/$(date +%Y%m%d).log"

}

# Alias:
alias ssh='_ssh_sesslog'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Using Keychain for SSH logins&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;### Delete all of ssh-agent's keys.
function _scl() {

  /usr/bin/keychain --clear

}

### Add key to keychain.
function _scg() {

  /usr/bin/keychain /path/to/private-key
  source "$HOME/.keychain/$HOSTNAME-sh"

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;SSH login without processing any login scripts&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ssh -tt user@host bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;SSH local port forwarding&lt;/h6&gt; 
&lt;p&gt;Example 1:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Forwarding our local 2250 port to nmap.org:443 from localhost through localhost
host1&amp;gt; ssh -L 2250:nmap.org:443 localhost

# Connect to the service:
host1&amp;gt; curl -Iks --location -X GET https://localhost:2250
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example 2:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Forwarding our local 9051 port to db.d.x:5432 from localhost through node.d.y
host1&amp;gt; ssh -nNT -L 9051:db.d.x:5432 node.d.y

# Connect to the service:
host1&amp;gt; psql -U db_user -d db_dev -p 9051 -h localhost
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-n&lt;/code&gt; - redirects stdin from &lt;code&gt;/dev/null&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-N&lt;/code&gt; - do not execute a remote command&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-T&lt;/code&gt; - disable pseudo-terminal allocation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;SSH remote port forwarding&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Forwarding our local 9051 port to db.d.x:5432 from host2 through node.d.y
host1&amp;gt; ssh -nNT -R 9051:db.d.x:5432 node.d.y

# Connect to the service:
host2&amp;gt; psql -U postgres -d postgres -p 8000 -h localhost
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.tldp.org/LDP/abs/html/devref1.html"&gt;linux-dev&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Testing remote connection to port&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;timeout 1 bash -c "&amp;lt;/dev/&amp;lt;proto&amp;gt;/&amp;lt;host&amp;gt;/&amp;lt;port&amp;gt;" &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ; echo $?
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;proto&lt;/code&gt; - set protocol (tcp/udp)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;host&amp;gt;&lt;/code&gt; - set remote host&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;port&amp;gt;&lt;/code&gt; - set destination port&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Read and write to TCP or UDP sockets with common bash tools&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;exec 5&amp;lt;&amp;gt;/dev/tcp/&amp;lt;host&amp;gt;/&amp;lt;port&amp;gt;; cat &amp;lt;&amp;amp;5 &amp;amp; cat &amp;gt;&amp;amp;5; exec 5&amp;gt;&amp;amp;-
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://www.tcpdump.org/"&gt;tcpdump&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Filter incoming (on interface) traffic (specific &lt;a href="ip:port"&gt;ip:port&lt;/a&gt;)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -ne -i eth0 -Q in host 192.168.252.1 and port 443
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-n&lt;/code&gt; - don't convert addresses (&lt;code&gt;-nn&lt;/code&gt; will not resolve hostnames or ports)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-e&lt;/code&gt; - print the link-level headers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-i [iface|any]&lt;/code&gt; - set interface&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-Q|-D [in|out|inout]&lt;/code&gt; - choose send/receive direction (&lt;code&gt;-D&lt;/code&gt; - for old tcpdump versions)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;host [ip|hostname]&lt;/code&gt; - set host, also &lt;code&gt;[host not]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[and|or]&lt;/code&gt; - set logic&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;port [1-65535]&lt;/code&gt; - set port number, also &lt;code&gt;[port not]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Filter incoming (on interface) traffic (specific &lt;a href="ip:port"&gt;ip:port&lt;/a&gt;) and write to a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -ne -i eth0 -Q in host 192.168.252.1 and port 443 -c 5 -w tcpdump.pcap
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-c [num]&lt;/code&gt; - capture only num number of packets&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-w [filename]&lt;/code&gt; - write packets to file, &lt;code&gt;-r [filename]&lt;/code&gt; - reading from file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Capture all ICMP packets&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -nei eth0 icmp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Check protocol used (TCP or UDP) for service&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -nei eth0 tcp port 22 -vv -X | egrep "TCP|UDP"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Display ASCII text (to parse the output using grep or other)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -i eth0 -A -s0 port 443
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Grab everything between two keywords&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -i eth0 port 80 -X | sed -n -e '/username/,/=ldap/ p'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Grab user and pass ever plain http&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -i eth0  port http -l -A | egrep -i \
'pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|username:|password:|login:|pass |user ' \
--color=auto --line-buffered -B20
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Extract HTTP User Agent from HTTP request header&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -ei eth0 -nn -A -s1500 -l | grep "User-Agent:"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Capture only HTTP GET and POST packets&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -ei eth0 -s 0 -A -vv \
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420' or 'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x504f5354'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or simply:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -ei eth0 -s 0 -v -n -l | egrep -i "POST /|GET /|Host:"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Rotate capture files&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -ei eth0 -w /tmp/capture-%H.pcap -G 3600 -C 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-G &amp;lt;num&amp;gt;&lt;/code&gt; - pcap will be created every &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt; seconds&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-C &amp;lt;size&amp;gt;&lt;/code&gt; - close the current pcap and open a new one if is larger than &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Top hosts by packets&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -ei enp0s25 -nnn -t -c 200 | cut -f 1,2,3,4 -d '.' | sort | uniq -c | sort -nr | head -n 20
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Excludes any RFC 1918 private address&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;tcpdump -nei eth0 'not (src net (10 or 172.16/12 or 192.168/16) and dst net (10 or 172.16/12 or 192.168/16))'
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://tcpick.sourceforge.net/"&gt;tcpick&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Analyse packets in real-time&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;while true ; do tcpick -a -C -r dump.pcap ; sleep 2 ; clear ; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://ngrep.sourceforge.net/usage.html"&gt;ngrep&lt;/a&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ngrep -d eth0 "www.domain.com" port 443
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-d [iface|any]&lt;/code&gt; - set interface&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[domain]&lt;/code&gt; - set hostname&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;port [1-65535]&lt;/code&gt; - set port number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ngrep -d eth0 "www.domain.com" src host 10.240.20.2 and port 443
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;(host [ip|hostname])&lt;/code&gt; - filter by ip or hostname&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;(port [1-65535])&lt;/code&gt; - filter by port number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ngrep -d eth0 -qt -O ngrep.pcap "www.domain.com" port 443
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-q&lt;/code&gt; - quiet mode (only payloads)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; - added timestamps&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-O [filename]&lt;/code&gt; - save output to file, &lt;code&gt;-I [filename]&lt;/code&gt; - reading from file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ngrep -d eth0 -qt 'HTTP' 'tcp'
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;HTTP&lt;/code&gt; - show http headers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tcp|udp&lt;/code&gt; - set protocol&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[src|dst] host [ip|hostname]&lt;/code&gt; - set direction for specific node&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ngrep -l -q -d eth0 -i "User-Agent: curl*"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-l&lt;/code&gt; - stdout line buffered&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-i&lt;/code&gt; - case-insensitive search&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://www.hping.org/"&gt;hping3&lt;/a&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;hping3 -V -p 80 -s 5050 &amp;lt;scan_type&amp;gt; www.google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-V|--verbose&lt;/code&gt; - verbose mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-p|--destport&lt;/code&gt; - set destination port&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-s|--baseport&lt;/code&gt; - set source port&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;scan_type&amp;gt;&lt;/code&gt; - set scan type 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;-F|--fin&lt;/code&gt; - set FIN flag, port open if no reply&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-S|--syn&lt;/code&gt; - set SYN flag&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-P|--push&lt;/code&gt; - set PUSH flag&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-A|--ack&lt;/code&gt; - set ACK flag (use when ping is blocked, RST response back if the port is open)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-U|--urg&lt;/code&gt; - set URG flag&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-Y|--ymas&lt;/code&gt; - set Y unused flag (0x80 - nullscan), port open if no reply&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-M 0 -UPF&lt;/code&gt; - set TCP sequence number and scan type (URG+PUSH+FIN), port open if no reply&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;hping3 -V -c 1 -1 -C 8 www.google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-c [num]&lt;/code&gt; - packet count&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-1&lt;/code&gt; - set ICMP mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-C|--icmptype [icmp-num]&lt;/code&gt; - set icmp type (default icmp-echo = 8)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;hping3 -V -c 1000000 -d 120 -S -w 64 -p 80 --flood --rand-source &amp;lt;remote_host&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--flood&lt;/code&gt; - sent packets as fast as possible (don't show replies)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--rand-source&lt;/code&gt; - random source address mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-d --data&lt;/code&gt; - data size&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-w|--win&lt;/code&gt; - winsize (default 64)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://nmap.org/"&gt;nmap&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Ping scans the network&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nmap -sP 192.168.0.0/24
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show only open ports&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nmap -F --open 192.168.0.0/24
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Full TCP port scan using with service version detection&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nmap -p 1-65535 -sV -sS -T4 192.168.0.0/24
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Nmap scan and pass output to Nikto&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nmap -p80,443 192.168.0.0/24 -oG - | nikto.pl -h -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Recon specific ip:service with Nmap NSE scripts stack&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Set variables:
_hosts="192.168.250.10"
_ports="80,443"

# Set Nmap NSE scripts stack:
_nmap_nse_scripts="+dns-brute,\
                   +http-auth-finder,\
                   +http-chrono,\
                   +http-cookie-flags,\
                   +http-cors,\
                   +http-cross-domain-policy,\
                   +http-csrf,\
                   +http-dombased-xss,\
                   +http-enum,\
                   +http-errors,\
                   +http-git,\
                   +http-grep,\
                   +http-internal-ip-disclosure,\
                   +http-jsonp-detection,\
                   +http-malware-host,\
                   +http-methods,\
                   +http-passwd,\
                   +http-phpself-xss,\
                   +http-php-version,\
                   +http-robots.txt,\
                   +http-sitemap-generator,\
                   +http-shellshock,\
                   +http-stored-xss,\
                   +http-title,\
                   +http-unsafe-output-escaping,\
                   +http-useragent-tester,\
                   +http-vhosts,\
                   +http-waf-detect,\
                   +http-waf-fingerprint,\
                   +http-xssed,\
                   +traceroute-geolocation.nse,\
                   +ssl-enum-ciphers,\
                   +whois-domain,\
                   +whois-ip"

# Set Nmap NSE script params:
_nmap_nse_scripts_args="dns-brute.domain=${_hosts},http-cross-domain-policy.domain-lookup=true,"
_nmap_nse_scripts_args+="http-waf-detect.aggro,http-waf-detect.detectBodyChanges,"
_nmap_nse_scripts_args+="http-waf-fingerprint.intensive=1"

# Perform scan:
nmap --script="$_nmap_nse_scripts" --script-args="$_nmap_nse_scripts_args" -p "$_ports" "$_hosts"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://netcat.sourceforge.net/"&gt;netcat&lt;/a&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nc -kl 5000
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-l&lt;/code&gt; - listen for an incoming connection&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-k&lt;/code&gt; - listening after client has disconnected&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;gt;filename.out&lt;/code&gt; - save receive data to file (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nc 192.168.0.1 5051 &amp;lt; filename.in
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt; filename.in&lt;/code&gt; - send data to remote host&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nc -vz 10.240.30.3 5000
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-v&lt;/code&gt; - verbose output&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-z&lt;/code&gt; - scan for listening daemons&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nc -vzu 10.240.30.3 1-65535
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-u&lt;/code&gt; - scan only udp ports&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Transfer data file (archive)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;server&amp;gt; nc -l 5000 | tar xzvfp -
client&amp;gt; tar czvfp - /path/to/dir | nc 10.240.30.3 5000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Launch remote shell&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1)
server&amp;gt; nc -l 5000 -e /bin/bash
client&amp;gt; nc 10.240.30.3 5000

# 2)
server&amp;gt; rm -f /tmp/f; mkfifo /tmp/f
server&amp;gt; cat /tmp/f | /bin/bash -i 2&amp;gt;&amp;amp;1 | nc -l 127.0.0.1 5000 &amp;gt; /tmp/f
client&amp;gt; nc 10.240.30.3 5000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Simple file server&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;while true ; do nc -l 5000 | tar -xvf - ; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Simple minimal HTTP Server&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;while true ; do nc -l -p 1500 -c 'echo -e "HTTP/1.1 200 OK\n\n $(date)"' ; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Simple HTTP Server&lt;/h6&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Restarts web server after each request - remove &lt;code&gt;while&lt;/code&gt; condition for only single connection.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cat &amp;gt; index.html &amp;lt;&amp;lt; __EOF__
&amp;lt;!doctype html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="utf-8"&amp;gt;
        &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"&amp;gt;
        &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
        &amp;lt;meta name="description" content=""&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;

    &amp;lt;p&amp;gt;

      Hello! It's a site.

    &amp;lt;/p&amp;gt;

    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
__EOF__
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;server&amp;gt; while : ; do \
(echo -ne "HTTP/1.1 200 OK\r\nContent-Length: $(wc -c &amp;lt;index.html)\r\n\r\n" ; cat index.html;) | \
nc -l -p 5000 \
; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-p&lt;/code&gt; - port number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Simple HTTP Proxy (single connection)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;#!/usr/bin/env bash

if [[ $# != 2 ]] ; then
  printf "%s\\n" \
         "usage: ./nc-proxy listen-port bk_host:bk_port"
fi

_listen_port="$1"
_bk_host=$(echo "$2" | cut -d ":" -f1)
_bk_port=$(echo "$2" | cut -d ":" -f2)

printf "  lport: %s\\nbk_host: %s\\nbk_port: %s\\n\\n" \
       "$_listen_port" "$_bk_host" "$_bk_port"

_tmp=$(mktemp -d)
_back="$_tmp/pipe.back"
_sent="$_tmp/pipe.sent"
_recv="$_tmp/pipe.recv"

trap 'rm -rf "$_tmp"' EXIT

mkfifo -m 0600 "$_back" "$_sent" "$_recv"

sed "s/^/=&amp;gt; /" &amp;lt;"$_sent" &amp;amp;
sed "s/^/&amp;lt;=  /" &amp;lt;"$_recv" &amp;amp;

nc -l -p "$_listen_port" &amp;lt;"$_back" | \
tee "$_sent" | \
nc "$_bk_host" "$_bk_port" | \
tee "$_recv" &amp;gt;"$_back"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;server&amp;gt; chmod +x nc-proxy &amp;amp;&amp;amp; ./nc-proxy 8080 192.168.252.10:8000
  lport: 8080
bk_host: 192.168.252.10
bk_port: 8000

client&amp;gt; http -p h 10.240.30.3:8080
HTTP/1.1 200 OK
Accept-Ranges: bytes
Cache-Control: max-age=31536000
Content-Length: 2748
Content-Type: text/html; charset=utf-8
Date: Sun, 01 Jul 2018 20:12:08 GMT
Last-Modified: Sun, 01 Apr 2018 21:53:37 GMT
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Create a single-use TCP or UDP proxy&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;### TCP -&amp;gt; TCP
nc -l -p 2000 -c "nc [ip|hostname] 3000"

### TCP -&amp;gt; UDP
nc -l -p 2000 -c "nc -u [ip|hostname] 3000"

### UDP -&amp;gt; UDP
nc -l -u -p 2000 -c "nc -u [ip|hostname] 3000"

### UDP -&amp;gt; TCP
nc -l -u -p 2000 -c "nc [ip|hostname] 3000"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://gnutls.org/manual/html_node/gnutls_002dcli-Invocation.html"&gt;gnutls-cli&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Testing connection to remote host (with SNI support)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gnutls-cli -p 443 google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Testing connection to remote host (without SNI support)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gnutls-cli --disable-sni -p 443 google.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://www.dest-unreach.org/socat/doc/socat.html"&gt;socat&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Testing remote connection to port&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;socat - TCP4:10.240.30.3:22
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-&lt;/code&gt; - standard input (STDIO)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;TCP4:&amp;lt;params&amp;gt;&lt;/code&gt; - set tcp4 connection with specific params 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;[hostname|ip]&lt;/code&gt; - set hostname/ip&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;[1-65535]&lt;/code&gt; - set port number&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Redirecting TCP-traffic to a UNIX domain socket under Linux&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;socat TCP-LISTEN:1234,bind=127.0.0.1,reuseaddr,fork,su=nobody,range=127.0.0.0/8 UNIX-CLIENT:/tmp/foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;TCP-LISTEN:&amp;lt;params&amp;gt;&lt;/code&gt; - set tcp listen with specific params 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;[1-65535]&lt;/code&gt; - set port number&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;bind=[hostname|ip]&lt;/code&gt; - set bind hostname/ip&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;reuseaddr&lt;/code&gt; - allows other sockets to bind to an address&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;fork&lt;/code&gt; - keeps the parent process attempting to produce more connections&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;su=nobody&lt;/code&gt; - set user&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;range=[ip-range]&lt;/code&gt; - ip range&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;UNIX-CLIENT:&amp;lt;params&amp;gt;&lt;/code&gt; - communicates with the specified peer socket 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;filename&lt;/code&gt; - define socket&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://lcamtuf.coredump.cx/p0f3/"&gt;p0f&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Set iface in promiscuous mode and dump traffic to the log file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;p0f -i enp0s25 -p -d -o /dump/enp0s25.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-i&lt;/code&gt; - listen on the specified interface&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-p&lt;/code&gt; - set interface in promiscuous mode&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-d&lt;/code&gt; - fork into background&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-o&lt;/code&gt; - output file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Netstat"&gt;netstat&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Graph # of connections for each hosts&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;netstat -an | awk '/ESTABLISHED/ { split($5,ip,":"); if (ip[1] !~ /^$/) print ip[1] }' | \
sort | uniq -c | awk '{ printf("%s\t%s\t",$2,$1) ; for (i = 0; i &amp;lt; $1; i++) {printf("*")}; print "" }'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Monitor open connections for specific port including listen, count and sort it per IP&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;watch "netstat -plan | grep :443 | awk {'print \$5'} | cut -d: -f 1 | sort | uniq -c | sort -nk 1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Grab banners from local IPv4 listening ports&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;netstat -nlt | grep 'tcp ' | grep -Eo "[1-9][0-9]*" | xargs -I {} sh -c "echo "" | nc -v -n -w1 127.0.0.1 {}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Rsync"&gt;rsync&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Rsync remote data as root using sudo&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;rsync --rsync-path 'sudo rsync' username@hostname:/path/to/dir/ /local/
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Host_(Unix)"&gt;host&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Resolves the domain name (using external dns server)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;host google.com 9.9.9.9
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Checks the domain administrator (SOA record)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;host -t soa google.com 9.9.9.9
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://en.wikipedia.org/wiki/Dig_(command)"&gt;dig&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Resolves the domain name (short output)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dig google.com +short
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Lookup NS record for specific domain&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dig @9.9.9.9 google.com NS
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Query only answer section&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dig google.com +nocomments +noquestion +noauthority +noadditional +nostats
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Query ALL DNS Records&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dig google.com ANY +noall +answer
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;DNS Reverse Look-up&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;dig -x 172.217.16.14 +short
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://certbot.eff.org/"&gt;certbot&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Generate multidomain certificate&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;certbot certonly -d example.com -d www.example.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate wildcard certificate&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;certbot certonly --manual --preferred-challenges=dns -d example.com -d *.example.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Generate certificate with 4096 bit private key&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;certbot certonly -d example.com -d www.example.com --rsa-key-size 4096
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge#tool-network-other"&gt;network-other&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Get all subnets for specific AS (Autonomous system)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;AS="AS32934"
whois -h whois.radb.net -- "-i origin ${AS}" | \
grep "^route:" | \
cut -d ":" -f2 | \
sed -e 's/^[ \t]//' | \
sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 | \
cut -d ":" -f2 | \
sed -e 's/^[ \t]/allow /' | \
sed 's/$/;/' | \
sed 's/allow  */subnet -&amp;gt; /g'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Resolves domain name from dns.google.com with curl and jq&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;_dname="google.com" ; curl -s "https://dns.google.com/resolve?name=${_dname}&amp;amp;type=A" | jq .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Tool: &lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Log alias for a decent view of your repo&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1)
git log --oneline --decorate --graph --all

# 2)
git log --graph \
--pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' \
--abbrev-commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.python.org/"&gt;python&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Static HTTP web server&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Python 3.x
python3 -m http.server 8000 --bind 127.0.0.1

# Python 2.x
python -m SimpleHTTPServer 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Static HTTP web server with SSL support&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Python 3.x
from http.server import HTTPServer, BaseHTTPRequestHandler
import ssl

httpd = HTTPServer(('localhost', 4443), BaseHTTPRequestHandler)

httpd.socket = ssl.wrap_socket (httpd.socket,
        keyfile="path/to/key.pem",
        certfile='path/to/cert.pem', server_side=True)

httpd.serve_forever()

# Python 2.x
import BaseHTTPServer, SimpleHTTPServer
import ssl

httpd = BaseHTTPServer.HTTPServer(('localhost', 4443),
        SimpleHTTPServer.SimpleHTTPRequestHandler)

httpd.socket = ssl.wrap_socket (httpd.socket,
        keyfile="path/tp/key.pem",
        certfile='path/to/cert.pem', server_side=True)

httpd.serve_forever()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Encode base64&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python -m base64 -e &amp;lt;&amp;lt;&amp;lt; "sample string"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Decode base64&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python -m base64 -d &amp;lt;&amp;lt;&amp;lt; "dGhpcyBpcyBlbmNvZGVkCg=="
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Tool: &lt;a href="http://www.grymoire.com/Unix/Awk.html"&gt;awk&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Search for matching lines&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# egrep foo
awk '/foo/' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Search non matching lines&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# egrep -v foo
awk '!/foo/' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print matching lines with numbers&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# egrep -n foo
awk '/foo/{print FNR,$0}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print the last column&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '{print $NF}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Find all the lines longer than 80 characters&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk 'length($0)&amp;gt;80{print FNR,$0}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print only lines of less than 80 characters&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk 'length &amp;lt; 80' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print double new lines a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '1; { print "" }' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print line numbers&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '{ print FNR "\t" $0 }' filename
awk '{ printf("%5d : %s\n", NR, $0) }' filename   # in a fancy manner
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print line numbers for only non-blank lines&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk 'NF { $0=++a " :" $0 }; { print }' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print the line and the next two (i=5) lines after the line matching regexp&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '/foo/{i=5+1;}{if(i){i--; print;}}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print the lines starting at the line matching 'server {' until the line matching '}'&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '/server {/,/}/' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Print multiple columns with separators&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk -F' ' '{print "ip:\t" $2 "\n port:\t" $3' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Remove empty lines&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk 'NF &amp;gt; 0' filename

# alternative:
awk NF filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Delete trailing white space (spaces, tabs)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '{sub(/[ \t]*$/, "");print}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Delete leading white space&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '{sub(/^[ \t]+/, ""); print}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Remove duplicate consecutive lines&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# uniq
awk 'a !~ $0{print}; {a=$0}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Remove duplicate entries in a file without sorting&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '!x[$0]++' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Exclude multiple columns&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '{$1=$3=""}1' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Substitute foo for bar on lines matching regexp&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '/regexp/{gsub(/foo/, "bar")};{print}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Add some characters at the beginning of matching lines&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '/regexp/{sub(/^/, "++++"); print;next;}{print}' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Get the last hour of Apache logs&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;awk '/'$(date -d "1 hours ago" "+%d\\/%b\\/%Y:%H:%M")'/,/'$(date "+%d\\/%b\\/%Y:%H:%M")'/ { print $0 }' \
/var/log/httpd/access_log
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://www.grymoire.com/Unix/Sed.html"&gt;sed&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Print a specific line from a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sed -n 10p /path/to/file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Remove a specific line from a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sed -i 10d /path/to/file
# alternative (BSD): sed -i'' 10d /path/to/file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Remove a range of lines from a file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sed -i &amp;lt;file&amp;gt; -re '&amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;d'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Replace newline(s) with a space&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sed ':a;N;$!ba;s/\n/ /g' /path/to/file

# cross-platform compatible syntax:
sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g' /path/to/file
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;:a&lt;/code&gt; create a label &lt;code&gt;a&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;N&lt;/code&gt; append the next line to the pattern space&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$!&lt;/code&gt; if not the last line, ba branch (go to) label &lt;code&gt;a&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;s&lt;/code&gt; substitute, &lt;code&gt;/\n/&lt;/code&gt; regex for new line, &lt;code&gt;/ /&lt;/code&gt; by a space, &lt;code&gt;/g&lt;/code&gt; global match (as many times as it can)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatives:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# perl version (sed-like speed):
perl -p -e 's/\n/ /' /path/to/file

# bash version (slow):
while read line ; do printf "%s" "$line " ; done &amp;lt; file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Delete string +N next lines&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sed '/start/,+4d' /path/to/file
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h5&gt;Tool: &lt;a href="http://www.grymoire.com/Unix/Grep.html"&gt;grep&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Search for a "pattern" inside all files in the current directory&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;grep -rn "pattern"
grep -RnisI "pattern" *
fgrep "pattern" * -R
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show only for multiple patterns&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;grep 'INFO*'\''WARN' filename
grep 'INFO\|WARN' filename
grep -e INFO -e WARN filename
grep -E '(INFO|WARN)' filename
egrep "INFO|WARN" filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Except multiple patterns&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;grep -vE '(error|critical|warning)' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show data from file without comments&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;grep -v ^[[:space:]]*# filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show data from file without comments and new lines&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;egrep -v '#|^$' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Show strings with a dash/hyphen&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;grep -e -- filename
grep -- -- filename
grep "\-\-" filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Remove blank lines from a file and save output to new file&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;grep . filename &amp;gt; newfilename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Tool: &lt;a href="https://www.perl.org/"&gt;perl&lt;/a&gt;&lt;/h5&gt; 
&lt;h6&gt;Search and replace (in place)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -i -pe's/SEARCH/REPLACE/' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Edit of &lt;code&gt;*.conf&lt;/code&gt; files changing all foo to bar (and backup original)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -p -i.orig -e 's/\bfoo\b/bar/g' *.conf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Prints the first 20 lines from &lt;code&gt;*.conf&lt;/code&gt; files&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -pe 'exit if $. &amp;gt; 20' *.conf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Search lines 10 to 20&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -ne 'print if 10 .. 20' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Delete first 10 lines (and backup original)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -i.orig -ne 'print unless 1 .. 10' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Delete all but lines between foo and bar (and backup original)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -i.orig -ne 'print unless /^foo$/ .. /^bar$/' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Reduce multiple blank lines to a single line&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -p -i -00pe0 filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Convert tabs to spaces (1t = 2sp)&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -p -i -e 's/\t/  /g' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Read input from a file and report number of lines and characters&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;perl -lne '$i++; $in += length($_); END { print "$i lines, $in characters"; }' filename
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Shell Tricks &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;When you get a shell, it is generally not very clean, but after following these steps, you will have a fairly clean and comfortable shell to work with.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;script /dev/null -c bash&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Ctrl-Z (to send it to background)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stty raw -echo; fg&lt;/code&gt; (returns the shell to foreground)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;reset&lt;/code&gt; (to reset terminal)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;xterm&lt;/code&gt; (when asked for terminal type)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;export TERM=xterm; export SHELL=bash&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Shell functions &amp;nbsp;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#anger-table-of-contents"&gt;&lt;sup&gt;[TOC]&lt;/sup&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;h5&gt;Table of Contents&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#domain-resolve"&gt;Domain resolve&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/#get-asn"&gt;Get ASN&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;Domain resolve&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Dependencies:
#   - curl
#   - jq

function DomainResolve() {

  local _host="$1"

  local _curl_base="curl --request GET"
  local _timeout="15"

  _host_ip=$($_curl_base -ks -m "$_timeout" "https://dns.google.com/resolve?name=${_host}&amp;amp;type=A" | \
  jq '.Answer[0].data' | tr -d "\"" 2&amp;gt;/dev/null)

  if [[ -z "$_host_ip" ]] || [[ "$_host_ip" == "null" ]] ; then

    echo -en "Unsuccessful domain name resolution.\\n"

  else

    echo -en "$_host &amp;gt; $_host_ip\\n"

  fi

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;shell&amp;gt; DomainResolve nmap.org
nmap.org &amp;gt; 45.33.49.119

shell&amp;gt; DomainResolve nmap.org
Unsuccessful domain name resolution.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Get ASN&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Dependencies:
#   - curl

function GetASN() {

  local _ip="$1"

  local _curl_base="curl --request GET"
  local _timeout="15"

  _asn=$($_curl_base -ks -m "$_timeout" "http://ip-api.com/line/${_ip}?fields=as")

  _state=$(echo $?)

  if [[ -z "$_ip" ]] || [[ "$_ip" == "null" ]] || [[ "$_state" -ne 0 ]]; then

    echo -en "Unsuccessful ASN gathering.\\n"

  else

    echo -en "$_ip &amp;gt; $_asn\\n"

  fi

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;shell&amp;gt; GetASN 1.1.1.1
1.1.1.1 &amp;gt; AS13335 Cloudflare, Inc.

shell&amp;gt; GetASN 0.0.0.0
Unsuccessful ASN gathering.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>MotiaDev/motia</title>
      <link>https://github.com/MotiaDev/motia</link>
      <description>&lt;p&gt;Unified Backend Framework for APIs, Events, and AI Agents&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://trendshift.io/repositories/14032"&gt; &lt;img src="https://trendshift.io/api/badge/repositories/14032" alt="Motia" style="width: 250px; height: 55px;" width="250" height="55"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;!-- shows in LIGHT mode only --&gt; &lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/motia-logo-dark.png#gh-light-mode-only" width="400" alt="Motia logo"&gt; 
 &lt;!-- shows in DARK mode only --&gt; &lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/motia-logo-light.png#gh-dark-mode-only" width="400" alt="Motia logo (dark)"&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt;🔥 A Modern Unified Backend Framework for APIs, Events and Agents 🔥&lt;/strong&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.npmjs.com/package/motia"&gt; &lt;img src="https://img.shields.io/npm/v/motia?style=flat&amp;amp;logo=npm&amp;amp;logoColor=white&amp;amp;color=CB3837&amp;amp;labelColor=000000" alt="npm version"&gt; &lt;/a&gt; &lt;a href="https://github.com/MotiaDev/motia/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/badge/license-MIT-green?style=flat&amp;amp;logo=opensourceinitiative&amp;amp;logoColor=white&amp;amp;labelColor=000000" alt="license"&gt; &lt;/a&gt; &lt;a href="https://github.com/MotiaDev/motia"&gt; &lt;img src="https://img.shields.io/github/stars/MotiaDev/motia?style=flat&amp;amp;logo=github&amp;amp;logoColor=white&amp;amp;color=yellow&amp;amp;labelColor=000000" alt="GitHub stars"&gt; &lt;/a&gt; &lt;a href="https://twitter.com/motiadev" target="_blank"&gt; &lt;img src="https://img.shields.io/badge/Follow-@motiadev-1DA1F2?style=flat&amp;amp;logo=twitter&amp;amp;logoColor=white&amp;amp;labelColor=000000" alt="Twitter Follow"&gt; &lt;/a&gt; &lt;a href="https://discord.com/invite/nJFfsH5d6v" target="_blank"&gt; &lt;img src="https://img.shields.io/discord/1322278831184281721?style=flat&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=5865F2&amp;amp;label=Discord&amp;amp;labelColor=000000" alt="Discord"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.motia.dev/manifesto"&gt;💡 Motia Manifesto&lt;/a&gt; • &lt;a href="https://www.motia.dev/docs/getting-started/quick-start"&gt;🚀 Quick Start&lt;/a&gt; • &lt;a href="https://www.motia.dev/docs/concepts/steps/defining-steps"&gt;📋 Defining Steps&lt;/a&gt; • &lt;a href="https://motia.dev/docs"&gt;📚 Docs&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;🎯 What is Motia?&lt;/h2&gt; 
&lt;p&gt;Motia is a &lt;strong&gt;modern backend framework&lt;/strong&gt; that unifies APIs, background jobs, workflows, and AI agents into a single cohesive system. Eliminate runtime complexity and build unified backends where &lt;strong&gt;JavaScript, TypeScript, Python, etc&lt;/strong&gt;, work together in event-driven workflows, with built-in state management, observability, and one-click deployments.&lt;/p&gt; 
&lt;p&gt;Motia brings cohesion to the fragmented backend world with our core primitive: the &lt;strong&gt;Step&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/Motia_Github_Repository_GIF.gif" alt="Motia combines APIs, background queues, and AI agents into one system"&gt;&lt;/p&gt; 
&lt;h3&gt;🧱 The Step Philosophy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;🎯 Your Logic, Your Step&lt;/strong&gt;: A Step holds your business logic. It can be a simple function, a call to a database, or a complex AI agent. This is where your application's real work gets done.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🌍 Any Language, One Workflow&lt;/strong&gt;: Write Steps in TypeScript, Python, and other languages to come. all in the same project. Use Python for your AI agents and TypeScript for your API, and Motia makes them work together effortlessly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;⚡ Full Power, No Boilerplate&lt;/strong&gt;: Inside a Step's &lt;code&gt;handler&lt;/code&gt;, you have the full power of the Node.js or Python ecosystem. Install any package, call any API, connect to any database. No restrictions, just your code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;👁️ Zero-Config Observability&lt;/strong&gt;: Get full end-to-end tracing and logging for every Step execution, automatically. No setup required. See exactly what happened, when, and why.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🌊 Simple &amp;amp; Powerful Workflows&lt;/strong&gt;: Connect Steps together by emitting and subscribing to events. Build complex, multi-stage processes with simple, declarative code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🏪 Unified State&lt;/strong&gt;: Share data between Steps effortlessly. Motia provides built-in state management that is automatically traced, giving you a complete picture of your data's lifecycle through a workflow.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;🚧 The Problem&lt;/h2&gt; 
&lt;p&gt;Backend teams juggle &lt;strong&gt;fragmented runtimes&lt;/strong&gt; across APIs, background queues, and AI agents. This creates deployment complexity, debugging gaps, and cognitive overhead from context-switching between frameworks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This fragmentation demands a unified system.&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;✅ The Unified System&lt;/h2&gt; 
&lt;p&gt;Motia unifies your entire backend into a &lt;strong&gt;unified state&lt;/strong&gt;. APIs, background jobs, and AI agents become interconnected Steps with shared state and integrated observability.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;strong&gt;After (Motia)&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multiple deployment targets&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Single unified deployment&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fragmented observability&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;End-to-end tracing&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Language dependent&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;JavaScript, TypeScript, Python, etc&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Context-switching overhead&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Single intuitive model&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Complex error handling&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Automatic retries &amp;amp; fault tolerance&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr&gt; 
&lt;h2&gt;🔧 Supported Step Types&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Trigger&lt;/th&gt; 
   &lt;th&gt;Use Case&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;code&gt;api&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;HTTP Request&lt;/td&gt; 
   &lt;td&gt;Expose REST endpoints&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;code&gt;event&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Emitted Topics&lt;/td&gt; 
   &lt;td&gt;React to internal or external events&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Scheduled Time (cron)&lt;/td&gt; 
   &lt;td&gt;Automate recurring jobs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;&lt;code&gt;noop&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;None&lt;/td&gt; 
   &lt;td&gt;Placeholder for manual/external tasks&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr&gt; 
&lt;h3&gt;🤔 How it Works&lt;/h3&gt; 
&lt;p&gt;Motia's architecture is built around a single, powerful primitive: the &lt;strong&gt;Step&lt;/strong&gt;. A Step is not just a trigger; it's a powerful container for your business logic. You can write anything from a simple database query to a complex AI agent interaction inside a single step. Instead of managing separate services for APIs, background workers, and scheduled tasks, you simply define how your steps are triggered.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Need a public API?&lt;/strong&gt; Create an &lt;code&gt;api&lt;/code&gt; step. This defines a route and handler for HTTP requests. You can build a complete REST or GraphQL API just with these steps.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Need a background job or queue?&lt;/strong&gt; Have your &lt;code&gt;api&lt;/code&gt; step &lt;code&gt;emit&lt;/code&gt; an event. An &lt;code&gt;event&lt;/code&gt; step subscribed to that event's topic will pick up the job and process it asynchronously. This is how you handle anything that shouldn't block the main request thread, from sending emails to complex data processing.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Need to run a task on a schedule?&lt;/strong&gt; Use a &lt;code&gt;cron&lt;/code&gt; step. It will trigger automatically based on the schedule you define.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This model means you no longer need to glue together separate frameworks and tools. A single Motia application can replace a stack that might otherwise include &lt;strong&gt;Nest.js&lt;/strong&gt; (for APIs), &lt;strong&gt;Temporal&lt;/strong&gt; (for workflows), and &lt;strong&gt;Celery/BullMQ&lt;/strong&gt; (for background jobs). It's all just steps and events.&lt;/p&gt; 
&lt;h2&gt;⚡ Core Concepts&lt;/h2&gt; 
&lt;p&gt;The &lt;strong&gt;Step&lt;/strong&gt; is Motia's core primitive. The following concepts are deeply integrated with Steps to help you build powerful, complex, and scalable backends:&lt;/p&gt; 
&lt;h3&gt;🔑 Steps &amp;amp; Step Types&lt;/h3&gt; 
&lt;p&gt;Understand the three ways Steps are triggered:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP (&lt;code&gt;api&lt;/code&gt;)&lt;/strong&gt; – Build REST/GraphQL endpoints with zero boilerplate.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Events (&lt;code&gt;event&lt;/code&gt;)&lt;/strong&gt; – React to internal or external events emitted by other steps.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cron (&lt;code&gt;cron&lt;/code&gt;)&lt;/strong&gt; – Schedule recurring jobs with a familiar cron syntax.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📣 Emit &amp;amp; Subscribe (Event-Driven Workflows)&lt;/h3&gt; 
&lt;p&gt;Steps talk to each other by &lt;strong&gt;emitting&lt;/strong&gt; and &lt;strong&gt;subscribing&lt;/strong&gt; to topics. This decouples producers from consumers and lets you compose complex workflows with simple, declarative code.&lt;/p&gt; 
&lt;h3&gt;🏪 State Management&lt;/h3&gt; 
&lt;p&gt;All steps share a unified key-value state store. Every &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; is automatically traced so you always know when and where your data changed.&lt;/p&gt; 
&lt;h3&gt;📊 Structured Logging&lt;/h3&gt; 
&lt;p&gt;Motia provides structured, JSON logs correlated with trace IDs and step names. Search and filter your logs without regex hassle.&lt;/p&gt; 
&lt;h3&gt;📡 Streams: Real-time Messaging&lt;/h3&gt; 
&lt;p&gt;Push live updates from long-running or asynchronous workflows to clients without polling. Perfect for dashboards, progress indicators, and interactive AI agents.&lt;/p&gt; 
&lt;h3&gt;👁️ End-to-End Observability with Traces&lt;/h3&gt; 
&lt;p&gt;Every execution generates a full trace, capturing step timelines, state operations, emits, stream calls, and logs. Visualise everything in the Workbench's Traces UI and debug faster.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;🚀 Quickstart&lt;/h2&gt; 
&lt;p&gt;Get Motia project up and running in &lt;strong&gt;under 60 seconds&lt;/strong&gt;:&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js 18+&lt;/strong&gt; (we recommend the latest LTS)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;npm&lt;/strong&gt; ≥ 8 (or &lt;strong&gt;pnpm&lt;/strong&gt; / &lt;strong&gt;yarn&lt;/strong&gt; – your choice)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;1. Bootstrap a New Motia Project&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx motia@latest create -i   # runs the interactive terminal
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Follow the prompts to pick a template, project name, and language.&lt;/p&gt; 
&lt;h3&gt;2. Start the Workbench&lt;/h3&gt; 
&lt;p&gt;Inside your new project folder, launch the dev server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npx motia dev
# ➜ http://localhost:3000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This spins up the Motia Workbench – a local UI for building, testing &amp;amp; observing your backend in real-time.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/motia-terminal.gif" alt="motia-terminal"&gt;&lt;/p&gt; 
&lt;h3&gt;3. Hit Your First Endpoint&lt;/h3&gt; 
&lt;p&gt;Open a new terminal tab and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl http://localhost:3000/default
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should see the JSON response:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{ "message": "Hello World from Motia!" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;4. Explore the Workbench UI&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/new-workbench.png" alt="new-workbench"&gt; The Workbench is your command centre:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;🌊 Flows&lt;/strong&gt; – Visualise how your Steps connect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🔌 Endpoints&lt;/strong&gt; – Test APIs with one click and stream results live.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;👁️ Traces&lt;/strong&gt; – Inspect end-to-end traces of every execution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📊 Logs&lt;/strong&gt; – View structured logs grouped by trace.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🏪 State&lt;/strong&gt; – Inspect the key-value store across Steps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;🎉 &lt;strong&gt;That's it!&lt;/strong&gt; You now have a fully-featured Motia project with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;✅ &lt;code&gt;/default&lt;/code&gt; API endpoint&lt;/li&gt; 
 &lt;li&gt;✅ Visual debugger &amp;amp; flow inspector&lt;/li&gt; 
 &lt;li&gt;✅ Built-in observability&lt;/li&gt; 
 &lt;li&gt;✅ Hot-reload for instant feedback&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;🗂 Examples&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;a href="https://github.com/MotiaDev/motia-examples/tree/main/examples/finance-agent"&gt;Finance Agent&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href="https://github.com/MotiaDev/motia-examples/tree/main/examples/github-integration-workflow"&gt;GitHub Agent&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href="https://github.com/MotiaDev/motia-examples/tree/main/examples/gmail-workflow"&gt;Gmail Manager&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/finance-agent.png" alt="Finance"&gt;&lt;br&gt;Financial insights&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/github-pr-management.png" alt="GitHub"&gt;&lt;br&gt;PR automation&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/gmail-flow.png" alt="Gmail"&gt;&lt;br&gt;Email automation&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;a href="https://github.com/MotiaDev/motia-examples/tree/main/examples/trello-flow"&gt;Trello Automation&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href="https://github.com/MotiaDev/motia-examples/tree/main/examples/rag_example"&gt;RAG Agent&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href="https://github.com/MotiaDev/motia-examples/tree/main/examples/vision-example"&gt;AI Image Gen&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/trello-manager.png" alt="Trello"&gt;&lt;br&gt;Task automation&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/parse-embed-rag.png" alt="RAG"&gt;&lt;br&gt;Knowledge retrieval&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/MotiaDev/motia/main/assets/examples/generate-image.png" alt="AI Image"&gt;&lt;br&gt;Generate images&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr&gt; 
&lt;h2&gt;🌐 Language Support&lt;/h2&gt; 
&lt;p&gt;Write steps in your preferred language:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
   &lt;th&gt;Example&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.js&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.ts&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;✅ Stable&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.py&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;🚧 Beta&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.rb&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;🔄 Coming Soon&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.go&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;🔄 Coming Soon&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;handler.step.rs&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr&gt; 
&lt;h3&gt;💬 &lt;strong&gt;Get Help&lt;/strong&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;📋 Questions&lt;/strong&gt;: Use our &lt;a href="https://discord.gg/7rXsekMK"&gt;Discord community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🐛 Bug Reports&lt;/strong&gt;: &lt;a href="https://github.com/MotiaDev/motia/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;📖 Documentation&lt;/strong&gt;: &lt;a href="https://motia.dev/docs"&gt;Official Docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🎥 Blog&lt;/strong&gt;: &lt;a href="https://dev.to/motiadev"&gt;Motia Blog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;strong&gt;🌟 Ready to unify your backend?&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://motia.dev"&gt;🚀 &lt;strong&gt;Get Started Now&lt;/strong&gt;&lt;/a&gt; • &lt;a href="https://motia.dev/docs"&gt;📖 &lt;strong&gt;Read the Docs&lt;/strong&gt;&lt;/a&gt; • &lt;a href="https://discord.com/invite/nJFfsH5d6v"&gt;💬 &lt;strong&gt;Join Discord&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://www.star-history.com/#motiadev/motia&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=motiadev/motia&amp;amp;type=Date" alt="Star History Chart"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;sub&gt;Built with ❤️ by the Motia team • &lt;strong&gt;Star us if you find Motia useful!&lt;/strong&gt; ⭐&lt;/sub&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;🤝 &lt;strong&gt;Contributing&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;We welcome contributions! Whether it's:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;🐛 Bug fixes and improvements&lt;/li&gt; 
 &lt;li&gt;✨ New features and step types&lt;/li&gt; 
 &lt;li&gt;📚 Documentation and examples&lt;/li&gt; 
 &lt;li&gt;🌍 Language support additions&lt;/li&gt; 
 &lt;li&gt;🎨 Workbench UI enhancements&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out our &lt;a href="https://github.com/MotiaDev/motia/raw/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;🚧 Roadmap&lt;/h3&gt; 
&lt;p&gt;We have a public roadmap for Motia, you can view it &lt;a href="https://github.com/orgs/MotiaDev/projects/2/views/4"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Feel free to add comments to the issues, or create a new issue if you have a feature request.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
   &lt;th&gt;Link&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Python Types&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/485"&gt;#485&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Python types&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Streams: RBAC&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/495"&gt;#495&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for RBAC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Streams: Workbench UI&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/497"&gt;#497&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Workbench UI&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Queue Strategies&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/476"&gt;#476&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Queue Strategies&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Reactive Steps&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/477"&gt;#477&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Reactive Steps&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Allow cloud configuration&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/478"&gt;#478&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for cloud configuration&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Bring your own Cloud: AWS&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/479"&gt;#479&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for AWS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Point in time triggers&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/480"&gt;#480&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Point in time triggers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Workbench plugins&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/481"&gt;#481&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Workbench plugins&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rewrite our Core in either Go or Rust&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/482"&gt;#482&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Rewrite our Core in either Go or Rust&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Decrease deployment time&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/483"&gt;#483&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Decrease deployment time&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Built-in database support&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/484"&gt;#484&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for built-in database&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Google Cloud Platform&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/486"&gt;#486&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Google Cloud Platform&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Microsoft Azure&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/487"&gt;#487&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Microsoft Azure&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Vercel&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/488"&gt;#488&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Vercel&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Cloudflare&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/489"&gt;#489&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Cloudflare&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: Go&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/490"&gt;#490&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Go&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: Rust&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/491"&gt;#491&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Rust&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: Java&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/492"&gt;#492&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Java&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: Ruby&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/493"&gt;#493&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Ruby&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;New languages: C#&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/494"&gt;#494&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for C#&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BYOC: Kubernetes&lt;/td&gt; 
   &lt;td&gt;Planned&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/MotiaDev/motia/issues/496"&gt;#496&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add support for Kubernetes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Huanshere/VideoLingo</title>
      <link>https://github.com/Huanshere/VideoLingo</link>
      <description>&lt;p&gt;Netflix-level subtitle cutting, translation, alignment, and even dubbing - one-click fully automated AI video subtitle team | Netflix级字幕切割、翻译、对齐、甚至加上配音，一键全自动视频搬运AI字幕组&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/docs/logo.png" alt="VideoLingo Logo" height="140"&gt; 
 &lt;h1&gt;Connect the World, Frame by Frame&lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://trendshift.io/repositories/12200" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/12200" alt="Huanshere%2FVideoLingo | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/README.md"&gt;&lt;strong&gt;English&lt;/strong&gt;&lt;/a&gt;｜&lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/translations/README.zh.md"&gt;&lt;strong&gt;简体中文&lt;/strong&gt;&lt;/a&gt;｜&lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/translations/README.zh-TW.md"&gt;&lt;strong&gt;繁體中文&lt;/strong&gt;&lt;/a&gt;｜&lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/translations/README.ja.md"&gt;&lt;strong&gt;日本語&lt;/strong&gt;&lt;/a&gt;｜&lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/translations/README.es.md"&gt;&lt;strong&gt;Español&lt;/strong&gt;&lt;/a&gt;｜&lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/translations/README.ru.md"&gt;&lt;strong&gt;Русский&lt;/strong&gt;&lt;/a&gt;｜&lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/translations/README.fr.md"&gt;&lt;strong&gt;Français&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;🌟 Overview (&lt;a href="https://videolingo.io"&gt;Try VL Now!&lt;/a&gt;)&lt;/h2&gt; 
&lt;p&gt;VideoLingo is an all-in-one video translation, localization, and dubbing tool aimed at generating Netflix-quality subtitles. It eliminates stiff machine translations and multi-line subtitles while adding high-quality dubbing, enabling global knowledge sharing across language barriers.&lt;/p&gt; 
&lt;p&gt;Key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;🎥 YouTube video download via yt-dlp&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🎙️ Word-level and Low-illusion subtitle recognition with WhisperX&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;📝 NLP and AI-powered subtitle segmentation&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;📚 Custom + AI-generated terminology for coherent translation&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🔄 3-step Translate-Reflect-Adaptation for cinematic quality&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;✅ Netflix-standard, Single-line subtitles Only&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🗣️ Dubbing with GPT-SoVITS, Azure, OpenAI, and more&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🚀 One-click startup and processing in Streamlit&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🌍 Multi-language support in Streamlit UI&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;📝 Detailed logging with progress resumption&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Difference from similar projects: &lt;strong&gt;Single-line subtitles only, superior translation quality, seamless dubbing experience&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;🎥 Demo&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td width="33%"&gt; &lt;h3&gt;Dual Subtitles&lt;/h3&gt; 
    &lt;hr&gt; &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/a5c3d8d1-2b29-4ba9-b0d0-25896829d951"&gt;https://github.com/user-attachments/assets/a5c3d8d1-2b29-4ba9-b0d0-25896829d951&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td width="33%"&gt; &lt;h3&gt;Cosy2 Voice Clone&lt;/h3&gt; 
    &lt;hr&gt; &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/e065fe4c-3694-477f-b4d6-316917df7c0a"&gt;https://github.com/user-attachments/assets/e065fe4c-3694-477f-b4d6-316917df7c0a&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td width="33%"&gt; &lt;h3&gt;GPT-SoVITS with my voice&lt;/h3&gt; 
    &lt;hr&gt; &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/47d965b2-b4ab-4a0b-9d08-b49a7bf3508c"&gt;https://github.com/user-attachments/assets/47d965b2-b4ab-4a0b-9d08-b49a7bf3508c&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Language Support&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Input Language Support(more to come):&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;🇺🇸 English 🤩 | 🇷🇺 Russian 😊 | 🇫🇷 French 🤩 | 🇩🇪 German 🤩 | 🇮🇹 Italian 🤩 | 🇪🇸 Spanish 🤩 | 🇯🇵 Japanese 😐 | 🇨🇳 Chinese* 😊&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;*Chinese uses a separate punctuation-enhanced whisper model, for now...&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Translation supports all languages, while dubbing language depends on the chosen TTS method.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Meet any problem? Chat with our free online AI agent &lt;a href="https://share.fastgpt.in/chat/share?shareId=066w11n3r9aq6879r4z0v9rh"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; to help you.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For Windows users with NVIDIA GPU, follow these steps before installation:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Install &lt;a href="https://developer.download.nvidia.com/compute/cuda/12.6.0/local_installers/cuda_12.6.0_560.76_windows.exe"&gt;CUDA Toolkit 12.6&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Install &lt;a href="https://developer.download.nvidia.com/compute/cudnn/9.3.0/local_installers/cudnn_9.3.0_windows.exe"&gt;CUDNN 9.3.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Add &lt;code&gt;C:\Program Files\NVIDIA\CUDNN\v9.3\bin\12.6&lt;/code&gt; to your system PATH&lt;/li&gt; 
  &lt;li&gt;Restart your computer&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; FFmpeg is required. Please install it via package managers:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Windows: &lt;code&gt;choco install ffmpeg&lt;/code&gt; (via &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;macOS: &lt;code&gt;brew install ffmpeg&lt;/code&gt; (via &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;Linux: &lt;code&gt;sudo apt install ffmpeg&lt;/code&gt; (Debian/Ubuntu)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/Huanshere/VideoLingo.git
cd VideoLingo
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Install dependencies(requires &lt;code&gt;python=3.10&lt;/code&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;conda create -n videolingo python=3.10.0 -y
conda activate videolingo
python install.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Start the application&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;streamlit run st.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;Alternatively, you can use Docker (requires CUDA 12.4 and NVIDIA Driver version &amp;gt;550), see &lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/docs/pages/docs/docker.en-US.md"&gt;Docker docs&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker build -t videolingo .
docker run -d -p 8501:8501 --gpus all videolingo
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;APIs&lt;/h2&gt; 
&lt;p&gt;VideoLingo supports OpenAI-Like API format and various TTS interfaces:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;LLM: &lt;code&gt;claude-3-5-sonnet&lt;/code&gt;, &lt;code&gt;gpt-4.1&lt;/code&gt;, &lt;code&gt;deepseek-v3&lt;/code&gt;, &lt;code&gt;gemini-2.0-flash&lt;/code&gt;, ... (sorted by performance, be cautious with gemini-2.5-flash...)&lt;/li&gt; 
 &lt;li&gt;WhisperX: Run whisperX (large-v3) locally or use 302.ai API&lt;/li&gt; 
 &lt;li&gt;TTS: &lt;code&gt;azure-tts&lt;/code&gt;, &lt;code&gt;openai-tts&lt;/code&gt;, &lt;code&gt;siliconflow-fishtts&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;fish-tts&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;GPT-SoVITS&lt;/code&gt;, &lt;code&gt;edge-tts&lt;/code&gt;, &lt;code&gt;*custom-tts&lt;/code&gt;(You can modify your own TTS in custom_tts.py!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; VideoLingo works with &lt;strong&gt;&lt;a href="https://gpt302.saaslink.net/C2oHR9"&gt;302.ai&lt;/a&gt;&lt;/strong&gt; - one API key for all services (LLM, WhisperX, TTS). Or run locally with Ollama and Edge-TTS for free, no API needed!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For detailed installation, API configuration, and batch mode instructions, please refer to the documentation: &lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/docs/pages/docs/start.en-US.md"&gt;English&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/Huanshere/VideoLingo/main/docs/pages/docs/start.zh-CN.md"&gt;中文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Current Limitations&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;WhisperX transcription performance may be affected by video background noise, as it uses wav2vac model for alignment. For videos with loud background music, please enable Voice Separation Enhancement. Additionally, subtitles ending with numbers or special characters may be truncated early due to wav2vac's inability to map numeric characters (e.g., "1") to their spoken form ("one").&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Using weaker models can lead to errors during processes due to strict JSON format requirements for responses (tried my best to prompt llm😊). If this error occurs, please delete the &lt;code&gt;output&lt;/code&gt; folder and retry with a different LLM, otherwise repeated execution will read the previous erroneous response causing the same error.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The dubbing feature may not be 100% perfect due to differences in speech rates and intonation between languages, as well as the impact of the translation step. However, this project has implemented extensive engineering processing for speech rates to ensure the best possible dubbing results.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multilingual video transcription recognition will only retain the main language&lt;/strong&gt;. This is because whisperX uses a specialized model for a single language when forcibly aligning word-level subtitles, and will delete unrecognized languages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;For now, cannot dub multiple characters separately&lt;/strong&gt;, as whisperX's speaker distinction capability is not sufficiently reliable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the Apache 2.0 License. Special thanks to the following open source projects for their contributions:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/m-bain/whisperX"&gt;whisperX&lt;/a&gt;, &lt;a href="https://github.com/yt-dlp/yt-dlp"&gt;yt-dlp&lt;/a&gt;, &lt;a href="https://github.com/mangiucugna/json_repair"&gt;json_repair&lt;/a&gt;, &lt;a href="https://github.com/LianjiaTech/BELLE"&gt;BELLE&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📬 Contact Me&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Submit &lt;a href="https://github.com/Huanshere/VideoLingo/issues"&gt;Issues&lt;/a&gt; or &lt;a href="https://github.com/Huanshere/VideoLingo/pulls"&gt;Pull Requests&lt;/a&gt; on GitHub&lt;/li&gt; 
 &lt;li&gt;DM me on Twitter: &lt;a href="https://twitter.com/Huanshere"&gt;@Huanshere&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Email me at: &lt;a href="mailto:team@videolingo.io"&gt;team@videolingo.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⭐ Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#Huanshere/VideoLingo&amp;amp;Timeline"&gt;&lt;img src="https://api.star-history.com/svg?repos=Huanshere/VideoLingo&amp;amp;type=Timeline" alt="Star History Chart"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="center"&gt;If you find VideoLingo helpful, please give me a ⭐️!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trekhleb/javascript-algorithms</title>
      <link>https://github.com/trekhleb/javascript-algorithms</link>
      <description>&lt;p&gt;📝 Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Algorithms and Data Structures&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;🇺🇦 UKRAINE &lt;a href="https://war.ukraine.ua/"&gt;IS BEING ATTACKED&lt;/a&gt; BY RUSSIAN ARMY. CIVILIANS ARE GETTING KILLED. RESIDENTIAL AREAS ARE GETTING BOMBED.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Help Ukraine via: 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://prytulafoundation.org/en/"&gt;Serhiy Prytula Charity Foundation&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://savelife.in.ua/en/donate-en/"&gt;Come Back Alive Charity Foundation&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi"&gt;National Bank of Ukraine&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;More info on &lt;a href="https://war.ukraine.ua/"&gt;war.ukraine.ua&lt;/a&gt; and &lt;a href="https://twitter.com/MFA_Ukraine"&gt;MFA of Ukraine&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster"&gt;&lt;img src="https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/trekhleb/javascript-algorithms"&gt;&lt;img src="https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg?sanitize=true" alt="codecov"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/repo-size/trekhleb/javascript-algorithms.svg?sanitize=true" alt="repo size"&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p&gt; 
&lt;p&gt;Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md"&gt;&lt;em&gt;简体中文&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md"&gt;&lt;em&gt;繁體中文&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md"&gt;&lt;em&gt;한국어&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md"&gt;&lt;em&gt;日本語&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md"&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md"&gt;&lt;em&gt;Français&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md"&gt;&lt;em&gt;Español&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md"&gt;&lt;em&gt;Português&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md"&gt;&lt;em&gt;Русский&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md"&gt;&lt;em&gt;Türkçe&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md"&gt;&lt;em&gt;Italiano&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.id-ID.md"&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uk-UA.md"&gt;&lt;em&gt;Українська&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ar-AR.md"&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.vi-VN.md"&gt;&lt;em&gt;Tiếng Việt&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.de-DE.md"&gt;&lt;em&gt;Deutsch&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uz-UZ.md"&gt;&lt;em&gt;Uzbek&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.he-IL.md"&gt;&lt;em&gt;עברית&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;☝ Note that this project is meant to be used for learning and researching purposes only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Data Structures&lt;/h2&gt; 
&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt; 
&lt;p&gt;Remember that each data has its own trade-offs. And you need to pay attention more to why you're choosing a certain data structure than to how to implement it.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/linked-list"&gt;Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/doubly-linked-list"&gt;Doubly Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/queue"&gt;Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/stack"&gt;Stack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/hash-table"&gt;Hash Table&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/heap"&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/priority-queue"&gt;Priority Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/trie"&gt;Trie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree"&gt;Tree&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/binary-search-tree"&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/avl-tree"&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/red-black-tree"&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/segment-tree"&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/fenwick-tree"&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/graph"&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/disjoint-set"&gt;Disjoint Set&lt;/a&gt; - a union–find data structure or merge–find set&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/bloom-filter"&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/lru-cache/"&gt;LRU Cache&lt;/a&gt; - Least Recently Used (LRU) cache&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Algorithms&lt;/h2&gt; 
&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;h3&gt;Algorithms by Topic&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Math&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/bits"&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/binary-floating-point"&gt;Binary Floating Point&lt;/a&gt; - binary representation of the floating-point numbers.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/factorial"&gt;Factorial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci"&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/prime-factors"&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan's theorem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/primality-test"&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm"&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/least-common-multiple"&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/sieve-of-eratosthenes"&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/is-power-of-two"&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle"&gt;Pascal's Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/complex-number"&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/radian"&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering"&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/horner-method"&gt;Horner's method&lt;/a&gt; - polynomial evaluation&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix"&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-distance"&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition"&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/square-root"&gt;Square Root&lt;/a&gt; - Newton's method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/liu-hui"&gt;Liu Hui π Algorithm&lt;/a&gt; - approximate π calculations based on N-gons&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform"&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/cartesian-product"&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/fisher-yates"&gt;Fisher–Yates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set"&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise, backtracking, and cascading solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations"&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations"&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence"&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence"&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem"&gt;Knapsack Problem&lt;/a&gt; - "0/1" and "Unbound" ones&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt; - "Brute Force" and "Dynamic Programming" (Kadane's) versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum"&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/hamming-distance"&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/palindrome"&gt;Palindrome&lt;/a&gt; - check if the string is the same in reverse&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance"&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/knuth-morris-pratt"&gt;Knuth–Morris–Pratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/z-algorithm"&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/rabin-karp"&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring"&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching"&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Searches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search"&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/jump-search"&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search"&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/interpolation-search"&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bubble-sort"&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/selection-sort"&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/insertion-sort"&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/heap-sort"&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort"&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort"&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/shell-sort"&gt;Shellsort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/counting-sort"&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/radix-sort"&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bucket-sort"&gt;Bucket Sort&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/traversal"&gt;Straight Traversal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/reverse-traversal"&gt;Reverse Traversal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Trees&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search"&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/breadth-first-search"&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Graphs&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search"&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/breadth-first-search"&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal"&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra"&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford"&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall"&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/detect-cycle"&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim"&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/topological-sorting"&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/articulation-points"&gt;Articulation Points&lt;/a&gt; - Tarjan's algorithm (DFS based)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bridges"&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/eulerian-path"&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury's algorithm - Visit every edge exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle"&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/strongly-connected-components"&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju's algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman"&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/polynomial-hash"&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/rail-fence-cipher"&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/caesar-cipher"&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/hill-cipher"&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://github.com/trekhleb/nano-neuron"&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/knn"&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/k-means"&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Image Processing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving"&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Statistics&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/statistics/weighted-random"&gt;Weighted Random&lt;/a&gt; - select the random item from the list based on items' weights&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Evolutionary algorithms&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://github.com/trekhleb/self-parking-car-evolution"&gt;Genetic algorithm&lt;/a&gt; - example of how the genetic algorithm may be applied for training the self-parking cars&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Uncategorized&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower"&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/square-matrix-rotation"&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal's Triangle based examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks"&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/stack/valid-parentheses"&gt;Valid Parentheses&lt;/a&gt; - check if a string has valid parentheses (using stack)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens"&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour"&gt;Knight's Tour&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Algorithms by Paradigm&lt;/h3&gt; 
&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search"&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman"&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform"&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem"&gt;Unbound Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra"&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim"&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal"&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search"&gt;Binary Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower"&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle"&gt;Pascal's Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm"&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort"&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort"&gt;Quicksort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search"&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search"&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix"&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering"&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks"&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations"&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations"&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci"&gt;Fibonacci Number&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving"&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance"&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence"&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring"&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence"&gt;Shortest Common Supersequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem"&gt;0/1 Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition"&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford"&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall"&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching"&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate the next solution, you test if it satisfies all conditions and only then continue generating subsequent solutions. Otherwise, backtrack and go on a different path to finding a solution. Normally the DFS traversal of state-space is being used. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set"&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle"&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens"&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour"&gt;Knight's Tour&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum"&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally, BFS traversal in combination with DFS traversal of state-space tree is being used.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to use this repository&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may want to run it to check code quality.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- 'LinkedList'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If linting or testing is failing, try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rm -rf ./node_modules
npm i
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also, make sure that you're using the correct Node version (&lt;code&gt;&amp;gt;=16&lt;/code&gt;). If you're using &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; for Node version management you may run &lt;code&gt;nvm use&lt;/code&gt; from the root folder of the project and the correct version will be picked up.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Then just, simply run the following command to test if your playground code works as expected:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- 'playground'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Useful Information&lt;/h2&gt; 
&lt;h3&gt;References&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8"&gt;▶ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://okso.app/showcase/data-structures"&gt;✍🏻 Data Structure Sketches&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Big O Notation&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below, you may find the most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/assets/big-o-graph.png" alt="Big O graphs"&gt;&lt;/p&gt; 
&lt;p&gt;Source: &lt;a href="http://bigocheatsheet.com/"&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Big O Notation&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Computations for 10 elements&lt;/th&gt; 
   &lt;th&gt;Computations for 100 elements&lt;/th&gt; 
   &lt;th&gt;Computations for 1000 elements&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Constant&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(log N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Logarithmic&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;9&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Linear&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;1000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N log N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;n log(n)&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;600&lt;/td&gt; 
   &lt;td&gt;9000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N^2)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Quadratic&lt;/td&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;10000&lt;/td&gt; 
   &lt;td&gt;1000000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(2^N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Exponential&lt;/td&gt; 
   &lt;td&gt;1024&lt;/td&gt; 
   &lt;td&gt;1.26e+29&lt;/td&gt; 
   &lt;td&gt;1.07e+301&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N!)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Factorial&lt;/td&gt; 
   &lt;td&gt;3628800&lt;/td&gt; 
   &lt;td&gt;9.3e+157&lt;/td&gt; 
   &lt;td&gt;4.02e+2567&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Data Structure Operations Complexity&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Data Structure&lt;/th&gt; 
   &lt;th align="center"&gt;Access&lt;/th&gt; 
   &lt;th align="center"&gt;Search&lt;/th&gt; 
   &lt;th align="center"&gt;Insertion&lt;/th&gt; 
   &lt;th align="center"&gt;Deletion&lt;/th&gt; 
   &lt;th align="left"&gt;Comments&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;-&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="left"&gt;In case of perfect hash function costs would be O(1)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="left"&gt;In case of balanced tree costs would be O(log(n))&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Red-Black Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Bloom Filter&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;-&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;-&lt;/td&gt; 
   &lt;td align="left"&gt;False positives are possible while searching&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Array Sorting Algorithms Complexity&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th align="center"&gt;Best&lt;/th&gt; 
   &lt;th align="center"&gt;Average&lt;/th&gt; 
   &lt;th align="center"&gt;Worst&lt;/th&gt; 
   &lt;th align="center"&gt;Memory&lt;/th&gt; 
   &lt;th align="center"&gt;Stable&lt;/th&gt; 
   &lt;th align="left"&gt;Comments&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Bubble sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Insertion sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Selection sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Heap sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Merge sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Quick sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="left"&gt;Quicksort is usually done in-place with O(log(n)) stack space&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Shell sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align="center"&gt;depends on gap sequence&lt;/td&gt; 
   &lt;td align="center"&gt;n&amp;nbsp;(log(n))&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;1&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Counting sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n + r&lt;/td&gt; 
   &lt;td align="center"&gt;n + r&lt;/td&gt; 
   &lt;td align="center"&gt;n + r&lt;/td&gt; 
   &lt;td align="center"&gt;n + r&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;r - biggest number in array&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Radix sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;n * k&lt;/td&gt; 
   &lt;td align="center"&gt;n * k&lt;/td&gt; 
   &lt;td align="center"&gt;n * k&lt;/td&gt; 
   &lt;td align="center"&gt;n + k&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="left"&gt;k - length of longest key&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Project Backers&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You may support this project via ❤️️ &lt;a href="https://github.com/sponsors/trekhleb"&gt;GitHub&lt;/a&gt; or ❤️️ &lt;a href="https://www.patreon.com/trekhleb"&gt;Patreon&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms/raw/master/BACKERS.md"&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;∑ = 1&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Author&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://trekhleb.dev"&gt;@trekhleb&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A few more &lt;a href="https://trekhleb.dev/projects/"&gt;projects&lt;/a&gt; and &lt;a href="https://trekhleb.dev/blog/"&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href="https://trekhleb.dev"&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pointfreeco/swift-composable-architecture</title>
      <link>https://github.com/pointfreeco/swift-composable-architecture</link>
      <description>&lt;p&gt;A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Composable Architecture&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/pointfreeco/swift-composable-architecture/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/pointfreeco/swift-composable-architecture/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt; &lt;a href="https://www.pointfree.co/slack-invite"&gt;&lt;img src="https://img.shields.io/badge/slack-chat-informational.svg?label=Slack&amp;amp;logo=slack" alt="Slack"&gt;&lt;/a&gt; &lt;a href="https://swiftpackageindex.com/pointfreeco/swift-composable-architecture"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dswift-versions" alt=""&gt;&lt;/a&gt; &lt;a href="https://swiftpackageindex.com/pointfreeco/swift-composable-architecture"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dplatforms" alt=""&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, iPadOS, visionOS, tvOS, and watchOS).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#what-is-the-composable-architecture"&gt;What is the Composable Architecture?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#learn-more"&gt;Learn more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#basic-usage"&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#community"&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#translations"&gt;Translations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is the Composable Architecture?&lt;/h2&gt; 
&lt;p&gt;This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;State management&lt;/strong&gt; &lt;br&gt; How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt; &lt;br&gt; How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Side effects&lt;/strong&gt; &lt;br&gt; How to let certain parts of the application talk to the outside world in the most testable and understandable way possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; &lt;br&gt; How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ergonomics&lt;/strong&gt; &lt;br&gt; How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was designed over the course of many episodes on &lt;a href="https://www.pointfree.co"&gt;Point-Free&lt;/a&gt;, a video series exploring advanced programming topics in the Swift language, hosted by &lt;a href="https://twitter.com/mbrandonw"&gt;Brandon Williams&lt;/a&gt; and &lt;a href="https://twitter.com/stephencelis"&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can watch all of the episodes &lt;a href="https://www.pointfree.co/collections/composable-architecture"&gt;here&lt;/a&gt;, as well as a dedicated, &lt;a href="https://www.pointfree.co/collections/tours/composable-architecture-1-0"&gt;multipart tour&lt;/a&gt; of the architecture from scratch.&lt;/p&gt; 
&lt;a href="https://www.pointfree.co/collections/tours/composable-architecture-1-0"&gt; &lt;img alt="video poster image" src="https://d3rccdn33rt8ze.cloudfront.net/episodes/0243.jpeg" width="600"&gt; &lt;/a&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples"&gt;&lt;img src="https://d3rccdn33rt8ze.cloudfront.net/composable-architecture/demos.png" alt="Screen shots of example applications"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo comes with &lt;em&gt;lots&lt;/em&gt; of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out &lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples"&gt;this&lt;/a&gt; directory to see them all, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/CaseStudies"&gt;Case Studies&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Getting started&lt;/li&gt; 
   &lt;li&gt;Effects&lt;/li&gt; 
   &lt;li&gt;Navigation&lt;/li&gt; 
   &lt;li&gt;Higher-order reducers&lt;/li&gt; 
   &lt;li&gt;Reusable components&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pointfreeco/composable-core-location/tree/main/Examples/LocationManager"&gt;Location manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pointfreeco/composable-core-motion/tree/main/Examples/MotionManager"&gt;Motion manager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Search"&gt;Search&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SpeechRecognition"&gt;Speech Recognition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SyncUps"&gt;SyncUps app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe"&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Todos"&gt;Todos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/VoiceMemos"&gt;Voice memos&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Looking for something more substantial? Check out the source code for &lt;a href="https://github.com/pointfreeco/isowords"&gt;isowords&lt;/a&gt;, an iOS word search game built in SwiftUI and the Composable Architecture.&lt;/p&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For a step-by-step interactive tutorial, be sure to check out &lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/tutorials/meetcomposablearchitecture"&gt;Meet the Composable Architecture&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To build a feature using the Composable Architecture you define some types and values that model your domain:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: A type that describes the data your feature needs to perform its logic and render its UI.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an &lt;code&gt;Effect&lt;/code&gt; value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The benefits of doing this are that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.&lt;/p&gt; 
&lt;p&gt;As a basic example, consider a UI that shows a number along with "+" and "−" buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and displays it in the view.&lt;/p&gt; 
&lt;p&gt;To implement this feature we create a new type that will house the domain and behavior of the feature, and it will be annotated with the &lt;code&gt;@Reducer&lt;/code&gt; macro:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;import ComposableArchitecture

@Reducer
struct Feature {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In here we need to define a type for the feature's state, which consists of an integer for the current count, as well as an optional string that represents the fact being presented:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable {
    var count = 0
    var numberFact: String?
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] We've applied the &lt;code&gt;@ObservableState&lt;/code&gt; macro to &lt;code&gt;State&lt;/code&gt; in order to take advantage of the observation tools in the library.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We also need to define a type for the feature's actions. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action that occurs when we receive a response from the fact API request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action {
    case decrementButtonTapped
    case incrementButtonTapped
    case numberFactButtonTapped
    case numberFactResponse(String)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then we implement the &lt;code&gt;body&lt;/code&gt; property, which is responsible for composing the actual logic and behavior for the feature. In it we can use the &lt;code&gt;Reduce&lt;/code&gt; reducer to describe how to change the current state to the next state, and what effects need to be executed. Some actions don't need to execute effects, and they can return &lt;code&gt;.none&lt;/code&gt; to represent that:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;@Reducer
struct Feature {
  @ObservableState
  struct State: Equatable { /* ... */ }
  enum Action { /* ... */ }

  var body: some Reducer&amp;lt;State, Action&amp;gt; {
    Reduce { state, action in
      switch action {
      case .decrementButtonTapped:
        state.count -= 1
        return .none

      case .incrementButtonTapped:
        state.count += 1
        return .none

      case .numberFactButtonTapped:
        return .run { [count = state.count] send in
          let (data, _) = try await URLSession.shared.data(
            from: URL(string: "http://numbersapi.com/\(count)/trivia")!
          )
          await send(
            .numberFactResponse(String(decoding: data, as: UTF8.self))
          )
        }

      case let .numberFactResponse(fact):
        state.numberFact = fact
        return .none
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then finally we define the view that displays the feature. It holds onto a &lt;code&gt;StoreOf&amp;lt;Feature&amp;gt;&lt;/code&gt; so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;struct FeatureView: View {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  var body: some View {
    Form {
      Section {
        Text("\(store.count)")
        Button("Decrement") { store.send(.decrementButtonTapped) }
        Button("Increment") { store.send(.incrementButtonTapped) }
      }

      Section {
        Button("Number fact") { store.send(.numberFactButtonTapped) }
      }
      
      if let fact = store.numberFact {
        Text(fact)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also straightforward to have a UIKit controller driven off of this store. You can observe state changes in the store in &lt;code&gt;viewDidLoad&lt;/code&gt;, and then populate the UI components with data from the store. The code is a bit longer than the SwiftUI version, so we have collapsed it here:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand!&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-swift"&gt;class FeatureViewController: UIViewController {
  let store: StoreOf&amp;lt;Feature&amp;gt;

  init(store: StoreOf&amp;lt;Feature&amp;gt;) {
    self.store = store
    super.init(nibName: nil, bundle: nil)
  }

  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  override func viewDidLoad() {
    super.viewDidLoad()

    let countLabel = UILabel()
    let decrementButton = UIButton()
    let incrementButton = UIButton()
    let factLabel = UILabel()
    
    // Omitted: Add subviews and set up constraints...
    
    observe { [weak self] in
      guard let self 
      else { return }
      
      countLabel.text = "\(self.store.count)"
      factLabel.text = self.store.numberFact
    }
  }

  @objc private func incrementButtonTapped() {
    self.store.send(.incrementButtonTapped)
  }
  @objc private func decrementButtonTapped() {
    self.store.send(.decrementButtonTapped)
  }
  @objc private func factButtonTapped() {
    self.store.send(.numberFactButtonTapped)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Once we are ready to display this view, for example in the app's entry point, we can construct a store. This can be done by specifying the initial state to start the application in, as well as the reducer that will power the application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;import ComposableArchitecture

@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that is enough to get something on the screen to play around with. It's definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.&lt;/p&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on testing, see the dedicated &lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testingtca"&gt;testing&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To test use a &lt;code&gt;TestStore&lt;/code&gt;, which can be created with the same information as the &lt;code&gt;Store&lt;/code&gt;, but it does extra work to allow you to assert how your feature evolves as actions are sent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature()
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. For example, we can simulate the user flow of tapping on the increment and decrement buttons:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;// Test that tapping on the increment/decrement buttons changes the count
await store.send(.incrementButtonTapped) {
  $0.count = 1
}
await store.send(.decrementButtonTapped) {
  $0.count = 0
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert on that. For example, if we simulate the user tapping on the fact button we expect to receive a fact response back with the fact, which then causes the &lt;code&gt;numberFact&lt;/code&gt; state to be populated:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = ???
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, how do we know what fact is going to be sent back to us?&lt;/p&gt; 
&lt;p&gt;Currently our reducer is using an effect that reaches out into the real world to hit an API server, and that means we have no way to control its behavior. We are at the whims of our internet connectivity and the availability of the API server in order to write this test.&lt;/p&gt; 
&lt;p&gt;It would be better for this dependency to be passed to the reducer so that we can use a live dependency when running the application on a device, but use a mocked dependency for tests. We can do this by adding a property to the &lt;code&gt;Feature&lt;/code&gt; reducer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;@Reducer
struct Feature {
  let numberFact: (Int) async throws -&amp;gt; String
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then we can use it in the &lt;code&gt;reduce&lt;/code&gt; implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;case .numberFactButtonTapped:
  return .run { [count = state.count] send in 
    let fact = try await self.numberFact(count)
    await send(.numberFactResponse(fact))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And in the entry point of the application we can provide a version of the dependency that actually interacts with the real world API server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature(
            numberFact: { number in
              let (data, _) = try await URLSession.shared.data(
                from: URL(string: "http://numbersapi.com/\(number)")!
              )
              return String(decoding: data, as: UTF8.self)
            }
          )
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But in tests we can use a mock dependency that immediately returns a deterministic, predictable fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;@Test
func basics() async {
  let store = TestStore(initialState: Feature.State()) {
    Feature(numberFact: { "\($0) is a good number Brent" })
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work we can finish the test by simulating the user tapping on the fact button, and then receiving the response from the dependency to present the fact:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;await store.send(.numberFactButtonTapped)

await store.receive(\.numberFactResponse) {
  $0.numberFact = "0 is a good number Brent"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also improve the ergonomics of using the &lt;code&gt;numberFact&lt;/code&gt; dependency in our application. Over time the application may evolve into many features, and some of those features may also want access to &lt;code&gt;numberFact&lt;/code&gt;, and explicitly passing it through all layers can get annoying. There is a process you can follow to “register” dependencies with the library, making them instantly available to any layer in the application.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] For more in-depth information on dependency management, see the dedicated &lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement"&gt;dependencies&lt;/a&gt; article.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We can start by wrapping the number fact functionality in a new type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;struct NumberFactClient {
  var fetch: (Int) async throws -&amp;gt; String
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then registering that type with the dependency management system by conforming the client to the &lt;code&gt;DependencyKey&lt;/code&gt; protocol, which requires you to specify the live value to use when running the application in simulators or devices:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;extension NumberFactClient: DependencyKey {
  static let liveValue = Self(
    fetch: { number in
      let (data, _) = try await URLSession.shared
        .data(from: URL(string: "http://numbersapi.com/\(number)")!
      )
      return String(decoding: data, as: UTF8.self)
    }
  )
}

extension DependencyValues {
  var numberFact: NumberFactClient {
    get { self[NumberFactClient.self] }
    set { self[NumberFactClient.self] = newValue }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With that little bit of upfront work done you can instantly start making use of the dependency in any feature by using the &lt;code&gt;@Dependency&lt;/code&gt; property wrapper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt; @Reducer
 struct Feature {
-  let numberFact: (Int) async throws -&amp;gt; String
+  @Dependency(\.numberFact) var numberFact
   
   …

-  try await self.numberFact(count)
+  try await self.numberFact.fetch(count)
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This code works exactly as it did before, but you no longer have to explicitly pass the dependency when constructing the feature's reducer. When running the app in previews, the simulator or on a device, the live dependency will be provided to the reducer, and in tests the test dependency will be provided.&lt;/p&gt; 
&lt;p&gt;This means the entry point to the application no longer needs to construct dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;@main
struct MyApp: App {
  var body: some Scene {
    WindowGroup {
      FeatureView(
        store: Store(initialState: Feature.State()) {
          Feature()
        }
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the test store can be constructed without specifying any dependencies, but you can still override any dependency you need to for the purpose of the test:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-swift"&gt;let store = TestStore(initialState: Feature.State()) {
  Feature()
} withDependencies: {
  $0.numberFact.fetch = { "\($0) is a good number Brent" }
}

// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That is the basics of building and testing a feature in the Composable Architecture. There are &lt;em&gt;a lot&lt;/em&gt; more things to be explored, such as composition, modularity, adaptability, and complex effects. The &lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples"&gt;Examples&lt;/a&gt; directory has a bunch of projects to explore to see more advanced usages.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The documentation for releases and &lt;code&gt;main&lt;/code&gt; are available here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/"&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.17.0/documentation/composablearchitecture/"&gt;1.17.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.17"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt; Other versions &lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.16.0/documentation/composablearchitecture/"&gt;1.16.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.16"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.15.0/documentation/composablearchitecture/"&gt;1.15.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.15"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.14.0/documentation/composablearchitecture/"&gt;1.14.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.14"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.13.0/documentation/composablearchitecture/"&gt;1.13.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.13"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.12.0/documentation/composablearchitecture/"&gt;1.12.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.12"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.11.0/documentation/composablearchitecture/"&gt;1.11.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.11"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.10.0/documentation/composablearchitecture/"&gt;1.10.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.10"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.9.0/documentation/composablearchitecture/"&gt;1.9.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.9"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.8.0/documentation/composablearchitecture/"&gt;1.8.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.8"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.7.0/documentation/composablearchitecture/"&gt;1.7.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.7"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.6.0/documentation/composablearchitecture/"&gt;1.6.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.6"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.5.0/documentation/composablearchitecture/"&gt;1.5.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.5"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.4.0/documentation/composablearchitecture/"&gt;1.4.0&lt;/a&gt; (&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.4"&gt;migration guide&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.3.0/documentation/composablearchitecture/"&gt;1.3.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.2.0/documentation/composablearchitecture/"&gt;1.2.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.1.0/documentation/composablearchitecture/"&gt;1.1.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/1.0.0/documentation/composablearchitecture/"&gt;1.0.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/0.59.0/documentation/composablearchitecture/"&gt;0.59.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/0.58.0/documentation/composablearchitecture/"&gt;0.58.0&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/0.57.0/documentation/composablearchitecture/"&gt;0.57.0&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;p&gt;There are a number of articles in the documentation that you may find helpful as you become more comfortable with the library:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/gettingstarted"&gt;Getting started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement"&gt;Dependencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testingtca"&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/navigation"&gt;Navigation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/sharingstate"&gt;Sharing state&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/performance"&gt;Performance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/swiftconcurrency"&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/bindings"&gt;Bindings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;We have a &lt;a href="https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/faq"&gt;dedicated article&lt;/a&gt; for all of the most frequently asked questions and comments people have concerning the library.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, there are a number of places you can discuss with fellow &lt;a href="http://www.pointfree.co"&gt;Point-Free&lt;/a&gt; enthusiasts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For long-form discussions, we recommend the &lt;a href="https://github.com/pointfreeco/swift-composable-architecture/discussions"&gt;discussions&lt;/a&gt; tab of this repo.&lt;/li&gt; 
 &lt;li&gt;For casual chat, we recommend the &lt;a href="http://pointfree.co/slack-invite"&gt;Point-Free Community slack&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Add Package Dependencies...&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Enter "&lt;a href="https://github.com/pointfreeco/swift-composable-architecture"&gt;https://github.com/pointfreeco/swift-composable-architecture&lt;/a&gt;" into the package repository URL text field&lt;/li&gt; 
 &lt;li&gt;Depending on how your project is structured: 
  &lt;ul&gt; 
   &lt;li&gt;If you have a single application target that needs access to the library, then add &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; directly to your application.&lt;/li&gt; 
   &lt;li&gt;If you want to use this library from multiple Xcode targets, or mix Xcode targets and SPM targets, you must create a shared framework that depends on &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; and then depend on that framework in all of your targets. For an example of this, check out the &lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe"&gt;Tic-Tac-Toe&lt;/a&gt; demo application, which splits lots of features into modules and consumes the static library in this fashion using the &lt;strong&gt;tic-tac-toe&lt;/strong&gt; Swift package.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Companion libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture is built with extensibility in mind, and there are a number of community-supported libraries available to enhance your applications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Ryu0118/swift-composable-architecture-extras"&gt;Composable Architecture Extras&lt;/a&gt;: A companion library to the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mentalflux/tca-composer"&gt;TCAComposer&lt;/a&gt;: A macro framework for generating boiler-plate code in the Composable Architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/johnpatrickmorgan/TCACoordinators"&gt;TCACoordinators&lt;/a&gt;: The coordinator pattern in the Composable Architecture.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you'd like to contribute a library, please &lt;a href="https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md"&gt;open a PR&lt;/a&gt; with a link to it!&lt;/p&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;The following translations of this README have been contributed by members of the community:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/NorhanBoghdadi/1b98d55c02b683ddef7e05c2ebcccd47"&gt;Arabic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/nikitamounier/0e93eb832cf389db12f9a69da030a2dc"&gt;French&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/akashsoni01/b358ee0b3b747167964ef6946123c88d"&gt;Hindi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/wendyliga/792ea9ac5cc887f59de70a9e39cc7343"&gt;Indonesian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/Bellaposa/5114e6d4d55fdb1388e8186886d48958"&gt;Italian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/Achoo-kr/2d0712deb77f78b3379551ac7baea3e4"&gt;Japanese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/Achoo-kr/5d8936d12e71028fcc4a7c5e078ca038"&gt;Korean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/MarcelStarczyk/6b6153051f46912a665c32199f0d1d54"&gt;Polish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/SevioCorrea/2bbf337cd084a58c89f2f7f370626dc8"&gt;Portuguese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/SubvertDev/3317d0c3b35ed601be330d6fc0df5aba"&gt;Russian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad"&gt;Simplified Chinese&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/pitt500/f5e32fccb575ce112ffea2827c7bf942"&gt;Spanish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/gokhanamal/93001244ef0c1cec58abeb1afc0de37c"&gt;Turkish&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gist.github.com/barabashd/33b64676195ce41f4bb73c327ea512a8"&gt;Ukrainian&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you'd like to contribute a translation, please &lt;a href="https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md"&gt;open a PR&lt;/a&gt; with a link to a &lt;a href="https://gist.github.com"&gt;Gist&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Credits and thanks&lt;/h2&gt; 
&lt;p&gt;The following people gave feedback on the library at its early stages and helped make the library what it is today:&lt;/p&gt; 
&lt;p&gt;Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the &lt;a href="https://www.pointfree.co"&gt;Point-Free&lt;/a&gt; subscribers 😁.&lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/liscio"&gt;Chris Liscio&lt;/a&gt; who helped us work through many strange SwiftUI quirks and helped refine the final API.&lt;/p&gt; 
&lt;p&gt;And thanks to &lt;a href="https://github.com/freak4pc"&gt;Shai Mishali&lt;/a&gt; and the &lt;a href="https://github.com/CombineCommunity/CombineExt/"&gt;CombineCommunity&lt;/a&gt; project, from which we took their implementation of &lt;code&gt;Publishers.Create&lt;/code&gt;, which we use in &lt;code&gt;Effect&lt;/code&gt; to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.&lt;/p&gt; 
&lt;h2&gt;Other libraries&lt;/h2&gt; 
&lt;p&gt;The Composable Architecture was built on a foundation of ideas started by other libraries, in particular &lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt; and &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/uber/RIBs"&gt;RIBs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/ReactiveCocoa/Loop"&gt;Loop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/ReSwift/ReSwift"&gt;ReSwift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/square/workflow"&gt;Workflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/ReactorKit/ReactorKit"&gt;ReactorKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/NoTests/RxFeedback.swift"&gt;RxFeedback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/spotify/mobius.swift"&gt;Mobius.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;details&gt; 
   &lt;summary&gt;And more&lt;/summary&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href="https://github.com/FluxorOrg/Fluxor"&gt;Fluxor&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href="https://github.com/RPallas92/PromisedArchitectureKit"&gt;PromisedArchitectureKit&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/details&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This library is released under the MIT license. See &lt;a href="https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/LICENSE"&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dyad-sh/dyad</title>
      <link>https://github.com/dyad-sh/dyad</link>
      <description>&lt;p&gt;Free, local, open-source AI app builder | v0 / lovable / Bolt alternative | 🌟 Star if you like it!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dyad&lt;/h1&gt; 
&lt;p&gt;Dyad is a local, open-source AI app builder. It's fast, private and fully under your control — like Lovable, v0, or Bolt, but running right on your machine.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/f6c83dfc-6ffd-4d32-93dd-4b9c46d17790" alt="Image"&gt;&lt;/p&gt; 
&lt;p&gt;More info at: &lt;a href="http://dyad.sh/"&gt;http://dyad.sh/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🚀 Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;⚡️ &lt;strong&gt;Local&lt;/strong&gt;: Fast, private and no lock-in.&lt;/li&gt; 
 &lt;li&gt;🛠 &lt;strong&gt;Bring your own keys&lt;/strong&gt;: Use your own AI API keys with no vendor lock-in.&lt;/li&gt; 
 &lt;li&gt;🖥️ &lt;strong&gt;Cross-platform&lt;/strong&gt;: Easy to run on Mac or Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📦 Download&lt;/h2&gt; 
&lt;p&gt;No sign-up required. Just download and go.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://www.dyad.sh/#download"&gt;👉 Download for your platform&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;dyad&lt;/strong&gt; is open source (Apache 2.0-licensed).&lt;/p&gt; 
&lt;p&gt;If you're interested in contributing to dyad, please read our &lt;a href="https://raw.githubusercontent.com/dyad-sh/dyad/main/CONTRIBUTING.md"&gt;contributing&lt;/a&gt; doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubesphere/kubesphere</title>
      <link>https://github.com/kubesphere/kubesphere</link>
      <description>&lt;p&gt;The container platform tailored for Kubernetes multi-cloud, datacenter, and edge management ⎈ 🖥 ☁️&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://kubesphere.io/"&gt;&lt;img src="https://raw.githubusercontent.com/kubesphere/kubesphere/master/docs/images/kubesphere-icon.gif" alt="banner" width="200px"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;The container platform tailored for &lt;i&gt;Kubernetes multi-cloud, datacenter, and edge&lt;/i&gt; management&lt;/b&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://goreportcard.com/report/github.com/kubesphere/kubesphere"&gt;&lt;img src="https://goreportcard.com/badge/github.com/kubesphere/kubesphere" alt="A+"&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/kubesphere/ks-installer"&gt;&lt;img src="https://img.shields.io/docker/pulls/kubesphere/ks-installer"&gt;&lt;/a&gt; &lt;a href="https://github.com/kubesphere/kubesphere/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22good+first+issue%22"&gt;&lt;img src="https://img.shields.io/github/issues/kubesphere/kubesphere/good%20first%20issue?logo=github" alt="good first issue"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=KubeSphere"&gt;&lt;img src="https://img.shields.io/twitter/follow/KubeSphere?style=social" alt="follow on Twitter"&gt;&lt;/a&gt; &lt;a href="https://join.slack.com/t/kubesphere/shared_invite/zt-2b4t6rdb4-ico_4UJzCln_S2c1pcrIpQ"&gt;&lt;img src="https://img.shields.io/badge/Slack-2000%2B-blueviolet?logo=slack&amp;amp;logoColor=white"&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UCyTdUQUYjf7XLjxECx63Hpw"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UCyTdUQUYjf7XLjxECx63Hpw?style=social"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;What is KubeSphere&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/kubesphere/kubesphere/master/README_zh.md"&gt;中文&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://kubesphere.io/"&gt;KubeSphere&lt;/a&gt; is a &lt;strong&gt;distributed operating system for cloud-native application management&lt;/strong&gt;, using &lt;a href="https://kubernetes.io"&gt;Kubernetes&lt;/a&gt; as its kernel. It provides a plug-and-play architecture, allowing third-party applications to be seamlessly integrated into its ecosystem. KubeSphere is also a multi-tenant container platform with full-stack automated IT operation and streamlined DevOps workflows. It provides developer-friendly wizard web UI, helping enterprises to build out a more robust and feature-rich platform, which includes most common functionalities needed for enterprise Kubernetes strategy, see &lt;a href="https://raw.githubusercontent.com/kubesphere/kubesphere/master/#features"&gt;Feature List&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;The following screenshots give a close insight into KubeSphere. Please check &lt;a href="https://kubesphere.io/docs/introduction/what-is-kubesphere/"&gt;What is KubeSphere&lt;/a&gt; for further information.&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td width="50%" align="center"&gt;&lt;b&gt;Workbench&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center"&gt;&lt;b&gt;Project Resources&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/kubesphere/kubesphere/master/docs/images/console.png"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/kubesphere/kubesphere/master/docs/images/project.png"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="50%" align="center"&gt;&lt;b&gt;CI/CD Pipeline&lt;/b&gt;&lt;/td&gt; 
   &lt;td width="50%" align="center"&gt;&lt;b&gt;App Store&lt;/b&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/kubesphere/kubesphere/master/docs/images/cicd.png"&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/kubesphere/kubesphere/master/docs/images/app-store.png"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Demo environment&lt;/h2&gt; 
&lt;p&gt;🎮 &lt;a href="https://kubesphere.cloud/en/console/managed-cluster/"&gt;KubeSphere Lite&lt;/a&gt; provides you with free, stable, and out-of-the-box managed cluster service. After registration and login, you can easily create a K8s cluster with KubeSphere installed in only 5 seconds and experience feature-rich KubeSphere.&lt;/p&gt; 
&lt;p&gt;🖥 You can view the &lt;a href="https://youtu.be/YxZ1YUv0CYs"&gt;Demo Video&lt;/a&gt; to get started with KubeSphere.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🧩 Extensible Architecture&lt;/b&gt;&lt;/summary&gt; Designed for flexibility, supporting plugin-based extensions and seamless integrations. Easily customize and expand functionalities to meet evolving needs. 
 &lt;a href="https://kubesphere.io/docs/v4.1/01-intro/02-architecture/"&gt;Learn more&lt;/a&gt;. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🕸 Provisioning Kubernetes Cluster&lt;/b&gt;&lt;/summary&gt; Support deploy Kubernetes on any infrastructure, support online and air-gapped installation. 
 &lt;a href="https://kubesphere.io/docs/v4.1/03-installation-and-upgrade/02-install-kubesphere/"&gt;Learn more&lt;/a&gt;. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🔗 Kubernetes Multi-cluster Management&lt;/b&gt;&lt;/summary&gt; Provide a centralized control plane to manage multiple Kubernetes clusters, and support the ability to propagate an app to multiple K8s clusters across different cloud providers. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🤖 Kubernetes DevOps&lt;/b&gt;&lt;/summary&gt; Provide GitOps-based CD solutions and use Argo CD to provide the underlying support, collecting CD status information in real time. With the mainstream CI engine Jenkins integrated, DevOps has never been easier. 
 &lt;a href="https://kubesphere.io/docs/v4.1/11-use-extensions/01-devops/01-overview/"&gt;Learn more&lt;/a&gt;. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🔎 Cloud Native Observability&lt;/b&gt;&lt;/summary&gt; Multi-dimensional monitoring, events and auditing logs are supported; multi-tenant log query and collection, alerting and notification are built-in. 
 &lt;a href="https://kubesphere.io/docs/v4.1/11-use-extensions/05-observability-platform/"&gt;Learn more&lt;/a&gt;. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🌐 Service Mesh (Istio-based)&lt;/b&gt;&lt;/summary&gt; Provide fine-grained traffic management, observability and tracing for distributed microservice applications, provides visualization for traffic topology. 
 &lt;a href="https://kubesphere.io/docs/v4.1/11-use-extensions/03-service-mesh/"&gt;Learn more&lt;/a&gt;. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;💻 App Store&lt;/b&gt;&lt;/summary&gt; Provide an App Store for Helm-based applications, and offer application lifecycle management on Kubernetes platform. 
 &lt;a href="https://kubesphere.io/docs/v4.1/11-use-extensions/02-app-store/02-app-management/"&gt;Learn more&lt;/a&gt;. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;💡 Edge Computing Platform&lt;/b&gt;&lt;/summary&gt; KubeSphere integrates 
 &lt;a href="https://kubeedge.io/en/"&gt;KubeEdge&lt;/a&gt; to enable users to deploy applications on the edge devices and view logs and monitoring metrics of them on the console. 
 &lt;a href="https://kubesphere.io/docs/v4.1/11-use-extensions/17-kubeedge/"&gt;Learn more&lt;/a&gt;. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🗃 Support Multiple Storage and Networking Solutions&lt;/b&gt;&lt;/summary&gt; 
 &lt;li&gt;Support GlusterFS, CephRBD, NFS, LocalPV solutions, and provide CSI plugins to consume storage from multiple cloud providers.&lt;/li&gt;
 &lt;li&gt;Provide Load Balancer Implementation &lt;a href="https://github.com/kubesphere/openelb"&gt;OpenELB&lt;/a&gt; for Kubernetes in bare-metal, edge, and virtualization.&lt;/li&gt;
 &lt;li&gt; Provides network policy and Pod IP pools management, support Calico, Flannel, Kube-OVN&lt;/li&gt;.. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🏢 Multi-Tenancy&lt;/b&gt;&lt;/summary&gt; Isolated workspaces with role-based access control ensure secure resource sharing across multiple tenants. Supports fine-grained permissions and quota management. 
 &lt;a href="https://kubesphere.io/docs/v4.1/08-workspace-management/"&gt;Learn more&lt;/a&gt;. 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;🧠 GPU Workloads Scheduling and Monitoring&lt;/b&gt;&lt;/summary&gt; Create GPU workloads on the GUI, schedule GPU resources, and manage GPU resource quotas by tenant. 
&lt;/details&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;KubeSphere 4.x adopts a microkernel + extension components architecture (&lt;a href="https://kubesphere.io/docs/v4.1/01-intro/01-introduction/"&gt;codename LuBan&lt;/a&gt;). The core part (KubeSphere Core) only includes the essential basic functions required for system operation, with independent functional modules split and provided in the form of extension components. Users can dynamically manage the extension components during system operation. With the extension capabilities, KubeSphere can support more application scenarios and meet the needs of different users.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/kubesphere/kubesphere/master/docs/images/architecture.png" alt="Architecture"&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Latest release&lt;/h2&gt; 
&lt;p&gt;🎉 KubeSphere v4.1.2 was released! It brings enhancements and better user experience, see the &lt;a href="https://kubesphere.io/docs/v4.1/20-release-notes/release-v412/"&gt;Release Notes For 4.1.2&lt;/a&gt; for the updates.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;KubeSphere can run anywhere from on-premise datacenter to any cloud to edge. In addition, it can be deployed on any version-compatible Kubernetes cluster. KubeSphere consumes very few resources, and you can optionally &lt;a href="https://kubesphere.io/docs/v4.1/02-quickstart/03-install-an-extension/"&gt;install additional extensions after installation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Quick start&lt;/h3&gt; 
&lt;h4&gt;Installing on K8s&lt;/h4&gt; 
&lt;p&gt;Run the following commands to install KubeSphere on an existing Kubernetes cluster:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;helm upgrade --install -n kubesphere-system --create-namespace ks-core https://charts.kubesphere.io/main/ks-core-1.1.3.tgz --debug --wait
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;KubeSphere for hosted Kubernetes services&lt;/h3&gt; 
&lt;p&gt;KubeSphere is hosted on the following cloud providers, and you can try KubeSphere by one-click installation on their hosted Kubernetes services.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://aws.amazon.com/quickstart/architecture/qingcloud-kubesphere/"&gt;KubeSphere for Amazon EKS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://market.azure.cn/marketplace/apps/qingcloud.kubesphere"&gt;KubeSphere for Azure AKS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://marketplace.digitalocean.com/apps/kubesphere"&gt;KubeSphere for DigitalOcean Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.qingcloud.com/products/kubesphereqke"&gt;KubeSphere on QingCloud AppCenter(QKE)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also install KubeSphere on other hosted Kubernetes services within minutes, see the &lt;a href="https://kubesphere.io/docs/v4.1/02-quickstart/01-install-kubesphere/"&gt;step-by-step guides&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;👨‍💻 No internet access? Refer to the &lt;a href="https://kubesphere.io/docs/v4.1/03-installation-and-upgrade/02-install-kubesphere/04-offline-installation/"&gt;Air-gapped Installation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Guidance, discussion, contribution, and support&lt;/h2&gt; 
&lt;p&gt;You can reach the KubeSphere &lt;a href="https://github.com/kubesphere/community"&gt;community&lt;/a&gt; and developers via the following channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://join.slack.com/t/kubesphere/shared_invite/zt-2b4t6rdb4-ico_4UJzCln_S2c1pcrIpQ"&gt;Slack Channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCyTdUQUYjf7XLjxECx63Hpw"&gt;Youtube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/KubeSphere"&gt;X/Twitter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span&gt;🤗&lt;/span&gt; Please submit any KubeSphere bugs, issues, and feature requests to &lt;a href="https://github.com/kubesphere/kubesphere/issues"&gt;KubeSphere GitHub Issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;💟&lt;/span&gt; The KubeSphere team also provides efficient official ticket support to respond in hours. For more information, click &lt;a href="https://kubesphere.cloud/en/ticket/"&gt;KubeSphere Online Support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubesphere/community/tree/master/developer-guide/development"&gt;KubeSphere Development Guide&lt;/a&gt; explains how to build and develop KubeSphere.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dev-guide.kubesphere.io/extension-dev-guide/en/"&gt;KubeSphere Extension Development Guide&lt;/a&gt; explains how to develop KubeSphere extensions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Code of conduct&lt;/h2&gt; 
&lt;p&gt;Participation in the KubeSphere community is governed by the &lt;a href="https://github.com/kubesphere/community/raw/master/code-of-conduct.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;The security process for reporting vulnerabilities is described in &lt;a href="https://raw.githubusercontent.com/kubesphere/kubesphere/master/SECURITY.md"&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Who are using KubeSphere&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://kubesphere.io/case/"&gt;user case studies&lt;/a&gt; page includes the user list of the project. You can &lt;a href="https://github.com/kubesphere/kubesphere/issues/4123"&gt;leave a comment&lt;/a&gt; to let us know your use case.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p align="center"&gt; &lt;br&gt;&lt;br&gt; &lt;img src="https://raw.githubusercontent.com/cncf/artwork/refs/heads/main/other/cncf-landscape/horizontal/color/cncf-landscape-horizontal-color.svg?sanitize=true" width="150"&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://raw.githubusercontent.com/cncf/artwork/refs/heads/main/other/cncf/horizontal/color/cncf-color.svg?sanitize=true" width="200"&gt;&amp;nbsp;&amp;nbsp; &lt;br&gt;&lt;br&gt; KubeSphere is a member of CNCF and a &lt;a href="https://www.cncf.io/certification/software-conformance/#logos"&gt;Kubernetes Conformance Certified platform &lt;/a&gt;, which enriches the &lt;a href="https://landscape.cncf.io/?landscape=observability-and-analysis&amp;amp;group=certified-partners-and-providers&amp;amp;item=platform--certified-kubernetes-distribution--kubesphere"&gt;CNCF CLOUD NATIVE Landscape. &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jlevy/the-art-of-command-line</title>
      <link>https://github.com/jlevy/the-art-of-command-line</link>
      <description>&lt;p&gt;Master the command line, in one page&lt;/p&gt;&lt;hr&gt;&lt;p&gt;🌍 &lt;em&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-cs.md"&gt;Čeština&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-de.md"&gt;Deutsch&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-el.md"&gt;Ελληνικά&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md"&gt;English&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-es.md"&gt;Español&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-fr.md"&gt;Français&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-id.md"&gt;Indonesia&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-it.md"&gt;Italiano&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-ja.md"&gt;日本語&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-ko.md"&gt;한국어&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-pl.md"&gt;polski&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-pt.md"&gt;Português&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-ro.md"&gt;Română&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-ru.md"&gt;Русский&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-sl.md"&gt;Slovenščina&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-uk.md"&gt;Українська&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md"&gt;简体中文&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh-Hant.md"&gt;繁體中文&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h1&gt;The Art of Command Line&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Note: I'm planning to revise this and looking for a new co-author to help with expanding this into a more comprehensive guide. While it's very popular, it could be broader and a bit deeper. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. –&lt;a href="https://github.com/jlevy"&gt;jlevy&lt;/a&gt;, &lt;a href="https://www.holloway.com"&gt;Holloway&lt;/a&gt;. Thank you!&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#meta"&gt;Meta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#basics"&gt;Basics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#everyday-use"&gt;Everyday use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#processing-files-and-data"&gt;Processing files and data&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#system-debugging"&gt;System debugging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#one-liners"&gt;One-liners&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#obscure-but-useful"&gt;Obscure but useful&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#macos-only"&gt;macOS only&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#windows-only"&gt;Windows only&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#more-resources"&gt;More resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#disclaimer"&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/cowsay.png" alt="curl -s 'https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md' | egrep -o '\w+' | tr -d '`' | cowsay -W50"&gt;&lt;/p&gt; 
&lt;p&gt;Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility and productivity as an engineer in both obvious and subtle ways. This is a selection of notes and tips on using the command-line that we've found useful when working on Linux. Some tips are elementary, and some are fairly specific, sophisticated, or obscure. This page is not long, but if you can use and recall all the items here, you know a lot.&lt;/p&gt; 
&lt;p&gt;This work is the result of &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/AUTHORS.md"&gt;many authors and translators&lt;/a&gt;. Some of this &lt;a href="http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands"&gt;originally&lt;/a&gt; &lt;a href="http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix"&gt;appeared&lt;/a&gt; on &lt;a href="http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know"&gt;Quora&lt;/a&gt;, but it has since moved to GitHub, where people more talented than the original author have made numerous improvements. &lt;a href="https://airtable.com/shrzMhx00YiIVAWJg"&gt;&lt;strong&gt;Please submit a question&lt;/strong&gt;&lt;/a&gt; if you have a question related to the command line. &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/CONTRIBUTING.md"&gt;&lt;strong&gt;Please contribute&lt;/strong&gt;&lt;/a&gt; if you see an error or something that could be better!&lt;/p&gt; 
&lt;h2&gt;Meta&lt;/h2&gt; 
&lt;p&gt;Scope:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;This guide is for both beginners and experienced users. The goals are &lt;em&gt;breadth&lt;/em&gt; (everything important), &lt;em&gt;specificity&lt;/em&gt; (give concrete examples of the most common case), and &lt;em&gt;brevity&lt;/em&gt; (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.&lt;/li&gt; 
 &lt;li&gt;This is written for Linux, with the exception of the "&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#macos-only"&gt;macOS only&lt;/a&gt;" and "&lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#windows-only"&gt;Windows only&lt;/a&gt;" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).&lt;/li&gt; 
 &lt;li&gt;The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.&lt;/li&gt; 
 &lt;li&gt;It includes both "standard" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Notes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use &lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, &lt;code&gt;dnf&lt;/code&gt;, &lt;code&gt;pacman&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;brew&lt;/code&gt; (as appropriate) to install new programs.&lt;/li&gt; 
 &lt;li&gt;Use &lt;a href="http://explainshell.com/"&gt;Explainshell&lt;/a&gt; to get a helpful breakdown of what commands, options, pipes etc. do.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Basics&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Learn basic Bash. Actually, type &lt;code&gt;man bash&lt;/code&gt; and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning &lt;em&gt;only&lt;/em&gt; zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Learn at least one text-based editor well. The &lt;code&gt;nano&lt;/code&gt; editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (&lt;code&gt;vi&lt;/code&gt;), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Finding documentation:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Know how to read official documentation with &lt;code&gt;man&lt;/code&gt; (for the inquisitive, &lt;code&gt;man man&lt;/code&gt; lists the section numbers, e.g. 1 is "regular" commands, 5 is files/conventions, and 8 are for administration). Find man pages with &lt;code&gt;apropos&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Know that some commands are not executables, but Bash builtins, and that you can get help on them with &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;help -d&lt;/code&gt;. You can find out whether a command is an executable, shell builtin or an alias by using &lt;code&gt;type command&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;curl cheat.sh/command&lt;/code&gt; will give a brief "cheat sheet" with common examples of how to use a shell command.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Learn about redirection of output and input using &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; and pipes using &lt;code&gt;|&lt;/code&gt;. Know &lt;code&gt;&amp;gt;&lt;/code&gt; overwrites the output file and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; appends. Learn about stdout and stderr.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Learn about file glob expansion with &lt;code&gt;*&lt;/code&gt; (and perhaps &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt;...&lt;code&gt;]&lt;/code&gt;) and quoting and the difference between double &lt;code&gt;"&lt;/code&gt; and single &lt;code&gt;'&lt;/code&gt; quotes. (See more on variable expansion below.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Be familiar with Bash job management: &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;strong&gt;ctrl-z&lt;/strong&gt;, &lt;strong&gt;ctrl-c&lt;/strong&gt;, &lt;code&gt;jobs&lt;/code&gt;, &lt;code&gt;fg&lt;/code&gt;, &lt;code&gt;bg&lt;/code&gt;, &lt;code&gt;kill&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know &lt;code&gt;ssh&lt;/code&gt;, and the basics of passwordless authentication, via &lt;code&gt;ssh-agent&lt;/code&gt;, &lt;code&gt;ssh-add&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Basic file management: &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;ls -l&lt;/code&gt; (in particular, learn what every column in &lt;code&gt;ls -l&lt;/code&gt; means), &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt; and &lt;code&gt;tail -f&lt;/code&gt; (or even better, &lt;code&gt;less +F&lt;/code&gt;), &lt;code&gt;ln&lt;/code&gt; and &lt;code&gt;ln -s&lt;/code&gt; (learn the differences and advantages of hard versus soft links), &lt;code&gt;chown&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, &lt;code&gt;du&lt;/code&gt; (for a quick summary of disk usage: &lt;code&gt;du -hs *&lt;/code&gt;). For filesystem management, &lt;code&gt;df&lt;/code&gt;, &lt;code&gt;mount&lt;/code&gt;, &lt;code&gt;fdisk&lt;/code&gt;, &lt;code&gt;mkfs&lt;/code&gt;, &lt;code&gt;lsblk&lt;/code&gt;. Learn what an inode is (&lt;code&gt;ls -i&lt;/code&gt; or &lt;code&gt;df -i&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Basic network management: &lt;code&gt;ip&lt;/code&gt; or &lt;code&gt;ifconfig&lt;/code&gt;, &lt;code&gt;dig&lt;/code&gt;, &lt;code&gt;traceroute&lt;/code&gt;, &lt;code&gt;route&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Learn and use a version control management system, such as &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know regular expressions well, and the various flags to &lt;code&gt;grep&lt;/code&gt;/&lt;code&gt;egrep&lt;/code&gt;. The &lt;code&gt;-i&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;-A&lt;/code&gt;, &lt;code&gt;-B&lt;/code&gt;, and &lt;code&gt;-C&lt;/code&gt; options are worth knowing.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Learn to use &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, &lt;code&gt;dnf&lt;/code&gt; or &lt;code&gt;pacman&lt;/code&gt; (depending on distro) to find and install packages. And make sure you have &lt;code&gt;pip&lt;/code&gt; to install Python-based command-line tools (a few below are easiest to install via &lt;code&gt;pip&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Everyday use&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;In Bash, use &lt;strong&gt;Tab&lt;/strong&gt; to complete arguments or list all available commands and &lt;strong&gt;ctrl-r&lt;/strong&gt; to search through command history (after pressing, type to search, press &lt;strong&gt;ctrl-r&lt;/strong&gt; repeatedly to cycle through more matches, press &lt;strong&gt;Enter&lt;/strong&gt; to execute the found command, or hit the right arrow to put the result in the current line to allow editing).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In Bash, use &lt;strong&gt;ctrl-w&lt;/strong&gt; to delete the last word, and &lt;strong&gt;ctrl-u&lt;/strong&gt; to delete the content from current cursor back to the start of the line. Use &lt;strong&gt;alt-b&lt;/strong&gt; and &lt;strong&gt;alt-f&lt;/strong&gt; to move by word, &lt;strong&gt;ctrl-a&lt;/strong&gt; to move cursor to beginning of line, &lt;strong&gt;ctrl-e&lt;/strong&gt; to move cursor to end of line, &lt;strong&gt;ctrl-k&lt;/strong&gt; to kill to the end of the line, &lt;strong&gt;ctrl-l&lt;/strong&gt; to clear the screen. See &lt;code&gt;man readline&lt;/code&gt; for all the default keybindings in Bash. There are a lot. For example &lt;strong&gt;alt-.&lt;/strong&gt; cycles through previous arguments, and &lt;strong&gt;alt-&lt;/strong&gt;* expands a glob.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Alternatively, if you love vi-style key-bindings, use &lt;code&gt;set -o vi&lt;/code&gt; (and &lt;code&gt;set -o emacs&lt;/code&gt; to put it back).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For editing long commands, after setting your editor (for example &lt;code&gt;export EDITOR=vim&lt;/code&gt;), &lt;strong&gt;ctrl-x&lt;/strong&gt; &lt;strong&gt;ctrl-e&lt;/strong&gt; will open the current command in an editor for multi-line editing. Or in vi style, &lt;strong&gt;escape-v&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To see recent commands, use &lt;code&gt;history&lt;/code&gt;. Follow with &lt;code&gt;!n&lt;/code&gt; (where &lt;code&gt;n&lt;/code&gt; is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being &lt;code&gt;!$&lt;/code&gt; for last argument and &lt;code&gt;!!&lt;/code&gt; for last command (see "HISTORY EXPANSION" in the man page). However, these are often easily replaced with &lt;strong&gt;ctrl-r&lt;/strong&gt; and &lt;strong&gt;alt-.&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Go to your home directory with &lt;code&gt;cd&lt;/code&gt;. Access files relative to your home directory with the &lt;code&gt;~&lt;/code&gt; prefix (e.g. &lt;code&gt;~/.bashrc&lt;/code&gt;). In &lt;code&gt;sh&lt;/code&gt; scripts refer to the home directory as &lt;code&gt;$HOME&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To go back to the previous working directory: &lt;code&gt;cd -&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you are halfway through typing a command but change your mind, hit &lt;strong&gt;alt-#&lt;/strong&gt; to add a &lt;code&gt;#&lt;/code&gt; at the beginning and enter it as a comment (or use &lt;strong&gt;ctrl-a&lt;/strong&gt;, &lt;strong&gt;#&lt;/strong&gt;, &lt;strong&gt;enter&lt;/strong&gt;). You can then return to it later via command history.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;xargs&lt;/code&gt; (or &lt;code&gt;parallel&lt;/code&gt;). It's very powerful. Note you can control how many items execute per line (&lt;code&gt;-L&lt;/code&gt;) as well as parallelism (&lt;code&gt;-P&lt;/code&gt;). If you're not sure if it'll do the right thing, use &lt;code&gt;xargs echo&lt;/code&gt; first. Also, &lt;code&gt;-I{}&lt;/code&gt; is handy. Examples:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;      find . -name '*.py' | xargs grep some_function
      cat hosts | xargs -I{} ssh root@{} hostname
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pstree -p&lt;/code&gt; is a helpful display of the process tree.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;pgrep&lt;/code&gt; and &lt;code&gt;pkill&lt;/code&gt; to find or signal processes by name (&lt;code&gt;-f&lt;/code&gt; is helpful).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know the various signals you can send processes. For example, to suspend a process, use &lt;code&gt;kill -STOP [pid]&lt;/code&gt;. For the full list, see &lt;code&gt;man 7 signal&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;nohup&lt;/code&gt; or &lt;code&gt;disown&lt;/code&gt; if you want a background process to keep running forever.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Check what processes are listening via &lt;code&gt;netstat -lntp&lt;/code&gt; or &lt;code&gt;ss -plat&lt;/code&gt; (for TCP; add &lt;code&gt;-u&lt;/code&gt; for UDP) or &lt;code&gt;lsof -iTCP -sTCP:LISTEN -P -n&lt;/code&gt; (which also works on macOS).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;See also &lt;code&gt;lsof&lt;/code&gt; and &lt;code&gt;fuser&lt;/code&gt; for open sockets and files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;See &lt;code&gt;uptime&lt;/code&gt; or &lt;code&gt;w&lt;/code&gt; to know how long the system has been running.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;alias&lt;/code&gt; to create shortcuts for commonly used commands. For example, &lt;code&gt;alias ll='ls -latr'&lt;/code&gt; creates a new alias &lt;code&gt;ll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Save aliases, shell settings, and functions you commonly use in &lt;code&gt;~/.bashrc&lt;/code&gt;, and &lt;a href="http://superuser.com/a/183980/7106"&gt;arrange for login shells to source it&lt;/a&gt;. This will make your setup available in all your shell sessions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Put the settings of environment variables as well as commands that should be executed when you login in &lt;code&gt;~/.bash_profile&lt;/code&gt;. Separate configuration will be needed for shells you launch from graphical environment logins and &lt;code&gt;cron&lt;/code&gt; jobs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Synchronize your configuration files (e.g. &lt;code&gt;.bashrc&lt;/code&gt; and &lt;code&gt;.bash_profile&lt;/code&gt;) among various computers with Git.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. &lt;code&gt;"$FOO"&lt;/code&gt;. Prefer the &lt;code&gt;-0&lt;/code&gt; or &lt;code&gt;-print0&lt;/code&gt; options to enable null characters to delimit filenames, e.g. &lt;code&gt;locate -0 pattern | xargs -0 ls -al&lt;/code&gt; or &lt;code&gt;find / -print0 -type d | xargs -0 ls -al&lt;/code&gt;. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using &lt;code&gt;IFS=$'\n'&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In Bash scripts, use &lt;code&gt;set -x&lt;/code&gt; (or the variant &lt;code&gt;set -v&lt;/code&gt;, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use &lt;code&gt;set -e&lt;/code&gt; to abort on errors (nonzero exit code). Use &lt;code&gt;set -u&lt;/code&gt; to detect unset variable usages. Consider &lt;code&gt;set -o pipefail&lt;/code&gt; too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use &lt;code&gt;trap&lt;/code&gt; on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;      set -euo pipefail
      trap "echo 'error: Script failed: see failed command above'" ERR
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;      # do something in current dir
      (cd /some/other/dir &amp;amp;&amp;amp; other-command)
      # continue in original dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: &lt;code&gt;${name:?error message}&lt;/code&gt;. For example, if a Bash script requires a single argument, just write &lt;code&gt;input_file=${1:?usage: $0 input_file}&lt;/code&gt;. Using a default value if a variable is empty: &lt;code&gt;${name:-default}&lt;/code&gt;. If you want to have an additional (optional) parameter added to the previous example, you can use something like &lt;code&gt;output_file=${2:-logfile}&lt;/code&gt;. If &lt;code&gt;$2&lt;/code&gt; is omitted and thus empty, &lt;code&gt;output_file&lt;/code&gt; will be set to &lt;code&gt;logfile&lt;/code&gt;. Arithmetic expansion: &lt;code&gt;i=$(( (i + 1) % 5 ))&lt;/code&gt;. Sequences: &lt;code&gt;{1..10}&lt;/code&gt;. Trimming of strings: &lt;code&gt;${var%suffix}&lt;/code&gt; and &lt;code&gt;${var#prefix}&lt;/code&gt;. For example if &lt;code&gt;var=foo.pdf&lt;/code&gt;, then &lt;code&gt;echo ${var%.pdf}.txt&lt;/code&gt; prints &lt;code&gt;foo.txt&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Brace expansion using &lt;code&gt;{&lt;/code&gt;...&lt;code&gt;}&lt;/code&gt; can reduce having to re-type similar text and automate combinations of items. This is helpful in examples like &lt;code&gt;mv foo.{txt,pdf} some-dir&lt;/code&gt; (which moves both files), &lt;code&gt;cp somefile{,.bak}&lt;/code&gt; (which expands to &lt;code&gt;cp somefile somefile.bak&lt;/code&gt;) or &lt;code&gt;mkdir -p test-{a,b,c}/subtest-{1,2,3}&lt;/code&gt; (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like &lt;code&gt;{1..20}&lt;/code&gt; cannot be expressed with variables using &lt;code&gt;{$a..$b}&lt;/code&gt;. Use &lt;code&gt;seq&lt;/code&gt; or a &lt;code&gt;for&lt;/code&gt; loop instead, e.g., &lt;code&gt;seq $a $b&lt;/code&gt; or &lt;code&gt;for((i=a; i&amp;lt;=b; i++)); do ... ; done&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The output of a command can be treated like a file via &lt;code&gt;&amp;lt;(some command)&lt;/code&gt; (known as process substitution). For example, compare local &lt;code&gt;/etc/hosts&lt;/code&gt; with a remote one:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      diff /etc/hosts &amp;lt;(ssh somehost cat /etc/hosts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;{
      # Your code here
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A "here document" allows &lt;a href="https://www.tldp.org/LDP/abs/html/here-docs.html"&gt;redirection of multiple lines of input&lt;/a&gt; as if from a file:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF
input
on multiple lines
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;In Bash, redirect both standard output and standard error via: &lt;code&gt;some-command &amp;gt;logfile 2&amp;gt;&amp;amp;1&lt;/code&gt; or &lt;code&gt;some-command &amp;amp;&amp;gt;logfile&lt;/code&gt;. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add &lt;code&gt;&amp;lt;/dev/null&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;man ascii&lt;/code&gt; for a good ASCII table, with hex and decimal values. For general encoding info, &lt;code&gt;man unicode&lt;/code&gt;, &lt;code&gt;man utf-8&lt;/code&gt;, and &lt;code&gt;man latin1&lt;/code&gt; are helpful.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;screen&lt;/code&gt; or &lt;a href="https://tmux.github.io/"&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt; to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. &lt;code&gt;byobu&lt;/code&gt; can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is &lt;a href="https://github.com/bogner/dtach"&gt;&lt;code&gt;dtach&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In ssh, knowing how to port tunnel with &lt;code&gt;-L&lt;/code&gt; or &lt;code&gt;-D&lt;/code&gt; (and occasionally &lt;code&gt;-R&lt;/code&gt;) is useful, e.g. to access web sites from a remote server.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It can be useful to make a few optimizations to your ssh configuration; for example, this &lt;code&gt;~/.ssh/config&lt;/code&gt; contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;      TCPKeepAlive=yes
      ServerAliveInterval=15
      ServerAliveCountMax=6
      Compression=yes
      ControlMaster auto
      ControlPath /tmp/%r@%h:%p
      ControlPersist yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: &lt;code&gt;StrictHostKeyChecking=no&lt;/code&gt;, &lt;code&gt;ForwardAgent=yes&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Consider &lt;a href="https://mosh.org/"&gt;&lt;code&gt;mosh&lt;/code&gt;&lt;/a&gt; an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To get the permissions on a file in octal form, which is useful for system configuration but not available in &lt;code&gt;ls&lt;/code&gt; and easy to bungle, use something like&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      stat -c '%A %a %n' /etc/timezone
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For interactive selection of values from the output of another command, use &lt;a href="https://github.com/mooz/percol"&gt;&lt;code&gt;percol&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://github.com/junegunn/fzf"&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For interaction with files based on the output of another command (like &lt;code&gt;git&lt;/code&gt;), use &lt;code&gt;fpp&lt;/code&gt; (&lt;a href="https://github.com/facebook/PathPicker"&gt;PathPicker&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use: &lt;code&gt;python -m SimpleHTTPServer 7777&lt;/code&gt; (for port 7777 and Python 2) and &lt;code&gt;python -m http.server 7777&lt;/code&gt; (for port 7777 and Python 3).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For running a command as another user, use &lt;code&gt;sudo&lt;/code&gt;. Defaults to running as root; use &lt;code&gt;-u&lt;/code&gt; to specify another user. Use &lt;code&gt;-i&lt;/code&gt; to login as that user (you will be asked for &lt;em&gt;your&lt;/em&gt; password).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For switching the shell to another user, use &lt;code&gt;su username&lt;/code&gt; or &lt;code&gt;su - username&lt;/code&gt;. The latter with "-" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password &lt;em&gt;of the user you are switching to&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know about the &lt;a href="https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong"&gt;128K limit&lt;/a&gt; on command lines. This "Argument list too long" error is common when wildcard matching large numbers of files. (When this happens alternatives like &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; may help.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For a basic calculator (and of course access to Python in general), use the &lt;code&gt;python&lt;/code&gt; interpreter. For example,&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 2+3
5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Processing files and data&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;To locate a file by name in the current directory, &lt;code&gt;find . -iname '*something*'&lt;/code&gt; (or similar). To find a file anywhere by name, use &lt;code&gt;locate something&lt;/code&gt; (but bear in mind &lt;code&gt;updatedb&lt;/code&gt; may not have indexed recently created files).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For general searching through source or data files, there are several options more advanced or faster than &lt;code&gt;grep -r&lt;/code&gt;, including (in rough order from older to newer) &lt;a href="https://github.com/beyondgrep/ack2"&gt;&lt;code&gt;ack&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;&lt;code&gt;ag&lt;/code&gt;&lt;/a&gt; ("the silver searcher"), and &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;&lt;code&gt;rg&lt;/code&gt;&lt;/a&gt; (ripgrep).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To convert HTML to text: &lt;code&gt;lynx -dump -stdin&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Markdown, HTML, and all kinds of document conversion, try &lt;a href="http://pandoc.org/"&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/a&gt;. For example, to convert a Markdown document to Word format: &lt;code&gt;pandoc README.md --from markdown --to docx -o temp.docx&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you must handle XML, &lt;code&gt;xmlstarlet&lt;/code&gt; is old but good.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For JSON, use &lt;a href="http://stedolan.github.io/jq/"&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt;. For interactive use, also see &lt;a href="https://github.com/simeji/jid"&gt;&lt;code&gt;jid&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/fiatjaf/jiq"&gt;&lt;code&gt;jiq&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For YAML, use &lt;a href="https://github.com/0k/shyaml"&gt;&lt;code&gt;shyaml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Excel or CSV files, &lt;a href="https://github.com/onyxfish/csvkit"&gt;csvkit&lt;/a&gt; provides &lt;code&gt;in2csv&lt;/code&gt;, &lt;code&gt;csvcut&lt;/code&gt;, &lt;code&gt;csvjoin&lt;/code&gt;, &lt;code&gt;csvgrep&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For Amazon S3, &lt;a href="https://github.com/s3tools/s3cmd"&gt;&lt;code&gt;s3cmd&lt;/code&gt;&lt;/a&gt; is convenient and &lt;a href="https://github.com/bloomreach/s4cmd"&gt;&lt;code&gt;s4cmd&lt;/code&gt;&lt;/a&gt; is faster. Amazon's &lt;a href="https://github.com/aws/aws-cli"&gt;&lt;code&gt;aws&lt;/code&gt;&lt;/a&gt; and the improved &lt;a href="https://github.com/donnemartin/saws"&gt;&lt;code&gt;saws&lt;/code&gt;&lt;/a&gt; are essential for other AWS-related tasks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know about &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;uniq&lt;/code&gt;, including uniq's &lt;code&gt;-u&lt;/code&gt; and &lt;code&gt;-d&lt;/code&gt; options -- see one-liners below. See also &lt;code&gt;comm&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know about &lt;code&gt;cut&lt;/code&gt;, &lt;code&gt;paste&lt;/code&gt;, and &lt;code&gt;join&lt;/code&gt; to manipulate text files. Many people use &lt;code&gt;cut&lt;/code&gt; but forget about &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know about &lt;code&gt;wc&lt;/code&gt; to count newlines (&lt;code&gt;-l&lt;/code&gt;), characters (&lt;code&gt;-m&lt;/code&gt;), words (&lt;code&gt;-w&lt;/code&gt;) and bytes (&lt;code&gt;-c&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know about &lt;code&gt;tee&lt;/code&gt; to copy from stdin to a file and also to stdout, as in &lt;code&gt;ls -al | tee file.txt&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For more complex calculations, including grouping, reversing fields, and statistical calculations, consider &lt;a href="https://www.gnu.org/software/datamash/"&gt;&lt;code&gt;datamash&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set &lt;code&gt;LANG&lt;/code&gt; or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run &lt;em&gt;many times&lt;/em&gt; slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using &lt;code&gt;export LC_ALL=C&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in &lt;code&gt;TZ=Pacific/Fiji date&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know basic &lt;code&gt;awk&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; for simple data munging. See &lt;a href="https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/#one-liners"&gt;One-liners&lt;/a&gt; for examples.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To replace all occurrences of a string in place, in one or more files:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;To rename multiple files and/or search and replace within files, try &lt;a href="https://github.com/jlevy/repren"&gt;&lt;code&gt;repren&lt;/code&gt;&lt;/a&gt;. (In some cases the &lt;code&gt;rename&lt;/code&gt; command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      # Full rename of filenames, directories, and contents foo -&amp;gt; bar:
      repren --full --preserve-case --from foo --to bar .
      # Recover backup files whatever.bak -&amp;gt; whatever:
      repren --renames --from '(.*)\.bak' --to '\1' *.bak
      # Same as above, using rename, if available:
      rename 's/\.bak$//' *.bak
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;As the man page says, &lt;code&gt;rsync&lt;/code&gt; really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using &lt;code&gt;rsync&lt;/code&gt; instead of &lt;code&gt;scp&lt;/code&gt; allows recovery of a transfer without restarting from scratch. It also is among the &lt;a href="https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html"&gt;fastest ways&lt;/a&gt; to delete large numbers of files:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;mkdir empty &amp;amp;&amp;amp; rsync -r --delete empty/ some-dir &amp;amp;&amp;amp; rmdir some-dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For monitoring progress when processing files, use &lt;a href="http://www.ivarch.com/programs/pv.shtml"&gt;&lt;code&gt;pv&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/dmerejkowsky/pycp"&gt;&lt;code&gt;pycp&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/dspinellis/pmonitor"&gt;&lt;code&gt;pmonitor&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/Xfennec/progress"&gt;&lt;code&gt;progress&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;rsync --progress&lt;/code&gt;, or, for block-level copying, &lt;code&gt;dd status=progress&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;shuf&lt;/code&gt; to shuffle or select random lines from a file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know &lt;code&gt;sort&lt;/code&gt;'s options. For numbers, use &lt;code&gt;-n&lt;/code&gt;, or &lt;code&gt;-h&lt;/code&gt; for handling human-readable numbers (e.g. from &lt;code&gt;du -h&lt;/code&gt;). Know how keys work (&lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-k&lt;/code&gt;). In particular, watch out that you need to write &lt;code&gt;-k1,1&lt;/code&gt; to sort by only the first field; &lt;code&gt;-k1&lt;/code&gt; means sort according to the whole line. Stable sort (&lt;code&gt;sort -s&lt;/code&gt;) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use &lt;code&gt;sort -k1,1 | sort -s -k2,2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press &lt;strong&gt;ctrl-v&lt;/strong&gt; &lt;strong&gt;[Tab]&lt;/strong&gt; or write &lt;code&gt;$'\t'&lt;/code&gt; (the latter is better as you can copy/paste it).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The standard tools for patching source code are &lt;code&gt;diff&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt;. See also &lt;code&gt;diffstat&lt;/code&gt; for summary statistics of a diff and &lt;code&gt;sdiff&lt;/code&gt; for a side-by-side diff. Note &lt;code&gt;diff -r&lt;/code&gt; works for entire directories. Use &lt;code&gt;diff -r tree1 tree2 | diffstat&lt;/code&gt; for a summary of changes. Use &lt;code&gt;vimdiff&lt;/code&gt; to compare and edit files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For binary files, use &lt;code&gt;hd&lt;/code&gt;, &lt;code&gt;hexdump&lt;/code&gt; or &lt;code&gt;xxd&lt;/code&gt; for simple hex dumps and &lt;code&gt;bvi&lt;/code&gt;, &lt;code&gt;hexedit&lt;/code&gt; or &lt;code&gt;biew&lt;/code&gt; for binary editing.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Also for binary files, &lt;code&gt;strings&lt;/code&gt; (plus &lt;code&gt;grep&lt;/code&gt;, etc.) lets you find bits of text.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For binary diffs (delta compression), use &lt;code&gt;xdelta3&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To convert text encodings, try &lt;code&gt;iconv&lt;/code&gt;. Or &lt;code&gt;uconv&lt;/code&gt; for more advanced use; it supports some advanced Unicode things. For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      # Displays hex codes or actual names of characters (useful for debugging):
      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' &amp;lt; input.txt
      uconv -f utf-8 -t utf-8 -x '::Any-Name;' &amp;lt; input.txt
      # Lowercase and removes all accents (by expanding and dropping them):
      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &amp;gt;; ::Any-NFC;' &amp;lt; input.txt &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;To split files into pieces, see &lt;code&gt;split&lt;/code&gt; (to split by size) and &lt;code&gt;csplit&lt;/code&gt; (to split by a pattern).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Date and time: To get the current date and time in the helpful &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt; format, use &lt;code&gt;date -u +"%Y-%m-%dT%H:%M:%SZ"&lt;/code&gt; (other options &lt;a href="https://stackoverflow.com/questions/7216358/date-command-on-os-x-doesnt-have-iso-8601-i-option"&gt;are&lt;/a&gt; &lt;a href="https://unix.stackexchange.com/questions/164826/date-command-iso-8601-option"&gt;problematic&lt;/a&gt;). To manipulate date and time expressions, use &lt;code&gt;dateadd&lt;/code&gt;, &lt;code&gt;datediff&lt;/code&gt;, &lt;code&gt;strptime&lt;/code&gt; etc. from &lt;a href="http://www.fresse.org/dateutils/"&gt;&lt;code&gt;dateutils&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;zless&lt;/code&gt;, &lt;code&gt;zmore&lt;/code&gt;, &lt;code&gt;zcat&lt;/code&gt;, and &lt;code&gt;zgrep&lt;/code&gt; to operate on compressed files.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;File attributes are settable via &lt;code&gt;chattr&lt;/code&gt; and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag: &lt;code&gt;sudo chattr +i /critical/directory/or/file&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;getfacl&lt;/code&gt; and &lt;code&gt;setfacl&lt;/code&gt; to save and restore file permissions. For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;   getfacl -R /some/path &amp;gt; permissions.txt
   setfacl --restore=permissions.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;To create empty files quickly, use &lt;code&gt;truncate&lt;/code&gt; (creates &lt;a href="https://en.wikipedia.org/wiki/Sparse_file"&gt;sparse file&lt;/a&gt;), &lt;code&gt;fallocate&lt;/code&gt; (ext4, xfs, btrfs and ocfs2 filesystems), &lt;code&gt;xfs_mkfile&lt;/code&gt; (almost any filesystems, comes in xfsprogs package), &lt;code&gt;mkfile&lt;/code&gt; (for Unix-like systems like Solaris, Mac OS).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;System debugging&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;For web debugging, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;curl -I&lt;/code&gt; are handy, or their &lt;code&gt;wget&lt;/code&gt; equivalents, or the more modern &lt;a href="https://github.com/jkbrzt/httpie"&gt;&lt;code&gt;httpie&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To know current cpu/disk status, the classic tools are &lt;code&gt;top&lt;/code&gt; (or the better &lt;code&gt;htop&lt;/code&gt;), &lt;code&gt;iostat&lt;/code&gt;, and &lt;code&gt;iotop&lt;/code&gt;. Use &lt;code&gt;iostat -mxz 15&lt;/code&gt; for basic CPU and detailed per-partition disk stats and performance insight.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For network connection details, use &lt;code&gt;netstat&lt;/code&gt; and &lt;code&gt;ss&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For a quick overview of what's happening on a system, &lt;code&gt;dstat&lt;/code&gt; is especially useful. For broadest overview with details, use &lt;a href="https://github.com/nicolargo/glances"&gt;&lt;code&gt;glances&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To know memory status, run and understand the output of &lt;code&gt;free&lt;/code&gt; and &lt;code&gt;vmstat&lt;/code&gt;. In particular, be aware the "cached" value is memory held by the Linux kernel as file cache, so effectively counts toward the "free" value.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run &lt;code&gt;kill -3 &amp;lt;pid&amp;gt;&lt;/code&gt; and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs. The JDK's &lt;code&gt;jps&lt;/code&gt;, &lt;code&gt;jstat&lt;/code&gt;, &lt;code&gt;jstack&lt;/code&gt;, &lt;code&gt;jmap&lt;/code&gt; are useful. &lt;a href="https://github.com/aragozin/jvm-tools"&gt;SJK tools&lt;/a&gt; are more advanced.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;a href="http://www.bitwizard.nl/mtr/"&gt;&lt;code&gt;mtr&lt;/code&gt;&lt;/a&gt; as a better traceroute, to identify network issues.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For looking at why a disk is full, &lt;a href="https://dev.yorhel.nl/ncdu"&gt;&lt;code&gt;ncdu&lt;/code&gt;&lt;/a&gt; saves time over the usual commands like &lt;code&gt;du -sh *&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To find which socket or process is using bandwidth, try &lt;a href="http://www.ex-parrot.com/~pdw/iftop/"&gt;&lt;code&gt;iftop&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://github.com/raboof/nethogs"&gt;&lt;code&gt;nethogs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The &lt;code&gt;ab&lt;/code&gt; tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try &lt;code&gt;siege&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For more serious network debugging, &lt;a href="https://wireshark.org/"&gt;&lt;code&gt;wireshark&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html"&gt;&lt;code&gt;tshark&lt;/code&gt;&lt;/a&gt;, or &lt;a href="http://ngrep.sourceforge.net/"&gt;&lt;code&gt;ngrep&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know about &lt;code&gt;strace&lt;/code&gt; and &lt;code&gt;ltrace&lt;/code&gt;. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (&lt;code&gt;-c&lt;/code&gt;), and the ability to attach to a running process (&lt;code&gt;-p&lt;/code&gt;). Use trace child option (&lt;code&gt;-f&lt;/code&gt;) to avoid missing important calls.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know about &lt;code&gt;ldd&lt;/code&gt; to check shared libraries etc — but &lt;a href="http://www.catonmat.net/blog/ldd-arbitrary-code-execution/"&gt;never run it on untrusted files&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Know how to connect to a running process with &lt;code&gt;gdb&lt;/code&gt; and get its stack traces.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;/proc&lt;/code&gt;. It's amazingly helpful sometimes when debugging live problems. Examples: &lt;code&gt;/proc/cpuinfo&lt;/code&gt;, &lt;code&gt;/proc/meminfo&lt;/code&gt;, &lt;code&gt;/proc/cmdline&lt;/code&gt;, &lt;code&gt;/proc/xxx/cwd&lt;/code&gt;, &lt;code&gt;/proc/xxx/exe&lt;/code&gt;, &lt;code&gt;/proc/xxx/fd/&lt;/code&gt;, &lt;code&gt;/proc/xxx/smaps&lt;/code&gt; (where &lt;code&gt;xxx&lt;/code&gt; is the process id or pid).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When debugging why something went wrong in the past, &lt;a href="http://sebastien.godard.pagesperso-orange.fr/"&gt;&lt;code&gt;sar&lt;/code&gt;&lt;/a&gt; can be very helpful. It shows historic statistics on CPU, memory, network, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For deeper systems and performance analyses, look at &lt;code&gt;stap&lt;/code&gt; (&lt;a href="https://sourceware.org/systemtap/wiki"&gt;SystemTap&lt;/a&gt;), &lt;a href="https://en.wikipedia.org/wiki/Perf_%28Linux%29"&gt;&lt;code&gt;perf&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/draios/sysdig"&gt;&lt;code&gt;sysdig&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Check what OS you're on with &lt;code&gt;uname&lt;/code&gt; or &lt;code&gt;uname -a&lt;/code&gt; (general Unix/kernel info) or &lt;code&gt;lsb_release -a&lt;/code&gt; (Linux distro info).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;dmesg&lt;/code&gt; whenever something's acting really funny (it could be hardware or driver issues).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you delete a file and it doesn't free up expected disk space as reported by &lt;code&gt;du&lt;/code&gt;, check whether the file is in use by a process: &lt;code&gt;lsof | grep deleted | grep "filename-of-my-big-file"&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;One-liners&lt;/h2&gt; 
&lt;p&gt;A few examples of piecing together commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via &lt;code&gt;sort&lt;/code&gt;/&lt;code&gt;uniq&lt;/code&gt;. Suppose &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the &lt;code&gt;-T&lt;/code&gt; option if &lt;code&gt;/tmp&lt;/code&gt; is on a small root partition.) See also the note about &lt;code&gt;LC_ALL&lt;/code&gt; above and &lt;code&gt;sort&lt;/code&gt;'s &lt;code&gt;-u&lt;/code&gt; option (left out for clarity below).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      sort a b | uniq &amp;gt; c   # c is a union b
      sort a b | uniq -d &amp;gt; c   # c is a intersect b
      sort a b b | uniq -u &amp;gt; c   # c is set difference a - b
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;      diff &amp;lt;(jq --sort-keys . &amp;lt; file1.json) &amp;lt;(jq --sort-keys . &amp;lt; file2.json) | colordiff | less -R
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;grep . *&lt;/code&gt; to quickly examine the contents of all files in a directory (so each line is paired with the filename), or &lt;code&gt;head -100 *&lt;/code&gt; (so each file has a heading). This can be useful for directories filled with config settings like those in &lt;code&gt;/sys&lt;/code&gt;, &lt;code&gt;/proc&lt;/code&gt;, &lt;code&gt;/etc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      awk '{ x += $3 } END { print x }' myfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;To see sizes/dates on a tree of files, this is like a recursive &lt;code&gt;ls -l&lt;/code&gt; but is easier to read than &lt;code&gt;ls -lR&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      find . -type f -ls
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an &lt;code&gt;acct_id&lt;/code&gt; parameter that is present in the URL. If you want a tally of how many requests for each &lt;code&gt;acct_id&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;To continuously monitor changes, use &lt;code&gt;watch&lt;/code&gt;, e.g. check changes to files in a directory with &lt;code&gt;watch -d -n 2 'ls -rtlh | tail'&lt;/code&gt; or to network settings while troubleshooting your wifi settings with &lt;code&gt;watch -d -n 2 ifconfig&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run this function to get a random tip from this document (parses Markdown and extracts an item):&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;      function taocl() {
        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
          sed '/cowsay[.]png/d' |
          pandoc -f markdown -t html |
          xmlstarlet fo --html --dropdtd |
          xmlstarlet sel -t -v "(html/body/ul/li[count(p)&amp;gt;0])[$RANDOM mod last()+1]" |
          xmlstarlet unesc | fmt -80 | iconv -t US
      }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Obscure but useful&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;expr&lt;/code&gt;: perform arithmetic or boolean operations or evaluate regular expressions&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;m4&lt;/code&gt;: simple macro processor&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;yes&lt;/code&gt;: print a string a lot&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;cal&lt;/code&gt;: nice calendar&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;env&lt;/code&gt;: run a command (useful in scripts)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;printenv&lt;/code&gt;: print out environment variables (useful in debugging and scripts)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;look&lt;/code&gt;: find English words (or lines in a file) beginning with a string&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;cut&lt;/code&gt;, &lt;code&gt;paste&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;: data manipulation&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fmt&lt;/code&gt;: format text paragraphs&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pr&lt;/code&gt;: format text into pages/columns&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fold&lt;/code&gt;: wrap lines of text&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;column&lt;/code&gt;: format text fields into aligned, fixed-width columns or tables&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;expand&lt;/code&gt; and &lt;code&gt;unexpand&lt;/code&gt;: convert between tabs and spaces&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;nl&lt;/code&gt;: add line numbers&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;seq&lt;/code&gt;: print numbers&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;bc&lt;/code&gt;: calculator&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;factor&lt;/code&gt;: factor integers&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://gnupg.org/"&gt;&lt;code&gt;gpg&lt;/code&gt;&lt;/a&gt;: encrypt and sign files&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;toe&lt;/code&gt;: table of terminfo entries&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;nc&lt;/code&gt;: network debugging and data transfer&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;socat&lt;/code&gt;: socket relay and tcp port forwarder (similar to &lt;code&gt;netcat&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/mattthias/slurm"&gt;&lt;code&gt;slurm&lt;/code&gt;&lt;/a&gt;: network traffic visualization&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dd&lt;/code&gt;: moving data between files or devices&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;file&lt;/code&gt;: identify type of a file&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;tree&lt;/code&gt;: display directories and subdirectories as a nesting tree; like &lt;code&gt;ls&lt;/code&gt; but recursive&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;stat&lt;/code&gt;: file info&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;time&lt;/code&gt;: execute and time a command&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;timeout&lt;/code&gt;: execute a command for specified amount of time and stop the process when the specified amount of time completes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;lockfile&lt;/code&gt;: create semaphore file that can only be removed by &lt;code&gt;rm -f&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;logrotate&lt;/code&gt;: rotate, compress and mail logs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;watch&lt;/code&gt;: run a command repeatedly, showing results and/or highlighting changes&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/joh/when-changed"&gt;&lt;code&gt;when-changed&lt;/code&gt;&lt;/a&gt;: runs any command you specify whenever it sees file changed. See &lt;code&gt;inotifywait&lt;/code&gt; and &lt;code&gt;entr&lt;/code&gt; as well.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;tac&lt;/code&gt;: print files in reverse&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;comm&lt;/code&gt;: compare sorted files line by line&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;strings&lt;/code&gt;: extract text from binary files&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;tr&lt;/code&gt;: character translation or manipulation&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;iconv&lt;/code&gt; or &lt;code&gt;uconv&lt;/code&gt;: conversion for text encodings&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;split&lt;/code&gt; and &lt;code&gt;csplit&lt;/code&gt;: splitting files&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sponge&lt;/code&gt;: read all input before writing it, useful for reading from then writing to the same file, e.g., &lt;code&gt;grep -v something some-file | sponge some-file&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;units&lt;/code&gt;: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also &lt;code&gt;/usr/share/units/definitions.units&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;apg&lt;/code&gt;: generates random passwords&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;xz&lt;/code&gt;: high-ratio file compression&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ldd&lt;/code&gt;: dynamic library info&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;nm&lt;/code&gt;: symbols from object files&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ab&lt;/code&gt; or &lt;a href="https://github.com/wg/wrk"&gt;&lt;code&gt;wrk&lt;/code&gt;&lt;/a&gt;: benchmarking web servers&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;strace&lt;/code&gt;: system call debugging&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="http://www.bitwizard.nl/mtr/"&gt;&lt;code&gt;mtr&lt;/code&gt;&lt;/a&gt;: better traceroute for network debugging&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;cssh&lt;/code&gt;: visual concurrent shell&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;rsync&lt;/code&gt;: sync files and folders over SSH or in local file system&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://wireshark.org/"&gt;&lt;code&gt;wireshark&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html"&gt;&lt;code&gt;tshark&lt;/code&gt;&lt;/a&gt;: packet capture and network debugging&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="http://ngrep.sourceforge.net/"&gt;&lt;code&gt;ngrep&lt;/code&gt;&lt;/a&gt;: grep for the network layer&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;host&lt;/code&gt; and &lt;code&gt;dig&lt;/code&gt;: DNS lookups&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;lsof&lt;/code&gt;: process file descriptor and socket info&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dstat&lt;/code&gt;: useful system stats&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/nicolargo/glances"&gt;&lt;code&gt;glances&lt;/code&gt;&lt;/a&gt;: high level, multi-subsystem overview&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;iostat&lt;/code&gt;: Disk usage stats&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;mpstat&lt;/code&gt;: CPU usage stats&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;vmstat&lt;/code&gt;: Memory usage stats&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;htop&lt;/code&gt;: improved version of top&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;last&lt;/code&gt;: login history&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;w&lt;/code&gt;: who's logged on&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;id&lt;/code&gt;: user/group identity info&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="http://sebastien.godard.pagesperso-orange.fr/"&gt;&lt;code&gt;sar&lt;/code&gt;&lt;/a&gt;: historic system stats&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="http://www.ex-parrot.com/~pdw/iftop/"&gt;&lt;code&gt;iftop&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://github.com/raboof/nethogs"&gt;&lt;code&gt;nethogs&lt;/code&gt;&lt;/a&gt;: network utilization by socket or process&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ss&lt;/code&gt;: socket statistics&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dmesg&lt;/code&gt;: boot and system error messages&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sysctl&lt;/code&gt;: view and configure Linux kernel parameters at run time&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;hdparm&lt;/code&gt;: SATA/ATA disk manipulation/performance&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;lsblk&lt;/code&gt;: list block devices: a tree view of your disks and disk partitions&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;lshw&lt;/code&gt;, &lt;code&gt;lscpu&lt;/code&gt;, &lt;code&gt;lspci&lt;/code&gt;, &lt;code&gt;lsusb&lt;/code&gt;, &lt;code&gt;dmidecode&lt;/code&gt;: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;lsmod&lt;/code&gt; and &lt;code&gt;modinfo&lt;/code&gt;: List and show details of kernel modules.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;fortune&lt;/code&gt;, &lt;code&gt;ddate&lt;/code&gt;, and &lt;code&gt;sl&lt;/code&gt;: um, well, it depends on whether you consider steam locomotives and Zippy quotations "useful"&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;macOS only&lt;/h2&gt; 
&lt;p&gt;These are items relevant &lt;em&gt;only&lt;/em&gt; on macOS.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Package management with &lt;code&gt;brew&lt;/code&gt; (Homebrew) and/or &lt;code&gt;port&lt;/code&gt; (MacPorts). These can be used to install on macOS many of the above commands.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Copy output of any command to a desktop app with &lt;code&gt;pbcopy&lt;/code&gt; and paste input from one with &lt;code&gt;pbpaste&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To enable the Option key in macOS Terminal as an alt key (such as used in the commands above like &lt;strong&gt;alt-b&lt;/strong&gt;, &lt;strong&gt;alt-f&lt;/strong&gt;, etc.), open Preferences -&amp;gt; Profiles -&amp;gt; Keyboard and select "Use Option as Meta key".&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To open a file with a desktop app, use &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;open -a /Applications/Whatever.app&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Spotlight: Search files with &lt;code&gt;mdfind&lt;/code&gt; and list metadata (such as photo EXIF info) with &lt;code&gt;mdls&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Be aware macOS is based on BSD Unix, and many commands (for example &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading "BSD General Commands Manual." In some cases GNU versions can be installed, too (such as &lt;code&gt;gawk&lt;/code&gt; and &lt;code&gt;gsed&lt;/code&gt; for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or &lt;code&gt;perl&lt;/code&gt;) or test carefully.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To get macOS release information, use &lt;code&gt;sw_vers&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Windows only&lt;/h2&gt; 
&lt;p&gt;These items are relevant &lt;em&gt;only&lt;/em&gt; on Windows.&lt;/p&gt; 
&lt;h3&gt;Ways to obtain Unix tools under Windows&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Access the power of the Unix shell under Microsoft Windows by installing &lt;a href="https://cygwin.com/"&gt;Cygwin&lt;/a&gt;. Most of the things described in this document will work out of the box.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On Windows 10, you can use &lt;a href="https://msdn.microsoft.com/commandline/wsl/about"&gt;Windows Subsystem for Linux (WSL)&lt;/a&gt;, which provides a familiar Bash environment with Unix command line utilities.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you mainly want to use GNU developer tools (such as GCC) on Windows, consider &lt;a href="http://www.mingw.org/"&gt;MinGW&lt;/a&gt; and its &lt;a href="http://www.mingw.org/wiki/msys"&gt;MSYS&lt;/a&gt; package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Another option to get Unix look and feel under Windows is &lt;a href="https://github.com/dthree/cash"&gt;Cash&lt;/a&gt;. Note that only very few Unix commands and command-line options are available in this environment.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Useful Windows command-line tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;You can perform and script most Windows system administration tasks from the command line by learning and using &lt;code&gt;wmic&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Native command-line Windows networking tools you may find useful include &lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;ipconfig&lt;/code&gt;, &lt;code&gt;tracert&lt;/code&gt;, and &lt;code&gt;netstat&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can perform &lt;a href="http://www.thewindowsclub.com/rundll32-shortcut-commands-windows"&gt;many useful Windows tasks&lt;/a&gt; by invoking the &lt;code&gt;Rundll32&lt;/code&gt; command.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cygwin tips and tricks&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Install additional Unix programs with the Cygwin's package manager.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Use &lt;code&gt;mintty&lt;/code&gt; as your command-line window.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Access the Windows clipboard through &lt;code&gt;/dev/clipboard&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cygstart&lt;/code&gt; to open an arbitrary file through its registered application.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Access the Windows registry with &lt;code&gt;regtool&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Note that a &lt;code&gt;C:\&lt;/code&gt; Windows drive path becomes &lt;code&gt;/cygdrive/c&lt;/code&gt; under Cygwin, and that Cygwin's &lt;code&gt;/&lt;/code&gt; appears under &lt;code&gt;C:\cygwin&lt;/code&gt; on Windows. Convert between Cygwin and Windows-style file paths with &lt;code&gt;cygpath&lt;/code&gt;. This is most useful in scripts that invoke Windows programs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;More resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alebcay/awesome-shell"&gt;awesome-shell&lt;/a&gt;: A curated list of shell tools and resources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/herrbischoff/awesome-osx-command-line"&gt;awesome-osx-command-line&lt;/a&gt;: A more in-depth guide for the macOS command line.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://redsymbol.net/articles/unofficial-bash-strict-mode/"&gt;Strict mode&lt;/a&gt; for writing better shell scripts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/koalaman/shellcheck"&gt;shellcheck&lt;/a&gt;: A shell script static analysis tool. Essentially, lint for bash/sh/zsh.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.dwheeler.com/essays/filenames-in-shell.html"&gt;Filenames and Pathnames in Shell&lt;/a&gt;: The sadly complex minutiae on how to handle filenames correctly in shell scripts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://datascienceatthecommandline.com/#tools"&gt;Data Science at the Command Line&lt;/a&gt;: More commands and tools helpful for doing data science, from the book of the same name&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you &lt;em&gt;can&lt;/em&gt; do something in Bash doesn't necessarily mean you should! ;)&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;&lt;img src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" alt="Creative Commons License"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This work is licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lydiahallie/javascript-questions</title>
      <link>https://github.com/lydiahallie/javascript-questions</link>
      <description>&lt;p&gt;A long list of (advanced) JavaScript questions, and their explanations ✨&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img height="60" src="https://img.icons8.com/color/344/javascript.png"&gt; 
 &lt;h1&gt;JavaScript Questions&lt;/h1&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;br&gt; This repo was created in 2019 and the questions provided here are therefore based on the JavaScript syntax and behavior at that time. Since JavaScript is a constantly evolving language, there are newer language features that are not covered by the questions here.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;p align="center"&gt; From basic to advanced: test how well you know JavaScript, refresh your knowledge a bit or prepare for your coding interview! &lt;span&gt;💪&lt;/span&gt; &lt;span&gt;🚀&lt;/span&gt; I update this repo regularly with new questions. I added the answers in the **collapsed sections** below the questions, simply click on them to expand it. It's just for fun, good luck! &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; 
&lt;p align="center"&gt;Feel free to reach out to me! 😊&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.instagram.com/theavocoder"&gt;Instagram&lt;/a&gt; || &lt;a href="https://www.twitter.com/lydiahallie"&gt;Twitter&lt;/a&gt; || &lt;a href="https://www.linkedin.com/in/lydia-hallie"&gt;LinkedIn&lt;/a&gt; || &lt;a href="https://www.lydiahallie.io/"&gt;Blog&lt;/a&gt; &lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feel free to use them in a project! 😃 I would &lt;em&gt;really&lt;/em&gt; appreciate a reference to this repo, I create the questions and explanations (yes I'm sad lol) and the community helps me so much to maintain and improve it! 💪🏼 Thank you and have fun!&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
&lt;/table&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;strong&gt; See 20 Available Translations 🇸🇦🇪🇬🇧🇦🇩🇪🇪🇸🇫🇷🇮🇩🇯🇵🇰🇷🇳🇱🇧🇷🇷🇺🇹🇭🇹🇷🇺🇦🇻🇳🇨🇳🇹🇼🇽🇰&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/ar-AR/README_AR.md"&gt;🇸🇦 العربية&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/ar-EG/README_ar-EG.md"&gt;🇪🇬 اللغة العامية&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/bs-BS/README-bs_BS.md"&gt;🇧🇦 Bosanski&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/de-DE/README.md"&gt;🇩🇪 Deutsch&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/es-ES/README-ES.md"&gt;🇪🇸 Español&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/fr-FR/README_fr-FR.md"&gt;🇫🇷 Français&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/id-ID/README.md"&gt;🇮🇩 Indonesia&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/it-IT/README.md"&gt;🇮🇹 Italiano&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/ja-JA/README-ja_JA.md"&gt;🇯🇵 日本語&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/ko-KR/README-ko_KR.md"&gt;🇰🇷 한국어&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/nl-NL/README.md"&gt;🇳🇱 Nederlands&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/pl-PL/README.md"&gt;🇵🇱 Polski&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/pt-BR/README_pt_BR.md"&gt;🇧🇷 Português Brasil&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/ro-RO/README.ro.md"&gt;🇷o Română&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/ru-RU/README.md"&gt;🇷🇺 Русский&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/sq-KS/README_sq_KS.md"&gt;🇽🇰 Shqip&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/th-TH/README-th_TH.md"&gt;🇹🇭 ไทย&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/tr-TR/README-tr_TR.md"&gt;🇹🇷 Türkçe&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/uk-UA/README.md"&gt;🇺🇦 Українська мова&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/vi-VI/README-vi.md"&gt;🇻🇳 Tiếng Việt&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/zh-CN/README-zh_CN.md"&gt;🇨🇳 简体中文&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lydiahallie/javascript-questions/master/zh-TW/README_zh-TW.md"&gt;🇹🇼 繁體中文&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;1. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function sayHi() {
  console.log(name);
  console.log(age);
  var name = 'Lydia';
  let age = 21;
}

sayHi();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Lydia&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Lydia&lt;/code&gt; and &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;ReferenceError&lt;/code&gt; and &lt;code&gt;21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;Within the function, we first declare the &lt;code&gt;name&lt;/code&gt; variable with the &lt;code&gt;var&lt;/code&gt; keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) with the default value of &lt;code&gt;undefined&lt;/code&gt;, until we actually get to the line where we define the variable. We haven't defined the variable yet on the line where we try to log the &lt;code&gt;name&lt;/code&gt; variable, so it still holds the value of &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Variables with the &lt;code&gt;let&lt;/code&gt; keyword (and &lt;code&gt;const&lt;/code&gt;) are hoisted, but unlike &lt;code&gt;var&lt;/code&gt;, don't get &lt;i&gt;initialized&lt;/i&gt;. They are not accessible before the line we declare (initialize) them. This is called the "temporal dead zone". When we try to access the variables before they are declared, JavaScript throws a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;2. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;for (var i = 0; i &amp;lt; 3; i++) {
  setTimeout(() =&amp;gt; console.log(i), 1);
}

for (let i = 0; i &amp;lt; 3; i++) {
  setTimeout(() =&amp;gt; console.log(i), 1);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;0 1 2&lt;/code&gt; and &lt;code&gt;0 1 2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;0 1 2&lt;/code&gt; and &lt;code&gt;3 3 3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;3 3 3&lt;/code&gt; and &lt;code&gt;0 1 2&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Because of the event queue in JavaScript, the &lt;code&gt;setTimeout&lt;/code&gt; callback function is called &lt;em&gt;after&lt;/em&gt; the loop has been executed. Since the variable &lt;code&gt;i&lt;/code&gt; in the first loop was declared using the &lt;code&gt;var&lt;/code&gt; keyword, this value was global. During the loop, we incremented the value of &lt;code&gt;i&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt; each time, using the unary operator &lt;code&gt;++&lt;/code&gt;. By the time the &lt;code&gt;setTimeout&lt;/code&gt; callback function was invoked, &lt;code&gt;i&lt;/code&gt; was equal to &lt;code&gt;3&lt;/code&gt; in the first example.&lt;/p&gt; 
 &lt;p&gt;In the second loop, the variable &lt;code&gt;i&lt;/code&gt; was declared using the &lt;code&gt;let&lt;/code&gt; keyword: variables declared with the &lt;code&gt;let&lt;/code&gt; (and &lt;code&gt;const&lt;/code&gt;) keyword are block-scoped (a block is anything between &lt;code&gt;{ }&lt;/code&gt;). During each iteration, &lt;code&gt;i&lt;/code&gt; will have a new value, and each value is scoped inside the loop.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;3. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const shape = {
  radius: 10,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () =&amp;gt; 2 * Math.PI * this.radius,
};

console.log(shape.diameter());
console.log(shape.perimeter());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;20&lt;/code&gt; and &lt;code&gt;62.83185307179586&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;20&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;20&lt;/code&gt; and &lt;code&gt;63&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;63&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;Note that the value of &lt;code&gt;diameter&lt;/code&gt; is a regular function, whereas the value of &lt;code&gt;perimeter&lt;/code&gt; is an arrow function.&lt;/p&gt; 
 &lt;p&gt;With arrow functions, the &lt;code&gt;this&lt;/code&gt; keyword refers to its current surrounding scope, unlike regular functions! This means that when we call &lt;code&gt;perimeter&lt;/code&gt;, it doesn't refer to the shape object, but to its surrounding scope (window for example).&lt;/p&gt; 
 &lt;p&gt;Since there is no value &lt;code&gt;radius&lt;/code&gt; in the scope of the arrow function, &lt;code&gt;this.radius&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; which, when multiplied by &lt;code&gt;2 * Math.PI&lt;/code&gt;, results in &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;4. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;+true;
!'Lydia';
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The unary plus tries to convert an operand to a number. &lt;code&gt;true&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;The string &lt;code&gt;'Lydia'&lt;/code&gt; is a truthy value. What we're actually asking, is "Is this truthy value falsy?". This returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;5. Which one is true?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const bird = {
  size: 'small',
};

const mouse = {
  name: 'Mickey',
  small: true,
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;mouse.bird.size&lt;/code&gt; is not valid&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;mouse[bird.size]&lt;/code&gt; is not valid&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;mouse[bird["size"]]&lt;/code&gt; is not valid&lt;/li&gt; 
 &lt;li&gt;D: All of them are valid&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;In JavaScript, all object keys are strings (unless it's a Symbol). Even though we might not &lt;em&gt;type&lt;/em&gt; them as strings, they are always converted into strings under the hood.&lt;/p&gt; 
 &lt;p&gt;JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket &lt;code&gt;[&lt;/code&gt; and keeps going until it finds the closing bracket &lt;code&gt;]&lt;/code&gt;. Only then, it will evaluate the statement.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;mouse[bird.size]&lt;/code&gt;: First it evaluates &lt;code&gt;bird.size&lt;/code&gt;, which is &lt;code&gt;"small"&lt;/code&gt;. &lt;code&gt;mouse["small"]&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;However, with dot notation, this doesn't happen. &lt;code&gt;mouse&lt;/code&gt; does not have a key called &lt;code&gt;bird&lt;/code&gt;, which means that &lt;code&gt;mouse.bird&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;. Then, we ask for the &lt;code&gt;size&lt;/code&gt; using dot notation: &lt;code&gt;mouse.bird.size&lt;/code&gt;. Since &lt;code&gt;mouse.bird&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, we're actually asking &lt;code&gt;undefined.size&lt;/code&gt;. This isn't valid, and will throw an error similar to &lt;code&gt;Cannot read property "size" of undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;6. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let c = { greeting: 'Hey!' };
let d;

d = c;
c.greeting = 'Hello';
console.log(d.greeting);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Hello&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Hey!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;E: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;In JavaScript, all objects interact by &lt;em&gt;reference&lt;/em&gt; when setting them equal to each other.&lt;/p&gt; 
 &lt;p&gt;First, variable &lt;code&gt;c&lt;/code&gt; holds a value to an object. Later, we assign &lt;code&gt;d&lt;/code&gt; with the same reference that &lt;code&gt;c&lt;/code&gt; has to the object.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/ko5k0fs.png" width="200"&gt; 
 &lt;p&gt;When you change one object, you change all of them.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;7. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let a = 3;
let b = new Number(3);
let c = 3;

console.log(a == b);
console.log(a === b);
console.log(b === c);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;new Number()&lt;/code&gt; is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.&lt;/p&gt; 
 &lt;p&gt;When we use the &lt;code&gt;==&lt;/code&gt; operator (Equality operator), it only checks whether it has the same &lt;em&gt;value&lt;/em&gt;. They both have the value of &lt;code&gt;3&lt;/code&gt;, so it returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;However, when we use the &lt;code&gt;===&lt;/code&gt; operator (Strict equality operator), both value &lt;em&gt;and&lt;/em&gt; type should be the same. It's not: &lt;code&gt;new Number()&lt;/code&gt; is not a number, it's an &lt;strong&gt;object&lt;/strong&gt;. Both return &lt;code&gt;false.&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;8. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Chameleon {
  static colorChange(newColor) {
    this.newColor = newColor;
    return this.newColor;
  }

  constructor({ newColor = 'green' } = {}) {
    this.newColor = newColor;
  }
}

const freddie = new Chameleon({ newColor: 'purple' });
console.log(freddie.colorChange('orange'));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;orange&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;purple&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;green&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;colorChange&lt;/code&gt; function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children or called upon class instances. Since &lt;code&gt;freddie&lt;/code&gt; is an instance of class Chameleon, the function cannot be called upon it. A &lt;code&gt;TypeError&lt;/code&gt; is thrown.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;9. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let greeting;
greetign = {}; // Typo!
console.log(greetign);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;ReferenceError: greetign is not defined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;It logs the object, because we just created an empty object on the global object! When we mistyped &lt;code&gt;greeting&lt;/code&gt; as &lt;code&gt;greetign&lt;/code&gt;, the JS interpreter actually saw this as:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;code&gt;global.greetign = {}&lt;/code&gt; in Node.js&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;window.greetign = {}&lt;/code&gt;, &lt;code&gt;frames.greetign = {}&lt;/code&gt; and &lt;code&gt;self.greetign&lt;/code&gt; in browsers.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;self.greetign&lt;/code&gt; in web workers.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;globalThis.greetign&lt;/code&gt; in all environments.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;In order to avoid this, we can use &lt;code&gt;"use strict"&lt;/code&gt;. This makes sure that you have declared a variable before setting it equal to anything.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;10. What happens when we do this?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function bark() {
  console.log('Woof!');
}

bark.animal = 'dog';
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: Nothing, this is totally fine!&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;SyntaxError&lt;/code&gt;. You cannot add properties to a function this way.&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"Woof"&lt;/code&gt; gets logged.&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)&lt;/p&gt; 
 &lt;p&gt;A function is a special type of object. The code you write yourself isn't the actual function. The function is an object with properties. This property is invocable.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;11. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const member = new Person('Lydia', 'Hallie');
Person.getFullName = function() {
  return `${this.firstName} ${this.lastName}`;
};

console.log(member.getFullName());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Lydia Hallie&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;In JavaScript, functions are objects, and therefore, the method &lt;code&gt;getFullName&lt;/code&gt; gets added to the constructor function object itself. For that reason, we can call &lt;code&gt;Person.getFullName()&lt;/code&gt;, but &lt;code&gt;member.getFullName&lt;/code&gt; throws a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;If you want a method to be available to all object instances, you have to add it to the prototype property:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-js"&gt;Person.prototype.getFullName = function() {
  return `${this.firstName} ${this.lastName}`;
};
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;12. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const lydia = new Person('Lydia', 'Hallie');
const sarah = Person('Sarah', 'Smith');

console.log(lydia);
console.log(sarah);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Person {firstName: "Lydia", lastName: "Hallie"}&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Person {firstName: "Lydia", lastName: "Hallie"}&lt;/code&gt; and &lt;code&gt;Person {firstName: "Sarah", lastName: "Smith"}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Person {firstName: "Lydia", lastName: "Hallie"}&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Person {firstName: "Lydia", lastName: "Hallie"}&lt;/code&gt; and &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;For &lt;code&gt;sarah&lt;/code&gt;, we didn't use the &lt;code&gt;new&lt;/code&gt; keyword. When using &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; refers to the new empty object we create. However, if you don't add &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; refers to the &lt;strong&gt;global object&lt;/strong&gt;!&lt;/p&gt; 
 &lt;p&gt;We said that &lt;code&gt;this.firstName&lt;/code&gt; equals &lt;code&gt;"Sarah"&lt;/code&gt; and &lt;code&gt;this.lastName&lt;/code&gt; equals &lt;code&gt;"Smith"&lt;/code&gt;. What we actually did, is defining &lt;code&gt;global.firstName = 'Sarah'&lt;/code&gt; and &lt;code&gt;global.lastName = 'Smith'&lt;/code&gt;. &lt;code&gt;sarah&lt;/code&gt; itself is left &lt;code&gt;undefined&lt;/code&gt;, since we don't return a value from the &lt;code&gt;Person&lt;/code&gt; function.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;13. What are the three phases of event propagation?&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: Target &amp;gt; Capturing &amp;gt; Bubbling&lt;/li&gt; 
 &lt;li&gt;B: Bubbling &amp;gt; Target &amp;gt; Capturing&lt;/li&gt; 
 &lt;li&gt;C: Target &amp;gt; Bubbling &amp;gt; Capturing&lt;/li&gt; 
 &lt;li&gt;D: Capturing &amp;gt; Target &amp;gt; Bubbling&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;During the &lt;strong&gt;capturing&lt;/strong&gt; phase, the event goes through the ancestor elements down to the target element. It then reaches the &lt;strong&gt;target&lt;/strong&gt; element, and &lt;strong&gt;bubbling&lt;/strong&gt; begins.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/N18oRgd.png" width="200"&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;14. All object have prototypes.&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: true&lt;/li&gt; 
 &lt;li&gt;B: false&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;All objects have prototypes, except for the &lt;strong&gt;base object&lt;/strong&gt;. The base object is the object created by the user, or an object that is created using the &lt;code&gt;new&lt;/code&gt; keyword. The base object has access to some methods and properties, such as &lt;code&gt;.toString&lt;/code&gt;. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can't find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;15. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function sum(a, b) {
  return a + b;
}

sum(1, '2');
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"12"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;JavaScript is a &lt;strong&gt;dynamically typed language&lt;/strong&gt;: we don't specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called &lt;em&gt;implicit type coercion&lt;/em&gt;. &lt;strong&gt;Coercion&lt;/strong&gt; is converting from one type into another.&lt;/p&gt; 
 &lt;p&gt;In this example, JavaScript converts the number &lt;code&gt;1&lt;/code&gt; into a string, in order for the function to make sense and return a value. During the addition of a numeric type (&lt;code&gt;1&lt;/code&gt;) and a string type (&lt;code&gt;'2'&lt;/code&gt;), the number is treated as a string. We can concatenate strings like &lt;code&gt;"Hello" + "World"&lt;/code&gt;, so what's happening here is &lt;code&gt;"1" + "2"&lt;/code&gt; which returns &lt;code&gt;"12"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;16. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let number = 0;
console.log(number++);
console.log(++number);
console.log(number);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;0&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;0&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The &lt;strong&gt;postfix&lt;/strong&gt; unary operator &lt;code&gt;++&lt;/code&gt;:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Returns the value (this returns &lt;code&gt;0&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;Increments the value (number is now &lt;code&gt;1&lt;/code&gt;)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;The &lt;strong&gt;prefix&lt;/strong&gt; unary operator &lt;code&gt;++&lt;/code&gt;:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Increments the value (number is now &lt;code&gt;2&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;Returns the value (this returns &lt;code&gt;2&lt;/code&gt;)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;This returns &lt;code&gt;0 2 2&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;17. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function getPersonInfo(one, two, three) {
  console.log(one);
  console.log(two);
  console.log(three);
}

const person = 'Lydia';
const age = 21;

getPersonInfo`${person} is ${age} years old`;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"Lydia"&lt;/code&gt; &lt;code&gt;21&lt;/code&gt; &lt;code&gt;["", " is ", " years old"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;["", " is ", " years old"]&lt;/code&gt; &lt;code&gt;"Lydia"&lt;/code&gt; &lt;code&gt;21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"Lydia"&lt;/code&gt; &lt;code&gt;["", " is ", " years old"]&lt;/code&gt; &lt;code&gt;21&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;If you use tagged template literals, the value of the first argument is always an array of the string values. The remaining arguments get the values of the passed expressions!&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;18. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function checkAge(data) {
  if (data === { age: 18 }) {
    console.log('You are an adult!');
  } else if (data == { age: 18 }) {
    console.log('You are still an adult.');
  } else {
    console.log(`Hmm.. You don't have an age I guess`);
  }
}

checkAge({ age: 18 });
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;You are an adult!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;You are still an adult.&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Hmm.. You don't have an age I guess&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;When testing equality, primitives are compared by their &lt;em&gt;value&lt;/em&gt;, while objects are compared by their &lt;em&gt;reference&lt;/em&gt;. JavaScript checks if the objects have a reference to the same location in memory.&lt;/p&gt; 
 &lt;p&gt;The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.&lt;/p&gt; 
 &lt;p&gt;This is why both &lt;code&gt;{ age: 18 } === { age: 18 }&lt;/code&gt; and &lt;code&gt;{ age: 18 } == { age: 18 }&lt;/code&gt; return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;19. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function getAge(...args) {
  console.log(typeof args);
}

getAge(21);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"number"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"array"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"object"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"NaN"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The rest parameter (&lt;code&gt;...args&lt;/code&gt;) lets us "collect" all remaining arguments into an array. An array is an object, so &lt;code&gt;typeof args&lt;/code&gt; returns &lt;code&gt;"object"&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;20. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function getAge() {
  'use strict';
  age = 21;
  console.log(age);
}

getAge();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;With &lt;code&gt;"use strict"&lt;/code&gt;, you can make sure that you don't accidentally declare global variables. We never declared the variable &lt;code&gt;age&lt;/code&gt;, and since we use &lt;code&gt;"use strict"&lt;/code&gt;, it will throw a reference error. If we didn't use &lt;code&gt;"use strict"&lt;/code&gt;, it would have worked, since the property &lt;code&gt;age&lt;/code&gt; would have gotten added to the global object.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;21. What's the value of &lt;code&gt;sum&lt;/code&gt;?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const sum = eval('10*10+5');
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;105&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"105"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"10*10+5"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;eval&lt;/code&gt; evaluates code that's passed as a string. If it's an expression, like in this case, it evaluates the expression. The expression is &lt;code&gt;10 * 10 + 5&lt;/code&gt;. This returns the number &lt;code&gt;105&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;22. How long is cool_secret accessible?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;sessionStorage.setItem('cool_secret', 123);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: Forever, the data doesn't get lost.&lt;/li&gt; 
 &lt;li&gt;B: When the user closes the tab.&lt;/li&gt; 
 &lt;li&gt;C: When the user closes the entire browser, not only the tab.&lt;/li&gt; 
 &lt;li&gt;D: When the user shuts off their computer.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;The data stored in &lt;code&gt;sessionStorage&lt;/code&gt; is removed after closing the &lt;em&gt;tab&lt;/em&gt;.&lt;/p&gt; 
 &lt;p&gt;If you used &lt;code&gt;localStorage&lt;/code&gt;, the data would've been there forever, unless for example &lt;code&gt;localStorage.clear()&lt;/code&gt; is invoked.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;23. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var num = 8;
var num = 10;

console.log(num);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;8&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;10&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;var&lt;/code&gt; keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.&lt;/p&gt; 
 &lt;p&gt;You cannot do this with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; since they're block-scoped and therefore can't be redeclared.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;24. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const obj = { 1: 'a', 2: 'b', 3: 'c' };
const set = new Set([1, 2, 3, 4, 5]);

obj.hasOwnProperty('1');
obj.hasOwnProperty(1);
set.has('1');
set.has(1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;All object keys (excluding Symbols) are strings under the hood, even if you don't type it yourself as a string. This is why &lt;code&gt;obj.hasOwnProperty('1')&lt;/code&gt; also returns true.&lt;/p&gt; 
 &lt;p&gt;It doesn't work that way for a set. There is no &lt;code&gt;'1'&lt;/code&gt; in our set: &lt;code&gt;set.has('1')&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. It has the numeric type &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;set.has(1)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;25. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const obj = { a: 'one', b: 'two', a: 'three' };
console.log(obj);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ a: "one", b: "two" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ b: "two", a: "three" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ a: "three", b: "two" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;26. The JavaScript global execution context creates two things for you: the global object, and the "this" keyword.&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: true&lt;/li&gt; 
 &lt;li&gt;B: false&lt;/li&gt; 
 &lt;li&gt;C: it depends&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The base execution context is the global execution context: it's what's accessible everywhere in your code.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;27. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;for (let i = 1; i &amp;lt; 5; i++) {
  if (i === 3) continue;
  console.log(i);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;4&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; &lt;code&gt;4&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;continue&lt;/code&gt; statement skips an iteration if a certain condition returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;28. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;String.prototype.giveLydiaPizza = () =&amp;gt; {
  return 'Just give Lydia pizza already!';
};

const name = 'Lydia';

console.log(name.giveLydiaPizza())
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"Just give Lydia pizza already!"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;TypeError: not a function&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;String&lt;/code&gt; is a built-in constructor, that we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method!&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;29. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const a = {};
const b = { key: 'b' };
const c = { key: 'c' };

a[b] = 123;
a[c] = 456;

console.log(a[b]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;123&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;456&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;Object keys are automatically converted into strings. We are trying to set an object as a key to object &lt;code&gt;a&lt;/code&gt;, with the value of &lt;code&gt;123&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;However, when we stringify an object, it becomes &lt;code&gt;"[object Object]"&lt;/code&gt;. So what we are saying here, is that &lt;code&gt;a["[object Object]"] = 123&lt;/code&gt;. Then, we can try to do the same again. &lt;code&gt;c&lt;/code&gt; is another object that we are implicitly stringifying. So then, &lt;code&gt;a["[object Object]"] = 456&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then, we log &lt;code&gt;a[b]&lt;/code&gt;, which is actually &lt;code&gt;a["[object Object]"]&lt;/code&gt;. We just set that to &lt;code&gt;456&lt;/code&gt;, so it returns &lt;code&gt;456&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;30. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const foo = () =&amp;gt; console.log('First');
const bar = () =&amp;gt; setTimeout(() =&amp;gt; console.log('Second'));
const baz = () =&amp;gt; console.log('Third');

bar();
foo();
baz();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;First&lt;/code&gt; &lt;code&gt;Second&lt;/code&gt; &lt;code&gt;Third&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;First&lt;/code&gt; &lt;code&gt;Third&lt;/code&gt; &lt;code&gt;Second&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Second&lt;/code&gt; &lt;code&gt;First&lt;/code&gt; &lt;code&gt;Third&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Second&lt;/code&gt; &lt;code&gt;Third&lt;/code&gt; &lt;code&gt;First&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;We have a &lt;code&gt;setTimeout&lt;/code&gt; function and invoked it first. Yet, it was logged last.&lt;/p&gt; 
 &lt;p&gt;This is because in browsers, we don't just have the runtime engine, we also have something called a &lt;code&gt;WebAPI&lt;/code&gt;. The &lt;code&gt;WebAPI&lt;/code&gt; gives us the &lt;code&gt;setTimeout&lt;/code&gt; function to start with, and for example the DOM.&lt;/p&gt; 
 &lt;p&gt;After the &lt;em&gt;callback&lt;/em&gt; is pushed to the WebAPI, the &lt;code&gt;setTimeout&lt;/code&gt; function itself (but not the callback!) is popped off the stack.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/X5wsHOg.png" width="200"&gt; 
 &lt;p&gt;Now, &lt;code&gt;foo&lt;/code&gt; gets invoked, and &lt;code&gt;"First"&lt;/code&gt; is being logged.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/Pvc0dGq.png" width="200"&gt; 
 &lt;p&gt;&lt;code&gt;foo&lt;/code&gt; is popped off the stack, and &lt;code&gt;baz&lt;/code&gt; gets invoked. &lt;code&gt;"Third"&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/WhA2bCP.png" width="200"&gt; 
 &lt;p&gt;The WebAPI can't just add stuff to the stack whenever it's ready. Instead, it pushes the callback function to something called the &lt;em&gt;queue&lt;/em&gt;.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/NSnDZmU.png" width="200"&gt; 
 &lt;p&gt;This is where an event loop starts to work. An &lt;strong&gt;event loop&lt;/strong&gt; looks at the stack and task queue. If the stack is empty, it takes the first thing on the queue and pushes it onto the stack.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/uyiScAI.png" width="200"&gt; 
 &lt;p&gt;&lt;code&gt;bar&lt;/code&gt; gets invoked, &lt;code&gt;"Second"&lt;/code&gt; gets logged, and it's popped off the stack.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;31. What is the event.target when clicking the button?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div onclick="console.log('first div')"&amp;gt;
  &amp;lt;div onclick="console.log('second div')"&amp;gt;
    &amp;lt;button onclick="console.log('button')"&amp;gt;
      Click!
    &amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: Outer &lt;code&gt;div&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: Inner &lt;code&gt;div&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;button&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: An array of all nested elements.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The deepest nested element that caused the event is the target of the event. You can stop bubbling by &lt;code&gt;event.stopPropagation&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;32. When you click the paragraph, what's the logged output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div onclick="console.log('div')"&amp;gt;
  &amp;lt;p onclick="console.log('p')"&amp;gt;
    Click here!
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;p&lt;/code&gt; &lt;code&gt;div&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;div&lt;/code&gt; &lt;code&gt;p&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;p&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;div&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;If we click &lt;code&gt;p&lt;/code&gt;, we see two logs: &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;div&lt;/code&gt;. During event propagation, there are 3 phases: capturing, targeting, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set &lt;code&gt;useCapture&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;). It goes from the deepest nested element outwards.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;33. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = { name: 'Lydia' };

function sayHi(age) {
  return `${this.name} is ${age}`;
}

console.log(sayHi.call(person, 21));
console.log(sayHi.bind(person, 21));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;undefined is 21&lt;/code&gt; &lt;code&gt;Lydia is 21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;function&lt;/code&gt; &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Lydia is 21&lt;/code&gt; &lt;code&gt;Lydia is 21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Lydia is 21&lt;/code&gt; &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;With both, we can pass the object to which we want the &lt;code&gt;this&lt;/code&gt; keyword to refer to. However, &lt;code&gt;.call&lt;/code&gt; is also &lt;em&gt;executed immediately&lt;/em&gt;!&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;.bind.&lt;/code&gt; returns a &lt;em&gt;copy&lt;/em&gt; of the function, but with a bound context! It is not executed immediately.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;34. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function sayHi() {
  return (() =&amp;gt; 0)();
}

console.log(typeof sayHi());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"object"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"number"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"function"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"undefined"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;sayHi&lt;/code&gt; function returns the returned value of the immediately invoked function expression (IIFE). This function returned &lt;code&gt;0&lt;/code&gt;, which is type &lt;code&gt;"number"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;FYI: &lt;code&gt;typeof&lt;/code&gt; can return the following list of values: &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;bigint&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;symbol&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;. Note that &lt;code&gt;typeof null&lt;/code&gt; returns &lt;code&gt;"object"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;35. Which of these values are falsy?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;0;
new Number(0);
('');
(' ');
new Boolean(false);
undefined;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;new Number(0)&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;new Boolean(false)&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;new Boolean(false)&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: All of them are falsy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;There are 8 falsy values:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;''&lt;/code&gt; (empty string)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;-0&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;0n&lt;/code&gt; (BigInt(0))&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Function constructors, like &lt;code&gt;new Number&lt;/code&gt; and &lt;code&gt;new Boolean&lt;/code&gt; are truthy.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;36. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(typeof typeof 1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"number"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"string"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"object"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"undefined"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;typeof 1&lt;/code&gt; returns &lt;code&gt;"number"&lt;/code&gt;. &lt;code&gt;typeof "number"&lt;/code&gt; returns &lt;code&gt;"string"&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;37. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const numbers = [1, 2, 3];
numbers[10] = 11;
console.log(numbers);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[1, 2, 3, null x 7, 11]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[1, 2, 3, 11]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[1, 2, 3, empty x 7, 11]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called "empty slots". These actually have the value of &lt;code&gt;undefined&lt;/code&gt;, but you will see something like:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;[1, 2, 3, empty x 7, 11]&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;depending on where you run it (it's different for every browser, node, etc.)&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;38. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;(() =&amp;gt; {
  let x, y;
  try {
    throw new Error();
  } catch (x) {
    (x = 1), (y = 2);
    console.log(x);
  }
  console.log(x);
  console.log(y);
})();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;catch&lt;/code&gt; block receives the argument &lt;code&gt;x&lt;/code&gt;. This is not the same &lt;code&gt;x&lt;/code&gt; as the variable when we pass arguments. This variable &lt;code&gt;x&lt;/code&gt; is block-scoped.&lt;/p&gt; 
 &lt;p&gt;Later, we set this block-scoped variable equal to &lt;code&gt;1&lt;/code&gt;, and set the value of the variable &lt;code&gt;y&lt;/code&gt;. Now, we log the block-scoped variable &lt;code&gt;x&lt;/code&gt;, which is equal to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Outside of the &lt;code&gt;catch&lt;/code&gt; block, &lt;code&gt;x&lt;/code&gt; is still &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;. When we want to &lt;code&gt;console.log(x)&lt;/code&gt; outside of the &lt;code&gt;catch&lt;/code&gt; block, it returns &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; returns &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;39. Everything in JavaScript is either a...&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: primitive or object&lt;/li&gt; 
 &lt;li&gt;B: function or object&lt;/li&gt; 
 &lt;li&gt;C: trick question! only objects&lt;/li&gt; 
 &lt;li&gt;D: number or object&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;JavaScript only has primitive types and objects.&lt;/p&gt; 
 &lt;p&gt;Primitive types are &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;bigint&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, and &lt;code&gt;symbol&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;What differentiates a primitive from an object is that primitives do not have any properties or methods; however, you'll note that &lt;code&gt;'foo'.toUpperCase()&lt;/code&gt; evaluates to &lt;code&gt;'FOO'&lt;/code&gt; and does not result in a &lt;code&gt;TypeError&lt;/code&gt;. This is because when you try to access a property or method on a primitive like a string, JavaScript will implicitly wrap the primitive type using one of the wrapper classes, i.e. &lt;code&gt;String&lt;/code&gt;, and then immediately discard the wrapper after the expression evaluates. All primitives except for &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; exhibit this behavior.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;40. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;[[0, 1], [2, 3]].reduce(
  (acc, cur) =&amp;gt; {
    return acc.concat(cur);
  },
  [1, 2],
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[0, 1, 2, 3, 1, 2]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[6, 1, 2]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[1, 2, 0, 1, 2, 3]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;[1, 2, 6]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;[1, 2]&lt;/code&gt; is our initial value. This is the value we start with, and the value of the very first &lt;code&gt;acc&lt;/code&gt;. During the first round, &lt;code&gt;acc&lt;/code&gt; is &lt;code&gt;[1,2]&lt;/code&gt;, and &lt;code&gt;cur&lt;/code&gt; is &lt;code&gt;[0, 1]&lt;/code&gt;. We concatenate them, which results in &lt;code&gt;[1, 2, 0, 1]&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then, &lt;code&gt;[1, 2, 0, 1]&lt;/code&gt; is &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;[2, 3]&lt;/code&gt; is &lt;code&gt;cur&lt;/code&gt;. We concatenate them, and get &lt;code&gt;[1, 2, 0, 1, 2, 3]&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;41. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;!!null;
!!'';
!!1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is falsy. &lt;code&gt;!null&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;!true&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;""&lt;/code&gt; is falsy. &lt;code&gt;!""&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;!true&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;1&lt;/code&gt; is truthy. &lt;code&gt;!1&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;!false&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;42. What does the &lt;code&gt;setInterval&lt;/code&gt; method return in the browser?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;setInterval(() =&amp;gt; console.log('Hi'), 1000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: a unique id&lt;/li&gt; 
 &lt;li&gt;B: the amount of milliseconds specified&lt;/li&gt; 
 &lt;li&gt;C: the passed function&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;It returns a unique id. This id can be used to clear that interval with the &lt;code&gt;clearInterval()&lt;/code&gt; function.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;43. What does this return?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;[...'Lydia'];
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;["L", "y", "d", "i", "a"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;["Lydia"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[[], "Lydia"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;[["L", "y", "d", "i", "a"]]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;A string is an iterable. The spread operator maps every character of an iterable to one element.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;44. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function* generator(i) {
  yield i;
  yield i * 2;
}

const gen = generator(10);

console.log(gen.next().value);
console.log(gen.next().value);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[0, 10], [10, 20]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;20, 20&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;10, 20&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;0, 10 and 10, 20&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Regular functions cannot be stopped mid-way after invocation. However, a generator function can be "stopped" midway, and later continue from where it stopped. Every time a generator function encounters a &lt;code&gt;yield&lt;/code&gt; keyword, the function yields the value specified after it. Note that the generator function in that case doesn’t &lt;em&gt;return&lt;/em&gt; the value, it &lt;em&gt;yields&lt;/em&gt; the value.&lt;/p&gt; 
 &lt;p&gt;First, we initialize the generator function with &lt;code&gt;i&lt;/code&gt; equal to &lt;code&gt;10&lt;/code&gt;. We invoke the generator function using the &lt;code&gt;next()&lt;/code&gt; method. The first time we invoke the generator function, &lt;code&gt;i&lt;/code&gt; is equal to &lt;code&gt;10&lt;/code&gt;. It encounters the first &lt;code&gt;yield&lt;/code&gt; keyword: it yields the value of &lt;code&gt;i&lt;/code&gt;. The generator is now "paused", and &lt;code&gt;10&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;Then, we invoke the function again with the &lt;code&gt;next()&lt;/code&gt; method. It starts to continue where it stopped previously, still with &lt;code&gt;i&lt;/code&gt; equal to &lt;code&gt;10&lt;/code&gt;. Now, it encounters the next &lt;code&gt;yield&lt;/code&gt; keyword, and yields &lt;code&gt;i * 2&lt;/code&gt;. &lt;code&gt;i&lt;/code&gt; is equal to &lt;code&gt;10&lt;/code&gt;, so it returns &lt;code&gt;10 * 2&lt;/code&gt;, which is &lt;code&gt;20&lt;/code&gt;. This results in &lt;code&gt;10, 20&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;45. What does this return?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const firstPromise = new Promise((res, rej) =&amp;gt; {
  setTimeout(res, 500, 'one');
});

const secondPromise = new Promise((res, rej) =&amp;gt; {
  setTimeout(res, 100, 'two');
});

Promise.race([firstPromise, secondPromise]).then(res =&amp;gt; console.log(res));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"one"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"two"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"two" "one"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"one" "two"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;When we pass multiple promises to the &lt;code&gt;Promise.race&lt;/code&gt; method, it resolves/rejects the &lt;em&gt;first&lt;/em&gt; promise that resolves/rejects. To the &lt;code&gt;setTimeout&lt;/code&gt; method, we pass a timer: 500ms for the first promise (&lt;code&gt;firstPromise&lt;/code&gt;), and 100ms for the second promise (&lt;code&gt;secondPromise&lt;/code&gt;). This means that the &lt;code&gt;secondPromise&lt;/code&gt; resolves first with the value of &lt;code&gt;'two'&lt;/code&gt;. &lt;code&gt;res&lt;/code&gt; now holds the value of &lt;code&gt;'two'&lt;/code&gt;, which gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;46. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let person = { name: 'Lydia' };
const members = [person];
person = null;

console.log(members);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[null]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[{}]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;[{ name: "Lydia" }]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;First, we declare a variable &lt;code&gt;person&lt;/code&gt; with the value of an object that has a &lt;code&gt;name&lt;/code&gt; property.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/TML1MbS.png" width="200"&gt; 
 &lt;p&gt;Then, we declare a variable called &lt;code&gt;members&lt;/code&gt;. We set the first element of that array equal to the value of the &lt;code&gt;person&lt;/code&gt; variable. Objects interact by &lt;em&gt;reference&lt;/em&gt; when setting them equal to each other. When you assign a reference from one variable to another, you make a &lt;em&gt;copy&lt;/em&gt; of that reference. (note that they don't have the &lt;em&gt;same&lt;/em&gt; reference!)&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/FSG5K3F.png" width="300"&gt; 
 &lt;p&gt;Then, we set the variable &lt;code&gt;person&lt;/code&gt; equal to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/sYjcsMT.png" width="300"&gt; 
 &lt;p&gt;We are only modifying the value of the &lt;code&gt;person&lt;/code&gt; variable, and not the first element in the array, since that element has a different (copied) reference to the object. The first element in &lt;code&gt;members&lt;/code&gt; still holds its reference to the original object. When we log the &lt;code&gt;members&lt;/code&gt; array, the first element still holds the value of the object, which gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;47. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  name: 'Lydia',
  age: 21,
};

for (const item in person) {
  console.log(item);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ name: "Lydia" }, { age: 21 }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"name", "age"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"Lydia", 21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;["name", "Lydia"], ["age", 21]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;With a &lt;code&gt;for-in&lt;/code&gt; loop, we can iterate through object keys, in this case &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;. Under the hood, object keys are strings (if they're not a Symbol). On every loop, we set the value of &lt;code&gt;item&lt;/code&gt; equal to the current key it’s iterating over. First, &lt;code&gt;item&lt;/code&gt; is equal to &lt;code&gt;name&lt;/code&gt;, and gets logged. Then, &lt;code&gt;item&lt;/code&gt; is equal to &lt;code&gt;age&lt;/code&gt;, which gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;48. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(3 + 4 + '5');
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"345"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"75"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;12&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"12"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;Operator associativity is the order in which the compiler evaluates the expressions, either left-to-right or right-to-left. This only happens if all operators have the &lt;em&gt;same&lt;/em&gt; precedence. We only have one type of operator: &lt;code&gt;+&lt;/code&gt;. For addition, the associativity is left-to-right.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;3 + 4&lt;/code&gt; gets evaluated first. This results in the number &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;7 + '5'&lt;/code&gt; results in &lt;code&gt;"75"&lt;/code&gt; because of coercion. JavaScript converts the number &lt;code&gt;7&lt;/code&gt; into a string, see question 15. We can concatenate two strings using the &lt;code&gt;+&lt;/code&gt;operator. &lt;code&gt;"7" + "5"&lt;/code&gt; results in &lt;code&gt;"75"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;49. What's the value of &lt;code&gt;num&lt;/code&gt;?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const num = parseInt('7*6', 10);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;42&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"42"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Only the first number in the string is returned. Based on the &lt;em&gt;radix&lt;/em&gt; (the second argument in order to specify what type of number we want to parse it to: base 10, hexadecimal, octal, binary, etc.), the &lt;code&gt;parseInt&lt;/code&gt; checks whether the characters in the string are valid. Once it encounters a character that isn't a valid number in the radix, it stops parsing and ignores the following characters.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;*&lt;/code&gt; is not a valid number. It only parses &lt;code&gt;"7"&lt;/code&gt; into the decimal &lt;code&gt;7&lt;/code&gt;. &lt;code&gt;num&lt;/code&gt; now holds the value of &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;50. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;[1, 2, 3].map(num =&amp;gt; {
  if (typeof num === 'number') return;
  return num * 2;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[null, null, null]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[undefined, undefined, undefined]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;[ 3 x empty ]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;When mapping over the array, the value of &lt;code&gt;num&lt;/code&gt; is equal to the element it’s currently looping over. In this case, the elements are numbers, so the condition of the if statement &lt;code&gt;typeof num === "number"&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. The map function creates a new array and inserts the values returned from the function.&lt;/p&gt; 
 &lt;p&gt;However, we don’t return a value. When we don’t return a value from the function, the function returns &lt;code&gt;undefined&lt;/code&gt;. For every element in the array, the function block gets called, so for each element we return &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;51. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function getInfo(member, year) {
  member.name = 'Lydia';
  year = '1998';
}

const person = { name: 'Sarah' };
const birthYear = '1997';

getInfo(person, birthYear);

console.log(person, birthYear);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ name: "Lydia" }, "1997"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ name: "Sarah" }, "1998"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ name: "Lydia" }, "1998"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;{ name: "Sarah" }, "1997"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;Arguments are passed by &lt;em&gt;value&lt;/em&gt;, unless their value is an object, then they're passed by &lt;em&gt;reference&lt;/em&gt;. &lt;code&gt;birthYear&lt;/code&gt; is passed by value, since it's a string, not an object. When we pass arguments by value, a &lt;em&gt;copy&lt;/em&gt; of that value is created (see question 46).&lt;/p&gt; 
 &lt;p&gt;The variable &lt;code&gt;birthYear&lt;/code&gt; has a reference to the value &lt;code&gt;"1997"&lt;/code&gt;. The argument &lt;code&gt;year&lt;/code&gt; also has a reference to the value &lt;code&gt;"1997"&lt;/code&gt;, but it's not the same value as &lt;code&gt;birthYear&lt;/code&gt; has a reference to. When we update the value of &lt;code&gt;year&lt;/code&gt; by setting &lt;code&gt;year&lt;/code&gt; equal to &lt;code&gt;"1998"&lt;/code&gt;, we are only updating the value of &lt;code&gt;year&lt;/code&gt;. &lt;code&gt;birthYear&lt;/code&gt; is still equal to &lt;code&gt;"1997"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;The value of &lt;code&gt;person&lt;/code&gt; is an object. The argument &lt;code&gt;member&lt;/code&gt; has a (copied) reference to the &lt;em&gt;same&lt;/em&gt; object. When we modify a property of the object &lt;code&gt;member&lt;/code&gt; has a reference to, the value of &lt;code&gt;person&lt;/code&gt; will also be modified, since they both have a reference to the same object. &lt;code&gt;person&lt;/code&gt;'s &lt;code&gt;name&lt;/code&gt; property is now equal to the value &lt;code&gt;"Lydia"&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;52. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function greeting() {
  throw 'Hello world!';
}

function sayHi() {
  try {
    const data = greeting();
    console.log('It worked!', data);
  } catch (e) {
    console.log('Oh no an error:', e);
  }
}

sayHi();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;It worked! Hello world!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Oh no an error: undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;SyntaxError: can only throw Error objects&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Oh no an error: Hello world!&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;throw&lt;/code&gt; statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a &lt;b&gt;string&lt;/b&gt;, a &lt;b&gt;number&lt;/b&gt;, a &lt;b&gt;boolean&lt;/b&gt; or an &lt;b&gt;object&lt;/b&gt;. In this case, our exception is the string &lt;code&gt;'Hello world!'&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;With the &lt;code&gt;catch&lt;/code&gt; statement, we can specify what to do if an exception is thrown in the &lt;code&gt;try&lt;/code&gt; block. An exception is thrown: the string &lt;code&gt;'Hello world!'&lt;/code&gt;. &lt;code&gt;e&lt;/code&gt; is now equal to that string, which we log. This results in &lt;code&gt;'Oh an error: Hello world!'&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;53. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function Car() {
  this.make = 'Lamborghini';
  return { make: 'Maserati' };
}

const myCar = new Car();
console.log(myCar.make);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"Lamborghini"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"Maserati"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;When a constructor function is called with the &lt;code&gt;new&lt;/code&gt; keyword, it creates an object and sets the &lt;code&gt;this&lt;/code&gt; keyword to refer to that object. By default, if the constructor function doesn't explicitly return anything, it will return the newly created object.&lt;/p&gt; 
 &lt;p&gt;In this case, the constructor function &lt;code&gt;Car&lt;/code&gt; explicitly returns a new object with &lt;code&gt;make&lt;/code&gt; set to &lt;code&gt;"Maserati"&lt;/code&gt;, which overrides the default behavior. Therefore, when &lt;code&gt;new Car()&lt;/code&gt; is called, the &lt;em&gt;returned&lt;/em&gt; object is assigned to &lt;code&gt;myCar&lt;/code&gt;, resulting in the output being &lt;code&gt;"Maserati"&lt;/code&gt; when &lt;code&gt;myCar.make&lt;/code&gt; is accessed.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;54. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;(() =&amp;gt; {
  let x = (y = 10);
})();

console.log(typeof x);
console.log(typeof y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"undefined", "number"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"number", "number"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"object", "number"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"number", "undefined"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;let x = (y = 10);&lt;/code&gt; is actually shorthand for:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;y = 10;
let x = y;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;When we set &lt;code&gt;y&lt;/code&gt; equal to &lt;code&gt;10&lt;/code&gt;, we actually add a property &lt;code&gt;y&lt;/code&gt; to the global object (&lt;code&gt;window&lt;/code&gt; in the browser, &lt;code&gt;global&lt;/code&gt; in Node). In a browser, &lt;code&gt;window.y&lt;/code&gt; is now equal to &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then, we declare a variable &lt;code&gt;x&lt;/code&gt; with the value of &lt;code&gt;y&lt;/code&gt;, which is &lt;code&gt;10&lt;/code&gt;. Variables declared with the &lt;code&gt;let&lt;/code&gt; keyword are &lt;em&gt;block scoped&lt;/em&gt;, they are only defined within the block they're declared in; the immediately invoked function expression (IIFE) in this case. When we use the &lt;code&gt;typeof&lt;/code&gt; operator, the operand &lt;code&gt;x&lt;/code&gt; is not defined: we are trying to access &lt;code&gt;x&lt;/code&gt; outside of the block it's declared in. This means that &lt;code&gt;x&lt;/code&gt; is not defined. Values who haven't been assigned a value or declared are of type &lt;code&gt;"undefined"&lt;/code&gt;. &lt;code&gt;console.log(typeof x)&lt;/code&gt; returns &lt;code&gt;"undefined"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;However, we created a global variable &lt;code&gt;y&lt;/code&gt; when setting &lt;code&gt;y&lt;/code&gt; equal to &lt;code&gt;10&lt;/code&gt;. This value is accessible anywhere in our code. &lt;code&gt;y&lt;/code&gt; is defined, and holds a value of type &lt;code&gt;"number"&lt;/code&gt;. &lt;code&gt;console.log(typeof y)&lt;/code&gt; returns &lt;code&gt;"number"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;55. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Dog {
  constructor(name) {
    this.name = name;
  }
}

Dog.prototype.bark = function() {
  console.log(`Woof I am ${this.name}`);
};

const pet = new Dog('Mara');

pet.bark();

delete Dog.prototype.bark;

pet.bark();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"Woof I am Mara"&lt;/code&gt;, &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"Woof I am Mara"&lt;/code&gt;, &lt;code&gt;"Woof I am Mara"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"Woof I am Mara"&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;TypeError&lt;/code&gt;, &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;We can delete properties from objects using the &lt;code&gt;delete&lt;/code&gt; keyword, also on the prototype. By deleting a property on the prototype, it is not available anymore in the prototype chain. In this case, the &lt;code&gt;bark&lt;/code&gt; function is not available anymore on the prototype after &lt;code&gt;delete Dog.prototype.bark&lt;/code&gt;, yet we still try to access it.&lt;/p&gt; 
 &lt;p&gt;When we try to invoke something that is not a function, a &lt;code&gt;TypeError&lt;/code&gt; is thrown. In this case &lt;code&gt;TypeError: pet.bark is not a function&lt;/code&gt;, since &lt;code&gt;pet.bark&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;56. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const set = new Set([1, 1, 2, 3, 4]);

console.log(set);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[1, 1, 2, 3, 4]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{1, 1, 2, 3, 4}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;{1, 2, 3, 4}&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;Set&lt;/code&gt; object is a collection of &lt;em&gt;unique&lt;/em&gt; values: a value can only occur once in a set.&lt;/p&gt; 
 &lt;p&gt;We passed the iterable &lt;code&gt;[1, 1, 2, 3, 4]&lt;/code&gt; with a duplicate value &lt;code&gt;1&lt;/code&gt;. Since we cannot have two of the same values in a set, one of them is removed. This results in &lt;code&gt;{1, 2, 3, 4}&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;57. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// counter.js
let counter = 10;
export default counter;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// index.js
import myCounter from './counter';

myCounter += 1;

console.log(myCounter);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;10&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Error&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;An imported module is &lt;em&gt;read-only&lt;/em&gt;: you cannot modify the imported module. Only the module that exports them can change its value.&lt;/p&gt; 
 &lt;p&gt;When we try to increment the value of &lt;code&gt;myCounter&lt;/code&gt;, it throws an error: &lt;code&gt;myCounter&lt;/code&gt; is read-only and cannot be modified.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;58. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const name = 'Lydia';
age = 21;

console.log(delete name);
console.log(delete age);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"Lydia"&lt;/code&gt;, &lt;code&gt;21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;delete&lt;/code&gt; operator returns a boolean value: &lt;code&gt;true&lt;/code&gt; on a successful deletion, else it'll return &lt;code&gt;false&lt;/code&gt;. However, variables declared with the &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, or &lt;code&gt;let&lt;/code&gt; keywords cannot be deleted using the &lt;code&gt;delete&lt;/code&gt; operator.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;name&lt;/code&gt; variable was declared with a &lt;code&gt;const&lt;/code&gt; keyword, so its deletion is not successful: &lt;code&gt;false&lt;/code&gt; is returned. When we set &lt;code&gt;age&lt;/code&gt; equal to &lt;code&gt;21&lt;/code&gt;, we actually added a property called &lt;code&gt;age&lt;/code&gt; to the global object. You can successfully delete properties from objects this way, also the global object, so &lt;code&gt;delete age&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;59. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const numbers = [1, 2, 3, 4, 5];
const [y] = numbers;

console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[[1, 2, 3, 4, 5]]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;[1]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;We can unpack values from arrays or properties from objects through destructuring. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;[a, b] = [1, 2];
&lt;/code&gt;&lt;/pre&gt; 
 &lt;img src="https://i.imgur.com/ADFpVop.png" width="200"&gt; 
 &lt;p&gt;The value of &lt;code&gt;a&lt;/code&gt; is now &lt;code&gt;1&lt;/code&gt;, and the value of &lt;code&gt;b&lt;/code&gt; is now &lt;code&gt;2&lt;/code&gt;. What we actually did in the question, is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;[y] = [1, 2, 3, 4, 5];
&lt;/code&gt;&lt;/pre&gt; 
 &lt;img src="https://i.imgur.com/NzGkMNk.png" width="200"&gt; 
 &lt;p&gt;This means that the value of &lt;code&gt;y&lt;/code&gt; is equal to the first value in the array, which is the number &lt;code&gt;1&lt;/code&gt;. When we log &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; is returned.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;60. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const user = { name: 'Lydia', age: 21 };
const admin = { admin: true, ...user };

console.log(admin);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ admin: true, user: { name: "Lydia", age: 21 } }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ admin: true, name: "Lydia", age: 21 }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ admin: true, user: ["Lydia", 21] }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;{ admin: true }&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;It's possible to combine objects using the spread operator &lt;code&gt;...&lt;/code&gt;. It lets you create copies of the key/value pairs of one object, and add them to another object. In this case, we create copies of the &lt;code&gt;user&lt;/code&gt; object, and add them to the &lt;code&gt;admin&lt;/code&gt; object. The &lt;code&gt;admin&lt;/code&gt; object now contains the copied key/value pairs, which results in &lt;code&gt;{ admin: true, name: "Lydia", age: 21 }&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;61. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = { name: 'Lydia' };

Object.defineProperty(person, 'age', { value: 21 });

console.log(person);
console.log(Object.keys(person));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ name: "Lydia", age: 21 }&lt;/code&gt;, &lt;code&gt;["name", "age"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ name: "Lydia", age: 21 }&lt;/code&gt;, &lt;code&gt;["name"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ name: "Lydia"}&lt;/code&gt;, &lt;code&gt;["name", "age"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;{ name: "Lydia"}&lt;/code&gt;, &lt;code&gt;["age"]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;defineProperty&lt;/code&gt; method, we can add new properties to an object, or modify existing ones. When we add a property to an object using the &lt;code&gt;defineProperty&lt;/code&gt; method, they are by default &lt;em&gt;not enumerable&lt;/em&gt;. The &lt;code&gt;Object.keys&lt;/code&gt; method returns all &lt;em&gt;enumerable&lt;/em&gt; property names from an object, in this case only &lt;code&gt;"name"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Properties added using the &lt;code&gt;defineProperty&lt;/code&gt; method are immutable by default. You can override this behavior using the &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;configurable&lt;/code&gt; and &lt;code&gt;enumerable&lt;/code&gt; properties. This way, the &lt;code&gt;defineProperty&lt;/code&gt; method gives you a lot more control over the properties you're adding to an object.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;62. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const settings = {
  username: 'lydiahallie',
  level: 19,
  health: 90,
};

const data = JSON.stringify(settings, ['level', 'health']);
console.log(data);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"{"level":19, "health":90}"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"{"username": "lydiahallie"}"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"["level", "health"]"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"{"username": "lydiahallie", "level":19, "health":90}"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The second argument of &lt;code&gt;JSON.stringify&lt;/code&gt; is the &lt;em&gt;replacer&lt;/em&gt;. The replacer can either be a function or an array, and lets you control what and how the values should be stringified.&lt;/p&gt; 
 &lt;p&gt;If the replacer is an &lt;em&gt;array&lt;/em&gt;, only the property names included in the array will be added to the JSON string. In this case, only the properties with the names &lt;code&gt;"level"&lt;/code&gt; and &lt;code&gt;"health"&lt;/code&gt; are included, &lt;code&gt;"username"&lt;/code&gt; is excluded. &lt;code&gt;data&lt;/code&gt; is now equal to &lt;code&gt;"{"level":19, "health":90}"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;If the replacer is a &lt;em&gt;function&lt;/em&gt;, this function gets called on every property in the object you're stringifying. The value returned from this function will be the value of the property when it's added to the JSON string. If the value is &lt;code&gt;undefined&lt;/code&gt;, this property is excluded from the JSON string.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;63. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let num = 10;

const increaseNumber = () =&amp;gt; num++;
const increasePassedNumber = number =&amp;gt; number++;

const num1 = increaseNumber();
const num2 = increasePassedNumber(num1);

console.log(num1);
console.log(num2);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;10&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;11&lt;/code&gt;, &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;11&lt;/code&gt;, &lt;code&gt;12&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The unary operator &lt;code&gt;++&lt;/code&gt; &lt;em&gt;first returns&lt;/em&gt; the value of the operand, &lt;em&gt;then increments&lt;/em&gt; the value of the operand. The value of &lt;code&gt;num1&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt;, since the &lt;code&gt;increaseNumber&lt;/code&gt; function first returns the value of &lt;code&gt;num&lt;/code&gt;, which is &lt;code&gt;10&lt;/code&gt;, and only increments the value of &lt;code&gt;num&lt;/code&gt; afterward.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;num2&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt;, since we passed &lt;code&gt;num1&lt;/code&gt; to the &lt;code&gt;increasePassedNumber&lt;/code&gt;. &lt;code&gt;number&lt;/code&gt; is equal to &lt;code&gt;10&lt;/code&gt;(the value of &lt;code&gt;num1&lt;/code&gt;). Again, the unary operator &lt;code&gt;++&lt;/code&gt; &lt;em&gt;first returns&lt;/em&gt; the value of the operand, &lt;em&gt;then increments&lt;/em&gt; the value of the operand. The value of &lt;code&gt;number&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt;, so &lt;code&gt;num2&lt;/code&gt; is equal to &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;64. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const value = { number: 10 };

const multiply = (x = { ...value }) =&amp;gt; {
  console.log((x.number *= 2));
};

multiply();
multiply();
multiply(value);
multiply(value);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;20&lt;/code&gt;, &lt;code&gt;40&lt;/code&gt;, &lt;code&gt;80&lt;/code&gt;, &lt;code&gt;160&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;20&lt;/code&gt;, &lt;code&gt;40&lt;/code&gt;, &lt;code&gt;20&lt;/code&gt;, &lt;code&gt;40&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;20&lt;/code&gt;, &lt;code&gt;20&lt;/code&gt;, &lt;code&gt;20&lt;/code&gt;, &lt;code&gt;40&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;20&lt;/code&gt;, &lt;code&gt;40&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;In ES6, we can initialize parameters with a default value. The value of the parameter will be the default value, if no other value has been passed to the function, or if the value of the parameter is &lt;code&gt;"undefined"&lt;/code&gt;. In this case, we spread the properties of the &lt;code&gt;value&lt;/code&gt; object into a new object, so &lt;code&gt;x&lt;/code&gt; has the default value of &lt;code&gt;{ number: 10 }&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;The default argument is evaluated at &lt;em&gt;call time&lt;/em&gt;! Every time we call the function, a &lt;em&gt;new&lt;/em&gt; object is created. We invoke the &lt;code&gt;multiply&lt;/code&gt; function the first two times without passing a value: &lt;code&gt;x&lt;/code&gt; has the default value of &lt;code&gt;{ number: 10 }&lt;/code&gt;. We then log the multiplied value of that number, which is &lt;code&gt;20&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;The third time we invoke multiply, we do pass an argument: the object called &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;*=&lt;/code&gt; operator is actually shorthand for &lt;code&gt;x.number = x.number * 2&lt;/code&gt;: we modify the value of &lt;code&gt;x.number&lt;/code&gt;, and log the multiplied value &lt;code&gt;20&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;The fourth time, we pass the &lt;code&gt;value&lt;/code&gt; object again. &lt;code&gt;x.number&lt;/code&gt; was previously modified to &lt;code&gt;20&lt;/code&gt;, so &lt;code&gt;x.number *= 2&lt;/code&gt; logs &lt;code&gt;40&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;65. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;[1, 2, 3, 4].reduce((x, y) =&amp;gt; console.log(x, y));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt; &lt;code&gt;4&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; &lt;code&gt;4&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;4&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;The first argument that the &lt;code&gt;reduce&lt;/code&gt; method receives is the &lt;em&gt;accumulator&lt;/em&gt;, &lt;code&gt;x&lt;/code&gt; in this case. The second argument is the &lt;em&gt;current value&lt;/em&gt;, &lt;code&gt;y&lt;/code&gt;. With the reduce method, we execute a callback function on every element in the array, which could ultimately result in one single value.&lt;/p&gt; 
 &lt;p&gt;In this example, we are not returning any values, we are simply logging the values of the accumulator and the current value.&lt;/p&gt; 
 &lt;p&gt;The value of the accumulator is equal to the previously returned value of the callback function. If you don't pass the optional &lt;code&gt;initialValue&lt;/code&gt; argument to the &lt;code&gt;reduce&lt;/code&gt; method, the accumulator is equal to the first element on the first call.&lt;/p&gt; 
 &lt;p&gt;On the first call, the accumulator (&lt;code&gt;x&lt;/code&gt;) is &lt;code&gt;1&lt;/code&gt;, and the current value (&lt;code&gt;y&lt;/code&gt;) is &lt;code&gt;2&lt;/code&gt;. We don't return from the callback function, we log the accumulator, and the current values: &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; get logged.&lt;/p&gt; 
 &lt;p&gt;If you don't return a value from a function, it returns &lt;code&gt;undefined&lt;/code&gt;. On the next call, the accumulator is &lt;code&gt;undefined&lt;/code&gt;, and the current value is &lt;code&gt;3&lt;/code&gt;. &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; get logged.&lt;/p&gt; 
 &lt;p&gt;On the fourth call, we again don't return from the callback function. The accumulator is again &lt;code&gt;undefined&lt;/code&gt;, and the current value is &lt;code&gt;4&lt;/code&gt;. &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; get logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;66. With which constructor can we successfully extend the &lt;code&gt;Dog&lt;/code&gt; class?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Dog {
  constructor(name) {
    this.name = name;
  }
};

class Labrador extends Dog {
  // 1
  constructor(name, size) {
    this.size = size;
  }
  // 2
  constructor(name, size) {
    super(name);
    this.size = size;
  }
  // 3
  constructor(size) {
    super(name);
    this.size = size;
  }
  // 4
  constructor(name, size) {
    this.name = name;
    this.size = size;
  }

};
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: 1&lt;/li&gt; 
 &lt;li&gt;B: 2&lt;/li&gt; 
 &lt;li&gt;C: 3&lt;/li&gt; 
 &lt;li&gt;D: 4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;In a derived class, you cannot access the &lt;code&gt;this&lt;/code&gt; keyword before calling &lt;code&gt;super&lt;/code&gt;. If you try to do that, it will throw a ReferenceError: 1 and 4 would throw a reference error.&lt;/p&gt; 
 &lt;p&gt;With the &lt;code&gt;super&lt;/code&gt; keyword, we call that parent class's constructor with the given arguments. The parent's constructor receives the &lt;code&gt;name&lt;/code&gt; argument, so we need to pass &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;Labrador&lt;/code&gt; class receives two arguments, &lt;code&gt;name&lt;/code&gt; since it extends &lt;code&gt;Dog&lt;/code&gt;, and &lt;code&gt;size&lt;/code&gt; as an extra property on the &lt;code&gt;Labrador&lt;/code&gt; class. They both need to be passed to the constructor function on &lt;code&gt;Labrador&lt;/code&gt;, which is done correctly using constructor 2.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;67. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// index.js
console.log('running index.js');
import { sum } from './sum.js';
console.log(sum(1, 2));

// sum.js
console.log('running sum.js');
export const sum = (a, b) =&amp;gt; a + b;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;running index.js&lt;/code&gt;, &lt;code&gt;running sum.js&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;running sum.js&lt;/code&gt;, &lt;code&gt;running index.js&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;running sum.js&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;running index.js&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;running index.js&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;running sum.js&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;import&lt;/code&gt; keyword, all imported modules are &lt;em&gt;pre-parsed&lt;/em&gt;. This means that the imported modules get run &lt;em&gt;first&lt;/em&gt;, and the code in the file that imports the module gets executed &lt;em&gt;after&lt;/em&gt;.&lt;/p&gt; 
 &lt;p&gt;This is a difference between &lt;code&gt;require()&lt;/code&gt; in CommonJS and &lt;code&gt;import&lt;/code&gt;! With &lt;code&gt;require()&lt;/code&gt;, you can load dependencies on demand while the code is being run. If we had used &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;running index.js&lt;/code&gt;, &lt;code&gt;running sum.js&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; would have been logged to the console.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;68. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(Number(2) === Number(2));
console.log(Boolean(false) === Boolean(false));
console.log(Symbol('foo') === Symbol('foo'));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;Every Symbol is entirely unique. The purpose of the argument passed to the Symbol is to give the Symbol a description. The value of the Symbol is not dependent on the passed argument. As we test equality, we are creating two entirely new symbols: the first &lt;code&gt;Symbol('foo')&lt;/code&gt;, and the second &lt;code&gt;Symbol('foo')&lt;/code&gt;. These two values are unique and not equal to each other, &lt;code&gt;Symbol('foo') === Symbol('foo')&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;69. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const name = 'Lydia Hallie';
console.log(name.padStart(13));
console.log(name.padStart(2));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"Lydia Hallie"&lt;/code&gt;, &lt;code&gt;"Lydia Hallie"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;" Lydia Hallie"&lt;/code&gt;, &lt;code&gt;" Lydia Hallie"&lt;/code&gt; (&lt;code&gt;"[13x whitespace]Lydia Hallie"&lt;/code&gt;, &lt;code&gt;"[2x whitespace]Lydia Hallie"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;" Lydia Hallie"&lt;/code&gt;, &lt;code&gt;"Lydia Hallie"&lt;/code&gt; (&lt;code&gt;"[1x whitespace]Lydia Hallie"&lt;/code&gt;, &lt;code&gt;"Lydia Hallie"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"Lydia Hallie"&lt;/code&gt;, &lt;code&gt;"Lyd"&lt;/code&gt;,&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;padStart&lt;/code&gt; method, we can add padding to the beginning of a string. The value passed to this method is the &lt;em&gt;total&lt;/em&gt; length of the string together with the padding. The string &lt;code&gt;"Lydia Hallie"&lt;/code&gt; has a length of &lt;code&gt;12&lt;/code&gt;. &lt;code&gt;name.padStart(13)&lt;/code&gt; inserts 1 space at the start of the string, because 12 + 1 is 13.&lt;/p&gt; 
 &lt;p&gt;If the argument passed to the &lt;code&gt;padStart&lt;/code&gt; method is smaller than the length of the array, no padding will be added.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;70. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log('🥑' + '💻');
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"🥑💻"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;257548&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: A string containing their code points&lt;/li&gt; 
 &lt;li&gt;D: Error&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;+&lt;/code&gt; operator, you can concatenate strings. In this case, we are concatenating the string &lt;code&gt;"🥑"&lt;/code&gt; with the string &lt;code&gt;"💻"&lt;/code&gt;, resulting in &lt;code&gt;"🥑💻"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;71. How can we log the values that are commented out after the console.log statement?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function* startGame() {
  const answer = yield 'Do you love JavaScript?';
  if (answer !== 'Yes') {
    return "Oh wow... Guess we're done here";
  }
  return 'JavaScript loves you back ❤️';
}

const game = startGame();
console.log(/* 1 */); // Do you love JavaScript?
console.log(/* 2 */); // JavaScript loves you back ❤️
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;game.next("Yes").value&lt;/code&gt; and &lt;code&gt;game.next().value&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;game.next.value("Yes")&lt;/code&gt; and &lt;code&gt;game.next.value()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;game.next().value&lt;/code&gt; and &lt;code&gt;game.next("Yes").value&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;game.next.value()&lt;/code&gt; and &lt;code&gt;game.next.value("Yes")&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;A generator function "pauses" its execution when it sees the &lt;code&gt;yield&lt;/code&gt; keyword. First, we have to let the function yield the string "Do you love JavaScript?", which can be done by calling &lt;code&gt;game.next().value&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Every line is executed, until it finds the first &lt;code&gt;yield&lt;/code&gt; keyword. There is a &lt;code&gt;yield&lt;/code&gt; keyword on the first line within the function: the execution stops with the first yield! &lt;em&gt;This means that the variable &lt;code&gt;answer&lt;/code&gt; is not defined yet!&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;When we call &lt;code&gt;game.next("Yes").value&lt;/code&gt;, the previous &lt;code&gt;yield&lt;/code&gt; is replaced with the value of the parameters passed to the &lt;code&gt;next()&lt;/code&gt; function, &lt;code&gt;"Yes"&lt;/code&gt; in this case. The value of the variable &lt;code&gt;answer&lt;/code&gt; is now equal to &lt;code&gt;"Yes"&lt;/code&gt;. The condition of the if-statement returns &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;JavaScript loves you back ❤️&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;72. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(String.raw`Hello\nworld`);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Hello world!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Hello&lt;/code&gt; &lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;code&gt;world&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Hello\nworld&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Hello\n&lt;/code&gt; &lt;br&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;code&gt;world&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;String.raw&lt;/code&gt; returns a string where the escapes (&lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\v&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt; etc.) are ignored! Backslashes can be an issue since you could end up with something like:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;const path = `C:\Documents\Projects\table.html`&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;Which would result in:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;"C:DocumentsProjects able.html"&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;With &lt;code&gt;String.raw&lt;/code&gt;, it would simply ignore the escape and print:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;C:\Documents\Projects\table.html&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;In this case, the string is &lt;code&gt;Hello\nworld&lt;/code&gt;, which gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;73. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;async function getData() {
  return await Promise.resolve('I made it!');
}

const data = getData();
console.log(data);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"I made it!"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Promise {&amp;lt;resolved&amp;gt;: "I made it!"}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Promise {&amp;lt;pending&amp;gt;}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;An async function always returns a promise. The &lt;code&gt;await&lt;/code&gt; still has to wait for the promise to resolve: a pending promise gets returned when we call &lt;code&gt;getData()&lt;/code&gt; in order to set &lt;code&gt;data&lt;/code&gt; equal to it.&lt;/p&gt; 
 &lt;p&gt;If we wanted to get access to the resolved value &lt;code&gt;"I made it"&lt;/code&gt;, we could have used the &lt;code&gt;.then()&lt;/code&gt; method on &lt;code&gt;data&lt;/code&gt;:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;data.then(res =&amp;gt; console.log(res))&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;This would've logged &lt;code&gt;"I made it!"&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;74. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function addToList(item, list) {
  return list.push(item);
}

const result = addToList('apple', ['banana']);
console.log(result);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;['apple', 'banana']&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;.push()&lt;/code&gt; method returns the &lt;em&gt;length&lt;/em&gt; of the new array! Previously, the array contained one element (the string &lt;code&gt;"banana"&lt;/code&gt;) and had a length of &lt;code&gt;1&lt;/code&gt;. After adding the string &lt;code&gt;"apple"&lt;/code&gt; to the array, the array contains two elements, and has a length of &lt;code&gt;2&lt;/code&gt;. This gets returned from the &lt;code&gt;addToList&lt;/code&gt; function.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;push&lt;/code&gt; method modifies the original array. If you wanted to return the &lt;em&gt;array&lt;/em&gt; from the function rather than the &lt;em&gt;length of the array&lt;/em&gt;, you should have returned &lt;code&gt;list&lt;/code&gt; after pushing &lt;code&gt;item&lt;/code&gt; to it.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;75. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const box = { x: 10, y: 20 };

Object.freeze(box);

const shape = box;
shape.x = 100;

console.log(shape);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ x: 100, y: 20 }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ x: 10, y: 20 }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ x: 100 }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;Object.freeze&lt;/code&gt; makes it impossible to add, remove, or modify properties of an object (unless the property's value is another object).&lt;/p&gt; 
 &lt;p&gt;When we create the variable &lt;code&gt;shape&lt;/code&gt; and set it equal to the frozen object &lt;code&gt;box&lt;/code&gt;, &lt;code&gt;shape&lt;/code&gt; also refers to a frozen object. You can check whether an object is frozen by using &lt;code&gt;Object.isFrozen&lt;/code&gt;. In this case, &lt;code&gt;Object.isFrozen(shape)&lt;/code&gt; would return true, since the variable &lt;code&gt;shape&lt;/code&gt; has a reference to a frozen object.&lt;/p&gt; 
 &lt;p&gt;Since &lt;code&gt;shape&lt;/code&gt; is frozen, and since the value of &lt;code&gt;x&lt;/code&gt; is not an object, we cannot modify the property &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; is still equal to &lt;code&gt;10&lt;/code&gt;, and &lt;code&gt;{ x: 10, y: 20 }&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;76. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const { firstName: myName } = { firstName: 'Lydia' };

console.log(firstName);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"Lydia"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"myName"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;By using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;destructuring assignment&lt;/a&gt; syntax we can unpack values from arrays, or properties from objects, into distinct variables:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const { firstName } = { firstName: 'Lydia' };
// ES5 version:
// var firstName = { firstName: 'Lydia' }.firstName;

console.log(firstName); // "Lydia"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Also, a property can be unpacked from an object and assigned to a variable with a different name than the object property:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const { firstName: myName } = { firstName: 'Lydia' };
// ES5 version:
// var myName = { firstName: 'Lydia' }.firstName;

console.log(myName); // "Lydia"
console.log(firstName); // Uncaught ReferenceError: firstName is not defined
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Therefore, &lt;code&gt;firstName&lt;/code&gt; does not exist as a variable, thus attempting to access its value will raise a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Be aware of the &lt;code&gt;global scope&lt;/code&gt; properties:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;const { name: myName } = { name: 'Lydia' };

console.log(myName); // "lydia"
console.log(name); // "" ----- Browser e.g. Chrome
console.log(name); // ReferenceError: name is not defined  ----- NodeJS

&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Whenever Javascript is unable to find a variable within the &lt;em&gt;current scope&lt;/em&gt;, it climbs up the &lt;a href="https://github.com/getify/You-Dont-Know-JS/raw/2nd-ed/scope-closures/ch3.md"&gt;Scope chain&lt;/a&gt; and searches for it and if it reaches the top-level scope, aka &lt;strong&gt;Global scope&lt;/strong&gt;, and still doesn't find it, it will throw a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;In &lt;strong&gt;Browsers&lt;/strong&gt; such as &lt;em&gt;Chrome&lt;/em&gt;, &lt;code&gt;name&lt;/code&gt; is a &lt;em&gt;deprecated global scope property&lt;/em&gt;. In this example, the code is running inside &lt;em&gt;global scope&lt;/em&gt; and there is no user-defined local variable for &lt;code&gt;name&lt;/code&gt;, therefore it searches the predefined &lt;em&gt;variables/properties&lt;/em&gt; in the global scope which is in the case of browsers, it searches through &lt;code&gt;window&lt;/code&gt; object and it will extract the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/name"&gt;window.name&lt;/a&gt; value which is equal to an &lt;strong&gt;empty string&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;In &lt;strong&gt;NodeJS&lt;/strong&gt;, there is no such property on the &lt;code&gt;global&lt;/code&gt; object, thus attempting to access a non-existent variable will raise a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined"&gt;ReferenceError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;77. Is this a pure function?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function sum(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: Yes&lt;/li&gt; 
 &lt;li&gt;B: No&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;A pure function is a function that &lt;em&gt;always&lt;/em&gt; returns the same result, if the same arguments are passed.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;sum&lt;/code&gt; function always returns the same result. If we pass &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;, it will &lt;em&gt;always&lt;/em&gt; return &lt;code&gt;3&lt;/code&gt; without side effects. If we pass &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;10&lt;/code&gt;, it will &lt;em&gt;always&lt;/em&gt; return &lt;code&gt;15&lt;/code&gt;, and so on. This is the definition of a pure function.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;78. What is the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const add = () =&amp;gt; {
  const cache = {};
  return num =&amp;gt; {
    if (num in cache) {
      return `From cache! ${cache[num]}`;
    } else {
      const result = num + 10;
      cache[num] = result;
      return `Calculated! ${result}`;
    }
  };
};

const addFunction = add();
console.log(addFunction(10));
console.log(addFunction(10));
console.log(addFunction(5 * 2));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Calculated! 20&lt;/code&gt; &lt;code&gt;Calculated! 20&lt;/code&gt; &lt;code&gt;Calculated! 20&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Calculated! 20&lt;/code&gt; &lt;code&gt;From cache! 20&lt;/code&gt; &lt;code&gt;Calculated! 20&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Calculated! 20&lt;/code&gt; &lt;code&gt;From cache! 20&lt;/code&gt; &lt;code&gt;From cache! 20&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Calculated! 20&lt;/code&gt; &lt;code&gt;From cache! 20&lt;/code&gt; &lt;code&gt;Error&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;add&lt;/code&gt; function is a &lt;em&gt;memoized&lt;/em&gt; function. With memoization, we can cache the results of a function in order to speed up its execution. In this case, we create a &lt;code&gt;cache&lt;/code&gt; object that stores the previously returned values.&lt;/p&gt; 
 &lt;p&gt;If we call the &lt;code&gt;addFunction&lt;/code&gt; function again with the same argument, it first checks whether it has already gotten that value in its cache. If that's the case, the cache value will be returned, which saves execution time. Otherwise, if it's not cached, it will calculate the value and store it afterward.&lt;/p&gt; 
 &lt;p&gt;We call the &lt;code&gt;addFunction&lt;/code&gt; function three times with the same value: on the first invocation, the value of the function when &lt;code&gt;num&lt;/code&gt; is equal to &lt;code&gt;10&lt;/code&gt; isn't cached yet. The condition of the if-statement &lt;code&gt;num in cache&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, and the else block gets executed: &lt;code&gt;Calculated! 20&lt;/code&gt; gets logged, and the value of the result gets added to the cache object. &lt;code&gt;cache&lt;/code&gt; now looks like &lt;code&gt;{ 10: 20 }&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;The second time, the &lt;code&gt;cache&lt;/code&gt; object contains the value that gets returned for &lt;code&gt;10&lt;/code&gt;. The condition of the if-statement &lt;code&gt;num in cache&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;'From cache! 20'&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;The third time, we pass &lt;code&gt;5 * 2&lt;/code&gt; to the function which gets evaluated to &lt;code&gt;10&lt;/code&gt;. The &lt;code&gt;cache&lt;/code&gt; object contains the value that gets returned for &lt;code&gt;10&lt;/code&gt;. The condition of the if-statement &lt;code&gt;num in cache&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;'From cache! 20'&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;79. What is the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const myLifeSummedUp = ['☕', '💻', '🍷', '🍫'];

for (let item in myLifeSummedUp) {
  console.log(item);
}

for (let item of myLifeSummedUp) {
  console.log(item);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;0&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;"☕"&lt;/code&gt; &lt;code&gt;"💻"&lt;/code&gt; &lt;code&gt;"🍷"&lt;/code&gt; &lt;code&gt;"🍫"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"☕"&lt;/code&gt; &lt;code&gt;"💻"&lt;/code&gt; &lt;code&gt;"🍷"&lt;/code&gt; &lt;code&gt;"🍫"&lt;/code&gt; and &lt;code&gt;"☕"&lt;/code&gt; &lt;code&gt;"💻"&lt;/code&gt; &lt;code&gt;"🍷"&lt;/code&gt; &lt;code&gt;"🍫"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"☕"&lt;/code&gt; &lt;code&gt;"💻"&lt;/code&gt; &lt;code&gt;"🍷"&lt;/code&gt; &lt;code&gt;"🍫"&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;0&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;{0: "☕", 1: "💻", 2: "🍷", 3: "🍫"}&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;With a &lt;em&gt;for-in&lt;/em&gt; loop, we can iterate over &lt;strong&gt;enumerable&lt;/strong&gt; properties. In an array, the enumerable properties are the "keys" of array elements, which are actually their indexes. You could see an array as:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;{0: "☕", 1: "💻", 2: "🍷", 3: "🍫"}&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;Where the keys are the enumerable properties. &lt;code&gt;0&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; get logged.&lt;/p&gt; 
 &lt;p&gt;With a &lt;em&gt;for-of&lt;/em&gt; loop, we can iterate over &lt;strong&gt;iterables&lt;/strong&gt;. An array is an iterable. When we iterate over the array, the variable "item" is equal to the element it's currently iterating over, &lt;code&gt;"☕"&lt;/code&gt; &lt;code&gt;"💻"&lt;/code&gt; &lt;code&gt;"🍷"&lt;/code&gt; &lt;code&gt;"🍫"&lt;/code&gt; get logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;80. What is the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const list = [1 + 2, 1 * 2, 1 / 2];
console.log(list);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;["1 + 2", "1 * 2", "1 / 2"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;["12", 2, 0.5]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[3, 2, 0.5]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;[1, 1, 1]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Array elements can hold any value. Numbers, strings, objects, other arrays, null, boolean values, undefined, and other expressions such as dates, functions, and calculations.&lt;/p&gt; 
 &lt;p&gt;The element will be equal to the returned value. &lt;code&gt;1 + 2&lt;/code&gt; returns &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;1 * 2&lt;/code&gt; returns &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;1 / 2&lt;/code&gt; returns &lt;code&gt;0.5&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;81. What is the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function sayHi(name) {
  return `Hi there, ${name}`;
}

console.log(sayHi());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Hi there,&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Hi there, undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Hi there, null&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;By default, arguments have the value of &lt;code&gt;undefined&lt;/code&gt;, unless a value has been passed to the function. In this case, we didn't pass a value for the &lt;code&gt;name&lt;/code&gt; argument. &lt;code&gt;name&lt;/code&gt; is equal to &lt;code&gt;undefined&lt;/code&gt; which gets logged.&lt;/p&gt; 
 &lt;p&gt;In ES6, we can overwrite this default &lt;code&gt;undefined&lt;/code&gt; value with default parameters. For example:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;function sayHi(name = "Lydia") { ... }&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;In this case, if we didn't pass a value or if we passed &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; would always be equal to the string &lt;code&gt;Lydia&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;82. What is the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;var status = '😎';

setTimeout(() =&amp;gt; {
  const status = '😍';

  const data = {
    status: '🥑',
    getStatus() {
      return this.status;
    },
  };

  console.log(data.getStatus());
  console.log(data.getStatus.call(this));
}, 0);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"🥑"&lt;/code&gt; and &lt;code&gt;"😍"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"🥑"&lt;/code&gt; and &lt;code&gt;"😎"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"😍"&lt;/code&gt; and &lt;code&gt;"😎"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"😎"&lt;/code&gt; and &lt;code&gt;"😎"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;The value of the &lt;code&gt;this&lt;/code&gt; keyword is dependent on where you use it. In a &lt;strong&gt;method&lt;/strong&gt;, like the &lt;code&gt;getStatus&lt;/code&gt; method, the &lt;code&gt;this&lt;/code&gt; keyword refers to &lt;em&gt;the object that the method belongs to&lt;/em&gt;. The method belongs to the &lt;code&gt;data&lt;/code&gt; object, so &lt;code&gt;this&lt;/code&gt; refers to the &lt;code&gt;data&lt;/code&gt; object. When we log &lt;code&gt;this.status&lt;/code&gt;, the &lt;code&gt;status&lt;/code&gt; property on the &lt;code&gt;data&lt;/code&gt; object gets logged, which is &lt;code&gt;"🥑"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;With the &lt;code&gt;call&lt;/code&gt; method, we can change the object to which the &lt;code&gt;this&lt;/code&gt; keyword refers. In &lt;strong&gt;functions&lt;/strong&gt;, the &lt;code&gt;this&lt;/code&gt; keyword refers to the &lt;em&gt;the object that the function belongs to&lt;/em&gt;. We declared the &lt;code&gt;setTimeout&lt;/code&gt; function on the &lt;em&gt;global object&lt;/em&gt;, so within the &lt;code&gt;setTimeout&lt;/code&gt; function, the &lt;code&gt;this&lt;/code&gt; keyword refers to the &lt;em&gt;global object&lt;/em&gt;. On the global object, there is a variable called &lt;em&gt;status&lt;/em&gt; with the value of &lt;code&gt;"😎"&lt;/code&gt;. When logging &lt;code&gt;this.status&lt;/code&gt;, &lt;code&gt;"😎"&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;83. What is the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  name: 'Lydia',
  age: 21,
};

let city = person.city;
city = 'Amsterdam';

console.log(person);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ name: "Lydia", age: 21 }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ name: "Lydia", age: 21, city: "Amsterdam" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ name: "Lydia", age: 21, city: undefined }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"Amsterdam"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;We set the variable &lt;code&gt;city&lt;/code&gt; equal to the value of the property called &lt;code&gt;city&lt;/code&gt; on the &lt;code&gt;person&lt;/code&gt; object. There is no property on this object called &lt;code&gt;city&lt;/code&gt;, so the variable &lt;code&gt;city&lt;/code&gt; has the value of &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Note that we are &lt;em&gt;not&lt;/em&gt; referencing the &lt;code&gt;person&lt;/code&gt; object itself! We simply set the variable &lt;code&gt;city&lt;/code&gt; equal to the current value of the &lt;code&gt;city&lt;/code&gt; property on the &lt;code&gt;person&lt;/code&gt; object.&lt;/p&gt; 
 &lt;p&gt;Then, we set &lt;code&gt;city&lt;/code&gt; equal to the string &lt;code&gt;"Amsterdam"&lt;/code&gt;. This doesn't change the person object: there is no reference to that object.&lt;/p&gt; 
 &lt;p&gt;When logging the &lt;code&gt;person&lt;/code&gt; object, the unmodified object gets returned.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;84. What is the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function checkAge(age) {
  if (age &amp;lt; 18) {
    const message = "Sorry, you're too young.";
  } else {
    const message = "Yay! You're old enough!";
  }

  return message;
}

console.log(checkAge(21));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"Sorry, you're too young."&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"Yay! You're old enough!"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Variables with the &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; keywords are &lt;em&gt;block-scoped&lt;/em&gt;. A block is anything between curly brackets (&lt;code&gt;{ }&lt;/code&gt;). In this case, the curly brackets of the if/else statements. You cannot reference a variable outside of the block it's declared in, a ReferenceError gets thrown.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;85. What kind of information would get logged?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;fetch('https://www.website.com/api/user/1')
  .then(res =&amp;gt; res.json())
  .then(res =&amp;gt; console.log(res));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: The result of the &lt;code&gt;fetch&lt;/code&gt; method.&lt;/li&gt; 
 &lt;li&gt;B: The result of the second invocation of the &lt;code&gt;fetch&lt;/code&gt; method.&lt;/li&gt; 
 &lt;li&gt;C: The result of the callback in the previous &lt;code&gt;.then()&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;D: It would always be undefined.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The value of &lt;code&gt;res&lt;/code&gt; in the second &lt;code&gt;.then&lt;/code&gt; is equal to the returned value of the previous &lt;code&gt;.then&lt;/code&gt;. You can keep chaining &lt;code&gt;.then&lt;/code&gt;s like this, where the value is passed to the next handler.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;86. Which option is a way to set &lt;code&gt;hasName&lt;/code&gt; equal to &lt;code&gt;true&lt;/code&gt;, provided you cannot pass &lt;code&gt;true&lt;/code&gt; as an argument?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function getName(name) {
  const hasName = //
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;!!name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;new Boolean(name)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;name.length&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;With &lt;code&gt;!!name&lt;/code&gt;, we determine whether the value of &lt;code&gt;name&lt;/code&gt; is truthy or falsy. If the name is truthy, which we want to test for, &lt;code&gt;!name&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;!false&lt;/code&gt; (which is what &lt;code&gt;!!name&lt;/code&gt; practically is) returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;By setting &lt;code&gt;hasName&lt;/code&gt; equal to &lt;code&gt;name&lt;/code&gt;, you set &lt;code&gt;hasName&lt;/code&gt; equal to whatever value you passed to the &lt;code&gt;getName&lt;/code&gt; function, not the boolean value &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;new Boolean(true)&lt;/code&gt; returns an object wrapper, not the boolean value itself.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;name.length&lt;/code&gt; returns the length of the passed argument, not whether it's &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;87. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log('I want pizza'[0]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"""&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"I"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;In order to get a character at a specific index of a string, you can use bracket notation. The first character in the string has index 0, and so on. In this case, we want to get the element with index 0, the character &lt;code&gt;"I'&lt;/code&gt;, which gets logged.&lt;/p&gt; 
 &lt;p&gt;Note that this method is not supported in IE7 and below. In that case, use &lt;code&gt;.charAt()&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;88. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function sum(num1, num2 = num1) {
  console.log(num1 + num2);
}

sum(10);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;20&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;You can set a default parameter's value equal to another parameter of the function, as long as they've been defined &lt;em&gt;before&lt;/em&gt; the default parameter. We pass the value &lt;code&gt;10&lt;/code&gt; to the &lt;code&gt;sum&lt;/code&gt; function. If the &lt;code&gt;sum&lt;/code&gt; function only receives 1 argument, it means that the value for &lt;code&gt;num2&lt;/code&gt; is not passed, and the value of &lt;code&gt;num1&lt;/code&gt; is equal to the passed value &lt;code&gt;10&lt;/code&gt; in this case. The default value of &lt;code&gt;num2&lt;/code&gt; is the value of &lt;code&gt;num1&lt;/code&gt;, which is &lt;code&gt;10&lt;/code&gt;. &lt;code&gt;num1 + num2&lt;/code&gt; returns &lt;code&gt;20&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;If you're trying to set a default parameter's value equal to a parameter that is defined &lt;em&gt;after&lt;/em&gt; (to the right), the parameter's value hasn't been initialized yet, which will throw an error.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;89. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// module.js
export default () =&amp;gt; 'Hello world';
export const name = 'Lydia';

// index.js
import * as data from './module';

console.log(data);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ default: function default(), name: "Lydia" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ default: function default() }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ default: "Hello world", name: "Lydia" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: Global object of &lt;code&gt;module.js&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;import * as name&lt;/code&gt; syntax, we import &lt;em&gt;all exports&lt;/em&gt; from the &lt;code&gt;module.js&lt;/code&gt; file into the &lt;code&gt;index.js&lt;/code&gt; file as a new object called &lt;code&gt;data&lt;/code&gt; is created. In the &lt;code&gt;module.js&lt;/code&gt; file, there are two exports: the default export, and a named export. The default export is a function that returns the string &lt;code&gt;"Hello World"&lt;/code&gt;, and the named export is a variable called &lt;code&gt;name&lt;/code&gt; which has the value of the string &lt;code&gt;"Lydia"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;data&lt;/code&gt; object has a &lt;code&gt;default&lt;/code&gt; property for the default export, other properties have the names of the named exports and their corresponding values.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;90. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Person {
  constructor(name) {
    this.name = name;
  }
}

const member = new Person('John');
console.log(typeof member);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"class"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"function"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;"object"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"string"&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Classes are syntactical sugar for function constructors. The equivalent of the &lt;code&gt;Person&lt;/code&gt; class as a function constructor would be:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;function Person(name) {
  this.name = name;
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Calling a function constructor with &lt;code&gt;new&lt;/code&gt; results in the creation of an instance of &lt;code&gt;Person&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt; keyword returns &lt;code&gt;"object"&lt;/code&gt; for an instance. &lt;code&gt;typeof member&lt;/code&gt; returns &lt;code&gt;"object"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;91. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let newList = [1, 2, 3].push(4);

console.log(newList.push(5));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[1, 2, 3, 5]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Error&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;.push&lt;/code&gt; method returns the &lt;em&gt;new length&lt;/em&gt; of the array, not the array itself! By setting &lt;code&gt;newList&lt;/code&gt; equal to &lt;code&gt;[1, 2, 3].push(4)&lt;/code&gt;, we set &lt;code&gt;newList&lt;/code&gt; equal to the new length of the array: &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then, we try to use the &lt;code&gt;.push&lt;/code&gt; method on &lt;code&gt;newList&lt;/code&gt;. Since &lt;code&gt;newList&lt;/code&gt; is the numerical value &lt;code&gt;4&lt;/code&gt;, we cannot use the &lt;code&gt;.push&lt;/code&gt; method: a TypeError is thrown.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;92. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function giveLydiaPizza() {
  return 'Here is pizza!';
}

const giveLydiaChocolate = () =&amp;gt;
  "Here's chocolate... now go hit the gym already.";

console.log(giveLydiaPizza.prototype);
console.log(giveLydiaChocolate.prototype);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ constructor: ...}&lt;/code&gt; &lt;code&gt;{ constructor: ...}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{}&lt;/code&gt; &lt;code&gt;{ constructor: ...}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ constructor: ...}&lt;/code&gt; &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;{ constructor: ...}&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;Regular functions, such as the &lt;code&gt;giveLydiaPizza&lt;/code&gt; function, have a &lt;code&gt;prototype&lt;/code&gt; property, which is an object (prototype object) with a &lt;code&gt;constructor&lt;/code&gt; property. Arrow functions however, such as the &lt;code&gt;giveLydiaChocolate&lt;/code&gt; function, do not have this &lt;code&gt;prototype&lt;/code&gt; property. &lt;code&gt;undefined&lt;/code&gt; gets returned when trying to access the &lt;code&gt;prototype&lt;/code&gt; property using &lt;code&gt;giveLydiaChocolate.prototype&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;93. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  name: 'Lydia',
  age: 21,
};

for (const [x, y] of Object.entries(person)) {
  console.log(x, y);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;name&lt;/code&gt; &lt;code&gt;Lydia&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; &lt;code&gt;21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;["name", "Lydia"]&lt;/code&gt; and &lt;code&gt;["age", 21]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;["name", "age"]&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Error&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;Object.entries(person)&lt;/code&gt; returns an array of nested arrays, containing the keys and objects:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;[ [ 'name', 'Lydia' ], [ 'age', 21 ] ]&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;Using the &lt;code&gt;for-of&lt;/code&gt; loop, we can iterate over each element in the array, the subarrays in this case. We can destructure the subarrays instantly in the for-of loop, using &lt;code&gt;const [x, y]&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; is equal to the first element in the subarray, &lt;code&gt;y&lt;/code&gt; is equal to the second element in the subarray.&lt;/p&gt; 
 &lt;p&gt;The first subarray is &lt;code&gt;[ "name", "Lydia" ]&lt;/code&gt;, with &lt;code&gt;x&lt;/code&gt; equal to &lt;code&gt;"name"&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; equal to &lt;code&gt;"Lydia"&lt;/code&gt;, which get logged. The second subarray is &lt;code&gt;[ "age", 21 ]&lt;/code&gt;, with &lt;code&gt;x&lt;/code&gt; equal to &lt;code&gt;"age"&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; equal to &lt;code&gt;21&lt;/code&gt;, which get logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;94. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function getItems(fruitList, ...args, favoriteFruit) {
  return [...fruitList, ...args, favoriteFruit]
}

getItems(["banana", "apple"], "pear", "orange")
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;["banana", "apple", "pear", "orange"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[["banana", "apple"], "pear", "orange"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;["banana", "apple", ["pear"], "orange"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;...args&lt;/code&gt; is a rest parameter. The rest parameter's value is an array containing all remaining arguments, &lt;strong&gt;and can only be the last parameter&lt;/strong&gt;! In this example, the rest parameter was the second parameter. This is not possible, and will throw a syntax error.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;function getItems(fruitList, favoriteFruit, ...args) {
  return [...fruitList, ...args, favoriteFruit];
}

getItems(['banana', 'apple'], 'pear', 'orange');
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The above example works. This returns the array &lt;code&gt;[ 'banana', 'apple', 'orange', 'pear' ]&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;95. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function nums(a, b) {
  if (a &amp;gt; b) console.log('a is bigger');
  else console.log('b is bigger');
  return
  a + b;
}

console.log(nums(4, 2));
console.log(nums(1, 2));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;a is bigger&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt; and &lt;code&gt;b is bigger&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;a is bigger&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;b is bigger&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;In JavaScript, we don't &lt;em&gt;have&lt;/em&gt; to write the semicolon (&lt;code&gt;;&lt;/code&gt;) explicitly, however the JavaScript engine still adds them after statements. This is called &lt;strong&gt;Automatic Semicolon Insertion&lt;/strong&gt;. A statement can for example be variables, or keywords like &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, etc.&lt;/p&gt; 
 &lt;p&gt;Here, we wrote a &lt;code&gt;return&lt;/code&gt; statement, and another value &lt;code&gt;a + b&lt;/code&gt; on a &lt;em&gt;new line&lt;/em&gt;. However, since it's a new line, the engine doesn't know that it's actually the value that we wanted to return. Instead, it automatically added a semicolon after &lt;code&gt;return&lt;/code&gt;. You could see this as:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;return;
a + b;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This means that &lt;code&gt;a + b&lt;/code&gt; is never reached, since a function stops running after the &lt;code&gt;return&lt;/code&gt; keyword. If no value gets returned, like here, the function returns &lt;code&gt;undefined&lt;/code&gt;. Note that there is no automatic insertion after &lt;code&gt;if/else&lt;/code&gt; statements!&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;96. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Person {
  constructor() {
    this.name = 'Lydia';
  }
}

Person = class AnotherPerson {
  constructor() {
    this.name = 'Sarah';
  }
};

const member = new Person();
console.log(member.name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"Lydia"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"Sarah"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Error: cannot redeclare Person&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;We can set classes equal to other classes/function constructors. In this case, we set &lt;code&gt;Person&lt;/code&gt; equal to &lt;code&gt;AnotherPerson&lt;/code&gt;. The name on this constructor is &lt;code&gt;Sarah&lt;/code&gt;, so the name property on the new &lt;code&gt;Person&lt;/code&gt; instance &lt;code&gt;member&lt;/code&gt; is &lt;code&gt;"Sarah"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;97. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const info = {
  [Symbol('a')]: 'b',
};

console.log(info);
console.log(Object.keys(info));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{Symbol('a'): 'b'}&lt;/code&gt; and &lt;code&gt;["{Symbol('a')"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ a: "b" }&lt;/code&gt; and &lt;code&gt;["a"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;{Symbol('a'): 'b'}&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;A Symbol is not &lt;em&gt;enumerable&lt;/em&gt;. The Object.keys method returns all &lt;em&gt;enumerable&lt;/em&gt; key properties on an object. The Symbol won't be visible, and an empty array is returned. When logging the entire object, all properties will be visible, even non-enumerable ones.&lt;/p&gt; 
 &lt;p&gt;This is one of the many qualities of a symbol: besides representing an entirely unique value (which prevents accidental name collision on objects, for example when working with 2 libraries that want to add properties to the same object), you can also "hide" properties on objects this way (although not entirely. You can still access symbols using the &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt; method).&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;98. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const getList = ([x, ...y]) =&amp;gt; [x, y]
const getUser = user =&amp;gt; { name: user.name, age: user.age }

const list = [1, 2, 3, 4]
const user = { name: "Lydia", age: 21 }

console.log(getList(list))
console.log(getUser(user))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[1, [2, 3, 4]]&lt;/code&gt; and &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[1, [2, 3, 4]]&lt;/code&gt; and &lt;code&gt;{ name: "Lydia", age: 21 }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt; and &lt;code&gt;{ name: "Lydia", age: 21 }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Error&lt;/code&gt; and &lt;code&gt;{ name: "Lydia", age: 21 }&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;getList&lt;/code&gt; function receives an array as its argument. Between the parentheses of the &lt;code&gt;getList&lt;/code&gt; function, we destructure this array right away. You could see this as:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;[x, ...y] = [1, 2, 3, 4]&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;With the rest parameter &lt;code&gt;...y&lt;/code&gt;, we put all "remaining" arguments in an array. The remaining arguments are &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; in this case. The value of &lt;code&gt;y&lt;/code&gt; is an array, containing all the rest parameters. The value of &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;1&lt;/code&gt; in this case, so when we log &lt;code&gt;[x, y]&lt;/code&gt;, &lt;code&gt;[1, [2, 3, 4]]&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;getUser&lt;/code&gt; function receives an object. With arrow functions, we don't &lt;em&gt;have&lt;/em&gt; to write curly brackets if we just return one value. However, if you want to instantly return an &lt;em&gt;object&lt;/em&gt; from an arrow function, you have to write it between parentheses, otherwise everything between the two braces will be interpreted as a block statement. In this case the code between the braces is not a valid JavaScript code, so a &lt;code&gt;SyntaxError&lt;/code&gt; gets thrown.&lt;/p&gt; 
 &lt;p&gt;The following function would have returned an object:&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;const getUser = user =&amp;gt; ({ name: user.name, age: user.age })&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;99. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const name = 'Lydia';

console.log(name());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The variable &lt;code&gt;name&lt;/code&gt; holds the value of a string, which is not a function, and thus cannot be invoked.&lt;/p&gt; 
 &lt;p&gt;TypeErrors get thrown when a value is not of the expected type. JavaScript expected &lt;code&gt;name&lt;/code&gt; to be a function since we're trying to invoke it. It was a string however, so a TypeError gets thrown: name is not a function!&lt;/p&gt; 
 &lt;p&gt;SyntaxErrors get thrown when you've written something that isn't valid JavaScript, for example when you've written the word &lt;code&gt;return&lt;/code&gt; as &lt;code&gt;retrun&lt;/code&gt;. ReferenceErrors get thrown when JavaScript isn't able to find a reference to a value that you're trying to access.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;100. What's the value of output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// 🎉✨ This is my 100th question! ✨🎉

const output = `${[] &amp;amp;&amp;amp; 'Im'}possible!
You should${'' &amp;amp;&amp;amp; `n't`} see a therapist after so much JavaScript lol`;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;possible! You should see a therapist after so much JavaScript lol&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Impossible! You should see a therapist after so much JavaScript lol&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;possible! You shouldn't see a therapist after so much JavaScript lol&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Impossible! You shouldn't see a therapist after so much JavaScript lol&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;[]&lt;/code&gt; is a truthy value. With the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator, the right-hand value will be returned if the left-hand value is a truthy value. In this case, the left-hand value &lt;code&gt;[]&lt;/code&gt; is a truthy value, so &lt;code&gt;"Im'&lt;/code&gt; gets returned.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;""&lt;/code&gt; is a falsy value. If the left-hand value is falsy, nothing gets returned. &lt;code&gt;n't&lt;/code&gt; doesn't get returned.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;101. What's the value of output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const one = false || {} || null;
const two = null || false || '';
const three = [] || 0 || true;

console.log(one, two, three);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;null&lt;/code&gt; &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;null&lt;/code&gt; &lt;code&gt;""&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{}&lt;/code&gt; &lt;code&gt;""&lt;/code&gt; &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;null&lt;/code&gt; &lt;code&gt;null&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;||&lt;/code&gt; operator, we can return the first truthy operand. If all values are falsy, the last operand gets returned.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;(false || {} || null)&lt;/code&gt;: the empty object &lt;code&gt;{}&lt;/code&gt; is a truthy value. This is the first (and only) truthy value, which gets returned. &lt;code&gt;one&lt;/code&gt; is equal to &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;(null || false || "")&lt;/code&gt;: all operands are falsy values. This means that the last operand, &lt;code&gt;""&lt;/code&gt; gets returned. &lt;code&gt;two&lt;/code&gt; is equal to &lt;code&gt;""&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;([] || 0 || "")&lt;/code&gt;: the empty array&lt;code&gt;[]&lt;/code&gt; is a truthy value. This is the first truthy value, which gets returned. &lt;code&gt;three&lt;/code&gt; is equal to &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;102. What's the value of output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const myPromise = () =&amp;gt; Promise.resolve('I have resolved!');

function firstFunction() {
  myPromise().then(res =&amp;gt; console.log(res));
  console.log('second');
}

async function secondFunction() {
  console.log(await myPromise());
  console.log('second');
}

firstFunction();
secondFunction();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;I have resolved!&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; and &lt;code&gt;I have resolved!&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;I have resolved!&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;I have resolved!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;I have resolved!&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;I have resolved!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;I have resolved!&lt;/code&gt; and &lt;code&gt;I have resolved!&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;With a promise, we basically say &lt;em&gt;I want to execute this function, but I'll put it aside for now while it's running since this might take a while. Only when a certain value is resolved (or rejected), and when the call stack is empty, I want to use this value.&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;We can get this value with both &lt;code&gt;.then&lt;/code&gt; and the &lt;code&gt;await&lt;/code&gt; keywords in an &lt;code&gt;async&lt;/code&gt; function. Although we can get a promise's value with both &lt;code&gt;.then&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;, they work a bit differently.&lt;/p&gt; 
 &lt;p&gt;In the &lt;code&gt;firstFunction&lt;/code&gt;, we (sort of) put the myPromise function aside while it was running, but continued running the other code, which is &lt;code&gt;console.log('second')&lt;/code&gt; in this case. Then, the function resolved with the string &lt;code&gt;I have resolved&lt;/code&gt;, which then got logged after it saw that the callstack was empty.&lt;/p&gt; 
 &lt;p&gt;With the await keyword in &lt;code&gt;secondFunction&lt;/code&gt;, we literally pause the execution of an async function until the value has been resolved before moving to the next line.&lt;/p&gt; 
 &lt;p&gt;This means that it waited for the &lt;code&gt;myPromise&lt;/code&gt; to resolve with the value &lt;code&gt;I have resolved&lt;/code&gt;, and only once that happened, we moved to the next line: &lt;code&gt;second&lt;/code&gt; got logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;103. What's the value of output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const set = new Set();

set.add(1);
set.add('Lydia');
set.add({ name: 'Lydia' });

for (let item of set) {
  console.log(item + 2);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;Lydia2&lt;/code&gt;, &lt;code&gt;[object Object]2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;"12"&lt;/code&gt;, &lt;code&gt;Lydia2&lt;/code&gt;, &lt;code&gt;[object Object]2&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator is not only used for adding numerical values, but we can also use it to concatenate strings. Whenever the JavaScript engine sees that one or more values are not a number, it coerces the number into a string.&lt;/p&gt; 
 &lt;p&gt;The first one is &lt;code&gt;1&lt;/code&gt;, which is a numerical value. &lt;code&gt;1 + 2&lt;/code&gt; returns the number 3.&lt;/p&gt; 
 &lt;p&gt;However, the second one is a string &lt;code&gt;"Lydia"&lt;/code&gt;. &lt;code&gt;"Lydia"&lt;/code&gt; is a string and &lt;code&gt;2&lt;/code&gt; is a number: &lt;code&gt;2&lt;/code&gt; gets coerced into a string. &lt;code&gt;"Lydia"&lt;/code&gt; and &lt;code&gt;"2"&lt;/code&gt; get concatenated, which results in the string &lt;code&gt;"Lydia2"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;{ name: "Lydia" }&lt;/code&gt; is an object. Neither a number nor an object is a string, so it stringifies both. Whenever we stringify a regular object, it becomes &lt;code&gt;"[object Object]"&lt;/code&gt;. &lt;code&gt;"[object Object]"&lt;/code&gt; concatenated with &lt;code&gt;"2"&lt;/code&gt; becomes &lt;code&gt;"[object Object]2"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;104. What's its value?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;Promise.resolve(5);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;5&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Promise {&amp;lt;pending&amp;gt;: 5}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Promise&amp;nbsp;{&amp;lt;fulfilled&amp;gt;: 5}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Error&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;We can pass any type of value we want to &lt;code&gt;Promise.resolve&lt;/code&gt;, either a promise or a non-promise. The method itself returns a promise with the resolved value (&lt;code&gt;&amp;lt;fulfilled&amp;gt;&lt;/code&gt;). If you pass a regular function, it'll be a resolved promise with a regular value. If you pass a promise, it'll be a resolved promise with the resolved value of that passed promise.&lt;/p&gt; 
 &lt;p&gt;In this case, we just passed the numerical value &lt;code&gt;5&lt;/code&gt;. It returns a resolved promise with the value &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;105. What's its value?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function compareMembers(person1, person2 = person) {
  if (person1 !== person2) {
    console.log('Not the same!');
  } else {
    console.log('They are the same!');
  }
}

const person = { name: 'Lydia' };

compareMembers(person);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Not the same!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;They are the same!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;Objects are passed by reference. When we check objects for strict equality (&lt;code&gt;===&lt;/code&gt;), we're comparing their references.&lt;/p&gt; 
 &lt;p&gt;We set the default value for &lt;code&gt;person2&lt;/code&gt; equal to the &lt;code&gt;person&lt;/code&gt; object, and passed the &lt;code&gt;person&lt;/code&gt; object as the value for &lt;code&gt;person1&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;This means that both values have a reference to the same spot in memory, thus they are equal.&lt;/p&gt; 
 &lt;p&gt;The code block in the &lt;code&gt;else&lt;/code&gt; statement gets run, and &lt;code&gt;They are the same!&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;106. What's its value?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const colorConfig = {
  red: true,
  blue: false,
  green: true,
  black: true,
  yellow: false,
};

const colors = ['pink', 'red', 'blue'];

console.log(colorConfig.colors[1]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;In JavaScript, we have two ways to access properties on an object: bracket notation, or dot notation. In this example, we use dot notation (&lt;code&gt;colorConfig.colors&lt;/code&gt;) instead of bracket notation (&lt;code&gt;colorConfig["colors"]&lt;/code&gt;).&lt;/p&gt; 
 &lt;p&gt;With dot notation, JavaScript tries to find the property on the object with that exact name. In this example, JavaScript tries to find a property called &lt;code&gt;colors&lt;/code&gt; on the &lt;code&gt;colorConfig&lt;/code&gt; object. There is no property called &lt;code&gt;colors&lt;/code&gt;, so this returns &lt;code&gt;undefined&lt;/code&gt;. Then, we try to access the value of the first element by using &lt;code&gt;[1]&lt;/code&gt;. We cannot do this on a value that's &lt;code&gt;undefined&lt;/code&gt;, so it throws a &lt;code&gt;TypeError&lt;/code&gt;: &lt;code&gt;Cannot read property '1' of undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket &lt;code&gt;[&lt;/code&gt; and keeps going until it finds the closing bracket &lt;code&gt;]&lt;/code&gt;. Only then, it will evaluate the statement. If we would've used &lt;code&gt;colorConfig[colors[1]]&lt;/code&gt;, it would have returned the value of the &lt;code&gt;red&lt;/code&gt; property on the &lt;code&gt;colorConfig&lt;/code&gt; object.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;107. What's its value?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log('❤️' === '❤️');
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;Under the hood, emojis are unicodes. The unicodes for the heart emoji is &lt;code&gt;"U+2764 U+FE0F"&lt;/code&gt;. These are always the same for the same emojis, so we're comparing two equal strings to each other, which returns true.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;108. Which of these methods modifies the original array?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const emojis = ['✨', '🥑', '😍'];

emojis.map(x =&amp;gt; x + '✨');
emojis.filter(x =&amp;gt; x !== '🥑');
emojis.find(x =&amp;gt; x !== '🥑');
emojis.reduce((acc, cur) =&amp;gt; acc + '✨');
emojis.slice(1, 2, '✨');
emojis.splice(1, 2, '✨');
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;All of them&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;map&lt;/code&gt; &lt;code&gt;reduce&lt;/code&gt; &lt;code&gt;slice&lt;/code&gt; &lt;code&gt;splice&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;map&lt;/code&gt; &lt;code&gt;slice&lt;/code&gt; &lt;code&gt;splice&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;splice&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;With &lt;code&gt;splice&lt;/code&gt; method, we modify the original array by deleting, replacing or adding elements. In this case, we removed 2 items from index 1 (we removed &lt;code&gt;'🥑'&lt;/code&gt; and &lt;code&gt;'😍'&lt;/code&gt;) and added the ✨ emoji instead.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;slice&lt;/code&gt; return a new array, &lt;code&gt;find&lt;/code&gt; returns an element, and &lt;code&gt;reduce&lt;/code&gt; returns a reduced value.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;109. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const food = ['🍕', '🍫', '🥑', '🍔'];
const info = { favoriteFood: food[0] };

info.favoriteFood = '🍝';

console.log(food);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;['🍕', '🍫', '🥑', '🍔']&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;['🍝', '🍫', '🥑', '🍔']&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;['🍝', '🍕', '🍫', '🥑', '🍔']&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;We set the value of the &lt;code&gt;favoriteFood&lt;/code&gt; property on the &lt;code&gt;info&lt;/code&gt; object equal to the string with the pizza emoji, &lt;code&gt;'🍕'&lt;/code&gt;. A string is a primitive data type. In JavaScript, primitive data types don't interact by reference.&lt;/p&gt; 
 &lt;p&gt;In JavaScript, primitive data types (everything that's not an object) interact by &lt;em&gt;value&lt;/em&gt;. In this case, we set the value of the &lt;code&gt;favoriteFood&lt;/code&gt; property on the &lt;code&gt;info&lt;/code&gt; object equal to the value of the first element in the &lt;code&gt;food&lt;/code&gt; array, the string with the pizza emoji in this case (&lt;code&gt;'🍕'&lt;/code&gt;). A string is a primitive data type, and interact by value (see my &lt;a href="https://www.theavocoder.com/complete-javascript/2018/12/21/by-value-vs-by-reference"&gt;blogpost&lt;/a&gt; if you're interested in learning more)&lt;/p&gt; 
 &lt;p&gt;Then, we change the value of the &lt;code&gt;favoriteFood&lt;/code&gt; property on the &lt;code&gt;info&lt;/code&gt; object. The &lt;code&gt;food&lt;/code&gt; array hasn't changed, since the value of &lt;code&gt;favoriteFood&lt;/code&gt; was merely a &lt;em&gt;copy&lt;/em&gt; of the value of the first element in the array, and doesn't have a reference to the same spot in memory as the element on &lt;code&gt;food[0]&lt;/code&gt;. When we log food, it's still the original array, &lt;code&gt;['🍕', '🍫', '🥑', '🍔']&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;110. What does this method do?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;JSON.parse();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: Parses JSON to a JavaScript value&lt;/li&gt; 
 &lt;li&gt;B: Parses a JavaScript object to JSON&lt;/li&gt; 
 &lt;li&gt;C: Parses any JavaScript value to JSON&lt;/li&gt; 
 &lt;li&gt;D: Parses JSON to a JavaScript object only&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;JSON.parse()&lt;/code&gt; method, we can parse JSON string to a JavaScript value.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;// Stringifying a number into valid JSON, then parsing the JSON string to a JavaScript value:
const jsonNumber = JSON.stringify(4); // '4'
JSON.parse(jsonNumber); // 4

// Stringifying an array value into valid JSON, then parsing the JSON string to a JavaScript value:
const jsonArray = JSON.stringify([1, 2, 3]); // '[1, 2, 3]'
JSON.parse(jsonArray); // [1, 2, 3]

// Stringifying an object  into valid JSON, then parsing the JSON string to a JavaScript value:
const jsonArray = JSON.stringify({ name: 'Lydia' }); // '{"name":"Lydia"}'
JSON.parse(jsonArray); // { name: 'Lydia' }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;111. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let name = 'Lydia';

function getName() {
  console.log(name);
  let name = 'Sarah';
}

getName();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: Lydia&lt;/li&gt; 
 &lt;li&gt;B: Sarah&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;Each function has its own &lt;em&gt;execution context&lt;/em&gt; (or &lt;em&gt;scope&lt;/em&gt;). The &lt;code&gt;getName&lt;/code&gt; function first looks within its own context (scope) to see if it contains the variable &lt;code&gt;name&lt;/code&gt; we're trying to access. In this case, the &lt;code&gt;getName&lt;/code&gt; function contains its own &lt;code&gt;name&lt;/code&gt; variable: we declare the variable &lt;code&gt;name&lt;/code&gt; with the &lt;code&gt;let&lt;/code&gt; keyword, and with the value of &lt;code&gt;'Sarah'&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Variables with the &lt;code&gt;let&lt;/code&gt; keyword (and &lt;code&gt;const&lt;/code&gt;) are hoisted, but unlike &lt;code&gt;var&lt;/code&gt;, don't get &lt;i&gt;initialized&lt;/i&gt;. They are not accessible before the line we declare (initialize) them. This is called the "temporal dead zone". When we try to access the variables before they are declared, JavaScript throws a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;If we wouldn't have declared the &lt;code&gt;name&lt;/code&gt; variable within the &lt;code&gt;getName&lt;/code&gt; function, the javascript engine would've looked down the &lt;em&gt;scope chain&lt;/em&gt;. The outer scope has a variable called &lt;code&gt;name&lt;/code&gt; with the value of &lt;code&gt;Lydia&lt;/code&gt;. In that case, it would've logged &lt;code&gt;Lydia&lt;/code&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;let name = 'Lydia';

function getName() {
  console.log(name);
}

getName(); // Lydia
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;112. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function* generatorOne() {
  yield ['a', 'b', 'c'];
}

function* generatorTwo() {
  yield* ['a', 'b', 'c'];
}

const one = generatorOne();
const two = generatorTwo();

console.log(one.next().value);
console.log(two.next().value);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;yield&lt;/code&gt; keyword, we &lt;code&gt;yield&lt;/code&gt; values in a generator function. With the &lt;code&gt;yield*&lt;/code&gt; keyword, we can yield values from another generator function, or iterable object (for example an array).&lt;/p&gt; 
 &lt;p&gt;In &lt;code&gt;generatorOne&lt;/code&gt;, we yield the entire array &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; using the &lt;code&gt;yield&lt;/code&gt; keyword. The value of &lt;code&gt;value&lt;/code&gt; property on the object returned by the &lt;code&gt;next&lt;/code&gt; method on &lt;code&gt;one&lt;/code&gt; (&lt;code&gt;one.next().value&lt;/code&gt;) is equal to the entire array &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(one.next().value); // ['a', 'b', 'c']
console.log(one.next().value); // undefined
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;In &lt;code&gt;generatorTwo&lt;/code&gt;, we use the &lt;code&gt;yield*&lt;/code&gt; keyword. This means that the first yielded value of &lt;code&gt;two&lt;/code&gt;, is equal to the first yielded value in the iterator. The iterator is the array &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;. The first yielded value is &lt;code&gt;a&lt;/code&gt;, so the first time we call &lt;code&gt;two.next().value&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is returned.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(two.next().value); // 'a'
console.log(two.next().value); // 'b'
console.log(two.next().value); // 'c'
console.log(two.next().value); // undefined
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;113. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(`${(x =&amp;gt; x)('I love')} to program`);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;I love to program&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;undefined to program&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;${(x =&amp;gt; x)('I love') to program&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;Expressions within template literals are evaluated first. This means that the string will contain the returned value of the expression, the immediately invoked function &lt;code&gt;(x =&amp;gt; x)('I love')&lt;/code&gt; in this case. We pass the value &lt;code&gt;'I love'&lt;/code&gt; as an argument to the &lt;code&gt;x =&amp;gt; x&lt;/code&gt; arrow function. &lt;code&gt;x&lt;/code&gt; is equal to &lt;code&gt;'I love'&lt;/code&gt;, which gets returned. This results in &lt;code&gt;I love to program&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;114. What will happen?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let config = {
  alert: setInterval(() =&amp;gt; {
    console.log('Alert!');
  }, 1000),
};

config = null;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: The &lt;code&gt;setInterval&lt;/code&gt; callback won't be invoked&lt;/li&gt; 
 &lt;li&gt;B: The &lt;code&gt;setInterval&lt;/code&gt; callback gets invoked once&lt;/li&gt; 
 &lt;li&gt;C: The &lt;code&gt;setInterval&lt;/code&gt; callback will still be called every second&lt;/li&gt; 
 &lt;li&gt;D: We never invoked &lt;code&gt;config.alert()&lt;/code&gt;, config is &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Normally when we set objects equal to &lt;code&gt;null&lt;/code&gt;, those objects get &lt;em&gt;garbage collected&lt;/em&gt; as there is no reference anymore to that object. However, since the callback function within &lt;code&gt;setInterval&lt;/code&gt; is an arrow function (thus bound to the &lt;code&gt;config&lt;/code&gt; object), the callback function still holds a reference to the &lt;code&gt;config&lt;/code&gt; object. As long as there is a reference, the object won't get garbage collected. Since this is an interval, setting &lt;code&gt;config&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt;-ing &lt;code&gt;config.alert&lt;/code&gt; won't garbage-collect the interval, so the interval will still be called. It should be cleared with &lt;code&gt;clearInterval(config.alert)&lt;/code&gt; to remove it from memory. Since it was not cleared, the &lt;code&gt;setInterval&lt;/code&gt; callback function will still get invoked every 1000ms (1s).&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;115. Which method(s) will return the value &lt;code&gt;'Hello world!'&lt;/code&gt;?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const myMap = new Map();
const myFunc = () =&amp;gt; 'greeting';

myMap.set(myFunc, 'Hello world!');

//1
myMap.get('greeting');
//2
myMap.get(myFunc);
//3
myMap.get(() =&amp;gt; 'greeting');
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: 1&lt;/li&gt; 
 &lt;li&gt;B: 2&lt;/li&gt; 
 &lt;li&gt;C: 2 and 3&lt;/li&gt; 
 &lt;li&gt;D: All of them&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;When adding a key/value pair using the &lt;code&gt;set&lt;/code&gt; method, the key will be the value of the first argument passed to the &lt;code&gt;set&lt;/code&gt; function, and the value will be the second argument passed to the &lt;code&gt;set&lt;/code&gt; function. The key is the &lt;em&gt;function&lt;/em&gt; &lt;code&gt;() =&amp;gt; 'greeting'&lt;/code&gt; in this case, and the value &lt;code&gt;'Hello world'&lt;/code&gt;. &lt;code&gt;myMap&lt;/code&gt; is now &lt;code&gt;{ () =&amp;gt; 'greeting' =&amp;gt; 'Hello world!' }&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;1 is wrong, since the key is not &lt;code&gt;'greeting'&lt;/code&gt; but &lt;code&gt;() =&amp;gt; 'greeting'&lt;/code&gt;. 3 is wrong, since we're creating a new function by passing it as a parameter to the &lt;code&gt;get&lt;/code&gt; method. Object interacts by &lt;em&gt;reference&lt;/em&gt;. Functions are objects, which is why two functions are never strictly equal, even if they are identical: they have a reference to a different spot in memory.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;116. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  name: 'Lydia',
  age: 21,
};

const changeAge = (x = { ...person }) =&amp;gt; (x.age += 1);
const changeAgeAndName = (x = { ...person }) =&amp;gt; {
  x.age += 1;
  x.name = 'Sarah';
};

changeAge(person);
changeAgeAndName();

console.log(person);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{name: "Sarah", age: 22}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{name: "Sarah", age: 23}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{name: "Lydia", age: 22}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;{name: "Lydia", age: 23}&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Both the &lt;code&gt;changeAge&lt;/code&gt; and &lt;code&gt;changeAgeAndName&lt;/code&gt; functions have a default parameter, namely a &lt;em&gt;newly&lt;/em&gt; created object &lt;code&gt;{ ...person }&lt;/code&gt;. This object has copies of all the key/values in the &lt;code&gt;person&lt;/code&gt; object.&lt;/p&gt; 
 &lt;p&gt;First, we invoke the &lt;code&gt;changeAge&lt;/code&gt; function and pass the &lt;code&gt;person&lt;/code&gt; object as its argument. This function increases the value of the &lt;code&gt;age&lt;/code&gt; property by 1. &lt;code&gt;person&lt;/code&gt; is now &lt;code&gt;{ name: "Lydia", age: 22 }&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then, we invoke the &lt;code&gt;changeAgeAndName&lt;/code&gt; function, however we don't pass a parameter. Instead, the value of &lt;code&gt;x&lt;/code&gt; is equal to a &lt;em&gt;new&lt;/em&gt; object: &lt;code&gt;{ ...person }&lt;/code&gt;. Since it's a new object, it doesn't affect the values of the properties on the &lt;code&gt;person&lt;/code&gt; object. &lt;code&gt;person&lt;/code&gt; is still equal to &lt;code&gt;{ name: "Lydia", age: 22 }&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;117. Which of the following options will return &lt;code&gt;6&lt;/code&gt;?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function sumValues(x, y, z) {
  return x + y + z;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;sumValues([...1, 2, 3])&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;sumValues([...[1, 2, 3]])&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;sumValues(...[1, 2, 3])&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;sumValues([1, 2, 3])&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;With the spread operator &lt;code&gt;...&lt;/code&gt;, we can &lt;em&gt;spread&lt;/em&gt; iterables to individual elements. The &lt;code&gt;sumValues&lt;/code&gt; function receives three arguments: &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;. &lt;code&gt;...[1, 2, 3]&lt;/code&gt; will result in &lt;code&gt;1, 2, 3&lt;/code&gt;, which we pass to the &lt;code&gt;sumValues&lt;/code&gt; function.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;118. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let num = 1;
const list = ['🥳', '🤠', '🥰', '🤪'];

console.log(list[(num += 1)]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;🤠&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;🥰&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;+=&lt;/code&gt; operator, we're incrementing the value of &lt;code&gt;num&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt;. &lt;code&gt;num&lt;/code&gt; had the initial value &lt;code&gt;1&lt;/code&gt;, so &lt;code&gt;1 + 1&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;. The item on the second index in the &lt;code&gt;list&lt;/code&gt; array is 🥰, &lt;code&gt;console.log(list[2])&lt;/code&gt; prints 🥰.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;119. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  firstName: 'Lydia',
  lastName: 'Hallie',
  pet: {
    name: 'Mara',
    breed: 'Dutch Tulip Hound',
  },
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  },
};

console.log(person.pet?.name);
console.log(person.pet?.family?.name);
console.log(person.getFullName?.());
console.log(member.getLastName?.());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Mara&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;Lydia Hallie&lt;/code&gt; &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Mara&lt;/code&gt; &lt;code&gt;null&lt;/code&gt; &lt;code&gt;Lydia Hallie&lt;/code&gt; &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;null&lt;/code&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;code&gt;null&lt;/code&gt; &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;With the optional chaining operator &lt;code&gt;?.&lt;/code&gt;, we no longer have to explicitly check whether the deeper nested values are valid or not. If we're trying to access a property on an &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; value (&lt;em&gt;nullish&lt;/em&gt;), the expression short-circuits and returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;person.pet?.name&lt;/code&gt;: &lt;code&gt;person&lt;/code&gt; has a property named &lt;code&gt;pet&lt;/code&gt;: &lt;code&gt;person.pet&lt;/code&gt; is not nullish. It has a property called &lt;code&gt;name&lt;/code&gt;, and returns &lt;code&gt;Mara&lt;/code&gt;. &lt;code&gt;person.pet?.family?.name&lt;/code&gt;: &lt;code&gt;person&lt;/code&gt; has a property named &lt;code&gt;pet&lt;/code&gt;: &lt;code&gt;person.pet&lt;/code&gt; is not nullish. &lt;code&gt;pet&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have a property called &lt;code&gt;family&lt;/code&gt;, &lt;code&gt;person.pet.family&lt;/code&gt; is nullish. The expression returns &lt;code&gt;undefined&lt;/code&gt;. &lt;code&gt;person.getFullName?.()&lt;/code&gt;: &lt;code&gt;person&lt;/code&gt; has a property named &lt;code&gt;getFullName&lt;/code&gt;: &lt;code&gt;person.getFullName()&lt;/code&gt; is not nullish and can get invoked, which returns &lt;code&gt;Lydia Hallie&lt;/code&gt;. &lt;code&gt;member.getLastName?.()&lt;/code&gt;: variable &lt;code&gt;member&lt;/code&gt; is non-existent therefore a &lt;code&gt;ReferenceError&lt;/code&gt; gets thrown!&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;120. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const groceries = ['banana', 'apple', 'peanuts'];

if (groceries.indexOf('banana')) {
  console.log('We have to buy bananas!');
} else {
  console.log(`We don't have to buy bananas!`);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: We have to buy bananas!&lt;/li&gt; 
 &lt;li&gt;B: We don't have to buy bananas&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;We passed the condition &lt;code&gt;groceries.indexOf("banana")&lt;/code&gt; to the if-statement. &lt;code&gt;groceries.indexOf("banana")&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;, which is a falsy value. Since the condition in the if-statement is falsy, the code in the &lt;code&gt;else&lt;/code&gt; block runs, and &lt;code&gt;We don't have to buy bananas!&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;121. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const config = {
  languages: [],
  set language(lang) {
    return this.languages.push(lang);
  },
};

console.log(config.language);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;function language(lang) { this.languages.push(lang }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;language&lt;/code&gt; method is a &lt;code&gt;setter&lt;/code&gt;. Setters don't hold an actual value, their purpose is to &lt;em&gt;modify&lt;/em&gt; properties. When calling a &lt;code&gt;setter&lt;/code&gt; method, &lt;code&gt;undefined&lt;/code&gt; gets returned.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;122. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const name = 'Lydia Hallie';

console.log(!typeof name === 'object');
console.log(!typeof name === 'string');
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;typeof name&lt;/code&gt; returns &lt;code&gt;"string"&lt;/code&gt;. The string &lt;code&gt;"string"&lt;/code&gt; is a truthy value, so &lt;code&gt;!typeof name&lt;/code&gt; returns the boolean value &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;false === "object"&lt;/code&gt; and &lt;code&gt;false === "string"&lt;/code&gt; both return&lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;(If we wanted to check whether the type was (un)equal to a certain type, we should've written &lt;code&gt;!==&lt;/code&gt; instead of &lt;code&gt;!typeof&lt;/code&gt;)&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;123. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const add = x =&amp;gt; y =&amp;gt; z =&amp;gt; {
  console.log(x, y, z);
  return x + y + z;
};

add(4)(5)(6);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;4&lt;/code&gt; &lt;code&gt;5&lt;/code&gt; &lt;code&gt;6&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;6&lt;/code&gt; &lt;code&gt;5&lt;/code&gt; &lt;code&gt;4&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;4&lt;/code&gt; &lt;code&gt;function&lt;/code&gt; &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;6&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;add&lt;/code&gt; function returns an arrow function, which returns an arrow function, which returns an arrow function (still with me?). The first function receives an argument &lt;code&gt;x&lt;/code&gt; with the value of &lt;code&gt;4&lt;/code&gt;. We invoke the second function, which receives an argument &lt;code&gt;y&lt;/code&gt; with the value &lt;code&gt;5&lt;/code&gt;. Then we invoke the third function, which receives an argument &lt;code&gt;z&lt;/code&gt; with the value &lt;code&gt;6&lt;/code&gt;. When we're trying to access the value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; within the last arrow function, the JS engine goes up the scope chain in order to find the values for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; accordingly. This returns &lt;code&gt;4&lt;/code&gt; &lt;code&gt;5&lt;/code&gt; &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;124. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;async function* range(start, end) {
  for (let i = start; i &amp;lt;= end; i++) {
    yield Promise.resolve(i);
  }
}

(async () =&amp;gt; {
  const gen = range(1, 3);
  for await (const item of gen) {
    console.log(item);
  }
})();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Promise {1}&lt;/code&gt; &lt;code&gt;Promise {2}&lt;/code&gt; &lt;code&gt;Promise {3}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Promise {&amp;lt;pending&amp;gt;}&lt;/code&gt; &lt;code&gt;Promise {&amp;lt;pending&amp;gt;}&lt;/code&gt; &lt;code&gt;Promise {&amp;lt;pending&amp;gt;}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The generator function &lt;code&gt;range&lt;/code&gt; returns an async object with promises for each item in the range we pass: &lt;code&gt;Promise{1}&lt;/code&gt;, &lt;code&gt;Promise{2}&lt;/code&gt;, &lt;code&gt;Promise{3}&lt;/code&gt;. We set the variable &lt;code&gt;gen&lt;/code&gt; equal to the async object, after which we loop over it using a &lt;code&gt;for await ... of&lt;/code&gt; loop. We set the variable &lt;code&gt;item&lt;/code&gt; equal to the returned Promise values: first &lt;code&gt;Promise{1}&lt;/code&gt;, then &lt;code&gt;Promise{2}&lt;/code&gt;, then &lt;code&gt;Promise{3}&lt;/code&gt;. Since we're &lt;em&gt;awaiting&lt;/em&gt; the value of &lt;code&gt;item&lt;/code&gt;, the resolved promise, the resolved &lt;em&gt;values&lt;/em&gt; of the promises get returned: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, then &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;125. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const myFunc = ({ x, y, z }) =&amp;gt; {
  console.log(x, y, z);
};

myFunc(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{1: 1}&lt;/code&gt; &lt;code&gt;{2: 2}&lt;/code&gt; &lt;code&gt;{3: 3}&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ 1: undefined }&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;myFunc&lt;/code&gt; expects an object with properties &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; as its argument. Since we're only passing three separate numeric values (1, 2, 3) instead of one object with properties &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; ({x: 1, y: 2, z: 3}), &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; have their default value of &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;126. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function getFine(speed, amount) {
  const formattedSpeed = new Intl.NumberFormat('en-US', {
    style: 'unit',
    unit: 'mile-per-hour'
  }).format(speed);

  const formattedAmount = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);

  return `The driver drove ${formattedSpeed} and has to pay ${formattedAmount}`;
}

console.log(getFine(130, 300))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: The driver drove 130 and has to pay 300&lt;/li&gt; 
 &lt;li&gt;B: The driver drove 130 mph and has to pay $300.00&lt;/li&gt; 
 &lt;li&gt;C: The driver drove undefined and has to pay undefined&lt;/li&gt; 
 &lt;li&gt;D: The driver drove 130.00 and has to pay 300.00&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;Intl.NumberFormat&lt;/code&gt; method, we can format numeric values to any locale. We format the numeric value &lt;code&gt;130&lt;/code&gt; to the &lt;code&gt;en-US&lt;/code&gt; locale as a &lt;code&gt;unit&lt;/code&gt; in &lt;code&gt;mile-per-hour&lt;/code&gt;, which results in &lt;code&gt;130 mph&lt;/code&gt;. The numeric value &lt;code&gt;300&lt;/code&gt; to the &lt;code&gt;en-US&lt;/code&gt; locale as a &lt;code&gt;currency&lt;/code&gt; in &lt;code&gt;USD&lt;/code&gt; results in &lt;code&gt;$300.00&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;127. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const spookyItems = ['👻', '🎃', '🕸'];
({ item: spookyItems[3] } = { item: '💀' });

console.log(spookyItems);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;["👻", "🎃", "🕸"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;["👻", "🎃", "🕸", "💀"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;["👻", "🎃", "🕸", { item: "💀" }]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;["👻", "🎃", "🕸", "[object Object]"]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;By destructuring objects, we can unpack values from the right-hand object, and assign the unpacked value to the value of the same property name on the left-hand object. In this case, we're assigning the value "💀" to &lt;code&gt;spookyItems[3]&lt;/code&gt;. This means that we're modifying the &lt;code&gt;spookyItems&lt;/code&gt; array, we're adding the "💀" to it. When logging &lt;code&gt;spookyItems&lt;/code&gt;, &lt;code&gt;["👻", "🎃", "🕸", "💀"]&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;128. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const name = 'Lydia Hallie';
const age = 21;

console.log(Number.isNaN(name));
console.log(Number.isNaN(age));

console.log(isNaN(name));
console.log(isNaN(age));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;Number.isNaN&lt;/code&gt; method, you can check if the value you pass is a &lt;em&gt;numeric value&lt;/em&gt; and equal to &lt;code&gt;NaN&lt;/code&gt;. &lt;code&gt;name&lt;/code&gt; is not a numeric value, so &lt;code&gt;Number.isNaN(name)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;age&lt;/code&gt; is a numeric value, but is not equal to &lt;code&gt;NaN&lt;/code&gt;, so &lt;code&gt;Number.isNaN(age)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;With the &lt;code&gt;isNaN&lt;/code&gt; method, you can check if the value you pass is not a number. &lt;code&gt;name&lt;/code&gt; is not a number, so &lt;code&gt;isNaN(name)&lt;/code&gt; returns true. &lt;code&gt;age&lt;/code&gt; is a number, so &lt;code&gt;isNaN(age)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;129. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const randomValue = 21;

function getInfo() {
  console.log(typeof randomValue);
  const randomValue = 'Lydia Hallie';
}

getInfo();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;"number"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;"string"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;Variables declared with the &lt;code&gt;const&lt;/code&gt; keyword are not referenceable before their initialization: this is called the &lt;em&gt;temporal dead zone&lt;/em&gt;. In the &lt;code&gt;getInfo&lt;/code&gt; function, the variable &lt;code&gt;randomValue&lt;/code&gt; is scoped in the functional scope of &lt;code&gt;getInfo&lt;/code&gt;. On the line where we want to log the value of &lt;code&gt;typeof randomValue&lt;/code&gt;, the variable &lt;code&gt;randomValue&lt;/code&gt; isn't initialized yet: a &lt;code&gt;ReferenceError&lt;/code&gt; gets thrown! The engine didn't go down the scope chain since we declared the variable &lt;code&gt;randomValue&lt;/code&gt; in the &lt;code&gt;getInfo&lt;/code&gt; function.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;130. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const myPromise = Promise.resolve('Woah some cool data');

(async () =&amp;gt; {
  try {
    console.log(await myPromise);
  } catch {
    throw new Error(`Oops didn't work`);
  } finally {
    console.log('Oh finally!');
  }
})();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Woah some cool data&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Oh finally!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Woah some cool data&lt;/code&gt; &lt;code&gt;Oh finally!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Oops didn't work&lt;/code&gt; &lt;code&gt;Oh finally!&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;In the &lt;code&gt;try&lt;/code&gt; block, we're logging the awaited value of the &lt;code&gt;myPromise&lt;/code&gt; variable: &lt;code&gt;"Woah some cool data"&lt;/code&gt;. Since no errors were thrown in the &lt;code&gt;try&lt;/code&gt; block, the code in the &lt;code&gt;catch&lt;/code&gt; block doesn't run. The code in the &lt;code&gt;finally&lt;/code&gt; block &lt;em&gt;always&lt;/em&gt; runs, &lt;code&gt;"Oh finally!"&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;131. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const emojis = ['🥑', ['✨', '✨', ['🍕', '🍕']]];

console.log(emojis.flat(1));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;['🥑', ['✨', '✨', ['🍕', '🍕']]]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;['🥑', '✨', '✨', ['🍕', '🍕']]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;['🥑', ['✨', '✨', '🍕', '🍕']]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;['🥑', '✨', '✨', '🍕', '🍕']&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;With the &lt;code&gt;flat&lt;/code&gt; method, we can create a new, flattened array. The depth of the flattened array depends on the value that we pass. In this case, we passed the value &lt;code&gt;1&lt;/code&gt; (which we didn't have to, that's the default value), meaning that only the arrays on the first depth will be concatenated. &lt;code&gt;['🥑']&lt;/code&gt; and &lt;code&gt;['✨', '✨', ['🍕', '🍕']]&lt;/code&gt; in this case. Concatenating these two arrays results in &lt;code&gt;['🥑', '✨', '✨', ['🍕', '🍕']]&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;132. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Counter {
  constructor() {
    this.count = 0;
  }

  increment() {
    this.count++;
  }
}

const counterOne = new Counter();
counterOne.increment();
counterOne.increment();

const counterTwo = counterOne;
counterTwo.increment();

console.log(counterOne.count);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;&lt;code&gt;counterOne&lt;/code&gt; is an instance of the &lt;code&gt;Counter&lt;/code&gt; class. The counter class contains a &lt;code&gt;count&lt;/code&gt; property on its constructor, and an &lt;code&gt;increment&lt;/code&gt; method. First, we invoked the &lt;code&gt;increment&lt;/code&gt; method twice by calling &lt;code&gt;counterOne.increment()&lt;/code&gt;. Currently, &lt;code&gt;counterOne.count&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/KxLlTm9.png" width="400"&gt; 
 &lt;p&gt;Then, we create a new variable &lt;code&gt;counterTwo&lt;/code&gt;, and set it equal to &lt;code&gt;counterOne&lt;/code&gt;. Since objects interact by reference, we're just creating a new reference to the same spot in memory that &lt;code&gt;counterOne&lt;/code&gt; points to. Since it has the same spot in memory, any changes made to the object that &lt;code&gt;counterTwo&lt;/code&gt; has a reference to, also apply to &lt;code&gt;counterOne&lt;/code&gt;. Currently, &lt;code&gt;counterTwo.count&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;We invoke &lt;code&gt;counterTwo.increment()&lt;/code&gt;, which sets &lt;code&gt;count&lt;/code&gt; to &lt;code&gt;3&lt;/code&gt;. Then, we log the count on &lt;code&gt;counterOne&lt;/code&gt;, which logs &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt; 
 &lt;img src="https://i.imgur.com/BNBHXmc.png" width="400"&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;133. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const myPromise = Promise.resolve(Promise.resolve('Promise'));

function funcOne() {
  setTimeout(() =&amp;gt; console.log('Timeout 1!'), 0);
  myPromise.then(res =&amp;gt; res).then(res =&amp;gt; console.log(`${res} 1!`));
  console.log('Last line 1!');
}

async function funcTwo() {
  const res = await myPromise;
  console.log(`${res} 2!`)
  setTimeout(() =&amp;gt; console.log('Timeout 2!'), 0);
  console.log('Last line 2!');
}

funcOne();
funcTwo();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Promise 1! Last line 1! Promise 2! Last line 2! Timeout 1! Timeout 2!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Last line 1! Timeout 1! Promise 1! Last line 2! Promise2! Timeout 2! &lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Last line 1! Promise 2! Last line 2! Promise 1! Timeout 1! Timeout 2!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Timeout 1! Promise 1! Last line 1! Promise 2! Timeout 2! Last line 2!&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;First, we invoke &lt;code&gt;funcOne&lt;/code&gt;. On the first line of &lt;code&gt;funcOne&lt;/code&gt;, we call the &lt;em&gt;asynchronous&lt;/em&gt; &lt;code&gt;setTimeout&lt;/code&gt; function, from which the callback is sent to the Web API. (see my article on the event loop &lt;a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif"&gt;here&lt;/a&gt;.)&lt;/p&gt; 
 &lt;p&gt;Then we call the &lt;code&gt;myPromise&lt;/code&gt; promise, which is an &lt;em&gt;asynchronous&lt;/em&gt; operation. Pay attention, that now only the first then clause was added to the microtask queue.&lt;/p&gt; 
 &lt;p&gt;Both the promise and the timeout are asynchronous operations, the function keeps on running while it's busy completing the promise and handling the &lt;code&gt;setTimeout&lt;/code&gt; callback. This means that &lt;code&gt;Last line 1!&lt;/code&gt; gets logged first, since this is not an asynchonous operation.&lt;/p&gt; 
 &lt;p&gt;Since the callstack is not empty yet, the &lt;code&gt;setTimeout&lt;/code&gt; function and promise in &lt;code&gt;funcOne&lt;/code&gt; cannot get added to the callstack yet.&lt;/p&gt; 
 &lt;p&gt;In &lt;code&gt;funcTwo&lt;/code&gt;, the variable &lt;code&gt;res&lt;/code&gt; gets &lt;code&gt;Promise&lt;/code&gt; because &lt;code&gt;Promise.resolve(Promise.resolve('Promise'))&lt;/code&gt; is equivalent to &lt;code&gt;Promise.resolve('Promise')&lt;/code&gt; since resolving a promise just resolves it's value. The &lt;code&gt;await&lt;/code&gt; in this line stops the execution of the function until it receives the resolution of the promise and then keeps on running synchronously until completion, so &lt;code&gt;Promise 2!&lt;/code&gt; and then &lt;code&gt;Last line 2!&lt;/code&gt; are logged and the &lt;code&gt;setTimeout&lt;/code&gt; is sent to the Web API. If the first then clause in &lt;code&gt;funcOne&lt;/code&gt; had its own log statement, it would be printed before &lt;code&gt;Promise 2!&lt;/code&gt;. Howewer, it executed silently and put the second then clause in microtask queue. So, the second clause will be printed after &lt;code&gt;Promise 2!&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then the call stack is empty. Promises are &lt;em&gt;microtasks&lt;/em&gt; so they are resolved first when the call stack is empty so &lt;code&gt;Promise 1!&lt;/code&gt; gets to be logged.&lt;/p&gt; 
 &lt;p&gt;Now, since &lt;code&gt;funcTwo&lt;/code&gt; popped off the call stack, the call stack is empty. The callbacks waiting in the queue (&lt;code&gt;() =&amp;gt; console.log("Timeout 1!")&lt;/code&gt; from &lt;code&gt;funcOne&lt;/code&gt;, and &lt;code&gt;() =&amp;gt; console.log("Timeout 2!")&lt;/code&gt; from &lt;code&gt;funcTwo&lt;/code&gt;) get added to the call stack one by one. The first callback logs &lt;code&gt;Timeout 1!&lt;/code&gt;, and gets popped off the stack. Then, the second callback logs &lt;code&gt;Timeout 2!&lt;/code&gt;, and gets popped off the stack.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;134. How can we invoke &lt;code&gt;sum&lt;/code&gt; in &lt;code&gt;sum.js&lt;/code&gt; from &lt;code&gt;index.js?&lt;/code&gt;&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;// sum.js
export default function sum(x) {
  return x + x;
}

// index.js
import * as sum from './sum';
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;sum(4)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;sum.sum(4)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;sum.default(4)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: Default aren't imported with &lt;code&gt;*&lt;/code&gt;, only named exports&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;With the asterisk &lt;code&gt;*&lt;/code&gt;, we import all exported values from that file, both default and named. If we had the following file:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;// info.js
export const name = 'Lydia';
export const age = 21;
export default 'I love JavaScript';

// index.js
import * as info from './info';
console.log(info);
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The following would get logged:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;{
  default: "I love JavaScript",
  name: "Lydia",
  age: 21
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For the &lt;code&gt;sum&lt;/code&gt; example, it means that the imported value &lt;code&gt;sum&lt;/code&gt; looks like this:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-javascript"&gt;{ default: function sum(x) { return x + x } }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;We can invoke this function, by calling &lt;code&gt;sum.default&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;135. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const handler = {
  set: () =&amp;gt; console.log('Added a new property!'),
  get: () =&amp;gt; console.log('Accessed a property!'),
};

const person = new Proxy({}, handler);

person.name = 'Lydia';
person.name;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;Added a new property!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Accessed a property!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;Added a new property!&lt;/code&gt; &lt;code&gt;Accessed a property!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: Nothing gets logged&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;With a Proxy object, we can add custom behavior to an object that we pass to it as the second argument. In this case, we pass the &lt;code&gt;handler&lt;/code&gt; object which contains two properties: &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt;. &lt;code&gt;set&lt;/code&gt; gets invoked whenever we &lt;em&gt;set&lt;/em&gt; property values, and &lt;code&gt;get&lt;/code&gt; gets invoked whenever we &lt;em&gt;get&lt;/em&gt; (access) property values.&lt;/p&gt; 
 &lt;p&gt;The first argument is an empty object &lt;code&gt;{}&lt;/code&gt;, which is the value of &lt;code&gt;person&lt;/code&gt;. To this object, the custom behavior specified in the &lt;code&gt;handler&lt;/code&gt; object gets added. If we add a property to the &lt;code&gt;person&lt;/code&gt; object, &lt;code&gt;set&lt;/code&gt; will get invoked. If we access a property on the &lt;code&gt;person&lt;/code&gt; object, &lt;code&gt;get&lt;/code&gt; gets invoked.&lt;/p&gt; 
 &lt;p&gt;First, we added a new property &lt;code&gt;name&lt;/code&gt; to the proxy object (&lt;code&gt;person.name = "Lydia"&lt;/code&gt;). &lt;code&gt;set&lt;/code&gt; gets invoked, and logs &lt;code&gt;"Added a new property!"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then, we access a property value on the proxy object, and the &lt;code&gt;get&lt;/code&gt; property on the handler object is invoked. &lt;code&gt;"Accessed a property!"&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;136. Which of the following will modify the &lt;code&gt;person&lt;/code&gt; object?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = { name: 'Lydia Hallie' };

Object.seal(person);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;person.name = "Evan Bacon"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;person.age = 21&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;delete person.name&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;Object.assign(person, { age: 21 })&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;With &lt;code&gt;Object.seal&lt;/code&gt; we can prevent new properties from being &lt;em&gt;added&lt;/em&gt;, or existing properties to be &lt;em&gt;removed&lt;/em&gt;.&lt;/p&gt; 
 &lt;p&gt;However, you can still modify the value of existing properties.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;137. Which of the following will modify the &lt;code&gt;person&lt;/code&gt; object?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  name: 'Lydia Hallie',
  address: {
    street: '100 Main St',
  },
};

Object.freeze(person);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;person.name = "Evan Bacon"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;delete person.address&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;person.address.street = "101 Main St"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;person.pet = { name: "Mara" }&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;Object.freeze&lt;/code&gt; method &lt;em&gt;freezes&lt;/em&gt; an object. No properties can be added, modified, or removed.&lt;/p&gt; 
 &lt;p&gt;However, it only &lt;em&gt;shallowly&lt;/em&gt; freezes the object, meaning that only &lt;em&gt;direct&lt;/em&gt; properties on the object are frozen. If the property is another object, like &lt;code&gt;address&lt;/code&gt; in this case, the properties on that object aren't frozen, and can be modified.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;138. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const add = x =&amp;gt; x + x;

function myFunc(num = 2, value = add(num)) {
  console.log(num, value);
}

myFunc();
myFunc(3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;2&lt;/code&gt; &lt;code&gt;4&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; &lt;code&gt;6&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;2&lt;/code&gt; &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;2&lt;/code&gt; &lt;code&gt;Error&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; &lt;code&gt;6&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;2&lt;/code&gt; &lt;code&gt;4&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; &lt;code&gt;Error&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;First, we invoked &lt;code&gt;myFunc()&lt;/code&gt; without passing any arguments. Since we didn't pass arguments, &lt;code&gt;num&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; got their default values: num is &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt; is the returned value of the function &lt;code&gt;add&lt;/code&gt;. To the &lt;code&gt;add&lt;/code&gt; function, we pass &lt;code&gt;num&lt;/code&gt; as an argument, which had the value of &lt;code&gt;2&lt;/code&gt;. &lt;code&gt;add&lt;/code&gt; returns &lt;code&gt;4&lt;/code&gt;, which is the value of &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then, we invoked &lt;code&gt;myFunc(3)&lt;/code&gt; and passed the value &lt;code&gt;3&lt;/code&gt; as the value for the argument &lt;code&gt;num&lt;/code&gt;. We didn't pass an argument for &lt;code&gt;value&lt;/code&gt;. Since we didn't pass a value for the &lt;code&gt;value&lt;/code&gt; argument, it got the default value: the returned value of the &lt;code&gt;add&lt;/code&gt; function. To &lt;code&gt;add&lt;/code&gt;, we pass &lt;code&gt;num&lt;/code&gt;, which has the value of &lt;code&gt;3&lt;/code&gt;. &lt;code&gt;add&lt;/code&gt; returns &lt;code&gt;6&lt;/code&gt;, which is the value of &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;139. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Counter {
  #number = 10

  increment() {
    this.#number++
  }

  getNum() {
    return this.#number
  }
}

const counter = new Counter()
counter.increment()

console.log(counter.#number)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;10&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;11&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;In ES2020, we can add private variables in classes by using the &lt;code&gt;#&lt;/code&gt;. We cannot access these variables outside of the class. When we try to log &lt;code&gt;counter.#number&lt;/code&gt;, a SyntaxError gets thrown: we cannot access it outside the &lt;code&gt;Counter&lt;/code&gt; class!&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;140. What's missing?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const teams = [
  { name: 'Team 1', members: ['Paul', 'Lisa'] },
  { name: 'Team 2', members: ['Laura', 'Tim'] },
];

function* getMembers(members) {
  for (let i = 0; i &amp;lt; members.length; i++) {
    yield members[i];
  }
}

function* getTeams(teams) {
  for (let i = 0; i &amp;lt; teams.length; i++) {
    // ✨ SOMETHING IS MISSING HERE ✨
  }
}

const obj = getTeams(teams);
obj.next(); // { value: "Paul", done: false }
obj.next(); // { value: "Lisa", done: false }
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;yield getMembers(teams[i].members)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;yield* getMembers(teams[i].members)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;return getMembers(teams[i].members)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;return yield getMembers(teams[i].members)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;In order to iterate over the &lt;code&gt;members&lt;/code&gt; in each element in the &lt;code&gt;teams&lt;/code&gt; array, we need to pass &lt;code&gt;teams[i].members&lt;/code&gt; to the &lt;code&gt;getMembers&lt;/code&gt; generator function. The generator function returns a generator object. In order to iterate over each element in this generator object, we need to use &lt;code&gt;yield*&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;If we would've written &lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;return yield&lt;/code&gt;, or &lt;code&gt;return&lt;/code&gt;, the entire generator function would've gotten returned the first time we called the &lt;code&gt;next&lt;/code&gt; method.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;141. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  name: 'Lydia Hallie',
  hobbies: ['coding'],
};

function addHobby(hobby, hobbies = person.hobbies) {
  hobbies.push(hobby);
  return hobbies;
}

addHobby('running', []);
addHobby('dancing');
addHobby('baking', person.hobbies);

console.log(person.hobbies);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;["coding"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;["coding", "dancing"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;["coding", "dancing", "baking"]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;["coding", "running", "dancing", "baking"]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;addHobby&lt;/code&gt; function receives two arguments, &lt;code&gt;hobby&lt;/code&gt; and &lt;code&gt;hobbies&lt;/code&gt; with the default value of the &lt;code&gt;hobbies&lt;/code&gt; array on the &lt;code&gt;person&lt;/code&gt; object.&lt;/p&gt; 
 &lt;p&gt;First, we invoke the &lt;code&gt;addHobby&lt;/code&gt; function, and pass &lt;code&gt;"running"&lt;/code&gt; as the value for &lt;code&gt;hobby&lt;/code&gt; and an empty array as the value for &lt;code&gt;hobbies&lt;/code&gt;. Since we pass an empty array as the value for &lt;code&gt;hobbies&lt;/code&gt;, &lt;code&gt;"running"&lt;/code&gt; gets added to this empty array.&lt;/p&gt; 
 &lt;p&gt;Then, we invoke the &lt;code&gt;addHobby&lt;/code&gt; function, and pass &lt;code&gt;"dancing"&lt;/code&gt; as the value for &lt;code&gt;hobby&lt;/code&gt;. We didn't pass a value for &lt;code&gt;hobbies&lt;/code&gt;, so it gets the default value, the &lt;code&gt;hobbies&lt;/code&gt; property on the &lt;code&gt;person&lt;/code&gt; object. We push the hobby &lt;code&gt;dancing&lt;/code&gt; to the &lt;code&gt;person.hobbies&lt;/code&gt; array.&lt;/p&gt; 
 &lt;p&gt;Last, we invoke the &lt;code&gt;addHobby&lt;/code&gt; function, and pass &lt;code&gt;"baking"&lt;/code&gt; as the value for &lt;code&gt;hobby&lt;/code&gt;, and the &lt;code&gt;person.hobbies&lt;/code&gt; array as the value for &lt;code&gt;hobbies&lt;/code&gt;. We push the hobby &lt;code&gt;baking&lt;/code&gt; to the &lt;code&gt;person.hobbies&lt;/code&gt; array.&lt;/p&gt; 
 &lt;p&gt;After pushing &lt;code&gt;dancing&lt;/code&gt; and &lt;code&gt;baking&lt;/code&gt;, the value of &lt;code&gt;person.hobbies&lt;/code&gt; is &lt;code&gt;["coding", "dancing", "baking"]&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;142. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Bird {
  constructor() {
    console.log("I'm a bird. 🦢");
  }
}

class Flamingo extends Bird {
  constructor() {
    console.log("I'm pink. 🌸");
    super();
  }
}

const pet = new Flamingo();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;I'm pink. 🌸&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;I'm pink. 🌸&lt;/code&gt; &lt;code&gt;I'm a bird. 🦢&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;I'm a bird. 🦢&lt;/code&gt; &lt;code&gt;I'm pink. 🌸&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: Nothing, we didn't call any method&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;We create the variable &lt;code&gt;pet&lt;/code&gt; which is an instance of the &lt;code&gt;Flamingo&lt;/code&gt; class. When we instantiate this instance, the &lt;code&gt;constructor&lt;/code&gt; on &lt;code&gt;Flamingo&lt;/code&gt; gets called. First, &lt;code&gt;"I'm pink. 🌸"&lt;/code&gt; gets logged, after which we call &lt;code&gt;super()&lt;/code&gt;. &lt;code&gt;super()&lt;/code&gt; calls the constructor of the parent class, &lt;code&gt;Bird&lt;/code&gt;. The constructor in &lt;code&gt;Bird&lt;/code&gt; gets called, and logs &lt;code&gt;"I'm a bird. 🦢"&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;143. Which of the options result(s) in an error?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const emojis = ['🎄', '🎅🏼', '🎁', '⭐'];

/* 1 */ emojis.push('🦌');
/* 2 */ emojis.splice(0, 2);
/* 3 */ emojis = [...emojis, '🥂'];
/* 4 */ emojis.length = 0;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: 1&lt;/li&gt; 
 &lt;li&gt;B: 1 and 2&lt;/li&gt; 
 &lt;li&gt;C: 3 and 4&lt;/li&gt; 
 &lt;li&gt;D: 3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;const&lt;/code&gt; keyword simply means we cannot &lt;em&gt;redeclare&lt;/em&gt; the value of that variable, it's &lt;em&gt;read-only&lt;/em&gt;. However, the value itself isn't immutable. The properties on the &lt;code&gt;emojis&lt;/code&gt; array can be modified, for example by pushing new values, splicing them, or setting the length of the array to 0.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;144. What do we need to add to the &lt;code&gt;person&lt;/code&gt; object to get &lt;code&gt;["Lydia Hallie", 21]&lt;/code&gt; as the output of &lt;code&gt;[...person]&lt;/code&gt;?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const person = {
  name: "Lydia Hallie",
  age: 21
}

[...person] // ["Lydia Hallie", 21]
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: Nothing, object are iterable by default&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;*[Symbol.iterator]() { for (let x in this) yield* this[x] }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;*[Symbol.iterator]() { yield* Object.values(this) }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;*[Symbol.iterator]() { for (let x in this) yield this }&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;Objects aren't iterable by default. An iterable is an iterable if the iterator protocol is present. We can add this manually by adding the iterator symbol &lt;code&gt;[Symbol.iterator]&lt;/code&gt;, which has to return a generator object, for example by making it a generator function &lt;code&gt;*[Symbol.iterator]() {}&lt;/code&gt;. This generator function has to yield the &lt;code&gt;Object.values&lt;/code&gt; of the &lt;code&gt;person&lt;/code&gt; object if we want it to return the array &lt;code&gt;["Lydia Hallie", 21]&lt;/code&gt;: &lt;code&gt;yield* Object.values(this)&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;145. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let count = 0;
const nums = [0, 1, 2, 3];

nums.forEach(num =&amp;gt; {
	if (num) count += 1
})

console.log(count)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: 1&lt;/li&gt; 
 &lt;li&gt;B: 2&lt;/li&gt; 
 &lt;li&gt;C: 3&lt;/li&gt; 
 &lt;li&gt;D: 4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;if&lt;/code&gt; condition within the &lt;code&gt;forEach&lt;/code&gt; loop checks whether the value of &lt;code&gt;num&lt;/code&gt; is truthy or falsy. Since the first number in the &lt;code&gt;nums&lt;/code&gt; array is &lt;code&gt;0&lt;/code&gt;, a falsy value, the &lt;code&gt;if&lt;/code&gt; statement's code block won't be executed. &lt;code&gt;count&lt;/code&gt; only gets incremented for the other 3 numbers in the &lt;code&gt;nums&lt;/code&gt; array, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;. Since &lt;code&gt;count&lt;/code&gt; gets incremented by &lt;code&gt;1&lt;/code&gt; 3 times, the value of &lt;code&gt;count&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;146. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;function getFruit(fruits) {
	console.log(fruits?.[1]?.[1])
}

getFruit([['🍊', '🍌'], ['🍍']])
getFruit()
getFruit([['🍍'], ['🍊', '🍌']])
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, 🍌&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, 🍌&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, 🍌&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, 🍌&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;?&lt;/code&gt; allows us to optionally access deeper nested properties within objects. We're trying to log the item on index &lt;code&gt;1&lt;/code&gt; within the subarray that's on index &lt;code&gt;1&lt;/code&gt; of the &lt;code&gt;fruits&lt;/code&gt; array. If the subarray on index &lt;code&gt;1&lt;/code&gt; in the &lt;code&gt;fruits&lt;/code&gt; array doesn't exist, it'll simply return &lt;code&gt;undefined&lt;/code&gt;. If the subarray on index &lt;code&gt;1&lt;/code&gt; in the &lt;code&gt;fruits&lt;/code&gt; array exists, but this subarray doesn't have an item on its &lt;code&gt;1&lt;/code&gt; index, it'll also return &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;First, we're trying to log the second item in the &lt;code&gt;['🍍']&lt;/code&gt; subarray of &lt;code&gt;[['🍊', '🍌'], ['🍍']]&lt;/code&gt;. This subarray only contains one item, which means there is no item on index &lt;code&gt;1&lt;/code&gt;, and returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Then, we're invoking the &lt;code&gt;getFruits&lt;/code&gt; function without passing a value as an argument, which means that &lt;code&gt;fruits&lt;/code&gt; has a value of &lt;code&gt;undefined&lt;/code&gt; by default. Since we're conditionally chaining the item on index &lt;code&gt;1&lt;/code&gt; of&lt;code&gt;fruits&lt;/code&gt;, it returns &lt;code&gt;undefined&lt;/code&gt; since this item on index &lt;code&gt;1&lt;/code&gt; does not exist.&lt;/p&gt; 
 &lt;p&gt;Lastly, we're trying to log the second item in the &lt;code&gt;['🍊', '🍌']&lt;/code&gt; subarray of &lt;code&gt;['🍍'], ['🍊', '🍌']&lt;/code&gt;. The item on index &lt;code&gt;1&lt;/code&gt; within this subarray is &lt;code&gt;🍌&lt;/code&gt;, which gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;147. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;class Calc {
	constructor() {
		this.count = 0 
	}

	increase() {
		this.count++
	}
}

const calc = new Calc()
new Calc().increase()

console.log(calc.count)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;We set the variable &lt;code&gt;calc&lt;/code&gt; equal to a new instance of the &lt;code&gt;Calc&lt;/code&gt; class. Then, we instantiate a new instance of &lt;code&gt;Calc&lt;/code&gt;, and invoke the &lt;code&gt;increase&lt;/code&gt; method on this instance. Since the count property is within the constructor of the &lt;code&gt;Calc&lt;/code&gt; class, the count property is not shared on the prototype of &lt;code&gt;Calc&lt;/code&gt;. This means that the value of count has not been updated for the instance calc points to, count is still &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;148. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
	email: "e@mail.com",
	password: "12345"
}

const updateUser = ({ email, password }) =&amp;gt; {
	if (email) {
		Object.assign(user, { email })
	}

	if (password) {
		user.password = password
	}

	return user
}

const updatedUser = updateUser({ email: "new@email.com" })

console.log(updatedUser === user)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;updateUser&lt;/code&gt; function updates the values of the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; properties on user, if their values are passed to the function, after which the function returns the &lt;code&gt;user&lt;/code&gt; object. The returned value of the &lt;code&gt;updateUser&lt;/code&gt; function is the &lt;code&gt;user&lt;/code&gt; object, which means that the value of updatedUser is a reference to the same &lt;code&gt;user&lt;/code&gt; object that &lt;code&gt;user&lt;/code&gt; points to. &lt;code&gt;updatedUser === user&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;149. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const fruit = ['🍌', '🍊', '🍎']

fruit.slice(0, 1)
fruit.splice(0, 1)
fruit.unshift('🍇')

console.log(fruit)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;['🍌', '🍊', '🍎']&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;['🍊', '🍎']&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;['🍇', '🍊', '🍎']&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;['🍇', '🍌', '🍊', '🍎']&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;First, we invoke the &lt;code&gt;slice&lt;/code&gt; method on the fruit array. The slice method does not modify the original array, but returns the value that it sliced off the array: the banana emoji. Then, we invoke the &lt;code&gt;splice&lt;/code&gt; method on the fruit array. The splice method does modify the original array, which means that the fruit array now consists of &lt;code&gt;['🍊', '🍎']&lt;/code&gt;. At last, we invoke the &lt;code&gt;unshift&lt;/code&gt; method on the &lt;code&gt;fruit&lt;/code&gt; array, which modifies the original array by adding the provided value, ‘🍇’ in this case, as the first element in the array. The fruit array now consists of &lt;code&gt;['🍇', '🍊', '🍎']&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;150. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const animals = {};
let dog = { emoji: '🐶' }
let cat = { emoji: '🐈' }

animals[dog] = { ...dog, name: "Mara" }
animals[cat] = { ...cat, name: "Sara" }

console.log(animals[dog])
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ emoji: "🐶", name: "Mara" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ emoji: "🐈", name: "Sara" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;Object keys are converted to strings.&lt;/p&gt; 
 &lt;p&gt;Since the value of &lt;code&gt;dog&lt;/code&gt; is an object, &lt;code&gt;animals[dog]&lt;/code&gt; actually means that we’re creating a new property called &lt;code&gt;"[object Object]"&lt;/code&gt; equal to the new object. &lt;code&gt;animals["[object Object]"]&lt;/code&gt; is now equal to &lt;code&gt;{ emoji: "🐶", name: "Mara"}&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;cat&lt;/code&gt; is also an object, which means that &lt;code&gt;animals[cat]&lt;/code&gt; actually means that we’re overwriting the value of &lt;code&gt;animals["[object Object]"]&lt;/code&gt; with the new cat properties.&lt;/p&gt; 
 &lt;p&gt;Logging &lt;code&gt;animals[dog]&lt;/code&gt;, or actually &lt;code&gt;animals["[object Object]"]&lt;/code&gt; since converting the &lt;code&gt;dog&lt;/code&gt; object to a string results &lt;code&gt;"[object Object]"&lt;/code&gt;, returns the &lt;code&gt;{ emoji: "🐈", name: "Sara" }&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;151. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const user = {
	email: "my@email.com",
	updateEmail: email =&amp;gt; {
		this.email = email
	}
}

user.updateEmail("new@email.com")
console.log(user.email)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;my@email.com&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;new@email.com&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: A&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;updateEmail&lt;/code&gt; function is an arrow function, and is not bound to the &lt;code&gt;user&lt;/code&gt; object. This means that the &lt;code&gt;this&lt;/code&gt; keyword is not referring to the &lt;code&gt;user&lt;/code&gt; object, but refers to the global scope in this case. The value of &lt;code&gt;email&lt;/code&gt; within the &lt;code&gt;user&lt;/code&gt; object does not get updated. When logging the value of &lt;code&gt;user.email&lt;/code&gt;, the original value of &lt;code&gt;my@email.com&lt;/code&gt; gets returned.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;152. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const promise1 = Promise.resolve('First')
const promise2 = Promise.resolve('Second')
const promise3 = Promise.reject('Third')
const promise4 = Promise.resolve('Fourth')

const runPromises = async () =&amp;gt; {
	const res1 = await Promise.all([promise1, promise2])
	const res2  = await Promise.all([promise3, promise4])
	return [res1, res2]
}

runPromises()
	.then(res =&amp;gt; console.log(res))
	.catch(err =&amp;gt; console.log(err))
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;[['First', 'Second'], ['Fourth']]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;[['First', 'Second'], ['Third', 'Fourth']]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;[['First', 'Second']]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;'Third'&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: D&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;Promise.all&lt;/code&gt; method runs the passed promises in parallel. If one promise fails, the &lt;code&gt;Promise.all&lt;/code&gt; method &lt;em&gt;rejects&lt;/em&gt; with the value of the rejected promise. In this case, &lt;code&gt;promise3&lt;/code&gt; is rejected with the value &lt;code&gt;"Third"&lt;/code&gt;. We’re catching the rejected value in the chained &lt;code&gt;catch&lt;/code&gt; method on the &lt;code&gt;runPromises&lt;/code&gt; invocation to catch any errors within the &lt;code&gt;runPromises&lt;/code&gt; function. Only &lt;code&gt;"Third"&lt;/code&gt; gets logged, since &lt;code&gt;promise3&lt;/code&gt; is rejected with this value.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;153. What should the value of &lt;code&gt;method&lt;/code&gt; be to log &lt;code&gt;{ name: "Lydia", age: 22 }&lt;/code&gt;?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const keys = ["name", "age"]
const values = ["Lydia", 22]

const method = /* ?? */
Object[method](keys.map((_, i) =&amp;gt; {
	return [keys[i], values[i]]
})) // { name: "Lydia", age: 22 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;entries&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;values&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;fromEntries&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;forEach&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The &lt;code&gt;fromEntries&lt;/code&gt; method turns a 2d array into an object. The first element in each subarray will be the key, and the second element in each subarray will be the value. In this case, we’re mapping over the &lt;code&gt;keys&lt;/code&gt; array, which returns an array that the first element is the item on the key array on the current index, and the second element is the item of the values array on the current index.&lt;/p&gt; 
 &lt;p&gt;This creates an array of subarrays containing the correct keys and values, which results in &lt;code&gt;{ name: "Lydia", age: 22 }&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;154. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;const createMember = ({ email, address = {}}) =&amp;gt; {
	const validEmail = /.+\@.+\..+/.test(email)
	if (!validEmail) throw new Error("Valid email pls")

	return {
		email,
		address: address ? address : null
	}
}

const member = createMember({ email: "my@email.com" })
console.log(member)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;{ email: "my@email.com", address: null }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;{ email: "my@email.com" }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;{ email: "my@email.com", address: {} }&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;{ email: "my@email.com", address: undefined }&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: C&lt;/h4&gt; 
 &lt;p&gt;The default value of &lt;code&gt;address&lt;/code&gt; is an empty object &lt;code&gt;{}&lt;/code&gt;. When we set the variable &lt;code&gt;member&lt;/code&gt; equal to the object returned by the &lt;code&gt;createMember&lt;/code&gt; function, we didn't pass a value for the address, which means that the value of the address is the default empty object &lt;code&gt;{}&lt;/code&gt;. An empty object is a truthy value, which means that the condition of the &lt;code&gt;address ? address : null&lt;/code&gt; conditional returns &lt;code&gt;true&lt;/code&gt;. The value of the address is the empty object &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;h6&gt;155. What's the output?&lt;/h6&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;let randomValue = { name: "Lydia" }
randomValue = 23

if (!typeof randomValue === "string") {
	console.log("It's not a string!")
} else {
	console.log("Yay it's a string!")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;A: &lt;code&gt;It's not a string!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;B: &lt;code&gt;Yay it's a string!&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;C: &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Answer&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt;Answer: B&lt;/h4&gt; 
 &lt;p&gt;The condition within the &lt;code&gt;if&lt;/code&gt; statement checks whether the value of &lt;code&gt;!typeof randomValue&lt;/code&gt; is equal to &lt;code&gt;"string"&lt;/code&gt;. The &lt;code&gt;!&lt;/code&gt; operator converts the value to a boolean value. If the value is truthy, the returned value will be &lt;code&gt;false&lt;/code&gt;, if the value is falsy, the returned value will be &lt;code&gt;true&lt;/code&gt;. In this case, the returned value of &lt;code&gt;typeof randomValue&lt;/code&gt; is the truthy value &lt;code&gt;"number"&lt;/code&gt;, meaning that the value of &lt;code&gt;!typeof randomValue&lt;/code&gt; is the boolean value &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;!typeof randomValue === "string"&lt;/code&gt; always returns false, since we're actually checking &lt;code&gt;false === "string"&lt;/code&gt;. Since the condition returned &lt;code&gt;false&lt;/code&gt;, the code block of the &lt;code&gt;else&lt;/code&gt; statement gets run, and &lt;code&gt;Yay it's a string!&lt;/code&gt; gets logged.&lt;/p&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/details&gt;</description>
    </item>
    
  </channel>
</rss>