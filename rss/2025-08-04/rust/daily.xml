<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Sun, 03 Aug 2025 01:36:08 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>YaLTeR/niri</title>
      <link>https://github.com/YaLTeR/niri</link>
      <description>&lt;p&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;niri&lt;/h1&gt; 
&lt;p align="center"&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://matrix.to/#/%23niri:matrix.org"&gt;&lt;img alt="Matrix" src="https://img.shields.io/badge/matrix-%23niri-blue?logo=matrix"&gt;&lt;/a&gt; &lt;a href="https://github.com/YaLTeR/niri/raw/main/LICENSE"&gt;&lt;img alt="GitHub License" src="https://img.shields.io/github/license/YaLTeR/niri"&gt;&lt;/a&gt; &lt;a href="https://github.com/YaLTeR/niri/releases"&gt;&lt;img alt="GitHub Release" src="https://img.shields.io/github/v/release/YaLTeR/niri?logo=github"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/YaLTeR/niri/wiki/Getting-Started"&gt;Getting Started&lt;/a&gt; | &lt;a href="https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction"&gt;Configuration&lt;/a&gt; | &lt;a href="https://github.com/YaLTeR/niri/discussions/325"&gt;Setup&amp;nbsp;Showcase&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/535e6530-2f44-4b84-a883-1240a3eee6e9" alt="niri with a few windows open"&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Windows are arranged in columns on an infinite strip going to the right. Opening a new window never causes existing windows to resize.&lt;/p&gt; 
&lt;p&gt;Every monitor has its own separate window strip. Windows can never "overflow" onto an adjacent monitor.&lt;/p&gt; 
&lt;p&gt;Workspaces are dynamic and arranged vertically. Every monitor has an independent set of workspaces, and there's always one empty workspace present all the way down.&lt;/p&gt; 
&lt;p&gt;The workspace arrangement is preserved across disconnecting and connecting monitors where it makes sense. When a monitor disconnects, its workspaces will move to another monitor, but upon reconnection they will move back to the original monitor.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built from the ground up for scrollable tiling&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YaLTeR/niri/wiki/Workspaces"&gt;Dynamic workspaces&lt;/a&gt; like in GNOME&lt;/li&gt; 
 &lt;li&gt;An &lt;a href="https://github.com/user-attachments/assets/379a5d1f-acdb-4c11-b36c-e85fd91f0995"&gt;Overview&lt;/a&gt; that zooms out workspaces and windows&lt;/li&gt; 
 &lt;li&gt;Built-in screenshot UI&lt;/li&gt; 
 &lt;li&gt;Monitor and window screencasting through xdg-desktop-portal-gnome 
  &lt;ul&gt; 
   &lt;li&gt;You can &lt;a href="https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules#block-out-from"&gt;block out&lt;/a&gt; sensitive windows from screencasts&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/YaLTeR/niri/wiki/Screencasting#dynamic-screencast-target"&gt;Dynamic cast target&lt;/a&gt; that can change what it shows on the go&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YaLTeR/niri/assets/1794388/946a910e-9bec-4cd1-a923-4a9421707515"&gt;Touchpad&lt;/a&gt; and &lt;a href="https://github.com/YaLTeR/niri/assets/1794388/8464e65d-4bf2-44fa-8c8e-5883355bd000"&gt;mouse&lt;/a&gt; gestures&lt;/li&gt; 
 &lt;li&gt;Group windows into &lt;a href="https://github.com/YaLTeR/niri/wiki/Tabs"&gt;tabs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Configurable layout: gaps, borders, struts, window sizes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YaLTeR/niri/wiki/Configuration:-Layout#gradients"&gt;Gradient borders&lt;/a&gt; with Oklab and Oklch support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YaLTeR/niri/assets/1794388/ce178da2-af9e-4c51-876f-8709c241d95e"&gt;Animations&lt;/a&gt; with support for &lt;a href="https://github.com/YaLTeR/niri/assets/1794388/27a238d6-0a22-4692-b794-30dc7a626fad"&gt;custom shaders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Live-reloading config&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Video Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729"&gt;https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Also check out this video from Brodie Robertson that showcases a lot of the niri functionality: &lt;a href="https://youtu.be/DeYx2exm04M"&gt;Niri Is My New Favorite Wayland Compositor&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Niri is stable for day-to-day use and does most things expected of a Wayland compositor. Many people are daily-driving niri, and are happy to help in our &lt;a href="https://matrix.to/#/%23niri:matrix.org"&gt;Matrix channel&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Give it a try! Follow the instructions on the &lt;a href="https://github.com/YaLTeR/niri/wiki/Getting-Started"&gt;Getting Started&lt;/a&gt; wiki page. Have your &lt;a href="https://github.com/Alexays/Waybar"&gt;waybar&lt;/a&gt;s and &lt;a href="https://codeberg.org/dnkl/fuzzel"&gt;fuzzel&lt;/a&gt;s ready: niri is not a complete desktop environment.&lt;/p&gt; 
&lt;p&gt;Here are some points you may have questions about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-monitor&lt;/strong&gt;: yes, a core part of the design from the very start. Mixed DPI works.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fractional scaling&lt;/strong&gt;: yes, plus all niri UI stays pixel-perfect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NVIDIA&lt;/strong&gt;: seems to work fine.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Floating windows&lt;/strong&gt;: yes, starting from niri 25.01.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Input devices&lt;/strong&gt;: niri supports tablets, touchpads, and touchscreens. You can map the tablet to a specific monitor, or use &lt;a href="https://opentabletdriver.net/"&gt;OpenTabletDriver&lt;/a&gt;. We have touchpad gestures, but no touchscreen gestures yet.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Wlr protocols&lt;/strong&gt;: yes, we have most of the important ones like layer-shell, gamma-control, screencopy. You can check on &lt;a href="https://wayland.app"&gt;wayland.app&lt;/a&gt; at the bottom of each protocol's page.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: while I run niri on beefy machines, I try to stay conscious of performance. I've seen someone use it fine on an Eee&amp;nbsp;PC&amp;nbsp;900 from&amp;nbsp;2008, of all things.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xwayland&lt;/strong&gt;: no built-in support, but xwayland-satellite is &lt;a href="https://github.com/YaLTeR/niri/wiki/Xwayland#using-xwayland-satellite"&gt;easy to set up&lt;/a&gt; and works very well. 
  &lt;ul&gt; 
   &lt;li&gt;Steam and games, including Proton: work perfectly through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;JetBrains IDEs, Ghidra: work well through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;Discord and other Electron apps: work well through xwayland-satellite.&lt;/li&gt; 
   &lt;li&gt;Chromium and VSCode: work perfectly natively on Wayland with the right flags.&lt;/li&gt; 
   &lt;li&gt;X11 apps that want to position windows or bars at specific screen coordinates: won't work well; you can run them in a nested compositor like &lt;a href="https://github.com/YaLTeR/niri/wiki/Xwayland#using-the-labwc-wayland-compositor"&gt;labwc&lt;/a&gt; or &lt;a href="https://github.com/YaLTeR/niri/wiki/Xwayland#directly-running-xwayland-in-rootful-mode"&gt;rootful Xwayland&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Display scaling (integer or fractional) keeps X11 apps crisp, but you need the latest xwayland-satellite. For games, you can run them in &lt;a href="https://github.com/ValveSoftware/gamescope"&gt;gamescope&lt;/a&gt; at native resolution, even with display scaling.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Media&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/Kmz8ODolnDg?list=PLRdS-n5seLRqrmWDQY4KDqtRMfIwU0U3T"&gt;niri: Making a Wayland compositor in Rust&lt;/a&gt; · &lt;em&gt;December 2024&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;My talk from the 2024 Moscow RustCon about niri, and how I do randomized property testing and profiling, and measure input latency. The talk is in Russian, but I prepared full English subtitles that you can find in YouTube's subtitle language selector.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.trommelspeicher.de/podcast/special_the_developer_behind_niri"&gt;An interview with Ivan, the developer behind Niri&lt;/a&gt; · &lt;em&gt;June 2025&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;An interview by a German tech podcast Das Triumvirat (in English). We talk about niri development and history, and my experience building and maintaining niri.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://lwn.net/Articles/1025866/"&gt;A tour of the niri scrolling-tiling Wayland compositor&lt;/a&gt; · &lt;em&gt;July 2025&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;An LWN article with a nice overview and introduction to niri.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you'd like to help with niri, there are plenty of both coding- and non-coding-related ways to do so. See &lt;a href="https://github.com/YaLTeR/niri/raw/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for an overview.&lt;/p&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;Niri is heavily inspired by &lt;a href="https://github.com/paperwm/PaperWM"&gt;PaperWM&lt;/a&gt; which implements scrollable tiling on top of GNOME Shell.&lt;/p&gt; 
&lt;p&gt;One of the reasons that prompted me to try writing my own compositor is being able to properly separate the monitors. Being a GNOME Shell extension, PaperWM has to work against Shell's global window coordinate space to prevent windows from overflowing.&lt;/p&gt; 
&lt;h2&gt;Tile Scrollably Elsewhere&lt;/h2&gt; 
&lt;p&gt;Here are some other projects which implement a similar workflow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paperwm/PaperWM"&gt;PaperWM&lt;/a&gt;: scrollable tiling on top of GNOME Shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/peterfajdiga/karousel"&gt;karousel&lt;/a&gt;: scrollable tiling on top of KDE.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dawsers/scroll"&gt;scroll&lt;/a&gt; and &lt;a href="https://spwhitton.name/tech/code/papersway/"&gt;papersway&lt;/a&gt;: scrollable tiling on top of sway/i3.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hyprwm/hyprland-plugins/tree/main/hyprscrolling"&gt;hyprscrolling&lt;/a&gt; and &lt;a href="https://gitlab.com/magus/hyprslidr"&gt;hyprslidr&lt;/a&gt;: scrollable tiling on top of Hyprland.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mogenson/PaperWM.spoon"&gt;PaperWM.spoon&lt;/a&gt;: scrollable tiling on top of macOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;We have a Matrix chat, feel free to join and ask a question: &lt;a href="https://matrix.to/#/%23niri:matrix.org"&gt;https://matrix.to/#/#niri:matrix.org&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>juspay/hyperswitch</title>
      <link>https://github.com/juspay/hyperswitch</link>
      <description>&lt;p&gt;An open source payments switch written in Rust to make payments fast, reliable and affordable&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-dark.svg#gh-dark-mode-only" alt="Hyperswitch-Logo" width="40%"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-light.svg#gh-light-mode-only" alt="Hyperswitch-Logo" width="40%"&gt; &lt;/p&gt; 
&lt;h1 align="center"&gt;Composable Open-Source Payments Infrastructure&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/gifs/quickstart.gif" alt="Quickstart demo"&gt; &lt;/p&gt; 
&lt;!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/juspay/hyperswitch/actions?query=workflow%3ACI+branch%3Amain"&gt; &lt;img src="https://github.com/juspay/hyperswitch/workflows/CI-push/badge.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://github.com/juspay/hyperswitch/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/github/license/juspay/hyperswitch"&gt; &lt;/a&gt; &lt;a href="https://github.com/juspay/hyperswitch/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/badge/Made_in-Rust-orange"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.linkedin.com/company/hyperswitch/"&gt; &lt;img src="https://img.shields.io/badge/follow-hyperswitch-blue?logo=linkedin&amp;amp;labelColor=grey"&gt; &lt;/a&gt; &lt;a href="https://x.com/hyperswitchio"&gt; &lt;img src="https://img.shields.io/badge/follow-%40hyperswitchio-white?logo=x&amp;amp;labelColor=grey"&gt; &lt;/a&gt; &lt;a href="https://inviter.co/hyperswitch-slack"&gt; &lt;img src="https://img.shields.io/badge/chat-on_slack-blue?logo=slack&amp;amp;labelColor=grey&amp;amp;color=%233f0e40"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;📁 Table of Contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-what-can-i-do-with-hyperswitch"&gt;What Can I Do with Hyperswitch?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-quickstart-local-setup"&gt;Quickstart (Local Setup)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#cloud-deployment"&gt;Cloud Deployment&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#hosted-sandbox-no-setup-required"&gt;Hosted Sandbox (No Setup Required)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-why-hyperswitch"&gt;Why Hyperswitch?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview"&gt;Architectural Overview&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#our-vision"&gt;Our Vision&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#community--contributions"&gt;Community &amp;amp; Contributions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#feature-requests--bugs"&gt;Feature Requests &amp;amp; Bugs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning"&gt;Versioning&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license"&gt;License&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#team-behind-hyperswitch"&gt;Team Behind Hyperswitch&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;summary&gt;&lt;h2&gt; What Can I Do with Hyperswitch?&lt;/h2&gt;&lt;/summary&gt; 
&lt;p&gt;Hyperswitch offers a modular, open-source payments infrastructure designed for flexibility and control. Apart from our Payment Suite offering, this solution allows businesses to pick and integrate only the modules they need on top of their existing payment stack — without unnecessary complexity or vendor lock-in.&lt;/p&gt; 
&lt;p&gt;Each module is independent and purpose-built to optimize different aspects of payment processing.&lt;/p&gt; 
&lt;h3&gt; Learn More About The Payment Modules &lt;/h3&gt; 
&lt;details&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cost Observability&lt;/strong&gt;&lt;br&gt; Advanced observability tools to audit, monitor, and optimize your payment costs. Detect hidden fees, downgrades, and penalties with self-serve dashboards and actionable insights.&lt;br&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/ai-powered-cost-observability"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Revenue Recovery&lt;/strong&gt;&lt;br&gt; Combat passive churn with intelligent retry strategies tuned by card bin, region, method, and more. Offers fine-grained control over retry algorithms, penalty budgets, and recovery transparency.&lt;br&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/revenue-recovery"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vault&lt;/strong&gt;&lt;br&gt; A PCI-compliant vault service to store cards, tokens, wallets, and bank credentials. Provides a unified, secure, and reusable store of customer-linked payment methods.&lt;br&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/vault"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intelligent Routing&lt;/strong&gt;&lt;br&gt; Route each transaction to the PSP with the highest predicted auth rate. Reduce retries, avoid downtime, and minimize latency while maximizing first attempt success.&lt;br&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/intelligent-routing"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reconciliation&lt;/strong&gt;&lt;br&gt; Automate 2-way and 3-way reconciliation with backdated support, staggered scheduling, and customizable outputs. Reduces manual ops effort and increases audit confidence.&lt;br&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/reconciliation"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Alternate Payment Methods&lt;/strong&gt;&lt;br&gt; Drop-in widgets for PayPal, Apple Pay, Google Pay, Samsung Pay, Pay by Bank, and BNPL providers like Klarna. Maximizes conversions with seamless one-click checkout.&lt;br&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/enable-alternate-payment-method-widgets"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt; Local Setup via Docker &lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# One-click local setup

git clone --depth 1 --branch latest https://github.com/juspay/hyperswitch

cd hyperswitch

scripts/setup.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;This script: &lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Detects Docker/Podman&lt;/li&gt; 
  &lt;li&gt;Offers multiple deployment profiles: 
   &lt;ul&gt; 
    &lt;li&gt;&lt;strong&gt;Standard&lt;/strong&gt;: App server + Control Center&lt;/li&gt; 
    &lt;li&gt;&lt;strong&gt;Full&lt;/strong&gt;: Includes monitoring + schedulers&lt;/li&gt; 
    &lt;li&gt;&lt;strong&gt;Minimal&lt;/strong&gt;: Standalone App server&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Provides access links when done&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;If you need further help, check out our &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/overview/unified-local-setup-using-docker"&gt;video tutorial&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;👉 After setup, &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/account-setup/using-hyperswitch-control-center#add-a-payment-processor"&gt;configure a connector&lt;/a&gt; and &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/account-setup/test-a-payment"&gt;test a payment&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Hosted Sandbox (No Setup Required)&lt;/h3&gt; 
&lt;p&gt;Hyperswitch offers a fully hosted sandbox environment that requires no setup. You can explore the Control Center, configure payment connectors, and test payments directly from the UI.&lt;/p&gt; 
&lt;a href="https://app.hyperswitch.io"&gt; &lt;img src="https://github.com/juspay/hyperswitch/raw/main/docs/imgs/try-the-sandbox.png?raw=true" height="35"&gt; &lt;/a&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt; What you can do in the Hosted Sandbox&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Access the full Control Center&lt;/li&gt; 
  &lt;li&gt;Configure payment connectors&lt;/li&gt; 
  &lt;li&gt;View logs, routing rules, and retry strategies&lt;/li&gt; 
  &lt;li&gt;Try payments directly from the UI&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;strong&gt;Cloud Deployment&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;You can deploy to AWS, GCP, or Azure using Helm or CDK scripts. Fastest path:&lt;/p&gt; 
&lt;p&gt;Click to deploy via AWS:&lt;/p&gt; 
&lt;a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=HyperswitchBootstarp&amp;amp;templateURL=https://hyperswitch-synth.s3.eu-central-1.amazonaws.com/hs-starter-config.yaml"&gt; &lt;img src="https://github.com/juspay/hyperswitch/raw/main/docs/imgs/aws_button.png?raw=true" height="35"&gt; &lt;/a&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Cloud Deployment Instructions&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Click the AWS deployment button above to launch the stack.&lt;/li&gt; 
  &lt;li&gt;Follow the guided steps in the AWS Console (approx. 30–45 mins).&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;✅ This setup provisions Hyperswitch on your cloud account using CloudFormation.&lt;/p&gt; 
 &lt;p&gt;📘 For full instructions and Helm-based deployments, check out the&lt;br&gt; &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/deploy-on-kubernetes-using-helm"&gt;Cloud Install Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview"&gt; &lt;h2 id="architectural-overview"&gt;Architectural Overview&lt;/h2&gt; &lt;/a&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/features.png"&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/non-functional-features.png"&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-architecture-v1.png"&gt; 
&lt;h2&gt;Why Hyperswitch?&lt;/h2&gt; 
&lt;p&gt;Hyperswitch is a commercial open-source payments stack purpose-built for scale, flexibility, and developer experience. Designed with a modular architecture, Hyperswitch lets you pick only the components you need—whether it’s routing, retries, vaulting, or observability—without vendor lock-in or bloated integrations.&lt;/p&gt; 
&lt;p&gt;Built in Rust for performance and reliability, Hyperswitch supports global payment methods (cards, wallets, BNPL, UPI, Pay by Bank), exposes smart routing and retry logic, and provides a visual workflow builder in the Control Center. Whether you're integrating a full payment suite or augmenting an existing stack with a single module, Hyperswitch meets you where you are.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;“Linux for Payments”&lt;/strong&gt; — Hyperswitch is a well-architected reference for teams who want to own their payments stack.&lt;/p&gt; 
&lt;p&gt;We believe in:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Embracing Payment Diversity:&lt;/strong&gt; Innovation comes from enabling choice—across payment methods, processors, and flows.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Open Source by Default:&lt;/strong&gt; Transparency drives trust and builds better, reusable software.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Community-Driven Development:&lt;/strong&gt; Our roadmap is shaped by real-world use cases and contributors.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Systems-Level Engineering:&lt;/strong&gt; We hold ourselves to a high bar for reliability, security, and performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Maximizing Value Creation:&lt;/strong&gt; For developers, customers, and partners alike.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Community-Driven, Enterprise-Tested:&lt;/strong&gt; Hyperswitch is built in the open with real-world feedback from developers and contributors, and maintained by Juspay, the team powering payment infrastructure for 400+ leading enterprises worldwide.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributors from around the world to help build Hyperswitch. Whether you're fixing bugs, improving documentation, or adding new features, your help is appreciated.&lt;/p&gt; 
&lt;p&gt;Please read our &lt;a href="https://github.com/juspay/hyperswitch/raw/main/docs/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;Join the conversation on &lt;a href="https://inviter.co/hyperswitch-slack"&gt;Slack&lt;/a&gt; or explore open issues on &lt;a href="https://github.com/juspay/hyperswitch/issues"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#feature-requests"&gt; &lt;h2 id="feature-requests"&gt;Feature requests &amp;amp; Bugs&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;For new product features, enhancements, roadmap discussions, or to share queries and ideas, visit our &lt;a href="https://github.com/juspay/hyperswitch/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For reporting a bug, please read the issue guidelines and search for &lt;a href="https://github.com/juspay/hyperswitch/issues"&gt;existing and closed issues&lt;/a&gt;. If your problem or idea is not addressed yet, please &lt;a href="https://github.com/juspay/hyperswitch/issues/new/choose"&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning"&gt; &lt;h2 id="versioning"&gt;Versioning&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;Check the &lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license"&gt; &lt;h2 id="copyright-and-license"&gt;Copyright and License&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;This product is licensed under the &lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/LICENSE"&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#team-behind-hyperswitch"&gt; &lt;h2 id="team-behind-hyperswitch"&gt;Team behind Hyperswitch&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;The core team of 150+ engineers building Hyperswitch. Keep up the great work! 🥂&lt;/p&gt; 
&lt;a href="https://github.com/juspay/hyperswitch/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=juspay/hyperswitch" alt="Contributors"&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>ai-dynamo/dynamo</title>
      <link>https://github.com/ai-dynamo/dynamo</link>
      <description>&lt;p&gt;A Datacenter Scale Distributed Inference Serving Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-banner.png" alt="Dynamo banner"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://github.com/ai-dynamo/dynamo/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/ai-dynamo/dynamo" alt="GitHub Release"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/D92uqZRjCZ"&gt;&lt;img src="https://dcbadge.limes.pink/api/server/D92uqZRjCZ?style=flat" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/ai-dynamo/dynamo"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;| &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/dynamo/issues/762"&gt;Roadmap&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://docs.nvidia.com/dynamo/latest/index.html"&gt;Documentation&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/dynamo/tree/main/examples"&gt;Examples&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href="https://github.com/ai-dynamo/enhancements"&gt;Design Proposals&lt;/a&gt;&lt;/strong&gt; |&lt;/p&gt; 
&lt;h1&gt;NVIDIA Dynamo&lt;/h1&gt; 
&lt;p&gt;High-throughput, low-latency inference framework designed for serving generative AI and reasoning models in multi-node distributed environments.&lt;/p&gt; 
&lt;h2&gt;The Era of Multi-GPU, Multi-Node&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-gpu-vertical.png" alt="Multi Node Multi-GPU topology" width="600"&gt; &lt;/p&gt; 
&lt;p&gt;Large language models are quickly outgrowing the memory and compute budget of any single GPU. Tensor-parallelism solves the capacity problem by spreading each layer across many GPUs—and sometimes many servers—but it creates a new one: how do you coordinate those shards, route requests, and share KV cache fast enough to feel like one accelerator? This orchestration gap is exactly what NVIDIA Dynamo is built to close.&lt;/p&gt; 
&lt;p&gt;Dynamo is designed to be inference engine agnostic (supports TRT-LLM, vLLM, SGLang or others) and captures LLM-specific capabilities such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Disaggregated prefill &amp;amp; decode inference&lt;/strong&gt; – Maximizes GPU throughput and facilitates trade off between throughput and latency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic GPU scheduling&lt;/strong&gt; – Optimizes performance based on fluctuating demand&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLM-aware request routing&lt;/strong&gt; – Eliminates unnecessary KV cache re-computation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Accelerated data transfer&lt;/strong&gt; – Reduces inference response time using NIXL.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;KV cache offloading&lt;/strong&gt; – Leverages multiple memory hierarchies for higher system throughput&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/images/frontpage-architecture.png" alt="Dynamo architecture" width="600"&gt; &lt;/p&gt; 
&lt;h2&gt;Framework Support Matrix&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;vLLM&lt;/th&gt; 
   &lt;th&gt;SGLang&lt;/th&gt; 
   &lt;th&gt;TensorRT-LLM&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/disagg_serving.md"&gt;&lt;strong&gt;Disaggregated Serving&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/disagg_serving.md#conditional-disaggregation"&gt;&lt;strong&gt;Conditional Disaggregation&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/kv_cache_routing.md"&gt;&lt;strong&gt;KV-Aware Routing&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/sla_planner.md"&gt;&lt;strong&gt;SLA-Based Planner&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/load_planner.md"&gt;&lt;strong&gt;Load Based Planner&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;✅&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/architecture/kvbm_architecture.md"&gt;&lt;strong&gt;KVBM&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
   &lt;td&gt;🚧&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;To learn more about each framework and their capabilities, check out each framework's README!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends/vllm/README.md"&gt;vLLM&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends/sglang/README.md"&gt;SGLang&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends/trtllm/README.md"&gt;TensorRT-LLM&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Built in Rust for performance and in Python for extensibility, Dynamo is fully open-source and driven by a transparent, OSS (Open Source Software) first development approach.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;The following examples require a few system level packages. Recommended to use Ubuntu 24.04 with a x86_64 CPU. See &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/support_matrix.md"&gt;docs/support_matrix.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;1. Initial setup&lt;/h2&gt; 
&lt;p&gt;The Dynamo team recommends the &lt;code&gt;uv&lt;/code&gt; Python package manager, although any way works. Install uv:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install etcd and NATS (required)&lt;/h3&gt; 
&lt;p&gt;To coordinate across a data center, Dynamo relies on etcd and NATS. To run Dynamo locally, these need to be available.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://etcd.io/"&gt;etcd&lt;/a&gt; can be run directly as &lt;code&gt;./etcd&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nats.io/"&gt;nats&lt;/a&gt; needs jetstream enabled: &lt;code&gt;nats-server -js&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To quickly setup etcd &amp;amp; NATS, you can also run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# At the root of the repository:
docker compose -f deploy/docker-compose.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;2. Select an engine&lt;/h2&gt; 
&lt;p&gt;We publish Python wheels specialized for each of our supported engines: vllm, sglang, trtllm, and llama.cpp. The examples that follow use SGLang; continue reading for other engines.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;uv venv venv
source venv/bin/activate
uv pip install pip

# Choose one
uv pip install "ai-dynamo[sglang]"  #replace with [vllm], [trtllm], etc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3. Run Dynamo&lt;/h2&gt; 
&lt;h3&gt;Running an LLM API server&lt;/h3&gt; 
&lt;p&gt;Dynamo provides a simple way to spin up a local set of inference components including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;OpenAI Compatible Frontend&lt;/strong&gt; – High performance OpenAI compatible http api server written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Basic and Kv Aware Router&lt;/strong&gt; – Route and load balance traffic to a set of workers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Workers&lt;/strong&gt; – Set of pre-configured LLM serving engines.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;# Start an OpenAI compatible HTTP server, a pre-processor (prompt templating and tokenization) and a router:
python -m dynamo.frontend [--http-port 8080]

# Start the SGLang engine, connecting to NATS and etcd to receive requests. You can run several of these,
# both for the same model and for multiple models. The frontend node will discover them.
python -m dynamo.sglang.worker deepseek-ai/DeepSeek-R1-Distill-Llama-8B
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Send a Request&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl localhost:8080/v1/chat/completions   -H "Content-Type: application/json"   -d '{
    "model": "deepseek-ai/DeepSeek-R1-Distill-Llama-8B",
    "messages": [
    {
        "role": "user",
        "content": "Hello, how are you?"
    }
    ],
    "stream":false,
    "max_tokens": 300
  }' | jq
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Rerun with &lt;code&gt;curl -N&lt;/code&gt; and change &lt;code&gt;stream&lt;/code&gt; in the request to &lt;code&gt;true&lt;/code&gt; to get the responses as soon as the engine issues them.&lt;/p&gt; 
&lt;h3&gt;Deploying Dynamo&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow the &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/docs/guides/dynamo_deploy/README.md"&gt;Quickstart Guide&lt;/a&gt; to deploy on Kubernetes.&lt;/li&gt; 
 &lt;li&gt;Check out &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/components/backends"&gt;Backends&lt;/a&gt; to deploy various workflow configurations (e.g. SGLang with router, vLLM with disaggregated serving, etc.)&lt;/li&gt; 
 &lt;li&gt;Run some &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/examples"&gt;Examples&lt;/a&gt; to learn about building components in Dynamo and exploring various integrations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Engines&lt;/h1&gt; 
&lt;p&gt;Dynamo is designed to be inference engine agnostic. To use any engine with Dynamo, NATS and etcd need to be installed, along with a Dynamo frontend (&lt;code&gt;python -m dynamo.frontend [--interactive]&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;vLLM&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install ai-dynamo[vllm]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.vllm --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;vLLM attempts to allocate enough KV cache for the full context length at startup. If that does not fit in your available memory pass &lt;code&gt;--context-length &amp;lt;value&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To specify which GPUs to use set environment variable &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;SGLang&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;# Install libnuma
apt install -y libnuma-dev

uv pip install ai-dynamo[sglang]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.sglang.worker --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can pass any sglang flags directly to this worker, see &lt;a href="https://docs.sglang.ai/backend/server_arguments.html"&gt;https://docs.sglang.ai/backend/server_arguments.html&lt;/a&gt; . See there to use multiple GPUs.&lt;/p&gt; 
&lt;h2&gt;TensorRT-LLM&lt;/h2&gt; 
&lt;p&gt;It is recommended to use &lt;a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch"&gt;NGC PyTorch Container&lt;/a&gt; for running the TensorRT-LLM engine.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] Ensure that you select a PyTorch container image version that matches the version of TensorRT-LLM you are using. For example, if you are using &lt;code&gt;tensorrt-llm==1.0.0rc4&lt;/code&gt;, use the PyTorch container image version &lt;code&gt;25.05&lt;/code&gt;. To find the correct PyTorch container version for your desired &lt;code&gt;tensorrt-llm&lt;/code&gt; release, visit the &lt;a href="https://github.com/NVIDIA/TensorRT-LLM/raw/main/docker/Dockerfile.multi"&gt;TensorRT-LLM Dockerfile.multi&lt;/a&gt; on GitHub. Switch to the branch that matches your &lt;code&gt;tensorrt-llm&lt;/code&gt; version, and look for the &lt;code&gt;BASE_TAG&lt;/code&gt; line to identify the recommended PyTorch container tag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Important] Launch container with the following additional settings &lt;code&gt;--shm-size=1g --ulimit memlock=-1&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Install prerequisites&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Optional step: Only required for Blackwell and Grace Hopper
pip3 install torch==2.7.1 torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128

sudo apt-get -y install libopenmpi-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Tip] You can learn more about these prequisites and known issues with TensorRT-LLM pip based installation &lt;a href="https://nvidia.github.io/TensorRT-LLM/installation/linux.html"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;After installing the pre-requisites above, install Dynamo&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install ai-dynamo[trtllm]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run the backend/worker like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;python -m dynamo.trtllm --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To specify which GPUs to use set environment variable &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Developing Locally&lt;/h1&gt; 
&lt;h2&gt;1. Install libraries&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install -y build-essential libhwloc-dev libudev-dev pkg-config libclang-dev protobuf-compiler python3-dev cmake
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;macOS:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;# if brew is not installed on your system, install it
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;brew install cmake protobuf

## Check that Metal is accessible
xcrun -sdk macosx metal
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If Metal is accessible, you should see an error like &lt;code&gt;metal: error: no input files&lt;/code&gt;, which confirms it is installed correctly.&lt;/p&gt; 
&lt;h2&gt;2. Install Rust&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3. Create a Python virtual env:&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;uv venv dynamo
source dynamo/bin/activate
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;4. Install build tools&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;uv pip install pip maturin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/PyO3/maturin"&gt;Maturin&lt;/a&gt; is the Rust&amp;lt;-&amp;gt;Python bindings build tool.&lt;/p&gt; 
&lt;h2&gt;5. Build the Rust bindings&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;cd lib/bindings/python
maturin develop --uv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;6. Install the wheel&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;cd $PROJECT_ROOT
uv pip install .
# For development, use
export PYTHONPATH="${PYTHONPATH}:$(pwd)/components/frontend/src:$(pwd)/components/planner/src:$(pwd)/components/backends/vllm/src:$(pwd)/components/backends/sglang/src:$(pwd)/components/backends/trtllm/src:$(pwd)/components/backends/llama_cpp/src:$(pwd)/components/backends/mocker/src"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Note] Editable (&lt;code&gt;-e&lt;/code&gt;) does not work because the &lt;code&gt;dynamo&lt;/code&gt; package is split over multiple directories, one per backend.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You should now be able to run &lt;code&gt;python -m dynamo.frontend&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Remember that nats and etcd must be running (see earlier).&lt;/p&gt; 
&lt;p&gt;Set the environment variable &lt;code&gt;DYN_LOG&lt;/code&gt; to adjust the logging level; for example, &lt;code&gt;export DYN_LOG=debug&lt;/code&gt;. It has the same syntax as &lt;code&gt;RUST_LOG&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you use vscode or cursor, we have a .devcontainer folder built on &lt;a href="https://code.visualstudio.com/docs/devcontainers/containers"&gt;Microsofts Extension&lt;/a&gt;. For instructions see the &lt;a href="https://raw.githubusercontent.com/ai-dynamo/dynamo/main/.devcontainer/README.md"&gt;ReadMe&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>boundless-xyz/boundless</title>
      <link>https://github.com/boundless-xyz/boundless</link>
      <description>&lt;p&gt;Monorepo for Boundless, the universal ZK protocol&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/boundless-xyz/boundless/main/Boundless_Logo%20black.png" alt="Boundless Logo" width="200"&gt; &lt;/p&gt; 
&lt;h1&gt;Boundless&lt;/h1&gt; 
&lt;p&gt;This repository contains the core primitives for Boundless.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are a builder looking to build an application on Boundless, you should start with the &lt;a href="https://github.com/boundless-xyz/boundless-foundry-template"&gt;Boundless Foundry Template&lt;/a&gt; and the &lt;a href="https://docs.beboundless.xyz/developers/quick-start"&gt;Boundless Builder Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are a prover looking to get started, please refer to the &lt;a href="https://docs.beboundless.xyz/provers/quick-start"&gt;Boundless Prover Quick Start Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Repository Structure&lt;/h2&gt; 
&lt;p&gt;The repository is structured as a monorepo and contains Rust crates and Solidity contracts. Some key components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Boundless Core Contracts&lt;/strong&gt;: The core smart contracts for Boundless. &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/contracts"&gt;./contracts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Boundless SDK&lt;/strong&gt;: Rust SDK for interacting with Boundless. &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/boundless-market"&gt;./crates/boundless-market&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Boundless CLI&lt;/strong&gt;: Command-line interface for interacting with Boundless. &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/boundless-cli"&gt;./crates/boundless-cli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Boundless Broker&lt;/strong&gt;: Our sample prover implementation. &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/broker"&gt;./crates/broker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Boundless zkVM Guests&lt;/strong&gt;: The zkVM guests required for generating proofs on Boundless. &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/guest"&gt;./crates/guest&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/crates/assessor"&gt;./crates/assessor&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Developing&lt;/h2&gt; 
&lt;p&gt;If you don't already have Rust installed, start by &lt;a href="https://doc.rust-lang.org/cargo/getting-started/installation.html"&gt;installing Rust and rustup&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Then download the RISC Zero toolchain and install it using rzup:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl -L https://risczero.com/install | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next we can install the RISC Zero toolchain by running rzup install:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;rzup install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can verify the installation was successful by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo risczero --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you don't already have Forge installed, you can install it using Foundry:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl -L https://foundry.paradigm.xyz | bash
foundryup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build the Solidity contracts, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;forge build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build the Rust crates, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find the documentation in the &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/documentation"&gt;documentation&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p&gt;To build it and serve it locally, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;bun install
bun run docs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open your browser and navigate to &lt;code&gt;http://localhost:5173&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Audits&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/boundless-xyz/boundless-security"&gt;https://github.com/boundless-xyz/boundless-security&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/contracts"&gt;Boundless Contracts&lt;/a&gt;, Boundless Assessor Library (./crates/assessor) and Boundless Assessor Guest (./crates/guest/assessor) in this repository are licensed under the Business Source License, with conversion to Apache-2.0 at a future date. See &lt;a href="https://raw.githubusercontent.com/boundless-xyz/boundless/main/LICENSE-BSL"&gt;LICENSE-BSL&lt;/a&gt; for a copy of the license.&lt;/p&gt; 
&lt;p&gt;Other source code within this repository is licensed under the Apache-2.0 license, unless otherwise stated at the file header. See [LICENSE-Apache-2.0][./LICENSE-Apache-2.0] for a copy of the license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>servo/servo</title>
      <link>https://github.com/servo/servo</link>
      <description>&lt;p&gt;Servo aims to empower developers with a lightweight, high-performance alternative for embedding web technologies in applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Servo Parallel Browser Engine Project&lt;/h1&gt; 
&lt;p&gt;Servo is a prototype web browser engine written in the &lt;a href="https://github.com/rust-lang/rust"&gt;Rust&lt;/a&gt; language. It is currently developed on 64-bit macOS, 64-bit Linux, 64-bit Windows, 64-bit OpenHarmony, and Android.&lt;/p&gt; 
&lt;p&gt;Servo welcomes contribution from everyone. Check out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://book.servo.org"&gt;Servo Book&lt;/a&gt; for documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://servo.org/"&gt;servo.org&lt;/a&gt; for news and guides&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Coordination of Servo development happens:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Here in the Github Issues&lt;/li&gt; 
 &lt;li&gt;On the &lt;a href="https://servo.zulipchat.com/"&gt;Servo Zulip&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;In video calls advertised in the &lt;a href="https://github.com/servo/project/issues"&gt;Servo Project&lt;/a&gt; repo.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;For more detailed build instructions, see the Servo book under &lt;a href="https://book.servo.org/hacking/setting-up-your-environment.html"&gt;Setting up your environment&lt;/a&gt;, &lt;a href="https://book.servo.org/hacking/building-servo.html"&gt;Building Servo&lt;/a&gt;, &lt;a href="https://book.servo.org/hacking/building-for-android.html"&gt;Building for Android&lt;/a&gt; and &lt;a href="https://book.servo.org/hacking/building-for-openharmony.html"&gt;Building for OpenHarmony&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download and install &lt;a href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt; and &lt;a href="https://brew.sh/"&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt;: &lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;rustup&lt;/code&gt;: &lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;./mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;curl&lt;/code&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Arch: &lt;code&gt;sudo pacman -S --needed curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Debian, Ubuntu: &lt;code&gt;sudo apt install curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Fedora: &lt;code&gt;sudo dnf install curl&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Gentoo: &lt;code&gt;sudo emerge net-misc/curl&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt;: &lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;code&gt;rustup&lt;/code&gt;: &lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;./mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;./mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Download &lt;a href="https://docs.astral.sh/uv/getting-started/installation/#standalone-installer"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://chocolatey.org/install#individual"&gt;&lt;code&gt;choco&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://win.rustup.rs/"&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Be sure to select &lt;em&gt;Quick install via the Visual Studio Community installer&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;In the Visual Studio Installer, ensure the following components are installed: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Windows 10/11 SDK (anything &amp;gt;= 10.0.19041.0)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.Windows{10, 11}SDK.{&amp;gt;=19041}&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;MSVC v143 - VS 2022 C++ x64/x86 build tools (Latest)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.Tools.x86.x64&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;C++ ATL for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATL&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;C++ MFC for latest v143 build tools (x86 &amp;amp; x64)&lt;/strong&gt; (&lt;code&gt;Microsoft.VisualStudio.Component.VC.ATLMFC&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Restart your shell to make sure &lt;code&gt;cargo&lt;/code&gt; is available&lt;/li&gt; 
 &lt;li&gt;Install the other dependencies: &lt;code&gt;.\mach bootstrap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build servoshell: &lt;code&gt;.\mach build&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure that the following environment variables are set: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;ANDROID_NDK_ROOT&lt;/code&gt;: &lt;code&gt;$ANDROID_SDK_ROOT/ndk/26.2.11394342/&lt;/code&gt; &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; can be any directory (such as &lt;code&gt;~/android-sdk&lt;/code&gt;). All of the Android build dependencies will be installed there.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install the latest version of the &lt;a href="https://developer.android.com/studio#command-tools"&gt;Android command-line tools&lt;/a&gt; to &lt;code&gt;$ANDROID_SDK_ROOT/cmdline-tools/latest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Run the following command to install the necessary components: &lt;pre&gt;&lt;code class="language-shell"&gt;sudo $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install \
 "build-tools;34.0.0" \
 "emulator" \
 "ndk;26.2.11394342" \
 "platform-tools" \
 "platforms;android-33" \
 "system-images;android-33;google_apis;x86_64"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Follow the instructions above for the platform you are building on&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;OpenHarmony&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow the instructions above for the platform you are building on to prepare the environment.&lt;/li&gt; 
 &lt;li&gt;Depending on the target distribution (e.g. &lt;code&gt;HarmonyOS NEXT&lt;/code&gt; vs pure &lt;code&gt;OpenHarmony&lt;/code&gt;) the build configuration will differ slightly.&lt;/li&gt; 
 &lt;li&gt;Ensure that the following environment variables are set 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;DEVECO_SDK_HOME&lt;/code&gt; (Required when targeting &lt;code&gt;HarmonyOS NEXT&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;OHOS_BASE_SDK_HOME&lt;/code&gt; (Required when targeting &lt;code&gt;OpenHarmony&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;OHOS_SDK_NATIVE&lt;/code&gt; (e.g. &lt;code&gt;${DEVECO_SDK_HOME}/default/openharmony/native&lt;/code&gt; or &lt;code&gt;${OHOS_BASE_SDK_HOME}/${API_VERSION}/native&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;SERVO_OHOS_SIGNING_CONFIG&lt;/code&gt;: Path to json file containing a valid signing configuration for the demo app.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Review the detailed instructions at &lt;a href="https://book.servo.org/hacking/building-for-openharmony.html"&gt;Building for OpenHarmony&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The target distribution can be modified by passing &lt;code&gt;--flavor=&amp;lt;default|harmonyos&amp;gt;&lt;/code&gt; to `mach &amp;lt;build|package|install&amp;gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true" alt="RustDesk - Your remote desktop"&gt;&lt;br&gt; &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build"&gt;Build&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker"&gt;Docker&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure"&gt;Structure&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot"&gt;Snapshot&lt;/a&gt;&lt;br&gt; [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md"&gt;Українська&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md"&gt;česky&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md"&gt;中文&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md"&gt;Magyar&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md"&gt;Español&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md"&gt;فارسی&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md"&gt;Français&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md"&gt;Deutsch&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md"&gt;Polski&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md"&gt;Indonesian&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md"&gt;Suomi&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md"&gt;മലയാളം&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md"&gt;日本語&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md"&gt;Nederlands&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md"&gt;Italiano&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md"&gt;Русский&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md"&gt;Português (Brasil)&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md"&gt;Esperanto&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md"&gt;한국어&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md"&gt;العربي&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md"&gt;Tiếng Việt&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md"&gt;Dansk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md"&gt;Ελληνικά&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md"&gt;Türkçe&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md"&gt;Norsk&lt;/a&gt;]&lt;br&gt; &lt;b&gt;We need your help to translate this README, &lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/lang"&gt;RustDesk UI&lt;/a&gt; and &lt;a href="https://github.com/rustdesk/doc.rustdesk.com"&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Chat with us: &lt;a href="https://discord.gg/nDceKgxnkV"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/rustdesk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/rustdesk"&gt;Reddit&lt;/a&gt; | &lt;a href="https://www.youtube.com/@rustdesk"&gt;YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://ko-fi.com/I2I04VU09"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop solution, written in Rust. Works out of the box with no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href="https://rustdesk.com/server"&gt;set up your own&lt;/a&gt;, or &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png" alt="image"&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases"&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases/tag/nightly"&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://f-droid.org/en/packages/com.carriez.flutter_hbb"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" height="80"&gt;&lt;/a&gt; &lt;a href="https://flathub.org/apps/com.rustdesk.RustDesk"&gt;&lt;img src="https://flathub.org/api/badge?svg&amp;amp;locale=en" alt="Get it on Flathub" height="80"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href="https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml"&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"&gt;Windows&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so"&gt;Linux&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib"&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw Steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://rustdesk.com/docs/en/dev/build/"&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to Build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i 's/CFLAGS+=-I/CFLAGS+=-fPIC -I/g' Makefile
sed -i 's/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g' Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone --recurse-submodules https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t "rustdesk-builder" .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID="$(id -u)" -e PGID="$(id -g)" rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you're running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you run these commands from the root of the RustDesk repository, or the application may not find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common"&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/scrap"&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/enigo"&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard"&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/ui"&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/server"&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/client.rs"&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs"&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href="https://github.com/rustdesk/rustdesk-server"&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/platform"&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter"&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js"&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651" alt="Connection Manager"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea" alt="Connected to a Windows PC"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad" alt="File Transfer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5" alt="TCP Tunneling"&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rustfs/rustfs</title>
      <link>https://github.com/rustfs/rustfs</link>
      <description>&lt;p&gt;🚀 High-performance distributed object storage for MinIO alternative.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://rustfs.com"&gt;&lt;img src="https://rustfs.com/images/rustfs-github.png" alt="RustFS"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt;RustFS is a high-performance distributed object storage software built using Rust&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/rustfs/rustfs/actions/workflows/ci.yml"&gt;&lt;img alt="CI" src="https://github.com/rustfs/rustfs/actions/workflows/ci.yml/badge.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://github.com/rustfs/rustfs/actions/workflows/docker.yml"&gt;&lt;img alt="Build and Push Docker Images" src="https://github.com/rustfs/rustfs/actions/workflows/docker.yml/badge.svg?sanitize=true"&gt;&lt;/a&gt; &lt;img alt="GitHub commit activity" src="https://img.shields.io/github/commit-activity/m/rustfs/rustfs"&gt; &lt;img alt="Github Last Commit" src="https://img.shields.io/github/last-commit/rustfs/rustfs"&gt; &lt;a href="https://hellogithub.com/repository/rustfs/rustfs" target="_blank"&gt;&lt;img src="https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=b95bcb72bdc340b68f16fdf6790b7d5b&amp;amp;claim_uid=MsbvjYeLDKAH457&amp;amp;theme=small" alt="Featured｜HelloGitHub"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://docs.rustfs.com/introduction.html"&gt;Getting Started&lt;/a&gt; · &lt;a href="https://docs.rustfs.com/"&gt;Docs&lt;/a&gt; · &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;Bug reports&lt;/a&gt; · &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;Discussions&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; English | &lt;a href="https://github.com/rustfs/rustfs/raw/main/README_ZH.md"&gt;简体中文&lt;/a&gt; | 
 &lt;!-- Keep these links. Translations will automatically update with the README. --&gt; &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=de"&gt;Deutsch&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=es"&gt;Español&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=fr"&gt;français&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ja"&gt;日本語&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ko"&gt;한국어&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=pt"&gt;Português&lt;/a&gt; | &lt;a href="https://readme-i18n.com/rustfs/rustfs?lang=ru"&gt;Русский&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;RustFS is a high-performance distributed object storage software built using Rust, one of the most popular languages worldwide. Along with MinIO, it shares a range of advantages such as simplicity, S3 compatibility, open-source nature, support for data lakes, AI, and big data. Furthermore, it has a better and more user-friendly open-source license in comparison to other storage systems, being constructed under the Apache license. As Rust serves as its foundation, RustFS provides faster speed and safer distributed features for high-performance object storage.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠️ &lt;strong&gt;RustFS is under rapid development. Do NOT use in production environments!&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Built with Rust, ensuring speed and efficiency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Distributed Architecture&lt;/strong&gt;: Scalable and fault-tolerant design for large-scale deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;S3 Compatibility&lt;/strong&gt;: Seamless integration with existing S3-compatible applications.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Lake Support&lt;/strong&gt;: Optimized for big data and AI workloads.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source&lt;/strong&gt;: Licensed under Apache 2.0, encouraging community contributions and transparency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User-Friendly&lt;/strong&gt;: Designed with simplicity in mind, making it easy to deploy and manage.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RustFS vs MinIO&lt;/h2&gt; 
&lt;p&gt;Stress test server parameters&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;parameter&lt;/th&gt; 
   &lt;th&gt;Remark&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CPU&lt;/td&gt; 
   &lt;td&gt;2 Core&lt;/td&gt; 
   &lt;td&gt;Intel Xeon(Sapphire Rapids) Platinum 8475B , 2.7/3.2 GHz&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Memory&lt;/td&gt; 
   &lt;td&gt;4GB&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Network&lt;/td&gt; 
   &lt;td&gt;15Gbp&lt;/td&gt; 
   &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Driver&lt;/td&gt; 
   &lt;td&gt;40GB x 4&lt;/td&gt; 
   &lt;td&gt;IOPS 3800 / Driver&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/2e4979b5-260c-4f2c-ac12-c87fd558072a"&gt;https://github.com/user-attachments/assets/2e4979b5-260c-4f2c-ac12-c87fd558072a&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;RustFS vs Other object storage&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;RustFS&lt;/th&gt; 
   &lt;th&gt;Other object storage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Powerful Console&lt;/td&gt; 
   &lt;td&gt;Simple and useless Console&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Developed based on Rust language, memory is safer&lt;/td&gt; 
   &lt;td&gt;Developed in Go or C, with potential issues like memory GC/leaks&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Does not report logs to third-party countries&lt;/td&gt; 
   &lt;td&gt;Reporting logs to other third countries may violate national security laws&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Licensed under Apache, more business-friendly&lt;/td&gt; 
   &lt;td&gt;AGPL V3 License and other License, polluted open source and License traps, infringement of intellectual property rights&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Comprehensive S3 support, works with domestic and international cloud providers&lt;/td&gt; 
   &lt;td&gt;Full support for S3, but no local cloud vendor support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Rust-based development, strong support for secure and innovative devices&lt;/td&gt; 
   &lt;td&gt;Poor support for edge gateways and secure innovative devices&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stable commercial prices, free community support&lt;/td&gt; 
   &lt;td&gt;High pricing, with costs up to $250,000 for 1PiB&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;No risk&lt;/td&gt; 
   &lt;td&gt;Intellectual property risks and risks of prohibited uses&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To get started with RustFS, follow these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;One-click installation script (Option 1)​​&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl -O  https://rustfs.com/install_rustfs.sh &amp;amp;&amp;amp; bash install_rustfs.sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Docker Quick Start (Option 2)​​&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; # Latest stable release
 docker run -d -p 9000:9000 -v /data:/data rustfs/rustfs:latest

 # Development version (main branch)
 docker run -d -p 9000:9000 -v /data:/data rustfs/rustfs:main-latest

 # Specific version
 docker run -d -p 9000:9000 -v /data:/data rustfs/rustfs:v1.0.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build from Source (Option 3) - Advanced Users&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For developers who want to build RustFS Docker images from source with multi-architecture support:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Build multi-architecture images locally
./docker-buildx.sh --build-arg RELEASE=latest

# Build and push to registry
./docker-buildx.sh --push

# Build specific version
./docker-buildx.sh --release v1.0.0 --push

# Build for custom registry
./docker-buildx.sh --registry your-registry.com --namespace yourname --push
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;docker-buildx.sh&lt;/code&gt; script supports:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Multi-architecture builds&lt;/strong&gt;: &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Automatic version detection&lt;/strong&gt;: Uses git tags or commit hashes&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Registry flexibility&lt;/strong&gt;: Supports Docker Hub, GitHub Container Registry, etc.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Build optimization&lt;/strong&gt;: Includes caching and parallel builds&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can also use Make targets for convenience:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;make docker-buildx                    # Build locally
make docker-buildx-push               # Build and push
make docker-buildx-version VERSION=v1.0.0  # Build specific version
make help-docker                      # Show all Docker-related commands
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Access the Console&lt;/strong&gt;: Open your web browser and navigate to &lt;code&gt;http://localhost:9000&lt;/code&gt; to access the RustFS console, default username and password is &lt;code&gt;rustfsadmin&lt;/code&gt; .&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Bucket&lt;/strong&gt;: Use the console to create a new bucket for your objects.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Upload Objects&lt;/strong&gt;: You can upload files directly through the console or use S3-compatible APIs to interact with your RustFS instance.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For detailed documentation, including configuration options, API references, and advanced usage, please visit our &lt;a href="https://docs.rustfs.com"&gt;Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions or need assistance, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check the &lt;a href="https://github.com/rustfs/rustfs/discussions/categories/q-a"&gt;FAQ&lt;/a&gt; for common issues and solutions.&lt;/li&gt; 
 &lt;li&gt;Join our &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt; to ask questions and share your experiences.&lt;/li&gt; 
 &lt;li&gt;Open an issue on our &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;GitHub Issues&lt;/a&gt; page for bug reports or feature requests.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.rustfs.com"&gt;Documentation&lt;/a&gt; - The manual you should read&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/releases"&gt;Changelog&lt;/a&gt; - What we broke and fixed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt; - Where the community lives&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Bugs&lt;/strong&gt;: &lt;a href="https://github.com/rustfs/rustfs/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Business&lt;/strong&gt;: &lt;a href="mailto:hello@rustfs.com"&gt;hello@rustfs.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jobs&lt;/strong&gt;: &lt;a href="mailto:jobs@rustfs.com"&gt;jobs@rustfs.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;General Discussion&lt;/strong&gt;: &lt;a href="https://github.com/rustfs/rustfs/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/rustfs/rustfs/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;RustFS is a community-driven project, and we appreciate all contributions. Check out the &lt;a href="https://github.com/rustfs/rustfs/graphs/contributors"&gt;Contributors&lt;/a&gt; page to see the amazing people who have helped make RustFS better.&lt;/p&gt; 
&lt;a href="https://github.com/rustfs/rustfs/graphs/contributors"&gt; &lt;img src="https://opencollective.com/rustfs/contributors.svg?width=890&amp;amp;limit=500&amp;amp;button=false"&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;RustFS&lt;/strong&gt; is a trademark of RustFS, Inc. All other trademarks are the property of their respective owners.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bevyengine/bevy</title>
      <link>https://github.com/bevyengine/bevy</link>
      <description>&lt;p&gt;A refreshingly simple data-driven game engine built in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://bevy.org"&gt;&lt;img src="https://raw.githubusercontent.com/bevyengine/bevy/main/assets/branding/bevy_logo_light_dark_and_dimmed.svg?sanitize=true" alt="Bevy"&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/bevyengine/bevy#license"&gt;&lt;img src="https://img.shields.io/badge/license-MIT%2FApache-blue.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/v/bevy.svg?sanitize=true" alt="Crates.io"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/d/bevy.svg?sanitize=true" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://docs.rs/bevy/latest/bevy/"&gt;&lt;img src="https://docs.rs/bevy/badge.svg?sanitize=true" alt="Docs"&gt;&lt;/a&gt; &lt;a href="https://github.com/bevyengine/bevy/actions"&gt;&lt;img src="https://github.com/bevyengine/bevy/workflows/CI/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/bevy"&gt;&lt;img src="https://img.shields.io/discord/691052431525675048.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Bevy?&lt;/h2&gt; 
&lt;p&gt;Bevy is a refreshingly simple data-driven game engine built in Rust. It is free and open-source forever!&lt;/p&gt; 
&lt;h2&gt;WARNING&lt;/h2&gt; 
&lt;p&gt;Bevy is still in the early stages of development. Important features are missing. Documentation is sparse. A new version of Bevy containing breaking changes to the API is released &lt;a href="https://bevy.org/news/bevy-0-6/#the-train-release-schedule"&gt;approximately once every 3 months&lt;/a&gt;. We provide &lt;a href="https://bevy.org/learn/migration-guides/"&gt;migration guides&lt;/a&gt;, but we can't guarantee migrations will always be easy. Use only if you are willing to work in this environment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally close to "the latest stable release" of Rust.&lt;/p&gt; 
&lt;h2&gt;Design Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Capable&lt;/strong&gt;: Offer a complete 2D and 3D feature set&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Easy for newbies to pick up, but infinitely flexible for power users&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Focused&lt;/strong&gt;: Data-oriented architecture using the Entity Component System paradigm&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modular&lt;/strong&gt;: Use only what you need. Replace what you don't like&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: App logic should run quickly, and when possible, in parallel&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Productive&lt;/strong&gt;: Changes should compile quickly ... waiting isn't fun&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org"&gt;Features&lt;/a&gt;:&lt;/strong&gt; A quick overview of Bevy's features.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/news/"&gt;News&lt;/a&gt;&lt;/strong&gt;: A development blog that covers our progress, plans and shiny new features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt;:&lt;/strong&gt; Bevy's official Quick Start Guide. The best place to start learning Bevy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.rs/bevy"&gt;Bevy Rust API Docs&lt;/a&gt;:&lt;/strong&gt; Bevy's Rust API docs, which are automatically generated from the doc comments in this repo.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;Official Examples&lt;/a&gt;:&lt;/strong&gt; Bevy's dedicated, runnable examples, which are great for digging into specific concepts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/#learning"&gt;Community-Made Learning Resources&lt;/a&gt;&lt;/strong&gt;: More tutorials, documentation, and examples made by the Bevy community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Before contributing or participating in discussions with the community, you should familiarize yourself with our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CODE_OF_CONDUCT.md"&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://discord.gg/bevy"&gt;Discord&lt;/a&gt;:&lt;/strong&gt; Bevy's official discord server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://reddit.com/r/bevy"&gt;Reddit&lt;/a&gt;:&lt;/strong&gt; Bevy's official subreddit.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/discussions"&gt;GitHub Discussions&lt;/a&gt;:&lt;/strong&gt; The best place for questions about Bevy, answered right here!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/"&gt;Bevy Assets&lt;/a&gt;:&lt;/strong&gt; A collection of awesome Bevy projects, tools, plugins and learning materials.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you'd like to help build Bevy, check out the &lt;strong&gt;&lt;a href="https://bevy.org/learn/contribute/introduction"&gt;Contributor's Guide&lt;/a&gt;&lt;/strong&gt;. For simple problems, feel free to &lt;a href="https://github.com/bevyengine/bevy/issues"&gt;open an issue&lt;/a&gt; or &lt;a href="https://github.com/bevyengine/bevy/pulls"&gt;PR&lt;/a&gt; and tackle it yourself!&lt;/p&gt; 
&lt;p&gt;For more complex architecture decisions and experimental mad science, please open an &lt;a href="https://github.com/bevyengine/rfcs"&gt;RFC&lt;/a&gt; (Request For Comments) so we can brainstorm together effectively!&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We recommend checking out the &lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt; for a brief introduction.&lt;/p&gt; 
&lt;p&gt;Follow the &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;Setup guide&lt;/a&gt; to ensure your development environment is set up correctly. Once set up, you can quickly try out the &lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;examples&lt;/a&gt; by cloning this repo and running the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Switch to the correct version (latest release, default is main development branch)
git checkout latest
# Runs the "breakout" example
cargo run --example breakout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To draw a window with standard functionality enabled, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use bevy::prelude::*;

fn main() {
  App::new()
    .add_plugins(DefaultPlugins)
    .run();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fast Compiles&lt;/h3&gt; 
&lt;p&gt;Bevy can be built just fine using default configuration on stable Rust. However for really fast iterative compiles, you should enable the "fast compiles" setup by &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;following the instructions here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;Bevy Cargo Features&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;This &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;list&lt;/a&gt; outlines the different cargo features supported by Bevy. These allow you to customize the Bevy feature set for your use-case.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Bevy is the result of the hard work of many people. A huge thanks to all Bevy contributors, the many open source projects that have come before us, the &lt;a href="https://arewegameyet.rs/"&gt;Rust gamedev ecosystem&lt;/a&gt;, and the many libraries we build on.&lt;/p&gt; 
&lt;p&gt;A huge thanks to Bevy's &lt;a href="https://bevy.org"&gt;generous sponsors&lt;/a&gt;. Bevy will always be free and open source, but it isn't free to make. Please consider &lt;a href="https://bevy.org/donate/"&gt;sponsoring our work&lt;/a&gt; if you like what we're building.&lt;/p&gt; 
&lt;!-- This next line need to stay exactly as is. It is required for BrowserStack sponsorship. --&gt; 
&lt;p&gt;This project is tested with BrowserStack.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Bevy is free, open source and permissively licensed! Except where noted (below and/or in individual files), all code in this repository is dual-licensed under either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MIT License (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option. This means you can select the license you prefer! This dual-licensing approach is the de-facto standard in the Rust ecosystem and there are &lt;a href="https://github.com/bevyengine/bevy/issues/2373"&gt;very good reasons&lt;/a&gt; to include both.&lt;/p&gt; 
&lt;p&gt;Some of the engine's code carries additional copyright notices and license terms due to their external origins. These are generally BSD-like, but exact details vary by crate: If the README of a crate contains a 'License' header (or similar), the additional copyright notices and license terms applicable to that crate will be listed. The above licensing requirement still applies to contributions to those crates, and sections of those crates will carry those license terms. The &lt;a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields"&gt;license&lt;/a&gt; field of each crate will also reflect this. For example, &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/crates/bevy_mikktspace/README.md#license-agreement"&gt;&lt;code&gt;bevy_mikktspace&lt;/code&gt;&lt;/a&gt; has code under the Zlib license (as well as a copyright notice when choosing the MIT license).&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/assets"&gt;assets&lt;/a&gt; included in this repository (for our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/examples/README.md"&gt;examples&lt;/a&gt;) typically fall under different open licenses. These will not be included in your game (unless copied in by you), and they are not distributed in the published bevy crates. See &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CREDITS.md"&gt;CREDITS.md&lt;/a&gt; for the details of the licenses of those files.&lt;/p&gt; 
&lt;h3&gt;Your contributions&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nexus-xyz/nexus-cli</title>
      <link>https://github.com/nexus-xyz/nexus-cli</link>
      <description>&lt;p&gt;Command line interface for supplying proofs to the Nexus network.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/nexus-xyz/nexus-cli/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/nexus-xyz/nexus-cli.svg?sanitize=true" alt="Release"&gt;&lt;/a&gt; &lt;a href="https://github.com/nexus-xyz/nexus-cli/actions"&gt;&lt;img src="https://github.com/nexus-xyz/nexus-cli/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt; &lt;a href="https://github.com/nexus-xyz/nexus-cli/raw/main/LICENSE-APACHE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache_2.0-green.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://github.com/nexus-xyz/nexus-cli/raw/main/LICENSE-MIT"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-green.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://x.com/NexusLabs"&gt;&lt;img src="https://img.shields.io/twitter/follow/NexusLabs" alt="Twitter"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/nexus-xyz"&gt;&lt;img src="https://img.shields.io/badge/Discord-Join-7289da.svg?logo=discord&amp;amp;logoColor=white" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Nexus CLI&lt;/h1&gt; 
&lt;p&gt;A high-performance command-line interface for contributing proofs to the Nexus network.&lt;/p&gt; 
&lt;figure&gt; 
 &lt;a href="https://nexus.xyz/"&gt; &lt;img src="https://raw.githubusercontent.com/nexus-xyz/nexus-cli/main/assets/images/nexus-network-image.png" alt="Nexus Network visualization showing a distributed network of interconnected nodes with a 'Launch Network' button in the center"&gt; &lt;/a&gt; 
 &lt;figcaption&gt; 
  &lt;strong&gt;Verifiable Computation on a Global Scale&lt;/strong&gt;
  &lt;br&gt; We're building a global distributed prover network to unite the world's computers and power a new and better Internet: the Verifiable Internet. Connect to the beta and give it a try today. 
 &lt;/figcaption&gt; 
&lt;/figure&gt; 
&lt;h2&gt;Nexus Network&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://nexus.xyz/"&gt;Nexus&lt;/a&gt; is a global distributed prover network that unites the world's computers to power a new and better Internet: the Verifiable Internet.&lt;/p&gt; 
&lt;p&gt;There have been several testnets so far:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Testnet 0: &lt;a href="https://blog.nexus.xyz/nexus-launches-worlds-first-open-prover-network/"&gt;October 8 – 28, 2024&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Testnet I: &lt;a href="https://blog.nexus.xyz/the-new-nexus-testnet-is-live/"&gt;December 9 – 13, 2024&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Testnet II: &lt;a href="https://blog.nexus.xyz/testnet-ii-is-open/"&gt;February 18 – 22, 2025&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Devnet: &lt;a href="https://docs.nexus.xyz/layer-1/testnet/devnet"&gt;February 22 - June 20 2025&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Testnet III: &lt;a href="https://blog.nexus.xyz/live-everywhere/"&gt;Ongoing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;h4&gt;Precompiled Binary (Recommended)&lt;/h4&gt; 
&lt;p&gt;For the simplest and most reliable installation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl https://cli.nexus.xyz/ | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download and install the latest precompiled binary for your platform.&lt;/li&gt; 
 &lt;li&gt;Prompt you to accept the Terms of Use.&lt;/li&gt; 
 &lt;li&gt;Start the CLI in interactive mode.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The exact installation script is viewable &lt;a href="https://raw.githubusercontent.com/nexus-xyz/nexus-cli/main/public/install.sh"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Non-Interactive Installation&lt;/h4&gt; 
&lt;p&gt;For automated installations (e.g., in CI):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSf https://cli.nexus.xyz/ -o install.sh
chmod +x install.sh
NONINTERACTIVE=1 ./install.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Proving&lt;/h3&gt; 
&lt;p&gt;Proving with the CLI is documented &lt;a href="https://docs.nexus.xyz/layer-1/testnet/cli-node"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To start with an existing node ID, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nexus-cli start --node-id &amp;lt;your-node-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can register your wallet address and create a node ID with the CLI, or at &lt;a href="https://app.nexus.xyz"&gt;app.nexus.xyz&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nexus-cli register-user --wallet-address &amp;lt;your-wallet-address&amp;gt;
nexus-cli register-node
nexus-cli start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;register-user&lt;/code&gt; and &lt;code&gt;register-node&lt;/code&gt; commands will save your credentials to &lt;code&gt;~/.nexus/config.json&lt;/code&gt;. To clear credentials, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nexus-cli logout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For troubleshooting or to see available command line options, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;nexus-cli --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Use Docker&lt;/h3&gt; 
&lt;p&gt;Make sure docker and docker compose have been installed on you machine. check documentation here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/engine/install/"&gt;Install Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Install Docker Compose&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then, modify the node id in the &lt;code&gt;docker-compose.yaml&lt;/code&gt; file, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker compose build --no-cache
docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check log&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker compose logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to shut down, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker compose down
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h2&gt;Terms of Use&lt;/h2&gt; 
&lt;p&gt;Use of the CLI is subject to the &lt;a href="https://nexus.xyz/terms-of-use"&gt;Terms of Use&lt;/a&gt;. First-time users running interactively will be prompted to accept these terms.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Node ID&lt;/h2&gt; 
&lt;p&gt;During the CLI's startup, you'll be asked for your node ID. To skip prompts in a non-interactive environment, manually create a &lt;code&gt;~/.nexus/config.json&lt;/code&gt; in the following format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
   "node_id": "&amp;lt;YOUR NODE ID&amp;gt;"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h2&gt;Get Help&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.nexus.xyz/layer-1/testnet/faq"&gt;Network FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/nexus-xyz"&gt;Discord Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Technical issues? &lt;a href="https://github.com/nexus-xyz/nexus-cli/issues"&gt;Open an issue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;To submit programs to the network for proving, contact &lt;a href="mailto:growth@nexus.xyz"&gt;growth@nexus.xyz&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Interested in contributing to the Nexus Network CLI? Check out our &lt;a href="https://raw.githubusercontent.com/nexus-xyz/nexus-cli/main/CONTRIBUTING.md"&gt;Contributor Guide&lt;/a&gt; for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Development setup instructions&lt;/li&gt; 
 &lt;li&gt;How to report issues and submit pull requests&lt;/li&gt; 
 &lt;li&gt;Our code of conduct and community guidelines&lt;/li&gt; 
 &lt;li&gt;Tips for working with the codebase&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For most users, we recommend using the precompiled binaries as described above. The contributor guide is intended for those who want to modify or improve the CLI itself.&lt;/p&gt; 
&lt;h3&gt;🛠 Developer Guide&lt;/h3&gt; 
&lt;p&gt;The following steps may be required in order to setup a development environment for contributing to the project:&lt;/p&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt update
sudo apt upgrade
sudo apt install build-essential pkg-config libssl-dev git-all
sudo apt install protobuf-compiler
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install using Homebrew
brew install protobuf

# Verify installation
protoc --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/wsl/install"&gt;Install WSL&lt;/a&gt;, then see Linux instructions above.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install using Chocolatey
choco install protobuf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building ProtoBuf files&lt;/h3&gt; 
&lt;p&gt;To build the ProtoBuf files, run the following command in the &lt;code&gt;clients/cli&lt;/code&gt; directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo build --features build_proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Creating a Release&lt;/h3&gt; 
&lt;p&gt;To create a release, update the package version in &lt;code&gt;Cargo.toml&lt;/code&gt;, then create and push a new (annotated) tag, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git tag -a v0.1.2 -m "Release v0.1.2"
git push origin v0.1.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will trigger the GitHub Actions release workflow that compiles binaries and pushes the Docker image, in addition to creating release.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Creating a release through the GitHub UI creates a new release but does &lt;strong&gt;NOT&lt;/strong&gt; trigger the workflow. This leads to a release without a Docker image or binaries, which breaks the installation script.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Nexus CLI is distributed under the terms of both the &lt;a href="https://raw.githubusercontent.com/nexus-xyz/nexus-cli/main/LICENSE-MIT"&gt;MIT License&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/nexus-xyz/nexus-cli/main/LICENSE-APACHE"&gt;Apache License (Version 2.0)&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>raphamorim/rio</title>
      <link>https://github.com/raphamorim/rio</link>
      <description>&lt;p&gt;A hardware-accelerated GPU terminal emulator focusing to run in desktops and browsers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;p align="center"&gt; &lt;img src="https://rioterm.com/assets/rio-logo.png" alt="Rio terminal logo" width="128"&gt; &lt;br&gt;Rio Terminal &lt;/p&gt;&lt;/h1&gt; 
&lt;p align="center"&gt; Rio is a modern terminal built to run everywhere. &lt;br&gt; &lt;a href="https://raw.githubusercontent.com/raphamorim/rio/main/#about"&gt;About&lt;/a&gt; · &lt;a href="https://rioterm.com/docs/install"&gt;Install&lt;/a&gt; · &lt;a href="https://rioterm.com/docs/config"&gt;Config&lt;/a&gt; · &lt;a href="https://rioterm.com/docs/releases"&gt;Changelog&lt;/a&gt; · &lt;a href="https://github.com/sponsors/raphamorim"&gt;Sponsor&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;⚠️ Development Notice&lt;/strong&gt;: We are currently in the process of releasing Rio 0.3.0, which includes major performance improvements and architectural changes. The main branch is under active development and may be unstable. For stable usage, please use &lt;a href="https://github.com/raphamorim/rio/releases"&gt;v0.2.20 or below&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Documentation: &lt;a href="https://rioterm.com"&gt;https://rioterm.com&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you are using or want to help in any way please consider to donate via &lt;a href="https://github.com/sponsors/raphamorim"&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Rio would not be possible without &lt;a href="https://github.com/alacritty/alacritty/"&gt;Alacritty&lt;/a&gt;, since a lot of Rio functionalities (e.g: ANSI parser, events, processor) was originally written (and still uses a good amount) of Alacritty code.&lt;/p&gt; 
&lt;h2&gt;Supporting the Project&lt;/h2&gt; 
&lt;p&gt;If you use and like Rio, please consider sponsoring it: your support helps to cover the fees required to maintain the project and to validate the time spent working on it!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sponsors/raphamorim"&gt;&lt;img src="https://img.shields.io/github/sponsors/raphamorim?label=Sponsor%20Rio&amp;amp;logo=github&amp;amp;style=for-the-badge" alt="Sponsor Rio terminal"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Packaging&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/rio-terminal/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/rio-terminal.svg?columns=3" alt="Packaging status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Platforms&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Details&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MacOs &lt;em&gt;as desktop application&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://rioterm.com/docs/install/macos"&gt;Installation guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux &lt;em&gt;as desktop application&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://rioterm.com/docs/install/linux"&gt;Installation guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows &lt;em&gt;as desktop application&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://rioterm.com/docs/install/windows"&gt;Installation guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web Browser &lt;em&gt;(WebAssembly)&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;(Sugarloaf is ready but Rio still need to be ported)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Demo with split and CRT on MacOS&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/raphamorim/rio/main/docs/static/assets/posts/0.2.0/demo-rio.png" alt="Demo Rio 0.2.0 on MacOS"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Demo with blurred background on Linux&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/raphamorim/rio/main/docs/static/assets/demos/demos-nixos-blur.png" alt="Demo blurred background"&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Demo of Rio running on a Steam Deck&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/raphamorim/rio/main/docs/static/assets/demos/demo-flatpak-steamdeck.jpg" alt="Demo of Rio running on a Steam Deck"&gt;&lt;/p&gt; 
&lt;h2&gt;Minimal stable rust version&lt;/h2&gt; 
&lt;p&gt;Rio's MSRV is 1.87.0.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gleam-lang/gleam</title>
      <link>https://github.com/gleam-lang/gleam</link>
      <description>&lt;p&gt;⭐️ A friendly language for building type-safe, scalable systems!&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/gleam-lang/gleam/main/images/lucy.png" alt="Lucy, Gleam's mascot"&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/gleam-lang/gleam/releases"&gt;&lt;img src="https://img.shields.io/github/release/gleam-lang/gleam" alt="GitHub release"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/Fm8Pwmy"&gt;&lt;img src="https://img.shields.io/discord/768594524158427167?color=blue" alt="Discord chat"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;!-- A spacer --&gt; 
&lt;div&gt;
 &amp;nbsp;
&lt;/div&gt; 
&lt;p&gt;Gleam is a friendly language for building type-safe systems that scale! For more information see &lt;a href="https://gleam.run"&gt;the website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Gleam is kindly supported by its sponsors. If you would like to support Gleam please consider sponsoring its development &lt;a href="https://github.com/sponsors/lpil"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Thank you to our sponsors! Gleam would not be possible without you.&lt;/p&gt; 
&lt;!-- Below this line this file is autogenerated --&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/agundy"&gt;Aaron Gunderson&lt;/a&gt; - &lt;a href="https://github.com/abeljim"&gt;Abel Jimenez&lt;/a&gt; - &lt;a href="https://github.com/ad-ops"&gt;ad-ops&lt;/a&gt; - &lt;a href="https://github.com/AdamBrodzinski"&gt;Adam Brodzinski&lt;/a&gt; - &lt;a href="https://github.com/adjohnston"&gt;Adam Johnston&lt;/a&gt; - &lt;a href="https://github.com/adam-wyluda"&gt;Adam Wyłuda&lt;/a&gt; - &lt;a href="https://github.com/thebugcatcher"&gt;Adi Iyengar&lt;/a&gt; - &lt;a href="https://github.com/amouat"&gt;Adrian Mouat&lt;/a&gt; - &lt;a href="https://github.com/JitPackJoyride"&gt;Ajit Krishna&lt;/a&gt; - &lt;a href="https://github.com/Guria"&gt;Aleksei Gurianov&lt;/a&gt; - &lt;a href="https://alembic.com.au"&gt;Alembic&lt;/a&gt; - &lt;a href="https://github.com/ahouseago"&gt;Alex Houseago&lt;/a&gt; - &lt;a href="https://github.com/rawhat"&gt;Alex Manning&lt;/a&gt; - &lt;a href="https://github.com/aexvir"&gt;Alex Viscreanu&lt;/a&gt; - &lt;a href="https://github.com/akoutmos"&gt;Alexander Koutmos&lt;/a&gt; - &lt;a href="https://github.com/muonoum"&gt;Alexander Stensrud&lt;/a&gt; - &lt;a href="https://github.com/defgenx"&gt;Alexandre Del Vecchio&lt;/a&gt; - &lt;a href="https://github.com/Acepie"&gt;Ameen Radwan&lt;/a&gt; - &lt;a href="https://github.com/abueide"&gt;Andrea Bueide&lt;/a&gt; - &lt;a href="https://github.com/AndreHogberg"&gt;AndreHogberg&lt;/a&gt; - &lt;a href="https://github.com/andremw"&gt;André Mazoni&lt;/a&gt; - &lt;a href="https://github.com/antharuu"&gt;Antharuu&lt;/a&gt; - &lt;a href="https://github.com/anthony-khong"&gt;Anthony Khong&lt;/a&gt; - &lt;a href="https://github.com/Illbjorn"&gt;Anthony Maxwell&lt;/a&gt; - &lt;a href="https://github.com/amscotti"&gt;Anthony Scotti&lt;/a&gt; - &lt;a href="https://github.com/aweagel"&gt;Arthur Weagel&lt;/a&gt; - &lt;a href="https://github.com/aryairani"&gt;Arya Irani&lt;/a&gt; - &lt;a href="https://github.com/azureflash"&gt;Azure Flash&lt;/a&gt; - &lt;a href="https://github.com/chiroptical"&gt;Barry Moore&lt;/a&gt; - &lt;a href="https://github.com/bartekgorny"&gt;Bartek Górny&lt;/a&gt; - &lt;a href="https://github.com/BenitoEck"&gt;Ben&lt;/a&gt; - &lt;a href="https://github.com/requestben"&gt;Ben Martin&lt;/a&gt; - &lt;a href="https://github.com/bgmarx"&gt;Ben Marx&lt;/a&gt; - &lt;a href="https://github.com/benmyles"&gt;Ben Myles&lt;/a&gt; - &lt;a href="https://github.com/bbkane"&gt;Benjamin Kane&lt;/a&gt; - &lt;a href="https://github.com/drteeth"&gt;Benjamin Moss&lt;/a&gt; - &lt;a href="https://github.com/bgwdotdev"&gt;bgw&lt;/a&gt; - &lt;a href="https://github.com/bjartelund"&gt;Bjarte Aarmo Lund&lt;/a&gt; - &lt;a href="https://github.com/00bpa"&gt;Bjoern Paschen&lt;/a&gt; - &lt;a href="https://github.com/bmehder"&gt;Brad Mehder&lt;/a&gt; - &lt;a href="https://github.com/brettcannon"&gt;Brett Cannon&lt;/a&gt; - &lt;a href="https://github.com/brettkolodny"&gt;Brett Kolodny&lt;/a&gt; - &lt;a href="https://github.com/brian-dawn"&gt;Brian Dawn&lt;/a&gt; - &lt;a href="https://github.com/bglusman"&gt;Brian Glusman&lt;/a&gt; - &lt;a href="https://github.com/bruce"&gt;Bruce Williams&lt;/a&gt; - &lt;a href="https://github.com/nono"&gt;Bruno Michel&lt;/a&gt; - &lt;a href="https://github.com/bucsi"&gt;bucsi&lt;/a&gt; - &lt;a href="https://github.com/camray"&gt;Cam Ray&lt;/a&gt; - &lt;a href="https://github.com/cameronpresley"&gt;Cameron Presley&lt;/a&gt; - &lt;a href="https://github.com/carlomunguia"&gt;Carlo Munguia&lt;/a&gt; - &lt;a href="https://github.com/csaltos"&gt;Carlos Saltos&lt;/a&gt; - &lt;a href="https://github.com/chadselph"&gt;Chad Selph&lt;/a&gt; - &lt;a href="https://github.com/ctdio"&gt;Charlie Duong&lt;/a&gt; - &lt;a href="https://github.com/charlie-n01r"&gt;Charlie Govea&lt;/a&gt; - &lt;a href="https://github.com/choonkeat"&gt;Chew Choon Keat&lt;/a&gt; - &lt;a href="https://github.com/ceedon"&gt;Chris Donnelly&lt;/a&gt; - &lt;a href="https://github.com/Morzaram"&gt;Chris King&lt;/a&gt; - &lt;a href="https://github.com/chrislloyd"&gt;Chris Lloyd&lt;/a&gt; - &lt;a href="https://github.com/utilForever"&gt;Chris Ohk&lt;/a&gt; - &lt;a href="https://github.com/Chriscbr"&gt;Chris Rybicki&lt;/a&gt; - &lt;a href="https://github.com/cvincent"&gt;Chris Vincent&lt;/a&gt; - &lt;a href="https://github.com/christophershirk"&gt;Christopher David Shirk&lt;/a&gt; - &lt;a href="https://github.com/devries"&gt;Christopher De Vries&lt;/a&gt; - &lt;a href="https://github.com/cdaringe"&gt;Christopher Dieringer&lt;/a&gt; - &lt;a href="https://github.com/christopherhjung"&gt;Christopher Jung&lt;/a&gt; - &lt;a href="https://github.com/christhekeele"&gt;Christopher Keele&lt;/a&gt; - &lt;a href="https://github.com/specialblend"&gt;CJ Salem&lt;/a&gt; - &lt;a href="https://github.com/CliffordAnderson"&gt;Clifford Anderson&lt;/a&gt; - &lt;a href="https://github.com/coder"&gt;Coder&lt;/a&gt; - &lt;a href="https://github.com/colelawrence"&gt;Cole Lawrence&lt;/a&gt; - &lt;a href="https://github.com/insanitybit"&gt;Colin&lt;/a&gt; - &lt;a href="https://github.com/Comamoca"&gt;Comamoca&lt;/a&gt; - &lt;a href="https://github.com/comet-ml"&gt;Comet&lt;/a&gt; - &lt;a href="https://github.com/Lucostus"&gt;Constantin (Cleo) Winkler&lt;/a&gt; - &lt;a href="https://github.com/jcorentin"&gt;Corentin J.&lt;/a&gt; - &lt;a href="https://github.com/sdaigo"&gt;Daigo Shitara&lt;/a&gt; - &lt;a href="https://github.com/dvic"&gt;Damir Vandic&lt;/a&gt; - &lt;a href="https://github.com/d2718"&gt;Dan&lt;/a&gt; - &lt;a href="https://github.com/ddresselhaus"&gt;Dan Dresselhaus&lt;/a&gt; - &lt;a href="https://github.com/strongoose"&gt;Dan Strong&lt;/a&gt; - &lt;a href="https://github.com/Daniel-Shunom"&gt;Daniel S Jeremiah&lt;/a&gt; - &lt;a href="https://github.com/DanielleMaywood"&gt;Danielle Maywood&lt;/a&gt; - &lt;a href="https://github.com/ndan"&gt;Daniil Nevdah&lt;/a&gt; - &lt;a href="https://github.com/pinnet"&gt;Danny Arnold&lt;/a&gt; - &lt;a href="https://github.com/despairblue"&gt;Danny Martini&lt;/a&gt; - &lt;a href="https://github.com/dbernheisel"&gt;David Bernheisel&lt;/a&gt; - &lt;a href="https://github.com/davidcornu"&gt;David Cornu&lt;/a&gt; - &lt;a href="https://github.com/dangdennis"&gt;Dennis Dang&lt;/a&gt; - &lt;a href="https://github.com/dennistruemper"&gt;dennistruemper&lt;/a&gt; - &lt;a href="https://github.com/devinalvaro"&gt;devinalvaro&lt;/a&gt; - &lt;a href="https://github.com/diemogebhardt"&gt;Diemo Gebhardt&lt;/a&gt; - &lt;a href="https://github.com/floodfx"&gt;Donnie Flood&lt;/a&gt; - &lt;a href="https://github.com/dbanty"&gt;Dylan Anthony&lt;/a&gt; - &lt;a href="https://github.com/gdcrisp"&gt;Dylan Carlson&lt;/a&gt; - &lt;a href="https://github.com/edhinrichsen"&gt;Ed Hinrichsen&lt;/a&gt; - &lt;a href="https://github.com/edongashi"&gt;Edon Gashi&lt;/a&gt; - &lt;a href="https://github.com/enoonan"&gt;Eileen Noonan&lt;/a&gt; - &lt;a href="https://github.com/dropwhile"&gt;eli&lt;/a&gt; - &lt;a href="https://liberapay.com/ijomeli/"&gt;elke&lt;/a&gt; - &lt;a href="https://github.com/Emma-Fuller"&gt;Emma&lt;/a&gt; - &lt;a href="https://github.com/EMRTS"&gt;EMR Technical Solutions&lt;/a&gt; - &lt;a href="https://github.com/yellowsman"&gt;Endo Shogo&lt;/a&gt; - &lt;a href="https://github.com/ekosz"&gt;Eric Koslow&lt;/a&gt; - &lt;a href="https://github.com/eterps"&gt;Erik Terpstra&lt;/a&gt; - &lt;a href="https://liberapay.com/erikareads/"&gt;erikareads&lt;/a&gt; - &lt;a href="https://github.com/ErikML"&gt;ErikML&lt;/a&gt; - &lt;a href="https://github.com/erlend-axelsson"&gt;erlend-axelsson&lt;/a&gt; - &lt;a href="https://github.com/oberernst"&gt;Ernesto Malave&lt;/a&gt; - &lt;a href="https://github.com/EthanOlpin"&gt;Ethan Olpin&lt;/a&gt; - &lt;a href="https://github.com/evaldobratti"&gt;Evaldo Bratti&lt;/a&gt; - &lt;a href="https://github.com/evanj2357"&gt;Evan Johnson&lt;/a&gt; - &lt;a href="https://github.com/evanasse"&gt;evanasse&lt;/a&gt; - &lt;a href="https://github.com/fabridamicelli"&gt;Fabrizio Damicelli&lt;/a&gt; - &lt;a href="https://github.com/fmesteban"&gt;Fede Esteban&lt;/a&gt; - &lt;a href="https://github.com/yerTools"&gt;Felix&lt;/a&gt; - &lt;a href="https://github.com/nandofarias"&gt;Fernando Farias&lt;/a&gt; - &lt;a href="https://github.com/ffigiel"&gt;Filip Figiel&lt;/a&gt; - &lt;a href="https://github.com/floriank"&gt;Florian Kraft&lt;/a&gt; - &lt;a href="https://github.com/francishamel"&gt;Francis Hamel&lt;/a&gt; - &lt;a href="https://github.com/Frank-III"&gt;frankwang&lt;/a&gt; - &lt;a href="https://github.com/gvrooyen"&gt;G-J van Rooyen&lt;/a&gt; - &lt;a href="https://github.com/gabrielvincent"&gt;Gabriel Vincent&lt;/a&gt; - &lt;a href="https://github.com/olgam4"&gt;gamachexx&lt;/a&gt; - &lt;a href="https://github.com/allenap"&gt;Gavin Panella&lt;/a&gt; - &lt;a href="https://github.com/gahjelle"&gt;Geir Arne Hjelle&lt;/a&gt; - &lt;a href="https://github.com/brasilikum"&gt;Georg Hartmann&lt;/a&gt; - &lt;a href="https://github.com/gmartsenkov"&gt;Georgi Martsenkov&lt;/a&gt; - &lt;a href="https://github.com/ggobbe"&gt;ggobbe&lt;/a&gt; - &lt;a href="https://github.com/giacomocavalieri"&gt;Giacomo Cavalieri&lt;/a&gt; - &lt;a href="https://github.com/giovannibonetti"&gt;Giovanni Kock Bonetti&lt;/a&gt; - &lt;a href="https://github.com/GV14982"&gt;Graham Vasquez&lt;/a&gt; - &lt;a href="https://github.com/YoyoSaur"&gt;Grant Everett&lt;/a&gt; - &lt;a href="https://github.com/nirev"&gt;Guilherme de Maio&lt;/a&gt; - &lt;a href="https://github.com/guillheu"&gt;Guillaume Heu&lt;/a&gt; - &lt;a href="https://github.com/ghivert"&gt;Guillaume Hivert&lt;/a&gt; - &lt;a href="https://github.com/hammad-r-javed"&gt;Hammad Javed&lt;/a&gt; - &lt;a href="https://github.com/kwando"&gt;Hannes Nevalainen&lt;/a&gt; - &lt;a href="https://github.com/ildorn"&gt;Hannes Schnaitter&lt;/a&gt; - &lt;a href="https://github.com/oderwat"&gt;Hans Raaf&lt;/a&gt; - &lt;a href="https://github.com/hayleigh-dot-dev"&gt;Hayleigh Thompson&lt;/a&gt; - &lt;a href="https://github.com/hibachrach"&gt;Hazel Bachrach&lt;/a&gt; - &lt;a href="https://github.com/hdahlheim"&gt;Henning Dahlheim&lt;/a&gt; - &lt;a href="https://github.com/tudborg"&gt;Henrik Tudborg&lt;/a&gt; - &lt;a href="https://github.com/henrysdev"&gt;Henry Warren&lt;/a&gt; - &lt;a href="https://github.com/losfair"&gt;Heyang Zhou&lt;/a&gt; - &lt;a href="https://liberapay.com/Hizuru3/"&gt;Hizuru3&lt;/a&gt; - &lt;a href="https://github.com/hubertmalkowski"&gt;Hubert Małkowski&lt;/a&gt; - &lt;a href="https://github.com/iainh"&gt;Iain H&lt;/a&gt; - &lt;a href="https://github.com/Ian-GL"&gt;Ian González&lt;/a&gt; - &lt;a href="https://github.com/ianmjones"&gt;Ian M. Jones&lt;/a&gt; - &lt;a href="https://github.com/igordsm"&gt;Igor Montagner&lt;/a&gt; - &lt;a href="https://github.com/inoas"&gt;inoas&lt;/a&gt; - &lt;a href="https://github.com/graphiteisaac"&gt;Isaac&lt;/a&gt; - &lt;a href="https://github.com/isaacharrisholt"&gt;Isaac Harris-Holt&lt;/a&gt; - &lt;a href="https://github.com/imcquee"&gt;Isaac McQueen&lt;/a&gt; - &lt;a href="https://github.com/bozso"&gt;István Bozsó&lt;/a&gt; - &lt;a href="https://github.com/ivarvong"&gt;Ivar Vong&lt;/a&gt; - &lt;a href="https://github.com/jacobdalamb"&gt;Jacob Lamb&lt;/a&gt; - &lt;a href="https://github.com/jakecleary"&gt;Jake Cleary&lt;/a&gt; - &lt;a href="https://github.com/jzwood"&gt;Jake Wood&lt;/a&gt; - &lt;a href="https://github.com/jakob753951"&gt;Jakob Ladegaard Møller&lt;/a&gt; - &lt;a href="https://github.com/jamesbirtles"&gt;James Birtles&lt;/a&gt; - &lt;a href="https://github.com/jamesmacaulay"&gt;James MacAulay&lt;/a&gt; - &lt;a href="https://github.com/janpieper"&gt;Jan Pieper&lt;/a&gt; - &lt;a href="https://github.com/monzool"&gt;Jan Skriver Sørensen&lt;/a&gt; - &lt;a href="https://github.com/hypirion"&gt;Jean Niklas L'orange&lt;/a&gt; - &lt;a href="https://github.com/MightyGoldenOctopus"&gt;Jean-Adrien Ducastaing&lt;/a&gt; - &lt;a href="https://github.com/jlgeering"&gt;Jean-Luc Geering&lt;/a&gt; - &lt;a href="https://github.com/jihem"&gt;Jean-Marc QUERE&lt;/a&gt; - &lt;a href="https://github.com/okkdev"&gt;Jen Stehlik&lt;/a&gt; - &lt;a href="https://github.com/shepherdjerred"&gt;Jerred Shepherd&lt;/a&gt; - &lt;a href="https://github.com/jiangplus"&gt;jiangplus&lt;/a&gt; - &lt;a href="https://github.com/hunkyjimpjorps"&gt;Jimpjorps™&lt;/a&gt; - &lt;a href="https://github.com/joeykilpatrick"&gt;Joey Kilpatrick&lt;/a&gt; - &lt;a href="https://github.com/joeytrapp"&gt;Joey Trapp&lt;/a&gt; - &lt;a href="https://github.com/johan-st"&gt;Johan Strand&lt;/a&gt; - &lt;a href="https://github.com/JohnBjrk"&gt;John Björk&lt;/a&gt; - &lt;a href="https://github.com/jmpavlick"&gt;John Pavlick&lt;/a&gt; - &lt;a href="https://github.com/jrstrunk"&gt;John Strunk&lt;/a&gt; - &lt;a href="https://github.com/xjojorx"&gt;Jojor&lt;/a&gt; - &lt;a href="https://github.com/jonlambert"&gt;Jon Lambert&lt;/a&gt; - &lt;a href="https://github.com/igern"&gt;Jonas E. P&lt;/a&gt; - &lt;a href="https://github.com/JonasHedEng"&gt;Jonas Hedman Engström&lt;/a&gt; - &lt;a href="https://github.com/jooaf"&gt;jooaf&lt;/a&gt; - &lt;a href="https://github.com/joseph-lozano"&gt;Joseph Lozano&lt;/a&gt; - &lt;a href="https://github.com/joshocalico"&gt;Joshua Steele&lt;/a&gt; - &lt;a href="https://github.com/nineluj"&gt;Julian Hirn&lt;/a&gt; - &lt;a href="https://liberapay.com/d2quadra/"&gt;Julian Lukwata&lt;/a&gt; - &lt;a href="https://github.com/schurhammer"&gt;Julian Schurhammer&lt;/a&gt; - &lt;a href="https://github.com/justinlubin"&gt;Justin Lubin&lt;/a&gt; - &lt;a href="https://github.com/Neofox"&gt;Jérôme Schaeffer&lt;/a&gt; - &lt;a href="https://github.com/Kamila-P"&gt;KamilaP&lt;/a&gt; - &lt;a href="https://github.com/jkbrinso"&gt;Kemp Brinson&lt;/a&gt; - &lt;a href="https://github.com/keroami"&gt;Kero van Gelder&lt;/a&gt; - &lt;a href="https://github.com/kevinschweikert"&gt;Kevin Schweikert&lt;/a&gt; - &lt;a href="https://github.com/hamptokr"&gt;Kramer Hampton&lt;/a&gt; - &lt;a href="https://github.com/Bearfinn"&gt;Kritsada Sunthornwutthikrai&lt;/a&gt; - &lt;a href="https://github.com/krzysztofgb"&gt;Krzysztof Gasienica-Bednarz&lt;/a&gt; - &lt;a href="https://github.com/leah-u"&gt;Leah Ulmschneider&lt;/a&gt; - &lt;a href="https://github.com/leostera"&gt;Leandro Ostera&lt;/a&gt; - &lt;a href="https://github.com/leejarvis"&gt;Lee Jarvis&lt;/a&gt; - &lt;a href="https://github.com/rcoder"&gt;Lennon Day-Reynolds&lt;/a&gt; - &lt;a href="https://github.com/leonqadirie"&gt;Leon Qadirie&lt;/a&gt; - &lt;a href="https://github.com/LeartS"&gt;Leonardo Donelli&lt;/a&gt; - &lt;a href="https://github.com/lexx27"&gt;Lexx&lt;/a&gt; - &lt;a href="https://github.com/defp"&gt;lidashuang&lt;/a&gt; - &lt;a href="https://github.com/LilyRose2798"&gt;Lily Rose&lt;/a&gt; - &lt;a href="https://github.com/lbjarre"&gt;Lukas Bjarre&lt;/a&gt; - &lt;a href="https://github.com/lamdor"&gt;Luke Amdor&lt;/a&gt; - &lt;a href="https://github.com/2kool4idkwhat"&gt;Luna&lt;/a&gt; - &lt;a href="https://github.com/manuel-rubio"&gt;Manuel Rubio&lt;/a&gt; - &lt;a href="https://github.com/ideaMarcos"&gt;Marcos&lt;/a&gt; - &lt;a href="https://github.com/marcusandre"&gt;marcusandre&lt;/a&gt; - &lt;a href="https://github.com/AYM1607"&gt;Mariano Uvalle&lt;/a&gt; - &lt;a href="https://github.com/mariuskalvo"&gt;Marius Kalvø&lt;/a&gt; - &lt;a href="https://github.com/mkdynamic"&gt;Mark Dodwell&lt;/a&gt; - &lt;a href="https://github.com/markholmes"&gt;Mark Holmes&lt;/a&gt; - &lt;a href="https://github.com/markmark206"&gt;Mark Markaryan&lt;/a&gt; - &lt;a href="https://github.com/Janiczek"&gt;Martin Janiczek&lt;/a&gt; - &lt;a href="https://github.com/poelstra"&gt;Martin Poelstra&lt;/a&gt; - &lt;a href="https://github.com/rechsteiner"&gt;Martin Rechsteiner &lt;/a&gt; - &lt;a href="https://github.com/martonkaufmann"&gt;martonkaufmann&lt;/a&gt; - &lt;a href="https://github.com/mwarger"&gt;Mat Warger&lt;/a&gt; - &lt;a href="https://github.com/han-tyumi"&gt;Matt Champagne&lt;/a&gt; - &lt;a href="https://github.com/mhheise"&gt;Matt Heise&lt;/a&gt; - &lt;a href="https://github.com/m"&gt;Matt Mullenweg&lt;/a&gt; - &lt;a href="https://github.com/matthewrobinsondev"&gt;Matt Robinson&lt;/a&gt; - &lt;a href="https://github.com/matt-savvy"&gt;Matt Savoia&lt;/a&gt; - &lt;a href="https://github.com/mattvanhorn"&gt;Matt Van Horn&lt;/a&gt; - &lt;a href="https://github.com/matthewj-dev"&gt;Matthew Jackson&lt;/a&gt; - &lt;a href="https://github.com/mwhitworth"&gt;Matthew Whitworth&lt;/a&gt; - &lt;a href="https://github.com/maxwelldb"&gt;Max Bridges&lt;/a&gt; - &lt;a href="https://github.com/maxmcd"&gt;Max McDonnell&lt;/a&gt; - &lt;a href="https://github.com/metame"&gt;metame&lt;/a&gt; - &lt;a href="https://github.com/metatexx"&gt;METATEXX GmbH&lt;/a&gt; - &lt;a href="https://github.com/amiroff"&gt;Metin Emiroğlu&lt;/a&gt; - &lt;a href="https://github.com/stunthamster"&gt;Michael Duffy&lt;/a&gt; - &lt;a href="https://github.com/michaeljones"&gt;Michael Jones&lt;/a&gt; - &lt;a href="https://github.com/monocursive"&gt;Michael Mazurczak&lt;/a&gt; - &lt;a href="https://github.com/mrmcc3"&gt;Michael McClintock&lt;/a&gt; - &lt;a href="https://github.com/karlsson"&gt;Mikael Karlsson&lt;/a&gt; - &lt;a href="https://github.com/mroach"&gt;Mike Roach&lt;/a&gt; - &lt;a href="https://liberapay.com/mikej/"&gt;Mikey J&lt;/a&gt; - &lt;a href="https://github.com/MoeDevelops"&gt;MoeDev&lt;/a&gt; - &lt;a href="https://github.com/rykawamu"&gt;MzRyuKa&lt;/a&gt; - &lt;a href="https://github.com/n8nio"&gt;n8n - Workflow Automation&lt;/a&gt; - &lt;a href="https://github.com/natanaelsirqueira"&gt;Natanael Sirqueira&lt;/a&gt; - &lt;a href="https://github.com/nathanielknight"&gt;Nathaniel Knight&lt;/a&gt; - &lt;a href="https://github.com/NFIBrokerage"&gt;NFIBrokerage&lt;/a&gt; - &lt;a href="https://github.com/nchapman"&gt;Nick Chapman&lt;/a&gt; - &lt;a href="https://github.com/ndreynolds"&gt;Nick Reynolds&lt;/a&gt; - &lt;a href="https://github.com/NicklasXYZ"&gt;Nicklas Sindlev Andersen&lt;/a&gt; - &lt;a href="https://github.com/NicoVIII"&gt;NicoVIII&lt;/a&gt; - &lt;a href="https://github.com/mrniket"&gt;Niket Shah&lt;/a&gt; - &lt;a href="https://github.com/blink1415"&gt;Nikolai Steen Kjosnes&lt;/a&gt; - &lt;a href="https://github.com/ninanomenon"&gt;Ninaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/a&gt; - &lt;a href="http://www.ninefx.com"&gt;NineFX&lt;/a&gt; - &lt;a href="https://github.com/Nezteb"&gt;Noah Betzen&lt;/a&gt; - &lt;a href="https://github.com/nomio"&gt;Nomio&lt;/a&gt; - &lt;a href="https://github.com/nunulk"&gt;nunulk&lt;/a&gt; - &lt;a href="https://github.com/oceanlewis"&gt;Ocean&lt;/a&gt; - &lt;a href="https://github.com/osebelin"&gt;Olaf Sebelin&lt;/a&gt; - &lt;a href="https://github.com/OldhamMade"&gt;OldhamMade&lt;/a&gt; - &lt;a href="https://github.com/CanadaHonk"&gt;Oliver Medhurst&lt;/a&gt; - &lt;a href="https://github.com/otosky"&gt;Oliver Tosky&lt;/a&gt; - &lt;a href="https://github.com/nnuuvv"&gt;ollie&lt;/a&gt; - &lt;a href="https://github.com/optizio"&gt;optizio&lt;/a&gt; - &lt;a href="https://github.com/Davorak"&gt;Patrick Wheeler&lt;/a&gt; - &lt;a href="https://github.com/pguse"&gt;Paul Guse&lt;/a&gt; - &lt;a href="https://github.com/Tulkdan"&gt;Pedro Correa&lt;/a&gt; - &lt;a href="https://github.com/petejodo"&gt;Pete Jodo&lt;/a&gt; - &lt;a href="https://github.com/pvsr"&gt;Peter Rice&lt;/a&gt; - &lt;a href="https://github.com/philpax"&gt;Philpax&lt;/a&gt; - &lt;a href="https://github.com/pierrot-lc"&gt;Pierrot&lt;/a&gt; - &lt;a href="https://github.com/qdentity"&gt;Qdentity&lt;/a&gt; - &lt;a href="https://github.com/raquentin"&gt;Race Williams&lt;/a&gt; - &lt;a href="https://github.com/stoft"&gt;Rasmus&lt;/a&gt; - &lt;a href="https://github.com/chouzar"&gt;Raúl Chouza &lt;/a&gt; - &lt;a href="https://github.com/renatillas"&gt;re.natillas&lt;/a&gt; - &lt;a href="https://github.com/redmar"&gt;Redmar Kerkhoff&lt;/a&gt; - &lt;a href="https://github.com/reillysiemens"&gt;Reilly Tucker Siemens&lt;/a&gt; - &lt;a href="https://github.com/renatomassaro"&gt;Renato Massaro&lt;/a&gt; - &lt;a href="https://github.com/renovatorruler"&gt;Renovator&lt;/a&gt; - &lt;a href="https://github.com/richard-viney"&gt;Richard Viney&lt;/a&gt; - &lt;a href="https://github.com/rico"&gt;Rico Leuthold&lt;/a&gt; - &lt;a href="https://github.com/rinx"&gt;Rintaro Okamura&lt;/a&gt; - &lt;a href="https://github.com/ripta"&gt;Ripta Pasay&lt;/a&gt; - &lt;a href="https://github.com/TanklesXL"&gt;Robert Attard&lt;/a&gt; - &lt;a href="https://github.com/rellen"&gt;Robert Ellen&lt;/a&gt; - &lt;a href="https://github.com/malkomalko"&gt;Robert Malko&lt;/a&gt; - &lt;a href="https://github.com/Papipo"&gt;Rodrigo Álvarez&lt;/a&gt; - &lt;a href="https://liberapay.com/Karakunai/"&gt;Ronan Harris&lt;/a&gt; - &lt;a href="https://github.com/rotabull"&gt;Rotabull&lt;/a&gt; - &lt;a href="https://github.com/reinefjord"&gt;Rupus Reinefjord&lt;/a&gt; - &lt;a href="https://github.com/ustitc"&gt;Ruslan Ustitc&lt;/a&gt; - &lt;a href="https://github.com/samaaron"&gt;Sam Aaron&lt;/a&gt; - &lt;a href="https://github.com/metruzanca"&gt;Sam Zanca&lt;/a&gt; - &lt;a href="https://github.com/soulsam480"&gt;sambit&lt;/a&gt; - &lt;a href="https://github.com/bkspace"&gt;Sammy Isseyegh&lt;/a&gt; - &lt;a href="https://github.com/castletaste"&gt;Savva&lt;/a&gt; - &lt;a href="https://github.com/sasa1977"&gt;Saša Jurić&lt;/a&gt; - &lt;a href="https://github.com/scotttrinh"&gt;Scott Trinh&lt;/a&gt; - &lt;a href="https://github.com/scottwey"&gt;Scott Wey&lt;/a&gt; - &lt;a href="https://github.com/star-szr"&gt;Scott Zhu Reeves&lt;/a&gt; - &lt;a href="https://github.com/seancribbs"&gt;Sean Cribbs&lt;/a&gt; - &lt;a href="https://github.com/seanjensengrey"&gt;Sean Jensen-Grey&lt;/a&gt; - &lt;a href="https://github.com/SeanRoberts"&gt;Sean Roberts&lt;/a&gt; - &lt;a href="https://github.com/sporto"&gt;Sebastian Porto&lt;/a&gt; - &lt;a href="https://github.com/tehprofessor"&gt;Seve Salazar&lt;/a&gt; - &lt;a href="https://github.com/codemonkey76"&gt;Shane Poppleton&lt;/a&gt; - &lt;a href="https://github.com/sigmasternchen"&gt;Sigma&lt;/a&gt; - &lt;a href="https://github.com/simonewebdesign"&gt;simone&lt;/a&gt; - &lt;a href="https://github.com/bytesource"&gt;Stefan&lt;/a&gt; - &lt;a href="https://github.com/sthagen"&gt;Stefan Hagen&lt;/a&gt; - &lt;a href="https://github.com/steinareliassen"&gt;Steinar Eliassen&lt;/a&gt; - &lt;a href="https://github.com/Qard"&gt;Stephen Belanger&lt;/a&gt; - &lt;a href="https://github.com/Strandinator"&gt;Strandinator&lt;/a&gt; - &lt;a href="https://github.com/slafs"&gt;Sławomir Ehlert&lt;/a&gt; - &lt;a href="https://github.com/takasehideki"&gt;takasehideki&lt;/a&gt; - &lt;a href="https://github.com/Theosaurus-Rex"&gt;Theo Harris&lt;/a&gt; - &lt;a href="https://github.com/thomaswhyyou"&gt;Thomas&lt;/a&gt; - &lt;a href="https://github.com/tcoopman"&gt;Thomas Coopman&lt;/a&gt; - &lt;a href="https://github.com/ernstla"&gt;Thomas Ernst&lt;/a&gt; - &lt;a href="https://github.com/tmbrwn"&gt;Tim Brown&lt;/a&gt; - &lt;a href="https://github.com/timgluz"&gt;Timo Sulg&lt;/a&gt; - &lt;a href="https://github.com/tomalexhughes"&gt;Tom Hughes&lt;/a&gt; - &lt;a href="https://github.com/tomjschuster"&gt;Tom Schuster&lt;/a&gt; - &lt;a href="https://github.com/tomekowal"&gt;Tomasz Kowal&lt;/a&gt; - &lt;a href="https://github.com/tommaisey"&gt;tommaisey&lt;/a&gt; - &lt;a href="https://github.com/TristanCacqueray"&gt;Tristan de Cacqueray&lt;/a&gt; - &lt;a href="https://github.com/tsloughter"&gt;Tristan Sloughter&lt;/a&gt; - &lt;a href="https://github.com/lucamtudor"&gt;Tudor Luca&lt;/a&gt; - &lt;a href="https://github.com/tymak"&gt;tymak&lt;/a&gt; - &lt;a href="https://github.com/vvzen"&gt;Valerio Viperino&lt;/a&gt; - &lt;a href="https://github.com/bondiano"&gt;Vassiliy Kuzenkov&lt;/a&gt; - &lt;a href="https://github.com/sandsower"&gt;Vic Valenzuela&lt;/a&gt; - &lt;a href="https://github.com/rodrigues"&gt;Victor Rodrigues&lt;/a&gt; - &lt;a href="https://github.com/PerpetualPossum"&gt;Viv Verner&lt;/a&gt; - &lt;a href="https://github.com/yelps"&gt;Volker Rabe&lt;/a&gt; - &lt;a href="https://github.com/Whoops"&gt;Walton Hoops&lt;/a&gt; - &lt;a href="https://github.com/weizhliu"&gt;Weizheng Liu&lt;/a&gt; - &lt;a href="https://github.com/Willyboar"&gt;Willyboar&lt;/a&gt; - &lt;a href="https://github.com/wilsonsilva"&gt;Wilson Silva&lt;/a&gt; - &lt;a href="https://github.com/HymanZHAN"&gt;Xucong Zhan&lt;/a&gt; - &lt;a href="https://github.com/yamen"&gt;Yamen Sader&lt;/a&gt; - &lt;a href="https://github.com/Yasuo-Higano"&gt;Yasuo Higano&lt;/a&gt; - &lt;a href="https://github.com/yoshi-monster"&gt;yoshi~ &lt;/a&gt; - &lt;a href="https://github.com/gasparinzsombor"&gt;Zsombor Gasparin&lt;/a&gt; - &lt;a href="https://github.com/zwubs"&gt;ZWubs&lt;/a&gt; - &lt;a href="https://liberapay.com/~1847917/"&gt;~1847917&lt;/a&gt; - &lt;a href="https://liberapay.com/~1867501/"&gt;~1867501&lt;/a&gt; - &lt;a href="https://github.com/eberfreitas"&gt;Éber Freitas Dias&lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitbutlerapp/gitbutler</title>
      <link>https://github.com/gitbutlerapp/gitbutler</link>
      <description>&lt;p&gt;The GitButler version control client, backed by Git, powered by Tauri/Rust/Svelte&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img align="center" width="128px" src="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/crates/gitbutler-tauri/icons/128x128@2x.png"&gt; 
 &lt;h1 align="center"&gt;&lt;b&gt;GitButler&lt;/b&gt;&lt;/h1&gt; 
 &lt;p align="center"&gt; Git branch management tool, built from the ground up for modern workflows &lt;br&gt; &lt;a href="https://gitbutler.com"&gt;&lt;strong&gt;gitbutler.com »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;b&gt;Download for &lt;/b&gt; macOS (&lt;a href="https://app.gitbutler.com/downloads/release/darwin/aarch64/dmg"&gt;Apple Silicon&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/darwin/x86_64/dmg"&gt;Intel&lt;/a&gt;) · Linux (&lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/gz"&gt;AppImage&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/deb"&gt;deb&lt;/a&gt;) · Windows (&lt;a href="https://app.gitbutler.com/downloads/release/windows/x86_64/msi"&gt;msi&lt;/a&gt;) &lt;br&gt; &lt;br&gt; (Unstable Nightly releases can be found &lt;a href="https://app.gitbutler.com/downloads"&gt;here&lt;/a&gt;) &lt;/p&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/bf9bdb33-a979-47a0-b2b2-8fff5ea53afb" alt="gitbutler_client"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml"&gt;&lt;img src="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml/badge.svg?sanitize=true" alt="CI"&gt;&lt;/a&gt; &lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=gitbutler"&gt;&lt;img src="https://img.shields.io/badge/Twitter-black?logo=x&amp;amp;logoColor=white" alt="TWEET"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;&lt;img src="https://img.shields.io/discord/1060193121130000425?label=Discord&amp;amp;color=5865F2" alt="DISCORD"&gt;&lt;/a&gt; &lt;a href="https://www.instagram.com/gitbutler/"&gt;&lt;img src="https://img.shields.io/badge/Instagram-E4405F?logo=instagram&amp;amp;logoColor=white" alt="INSTA"&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@gitbutlerapp"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UCEwkZIHGqsTGYvX8wgD0LoQ" alt="YOUTUBE"&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/gitbutlerapp/gitbutler"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="DEEPWIKI"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/fb23382bcf57c609832661874d3019a43555d6ae.svg?sanitize=true" alt="Alt" title="Repobeats analytics for GitButler"&gt;&lt;/p&gt; 
&lt;p&gt;GitButler is a git client that lets you work on multiple branches at the same time. It allows you to quickly organize file changes into separate branches while still having them applied to your working directory. You can then push branches individually to your remote, or directly create pull requests.&lt;/p&gt; 
&lt;p&gt;In a nutshell, it's a more flexible version of &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git rebase -i&lt;/code&gt;, allowing you to efficiently multitask across branches.&lt;/p&gt; 
&lt;h2&gt;How Does It Work?&lt;/h2&gt; 
&lt;p&gt;GitButler keeps track of uncommitted changes in a layer on top of Git. Changes to files or parts of files can be grouped into what we call virtual branches. Whenever you are happy with the contents of a virtual branch, you can push it to a remote. GitButler makes sure that the state of other virtual branches is kept separate.&lt;/p&gt; 
&lt;h2&gt;How Do GB's Virtual Branches Differ From Git Branches?&lt;/h2&gt; 
&lt;p&gt;The branches that we know and love in Git are separate universes, and switching between them is a full context switch. GitButler allows you to work with multiple branches in parallel in the same working directory. This effectively means having the content of multiple branches available at the same time.&lt;/p&gt; 
&lt;p&gt;GitButler is aware of changes before they are committed. This allows it to keep a record of which virtual branch each individual diff belongs to. Effectively, this means that you can separate out individual branches with their content at any time to push them to a remote or to unapply them from your working directory.&lt;/p&gt; 
&lt;p&gt;And finally, while in Git it is preferable that you create your desired branch ahead of time, using GitButler you can move changes between virtual branches at any point during development.&lt;/p&gt; 
&lt;h2&gt;Why GitButler?&lt;/h2&gt; 
&lt;p&gt;We love Git. Our own &lt;a href="https://github.com/schacon"&gt;@schacon&lt;/a&gt; has even published the &lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git&lt;/a&gt; book. At the same time, Git's user interface hasn't been fundamentally changed for 15 years. While it was written for Linux kernel devs sending patches to each other over mailing lists, most developers today have different workflows and needs.&lt;/p&gt; 
&lt;p&gt;Instead of trying to fit the semantics of the Git CLI into a graphical interface, we are starting with the developer workflow and mapping it back to Git.&lt;/p&gt; 
&lt;h2&gt;Tech&lt;/h2&gt; 
&lt;p&gt;GitButler is a &lt;a href="https://tauri.app/"&gt;Tauri&lt;/a&gt;-based application. Its UI is written in &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; using &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; and its backend is written in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Main Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Virtual Branches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Organize work on multiple branches simultaneously, rather than constantly switching branches&lt;/li&gt; 
   &lt;li&gt;Automatically create new branches when needed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy Commit Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Undo, Amend and Squash commits by dragging and dropping&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Undo Timeline&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Logs all operations and changes and allows you to easily undo or revert any operation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Integration&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Authenticate to GitHub to open Pull Requests, list branches and statuses and more&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy SSH Key Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;GitButler can generate an SSH key to upload to GitHub automatically&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Tooling&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically write commit messages based on your work in progress&lt;/li&gt; 
   &lt;li&gt;Automatically create descriptive branch names&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Commit Signing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Easy commit signing with GPG or SSH&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Uses&lt;/h2&gt; 
&lt;h3&gt;Fixing a Bug While Working on a Feature&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say that while developing a feature, you encounter a bug that you wish to fix. It's often desirable that you ship the fix as a separate contribution (Pull request).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git you can stash your changes and switch to another branch, where you can commit, and push your fix.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;With GitButler&lt;/em&gt; you simply assign your fix to a separate virtual branch, which you can individually push (or directly create a PR). An additional benefit is that you can retain the fix in your working directory while waiting for CI and/or code review.&lt;/p&gt; 
&lt;h3&gt;Trying Someone Else's Branch Together With My Work in Progress&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say you want to test a branch from someone else for the purpose of code review.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git trying out someone else's branch is a full context switch away from your own work. &lt;em&gt;With GitButler&lt;/em&gt; you can apply and unapply (add / remove) any remote branch directly into your working directory.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find our end user documentation at: &lt;a href="https://docs.gitbutler.com"&gt;https://docs.gitbutler.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Bugs and Feature Requests&lt;/h2&gt; 
&lt;p&gt;If you have a bug or feature request, feel free to open an &lt;a href="https://github.com/gitbutlerapp/gitbutler/issues/new"&gt;issue&lt;/a&gt;, or &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;join our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AI Commit Message Generation&lt;/h2&gt; 
&lt;p&gt;Commit message generation is an opt-in feature. You can enable it while adding your repository for the first time or later in the project settings.&lt;/p&gt; 
&lt;p&gt;Currently, GitButler uses OpenAI's API for diff summarization, which means that if enabled, code diffs would be sent to OpenAI's servers.&lt;/p&gt; 
&lt;p&gt;Our goal is to make this feature more modular such that in the future you can modify the prompt as well as plug a different LLM endpoints (including local ones).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;So you want to help out? Please check out the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;p&gt;If you want to skip right to getting the code to actually compile, take a look at the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/DEVELOPMENT.md"&gt;DEVELOPMENT.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Want to show your support? Add a GitButler badge to your project's README:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-md"&gt;[![GitButler](https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D)](https://gitbutler.com/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>block/goose</title>
      <link>https://github.com/block/goose</link>
      <description>&lt;p&gt;an open source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLM&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;codename goose&lt;/h1&gt; 
 &lt;p&gt;&lt;em&gt;a local, extensible, open source AI agent that automates engineering tasks&lt;/em&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt; &lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://discord.gg/7GaTvbDwga"&gt; &lt;img src="https://img.shields.io/discord/1287729918100246654?logo=discord&amp;amp;logoColor=white&amp;amp;label=Join+Us&amp;amp;color=blueviolet" alt="Discord"&gt; &lt;/a&gt; &lt;a href="https://github.com/block/goose/actions/workflows/ci.yml"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/block/goose/ci.yml?branch=main" alt="CI"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;goose is your on-machine AI agent, capable of automating complex development tasks from start to finish. More than just code suggestions, goose can build entire projects from scratch, write and execute code, debug failures, orchestrate workflows, and interact with external APIs - &lt;em&gt;autonomously&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Whether you're prototyping an idea, refining existing code, or managing intricate engineering pipelines, goose adapts to your workflow and executes tasks with precision.&lt;/p&gt; 
&lt;p&gt;Designed for maximum flexibility, goose works with any LLM and supports multi-model configuration to optimize performance and cost, seamlessly integrates with MCP servers, and is available as both a desktop app as well as CLI - making it the ultimate AI assistant for developers who want to move faster and focus on innovation.&lt;/p&gt; 
&lt;h1&gt;Quick Links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/getting-started/installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/getting-started"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Goose Around with Us&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/block-opensource"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/@blockopensource"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/block-opensource"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/blockopensource"&gt;Twitter/X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/opensource.block.xyz"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://njump.me/opensource@block.xyz"&gt;Nostr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Automattic/harper</title>
      <link>https://github.com/Automattic/harper</link>
      <description>&lt;p&gt;Offline, privacy-first grammar checker. Fast, open-source, Rust-powered&lt;/p&gt;&lt;hr&gt;&lt;div id="header" align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/Automattic/harper/master/logo.svg?sanitize=true" width="400px"&gt; 
 &lt;h1&gt;Harper&lt;/h1&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://github.com/automattic/harper/actions/workflows/build_harper_binaries.yml"&gt;&lt;img src="https://github.com/automattic/harper/actions/workflows/build_harper_binaries.yml/badge.svg?sanitize=true" alt="Harper Binaries"&gt;&lt;/a&gt; &lt;a href="https://github.com/automattic/harper/actions/workflows/build_web.yml"&gt;&lt;img src="https://github.com/automattic/harper/actions/workflows/build_web.yml/badge.svg?sanitize=true" alt="Website"&gt;&lt;/a&gt; &lt;a href="https://github.com/automattic/harper/actions/workflows/precommit.yml"&gt;&lt;img src="https://github.com/automattic/harper/actions/workflows/precommit.yml/badge.svg?sanitize=true" alt="Precommit"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/harper-ls"&gt;&lt;img src="https://img.shields.io/crates/v/harper-ls" alt="Crates.io"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/npm/v/harper.js" alt="NPM Version"&gt;&lt;/p&gt; 
&lt;p&gt;Harper is an English grammar checker designed to be &lt;em&gt;just right.&lt;/em&gt; I created it after years of dealing with the shortcomings of the competition.&lt;/p&gt; 
&lt;p&gt;Grammarly was too expensive and too overbearing. Its suggestions lacked context, and were often just plain &lt;em&gt;wrong&lt;/em&gt;. Not to mention: it's a privacy nightmare. Everything you write with Grammarly is sent to their servers. Their privacy policy claims they don't sell the data, but that doesn't mean they don't use it to train large language models and god knows what else. Not only that, but the round-trip-time of the network request makes revising your work all the more tedious.&lt;/p&gt; 
&lt;p&gt;LanguageTool is great, if you have gigabytes of RAM to spare and are willing to download the ~16GB n-gram dataset. Besides the memory requirements, I found LanguageTool too slow: it would take several seconds to lint even a moderate-size document.&lt;/p&gt; 
&lt;p&gt;That's why I created Harper: it is the grammar checker that fits my needs. Not only does it take milliseconds to lint a document, take less than 1/50th of LanguageTool's memory footprint, but it is also completely private.&lt;/p&gt; 
&lt;p&gt;Harper is even small enough to load via &lt;a href="https://writewithharper.com"&gt;WebAssembly.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Language Support&lt;/h2&gt; 
&lt;p&gt;Harper currently only supports English, but the core is extensible to support other languages, so we welcome contributions that allow for other language support.&lt;/p&gt; 
&lt;h2&gt;Performance Issues&lt;/h2&gt; 
&lt;p&gt;We consider long lint times bugs. If you encounter any significant performance issues, please create an issue on the topic.&lt;/p&gt; 
&lt;p&gt;If you find a fix to any performance issue, we would appreciate the contribution. Just please make sure to read &lt;a href="https://github.com/automattic/harper/raw/master/CONTRIBUTING.md"&gt;our contribution guidelines first.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://writewithharper.com/docs/faq"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/obsidian"&gt;Obsidian Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/language-server"&gt;&lt;code&gt;harper-ls&lt;/code&gt; Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Supported Editors' Documentation 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/visual-studio-code"&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/neovim"&gt;Neovim&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/helix"&gt;Helix&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/emacs"&gt;Emacs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/zed"&gt;Zed&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://writewithharper.com/docs/harperjs/introduction"&gt;&lt;code&gt;harper.js&lt;/code&gt; Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.com/invite/JBqcAaKrzQ"&gt;Official Discord Server&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Huge Thanks&lt;/h2&gt; 
&lt;p&gt;This project would not be possible without the hard work from those who &lt;a href="https://writewithharper.com/docs/contributors/introduction"&gt;contribute&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://github.com/automattic/harper/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=automattic/harper"&gt; &lt;/a&gt; 
&lt;p&gt;Harper's logo was designed by &lt;a href="https://lukaswerner.com/"&gt;Lukas Werner&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iced-rs/iced</title>
      <link>https://github.com/iced-rs/iced</link>
      <description>&lt;p&gt;A cross-platform GUI library for Rust, inspired by Elm&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/iced-rs/iced/master/docs/logo.svg?sanitize=true" width="140px"&gt; 
 &lt;h1&gt;Iced&lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://docs.rs/iced/"&gt;&lt;img src="https://docs.rs/iced/badge.svg?sanitize=true" alt="Documentation"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iced"&gt;&lt;img src="https://img.shields.io/crates/v/iced.svg?sanitize=true" alt="Crates.io"&gt;&lt;/a&gt; &lt;a href="https://github.com/iced-rs/iced/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/iced.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iced"&gt;&lt;img src="https://img.shields.io/crates/d/iced.svg?sanitize=true" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://github.com/iced-rs/iced/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/iced-rs/iced/test.yml?branch=master&amp;amp;event=push&amp;amp;label=test" alt="Test Status"&gt;&lt;/a&gt; &lt;a href="https://discourse.iced.rs/"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscourse.iced.rs%2Fsite%2Fstatistics.json&amp;amp;query=%24.users_count&amp;amp;suffix=%20users&amp;amp;label=discourse&amp;amp;color=5e7ce2" alt="Discourse"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/3xZJ65GAhd"&gt;&lt;img src="https://img.shields.io/discord/628993209984614400?label=&amp;amp;labelColor=6A7EC2&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8" alt="Discord Server"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;A cross-platform GUI library for Rust focused on simplicity and type-safety. Inspired by &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt;.&lt;/p&gt; 
 &lt;a href="https://github.com/squidowl/halloy"&gt; &lt;img src="https://iced.rs/showcase/halloy.gif" width="460px"&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/hecrj/icebreaker"&gt; &lt;img src="https://iced.rs/showcase/icebreaker.gif" width="360px"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple, easy-to-use, batteries-included API&lt;/li&gt; 
 &lt;li&gt;Type-safe, reactive programming model&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/docs/images/todos_desktop.jpg"&gt;Cross-platform support&lt;/a&gt; (Windows, macOS, Linux, and the Web)&lt;/li&gt; 
 &lt;li&gt;Responsive layout&lt;/li&gt; 
 &lt;li&gt;Built-in widgets (including &lt;a href="https://iced.rs/examples/text_input.mp4"&gt;text inputs&lt;/a&gt;, &lt;a href="https://iced.rs/examples/scrollable.mp4"&gt;scrollables&lt;/a&gt;, and more!)&lt;/li&gt; 
 &lt;li&gt;Custom widget support (create your own!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://iced.rs/examples/debug.mp4"&gt;Debug overlay with performance metrics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;First-class support for async actions (use futures!)&lt;/li&gt; 
 &lt;li&gt;Modular ecosystem split into reusable parts: 
  &lt;ul&gt; 
   &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/runtime/"&gt;renderer-agnostic native runtime&lt;/a&gt; enabling integration with existing systems&lt;/li&gt; 
   &lt;li&gt;Two built-in renderers leveraging &lt;a href="https://github.com/gfx-rs/wgpu"&gt;&lt;code&gt;wgpu&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/RazrFalcon/tiny-skia"&gt;&lt;code&gt;tiny-skia&lt;/code&gt;&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/wgpu/"&gt;&lt;code&gt;iced_wgpu&lt;/code&gt;&lt;/a&gt; supporting Vulkan, Metal and DX12&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/tiny_skia/"&gt;&lt;code&gt;iced_tiny_skia&lt;/code&gt;&lt;/a&gt; offering a software alternative as a fallback&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/winit/"&gt;windowing shell&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Iced is currently experimental software.&lt;/strong&gt; &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/ROADMAP.md"&gt;Take a look at the roadmap&lt;/a&gt; and &lt;a href="https://github.com/iced-rs/iced/issues"&gt;check out the issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Inspired by &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;, Iced expects you to split user interfaces into four different concepts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt; — the state of your application&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Messages&lt;/strong&gt; — user interactions or meaningful events that you care about&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View logic&lt;/strong&gt; — a way to display your &lt;strong&gt;state&lt;/strong&gt; as widgets that may produce &lt;strong&gt;messages&lt;/strong&gt; on user interaction&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update logic&lt;/strong&gt; — a way to react to &lt;strong&gt;messages&lt;/strong&gt; and update your &lt;strong&gt;state&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We can build something to see how this works! Let's say we want a simple counter that can be incremented and decremented using two buttons.&lt;/p&gt; 
&lt;p&gt;We start by modelling the &lt;strong&gt;state&lt;/strong&gt; of our application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Default)]
struct Counter {
    value: i32,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we need to define the possible user interactions of our counter: the button presses. These interactions are our &lt;strong&gt;messages&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Debug, Clone, Copy)]
pub enum Message {
    Increment,
    Decrement,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, let's show the actual counter by putting it all together in our &lt;strong&gt;view logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use iced::widget::{button, column, text, Column};

impl Counter {
    pub fn view(&amp;amp;self) -&amp;gt; Column&amp;lt;Message&amp;gt; {
        // We use a column: a simple vertical layout
        column![
            // The increment button. We tell it to produce an
            // `Increment` message when pressed
            button("+").on_press(Message::Increment),

            // We show the value of the counter here
            text(self.value).size(50),

            // The decrement button. We tell it to produce a
            // `Decrement` message when pressed
            button("-").on_press(Message::Decrement),
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, we need to be able to react to any produced &lt;strong&gt;messages&lt;/strong&gt; and change our &lt;strong&gt;state&lt;/strong&gt; accordingly in our &lt;strong&gt;update logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;impl Counter {
    // ...

    pub fn update(&amp;amp;mut self, message: Message) {
        match message {
            Message::Increment =&amp;gt; {
                self.value += 1;
            }
            Message::Decrement =&amp;gt; {
                self.value -= 1;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that's everything! We just wrote a whole user interface. Let's run it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn main() -&amp;gt; iced::Result {
    iced::run("A cool counter", Counter::update, Counter::view)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Iced will automatically:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Take the result of our &lt;strong&gt;view logic&lt;/strong&gt; and layout its widgets.&lt;/li&gt; 
 &lt;li&gt;Process events from our system and produce &lt;strong&gt;messages&lt;/strong&gt; for our &lt;strong&gt;update logic&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Draw the resulting user interface.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Read the &lt;a href="https://book.iced.rs/"&gt;book&lt;/a&gt;, the &lt;a href="https://docs.rs/iced/"&gt;documentation&lt;/a&gt;, and the &lt;a href="https://github.com/iced-rs/iced/tree/master/examples#examples"&gt;examples&lt;/a&gt; to learn more!&lt;/p&gt; 
&lt;h2&gt;Implementation details&lt;/h2&gt; 
&lt;p&gt;Iced was originally born as an attempt at bringing the simplicity of &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt; and &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt; into &lt;a href="https://github.com/hecrj/coffee"&gt;Coffee&lt;/a&gt;, a 2D game library I am working on.&lt;/p&gt; 
&lt;p&gt;The core of the library was implemented during May 2019 in &lt;a href="https://github.com/hecrj/coffee/pull/35"&gt;this pull request&lt;/a&gt;. &lt;a href="https://github.com/iced-rs/iced/tree/0.1.0-alpha"&gt;The first alpha version&lt;/a&gt; was eventually released as &lt;a href="https://www.reddit.com/r/rust/comments/czzjnv/iced_a_rendereragnostic_gui_library_focused_on/"&gt;a renderer-agnostic GUI library&lt;/a&gt;. The library did not provide a renderer and implemented the current &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/examples/README.md#tour"&gt;tour example&lt;/a&gt; on top of &lt;a href="https://github.com/ggez/ggez"&gt;&lt;code&gt;ggez&lt;/code&gt;&lt;/a&gt;, a game library.&lt;/p&gt; 
&lt;p&gt;Since then, the focus has shifted towards providing a batteries-included, end-user-oriented GUI library, while keeping the ecosystem modular.&lt;/p&gt; 
&lt;h2&gt;Contributing / Feedback&lt;/h2&gt; 
&lt;p&gt;If you want to contribute, please read our &lt;a href="https://github.com/iced-rs/iced/raw/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Feedback is also welcome! You can create a new topic in &lt;a href="https://discourse.iced.rs/"&gt;our Discourse forum&lt;/a&gt; or come chat to &lt;a href="https://discord.gg/3xZJ65GAhd"&gt;our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;The development of Iced is sponsored by the &lt;a href="https://cryptowat.ch/charts"&gt;Cryptowatch&lt;/a&gt; team at &lt;a href="https://kraken.com/"&gt;Kraken.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pola-rs/polars</title>
      <link>https://github.com/pola-rs/polars</link>
      <description>&lt;p&gt;Dataframes powered by a multithreaded, vectorized query engine, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://pola.rs"&gt; &lt;img src="https://raw.githubusercontent.com/pola-rs/polars-static/master/banner/polars_github_banner.svg?sanitize=true" alt="Polars logo"&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://crates.io/crates/polars"&gt; &lt;img src="https://img.shields.io/crates/v/polars.svg?sanitize=true" alt="crates.io Latest Release"&gt; &lt;/a&gt; 
 &lt;a href="https://pypi.org/project/polars/"&gt; &lt;img src="https://img.shields.io/pypi/v/polars.svg?sanitize=true" alt="PyPi Latest Release"&gt; &lt;/a&gt; 
 &lt;a href="https://www.npmjs.com/package/nodejs-polars"&gt; &lt;img src="https://img.shields.io/npm/v/nodejs-polars.svg?sanitize=true" alt="NPM Latest Release"&gt; &lt;/a&gt; 
 &lt;a href="https://community.r-multiverse.org/polars"&gt; &lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fcommunity.r-multiverse.org%2Fapi%2Fpackages%2Fpolars&amp;amp;query=%24.Version&amp;amp;label=r-multiverse" alt="R-multiverse Latest Release"&gt; &lt;/a&gt; 
 &lt;a href="https://doi.org/10.5281/zenodo.7697217"&gt; &lt;img src="https://zenodo.org/badge/DOI/10.5281/zenodo.7697217.svg?sanitize=true" alt="DOI Latest Release"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;b&gt;Documentation&lt;/b&gt;: &lt;a href="https://docs.pola.rs/api/python/stable/reference/index.html"&gt;Python&lt;/a&gt; - &lt;a href="https://docs.rs/polars/latest/polars/"&gt;Rust&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/nodejs-polars/index.html"&gt;Node.js&lt;/a&gt; - &lt;a href="https://pola-rs.github.io/r-polars/index.html"&gt;R&lt;/a&gt; | &lt;b&gt;StackOverflow&lt;/b&gt;: &lt;a href="https://stackoverflow.com/questions/tagged/python-polars"&gt;Python&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/rust-polars"&gt;Rust&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/nodejs-polars"&gt;Node.js&lt;/a&gt; - &lt;a href="https://stackoverflow.com/questions/tagged/r-polars"&gt;R&lt;/a&gt; | &lt;a href="https://docs.pola.rs/"&gt;User guide&lt;/a&gt; | &lt;a href="https://discord.gg/4UfP5cfBE7"&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Polars: Blazingly fast DataFrames in Rust, Python, Node.js, R, and SQL&lt;/h2&gt; 
&lt;p&gt;Polars is a DataFrame interface on top of an OLAP Query Engine implemented in Rust using &lt;a href="https://arrow.apache.org/docs/format/Columnar.html"&gt;Apache Arrow Columnar Format&lt;/a&gt; as the memory model.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lazy | eager execution&lt;/li&gt; 
 &lt;li&gt;Multi-threaded&lt;/li&gt; 
 &lt;li&gt;SIMD&lt;/li&gt; 
 &lt;li&gt;Query optimization&lt;/li&gt; 
 &lt;li&gt;Powerful expression API&lt;/li&gt; 
 &lt;li&gt;Hybrid Streaming (larger-than-RAM datasets)&lt;/li&gt; 
 &lt;li&gt;Rust | Python | NodeJS | R | ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To learn more, read the &lt;a href="https://docs.pola.rs/"&gt;user guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Python&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; import polars as pl
&amp;gt;&amp;gt;&amp;gt; df = pl.DataFrame(
...     {
...         "A": [1, 2, 3, 4, 5],
...         "fruits": ["banana", "banana", "apple", "apple", "banana"],
...         "B": [5, 4, 3, 2, 1],
...         "cars": ["beetle", "audi", "beetle", "beetle", "beetle"],
...     }
... )

# embarrassingly parallel execution &amp;amp; very expressive query language
&amp;gt;&amp;gt;&amp;gt; df.sort("fruits").select(
...     "fruits",
...     "cars",
...     pl.lit("fruits").alias("literal_string_fruits"),
...     pl.col("B").filter(pl.col("cars") == "beetle").sum(),
...     pl.col("A").filter(pl.col("B") &amp;gt; 2).sum().over("cars").alias("sum_A_by_cars"),
...     pl.col("A").sum().over("fruits").alias("sum_A_by_fruits"),
...     pl.col("A").reverse().over("fruits").alias("rev_A_by_fruits"),
...     pl.col("A").sort_by("B").over("fruits").alias("sort_A_by_B_by_fruits"),
... )
shape: (5, 8)
┌──────────┬──────────┬──────────────┬─────┬─────────────┬─────────────┬─────────────┬─────────────┐
│ fruits   ┆ cars     ┆ literal_stri ┆ B   ┆ sum_A_by_ca ┆ sum_A_by_fr ┆ rev_A_by_fr ┆ sort_A_by_B │
│ ---      ┆ ---      ┆ ng_fruits    ┆ --- ┆ rs          ┆ uits        ┆ uits        ┆ _by_fruits  │
│ str      ┆ str      ┆ ---          ┆ i64 ┆ ---         ┆ ---         ┆ ---         ┆ ---         │
│          ┆          ┆ str          ┆     ┆ i64         ┆ i64         ┆ i64         ┆ i64         │
╞══════════╪══════════╪══════════════╪═════╪═════════════╪═════════════╪═════════════╪═════════════╡
│ "apple"  ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 7           ┆ 4           ┆ 4           │
│ "apple"  ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 7           ┆ 3           ┆ 3           │
│ "banana" ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 8           ┆ 5           ┆ 5           │
│ "banana" ┆ "audi"   ┆ "fruits"     ┆ 11  ┆ 2           ┆ 8           ┆ 2           ┆ 2           │
│ "banana" ┆ "beetle" ┆ "fruits"     ┆ 11  ┆ 4           ┆ 8           ┆ 1           ┆ 1           │
└──────────┴──────────┴──────────────┴─────┴─────────────┴─────────────┴─────────────┴─────────────┘
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SQL&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; df = pl.scan_csv("docs/assets/data/iris.csv")
&amp;gt;&amp;gt;&amp;gt; ## OPTION 1
&amp;gt;&amp;gt;&amp;gt; # run SQL queries on frame-level
&amp;gt;&amp;gt;&amp;gt; df.sql("""
...	SELECT species,
...	  AVG(sepal_length) AS avg_sepal_length
...	FROM self
...	GROUP BY species
...	""").collect()
shape: (3, 2)
┌────────────┬──────────────────┐
│ species    ┆ avg_sepal_length │
│ ---        ┆ ---              │
│ str        ┆ f64              │
╞════════════╪══════════════════╡
│ Virginica  ┆ 6.588            │
│ Versicolor ┆ 5.936            │
│ Setosa     ┆ 5.006            │
└────────────┴──────────────────┘
&amp;gt;&amp;gt;&amp;gt; ## OPTION 2
&amp;gt;&amp;gt;&amp;gt; # use pl.sql() to operate on the global context
&amp;gt;&amp;gt;&amp;gt; df2 = pl.LazyFrame({
...    "species": ["Setosa", "Versicolor", "Virginica"],
...    "blooming_season": ["Spring", "Summer", "Fall"]
...})
&amp;gt;&amp;gt;&amp;gt; pl.sql("""
... SELECT df.species,
...     AVG(df.sepal_length) AS avg_sepal_length,
...     df2.blooming_season
... FROM df
... LEFT JOIN df2 ON df.species = df2.species
... GROUP BY df.species, df2.blooming_season
... """).collect()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;SQL commands can also be run directly from your terminal using the Polars CLI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# run an inline SQL query
&amp;gt; polars -c "SELECT species, AVG(sepal_length) AS avg_sepal_length, AVG(sepal_width) AS avg_sepal_width FROM read_csv('docs/assets/data/iris.csv') GROUP BY species;"

# run interactively
&amp;gt; polars
Polars CLI v0.3.0
Type .help for help.

&amp;gt; SELECT species, AVG(sepal_length) AS avg_sepal_length, AVG(sepal_width) AS avg_sepal_width FROM read_csv('docs/assets/data/iris.csv') GROUP BY species;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the &lt;a href="https://github.com/pola-rs/polars-cli"&gt;Polars CLI repository&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Performance 🚀🚀&lt;/h2&gt; 
&lt;h3&gt;Blazingly fast&lt;/h3&gt; 
&lt;p&gt;Polars is very fast. In fact, it is one of the best performing solutions available. See the &lt;a href="https://www.pola.rs/benchmarks.html"&gt;PDS-H benchmarks&lt;/a&gt; results.&lt;/p&gt; 
&lt;h3&gt;Lightweight&lt;/h3&gt; 
&lt;p&gt;Polars is also very lightweight. It comes with zero required dependencies, and this shows in the import times:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;polars: 70ms&lt;/li&gt; 
 &lt;li&gt;numpy: 104ms&lt;/li&gt; 
 &lt;li&gt;pandas: 520ms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Handles larger-than-RAM data&lt;/h3&gt; 
&lt;p&gt;If you have data that does not fit into memory, Polars' query engine is able to process your query (or parts of your query) in a streaming fashion. This drastically reduces memory requirements, so you might be able to process your 250GB dataset on your laptop. Collect with &lt;code&gt;collect(engine='streaming')&lt;/code&gt; to run the query streaming. (This might be a little slower, but it is still very fast!)&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;p&gt;Install the latest Polars version with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install polars
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We also have a conda package (&lt;code&gt;conda install -c conda-forge polars&lt;/code&gt;), however pip is the preferred way to install Polars.&lt;/p&gt; 
&lt;p&gt;Install Polars with all optional dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install 'polars[all]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also install a subset of all optional dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pip install 'polars[numpy,pandas,pyarrow]'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://docs.pola.rs/user-guide/installation/#feature-flags"&gt;User Guide&lt;/a&gt; for more details on optional dependencies&lt;/p&gt; 
&lt;p&gt;To see the current Polars version and a full list of its optional dependencies, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;pl.show_versions()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Releases happen quite often (weekly / every few days) at the moment, so updating Polars regularly to get the latest bugfixes / features might not be a bad idea.&lt;/p&gt; 
&lt;h3&gt;Rust&lt;/h3&gt; 
&lt;p&gt;You can take latest release from &lt;code&gt;crates.io&lt;/code&gt;, or if you want to use the latest features / performance improvements point to the &lt;code&gt;main&lt;/code&gt; branch of this repo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;polars = { git = "https://github.com/pola-rs/polars", rev = "&amp;lt;optional git tag&amp;gt;" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Requires Rust version &lt;code&gt;&amp;gt;=1.80&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Want to contribute? Read our &lt;a href="https://docs.pola.rs/development/contributing/"&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Python: compile Polars from source&lt;/h2&gt; 
&lt;p&gt;If you want a bleeding edge release or maximal performance you should compile Polars from source.&lt;/p&gt; 
&lt;p&gt;This can be done by going through the following steps in sequence:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the latest &lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust compiler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://maturin.rs/"&gt;maturin&lt;/a&gt;: &lt;code&gt;pip install maturin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cd py-polars&lt;/code&gt; and choose one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;, slow binary with debug assertions and symbols, fast compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-release&lt;/code&gt;, fast binary without debug assertions, minimal debug symbols, long compile times&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-nodebug-release&lt;/code&gt;, same as build-release but without any debug symbols, slightly faster to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-debug-release&lt;/code&gt;, same as build-release but with full debug symbols, slightly slower to compile&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;make build-dist-release&lt;/code&gt;, fastest binary, extreme compile times&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;By default the binary is compiled with optimizations turned on for a modern CPU. Specify &lt;code&gt;LTS_CPU=1&lt;/code&gt; with the command if your CPU is older and does not support e.g. AVX2.&lt;/p&gt; 
&lt;p&gt;Note that the Rust crate implementing the Python bindings is called &lt;code&gt;py-polars&lt;/code&gt; to distinguish from the wrapped Rust crate &lt;code&gt;polars&lt;/code&gt; itself. However, both the Python package and the Python module are named &lt;code&gt;polars&lt;/code&gt;, so you can &lt;code&gt;pip install polars&lt;/code&gt; and &lt;code&gt;import polars&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Using custom Rust functions in Python&lt;/h2&gt; 
&lt;p&gt;Extending Polars with UDFs compiled in Rust is easy. We expose PyO3 extensions for &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; data structures. See more in &lt;a href="https://github.com/pola-rs/polars/tree/main/pyo3-polars"&gt;https://github.com/pola-rs/polars/tree/main/pyo3-polars&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Going big...&lt;/h2&gt; 
&lt;p&gt;Do you expect more than 2^32 (~4.2 billion) rows? Compile Polars with the &lt;code&gt;bigidx&lt;/code&gt; feature flag or, for Python users, install &lt;code&gt;pip install polars-u64-idx&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Don't use this unless you hit the row boundary as the default build of Polars is faster and consumes less memory.&lt;/p&gt; 
&lt;h2&gt;Legacy&lt;/h2&gt; 
&lt;p&gt;Do you want Polars to run on an old CPU (e.g. dating from before 2011), or on an &lt;code&gt;x86-64&lt;/code&gt; build of Python on Apple Silicon under Rosetta? Install &lt;code&gt;pip install polars-lts-cpu&lt;/code&gt;. This version of Polars is compiled without &lt;a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions"&gt;AVX&lt;/a&gt; target features.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.jetbrains.com"&gt;&lt;img src="https://www.jetbrains.com/company/brand/img/jetbrains_logo.png" height="50" alt="JetBrains logo"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>facebookincubator/below</title>
      <link>https://github.com/facebookincubator/below</link>
      <description>&lt;p&gt;A time traveling resource monitor for modern Linux systems&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt; &lt;img width="300" src="https://github.com/facebookincubator/below/raw/main/img/below_logo_horizontal.png" align="center" alt="Below"&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt; &lt;a href="https://matrix.to/#/%23below:matrix.org"&gt; &lt;img alt="Matrix chat" src="https://img.shields.io/matrix/below:matrix.org"&gt; &lt;/a&gt; &lt;a href="https://github.com/facebookincubator/below/actions?query=workflow%3ACI+branch%3Amain+"&gt; &lt;img alt="CI" src="https://github.com/facebookincubator/below/workflows/CI/badge.svg?sanitize=true"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;code&gt;below&lt;/code&gt; is an interactive tool to view and record historical system data. It has support for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;information regarding hardware resource utilization&lt;/li&gt; 
 &lt;li&gt;viewing the cgroup hierarchy&lt;/li&gt; 
 &lt;li&gt;cgroup and process information&lt;/li&gt; 
 &lt;li&gt;pressure stall information (PSI)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;record&lt;/code&gt; mode to record system data&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replay&lt;/code&gt; mode to replay historical system data&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;live&lt;/code&gt; mode to view live system data&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dump&lt;/code&gt; subcommand to report script-friendly information (eg JSON, CSV, OpenMetrics, etc.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;snapshot&lt;/code&gt; subcommand to create a replayable snapshot file of historical system data&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;below does &lt;strong&gt;not&lt;/strong&gt; have support for cgroup1.&lt;/p&gt; 
&lt;p&gt;The name "below" stems from the fact that the below developers rejected many of &lt;a href="https://linux.die.net/man/1/atop"&gt;atop&lt;/a&gt;'s design and style decisions.&lt;/p&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;a href="https://asciinema.org/a/355506"&gt; &lt;img src="https://asciinema.org/a/355506.svg?sanitize=true" width="500"&gt; &lt;/a&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;h3&gt;Fedora&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;below&lt;/code&gt; is packaged in Fedora as of Fedora 34, and can be installed with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo dnf install below
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally, the systemd service for persistent data collection can also be enabled with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo systemctl enable --now below
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Alpine Linux&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;below&lt;/code&gt; is packaged in Alpine Linux - it's available in (upcoming) v3.17+ and Edge. It can be installed with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo apk add below
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally, the OpenRC service for persistent data collection can also be enabled with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo rc-service below start
sudo rc-update add below
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Gentoo Linux&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;below&lt;/code&gt; is available in the &lt;a href="https://packages.gentoo.org/packages/sys-process/below"&gt;&lt;code&gt;sys-process/below&lt;/code&gt;&lt;/a&gt; package and can be installed with &lt;code&gt;emerge&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo emerge sys-process/below
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installing from source&lt;/h2&gt; 
&lt;p&gt;First, install dependencies listed in &lt;a href="https://raw.githubusercontent.com/facebookincubator/below/main/docs/building.md"&gt;building.md&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cargo install below
$ below --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For convenience, we also provide a Dockerfile and &lt;a href="https://hub.docker.com/r/below/below"&gt;pre-built images&lt;/a&gt; on Docker Hub. See &lt;a href="https://raw.githubusercontent.com/facebookincubator/below/main/docs/docker.md"&gt;docker.md&lt;/a&gt; for how to use them.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Live view of system:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo below live
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run recording daemon:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo cp ~/.cargo/bin/below /bin/below  # if using cargo-install
$ sudo cp etc/below.service /etc/systemd/system
$ sudo systemctl daemon-reload
$ sudo systemctl start below
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replay historical data:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ below replay -t "3m ago"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Integration with Prometheus/Grafana&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;below&lt;/code&gt; has basic support for Prometheus/Grafana through the &lt;code&gt;dump&lt;/code&gt; interface.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/facebookincubator/below/main/contrib/grafana"&gt;contrib/grafana/&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Comparison with alternative tools&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/facebookincubator/below/main/docs/comparison.md"&gt;comparison.md&lt;/a&gt; for a feature comparison with alternative tools.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/facebookincubator/below/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; file for how to help out.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/facebookincubator/below/main/LICENSE"&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>awslabs/mountpoint-s3</title>
      <link>https://github.com/awslabs/mountpoint-s3</link>
      <description>&lt;p&gt;A simple, high-throughput file client for mounting an Amazon S3 bucket as a local file system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mountpoint for Amazon S3&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/awslabs/mountpoint-s3/actions/workflows/tests.yml"&gt;&lt;img src="https://github.com/awslabs/mountpoint-s3/actions/workflows/tests.yml/badge.svg?sanitize=true" alt="Tests"&gt;&lt;/a&gt; &lt;a href="https://github.com/awslabs/mountpoint-s3/actions/workflows/integration_main.yml"&gt;&lt;img src="https://github.com/awslabs/mountpoint-s3/actions/workflows/integration_main.yml/badge.svg?branch=main" alt="Integration tests"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Mountpoint for Amazon S3 is a simple, high-throughput file client for &lt;a href="https://aws.amazon.com/blogs/storage/the-inside-story-on-mountpoint-for-amazon-s3-a-high-performance-open-source-file-client/"&gt;mounting an Amazon S3 bucket as a local file system&lt;/a&gt;. With Mountpoint for Amazon S3, your applications can access objects stored in Amazon S3 through file operations like &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt;. Mountpoint for Amazon S3 automatically translates these operations into S3 object API calls, giving your applications access to the elastic storage and throughput of Amazon S3 through a file interface.&lt;/p&gt; 
&lt;p&gt;Mountpoint for Amazon S3 is optimized for applications that need high read throughput to large objects, potentially from many clients at once, and to write new objects sequentially from a single client at a time. This means it's a great fit for applications that use a file interface to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;read large objects from S3, potentially from many instances concurrently, without downloading them to local storage first&lt;/li&gt; 
 &lt;li&gt;access only some S3 objects out of a larger data set, but can't predict which objects in advance&lt;/li&gt; 
 &lt;li&gt;upload their output to S3 directly, or upload files from local storage with tools like &lt;code&gt;cp&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;but probably not the right fit for applications that:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;use file operations that S3 doesn't natively support, like directory renaming or symlinks&lt;/li&gt; 
 &lt;li&gt;make edits to existing files (don't work on your Git repository or run &lt;code&gt;vim&lt;/code&gt; in Mountpoint 😄)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Mountpoint for Amazon S3 does not implement all the features of a POSIX file system, and there are some differences that may affect compatibility with your application. See &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/SEMANTICS.md"&gt;Mountpoint file system behavior&lt;/a&gt; for a detailed description of Mountpoint for Amazon S3's behavior and POSIX support and how they could affect your application. To troubleshoot file operations that may not be supported by Mountpoint, see the &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/TROUBLESHOOTING.md"&gt;troubleshooting documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Current status&lt;/h2&gt; 
&lt;p&gt;Mountpoint for Amazon S3 is generally available! We're tracking future feature development on the &lt;a href="https://github.com/orgs/awslabs/projects/84"&gt;Mountpoint for Amazon S3 public roadmap&lt;/a&gt;. We're always interested in feedback on features, performance, and compatibility. Please send feedback by &lt;a href="https://github.com/awslabs/mountpoint-s3/issues/new/choose"&gt;opening a new GitHub issue&lt;/a&gt; or adding your input to an existing roadmap issue.&lt;/p&gt; 
&lt;h3&gt;Notices&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Mountpoint for Amazon S3 v1.4.0, released on January 26, 2024, contains an &lt;a href="https://github.com/awslabs/mountpoint-s3/pull/751"&gt;issue&lt;/a&gt; that causes intermittent read failures. We recommend that customers using v1.4.0 upgrade to v1.4.1 or later.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;Run these two commands to install Mountpoint for Amazon S3 on your Amazon Linux EC2 instance (for Graviton instances, replace &lt;code&gt;x86_64&lt;/code&gt; with &lt;code&gt;arm64&lt;/code&gt; in the URL):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.rpm
sudo yum install -y ./mount-s3.rpm
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Ubuntu, use these commands instead (for Graviton instances, replace &lt;code&gt;x86_64&lt;/code&gt; with &lt;code&gt;arm64&lt;/code&gt; in the URL):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.deb
sudo apt-get install -y ./mount-s3.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href="https://github.com/awslabs/mountpoint-s3/raw/main/doc/INSTALL.md"&gt;Installing Mountpoint for Amazon S3&lt;/a&gt; for detailed instructions and other installation options, including the &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/s3-csi.html"&gt;Mountpoint for Amazon S3 CSI driver&lt;/a&gt; for Kubernetes applications, or building from source.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Once you've got Mountpoint for Amazon S3 installed, you can mount your Amazon S3 bucket. You'll need valid AWS credentials to access your bucket. Mountpoint will automatically use credentials from &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html"&gt;an IAM role associated with your EC2 instance&lt;/a&gt;, or the &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; environment variables, or from &lt;a href="https://github.com/awslabs/mountpoint-s3/raw/main/doc/CONFIGURATION.md#aws-credentials"&gt;several other sources&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To mount your bucket, run this command, replacing &lt;code&gt;amzn-s3-demo-bucket&lt;/code&gt; with the name of your bucket and &lt;code&gt;/path/to/mount&lt;/code&gt; with the directory you want to mount the bucket to:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mount-s3 amzn-s3-demo-bucket /path/to/mount
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can work with your bucket contents as if they were a local file system:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ls /path/to/mount
echo "Hello World!" &amp;gt; /path/to/mount/Data.txt
cat /path/to/mount/Data.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you're finished accessing your bucket, you can unmount it (you might need &lt;code&gt;sudo&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;umount /path/to/mount
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] See &lt;a href="https://github.com/awslabs/mountpoint-s3/raw/main/doc/CONFIGURATION.md"&gt;Configuring Mountpoint for Amazon S3&lt;/a&gt; for more details on how to configure and use Mountpoint.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Compatibility with other storage services&lt;/h3&gt; 
&lt;p&gt;Mountpoint for Amazon S3 is designed for high-performance access to the Amazon S3 service. While it may be functional against other storage services that use S3-like APIs, we aren't able to provide support for those use cases, and they may inadvertently break when we make changes to better support Amazon S3. We welcome contributions of minor compatibility fixes or performance improvements for these services if the changes can be tested against Amazon S3.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions to Mountpoint for Amazon S3! Please see &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to report bugs or submit pull requests. We especially welcome contributions to issues tagged as &lt;a href="https://github.com/awslabs/mountpoint-s3/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;good first issues to work on&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For potential bug reports, see &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/LOGGING.md"&gt;LOGGING.md&lt;/a&gt; for details on how to capture logging data. For performance issues, see &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/BENCHMARKING.md"&gt;BENCHMARKING.md&lt;/a&gt; for documentation about performance regression testing.&lt;/p&gt; 
&lt;h3&gt;Security&lt;/h3&gt; 
&lt;p&gt;If you discover a potential security issue in this project we ask that you notify AWS Security via our &lt;a href="http://aws.amazon.com/security/vulnerability-reporting/"&gt;vulnerability reporting page&lt;/a&gt;. Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;This project has adopted the &lt;a href="https://aws.github.io/code-of-conduct"&gt;Amazon Open Source Code of Conduct&lt;/a&gt;. See &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/doc/CODE_OF_CONDUCT.md"&gt;CODE_OF_CONDUCT.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the Apache-2.0 License. It builds on a number of other awesome projects with open source licenses, primarily:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/cberner/fuser"&gt;fuser&lt;/a&gt; bindings for FUSE (MIT license)&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://docs.aws.amazon.com/sdkref/latest/guide/common-runtime.html"&gt;AWS Common Runtime&lt;/a&gt; for interacting with S3 (Apache 2.0 license)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/awslabs/mountpoint-s3/main/deny.toml"&gt;deny.toml&lt;/a&gt; for a list of licenses used by our dependencies.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lumina-ai-inc/chunkr</title>
      <link>https://github.com/lumina-ai-inc/chunkr</link>
      <description>&lt;p&gt;Vision infrastructure to turn complex documents into RAG/LLM-ready data&lt;/p&gt;&lt;hr&gt;&lt;br&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://github.com/lumina-ai-inc/chunkr"&gt; &lt;img src="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/images/logo.svg?sanitize=true" alt="Logo" width="80" height="80"&gt; &lt;/a&gt; 
 &lt;h3 align="center"&gt;Chunkr | Open Source Document Intelligence API&lt;/h3&gt; 
 &lt;p align="center"&gt; Production-ready API service for document layout analysis, OCR, and semantic chunking.&lt;br&gt;Convert PDFs, PPTs, Word docs &amp;amp; images into RAG/LLM-ready chunks. &lt;br&gt;&lt;br&gt; &lt;b&gt;Layout Analysis&lt;/b&gt; | &lt;b&gt;OCR + Bounding Boxes&lt;/b&gt; | &lt;b&gt;Structured HTML and markdown&lt;/b&gt; | &lt;b&gt;VLM Processing controls&lt;/b&gt; &lt;br&gt; &lt;br&gt; &lt;a href="https://www.chunkr.ai"&gt;&lt;img src="https://img.shields.io/badge/Try_it_out-chunkr.ai-blue?style=flat&amp;amp;logo=rocket&amp;amp;height=20" alt="Try it out" height="20"&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/lumina-ai-inc/chunkr/issues/new"&gt;&lt;img src="https://img.shields.io/badge/Report_Bug-GitHub_Issues-red?style=flat&amp;amp;logo=github&amp;amp;height=20" alt="Report Bug" height="20"&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#connect-with-us"&gt;&lt;img src="https://img.shields.io/badge/Contact-Get_in_Touch-green?style=flat&amp;amp;logo=mail&amp;amp;height=20" alt="Contact" height="20"&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href="https://discord.gg/XzKWFByKzW"&gt;&lt;img src="https://img.shields.io/badge/Discord-Join_Community-5865F2?style=flat&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;height=20" alt="Discord" height="20"&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href="https://deepwiki.com/lumina-ai-inc/chunkr"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.chunkr.ai" width="1200" height="630"&gt; &lt;img src="https://chunkr.ai/og-image.png" style="bor"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#super-quick-start"&gt;(Super) Quick Start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#opensource-vs-commercial-api-vs-enterprise"&gt;OpenSource vs Commercial API vs Enterprise&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#quick-start-with-docker-compose"&gt;Quick Start with Docker Compose&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#llm-configuration"&gt;LLM Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#using-modelsyaml-recommended"&gt;Using models.yaml (Recommended)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#using-environment-variables-basic"&gt;Using environment variables (Basic)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#common-llm-api-providers"&gt;Common LLM API Providers&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#licensing"&gt;Licensing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#connect-with-us"&gt;Connect With Us&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;(Super) Quick Start&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to &lt;a href="https://www.chunkr.ai"&gt;chunkr.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Make an account and copy your API key&lt;/li&gt; 
 &lt;li&gt;Install our Python SDK:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install chunkr-ai
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Use the SDK to process your documents:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from chunkr_ai import Chunkr

# Initialize with your API key from chunkr.ai
chunkr = Chunkr(api_key="your_api_key")

# Upload a document (URL or local file path)
url = "https://chunkr-web.s3.us-east-1.amazonaws.com/landing_page/input/science.pdf"
task = chunkr.upload(url)

# Export results in various formats
html = task.html(output_file="output.html")
markdown = task.markdown(output_file="output.md")
content = task.content(output_file="output.txt")
task.json(output_file="output.json")

# Clean up
chunkr.close()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit our &lt;a href="https://docs.chunkr.ai"&gt;docs&lt;/a&gt; for more information and examples.&lt;/p&gt; 
&lt;h2&gt;OpenSource vs Commercial API vs Enterprise&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;Open Source&lt;/th&gt; 
   &lt;th&gt;Commercial API&lt;/th&gt; 
   &lt;th&gt;Enterprise&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Perfect for&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Development &amp;amp; testing&lt;/td&gt; 
   &lt;td&gt;Production applications&lt;/td&gt; 
   &lt;td&gt;Large-scale/High security deployments&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Layout Analysis&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Basic models&lt;/td&gt; 
   &lt;td&gt;Advanced models&lt;/td&gt; 
   &lt;td&gt;Advanced + custom-tuned&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;OCR Accuracy&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Standard models&lt;/td&gt; 
   &lt;td&gt;Premium models&lt;/td&gt; 
   &lt;td&gt;Premium + domain-tuned&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;VLM Processing&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Basic vision models&lt;/td&gt; 
   &lt;td&gt;Enhanced VLM models&lt;/td&gt; 
   &lt;td&gt;Enhanced + custom fine-tunes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Excel Support&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;❌&lt;/td&gt; 
   &lt;td&gt;✅ Native parser&lt;/td&gt; 
   &lt;td&gt;✅ Native parser&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Document Types&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;PDF, PPT, Word, Images&lt;/td&gt; 
   &lt;td&gt;PDF, PPT, Word, Images, Excel&lt;/td&gt; 
   &lt;td&gt;PDF, PPT, Word, Images, Excel&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Self-hosted&lt;/td&gt; 
   &lt;td&gt;Fully managed&lt;/td&gt; 
   &lt;td&gt;Fully managed (On-prem or Chunkr-hosted)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Support&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Discord community&lt;/td&gt; 
   &lt;td&gt;Priority email + community&lt;/td&gt; 
   &lt;td&gt;24/7 dedicated founing team support&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Migration Support&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Community resources&lt;/td&gt; 
   &lt;td&gt;Documentation + email&lt;/td&gt; 
   &lt;td&gt;Dedicated migration team&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Quick Start with Docker Compose&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Prerequisites:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.docker.com/get-docker/"&gt;Docker and Docker Compose&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html"&gt;NVIDIA Container Toolkit&lt;/a&gt; (for GPU support, optional)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the repo:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/lumina-ai-inc/chunkr
cd chunkr
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Set up environment variables:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Copy the example environment file
cp .env.example .env

# Configure your llm models
cp models.example.yaml models.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on how to set up LLMs, see &lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/#llm-configuration"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Start the services:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# For GPU deployment:
docker compose up -d

# For CPU-only deployment:
docker compose -f compose.yaml -f compose.cpu.yaml up -d

# For Mac ARM architecture (M1, M2, M3, etc.):
docker compose -f compose.yaml -f compose.cpu.yaml -f compose.mac.yaml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="5"&gt; 
 &lt;li&gt; &lt;p&gt;Access the services:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Web UI: &lt;code&gt;http://localhost:5173&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;API: &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Stop the services when done:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# For GPU deployment:
docker compose down

# For CPU-only deployment:
docker compose -f compose.yaml -f compose.cpu.yaml down

# For Mac ARM architecture (M1, M2, M3, etc.):
docker compose -f compose.yaml -f compose.cpu.yaml -f compose.mac.yaml down
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;LLM Configuration&lt;/h2&gt; 
&lt;p&gt;Chunkr supports two ways to configure LLMs:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;models.yaml file&lt;/strong&gt;: Advanced configuration for multiple LLMs with additional options&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Environment variables&lt;/strong&gt;: Simple configuration for a single LLM&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Using models.yaml (Recommended)&lt;/h3&gt; 
&lt;p&gt;For more flexible configuration with multiple models, default/fallback options, and rate limits:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Copy the example file to create your configuration:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp models.example.yaml models.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Edit the models.yaml file with your configuration. Example:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;models:
  - id: gpt-4o
    model: gpt-4o
    provider_url: https://api.openai.com/v1/chat/completions
    api_key: "your_openai_api_key_here"
    default: true
    rate-limit: 200 # requests per minute - optional
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Benefits of using models.yaml:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configure multiple LLM providers simultaneously&lt;/li&gt; 
 &lt;li&gt;Set default and fallback models&lt;/li&gt; 
 &lt;li&gt;Add distributed rate limits per model&lt;/li&gt; 
 &lt;li&gt;Reference models by ID in API requests (see docs for more info)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Read the &lt;code&gt;models.example.yaml&lt;/code&gt; file for more information on the available options.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Using environment variables (Basic)&lt;/h3&gt; 
&lt;p&gt;You can use any OpenAI API compatible endpoint by setting the following variables in your .env file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LLM__KEY:
LLM__MODEL:
LLM__URL:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Common LLM API Providers&lt;/h3&gt; 
&lt;p&gt;Below is a table of common LLM providers and their configuration details to get you started:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Provider&lt;/th&gt; 
   &lt;th&gt;API URL&lt;/th&gt; 
   &lt;th&gt;Documentation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OpenAI&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://api.openai.com/v1/chat/completions"&gt;https://api.openai.com/v1/chat/completions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://platform.openai.com/docs"&gt;OpenAI Docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Google AI Studio&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://generativelanguage.googleapis.com/v1beta/openai/chat/completions"&gt;https://generativelanguage.googleapis.com/v1beta/openai/chat/completions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://ai.google.dev/gemini-api/docs/openai"&gt;Google AI Docs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OpenRouter&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://openrouter.ai/api/v1/chat/completions"&gt;https://openrouter.ai/api/v1/chat/completions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://openrouter.ai/models"&gt;OpenRouter Models&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Self-Hosted&lt;/td&gt; 
   &lt;td&gt;&lt;a href="http://localhost:8000/v1"&gt;http://localhost:8000/v1&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html"&gt;VLLM&lt;/a&gt; or &lt;a href="https://ollama.com/blog/openai-compatibility"&gt;Ollama&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;The core of this project is dual-licensed:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/lumina-ai-inc/chunkr/main/LICENSE"&gt;GNU Affero General Public License v3.0 (AGPL-3.0)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Commercial License&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To use Chunkr without complying with the AGPL-3.0 license terms you can &lt;a href="mailto:mehul@chunkr.ai"&gt;contact us&lt;/a&gt; or visit our &lt;a href="https://chunkr.ai"&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Connect With Us&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📧 Email: &lt;a href="mailto:mehul@chunkr.ai"&gt;mehul@chunkr.ai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📅 Schedule a call: &lt;a href="https://cal.com/mehulc/30min"&gt;Book a 30-minute meeting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌐 Visit our website: &lt;a href="https://chunkr.ai"&gt;chunkr.ai&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Yamato-Security/hayabusa</title>
      <link>https://github.com/Yamato-Security/hayabusa</link>
      <description>&lt;p&gt;Hayabusa (隼) is a sigma-based threat hunting and fast forensics timeline generator for Windows event logs.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt; &lt;img alt="Hayabusa Logo" src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/logo.png" width="60%"&gt; &lt;/p&gt; [ 
 &lt;b&gt;English&lt;/b&gt; ] | [
 &lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/README-Japanese.md"&gt;日本語&lt;/a&gt;] 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/Yamato-Security/hayabusa/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/Yamato-Security/hayabusa?color=blue&amp;amp;label=Stable%20Version&amp;amp;style=flat"&gt;&lt;/a&gt; &lt;a href="https://github.com/Yamato-Security/hayabusa/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/Yamato-Security/hayabusa/total?style=flat&amp;amp;label=GitHub%F0%9F%A6%85Downloads&amp;amp;color=blue"&gt;&lt;/a&gt; &lt;a href="https://github.com/Yamato-Security/hayabusa/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/Yamato-Security/hayabusa?style=flat&amp;amp;label=GitHub%F0%9F%A6%85Stars"&gt;&lt;/a&gt; &lt;a href="https://github.com/Yamato-Security/hayabusa/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/Yamato-Security/hayabusa?label=Contributors&amp;amp;color=blue&amp;amp;style=flat"&gt;&lt;/a&gt; &lt;a href="https://www.blackhat.com/asia-22/arsenal/schedule/#hayabusa-26211"&gt;&lt;img src="https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/asia/2022.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://codeblue.jp/2022/en/talks/?content=talks_24"&gt;&lt;img src="https://img.shields.io/badge/CODE%20BLUE%20Bluebox-2022-blue"&gt;&lt;/a&gt; &lt;a href="https://www.seccon.jp/2022/seccon_workshop/windows.html"&gt;&lt;img src="https://img.shields.io/badge/SECCON-2023-blue"&gt;&lt;/a&gt; &lt;a href="https://www.security-camp.or.jp/minicamp/tokyo2023.html"&gt;&lt;img src="https://img.shields.io/badge/Security%20MiniCamp%20Tokyo-2023-blue"&gt;&lt;/a&gt; &lt;a href="https://www.sans.org/cyber-security-training-events/digital-forensics-summit-2023/"&gt;&lt;img src="https://img.shields.io/badge/SANS%20DFIR%20Summit-2023-blue"&gt;&lt;/a&gt; &lt;a href="https://bsides.tokyo/2024/"&gt;&lt;img src="https://img.shields.io/badge/BSides%20Tokyo-2024-blue"&gt;&lt;/a&gt; &lt;a href="https://www.hacker.or.jp/hack-fes-2024/"&gt;&lt;img src="https://img.shields.io/badge/Hack%20Fes.-2024-blue"&gt;&lt;/a&gt; &lt;a href="https://hitcon.org/2024/CMT/"&gt;&lt;img src="https://img.shields.io/badge/HITCON-2024-blue"&gt;&lt;/a&gt; &lt;a href="https://www.blackhat.com/sector/2024/briefings/schedule/index.html#performing-dfir-and-threat-hunting-with-yamato-security-oss-tools-and-community-driven-knowledge-41347"&gt;&lt;img src="https://img.shields.io/badge/SecTor-2024-blue"&gt;&lt;/a&gt; &lt;a href="https://www.infosec-city.com/schedule/sin25-con"&gt;&lt;img src="https://img.shields.io/badge/SINCON%20Kampung%20Workshop-2025-blue"&gt;&lt;/a&gt; &lt;a href="https://www.blackhat.com/us-25/arsenal/schedule/index.html#windows-fast-forensics-with-yamato-securitys-hayabusa-45629"&gt;&lt;img src="https://img.shields.io/badge/Black%20Hat%20Arsenal%20USA-2025-blue"&gt;&lt;/a&gt; &lt;a href="https://gist.github.com/cheerfulstoic/d107229326a01ff0f333a1d3476e068d"&gt;&lt;img src="https://img.shields.io/badge/Maintenance%20Level-Actively%20Developed-brightgreen.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://github.com/Yamato-Security/hayabusa/commits/main/"&gt;&lt;img src="https://img.shields.io/github/commit-activity/t/Yamato-Security/hayabusa/main"&gt;&lt;/a&gt; &lt;a href="https://rust-reportcard.xuri.me/report/github.com/Yamato-Security/hayabusa"&gt;&lt;img src="https://rust-reportcard.xuri.me/badge/github.com/Yamato-Security/hayabusa"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/Yamato-Security/hayabusa"&gt;&lt;img src="https://codecov.io/gh/Yamato-Security/hayabusa/branch/main/graph/badge.svg?token=WFN5XO9W8C"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/SecurityYamato"&gt;&lt;img src="https://img.shields.io/twitter/follow/SecurityYamato?style=social"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;About Hayabusa&lt;/h1&gt; 
&lt;p&gt;Hayabusa is a &lt;strong&gt;Windows event log fast forensics timeline generator&lt;/strong&gt; and &lt;strong&gt;threat hunting tool&lt;/strong&gt; created by the &lt;a href="https://yamatosecurity.connpass.com/"&gt;Yamato Security&lt;/a&gt; group in Japan. Hayabusa means &lt;a href="https://en.wikipedia.org/wiki/Peregrine_falcon"&gt;"peregrine falcon"&lt;/a&gt; in Japanese and was chosen as peregrine falcons are the fastest animal in the world, great at hunting and highly trainable. It is written in memory-safe &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;, supports multi-threading in order to be as fast as possible and is the only open-source tool that has full support for the Sigma specification including v2 correlation rules. Hayabusa can handle parsing &lt;a href="https://github.com/SigmaHQ/sigma"&gt;upstream Sigma&lt;/a&gt; rules, however, the Sigma rules that we use and host in the &lt;a href="https://github.com/Yamato-Security/hayabusa-rules"&gt;hayabusa-rules repository&lt;/a&gt; have some conversion done to them in order to make rule loading more flexible and reduce false positives. You can read the details about this at the &lt;a href="https://github.com/Yamato-Security/sigma-to-hayabusa-converter"&gt;sigma-to-hayabusa-converter repository&lt;/a&gt; README file. Hayabusa can be run either on single running systems for live analysis, by gathering logs from single or multiple systems for offline analysis, or by running the &lt;a href="https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.hayabusa/"&gt;Hayabusa artifact&lt;/a&gt; with &lt;a href="https://docs.velociraptor.app/"&gt;Velociraptor&lt;/a&gt; for enterprise-wide threat hunting and incident response. The output will be consolidated into a single CSV/JSON/JSONL timeline for easy analysis in &lt;a href="https://www.libreoffice.org/"&gt;LibreOffice&lt;/a&gt;, &lt;a href="https://ericzimmerman.github.io/#!index.md"&gt;Timeline Explorer&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/ElasticStackImport/ElasticStackImport-English.md"&gt;Elastic Stack&lt;/a&gt;, &lt;a href="https://timesketch.org/"&gt;Timesketch&lt;/a&gt;, etc...&lt;/p&gt; 
&lt;h1&gt;Companion Projects&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/EnableWindowsLogSettings"&gt;EnableWindowsLogSettings&lt;/a&gt; - Documentation and scripts to properly enable Windows event logs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/hayabusa-encoded-rules"&gt;Hayabusa Encoded Rules&lt;/a&gt; - The same as Hayabusa Rules repository but the rules and config files are stored in one file and XORed to prevent false positives from anti-virus.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/hayabusa-rules"&gt;Hayabusa Rules&lt;/a&gt; - Hayabusa and curated Sigma detection rules used Hayabusa.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/hayabusa-evtx"&gt;Hayabusa EVTX&lt;/a&gt; - A more maintained fork of the &lt;code&gt;evtx&lt;/code&gt; crate.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/hayabusa-sample-evtx"&gt;Hayabusa Sample EVTXs&lt;/a&gt; - Sample evtx files to use for testing hayabusa/sigma detection rules.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/Presentations"&gt;Presentations&lt;/a&gt; - Presentations from talks that we have given about our tools and resources.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/sigma-to-hayabusa-converter"&gt;Sigma to Hayabusa Converter&lt;/a&gt; - Curates upstream Windows event log based Sigma rules into an easier to use form.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/takajo"&gt;Takajo&lt;/a&gt; - An analyzer for hayabusa results.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/WELA"&gt;WELA (Windows Event Log Analyzer)&lt;/a&gt; - An analyzer for Windows event logs written in PowerShell. (Deprecated and replaced by Takajo.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Third-Party Projects That Use Hayabusa&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/blueteam0ps/AllthingsTimesketch"&gt;AllthingsTimesketch&lt;/a&gt; - A NodeRED workflow that imports Plaso and Hayabusa results into Timesketch.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.limacharlie.io/docs/extensions-third-party-extensions-hayabusa"&gt;LimaCharlie&lt;/a&gt; - Provides cloud-based security tools and infrastructure to fit your needs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://openrelik.org/"&gt;OpenRelik&lt;/a&gt; - An open-source (Apache-2.0) platform designed to streamline collaborative digital forensic investigations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mf1d3l/Splunk4DFIR"&gt;Splunk4DFIR&lt;/a&gt; - Quickly spin up a splunk instance with Docker to browse through logs and tools output during your investigations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Velocidex/velociraptor"&gt;Velociraptor&lt;/a&gt; - A tool for collecting host based state information using The Velociraptor Query Language (VQL) queries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#about-hayabusa"&gt;About Hayabusa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#companion-projects"&gt;Companion Projects&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#third-party-projects-that-use-hayabusa"&gt;Third-Party Projects That Use Hayabusa&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#main-goals"&gt;Main Goals&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#threat-hunting-and-enterprise-wide-dfir"&gt;Threat Hunting and Enterprise-wide DFIR&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#fast-forensics-timeline-generation"&gt;Fast Forensics Timeline Generation&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#screenshots"&gt;Screenshots&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#startup"&gt;Startup&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#dfir-timeline-terminal-output"&gt;DFIR Timeline Terminal Output&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#keyword-search-results"&gt;Keyword Search Results&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#detection-fequency-timeline--t-option"&gt;Detection Fequency Timeline (&lt;code&gt;-T&lt;/code&gt; option)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#results-summary"&gt;Results Summary&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#html-results-summary--h-option"&gt;HTML Results Summary (&lt;code&gt;-H&lt;/code&gt; option)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#dfir-timeline-analysis-in-libreoffice--m-multiline-output"&gt;DFIR Timeline Analysis in LibreOffice (&lt;code&gt;-M&lt;/code&gt; Multiline Output)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#dfir-timeline-analysis-in-timeline-explorer"&gt;DFIR Timeline Analysis in Timeline Explorer&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#critical-alert-filtering-and-computer-grouping-in-timeline-explorer"&gt;Critical Alert Filtering and Computer Grouping in Timeline Explorer&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#analysis-with-the-elastic-stack-dashboard"&gt;Analysis with the Elastic Stack Dashboard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#analysis-in-timesketch"&gt;Analysis in Timesketch&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#importing-and-analyzing-timeline-results"&gt;Importing and Analyzing Timeline Results&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#analyzing-json-formatted-results-with-jq"&gt;Analyzing JSON-formatted results with JQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#features"&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#downloads"&gt;Downloads&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#windows-live-response-packages"&gt;Windows live response packages&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#git-cloning"&gt;Git Cloning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#advanced-compiling-from-source-optional"&gt;Advanced: Compiling From Source (Optional)&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#updating-rust-packages"&gt;Updating Rust Packages&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#cross-compiling-32-bit-windows-binaries"&gt;Cross-compiling 32-bit Windows Binaries&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#macos-compiling-notes"&gt;macOS Compiling Notes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#linux-compiling-notes"&gt;Linux Compiling Notes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#cross-compiling-linux-musl-binaries"&gt;Cross-compiling Linux MUSL Binaries&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#running-hayabusa"&gt;Running Hayabusa&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#caution-anti-virusedr-warnings-and-slow-runtimes"&gt;Caution: Anti-Virus/EDR Warnings and Slow Runtimes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#windows"&gt;Windows&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#error-when-trying-to-scan-a-file-or-directory-with-a-space-in-the-path"&gt;Error when trying to scan a file or directory with a space in the path&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#characters-not-being-displayed-correctly"&gt;Characters not being displayed correctly&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#linux"&gt;Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#macos"&gt;macOS&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#command-list"&gt;Command List&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#analysis-commands"&gt;Analysis Commands:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#config-commands"&gt;Config Commands:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#dfir-timeline-commands"&gt;DFIR Timeline Commands:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#general-commands"&gt;General Commands:&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#command-usage"&gt;Command Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#analysis-commands-1"&gt;Analysis Commands&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#computer-metrics-command"&gt;&lt;code&gt;computer-metrics&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#computer-metrics-command-examples"&gt;&lt;code&gt;computer-metrics&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#computer-metrics-screenshot"&gt;&lt;code&gt;computer-metrics&lt;/code&gt; screenshot&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#eid-metrics-command"&gt;&lt;code&gt;eid-metrics&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#eid-metrics-command-examples"&gt;&lt;code&gt;eid-metrics&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#eid-metrics-command-config-file"&gt;&lt;code&gt;eid-metrics&lt;/code&gt; command config file&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#eid-metrics-screenshot"&gt;&lt;code&gt;eid-metrics&lt;/code&gt; screenshot&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#expand-list-command"&gt;&lt;code&gt;expand-list&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#expand-list-command-examples"&gt;&lt;code&gt;expand-list&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#expand-list-results"&gt;&lt;code&gt;expand-list&lt;/code&gt; results&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#extract-base64-command"&gt;&lt;code&gt;extract-base64&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#extract-base64-command-examples"&gt;&lt;code&gt;extract-base64&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#extract-base64-results"&gt;&lt;code&gt;extract-base64&lt;/code&gt; results&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#log-metrics-command"&gt;&lt;code&gt;log-metrics&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#log-metrics-command-examples"&gt;&lt;code&gt;log-metrics&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#log-metrics-screenshot"&gt;&lt;code&gt;log-metrics&lt;/code&gt; screenshot&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#logon-summary-command"&gt;&lt;code&gt;logon-summary&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#logon-summary-command-examples"&gt;&lt;code&gt;logon-summary&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#logon-summary-screenshots"&gt;&lt;code&gt;logon-summary&lt;/code&gt; screenshots&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#pivot-keywords-list-command"&gt;&lt;code&gt;pivot-keywords-list&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#pivot-keywords-list-command-examples"&gt;&lt;code&gt;pivot-keywords-list&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#pivot-keywords-list-config-file"&gt;&lt;code&gt;pivot-keywords-list&lt;/code&gt; config file&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#search-command"&gt;&lt;code&gt;search&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#search-command-examples"&gt;&lt;code&gt;search&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#search-command-config-files"&gt;&lt;code&gt;search&lt;/code&gt; command config files&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#config-commands-1"&gt;Config Commands&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#config-critical-systems-command"&gt;&lt;code&gt;config-critical-systems&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#config-critical-systems-command-examples"&gt;&lt;code&gt;config-critical-systems&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#dfir-timeline-commands-1"&gt;DFIR Timeline Commands&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#scan-wizard"&gt;Scan Wizard&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#core-rules"&gt;Core Rules&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#core-rules-1"&gt;Core+ Rules&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#core-rules-2"&gt;Core++ Rules&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#emerging-threats-et-add-on-rules"&gt;Emerging Threats (ET) Add-On Rules&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#threat-hunting-th-add-on-rules"&gt;Threat Hunting (TH) Add-On Rules&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#channel-based-event-log-and-rules-filtering"&gt;Channel-based event log and rules filtering&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#csv-timeline-command"&gt;&lt;code&gt;csv-timeline&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#csv-timeline-command-examples"&gt;&lt;code&gt;csv-timeline&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#advanced---geoip-log-enrichment"&gt;Advanced - GeoIP Log Enrichment&lt;/a&gt; 
        &lt;ul&gt; 
         &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#geoip-config-file"&gt;GeoIP config file&lt;/a&gt;&lt;/li&gt; 
         &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#automatic-updates-of-geoip-databases"&gt;Automatic updates of GeoIP databases&lt;/a&gt;&lt;/li&gt; 
        &lt;/ul&gt; &lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#csv-timeline-command-config-files"&gt;&lt;code&gt;csv-timeline&lt;/code&gt; command config files&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#json-timeline-command"&gt;&lt;code&gt;json-timeline&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#json-timeline-command-examples-and-config-files"&gt;&lt;code&gt;json-timeline&lt;/code&gt; command examples and config files&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#level-tuning-command"&gt;&lt;code&gt;level-tuning&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#level-tuning-command-examples"&gt;&lt;code&gt;level-tuning&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#level-tuning-config-file"&gt;&lt;code&gt;level-tuning&lt;/code&gt; config file&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#list-profiles-command"&gt;&lt;code&gt;list-profiles&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#set-default-profile-command"&gt;&lt;code&gt;set-default-profile&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#set-default-profile-command-examples"&gt;&lt;code&gt;set-default-profile&lt;/code&gt; command examples&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#update-rules-command"&gt;&lt;code&gt;update-rules&lt;/code&gt; command&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#update-rules-command-example"&gt;&lt;code&gt;update-rules&lt;/code&gt; command example&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#timeline-output"&gt;Timeline Output&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#output-profiles"&gt;Output Profiles&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#1-minimal-profile-output"&gt;1. &lt;code&gt;minimal&lt;/code&gt; profile output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#2-standard-profile-output"&gt;2. &lt;code&gt;standard&lt;/code&gt; profile output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#3-verbose-profile-output"&gt;3. &lt;code&gt;verbose&lt;/code&gt; profile output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#4-all-field-info-profile-output"&gt;4. &lt;code&gt;all-field-info&lt;/code&gt; profile output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#5-all-field-info-verbose-profile-output"&gt;5. &lt;code&gt;all-field-info-verbose&lt;/code&gt; profile output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#6-super-verbose-profile-output"&gt;6. &lt;code&gt;super-verbose&lt;/code&gt; profile output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#7-timesketch-minimal-profile-output"&gt;7. &lt;code&gt;timesketch-minimal&lt;/code&gt; profile output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#8-timesketch-verbose-profile-output"&gt;8. &lt;code&gt;timesketch-verbose&lt;/code&gt; profile output&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#profile-comparison"&gt;Profile Comparison&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#profile-field-aliases"&gt;Profile Field Aliases&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#extra-profile-field-alias"&gt;Extra Profile Field Alias&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#abbreviations"&gt;Abbreviations&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#level-abbreviations"&gt;Level Abbreviations&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#mitre-attck-tactics-abbreviations"&gt;MITRE ATT&amp;amp;CK Tactics Abbreviations&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#channel-abbreviations"&gt;Channel Abbreviations&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#other-abbreviations"&gt;Other Abbreviations&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#progress-bar"&gt;Progress Bar&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#color-output"&gt;Color Output&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#results-summary-1"&gt;Results Summary&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#detection-fequency-timeline"&gt;Detection Fequency Timeline&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#hayabusa-rules"&gt;Hayabusa Rules&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#sigma-vs-hayabusa-built-in-sigma-compatible-rules"&gt;Sigma v.s. Hayabusa (Built-in Sigma Compatible) Rules&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#other-windows-event-log-analyzers-and-related-resources"&gt;Other Windows Event Log Analyzers and Related Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#windows-logging-recommendations"&gt;Windows Logging Recommendations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#sysmon-related-projects"&gt;Sysmon Related Projects&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#community-documentation"&gt;Community Documentation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#english"&gt;English&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#japanese"&gt;Japanese&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#contribution"&gt;Contribution&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#bug-submission"&gt;Bug Submission&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/#twitter"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Main Goals&lt;/h2&gt; 
&lt;h3&gt;Threat Hunting and Enterprise-wide DFIR&lt;/h3&gt; 
&lt;p&gt;Hayabusa currently has over 4000 Sigma rules and over 170 Hayabusa built-in detection rules with more rules being added regularly. It can be used for enterprise-wide proactive threat hunting as well as DFIR (Digital Forensics and Incident Response) for free with &lt;a href="https://docs.velociraptor.app/"&gt;Velociraptor&lt;/a&gt;'s &lt;a href="https://docs.velociraptor.app/exchange/artifacts/pages/windows.eventlogs.hayabusa/"&gt;Hayabusa artifact&lt;/a&gt;. By combining these two open-source tools, you can essentially retroactively reproduce a SIEM when there is no SIEM setup in the environment. You can learn about how to do this by watching &lt;a href="https://twitter.com/eric_capuano"&gt;Eric Capuano&lt;/a&gt;'s Velociraptor walkthrough &lt;a href="https://www.youtube.com/watch?v=Q1IoGX--814"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Fast Forensics Timeline Generation&lt;/h3&gt; 
&lt;p&gt;Windows event log analysis has traditionally been a very long and tedious process because Windows event logs are 1) in a data format that is hard to analyze and 2) the majority of data is noise and not useful for investigations. Hayabusa's goal is to extract out only useful data and present it in a concise as possible easy-to-read format that is usable not only by professionally trained analysts but any Windows system administrator. Hayabusa hopes to let analysts get 80% of their work done in 20% of the time when compared to traditional Windows event log analysis.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/DFIR-TimelineCreation-EN.png" alt="DFIR Timeline"&gt;&lt;/p&gt; 
&lt;h1&gt;Screenshots&lt;/h1&gt; 
&lt;h2&gt;Startup&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/Startup.png" alt="Hayabusa Startup"&gt;&lt;/p&gt; 
&lt;h2&gt;DFIR Timeline Terminal Output&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/Results.png" alt="Hayabusa DFIR terminal output"&gt;&lt;/p&gt; 
&lt;h2&gt;Keyword Search Results&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/SearchResults.png" alt="Hayabusa search results"&gt;&lt;/p&gt; 
&lt;h2&gt;Detection Fequency Timeline (&lt;code&gt;-T&lt;/code&gt; option)&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/DetectionFrequencyTimeline.png" alt="Hayabusa Detection Frequency Timeline"&gt;&lt;/p&gt; 
&lt;h2&gt;Results Summary&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/ResultsSummary.png" alt="Hayabusa results summary"&gt;&lt;/p&gt; 
&lt;h2&gt;HTML Results Summary (&lt;code&gt;-H&lt;/code&gt; option)&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/HTML-ResultsSummary-1.png" alt="Hayabusa results summary"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/HTML-ResultsSummary-2.png" alt="Hayabusa results summary"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/HTML-ResultsSummary-3.png" alt="Hayabusa results summary"&gt;&lt;/p&gt; 
&lt;h2&gt;DFIR Timeline Analysis in LibreOffice (&lt;code&gt;-M&lt;/code&gt; Multiline Output)&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/DFIR-TimelineLibreOfficeMultiline.jpeg" alt="Hayabusa analysis in LibreOffice"&gt;&lt;/p&gt; 
&lt;h2&gt;DFIR Timeline Analysis in Timeline Explorer&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/TimelineExplorer-ColoredTimeline.png" alt="Hayabusa analysis in Timeline Explorer"&gt;&lt;/p&gt; 
&lt;h2&gt;Critical Alert Filtering and Computer Grouping in Timeline Explorer&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/TimelineExplorer-CriticalAlerts-ComputerGrouping.png" alt="Critical alert filtering and computer grouping in Timeline Explorer"&gt;&lt;/p&gt; 
&lt;h2&gt;Analysis with the Elastic Stack Dashboard&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/ElasticStackImport/17-HayabusaDashboard-1.png" alt="Elastic Stack Dashboard 1"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/ElasticStackImport/18-HayabusaDashboard-2.png" alt="Elastic Stack Dashboard 2"&gt;&lt;/p&gt; 
&lt;h2&gt;Analysis in Timesketch&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/TimesketchAnalysis.png" alt="Timesketch"&gt;&lt;/p&gt; 
&lt;h1&gt;Importing and Analyzing Timeline Results&lt;/h1&gt; 
&lt;p&gt;You can learn how to analyze CSV timelines in Timeline Explorer &lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/TimelineExplorerAnalysis/TimelineExplorerAnalysis-English.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can learn how to import CSV files into Elastic Stack &lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/ElasticStackImport/ElasticStackImport-English.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can learn how to import CSV files into Timesketch &lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/TimesketchImport/TimesketchImport-English.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Analyzing JSON-formatted results with JQ&lt;/h1&gt; 
&lt;p&gt;You can learn how to analyze JSON-formatted results with &lt;code&gt;jq&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/AnalysisWithJQ-English.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cross-platform support: Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;Developed in Rust to be memory safe and fast.&lt;/li&gt; 
 &lt;li&gt;Multi-thread support delivering up to a 5x speed improvement.&lt;/li&gt; 
 &lt;li&gt;Creates single easy-to-analyze timelines for forensic investigations and incident response.&lt;/li&gt; 
 &lt;li&gt;Threat hunting based on IoC signatures written in easy to read/create/edit YML based hayabusa rules.&lt;/li&gt; 
 &lt;li&gt;Sigma rule support to convert sigma rules to hayabusa rules.&lt;/li&gt; 
 &lt;li&gt;Currently it supports the most sigma rules compared to other similar tools and even supports count rules and new aggregators such as &lt;code&gt;|equalsfield&lt;/code&gt; and &lt;code&gt;|endswithfield&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Computer metrics. (Useful for filtering on/out certain computers with a large amount of events.)&lt;/li&gt; 
 &lt;li&gt;Event ID metrics. (Useful for getting a picture of what types of events there are and for tuning your log settings.)&lt;/li&gt; 
 &lt;li&gt;Rule tuning configuration by excluding unneeded or noisy rules.&lt;/li&gt; 
 &lt;li&gt;MITRE ATT&amp;amp;CK mapping of tactics.&lt;/li&gt; 
 &lt;li&gt;Rule level tuning.&lt;/li&gt; 
 &lt;li&gt;Create a list of unique pivot keywords to quickly identify abnormal users, hostnames, processes, etc... as well as correlate events.&lt;/li&gt; 
 &lt;li&gt;Output all fields for more thorough investigations.&lt;/li&gt; 
 &lt;li&gt;Successful and failed logon summary.&lt;/li&gt; 
 &lt;li&gt;Enterprise-wide threat hunting and DFIR on all endpoints with &lt;a href="https://docs.velociraptor.app/"&gt;Velociraptor&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Output to CSV, JSON/JSONL and HTML Summary Reports.&lt;/li&gt; 
 &lt;li&gt;Daily Sigma rule updates.&lt;/li&gt; 
 &lt;li&gt;Support for JSON-formatted log input.&lt;/li&gt; 
 &lt;li&gt;Log field normalization. (Converting multiple fields with different naming conventions into the same field name.)&lt;/li&gt; 
 &lt;li&gt;Log enrichment by adding GeoIP (ASN, city, country) information to IP addresses.&lt;/li&gt; 
 &lt;li&gt;Search all events for keywords or regular expressions.&lt;/li&gt; 
 &lt;li&gt;Field data mapping. (Ex: &lt;code&gt;0xc0000234&lt;/code&gt; -&amp;gt; &lt;code&gt;ACCOUNT LOCKED&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Evtx record carving from evtx slack space.&lt;/li&gt; 
 &lt;li&gt;Event de-duplication when outputting. (Useful when recovery records is enabled or when you include backed up evtx files, evtx files from VSS, etc...)&lt;/li&gt; 
 &lt;li&gt;Scan setting wizard to help choose which rules to enable easier. (In order to reduce false positives, etc...)&lt;/li&gt; 
 &lt;li&gt;PowerShell classic log field parsing and extraction.&lt;/li&gt; 
 &lt;li&gt;Low memory usage. (Note: this is possible by not sorting results. Best for running on agents or big data.)&lt;/li&gt; 
 &lt;li&gt;Filtering on Channels and Rules for the most efficient performance.&lt;/li&gt; 
 &lt;li&gt;Detect, extract and decode Base64 strings found in logs.&lt;/li&gt; 
 &lt;li&gt;Alert level adjustment based on critical systems.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Downloads&lt;/h1&gt; 
&lt;p&gt;Please download the latest stable version of Hayabusa with compiled binaries or compile the source code from the &lt;a href="https://github.com/Yamato-Security/hayabusa/releases"&gt;Releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;We provide binaries for the following architectures:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux ARM 64-bit GNU (&lt;code&gt;hayabusa-x.x.x-lin-aarch64-gnu&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Linux Intel 64-bit GNU (&lt;code&gt;hayabusa-x.x.x-lin-x64-gnu&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Linux Intel 64-bit MUSL (&lt;code&gt;hayabusa-x.x.x-lin-x64-musl&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;macOS ARM 64-bit (&lt;code&gt;hayabusa-x.x.x-mac-aarch64&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;macOS Intel 64-bit (&lt;code&gt;hayabusa-x.x.x-mac-x64&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Windows ARM 64-bit (&lt;code&gt;hayabusa-x.x.x-win-aarch64.exe&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Windows Intel 64-bit (&lt;code&gt;hayabusa-x.x.x-win-x64.exe&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Windows Intel 32-bit (&lt;code&gt;hayabusa-x.x.x-win-x86.exe&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href="https://github.com/Yamato-Security/hayabusa/issues/1332"&gt;For some reason the Linux ARM MUSL binary does not run properly&lt;/a&gt; so we do not provide that binary. It is out of our control, so we plan on providing it in the future when it gets fixed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Windows live response packages&lt;/h2&gt; 
&lt;p&gt;As of v2.18.0, we are provide special Windows packages that use XOR-encoded rules provided in a single file as well as all of the config files combined into a single file (hosted at the &lt;a href="https://github.com/Yamato-Security/hayabusa-encoded-rules"&gt;hayabusa-encoded-rules repository&lt;/a&gt;). Just download the zip packages with &lt;code&gt;live-response&lt;/code&gt; in the name. The zip files just include three files: the Hayabusa binary, XOR-encoded rules file and the config file. The purpose of these live response packages are for when running Hayabusa on client endpoints, we want to make sure that anti-virus scanners like Windows Defender do not give false positives on &lt;code&gt;.yml&lt;/code&gt; rule files. Also, we want to minimize the amount of files being written to the system so that forensics artifacts like the USN Journal do not get overwritten.&lt;/p&gt; 
&lt;h1&gt;Git Cloning&lt;/h1&gt; 
&lt;p&gt;You can &lt;code&gt;git clone&lt;/code&gt; the repository with the following command and compile binary from source code:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The main branch of the repository is for development purposes so you may be able to access new features not yet officially released, however, there may be bugs so consider it unstable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/Yamato-Security/hayabusa.git --recursive
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you forget to use --recursive option, the &lt;code&gt;rules&lt;/code&gt; folder, which is managed as a git submodule, will not be cloned.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can sync the &lt;code&gt;rules&lt;/code&gt; folder and get latest Hayabusa rules with &lt;code&gt;git pull --recurse-submodules&lt;/code&gt; or use the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;hayabusa.exe update-rules
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the update fails, you may need to rename the &lt;code&gt;rules&lt;/code&gt; folder and try again.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Caution: When updating, rules and config files in the &lt;code&gt;rules&lt;/code&gt; folder are replaced with the latest rules and config files in the &lt;a href="https://github.com/Yamato-Security/hayabusa-rules"&gt;hayabusa-rules&lt;/a&gt; repository. Any changes you make to existing files will be overwritten, so we recommend that you make backups of any files that you edit before updating. If you are performing level tuning with &lt;code&gt;level-tuning&lt;/code&gt;, please re-tune your rule files after each update. If you add &lt;strong&gt;new&lt;/strong&gt; rules inside of the &lt;code&gt;rules&lt;/code&gt; folder, they will &lt;strong&gt;not&lt;/strong&gt; be overwritten or deleted when updating.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;Advanced: Compiling From Source (Optional)&lt;/h1&gt; 
&lt;p&gt;If you have Rust installed, you can compile from source with the following command:&lt;/p&gt; 
&lt;p&gt;Note: To compile, you usually need the latest version of Rust.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can download the latest unstable version from the main branch or the latest stable version from the &lt;a href="https://github.com/Yamato-Security/hayabusa/releases"&gt;Releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;Be sure to periodically update Rust with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The compiled binary will be outputted in the &lt;code&gt;./target/release&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h2&gt;Updating Rust Packages&lt;/h2&gt; 
&lt;p&gt;You can update to the latest Rust crates before compiling:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo update
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Please let us know if anything breaks after you update.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Cross-compiling 32-bit Windows Binaries&lt;/h2&gt; 
&lt;p&gt;You can create 32-bit binaries on 64-bit Windows systems with the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;rustup install stable-i686-pc-windows-msvc
rustup target add i686-pc-windows-msvc
rustup run stable-i686-pc-windows-msvc cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning: Be sure to run &lt;code&gt;rustup install stable-i686-pc-windows-msvc&lt;/code&gt; whenever there is a new stable version of Rust as &lt;code&gt;rustup update stable&lt;/code&gt; will not update the compiler for cross compiling and you may receive build errors.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;macOS Compiling Notes&lt;/h2&gt; 
&lt;p&gt;If you receive compile errors about openssl, you will need to install &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; and then install the following packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew install pkg-config
brew install openssl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Linux Compiling Notes&lt;/h2&gt; 
&lt;p&gt;The following build dependencies are required:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;openssl-devel (Fedora-based) / libssl-dev (Ubuntu-based)&lt;/li&gt; 
 &lt;li&gt;perl&lt;/li&gt; 
 &lt;li&gt;musl-gcc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Cross-compiling Linux MUSL Binaries&lt;/h2&gt; 
&lt;p&gt;On a Linux OS, first install the target.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;rustup install stable-x86_64-unknown-linux-musl
rustup target add x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Compile with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo build --release --target=x86_64-unknown-linux-musl
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning: Be sure to run &lt;code&gt;rustup install stable-x86_64-unknown-linux-musl&lt;/code&gt; whenever there is a new stable version of Rust as &lt;code&gt;rustup update stable&lt;/code&gt; will not update the compiler for cross compiling and you may receive build errors.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The MUSL binary will be created in the &lt;code&gt;./target/x86_64-unknown-linux-musl/release/&lt;/code&gt; directory. MUSL binaries are are about 15% slower than the GNU binaries, however, they are more portable accross different versions and distributions of linux.&lt;/p&gt; 
&lt;h1&gt;Running Hayabusa&lt;/h1&gt; 
&lt;h2&gt;Caution: Anti-Virus/EDR Warnings and Slow Runtimes&lt;/h2&gt; 
&lt;p&gt;You may receive an alert from anti-virus or EDR products when trying to run hayabusa or even just when downloading the &lt;code&gt;.yml&lt;/code&gt; rules as there will be keywords like &lt;code&gt;mimikatz&lt;/code&gt; and suspicious PowerShell commands in the detection signature. These are false positives so will need to configure exclusions in your security products to allow hayabusa to run. If you are worried about malware or supply chain attacks, please check the hayabusa source code and compile the binaries yourself.&lt;/p&gt; 
&lt;p&gt;You may experience slow runtime especially on the first run after a reboot due to the real-time protection of Windows Defender. You can avoid this by temporarily turning real-time protection off or adding an exclusion to the hayabusa runtime directory. (Please take into consideration the security risks before doing these.)&lt;/p&gt; 
&lt;h2&gt;Windows&lt;/h2&gt; 
&lt;p&gt;In a Command/PowerShell Prompt or Windows Terminal, just run the appropriate 32-bit or 64-bit Windows binary.&lt;/p&gt; 
&lt;h3&gt;Error when trying to scan a file or directory with a space in the path&lt;/h3&gt; 
&lt;p&gt;When using the built-in Command or PowerShell prompt in Windows, you may receive an error that Hayabusa was not able to load any .evtx files if there is a space in your file or directory path. In order to load the .evtx files properly, be sure to do the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Enclose the file or directory path with double quotes.&lt;/li&gt; 
 &lt;li&gt;If it is a directory path, make sure that you do not include a backslash for the last character.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Characters not being displayed correctly&lt;/h3&gt; 
&lt;p&gt;With the default font &lt;code&gt;Lucida Console&lt;/code&gt; on Windows, various characters used in the logo and tables will not be displayed properly. You should change the font to &lt;code&gt;Consalas&lt;/code&gt; to fix this.&lt;/p&gt; 
&lt;p&gt;This will fix most of the text rendering except for the display of Japanese characters in the closing messages:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/Mojibake.png" alt="Mojibake"&gt;&lt;/p&gt; 
&lt;p&gt;You have four options to fix this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Use &lt;a href="https://learn.microsoft.com/en-us/windows/terminal/"&gt;Windows Terminal&lt;/a&gt; instead of the Command or PowerShell prompt. (Recommended)&lt;/li&gt; 
 &lt;li&gt;Use the &lt;code&gt;MS Gothic&lt;/code&gt; font. Note that backslashes will turn into Yen symbols. &lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/MojibakeFix.png" alt="MojibakeFix"&gt;&lt;/li&gt; 
 &lt;li&gt;Install the &lt;a href="https://github.com/yuru7/HackGen/releases"&gt;HackGen&lt;/a&gt; fonts and use &lt;code&gt;HackGen Console NF&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Use the &lt;code&gt;-q, --quiet&lt;/code&gt; to not display the closing messages that contain Japanese.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Linux&lt;/h2&gt; 
&lt;p&gt;You first need to make the binary executable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chmod +x ./hayabusa
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run it from the Hayabusa root directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./hayabusa
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;macOS&lt;/h2&gt; 
&lt;p&gt;From Terminal or iTerm2, you first need to make the binary executable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chmod +x ./hayabusa
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, try to run it from the Hayabusa root directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./hayabusa
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On the latest version of macOS, you may receive the following security error when you try to run it:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/MacOS-RunError-1-EN.png" alt="Mac Error 1 EN"&gt;&lt;/p&gt; 
&lt;p&gt;Click "Cancel" and then from System Preferences, open "Security &amp;amp; Privacy" and from the General tab, click "Allow Anyway".&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/MacOS-RunError-2-EN.png" alt="Mac Error 2 EN"&gt;&lt;/p&gt; 
&lt;p&gt;After that, try to run it again.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./hayabusa
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following warning will pop up, so please click "Open".&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/MacOS-RunError-3-EN.png" alt="Mac Error 3 EN"&gt;&lt;/p&gt; 
&lt;p&gt;You should now be able to run hayabusa.&lt;/p&gt; 
&lt;h1&gt;Command List&lt;/h1&gt; 
&lt;h2&gt;Analysis Commands:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;computer-metrics&lt;/code&gt;: Print the number of events based on computer names.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;eid-metrics&lt;/code&gt;: Print the number and percentage of events based on Event ID.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;expand-list&lt;/code&gt;: Extract &lt;code&gt;expand&lt;/code&gt; placeholders from the &lt;code&gt;rules&lt;/code&gt; folder.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;extract-base64&lt;/code&gt;: Extract and decode base64 strings from events.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;log-metrics&lt;/code&gt;: Print log file metrics.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;logon-summary&lt;/code&gt;: Print a summary of logon events.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pivot-keywords-list&lt;/code&gt;: Print a list of suspicious keywords to pivot on.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;search&lt;/code&gt;: Search all events by keyword(s) or regular expressions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Config Commands:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;config-critical-systems&lt;/code&gt;: Find critical systems like domain controllers and file servers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;DFIR Timeline Commands:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;csv-timeline&lt;/code&gt;: Save the timeline in CSV format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;json-timeline&lt;/code&gt;: Save the timeline in JSON/JSONL format.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;level-tuning&lt;/code&gt;: Custom tune the alerts' &lt;code&gt;level&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;list-profiles&lt;/code&gt;: List the available output profiles.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set-default-profile&lt;/code&gt;: Change the default profile.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;update-rules&lt;/code&gt;: Sync the rules to the latest rules in the &lt;a href="https://github.com/Yamato-Security/hayabusa-rules"&gt;hayabusa-rules&lt;/a&gt; GitHub repository.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;General Commands:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;help&lt;/code&gt;: Print this message or the help of the given subcommand(s)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;list-contributors&lt;/code&gt;: Print the list of contributors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Command Usage&lt;/h1&gt; 
&lt;h2&gt;Analysis Commands&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;computer-metrics&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;computer-metrics&lt;/code&gt; command to check how many events there are according to each computer defined in the &lt;code&gt;&amp;lt;System&amp;gt;&amp;lt;Computer&amp;gt;&lt;/code&gt; field. Be aware that you cannot completely rely on the &lt;code&gt;Computer&lt;/code&gt; field for separating events by their original computer. Windows 11 will sometimes use completely different &lt;code&gt;Computer&lt;/code&gt; names when saving to event logs. Also, Windows 10 will sometimes record the &lt;code&gt;Computer&lt;/code&gt; name in all lowercase. This command does not use any detection rules so will analyze all events. This is a good command to run to quickly see which computers have the most logs. With this information, you can then use the &lt;code&gt;--include-computer&lt;/code&gt; or &lt;code&gt;--exclude-computer&lt;/code&gt; options when creating your timelines to make your timeline generation more efficient by creating multiple timelines according to computer or exclude events from certain computers.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: computer-metrics &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)

Filtering:
      --time-offset &amp;lt;OFFSET&amp;gt;  Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)

Output:
  -o, --output &amp;lt;FILE&amp;gt;  Save the results in CSV format (ex: computer-metrics.csv)

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner
  -v, --verbose   Output verbose information
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;computer-metrics&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Print computer name metrics from a directory: &lt;code&gt;hayabusa.exe computer-metrics -d ../logs&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Save results to a CSV file: &lt;code&gt;hayabusa.exe computer-metrics -d ../logs -o computer-metrics.csv&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;code&gt;computer-metrics&lt;/code&gt; screenshot&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/ComputerMetrics.png" alt="computer-metrics screenshot"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;eid-metrics&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;eid-metrics&lt;/code&gt; command to print out the total number and percentage of event IDs (&lt;code&gt;&amp;lt;System&amp;gt;&amp;lt;EventID&amp;gt;&lt;/code&gt; field) seperated by channels. This command does not use any detection rules so will scan all events.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: eid-metrics &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)

Filtering:
      --exclude-computer &amp;lt;COMPUTER...&amp;gt;  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --include-computer &amp;lt;COMPUTER...&amp;gt;  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --time-offset &amp;lt;OFFSET&amp;gt;            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)

Output:
  -b, --disable-abbreviations  Disable abbreviations
  -o, --output &amp;lt;FILE&amp;gt;          Save the Metrics in CSV format (ex: metrics.csv)

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner
  -v, --verbose   Output verbose information

Time Format:
      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)
  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)
      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)
      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)
      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)
      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)
  -U, --UTC               Output time in UTC format (default: local time)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;eid-metrics&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Print Event ID metrics from a single file: &lt;code&gt;hayabusa.exe eid-metrics -f Security.evtx&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Print Event ID metrics from a directory: &lt;code&gt;hayabusa.exe eid-metrics -d ../logs&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Save results to a CSV file: &lt;code&gt;hayabusa.exe eid-metrics -f Security.evtx -o eid-metrics.csv&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;code&gt;eid-metrics&lt;/code&gt; command config file&lt;/h4&gt; 
&lt;p&gt;The channel, event IDs and titles of the events are defined in &lt;code&gt;rules/config/channel_eid_info.txt&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Channel,EventID,EventTitle
Microsoft-Windows-Sysmon/Operational,1,Process Creation.
Microsoft-Windows-Sysmon/Operational,2,File Creation Timestamp Changed. (Possible Timestomping)
Microsoft-Windows-Sysmon/Operational,3,Network Connection.
Microsoft-Windows-Sysmon/Operational,4,Sysmon Service State Changed.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;eid-metrics&lt;/code&gt; screenshot&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/EID-Metrics.png" alt="eid-metrics screenshot"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;expand-list&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;Extract &lt;code&gt;expand&lt;/code&gt; placeholders from the rules folder. This is useful when creating config files to use any rule that uses the &lt;code&gt;expand&lt;/code&gt; field modifier. To use &lt;code&gt;expand&lt;/code&gt; rules, you just need to create a &lt;code&gt;.txt&lt;/code&gt; file with the name of the &lt;code&gt;expand&lt;/code&gt; field modifier under the &lt;code&gt;./config/expand/&lt;/code&gt; directory, and put in all of the values you want to check inside the file.&lt;/p&gt; 
&lt;p&gt;For example, if the rule &lt;code&gt;detection&lt;/code&gt; logic is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;detection:
    selection:
        EventID: 5145
        RelativeTargetName|contains: '\winreg'
    filter_main:
        IpAddress|expand: '%Admins_Workstations%'
    condition: selection and not filter_main
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;you would create the text file &lt;code&gt;./config/expand/Admins_Workstations.txt&lt;/code&gt; and put in values like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;AdminWorkstation1
AdminWorkstation2
AdminWorkstation3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This would essentially check the same logic as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;- IpAddress: 'AdminWorkstation1'
- IpAddress: 'AdminWorkstation2'
- IpAddress: 'AdminWorkstation3'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the config file does not exist, Hayabusa will still load the &lt;code&gt;expand&lt;/code&gt; rule but ignore it.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage:  expand-list &amp;lt;INPUT&amp;gt; [OPTIONS]

General Options:
  -h, --help              Show the help menu
  -r, --rules &amp;lt;DIR/FILE&amp;gt;  Specify rule directory (default: ./rules)

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;expand-list&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Extract out &lt;code&gt;expand&lt;/code&gt; field modifiers from the default &lt;code&gt;rules&lt;/code&gt; directory: &lt;code&gt;hayabusa.exe expand-list&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Extract out &lt;code&gt;expand&lt;/code&gt; field modifiers from the &lt;code&gt;sigma&lt;/code&gt; directory: &lt;code&gt;hayabusa.exe eid-metrics -r ../sigma&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;code&gt;expand-list&lt;/code&gt; results&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;5 unique expand placeholders found:
Admins_Workstations
DC-MACHINE-NAME
Workstations
internal_domains
domain_controller_hostnames
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;extract-base64&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;This command will extract base64 strings from the following events, decode them and tell what kind of encoding is being used.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Security 4688 CommandLine&lt;/li&gt; 
 &lt;li&gt;Sysmon 1 CommandLine, ParentCommandLine&lt;/li&gt; 
 &lt;li&gt;System 7045 ImagePath&lt;/li&gt; 
 &lt;li&gt;PowerShell Operational 4104&lt;/li&gt; 
 &lt;li&gt;PowerShell Operational 4103&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;Usage:  extract-base64 &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)

Filtering:
      --exclude-computer &amp;lt;COMPUTER...&amp;gt;  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --include-computer &amp;lt;COMPUTER...&amp;gt;  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --time-offset &amp;lt;OFFSET&amp;gt;            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)

Output:
  -o, --output &amp;lt;FILE&amp;gt;  Extract Base64 strings

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner
  -v, --verbose   Output verbose information

Time Format:
      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)
  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)
      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)
      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)
      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)
      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)
  -U, --UTC               Output time in UTC format (default: local time)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;extract-base64&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Scan a directory and output to the terminal: &lt;code&gt;hayabusa.exe extract-base64 -d ../hayabusa-sample-evtx&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Scan a directory and output to a CSV file: &lt;code&gt;hayabusa.exe eid-metrics -r ../sigma -o base64-extracted.csv&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;code&gt;extract-base64&lt;/code&gt; results&lt;/h4&gt; 
&lt;p&gt;When outputting to the terminal, because space is limited, only the following fields are displayed:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Timestamp&lt;/li&gt; 
 &lt;li&gt;Computer&lt;/li&gt; 
 &lt;li&gt;Base64 String&lt;/li&gt; 
 &lt;li&gt;Decoded String (if not binary)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When saving to a CSV file, the following fields are saved:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Timestamp&lt;/li&gt; 
 &lt;li&gt;Computer&lt;/li&gt; 
 &lt;li&gt;Base64 String&lt;/li&gt; 
 &lt;li&gt;Decoded String (if not binary)&lt;/li&gt; 
 &lt;li&gt;Original Field&lt;/li&gt; 
 &lt;li&gt;Length&lt;/li&gt; 
 &lt;li&gt;Binary (&lt;code&gt;Y/N&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Double Encoding (when &lt;code&gt;Y&lt;/code&gt;, it usually is malicious)&lt;/li&gt; 
 &lt;li&gt;Encoding Type&lt;/li&gt; 
 &lt;li&gt;File Type&lt;/li&gt; 
 &lt;li&gt;Event&lt;/li&gt; 
 &lt;li&gt;Record ID&lt;/li&gt; 
 &lt;li&gt;File Name&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;log-metrics&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;log-metrics&lt;/code&gt; command to print out the following metadata inside event logs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Filename&lt;/li&gt; 
 &lt;li&gt;Computer names&lt;/li&gt; 
 &lt;li&gt;Number of events&lt;/li&gt; 
 &lt;li&gt;First timestamp&lt;/li&gt; 
 &lt;li&gt;Last timestamp&lt;/li&gt; 
 &lt;li&gt;Channels&lt;/li&gt; 
 &lt;li&gt;Providers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This command does not use any detection rules so will scan all events.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: log-metrics &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)

Filtering:
      --exclude-computer &amp;lt;COMPUTER...&amp;gt;  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --include-computer &amp;lt;COMPUTER...&amp;gt;  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --time-offset &amp;lt;OFFSET&amp;gt;            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)

Output:
  -b, --disable-abbreviations  Disable abbreviations
  -M, --multiline              Output event field information in multiple rows for CSV output
  -o, --output &amp;lt;FILE&amp;gt;          Save the Metrics in CSV format (ex: metrics.csv)
  -S, --tab-separator          Separate event field information by tabs

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner
  -v, --verbose   Output verbose information

Time Format:
      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)
  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)
      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)
      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)
      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)
      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)
  -U, --UTC               Output time in UTC format (default: local time)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;log-metrics&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Print Event ID metrics from a single file: &lt;code&gt;hayabusa.exe log-metrics -f Security.evtx&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Print Event ID metrics from a directory: &lt;code&gt;hayabusa.exe log-metrics -d ../logs&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Save results to a CSV file: &lt;code&gt;hayabusa.exe log-metrics -d ../logs -o eid-metrics.csv&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;code&gt;log-metrics&lt;/code&gt; screenshot&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/LogMetrics.png" alt="log-metrics screenshot"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;logon-summary&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;logon-summary&lt;/code&gt; command to output logon information summary (logon usernames and successful and failed logon count). You can display the logon information for one evtx file with &lt;code&gt;-f&lt;/code&gt; or multiple evtx files with the &lt;code&gt;-d&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;Successful logons are taken from the following events:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Security 4624&lt;/code&gt; (Successful Logon)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RDS-LSM 21&lt;/code&gt; (Remote Desktop Service Local Session Manager Logon)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RDS-GTW 302&lt;/code&gt; (Remote Desktop Service Gateway Logon)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Failed logons are taken from &lt;code&gt;Security 4625&lt;/code&gt; events.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: logon-summary &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)

Filtering:
      --exclude-computer &amp;lt;COMPUTER...&amp;gt;  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --include-computer &amp;lt;COMPUTER...&amp;gt;  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --time-offset &amp;lt;OFFSET&amp;gt;            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)
      --timeline-end &amp;lt;DATE&amp;gt;             End time of the event logs to load (ex: "2022-02-22 23:59:59 +09:00")
      --timeline-start &amp;lt;DATE&amp;gt;           Start time of the event logs to load (ex: "2020-02-22 00:00:00 +09:00")

Output:
  -o, --output &amp;lt;FILENAME-PREFIX&amp;gt;  Save the logon summary to two CSV files (ex: -o logon-summary)

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner
  -v, --verbose   Output verbose information

Time Format:
      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)
  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)
      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)
      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)
      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)
      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)
  -U, --UTC               Output time in UTC format (default: local time)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;logon-summary&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Print logon summary: &lt;code&gt;hayabusa.exe logon-summary -f Security.evtx&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Save logon summary results: &lt;code&gt;hayabusa.exe logon-summary -d ../logs -o logon-summary.csv&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;code&gt;logon-summary&lt;/code&gt; screenshots&lt;/h4&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/LogonSummarySuccessfulLogons.png" alt="logon-summary successful logons screenshot"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/screenshots/LogonSummaryFailedLogons.png" alt="logon-summary failed logons screenshot"&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;pivot-keywords-list&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;You can use the &lt;code&gt;pivot-keywords-list&lt;/code&gt; command to create a list of unique pivot keywords to quickly identify abnormal users, hostnames, processes, etc... as well as correlate events.&lt;/p&gt; 
&lt;p&gt;Important: by default, hayabusa will return results from all events (informational and higher) so we highly recommend combining the &lt;code&gt;pivot-keywords-list&lt;/code&gt; command with the &lt;code&gt;-m, --min-level&lt;/code&gt; option. For example, start off with only creating keywords from &lt;code&gt;critical&lt;/code&gt; alerts with &lt;code&gt;-m critical&lt;/code&gt; and then continue with &lt;code&gt;-m high&lt;/code&gt;, &lt;code&gt;-m medium&lt;/code&gt;, etc... There will most likely be common keywords in your results that will match on many normal events, so after manually checking the results and creating a list of unique keywords in a single file, you can then create a narrowed down timeline of suspicious activity with a command like &lt;code&gt;grep -f keywords.txt timeline.csv&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: pivot-keywords-list &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)
  -w, --no-wizard                      Do not ask questions. Scan for all events and alerts
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)

Filtering:
  -E, --EID-filter                      Scan only common EIDs for faster speed (./rules/config/target_event_IDs.txt)
  -D, --enable-deprecated-rules         Enable rules with a status of deprecated
  -n, --enable-noisy-rules              Enable rules set to noisy (./rules/config/noisy_rules.txt)
  -u, --enable-unsupported-rules        Enable rules with a status of unsupported
  -e, --exact-level &amp;lt;LEVEL&amp;gt;             Only load rules with a specific level (informational, low, medium, high, critical)
      --exclude-computer &amp;lt;COMPUTER...&amp;gt;  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --exclude-eid &amp;lt;EID...&amp;gt;            Do not scan specific EIDs for faster speed (ex: 1) (ex: 1,4688)
      --exclude-status &amp;lt;STATUS...&amp;gt;      Do not load rules according to status (ex: experimental) (ex: stable,test)
      --exclude-tag &amp;lt;TAG...&amp;gt;            Do not load rules with specific tags (ex: sysmon)
      --include-computer &amp;lt;COMPUTER...&amp;gt;  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --include-eid &amp;lt;EID...&amp;gt;            Scan only specified EIDs for faster speed (ex: 1) (ex: 1,4688)
      --include-status &amp;lt;STATUS...&amp;gt;      Only load rules with specific status (ex: experimental) (ex: stable,test)
      --include-tag &amp;lt;TAG...&amp;gt;            Only load rules with specific tags (ex: attack.execution,attack.discovery)
  -m, --min-level &amp;lt;LEVEL&amp;gt;               Minimum level for rules to load (default: informational)
      --time-offset &amp;lt;OFFSET&amp;gt;            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)
      --timeline-end &amp;lt;DATE&amp;gt;             End time of the event logs to load (ex: "2022-02-22 23:59:59 +09:00")
      --timeline-start &amp;lt;DATE&amp;gt;           Start time of the event logs to load (ex: "2020-02-22 00:00:00 +09:00")

Output:
  -o, --output &amp;lt;FILENAME-PREFIX&amp;gt;  Save pivot words to separate files (ex: PivotKeywords)

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner
  -v, --verbose   Output verbose information
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;pivot-keywords-list&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Output pivot keywords to screen: &lt;code&gt;hayabusa.exe pivot-keywords-list -d ../logs -m critical&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Create a list of pivot keywords from critical alerts and save the results. (Results will be saved to &lt;code&gt;keywords-Ip Addresses.txt&lt;/code&gt;, &lt;code&gt;keywords-Users.txt&lt;/code&gt;, etc...):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe pivot-keywords-list -d ../logs -m critical -o keywords`
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;pivot-keywords-list&lt;/code&gt; config file&lt;/h4&gt; 
&lt;p&gt;You can customize what keywords you want to search for by editing &lt;code&gt;./rules/config/pivot_keywords.txt&lt;/code&gt;. &lt;a href="https://github.com/Yamato-Security/hayabusa-rules/raw/main/config/pivot_keywords.txt"&gt;This page&lt;/a&gt; is the default setting.&lt;/p&gt; 
&lt;p&gt;The format is &lt;code&gt;KeywordName.FieldName&lt;/code&gt;. For example, when creating the list of &lt;code&gt;Users&lt;/code&gt;, hayabusa will list up all the values in the &lt;code&gt;SubjectUserName&lt;/code&gt;, &lt;code&gt;TargetUserName&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt; fields.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;search&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;search&lt;/code&gt; command will let you keyword search on all events. (Not just Hayabusa detection results.) This is useful to determine if there is any evidence in events that are not detected by Hayabusa.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: hayabusa.exe search &amp;lt;INPUT&amp;gt; &amp;lt;--keywords "&amp;lt;KEYWORDS&amp;gt;" OR --regex "&amp;lt;REGEX&amp;gt;"&amp;gt; [OPTIONS]

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner
  -v, --verbose   Output verbose information

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)
  -s, --sort                           Sort results before saving the file (warning: this uses much more memory!)

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

Filtering:
  -a, --and-logic              Search keywords with AND logic (default: OR)
  -F, --filter &amp;lt;FILTER...&amp;gt;     Filter by specific field(s)
  -i, --ignore-case            Case-insensitive keyword search
  -k, --keyword &amp;lt;KEYWORD...&amp;gt;   Search by keyword(s)
  -r, --regex &amp;lt;REGEX&amp;gt;          Search by regular expression
      --time-offset &amp;lt;OFFSET&amp;gt;   Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)
      --timeline-end &amp;lt;DATE&amp;gt;    End time of the event logs to load (ex: "2022-02-22 23:59:59 +09:00")
      --timeline-start &amp;lt;DATE&amp;gt;  Start time of the event logs to load (ex: "2020-02-22 00:00:00 +09:00")

Output:
  -b, --disable-abbreviations  Disable abbreviations
  -J, --JSON-output            Save the search results in JSON format (ex: -J -o results.json)
  -L, --JSONL-output           Save the search results in JSONL format (ex: -L -o results.jsonl)
  -M, --multiline              Output event field information in multiple rows for CSV output
  -o, --output &amp;lt;FILE&amp;gt;          Save the search results in CSV format (ex: search.csv)
  -S, --tab-separator          Separate event field information by tabs

Time Format:
      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)
  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)
      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)
      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)
      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)
      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)
  -U, --UTC               Output time in UTC format (default: local time)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;search&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search the &lt;code&gt;../hayabusa-sample-evtx&lt;/code&gt; directory for the keyword &lt;code&gt;mimikatz&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe search -d ../hayabusa-sample-evtx -k "mimikatz"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: The keyword will match if &lt;code&gt;mimikatz&lt;/code&gt; is found anywhere in the data. It is not an exact match.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search the &lt;code&gt;../hayabusa-sample-evtx&lt;/code&gt; directory for the keywords &lt;code&gt;mimikatz&lt;/code&gt; or &lt;code&gt;kali&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe search -d ../hayabusa-sample-evtx -k "mimikatz" -k "kali"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search the &lt;code&gt;../hayabusa-sample-evtx&lt;/code&gt; directory for the keyword &lt;code&gt;mimikatz&lt;/code&gt; and ignore case:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe search -d ../hayabusa-sample-evtx -k "mimikatz" -i
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search the &lt;code&gt;../hayabusa-sample-evtx&lt;/code&gt; directory for IP addresses using regular expressions:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe search -d ../hayabusa-sample-evtx -r "(?:[0-9]{1,3}\.){3}[0-9]{1,3}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search the &lt;code&gt;../hayabusa-sample-evtx&lt;/code&gt; directory and show all events where the &lt;code&gt;WorkstationName&lt;/code&gt; field is &lt;code&gt;kali&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe search -d ../hayabusa-sample-evtx -r ".*" -F WorkstationName:"kali"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: &lt;code&gt;.*&lt;/code&gt; is the regular expression to match on every event.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;code&gt;search&lt;/code&gt; command config files&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;./rules/config/channel_abbreviations.txt&lt;/code&gt;: Mappings of channel names and their abbreviations.&lt;/p&gt; 
&lt;h2&gt;Config Commands&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;config-critical-systems&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;This command will automatically try to find critical systems like domain controllers and file servers and add them to the &lt;code&gt;./config/critical_systems.txt&lt;/code&gt; config file so that all of the alerts will be increased by one level. It will search for Security 4768 (Kerberos TGT requested) events to determine if it is a domain controller. It will search for Security 5145 (Network Share File Access) events to determine if it is a file server. Any hostnames added to the &lt;code&gt;critical_systems.txt&lt;/code&gt; file will have all alerts above low increased by one level with a maximum of &lt;code&gt;emergency&lt;/code&gt; level.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: hayabusa.exe config-critical-systems &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner

General Options:
  -h, --help  Show the help menu
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;config-critical-systems&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Search the &lt;code&gt;../hayabusa-sample-evtx&lt;/code&gt; directory for domain controllers and file servers:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe config-critical-systems -d ../hayabusa-sample-evtx"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;DFIR Timeline Commands&lt;/h2&gt; 
&lt;h3&gt;Scan Wizard&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;csv-timeline&lt;/code&gt; and &lt;code&gt;json-timeline&lt;/code&gt; commands now have a scan wizard enabled by default. This is intended to help users easily choose which detection rules they want to enable according to their needs and preferences. The sets of detections rules to load are based off of the official lists in the Sigma project. Details are explained in &lt;a href="https://blog.sigmahq.io/introducing-sigma-rule-packages-releases-76043ce42e81"&gt;this blog post&lt;/a&gt;. You can easily turn off the wizard and use Hayabusa in its traditional way by adding the &lt;code&gt;-w, --no-wizard&lt;/code&gt; option.&lt;/p&gt; 
&lt;h4&gt;Core Rules&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;core&lt;/code&gt; rule set enables rules that have a status of &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;stable&lt;/code&gt; and a level of &lt;code&gt;high&lt;/code&gt; or &lt;code&gt;critical&lt;/code&gt;. These are high quality rules of high confidence and relevance and should not produce many false positives. The rule status is &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;stable&lt;/code&gt; which means no false positives were reported for over 6 months. Rules will match on attacker techniques, generic suspicious activity, or malicious behavior. It is the same as using the &lt;code&gt;--exclude-status deprecated,unsupported,experimental --min-level high&lt;/code&gt; options.&lt;/p&gt; 
&lt;h4&gt;Core+ Rules&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;core+&lt;/code&gt; rule set enables rules that have a status of &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;stable&lt;/code&gt; and a level of &lt;code&gt;medium&lt;/code&gt; or higher. &lt;code&gt;medium&lt;/code&gt; rules most often need additional tuning as certain applications, legitimate user behavior or scripts of an organization might be matched. It is the same as using the &lt;code&gt;--exclude-status deprecated,unsupported,experimental --min-level medium&lt;/code&gt; options.&lt;/p&gt; 
&lt;h4&gt;Core++ Rules&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;core++&lt;/code&gt; rule set enables rules that have a status of &lt;code&gt;experimental&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;stable&lt;/code&gt; and a level of &lt;code&gt;medium&lt;/code&gt; or higher. These rules are bleeding edge. They are validated against the baseline evtx files available at the SigmaHQ project and reviewed by multiple detection engineers. Other than that they are pretty much untested at first. Use these if you want to be able to detect threats as early as possible at the cost of managing a higher threshold of false positives. It is the same as using the &lt;code&gt;--exclude-status deprecated,unsupported --min-level medium&lt;/code&gt; options.&lt;/p&gt; 
&lt;h4&gt;Emerging Threats (ET) Add-On Rules&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;Emerging Threats (ET)&lt;/code&gt; rule set enables rules that have a tag of &lt;code&gt;detection.emerging_threats&lt;/code&gt;. These rules target specific threats and are especially useful for current threats where not much information is available yet. These rules should not have many false positives but will decrease in relevance over time. When these rules are not enabled, it is the same as using the &lt;code&gt;--exclude-tag detection.emerging_threats&lt;/code&gt; option. When running Hayabusa traditionally without the wizard, these rules will be included by default.&lt;/p&gt; 
&lt;h4&gt;Threat Hunting (TH) Add-On Rules&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;Threat Hunting (TH)&lt;/code&gt; rule set enables rules that have a tag of &lt;code&gt;detection.threat_hunting&lt;/code&gt;. These rules may detect unknown malicious activity, however, will typicially have more false positives. When these rules are not enabled, it is the same as using the &lt;code&gt;--exclude-tag detection.threat_hunting&lt;/code&gt; option. When running Hayabusa traditionally without the wizard, these rules will be included by default.&lt;/p&gt; 
&lt;h3&gt;Channel-based event log and rules filtering&lt;/h3&gt; 
&lt;p&gt;As of Hayabusa v2.16.0, we enable a Channel-based filter when loading &lt;code&gt;.evtx&lt;/code&gt; files and &lt;code&gt;.yml&lt;/code&gt; rules. The purpose is to make scanning as efficient as possible by only loading what is necessary. While it possible for there to be multiple providers in a single event log, it is not common to have multiple channels inside a single evtx file. (The only time we have seen this is when someone has artifically merged two different evtx files together for the &lt;a href="https://github.com/Yamato-Security/hayabusa-sample-evtx"&gt;sample-evtx&lt;/a&gt; project.) We can use this to our advantage by first checking the &lt;code&gt;Channel&lt;/code&gt; field in the first record of every &lt;code&gt;.evtx&lt;/code&gt; file specified to be scanned. We also check which &lt;code&gt;.yml&lt;/code&gt; rules use what channels specified in the &lt;code&gt;Channel&lt;/code&gt; field of the rule. With these two lists, we only load rules that use channels that are actually present inside the &lt;code&gt;.evtx&lt;/code&gt; files.&lt;/p&gt; 
&lt;p&gt;So for example, if a user wants to scan &lt;code&gt;Security.evtx&lt;/code&gt;, only rules that specify &lt;code&gt;Channel: Security&lt;/code&gt; will be used. There is no point in loading other detection rules, for example rules that only look for events in the &lt;code&gt;Application&lt;/code&gt; log, etc... Note that channel fields (Ex: &lt;code&gt;Channel: Security&lt;/code&gt;) are not &lt;strong&gt;explicitly&lt;/strong&gt; defined inside original Sigma rules. For Sigma rules, channel and event IDs fields are &lt;strong&gt;implicitly&lt;/strong&gt; defined with &lt;code&gt;service&lt;/code&gt; and &lt;code&gt;category&lt;/code&gt; fields under &lt;code&gt;logsource&lt;/code&gt;. (Ex: &lt;code&gt;service: security&lt;/code&gt;) When curating Sigma rules in the &lt;a href="https://github.com/Yamato-Security/hayabusa-rules"&gt;hayabusa-rules&lt;/a&gt; repository, we de-abstract the &lt;code&gt;logsource&lt;/code&gt; field and explicitly define the channel and event ID fields. We explain how and why we do this in-depth &lt;a href="https://github.com/Yamato-Security/sigma-to-hayabusa-converter"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Currently, there are only two detection rules that do not have &lt;code&gt;Channel&lt;/code&gt; defined and are intended to scan all &lt;code&gt;.evtx&lt;/code&gt; files are the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/hayabusa-rules/raw/main/hayabusa/builtin/UnkwnChannEID_Med_PossibleHiddenShellcode.yml"&gt;Possible Hidden Shellcode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SigmaHQ/sigma/raw/master/rules/windows/builtin/win_alert_mimikatz_keywords.yml"&gt;Mimikatz Use&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you want to use these two rules and scan all rules against loaded &lt;code&gt;.evtx&lt;/code&gt; files then you will need to add the &lt;code&gt;-A, --enable-all-rules&lt;/code&gt; option in the &lt;code&gt;csv-timeline&lt;/code&gt; and &lt;code&gt;json-timeline&lt;/code&gt; commands. In our benchmarks, the rules filtering usually gives a 20% to 10x speed improvement depending on what files are being scanned and of course uses less memory.&lt;/p&gt; 
&lt;p&gt;Channel filtering is also used when loading &lt;code&gt;.evtx&lt;/code&gt; files. For example, if you specify a rule that looks for events with a channel of &lt;code&gt;Security&lt;/code&gt;, then there is no point in loading &lt;code&gt;.evtx&lt;/code&gt; files that are not from the &lt;code&gt;Security&lt;/code&gt; log. In our benchmarks, this gives a speed benefit of around 10% with normal scans and up to 60%+ performance increase when scanning with a single rule. If you are sure that multiple channels are being used inside a single &lt;code&gt;.evtx&lt;/code&gt; file, for example someone used a tool to merge multiple &lt;code&gt;.evtx&lt;/code&gt; files together, then you disable this filtering with the &lt;code&gt;-a, --scan-all-evtx-files&lt;/code&gt; option in &lt;code&gt;csv-timeline&lt;/code&gt; and &lt;code&gt;json-timeline&lt;/code&gt; commands.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Channel filtering only works with &lt;code&gt;.evtx&lt;/code&gt; files and you will receive an error if you try to load event logs from a JSON file with &lt;code&gt;-J, --json-input&lt;/code&gt; and also specify &lt;code&gt;-A&lt;/code&gt; or &lt;code&gt;-a&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;code&gt;csv-timeline&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;csv-timeline&lt;/code&gt; command will create a forensics timeline of events in CSV format.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: csv-timeline &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)
  -w, --no-wizard                      Do not ask questions. Scan for all events and alerts
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -r, --rules &amp;lt;DIR/FILE&amp;gt;               Specify a custom rule directory or file (default: ./rules)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
  -s, --sort                           Sort events before saving the file. (warning: this uses much more memory!)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)

Filtering:
  -E, --EID-filter                      Scan only common EIDs for faster speed (./rules/config/target_event_IDs.txt)
  -A, --enable-all-rules                Enable all rules regardless of loaded evtx files (disable channel filter for rules)
  -D, --enable-deprecated-rules         Enable rules with a status of deprecated
  -n, --enable-noisy-rules              Enable rules set to noisy (./rules/config/noisy_rules.txt)
  -u, --enable-unsupported-rules        Enable rules with a status of unsupported
  -e, --exact-level &amp;lt;LEVEL&amp;gt;             Only load rules with a specific level (informational, low, medium, high, critical)
      --exclude-category &amp;lt;CATEGORY...&amp;gt;  Do not load rules with specified logsource categories (ex: process_creation,pipe_created)
      --exclude-computer &amp;lt;COMPUTER...&amp;gt;  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --exclude-eid &amp;lt;EID...&amp;gt;            Do not scan specific EIDs for faster speed (ex: 1) (ex: 1,4688)
      --exclude-status &amp;lt;STATUS...&amp;gt;      Do not load rules according to status (ex: experimental) (ex: stable,test)
      --exclude-tag &amp;lt;TAG...&amp;gt;            Do not load rules with specific tags (ex: sysmon)
      --include-category &amp;lt;CATEGORY...&amp;gt;  Only load rules with specified logsource categories (ex: process_creation,pipe_created)
      --include-computer &amp;lt;COMPUTER...&amp;gt;  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --include-eid &amp;lt;EID...&amp;gt;            Scan only specified EIDs for faster speed (ex: 1) (ex: 1,4688)
      --include-status &amp;lt;STATUS...&amp;gt;      Only load rules with specific status (ex: experimental) (ex: stable,test)
      --include-tag &amp;lt;TAG...&amp;gt;            Only load rules with specific tags (ex: attack.execution,attack.discovery)
  -m, --min-level &amp;lt;LEVEL&amp;gt;               Minimum level for rules to load (default: informational)
  -P, --proven-rules                    Scan with only proven rules for faster speed (./rules/config/proven_rules.txt)
  -a, --scan-all-evtx-files             Scan all evtx files regardless of loaded rules (disable channel filter for evtx files)
      --time-offset &amp;lt;OFFSET&amp;gt;            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)
      --timeline-end &amp;lt;DATE&amp;gt;             End time of the event logs to load (ex: "2022-02-22 23:59:59 +09:00")
      --timeline-start &amp;lt;DATE&amp;gt;           Start time of the event logs to load (ex: "2020-02-22 00:00:00 +09:00")

Output:
  -b, --disable-abbreviations        Disable abbreviations
  -G, --GeoIP &amp;lt;MAXMIND-DB-DIR&amp;gt;       Add GeoIP (ASN, city, country) info to IP addresses
  -H, --HTML-report &amp;lt;FILE&amp;gt;           Save Results Summary details to an HTML report (ex: results.html)
  -M, --multiline                    Output event field information in multiple rows
  -F, --no-field-data-mapping        Disable field data mapping
      --no-pwsh-field-extraction     Disable field extraction of PowerShell classic logs
  -o, --output &amp;lt;FILE&amp;gt;                Save the timeline in CSV format (ex: results.csv)
  -p, --profile &amp;lt;PROFILE&amp;gt;            Specify output profile
  -R, --remove-duplicate-data        Duplicate field data will be replaced with "DUP"
  -X, --remove-duplicate-detections  Remove duplicate detections (default: disabled)
  -S, --tab-separator                Separate event field information by tabs

Display Settings:
  -K, --no-color            Disable color output
  -N, --no-summary          Do not display Results Summary for faster speed
  -q, --quiet               Quiet mode: do not display the launch banner
  -v, --verbose             Output verbose information
  -T, --visualize-timeline  Output event frequency timeline (terminal needs to support unicode)

Time Format:
      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)
  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)
      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)
      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)
      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)
      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)
  -U, --UTC               Output time in UTC format (default: local time)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;csv-timeline&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run hayabusa against one Windows event log file with default &lt;code&gt;standard&lt;/code&gt; profile:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -f eventlog.evtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run hayabusa against the sample-evtx directory with multiple Windows event log files with the verbose profile:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx -p verbose
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Export to a single CSV file for further analysis with LibreOffice, Timeline Explorer, Elastic Stack, etc... and include all field information (Warning: your file output size will become much larger with the &lt;code&gt;super-verbose&lt;/code&gt; profile!):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx -o results.csv -p super-verbose
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enable the EID (Event ID) filter:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Enabling the EID filter will speed up the analysis by about 10-15% in our tests but there is a possibility of missing alerts.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -E -d .\hayabusa-sample-evtx -o results.csv
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Only run hayabusa rules (the default is to run all the rules in &lt;code&gt;-r .\rules&lt;/code&gt;):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx -r .\rules\hayabusa -o results.csv -w
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Only run hayabusa rules for logs that are enabled by default on Windows:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx -r .\rules\hayabusa\builtin -o results.csv -w
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Only run hayabusa rules for sysmon logs:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx -r .\rules\hayabusa\sysmon -o results.csv -w
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Only run sigma rules:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx -r .\rules\sigma -o results.csv -w
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enable deprecated rules (those with &lt;code&gt;status&lt;/code&gt; marked as &lt;code&gt;deprecated&lt;/code&gt;) and noisy rules (those whose rule ID is listed in &lt;code&gt;.\rules\config\noisy_rules.txt&lt;/code&gt;):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Recently, deprecated rules are now located in a separate directory in the sigma repository so are not included by default anymore in Hayabusa. Therefore, you probably have no need to enable deprecated rules.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx --enable-noisy-rules --enable-deprecated-rules -o results.csv -w
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Only run rules to analyze logons and output in the UTC timezone:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx -r .\rules\hayabusa\builtin\Security\LogonLogoff\Logon -U -o results.csv -w
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run on a live Windows machine (requires Administrator privileges) and only detect alerts (potentially malicious behavior):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -l -m low
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Print verbose information (useful for determining which files take long to process, parsing errors, etc...):&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d .\hayabusa-sample-evtx -v
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Verbose output example:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Loading rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Loaded rule: rules/sigma/builtin/deprecated/proc_creation_win_susp_run_folder.yml
Loaded rule: rules/sigma/builtin/deprecated/proc_creation_win_execution_mssql_xp_cmdshell_stored_procedure.yml
Loaded rule: rules/sigma/builtin/deprecated/proc_creation_win_susp_squirrel_lolbin.yml
Loaded rule: rules/sigma/builtin/win_alert_mimikatz_keywords.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Errors during the scan:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[ERROR] Failed to parse event file.
EventFile: ../logs/Microsoft-Rdms-UI%4Operational.evtx
Error: Failed to parse record number 58471

[ERROR] Failed to parse event file.
EventFile: ../logs/Microsoft-Rdms-UI%4Operational.evtx
Error: Failed to parse record number 58470

[ERROR] Failed to parse event file.
EventFile: ../logs/Microsoft-Windows-AppxPackaging%4Operational.evtx
Error: An error occurred while trying to serialize binary xml to output.
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Output to a CSV format compatible to import into &lt;a href="https://timesketch.org/"&gt;Timesketch&lt;/a&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;hayabusa.exe csv-timeline -d ../hayabusa-sample-evtx --RFC-3339 -o timesketch-import.csv -p timesketch -U
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Quiet error mode: By default, hayabusa will save error messages to error log files. If you do not want to save error messages, please add &lt;code&gt;-Q&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Advanced - GeoIP Log Enrichment&lt;/h4&gt; 
&lt;p&gt;You can add GeoIP (ASN organization, city and country) information to SrcIP (source IP) fields and TgtIP (target IP) fields with the free GeoLite2 geolocation data.&lt;/p&gt; 
&lt;p&gt;Steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;First sign up for a MaxMind account &lt;a href="https://dev.maxmind.com/geoip/geolite2-free-geolocation-data"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Download the three &lt;code&gt;.mmdb&lt;/code&gt; files from the &lt;a href="https://www.maxmind.com/en/accounts/current/geoip/downloads"&gt;download page&lt;/a&gt; and save them to a directory. The filenames should be called &lt;code&gt;GeoLite2-ASN.mmdb&lt;/code&gt;, &lt;code&gt;GeoLite2-City.mmdb&lt;/code&gt; and &lt;code&gt;GeoLite2-Country.mmdb&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;When running the &lt;code&gt;csv-timeline&lt;/code&gt; or &lt;code&gt;json-timeline&lt;/code&gt; commands, add the &lt;code&gt;-G&lt;/code&gt; option followed by the directory with the MaxMind databases.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When &lt;code&gt;csv-timeline&lt;/code&gt; is used, the following 6 columns will be additionally outputted: &lt;code&gt;SrcASN&lt;/code&gt;, &lt;code&gt;SrcCity&lt;/code&gt;, &lt;code&gt;SrcCountry&lt;/code&gt;, &lt;code&gt;TgtASN&lt;/code&gt;, &lt;code&gt;TgtCity&lt;/code&gt;, &lt;code&gt;TgtCountry&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When &lt;code&gt;json-timeline&lt;/code&gt; is used, the same &lt;code&gt;SrcASN&lt;/code&gt;, &lt;code&gt;SrcCity&lt;/code&gt;, &lt;code&gt;SrcCountry&lt;/code&gt;, &lt;code&gt;TgtASN&lt;/code&gt;, &lt;code&gt;TgtCity&lt;/code&gt;, &lt;code&gt;TgtCountry&lt;/code&gt; fields will be added to the &lt;code&gt;Details&lt;/code&gt; object, but only if they contain information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When &lt;code&gt;SrcIP&lt;/code&gt; or &lt;code&gt;TgtIP&lt;/code&gt; is localhost (&lt;code&gt;127.0.0.1&lt;/code&gt;, &lt;code&gt;::1&lt;/code&gt;, etc...), &lt;code&gt;SrcASN&lt;/code&gt; or &lt;code&gt;TgtASN&lt;/code&gt; will be outputted as &lt;code&gt;Local&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When &lt;code&gt;SrcIP&lt;/code&gt; or &lt;code&gt;TgtIP&lt;/code&gt; is a private IP address (&lt;code&gt;10.0.0.0/8&lt;/code&gt;, &lt;code&gt;fe80::/10&lt;/code&gt;, etc...), &lt;code&gt;SrcASN&lt;/code&gt; or &lt;code&gt;TgtASN&lt;/code&gt; will be outputted as &lt;code&gt;Private&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;GeoIP config file&lt;/h5&gt; 
&lt;p&gt;The field names that contain source and target IP addresses that get looked up in the GeoIP databases are defined in &lt;code&gt;rules/config/geoip_field_mapping.yaml&lt;/code&gt;. You can add to this list if necessary. There is also a filter section in this file that determines what events to extract IP address information from.&lt;/p&gt; 
&lt;h5&gt;Automatic updates of GeoIP databases&lt;/h5&gt; 
&lt;p&gt;MaxMind GeoIP databases are updated every 2 weeks. You can install the MaxMind &lt;code&gt;geoipupdate&lt;/code&gt; tool &lt;a href="https://github.com/maxmind/geoipupdate"&gt;here&lt;/a&gt; in order to automatically update these databases.&lt;/p&gt; 
&lt;p&gt;Steps on macOS:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;brew install geoipupdate&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Edit &lt;code&gt;/usr/local/etc/GeoIP.conf&lt;/code&gt;: Put in your &lt;code&gt;AccountID&lt;/code&gt; and &lt;code&gt;LicenseKey&lt;/code&gt; you create after logging into the MaxMind website. Make sure the &lt;code&gt;EditionIDs&lt;/code&gt; line says &lt;code&gt;EditionIDs GeoLite2-ASN GeoLite2-City GeoLite2-Country&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;geoipupdate&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;-G /usr/local/var/GeoIP&lt;/code&gt; when you want to add GeoIP information.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Steps on Windows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the latest Windows binary (Ex: &lt;code&gt;geoipupdate_4.10.0_windows_amd64.zip&lt;/code&gt;) from the &lt;a href="https://github.com/maxmind/geoipupdate/releases"&gt;Releases&lt;/a&gt; page.&lt;/li&gt; 
 &lt;li&gt;Edit &lt;code&gt;\ProgramData\MaxMind/GeoIPUpdate\GeoIP.conf&lt;/code&gt;: Put in your &lt;code&gt;AccountID&lt;/code&gt; and &lt;code&gt;LicenseKey&lt;/code&gt; you create after logging into the MaxMind website. Make sure the &lt;code&gt;EditionIDs&lt;/code&gt; line says &lt;code&gt;EditionIDs GeoLite2-ASN GeoLite2-City GeoLite2-Country&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Run the &lt;code&gt;geoipupdate&lt;/code&gt; executable.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;&lt;code&gt;csv-timeline&lt;/code&gt; command config files&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;./rules/config/channel_abbreviations.txt&lt;/code&gt;: Mappings of channel names and their abbreviations.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;./rules/config/default_details.txt&lt;/code&gt;: The configuration file for what default field information (&lt;code&gt;%Details%&lt;/code&gt; field) should be outputted if no &lt;code&gt;details:&lt;/code&gt; line is specified in a rule. This is based on provider name and event IDs.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;./rules/config/eventkey_alias.txt&lt;/code&gt;: This file has the mappings of short name aliases for fields and their original longer field names.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;InstanceID,Event.UserData.UMDFHostDeviceArrivalBegin.InstanceId
IntegrityLevel,Event.EventData.IntegrityLevel
IpAddress,Event.EventData.IpAddress
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If a field is not defined here, Hayabusa will automatically check under &lt;code&gt;Event.EventData&lt;/code&gt; for the field.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;./rules/config/exclude_rules.txt&lt;/code&gt;: This file has a list of rule IDs that will be excluded from use. Usually this is because one rule has replaced another or the rule cannot be used in the first place. Like firewalls and IDSes, any signature-based tool will require some tuning to fit your environment so you may need to permanently or temporarily exclude certain rules. You can add a rule ID (Example: &lt;code&gt;4fe151c2-ecf9-4fae-95ae-b88ec9c2fca6&lt;/code&gt;) to &lt;code&gt;./rules/config/exclude_rules.txt&lt;/code&gt; in order to ignore any rule that you do not need or cannot be used.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;./rules/config/noisy_rules.txt&lt;/code&gt;: This file a list of rule IDs that are disabled by default but can be enabled by enabling noisy rules with the &lt;code&gt;-n, --enable-noisy-rules&lt;/code&gt; option. These rules are usually noisy by nature or due to false positives.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;./rules/config/target_event_IDs.txt&lt;/code&gt;: Only the event IDs specified in this file will be scanned if the EID filter is enabled. By default, Hayabusa will scan all events, but if you want to improve performance, please use the &lt;code&gt;-E, --EID-filter&lt;/code&gt; option. This usually results in a 10~25% speed improvement.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;json-timeline&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;json-timeline&lt;/code&gt; command will create a forensics timeline of events in JSON or JSONL format. Outputting to JSONL will be faster and smaller file size than JSON so is good if you are going to just import the results into another tool like Elastic Stack. JSON is better if you are going to manually analyze the results with a text editor. CSV output is good for importing smaller timelines (usually less than 2GB) into tools like LibreOffice or Timeline Explorer. JSON is best for more detailed analysis of data (including large results files) with tools like &lt;code&gt;jq&lt;/code&gt; as the &lt;code&gt;Details&lt;/code&gt; fields are separated for easier analysis. (In the CSV output, all of the event log fields are in one big &lt;code&gt;Details&lt;/code&gt; column making sorting of data, etc... more difficult.)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: json-timeline &amp;lt;INPUT&amp;gt; [OPTIONS]

Input:
  -d, --directory &amp;lt;DIR&amp;gt;  Directory of multiple .evtx files
  -f, --file &amp;lt;FILE&amp;gt;      File path to one .evtx file
  -l, --live-analysis    Analyze the local C:\Windows\System32\winevt\Logs folder

General Options:
  -C, --clobber                        Overwrite files when saving
  -h, --help                           Show the help menu
  -J, --JSON-input                     Scan JSON formatted logs instead of .evtx (.json or .jsonl)
  -w, --no-wizard                      Do not ask questions. Scan for all events and alerts
  -Q, --quiet-errors                   Quiet errors mode: do not save error logs
  -x, --recover-records                Carve evtx records from slack space (default: disabled)
  -r, --rules &amp;lt;DIR/FILE&amp;gt;               Specify a custom rule directory or file (default: ./rules)
  -c, --rules-config &amp;lt;DIR&amp;gt;             Specify custom rule config directory (default: ./rules/config)
  -s, --sort                           Sort events before saving the file. (warning: this uses much more memory!)
  -t, --threads &amp;lt;NUMBER&amp;gt;               Number of threads (default: optimal number for performance)
      --target-file-ext &amp;lt;FILE-EXT...&amp;gt;  Specify additional evtx file extensions (ex: evtx_data)

Filtering:
  -E, --EID-filter                      Scan only common EIDs for faster speed (./rules/config/target_event_IDs.txt)
  -A, --enable-all-rules                Enable all rules regardless of loaded evtx files (disable channel filter for rules)
  -D, --enable-deprecated-rules         Enable rules with a status of deprecated
  -n, --enable-noisy-rules              Enable rules set to noisy (./rules/config/noisy_rules.txt)
  -u, --enable-unsupported-rules        Enable rules with a status of unsupported
  -e, --exact-level &amp;lt;LEVEL&amp;gt;             Only load rules with a specific level (informational, low, medium, high, critical)
      --exclude-category &amp;lt;CATEGORY...&amp;gt;  Do not load rules with specified logsource categories (ex: process_creation,pipe_created)
      --exclude-computer &amp;lt;COMPUTER...&amp;gt;  Do not scan specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --exclude-eid &amp;lt;EID...&amp;gt;            Do not scan specific EIDs for faster speed (ex: 1) (ex: 1,4688)
      --exclude-status &amp;lt;STATUS...&amp;gt;      Do not load rules according to status (ex: experimental) (ex: stable,test)
      --exclude-tag &amp;lt;TAG...&amp;gt;            Do not load rules with specific tags (ex: sysmon)
      --include-category &amp;lt;CATEGORY...&amp;gt;  Only load rules with specified logsource categories (ex: process_creation,pipe_created)
      --include-computer &amp;lt;COMPUTER...&amp;gt;  Scan only specified computer names (ex: ComputerA) (ex: ComputerA,ComputerB)
      --include-eid &amp;lt;EID...&amp;gt;            Scan only specified EIDs for faster speed (ex: 1) (ex: 1,4688)
      --include-status &amp;lt;STATUS...&amp;gt;      Only load rules with specific status (ex: experimental) (ex: stable,test)
      --include-tag &amp;lt;TAG...&amp;gt;            Only load rules with specific tags (ex: attack.execution,attack.discovery)
  -m, --min-level &amp;lt;LEVEL&amp;gt;               Minimum level for rules to load (default: informational)
  -P, --proven-rules                    Scan with only proven rules for faster speed (./rules/config/proven_rules.txt)
  -a, --scan-all-evtx-files             Scan all evtx files regardless of loaded rules (disable channel filter for evtx files)
      --time-offset &amp;lt;OFFSET&amp;gt;            Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)
      --timeline-end &amp;lt;DATE&amp;gt;             End time of the event logs to load (ex: "2022-02-22 23:59:59 +09:00")
      --timeline-start &amp;lt;DATE&amp;gt;           Start time of the event logs to load (ex: "2020-02-22 00:00:00 +09:00")

Output:
  -b, --disable-abbreviations        Disable abbreviations
  -G, --GeoIP &amp;lt;MAXMIND-DB-DIR&amp;gt;       Add GeoIP (ASN, city, country) info to IP addresses
  -H, --HTML-report &amp;lt;FILE&amp;gt;           Save Results Summary details to an HTML report (ex: results.html)
  -L, --JSONL-output                 Save the timeline in JSONL format (ex: -L -o results.jsonl)
  -F, --no-field-data-mapping        Disable field data mapping
      --no-pwsh-field-extraction     Disable field extraction of PowerShell classic logs
  -o, --output &amp;lt;FILE&amp;gt;                Save the timeline in JSON format (ex: results.json)
  -p, --profile &amp;lt;PROFILE&amp;gt;            Specify output profile
  -R, --remove-duplicate-data        Duplicate field data will be replaced with "DUP"
  -X, --remove-duplicate-detections  Remove duplicate detections (default: disabled)

Display Settings:
  -K, --no-color            Disable color output
  -N, --no-summary          Do not display Results Summary for faster speed
  -q, --quiet               Quiet mode: do not display the launch banner
  -v, --verbose             Output verbose information
  -T, --visualize-timeline  Output event frequency timeline (terminal needs to support unicode)

Time Format:
      --European-time     Output timestamp in European time format (ex: 22-02-2022 22:00:00.123 +02:00)
  -O, --ISO-8601          Output timestamp in original ISO-8601 format (ex: 2022-02-22T10:10:10.1234567Z) (Always UTC)
      --RFC-2822          Output timestamp in RFC 2822 format (ex: Fri, 22 Feb 2022 22:00:00 -0600)
      --RFC-3339          Output timestamp in RFC 3339 format (ex: 2022-02-22 22:00:00.123456-06:00)
      --US-military-time  Output timestamp in US military time format (ex: 02-22-2022 22:00:00.123 -06:00)
      --US-time           Output timestamp in US time format (ex: 02-22-2022 10:00:00.123 PM -06:00)
  -U, --UTC               Output time in UTC format (default: local time)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;json-timeline&lt;/code&gt; command examples and config files&lt;/h4&gt; 
&lt;p&gt;The options and config files for &lt;code&gt;json-timeline&lt;/code&gt; are the same as &lt;code&gt;csv-timeline&lt;/code&gt; but one extra option &lt;code&gt;-L, --JSONL-output&lt;/code&gt; for outputting to JSONL format.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;level-tuning&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;level-tuning&lt;/code&gt; command will let you tune the alert levels for rules, either raising or decreasing the risk level as you would like them. This command uses a config file to overwrite the risk levels (the &lt;code&gt;level&lt;/code&gt; field) of rules in the &lt;code&gt;rules&lt;/code&gt; folder.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Warning: everytime you run the &lt;code&gt;update-rules&lt;/code&gt; command, the risk level will be returned back to the original value so you will need to run the &lt;code&gt;level-tuning&lt;/code&gt; command again aferwards.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;Usage: level-tuning [OPTIONS]

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner

General Options:
  -f, --file &amp;lt;FILE&amp;gt;  Tune alert levels (default: ./rules/config/level_tuning.txt)
  -h, --help         Show the help menu
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;level-tuning&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Normal usage: &lt;code&gt;hayabusa.exe level-tuning&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Tune rule alert levels based on your custom config file: &lt;code&gt;hayabusa.exe level-tuning -f ./config/level_tuning.txt&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;code&gt;level-tuning&lt;/code&gt; config file&lt;/h4&gt; 
&lt;p&gt;Hayabusa and Sigma rule authors will estimate the appropriate risk level of the alert when writing their rules. However, sometimes risk levels are not consistant and also the actual risk level may differ according to your environment. Yamato Security provides and maintains a config file at &lt;code&gt;./rules/config/level_tuning.txt&lt;/code&gt; that you can use to tune your rules as well.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;./rules/config/level_tuning.txt&lt;/code&gt; sample:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-csv"&gt;id,new_level
570ae5ec-33dc-427c-b815-db86228ad43e,informational # 'Application Uninstalled' - Originally low.
b6ce0b2f-593b-5e1c-e137-d30b2974e30e,high # 'Suspicious Double Extension File Execution' - Sysmon 1 - Originally critical
452b2159-5e6e-c494-63b9-b385d6195f58,high # 'Suspicious Double Extension File Execution' - Security 4688 - Originally critical
51ba8477-86a4-6ff0-35fa-7b7f1b1e3f83,high # 'CobaltStrike Service Installations - System' - System 7045 - Originally critical
daad2203-665f-294c-6d2f-f9272c3214f2,critical # 'Mimikatz DC Sync' - Security 4662 - Originally high
8b061ac2-31c7-659d-aa1b-36ceed1b03f1,high # 'HackTool - Rubeus Execution' - Sysmon 1 - Originally critical
be670d5c-31eb-7391-4d2e-d122c89cd5bb,high # 'HackTool - Rubeus Execution' - Security 4688 - Originally critical
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case, the risk level of the rule with an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;570ae5ec-33dc-427c-b815-db86228ad43e&lt;/code&gt; in the rules directory will have its &lt;code&gt;level&lt;/code&gt; rewritten to &lt;code&gt;informational&lt;/code&gt;. The possible levels to set are &lt;code&gt;critical&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;informational&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Warning: The &lt;code&gt;./rules/config/level_tuning.txt&lt;/code&gt; config file will also be updated to the latest version on the hayabusa-rules repository everytime you run &lt;code&gt;update-rules&lt;/code&gt;. Therefore, if you make changes to this file, you will loose those changes! If you want to keep a config file for yourself, then create a config file in &lt;code&gt;./config/level_tuning.txt&lt;/code&gt; and run &lt;code&gt;hayabusa.exe level-tuning -f ./config/level_tuning.txt&lt;/code&gt;. You can also first do level tuning with the config file provided by Yamato Security and then further tune with your own config file.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;code&gt;list-profiles&lt;/code&gt; command&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;Usage: list-profiles [OPTIONS]

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner

General Options:
  -h, --help  Show the help menu
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;set-default-profile&lt;/code&gt; command&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;Usage: set-default-profile [OPTIONS]

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner

General Options:
  -h, --help               Show the help menu
  -p, --profile &amp;lt;PROFILE&amp;gt;  Specify output profile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;set-default-profile&lt;/code&gt; command examples&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set the default profile to &lt;code&gt;minimal&lt;/code&gt;: &lt;code&gt;hayabusa.exe set-default-profile minimal&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Set the default profile to &lt;code&gt;super-verbose&lt;/code&gt;: &lt;code&gt;hayabusa.exe set-default-profile super-verbose&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;update-rules&lt;/code&gt; command&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;update-rules&lt;/code&gt; command will sync the &lt;code&gt;rules&lt;/code&gt; folder with the &lt;a href="https://github.com/Yamato-Security/hayabusa-rules"&gt;Hayabusa rules github repository&lt;/a&gt;, updating the rules and config files.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Usage: update-rules [OPTIONS]

Display Settings:
  -K, --no-color  Disable color output
  -q, --quiet     Quiet mode: do not display the launch banner

General Options:
  -h, --help              Show the help menu
  -r, --rules &amp;lt;DIR/FILE&amp;gt;  Specify a custom rule directory or file (default: ./rules)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;update-rules&lt;/code&gt; command example&lt;/h4&gt; 
&lt;p&gt;You will normally just execute this: &lt;code&gt;hayabusa.exe update-rules&lt;/code&gt;&lt;/p&gt; 
&lt;h1&gt;Timeline Output&lt;/h1&gt; 
&lt;h2&gt;Output Profiles&lt;/h2&gt; 
&lt;p&gt;Hayabusa has 5 pre-defined output profiles to use in &lt;code&gt;config/profiles.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;minimal&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;standard&lt;/code&gt; (default)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-field-info&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;all-field-info-verbose&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;super-verbose&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;timesketch-minimal&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;timesketch-verbose&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can easily customize or add your own profiles by editing this file. You can also easily change the default profile with &lt;code&gt;set-default-profile --profile &amp;lt;profile&amp;gt;&lt;/code&gt;. Use the &lt;code&gt;list-profiles&lt;/code&gt; command to show the available profiles and their field information.&lt;/p&gt; 
&lt;h3&gt;1. &lt;code&gt;minimal&lt;/code&gt; profile output&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %Details%&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;2. &lt;code&gt;standard&lt;/code&gt; profile output&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %Details%, %ExtraFieldInfo%&lt;/code&gt;, %RuleID%&lt;/p&gt; 
&lt;h3&gt;3. &lt;code&gt;verbose&lt;/code&gt; profile output&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %RuleTitle%, %Details%, %ExtraFieldInfo%, %RuleFile%, %RuleID%, %EvtxFile%&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;4. &lt;code&gt;all-field-info&lt;/code&gt; profile output&lt;/h3&gt; 
&lt;p&gt;Instead of outputting the minimal &lt;code&gt;details&lt;/code&gt; information, all field information in the &lt;code&gt;EventData&lt;/code&gt; and &lt;code&gt;UserData&lt;/code&gt; sections will be outputted along with their original field names.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RecordID%, %RuleTitle%, %AllFieldInfo%, %RuleFile%, %RuleID%, %EvtxFile%&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;5. &lt;code&gt;all-field-info-verbose&lt;/code&gt; profile output&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %RuleTitle%, %AllFieldInfo%, %RuleFile%, %RuleID%, %EvtxFile%&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;6. &lt;code&gt;super-verbose&lt;/code&gt; profile output&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;%Timestamp%, %Computer%, %Channel%, %EventID%, %Level%, %RuleTitle%, %RuleAuthor%, %RuleModifiedDate%, %Status%, %RecordID%, %Details%, %ExtraFieldInfo%, %MitreTactics%, %MitreTags%, %OtherTags%, %Provider%, %RuleCreationDate%, %RuleFile%, %RuleID%, %EvtxFile%&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;7. &lt;code&gt;timesketch-minimal&lt;/code&gt; profile output&lt;/h3&gt; 
&lt;p&gt;Output to a format compatible with importing into &lt;a href="https://timesketch.org/"&gt;Timesketch&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;%Timestamp%, hayabusa, %RuleTitle%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %Details%, %RuleFile%, %RuleID%, %EvtxFile%&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;8. &lt;code&gt;timesketch-verbose&lt;/code&gt; profile output&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;%Timestamp%, hayabusa, %RuleTitle%, %Computer%, %Channel%, %EventID%, %Level%, %MitreTactics%, %MitreTags%, %OtherTags%, %RecordID%, %Details%, %ExtraFieldInfo%, %RuleFile%, %RuleID%, %EvtxFile%&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Profile Comparison&lt;/h3&gt; 
&lt;p&gt;The following benchmarks were conducted on a 2018 Lenovo P51 (Xeon 4 Core CPU / 64GB RAM) with 3GB of evtx data and 3891 rules enabled. (2023/06/01)&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Profile&lt;/th&gt; 
   &lt;th align="center"&gt;Processing Time&lt;/th&gt; 
   &lt;th align="center"&gt;Output Filesize&lt;/th&gt; 
   &lt;th align="center"&gt;Filesize Increase&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;minimal&lt;/td&gt; 
   &lt;td align="center"&gt;8 minutes 50 seconds&lt;/td&gt; 
   &lt;td align="center"&gt;770 MB&lt;/td&gt; 
   &lt;td align="center"&gt;-30%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;standard (default)&lt;/td&gt; 
   &lt;td align="center"&gt;9 minutes 00 seconds&lt;/td&gt; 
   &lt;td align="center"&gt;1.1 GB&lt;/td&gt; 
   &lt;td align="center"&gt;None&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;verbose&lt;/td&gt; 
   &lt;td align="center"&gt;9 minutes 10 seconds&lt;/td&gt; 
   &lt;td align="center"&gt;1.3 GB&lt;/td&gt; 
   &lt;td align="center"&gt;+20%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;all-field-info&lt;/td&gt; 
   &lt;td align="center"&gt;9 minutes 3 seconds&lt;/td&gt; 
   &lt;td align="center"&gt;1.2 GB&lt;/td&gt; 
   &lt;td align="center"&gt;+10%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;all-field-info-verbose&lt;/td&gt; 
   &lt;td align="center"&gt;9 minutes 10 seconds&lt;/td&gt; 
   &lt;td align="center"&gt;1.3 GB&lt;/td&gt; 
   &lt;td align="center"&gt;+20%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;super-verbose&lt;/td&gt; 
   &lt;td align="center"&gt;9 minutes 12 seconds&lt;/td&gt; 
   &lt;td align="center"&gt;1.5 GB&lt;/td&gt; 
   &lt;td align="center"&gt;+35%&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Profile Field Aliases&lt;/h3&gt; 
&lt;p&gt;The following information can be outputted with built-in output profiles:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Alias name&lt;/th&gt; 
   &lt;th align="left"&gt;Hayabusa output information&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%AllFieldInfo%&lt;/td&gt; 
   &lt;td align="left"&gt;All field information.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%Channel%&lt;/td&gt; 
   &lt;td align="left"&gt;The name of log. &lt;code&gt;&amp;lt;Event&amp;gt;&amp;lt;System&amp;gt;&amp;lt;Channel&amp;gt;&lt;/code&gt; field.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%Computer%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;&amp;lt;Event&amp;gt;&amp;lt;System&amp;gt;&amp;lt;Computer&amp;gt;&lt;/code&gt; field.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%Details%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;details&lt;/code&gt; field in the YML detection rule, however, only hayabusa rules have this field. This field gives extra information about the alert or event and can extract useful data from the fields in event logs. For example, usernames, command line information, process information, etc... When a placeholder points to a field that does not exist or there is an incorrect alias mapping, it will be outputted as &lt;code&gt;n/a&lt;/code&gt; (not available). If the &lt;code&gt;details&lt;/code&gt; field is not specified (i.e. sigma rules), default &lt;code&gt;details&lt;/code&gt; messages to extract fields defined in &lt;code&gt;./rules/config/default_details.txt&lt;/code&gt; will be outputted. You can add more default &lt;code&gt;details&lt;/code&gt; messages by adding the &lt;code&gt;Provider Name&lt;/code&gt;, &lt;code&gt;EventID&lt;/code&gt; and &lt;code&gt;details&lt;/code&gt; message you want to output in &lt;code&gt;default_details.txt&lt;/code&gt;. When no &lt;code&gt;details&lt;/code&gt; field is defined in a rule nor in &lt;code&gt;default_details.txt&lt;/code&gt;, all fields will be outputted to the &lt;code&gt;details&lt;/code&gt; column.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%ExtraFieldInfo%&lt;/td&gt; 
   &lt;td align="left"&gt;Print the field information that was not outputted in %Details%.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%EventID%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;&amp;lt;Event&amp;gt;&amp;lt;System&amp;gt;&amp;lt;EventID&amp;gt;&lt;/code&gt; field.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%EvtxFile%&lt;/td&gt; 
   &lt;td align="left"&gt;The evtx filename that caused the alert or event.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%Level%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;level&lt;/code&gt; field in the YML detection rule. (&lt;code&gt;informational&lt;/code&gt;, &lt;code&gt;low&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt;, &lt;code&gt;critical&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%MitreTactics%&lt;/td&gt; 
   &lt;td align="left"&gt;MITRE ATT&amp;amp;CK &lt;a href="https://attack.mitre.org/tactics/enterprise/"&gt;tactics&lt;/a&gt; (Ex: Initial Access, Lateral Movement, etc...).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%MitreTags%&lt;/td&gt; 
   &lt;td align="left"&gt;MITRE ATT&amp;amp;CK Group ID, Technique ID and Software ID.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%OtherTags%&lt;/td&gt; 
   &lt;td align="left"&gt;Any keyword in the &lt;code&gt;tags&lt;/code&gt; field in a YML detection rule which is not included in &lt;code&gt;MitreTactics&lt;/code&gt; or &lt;code&gt;MitreTags&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%Provider%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;Name&lt;/code&gt; attribute in &lt;code&gt;&amp;lt;Event&amp;gt;&amp;lt;System&amp;gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; field.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%RecordID%&lt;/td&gt; 
   &lt;td align="left"&gt;The Event Record ID from &lt;code&gt;&amp;lt;Event&amp;gt;&amp;lt;System&amp;gt;&amp;lt;EventRecordID&amp;gt;&lt;/code&gt; field.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%RuleAuthor%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;author&lt;/code&gt; field in the YML detection rule.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%RuleCreationDate%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;date&lt;/code&gt; field in the YML detection rule.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%RuleFile%&lt;/td&gt; 
   &lt;td align="left"&gt;The filename of the detection rule that generated the alert or event.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%RuleID%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;id&lt;/code&gt; field in the YML detection rule.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%RuleModifiedDate%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;modified&lt;/code&gt; field in the YML detection rule.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%RuleTitle%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;title&lt;/code&gt; field in the YML detection rule.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%Status%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;status&lt;/code&gt; field in the YML detection rule.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%Timestamp%&lt;/td&gt; 
   &lt;td align="left"&gt;Default is &lt;code&gt;YYYY-MM-DD HH:mm:ss.sss +hh:mm&lt;/code&gt; format. &lt;code&gt;&amp;lt;Event&amp;gt;&amp;lt;System&amp;gt;&amp;lt;TimeCreated SystemTime&amp;gt;&lt;/code&gt; field in the event log. The default timezone will be the local timezone but you can change the timezone to UTC with the &lt;code&gt;--UTC&lt;/code&gt; option.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Extra Profile Field Alias&lt;/h4&gt; 
&lt;p&gt;You can also add this extra aliases to your output profile if you need it:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Alias name&lt;/th&gt; 
   &lt;th align="left"&gt;Hayabusa output information&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;%RenderedMessage%&lt;/td&gt; 
   &lt;td align="left"&gt;The &lt;code&gt;&amp;lt;Event&amp;gt;&amp;lt;RenderingInfo&amp;gt;&amp;lt;Message&amp;gt;&lt;/code&gt; field in WEC forwarded logs.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Note: this is &lt;strong&gt;not&lt;/strong&gt; included in any built in profiles so you will need to manually edit the &lt;code&gt;config/default_profile.yaml&lt;/code&gt; file and add the following line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Message: "%RenderedMessage%"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also define &lt;a href="https://github.com/Yamato-Security/hayabusa-rules/raw/main/README.md#eventkey-aliases"&gt;event key aliases&lt;/a&gt; to output other fields.&lt;/p&gt; 
&lt;h2&gt;Abbreviations&lt;/h2&gt; 
&lt;p&gt;In order to save space, we abbreviate levels, MITRE ATT&amp;amp;CK tactics, channels, providers, field names, etc...&lt;/p&gt; 
&lt;p&gt;You can turn off some of these abbreviations to see the original channel name, provider name, etc... with the &lt;code&gt;-b, --disable-abbreviations&lt;/code&gt; option.&lt;/p&gt; 
&lt;h3&gt;Level Abbreviations&lt;/h3&gt; 
&lt;p&gt;In order to save space, we use the following abbrevations when displaying the alert &lt;code&gt;level&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;crit&lt;/code&gt;: &lt;code&gt;critical&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;high&lt;/code&gt;: &lt;code&gt;high&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;med &lt;/code&gt;: &lt;code&gt;medium&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;low &lt;/code&gt;: &lt;code&gt;low&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;info&lt;/code&gt;: &lt;code&gt;informational&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MITRE ATT&amp;amp;CK Tactics Abbreviations&lt;/h3&gt; 
&lt;p&gt;In order to save space, we use the following abbreviations when displaying MITRE ATT&amp;amp;CK tactic tags. You can freely edit these abbreviations in the &lt;code&gt;./config/mitre_tactics.txt&lt;/code&gt; configuration file.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Recon&lt;/code&gt; : Reconnaissance&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ResDev&lt;/code&gt; : Resource Development&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;InitAccess&lt;/code&gt; : Initial Access&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Exec&lt;/code&gt; : Execution&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Persis&lt;/code&gt; : Persistence&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PrivEsc&lt;/code&gt; : Privilege Escalation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Evas&lt;/code&gt; : Defense Evasion&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CredAccess&lt;/code&gt; : Credential Access&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Disc&lt;/code&gt; : Discovery&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;LatMov&lt;/code&gt; : Lateral Movement&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Collect&lt;/code&gt; : Collection&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;C2&lt;/code&gt; : Command and Control&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Exfil&lt;/code&gt; : Exfiltration&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Impact&lt;/code&gt; : Impact&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Channel Abbreviations&lt;/h3&gt; 
&lt;p&gt;In order to save space, we use the following abbreviations when displaying Channel. You can freely edit these abbreviations in the &lt;code&gt;./rules/config/channel_abbreviations.txt&lt;/code&gt; configuration file.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;App&lt;/code&gt; : &lt;code&gt;Application&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AppLocker&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-AppLocker/*&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;BitsCli&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-Bits-Client/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;CodeInteg&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-CodeIntegrity/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Defender&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-Windows Defender/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DHCP-Svr&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-DHCP-Server/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DNS-Svr&lt;/code&gt; : &lt;code&gt;DNS Server&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DvrFmwk&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-DriverFrameworks-UserMode/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Exchange&lt;/code&gt; : &lt;code&gt;MSExchange Management&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Firewall&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-Windows Firewall With Advanced Security/Firewall&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;KeyMgtSvc&lt;/code&gt; : &lt;code&gt;Key Management Service&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;LDAP-Cli&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-LDAP-Client/Debug&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NTLM&lt;/code&gt; &lt;code&gt;Microsoft-Windows-NTLM/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OpenSSH&lt;/code&gt; : &lt;code&gt;OpenSSH/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PrintAdm&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-PrintService/Admin&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PrintOp&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-PrintService/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PwSh&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-PowerShell/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PwShClassic&lt;/code&gt; : &lt;code&gt;Windows PowerShell&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;RDP-Client&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-TerminalServices-RDPClient/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Sec&lt;/code&gt; : &lt;code&gt;Security&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SecMitig&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-Security-Mitigations/*&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SmbCliSec&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-SmbClient/Security&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SvcBusCli&lt;/code&gt; : &lt;code&gt;Microsoft-ServiceBus-Client&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Sys&lt;/code&gt; : &lt;code&gt;System&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Sysmon&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-Sysmon/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;TaskSch&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-TaskScheduler/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;WinRM&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-WinRM/Operational&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;WMI&lt;/code&gt; : &lt;code&gt;Microsoft-Windows-WMI-Activity/Operational&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other Abbreviations&lt;/h3&gt; 
&lt;p&gt;The following abbreviations are used in rules in order to make the output as concise as possible:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Acct&lt;/code&gt; -&amp;gt; Account&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Addr&lt;/code&gt; -&amp;gt; Address&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Auth&lt;/code&gt; -&amp;gt; Authentication&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cli&lt;/code&gt; -&amp;gt; Client&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Chan&lt;/code&gt; -&amp;gt; Channel&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cmd&lt;/code&gt; -&amp;gt; Command&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Cnt&lt;/code&gt; -&amp;gt; Count&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Comp&lt;/code&gt; -&amp;gt; Computer&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Conn&lt;/code&gt; -&amp;gt; Connection/Connected&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Creds&lt;/code&gt; -&amp;gt; Credentials&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Crit&lt;/code&gt; -&amp;gt; Critical&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Disconn&lt;/code&gt; -&amp;gt; Disconnection/Disconnected&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Dir&lt;/code&gt; -&amp;gt; Directory&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Drv&lt;/code&gt; -&amp;gt; Driver&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Dst&lt;/code&gt; -&amp;gt; Destination&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;EID&lt;/code&gt; -&amp;gt; Event ID&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Err&lt;/code&gt; -&amp;gt; Error&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Exec&lt;/code&gt; -&amp;gt; Execution&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;FW&lt;/code&gt; -&amp;gt; Firewall&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Grp&lt;/code&gt; -&amp;gt; Group&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Img&lt;/code&gt; -&amp;gt; Image&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Inj&lt;/code&gt; -&amp;gt; Injection&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Krb&lt;/code&gt; -&amp;gt; Kerberos&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;LID&lt;/code&gt; -&amp;gt; Logon ID&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Med&lt;/code&gt; -&amp;gt; Medium&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Net&lt;/code&gt; -&amp;gt; Network&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Obj&lt;/code&gt; -&amp;gt; Object&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Op&lt;/code&gt; -&amp;gt; Operational/Operation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Proto&lt;/code&gt; -&amp;gt; Protocol&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PW&lt;/code&gt; -&amp;gt; Password&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Reconn&lt;/code&gt; -&amp;gt; Reconnection&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Req&lt;/code&gt; -&amp;gt; Request&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Rsp&lt;/code&gt; -&amp;gt; Response&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Sess&lt;/code&gt; -&amp;gt; Session&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Sig&lt;/code&gt; -&amp;gt; Signature&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Susp&lt;/code&gt; -&amp;gt; Suspicious&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Src&lt;/code&gt; -&amp;gt; Source&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Svc&lt;/code&gt; -&amp;gt; Service&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Svr&lt;/code&gt; -&amp;gt; Server&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Temp&lt;/code&gt; -&amp;gt; Temporary&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Term&lt;/code&gt; -&amp;gt; Termination/Terminated&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Tkt&lt;/code&gt; -&amp;gt; Ticket&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Tgt&lt;/code&gt; -&amp;gt; Target&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Unkwn&lt;/code&gt; -&amp;gt; Unknown&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Usr&lt;/code&gt; -&amp;gt; User&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Perm&lt;/code&gt; -&amp;gt; Permament&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Pkg&lt;/code&gt; -&amp;gt; Package&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Priv&lt;/code&gt; -&amp;gt; Privilege&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Proc&lt;/code&gt; -&amp;gt; Process&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PID&lt;/code&gt; -&amp;gt; Process ID&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PGUID&lt;/code&gt; -&amp;gt; Process GUID (Global Unique ID)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Ver&lt;/code&gt; -&amp;gt; Version&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Progress Bar&lt;/h2&gt; 
&lt;p&gt;The progress bar will only work with multiple evtx files. It will display in real time the number and percent of evtx files that it has finished analyzing.&lt;/p&gt; 
&lt;h2&gt;Color Output&lt;/h2&gt; 
&lt;p&gt;The alerts will be outputted in color based on the alert &lt;code&gt;level&lt;/code&gt;. You can change the default colors in the config file at &lt;code&gt;./config/level_color.txt&lt;/code&gt; in the format of &lt;code&gt;level,(RGB 6-digit ColorHex)&lt;/code&gt;. If you want to disable color output, you can use &lt;code&gt;-K, --no-color&lt;/code&gt; option.&lt;/p&gt; 
&lt;h2&gt;Results Summary&lt;/h2&gt; 
&lt;p&gt;Total events, the number of events with hits, data reduction metrics, total and unique detections, dates with the most detections, top computers with detections and top alerts are displayed after every scan.&lt;/p&gt; 
&lt;h3&gt;Detection Fequency Timeline&lt;/h3&gt; 
&lt;p&gt;If you add the &lt;code&gt;-T, --visualize-timeline&lt;/code&gt; option, the Event Frequency Timeline feature displays a sparkline frequency timeline of detected events. Note: There needs to be more than 5 events. Also, the characters will not render correctly on the default Command Prompt or PowerShell Prompt, so please use a terminal like Windows Terminal, iTerm2, etc...&lt;/p&gt; 
&lt;h1&gt;Hayabusa Rules&lt;/h1&gt; 
&lt;p&gt;Hayabusa detection rules are written in a sigma-like YML format and are located in the &lt;code&gt;rules&lt;/code&gt; folder. The rules are hosted at &lt;a href="https://github.com/Yamato-Security/hayabusa-rules"&gt;https://github.com/Yamato-Security/hayabusa-rules&lt;/a&gt; so please send any issues and pull requests for rules there instead of the main Hayabusa repository.&lt;/p&gt; 
&lt;p&gt;Please read &lt;a href="https://github.com/Yamato-Security/hayabusa-rules/raw/main/README.md"&gt;the hayabusa-rules repository README&lt;/a&gt; to understand about the rule format and how to create rules.&lt;/p&gt; 
&lt;p&gt;All of the rules from the hayabusa-rules repository should be placed in the &lt;code&gt;rules&lt;/code&gt; folder. &lt;code&gt;informational&lt;/code&gt; level rules are considered &lt;code&gt;events&lt;/code&gt;, while anything with a &lt;code&gt;level&lt;/code&gt; of &lt;code&gt;low&lt;/code&gt; and higher are considered &lt;code&gt;alerts&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The hayabusa rule directory structure is separated into 2 directories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;builtin&lt;/code&gt;: logs that can be generated by Windows built-in functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sysmon&lt;/code&gt;: logs that are generated by &lt;a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon"&gt;sysmon&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Rules are further seperated into directories by log type (Example: Security, System, etc...) and are named in the following format:&lt;/p&gt; 
&lt;p&gt;Please check out the current rules to use as a template in creating new ones or for checking the detection logic.&lt;/p&gt; 
&lt;h2&gt;Sigma v.s. Hayabusa (Built-in Sigma Compatible) Rules&lt;/h2&gt; 
&lt;p&gt;Hayabusa supports Sigma rules natively with a single exception of handling the &lt;code&gt;logsource&lt;/code&gt; fields internally. In order to reduce false positives, , Sigma rules should be run through our convertor explained &lt;a href="https://github.com/Yamato-Security/hayabusa-rules/raw/main/tools/sigmac/README.md"&gt;here&lt;/a&gt;. This will add the proper &lt;code&gt;Channel&lt;/code&gt; and &lt;code&gt;EventID&lt;/code&gt;, and perform field mapping for certain categories like &lt;code&gt;process_creation&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Almost all Hayabusa rules are compatible with the Sigma format so you can use them just like Sigma rules to convert to other SIEM formats. Hayabusa rules are designed solely for Windows event log analysis and have the following benefits:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;An extra &lt;code&gt;details&lt;/code&gt; field to display additional information taken from only the useful fields in the log.&lt;/li&gt; 
 &lt;li&gt;They are all tested against sample logs and are known to work.&lt;/li&gt; 
 &lt;li&gt;Extra aggregators not found in sigma, such as &lt;code&gt;|equalsfield&lt;/code&gt; and &lt;code&gt;|endswithfield&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To our knowledge, hayabusa provides the greatest native support for sigma rules out of any open source Windows event log analysis tool.&lt;/p&gt; 
&lt;h1&gt;Other Windows Event Log Analyzers and Related Resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ahmedkhlief/APT-Hunter"&gt;APT-Hunter&lt;/a&gt; - Attack detection tool written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/stuhli/awesome-event-ids"&gt;Awesome Event IDs&lt;/a&gt; - Collection of Event ID resources useful for Digital Forensics and Incident Response&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/countercept/chainsaw"&gt;Chainsaw&lt;/a&gt; - Another sigma-based attack detection tool written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sans-blue-team/DeepBlueCLI"&gt;DeepBlueCLI&lt;/a&gt; - Attack detection tool written in Powershell by &lt;a href="https://twitter.com/eric_conrad"&gt;Eric Conrad&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jurelou/epagneul"&gt;Epagneul&lt;/a&gt; - Graph visualization for Windows event logs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/miriamxyra/EventList/"&gt;EventList&lt;/a&gt; - Map security baseline event IDs to MITRE ATT&amp;amp;CK by &lt;a href="https://github.com/miriamxyra"&gt;Miriam Wiesner&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.socinvestigation.com/mapping-mitre-attck-with-window-event-log-ids/"&gt;Mapping MITRE ATT&amp;amp;CK with Window Event Log IDs&lt;/a&gt; - by &lt;a href="https://twitter.com/mdecrevoisier"&gt;Michel de CREVOISIER&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EricZimmerman/evtx"&gt;EvtxECmd&lt;/a&gt; - Evtx parser by &lt;a href="https://twitter.com/ericrzimmerman"&gt;Eric Zimmerman&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/williballenthin/EVTXtract"&gt;EVTXtract&lt;/a&gt; - Recover EVTX log files from unallocated space and memory images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.dragos.com/blog/industry-news/evtxtoelk-a-python-module-to-load-windows-event-logs-into-elasticsearch/"&gt;EvtxToElk&lt;/a&gt; - Python tool to send Evtx data to Elastic Stack.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES"&gt;EVTX ATTACK Samples&lt;/a&gt; - EVTX attack sample event log files by &lt;a href="https://twitter.com/SBousseaden"&gt;SBousseaden&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mdecrevoisier/EVTX-to-MITRE-Attack"&gt;EVTX-to-MITRE-Attack&lt;/a&gt; - EVTX attack sample event log files mapped to ATT&amp;amp;CK by &lt;a href="https://twitter.com/mdecrevoisier"&gt;Michel de CREVOISIER&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/omerbenamram/evtx"&gt;EVTX parser&lt;/a&gt; - the Rust evtx library we use written by &lt;a href="https://twitter.com/obenamram"&gt;@OBenamram&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lucky-luk3/Grafiki"&gt;Grafiki&lt;/a&gt; - Sysmon and PowerShell log visualizer.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JPCERTCC/LogonTracer"&gt;LogonTracer&lt;/a&gt; - A graphical interface to visualize logons to detect lateral movement by &lt;a href="https://twitter.com/jpcert_en"&gt;JPCERTCC&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nsacyber/Event-Forwarding-Guidance/tree/master/Events"&gt;NSA Windows Event Monitoring Guidance&lt;/a&gt; - NSA's guide on what to monitor for.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Yamato-Security/RustyBlue"&gt;RustyBlue&lt;/a&gt; - Rust port of DeepBlueCLI by Yamato Security.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SigmaHQ/sigma"&gt;Sigma&lt;/a&gt; - Community based generic SIEM rules.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/philhagen/sof-elk"&gt;SOF-ELK&lt;/a&gt; - A pre-packaged VM with Elastic Stack to import data for DFIR analysis by &lt;a href="https://twitter.com/philhagen"&gt;Phil Hagen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.securityonion.net/en/2.3/so-import-evtx.html"&gt;so-import-evtx&lt;/a&gt; - Import evtx files into Security Onion.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nshalabi/SysmonTools"&gt;SysmonTools&lt;/a&gt; - Configuration and off-line log visualization tool for Sysmon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ericzimmerman.github.io/#!index.md"&gt;Timeline Explorer&lt;/a&gt; - The best CSV timeline analyzer by &lt;a href="https://twitter.com/ericrzimmerman"&gt;Eric Zimmerman&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.forwarddefense.com/media/attachments/2021/05/15/windows-event-log-analyst-reference.pdf"&gt;Windows Event Log Analysis - Analyst Reference&lt;/a&gt; - by Forward Defense's Steve Anson.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/wagga40/Zircolite"&gt;Zircolite&lt;/a&gt; - Sigma-based attack detection tool written in Python.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Windows Logging Recommendations&lt;/h1&gt; 
&lt;p&gt;In order to properly detect malicious activity on Windows machines, you will need to improve the default log settings. We have created a seperate project to document what log settings need to be enabled as well as scripts to automatically enable the proper settings at &lt;a href="https://github.com/Yamato-Security/EnableWindowsLogSettings"&gt;https://github.com/Yamato-Security/EnableWindowsLogSettings&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We also recommend the following sites for guidance:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JSCU-NL/logging-essentials"&gt;JSCU-NL (Joint Sigint Cyber Unit Netherlands) Logging Essentials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.cyber.gov.au/acsc/view-all-content/publications/windows-event-logging-and-forwarding"&gt;ACSC (Australian Cyber Security Centre) Logging and Fowarding Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.malwarearchaeology.com/cheat-sheets"&gt;Malware Archaeology Cheat Sheets&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Sysmon Related Projects&lt;/h1&gt; 
&lt;p&gt;To create the most forensic evidence and detect with the highest accuracy, you need to install sysmon. We recommend the following sites and config files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trustedsec/SysmonCommunityGuide"&gt;TrustedSec Sysmon Community Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/olafhartong/sysmon-modular"&gt;Sysmon Modular&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SwiftOnSecurity/sysmon-config"&gt;SwiftOnSecurity Sysmon Config&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Neo23x0/sysmon-config"&gt;SwiftOnSecurity Sysmon Config fork by Neo23x0&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ion-storm/sysmon-config"&gt;SwiftOnSecurity Sysmon Config fork by ion-storm&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Community Documentation&lt;/h1&gt; 
&lt;h2&gt;English&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;2023/12/11 &lt;a href="https://detect.fyi/hunting-with-hayabusa-tool-showcase-aafef7434413"&gt;Unleashing the Hayabusa Feathers: My Top Features Revealed!&lt;/a&gt; by Christian Henriksen&lt;/li&gt; 
 &lt;li&gt;2023/10/16 &lt;a href="https://mahim-firoj.medium.com/incident-response-and-threat-hunting-using-hayabusa-tool-383da273183a"&gt;Incident response and threat hunting using hayabusa tool&lt;/a&gt; by Md. Mahim Bin Firoj&lt;/li&gt; 
 &lt;li&gt;2023/03/21 &lt;a href="https://blog.ecapuano.com/p/find-threats-in-event-logs-with-hayabusa"&gt;Find Threats in Event Logs with Hayabusa&lt;/a&gt; by &lt;a href="https://twitter.com/eric_capuano"&gt;Eric Capuano&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2023/03/14 &lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/RustPerformance-English.md"&gt;Rust Performance Guide for Hayabusa Developers&lt;/a&gt; by Fukusuke Takahashi&lt;/li&gt; 
 &lt;li&gt;2022/06/19 &lt;a href="https://www.youtube.com/watch?v=Q1IoGX--814"&gt;Velociraptor Walkthrough and Hayabusa Integration&lt;/a&gt; by &lt;a href="https://twitter.com/eric_capuano"&gt;Eric Capuano&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2022/01/24 &lt;a href="https://www.youtube.com/watch?v=7sQqz2ek-ko"&gt;Graphing Hayabusa results in neo4j&lt;/a&gt; by Matthew Seyer (&lt;a href="https://twitter.com/forensic_matt"&gt;@forensic_matt&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Japanese&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;2024/01/24 &lt;a href="https://jpn.nec.com/cybersecurity/blog/240126/index.html"&gt;LME × Hayabusa　－　Windowsイベントログの集約と解析の効率化&lt;/a&gt; by NEC Security Blog&lt;/li&gt; 
 &lt;li&gt;2023/09/29 &lt;a href="https://jpn.nec.com/cybersecurity/blog/230929/index.html"&gt;Fast Forensics with Hayabusa and Splunk&lt;/a&gt; by NEC Security Blog&lt;/li&gt; 
 &lt;li&gt;2023/09/13 &lt;a href="https://engineers.ffri.jp/entry/2023/09/13/130750"&gt;Windows Event Log Analysis with Hayabusa&lt;/a&gt; by FFRI&lt;/li&gt; 
 &lt;li&gt;2022/03/14 &lt;a href="https://raw.githubusercontent.com/Yamato-Security/hayabusa/main/doc/RustPerformance-Japanese.md"&gt;Rust Performance Guide for Hayabusa Developers&lt;/a&gt; by Fukusuke Takahashi&lt;/li&gt; 
 &lt;li&gt;2022/01/22 &lt;a href="https://qiita.com/kzzzzo2/items/ead8ccc77b7609143749"&gt;Visualizing Hayabusa results in Elastic Stack&lt;/a&gt; by &lt;a href="https://qiita.com/kzzzzo2"&gt;@kzzzzo2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2021/12/31 &lt;a href="https://itib.hatenablog.com/entry/2021/12/31/222946"&gt;Intro to Hayabusa&lt;/a&gt; by itiB (&lt;a href="https://twitter.com/itiB_S144"&gt;@itiB_S144&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;2021/12/27 &lt;a href="https://kazuminkun.hatenablog.com/entry/2021/12/27/190535"&gt;Hayabusa internals&lt;/a&gt; by Kazuminn (&lt;a href="https://twitter.com/k47_um1n"&gt;@k47_um1n&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contribution&lt;/h1&gt; 
&lt;p&gt;We would love any form of contribution. Pull requests, rule creation and sample evtx logs are the best but feature requests, notifying us of bugs, etc... are also very welcome.&lt;/p&gt; 
&lt;p&gt;At the least, if you like our tool then please give us a star on GitHub and show your support!&lt;/p&gt; 
&lt;h1&gt;Bug Submission&lt;/h1&gt; 
&lt;p&gt;Please submit any bugs you find &lt;a href="https://github.com/Yamato-Security/hayabusa/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=%5Bbug%5D"&gt;here.&lt;/a&gt; This project is currently actively maintained and we are happy to fix any bugs reported.&lt;/p&gt; 
&lt;p&gt;If you find any issues (false positives, bugs, etc...) with Hayabusa rules, please report them to the hayabusa-rules GitHub issues page &lt;a href="https://github.com/Yamato-Security/hayabusa-rules/issues/new"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you find any issues (false positives, bugs, etc...) with Sigma rules, please report them to the upstream SigmaHQ GitHub issues page &lt;a href="https://github.com/SigmaHQ/sigma/issues"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Hayabusa is released under &lt;a href="https://www.gnu.org/licenses/agpl-3.0.en.html"&gt;AGPLv3&lt;/a&gt; and all rules are released under the &lt;a href="https://github.com/SigmaHQ/sigma/raw/master/LICENSE.Detection.Rules.md"&gt;Detection Rule License (DRL) 1.1&lt;/a&gt;. You may freely use Hayabusa internally, SaaS solutions, for consulting work, etc... However, if you use Hayabusa in a type of SaaS solution and make improvements to it, we ask you to open-source those improvements and give back to the project.&lt;/p&gt; 
&lt;p&gt;Hayabusa uses GeoLite2 data created by MaxMind, available from &lt;a href="https://www.maxmind.com"&gt;https://www.maxmind.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Twitter&lt;/h1&gt; 
&lt;p&gt;You can recieve the latest news about Hayabusa, rule updates, other Yamato Security tools, etc... by following us on Twitter at &lt;a href="https://twitter.com/SecurityYamato"&gt;@SecurityYamato&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tokio-rs/axum</title>
      <link>https://github.com/tokio-rs/axum</link>
      <description>&lt;p&gt;Ergonomic and modular web framework built with Tokio, Tower, and Hyper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;axum&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a web application framework that focuses on ergonomics and modularity.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build status"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/axum"&gt;&lt;img src="https://img.shields.io/crates/v/axum" alt="Crates.io"&gt;&lt;/a&gt; &lt;a href="https://docs.rs/axum"&gt;&lt;img src="https://docs.rs/axum/badge.svg?sanitize=true" alt="Documentation"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;More information about this crate can be found in the &lt;a href="https://docs.rs/axum"&gt;crate documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;High level features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Route requests to handlers with a macro free API.&lt;/li&gt; 
 &lt;li&gt;Declaratively parse requests using extractors.&lt;/li&gt; 
 &lt;li&gt;Simple and predictable error handling model.&lt;/li&gt; 
 &lt;li&gt;Generate responses with minimal boilerplate.&lt;/li&gt; 
 &lt;li&gt;Take full advantage of the &lt;a href="https://crates.io/crates/tower"&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/tower-http"&gt;&lt;code&gt;tower-http&lt;/code&gt;&lt;/a&gt; ecosystem of middleware, services, and utilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In particular the last point is what sets &lt;code&gt;axum&lt;/code&gt; apart from other frameworks. &lt;code&gt;axum&lt;/code&gt; doesn't have its own middleware system but instead uses &lt;a href="https://docs.rs/tower/latest/tower/trait.Service.html"&gt;&lt;code&gt;tower::Service&lt;/code&gt;&lt;/a&gt;. This means &lt;code&gt;axum&lt;/code&gt; gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://crates.io/crates/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;⚠ Breaking changes ⚠&lt;/h2&gt; 
&lt;p&gt;We are currently working towards axum 0.9 so the &lt;code&gt;main&lt;/code&gt; branch contains breaking changes. See the &lt;a href="https://github.com/tokio-rs/axum/tree/v0.8.x"&gt;&lt;code&gt;0.8.x&lt;/code&gt;&lt;/a&gt; branch for what's released to crates.io.&lt;/p&gt; 
&lt;h2&gt;Usage example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use axum::{
    routing::{get, post},
    http::StatusCode,
    Json, Router,
};
use serde::{Deserialize, Serialize};

#[tokio::main]
async fn main() {
    // initialize tracing
    tracing_subscriber::fmt::init();

    // build our application with a route
    let app = Router::new()
        // `GET /` goes to `root`
        .route("/", get(root))
        // `POST /users` goes to `create_user`
        .route("/users", post(create_user));

    // run our app with hyper, listening globally on port 3000
    let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();
    axum::serve(listener, app).await.unwrap();
}

// basic handler that responds with a static string
async fn root() -&amp;gt; &amp;amp;'static str {
    "Hello, World!"
}

async fn create_user(
    // this argument tells axum to parse the request body
    // as JSON into a `CreateUser` type
    Json(payload): Json&amp;lt;CreateUser&amp;gt;,
) -&amp;gt; (StatusCode, Json&amp;lt;User&amp;gt;) {
    // insert your application logic here
    let user = User {
        id: 1337,
        username: payload.username,
    };

    // this will be converted into a JSON response
    // with a status code of `201 Created`
    (StatusCode::CREATED, Json(user))
}

// the input to our `create_user` handler
#[derive(Deserialize)]
struct CreateUser {
    username: String,
}

// the output to our `create_user` handler
#[derive(Serialize)]
struct User {
    id: u64,
    username: String,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find this &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples/readme"&gt;example&lt;/a&gt; as well as other example projects in the &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;example directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://docs.rs/axum"&gt;crate documentation&lt;/a&gt; for way more examples.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a relatively thin layer on top of &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; and adds very little overhead. So &lt;code&gt;axum&lt;/code&gt;'s performance is comparable to &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;. You can find benchmarks &lt;a href="https://github.com/programatik29/rust-web-benchmarks"&gt;here&lt;/a&gt; and &lt;a href="https://web-frameworks-benchmark.netlify.app/result?l=rust"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Safety&lt;/h2&gt; 
&lt;p&gt;This crate uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; to ensure everything is implemented in 100% safe Rust.&lt;/p&gt; 
&lt;h2&gt;Minimum supported Rust version&lt;/h2&gt; 
&lt;p&gt;axum's MSRV is 1.78.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;examples&lt;/a&gt; folder contains various examples of how to use &lt;code&gt;axum&lt;/code&gt;. The &lt;a href="https://docs.rs/axum"&gt;docs&lt;/a&gt; also provide lots of code snippets and examples. For full-fledged examples, check out community-maintained &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase"&gt;showcases&lt;/a&gt; or &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials"&gt;tutorials&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;In the &lt;code&gt;axum&lt;/code&gt;'s repo we also have a &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;number of examples&lt;/a&gt; showing how to put everything together. Community-maintained &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase"&gt;showcases&lt;/a&gt; and &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials"&gt;tutorials&lt;/a&gt; also demonstrate how to use &lt;code&gt;axum&lt;/code&gt; for real-world applications. You're also welcome to ask in the &lt;a href="https://discord.gg/tokio"&gt;Discord channel&lt;/a&gt; or open a &lt;a href="https://github.com/tokio-rs/axum/discussions/new?category=q-a"&gt;discussion&lt;/a&gt; with your question.&lt;/p&gt; 
&lt;h2&gt;Community projects&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md"&gt;here&lt;/a&gt; for a list of community maintained crates and projects built with &lt;code&gt;axum&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;🎈 Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href="https://github.com/tokio-rs/axum/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to help you get involved in the &lt;code&gt;axum&lt;/code&gt; project.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://github.com/tokio-rs/axum/raw/main/axum/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in &lt;code&gt;axum&lt;/code&gt; by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>