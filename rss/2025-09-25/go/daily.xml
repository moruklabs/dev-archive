<rss version="2.0">
  <channel>
    <title>GitHub Go Daily Trending</title>
    <description>Daily Trending of Go in GitHub</description>
    <pubDate>Wed, 24 Sep 2025 01:33:38 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>DataDog/datadog-agent</title>
      <link>https://github.com/DataDog/datadog-agent</link>
      <description>&lt;p&gt;Main repository for Datadog Agent&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Datadog Agent&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/v/release/DataDog/datadog-agent?style=flat&amp;amp;logo=datadog&amp;amp;logoColor=%23632CA6&amp;amp;labelColor=%23FFF&amp;amp;color=%23632CA6" alt="GitHub Release" /&gt; &lt;a href="https://codecov.io/github/DataDog/datadog-agent?branch=main"&gt;&lt;img src="https://codecov.io/github/DataDog/datadog-agent/coverage.svg?branch=main" alt="Coverage status" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/DataDog/datadog-agent"&gt;&lt;img src="https://godoc.org/github.com/DataDog/datadog-agent?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains the source code of the Datadog Agent version 7 and version 6. Please refer to the &lt;a href="https://docs.datadoghq.com/agent/"&gt;Agent user documentation&lt;/a&gt; for information about differences between Agent v5, Agent v6 and Agent v7. Additionally, we provide a list of prepackaged binaries for an easy install process &lt;a href="https://app.datadoghq.com/fleet/install-agent/latest?platform=overview"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://datadoghq.dev/datadog-agent/setup/"&gt;developer docs site&lt;/a&gt; contains information about how to develop the Datadog Agent itself.&lt;/p&gt; 
&lt;p&gt;The source of the content is located under &lt;a href="https://raw.githubusercontent.com/DataDog/datadog-agent/main/docs"&gt;the docs directory&lt;/a&gt; and may contain pages that are not yet published.&lt;/p&gt; 
&lt;h2&gt;Contributing code&lt;/h2&gt; 
&lt;p&gt;You'll find information and help on how to contribute code to this project under &lt;a href="https://raw.githubusercontent.com/DataDog/datadog-agent/main/docs/dev"&gt;the &lt;code&gt;docs/dev&lt;/code&gt; directory&lt;/a&gt; of the present repo.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The Datadog Agent user space components are licensed under the &lt;a href="https://raw.githubusercontent.com/DataDog/datadog-agent/main/LICENSE"&gt;Apache License, Version 2.0&lt;/a&gt;. The BPF code is licensed under the &lt;a href="https://raw.githubusercontent.com/DataDog/datadog-agent/main/pkg/ebpf/c/COPYING"&gt;General Public License, Version 2.0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hashicorp/terraform-provider-aws</title>
      <link>https://github.com/hashicorp/terraform-provider-aws</link>
      <description>&lt;p&gt;The AWS Provider enables Terraform to manage AWS resources.&lt;/p&gt;&lt;hr&gt;&lt;a href="https://terraform.io"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset=".github/terraform_logo_dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset=".github/terraform_logo_light.svg" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/hashicorp/terraform-provider-aws/main/.github/terraform_logo_light.svg?sanitize=true" alt="Terraform logo" title="Terraform" align="right" height="50" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h1&gt;Terraform AWS Provider&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://discuss.hashicorp.com/c/terraform-providers/tf-aws/"&gt;&lt;img src="https://img.shields.io/badge/discuss-terraform--aws-623CE4.svg?style=flat" alt="Forums" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs"&gt;AWS Provider&lt;/a&gt; enables &lt;a href="https://terraform.io"&gt;Terraform&lt;/a&gt; to manage &lt;a href="https://aws.amazon.com"&gt;AWS&lt;/a&gt; resources.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://hashicorp.github.io/terraform-provider-aws/"&gt;Contributing guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hashicorp/terraform-provider-aws/main/ROADMAP.md"&gt;Quarterly development roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hashicorp.github.io/terraform-provider-aws/faq/"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.hashicorp.com/collections/terraform/aws-get-started"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discuss.hashicorp.com/c/terraform-providers/tf-aws/"&gt;discuss.hashicorp.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Please note:&lt;/strong&gt; We take Terraform's security and our users' trust very seriously. If you believe you have found a security issue in the Terraform AWS Provider, please responsibly disclose it by contacting us at &lt;a href="mailto:security@hashicorp.com"&gt;security@hashicorp.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>open-policy-agent/opa</title>
      <link>https://github.com/open-policy-agent/opa</link>
      <description>&lt;p&gt;Open Policy Agent (OPA) is an open source, general-purpose policy engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://raw.githubusercontent.com/open-policy-agent/opa/main/logo/logo-144x144.png" alt="logo" /&gt; Open Policy Agent&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/open-policy-agent/opa/actions"&gt;&lt;img src="https://github.com/open-policy-agent/opa/workflows/Post%20Merge/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/open-policy-agent/opa"&gt;&lt;img src="https://goreportcard.com/badge/open-policy-agent/opa" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/1768"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/1768/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://app.netlify.com/sites/openpolicyagent/deploys"&gt;&lt;img src="https://api.netlify.com/api/v1/badges/4a0a092a-8741-4826-a28f-826d4a576cab/deploy-status" alt="Netlify Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Open Policy Agent (OPA) is an open source, general-purpose policy engine that enables unified, context-aware policy enforcement across the entire stack.&lt;/p&gt; 
&lt;p&gt;OPA is proud to be a graduated project in the &lt;a href="https://cncf.io"&gt;Cloud Native Computing Foundation&lt;/a&gt; (CNCF) landscape. For details read the CNCF &lt;a href="https://www.cncf.io/announcements/2021/02/04/cloud-native-computing-foundation-announces-open-policy-agent-graduation/"&gt;announcement&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Get started with OPA&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Write your first Rego policy with the &lt;a href="https://play.openpolicyagent.org"&gt;Rego Playground&lt;/a&gt; or use it to share your work with others for feedback and support. Have a look at the &lt;a href="https://play.openpolicyagent.org/?example-group=access-control"&gt;Access Control examples&lt;/a&gt; if you're not sure where to start.&lt;/li&gt; 
 &lt;li&gt;Install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=tsandall.opa"&gt;VS Code extension&lt;/a&gt; to get started locally with live diagnostics, debugging and formatting. See &lt;a href="https://www.openpolicyagent.org/docs/editor-and-ide-support/"&gt;Editor and IDE Support&lt;/a&gt; for other supported editors.&lt;/li&gt; 
 &lt;li&gt;Go to the &lt;a href="https://www.openpolicyagent.org/docs/latest/"&gt;OPA Documentation&lt;/a&gt; to learn about the Rego language as well as how to deploy and integrate OPA.&lt;/li&gt; 
 &lt;li&gt;Check out the learning resources in the &lt;a href="https://www.openpolicyagent.org/ecosystem/by-feature/learning-rego/"&gt;Learning Rego&lt;/a&gt; section of the ecosystem directory.&lt;/li&gt; 
 &lt;li&gt;Follow the &lt;a href="https://www.openpolicyagent.org/docs/latest/#running-opa"&gt;Running OPA&lt;/a&gt; instructions to get started with the OPA CLI locally.&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://hub.docker.com/r/openpolicyagent/opa/tags/"&gt;Docker Hub&lt;/a&gt; for container images and the &lt;a href="https://github.com/open-policy-agent/opa/releases"&gt;GitHub releases&lt;/a&gt; for binaries.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href="https://docs.google.com/presentation/d/16QV6gvLDOV3I0_guPC3_19g6jHkEg3X9xqMYgtoCKrs/edit?usp=sharing"&gt;OPA Roadmap&lt;/a&gt; to see a high-level snapshot of OPA features in-progress and planned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Want to talk about OPA or get support?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join the &lt;a href="https://slack.openpolicyagent.org"&gt;OPA Slack&lt;/a&gt; to talk to other OPA users and maintainers. See &lt;code&gt;#help&lt;/code&gt; for support.&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href="https://github.com/orgs/open-policy-agent/discussions"&gt;Community Discussions&lt;/a&gt; to ask questions.&lt;/li&gt; 
 &lt;li&gt;See the &lt;a href="https://www.openpolicyagent.org/support/"&gt;Support&lt;/a&gt; page for commercial support options.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Interested to learn what others are doing with OPA?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Browse community projects on the &lt;a href="http://openpolicyagent.org/ecosystem/"&gt;OPA Ecosystem Directory&lt;/a&gt; - don't forget to &lt;a href="https://github.com/open-policy-agent/opa/tree/main/docs#opa-ecosystem"&gt;list your own&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;Check out the &lt;a href="https://raw.githubusercontent.com/open-policy-agent/opa/main/ADOPTERS.md"&gt;ADOPTERS.md&lt;/a&gt; file for a list of production adopters. Does your organization use OPA in production? Support the OPA project by submitting a PR to add your organization to the list with a short description of your OPA use cases!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Want to integrate OPA?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See the high-level &lt;a href="https://www.openpolicyagent.org/docs/latest/integration/#integrating-with-the-go-sdk"&gt;Go SDK&lt;/a&gt; or the low-level Go API &lt;a href="https://godoc.org/github.com/open-policy-agent/opa/rego"&gt;&lt;img src="https://godoc.org/github.com/open-policy-agent/opa?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; to integrate OPA with services written in Go.&lt;/li&gt; 
 &lt;li&gt;See the &lt;a href="https://www.openpolicyagent.org/docs/rest-api.html"&gt;REST API&lt;/a&gt; reference to integrate OPA with services written in other languages.&lt;/li&gt; 
 &lt;li&gt;See the &lt;a href="https://www.openpolicyagent.org/docs/latest/integration/"&gt;integration docs&lt;/a&gt; for more options.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Want to contribute to OPA?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read the &lt;a href="https://www.openpolicyagent.org/docs/latest/contributing/"&gt;Contributing Guide&lt;/a&gt; to learn how to make your first contribution.&lt;/li&gt; 
 &lt;li&gt;Use &lt;a href="https://openpolicyagent.slack.com/archives/C02L1TLPN59"&gt;#contributors&lt;/a&gt; in Slack to talk to other contributors and OPA maintainers.&lt;/li&gt; 
 &lt;li&gt;File a &lt;a href="https://github.com/open-policy-agent/opa/issues"&gt;GitHub Issue&lt;/a&gt; to request features or report bugs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How does OPA work?&lt;/h2&gt; 
&lt;p&gt;OPA gives you a high-level declarative language to author and enforce policies across your stack.&lt;/p&gt; 
&lt;p&gt;With OPA, you define &lt;em&gt;rules&lt;/em&gt; that govern how your system should behave. These rules exist to answer questions like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Can user X call operation Y on resource Z?&lt;/li&gt; 
 &lt;li&gt;What clusters should workload W be deployed to?&lt;/li&gt; 
 &lt;li&gt;What tags must be set on resource R before it's created?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You integrate services with OPA so that these kinds of policy decisions do not have to be &lt;em&gt;hardcoded&lt;/em&gt; in your service. Services integrate with OPA by executing &lt;em&gt;queries&lt;/em&gt; when policy decisions are needed.&lt;/p&gt; 
&lt;p&gt;When you query OPA for a policy decision, OPA evaluates the rules and data (which you give it) to produce an answer. The policy decision is sent back as the result of the query.&lt;/p&gt; 
&lt;p&gt;For example, in a simple API authorization use case:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You write rules that allow (or deny) access to your service APIs.&lt;/li&gt; 
 &lt;li&gt;Your service queries OPA when it receives API requests.&lt;/li&gt; 
 &lt;li&gt;OPA returns allow (or deny) decisions to your service.&lt;/li&gt; 
 &lt;li&gt;Your service &lt;em&gt;enforces&lt;/em&gt; the decisions by accepting or rejecting requests accordingly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For concrete examples of how to integrate OPA with systems like &lt;a href="https://www.openpolicyagent.org/docs/kubernetes"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://www.openpolicyagent.org/docs/terraform"&gt;Terraform&lt;/a&gt;, &lt;a href="https://www.openpolicyagent.org/docs/docker-authorization"&gt;Docker&lt;/a&gt;, &lt;a href="https://www.openpolicyagent.org/docs/ssh-and-sudo-authorization"&gt;SSH&lt;/a&gt;, and more, see &lt;a href="https://www.openpolicyagent.org"&gt;openpolicyagent.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Presentations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open Policy Agent (OPA) Intro &amp;amp; Deep Dive @ Kubecon NA 2023: &lt;a href="https://www.youtube.com/watch?v=wJkjsvVpj_Q"&gt;video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open Policy Agent (OPA) Intro &amp;amp; Deep Dive @ Kubecon EU 2023: &lt;a href="https://www.youtube.com/watch?v=6RNp3m_THw4"&gt;video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Running Policy in Hard to Reach Places with WASM &amp;amp; OPA @ CN Wasm Day EU 2023: &lt;a href="https://www.youtube.com/watch?v=BdeBhukLwt4"&gt;video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;OPA maintainers talk @ Kubecon NA 2022: &lt;a href="https://www.youtube.com/watch?v=RMiovzGGCfI"&gt;video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open Policy Agent (OPA) Intro &amp;amp; Deep Dive @ Kubecon EU 2022: &lt;a href="https://www.youtube.com/watch?v=MhyQxIp1H58"&gt;video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open Policy Agent Intro @ KubeCon EU 2021: &lt;a href="https://www.youtube.com/watch?v=2CgeiWkliaw"&gt;Video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Using Open Policy Agent to Meet Evolving Policy Requirements @ KubeCon NA 2020: &lt;a href="https://www.youtube.com/watch?v=zVuM7F_BTyc"&gt;video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Applying Policy Throughout The Application Lifecycle with Open Policy Agent @ CloudNativeCon 2019: &lt;a href="https://www.youtube.com/watch?v=cXfsaE6RKfc"&gt;video&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open Policy Agent Introduction @ CloudNativeCon EU 2018: &lt;a href="https://youtu.be/XEHeexPpgrA"&gt;video&lt;/a&gt;, &lt;a href="https://www.slideshare.net/TorinSandall/opa-the-cloud-native-policy-engine"&gt;slides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rego Deep Dive @ CloudNativeCon EU 2018: &lt;a href="https://youtu.be/4mBJSIhs2xQ"&gt;video&lt;/a&gt;, &lt;a href="https://www.slideshare.net/TorinSandall/rego-deep-dive"&gt;slides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;How Netflix Is Solving Authorization Across Their Cloud @ CloudNativeCon US 2017: &lt;a href="https://www.youtube.com/watch?v=R6tUNpRpdnY"&gt;video&lt;/a&gt;, &lt;a href="https://www.slideshare.net/TorinSandall/how-netflix-is-solving-authorization-across-their-cloud"&gt;slides&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Policy-based Resource Placement in Kubernetes Federation @ LinuxCon Beijing 2017: &lt;a href="https://www.slideshare.net/TorinSandall/policybased-resource-placement-across-hybrid-cloud"&gt;slides&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=hRz13baBhfg&amp;amp;feature=youtu.be"&gt;screencast&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Enforcing Bespoke Policies In Kubernetes @ KubeCon US 2017: &lt;a href="https://www.youtube.com/watch?v=llDI8VvkUj8"&gt;video&lt;/a&gt;, &lt;a href="https://www.slideshare.net/TorinSandall/enforcing-bespoke-policies-in-kubernetes"&gt;slides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Istio's Mixer: Policy Enforcement with Custom Adapters @ CloudNativeCon US 2017: &lt;a href="https://www.youtube.com/watch?v=czZLXUqzd24"&gt;video&lt;/a&gt;, &lt;a href="https://www.slideshare.net/TorinSandall/istios-mixer-policy-enforcement-with-custom-adapters-cloud-nativecon-17"&gt;slides&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;A third party security audit was performed by Cure53, you can see the full report &lt;a href="https://raw.githubusercontent.com/open-policy-agent/opa/main/SECURITY_AUDIT.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please report vulnerabilities by email to &lt;a href="mailto:open-policy-agent-security@googlegroups.com"&gt;open-policy-agent-security&lt;/a&gt;. We will send a confirmation message to acknowledge that we have received the report and then we will send additional messages to follow up once the issue has been investigated.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iam-veeramalla/observability-zero-to-hero</title>
      <link>https://github.com/iam-veeramalla/observability-zero-to-hero</link>
      <description>&lt;p&gt;Repo for learning observability&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📚 7-Day Observability Tutorial Series&lt;/h1&gt; 
&lt;p&gt;Welcome to the 7-Day Observability Tutorial Series! This repository contains the code and detailed explanations for setting up and understanding observability in Kubernetes using Prometheus, Grafana, Elasticsearch Fluentbit, Kibana, Jaeger, groundcover(eBPF), opentelemetry e.t.c.,.&lt;/p&gt; 
&lt;h2&gt;📅 Overview of Each Day&lt;/h2&gt; 
&lt;h3&gt;Day 1: Introduction to Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to Observability, Monitoring, Logging, and Tracing.&lt;/li&gt; 
   &lt;li&gt;The difference between Monitoring and Observability.&lt;/li&gt; 
   &lt;li&gt;Tools available for Monitoring and Observability.&lt;/li&gt; 
   &lt;li&gt;Comparison between monitoring and observing in Bare-Metal Servers vs. Kubernetes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Understand the fundamental concepts of observability.&lt;/li&gt; 
   &lt;li&gt;Learn why monitoring and observability are crucial in modern IT environments.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 2: Prometheus - Setting Up Monitoring&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to Prometheus and its architecture.&lt;/li&gt; 
   &lt;li&gt;Setup and configuration of Prometheus in an EKS cluster.&lt;/li&gt; 
   &lt;li&gt;Installation of kube-prometheus-stack with Helm and integrating it with Grafana.&lt;/li&gt; 
   &lt;li&gt;Basic queries and setup for monitoring with Prometheus and Grafana.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Get hands-on experience with Prometheus and Grafana.&lt;/li&gt; 
   &lt;li&gt;Learn to install and configure Prometheus on Kubernetes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 3: Metrics and PromQL in Prometheus&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to PromQL and basic querying techniques.&lt;/li&gt; 
   &lt;li&gt;Aggregation and functions in PromQL to analyze metrics data.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Master the Prometheus Query Language (PromQL) for querying and analyzing metrics.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 4: Instrumentation and Custom Metrics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Instrumentation for adding monitoring capabilities to applications.&lt;/li&gt; 
   &lt;li&gt;Understanding different types of metrics in Prometheus: Counter, Gauge, Histogram, and Summary.&lt;/li&gt; 
   &lt;li&gt;Writing custom metrics in a Node.js application using the &lt;code&gt;prom-client&lt;/code&gt; library.&lt;/li&gt; 
   &lt;li&gt;Dockerizing the application and deploying it on Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Setting up Alertmanager for alerting based on custom metrics.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Learn how to instrument applications to expose custom metrics.&lt;/li&gt; 
   &lt;li&gt;Configure alerts in Alertmanager to monitor application performance.&lt;/li&gt; 
   &lt;li&gt;Understand how to work with different types of metrics in Prometheus.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 5: Logging with EFK Stack&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to logging in distributed systems and Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Setting up the EFK stack (Elasticsearch, Fluentbit, Kibana) on Kubernetes.&lt;/li&gt; 
   &lt;li&gt;Detailed setup and configuration for collecting and visualizing logs.&lt;/li&gt; 
   &lt;li&gt;Cleaning up the Kubernetes cluster and resources.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Understand the importance of logging and how to set up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 6: Distributed Tracing with Jaeger&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to Jaeger and its architecture for distributed tracing.&lt;/li&gt; 
   &lt;li&gt;Setting up Jaeger in a Kubernetes cluster using Helm.&lt;/li&gt; 
   &lt;li&gt;Instrumenting services using OpenTelemetry to enable tracing.&lt;/li&gt; 
   &lt;li&gt;Viewing and analyzing traces in the Jaeger UI.&lt;/li&gt; 
   &lt;li&gt;Cleaning up the environment after setting up Jaeger.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Gain insights into distributed tracing and how it helps in debugging and performance optimization.&lt;/li&gt; 
   &lt;li&gt;Learn how to set up and configure Jaeger for tracing in a microservices architecture.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Day 7: OpenTelemetry – Setting Up Unified Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Introduction to OpenTelemetry, a unified framework for observability.&lt;/li&gt; 
   &lt;li&gt;Understanding how OpenTelemetry integrates tracing, metrics, and logging.&lt;/li&gt; 
   &lt;li&gt;Comparison of OpenTelemetry with prior observability tools like Jaeger, Prometheus&lt;/li&gt; 
   &lt;li&gt;Supported programming languages and multi-language support in OpenTelemetry.&lt;/li&gt; 
   &lt;li&gt;Step-by-step setup of OpenTelemetry in Kubernetes.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Learn how OpenTelemetry simplifies the process of collecting and exporting telemetry data.&lt;/li&gt; 
   &lt;li&gt;Understand the benefits of a unified observability approach using OpenTelemetry.&lt;/li&gt; 
   &lt;li&gt;Gain hands-on experience with setting up OpenTelemetry Collector, Prometheus, Jaeger, and Elasticsearch to monitor a Golang microservice application.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>golangci/golangci-lint</title>
      <link>https://github.com/golangci/golangci-lint</link>
      <description>&lt;p&gt;Fast linters runner for Go&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="golangci-lint logo" src="https://raw.githubusercontent.com/golangci/golangci-lint/main/assets/go.png" height="150" /&gt; &lt;/p&gt;
&lt;h3 align="center"&gt;golangci-lint&lt;/h3&gt; 
&lt;p align="center"&gt;Fast linters runner for Go&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;code&gt;golangci-lint&lt;/code&gt; is a fast Go linters runner.&lt;/p&gt; 
&lt;p&gt;It runs linters in parallel, uses caching, supports YAML configuration, integrates with all major IDEs, and includes over a hundred linters.&lt;/p&gt; 
&lt;h2&gt;Install &lt;code&gt;golangci-lint&lt;/code&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://golangci-lint.run/docs/welcome/install/#local-installation"&gt;On my machine&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://golangci-lint.run/docs/welcome/install/#ci-installation"&gt;On CI/CD systems&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Documentation is hosted at &lt;a href="https://golangci-lint.run"&gt;https://golangci-lint.run&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Social Networks&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://gophers.slack.com/archives/CS0TBRKPC"&gt;&lt;img src="https://img.shields.io/badge/Slack-4285F4?logo=slack&amp;amp;logoColor=white" alt="Join Slack" /&gt;&lt;/a&gt; &lt;a href="https://fosstodon.org/@golangcilint"&gt;&lt;img src="https://img.shields.io/badge/Mastodon-6364FF?logo=mastodon&amp;amp;logoColor=white" alt="Follow on Mastodon" /&gt;&lt;/a&gt; &lt;a href="https://bsky.app/profile/golangci-lint.run"&gt;&lt;img src="https://img.shields.io/badge/Bluesky-0a7aff?logo=bluesky&amp;amp;logoColor=white" alt="Follow on Bluesky" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/golangci"&gt;&lt;img src="https://img.shields.io/badge/Twitter-1DA1F2?logo=x&amp;amp;logoColor=white" alt="Follow on Twitter" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support Us&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;golangci-lint&lt;/code&gt; is a free and open-source project built by volunteers.&lt;/p&gt; 
&lt;p&gt;If you value it, consider supporting us, we appreciate it! &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://donate.golangci.org"&gt;&lt;img src="https://img.shields.io/badge/Support-golangci_lint-blue?style=for-the-badge" alt="Golangci-lint" /&gt;&lt;/a&gt; &lt;a href="https://golangci-lint.run/docs/product/thanks/"&gt;&lt;img src="https://img.shields.io/badge/Support-Linter_Authors-blue?style=for-the-badge" alt="Linter Authors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/golangci/golangci-lint/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt; &lt;a href="https://raw.githubusercontent.com/golangci/golangci-lint/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/golangci/golangci-lint" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/golangci/golangci-lint/releases/latest"&gt;&lt;img src="https://img.shields.io/github/release/golangci/golangci-lint.svg?sanitize=true" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/golangci/golangci-lint"&gt;&lt;img src="https://img.shields.io/docker/pulls/golangci/golangci-lint" alt="Docker" /&gt;&lt;/a&gt; &lt;a href="https://somsubhra.github.io/github-release-stats/?username=golangci&amp;amp;repository=golangci-lint"&gt;&lt;img src="https://img.shields.io/github/downloads/golangci/golangci-lint/total.svg?logo=github" alt="GitHub Releases Stats of golangci-lint" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href="https://golangci-lint.run/docs/contributing/"&gt;How to contribute&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://github.com/golangci/golangci-lint/graphs/contributors"&gt; &lt;img src="https://opencollective.com/golangci-lint/contributors.svg?width=890&amp;amp;button=false&amp;amp;skip=golangcidev,CLAassistant,renovate,fossabot,golangcibot,kortschak,golangci-releaser,dependabot%5Bbot%5D" /&gt; &lt;/a&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p float="left"&gt; &lt;a href="https://www.jetbrains.com/go/?utm_source=OSS&amp;amp;utm_medium=referral&amp;amp;utm_campaign=golangci" target="_blank"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="assets/goland-white.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="assets/goland.svg" /&gt; 
   &lt;img alt="The complete IDE crafted for professional Go developers." src="https://raw.githubusercontent.com/golangci/golangci-lint/main/assets/goland.svg?sanitize=true" width="150" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://starchart.cc/golangci/golangci-lint"&gt;&lt;img src="https://starchart.cc/golangci/golangci-lint.svg?variant=adaptive" alt="Stargazers over time" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bluenviron/mediamtx</title>
      <link>https://github.com/bluenviron/mediamtx</link>
      <description>&lt;p&gt;Ready-to-use SRT / WebRTC / RTSP / RTMP / LL-HLS / MPEG-TS / RTP media server and media proxy that allows to read, publish, proxy, record and playback video and audio streams.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://mediamtx.org"&gt; &lt;img src="https://raw.githubusercontent.com/bluenviron/mediamtx/main/logo.png" alt="MediaMTX" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;p&gt;&lt;a href="https://mediamtx.org"&gt;&lt;img src="https://img.shields.io/badge/website-mediamtx.org-1c94b5" alt="Website" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bluenviron/mediamtx/actions/workflows/code_test.yml"&gt;&lt;img src="https://github.com/bluenviron/mediamtx/actions/workflows/code_test.yml/badge.svg?sanitize=true" alt="Test" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bluenviron/mediamtx/actions/workflows/code_lint.yml"&gt;&lt;img src="https://github.com/bluenviron/mediamtx/actions/workflows/code_lint.yml/badge.svg?sanitize=true" alt="Lint" /&gt;&lt;/a&gt; &lt;a href="https://app.codecov.io/gh/bluenviron/mediamtx/tree/main"&gt;&lt;img src="https://codecov.io/gh/bluenviron/mediamtx/branch/main/graph/badge.svg?sanitize=true" alt="CodeCov" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bluenviron/mediamtx/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/bluenviron/mediamtx" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/bluenviron/mediamtx"&gt;&lt;img src="https://img.shields.io/badge/docker-bluenviron/mediamtx-blue" alt="Docker Hub" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;em&gt;MediaMTX&lt;/em&gt; is a ready-to-use and zero-dependency real-time media server and media proxy that allows to publish, read, proxy, record and playback video and audio streams. It has been conceived as a "media router" that routes media streams from one end to the other.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;&lt;a href="https://mediamtx.org/docs/kickoff/installation"&gt;Installation&lt;/a&gt;&lt;/th&gt; 
    &lt;th&gt;&lt;a href="https://mediamtx.org/docs/kickoff/introduction"&gt;Documentation&lt;/a&gt;&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/publish"&gt;Publish&lt;/a&gt; live streams to the server with SRT, WebRTC, RTSP, RTMP, HLS, MPEG-TS, RTP&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/read"&gt;Read&lt;/a&gt; live streams from the server with SRT, WebRTC, RTSP, RTMP, HLS&lt;/li&gt; 
 &lt;li&gt;Streams are automatically converted from a protocol to another&lt;/li&gt; 
 &lt;li&gt;Serve several streams at once in separate paths&lt;/li&gt; 
 &lt;li&gt;Reload the configuration without disconnecting existing clients (hot reloading)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/record"&gt;Record&lt;/a&gt; streams to disk in fMP4 or MPEG-TS format&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/playback"&gt;Playback&lt;/a&gt; recorded streams&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/authentication"&gt;Authenticate&lt;/a&gt; users with internal, HTTP or JWT authentication&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/forward"&gt;Forward&lt;/a&gt; streams to other servers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/proxy"&gt;Proxy&lt;/a&gt; requests to other servers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/control-api"&gt;Control&lt;/a&gt; the server through the Control API&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/metrics"&gt;Extract metrics&lt;/a&gt; from the server in a Prometheus-compatible format&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/performance"&gt;Monitor performance&lt;/a&gt; to investigate CPU and RAM consumption&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediamtx.org/docs/usage/hooks"&gt;Run hooks&lt;/a&gt; (external commands) when clients connect, disconnect, read or publish streams&lt;/li&gt; 
 &lt;li&gt;Compatible with Linux, Windows and macOS, does not require any dependency or interpreter, it's a single executable&lt;/li&gt; 
 &lt;li&gt;...and many &lt;a href="https://mediamtx.org/docs/kickoff/introduction"&gt;others&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>gin-gonic/gin</title>
      <link>https://github.com/gin-gonic/gin</link>
      <description>&lt;p&gt;Gin is a high-performance HTTP web framework written in Go. It provides a Martini-like API but with significantly better performance—up to 40 times faster—thanks to httprouter. Gin is designed for building REST APIs, web applications, and microservices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gin Web Framework&lt;/h1&gt; 
&lt;img align="right" width="159px" src="https://raw.githubusercontent.com/gin-gonic/logo/master/color.png" /&gt; 
&lt;p&gt;&lt;a href="https://github.com/gin-gonic/gin/actions/workflows/gin.yml"&gt;&lt;img src="https://github.com/gin-gonic/gin/actions/workflows/gin.yml/badge.svg?branch=master" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/gin-gonic/gin"&gt;&lt;img src="https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/gin-gonic/gin"&gt;&lt;img src="https://goreportcard.com/badge/github.com/gin-gonic/gin" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/gin-gonic/gin?tab=doc"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/gin-gonic/gin?status.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://sourcegraph.com/github.com/gin-gonic/gin?badge"&gt;&lt;img src="https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg?sanitize=true" alt="Sourcegraph" /&gt;&lt;/a&gt; &lt;a href="https://www.codetriage.com/gin-gonic/gin"&gt;&lt;img src="https://www.codetriage.com/gin-gonic/gin/badges/users.svg?sanitize=true" alt="Open Source Helpers" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gin-gonic/gin/releases"&gt;&lt;img src="https://img.shields.io/github/release/gin-gonic/gin.svg?style=flat-square" alt="Release" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📰 &lt;a href="https://gin-gonic.com/en/blog/news/gin-1-11-0-release-announcement/"&gt;Announcing Gin 1.11.0!&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Read about the latest features and improvements in Gin 1.11.0 on our official blog.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Gin is a high-performance HTTP web framework written in &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt;. It provides a Martini-like API but with significantly better performance—up to 40 times faster—thanks to &lt;a href="https://github.com/julienschmidt/httprouter"&gt;httprouter&lt;/a&gt;. Gin is designed for building REST APIs, web applications, and microservices where speed and developer productivity are essential.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Why choose Gin?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Gin combines the simplicity of Express.js-style routing with Go's performance characteristics, making it ideal for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Building high-throughput REST APIs&lt;/li&gt; 
 &lt;li&gt;Developing microservices that need to handle many concurrent requests&lt;/li&gt; 
 &lt;li&gt;Creating web applications that require fast response times&lt;/li&gt; 
 &lt;li&gt;Prototyping web services quickly with minimal boilerplate&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Gin's key features:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Zero allocation router&lt;/strong&gt; - Extremely memory-efficient routing with no heap allocations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt; - Benchmarks show superior speed compared to other Go web frameworks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Middleware support&lt;/strong&gt; - Extensible middleware system for authentication, logging, CORS, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Crash-free&lt;/strong&gt; - Built-in recovery middleware prevents panics from crashing your server&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;JSON validation&lt;/strong&gt; - Automatic request/response JSON binding and validation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Route grouping&lt;/strong&gt; - Organize related routes and apply common middleware&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Error management&lt;/strong&gt; - Centralized error handling and logging&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built-in rendering&lt;/strong&gt; - Support for JSON, XML, HTML templates, and more&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt; - Large ecosystem of community middleware and plugins&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Go version&lt;/strong&gt;: Gin requires &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; version &lt;a href="https://go.dev/doc/devel/release#go1.23.0"&gt;1.23&lt;/a&gt; or above&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Basic Go knowledge&lt;/strong&gt;: Familiarity with Go syntax and package management is helpful&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;With &lt;a href="https://go.dev/wiki/Modules#how-to-use-modules"&gt;Go's module support&lt;/a&gt;, simply import Gin in your code and Go will automatically fetch it during build:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/gin-gonic/gin"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Your First Gin Application&lt;/h3&gt; 
&lt;p&gt;Here's a complete example that demonstrates Gin's simplicity:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
  "net/http"

  "github.com/gin-gonic/gin"
)

func main() {
  // Create a Gin router with default middleware (logger and recovery)
  r := gin.Default()
  
  // Define a simple GET endpoint
  r.GET("/ping", func(c *gin.Context) {
    // Return JSON response
    c.JSON(http.StatusOK, gin.H{
      "message": "pong",
    })
  })
  
  // Start server on port 8080 (default)
  // Server will listen on 0.0.0.0:8080 (localhost:8080 on Windows)
  r.Run()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Running the application:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Save the code above as &lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the application:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open your browser and visit &lt;a href="http://localhost:8080/ping"&gt;&lt;code&gt;http://localhost:8080/ping&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You should see: &lt;code&gt;{"message":"pong"}&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;What this example demonstrates:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Creating a Gin router with default middleware&lt;/li&gt; 
 &lt;li&gt;Defining HTTP endpoints with simple handler functions&lt;/li&gt; 
 &lt;li&gt;Returning JSON responses&lt;/li&gt; 
 &lt;li&gt;Starting an HTTP server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Next Steps&lt;/h3&gt; 
&lt;p&gt;After running your first Gin application, explore these resources to learn more:&lt;/p&gt; 
&lt;h4&gt;📚 Learning Resources&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/gin-gonic/gin/master/docs/doc.md"&gt;Gin Quick Start Guide&lt;/a&gt;&lt;/strong&gt; - Comprehensive tutorial with API examples and build configurations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/gin-gonic/examples"&gt;Example Repository&lt;/a&gt;&lt;/strong&gt; - Ready-to-run examples demonstrating various Gin use cases: 
  &lt;ul&gt; 
   &lt;li&gt;REST API development&lt;/li&gt; 
   &lt;li&gt;Authentication &amp;amp; middleware&lt;/li&gt; 
   &lt;li&gt;File uploads and downloads&lt;/li&gt; 
   &lt;li&gt;WebSocket connections&lt;/li&gt; 
   &lt;li&gt;Template rendering&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;h3&gt;API Reference&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://pkg.go.dev/github.com/gin-gonic/gin"&gt;Go.dev API Documentation&lt;/a&gt;&lt;/strong&gt; - Complete API reference with examples&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;User Guides&lt;/h3&gt; 
&lt;p&gt;The comprehensive documentation is available on &lt;a href="https://gin-gonic.com"&gt;gin-gonic.com&lt;/a&gt; in multiple languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://gin-gonic.com/en/docs/"&gt;English&lt;/a&gt; | &lt;a href="https://gin-gonic.com/zh-cn/docs/"&gt;简体中文&lt;/a&gt; | &lt;a href="https://gin-gonic.com/zh-tw/docs/"&gt;繁體中文&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gin-gonic.com/ja/docs/"&gt;日本語&lt;/a&gt; | &lt;a href="https://gin-gonic.com/ko-kr/docs/"&gt;한국어&lt;/a&gt; | &lt;a href="https://gin-gonic.com/es/docs/"&gt;Español&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gin-gonic.com/tr/docs/"&gt;Turkish&lt;/a&gt; | &lt;a href="https://gin-gonic.com/fa/docs/"&gt;Persian&lt;/a&gt; | &lt;a href="https://gin-gonic.com/pt/docs/"&gt;Português&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gin-gonic.com/ru/docs/"&gt;Russian&lt;/a&gt; | &lt;a href="https://gin-gonic.com/id/docs/"&gt;Indonesian&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Official Tutorials&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://go.dev/doc/tutorial/web-service-gin"&gt;Go.dev Tutorial: Developing a RESTful API with Go and Gin&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚡ Performance Benchmarks&lt;/h2&gt; 
&lt;p&gt;Gin demonstrates exceptional performance compared to other Go web frameworks. It uses a custom version of &lt;a href="https://github.com/julienschmidt/httprouter"&gt;HttpRouter&lt;/a&gt; for maximum efficiency. &lt;a href="https://raw.githubusercontent.com/gin-gonic/gin/master/BENCHMARKS.md"&gt;View detailed benchmarks →&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Gin vs. Other Go Frameworks&lt;/strong&gt; (GitHub API routing benchmark):&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Benchmark name&lt;/th&gt; 
   &lt;th align="right"&gt;(1)&lt;/th&gt; 
   &lt;th align="right"&gt;(2)&lt;/th&gt; 
   &lt;th align="right"&gt;(3)&lt;/th&gt; 
   &lt;th align="right"&gt;(4)&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkGin_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;&lt;strong&gt;43550&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="right"&gt;&lt;strong&gt;27364 ns/op&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="right"&gt;&lt;strong&gt;0 B/op&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align="right"&gt;&lt;strong&gt;0 allocs/op&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkAce_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;40543&lt;/td&gt; 
   &lt;td align="right"&gt;29670 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkAero_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;57632&lt;/td&gt; 
   &lt;td align="right"&gt;20648 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkBear_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;9234&lt;/td&gt; 
   &lt;td align="right"&gt;216179 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;86448 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;943 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkBeego_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;7407&lt;/td&gt; 
   &lt;td align="right"&gt;243496 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;71456 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;609 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkBone_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;420&lt;/td&gt; 
   &lt;td align="right"&gt;2922835 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;720160 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;8620 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkChi_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;7620&lt;/td&gt; 
   &lt;td align="right"&gt;238331 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;87696 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;609 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkDenco_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;18355&lt;/td&gt; 
   &lt;td align="right"&gt;64494 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;20224 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;167 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkEcho_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;31251&lt;/td&gt; 
   &lt;td align="right"&gt;38479 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkGocraftWeb_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;4117&lt;/td&gt; 
   &lt;td align="right"&gt;300062 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;131656 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;1686 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkGoji_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;3274&lt;/td&gt; 
   &lt;td align="right"&gt;416158 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;56112 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;334 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkGojiv2_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;1402&lt;/td&gt; 
   &lt;td align="right"&gt;870518 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;352720 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;4321 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkGoJsonRest_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;2976&lt;/td&gt; 
   &lt;td align="right"&gt;401507 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;134371 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;2737 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkGoRestful_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;410&lt;/td&gt; 
   &lt;td align="right"&gt;2913158 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;910144 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;2938 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkGorillaMux_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;346&lt;/td&gt; 
   &lt;td align="right"&gt;3384987 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;251650 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;1994 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkGowwwRouter_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;10000&lt;/td&gt; 
   &lt;td align="right"&gt;143025 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;72144 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;501 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkHttpRouter_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;55938&lt;/td&gt; 
   &lt;td align="right"&gt;21360 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkHttpTreeMux_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;10000&lt;/td&gt; 
   &lt;td align="right"&gt;153944 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;65856 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;671 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkKocha_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;10000&lt;/td&gt; 
   &lt;td align="right"&gt;106315 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;23304 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;843 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkLARS_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;47779&lt;/td&gt; 
   &lt;td align="right"&gt;25084 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;0 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkMacaron_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;3266&lt;/td&gt; 
   &lt;td align="right"&gt;371907 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;149409 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;1624 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkMartini_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;331&lt;/td&gt; 
   &lt;td align="right"&gt;3444706 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;226551 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;2325 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkPat_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;273&lt;/td&gt; 
   &lt;td align="right"&gt;4381818 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;1483152 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;26963 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkPossum_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;10000&lt;/td&gt; 
   &lt;td align="right"&gt;164367 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;84448 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;609 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkR2router_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;10000&lt;/td&gt; 
   &lt;td align="right"&gt;160220 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;77328 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;979 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkRivet_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;14625&lt;/td&gt; 
   &lt;td align="right"&gt;82453 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;16272 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;167 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkTango_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;6255&lt;/td&gt; 
   &lt;td align="right"&gt;279611 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;63826 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;1618 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkTigerTonic_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;2008&lt;/td&gt; 
   &lt;td align="right"&gt;687874 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;193856 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;4474 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkTraffic_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;355&lt;/td&gt; 
   &lt;td align="right"&gt;3478508 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;820744 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;14114 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BenchmarkVulcan_GithubAll&lt;/td&gt; 
   &lt;td align="right"&gt;6885&lt;/td&gt; 
   &lt;td align="right"&gt;193333 ns/op&lt;/td&gt; 
   &lt;td align="right"&gt;19894 B/op&lt;/td&gt; 
   &lt;td align="right"&gt;609 allocs/op&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;(1): Total Repetitions achieved in constant time, higher means more confident result&lt;/li&gt; 
 &lt;li&gt;(2): Single Repetition Duration (ns/op), lower is better&lt;/li&gt; 
 &lt;li&gt;(3): Heap Memory (B/op), lower is better&lt;/li&gt; 
 &lt;li&gt;(4): Average Allocations per Repetition (allocs/op), lower is better&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔌 Middleware Ecosystem&lt;/h2&gt; 
&lt;p&gt;Gin has a rich ecosystem of middleware for common web development needs. Explore community-contributed middleware:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/gin-contrib"&gt;gin-contrib&lt;/a&gt;&lt;/strong&gt; - Official middleware collection including:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Authentication (JWT, Basic Auth, Sessions)&lt;/li&gt; 
   &lt;li&gt;CORS, Rate limiting, Compression&lt;/li&gt; 
   &lt;li&gt;Logging, Metrics, Tracing&lt;/li&gt; 
   &lt;li&gt;Static file serving, Template engines&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/gin-gonic/contrib"&gt;gin-gonic/contrib&lt;/a&gt;&lt;/strong&gt; - Additional community middleware&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🏢 Production Usage&lt;/h2&gt; 
&lt;p&gt;Gin powers many high-traffic applications and services in production:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/appleboy/gorush"&gt;gorush&lt;/a&gt;&lt;/strong&gt; - High-performance push notification server&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/fnproject/fn"&gt;fnproject&lt;/a&gt;&lt;/strong&gt; - Container-native, serverless platform&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/photoprism/photoprism"&gt;photoprism&lt;/a&gt;&lt;/strong&gt; - AI-powered personal photo management&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/luraproject/lura"&gt;lura&lt;/a&gt;&lt;/strong&gt; - Ultra-performant API Gateway framework&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/thoas/picfit"&gt;picfit&lt;/a&gt;&lt;/strong&gt; - Real-time image processing server&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/distribworks/dkron"&gt;dkron&lt;/a&gt;&lt;/strong&gt; - Distributed job scheduling system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;p&gt;Gin is the work of hundreds of contributors from around the world. We welcome and appreciate your contributions!&lt;/p&gt; 
&lt;h3&gt;How to Contribute&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🐛 &lt;strong&gt;Report bugs&lt;/strong&gt; - Help us identify and fix issues&lt;/li&gt; 
 &lt;li&gt;💡 &lt;strong&gt;Suggest features&lt;/strong&gt; - Share your ideas for improvements&lt;/li&gt; 
 &lt;li&gt;📝 &lt;strong&gt;Improve documentation&lt;/strong&gt; - Help make our docs clearer&lt;/li&gt; 
 &lt;li&gt;🔧 &lt;strong&gt;Submit code&lt;/strong&gt; - Fix bugs or implement new features&lt;/li&gt; 
 &lt;li&gt;🧪 &lt;strong&gt;Write tests&lt;/strong&gt; - Improve our test coverage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Getting Started with Contributing&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check out our &lt;a href="https://raw.githubusercontent.com/gin-gonic/gin/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for detailed guidelines&lt;/li&gt; 
 &lt;li&gt;Join our community discussions and ask questions&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;All contributions are valued and help make Gin better for everyone!&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>helm/helm</title>
      <link>https://github.com/helm/helm</link>
      <description>&lt;p&gt;The Kubernetes Package Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Helm&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/helm/helm/actions?workflow=release"&gt;&lt;img src="https://github.com/helm/helm/workflows/release/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/helm.sh/helm/v4"&gt;&lt;img src="https://goreportcard.com/badge/helm.sh/helm/v4" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/helm.sh/helm/v4"&gt;&lt;img src="https://img.shields.io/static/v1?label=godoc&amp;amp;message=reference&amp;amp;color=blue" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/3131"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/3131/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/helm/helm"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/helm/helm/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://insights.linuxfoundation.org/project/helm"&gt;&lt;img src="https://insights.production.lfx.dev/api/badge/health-score?project=helm" alt="LFX Health Score" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Helm is a tool for managing Charts. Charts are packages of pre-configured Kubernetes resources.&lt;/p&gt; 
&lt;p&gt;Use Helm to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find and use &lt;a href="https://artifacthub.io/packages/search?kind=0"&gt;popular software packaged as Helm Charts&lt;/a&gt; to run in Kubernetes&lt;/li&gt; 
 &lt;li&gt;Share your own applications as Helm Charts&lt;/li&gt; 
 &lt;li&gt;Create reproducible builds of your Kubernetes applications&lt;/li&gt; 
 &lt;li&gt;Intelligently manage your Kubernetes manifest files&lt;/li&gt; 
 &lt;li&gt;Manage releases of Helm packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Helm in a Handbasket&lt;/h2&gt; 
&lt;p&gt;Helm is a tool that streamlines installing and managing Kubernetes applications. Think of it like apt/yum/homebrew for Kubernetes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Helm renders your templates and communicates with the Kubernetes API&lt;/li&gt; 
 &lt;li&gt;Helm runs on your laptop, CI/CD, or wherever you want it to run.&lt;/li&gt; 
 &lt;li&gt;Charts are Helm packages that contain at least two things: 
  &lt;ul&gt; 
   &lt;li&gt;A description of the package (&lt;code&gt;Chart.yaml&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;One or more templates, which contain Kubernetes manifest files&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Charts can be stored on disk, or fetched from remote chart repositories (like Debian or RedHat packages)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Helm Development and Stable Versions&lt;/h2&gt; 
&lt;p&gt;Helm v4 is currently under development on the &lt;code&gt;main&lt;/code&gt; branch. This is unstable and the APIs within the Go SDK and at the command line are changing. Helm v3 (current stable) is maintained on the &lt;code&gt;dev-v3&lt;/code&gt; branch. APIs there follow semantic versioning.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Binary downloads of the Helm client can be found on &lt;a href="https://github.com/helm/helm/releases/latest"&gt;the Releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unpack the &lt;code&gt;helm&lt;/code&gt; binary and add it to your PATH and you are good to go!&lt;/p&gt; 
&lt;p&gt;If you want to use a package manager:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; users can use &lt;code&gt;brew install helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; users can use &lt;code&gt;choco install kubernetes-helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/"&gt;Winget&lt;/a&gt; users can use &lt;code&gt;winget install Helm.Helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://scoop.sh/"&gt;Scoop&lt;/a&gt; users can use &lt;code&gt;scoop install helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://snapcraft.io/"&gt;Snapcraft&lt;/a&gt; users can use &lt;code&gt;snap install helm --classic&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flox.dev"&gt;Flox&lt;/a&gt; users can use &lt;code&gt;flox install kubernetes-helm&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To rapidly get Helm up and running, start with the &lt;a href="https://helm.sh/docs/intro/quickstart/"&gt;Quick Start Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://helm.sh/docs/intro/install/"&gt;installation guide&lt;/a&gt; for more options, including installing pre-releases.&lt;/p&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;p&gt;Get started with the &lt;a href="https://helm.sh/docs/intro/quickstart/"&gt;Quick Start guide&lt;/a&gt; or plunge into the &lt;a href="https://helm.sh/docs"&gt;complete documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/helm/helm/milestones"&gt;Helm roadmap uses GitHub milestones&lt;/a&gt; to track the progress of the project.&lt;/p&gt; 
&lt;p&gt;The development of Helm v4 is currently happening on the &lt;code&gt;main&lt;/code&gt; branch while the development of Helm v3, the stable branch, is happening on the &lt;code&gt;dev-v3&lt;/code&gt; branch. Changes should be made to the &lt;code&gt;main&lt;/code&gt; branch prior to being added to the &lt;code&gt;dev-v3&lt;/code&gt; branch so that all changes are carried along to Helm v4.&lt;/p&gt; 
&lt;h2&gt;Community, discussion, contribution, and support&lt;/h2&gt; 
&lt;p&gt;You can reach the Helm community and developers via the following channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://kubernetes.slack.com"&gt;Kubernetes Slack&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/helm-users"&gt;#helm-users&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/helm-dev"&gt;#helm-dev&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/charts"&gt;#charts&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mailing List: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://lists.cncf.io/g/cncf-helm"&gt;Helm Mailing List&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Developer Call: Thursdays at 9:30-10:00 Pacific (&lt;a href="https://github.com/helm/community/raw/master/communication.md#meetings"&gt;meeting details&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;If you're interested in contributing, please refer to the &lt;a href="https://raw.githubusercontent.com/helm/helm/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; &lt;strong&gt;before submitting a pull request&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;Participation in the Helm community is governed by the &lt;a href="https://raw.githubusercontent.com/helm/helm/main/code-of-conduct.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>containers/podman</title>
      <link>https://github.com/containers/podman</link>
      <description>&lt;p&gt;Podman: A tool for managing OCI containers and pods.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/containers/common/main/logos/podman-logo-full-vert.png" alt="PODMAN logo" /&gt;&lt;/p&gt; 
&lt;h1&gt;Podman: A tool for managing OCI containers and pods&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" alt="License" /&gt; &lt;img src="https://img.shields.io/github/v/release/containers/podman" alt="GitHub release (latest SemVer)" /&gt; &lt;a href="https://goreportcard.com/report/github.com/containers/libpod"&gt;&lt;img src="https://goreportcard.com/badge/github.com/containers/libpod" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/10499"&gt;&lt;img src="https://www.bestpractices.dev/projects/10499/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://insights.linuxfoundation.org/project/containers-podman"&gt;&lt;img src="https://insights.linuxfoundation.org/api/badge/health-score?project=containers-podman" alt="LFX Health Score" /&gt;&lt;/a&gt; &lt;a href="https://insights.linuxfoundation.org/project/containers-podman"&gt;&lt;img src="https://insights.linuxfoundation.org/api/badge/contributors?project=containers-podman" alt="LFX Contributors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Podman (the POD MANager) is a tool for managing containers and images, volumes mounted into those containers, and pods made from groups of containers. Podman runs containers on Linux, but can also be used on Mac and Windows systems using a Podman-managed virtual machine. Podman is based on libpod, a library for container lifecycle management that is also contained in this repository. The libpod library provides APIs for managing containers, pods, container images, and volumes.&lt;/p&gt; 
&lt;p&gt;Podman releases a new major or minor release 4 times a year, during the second week of February, May, August, and November. Patch releases are more frequent and may occur at any time to get bugfixes out to users. All releases are PGP signed. Public keys of members of the team approved to make releases are located &lt;a href="https://github.com/containers/release-keys/tree/main/podman"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Continuous Integration: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://cirrus-ci.com/github/containers/podman/main"&gt;&lt;img src="https://api.cirrus-ci.com/github/containers/podman.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://godoc.org/github.com/containers/podman/libpod"&gt;GoDoc: &lt;img src="https://godoc.org/github.com/containers/podman/libpod?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/containers/podman/main/DOWNLOADS.md"&gt;Downloads&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview and scope&lt;/h2&gt; 
&lt;p&gt;At a high level, the scope of Podman and libpod is the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for multiple container image formats, including OCI and Docker images.&lt;/li&gt; 
 &lt;li&gt;Full management of those images, including pulling from various sources (including trust and verification), creating (built via Containerfile or Dockerfile or committed from a container), and pushing to registries and other storage backends.&lt;/li&gt; 
 &lt;li&gt;Full management of container lifecycle, including creation (both from an image and from an exploded root filesystem), running, checkpointing and restoring (via CRIU), and removal.&lt;/li&gt; 
 &lt;li&gt;Full management of container networking, using Netavark.&lt;/li&gt; 
 &lt;li&gt;Support for pods, groups of containers that share resources and are managed together.&lt;/li&gt; 
 &lt;li&gt;Support for running containers and pods without root or other elevated privileges.&lt;/li&gt; 
 &lt;li&gt;Resource isolation of containers and pods.&lt;/li&gt; 
 &lt;li&gt;Support for a Docker-compatible CLI interface, which can both run containers locally and on remote systems.&lt;/li&gt; 
 &lt;li&gt;No manager daemon, for improved security and lower resource utilization at idle.&lt;/li&gt; 
 &lt;li&gt;Support for a REST API providing both a Docker-compatible interface and an improved interface exposing advanced Podman functionality.&lt;/li&gt; 
 &lt;li&gt;Support for running on Windows and Mac via virtual machines run by &lt;code&gt;podman machine&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The future of Podman feature development can be found in its &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/containers/podman/main/ROADMAP.md"&gt;roadmap&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Communications&lt;/h2&gt; 
&lt;p&gt;If you think you've identified a security issue in the project, please &lt;em&gt;DO NOT&lt;/em&gt; report the issue publicly via the GitHub issue tracker, mailing list, or IRC. Instead, send an email with as many details as possible to &lt;code&gt;security@lists.podman.io&lt;/code&gt;. This is a private mailing list for the core maintainers.&lt;/p&gt; 
&lt;p&gt;For general questions and discussion, please use Podman's &lt;a href="https://podman.io/community/#slack-irc-matrix-and-discord"&gt;channels&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For discussions around issues/bugs and features, you can use the GitHub &lt;a href="https://github.com/containers/podman/issues"&gt;issues&lt;/a&gt; and &lt;a href="https://github.com/containers/podman/pulls"&gt;PRs&lt;/a&gt; tracking system.&lt;/p&gt; 
&lt;p&gt;There is also a &lt;a href="https://lists.podman.io/archives/"&gt;mailing list&lt;/a&gt; at &lt;code&gt;lists.podman.io&lt;/code&gt;. You can subscribe by sending a message to &lt;code&gt;podman-join@lists.podman.io&lt;/code&gt; with the subject &lt;code&gt;subscribe&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Rootless&lt;/h2&gt; 
&lt;p&gt;Podman can be easily run as a normal user, without requiring a setuid binary. When run without root, Podman containers use user namespaces to set root in the container to the user running Podman. Rootless Podman runs locked-down containers with no privileges that the user running the container does not have. Some of these restrictions can be lifted (via &lt;code&gt;--privileged&lt;/code&gt;, for example), but rootless containers will never have more privileges than the user that launched them. If you run Podman as your user and mount in &lt;code&gt;/etc/passwd&lt;/code&gt; from the host, you still won't be able to change it, since your user doesn't have permission to do so.&lt;/p&gt; 
&lt;p&gt;Almost all normal Podman functionality is available, though there are some &lt;a href="https://github.com/containers/podman/raw/main/rootless.md"&gt;shortcomings&lt;/a&gt;. Any recent Podman release should be able to run rootless without any additional configuration, though your operating system may require some additional configuration detailed in the &lt;a href="https://podman.io/getting-started/installation"&gt;install guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A little configuration by an administrator is required before rootless Podman can be used, the necessary setup is documented &lt;a href="https://github.com/containers/podman/raw/main/docs/tutorials/rootless_tutorial.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Podman Desktop&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://podman-desktop.io/"&gt;Podman Desktop&lt;/a&gt; provides a local development environment for Podman and Kubernetes on Linux, Windows, and Mac machines. It is a full-featured desktop UI frontend for Podman which uses the &lt;code&gt;podman machine&lt;/code&gt; backend on non-Linux operating systems to run containers. It supports full container lifecycle management (building, pulling, and pushing images, creating and managing containers, creating and managing pods, and working with Kubernetes YAML). The project develops on &lt;a href="https://github.com/containers/podman-desktop"&gt;GitHub&lt;/a&gt; and contributions are welcome.&lt;/p&gt; 
&lt;h2&gt;Out of scope&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Specialized signing and pushing of images to various storage backends. See &lt;a href="https://github.com/containers/skopeo/"&gt;Skopeo&lt;/a&gt; for those tasks.&lt;/li&gt; 
 &lt;li&gt;Support for the Kubernetes CRI interface for container management. The &lt;a href="https://github.com/cri-o/cri-o"&gt;CRI-O&lt;/a&gt; daemon specializes in that.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;OCI Projects Plans&lt;/h2&gt; 
&lt;p&gt;Podman uses OCI projects and best of breed libraries for different aspects:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Runtime: We use the &lt;a href="https://github.com/opencontainers/runtime-tools"&gt;OCI runtime tools&lt;/a&gt; to generate OCI runtime configurations that can be used with any OCI-compliant runtime, like &lt;a href="https://github.com/containers/crun/"&gt;crun&lt;/a&gt; and &lt;a href="https://github.com/opencontainers/runc/"&gt;runc&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Images: Image management uses the &lt;a href="https://github.com/containers/image"&gt;containers/image&lt;/a&gt; library.&lt;/li&gt; 
 &lt;li&gt;Storage: Container and image storage is managed by &lt;a href="https://github.com/containers/storage"&gt;containers/storage&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Networking: Networking support through use of &lt;a href="https://github.com/containers/netavark"&gt;Netavark&lt;/a&gt; and &lt;a href="https://github.com/containers/aardvark-dns"&gt;Aardvark&lt;/a&gt;. Rootless networking is handled via &lt;a href="https://passt.top/passt"&gt;pasta&lt;/a&gt; or &lt;a href="https://github.com/rootless-containers/slirp4netns"&gt;slirp4netns&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Builds: Builds are supported via &lt;a href="https://github.com/containers/buildah"&gt;Buildah&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Conmon: &lt;a href="https://github.com/containers/conmon"&gt;Conmon&lt;/a&gt; is a tool for monitoring OCI runtimes, used by both Podman and CRI-O.&lt;/li&gt; 
 &lt;li&gt;Seccomp: A unified &lt;a href="https://github.com/containers/common/raw/main/pkg/seccomp/seccomp.json"&gt;Seccomp&lt;/a&gt; policy for Podman, Buildah, and CRI-O.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Podman Information for Developers&lt;/h2&gt; 
&lt;p&gt;For blogs, release announcements and more, please checkout the &lt;a href="https://podman.io"&gt;podman.io&lt;/a&gt; website!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/containers/podman/main/install.md"&gt;Installation notes&lt;/a&gt;&lt;/strong&gt; Information on how to install Podman in your environment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/containers/common/raw/main/pkg/hooks/README.md"&gt;OCI Hooks Support&lt;/a&gt;&lt;/strong&gt; Information on how Podman configures &lt;a href="https://github.com/opencontainers/runtime-spec/raw/v1.0.2/config.md#posix-platform-hooks"&gt;OCI Hooks&lt;/a&gt; to run when launching a container.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.podman.io/en/latest/_static/api.html"&gt;Podman API&lt;/a&gt;&lt;/strong&gt; Documentation on the Podman REST API.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://podman.readthedocs.io/en/latest/Commands.html"&gt;Podman Commands&lt;/a&gt;&lt;/strong&gt; A list of the Podman commands with links to their man pages and in many cases videos showing the commands in use.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/containers/image_build/raw/main/podman/README.md"&gt;Podman Container Images&lt;/a&gt;&lt;/strong&gt; Information on the Podman Container Images found on &lt;a href="https://quay.io/podman/stable"&gt;quay.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/containers/podman/main/troubleshooting.md"&gt;Podman Troubleshooting Guide&lt;/a&gt;&lt;/strong&gt; A list of common issues and solutions for Podman.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/containers/podman/main/transfer.md"&gt;Podman Usage Transfer&lt;/a&gt;&lt;/strong&gt; Useful information for ops and dev transfer as it relates to infrastructure that utilizes Podman. This page includes tables showing Docker commands and their Podman equivalent commands.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/containers/podman/main/docs/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/strong&gt; Tutorials on using Podman.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/containers/podman/raw/main/docs/tutorials/remote_client.md"&gt;Remote Client&lt;/a&gt;&lt;/strong&gt; A brief how-to on using the Podman remote client.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/containers/podman/raw/main/docs/tutorials/rootless_tutorial.md"&gt;Basic Setup and Use of Podman in a Rootless environment&lt;/a&gt;&lt;/strong&gt; A tutorial showing the setup and configuration necessary to run Rootless Podman.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/containers/podman/main/RELEASE_NOTES.md"&gt;Release Notes&lt;/a&gt;&lt;/strong&gt; Release notes for recent Podman versions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/containers/podman/main/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/strong&gt; Information about contributing to this project.&lt;/p&gt; 
&lt;h2&gt;Buildah and Podman relationship&lt;/h2&gt; 
&lt;p&gt;Buildah and Podman are two complementary open-source projects that are available on most Linux platforms and both projects reside at &lt;a href="https://github.com"&gt;GitHub.com&lt;/a&gt; with Buildah &lt;a href="https://github.com/containers/buildah"&gt;here&lt;/a&gt; and Podman &lt;a href="https://github.com/containers/podman"&gt;here&lt;/a&gt;. Both, Buildah and Podman are command line tools that work on Open Container Initiative (OCI) images and containers. The two projects differentiate in their specialization.&lt;/p&gt; 
&lt;p&gt;Buildah specializes in building OCI images. Buildah's commands replicate all of the commands that are found in a Dockerfile. This allows building images with and without Dockerfiles while not requiring any root privileges. Buildah’s ultimate goal is to provide a lower-level coreutils interface to build images. The flexibility of building images without Dockerfiles allows for the integration of other scripting languages into the build process. Buildah follows a simple fork-exec model and does not run as a daemon but it is based on a comprehensive API in golang, which can be vendored into other tools.&lt;/p&gt; 
&lt;p&gt;Podman specializes in all of the commands and functions that help you to maintain and modify OCI images, such as pulling and tagging. It also allows you to create, run, and maintain those containers created from those images. For building container images via Dockerfiles, Podman uses Buildah's golang API and can be installed independently from Buildah.&lt;/p&gt; 
&lt;p&gt;A major difference between Podman and Buildah is their concept of a container. Podman allows users to create "traditional containers" where the intent of these containers is to be long lived. While Buildah containers are really just created to allow content to be added back to the container image. An easy way to think of it is the &lt;code&gt;buildah run&lt;/code&gt; command emulates the RUN command in a Dockerfile while the &lt;code&gt;podman run&lt;/code&gt; command emulates the &lt;code&gt;docker run&lt;/code&gt; command in functionality. Because of this and their underlying storage differences, you can not see Podman containers from within Buildah or vice versa.&lt;/p&gt; 
&lt;p&gt;In short, Buildah is an efficient way to create OCI images while Podman allows you to manage and maintain those images and containers in a production environment using familiar container cli commands. For more details, see the &lt;a href="https://github.com/containers/buildah/tree/main/docs/containertools"&gt;Container Tools Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Podman Hello&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;$ podman run quay.io/podman/hello
Trying to pull quay.io/podman/hello:latest...
Getting image source signatures
Copying blob a6b3126f3807 done
Copying config 25c667d086 done
Writing manifest to image destination
Storing signatures
!... Hello Podman World ...!

         .--"--.
       / -     - \
      / (O)   (O) \
   ~~~| -=(,Y,)=- |
    .---. /`  \   |~~
 ~/  o  o \~~~~.----. ~~
  | =(X)= |~  / (O (O) \
   ~~~~~~~  ~| =(Y_)=-  |
  ~~~~    ~~~|   U      |~~

Project:   https://github.com/containers/podman
Website:   https://podman.io
Documents: https://docs.podman.io
Twitter:   @Podman_io
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>tidwall/gjson</title>
      <link>https://github.com/tidwall/gjson</link>
      <description>&lt;p&gt;Get JSON values quickly - JSON parser for Go&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="/.github/images/logo-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="/.github/images/logo-light.png" /&gt; 
  &lt;img src="https://raw.githubusercontent.com/tidwall/gjson/master/.github/images/logo-light.png" width="240" alt="GJSON" /&gt; 
 &lt;/picture&gt; &lt;br /&gt; &lt;a href="https://godoc.org/github.com/tidwall/gjson"&gt;&lt;img src="https://img.shields.io/badge/api-reference-blue.svg?style=flat-square" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://tidwall.com/gjson-play"&gt;&lt;img src="https://img.shields.io/badge/%F0%9F%8F%90-playground-9900cc.svg?style=flat-square" alt="GJSON Playground" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/SYNTAX.md"&gt;&lt;img src="https://img.shields.io/badge/{}-syntax-33aa33.svg?style=flat-square" alt="GJSON Syntax" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;get json values quickly&lt;/p&gt; 
&lt;p&gt;GJSON is a Go package that provides a &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/#performance"&gt;fast&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/#get-a-value"&gt;simple&lt;/a&gt; way to get values from a json document. It has features such as &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/#get-a-value"&gt;one line retrieval&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/#path-syntax"&gt;dot notation paths&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/#iterate-through-an-object-or-array"&gt;iteration&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/#json-lines"&gt;parsing json lines&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Also check out &lt;a href="https://github.com/tidwall/sjson"&gt;SJSON&lt;/a&gt; for modifying json, and the &lt;a href="https://github.com/tidwall/jj"&gt;JJ&lt;/a&gt; command line tool.&lt;/p&gt; 
&lt;p&gt;This README is a quick overview of how to use GJSON, for more information check out &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/SYNTAX.md"&gt;GJSON Syntax&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;GJSON is also available for &lt;a href="https://github.com/volans-/gjson-py"&gt;Python&lt;/a&gt; and &lt;a href="https://github.com/tidwall/gjson.rs"&gt;Rust&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;To start using GJSON, install Go and run &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ go get -u github.com/tidwall/gjson
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will retrieve the library.&lt;/p&gt; 
&lt;h2&gt;Get a value&lt;/h2&gt; 
&lt;p&gt;Get searches json for the specified path. A path is in dot syntax, such as "name.last" or "age". When the value is found it's returned immediately.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import "github.com/tidwall/gjson"

const json = `{"name":{"first":"Janet","last":"Prichard"},"age":47}`

func main() {
	value := gjson.Get(json, "name.last")
	println(value.String())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will print:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Prichard
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;There's also &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/#working-with-bytes"&gt;GetBytes&lt;/a&gt; for working with JSON byte slices.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Path Syntax&lt;/h2&gt; 
&lt;p&gt;Below is a quick overview of the path syntax, for more complete information please check out &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/SYNTAX.md"&gt;GJSON Syntax&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A path is a series of keys separated by a dot. A key may contain special wildcard characters '*' and '?'. To access an array value use the index as the key. To get the number of elements in an array or to access a child path, use the '#' character. The dot and wildcard characters can be escaped with '\'.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": {"first": "Tom", "last": "Anderson"},
  "age":37,
  "children": ["Sara","Alex","Jack"],
  "fav.movie": "Deer Hunter",
  "friends": [
    {"first": "Dale", "last": "Murphy", "age": 44, "nets": ["ig", "fb", "tw"]},
    {"first": "Roger", "last": "Craig", "age": 68, "nets": ["fb", "tw"]},
    {"first": "Jane", "last": "Murphy", "age": 47, "nets": ["ig", "tw"]}
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;"name.last"          &amp;gt;&amp;gt; "Anderson"
"age"                &amp;gt;&amp;gt; 37
"children"           &amp;gt;&amp;gt; ["Sara","Alex","Jack"]
"children.#"         &amp;gt;&amp;gt; 3
"children.1"         &amp;gt;&amp;gt; "Alex"
"child*.2"           &amp;gt;&amp;gt; "Jack"
"c?ildren.0"         &amp;gt;&amp;gt; "Sara"
"fav\.movie"         &amp;gt;&amp;gt; "Deer Hunter"
"friends.#.first"    &amp;gt;&amp;gt; ["Dale","Roger","Jane"]
"friends.1.last"     &amp;gt;&amp;gt; "Craig"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also query an array for the first match by using &lt;code&gt;#(...)&lt;/code&gt;, or find all matches with &lt;code&gt;#(...)#&lt;/code&gt;. Queries support the &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; comparison operators and the simple pattern matching &lt;code&gt;%&lt;/code&gt; (like) and &lt;code&gt;!%&lt;/code&gt; (not like) operators.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;friends.#(last=="Murphy").first    &amp;gt;&amp;gt; "Dale"
friends.#(last=="Murphy")#.first   &amp;gt;&amp;gt; ["Dale","Jane"]
friends.#(age&amp;gt;45)#.last            &amp;gt;&amp;gt; ["Craig","Murphy"]
friends.#(first%"D*").last         &amp;gt;&amp;gt; "Murphy"
friends.#(first!%"D*").last        &amp;gt;&amp;gt; "Craig"
friends.#(nets.#(=="fb"))#.first   &amp;gt;&amp;gt; ["Dale","Roger"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Please note that prior to v1.3.0, queries used the &lt;code&gt;#[...]&lt;/code&gt; brackets. This was changed in v1.3.0 as to avoid confusion with the new &lt;a href="https://raw.githubusercontent.com/tidwall/gjson/master/SYNTAX.md#multipaths"&gt;multipath&lt;/a&gt; syntax. For backwards compatibility, &lt;code&gt;#[...]&lt;/code&gt; will continue to work until the next major release.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Result Type&lt;/h2&gt; 
&lt;p&gt;GJSON supports the json types &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;. Arrays and Objects are returned as their raw json types.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;Result&lt;/code&gt; type holds one of these:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;bool, for JSON booleans
float64, for JSON numbers
string, for JSON string literals
nil, for JSON null
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To directly access the value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result.Type           // can be String, Number, True, False, Null, or JSON
result.Str            // holds the string
result.Num            // holds the float64 number
result.Raw            // holds the raw json
result.Index          // index of raw value in original json, zero means index unknown
result.Indexes        // indexes of all the elements that match on a path containing the '#' query character.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are a variety of handy functions that work on a result:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result.Exists() bool
result.Value() interface{}
result.Int() int64
result.Uint() uint64
result.Float() float64
result.String() string
result.Bool() bool
result.Time() time.Time
result.Array() []gjson.Result
result.Map() map[string]gjson.Result
result.Get(path string) Result
result.ForEach(iterator func(key, value Result) bool)
result.Less(token Result, caseSensitive bool) bool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;result.Value()&lt;/code&gt; function returns an &lt;code&gt;interface{}&lt;/code&gt; which requires type assertion and is one of the following Go types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;boolean &amp;gt;&amp;gt; bool
number  &amp;gt;&amp;gt; float64
string  &amp;gt;&amp;gt; string
null    &amp;gt;&amp;gt; nil
array   &amp;gt;&amp;gt; []interface{}
object  &amp;gt;&amp;gt; map[string]interface{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;result.Array()&lt;/code&gt; function returns back an array of values. If the result represents a non-existent value, then an empty array will be returned. If the result is not a JSON array, the return value will be an array containing one result.&lt;/p&gt; 
&lt;h3&gt;64-bit integers&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;result.Int()&lt;/code&gt; and &lt;code&gt;result.Uint()&lt;/code&gt; calls are capable of reading all 64 bits, allowing for large JSON integers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result.Int() int64    // -9223372036854775808 to 9223372036854775807
result.Uint() uint64   // 0 to 18446744073709551615
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Modifiers and path chaining&lt;/h2&gt; 
&lt;p&gt;New in version 1.2 is support for modifier functions and path chaining.&lt;/p&gt; 
&lt;p&gt;A modifier is a path component that performs custom processing on the json.&lt;/p&gt; 
&lt;p&gt;Multiple paths can be "chained" together using the pipe character. This is useful for getting results from a modified query.&lt;/p&gt; 
&lt;p&gt;For example, using the built-in &lt;code&gt;@reverse&lt;/code&gt; modifier on the above json document, we'll get &lt;code&gt;children&lt;/code&gt; array and reverse the order:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"children|@reverse"           &amp;gt;&amp;gt; ["Jack","Alex","Sara"]
"children|@reverse|0"         &amp;gt;&amp;gt; "Jack"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are currently the following built-in modifiers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;@reverse&lt;/code&gt;: Reverse an array or the members of an object.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@ugly&lt;/code&gt;: Remove all whitespace from a json document.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@pretty&lt;/code&gt;: Make the json document more human readable.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@this&lt;/code&gt;: Returns the current element. It can be used to retrieve the root element.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@valid&lt;/code&gt;: Ensure the json document is valid.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@flatten&lt;/code&gt;: Flattens an array.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@join&lt;/code&gt;: Joins multiple objects into a single object.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@keys&lt;/code&gt;: Returns an array of keys for an object.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@values&lt;/code&gt;: Returns an array of values for an object.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@tostr&lt;/code&gt;: Converts json to a string. Wraps a json string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@fromstr&lt;/code&gt;: Converts a string from json. Unwraps a json string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@group&lt;/code&gt;: Groups arrays of objects. See &lt;a href="https://github.com/tidwall/gjson/commit/e4fc67c92aeebf2089fabc7872f010e340d105db"&gt;e4fc67c&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;@dig&lt;/code&gt;: Search for a value without providing its entire path. See &lt;a href="https://github.com/tidwall/gjson/commit/e8e87f2a00dc41f3aba5631094e21f59a8cf8cbf"&gt;e8e87f2&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Modifier arguments&lt;/h3&gt; 
&lt;p&gt;A modifier may accept an optional argument. The argument can be a valid JSON document or just characters.&lt;/p&gt; 
&lt;p&gt;For example, the &lt;code&gt;@pretty&lt;/code&gt; modifier takes a json object as its argument.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@pretty:{"sortKeys":true} 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which makes the json pretty and orders all of its keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "age":37,
  "children": ["Sara","Alex","Jack"],
  "fav.movie": "Deer Hunter",
  "friends": [
    {"age": 44, "first": "Dale", "last": "Murphy"},
    {"age": 68, "first": "Roger", "last": "Craig"},
    {"age": 47, "first": "Jane", "last": "Murphy"}
  ],
  "name": {"first": "Tom", "last": "Anderson"}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;The full list of &lt;code&gt;@pretty&lt;/code&gt; options are &lt;code&gt;sortKeys&lt;/code&gt;, &lt;code&gt;indent&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, and &lt;code&gt;width&lt;/code&gt;. Please see &lt;a href="https://github.com/tidwall/pretty#customized-output"&gt;Pretty Options&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Custom modifiers&lt;/h3&gt; 
&lt;p&gt;You can also add custom modifiers.&lt;/p&gt; 
&lt;p&gt;For example, here we create a modifier that makes the entire json document upper or lower case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;gjson.AddModifier("case", func(json, arg string) string {
  if arg == "upper" {
    return strings.ToUpper(json)
  }
  if arg == "lower" {
    return strings.ToLower(json)
  }
  return json
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;"children|@case:upper"           &amp;gt;&amp;gt; ["SARA","ALEX","JACK"]
"children|@case:lower|@reverse"  &amp;gt;&amp;gt; ["jack","alex","sara"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;JSON Lines&lt;/h2&gt; 
&lt;p&gt;There's support for &lt;a href="http://jsonlines.org/"&gt;JSON Lines&lt;/a&gt; using the &lt;code&gt;..&lt;/code&gt; prefix, which treats a multilined document as an array.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{"name": "Gilbert", "age": 61}
{"name": "Alexa", "age": 34}
{"name": "May", "age": 57}
{"name": "Deloise", "age": 44}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;..#                   &amp;gt;&amp;gt; 4
..1                   &amp;gt;&amp;gt; {"name": "Alexa", "age": 34}
..3                   &amp;gt;&amp;gt; {"name": "Deloise", "age": 44}
..#.name              &amp;gt;&amp;gt; ["Gilbert","Alexa","May","Deloise"]
..#(name="May").age   &amp;gt;&amp;gt; 57
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;ForEachLines&lt;/code&gt; function will iterate through JSON lines.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;gjson.ForEachLine(json, func(line gjson.Result) bool{
    println(line.String())
    return true
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Get nested array values&lt;/h2&gt; 
&lt;p&gt;Suppose you want all the last names from the following json:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "programmers": [
    {
      "firstName": "Janet", 
      "lastName": "McLaughlin", 
    }, {
      "firstName": "Elliotte", 
      "lastName": "Hunter", 
    }, {
      "firstName": "Jason", 
      "lastName": "Harold", 
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You would use the path "programmers.#.lastName" like such:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := gjson.Get(json, "programmers.#.lastName")
for _, name := range result.Array() {
	println(name.String())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also query an object inside an array:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;name := gjson.Get(json, `programmers.#(lastName="Hunter").firstName`)
println(name.String())  // prints "Elliotte"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Iterate through an object or array&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;ForEach&lt;/code&gt; function allows for quickly iterating through an object or array. The key and value are passed to the iterator function for objects. Only the value is passed for arrays. Returning &lt;code&gt;false&lt;/code&gt; from an iterator will stop iteration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := gjson.Get(json, "programmers")
result.ForEach(func(key, value gjson.Result) bool {
	println(value.String()) 
	return true // keep iterating
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Simple Parse and Get&lt;/h2&gt; 
&lt;p&gt;There's a &lt;code&gt;Parse(json)&lt;/code&gt; function that will do a simple parse, and &lt;code&gt;result.Get(path)&lt;/code&gt; that will search a result.&lt;/p&gt; 
&lt;p&gt;For example, all of these will return the same result:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;gjson.Parse(json).Get("name").Get("last")
gjson.Get(json, "name").Get("last")
gjson.Get(json, "name.last")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Check for the existence of a value&lt;/h2&gt; 
&lt;p&gt;Sometimes you just want to know if a value exists.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;value := gjson.Get(json, "name.last")
if !value.Exists() {
	println("no last name")
} else {
	println(value.String())
}

// Or as one step
if gjson.Get(json, "name.last").Exists() {
	println("has a last name")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Validate JSON&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;Get*&lt;/code&gt; and &lt;code&gt;Parse*&lt;/code&gt; functions expects that the json is well-formed. Bad json will not panic, but it may return back unexpected results.&lt;/p&gt; 
&lt;p&gt;If you are consuming JSON from an unpredictable source then you may want to validate prior to using GJSON.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;if !gjson.Valid(json) {
	return errors.New("invalid json")
}
value := gjson.Get(json, "name.last")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Unmarshal to a map&lt;/h2&gt; 
&lt;p&gt;To unmarshal to a &lt;code&gt;map[string]interface{}&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m, ok := gjson.Parse(json).Value().(map[string]interface{})
if !ok {
	// not a map
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Working with Bytes&lt;/h2&gt; 
&lt;p&gt;If your JSON is contained in a &lt;code&gt;[]byte&lt;/code&gt; slice, there's the &lt;a href="https://godoc.org/github.com/tidwall/gjson#GetBytes"&gt;GetBytes&lt;/a&gt; function. This is preferred over &lt;code&gt;Get(string(data), path)&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var json []byte = ...
result := gjson.GetBytes(json, path)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using the &lt;code&gt;gjson.GetBytes(json, path)&lt;/code&gt; function and you want to avoid converting &lt;code&gt;result.Raw&lt;/code&gt; to a &lt;code&gt;[]byte&lt;/code&gt;, then you can use this pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var json []byte = ...
result := gjson.GetBytes(json, path)
var raw []byte
if result.Index &amp;gt; 0 {
    raw = json[result.Index:result.Index+len(result.Raw)]
} else {
    raw = []byte(result.Raw)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a best-effort no allocation sub slice of the original json. This method utilizes the &lt;code&gt;result.Index&lt;/code&gt; field, which is the position of the raw data in the original json. It's possible that the value of &lt;code&gt;result.Index&lt;/code&gt; equals zero, in which case the &lt;code&gt;result.Raw&lt;/code&gt; is converted to a &lt;code&gt;[]byte&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;Benchmarks of GJSON alongside &lt;a href="https://golang.org/pkg/encoding/json/"&gt;encoding/json&lt;/a&gt;, &lt;a href="https://github.com/pquerna/ffjson"&gt;ffjson&lt;/a&gt;, &lt;a href="https://github.com/mailru/easyjson"&gt;EasyJSON&lt;/a&gt;, &lt;a href="https://github.com/buger/jsonparser"&gt;jsonparser&lt;/a&gt;, and &lt;a href="https://github.com/json-iterator/go"&gt;json-iterator&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;BenchmarkGJSONGet-10             17893731    202.1 ns/op      0 B/op     0 allocs/op
BenchmarkGJSONUnmarshalMap-10     1663548   2157 ns/op     1920 B/op    26 allocs/op
BenchmarkJSONUnmarshalMap-10       832236   4279 ns/op     2920 B/op    68 allocs/op
BenchmarkJSONUnmarshalStruct-10   1076475   3219 ns/op      920 B/op    12 allocs/op
BenchmarkJSONDecoder-10            585729   6126 ns/op     3845 B/op   160 allocs/op
BenchmarkFFJSONLexer-10           2508573   1391 ns/op      880 B/op     8 allocs/op
BenchmarkEasyJSONLexer-10         3000000    537.9 ns/op    501 B/op     5 allocs/op
BenchmarkJSONParserGet-10        13707510    263.9 ns/op     21 B/op     0 allocs/op
BenchmarkJSONIterator-10          3000000    561.2 ns/op    693 B/op    14 allocs/op
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;JSON document used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "widget": {
    "debug": "on",
    "window": {
      "title": "Sample Konfabulator Widget",
      "name": "main_window",
      "width": 500,
      "height": 500
    },
    "image": { 
      "src": "Images/Sun.png",
      "hOffset": 250,
      "vOffset": 250,
      "alignment": "center"
    },
    "text": {
      "data": "Click Here",
      "size": 36,
      "style": "bold",
      "vOffset": 100,
      "alignment": "center",
      "onMouseUp": "sun1.opacity = (sun1.opacity / 100) * 90;"
    }
  }
}    
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each operation was rotated through one of the following search paths:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;widget.window.name
widget.image.hOffset
widget.text.onMouseUp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;**&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;These benchmarks were run on a MacBook Pro M1 Max using Go 1.22 and can be found &lt;a href="https://github.com/tidwall/gjson-benchmarks"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hashicorp/terraform</title>
      <link>https://github.com/hashicorp/terraform</link>
      <description>&lt;p&gt;Terraform enables you to safely and predictably create, change, and improve infrastructure. It is a source-available tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Terraform&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href="https://developer.hashicorp.com/terraform"&gt;https://developer.hashicorp.com/terraform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Forums: &lt;a href="https://discuss.hashicorp.com/c/terraform-core"&gt;HashiCorp Discuss&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Documentation: &lt;a href="https://developer.hashicorp.com/terraform/docs"&gt;https://developer.hashicorp.com/terraform/docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tutorials: &lt;a href="https://developer.hashicorp.com/terraform/tutorials"&gt;HashiCorp's Learn Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Certification Exam: &lt;a href="https://www.hashicorp.com/certification/#hashicorp-certified-terraform-associate"&gt;HashiCorp Certified: Terraform Associate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;img alt="Terraform" src="https://www.datocms-assets.com/2885/1731373310-terraform_white.svg?sanitize=true" width="600px" /&gt; 
&lt;p&gt;Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.&lt;/p&gt; 
&lt;p&gt;The key features of Terraform are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt;: Infrastructure is described using a high-level configuration syntax. This allows a blueprint of your datacenter to be versioned and treated as you would any other code. Additionally, infrastructure can be shared and re-used.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Execution Plans&lt;/strong&gt;: Terraform has a "planning" step where it generates an execution plan. The execution plan shows what Terraform will do when you call apply. This lets you avoid any surprises when Terraform manipulates infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Graph&lt;/strong&gt;: Terraform builds a graph of all your resources, and parallelizes the creation and modification of any non-dependent resources. Because of this, Terraform builds infrastructure as efficiently as possible, and operators get insight into dependencies in their infrastructure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change Automation&lt;/strong&gt;: Complex changesets can be applied to your infrastructure with minimal human interaction. With the previously mentioned execution plan and resource graph, you know exactly what Terraform will change and in what order, avoiding many possible human errors.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information, refer to the &lt;a href="https://www.terraform.io/intro"&gt;What is Terraform?&lt;/a&gt; page on the Terraform website.&lt;/p&gt; 
&lt;h2&gt;Getting Started &amp;amp; Documentation&lt;/h2&gt; 
&lt;p&gt;Documentation is available on the &lt;a href="https://developer.hashicorp.com/terraform"&gt;Terraform website&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://developer.hashicorp.com/terraform/intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developer.hashicorp.com/terraform/docs"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you're new to Terraform and want to get started creating infrastructure, please check out our &lt;a href="https://learn.hashicorp.com/terraform#getting-started"&gt;Getting Started guides&lt;/a&gt; on HashiCorp's learning platform. There are also &lt;a href="https://learn.hashicorp.com/terraform#operations-and-development"&gt;additional guides&lt;/a&gt; to continue your learning.&lt;/p&gt; 
&lt;p&gt;Show off your Terraform knowledge by passing a certification exam. Visit the &lt;a href="https://www.hashicorp.com/certification/"&gt;certification page&lt;/a&gt; for information about exams and find &lt;a href="https://learn.hashicorp.com/terraform/certification/terraform-associate"&gt;study materials&lt;/a&gt; on HashiCorp's learning platform.&lt;/p&gt; 
&lt;h2&gt;Developing Terraform&lt;/h2&gt; 
&lt;p&gt;This repository contains only Terraform core, which includes the command line interface and the main graph engine. Providers are implemented as plugins, and Terraform can automatically download providers that are published on &lt;a href="https://registry.terraform.io"&gt;the Terraform Registry&lt;/a&gt;. HashiCorp develops some providers, and others are developed by other organizations. For more information, refer to &lt;a href="https://developer.hashicorp.com/terraform/plugin"&gt;Plugin development&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;To learn more about compiling Terraform and contributing suggested changes, refer to &lt;a href="https://raw.githubusercontent.com/hashicorp/terraform/main/.github/CONTRIBUTING.md"&gt;the contributing guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To learn more about how we handle bug reports, refer to the &lt;a href="https://raw.githubusercontent.com/hashicorp/terraform/main/BUGPROCESS.md"&gt;bug triage guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To learn how to contribute to the Terraform documentation, refer to the &lt;a href="https://github.com/hashicorp/web-unified-docs"&gt;Web Unified Docs repository&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/hashicorp/terraform/raw/main/LICENSE"&gt;Business Source License 1.1&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ethereum/go-ethereum</title>
      <link>https://github.com/ethereum/go-ethereum</link>
      <description>&lt;p&gt;Go implementation of the Ethereum protocol&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Go Ethereum&lt;/h2&gt; 
&lt;p&gt;Golang execution layer implementation of the Ethereum protocol.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/ethereum/go-ethereum?tab=doc"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/ethereum/go-ethereum" alt="API Reference" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/ethereum/go-ethereum"&gt;&lt;img src="https://goreportcard.com/badge/github.com/ethereum/go-ethereum" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://app.travis-ci.com/github/ethereum/go-ethereum"&gt;&lt;img src="https://app.travis-ci.com/ethereum/go-ethereum.svg?branch=master" alt="Travis" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/nthXNEv"&gt;&lt;img src="https://img.shields.io/badge/discord-join%20chat-blue.svg?sanitize=true" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://x.com/go_ethereum"&gt;&lt;img src="https://img.shields.io/twitter/follow/go_ethereum" alt="Twitter" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Automated builds are available for stable releases and the unstable master branch. Binary archives are published at &lt;a href="https://geth.ethereum.org/downloads/"&gt;https://geth.ethereum.org/downloads/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Building the source&lt;/h2&gt; 
&lt;p&gt;For prerequisites and detailed build instructions please read the &lt;a href="https://geth.ethereum.org/docs/getting-started/installing-geth"&gt;Installation Instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Building &lt;code&gt;geth&lt;/code&gt; requires both a Go (version 1.23 or later) and a C compiler. You can install them using your favourite package manager. Once the dependencies are installed, run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make geth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or, to build the full suite of utilities:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make all
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Executables&lt;/h2&gt; 
&lt;p&gt;The go-ethereum project comes with several wrappers/executables found in the &lt;code&gt;cmd&lt;/code&gt; directory.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;strong&gt;&lt;code&gt;geth&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. &lt;code&gt;geth --help&lt;/code&gt; and the &lt;a href="https://geth.ethereum.org/docs/fundamentals/command-line-options"&gt;CLI page&lt;/a&gt; for command line options.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;code&gt;clef&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Stand-alone signing tool, which can be used as a backend signer for &lt;code&gt;geth&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;code&gt;devp2p&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Utilities to interact with nodes on the networking layer, without running a full blockchain.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;code&gt;abigen&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Source code generator to convert Ethereum contract definitions into easy-to-use, compile-time type-safe Go packages. It operates on plain &lt;a href="https://docs.soliditylang.org/en/develop/abi-spec.html"&gt;Ethereum contract ABIs&lt;/a&gt; with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our &lt;a href="https://geth.ethereum.org/docs/developers/dapp-developer/native-bindings"&gt;Native DApps&lt;/a&gt; page for details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;code&gt;evm&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. &lt;code&gt;evm --code 60ff60ff --debug run&lt;/code&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;code&gt;rlpdump&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Developer utility tool to convert binary RLP (&lt;a href="https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp"&gt;Recursive Length Prefix&lt;/a&gt;) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. &lt;code&gt;rlpdump --hex CE0183FFFFFFC4C304050583616263&lt;/code&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Running &lt;code&gt;geth&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Going through all the possible command line flags is out of scope here (please consult our &lt;a href="https://geth.ethereum.org/docs/fundamentals/command-line-options"&gt;CLI Wiki page&lt;/a&gt;), but we've enumerated a few common parameter combos to get you up to speed quickly on how you can run your own &lt;code&gt;geth&lt;/code&gt; instance.&lt;/p&gt; 
&lt;h3&gt;Hardware Requirements&lt;/h3&gt; 
&lt;p&gt;Minimum:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPU with 4+ cores&lt;/li&gt; 
 &lt;li&gt;8GB RAM&lt;/li&gt; 
 &lt;li&gt;1TB free storage space to sync the Mainnet&lt;/li&gt; 
 &lt;li&gt;8 MBit/sec download Internet service&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Recommended:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fast CPU with 8+ cores&lt;/li&gt; 
 &lt;li&gt;16GB+ RAM&lt;/li&gt; 
 &lt;li&gt;High-performance SSD with at least 1TB of free space&lt;/li&gt; 
 &lt;li&gt;25+ MBit/sec download Internet service&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Full node on the main Ethereum network&lt;/h3&gt; 
&lt;p&gt;By far the most common scenario is people wanting to simply interact with the Ethereum network: create accounts; transfer funds; deploy and interact with contracts. For this particular use case, the user doesn't care about years-old historical data, so we can sync quickly to the current state of the network. To do so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ geth console
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command will:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Start &lt;code&gt;geth&lt;/code&gt; in snap sync mode (default, can be changed with the &lt;code&gt;--syncmode&lt;/code&gt; flag), causing it to download more data in exchange for avoiding processing the entire history of the Ethereum network, which is very CPU intensive.&lt;/li&gt; 
 &lt;li&gt;Start the built-in interactive &lt;a href="https://geth.ethereum.org/docs/interacting-with-geth/javascript-console"&gt;JavaScript console&lt;/a&gt;, (via the trailing &lt;code&gt;console&lt;/code&gt; subcommand) through which you can interact using &lt;a href="https://github.com/ChainSafe/web3.js/raw/0.20.7/DOCUMENTATION.md"&gt;&lt;code&gt;web3&lt;/code&gt; methods&lt;/a&gt; (note: the &lt;code&gt;web3&lt;/code&gt; version bundled within &lt;code&gt;geth&lt;/code&gt; is very old, and not up to date with official docs), as well as &lt;code&gt;geth&lt;/code&gt;'s own &lt;a href="https://geth.ethereum.org/docs/interacting-with-geth/rpc"&gt;management APIs&lt;/a&gt;. This tool is optional and if you leave it out you can always attach it to an already running &lt;code&gt;geth&lt;/code&gt; instance with &lt;code&gt;geth attach&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;A Full node on the Holesky test network&lt;/h3&gt; 
&lt;p&gt;Transitioning towards developers, if you'd like to play around with creating Ethereum contracts, you almost certainly would like to do that without any real money involved until you get the hang of the entire system. In other words, instead of attaching to the main network, you want to join the &lt;strong&gt;test&lt;/strong&gt; network with your node, which is fully equivalent to the main network, but with play-Ether only.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ geth --holesky console
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;console&lt;/code&gt; subcommand has the same meaning as above and is equally useful on the testnet too.&lt;/p&gt; 
&lt;p&gt;Specifying the &lt;code&gt;--holesky&lt;/code&gt; flag, however, will reconfigure your &lt;code&gt;geth&lt;/code&gt; instance a bit:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Instead of connecting to the main Ethereum network, the client will connect to the Holesky test network, which uses different P2P bootnodes, different network IDs and genesis states.&lt;/li&gt; 
 &lt;li&gt;Instead of using the default data directory (&lt;code&gt;~/.ethereum&lt;/code&gt; on Linux for example), &lt;code&gt;geth&lt;/code&gt; will nest itself one level deeper into a &lt;code&gt;holesky&lt;/code&gt; subfolder (&lt;code&gt;~/.ethereum/holesky&lt;/code&gt; on Linux). Note, on OSX and Linux this also means that attaching to a running testnet node requires the use of a custom endpoint since &lt;code&gt;geth attach&lt;/code&gt; will try to attach to a production node endpoint by default, e.g., &lt;code&gt;geth attach &amp;lt;datadir&amp;gt;/holesky/geth.ipc&lt;/code&gt;. Windows users are not affected by this.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Note: Although some internal protective measures prevent transactions from crossing over between the main network and test network, you should always use separate accounts for play and real money. Unless you manually move accounts, &lt;code&gt;geth&lt;/code&gt; will by default correctly separate the two networks and will not make any accounts available between them.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;As an alternative to passing the numerous flags to the &lt;code&gt;geth&lt;/code&gt; binary, you can also pass a configuration file via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ geth --config /path/to/your_config.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get an idea of how the file should look like you can use the &lt;code&gt;dumpconfig&lt;/code&gt; subcommand to export your existing configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ geth --your-favourite-flags dumpconfig
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Docker quick start&lt;/h4&gt; 
&lt;p&gt;One of the quickest ways to get Ethereum up and running on your machine is by using Docker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker run -d --name ethereum-node -v /Users/alice/ethereum:/root \
           -p 8545:8545 -p 30303:30303 \
           ethereum/client-go
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will start &lt;code&gt;geth&lt;/code&gt; in snap-sync mode with a DB memory allowance of 1GB, as the above command does. It will also create a persistent volume in your home directory for saving your blockchain as well as map the default ports. There is also an &lt;code&gt;alpine&lt;/code&gt; tag available for a slim version of the image.&lt;/p&gt; 
&lt;p&gt;Do not forget &lt;code&gt;--http.addr 0.0.0.0&lt;/code&gt;, if you want to access RPC from other containers and/or hosts. By default, &lt;code&gt;geth&lt;/code&gt; binds to the local interface and RPC endpoints are not accessible from the outside.&lt;/p&gt; 
&lt;h3&gt;Programmatically interfacing &lt;code&gt;geth&lt;/code&gt; nodes&lt;/h3&gt; 
&lt;p&gt;As a developer, sooner rather than later you'll want to start interacting with &lt;code&gt;geth&lt;/code&gt; and the Ethereum network via your own programs and not manually through the console. To aid this, &lt;code&gt;geth&lt;/code&gt; has built-in support for a JSON-RPC based APIs (&lt;a href="https://ethereum.org/en/developers/docs/apis/json-rpc/"&gt;standard APIs&lt;/a&gt; and &lt;a href="https://geth.ethereum.org/docs/interacting-with-geth/rpc"&gt;&lt;code&gt;geth&lt;/code&gt; specific APIs&lt;/a&gt;). These can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based platforms, and named pipes on Windows).&lt;/p&gt; 
&lt;p&gt;The IPC interface is enabled by default and exposes all the APIs supported by &lt;code&gt;geth&lt;/code&gt;, whereas the HTTP and WS interfaces need to manually be enabled and only expose a subset of APIs due to security reasons. These can be turned on/off and configured as you'd expect.&lt;/p&gt; 
&lt;p&gt;HTTP based JSON-RPC API options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;--http&lt;/code&gt; Enable the HTTP-RPC server&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--http.addr&lt;/code&gt; HTTP-RPC server listening interface (default: &lt;code&gt;localhost&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--http.port&lt;/code&gt; HTTP-RPC server listening port (default: &lt;code&gt;8545&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--http.api&lt;/code&gt; API's offered over the HTTP-RPC interface (default: &lt;code&gt;eth,net,web3&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--http.corsdomain&lt;/code&gt; Comma separated list of domains from which to accept cross-origin requests (browser enforced)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--ws&lt;/code&gt; Enable the WS-RPC server&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--ws.addr&lt;/code&gt; WS-RPC server listening interface (default: &lt;code&gt;localhost&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--ws.port&lt;/code&gt; WS-RPC server listening port (default: &lt;code&gt;8546&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--ws.api&lt;/code&gt; API's offered over the WS-RPC interface (default: &lt;code&gt;eth,net,web3&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--ws.origins&lt;/code&gt; Origins from which to accept WebSocket requests&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--ipcdisable&lt;/code&gt; Disable the IPC-RPC server&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;--ipcpath&lt;/code&gt; Filename for IPC socket/pipe within the datadir (explicit paths escape it)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You'll need to use your own programming environments' capabilities (libraries, tools, etc) to connect via HTTP, WS or IPC to a &lt;code&gt;geth&lt;/code&gt; node configured with the above flags and you'll need to speak &lt;a href="https://www.jsonrpc.org/specification"&gt;JSON-RPC&lt;/a&gt; on all transports. You can reuse the same connection for multiple requests!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note: Please understand the security implications of opening up an HTTP/WS based transport before doing so! Hackers on the internet are actively trying to subvert Ethereum nodes with exposed APIs! Further, all browser tabs can access locally running web servers, so malicious web pages could try to subvert locally available APIs!&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Operating a private network&lt;/h3&gt; 
&lt;p&gt;Maintaining your own private network is more involved as a lot of configurations taken for granted in the official networks need to be manually set up.&lt;/p&gt; 
&lt;p&gt;Unfortunately since &lt;a href="https://ethereum.org/en/roadmap/merge/"&gt;the Merge&lt;/a&gt; it is no longer possible to easily set up a network of geth nodes without also setting up a corresponding beacon chain.&lt;/p&gt; 
&lt;p&gt;There are three different solutions depending on your use case:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are looking for a simple way to test smart contracts from go in your CI, you can use the &lt;a href="https://geth.ethereum.org/docs/developers/dapp-developer/native-bindings#blockchain-simulator"&gt;Simulated Backend&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you want a convenient single node environment for testing, you can use our &lt;a href="https://geth.ethereum.org/docs/developers/dapp-developer/dev-mode"&gt;Dev Mode&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you are looking for a multiple node test network, you can set one up quite easily with &lt;a href="https://geth.ethereum.org/docs/fundamentals/kurtosis"&gt;Kurtosis&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Thank you for considering helping out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes!&lt;/p&gt; 
&lt;p&gt;If you'd like to contribute to go-ethereum, please fork, fix, commit and send a pull request for the maintainers to review and merge into the main code base. If you wish to submit more complex changes though, please check up with the core devs first on &lt;a href="https://discord.gg/invite/nthXNEv"&gt;our Discord Server&lt;/a&gt; to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple.&lt;/p&gt; 
&lt;p&gt;Please make sure your contributions adhere to our coding guidelines:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Code must adhere to the official Go &lt;a href="https://golang.org/doc/effective_go.html#formatting"&gt;formatting&lt;/a&gt; guidelines (i.e. uses &lt;a href="https://golang.org/cmd/gofmt/"&gt;gofmt&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Code must be documented adhering to the official Go &lt;a href="https://golang.org/doc/effective_go.html#commentary"&gt;commentary&lt;/a&gt; guidelines.&lt;/li&gt; 
 &lt;li&gt;Pull requests need to be based on and opened against the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt; 
 &lt;li&gt;Commit messages should be prefixed with the package(s) they modify. 
  &lt;ul&gt; 
   &lt;li&gt;E.g. "eth, rpc: make trace configs optional"&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see the &lt;a href="https://geth.ethereum.org/docs/developers/geth-developer/dev-guide"&gt;Developers' Guide&lt;/a&gt; for more details on configuring your environment, managing project dependencies, and testing procedures.&lt;/p&gt; 
&lt;h3&gt;Contributing to geth.ethereum.org&lt;/h3&gt; 
&lt;p&gt;For contributions to the &lt;a href="https://geth.ethereum.org"&gt;go-ethereum website&lt;/a&gt;, please checkout and raise pull requests against the &lt;code&gt;website&lt;/code&gt; branch. For more detailed instructions please see the &lt;code&gt;website&lt;/code&gt; branch &lt;a href="https://github.com/ethereum/go-ethereum/tree/website#readme"&gt;README&lt;/a&gt; or the &lt;a href="https://geth.ethereum.org/docs/developers/geth-developer/contributing"&gt;contributing&lt;/a&gt; page of the website.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The go-ethereum library (i.e. all code outside of the &lt;code&gt;cmd&lt;/code&gt; directory) is licensed under the &lt;a href="https://www.gnu.org/licenses/lgpl-3.0.en.html"&gt;GNU Lesser General Public License v3.0&lt;/a&gt;, also included in our repository in the &lt;code&gt;COPYING.LESSER&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;The go-ethereum binaries (i.e. all code inside of the &lt;code&gt;cmd&lt;/code&gt; directory) are licensed under the &lt;a href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;GNU General Public License v3.0&lt;/a&gt;, also included in our repository in the &lt;code&gt;COPYING&lt;/code&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>istio/istio</title>
      <link>https://github.com/istio/istio</link>
      <description>&lt;p&gt;Connect, secure, control, and observe services.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Istio&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://bestpractices.coreinfrastructure.org/projects/1395"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/1395/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/istio/istio"&gt;&lt;img src="https://goreportcard.com/badge/github.com/istio/istio" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/istio.io/istio"&gt;&lt;img src="https://godoc.org/istio.io/istio?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;a href="https://istio.io/"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/cncf/artwork/refs/heads/main/projects/istio/icon/color/istio-icon-color.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://github.com/istio/istio/raw/master/logo/istio-bluelogo-whitebackground-unframed.svg" /&gt; 
  &lt;img title="Istio" height="100" width="100" alt="Istio logo" src="https://github.com/istio/istio/raw/master/logo/istio-bluelogo-whitebackground-unframed.svg?sanitize=true" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;hr /&gt; 
&lt;p&gt;Istio is an open source service mesh that layers transparently onto existing distributed applications. Istio’s powerful features provide a uniform and more efficient way to secure, connect, and monitor services. Istio is the path to load balancing, service-to-service authentication, and monitoring – with few or no service code changes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For in-depth information about how to use Istio, visit &lt;a href="https://istio.io"&gt;istio.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;To ask questions and get assistance from our community, visit &lt;a href="https://github.com/istio/istio/discussions"&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;To learn how to participate in our overall community, visit &lt;a href="https://istio.io/about/community"&gt;our community page&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In this README:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/#repositories"&gt;Repositories&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/#issue-management"&gt;Issue management&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In addition, here are some other documents you may wish to read:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/istio/community#istio-community"&gt;Istio Community&lt;/a&gt; - describes how to get involved and contribute to the Istio project&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/istio/istio/wiki/Preparing-for-Development"&gt;Istio Developer's Guide&lt;/a&gt; - explains how to set up and use an Istio development environment&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/istio/istio/wiki/Development-Conventions"&gt;Project Conventions&lt;/a&gt; - describes the conventions we use within the code base&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/istio/istio/wiki/Writing-Fast-and-Lean-Code"&gt;Creating Fast and Lean Code&lt;/a&gt; - performance-oriented advice and guidelines for the code base&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You'll find many other useful documents on our &lt;a href="https://github.com/istio/istio/wiki"&gt;Wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://istio.io/latest/docs/concepts/what-is-istio/"&gt;Istio&lt;/a&gt; is an open platform for providing a uniform way to &lt;a href="https://istio.io/latest/docs/examples/microservices-istio/"&gt;integrate microservices&lt;/a&gt;, manage &lt;a href="https://istio.io/latest/docs/concepts/traffic-management/"&gt;traffic flow&lt;/a&gt; across microservices, enforce policies and aggregate telemetry data. Istio's control plane provides an abstraction layer over the underlying cluster management platform, such as Kubernetes.&lt;/p&gt; 
&lt;p&gt;Istio is composed of these components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Envoy&lt;/strong&gt; - Sidecar proxies per microservice to handle ingress/egress traffic between services in the cluster and from a service to external services. The proxies form a &lt;em&gt;secure microservice mesh&lt;/em&gt; providing a rich set of functions like discovery, rich layer-7 routing, circuit breakers, policy enforcement and telemetry recording/reporting functions.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;Note: The service mesh is not an overlay network. It simplifies and enhances how microservices in an application talk to each other over the network provided by the underlying platform.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Istiod&lt;/strong&gt; - The Istio control plane. It provides service discovery, configuration and certificate management. It consists of the following sub-components:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pilot&lt;/strong&gt; - Responsible for configuring the proxies at runtime.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Citadel&lt;/strong&gt; - Responsible for certificate issuance and rotation.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Galley&lt;/strong&gt; - Responsible for validating, ingesting, aggregating, transforming and distributing config within Istio.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt; - The component provides user friendly options to operate the Istio service mesh.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Repositories&lt;/h2&gt; 
&lt;p&gt;The Istio project is divided across a few GitHub repositories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/api"&gt;istio/api&lt;/a&gt;. This repository defines component-level APIs and common configuration formats for the Istio platform.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/community"&gt;istio/community&lt;/a&gt;. This repository contains information on the Istio community, including the various documents that govern the Istio open source project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/README.md"&gt;istio/istio&lt;/a&gt;. This is the main code repository. It hosts Istio's core components, install artifacts, and sample programs. It includes:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/istioctl/"&gt;istioctl&lt;/a&gt;. This directory contains code for the &lt;a href="https://istio.io/latest/docs/reference/commands/istioctl/"&gt;&lt;em&gt;istioctl&lt;/em&gt;&lt;/a&gt; command line utility.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/pilot/"&gt;pilot&lt;/a&gt;. This directory contains platform-specific code to populate the &lt;a href="https://istio.io/docs/concepts/traffic-management/#pilot"&gt;abstract service model&lt;/a&gt;, dynamically reconfigure the proxies when the application topology changes, as well as translate &lt;a href="https://istio.io/latest/docs/reference/config/networking/"&gt;routing rules&lt;/a&gt; into proxy specific configuration.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/security/"&gt;security&lt;/a&gt;. This directory contains &lt;a href="https://istio.io/latest/docs/concepts/security/"&gt;security&lt;/a&gt; related code, including Citadel (acting as Certificate Authority), citadel agent, etc.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/proxy"&gt;istio/proxy&lt;/a&gt;. The Istio proxy contains extensions to the &lt;a href="https://github.com/envoyproxy/envoy"&gt;Envoy proxy&lt;/a&gt; (in the form of Envoy filters) that support authentication, authorization, and telemetry collection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/ztunnel"&gt;istio/ztunnel&lt;/a&gt;. The repository contains the Rust implementation of the ztunnel component of Ambient mesh.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/client-go"&gt;istio/client-go&lt;/a&gt;. This repository defines auto-generated Kubernetes clients for interacting with Istio resources programmatically.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Only the &lt;code&gt;istio/api&lt;/code&gt; and &lt;code&gt;istio/client-go&lt;/code&gt; repositories expose stable interfaces intended for direct usage as libraries.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Issue management&lt;/h2&gt; 
&lt;p&gt;We use GitHub to track all of our bugs and feature requests. Each issue we track has a variety of metadata:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Epic&lt;/strong&gt;. An epic represents a feature area for Istio as a whole. Epics are fairly broad in scope and are basically product-level things. Each issue is ultimately part of an epic.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Milestone&lt;/strong&gt;. Each issue is assigned a milestone. This is 0.1, 0.2, ..., or 'Nebulous Future'. The milestone indicates when we think the issue should get addressed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Priority&lt;/strong&gt;. Each issue has a priority which is represented by the column in the &lt;a href="https://github.com/orgs/istio/projects/6"&gt;Prioritization&lt;/a&gt; project. Priority can be one of P0, P1, P2, or &amp;gt;P2. The priority indicates how important it is to address the issue within the milestone. P0 says that the milestone cannot be considered achieved if the issue isn't resolved.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/cncf/artwork/refs/heads/main/other/cncf/horizontal/color-whitetext/cncf-color-whitetext.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/cncf/artwork/master/other/cncf/horizontal/color/cncf-color.svg" /&gt; 
  &lt;img width="300" alt="Cloud Native Computing Foundation logo" src="https://raw.githubusercontent.com/cncf/artwork/refs/heads/main/other/cncf/horizontal/color-whitetext/cncf-color-whitetext.svg?sanitize=true" /&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;Istio is a &lt;a href="https://cncf.io"&gt;Cloud Native Computing Foundation&lt;/a&gt; project.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>smartcontractkit/chainlink</title>
      <link>https://github.com/smartcontractkit/chainlink</link>
      <description>&lt;p&gt;node of the decentralized oracle network, bridging on and off-chain computation&lt;/p&gt;&lt;hr&gt;&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://chain.link" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/docs/logo-chainlink-blue.svg?sanitize=true" width="225" alt="Chainlink logo" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;a href="https://hub.docker.com/r/smartcontract/chainlink/tags"&gt;&lt;img src="https://img.shields.io/github/v/tag/smartcontractkit/chainlink?style=flat-square" alt="GitHub tag (latest SemVer)" /&gt;&lt;/a&gt; &lt;a href="https://github.com/smartcontractkit/chainlink/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/smartcontractkit/chainlink?style=flat-square" alt="GitHub license" /&gt;&lt;/a&gt; &lt;a href="https://github.com/smartcontractkit/chainlink/actions/workflows/changeset.yml?query=workflow%3AChangeset"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/smartcontractkit/chainlink/changeset.yml" alt="GitHub workflow changeset" /&gt;&lt;/a&gt; &lt;a href="https://github.com/smartcontractkit/chainlink/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors-anon/smartcontractkit/chainlink?style=flat-square" alt="GitHub contributors" /&gt;&lt;/a&gt; &lt;a href="https://github.com/smartcontractkit/chainlink/commits/master"&gt;&lt;img src="https://img.shields.io/github/commit-activity/y/smartcontractkit/chainlink?style=flat-square" alt="GitHub commit activity" /&gt;&lt;/a&gt; &lt;a href="https://docs.chain.link/"&gt;&lt;img src="https://img.shields.io/static/v1?label=docs&amp;amp;message=latest&amp;amp;color=blue" alt="Official documentation" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://chain.link/"&gt;Chainlink&lt;/a&gt; expands the capabilities of smart contracts by enabling access to real-world data and off-chain computation while maintaining the security and reliability guarantees inherent to blockchain technology.&lt;/p&gt; 
&lt;p&gt;This repo contains the Chainlink core node and contracts. The core node is the bundled binary available to be run by node operators participating in a &lt;a href="https://link.smartcontract.com/whitepaper"&gt;decentralized oracle network&lt;/a&gt;. All major release versions have pre-built docker images available for download from the &lt;a href="https://hub.docker.com/r/smartcontract/chainlink/tags"&gt;Chainlink dockerhub&lt;/a&gt;. If you are interested in contributing please see our &lt;a href="https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/docs/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt;. If you are here to report a bug or request a feature, please &lt;a href="https://github.com/smartcontractkit/chainlink/issues"&gt;check currently open Issues&lt;/a&gt;. For more information about how to get started with Chainlink, check our &lt;a href="https://docs.chain.link/"&gt;official documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Chainlink has an active and ever growing community. &lt;a href="https://discordapp.com/invite/aSK4zew"&gt;Discord&lt;/a&gt; is the primary communication channel used for day to day communication, answering development questions, and aggregating Chainlink related content. Take a look at the &lt;a href="https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/docs/COMMUNITY.md"&gt;community docs&lt;/a&gt; for more information regarding Chainlink social accounts, news, and networking.&lt;/p&gt; 
&lt;h2&gt;Build Chainlink&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://golang.org/doc/install"&gt;Install Go 1.23&lt;/a&gt;, and add your GOPATH's &lt;a href="https://golang.org/doc/code.html#GOPATH"&gt;bin directory to your PATH&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Example Path for macOS &lt;code&gt;export PATH=$GOPATH/bin:$PATH&lt;/code&gt; &amp;amp; &lt;code&gt;export GOPATH=/Users/$USER/go&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://nodejs.org/en/download/package-manager/"&gt;NodeJS v20&lt;/a&gt; &amp;amp; &lt;a href="https://pnpm.io/installation#using-npm"&gt;pnpm v10 via npm&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;It might be easier long term to use &lt;a href="https://nodejs.org/en/download/package-manager/#nvm"&gt;nvm&lt;/a&gt; to switch between node versions for different projects. For example, assuming $NODE_VERSION was set to a valid version of NodeJS, you could run: &lt;code&gt;nvm install $NODE_VERSION &amp;amp;&amp;amp; nvm use $NODE_VERSION&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install &lt;a href="https://wiki.postgresql.org/wiki/Detailed_installation_guides"&gt;Postgres (&amp;gt;= 12.x)&lt;/a&gt;. It is recommended to run the latest major version of postgres. 
  &lt;ul&gt; 
   &lt;li&gt;Note if you are running the official Chainlink docker image, the highest supported Postgres version is 16.x due to the bundled client.&lt;/li&gt; 
   &lt;li&gt;You should &lt;a href="https://www.postgresql.org/docs/current/ssl-tcp.html"&gt;configure Postgres&lt;/a&gt; to use SSL connection (or for testing you can set &lt;code&gt;?sslmode=disable&lt;/code&gt; in your Postgres query string).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Download Chainlink: &lt;code&gt;git clone https://github.com/smartcontractkit/chainlink &amp;amp;&amp;amp; cd chainlink&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build and install Chainlink: &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run the node: &lt;code&gt;chainlink help&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For the latest information on setting up a development environment, see the &lt;a href="https://github.com/smartcontractkit/chainlink/wiki/Development-Setup-Guide"&gt;Development Setup Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Build from PR&lt;/h3&gt; 
&lt;p&gt;To build an unofficial testing-only image from a feature branch or PR. You can do one of the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Send a workflow dispatch event from our &lt;a href="https://github.com/smartcontractkit/chainlink/actions/workflows/docker-build.yml"&gt;&lt;code&gt;docker-build&lt;/code&gt; workflow&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Add the &lt;code&gt;build-publish&lt;/code&gt; label to your PR and then either retry the &lt;code&gt;docker-build&lt;/code&gt; workflow, or push a new commit.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Build Plugins&lt;/h3&gt; 
&lt;p&gt;Plugins are defined in yaml files within the &lt;code&gt;plugins/&lt;/code&gt; directory. Each plugin file is a yaml file and has a &lt;code&gt;plugins.&lt;/code&gt; prefix name. Plugins are installed with &lt;a href="https://github.com/smartcontractkit/chainlink-common/tree/main/pkg/loop/cmd/loopinstall"&gt;loopinstall&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To install the plugins, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make install-plugins
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some plugins (such as those in &lt;code&gt;plugins/plugins.private.yaml&lt;/code&gt;) reference private GitHub repositories. To build these plugins, you must have a GITHUB_TOKEN environment variable set, or preferably use the &lt;a href="https://cli.github.com/manual/gh"&gt;gh&lt;/a&gt; GitHub CLI tool to use the &lt;a href="https://cli.github.com/manual/gh_auth_setup-git"&gt;GitHub CLI credential helper&lt;/a&gt; like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Sets up a credential helper.
gh auth setup-git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can build the plugins with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make install-plugins-private
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker Builds&lt;/h3&gt; 
&lt;p&gt;To build the experimental "plugins" Chainlink docker image, you can run this from the root of the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# The GITHUB_TOKEN is required to access private repos which are used by some plugins.
export GITHUB_TOKEN=$(gh auth token) # requires the `gh` cli tool.
make docker-plugins
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ethereum Execution Client Requirements&lt;/h3&gt; 
&lt;p&gt;In order to run the Chainlink node you must have access to a running Ethereum node with an open websocket connection. Any Ethereum based network will work once you've &lt;a href="https://github.com/smartcontractkit/chainlink#configure"&gt;configured&lt;/a&gt; the chain ID. Ethereum node versions currently tested and supported:&lt;/p&gt; 
&lt;p&gt;[Officially supported]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openethereum/openethereum"&gt;Parity/Openethereum&lt;/a&gt; (NOTE: Parity is deprecated and support for this client may be removed in future)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ethereum/go-ethereum/releases"&gt;Geth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hyperledger/besu"&gt;Besu&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;[Supported but broken] These clients are supported by Chainlink, but have bugs that prevent Chainlink from working reliably on these execution clients.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NethermindEth/nethermind"&gt;Nethermind&lt;/a&gt; Blocking issues: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/NethermindEth/nethermind/issues/4384"&gt;https://github.com/NethermindEth/nethermind/issues/4384&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ledgerwatch/erigon"&gt;Erigon&lt;/a&gt; Blocking issues: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ledgerwatch/erigon/discussions/4946"&gt;https://github.com/ledgerwatch/erigon/discussions/4946&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://github.com/ledgerwatch/erigon/issues/4030#issuecomment-1113964017"&gt;https://github.com/ledgerwatch/erigon/issues/4030#issuecomment-1113964017&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We cannot recommend specific version numbers for ethereum nodes since the software is being continually updated, but you should usually try to run the latest version available.&lt;/p&gt; 
&lt;h2&gt;Running a local Chainlink node&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: By default, chainlink will run in TLS mode. For local development you can disable this by using a &lt;code&gt;dev build&lt;/code&gt; using &lt;code&gt;make chainlink-dev&lt;/code&gt; and setting the TOML fields:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[WebServer]
SecureCookies = false
TLS.HTTPSPort = 0

[Insecure]
DevWebServer = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can generate self signed certificates using &lt;code&gt;tools/bin/self-signed-certs&lt;/code&gt; or &lt;a href="https://github.com/smartcontractkit/chainlink/wiki/Creating-Self-Signed-Certificates"&gt;manually&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To start your Chainlink node, simply run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chainlink node start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default this will start on port 6688. You should be able to access the UI at &lt;a href="http://localhost:6688/"&gt;http://localhost:6688/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Chainlink provides a remote CLI client as well as a UI. Once your node has started, you can open a new terminal window to use the CLI. You will need to log in to authorize the client first:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chainlink admin login
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(You can also set &lt;code&gt;ADMIN_CREDENTIALS_FILE=/path/to/credentials/file&lt;/code&gt; in future if you like, to avoid having to login again).&lt;/p&gt; 
&lt;p&gt;Now you can view your current jobs with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;chainlink jobs list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To find out more about the Chainlink CLI, you can always run &lt;code&gt;chainlink help&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://docs.chain.link/"&gt;doc&lt;/a&gt; pages on &lt;a href="https://docs.chain.link/docs/jobs/"&gt;Jobs&lt;/a&gt; to learn more about how to create Jobs.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Node configuration is managed by a combination of environment variables and direct setting via API/UI/CLI.&lt;/p&gt; 
&lt;p&gt;Check the &lt;a href="https://docs.chain.link/docs/configuration-variables"&gt;official documentation&lt;/a&gt; for more information on how to configure your node.&lt;/p&gt; 
&lt;h3&gt;External Adapters&lt;/h3&gt; 
&lt;p&gt;External adapters are what make Chainlink easily extensible, providing simple integration of custom computations and specialized APIs. A Chainlink node communicates with external adapters via a simple REST API.&lt;/p&gt; 
&lt;p&gt;For more information on creating and using external adapters, please see our &lt;a href="https://docs.chain.link/docs/external-adapters"&gt;external adapters page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Verify Official Chainlink Releases&lt;/h2&gt; 
&lt;p&gt;We use &lt;code&gt;cosign&lt;/code&gt; with OIDC keyless signing during the &lt;a href="https://github.com/smartcontractkit/chainlink/actions/workflows/build-publish.yml"&gt;Build, Sign and Publish Chainlink&lt;/a&gt; workflow.&lt;/p&gt; 
&lt;p&gt;It is encourage for any node operator building from the official Chainlink docker image to verify the tagged release version was did indeed built from this workflow.&lt;/p&gt; 
&lt;p&gt;You will need &lt;code&gt;cosign&lt;/code&gt; in order to do this verification. &lt;a href="https://docs.sigstore.dev/system_config/installation/"&gt;Follow the instruction here to install cosign&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# tag is the tagged release version - ie. 2.16.0
cosign verify index.docker.io/smartcontract/chainlink:${tag} \
      --certificate-oidc-issuer https://token.actions.githubusercontent.com \
      --certificate-identity "https://github.com/smartcontractkit/chainlink/.github/workflows/build-publish.yml@refs/tags/v${tag}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Running tests&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://pnpm.io/installation#using-npm"&gt;Install pnpm 10 via npm&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/fjl/gencodec"&gt;gencodec&lt;/a&gt; and &lt;a href="https://stedolan.github.io/jq/download/"&gt;jq&lt;/a&gt; to be able to run &lt;code&gt;go generate ./...&lt;/code&gt; and &lt;code&gt;make abigen&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install mockery&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;code&gt;make mockery&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Using the &lt;code&gt;make&lt;/code&gt; command will install the correct version.&lt;/p&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;Generate and compile static assets:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make generate
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="5"&gt; 
 &lt;li&gt;Prepare your development environment:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The tests require a postgres database. In turn, the environment variable &lt;code&gt;CL_DATABASE_URL&lt;/code&gt; must be set to value that can connect to &lt;code&gt;_test&lt;/code&gt; database, and the user must be able to create and drop the given &lt;code&gt;_test&lt;/code&gt; database.&lt;/p&gt; 
&lt;p&gt;Note: Other environment variables should not be set for all tests to pass&lt;/p&gt; 
&lt;p&gt;There helper script for initial setup to create an appropriate test user. It requires postgres to be running on localhost at port 5432. You will be prompted for the &lt;code&gt;postgres&lt;/code&gt; user password&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make setup-testdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This script will save the &lt;code&gt;CL_DATABASE_URL&lt;/code&gt; in &lt;code&gt;.dbenv&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Changes to database require migrations to be run. Similarly, &lt;code&gt;pull&lt;/code&gt;'ing the repo may require migrations to run. After the one-time setup above:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;source .dbenv
make testdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you encounter the error &lt;code&gt;database accessed by other users (SQLSTATE 55006) exit status 1&lt;/code&gt; and you want force the database creation then use&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;source .dbenv
make testdb-force
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="7"&gt; 
 &lt;li&gt;Run tests:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go test ./...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Notes&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;parallel&lt;/code&gt; flag can be used to limit CPU usage, for running tests in the background (&lt;code&gt;-parallel=4&lt;/code&gt;) - the default is &lt;code&gt;GOMAXPROCS&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;p&lt;/code&gt; flag can be used to limit the number of &lt;em&gt;packages&lt;/em&gt; tested concurrently, if they are interferring with one another (&lt;code&gt;-p=1&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;-short&lt;/code&gt; flag skips tests which depend on the database, for quickly spot checking simpler tests in around one minute&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Race Detector&lt;/h4&gt; 
&lt;p&gt;As of Go 1.1, the runtime includes a data race detector, enabled with the &lt;code&gt;-race&lt;/code&gt; flag. This is used in CI via the &lt;code&gt;tools/bin/go_core_race_tests&lt;/code&gt; script. If the action detects a race, the artifact on the summary page will include &lt;code&gt;race.*&lt;/code&gt; files with detailed stack traces.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;&lt;strong&gt;It will not issue false positives, so take its warnings seriously.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For local, targeted race detection, you can run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;GORACE="log_path=$PWD/race" go test -race ./core/path/to/pkg -count 10
GORACE="log_path=$PWD/race" go test -race ./core/path/to/pkg -count 100 -run TestFooBar/sub_test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://go.dev/doc/articles/race_detector"&gt;https://go.dev/doc/articles/race_detector&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Fuzz tests&lt;/h4&gt; 
&lt;p&gt;As of Go 1.18, fuzz tests &lt;code&gt;func FuzzXXX(*testing.F)&lt;/code&gt; are included as part of the normal test suite, so existing cases are executed with &lt;code&gt;go test&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, you can run active fuzzing to search for new cases:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go test ./pkg/path -run=XXX -fuzz=FuzzTestName
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://go.dev/doc/fuzz/"&gt;https://go.dev/doc/fuzz/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Go Modules&lt;/h3&gt; 
&lt;p&gt;This repository contains three Go modules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart RL
    github.com/smartcontractkit/chainlink/v2
    github.com/smartcontractkit/chainlink/integration-tests --&amp;gt; github.com/smartcontractkit/chainlink/v2
    github.com/smartcontractkit/chainlink/core/scripts --&amp;gt; github.com/smartcontractkit/chainlink/v2

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;integration-tests&lt;/code&gt; and &lt;code&gt;core/scripts&lt;/code&gt; modules import the root module using a relative replace in their &lt;code&gt;go.mod&lt;/code&gt; files, so dependency changes in the root &lt;code&gt;go.mod&lt;/code&gt; often require changes in those modules as well. After making a change, &lt;code&gt;go mod tidy&lt;/code&gt; can be run on all three modules using:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make gomodtidy
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Code Generation&lt;/h3&gt; 
&lt;p&gt;Go generate is used to generate mocks in this project. Mocks are generated with &lt;a href="https://github.com/vektra/mockery"&gt;mockery&lt;/a&gt; and live in core/internal/mocks.&lt;/p&gt; 
&lt;h3&gt;Nix&lt;/h3&gt; 
&lt;p&gt;A &lt;a href="https://nixos.wiki/wiki/Development_environment_with_nix-shell"&gt;shell.nix&lt;/a&gt; is provided for use with the &lt;a href="https://nixos.org/"&gt;Nix package manager&lt;/a&gt;. By default,we utilize the shell through &lt;a href="https://nixos.wiki/wiki/Flakes"&gt;Nix Flakes&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Nix defines a declarative, reproducible development environment. Flakes version use deterministic, frozen (&lt;code&gt;flake.lock&lt;/code&gt;) dependencies to gain more consistency/reproducibility on the built artifacts.&lt;/p&gt; 
&lt;p&gt;To use it:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install &lt;a href="https://nixos.org/download.html"&gt;nix package manager&lt;/a&gt; in your system.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enable &lt;a href="https://nixos.wiki/wiki/Flakes#Enable_flakes"&gt;flakes support&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Run &lt;code&gt;nix develop&lt;/code&gt;. You will be put in shell containing all the dependencies.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Optionally, &lt;code&gt;nix develop --command $SHELL&lt;/code&gt; will make use of your current shell instead of the default (bash).&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;direnv&lt;/code&gt; to enable it automatically when &lt;code&gt;cd&lt;/code&gt;-ing into the folder; for that, enable &lt;a href="https://github.com/nix-community/nix-direnv"&gt;nix-direnv&lt;/a&gt; and &lt;code&gt;use flake&lt;/code&gt; on it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Create a local postgres database:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;mkdir -p $PGDATA &amp;amp;&amp;amp; cd $PGDATA/
initdb
pg_ctl -l postgres.log -o "--unix_socket_directories='$PWD'" start
createdb chainlink_test -h localhost
createuser --superuser --password chainlink -h localhost
# then type a test password, e.g.: chainlink, and set it in shell.nix CL_DATABASE_URL
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="4"&gt; 
 &lt;li&gt;When re-entering project, you can restart postgres: &lt;code&gt;cd $PGDATA; pg_ctl -l postgres.log -o "--unix_socket_directories='$PWD'" start&lt;/code&gt; Now you can run tests or compile code as usual.&lt;/li&gt; 
 &lt;li&gt;When you're done, stop it: &lt;code&gt;cd $PGDATA; pg_ctl -o "--unix_socket_directories='$PWD'" stop&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Changesets&lt;/h3&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/changesets/changesets"&gt;changesets&lt;/a&gt; to manage versioning for libs and the services.&lt;/p&gt; 
&lt;p&gt;Every PR that modifies any configuration or code, should most likely accompanied by a changeset file.&lt;/p&gt; 
&lt;p&gt;To install &lt;code&gt;changesets&lt;/code&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install &lt;code&gt;pnpm&lt;/code&gt; if it is not already installed - &lt;a href="https://pnpm.io/installation"&gt;docs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;pnpm install&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Either after or before you create a commit, run the &lt;code&gt;pnpm changeset&lt;/code&gt; command to create an accompanying changeset entry which will reflect on the CHANGELOG for the next release.&lt;/p&gt; 
&lt;p&gt;The format is based on &lt;a href="https://keepachangelog.com/en/1.0.0/"&gt;Keep a Changelog&lt;/a&gt;,&lt;/p&gt; 
&lt;p&gt;and this project adheres to &lt;a href="https://semver.org/spec/v2.0.0.html"&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Tips&lt;/h3&gt; 
&lt;p&gt;For more tips on how to build and test Chainlink, see our &lt;a href="https://github.com/smartcontractkit/chainlink/wiki/Development-Tips"&gt;development tips page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Contributions are welcome to Chainlink's source code.&lt;/p&gt; 
&lt;p&gt;Please check out our &lt;a href="https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/docs/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Thank you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nats-io/nats-server</title>
      <link>https://github.com/nats-io/nats-server</link>
      <description>&lt;p&gt;High-Performance server for NATS.io, the cloud and edge native messaging system.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/nats-io/nats-server/main/logos/nats-horizontal-color.png" width="300" alt="NATS Logo" /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://nats.io"&gt;NATS&lt;/a&gt; is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (&lt;a href="https://cncf.io"&gt;CNCF&lt;/a&gt;). NATS has over &lt;a href="https://nats.io/download/"&gt;40 client language implementations&lt;/a&gt;, and its server can run on-premise, in the cloud, at the edge, and even on a Raspberry Pi. NATS can secure and simplify design and operation of modern distributed systems.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache2-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nats-io/nats-server/actions/workflows/tests.yaml"&gt;&lt;img src="https://github.com/nats-io/nats-server/actions/workflows/tests.yaml/badge.svg?branch=main" alt="Build" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nats-io/nats-server/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/nats-io/nats-server" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://slack.nats.io"&gt;&lt;img src="https://img.shields.io/badge/chat-on%20slack-green" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/nats-io/nats-server?branch=main"&gt;&lt;img src="https://coveralls.io/repos/github/nats-io/nats-server/badge.svg?branch=main" alt="Coverage" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/_/nats"&gt;&lt;img src="https://img.shields.io/docker/pulls/_/nats.svg?sanitize=true" alt="Docker Downloads" /&gt;&lt;/a&gt; &lt;a href="https://somsubhra.github.io/github-release-stats/?username=nats-io&amp;amp;repository=nats-server"&gt;&lt;img src="https://img.shields.io/github/downloads/nats-io/nats-server/total.svg?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/1895"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/1895/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/nats/nats"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/nats" alt="Artifact Hub" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nats.io"&gt;Official Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nats.io"&gt;Official Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nats.io/reference/faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href="https://rethink.synadia.com/episodes/1/"&gt;a video overview&lt;/a&gt; of NATS.&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href="https://www.youtube.com/watch?v=sm63oAVPqAM"&gt;this video from SCALE 13x&lt;/a&gt; to learn more about its origin story and design philosophy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/nats_io"&gt;Twitter&lt;/a&gt;: Follow us on Twitter!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/natsio"&gt;Google Groups&lt;/a&gt;: Where you can ask questions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://natsio.slack.com"&gt;Slack&lt;/a&gt;: Click &lt;a href="https://slack.nats.io"&gt;here&lt;/a&gt; to join. You can ask questions to our maintainers and to the rich and active community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are interested in contributing to NATS, read about our...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nats-io/nats-server/main/CONTRIBUTING.md"&gt;Contributing guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nats-io"&gt;Report issues or propose Pull Requests&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The NATS product roadmap can be found &lt;a href="https://nats.io/about/#roadmap"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;Who uses NATS? See our &lt;a href="https://nats.io/#who-uses-nats"&gt;list of users&lt;/a&gt; on &lt;a href="https://nats.io"&gt;https://nats.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;h3&gt;Security Audit&lt;/h3&gt; 
&lt;p&gt;A third party security audit was performed by Trail of Bits following engagement by the Open Source Technology Improvement Fund (OSTIF). You can see the &lt;a href="https://github.com/trailofbits/publications/raw/master/reviews/2025-04-ostif-nats-securityreview.pdf"&gt;full report from April 2025 here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Reporting Security Vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you've found a vulnerability or a potential vulnerability in the NATS server, please let us know at &lt;a href="mailto:security@nats.io"&gt;nats-security&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless otherwise noted, the NATS source files are distributed under the Apache Version 2.0 license found in the LICENSE file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>restic/restic</title>
      <link>https://github.com/restic/restic</link>
      <description>&lt;p&gt;Fast, secure, efficient backup program&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://restic.readthedocs.io/en/latest/?badge=latest"&gt;&lt;img src="https://readthedocs.org/projects/restic/badge/?version=latest" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://github.com/restic/restic/actions?query=workflow%3Atest"&gt;&lt;img src="https://github.com/restic/restic/workflows/test/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/restic/restic"&gt;&lt;img src="https://goreportcard.com/badge/github.com/restic/restic" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;restic is a backup program that is fast, efficient and secure. It supports the three major operating systems (Linux, macOS, Windows) and a few smaller ones (FreeBSD, OpenBSD).&lt;/p&gt; 
&lt;p&gt;For detailed usage and installation instructions check out the &lt;a href="https://restic.readthedocs.io/en/latest"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can ask questions in our &lt;a href="https://forum.restic.net"&gt;Discourse forum&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;Once you've &lt;a href="https://restic.readthedocs.io/en/latest/020_installation.html"&gt;installed&lt;/a&gt; restic, start off with creating a repository for your backups:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ restic init --repo /tmp/backup
enter password for new backend:
enter password again:
created restic backend 085b3c76b9 at /tmp/backup
Please note that knowledge of your password is required to access the repository.
Losing your password means that your data is irrecoverably lost.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and add some data:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ restic --repo /tmp/backup backup ~/work
enter password for repository:
scan [/home/user/work]
scanned 764 directories, 1816 files in 0:00
[0:29] 100.00%  54.732 MiB/s  1.582 GiB / 1.582 GiB  2580 / 2580 items  0 errors  ETA 0:00
duration: 0:29, 54.47MiB/s
snapshot 40dc1520 saved
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next you can either use &lt;code&gt;restic restore&lt;/code&gt; to restore files or use &lt;code&gt;restic mount&lt;/code&gt; to mount the repository via fuse and browse the files from previous snapshots.&lt;/p&gt; 
&lt;p&gt;For more options check out the &lt;a href="https://restic.readthedocs.io/en/latest/"&gt;online documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Backends&lt;/h1&gt; 
&lt;p&gt;Saving a backup on the same machine is nice but not a real backup strategy. Therefore, restic supports the following backends for storing backups natively:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#local"&gt;Local directory&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#sftp"&gt;sftp server (via SSH)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#rest-server"&gt;HTTP REST server&lt;/a&gt; (&lt;a href="https://restic.readthedocs.io/en/latest/100_references.html#rest-backend"&gt;protocol&lt;/a&gt;, &lt;a href="https://github.com/restic/rest-server"&gt;rest-server&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#amazon-s3"&gt;Amazon S3&lt;/a&gt; (either from Amazon or using the &lt;a href="https://minio.io"&gt;Minio&lt;/a&gt; server)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#openstack-swift"&gt;OpenStack Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#backblaze-b2"&gt;BackBlaze B2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#microsoft-azure-blob-storage"&gt;Microsoft Azure Blob Storage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#google-cloud-storage"&gt;Google Cloud Storage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;And many other services via the &lt;a href="https://rclone.org"&gt;rclone&lt;/a&gt; &lt;a href="https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#other-services-via-rclone"&gt;Backend&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Design Principles&lt;/h1&gt; 
&lt;p&gt;Restic is a program that does backups right and was designed with the following principles in mind:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy&lt;/strong&gt;: Doing backups should be a frictionless process, otherwise you might be tempted to skip it. Restic should be easy to configure and use, so that, in the event of a data loss, you can just restore it. Likewise, restoring data should not be complicated.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Backing up your data with restic should only be limited by your network or hard disk bandwidth so that you can backup your files every day. Nobody does backups if it takes too much time. Restoring backups should only transfer data that is needed for the files that are to be restored, so that this process is also fast.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Verifiable&lt;/strong&gt;: Much more important than backup is restore, so restic enables you to easily verify that all data can be restored.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Secure&lt;/strong&gt;: Restic uses cryptography to guarantee confidentiality and integrity of your data. The location the backup data is stored is assumed not to be a trusted environment (e.g. a shared space where others like system administrators are able to access your backups). Restic is built to secure your data against such attackers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;: With the growth of data, additional snapshots should only take the storage of the actual increment. Even more, duplicate data should be de-duplicated before it is actually written to the storage back end to save precious backup space.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Reproducible Builds&lt;/h1&gt; 
&lt;p&gt;The binaries released with each restic version starting at 0.6.1 are &lt;a href="https://reproducible-builds.org/"&gt;reproducible&lt;/a&gt;, which means that you can reproduce a byte identical version from the source code for that release. Instructions on how to do that are contained in the &lt;a href="https://github.com/restic/builder"&gt;builder repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;News&lt;/h2&gt; 
&lt;p&gt;You can follow the restic project on Mastodon &lt;a href="https://fosstodon.org/@restic"&gt;@resticbackup&lt;/a&gt; or subscribe to the &lt;a href="https://restic.net/blog/"&gt;project blog&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Restic is licensed under &lt;a href="https://opensource.org/licenses/BSD-2-Clause"&gt;BSD 2-Clause License&lt;/a&gt;. You can find the complete text in &lt;a href="https://raw.githubusercontent.com/restic/restic/master/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;Backend integration tests for Google Cloud Storage and Microsoft Azure Blob Storage are sponsored by &lt;a href="https://appscode.com"&gt;AppsCode&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://appscode.com"&gt;&lt;img src="https://cdn.appscode.com/images/logo/appscode/ac-logo-color.png" alt="Sponsored by AppsCode" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>open-telemetry/opentelemetry-collector</title>
      <link>https://github.com/open-telemetry/opentelemetry-collector</link>
      <description>&lt;p&gt;OpenTelemetry Collector&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://opentelemetry.io/docs/collector/getting-started/"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md"&gt;Getting Involved&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://cloud-native.slack.com/archives/C01N6P7KR6W"&gt;Getting In Touch&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/actions/workflows/build-and-test.yml?query=branch%3Amain"&gt; &lt;img alt="Build Status" src="https://img.shields.io/github/actions/workflow/status/open-telemetry/opentelemetry-collector/build-and-test.yml?branch=main&amp;amp;style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/open-telemetry/opentelemetry-collector"&gt; &lt;img alt="Go Report Card" src="https://goreportcard.com/badge/github.com/open-telemetry/opentelemetry-collector?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://codecov.io/gh/open-telemetry/opentelemetry-collector/branch/main/"&gt; &lt;img alt="Codecov Status" src="https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-collector?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/releases"&gt; &lt;img alt="GitHub release (latest by date including pre-releases)" src="https://img.shields.io/github/v/release/open-telemetry/opentelemetry-collector?include_prereleases&amp;amp;style=for-the-badge" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://www.bestpractices.dev/projects/8404"&gt;&lt;img src="https://www.bestpractices.dev/projects/8404/badge" /&gt; &lt;/a&gt; &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:opentelemetry"&gt; &lt;img alt="Fuzzing Status" src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/opentelemetry.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/vision.md"&gt;Vision&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://opentelemetry.io/docs/collector/configuration/"&gt;Configuration&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://opentelemetry.io/docs/collector/internal-telemetry/#use-internal-telemetry-to-monitor-the-collector"&gt;Monitoring&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/security-best-practices.md"&gt;Security&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://pkg.go.dev/go.opentelemetry.io/collector"&gt;Package&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;&lt;img src="https://opentelemetry.io/img/logos/opentelemetry-logo-nav.png" alt="OpenTelemetry Icon" width="45" height="" /&gt; OpenTelemetry Collector&lt;/h1&gt; 
&lt;p&gt;The OpenTelemetry Collector offers a vendor-agnostic implementation on how to receive, process and export telemetry data. In addition, it removes the need to run, operate and maintain multiple agents/collectors in order to support open-source telemetry data formats (e.g. Jaeger, Prometheus, etc.) to multiple open-source or commercial back-ends.&lt;/p&gt; 
&lt;p&gt;Objectives:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usable: Reasonable default configuration, supports popular protocols, runs and collects out of the box.&lt;/li&gt; 
 &lt;li&gt;Performant: Highly stable and performant under varying loads and configurations.&lt;/li&gt; 
 &lt;li&gt;Observable: An exemplar of an observable service.&lt;/li&gt; 
 &lt;li&gt;Extensible: Customizable without touching the core code.&lt;/li&gt; 
 &lt;li&gt;Unified: Single codebase, deployable as an agent or collector with support for traces, metrics and logs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The OpenTelemetry Collector SIG is present at the &lt;a href="https://cloud-native.slack.com/archives/C01N6P7KR6W"&gt;#otel-collector&lt;/a&gt; channel on the CNCF Slack and &lt;a href="https://github.com/open-telemetry/community#implementation-sigs"&gt;meets once a week&lt;/a&gt; via video calls. Everyone is invited to join those calls, which typically serves the following purposes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;meet the humans behind the project&lt;/li&gt; 
 &lt;li&gt;get an opinion about specific proposals&lt;/li&gt; 
 &lt;li&gt;look for a sponsor for a proposed component after trying already via GitHub and Slack&lt;/li&gt; 
 &lt;li&gt;get attention to a specific pull-request that got stuck and is difficult to discuss asynchronously&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We rotate our video calls between three time slots, in order to allow everyone to join at least once every three meetings. The rotation order is as follows:&lt;/p&gt; 
&lt;p&gt;Tuesday:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=1700"&gt;17:00 PT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Wednesday:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=0900"&gt;09:00 PT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=0500"&gt;05:00 PT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Contributors to the project are also welcome to have ad-hoc meetings for synchronous discussions about specific points. Post a note in #otel-collector-dev on Slack inviting others, specifying the topic to be discussed. Unless there are strong reasons to keep the meeting private, please make it an open invitation for other contributors to join. Try also to identify who would be the other contributors interested on that topic and in which timezones they are.&lt;/p&gt; 
&lt;p&gt;Remember that our source of truth is GitHub: every decision made via Slack or video calls has to be recorded in the relevant GitHub issue. Ideally, the agenda items from the meeting notes would include a link to the issue or pull request where a discussion is happening already. We acknowledge that not everyone can join Slack or the synchronous calls and don't want them to feel excluded.&lt;/p&gt; 
&lt;h2&gt;Supported OTLP version&lt;/h2&gt; 
&lt;p&gt;This code base is currently built against using OTLP protocol v1.5.0, considered Stable. &lt;a href="https://github.com/open-telemetry/opentelemetry-proto?tab=readme-ov-file#stability-definition"&gt;See the OpenTelemetry Protocol Stability definition here.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Stability levels&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/component-stability.md"&gt;Stability Levels and versioning&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;When used as a library, the OpenTelemetry Collector attempts to track the currently supported versions of Go, as &lt;a href="https://go.dev/doc/devel/release#policy"&gt;defined by the Go team&lt;/a&gt;. Removing support for an unsupported Go version is not considered a breaking change.&lt;/p&gt; 
&lt;p&gt;Support for Go versions on the OpenTelemetry Collector is updated as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will add build and tests steps for the new Go minor version.&lt;/li&gt; 
 &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will remove support for Go version &lt;code&gt;N-2&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Official OpenTelemetry Collector distro binaries will be built with a release in the latest Go minor version series.&lt;/p&gt; 
&lt;h2&gt;Verifying the images signatures&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] To verify a signed artifact or blob, first &lt;a href="https://docs.sigstore.dev/cosign/system_config/installation/"&gt;install Cosign&lt;/a&gt;, then follow the instructions below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We are signing the images &lt;code&gt;otel/opentelemetry-collector&lt;/code&gt; and &lt;code&gt;otel/opentelemetry-collector-contrib&lt;/code&gt; using &lt;a href="https://github.com/sigstore/cosign"&gt;sigstore cosign&lt;/a&gt; tool and to verify the signatures you can run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cosign verify \
  --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/&amp;lt;RELEASE_TAG&amp;gt; \
  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
  &amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;RELEASE_TAG&amp;gt;&lt;/code&gt;: is the release that you want to validate&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;&lt;/code&gt;: is the image that you want to check&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cosign verify --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0 --certificate-oidc-issuer=https://token.actions.githubusercontent.com ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0

Verification for ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0 --
The following checks were performed on each of these signatures:
  - The cosign claims were validated
  - Existence of the claims in the transparency log was verified offline
  - The code-signing certificate was verified using trusted certificate authority certificates

[{"critical":{"identity":{"docker-reference":"ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"},"image":{"docker-manifest-digest":"sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a"},"type":"cosign container image signature"},"optional":{"1.3.6.1.4.1.57264.1.1":"https://token.actions.githubusercontent.com","1.3.6.1.4.1.57264.1.2":"push","1.3.6.1.4.1.57264.1.3":"9e20bf5c142e53070ccb8320a20315fffb41469e","1.3.6.1.4.1.57264.1.4":"Release Contrib","1.3.6.1.4.1.57264.1.5":"open-telemetry/opentelemetry-collector-releases","1.3.6.1.4.1.57264.1.6":"refs/tags/v0.98.0","Bundle":{"SignedEntryTimestamp":"MEUCIQDdlmNeKXQrHnonwWiHLhLLwFDVDNoOBCn2sv85J9P8mgIgDQFssWJImo1hn38VlojvSCL7Qq5FMmtnGu0oLsNdOm8=","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FVUNJUURFbDV6N0diMWRVYkM5KzR4c1VvbDhMcWZNV2hiTzhkdEpwdExyMXhUNWZnSWdTdEwwN1I0ZDA5R2x0ZkV0azJVbmlJSlJhQVdrVDJNWDVtRXJNSlplc2pRPSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaG9ha05EUW5jeVowRjNTVUpCWjBsVlNETkNjRFZTYlVSU1VpOXphMWg0YVdWUFlrcFhSbmRrUjNNNGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJOTlZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkUwMVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVZyWlRsSE1ubHNjMjkzYVZZMmRFOVZSazlRVVhNd2NXY3hTSEV5WmpsVUx6UTJZbEFLU1ZSNE0ybFRkVXBhV0hGc1dEUldWV2Q1VlZndmNVazJhblZ2WlZSVEswaG5XVUoyYjBseVNERTFUeTltZEd0VmVtRlBRMEpwZDNkbloxbHZUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZHTkRrMUNrdDFNRWhqTm5rek1rNUNTVTFFU21ReVpuWkxNMHBCZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwWjFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpoQ1NHOUJaVUZDTWtGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUlVOUlFVRkJVVVJCUldOM1VsRkpaMWg2Y2xaME0xQjRkU3ROWVZKRkswUkdORzlGUldNMGVucHphSGR1VDJ4bGMwZGlla2xwYnpNS0wxWmpRMGxSUkZNelJ6QmlNemRhYUhRNGFITjJUSEozYkc1UFFXYzJWRXh1U1ZSS09HTjNkMVEzTW5sMVRVdFlUbFJCUzBKblozRm9hMnBQVUZGUlJBcEJkMDV1UVVSQ2EwRnFRWGxFUkZSYVFqQlRPVXBGYkZsSGJuTnZWVmhLYm04MU5Fc3ZUVUZUTlN0RFFVMU9lbWRqUWpWQ2JrRk5OMWhNUjBoV01HRnhDbVpaY21weFkyOXFia3RaUTAxSFRWRnFjalpUVGt0Q2NVaEtZVGwxTDBSTlQySlpNa0pKTVV0ME4yTnhOemhFT0VOcVMzQmFVblJoYnpadFVVMUVZMk1LUms5M2VYWnhWalJPVld0dlpsRTlQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=","integratedTime":1712809120,"logIndex":84797936,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}},"Issuer":"https://token.actions.githubusercontent.com","Subject":"https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0","githubWorkflowName":"Release Contrib","githubWorkflowRef":"refs/tags/v0.98.0","githubWorkflowRepository":"open-telemetry/opentelemetry-collector-releases","githubWorkflowSha":"9e20bf5c142e53070ccb8320a20315fffb41469e","githubWorkflowTrigger":"push"}},{"critical":{"identity":{"docker-reference":"ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"},"image":{"docker-manifest-digest":"sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a"},"type":"cosign container image signature"},"optional":{"1.3.6.1.4.1.57264.1.1":"https://token.actions.githubusercontent.com","1.3.6.1.4.1.57264.1.2":"push","1.3.6.1.4.1.57264.1.3":"9e20bf5c142e53070ccb8320a20315fffb41469e","1.3.6.1.4.1.57264.1.4":"Release Contrib","1.3.6.1.4.1.57264.1.5":"open-telemetry/opentelemetry-collector-releases","1.3.6.1.4.1.57264.1.6":"refs/tags/v0.98.0","Bundle":{"SignedEntryTimestamp":"MEUCIQD1ehDnPO6fzoPIpeQ3KFuYHHBiX7RcEbpo9B2r7JAlzwIgZ1bsuQz7gAXbNU1IEdsTQgfAnRk3xVXO16GnKXM2sAQ=","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FUUNJRU92QXl0aE5RVGNvNHFMdG9GZUVOV0toNCtEK2I5SUxyYWhoa09WMmVBM0FpQjNEL2FpUGd1T05zUlB5alhaWk1hdnlCam0vMkVxNFNUMkZJWHozTnpyYWc9PSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaHBSRU5EUW5jMlowRjNTVUpCWjBsVlZuRlRLMnd4WXpoMWVFUktOWEppZDAxMlVuaDBSR3hXVW1nMGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJSZVZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkZGNVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVYyWlRCdGJrRkdRVzl1TVZoUGRIVlRMMXBNT0djeE5YUlJkVmxPTmtRemVUUlBWM0FLT1ZSTFMwUlVkRkJHU2xST1ZrWlJkVTlKUWs1bVJqWk1ORTlGYkd4dlZuUndaSE5uYjB0NVZGTnlPR3hTV1c1S1JIRlBRMEpwTUhkbloxbHdUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZDSzFkSENuVmtlRE5IZUcxS1RWUkpUVVJyYW13clJtdzFXRzkzZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwZDFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpsQ1NITkJaVkZDTTBGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUjJKSlFVRkJVVVJCUldkM1VtZEphRUZQZUZNM2RteDRjVzVGYTBKVVRtSlZVRUpsUkZSbk0waGtlRlkyY0cxWk9FdGliREV6TjNBS1lWUnViMEZwUlVFelMyMUxVbU5uYWxBeVQzSmxORVpyVm5vNU4xaENNWGRsUzBOeWFXazFTMWx2UTB0bVkxRktSREJSZDBObldVbExiMXBKZW1vd1JRcEJkMDFFWVVGQmQxcFJTWGhCUzNwcVpHMUZTV2gzV21Kb1lVSlNlalk1Y1N0MWVrNVZSMmxhYlRWVk4xcE5aWFJMUTFSM1VFTkljRkZQVldvdlVERkJDa2R0YWt3elJucFFObTVpYkRGblNYZFNUbXN6UkhkNWMwOUJUMHhoUVVoR09IaHhZV0ZzT0U5WGNGRmFhRGh4TTJVMVNVSmFXR0ZWVkhocFlWbGFTM29LUXpWS1RGVlNWbnBMTURsd04wVjBUd290TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=","integratedTime":1712809122,"logIndex":84797940,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}},"Issuer":"https://token.actions.githubusercontent.com","Subject":"https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0","githubWorkflowName":"Release Contrib","githubWorkflowRef":"refs/tags/v0.98.0","githubWorkflowRepository":"open-telemetry/opentelemetry-collector-releases","githubWorkflowSha":"9e20bf5c142e53070ccb8320a20315fffb41469e","githubWorkflowTrigger":"push"}}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] We started signing the images with release &lt;code&gt;v0.95.0&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;Here is a list of community roles with current and previous members:&lt;/p&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/codeboten"&gt;Alex Boten&lt;/a&gt;, Honeycomb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bogdandrutu"&gt;Bogdan Drutu&lt;/a&gt;, Snowflake&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmitryax"&gt;Dmitrii Anoshin&lt;/a&gt;, Splunk&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mx-psi"&gt;Pablo Baeyens&lt;/a&gt;, DataDog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the maintainer role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#maintainer"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Approvers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atoulme"&gt;Antoine Toulme&lt;/a&gt;, Splunk&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmathieu"&gt;Damien Mathieu&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evan-bradley"&gt;Evan Bradley&lt;/a&gt;, Dynatrace&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jade-guiton-dd"&gt;Jade Guiton&lt;/a&gt;, Datadog&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jmacd"&gt;Joshua MacDonald&lt;/a&gt;, Microsoft&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TylerHelmuth"&gt;Tyler Helmuth&lt;/a&gt;, Honeycomb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/songy23"&gt;Yang Song&lt;/a&gt;, Datadog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the approver role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#approver"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In addition to what is described at the organization-level, the SIG Collector requires all core approvers to take part in rotating the role of the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/release.md#release-manager"&gt;release manager&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andrzej-stencel"&gt;Andrzej Stencel&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sincejune"&gt;Chao Weng&lt;/a&gt;, AppDynamics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VihasMakwana"&gt;Vihas Makwana&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;Actively seeking contributors to triage issues&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the triager role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#triager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pjanotti"&gt;Paulo Janotti&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tigrannajaryan"&gt;Tigran Najaryan&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Approvers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aneurysm9"&gt;Anthony Mirabella&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djaglowski"&gt;Daniel Jaglowski&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/james-bebbington"&gt;James Bebbington&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jrcamp"&gt;Jay Camp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jpkrohling"&gt;Juraci Paixão Kröhling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nilebox"&gt;Nail Islamov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/owais"&gt;Owais Lone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rghetia"&gt;Rahul Patel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sjkaris"&gt;Steven Karis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alolita"&gt;Alolita Sharma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andrewhsu"&gt;Andrew Hsu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/punya"&gt;Punya Biswal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flands"&gt;Steve Flanders&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Thanks to all of our contributors!&lt;/h3&gt; 
&lt;a href="https://github.com/open-telemetry/opentelemetry-collector/graphs/contributors"&gt; &lt;img alt="Repo contributors" src="https://contrib.rocks/image?repo=open-telemetry/opentelemetry-collector" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>tulir/whatsmeow</title>
      <link>https://github.com/tulir/whatsmeow</link>
      <description>&lt;p&gt;Go library for the WhatsApp web multidevice API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whatsmeow&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow"&gt;&lt;img src="https://pkg.go.dev/badge/go.mau.fi/whatsmeow.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;whatsmeow is a Go library for the WhatsApp web multidevice API.&lt;/p&gt; 
&lt;h2&gt;Discussion&lt;/h2&gt; 
&lt;p&gt;Matrix room: &lt;a href="https://matrix.to/#/#whatsmeow:maunium.net"&gt;#whatsmeow:maunium.net&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For questions about the WhatsApp protocol (like how to send a specific type of message), you can also use the &lt;a href="https://github.com/tulir/whatsmeow/discussions/categories/whatsapp-protocol-q-a"&gt;WhatsApp protocol Q&amp;amp;A&lt;/a&gt; section on GitHub discussions.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow"&gt;godoc&lt;/a&gt; includes docs for all methods and event types. There's also a &lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow#example-package"&gt;simple example&lt;/a&gt; at the top.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Most core features are already present:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending messages to private chats and groups (both text and media)&lt;/li&gt; 
 &lt;li&gt;Receiving all messages&lt;/li&gt; 
 &lt;li&gt;Managing groups and receiving group change events&lt;/li&gt; 
 &lt;li&gt;Joining via invite messages, using and creating invite links&lt;/li&gt; 
 &lt;li&gt;Sending and receiving typing notifications&lt;/li&gt; 
 &lt;li&gt;Sending and receiving delivery and read receipts&lt;/li&gt; 
 &lt;li&gt;Reading and writing app state (contact list, chat pin/mute status, etc)&lt;/li&gt; 
 &lt;li&gt;Sending and handling retry receipts if message decryption fails&lt;/li&gt; 
 &lt;li&gt;Sending status messages (experimental, may not work for large contact lists)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Things that are not yet implemented:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending broadcast list messages (this is not supported on WhatsApp web either)&lt;/li&gt; 
 &lt;li&gt;Calls&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>gofiber/fiber</title>
      <link>https://github.com/gofiber/fiber</link>
      <description>&lt;p&gt;⚡️ Express inspired web framework written in Go&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://gofiber.io"&gt; 
  &lt;picture&gt; 
   &lt;source height="125" media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/gofiber/docs/master/static/img/logo-dark.svg" /&gt; 
   &lt;img height="125" alt="Fiber" src="https://raw.githubusercontent.com/gofiber/docs/master/static/img/logo.svg?sanitize=true" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://pkg.go.dev/github.com/gofiber/fiber/v3#pkg-overview"&gt; &lt;img src="https://img.shields.io/badge/%F0%9F%93%9A%20godoc-pkg-00ACD7.svg?color=00ACD7&amp;amp;style=flat-square" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/gofiber/fiber/v3"&gt; &lt;img src="https://img.shields.io/badge/%F0%9F%93%9D%20goreport-A%2B-75C46B?style=flat-square" /&gt; &lt;/a&gt; &lt;a href="https://codecov.io/gh/gofiber/fiber"&gt; &lt;img alt="Codecov" src="https://img.shields.io/codecov/c/github/gofiber/fiber?token=3Cr92CwaPQ&amp;amp;style=flat-square&amp;amp;logo=codecov&amp;amp;label=codecov" /&gt; &lt;/a&gt; &lt;a href="https://github.com/gofiber/fiber/actions?query=workflow%3ATest"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/gofiber/fiber/test.yml?branch=main&amp;amp;label=%F0%9F%A7%AA%20tests&amp;amp;style=flat-square&amp;amp;color=75C46B" /&gt; &lt;/a&gt; &lt;a href="https://docs.gofiber.io"&gt; &lt;img src="https://img.shields.io/badge/%F0%9F%92%A1%20fiber-docs-00ACD7.svg?style=flat-square" /&gt; &lt;/a&gt; &lt;a href="https://gofiber.io/discord"&gt; &lt;img src="https://img.shields.io/discord/704680098577514527?style=flat-square&amp;amp;label=%F0%9F%92%AC%20discord&amp;amp;color=00ACD7" /&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;p align="center"&gt; &lt;em&gt;&lt;b&gt;Fiber&lt;/b&gt; is an &lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt; inspired &lt;b&gt;web framework&lt;/b&gt; built on top of &lt;a href="https://github.com/valyala/fasthttp"&gt;Fasthttp&lt;/a&gt;, the &lt;b&gt;fastest&lt;/b&gt; HTTP engine for &lt;a href="https://go.dev/doc/"&gt;Go&lt;/a&gt;. Designed to &lt;b&gt;ease&lt;/b&gt; things up for &lt;b&gt;fast&lt;/b&gt; development with &lt;a href="https://docs.gofiber.io/#zero-allocation"&gt;&lt;b&gt;zero memory allocation&lt;/b&gt;&lt;/a&gt; and &lt;b&gt;performance&lt;/b&gt; in mind.&lt;/em&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;⚠️ &lt;strong&gt;Attention&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Fiber v3 is currently in beta and under active development. While it offers exciting new features, please note that it may not be stable for production use. We recommend sticking to the latest stable release (v2.x) for mission-critical applications. If you choose to use v3, be prepared for potential bugs and breaking changes. Always check the official documentation and release notes for updates and proceed with caution. Happy coding! 🚀&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;⚙️ Installation&lt;/h2&gt; 
&lt;p&gt;Fiber requires &lt;strong&gt;Go version &lt;code&gt;1.24&lt;/code&gt; or higher&lt;/strong&gt; to run. If you need to install or upgrade Go, visit the &lt;a href="https://go.dev/dl/"&gt;official Go download page&lt;/a&gt;. To start setting up your project, create a new directory for your project and navigate into it. Then, initialize your project with Go modules by executing the following command in your terminal:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go mod init github.com/your/repo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To learn more about Go modules and how they work, you can check out the &lt;a href="https://go.dev/blog/using-go-modules"&gt;Using Go Modules&lt;/a&gt; blog post.&lt;/p&gt; 
&lt;p&gt;After setting up your project, you can install Fiber with the &lt;code&gt;go get&lt;/code&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get -u github.com/gofiber/fiber/v3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command fetches the Fiber package and adds it to your project's dependencies, allowing you to start building your web applications with Fiber.&lt;/p&gt; 
&lt;h2&gt;⚡️ Quickstart&lt;/h2&gt; 
&lt;p&gt;Getting started with Fiber is easy. Here's a basic example to create a simple web server that responds with "Hello, World 👋!" on the root path. This example demonstrates initializing a new Fiber app, setting up a route, and starting the server.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
)

func main() {
    // Initialize a new Fiber app
    app := fiber.New()

    // Define a route for the GET method on the root path '/'
    app.Get("/", func(c fiber.Ctx) error {
        // Send a string response to the client
        return c.SendString("Hello, World 👋!")
    })

    // Start the server on port 3000
    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This simple server is easy to set up and run. It introduces the core concepts of Fiber: app initialization, route definition, and starting the server. Just run this Go program, and visit &lt;code&gt;http://localhost:3000&lt;/code&gt; in your browser to see the message.&lt;/p&gt; 
&lt;h2&gt;Zero Allocation&lt;/h2&gt; 
&lt;p&gt;Fiber is optimized for &lt;strong&gt;high-performance&lt;/strong&gt;, meaning values returned from &lt;strong&gt;fiber.Ctx&lt;/strong&gt; are &lt;strong&gt;not&lt;/strong&gt; immutable by default and &lt;strong&gt;will&lt;/strong&gt; be re-used across requests. As a rule of thumb, you &lt;strong&gt;must&lt;/strong&gt; only use context values within the handler and &lt;strong&gt;must not&lt;/strong&gt; keep any references. Once you return from the handler, any values obtained from the context will be re-used in future requests. Visit our &lt;a href="https://docs.gofiber.io/#zero-allocation"&gt;documentation&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;🤖 Benchmarks&lt;/h2&gt; 
&lt;p&gt;These tests are performed by &lt;a href="https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=ph&amp;amp;test=plaintext"&gt;TechEmpower&lt;/a&gt;. If you want to see all the results, please visit our &lt;a href="https://docs.gofiber.io/extra/benchmarks"&gt;Wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p float="left" align="middle"&gt; &lt;img src="https://raw.githubusercontent.com/gofiber/docs/master/static/img/plaintext.png" width="49%" /&gt; &lt;img src="https://raw.githubusercontent.com/gofiber/docs/master/static/img/json.png" width="49%" /&gt; &lt;/p&gt; 
&lt;h2&gt;🎯 Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Robust &lt;a href="https://docs.gofiber.io/guide/routing"&gt;Routing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Serve &lt;a href="https://docs.gofiber.io/api/app#static"&gt;Static Files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Extreme &lt;a href="https://docs.gofiber.io/extra/benchmarks"&gt;Performance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.gofiber.io/extra/benchmarks"&gt;Low Memory&lt;/a&gt; footprint&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.gofiber.io/api/ctx"&gt;API Endpoints&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.gofiber.io/category/-middleware"&gt;Middleware&lt;/a&gt; &amp;amp; &lt;a href="https://docs.gofiber.io/api/ctx#next"&gt;Next&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dev.to/koddr/welcome-to-fiber-an-express-js-styled-fastest-web-framework-written-with-on-golang-497"&gt;Rapid&lt;/a&gt; server-side programming&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gofiber/template"&gt;Template Engines&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gofiber/contrib/tree/main/websocket"&gt;WebSocket Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gofiber/contrib/tree/main/socketio"&gt;Socket.io Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gofiber/recipes/tree/master/sse"&gt;Server-Sent Events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.gofiber.io/api/middleware/limiter"&gt;Rate Limiter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;And much more, &lt;a href="https://docs.gofiber.io/"&gt;explore Fiber&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;💡 Philosophy&lt;/h2&gt; 
&lt;p&gt;New gophers that make the switch from &lt;a href="https://nodejs.org/en/about/"&gt;Node.js&lt;/a&gt; to &lt;a href="https://go.dev/doc/"&gt;Go&lt;/a&gt; are dealing with a learning curve before they can start building their web applications or microservices. Fiber, as a &lt;strong&gt;web framework&lt;/strong&gt;, was created with the idea of &lt;strong&gt;minimalism&lt;/strong&gt; and follows the &lt;strong&gt;UNIX way&lt;/strong&gt;, so that new gophers can quickly enter the world of Go with a warm and trusted welcome.&lt;/p&gt; 
&lt;p&gt;Fiber is &lt;strong&gt;inspired&lt;/strong&gt; by Express, the most popular web framework on the Internet. We combined the &lt;strong&gt;ease&lt;/strong&gt; of Express and &lt;strong&gt;raw performance&lt;/strong&gt; of Go. If you have ever implemented a web application in Node.js (&lt;em&gt;using Express or similar&lt;/em&gt;), then many methods and principles will seem &lt;strong&gt;very common&lt;/strong&gt; to you.&lt;/p&gt; 
&lt;p&gt;We &lt;strong&gt;listen&lt;/strong&gt; to our users in &lt;a href="https://github.com/gofiber/fiber/issues"&gt;issues&lt;/a&gt;, Discord &lt;a href="https://gofiber.io/discord"&gt;channel&lt;/a&gt; &lt;em&gt;and all over the Internet&lt;/em&gt; to create a &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;flexible&lt;/strong&gt; and &lt;strong&gt;friendly&lt;/strong&gt; Go web framework for &lt;strong&gt;any&lt;/strong&gt; task, &lt;strong&gt;deadline&lt;/strong&gt; and developer &lt;strong&gt;skill&lt;/strong&gt;! Just like Express does in the JavaScript world.&lt;/p&gt; 
&lt;h2&gt;⚠️ Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Due to Fiber's usage of unsafe, the library may not always be compatible with the latest Go version. Fiber v3 has been tested with Go version 1.24 or higher.&lt;/li&gt; 
 &lt;li&gt;Fiber does not natively expose the &lt;code&gt;net/http&lt;/code&gt; interfaces. When you need to integrate with that ecosystem, use the &lt;a href="https://docs.gofiber.io/next/middleware/adaptor/"&gt;adaptor middleware&lt;/a&gt; to bridge handlers and middlewares between Fiber and &lt;code&gt;net/http&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;net/http compatibility&lt;/h3&gt; 
&lt;p&gt;Fiber can run side by side with the standard library by using the &lt;a href="https://docs.gofiber.io/next/middleware/adaptor/"&gt;adaptor middleware&lt;/a&gt;. It converts handlers and middlewares in both directions and even lets you mount a Fiber app in a &lt;code&gt;net/http&lt;/code&gt; server.&lt;/p&gt; 
&lt;h2&gt;👀 Examples&lt;/h2&gt; 
&lt;p&gt;Listed below are some of the common examples. If you want to see more code examples, please visit our &lt;a href="https://github.com/gofiber/recipes"&gt;Recipes repository&lt;/a&gt; or visit our hosted &lt;a href="https://docs.gofiber.io"&gt;API documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;📖 &lt;a href="https://docs.gofiber.io/#basic-routing"&gt;&lt;strong&gt;Basic Routing&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "fmt"
    "log"

    "github.com/gofiber/fiber/v3"
)

func main() {
    app := fiber.New()

    // GET /api/register
    app.Get("/api/*", func(c fiber.Ctx) error {
        msg := fmt.Sprintf("✋ %s", c.Params("*"))
        return c.SendString(msg) // =&amp;gt; ✋ register
    })

    // GET /flights/LAX-SFO
    app.Get("/flights/:from-:to", func(c fiber.Ctx) error {
        msg := fmt.Sprintf("💸 From: %s, To: %s", c.Params("from"), c.Params("to"))
        return c.SendString(msg) // =&amp;gt; 💸 From: LAX, To: SFO
    })

    // GET /dictionary.txt
    app.Get("/:file.:ext", func(c fiber.Ctx) error {
        msg := fmt.Sprintf("📃 %s.%s", c.Params("file"), c.Params("ext"))
        return c.SendString(msg) // =&amp;gt; 📃 dictionary.txt
    })

    // GET /john/75
    app.Get("/:name/:age/:gender?", func(c fiber.Ctx) error {
        msg := fmt.Sprintf("👴 %s is %s years old", c.Params("name"), c.Params("age"))
        return c.SendString(msg) // =&amp;gt; 👴 john is 75 years old
    })

    // GET /john
    app.Get("/:name", func(c fiber.Ctx) error {
        msg := fmt.Sprintf("Hello, %s 👋!", c.Params("name"))
        return c.SendString(msg) // =&amp;gt; Hello john 👋!
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;📖 &lt;a href="https://docs.gofiber.io/api/app#name"&gt;&lt;strong&gt;Route Naming&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "encoding/json"
    "fmt"
    "log"

    "github.com/gofiber/fiber/v3"
)

func main() {
    app := fiber.New()

    app.Get("/api/*", func(c fiber.Ctx) error {
        msg := fmt.Sprintf("✋ %s", c.Params("*"))
        return c.SendString(msg) // =&amp;gt; ✋ register
    }).Name("api")

    route := app.GetRoute("api")

    data, _ := json.MarshalIndent(route, "", "  ")
    fmt.Println(string(data))
    // Prints:
    // {
    //    "method": "GET",
    //    "name": "api",
    //    "path": "/api/*",
    //    "params": [
    //      "*1"
    //    ]
    // }

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;📖 &lt;a href="https://docs.gofiber.io/api/app#static"&gt;&lt;strong&gt;Serving Static Files&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
    "github.com/gofiber/fiber/v3/middleware/static"
)

func main() {
    app := fiber.New()

    // Serve static files from the "./public" directory
    app.Get("/*", static.New("./public"))
    // =&amp;gt; http://localhost:3000/js/script.js
    // =&amp;gt; http://localhost:3000/css/style.css

    app.Get("/prefix*", static.New("./public"))
    // =&amp;gt; http://localhost:3000/prefix/js/script.js
    // =&amp;gt; http://localhost:3000/prefix/css/style.css

    // Serve a single file for any unmatched routes
    app.Get("*", static.New("./public/index.html"))
    // =&amp;gt; http://localhost:3000/any/path/shows/index.html

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;📖 &lt;a href="https://docs.gofiber.io/api/ctx#next"&gt;&lt;strong&gt;Middleware &amp;amp; Next&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "fmt"
    "log"

    "github.com/gofiber/fiber/v3"
)

func main() {
    app := fiber.New()

    // Middleware that matches any route
    app.Use(func(c fiber.Ctx) error {
        fmt.Println("🥇 First handler")
        return c.Next()
    })

    // Middleware that matches all routes starting with /api
    app.Use("/api", func(c fiber.Ctx) error {
        fmt.Println("🥈 Second handler")
        return c.Next()
    })

    // GET /api/list
    app.Get("/api/list", func(c fiber.Ctx) error {
        fmt.Println("🥉 Last handler")
        return c.SendString("Hello, World 👋!")
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;📚 Show more code examples&lt;/summary&gt; 
 &lt;h3&gt;Views Engines&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://docs.gofiber.io/api/fiber#config"&gt;Config&lt;/a&gt; 📖 &lt;a href="https://github.com/gofiber/template"&gt;Engines&lt;/a&gt; 📖 &lt;a href="https://docs.gofiber.io/api/ctx#render"&gt;Render&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Fiber defaults to the &lt;a href="https://pkg.go.dev/html/template/"&gt;html/template&lt;/a&gt; when no view engine is set.&lt;/p&gt; 
 &lt;p&gt;If you want to execute partials or use a different engine like &lt;a href="https://github.com/eknkc/amber"&gt;amber&lt;/a&gt;, &lt;a href="https://github.com/aymerick/raymond"&gt;handlebars&lt;/a&gt;, &lt;a href="https://github.com/cbroglie/mustache"&gt;mustache&lt;/a&gt;, or &lt;a href="https://github.com/Joker/jade"&gt;pug&lt;/a&gt;, etc., check out our &lt;a href="https://github.com/gofiber/template"&gt;Template&lt;/a&gt; package that supports multiple view engines.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
    "github.com/gofiber/template/pug"
)

func main() {
    // Initialize a new Fiber app with Pug template engine
    app := fiber.New(fiber.Config{
        Views: pug.New("./views", ".pug"),
    })

    // Define a route that renders the "home.pug" template
    app.Get("/", func(c fiber.Ctx) error {
        return c.Render("home", fiber.Map{
            "title": "Homepage",
            "year":  1999,
        })
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Grouping Routes into Chains&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://docs.gofiber.io/api/app#group"&gt;Group&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
)

func middleware(c fiber.Ctx) error {
    log.Println("Middleware executed")
    return c.Next()
}

func handler(c fiber.Ctx) error {
    return c.SendString("Handler response")
}

func main() {
    app := fiber.New()

    // Root API group with middleware
    api := app.Group("/api", middleware) // /api

    // API v1 routes
    v1 := api.Group("/v1", middleware) // /api/v1
    v1.Get("/list", handler)           // /api/v1/list
    v1.Get("/user", handler)           // /api/v1/user

    // API v2 routes
    v2 := api.Group("/v2", middleware) // /api/v2
    v2.Get("/list", handler)           // /api/v2/list
    v2.Get("/user", handler)           // /api/v2/user

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Middleware Logger&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://docs.gofiber.io/api/middleware/logger"&gt;Logger&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
    "github.com/gofiber/fiber/v3/middleware/logger"
)

func main() {
    app := fiber.New()

    // Use Logger middleware
    app.Use(logger.New())

    // Define routes
    app.Get("/", func(c fiber.Ctx) error {
        return c.SendString("Hello, Logger!")
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Cross-Origin Resource Sharing (CORS)&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://docs.gofiber.io/api/middleware/cors"&gt;CORS&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
    "github.com/gofiber/fiber/v3/middleware/cors"
)

func main() {
    app := fiber.New()

    // Use CORS middleware with default settings
    app.Use(cors.New())

    // Define routes
    app.Get("/", func(c fiber.Ctx) error {
        return c.SendString("CORS enabled!")
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Check CORS by passing any domain in &lt;code&gt;Origin&lt;/code&gt; header:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;curl -H "Origin: http://example.com" --verbose http://localhost:3000
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Custom 404 Response&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://docs.gofiber.io/api/ctx#status"&gt;HTTP Methods&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
)

func main() {
    app := fiber.New()

    // Define routes
    app.Get("/", static.New("./public"))

    app.Get("/demo", func(c fiber.Ctx) error {
        return c.SendString("This is a demo page!")
    })

    app.Post("/register", func(c fiber.Ctx) error {
        return c.SendString("Registration successful!")
    })

    // Middleware to handle 404 Not Found
    app.Use(func(c fiber.Ctx) error {
        return c.SendStatus(fiber.StatusNotFound) // =&amp;gt; 404 "Not Found"
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;JSON Response&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://docs.gofiber.io/api/ctx#json"&gt;JSON&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
)

type User struct {
    Name string `json:"name"`
    Age  int    `json:"age"`
}

func main() {
    app := fiber.New()

    // Route that returns a JSON object
    app.Get("/user", func(c fiber.Ctx) error {
        return c.JSON(&amp;amp;User{"John", 20})
        // =&amp;gt; {"name":"John", "age":20}
    })

    // Route that returns a JSON map
    app.Get("/json", func(c fiber.Ctx) error {
        return c.JSON(fiber.Map{
            "success": true,
            "message": "Hi John!",
        })
        // =&amp;gt; {"success":true, "message":"Hi John!"}
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;WebSocket Upgrade&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://github.com/gofiber/websocket"&gt;Websocket&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
    "github.com/gofiber/fiber/v3/middleware/websocket"
)

func main() {
    app := fiber.New()

    // WebSocket route
    app.Get("/ws", websocket.New(func(c *websocket.Conn) {
        defer c.Close()
        for {
            // Read message from client
            mt, msg, err := c.ReadMessage()
            if err != nil {
                log.Println("read:", err)
                break
            }
            log.Printf("recv: %s", msg)

            // Write message back to client
            err = c.WriteMessage(mt, msg)
            if err != nil {
                log.Println("write:", err)
                break
            }
        }
    }))

    log.Fatal(app.Listen(":3000"))
    // Connect via WebSocket at ws://localhost:3000/ws
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Server-Sent Events&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events"&gt;More Info&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "bufio"
    "fmt"
    "log"
    "time"

    "github.com/gofiber/fiber/v3"
    "github.com/valyala/fasthttp"
)

func main() {
    app := fiber.New()

    // Server-Sent Events route
    app.Get("/sse", func(c fiber.Ctx) error {
        c.Set("Content-Type", "text/event-stream")
        c.Set("Cache-Control", "no-cache")
        c.Set("Connection", "keep-alive")
        c.Set("Transfer-Encoding", "chunked")

        c.Context().SetBodyStreamWriter(func(w *bufio.Writer) {
            var i int
            for {
                i++
                msg := fmt.Sprintf("%d - the time is %v", i, time.Now())
                fmt.Fprintf(w, "data: Message: %s\n\n", msg)
                fmt.Println(msg)

                w.Flush()
                time.Sleep(5 * time.Second)
            }
        })

        return nil
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Recover Middleware&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://docs.gofiber.io/api/middleware/recover"&gt;Recover&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
    "github.com/gofiber/fiber/v3/middleware/recover"
)

func main() {
    app := fiber.New()

    // Use Recover middleware to handle panics gracefully
    app.Use(recover.New())

    // Route that intentionally panics
    app.Get("/", func(c fiber.Ctx) error {
        panic("normally this would crash your app")
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Using Trusted Proxy&lt;/h3&gt; 
 &lt;p&gt;📖 &lt;a href="https://docs.gofiber.io/api/fiber#config"&gt;Config&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/gofiber/fiber/v3"
)

func main() {
    app := fiber.New(fiber.Config{
        // Configure trusted proxies - WARNING: Only trust proxies you control
        // Using TrustProxy: true with unrestricted IPs can lead to IP spoofing
        TrustProxy: true,
        TrustProxyConfig: fiber.TrustProxyConfig{
            Proxies: []string{"10.0.0.0/8", "172.16.0.0/12"}, // Example: Internal network ranges only
        },
        ProxyHeader: fiber.HeaderXForwardedFor,
    })

    // Define routes
    app.Get("/", func(c fiber.Ctx) error {
        return c.SendString("Trusted Proxy Configured!")
    })

    log.Fatal(app.Listen(":3000"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;🧬 Internal Middleware&lt;/h2&gt; 
&lt;p&gt;Here is a list of middleware that are included within the Fiber framework.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Middleware&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/adaptor"&gt;adaptor&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Converter for net/http handlers to/from Fiber request handlers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/basicauth"&gt;basicauth&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Provides HTTP basic authentication. It calls the next handler for valid credentials and 401 Unauthorized for missing or invalid credentials.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/cache"&gt;cache&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Intercept and cache HTTP responses.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/compress"&gt;compress&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Compression middleware for Fiber, with support for &lt;code&gt;deflate&lt;/code&gt;, &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;brotli&lt;/code&gt; and &lt;code&gt;zstd&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/cors"&gt;cors&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Enable cross-origin resource sharing (CORS) with various options.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/csrf"&gt;csrf&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Protect from CSRF exploits.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/earlydata"&gt;earlydata&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Adds support for TLS 1.3's early data ("0-RTT") feature.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/encryptcookie"&gt;encryptcookie&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Encrypt middleware which encrypts cookie values.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/envvar"&gt;envvar&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Expose environment variables with providing an optional config.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/etag"&gt;etag&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Allows for caches to be more efficient and save bandwidth, as a web server does not need to resend a full response if the content has not changed.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/expvar"&gt;expvar&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Serves via its HTTP server runtime exposed variables in the JSON format.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/favicon"&gt;favicon&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Ignore favicon from logs or serve from memory if a file path is provided.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/healthcheck"&gt;healthcheck&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Liveness and Readiness probes for Fiber.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/helmet"&gt;helmet&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Helps secure your apps by setting various HTTP headers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/idempotency"&gt;idempotency&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Allows for fault-tolerant APIs where duplicate requests do not erroneously cause the same action performed multiple times on the server-side.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/keyauth"&gt;keyauth&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Adds support for key based authentication.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/limiter"&gt;limiter&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Adds Rate-limiting support to Fiber. Use to limit repeated requests to public APIs and/or endpoints such as password reset.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/logger"&gt;logger&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;HTTP request/response logger.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/pprof"&gt;pprof&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Serves runtime profiling data in pprof format.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/proxy"&gt;proxy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Allows you to proxy requests to multiple servers.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/recover"&gt;recover&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Recovers from panics anywhere in the stack chain and handles the control to the centralized ErrorHandler.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/redirect"&gt;redirect&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Redirect middleware.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/requestid"&gt;requestid&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a request ID to every request.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/rewrite"&gt;rewrite&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Rewrites the URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/session"&gt;session&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Session middleware. NOTE: This middleware uses our Storage package.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/skip"&gt;skip&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Skip middleware that skips a wrapped handler if a predicate is true.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/static"&gt;static&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Static middleware for Fiber that serves static files such as &lt;strong&gt;images&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, and &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gofiber/fiber/tree/main/middleware/timeout"&gt;timeout&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Adds a max time for a request and forwards to ErrorHandler if it is exceeded.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;🧬 External Middleware&lt;/h2&gt; 
&lt;p&gt;List of externally hosted middleware modules and maintained by the &lt;a href="https://github.com/orgs/gofiber/people"&gt;Fiber team&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Middleware&lt;/th&gt; 
   &lt;th align="left"&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/gofiber/contrib"&gt;contrib&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Third-party middlewares&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/gofiber/storage"&gt;storage&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Premade storage drivers that implement the Storage interface, designed to be used with various Fiber middlewares.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/gofiber/template"&gt;template&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;This package contains 9 template engines that can be used with Fiber.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;🕶️ Awesome List&lt;/h2&gt; 
&lt;p&gt;For more articles, middlewares, examples, or tools, check our &lt;a href="https://github.com/gofiber/awesome-fiber"&gt;awesome list&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;👍 Contribute&lt;/h2&gt; 
&lt;p&gt;If you want to say &lt;strong&gt;Thank You&lt;/strong&gt; and/or support the active development of &lt;code&gt;Fiber&lt;/code&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add a &lt;a href="https://github.com/gofiber/fiber/stargazers"&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt; 
 &lt;li&gt;Tweet about the project &lt;a href="https://x.com/intent/tweet?text=Fiber%20is%20an%20Express%20inspired%20%23web%20%23framework%20built%20on%20top%20of%20Fasthttp%2C%20the%20fastest%20HTTP%20engine%20for%20%23Go.%20Designed%20to%20ease%20things%20up%20for%20%23fast%20development%20with%20zero%20memory%20allocation%20and%20%23performance%20in%20mind%20%F0%9F%9A%80%20https%3A%2F%2Fgithub.com%2Fgofiber%2Ffiber"&gt;on your 𝕏 (Twitter)&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Write a review or tutorial on &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;, &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; or your personal blog.&lt;/li&gt; 
 &lt;li&gt;Support the project by donating a &lt;a href="https://buymeacoff.ee/fenny"&gt;cup of coffee&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;💻 Development&lt;/h2&gt; 
&lt;p&gt;To ensure your contributions are ready for a Pull Request, please use the following &lt;code&gt;Makefile&lt;/code&gt; commands. These tools help maintain code quality and consistency.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;make help&lt;/strong&gt;: Display available commands.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;make audit&lt;/strong&gt;: Conduct quality checks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;make benchmark&lt;/strong&gt;: Benchmark code performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;make coverage&lt;/strong&gt;: Generate test coverage report.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;make format&lt;/strong&gt;: Automatically format code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;make lint&lt;/strong&gt;: Run lint checks.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;make test&lt;/strong&gt;: Execute all tests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;make tidy&lt;/strong&gt;: Tidy dependencies.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Run these commands to ensure your code adheres to project standards and best practices.&lt;/p&gt; 
&lt;h2&gt;☕ Supporters&lt;/h2&gt; 
&lt;p&gt;Fiber is an open-source project that runs on donations to pay the bills, e.g., our domain name, GitBook, Netlify, and serverless hosting. If you want to support Fiber, you can ☕ &lt;a href="https://buymeacoff.ee/fenny"&gt;&lt;strong&gt;buy a coffee here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;User&lt;/th&gt; 
   &lt;th&gt;Donation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/204341?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/destari"&gt;@destari&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 10&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/63164982?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/dembygenesis"&gt;@dembygenesis&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/56607882?s=25" alt="thomasvvugt" style="width: 25px; height: 25px;" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/thomasvvugt"&gt;@thomasvvugt&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/27820675?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/hendratommy"&gt;@hendratommy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/1094221?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ekaputra07"&gt;@ekaputra07&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/194590?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/jorgefuertes"&gt;@jorgefuertes&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/186637?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/candidosales"&gt;@candidosales&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 5&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/29659953?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/l0nax"&gt;@l0nax&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/635852?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/bihe"&gt;@bihe&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/307334?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/justdave"&gt;@justdave&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/11155743?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/koddr"&gt;@koddr&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/29042462?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/lapolinar"&gt;@lapolinar&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/2978730?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/diegowifi"&gt;@diegowifi&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/44171355?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ssimk0"&gt;@ssimk0&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/5638101?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/raymayemir"&gt;@raymayemir&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/619996?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/melkorm"&gt;@melkorm&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/31022056?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/marvinjwendt"&gt;@marvinjwendt&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://avatars.githubusercontent.com/u/31921460?s=25" alt="" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/toishy"&gt;@toishy&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;☕ x 1&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;💻 Code Contributors&lt;/h2&gt; 
&lt;img src="https://opencollective.com/fiber/contributors.svg?width=890&amp;amp;button=false" alt="Code Contributors" style="max-width:100%;" /&gt; 
&lt;h2&gt;⭐️ Stargazers&lt;/h2&gt; 
&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=gofiber/fiber&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=gofiber/fiber&amp;amp;type=Date" /&gt; 
 &lt;img src="https://api.star-history.com/svg?repos=gofiber/fiber&amp;amp;type=Date" /&gt; 
&lt;/picture&gt; 
&lt;h2&gt;🧾 License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2019-present &lt;a href="https://github.com/fenny"&gt;Fenny&lt;/a&gt; and &lt;a href="https://github.com/gofiber/fiber/graphs/contributors"&gt;Contributors&lt;/a&gt;. &lt;code&gt;Fiber&lt;/code&gt; is free and open-source software licensed under the &lt;a href="https://github.com/gofiber/fiber/raw/main/LICENSE"&gt;MIT License&lt;/a&gt;. Official logo was created by &lt;a href="https://github.com/koddr"&gt;Vic Shóstak&lt;/a&gt; and distributed under &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons&lt;/a&gt; license (CC BY-SA 4.0 International).&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>