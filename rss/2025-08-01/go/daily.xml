<rss version="2.0">
  <channel>
    <title>GitHub Go Daily Trending</title>
    <description>Daily Trending of Go in GitHub</description>
    <pubDate>Thu, 31 Jul 2025 01:32:37 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>milvus-io/milvus</title>
      <link>https://github.com/milvus-io/milvus</link>
      <description>&lt;p&gt;Milvus is a high-performance, cloud-native vector database built for scalable vector ANN search&lt;/p&gt;&lt;hr&gt;&lt;img src="https://github.com/user-attachments/assets/51e33300-7f85-43ff-a05a-3a0317a961f3" alt="milvus banner"&gt; 
&lt;div class="column" align="middle"&gt; 
 &lt;a href="https://github.com/milvus-io/milvus/raw/master/LICENSE"&gt;&lt;img height="20" src="https://img.shields.io/github/license/milvus-io/milvus" alt="license"&gt;&lt;/a&gt; 
 &lt;a href="https://milvus.io/docs/install_standalone-docker.md"&gt;&lt;img src="https://img.shields.io/docker/pulls/milvusdb/milvus" alt="docker-pull-count"&gt;&lt;/a&gt; 
 &lt;a href="https://milvus.io/docs/roadmap.md"&gt;&lt;img src="https://img.shields.io/badge/2025-roadmap-orange" alt="fully-managed-milvus"&gt;&lt;/a&gt; 
 &lt;a href="https://cloud.zilliz.com/signup?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;&lt;img src="https://img.shields.io/badge/fully_managed-milvus-blue" alt="fully-managed-milvus"&gt;&lt;/a&gt; 
 &lt;a href="https://milvus.io/docs/tutorials-overview.md"&gt;&lt;img src="https://img.shields.io/badge/tutorials-green" alt="tutorials"&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/mKc3R95yE5"&gt;&lt;img height="20" src="https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white" alt="discord"&gt;&lt;/a&gt; 
 &lt;a href="https://x.com/milvusio"&gt;&lt;img src="https://img.shields.io/twitter/follow/milvusio" alt="twitter"&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is Milvus?&lt;/h2&gt; 
&lt;p&gt;üê¶ &lt;a href="https://milvus.io/"&gt;Milvus&lt;/a&gt; is a high-performance vector database built for scale. It powers AI applications by efficiently organizing and searching vast amounts of unstructured data, such as text, images, and multi-modal information.&lt;/p&gt; 
&lt;p&gt;üßë‚Äçüíª Written in Go and C++, Milvus implements hardware accelaration for CPU/GPU to achieve best-in-class vector search performance. Thanks to its &lt;a href="https://milvus.io/docs/overview.md#What-Makes-Milvus-so-Scalable"&gt;fully-distributed and K8s-native architecture&lt;/a&gt;, Milvus can scale horizontally, handle tens of thousands of search queries on billions of vectors, and keep data fresh with real-time streaming updates. Milvus also supports &lt;a href="https://milvus.io/docs/install_standalone-docker.md"&gt;Standalone mode&lt;/a&gt; for single machine deployment. &lt;a href="https://milvus.io/docs/milvus_lite.md"&gt;Milvus Lite&lt;/a&gt; is a lightweight version good for quickstart in python with &lt;code&gt;pip install&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Want to use Milvus with zero setup? Try out &lt;a href="https://cloud.zilliz.com/signup?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;Zilliz Cloud ‚òÅÔ∏è&lt;/a&gt; for free. Milvus is available as a fully managed service on Zilliz Cloud, with &lt;a href="https://zilliz.com/serverless?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;Serverless&lt;/a&gt;, &lt;a href="https://zilliz.com/cloud?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;Dedicated&lt;/a&gt; and &lt;a href="https://zilliz.com/bring-your-own-cloud?utm_source=partner&amp;amp;utm_medium=referral&amp;amp;utm_campaign=2024-11-04_web_github-readme_global"&gt;BYOC&lt;/a&gt; options available.&lt;/p&gt; 
&lt;p&gt;For questions about how to use Milvus, join the community on &lt;a href="https://discord.gg/33mfvwep3J"&gt;Discord&lt;/a&gt; to get help. For reporting problems, file bugs and feature requests in GitHub &lt;a href="https://github.com/milvus-io/milvus/issues"&gt;Issues&lt;/a&gt; or ask in &lt;a href="https://github.com/milvus-io/milvus/discussions"&gt;Discussions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Milvus open-source project is under &lt;a href="https://lfaidata.foundation/projects/milvus/"&gt;LF AI &amp;amp; Data Foundation&lt;/a&gt;, distributed with &lt;a href="https://github.com/milvus-io/milvus/raw/master/LICENSE"&gt;Apache 2.0&lt;/a&gt; License, with Zilliz as its major contributor.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;$ pip install -U pymilvus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This installs &lt;code&gt;pymilvus&lt;/code&gt;, the Python SDK for Milvus. Use &lt;code&gt;MilvusClient&lt;/code&gt; to create a client:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from pymilvus import MilvusClient
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pymilvus&lt;/code&gt; also includes Milvus Lite for quickstart. To create a local vector database, simply instantiate a client with a local file name for persisting data:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;client = MilvusClient("milvus_demo.db")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can also specify the credentials to connect to your deployed &lt;a href="https://milvus.io/docs/authenticate.md?tab=docker"&gt;Milvus server&lt;/a&gt; or &lt;a href="https://docs.zilliz.com/docs/quick-start"&gt;Zilliz Cloud&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-python"&gt;client = MilvusClient(
  uri="&amp;lt;endpoint_of_self_hosted_milvus_or_zilliz_cloud&amp;gt;",
  token="&amp;lt;username_and_password_or_zilliz_cloud_api_key&amp;gt;")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With the client, you can create collection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;client.create_collection(
    collection_name="demo_collection",
    dimension=768,  # The vectors we will use in this demo have 768 dimensions
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ingest data:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;res = client.insert(collection_name="demo_collection", data=data)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Perform vector search:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;query_vectors = embedding_fn.encode_queries(["Who is Alan Turing?", "What is AI?"])
res = client.search(
    collection_name="demo_collection",  # target collection
    data=query_vectors,  # a list of one or more query vectors, supports batch
    limit=2,  # how many results to return (topK)
    output_fields=["vector", "text", "subject"],  # what fields to return
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Why Milvus&lt;/h2&gt; 
&lt;p&gt;Milvus is designed to handle vector search at scale. It stores vectors, which are learned representations of unstructured data, together with other scalar data types such as integers, strings, and JSON objects. Users can conduct efficient vector search with metadata filtering or hybrid search. Here are why developers choose Milvus as the vector database for AI applications:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;High Performance at Scale and High Availability&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Milvus features a &lt;a href="https://milvus.io/docs/architecture_overview.md"&gt;distributed architecture&lt;/a&gt; that separates &lt;a href="https://milvus.io/docs/data_processing.md#Data-query"&gt;compute&lt;/a&gt; and &lt;a href="https://milvus.io/docs/data_processing.md#Data-insertion"&gt;storage&lt;/a&gt;. Milvus can horizontally scale and adapt to diverse traffic patterns, achieving optimal performance by independently increasing query nodes for read-heavy workload and data node for write-heavy workload. The stateless microservices on K8s allow &lt;a href="https://milvus.io/docs/coordinator_ha.md#Coordinator-HA"&gt;quick recovery&lt;/a&gt; from failure, ensuring high availability. The support for &lt;a href="https://milvus.io/docs/replica.md"&gt;replicas&lt;/a&gt; further enhances fault tolerance and throughput by loading data segments on multiple query nodes. See &lt;a href="https://zilliz.com/vector-database-benchmark-tool"&gt;benchmark&lt;/a&gt; for performance comparison.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Support for Various Vector Index Types and Hardware Acceleration&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Milvus separates the system and core vector search engine, allowing it to support all major vector index types that are optimized for different scenarios, including HNSW, IVF, FLAT (brute-force), SCANN, and DiskANN, with &lt;a href="https://milvus.io/docs/index.md?tab=floating#IVFPQ"&gt;quantization-based&lt;/a&gt; variations and &lt;a href="https://milvus.io/docs/mmap.md"&gt;mmap&lt;/a&gt;. Milvus optimizes vector search for advanced features such as &lt;a href="https://milvus.io/docs/scalar_index.md#Scalar-Index"&gt;metadata filtering&lt;/a&gt; and &lt;a href="https://milvus.io/docs/single-vector-search.md#Range-search"&gt;range search&lt;/a&gt;. Additionally, Milvus implements hardware acceleration to enhance vector search performance and supports GPU indexing, such as NVIDIA's &lt;a href="https://github.com/rapidsai/cuvs"&gt;CAGRA&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Flexible Multi-tenancy and Hot/Cold Storage&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Milvus supports &lt;a href="https://milvus.io/docs/multi_tenancy.md#Multi-tenancy-strategies"&gt;multi-tenancy&lt;/a&gt; through isolation at database, collection, partition, or partition key level. The flexible strategies allow a single cluster to handle hundreds to millions of tenants, also ensures optimized search performance and flexible access control. Milvus enhances cost-effectiveness with hot/cold storage. Frequently accessed hot data can be stored in memory or on SSDs for better performance, while less-accessed cold data is kept on slower, cost-effective storage. This mechanism can significantly reduce costs while maintaining high performance for critical tasks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Sparse Vector for Full Text Search and Hybrid Search&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In addition to semantic search through dense vector, Milvus also natively supports &lt;a href="https://milvus.io/docs/full-text-search.md"&gt;full text search&lt;/a&gt; with BM25 as well as learned sparse embedding such as SPLADE and BGE-M3. Users can store sparse vector and dense vector in the same collection, and define functions to rerank results from multiple search requests. See examples of &lt;a href="https://milvus.io/docs/full_text_search_with_milvus.md"&gt;Hybrid Search with semantic search + full text search&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Data Security and Fine-grain Access Control&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Milvus ensures data security by implementing mandatory user authentication, TLS encryption, and Role-Based Access Control (RBAC). User authentication ensures that only authorized users with valid credentials can access the database, while TLS encryption secures all communications within the network. Additionally, RBAC allows for fine-grained access control by assigning specific permissions to users based on their roles. These features make Milvus a robust and secure choice for enterprise applications, protecting sensitive data from unauthorized access and potential breaches.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Milvus is trusted by AI developers to build applications such as text and image search, Retrieval-Augmented Generation (RAG), and recommendation systems. Milvus powers &lt;a href="(https://milvus.io/use-cases)"&gt;many mission-critical business&lt;/a&gt; for startups and enterprises.&lt;/p&gt; 
&lt;h2&gt;Demos and Tutorials&lt;/h2&gt; 
&lt;p&gt;Here is a selection of demos and tutorials to show how to build various types of AI applications made with Milvus:&lt;/p&gt; 
&lt;p&gt;You can explore a comprehensive &lt;a href="https://milvus.io/docs/tutorials-overview.md"&gt;Tutorials Overview&lt;/a&gt; covering topics such as Retrieval-Augmented Generation (RAG), Semantic Search, Hybrid Search, Question Answering, Recommendation Systems, and various quick-start guides. These resources are designed to help you get started quickly and efficiently.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tutorial&lt;/th&gt; 
   &lt;th&gt;Use Case&lt;/th&gt; 
   &lt;th&gt;Related Milvus Features&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/build-rag-with-milvus.md"&gt;Build RAG with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RAG&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/how_to_enhance_your_rag.md"&gt;Advanced RAG Optimizations&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RAG&lt;/td&gt; 
   &lt;td&gt;vector search, full text search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/full_text_search_with_milvus.md"&gt;Full Text Search with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Text Search&lt;/td&gt; 
   &lt;td&gt;full text search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/hybrid_search_with_milvus.md"&gt;Hybrid Search with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Hybrid Search&lt;/td&gt; 
   &lt;td&gt;hybrid search, multi vector, dense embedding, sparse embedding&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/image_similarity_search.md"&gt;Image Search with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Semantic Search&lt;/td&gt; 
   &lt;td&gt;vector search, dynamic field&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/multimodal_rag_with_milvus.md"&gt;Multimodal Search using Multi Vectors&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Semantic Search&lt;/td&gt; 
   &lt;td&gt;multi vector, hybrid search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/movie_recommendation_with_milvus.md"&gt;Movie Recommendation with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Recommendation System&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/graph_rag_with_milvus.md"&gt;Graph RAG with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RAG&lt;/td&gt; 
   &lt;td&gt;graph search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/contextual_retrieval_with_milvus.md"&gt;Contextual Retrieval with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Quickstart&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/vector_visualization.md"&gt;Vector Visualization&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Quickstart&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/hdbscan_clustering_with_milvus.md"&gt;HDBSCAN Clustering with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Quickstart&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://milvus.io/docs/use_ColPali_with_milvus.md"&gt;Use ColPali for Multi-Modal Retrieval with Milvus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Quickstart&lt;/td&gt; 
   &lt;td&gt;vector search&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td width="30%"&gt; &lt;a href="https://milvus.io/milvus-demos"&gt; &lt;img src="https://assets.zilliz.com/image_search_59a64e4f22.gif"&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width="30%"&gt; &lt;a href="https://milvus.io/milvus-demos"&gt; &lt;img src="https://assets.zilliz.com/qa_df5ee7bd83.gif"&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td width="30%"&gt; &lt;a href="https://milvus.io/milvus-demos"&gt; &lt;img src="https://assets.zilliz.com/mole_search_76f8340572.gif"&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt; &lt;a href="https://milvus.io/milvus-demos"&gt;Image Search&lt;/a&gt; &lt;/th&gt; 
   &lt;th&gt; &lt;a href="https://milvus.io/milvus-demos"&gt;RAG&lt;/a&gt; &lt;/th&gt; 
   &lt;th&gt; &lt;a href="https://milvus.io/milvus-demos"&gt;Drug Discovery&lt;/a&gt; &lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Ecosystem and Integration&lt;/h2&gt; 
&lt;p&gt;Milvus integrates with a comprehensive suite of &lt;a href="https://milvus.io/docs/integrations_overview.md"&gt;AI development tools&lt;/a&gt;, such as LangChain, LlamaIndex, OpenAI and HuggingFace, making it an ideal vector store for GenAI applications such as Retrieval-Augmented Generation (RAG). Milvus works with both open-source embedding models and embedding service, in text, image and video modalities. Milvus also provides a convenient util &lt;a href="https://milvus.io/docs/embeddings.md"&gt;&lt;code&gt;pymilvus[model]&lt;/code&gt;&lt;/a&gt;, users can use the simple wrapper code to transform unstructured data into vector embeddings and leverage reranking models for optimized search results. The Milvus ecosystem also includes &lt;a href="https://github.com/zilliztech/attu?tab=readme-ov-file#attu"&gt;Attu&lt;/a&gt; for GUI-based administration, &lt;a href="https://milvus.io/docs/birdwatcher_overview.md"&gt;Birdwatcher&lt;/a&gt; for system debugging, &lt;a href="https://milvus.io/docs/monitor_overview.md"&gt;Prometheus/Grafana&lt;/a&gt; for monitoring, &lt;a href="https://milvus.io/docs/milvus-cdc-overview.md"&gt;Milvus CDC&lt;/a&gt; for data synchronization, &lt;a href="https://github.com/zilliztech/vts?tab=readme-ov-file#vts"&gt;VTS&lt;/a&gt; for data migration and data connectors for &lt;a href="https://milvus.io/docs/integrate_with_spark.md#Spark-Milvus-Connector-User-Guide"&gt;Spark&lt;/a&gt;, &lt;a href="https://github.com/zilliztech/kafka-connect-milvus?tab=readme-ov-file#kafka-connect-milvus-connector"&gt;Kafka&lt;/a&gt;, &lt;a href="https://fivetran.com/docs/destinations/milvus"&gt;Fivetran&lt;/a&gt;, and &lt;a href="https://milvus.io/docs/integrate_with_airbyte.md"&gt;Airbyte&lt;/a&gt; to build search pipelines.&lt;/p&gt; 
&lt;p&gt;Check out &lt;a href="https://milvus.io/docs/integrations_overview.md"&gt;https://milvus.io/docs/integrations_overview.md&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For guidance on installation, usage, deployment, and administration, check out &lt;a href="https://milvus.io/docs"&gt;Milvus Docs&lt;/a&gt;. For technical milestones and enhancement proposals, check out &lt;a href="https://github.com/milvus-io/milvus/issues"&gt;issues on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The Milvus open-source project accepts contribution from everyone. See &lt;a href="https://github.com/milvus-io/milvus/raw/master/CONTRIBUTING.md"&gt;Guidelines for Contributing&lt;/a&gt; for details on submitting patches and the development workflow. See our &lt;a href="https://github.com/milvus-io/community"&gt;community repository&lt;/a&gt; to learn about project governance and access more community resources.&lt;/p&gt; 
&lt;h3&gt;Build Milvus from Source Code&lt;/h3&gt; 
&lt;p&gt;Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Linux systems (Ubuntu 20.04 or later recommended):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;go: &amp;gt;= 1.21
cmake: &amp;gt;= 3.26.4
gcc: 9.5
python: &amp;gt; 3.8 and  &amp;lt;= 3.11
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MacOS systems with x86_64 (Big Sur 11.5 or later recommended):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;go: &amp;gt;= 1.21
cmake: &amp;gt;= 3.26.4
llvm: &amp;gt;= 15
python: &amp;gt; 3.8 and  &amp;lt;= 3.11
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MacOS systems with Apple Silicon (Monterey 12.0.1 or later recommended):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;go: &amp;gt;= 1.21 (Arch=ARM64)
cmake: &amp;gt;= 3.26.4
llvm: &amp;gt;= 15
python: &amp;gt; 3.8 and  &amp;lt;= 3.11
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Clone Milvus repo and build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone github repository.
$ git clone https://github.com/milvus-io/milvus.git

# Install third-party dependencies.
$ cd milvus/
$ ./scripts/install_deps.sh

# Compile Milvus.
$ make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For full instructions, see &lt;a href="https://github.com/milvus-io/milvus/raw/master/DEVELOPMENT.md"&gt;developer's documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join the Milvus community on &lt;a href="https://discord.gg/8uyFbECzPX"&gt;Discord&lt;/a&gt; to share your suggestions, advice, and questions with our engineering team.&lt;/p&gt; 
&lt;p&gt;To learn latest news about Milvus, follow us on social media:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/milvusio"&gt;X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/the-milvus-project"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCMCo_F7pKjMHBlfyxwOPw-g"&gt;Youtube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/@milvusio"&gt;Medium&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also check out our &lt;a href="https://milvus.io/docs/performance_faq.md"&gt;FAQ page&lt;/a&gt; to discover solutions or answers to your issues or questions, and subscribe to Milvus mailing lists:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://lists.lfai.foundation/g/milvus-tsc"&gt;Technical Steering Committee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://lists.lfai.foundation/g/milvus-technical-discuss"&gt;Technical Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://lists.lfai.foundation/g/milvus-announce"&gt;Announcement&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Reference&lt;/h2&gt; 
&lt;p&gt;Reference to cite when you use Milvus in a research paper:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@inproceedings{2021milvus,
  title={Milvus: A Purpose-Built Vector Data Management System},
  author={Wang, Jianguo and Yi, Xiaomeng and Guo, Rentong and Jin, Hai and Xu, Peng and Li, Shengjun and Wang, Xiangyu and Guo, Xiangzhou and Li, Chengming and Xu, Xiaohai and others},
  booktitle={Proceedings of the 2021 International Conference on Management of Data},
  pages={2614--2627},
  year={2021}
}

@article{2022manu,
  title={Manu: a cloud native vector database management system},
  author={Guo, Rentong and Luan, Xiaofan and Xiang, Long and Yan, Xiao and Yi, Xiaomeng and Luo, Jigao and Cheng, Qianya and Xu, Weizhi and Luo, Jiarui and Liu, Frank and others},
  journal={Proceedings of the VLDB Endowment},
  volume={15},
  number={12},
  pages={3548--3561},
  year={2022},
  publisher={VLDB Endowment}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- Do not remove start of hero-bot --&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/badge/all--contributors-414-orange"&gt;&lt;br&gt; &lt;a href="https://github.com/0xflotus"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26602940?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/9Eurydice9"&gt;&lt;img src="https://avatars.githubusercontent.com/u/220225099?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ABNER-1"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24547351?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Abhijnan-Bajpai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57059194?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Accagain2014"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9635216?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Ahmetyasin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34247619?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Ald392"&gt;&lt;img src="https://avatars.githubusercontent.com/u/166891594?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/AliDotS"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33119433?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/AllenYu1987"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12489985?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Anosh21"&gt;&lt;img src="https://avatars.githubusercontent.com/u/90505226?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/AnthonyTsu1984"&gt;&lt;img src="https://avatars.githubusercontent.com/u/115786031?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Aredcap"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40494761?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ArenaSu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21214629?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Armaggheddon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47779194?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/BUPTAnderson"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13449703?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Ben-Aaron-Bio-Rad"&gt;&lt;img src="https://avatars.githubusercontent.com/u/54123439?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Bennu-Li"&gt;&lt;img src="https://avatars.githubusercontent.com/u/53458891?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Biki-das"&gt;&lt;img src="https://avatars.githubusercontent.com/u/72331432?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/BossZou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40255591?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/CNLHC"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21005146?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/CaoHaiNam"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47685795?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Chisdo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/36720318?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ChunelFeng"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37905059?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/CocytusElias"&gt;&lt;img src="https://avatars.githubusercontent.com/u/79587688?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/CodeInDreams"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17664279?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/CsterKuroi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12230174?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Cupchen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34762375?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/DLT1412"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8294986?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/DanielHuang1983"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4417873?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Deep1Shikha"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47516502?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/DingQK"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58072531?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/DiptoChakrabarty"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45638240?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/EricStarer"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34002927?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Erzangel"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57399897?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Fierralin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8857059?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/FluorineDog"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15663612?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Gofastasf"&gt;&lt;img src="https://avatars.githubusercontent.com/u/159963288?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Gracieeea"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50101579?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/GuanyunFeng"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40229765?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/GuoRentong"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57477222?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/GuyKh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3136012?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Hard-Coder05"&gt;&lt;img src="https://avatars.githubusercontent.com/u/54059881?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Heisenberg-Y"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35055583?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/HesterG"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17645053?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Hoyaspark"&gt;&lt;img src="https://avatars.githubusercontent.com/u/88016041?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/HuaSheng2000"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34791273?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/HuangHua"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2274405?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/HurSungYun"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8033896?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Ice-YcY"&gt;&lt;img src="https://avatars.githubusercontent.com/u/85332705?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/JackLCL"&gt;&lt;img src="https://avatars.githubusercontent.com/u/53512883?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/JadeFlute0127"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35321989?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Janglearnstocode"&gt;&lt;img src="https://avatars.githubusercontent.com/u/204587742?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Javajava1"&gt;&lt;img src="https://avatars.githubusercontent.com/u/29594737?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Jeri-jose"&gt;&lt;img src="https://avatars.githubusercontent.com/u/72429659?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/JinHai-CN"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33142505?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/JsDove"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35839735?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Juneezee"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20135478?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/KubrickLiu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24795136?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/KumaJie"&gt;&lt;img src="https://avatars.githubusercontent.com/u/61139665?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/LeoReeYang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58654486?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Leslie-Wong-H"&gt;&lt;img src="https://avatars.githubusercontent.com/u/27696701?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Light-City"&gt;&lt;img src="https://avatars.githubusercontent.com/u/25699850?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Lin-gh-Saint"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64019322?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Linkwei"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30227152?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/LionelDong"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7533395?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/LocoRichard"&gt;&lt;img src="https://avatars.githubusercontent.com/u/81553353?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/LoveEachDay"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1573213?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/MrPresent-Han"&gt;&lt;img src="https://avatars.githubusercontent.com/u/116052805?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/NavanshGoel"&gt;&lt;img src="https://avatars.githubusercontent.com/u/74401713?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/NicoYuan1986"&gt;&lt;img src="https://avatars.githubusercontent.com/u/109071306?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/NotRyan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5742796?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/OxalisCu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64067746?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/PahudPlus"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64403786?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/PiercarloSlavazza"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3389306?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/PowderLi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/135960789?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/PwzXxm"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6563846?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/QipengZhou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5410298?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/RangerCD"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6872198?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Raysilience"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45241093?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Reidddddd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5352837?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ReigenAraka"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57280231?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Rijin-N"&gt;&lt;img src="https://avatars.githubusercontent.com/u/181319057?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/RosieZhang12"&gt;&lt;img src="https://avatars.githubusercontent.com/u/106942883?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/RyanWei"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9876551?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/SCKCZJ2018"&gt;&lt;img src="https://avatars.githubusercontent.com/u/29282370?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/SarthakJain26"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45846277?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Shawnzheng011019"&gt;&lt;img src="https://avatars.githubusercontent.com/u/88486803?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/SimFG"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21985684?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/SkyYang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4702509?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/SnowyOwl-KHY"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10348819?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/SpadeA-Tang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/71589810?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Sunt-ing"&gt;&lt;img src="https://avatars.githubusercontent.com/u/43040147?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/SwaggySong"&gt;&lt;img src="https://avatars.githubusercontent.com/u/36157116?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/TheShubhendra"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37535104?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Thor-ChenBiao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/104345188?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ThreadDao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/27288593?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ThyeeZz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/41352919?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Tlincy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11934432?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Tumao727"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20420181?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/UnyieldingOrca"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11794047?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Writer-X"&gt;&lt;img src="https://avatars.githubusercontent.com/u/80471801?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Writtic"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11371498?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Wuzhengda55"&gt;&lt;img src="https://avatars.githubusercontent.com/u/47274057?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Xieql"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45359033?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/XuPeng-SH"&gt;&lt;img src="https://avatars.githubusercontent.com/u/39627130?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/XuanYang-cn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51370125?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/YannFollet"&gt;&lt;img src="https://avatars.githubusercontent.com/u/131855179?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/YidaHu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13404367?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/YiyunNi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/74396087?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Yougigun"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9638997?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Yukikaze-CZR"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48198922?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/Zach41"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3941604?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ZhaoBQ"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35092554?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/aaronjin2010"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48044391?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/abd-770"&gt;&lt;img src="https://avatars.githubusercontent.com/u/92085834?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/akihoni"&gt;&lt;img src="https://avatars.githubusercontent.com/u/36330442?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/alexanderguzhva"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10901481?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/alwayslove2013"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22510720?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/anchun"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2356895?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/any35"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2082210?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/aoiasd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45024769?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/arijit-chowdhury-genea"&gt;&lt;img src="https://avatars.githubusercontent.com/u/104769013?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ashkrisk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/137368647?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ashyshyshyman"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50362613?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/avats-dev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35889327?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/avsolatorio"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3009596?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/balloon1995"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10573916?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/become-nice"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56624819?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/bigsheeper"&gt;&lt;img src="https://avatars.githubusercontent.com/u/42060877?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/binbin12580"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30914966?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/binbinlv"&gt;&lt;img src="https://avatars.githubusercontent.com/u/83755740?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/bjzhjing"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46661806?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/bo-huang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24309515?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/brandonbiggs"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34954680?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/brcarry"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58139344?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/brunocfnba"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7377163?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/bryanwux"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17968665?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/caesarjuly"&gt;&lt;img src="https://avatars.githubusercontent.com/u/927521?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/caosiyang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2155120?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/carawaylj"&gt;&lt;img src="https://avatars.githubusercontent.com/u/69145751?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/charleskakumanu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/62761315?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/charlspjohn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14850736?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/chasingegg"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18375889?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/chengpu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2233492?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/chenxingqiang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12387235?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/chinamcafee"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3439961?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/chuangfengwang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24692397?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/chyezh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20332315?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/cjrh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/480395?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/claireyuw"&gt;&lt;img src="https://avatars.githubusercontent.com/u/83751381?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/codacy-badger"&gt;&lt;img src="https://avatars.githubusercontent.com/u/23704769?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/codenoid"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14269809?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/codingjaguar"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7064054?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/congqixia"&gt;&lt;img src="https://avatars.githubusercontent.com/u/84113973?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/corest"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1071648?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/counter2015"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13608862?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/cqy123456"&gt;&lt;img src="https://avatars.githubusercontent.com/u/39671710?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/cuishuang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15921519?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/cxie"&gt;&lt;img src="https://avatars.githubusercontent.com/u/653101?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/cxytz01"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18002438?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/cydrain"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3992404?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/czpmango"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26356194?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/czs007"&gt;&lt;img src="https://avatars.githubusercontent.com/u/59249785?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/dandv"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33569?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/dariocurr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48800335?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/datenhahn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13999666?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/dd-He"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24242249?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/dddddai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/41563853?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/del-zhenwu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56623710?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/dengxiaohai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/137682492?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/disflyer"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22723892?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/divyaruhil"&gt;&lt;img src="https://avatars.githubusercontent.com/u/117009486?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/donno2048"&gt;&lt;img src="https://avatars.githubusercontent.com/u/61805754?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/drow931"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11514434?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/dvzubarev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14878830?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/dyhyfu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64584368?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/eddumelendez"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1810547?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ehooi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1306183?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/elfisworking"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37609214?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/eli-b"&gt;&lt;img src="https://avatars.githubusercontent.com/u/834999?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/elstic"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48523564?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/emmanuel-ferdman"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35470921?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/eolivelli"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9469110?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/erdustiggen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/25433850?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/feisiyicl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64510805?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/fengjun2016"&gt;&lt;img src="https://avatars.githubusercontent.com/u/23044049?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/filip-halt"&gt;&lt;img src="https://avatars.githubusercontent.com/u/81822489?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/filipecaixeta"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1094052?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/fishpenguin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/49153041?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/forsaken628"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18322364?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/foxspy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11503321?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/franciscojavierarceo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4163062?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/freestsoul"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3909908?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/gcmutator"&gt;&lt;img src="https://avatars.githubusercontent.com/u/134900551?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ggaaooppeenngg"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4769989?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/gifi-siby"&gt;&lt;img src="https://avatars.githubusercontent.com/u/176461003?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/git-hulk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4987594?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/godchen0212"&gt;&lt;img src="https://avatars.githubusercontent.com/u/67679556?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/gracezzzzz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56617657?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/grtoverflow"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8500564?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/gruebel"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33207684?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/guimou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3944034?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/gujun720"&gt;&lt;img src="https://avatars.githubusercontent.com/u/53246671?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/guoxiangzhou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/52496626?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/hadim"&gt;&lt;img src="https://avatars.githubusercontent.com/u/528003?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/haorenfsa"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15938850?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/hckex"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33862757?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/hedane"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12457872?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/henryoswald"&gt;&lt;img src="https://avatars.githubusercontent.com/u/343366?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/hishope"&gt;&lt;img src="https://avatars.githubusercontent.com/u/153272819?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/huanghaoyuanhhy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/103482615?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/huangjincheng2022"&gt;&lt;img src="https://avatars.githubusercontent.com/u/98305308?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ibrahimhaddad"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1656002?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/im-ajaymeena"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19550841?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ireneontheway5"&gt;&lt;img src="https://avatars.githubusercontent.com/u/75291211?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/iynewz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/81401074?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/izapolsk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21039333?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jackyu2020"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64533877?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jaelgu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/86251631?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jaime0815"&gt;&lt;img src="https://avatars.githubusercontent.com/u/4024711?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jeffoverflow"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24581746?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jenkoon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/27683687?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jennyli-z"&gt;&lt;img src="https://avatars.githubusercontent.com/u/93511422?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jhonroxton"&gt;&lt;img src="https://avatars.githubusercontent.com/u/105436184?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jiangke-sr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/68629395?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jiangyinzuo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40995042?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jiaoew1991"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2297455?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jielinxu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/52057195?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jingkl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34296482?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jjyaoao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/88936287?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jkx8fc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/31717785?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/joeyjooste"&gt;&lt;img src="https://avatars.githubusercontent.com/u/72280325?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/john-h-luo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/67673717?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jperez999"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37191411?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/juliens"&gt;&lt;img src="https://avatars.githubusercontent.com/u/195661?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/junjiejiangjjj"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14136703?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/jyc4617"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3044583?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/kartikcho"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48270786?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/kateshaowanjou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58837504?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/klboke"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18591662?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/laipz8200"&gt;&lt;img src="https://avatars.githubusercontent.com/u/16485841?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/laurazhao0611"&gt;&lt;img src="https://avatars.githubusercontent.com/u/192320184?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/lee-eve"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9720105?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/lentitude2tk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/108672767?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/leonardokidd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14940941?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/letian-jiang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/16740944?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/letme5"&gt;&lt;img src="https://avatars.githubusercontent.com/u/76860836?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/leykun10"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45382760?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/lhotari"&gt;&lt;img src="https://avatars.githubusercontent.com/u/66864?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/liliu-z"&gt;&lt;img src="https://avatars.githubusercontent.com/u/105927039?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/linhgao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/102851605?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/liyun95"&gt;&lt;img src="https://avatars.githubusercontent.com/u/105278390?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/locustbaby"&gt;&lt;img src="https://avatars.githubusercontent.com/u/21237232?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/loguo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/15364733?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/longjiquan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/31589260?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/lowener"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9810050?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/lsgrep"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3893940?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/lwglgy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26682620?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/madogar"&gt;&lt;img src="https://avatars.githubusercontent.com/u/36537062?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/maksspace"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9841409?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/matchyc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57976772?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/matrixji"&gt;&lt;img src="https://avatars.githubusercontent.com/u/183388?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/mausch"&gt;&lt;img src="https://avatars.githubusercontent.com/u/95194?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/mcamou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/87200?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/michaelkl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1443825?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/mihailyanchev"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34907806?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/mileyzjq"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37039827?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/milvus-ci-robot"&gt;&lt;img src="https://avatars.githubusercontent.com/u/87847967?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/mimoning"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19261942?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/moe-of-faith"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5696721?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/mohitreddy1996"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11742913?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/nameczz"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20559208?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/natoka"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1751024?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ncover21"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30241297?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/nexttonever"&gt;&lt;img src="https://avatars.githubusercontent.com/u/31059690?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/neza2017"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34152706?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/nianliuu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/136299351?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/nish112022"&gt;&lt;img src="https://avatars.githubusercontent.com/u/148342058?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/nustiueudinastea"&gt;&lt;img src="https://avatars.githubusercontent.com/u/588327?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/op-hunter"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5617677?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ownbylichaobao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37684963?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/panjf2000"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7496278?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/pengjeck"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14035577?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/phantom8548"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11576622?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/pingliu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6415493?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/pj1987111"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6268414?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ponponon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/38725104?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/preetham"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9149028?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/presburger"&gt;&lt;img src="https://avatars.githubusercontent.com/u/49336176?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/proost"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34047134?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/psc0606"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7888889?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/punkerpunker"&gt;&lt;img src="https://avatars.githubusercontent.com/u/54440025?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/qbzenker"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51972064?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/qixuan0212"&gt;&lt;img src="https://avatars.githubusercontent.com/u/135136620?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/rahulmistri1997"&gt;&lt;img src="https://avatars.githubusercontent.com/u/58909377?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/rashgaroth"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50513263?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/richzw"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1590890?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ronnie-llamado"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35092029?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sachitolani"&gt;&lt;img src="https://avatars.githubusercontent.com/u/146494073?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sageanya"&gt;&lt;img src="https://avatars.githubusercontent.com/u/37909674?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/saisona"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10884762?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/saivarunk"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2976867?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sarah-inkeep"&gt;&lt;img src="https://avatars.githubusercontent.com/u/129242944?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/scipe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3996622?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/scsven"&gt;&lt;img src="https://avatars.githubusercontent.com/u/100122127?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/seo-jinBro"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17746814?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/septemberfd"&gt;&lt;img src="https://avatars.githubusercontent.com/u/40378371?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/shana0325"&gt;&lt;img src="https://avatars.githubusercontent.com/u/33335490?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/shanghaikid"&gt;&lt;img src="https://avatars.githubusercontent.com/u/185051?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/shaoting-huang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/167743503?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/shengjh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46514371?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/shengjun1985"&gt;&lt;img src="https://avatars.githubusercontent.com/u/49774184?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/shiyu09"&gt;&lt;img src="https://avatars.githubusercontent.com/u/39143280?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/shiyu22"&gt;&lt;img src="https://avatars.githubusercontent.com/u/53459423?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/shunjiezhao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/90906581?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/siddarth99"&gt;&lt;img src="https://avatars.githubusercontent.com/u/38921750?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sileht"&gt;&lt;img src="https://avatars.githubusercontent.com/u/200878?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/simonwei97"&gt;&lt;img src="https://avatars.githubusercontent.com/u/119845914?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/siriusctrl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26541600?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/slobentanzer"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13223629?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/smackfu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1723952?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/smellthemoon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/64083300?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/snyk-bot"&gt;&lt;img src="https://avatars.githubusercontent.com/u/19733683?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/songxianj"&gt;&lt;img src="https://avatars.githubusercontent.com/u/107831450?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/soothing-rain"&gt;&lt;img src="https://avatars.githubusercontent.com/u/69466447?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/soulteary"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1500781?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sparknack"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22293270?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sre-ci-robot"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56469371?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sre-ro"&gt;&lt;img src="https://avatars.githubusercontent.com/u/93502486?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sreyan-ghosh"&gt;&lt;img src="https://avatars.githubusercontent.com/u/60854658?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ss892714028"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34635663?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/stacyli-0601"&gt;&lt;img src="https://avatars.githubusercontent.com/u/218570478?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/stephen37"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6506810?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/stevetracvc"&gt;&lt;img src="https://avatars.githubusercontent.com/u/70416691?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/stuartjing"&gt;&lt;img src="https://avatars.githubusercontent.com/u/3454260?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sunby"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9817127?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sutcalag"&gt;&lt;img src="https://avatars.githubusercontent.com/u/83750738?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/sworddish"&gt;&lt;img src="https://avatars.githubusercontent.com/u/219938?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/talentAN"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17634030?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/tasty-gumi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/95212988?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/taydy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/24822588?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/tbickford"&gt;&lt;img src="https://avatars.githubusercontent.com/u/814232?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/tedxu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/152654?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/tedyu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/235188?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/testwill"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8717479?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/thywdy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/56624359?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/timothycarambat"&gt;&lt;img src="https://avatars.githubusercontent.com/u/16845892?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/tinkerlin"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13817362?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/tinswzy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30112657?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/topikachu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/1520380?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/trovwu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/89676996?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/tuwchia"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13282807?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/ulovecode"&gt;&lt;img src="https://avatars.githubusercontent.com/u/30142181?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/unfode"&gt;&lt;img src="https://avatars.githubusercontent.com/u/95689995?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/virgo-o"&gt;&lt;img src="https://avatars.githubusercontent.com/u/138708600?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/vladwa"&gt;&lt;img src="https://avatars.githubusercontent.com/u/22994848?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/vsanna"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7834445?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/vtereshyn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/32247411?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wangting0128"&gt;&lt;img src="https://avatars.githubusercontent.com/u/26307815?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/water32"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13234561?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wayblink"&gt;&lt;img src="https://avatars.githubusercontent.com/u/18096561?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/weiliu1031"&gt;&lt;img src="https://avatars.githubusercontent.com/u/108661493?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/weishuo2"&gt;&lt;img src="https://avatars.githubusercontent.com/u/27938020?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wg1026688210"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14267759?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wh201906"&gt;&lt;img src="https://avatars.githubusercontent.com/u/62299611?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wscxyey"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48882296?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wwx441476"&gt;&lt;img src="https://avatars.githubusercontent.com/u/28601121?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wxyucs"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12595343?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wxywb"&gt;&lt;img src="https://avatars.githubusercontent.com/u/5432721?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/wzymumon"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46886508?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xaxys"&gt;&lt;img src="https://avatars.githubusercontent.com/u/28949072?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiangzhouguo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/93316470?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiaocai2333"&gt;&lt;img src="https://avatars.githubusercontent.com/u/46207236?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiaofan-luan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/83447078?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiaohu4313888"&gt;&lt;img src="https://avatars.githubusercontent.com/u/39088547?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiaowshi"&gt;&lt;img src="https://avatars.githubusercontent.com/u/45102896?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiedeyantu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/49781471?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xige-16"&gt;&lt;img src="https://avatars.githubusercontent.com/u/20124155?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xiyichan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34647972?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xlyslr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/14070517?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xudalin0609"&gt;&lt;img src="https://avatars.githubusercontent.com/u/35444753?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xuqiwe"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57252655?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/xzshinan"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7299894?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yah01"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12216890?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yahorbarkouski"&gt;&lt;img src="https://avatars.githubusercontent.com/u/94449298?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yamasite"&gt;&lt;img src="https://avatars.githubusercontent.com/u/10089260?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yanliang567"&gt;&lt;img src="https://avatars.githubusercontent.com/u/82361606?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yellow-shine"&gt;&lt;img src="https://avatars.githubusercontent.com/u/149367927?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yelusion2"&gt;&lt;img src="https://avatars.githubusercontent.com/u/97278661?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yhmo"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2282099?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yiuluchen"&gt;&lt;img src="https://avatars.githubusercontent.com/u/23047684?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yiwangdr"&gt;&lt;img src="https://avatars.githubusercontent.com/u/80064917?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yiwen92"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34636520?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yongpengli-z"&gt;&lt;img src="https://avatars.githubusercontent.com/u/103410837?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/youny626"&gt;&lt;img src="https://avatars.githubusercontent.com/u/9016120?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yuyicai"&gt;&lt;img src="https://avatars.githubusercontent.com/u/13033733?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/yxm1536"&gt;&lt;img src="https://avatars.githubusercontent.com/u/62009483?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zander-bobronnikov"&gt;&lt;img src="https://avatars.githubusercontent.com/u/183726703?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zc2638"&gt;&lt;img src="https://avatars.githubusercontent.com/u/28284116?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zc277584121"&gt;&lt;img src="https://avatars.githubusercontent.com/u/17022025?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zengxy"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11961641?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zerowe-seven"&gt;&lt;img src="https://avatars.githubusercontent.com/u/57790060?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhagnlu"&gt;&lt;img src="https://avatars.githubusercontent.com/u/11935707?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhang787jun"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51014996?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhanshuyou"&gt;&lt;img src="https://avatars.githubusercontent.com/u/7420640?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhanxu33"&gt;&lt;img src="https://avatars.githubusercontent.com/u/16716445?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhengbuqian"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12147173?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhenwu-cn"&gt;&lt;img src="https://avatars.githubusercontent.com/u/2993941?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhikunyao"&gt;&lt;img src="https://avatars.githubusercontent.com/u/129478994?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhoubo0317"&gt;&lt;img src="https://avatars.githubusercontent.com/u/51948620?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhuwenxing"&gt;&lt;img src="https://avatars.githubusercontent.com/u/12268675?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zhuyaguang"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8857976?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zjjzyl"&gt;&lt;img src="https://avatars.githubusercontent.com/u/6939141?v=4" width="30px"&gt;&lt;/a&gt; &lt;a href="https://github.com/zxf2017"&gt;&lt;img src="https://avatars.githubusercontent.com/u/29620478?v=4" width="30px"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- Do not remove end of hero-bot --&gt;</description>
    </item>
    
    <item>
      <title>grpc-ecosystem/grpc-gateway</title>
      <link>https://github.com/grpc-ecosystem/grpc-gateway</link>
      <description>&lt;p&gt;gRPC to JSON proxy generator following the gRPC HTTP spec&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;gRPC-Gateway&lt;/h1&gt; 
 &lt;p&gt; gRPC to JSON proxy generator following the gRPC HTTP spec &lt;/p&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/grpc-ecosystem/grpc-gateway/ci.yml?color=379c9c&amp;amp;label=build&amp;amp;logo=github&amp;amp;logoColor=ffffff&amp;amp;style=flat-square"&gt;&lt;/a&gt; 
 &lt;a href="https://app.slack.com/client/T029RQSE6/CBATURP1D"&gt;&lt;img src="https://img.shields.io/badge/slack-grpc--gateway-379c9c?logo=slack&amp;amp;logoColor=ffffff&amp;amp;style=flat-square"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;logoColor=ffffff&amp;amp;style=flat-square"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square"&gt;&lt;/a&gt; 
 &lt;a href="https://slsa.dev/images/gh-badge-level3.svg"&gt;&lt;img src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true"&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;The gRPC-Gateway is a plugin of the Google protocol buffers compiler &lt;a href="https://github.com/protocolbuffers/protobuf"&gt;protoc&lt;/a&gt;. It reads protobuf service definitions and generates a reverse-proxy server which translates a RESTful HTTP API into gRPC. This server is generated according to the &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46"&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotations in your service definitions.&lt;/p&gt; 
&lt;p&gt;This helps you provide your APIs in both gRPC and RESTful style at the same time.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/docs/assets/images/architecture_introduction_diagram.svg?sanitize=true"&gt; 
&lt;/div&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;p&gt;You can read our docs at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/"&gt;https://grpc-ecosystem.github.io/grpc-gateway/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Testimonials&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We use the gRPC-Gateway to serve millions of API requests per day, and have been since 2018 and through all of that, we have never had any issues with it.&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;- William Mill, &lt;a href="http://adhocteam.us/"&gt;Ad Hoc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;gRPC is great -- it generates API clients and server stubs in many programming languages, it is fast, easy-to-use, bandwidth-efficient and its design is combat-proven by Google. However, you might still want to provide a traditional RESTful JSON API as well. Reasons can range from maintaining backward-compatibility, supporting languages or clients that are not well supported by gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful JSON architecture.&lt;/p&gt; 
&lt;p&gt;This project aims to provide that HTTP+JSON interface to your gRPC service. A small amount of configuration in your service to attach HTTP semantics is all that's needed to generate a reverse-proxy with this library.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Compile from source&lt;/h3&gt; 
&lt;p&gt;The following instructions assume you are using &lt;a href="https://go.dev/wiki/Modules"&gt;Go Modules&lt;/a&gt; for dependency management. Use a &lt;a href="https://go.dev/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module"&gt;tool dependency&lt;/a&gt; to track the versions of the following executable packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// +build tools

package tools

import (
    _ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway"
    _ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2"
    _ "google.golang.org/grpc/cmd/protoc-gen-go-grpc"
    _ "google.golang.org/protobuf/cmd/protoc-gen-go"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run &lt;code&gt;go mod tidy&lt;/code&gt; to resolve the versions. Install by running&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install \
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \
    google.golang.org/protobuf/cmd/protoc-gen-go \
    google.golang.org/grpc/cmd/protoc-gen-go-grpc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Using the &lt;code&gt;tool&lt;/code&gt; Directive in Go 1.24&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Starting from Go 1.24, the &lt;code&gt;tool&lt;/code&gt; directive in &lt;code&gt;go.mod&lt;/code&gt; provides a structured way to track and manage executable dependencies. This replaces the previous workaround of using a separate &lt;code&gt;tools.go&lt;/code&gt; file with blank imports.&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Tracking Tools in &lt;code&gt;go.mod&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Instead of manually importing tool dependencies in a Go source file, you can now use the &lt;code&gt;tool&lt;/code&gt; directive in &lt;code&gt;go.mod&lt;/code&gt; to declare the tools your project depends on. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;module tools

go 1.24

tool (
	github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
	github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
	google.golang.org/grpc/cmd/protoc-gen-go-grpc
	google.golang.org/protobuf/cmd/protoc-gen-go
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;Managing Tool Dependencies&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;To add tools to your module, use the &lt;code&gt;-tool&lt;/code&gt; flag with &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
go get -tool google.golang.org/protobuf/cmd/protoc-gen-go
go get -tool google.golang.org/grpc/cmd/protoc-gen-go-grpc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This automatically updates &lt;code&gt;go.mod&lt;/code&gt;, adding the tools under the &lt;code&gt;tool&lt;/code&gt; directive along with &lt;code&gt;require&lt;/code&gt; statements to ensure version tracking.&lt;/p&gt; 
&lt;h3&gt;Install Tools&lt;/h3&gt; 
&lt;p&gt;Once the tool dependencies are properly recorded in the &lt;code&gt;go.mod&lt;/code&gt; file, simply execute the following command in the root directory of your project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install tool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Download the binaries&lt;/h3&gt; 
&lt;p&gt;You may alternatively download the binaries from the &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases/latest"&gt;GitHub releases page&lt;/a&gt;. We generate &lt;a href="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/slsa.dev"&gt;SLSA3 signatures&lt;/a&gt; using the OpenSSF's &lt;a href="https://github.com/slsa-framework/slsa-github-generator"&gt;slsa-framework/slsa-github-generator&lt;/a&gt; during the release process. To verify a release binary:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the verification tool from &lt;a href="https://github.com/slsa-framework/slsa-verifier#installation"&gt;slsa-framework/slsa-verifier#installation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Download the provenance file &lt;code&gt;attestation.intoto.jsonl&lt;/code&gt; from the &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases/latest"&gt;GitHub releases page&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Run the verifier:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;slsa-verifier -artifact-path &amp;lt;the-binary&amp;gt; -provenance attestation.intoto.jsonl -source github.com/grpc-ecosystem/grpc-gateway -tag &amp;lt;the-tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, see the section on remotely managed plugin versions below.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;1.Define your &lt;a href="https://grpc.io/docs/"&gt;gRPC&lt;/a&gt; service using protocol buffers&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-protobuf"&gt; syntax = "proto3";
 package your.service.v1;
 option go_package = "github.com/yourorg/yourprotos/gen/go/your/service/v1";

 message StringMessage {
   string value = 1;
 }

 service YourService {
   rpc Echo(StringMessage) returns (StringMessage) {}
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Generate gRPC stubs&lt;/h3&gt; 
&lt;p&gt;This step generates the gRPC stubs that you can use to implement the service and consume from clients:&lt;/p&gt; 
&lt;p&gt;Here's an example &lt;code&gt;buf.gen.yaml&lt;/code&gt; you can use to generate the stubs with &lt;a href="https://github.com/bufbuild/buf"&gt;buf&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With this file in place, you can generate your files using &lt;code&gt;buf generate&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For a complete example of using &lt;code&gt;buf generate&lt;/code&gt; to generate protobuf stubs, see &lt;a href="https://github.com/johanbrandhorst/grpc-gateway-boilerplate"&gt;the boilerplate repo&lt;/a&gt;. For more information on generating the stubs with buf, see &lt;a href="https://docs.buf.build/generate-usage"&gt;the official documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, here's an example of what a command might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . \
    --go_out ./gen/go/ --go_opt paths=source_relative \
    --go-grpc_out ./gen/go/ --go-grpc_opt paths=source_relative \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. Implement your service in gRPC as usual.&lt;/h3&gt; 
&lt;h3&gt;4. Generate reverse-proxy using &lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;At this point, you have 3 options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;no further modifications, use the default mapping to HTTP semantics (method, path, etc.) 
  &lt;ul&gt; 
   &lt;li&gt;this will work on any &lt;code&gt;.proto&lt;/code&gt; file, but will not allow setting HTTP paths, request parameters or similar&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;additional &lt;code&gt;.proto&lt;/code&gt; modifications to use a custom mapping 
  &lt;ul&gt; 
   &lt;li&gt;relies on parameters in the &lt;code&gt;.proto&lt;/code&gt; file to set custom HTTP mappings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;no &lt;code&gt;.proto&lt;/code&gt; modifications, but use an external configuration file 
  &lt;ul&gt; 
   &lt;li&gt;relies on an external configuration file to set custom HTTP mappings&lt;/li&gt; 
   &lt;li&gt;mostly useful when the source proto file isn't under your control&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1. Using the default mapping&lt;/h4&gt; 
&lt;p&gt;This requires no additional modification to the &lt;code&gt;.proto&lt;/code&gt; file but does require enabling a specific option when executing the plugin. The &lt;code&gt;generate_unbound_methods&lt;/code&gt; should be enabled.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - generate_unbound_methods=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    --grpc-gateway_opt generate_unbound_methods=true \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. With custom annotations&lt;/h4&gt; 
&lt;p&gt;Add a &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46"&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotation to your .proto file&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt; syntax = "proto3";
 package your.service.v1;
 option go_package = "github.com/yourorg/yourprotos/gen/go/your/service/v1";
+
+import "google/api/annotations.proto";
+
 message StringMessage {
   string value = 1;
 }

 service YourService {
-  rpc Echo(StringMessage) returns (StringMessage) {}
+  rpc Echo(StringMessage) returns (StringMessage) {
+    option (google.api.http) = {
+      post: "/v1/example/echo"
+      body: "*"
+    };
+  }
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You will need to provide the required third party protobuf files to the protobuf compiler. If you are using &lt;a href="https://github.com/bufbuild/buf"&gt;buf&lt;/a&gt;, this dependency can be added to the &lt;code&gt;deps&lt;/code&gt; array in your &lt;code&gt;buf.yaml&lt;/code&gt; under the name &lt;code&gt;buf.build/googleapis/googleapis&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
name: buf.build/yourorg/myprotos
deps:
  - buf.build/googleapis/googleapis
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Always run &lt;code&gt;buf dep update&lt;/code&gt; after adding a dependency to your &lt;code&gt;buf.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/examples/internal/proto/examplepb/a_bit_of_everything.proto"&gt;a_bit_of_everything.proto&lt;/a&gt; for examples of more annotations you can add to customize gateway behavior and generated OpenAPI output.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you need to ensure the required dependencies are available to the compiler at compile time. These can be found by manually cloning and copying the relevant files from the &lt;a href="https://github.com/googleapis/googleapis"&gt;googleapis repository&lt;/a&gt;, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running. The files you will need are:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;google/api/annotations.proto
google/api/field_behavior.proto
google/api/http.proto
google/api/httpbody.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here's what a &lt;code&gt;protoc&lt;/code&gt; execution might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. External configuration&lt;/h4&gt; 
&lt;p&gt;If you do not want to (or cannot) modify the proto file for use with gRPC-Gateway you can alternatively use an external &lt;a href="https://cloud.google.com/endpoints/docs/grpc/grpc-service-config"&gt;gRPC Service Configuration&lt;/a&gt; file. &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/"&gt;Check our documentation&lt;/a&gt; for more information. This is best combined with the &lt;code&gt;standalone=true&lt;/code&gt; option to generate a file that can live in its own package, separate from the files generated by the source protobuf file.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - grpc_api_configuration=path/to/config.yaml
      - standalone=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    --grpc-gateway_opt grpc_api_configuration=path/to/config.yaml \
    --grpc-gateway_opt standalone=true \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;5. Write an entrypoint for the HTTP reverse-proxy server&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
  "context"
  "flag"
  "net/http"

  "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
  "google.golang.org/grpc"
  "google.golang.org/grpc/credentials/insecure"
  "google.golang.org/grpc/grpclog"

  gw "github.com/yourorg/yourrepo/proto/gen/go/your/service/v1/your_service"  // Update
)

var (
  // command-line options:
  // gRPC server endpoint
  grpcServerEndpoint = flag.String("grpc-server-endpoint",  "localhost:9090", "gRPC server endpoint")
)

func run() error {
  ctx := context.Background()
  ctx, cancel := context.WithCancel(ctx)
  defer cancel()

  // Register gRPC server endpoint
  // Note: Make sure the gRPC server is running properly and accessible
  mux := runtime.NewServeMux()
  opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
  err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)
  if err != nil {
    return err
  }

  // Start HTTP server (and proxy calls to gRPC server endpoint)
  return http.ListenAndServe(":8081", mux)
}

func main() {
  flag.Parse()

  if err := run(); err != nil {
    grpclog.Fatal(err)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6. (Optional) Generate OpenAPI definitions using &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - generate_unbound_methods=true
  - local: protoc-gen-openapiv2
    out: gen/go
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use the custom protobuf annotations supported by &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;, we need another dependency added to our protobuf generation step. If you are using &lt;code&gt;buf&lt;/code&gt;, you can add the &lt;code&gt;buf.build/grpc-ecosystem/grpc-gateway&lt;/code&gt; dependency to your &lt;code&gt;deps&lt;/code&gt; array:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
name: buf.build/yourorg/myprotos
deps:
  - buf.build/googleapis/googleapis
  - buf.build/grpc-ecosystem/grpc-gateway
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the swagger file):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --openapiv2_out ./gen/openapiv2 \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you will need to copy the protobuf files from the &lt;code&gt;protoc-gen-openapiv2/options&lt;/code&gt; directory of this repository, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running.&lt;/p&gt; 
&lt;p&gt;Note that this plugin also supports generating OpenAPI definitions for unannotated methods; use the &lt;code&gt;generate_unbound_methods&lt;/code&gt; option to enable this.&lt;/p&gt; 
&lt;p&gt;It is possible with the HTTP mapping for a gRPC service method to create duplicate mappings with the only difference being constraints on the path parameter.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;/v1/{name=projects/*}&lt;/code&gt; and &lt;code&gt;/v1/{name=organizations/*}&lt;/code&gt; both become &lt;code&gt;/v1/{name}&lt;/code&gt;. When this occurs the plugin will rename the path parameter with a "_1" (or "_2" etc) suffix to differentiate the different operations. So in the above example, the 2nd path would become &lt;code&gt;/v1/{name_1=organizations/*}&lt;/code&gt;. This can also cause OpenAPI clients to URL encode the "/" that is part of the path parameter as that is what OpenAPI defines in the specification. To allow gRPC gateway to accept the URL encoded slash and still route the request, use the UnescapingModeAllCharacters or UnescapingModeLegacy (which is the default currently though may change in future versions). See &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/customizing_your_gateway/"&gt;Customizing Your Gateway&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Usage with remote plugins&lt;/h2&gt; 
&lt;p&gt;As an alternative to all of the above, you can use &lt;code&gt;buf&lt;/code&gt; with &lt;a href="https://buf.build/docs/bsr/remote-plugins/usage"&gt;remote plugins&lt;/a&gt; to manage plugin versions and generation. An example &lt;code&gt;buf.gen.yaml&lt;/code&gt; using remote plugin generation looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - remote: buf.build/protocolbuffers/go:v1.31.0
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc/go:v1.3.0
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc-ecosystem/gateway:v2.16.2
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc-ecosystem/openapiv2:v2.16.2
    out: gen/openapiv2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This requires no local installation of any plugins. Be careful to use the same version of the generator as the runtime library, i.e. if using &lt;code&gt;v2.16.2&lt;/code&gt;, run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go get github.com/grpc-ecosystem/grpc-gateway/v2@v2.16.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get the same version of the runtime in your &lt;code&gt;go.mod&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note that usage of remote plugins is incompatible with usage of external configuration files like &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/#using-an-external-configuration-file"&gt;grpc_api_configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Video intro&lt;/h2&gt; 
&lt;p&gt;This GopherCon UK 2019 presentation from our maintainer &lt;a href="https://github.com/johanbrandhorst"&gt;@JohanBrandhorst&lt;/a&gt; provides a good intro to using the gRPC-Gateway. It uses the following boilerplate repo as a base: &lt;a href="https://github.com/johanbrandhorst/grpc-gateway-boilerplate"&gt;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&lt;/a&gt;.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.youtube.com/watch?v=Pq1paKC-fXk"&gt; &lt;img src="https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Parameters and flags&lt;/h2&gt; 
&lt;p&gt;When using &lt;code&gt;buf&lt;/code&gt; to generate stubs, flags and parameters are passed through the &lt;code&gt;opt&lt;/code&gt; field in your &lt;code&gt;buf.gen.yaml&lt;/code&gt; file, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - grpc_api_configuration=path/to/config.yaml
      - standalone=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;During code generation with &lt;code&gt;protoc&lt;/code&gt;, flags to gRPC-Gateway tools must be passed through &lt;code&gt;protoc&lt;/code&gt; using one of 2 patterns:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;as part of the &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out&lt;/code&gt; &lt;code&gt;protoc&lt;/code&gt; parameter: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out=&amp;lt;flags&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;--grpc-gateway_out=repeated_path_param_separator=ssv:.
--openapiv2_out=repeated_path_param_separator=ssv:.
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;using additional &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt&lt;/code&gt; parameters: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt=&amp;lt;flag&amp;gt;[,&amp;lt;flag&amp;gt;]*&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;--grpc-gateway_opt repeated_path_param_separator=ssv
--openapiv2_opt repeated_path_param_separator=ssv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;More examples&lt;/h2&gt; 
&lt;p&gt;More examples are available under the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.proto&lt;/code&gt;: service definition 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.pb.go&lt;/code&gt;: [generated] stub of the service&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/uannotated_echo_service.pb.gw.go&lt;/code&gt;: [generated] reverse proxy for the service&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/unannotated_echo_service.yaml&lt;/code&gt;: gRPC API Configuration for &lt;code&gt;unannotated_echo_service.proto&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server/main.go&lt;/code&gt;: service implementation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;main.go&lt;/code&gt;: entrypoint of the generated reverse proxy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To use the same port for custom HTTP handlers (e.g. serving &lt;code&gt;swagger.json&lt;/code&gt;), gRPC-Gateway, and a gRPC server, see &lt;a href="https://github.com/philips/grpc-gateway-example/raw/master/cmd/serve.go"&gt;this example by CoreOS&lt;/a&gt; (and its accompanying &lt;a href="https://web.archive.org/web/20201112010739/https://coreos.com/blog/grpc-protobufs-swagger.html"&gt;blog post&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/mynalabsai/grpc_gateway_media_example"&gt;This example by neiro.ai&lt;/a&gt; (and its accompanying &lt;a href="https://medium.com/neiro-ai/grpc-gateway-for-media-api-by-neiro-9033caab12c8"&gt;blog post&lt;/a&gt;) shows how mediafiles using &lt;code&gt;multipart/form-data&lt;/code&gt; can be integrated into rpc messages using a middleware.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Supported&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generating JSON API handlers.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the request body.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the request path.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the query string.&lt;/li&gt; 
 &lt;li&gt;Enum fields in the path parameter (including repeated enum fields).&lt;/li&gt; 
 &lt;li&gt;Mapping streaming APIs to newline-delimited JSON streams.&lt;/li&gt; 
 &lt;li&gt;Mapping HTTP headers with &lt;code&gt;Grpc-Metadata-&lt;/code&gt; prefix to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Optionally emitting API definitions for &lt;a href="https://swagger.io/docs/specification/2-0/basic-structure/"&gt;OpenAPI (Swagger) v2&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Setting &lt;a href="https://github.com/grpc/grpc/raw/master/doc/PROTOCOL-HTTP2.md#requests"&gt;gRPC timeouts&lt;/a&gt; through inbound HTTP &lt;code&gt;Grpc-Timeout&lt;/code&gt; header.&lt;/li&gt; 
 &lt;li&gt;Partial support for &lt;a href="https://cloud.google.com/endpoints/docs/grpc/grpc-service-config"&gt;gRPC API Configuration&lt;/a&gt; files as an alternative to annotation.&lt;/li&gt; 
 &lt;li&gt;Automatically translating PATCH requests into Field Mask gRPC requests. See &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/"&gt;the docs&lt;/a&gt; for more information.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;No plan to support&lt;/h3&gt; 
&lt;p&gt;But patches are welcome.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Method parameters in HTTP headers.&lt;/li&gt; 
 &lt;li&gt;Handling trailer metadata.&lt;/li&gt; 
 &lt;li&gt;Encoding request/response body in XML.&lt;/li&gt; 
 &lt;li&gt;True bi-directional streaming.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Mapping gRPC to HTTP&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/runtime/errors.go#L15"&gt;How gRPC error codes map to HTTP status codes in the response&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;HTTP request source IP is added as &lt;code&gt;X-Forwarded-For&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP request host is added as &lt;code&gt;X-Forwarded-Host&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP &lt;code&gt;Authorization&lt;/code&gt; header is added as &lt;code&gt;authorization&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;Remaining Permanent HTTP header keys (as specified by the IANA &lt;a href="http://www.iana.org/assignments/message-headers/message-headers.xhtml"&gt;here&lt;/a&gt;) are prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt; and added with their values to gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP headers that start with 'Grpc-Metadata-' are mapped to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;While configurable, the default {un,}marshaling uses &lt;a href="https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson"&gt;protojson&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The path template used to map gRPC service methods to HTTP endpoints supports the &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto"&gt;google.api.http&lt;/a&gt; path template syntax. For example, &lt;code&gt;/api/v1/{name=projects/*/topics/*}&lt;/code&gt; or &lt;code&gt;/prefix/{path=organizations/**}&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="http://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;gRPC-Gateway is licensed under the BSD 3-Clause License. See &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE"&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>modelcontextprotocol/registry</title>
      <link>https://github.com/modelcontextprotocol/registry</link>
      <description>&lt;p&gt;A community driven registry service for Model Context Protocol (MCP) servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Registry&lt;/h1&gt; 
&lt;p&gt;A community driven registry service for Model Context Protocol (MCP) servers.&lt;/p&gt; 
&lt;h2&gt;Development Status&lt;/h2&gt; 
&lt;p&gt;This project is being built in the open and is currently in the early stages of development. Please see the &lt;a href="https://github.com/modelcontextprotocol/registry/discussions/11"&gt;overview discussion&lt;/a&gt; for the project scope and goals. If you would like to contribute, please check out the &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;The MCP Registry service provides a centralized repository for MCP server entries. It allows discovery and management of various MCP implementations with their associated metadata, configurations, and capabilities.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;RESTful API for managing MCP registry entries (list, get, create, update, delete)&lt;/li&gt; 
 &lt;li&gt;Health check endpoint for service monitoring&lt;/li&gt; 
 &lt;li&gt;Support for various environment configurations&lt;/li&gt; 
 &lt;li&gt;Graceful shutdown handling&lt;/li&gt; 
 &lt;li&gt;MongoDB and in-memory database support&lt;/li&gt; 
 &lt;li&gt;Comprehensive API documentation&lt;/li&gt; 
 &lt;li&gt;Pagination support for listing registry entries&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go 1.23.x (required - check with &lt;code&gt;go version&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;MongoDB&lt;/li&gt; 
 &lt;li&gt;Docker (optional, but recommended for development)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For development:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;golangci-lint v1.61.0 - Install with: &lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Running&lt;/h2&gt; 
&lt;p&gt;The easiest way to get the registry running is to use &lt;code&gt;docker compose&lt;/code&gt;. This will setup the MCP Registry service, import the seed data and run MongoDB in a local Docker environment.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build the Docker image
docker build -t registry .

# Run the registry and MongoDB with docker compose
docker compose up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will start the MCP Registry service and MongoDB with Docker, exposing it on port 8080.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;If you prefer to run the service locally without Docker, you can build and run it directly using Go.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Build a registry executable
go build ./cmd/registry
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create the &lt;code&gt;registry&lt;/code&gt; binary in the current directory. You'll need to have MongoDB running locally or with Docker.&lt;/p&gt; 
&lt;p&gt;By default, the service will run on &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Linting&lt;/h3&gt; 
&lt;p&gt;The project uses golangci-lint with extensive checks. Always run linting before pushing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run all linters (same as CI)
golangci-lint run --timeout=5m

# Check formatting
gofmt -s -l .

# Fix formatting
gofmt -s -w .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Git Hooks (Optional)&lt;/h3&gt; 
&lt;p&gt;To automatically run linting before commits:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git config core.hooksPath .githooks
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will prevent commits that fail linting or have formatting issues.&lt;/p&gt; 
&lt;h2&gt;Project Structure&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;‚îú‚îÄ‚îÄ api/           # OpenApi specification
‚îú‚îÄ‚îÄ cmd/           # Application entry points
‚îú‚îÄ‚îÄ config/        # Configuration files
‚îú‚îÄ‚îÄ internal/      # Private application code
‚îÇ   ‚îú‚îÄ‚îÄ api/       # HTTP server and request handlers
‚îÇ   ‚îú‚îÄ‚îÄ config/    # Configuration management
‚îÇ   ‚îú‚îÄ‚îÄ model/     # Data models
‚îÇ   ‚îî‚îÄ‚îÄ service/   # Business logic
‚îú‚îÄ‚îÄ pkg/           # Public libraries
‚îú‚îÄ‚îÄ scripts/       # Utility scripts
‚îî‚îÄ‚îÄ tools/         # Command line tools
    ‚îî‚îÄ‚îÄ publisher/ # Tool to publish MCP servers to the registry
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;API Documentation&lt;/h2&gt; 
&lt;p&gt;The API is documented using Swagger/OpenAPI. You can access the interactive Swagger UI at:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/v0/swagger/index.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This provides a complete reference of all endpoints with request/response schemas and allows you to test the API directly from your browser.&lt;/p&gt; 
&lt;h2&gt;API Endpoints&lt;/h2&gt; 
&lt;h3&gt;Health Check&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;GET /v0/health
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Returns the health status of the service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "status": "ok"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Registry Endpoints&lt;/h3&gt; 
&lt;h4&gt;List Registry Server Entries&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;GET /v0/servers
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lists MCP registry server entries with pagination support.&lt;/p&gt; 
&lt;p&gt;Query parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;limit&lt;/code&gt;: Maximum number of entries to return (default: 30, max: 100)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt;: Pagination cursor for retrieving next set of results&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Response example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "servers": [
    {
      "id": "123e4567-e89b-12d3-a456-426614174000",
      "name": "Example MCP Server",
      "url": "https://example.com/mcp",
      "description": "An example MCP server",
      "created_at": "2025-05-17T17:34:22.912Z",
      "updated_at": "2025-05-17T17:34:22.912Z"
    }
  ],
  "metadata": {
    "next_cursor": "123e4567-e89b-12d3-a456-426614174000",
    "count": 30
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Get Server Details&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;GET /v0/servers/{id}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Retrieves detailed information about a specific MCP server entry.&lt;/p&gt; 
&lt;p&gt;Path parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;id&lt;/code&gt;: Unique identifier of the server entry&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Response example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "id": "01129bff-3d65-4e3d-8e82-6f2f269f818c",
  "name": "io.github.gongrzhe/redis-mcp-server",
  "description": "A Redis MCP server (pushed to https://github.com/modelcontextprotocol/servers/tree/main/src/redis) implementation for interacting with Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.",
  "repository": {
    "url": "https://github.com/GongRzhe/REDIS-MCP-Server",
    "source": "github",
    "id": "907849235"
  },
  "version_detail": {
    "version": "0.0.1-seed",
    "release_date": "2025-05-16T19:13:21Z",
    "is_latest": true
  },
  "packages": [
    {
      "registry_name": "docker",
      "name": "@gongrzhe/server-redis-mcp",
      "version": "1.0.0",
      "package_arguments": [
        {
          "description": "Docker image to run",
          "is_required": true,
          "format": "string",
          "value": "mcp/redis",
          "default": "mcp/redis",
          "type": "positional",
          "value_hint": "mcp/redis"
        },
        {
          "description": "Redis server connection string",
          "is_required": true,
          "format": "string",
          "value": "redis://host.docker.internal:6379",
          "default": "redis://host.docker.internal:6379",
          "type": "positional",
          "value_hint": "host.docker.internal:6379"
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Publish a Server Entry&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;POST /v0/publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Publishes a new MCP server entry to the registry. Authentication is required via Bearer token in the Authorization header.&lt;/p&gt; 
&lt;p&gt;Headers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Authorization&lt;/code&gt;: Bearer token for authentication (e.g., &lt;code&gt;Bearer your_token_here&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;: application/json&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Request body example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "description": "&amp;lt;your description here&amp;gt;",
    "name": "io.github.&amp;lt;owner&amp;gt;/&amp;lt;server-name&amp;gt;",
    "packages": [
        {
            "registry_name": "npm",
            "name": "@&amp;lt;owner&amp;gt;/&amp;lt;server-name&amp;gt;",
            "version": "0.2.23",
            "package_arguments": [
                {
                    "description": "Specify services and permissions.",
                    "is_required": true,
                    "format": "string",
                    "value": "-s",
                    "default": "-s",
                    "type": "positional",
                    "value_hint": "-s"
                }
            ],
            "environment_variables": [
                {
                    "description": "API Key to access the server",
                    "name": "API_KEY"
                }
            ]
        },{
            "registry_name": "docker",
            "name": "@&amp;lt;owner&amp;gt;/&amp;lt;server-name&amp;gt;-cli",
            "version": "0.123.223",
            "runtime_hint": "docker",
            "runtime_arguments": [
                {
                    "description": "Specify services and permissions.",
                    "is_required": true,
                    "format": "string",
                    "value": "--mount",
                    "default": "--mount",
                    "type": "positional",
                    "value_hint": "--mount"
                }
            ],
            "environment_variables": [
                {
                    "description": "API Key to access the server",
                    "name": "API_KEY"
                }
            ]
        }
    ],
    "repository": {
        "url": "https://github.com/&amp;lt;owner&amp;gt;/&amp;lt;server-name&amp;gt;",
        "source": "github"
    },
    "version_detail": {
        "version": "0.0.1-&amp;lt;publisher_version&amp;gt;"
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Response example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "message": "Server publication successful",
  "id": "1234567890abcdef12345678"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ping Endpoint&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;GET /v0/ping
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Simple ping endpoint that returns environment configuration information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "environment": "dev",
  "version": "registry-&amp;lt;sha&amp;gt;"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The service can be configured using environment variables:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_APP_VERSION&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Application version&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;dev&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_DATABASE_TYPE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Database type&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;mongodb&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_COLLECTION_NAME&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;MongoDB collection name&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;servers_v2&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_DATABASE_NAME&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;MongoDB database name&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;mcp-registry&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_DATABASE_URL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;MongoDB connection string&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;mongodb://localhost:27017&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_GITHUB_CLIENT_ID&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub App Client ID&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_GITHUB_CLIENT_SECRET&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub App Client Secret&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_LOG_LEVEL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Log level&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;info&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_SEED_FILE_PATH&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to import seed file&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;data/seed.json&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_SEED_IMPORT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Import &lt;code&gt;seed.json&lt;/code&gt; on first run&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_SERVER_ADDRESS&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Listen address for the server&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;:8080&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;p&gt;Run the test script to validate API endpoints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./scripts/test_endpoints.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can specify specific endpoints to test:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./scripts/test_endpoints.sh --endpoint health
./scripts/test_endpoints.sh --endpoint servers
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/registry/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudreve/cloudreve</title>
      <link>https://github.com/cloudreve/cloudreve</link>
      <description>&lt;p&gt;üå© Self-hosted file management and sharing system, supports multiple storage providers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/cloudreve/Cloudreve/raw/master/README_zh-CN.md"&gt;‰∏≠ÊñáÁâàÊú¨&lt;/a&gt;&lt;/p&gt; 
&lt;h1 align="center"&gt; &lt;br&gt; &lt;a href="https://cloudreve.org/" alt="logo"&gt;&lt;img src="https://raw.githubusercontent.com/cloudreve/frontend/master/public/static/img/logo192.png" width="150"&gt;&lt;/a&gt; &lt;br&gt; Cloudreve &lt;br&gt; &lt;/h1&gt; 
&lt;h4 align="center"&gt;Self-hosted file management system with muilt-cloud support.&lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://dev.azure.com/abslantliu/Cloudreve/_build?definitionId=6"&gt; &lt;img src="https://dev.azure.com/abslantliu/Cloudreve/_apis/build/status%2Fcloudreve.Cloudreve?branchName=refs%2Fpull%2F2481%2Fmerge" alt="Azure pipelines"&gt; &lt;/a&gt; &lt;a href="https://github.com/cloudreve/Cloudreve/releases"&gt; &lt;img src="https://img.shields.io/github/v/release/cloudreve/Cloudreve?include_prereleases"&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/r/cloudreve/cloudreve"&gt; &lt;img src="https://img.shields.io/docker/image-size/cloudreve/cloudreve"&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/r/cloudreve/cloudreve"&gt; &lt;img alt="Docker Pulls" src="https://img.shields.io/docker/pulls/cloudreve/cloudreve"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://cloudreve.org"&gt;Homepage&lt;/a&gt; ‚Ä¢ &lt;a href="https://demo.cloudreve.org"&gt;Try it&lt;/a&gt; ‚Ä¢ &lt;a href="https://github.com/cloudreve/cloudreve/discussions"&gt;Discussion&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.cloudreve.org"&gt;Documents&lt;/a&gt; ‚Ä¢ &lt;a href="https://github.com/cloudreve/Cloudreve/releases"&gt;Download&lt;/a&gt; ‚Ä¢ &lt;a href="https://t.me/cloudreve_official"&gt;Telegram&lt;/a&gt; ‚Ä¢ &lt;a href="https://discord.com/invite/WTpMFpZT76"&gt;Discord&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudreve/docs/master/images/homepage.png" alt="Screenshot"&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;‚ú®&lt;/span&gt; Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;‚òÅ&lt;/span&gt; Support storing files into Local, Remote node, OneDrive, S3 compatible API, Qiniu, Aliyun OSS, Tencent COS, Upyun.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üì§&lt;/span&gt; Upload/Download in directly transmission from client to storage providers.&lt;/li&gt; 
 &lt;li&gt;üíæ Integrate with Aria2/qBittorrent to download files in background, use multiple download nodes to share the load.&lt;/li&gt; 
 &lt;li&gt;üìö Compress/Extract files, download files in batch.&lt;/li&gt; 
 &lt;li&gt;üíª WebDAV support covering all storage providers.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;‚ö°&lt;/span&gt;Drag&amp;amp;Drop to upload files or folders, with resumeable upload support.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üóÉ&lt;/span&gt; Extract media metadata from files, search files by metadata or tags.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üë©üëßüë¶&lt;/span&gt; Multi-users with multi-groups.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üîó&lt;/span&gt; Create share links for files and folders with expiration date.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üëÅüó®&lt;/span&gt; Preview videos, images, audios, ePub files online; edit texts, diagrams, Markdown, images, Office documents online.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üé®&lt;/span&gt; Customize theme colors, dark mode, PWA application, SPA, i18n.&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;üöÄ&lt;/span&gt; All-In-One packing, with all features out-of-the-box.&lt;/li&gt; 
 &lt;li&gt;üåà ... ...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;üõ†&lt;/span&gt; Deploy&lt;/h2&gt; 
&lt;p&gt;To deploy Cloudreve, you can refer to &lt;a href="https://docs.cloudreve.org/overview/quickstart"&gt;Getting started&lt;/a&gt; for a quick local deployment to test.&lt;/p&gt; 
&lt;p&gt;When you're ready to deploy Cloudreve to a production environment, you can refer to &lt;a href="https://docs.cloudreve.org/overview/deploy/"&gt;Deploy&lt;/a&gt; for a complete deployment.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;‚öô&lt;/span&gt; Build&lt;/h2&gt; 
&lt;p&gt;Please refer to &lt;a href="https://docs.cloudreve.org/overview/build/"&gt;Build&lt;/a&gt; for how to build Cloudreve from source code.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üöÄ&lt;/span&gt; Contributing&lt;/h2&gt; 
&lt;p&gt;If you're interested in contributing to Cloudreve, please refer to &lt;a href="https://docs.cloudreve.org/api/contributing/"&gt;Contributing&lt;/a&gt; for how to contribute to Cloudreve.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;‚öó&lt;/span&gt; Stacks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://golang.org/"&gt;Go&lt;/a&gt; + &lt;a href="https://github.com/gin-gonic/gin"&gt;Gin&lt;/a&gt; + &lt;a href="https://github.com/ent/ent"&gt;ent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt; + &lt;a href="https://github.com/reduxjs/redux"&gt;Redux&lt;/a&gt; + &lt;a href="https://github.com/mui-org/material-ui"&gt;Material-UI&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;span&gt;üìú&lt;/span&gt; License&lt;/h2&gt; 
&lt;p&gt;GPL V3&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>modelcontextprotocol/go-sdk</title>
      <link>https://github.com/modelcontextprotocol/go-sdk</link>
      <description>&lt;p&gt;The official Go SDK for Model Context Protocol servers and clients. Maintained in collaboration with Google.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Go SDK v0.2.0&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://codespaces.new/modelcontextprotocol/go-sdk"&gt;&lt;img src="https://github.com/codespaces/badge.svg?sanitize=true" alt="Open in GitHub Codespaces"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;BREAKING CHANGES&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This version contains breaking changes. See the &lt;a href="https://github.com/modelcontextprotocol/go-sdk/releases/tag/v0.2.0"&gt;release notes&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/modelcontextprotocol/go-sdk" alt="PkgGoDev"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains an unreleased implementation of the official Go software development kit (SDK) for the Model Context Protocol (MCP).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The SDK should be considered unreleased, and is currently unstable and subject to breaking changes. Please test it out and file bug reports or API proposals, but don't use it in real projects. See the issue tracker for known issues and missing features. We aim to release a stable version of the SDK in August, 2025.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;The design doc for this SDK is at &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/design/design.md"&gt;design.md&lt;/a&gt;, which was initially reviewed at &lt;a href="https://github.com/orgs/modelcontextprotocol/discussions/364"&gt;modelcontextprotocol/discussions/364&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Further design discussion should occur in &lt;a href="https://github.com/modelcontextprotocol/go-sdk/issues"&gt;issues&lt;/a&gt; (for concrete proposals) or &lt;a href="https://github.com/modelcontextprotocol/go-sdk/discussions"&gt;discussions&lt;/a&gt; for open-ended discussion. See &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Package documentation&lt;/h2&gt; 
&lt;p&gt;The SDK consists of three importable packages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/mcp"&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/mcp&lt;/code&gt;&lt;/a&gt; package defines the primary APIs for constructing and using MCP clients and servers.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/jsonschema"&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/jsonschema&lt;/code&gt;&lt;/a&gt; package provides an implementation of &lt;a href="https://json-schema.org/"&gt;JSON Schema&lt;/a&gt;, used for MCP tool input and output schema.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/jsonrpc"&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/jsonrpc&lt;/code&gt;&lt;/a&gt; package is for users implementing their own transports.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;In this example, an MCP client communicates with an MCP server running in a sidecar process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"log"
	"os/exec"

	"github.com/modelcontextprotocol/go-sdk/mcp"
)

func main() {
	ctx := context.Background()

	// Create a new client, with no features.
	client := mcp.NewClient(&amp;amp;mcp.Implementation{Name: "mcp-client", Version: "v1.0.0"}, nil)

	// Connect to a server over stdin/stdout
	transport := mcp.NewCommandTransport(exec.Command("myserver"))
	session, err := client.Connect(ctx, transport)
	if err != nil {
		log.Fatal(err)
	}
	defer session.Close()

	// Call a tool on the server.
	params := &amp;amp;mcp.CallToolParams{
		Name:      "greet",
		Arguments: map[string]any{"name": "you"},
	}
	res, err := session.CallTool(ctx, params)
	if err != nil {
		log.Fatalf("CallTool failed: %v", err)
	}
	if res.IsError {
		log.Fatal("tool failed")
	}
	for _, c := range res.Content {
		log.Print(c.(*mcp.TextContent).Text)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here's an example of the corresponding server component, which communicates with its client over stdin/stdout:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"log"

	"github.com/modelcontextprotocol/go-sdk/mcp"
)

type HiParams struct {
	Name string `json:"name" jsonschema:"the name of the person to greet"`
}

func SayHi(ctx context.Context, cc *mcp.ServerSession, params *mcp.CallToolParamsFor[HiParams]) (*mcp.CallToolResultFor[any], error) {
	return &amp;amp;mcp.CallToolResultFor[any]{
		Content: []mcp.Content{&amp;amp;mcp.TextContent{Text: "Hi " + params.Arguments.Name}},
	}, nil
}

func main() {
	// Create a server with a single tool.
	server := mcp.NewServer(&amp;amp;mcp.Implementation{Name: "greeter", Version: "v1.0.0"}, nil)

	mcp.AddTool(server, &amp;amp;mcp.Tool{Name: "greet", Description: "say hi"}, SayHi)
	// Run the server over stdin/stdout, until the client disconnects
	if err := server.Run(context.Background(), mcp.NewStdioTransport()); err != nil {
		log.Fatal(err)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/examples/"&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory contains more example clients and servers.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Several existing Go MCP SDKs inspired the development and design of this official SDK, notably &lt;a href="https://github.com/mark3labs/mcp-go"&gt;mcp-go&lt;/a&gt;, authored by Ed Zynda. We are grateful to Ed as well as the other contributors to mcp-go, and to authors and contributors of other SDKs such as &lt;a href="https://github.com/metoro-io/mcp-golang"&gt;mcp-golang&lt;/a&gt; and &lt;a href="https://github.com/ThinkInAIXYZ/go-mcp"&gt;go-mcp&lt;/a&gt;. Thanks to their work, there is a thriving ecosystem of Go MCP clients and servers.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grafana/mimir</title>
      <link>https://github.com/grafana/mimir</link>
      <description>&lt;p&gt;Grafana Mimir provides horizontally scalable, highly available, multi-tenant, long-term storage for Prometheus.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grafana Mimir&lt;/h1&gt; 
&lt;p align="center"&gt;&lt;img src="https://raw.githubusercontent.com/grafana/mimir/main/images/logo.png" alt="Grafana Mimir logo" width="400"&gt;&lt;/p&gt; 
&lt;p&gt;Grafana Mimir is an open source software project that provides a scalable long-term storage for &lt;a href="https://prometheus.io"&gt;Prometheus&lt;/a&gt;. Some of the core strengths of Grafana Mimir include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to install and maintain:&lt;/strong&gt; Grafana Mimir‚Äôs extensive documentation, tutorials, and deployment tooling make it quick to get started. Using its monolithic mode, you can get Grafana Mimir up and running with just one binary and no additional dependencies. Once deployed, the best-practice dashboards, alerts, and runbooks packaged with Grafana Mimir make it easy to monitor the health of the system.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Massive scalability:&lt;/strong&gt; You can run Grafana Mimir's horizontally-scalable architecture across multiple machines, resulting in the ability to process orders of magnitude more time series than a single Prometheus instance. Internal testing shows that Grafana Mimir handles up to 1 billion active time series.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Global view of metrics:&lt;/strong&gt; Grafana Mimir enables you to run queries that aggregate series from multiple Prometheus instances, giving you a global view of your systems. Its query engine extensively parallelizes query execution, so that even the highest-cardinality queries complete with blazing speed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cheap, durable metric storage:&lt;/strong&gt; Grafana Mimir uses object storage for long-term data storage, allowing it to take advantage of this ubiquitous, cost-effective, high-durability technology. It is compatible with multiple object store implementations, including AWS S3, Google Cloud Storage, Azure Blob Storage, OpenStack Swift, as well as any S3-compatible object storage.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High availability:&lt;/strong&gt; Grafana Mimir replicates incoming metrics, ensuring that no data is lost in the event of machine failure. Its horizontally scalable architecture also means that it can be restarted, upgraded, or downgraded with zero downtime, which means no interruptions to metrics ingestion or querying.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Natively multi-tenant:&lt;/strong&gt; Grafana Mimir‚Äôs multi-tenant architecture enables you to isolate data and queries from independent teams or business units, making it possible for these groups to share the same cluster. Advanced limits and quality-of-service controls ensure that capacity is shared fairly among tenants.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migrating to Grafana Mimir&lt;/h2&gt; 
&lt;p&gt;If you're migrating to Grafana Mimir, refer to the following documents:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/set-up/migrate/migrate-from-thanos-or-prometheus/"&gt;Migrating from Thanos or Prometheus to Grafana Mimir&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/set-up/migrate/migrate-from-cortex/"&gt;Migrating from Cortex to Grafana Mimir&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Deploying Grafana Mimir&lt;/h2&gt; 
&lt;p&gt;For information about how to deploy Grafana Mimir, refer to &lt;a href="https://grafana.com/docs/mimir/latest/operators-guide/deploy-grafana-mimir/"&gt;Deploy Grafana Mimir&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;If you‚Äôre new to Grafana Mimir, read the &lt;a href="https://grafana.com/docs/mimir/latest/get-started/"&gt;Get started guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before deploying Grafana Mimir in a production environment, read:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/operators-guide/architecture/"&gt;An overview of Grafana Mimir‚Äôs architecture&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/operators-guide/configure/"&gt;Configure Grafana Mimir&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/operators-guide/run-production-environment/"&gt;Run Grafana Mimir in production&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Refer to the following links to access Grafana Mimir documentation:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/latest/"&gt;Latest release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/mimir/next/"&gt;Upcoming release&lt;/a&gt;, at the tip of the &lt;code&gt;main&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to Grafana Mimir, refer to &lt;a href="https://github.com/grafana/mimir/tree/main/docs/internal/contributing"&gt;Contributing to Grafana Mimir&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Join the Grafana Mimir discussion&lt;/h2&gt; 
&lt;p&gt;If you have any questions or feedback regarding Grafana Mimir, join the &lt;a href="https://github.com/grafana/mimir/discussions"&gt;Grafana Mimir Discussion&lt;/a&gt;. Alternatively, consider joining the monthly &lt;a href="https://docs.google.com/document/d/1E4jJcGicvLTyMEY6cUFFZUg_I8ytrBuW8r5yt1LyMv4"&gt;Grafana Mimir Community Call&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Your feedback is always welcome, and you can also share it via the &lt;a href="https://slack.grafana.com/"&gt;&lt;code&gt;#mimir&lt;/code&gt; Slack channel&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Grafana Mimir is distributed under &lt;a href="https://raw.githubusercontent.com/grafana/mimir/main/LICENSE"&gt;AGPL-3.0-only&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>helm/helm</title>
      <link>https://github.com/helm/helm</link>
      <description>&lt;p&gt;The Kubernetes Package Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Helm&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/helm/helm/actions?workflow=release"&gt;&lt;img src="https://github.com/helm/helm/workflows/release/badge.svg?sanitize=true" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/helm.sh/helm/v4"&gt;&lt;img src="https://goreportcard.com/badge/helm.sh/helm/v4" alt="Go Report Card"&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/helm.sh/helm/v4"&gt;&lt;img src="https://img.shields.io/static/v1?label=godoc&amp;amp;message=reference&amp;amp;color=blue" alt="GoDoc"&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/3131"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/3131/badge" alt="CII Best Practices"&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/helm/helm"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/helm/helm/badge" alt="OpenSSF Scorecard"&gt;&lt;/a&gt; &lt;a href="https://insights.linuxfoundation.org/project/helm"&gt;&lt;img src="https://insights.production.lfx.dev/api/badge/health-score?project=helm" alt="LFX Health Score"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Helm is a tool for managing Charts. Charts are packages of pre-configured Kubernetes resources.&lt;/p&gt; 
&lt;p&gt;Use Helm to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Find and use &lt;a href="https://artifacthub.io/packages/search?kind=0"&gt;popular software packaged as Helm Charts&lt;/a&gt; to run in Kubernetes&lt;/li&gt; 
 &lt;li&gt;Share your own applications as Helm Charts&lt;/li&gt; 
 &lt;li&gt;Create reproducible builds of your Kubernetes applications&lt;/li&gt; 
 &lt;li&gt;Intelligently manage your Kubernetes manifest files&lt;/li&gt; 
 &lt;li&gt;Manage releases of Helm packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Helm in a Handbasket&lt;/h2&gt; 
&lt;p&gt;Helm is a tool that streamlines installing and managing Kubernetes applications. Think of it like apt/yum/homebrew for Kubernetes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Helm renders your templates and communicates with the Kubernetes API&lt;/li&gt; 
 &lt;li&gt;Helm runs on your laptop, CI/CD, or wherever you want it to run.&lt;/li&gt; 
 &lt;li&gt;Charts are Helm packages that contain at least two things: 
  &lt;ul&gt; 
   &lt;li&gt;A description of the package (&lt;code&gt;Chart.yaml&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;One or more templates, which contain Kubernetes manifest files&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Charts can be stored on disk, or fetched from remote chart repositories (like Debian or RedHat packages)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Helm Development and Stable Versions&lt;/h2&gt; 
&lt;p&gt;Helm v4 is currently under development on the &lt;code&gt;main&lt;/code&gt; branch. This is unstable and the APIs within the Go SDK and at the command line are changing. Helm v3 (current stable) is maintained on the &lt;code&gt;dev-v3&lt;/code&gt; branch. APIs there follow semantic versioning.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Binary downloads of the Helm client can be found on &lt;a href="https://github.com/helm/helm/releases/latest"&gt;the Releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unpack the &lt;code&gt;helm&lt;/code&gt; binary and add it to your PATH and you are good to go!&lt;/p&gt; 
&lt;p&gt;If you want to use a package manager:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; users can use &lt;code&gt;brew install helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; users can use &lt;code&gt;choco install kubernetes-helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/"&gt;Winget&lt;/a&gt; users can use &lt;code&gt;winget install Helm.Helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://scoop.sh/"&gt;Scoop&lt;/a&gt; users can use &lt;code&gt;scoop install helm&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://snapcraft.io/"&gt;Snapcraft&lt;/a&gt; users can use &lt;code&gt;snap install helm --classic&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flox.dev"&gt;Flox&lt;/a&gt; users can use &lt;code&gt;flox install kubernetes-helm&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To rapidly get Helm up and running, start with the &lt;a href="https://helm.sh/docs/intro/quickstart/"&gt;Quick Start Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://helm.sh/docs/intro/install/"&gt;installation guide&lt;/a&gt; for more options, including installing pre-releases.&lt;/p&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;p&gt;Get started with the &lt;a href="https://helm.sh/docs/intro/quickstart/"&gt;Quick Start guide&lt;/a&gt; or plunge into the &lt;a href="https://helm.sh/docs"&gt;complete documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/helm/helm/milestones"&gt;Helm roadmap uses GitHub milestones&lt;/a&gt; to track the progress of the project.&lt;/p&gt; 
&lt;p&gt;The development of Helm v4 is currently happening on the &lt;code&gt;main&lt;/code&gt; branch while the development of Helm v3, the stable branch, is happening on the &lt;code&gt;dev-v3&lt;/code&gt; branch. Changes should be made to the &lt;code&gt;main&lt;/code&gt; branch prior to being added to the &lt;code&gt;dev-v3&lt;/code&gt; branch so that all changes are carried along to Helm v4.&lt;/p&gt; 
&lt;h2&gt;Community, discussion, contribution, and support&lt;/h2&gt; 
&lt;p&gt;You can reach the Helm community and developers via the following channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://kubernetes.slack.com"&gt;Kubernetes Slack&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/helm-users"&gt;#helm-users&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/helm-dev"&gt;#helm-dev&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://kubernetes.slack.com/messages/charts"&gt;#charts&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Mailing List: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://lists.cncf.io/g/cncf-helm"&gt;Helm Mailing List&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Developer Call: Thursdays at 9:30-10:00 Pacific (&lt;a href="https://github.com/helm/community/raw/master/communication.md#meetings"&gt;meeting details&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;If you're interested in contributing, please refer to the &lt;a href="https://raw.githubusercontent.com/helm/helm/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; &lt;strong&gt;before submitting a pull request&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;Participation in the Helm community is governed by the &lt;a href="https://raw.githubusercontent.com/helm/helm/main/code-of-conduct.md"&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tailscale/tailscale</title>
      <link>https://github.com/tailscale/tailscale</link>
      <description>&lt;p&gt;The easiest, most secure way to use WireGuard and 2FA.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tailscale&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://tailscale.com"&gt;https://tailscale.com&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Private WireGuard¬Æ networks made easy&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This repository contains the majority of Tailscale's open source code. Notably, it includes the &lt;code&gt;tailscaled&lt;/code&gt; daemon and the &lt;code&gt;tailscale&lt;/code&gt; CLI tool. The &lt;code&gt;tailscaled&lt;/code&gt; daemon runs on Linux, Windows, &lt;a href="https://tailscale.com/kb/1065/macos-variants/"&gt;macOS&lt;/a&gt;, and to varying degrees on FreeBSD and OpenBSD. The Tailscale iOS and Android apps use this repo's code, but this repo doesn't contain the mobile GUI code.&lt;/p&gt; 
&lt;p&gt;Other &lt;a href="https://github.com/orgs/tailscale/repositories"&gt;Tailscale repos&lt;/a&gt; of note:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the Android app is at &lt;a href="https://github.com/tailscale/tailscale-android"&gt;https://github.com/tailscale/tailscale-android&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;the Synology package is at &lt;a href="https://github.com/tailscale/tailscale-synology"&gt;https://github.com/tailscale/tailscale-synology&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;the QNAP package is at &lt;a href="https://github.com/tailscale/tailscale-qpkg"&gt;https://github.com/tailscale/tailscale-qpkg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;the Chocolatey packaging is at &lt;a href="https://github.com/tailscale/tailscale-chocolatey"&gt;https://github.com/tailscale/tailscale-chocolatey&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For background on which parts of Tailscale are open source and why, see &lt;a href="https://tailscale.com/opensource/"&gt;https://tailscale.com/opensource/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Using&lt;/h2&gt; 
&lt;p&gt;We serve packages for a variety of distros and platforms at &lt;a href="https://pkgs.tailscale.com/"&gt;https://pkgs.tailscale.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Other clients&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://tailscale.com/download"&gt;macOS, iOS, and Windows clients&lt;/a&gt; use the code in this repository but additionally include small GUI wrappers. The GUI wrappers on non-open source platforms are themselves not open source.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;We always require the latest Go release, currently Go 1.23. (While we build releases with our &lt;a href="https://github.com/tailscale/go/"&gt;Go fork&lt;/a&gt;, its use is not required.)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go install tailscale.com/cmd/tailscale{,d}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you're packaging Tailscale for distribution, use &lt;code&gt;build_dist.sh&lt;/code&gt; instead, to burn commit IDs and version info into the binaries:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./build_dist.sh tailscale.com/cmd/tailscale
./build_dist.sh tailscale.com/cmd/tailscaled
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your distro has conventions that preclude the use of &lt;code&gt;build_dist.sh&lt;/code&gt;, please do the equivalent of what it does in your distro's way, so that bug reports contain useful version information.&lt;/p&gt; 
&lt;h2&gt;Bugs&lt;/h2&gt; 
&lt;p&gt;Please file any issues about this code or the hosted service on &lt;a href="https://github.com/tailscale/tailscale/issues"&gt;the issue tracker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;PRs welcome! But please file bugs. Commit messages should &lt;a href="https://docs.github.com/en/github/writing-on-github/autolinked-references-and-urls"&gt;reference bugs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We require &lt;a href="https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin"&gt;Developer Certificate of Origin&lt;/a&gt; &lt;code&gt;Signed-off-by&lt;/code&gt; lines in commits.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/tailscale/tailscale/main/docs/commit-messages.md"&gt;commit-messages.md&lt;/a&gt; (or skim &lt;code&gt;git log&lt;/code&gt;) for our commit message style.&lt;/p&gt; 
&lt;h2&gt;About Us&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://tailscale.com/"&gt;Tailscale&lt;/a&gt; is primarily developed by the people at &lt;a href="https://github.com/orgs/tailscale/people"&gt;https://github.com/orgs/tailscale/people&lt;/a&gt;. For other contributors, see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tailscale/tailscale/graphs/contributors"&gt;https://github.com/tailscale/tailscale/graphs/contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tailscale/tailscale-android/graphs/contributors"&gt;https://github.com/tailscale/tailscale-android/graphs/contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Legal&lt;/h2&gt; 
&lt;p&gt;WireGuard is a registered trademark of Jason A. Donenfeld.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudwego/eino</title>
      <link>https://github.com/cloudwego/eino</link>
      <description>&lt;p&gt;The ultimate LLM/AI application development framework in Golang.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eino&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/badges/.badges/main/coverage.svg?sanitize=true" alt="coverage"&gt; &lt;a href="https://github.com/cloudwego/eino/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/cloudwego/eino" alt="Release"&gt;&lt;/a&gt; &lt;a href="https://www.cloudwego.io/"&gt;&lt;img src="https://img.shields.io/website?up_message=cloudwego&amp;amp;url=https%3A%2F%2Fwww.cloudwego.io%2F" alt="WebSite"&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudwego/eino/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/cloudwego/eino" alt="License"&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/cloudwego/eino"&gt;&lt;img src="https://goreportcard.com/badge/github.com/cloudwego/eino" alt="Go Report Card"&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/eino"&gt;&lt;img src="https://img.shields.io/github/issues/cloudwego/eino" alt="OpenIssue"&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudwego/eino/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;img src="https://img.shields.io/github/issues-closed/cloudwego/eino" alt="ClosedIssue"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/stars/cloudwego/eino" alt="Stars"&gt; &lt;img src="https://img.shields.io/github/forks/cloudwego/eino" alt="Forks"&gt;&lt;/p&gt; 
&lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/cloudwego/eino/main/README.zh_CN.md"&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Eino['aino]&lt;/strong&gt; (pronounced similarly to "I know") aims to be the ultimate LLM application development framework in Golang. Drawing inspirations from many excellent LLM application development frameworks in the open-source community such as LangChain &amp;amp; LlamaIndex, etc., as well as learning from cutting-edge research and real world applications, Eino offers an LLM application development framework that emphasizes on simplicity, scalability, reliability and effectiveness that better aligns with Golang programming conventions.&lt;/p&gt; 
&lt;p&gt;What Eino provides are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a carefully curated list of &lt;strong&gt;component&lt;/strong&gt; abstractions and implementations that can be easily reused and combined to build LLM applications&lt;/li&gt; 
 &lt;li&gt;a powerful &lt;strong&gt;composition&lt;/strong&gt; framework that does the heavy lifting of strong type checking, stream processing, concurrency management, aspect injection, option assignment, etc. for the user.&lt;/li&gt; 
 &lt;li&gt;a set of meticulously designed &lt;strong&gt;API&lt;/strong&gt; that obsesses on simplicity and clarity.&lt;/li&gt; 
 &lt;li&gt;an ever-growing collection of best practices in the form of bundled &lt;strong&gt;flows&lt;/strong&gt; and &lt;strong&gt;examples&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;a useful set of tools that covers the entire development cycle, from visualized development and debugging to online tracing and evaluation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With the above arsenal, Eino can standardize, simplify, and improve efficiency at different stages of the AI application development cycle: &lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/eino_concept.jpeg" alt=""&gt;&lt;/p&gt; 
&lt;h1&gt;A quick walkthrough&lt;/h1&gt; 
&lt;p&gt;Use a component directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;model, _ := openai.NewChatModel(ctx, config) // create an invokable LLM instance
message, _ := model.Generate(ctx, []*Message{
    SystemMessage("you are a helpful assistant."),
    UserMessage("what does the future AI App look like?")})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, you can do that, Eino provides lots of useful components to use out of the box. But you can do more by using orchestration, for three reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;orchestration encapsulates common patterns of LLM application.&lt;/li&gt; 
 &lt;li&gt;orchestration solves the difficult problem of processing stream response by the LLM.&lt;/li&gt; 
 &lt;li&gt;orchestration handles type safety, concurrency management, aspect injection and option assignment for you.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Eino provides two set of APIs for orchestration&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;API&lt;/th&gt; 
   &lt;th&gt;Characteristics and usage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Chain&lt;/td&gt; 
   &lt;td&gt;Simple chained directed graph that can only go forward.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Graph&lt;/td&gt; 
   &lt;td&gt;Cyclic or Acyclic directed graph. Powerful and flexible.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Let's create a simple chain: a ChatTemplate followed by a ChatModel.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/simple_chain.png" alt=""&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;chain, _ := NewChain[map[string]any, *Message]().
           AppendChatTemplate(prompt).
           AppendChatModel(model).
           Compile(ctx)

chain.Invoke(ctx, map[string]any{"query": "what's your name?"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let's create a graph that uses a ChatModel to generate answer or tool calls, then uses a ToolsNode to execute those tools if needed.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/tool_call_graph.png" alt=""&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;graph := NewGraph[map[string]any, *schema.Message]()

_ = graph.AddChatTemplateNode("node_template", chatTpl)
_ = graph.AddChatModelNode("node_model", chatModel)
_ = graph.AddToolsNode("node_tools", toolsNode)
_ = graph.AddLambdaNode("node_converter", takeOne)

_ = graph.AddEdge(START, "node_template")
_ = graph.AddEdge("node_template", "node_model")
_ = graph.AddBranch("node_model", branch)
_ = graph.AddEdge("node_tools", "node_converter")
_ = graph.AddEdge("node_converter", END)

compiledGraph, err := graph.Compile(ctx)
if err != nil {
return err
}
out, err := r.Invoke(ctx, map[string]any{"query":"Beijing's weather this weekend"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let's create a 'ReAct' agent: A ChatModel binds to Tools. It receives input Messages and decides independently whether to call the Tool or output the final result. The execution result of the Tool will again become the input Message for the ChatModel and serve as the context for the next round of independent judgment.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/react.png" alt=""&gt;&lt;/p&gt; 
&lt;p&gt;We provide a complete implementation for ReAct Agent out of the box in the &lt;code&gt;flow&lt;/code&gt; package. Check out the code here: &lt;a href="https://github.com/cloudwego/eino/raw/main/flow/agent/react/react.go"&gt;flow/agent/react&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Our implementation of ReAct Agent uses Eino's &lt;strong&gt;graph orchestration&lt;/strong&gt; exclusively, which provides the following benefits out of the box:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Type checking: it makes sure the two nodes' input and output types match at compile time.&lt;/li&gt; 
 &lt;li&gt;Stream processing: concatenates message stream before passing to chatModel and toolsNode if needed, and copies the stream into callback handlers.&lt;/li&gt; 
 &lt;li&gt;Concurrency management: the shared state can be safely read and written because the StatePreHandler is concurrency safe.&lt;/li&gt; 
 &lt;li&gt;Aspect injection: injects callback aspects before and after the execution of ChatModel if the specified ChatModel implementation hasn't injected itself.&lt;/li&gt; 
 &lt;li&gt;Option assignment: call options are assigned either globally, to specific component type or to specific node.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, you could easily extend the compiled graph with callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;handler := NewHandlerBuilder().
  OnStartFn(
    func(ctx context.Context, info *RunInfo, input CallbackInput) context.Context) {
        log.Infof("onStart, runInfo: %v, input: %v", info, input)
    }).
  OnEndFn(
    func(ctx context.Context, info *RunInfo, output CallbackOutput) context.Context) {
        log.Infof("onEnd, runInfo: %v, out: %v", info, output)
    }).
  Build()
  
compiledGraph.Invoke(ctx, input, WithCallbacks(handler))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or you could easily assign options to different nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;// assign to All nodes
compiledGraph.Invoke(ctx, input, WithCallbacks(handler))

// assign only to ChatModel nodes
compiledGraph.Invoke(ctx, input, WithChatModelOption(WithTemperature(0.5))

// assign only to node_1
compiledGraph.Invoke(ctx, input, WithCallbacks(handler).DesignateNode("node_1"))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Key Features&lt;/h1&gt; 
&lt;h2&gt;Rich Components&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Encapsulates common building blocks into &lt;strong&gt;component abstractions&lt;/strong&gt;, each have multiple &lt;strong&gt;component implementations&lt;/strong&gt; that are ready to be used out of the box.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;component abstractions such as ChatModel, Tool, ChatTemplate, Retriever, Document Loader, Lambda, etc.&lt;/li&gt; 
   &lt;li&gt;each component type has an interface of its own: defined Input &amp;amp; Output Type, defined Option type, and streaming paradigms that make sense.&lt;/li&gt; 
   &lt;li&gt;implementations are transparent. Abstractions are all you care about when orchestrating components together.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implementations can be nested and captures complex business logic.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ReAct Agent, MultiQueryRetriever, Host MultiAgent, etc. They consist of multiple components and non-trivial business logic.&lt;/li&gt; 
   &lt;li&gt;They are still transparent from the outside. A MultiQueryRetriever can be used anywhere that accepts a Retriever.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Powerful Orchestration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Data flows from Retriever / Document Loaders / ChatTemplate to ChatModel, then flows to Tools and parsed as Final Answer. This directed, controlled flow of data through multiple components can be implemented through &lt;strong&gt;graph orchestration&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Component instances are graph nodes, and edges are data flow channels.&lt;/li&gt; 
 &lt;li&gt;Graph orchestration is powerful and flexible enough to implement complex business logic: 
  &lt;ul&gt; 
   &lt;li&gt;type checking, stream processing, concurrency management, aspect injection and option assignment are handled by the framework.&lt;/li&gt; 
   &lt;li&gt;branch out execution at runtime, read and write global state, or do field level data mapping using workflow(currently in alpha stage).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Complete Stream Processing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stream processing is important because ChatModel outputs chunks of messages in real time as it generates them. It's especially important with orchestration because more components need to handle streaming data.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;concatenates&lt;/strong&gt; stream chunks for downstream nodes that only accepts non-stream input, such as ToolsNode.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;boxes&lt;/strong&gt; non stream into stream when stream is needed during graph execution.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;merges&lt;/strong&gt; multiple streams as they converge into a single downward node.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;copies&lt;/strong&gt; stream as they fan out to different downward node, or is passed to callback handlers.&lt;/li&gt; 
 &lt;li&gt;Orchestration elements such as &lt;strong&gt;branch&lt;/strong&gt; and &lt;strong&gt;state handlers&lt;/strong&gt; are also stream aware.&lt;/li&gt; 
 &lt;li&gt;With these streaming processing abilities, the streaming paradigms of components themselves become transparent to the user.&lt;/li&gt; 
 &lt;li&gt;A compiled Graph can run with 4 different streaming paradigms:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Streaming Paradigm&lt;/th&gt; 
   &lt;th&gt;Explanation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Invoke&lt;/td&gt; 
   &lt;td&gt;Accepts non-stream type I and returns non-stream type O&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stream&lt;/td&gt; 
   &lt;td&gt;Accepts non-stream type I and returns stream type StreamReader[O]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Collect&lt;/td&gt; 
   &lt;td&gt;Accepts stream type StreamReader[I] and returns non-stream type O&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Transform&lt;/td&gt; 
   &lt;td&gt;Accepts stream type StreamReader[I] and returns stream type StreamReader[O]&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Highly Extensible Aspects (Callbacks)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Aspects handle cross-cutting concerns such as logging, tracing, metrics, etc., as well as exposing internal details of component implementations.&lt;/li&gt; 
 &lt;li&gt;Five aspects are supported: &lt;strong&gt;OnStart, OnEnd, OnError, OnStartWithStreamInput, OnEndWithStreamOutput&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Developers can easily create custom callback handlers, add them during graph run via options, and they will be invoked during graph run.&lt;/li&gt; 
 &lt;li&gt;Graph can also inject aspects to those component implementations that do not support callbacks on their own.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Eino Framework Structure&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/eino_framework.jpeg" alt=""&gt;&lt;/p&gt; 
&lt;p&gt;The Eino framework consists of several parts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Eino(this repo): Contains Eino's type definitions, streaming mechanism, component abstractions, orchestration capabilities, aspect mechanisms, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/cloudwego/eino-ext"&gt;EinoExt&lt;/a&gt;: Component implementations, callback handlers implementations, component usage examples, and various tools such as evaluators, prompt optimizers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/cloudwego/eino-ext/tree/main/devops"&gt;Eino Devops&lt;/a&gt;: visualized developing, visualized debugging etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/cloudwego/eino-examples"&gt;EinoExamples&lt;/a&gt; is the repo containing example applications and best practices for Eino.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Detailed Documentation&lt;/h2&gt; 
&lt;p&gt;For learning and using Eino, we provide a comprehensive Eino User Manual to help you quickly understand the concepts in Eino and master the skills of developing AI applications based on Eino. Start exploring through the &lt;a href="https://www.cloudwego.io/zh/docs/eino/"&gt;Eino User Manual&lt;/a&gt; now!&lt;/p&gt; 
&lt;p&gt;For a quick introduction to building AI applications with Eino, we recommend starting with &lt;a href="https://www.cloudwego.io/zh/docs/eino/quick_start/"&gt;Eino: Quick Start&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go 1.18 and above.&lt;/li&gt; 
 &lt;li&gt;Eino relies on &lt;a href="https://github.com/getkin/kin-openapi"&gt;kin-openapi&lt;/a&gt; 's OpenAPI JSONSchema implementation. In order to remain compatible with Go 1.18, we have fixed kin-openapi's version to be v0.118.0.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a potential security issue in this project, or think you may have discovered a security issue, we ask that you notify Bytedance Security via our &lt;a href="https://security.bytedance.com/src"&gt;security center&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/cloudwego/eino/main/sec@bytedance.com"&gt;vulnerability reporting email&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; 
&lt;h2&gt;Contact US&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;How to become a member: &lt;a href="https://github.com/cloudwego/community/raw/main/COMMUNITY_MEMBERSHIP.md"&gt;COMMUNITY MEMBERSHIP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Issues: &lt;a href="https://github.com/cloudwego/eino/issues"&gt;Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lark: Scan the QR code below with &lt;a href="https://www.feishu.cn/en/"&gt;Register Feishu&lt;/a&gt; to join our CloudWeGo/eino user group.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;‚ÄÇ‚ÄÇ‚ÄÇ &lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/lark_group_zh.png" alt="LarkGroup" width="200"&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/cloudwego/eino/main/LICENSE-APACHE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go-chi/chi</title>
      <link>https://github.com/go-chi/chi</link>
      <description>&lt;p&gt;lightweight, idiomatic and composable router for building Go HTTP services&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img alt="chi" src="https://cdn.rawgit.com/go-chi/chi/master/_examples/chi.svg?sanitize=true" width="220"&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/v5"&gt;&lt;img src="https://godoc.org/github.com/go-chi/chi?status.svg?sanitize=true" alt="GoDoc Widget"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;chi&lt;/code&gt; is a lightweight, idiomatic and composable router for building Go HTTP services. It's especially good at helping you write large REST API services that are kept maintainable as your project grows and changes. &lt;code&gt;chi&lt;/code&gt; is built on the new &lt;code&gt;context&lt;/code&gt; package introduced in Go 1.7 to handle signaling, cancelation and request-scoped values across a handler chain.&lt;/p&gt; 
&lt;p&gt;The focus of the project has been to seek out an elegant and comfortable design for writing REST API servers, written during the development of the Pressly API service that powers our public API service, which in turn powers all of our client-side applications.&lt;/p&gt; 
&lt;p&gt;The key considerations of chi's design are: project structure, maintainability, standard http handlers (stdlib-only), developer productivity, and deconstructing a large system into many small parts. The core router &lt;code&gt;github.com/go-chi/chi&lt;/code&gt; is quite small (less than 1000 LOC), but we've also included some useful/optional subpackages: &lt;a href="https://raw.githubusercontent.com/go-chi/chi/master/middleware"&gt;middleware&lt;/a&gt;, &lt;a href="https://github.com/go-chi/render"&gt;render&lt;/a&gt; and &lt;a href="https://github.com/go-chi/docgen"&gt;docgen&lt;/a&gt;. We hope you enjoy it too!&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get -u github.com/go-chi/chi/v5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt; - cloc'd in ~1000 LOC for the chi router&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; - yes, see &lt;a href="https://raw.githubusercontent.com/go-chi/chi/master/#benchmarks"&gt;benchmarks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;100% compatible with net/http&lt;/strong&gt; - use any http or middleware pkg in the ecosystem that is also compatible with &lt;code&gt;net/http&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Designed for modular/composable APIs&lt;/strong&gt; - middlewares, inline middlewares, route groups and sub-router mounting&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Context control&lt;/strong&gt; - built on new &lt;code&gt;context&lt;/code&gt; package, providing value chaining, cancellations and timeouts&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt; - in production at Pressly, Cloudflare, Heroku, 99Designs, and many others (see &lt;a href="https://github.com/go-chi/chi/issues/91"&gt;discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Doc generation&lt;/strong&gt; - &lt;code&gt;docgen&lt;/code&gt; auto-generates routing documentation from your source to JSON or Markdown&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Go.mod support&lt;/strong&gt; - as of v5, go.mod support (see &lt;a href="https://github.com/go-chi/chi/raw/master/CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No external dependencies&lt;/strong&gt; - plain ol' Go stdlib + net/http&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/go-chi/chi/raw/master/_examples/"&gt;_examples/&lt;/a&gt; for a variety of examples.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;As easy as:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

func main() {
	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("welcome"))
	})
	http.ListenAndServe(":3000", r)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;REST Preview:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Here is a little preview of what routing looks like with chi. Also take a look at the generated routing docs in JSON (&lt;a href="https://github.com/go-chi/chi/raw/master/_examples/rest/routes.json"&gt;routes.json&lt;/a&gt;) and in Markdown (&lt;a href="https://github.com/go-chi/chi/raw/master/_examples/rest/routes.md"&gt;routes.md&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;I highly recommend reading the source of the &lt;a href="https://github.com/go-chi/chi/raw/master/_examples/"&gt;examples&lt;/a&gt; listed above, they will show you all the features of chi and serve as a good form of documentation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
  //...
  "context"
  "github.com/go-chi/chi/v5"
  "github.com/go-chi/chi/v5/middleware"
)

func main() {
  r := chi.NewRouter()

  // A good base middleware stack
  r.Use(middleware.RequestID)
  r.Use(middleware.RealIP)
  r.Use(middleware.Logger)
  r.Use(middleware.Recoverer)

  // Set a timeout value on the request context (ctx), that will signal
  // through ctx.Done() that the request has timed out and further
  // processing should be stopped.
  r.Use(middleware.Timeout(60 * time.Second))

  r.Get("/", func(w http.ResponseWriter, r *http.Request) {
    w.Write([]byte("hi"))
  })

  // RESTy routes for "articles" resource
  r.Route("/articles", func(r chi.Router) {
    r.With(paginate).Get("/", listArticles)                           // GET /articles
    r.With(paginate).Get("/{month}-{day}-{year}", listArticlesByDate) // GET /articles/01-16-2017

    r.Post("/", createArticle)                                        // POST /articles
    r.Get("/search", searchArticles)                                  // GET /articles/search

    // Regexp url parameters:
    r.Get("/{articleSlug:[a-z-]+}", getArticleBySlug)                // GET /articles/home-is-toronto

    // Subrouters:
    r.Route("/{articleID}", func(r chi.Router) {
      r.Use(ArticleCtx)
      r.Get("/", getArticle)                                          // GET /articles/123
      r.Put("/", updateArticle)                                       // PUT /articles/123
      r.Delete("/", deleteArticle)                                    // DELETE /articles/123
    })
  })

  // Mount the admin sub-router
  r.Mount("/admin", adminRouter())

  http.ListenAndServe(":3333", r)
}

func ArticleCtx(next http.Handler) http.Handler {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    articleID := chi.URLParam(r, "articleID")
    article, err := dbGetArticle(articleID)
    if err != nil {
      http.Error(w, http.StatusText(404), 404)
      return
    }
    ctx := context.WithValue(r.Context(), "article", article)
    next.ServeHTTP(w, r.WithContext(ctx))
  })
}

func getArticle(w http.ResponseWriter, r *http.Request) {
  ctx := r.Context()
  article, ok := ctx.Value("article").(*Article)
  if !ok {
    http.Error(w, http.StatusText(422), 422)
    return
  }
  w.Write([]byte(fmt.Sprintf("title:%s", article.Title)))
}

// A completely separate router for administrator routes
func adminRouter() http.Handler {
  r := chi.NewRouter()
  r.Use(AdminOnly)
  r.Get("/", adminIndex)
  r.Get("/accounts", adminListAccounts)
  return r
}

func AdminOnly(next http.Handler) http.Handler {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    ctx := r.Context()
    perm, ok := ctx.Value("acl.permission").(YourPermissionType)
    if !ok || !perm.IsAdmin() {
      http.Error(w, http.StatusText(403), 403)
      return
    }
    next.ServeHTTP(w, r)
  })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Router interface&lt;/h2&gt; 
&lt;p&gt;chi's router is based on a kind of &lt;a href="https://en.wikipedia.org/wiki/Radix_tree"&gt;Patricia Radix trie&lt;/a&gt;. The router is fully compatible with &lt;code&gt;net/http&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Built on top of the tree is the &lt;code&gt;Router&lt;/code&gt; interface:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Router consisting of the core routing methods used by chi's Mux,
// using only the standard net/http.
type Router interface {
	http.Handler
	Routes

	// Use appends one or more middlewares onto the Router stack.
	Use(middlewares ...func(http.Handler) http.Handler)

	// With adds inline middlewares for an endpoint handler.
	With(middlewares ...func(http.Handler) http.Handler) Router

	// Group adds a new inline-Router along the current routing
	// path, with a fresh middleware stack for the inline-Router.
	Group(fn func(r Router)) Router

	// Route mounts a sub-Router along a `pattern` string.
	Route(pattern string, fn func(r Router)) Router

	// Mount attaches another http.Handler along ./pattern/*
	Mount(pattern string, h http.Handler)

	// Handle and HandleFunc adds routes for `pattern` that matches
	// all HTTP methods.
	Handle(pattern string, h http.Handler)
	HandleFunc(pattern string, h http.HandlerFunc)

	// Method and MethodFunc adds routes for `pattern` that matches
	// the `method` HTTP method.
	Method(method, pattern string, h http.Handler)
	MethodFunc(method, pattern string, h http.HandlerFunc)

	// HTTP-method routing along `pattern`
	Connect(pattern string, h http.HandlerFunc)
	Delete(pattern string, h http.HandlerFunc)
	Get(pattern string, h http.HandlerFunc)
	Head(pattern string, h http.HandlerFunc)
	Options(pattern string, h http.HandlerFunc)
	Patch(pattern string, h http.HandlerFunc)
	Post(pattern string, h http.HandlerFunc)
	Put(pattern string, h http.HandlerFunc)
	Trace(pattern string, h http.HandlerFunc)

	// NotFound defines a handler to respond whenever a route could
	// not be found.
	NotFound(h http.HandlerFunc)

	// MethodNotAllowed defines a handler to respond whenever a method is
	// not allowed.
	MethodNotAllowed(h http.HandlerFunc)
}

// Routes interface adds two methods for router traversal, which is also
// used by the github.com/go-chi/docgen package to generate documentation for Routers.
type Routes interface {
	// Routes returns the routing tree in an easily traversable structure.
	Routes() []Route

	// Middlewares returns the list of middlewares in use by the router.
	Middlewares() Middlewares

	// Match searches the routing tree for a handler that matches
	// the method/path - similar to routing a http request, but without
	// executing the handler thereafter.
	Match(rctx *Context, method, path string) bool
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each routing method accepts a URL &lt;code&gt;pattern&lt;/code&gt; and chain of &lt;code&gt;handlers&lt;/code&gt;. The URL pattern supports named params (ie. &lt;code&gt;/users/{userID}&lt;/code&gt;) and wildcards (ie. &lt;code&gt;/admin/*&lt;/code&gt;). URL parameters can be fetched at runtime by calling &lt;code&gt;chi.URLParam(r, "userID")&lt;/code&gt; for named parameters and &lt;code&gt;chi.URLParam(r, "*")&lt;/code&gt; for a wildcard parameter.&lt;/p&gt; 
&lt;h3&gt;Middleware handlers&lt;/h3&gt; 
&lt;p&gt;chi's middlewares are just stdlib net/http middleware handlers. There is nothing special about them, which means the router and all the tooling is designed to be compatible and friendly with any middleware in the community. This offers much better extensibility and reuse of packages and is at the heart of chi's purpose.&lt;/p&gt; 
&lt;p&gt;Here is an example of a standard net/http middleware where we assign a context key &lt;code&gt;"user"&lt;/code&gt; the value of &lt;code&gt;"123"&lt;/code&gt;. This middleware sets a hypothetical user identifier on the request context and calls the next handler in the chain.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// HTTP middleware setting a value on the request context
func MyMiddleware(next http.Handler) http.Handler {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    // create new context from `r` request context, and assign key `"user"`
    // to value of `"123"`
    ctx := context.WithValue(r.Context(), "user", "123")

    // call the next handler in the chain, passing the response writer and
    // the updated request object with the new context value.
    //
    // note: context.Context values are nested, so any previously set
    // values will be accessible as well, and the new `"user"` key
    // will be accessible from this point forward.
    next.ServeHTTP(w, r.WithContext(ctx))
  })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Request handlers&lt;/h3&gt; 
&lt;p&gt;chi uses standard net/http request handlers. This little snippet is an example of a http.Handler func that reads a user identifier from the request context - hypothetically, identifying the user sending an authenticated request, validated+set by a previous middleware handler.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// HTTP handler accessing data from the request context.
func MyRequestHandler(w http.ResponseWriter, r *http.Request) {
  // here we read from the request context and fetch out `"user"` key set in
  // the MyMiddleware example above.
  user := r.Context().Value("user").(string)

  // respond to the client
  w.Write([]byte(fmt.Sprintf("hi %s", user)))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;URL parameters&lt;/h3&gt; 
&lt;p&gt;chi's router parses and stores URL parameters right onto the request context. Here is an example of how to access URL params in your net/http handlers. And of course, middlewares are able to access the same information.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// HTTP handler accessing the url routing parameters.
func MyRequestHandler(w http.ResponseWriter, r *http.Request) {
  // fetch the url parameter `"userID"` from the request of a matching
  // routing pattern. An example routing pattern could be: /users/{userID}
  userID := chi.URLParam(r, "userID")

  // fetch `"key"` from the request context
  ctx := r.Context()
  key := ctx.Value("key").(string)

  // respond to the client
  w.Write([]byte(fmt.Sprintf("hi %v, %v", userID, key)))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Middlewares&lt;/h2&gt; 
&lt;p&gt;chi comes equipped with an optional &lt;code&gt;middleware&lt;/code&gt; package, providing a suite of standard &lt;code&gt;net/http&lt;/code&gt; middlewares. Please note, any middleware in the ecosystem that is also compatible with &lt;code&gt;net/http&lt;/code&gt; can be used with chi's mux.&lt;/p&gt; 
&lt;h3&gt;Core middlewares&lt;/h3&gt; 
&lt;hr&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;chi/middleware Handler&lt;/th&gt; 
   &lt;th align="left"&gt;description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#AllowContentEncoding"&gt;AllowContentEncoding&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Enforces a whitelist of request Content-Encoding headers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#AllowContentType"&gt;AllowContentType&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Explicit whitelist of accepted request Content-Types&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#BasicAuth"&gt;BasicAuth&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Basic HTTP authentication&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#Compress"&gt;Compress&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Gzip compression for clients that accept compressed responses&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#ContentCharset"&gt;ContentCharset&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Ensure charset for Content-Type request headers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#CleanPath"&gt;CleanPath&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Clean double slashes from request path&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#GetHead"&gt;GetHead&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Automatically route undefined HEAD requests to GET handlers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#Heartbeat"&gt;Heartbeat&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Monitoring endpoint to check the servers pulse&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#Logger"&gt;Logger&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Logs the start and end of each request with the elapsed processing time&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#NoCache"&gt;NoCache&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sets response headers to prevent clients from caching&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#Profiler"&gt;Profiler&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Easily attach net/http/pprof to your routers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#RealIP"&gt;RealIP&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sets a http.Request's RemoteAddr to either X-Real-IP or X-Forwarded-For&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#Recoverer"&gt;Recoverer&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Gracefully absorb panics and prints the stack trace&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#RequestID"&gt;RequestID&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Injects a request ID into the context of each request&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#RedirectSlashes"&gt;RedirectSlashes&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Redirect slashes on routing paths&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#RouteHeaders"&gt;RouteHeaders&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Route handling for request headers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#SetHeader"&gt;SetHeader&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Short-hand middleware to set a response header key/value&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#StripSlashes"&gt;StripSlashes&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Strip slashes on routing paths&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/v5/middleware#Sunset"&gt;Sunset&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sunset set Deprecation/Sunset header to response&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#Throttle"&gt;Throttle&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Puts a ceiling on the number of concurrent requests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#Timeout"&gt;Timeout&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Signals to the request context when the timeout deadline is reached&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#URLFormat"&gt;URLFormat&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Parse extension from url and put it on request context&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://pkg.go.dev/github.com/go-chi/chi/middleware#WithValue"&gt;WithValue&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Short-hand middleware to set a key/value on the request context&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr&gt; 
&lt;h3&gt;Extra middlewares &amp;amp; packages&lt;/h3&gt; 
&lt;p&gt;Please see &lt;a href="https://github.com/go-chi"&gt;https://github.com/go-chi&lt;/a&gt; for additional packages.&lt;/p&gt; 
&lt;hr&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;package&lt;/th&gt; 
   &lt;th align="left"&gt;description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/cors"&gt;cors&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Cross-origin resource sharing (CORS)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/docgen"&gt;docgen&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Print chi.Router routes at runtime&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/jwtauth"&gt;jwtauth&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;JWT authentication&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/hostrouter"&gt;hostrouter&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Domain/host based request routing&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/httplog"&gt;httplog&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Small but powerful structured HTTP request logging&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/httprate"&gt;httprate&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;HTTP request rate limiter&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/httptracer"&gt;httptracer&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;HTTP request performance tracing library&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/httpvcr"&gt;httpvcr&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Write deterministic tests for external sources&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/go-chi/stampede"&gt;stampede&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;HTTP request coalescer&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr&gt; 
&lt;h2&gt;context?&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;context&lt;/code&gt; is a tiny pkg that provides simple interface to signal context across call stacks and goroutines. It was originally written by &lt;a href="https://github.com/Sajmani"&gt;Sameer Ajmani&lt;/a&gt; and is available in stdlib since go1.7.&lt;/p&gt; 
&lt;p&gt;Learn more at &lt;a href="https://blog.golang.org/context"&gt;https://blog.golang.org/context&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;and..&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docs: &lt;a href="https://golang.org/pkg/context"&gt;https://golang.org/pkg/context&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Source: &lt;a href="https://github.com/golang/go/tree/master/src/context"&gt;https://github.com/golang/go/tree/master/src/context&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;The benchmark suite: &lt;a href="https://github.com/pkieltyka/go-http-routing-benchmark"&gt;https://github.com/pkieltyka/go-http-routing-benchmark&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Results as of Nov 29, 2020 with Go 1.15.5 on Linux AMD 3950x&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;BenchmarkChi_Param          	3075895	        384 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_Param5         	2116603	        566 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_Param20        	 964117	       1227 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_ParamWrite     	2863413	        420 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_GithubStatic   	3045488	        395 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_GithubParam    	2204115	        540 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_GithubAll      	  10000	     113811 ns/op	    81203 B/op    406 allocs/op
BenchmarkChi_GPlusStatic    	3337485	        359 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_GPlusParam     	2825853	        423 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_GPlus2Params   	2471697	        483 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_GPlusAll       	 194220	       5950 ns/op	     5200 B/op     26 allocs/op
BenchmarkChi_ParseStatic    	3365324	        356 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_ParseParam     	2976614	        404 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_Parse2Params   	2638084	        439 ns/op	      400 B/op      2 allocs/op
BenchmarkChi_ParseAll       	 109567	      11295 ns/op	    10400 B/op     52 allocs/op
BenchmarkChi_StaticAll      	  16846	      71308 ns/op	    62802 B/op    314 allocs/op
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Comparison with other routers: &lt;a href="https://gist.github.com/pkieltyka/123032f12052520aaccab752bd3e78cc"&gt;https://gist.github.com/pkieltyka/123032f12052520aaccab752bd3e78cc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;NOTE: the allocs in the benchmark above are from the calls to http.Request's &lt;code&gt;WithContext(context.Context)&lt;/code&gt; method that clones the http.Request, sets the &lt;code&gt;Context()&lt;/code&gt; on the duplicated (alloc'd) request and returns it the new request object. This is just how setting context on a request in Go works.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Carl Jackson for &lt;a href="https://github.com/zenazn/goji"&gt;https://github.com/zenazn/goji&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Parts of chi's thinking comes from goji, and chi's middleware package sources from &lt;a href="https://github.com/zenazn/goji/tree/master/web/middleware"&gt;goji&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Please see goji's &lt;a href="https://github.com/zenazn/goji/raw/master/LICENSE"&gt;LICENSE&lt;/a&gt; (MIT)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Armon Dadgar for &lt;a href="https://github.com/armon/go-radix"&gt;https://github.com/armon/go-radix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Contributions: &lt;a href="https://github.com/VojtechVitek"&gt;@VojtechVitek&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We'll be more than happy to see &lt;a href="https://raw.githubusercontent.com/go-chi/chi/master/CONTRIBUTING.md"&gt;your contributions&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Beyond REST&lt;/h2&gt; 
&lt;p&gt;chi is just a http router that lets you decompose request handling into many smaller layers. Many companies use chi to write REST services for their public APIs. But, REST is just a convention for managing state via HTTP, and there's a lot of other pieces required to write a complete client-server system or network of microservices.&lt;/p&gt; 
&lt;p&gt;Looking beyond REST, I also recommend some newer works in the field:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/webrpc/webrpc"&gt;webrpc&lt;/a&gt; - Web-focused RPC client+server framework with code-gen&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grpc/grpc-go"&gt;gRPC&lt;/a&gt; - Google's RPC framework via protobufs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/99designs/gqlgen"&gt;graphql&lt;/a&gt; - Declarative query language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nats.io"&gt;NATS&lt;/a&gt; - lightweight pub-sub&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2015-present &lt;a href="https://github.com/pkieltyka"&gt;Peter Kieltyka&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Licensed under &lt;a href="https://raw.githubusercontent.com/go-chi/chi/master/LICENSE"&gt;MIT License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gorilla/websocket</title>
      <link>https://github.com/gorilla/websocket</link>
      <description>&lt;p&gt;Package gorilla/websocket is a fast, well-tested and widely used WebSocket implementation for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gorilla WebSocket&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://godoc.org/github.com/gorilla/websocket"&gt;&lt;img src="https://godoc.org/github.com/gorilla/websocket?status.svg?sanitize=true" alt="GoDoc"&gt;&lt;/a&gt; &lt;a href="https://circleci.com/gh/gorilla/websocket"&gt;&lt;img src="https://circleci.com/gh/gorilla/websocket.svg?style=svg" alt="CircleCI"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Gorilla WebSocket is a &lt;a href="http://golang.org/"&gt;Go&lt;/a&gt; implementation of the &lt;a href="http://www.rfc-editor.org/rfc/rfc6455.txt"&gt;WebSocket&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pkg.go.dev/github.com/gorilla/websocket?tab=doc"&gt;API Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla/websocket/tree/main/examples/chat"&gt;Chat example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla/websocket/tree/main/examples/command"&gt;Command example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla/websocket/tree/main/examples/echo"&gt;Client and server example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gorilla/websocket/tree/main/examples/filewatch"&gt;File watch example&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;p&gt;The Gorilla WebSocket package provides a complete and tested implementation of the &lt;a href="http://www.rfc-editor.org/rfc/rfc6455.txt"&gt;WebSocket&lt;/a&gt; protocol. The package API is stable.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;go get github.com/gorilla/websocket
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Protocol Compliance&lt;/h3&gt; 
&lt;p&gt;The Gorilla WebSocket package passes the server tests in the &lt;a href="https://github.com/crossbario/autobahn-testsuite"&gt;Autobahn Test Suite&lt;/a&gt; using the application in the &lt;a href="https://github.com/gorilla/websocket/tree/main/examples/autobahn"&gt;examples/autobahn subdirectory&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>evcc-io/evcc</title>
      <link>https://github.com/evcc-io/evcc</link>
      <description>&lt;p&gt;solar charging ‚òÄÔ∏èüöò&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;evcc üöò‚òÄÔ∏è&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/evcc-io/evcc/actions/workflows/nightly.yml"&gt;&lt;img src="https://github.com/evcc-io/evcc/actions/workflows/nightly.yml/badge.svg?sanitize=true" alt="Build"&gt;&lt;/a&gt; &lt;a href="https://hosted.weblate.org/engage/evcc/"&gt;&lt;img src="https://hosted.weblate.org/widgets/evcc/-/evcc/svg-badge.svg?sanitize=true" alt="Translation"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/docker/pulls/evcc/evcc" alt="Docker Pulls"&gt; &lt;a href="https://cloudsmith.io/~evcc/packages/"&gt;&lt;img src="https://img.shields.io/badge/OSS%20hosting%20by-cloudsmith-blue?logo=cloudsmith" alt="OSS hosting by cloudsmith"&gt;&lt;/a&gt; &lt;a href="https://github.com/evcc-io/evcc/releases"&gt;&lt;img src="https://img.shields.io/github/release/evcc-io/evcc.svg?sanitize=true" alt="Latest Version"&gt;&lt;/a&gt;&lt;br&gt; &lt;a href="https://depot.dev/?utm_source=evcc"&gt;&lt;img src="https://depot.dev/badges/built-with-depot.svg?sanitize=true" alt="Built with Depot"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;evcc is an extensible EV Charge Controller and home energy management system.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/evcc-io/evcc/master/assets/github/screenshot.webp" alt="Screenshot"&gt;&lt;/p&gt; 
&lt;p&gt;Our goal is to provide local energy management, without relying on cloud services. Featured in &lt;a href="https://www.pv-magazine.de/2022/01/14/mit-open-source-lademanager-schnittstellen-zu-wallbox-und-photovoltaik-anlage-meistern/"&gt;PV Magazine&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=MoBpEXHMNjI"&gt;c‚Äôt Magazin&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;simple and clean user interface&lt;/li&gt; 
 &lt;li&gt;support for many &lt;a href="https://docs.evcc.io/en/docs/devices/chargers"&gt;EV chargers&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;ABB, ABL, Alfen, Alphatec, Amperfied, Ampure, Audi, AUTEL, Autoaid, Bender, BMW, cFos, Charge Amps, Compleo, CUBOS, Cupra, Dadapower, DaheimLaden, Delta, E.ON Drive, E3/DC, Easee, Ebee, echarge, EcoHarmony, Edgetech, Elecq, eledio, Elli, EM2GO, EN+, enercab, Ensto, EntraTek, ESL, eSystems, Etrel, EVBox, Free2Move, Free2move eSolutions, Fronius, Garo, go-e, Hardy Barth, Heidelberg, Hesotec, Homecharge, Huawei, Innogy, INRO, Juice, Kathrein, KEBA, Kontron Solar, Kostal, KSE, LadeFoxx, LRT, Mennekes, NRGkick, OBO Bettermann, OpenEVSE, openWB, Optec, Orbis, PC Electric, Peblar, Phoenix Contact, Plugchoice, Porsche, Pracht, Pulsares, Pulsatrix, Qcells, Schneider, Schrack, SENEC, Siemens, Skoda, SMA, Smartfox, SolarEdge, Solax, Sonnen, Spelsberg, Stark in Strom, Sungrow, TechniSat, Tesla, Tigo, TinkerForge, Ubitricity, V2C Trydan, Vestel, Victron, Viridian EV, Volkswagen, Volt Time, Wallbe, wallbox, Walther Werke, Webasto, Weidm√ºller, Zaptec, ZJ Beny. &lt;a href="https://docs.evcc.io/en/docs/devices/chargers"&gt;Read more.&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;EEBus&lt;/strong&gt; support (Elli, PMCC)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;OCPP&lt;/strong&gt; support&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;build-your-own:&lt;/strong&gt; Phoenix Contact (includes ESL Walli), EVSE DIN&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;smart switches:&lt;/strong&gt; AVM, Home Assistant, Homematic IP, HomeWizard, myStrom, Shelly, Tasmota, TP-Link. &lt;a href="https://docs.evcc.io/en/docs/devices/smartswitches"&gt;Read more.&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;heat pumps and electric heaters:&lt;/strong&gt; alpha innotec, Bosch, Buderus, B√∂sch, CTA All-In-One, Daikin, Elco, IDM, Junkers, Kermi, Lambda, my-PV, Nibe, Novelan, Roth, Stiebel Eltron, Tecalor, Vaillant, Viessmann, Wolf, Zewotherm. &lt;a href="https://docs.evcc.io/en/docs/devices/heating"&gt;Read more.&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;support for many &lt;a href="https://docs.evcc.io/en/docs/devices/meters"&gt;energy meters&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;solar inverters and battery systems:&lt;/strong&gt; A-Tronix, Acrel, Ads-tec, Alpha ESS, Ampere, Anker, APsystems, AVM, Axitec, BGEtech, Bosch, Bosswerk, Carlo Gavazzi, Deye, E3/DC, Eastron, Enphase, FENECON, FoxESS, Fronius, Ginlong, go-e, GoodWe, Growatt, Homematic IP, HomeWizard, Hoymiles, Huawei, IAMMETER, IGEN Tech, Kostal, LG, Loxone, M-TEC, Marstek, myStrom, OpenEMS, Powerfox, Qcells, RCT, SAJ, SAX, SENEC, Senergy, Shelly, Siemens, Sigenergy, SMA, Smartfox, SofarSolar, Solaranzeige, SolarEdge, SolarMax, Solarwatt, Solax, Solinteng, Sonnen, St-ems, Steca, Sungrow, Sunsynk, Sunway, Tasmota, Tesla, TP-Link, VARTA, Victron, Wattsonic, Youless, ZCS Azzurro, Zendure. &lt;a href="https://docs.evcc.io/en/docs/devices/meters"&gt;Read more.&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;general energy meters:&lt;/strong&gt; A-Tronix, ABB, Acrel, Alpha ESS, Ampere, AVM, Axitec, Bernecker Engineering, BGEtech, Bosch, Carlo Gavazzi, cFos, Deye, DSMR, DZG, E3/DC, Eastron, Enphase, ESPHome, FENECON, FoxESS, Fronius, Ginlong, go-e, GoodWe, Growatt, Homematic IP, HomeWizard, Huawei, IAMMETER, inepro, IOmeter, Janitza, KEBA, Kostal, LG, Loxone, M-TEC, mhendriks, my-PV, myStrom, OpenEMS, ORNO, P1Monitor, Powerfox, Qcells, RCT, Saia-Burgess Controls (SBC), SAJ, SAX, Schneider Electric, SENEC, Shelly, Siemens, Sigenergy, SMA, Smartfox, SofarSolar, Solaranzeige, SolarEdge, SolarMax, Solarwatt, Solax, Solinteng, Sonnen, St-ems, Sungrow, Sunsynk, Sunway, Tasmota, Tesla, Tibber, TQ, VARTA, Victron, Volksz√§hler, Wago, Wattsonic, Weidm√ºller, Youless, ZCS Azzurro, Zuidwijk. &lt;a href="https://docs.evcc.io/en/docs/devices/meters"&gt;Read more.&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;integrated systems&lt;/strong&gt;: SMA Sunny Home Manager and Energy Meter, KOSTAL Smart Energy Meter (KSEM, EMxx)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;sunspec&lt;/strong&gt;-compatible inverter or home battery devices&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;mbmd&lt;/strong&gt;-compatible devices, see &lt;a href="https://github.com/volkszaehler/mbmd#supported-devices"&gt;volkszaehler/mbmd&lt;/a&gt; for a complete list&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.evcc.io/en/docs/devices/vehicles"&gt;vehicle&lt;/a&gt; integrations (state of charge, remote charge, battery and preconditioning status): 
  &lt;ul&gt; 
   &lt;li&gt;Aiways, Audi, BMW, Citro√´n, Dacia, DS, Fiat, Ford, Hyundai, Jeep, Kia, Mercedes-Benz, MG, Mini, Nissan, NIU, Opel, Peugeot, Polestar, Renault, Seat, Skoda, Smart, Tesla, Toyota, Volkswagen, Volvo, Zero Motorcycles. &lt;a href="https://docs.evcc.io/en/docs/devices/vehicles"&gt;Read more.&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;services:&lt;/strong&gt; OVMS, Tronity, evNotify, ioBroker.bmw, mg2mqtt, mz2mqtt, TeslaLogger, TeslaMate, Tessi, volvo2mqtt&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.evcc.io/en/docs/devices/plugins"&gt;plugins&lt;/a&gt; for integrating with any charger, smartswitch, heatpump, electric heater, meter, solar- / battery-inverter or vehicle: 
  &lt;ul&gt; 
   &lt;li&gt;Modbus, HTTP, MQTT, JavaScript, WebSocket, Go and shell scripts&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;status &lt;a href="https://docs.evcc.io/en/docs/reference/configuration/messaging"&gt;notifications&lt;/a&gt; using &lt;a href="https://telegram.org"&gt;Telegram&lt;/a&gt;, &lt;a href="https://pushover.net"&gt;PushOver&lt;/a&gt; and &lt;a href="https://containrrr.dev/shoutrrr/"&gt;many more&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;logging using &lt;a href="https://www.influxdata.com"&gt;InfluxDB&lt;/a&gt; and &lt;a href="https://grafana.com/grafana/"&gt;Grafana&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.evcc.io/en/docs/integrations/rest-api"&gt;REST&lt;/a&gt; and &lt;a href="https://docs.evcc.io/en/docs/integrations/mqtt-api"&gt;MQTT&lt;/a&gt; APIs for integration with home automation systems&lt;/li&gt; 
 &lt;li&gt;Add-ons for &lt;a href="https://docs.evcc.io/en/docs/integrations/home-assistant"&gt;Home Assistant&lt;/a&gt; and &lt;a href="https://www.openhab.org/addons/bindings/evcc"&gt;OpenHAB&lt;/a&gt; (not maintained by the evcc core team)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You'll find everything you need in our &lt;a href="https://docs.evcc.io/en/"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Technical details on how to contribute, how to add translations and how to build evcc from source can be found &lt;a href="https://raw.githubusercontent.com/evcc-io/evcc/master/CONTRIBUTING.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hosted.weblate.org/engage/evcc/"&gt;&lt;img src="https://hosted.weblate.org/widgets/evcc/-/evcc/287x66-grey.png" alt="Weblate Hosted"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/evcc-io/evcc/master/assets/github/evcc-gopher.png" align="right" width="150"&gt; 
&lt;p&gt;evcc believes in open source software. We're committed to provide best in class EV charging experience. Maintaining evcc consumes time and effort. With the vast amount of different devices to support, we depend on community and vendor support to keep evcc alive.&lt;/p&gt; 
&lt;p&gt;While evcc is open source, we would also like to encourage vendors to provide open source hardware devices, public documentation and support open source projects like ours that provide additional value to otherwise closed hardware. Where this is not the case, evcc requires "sponsor token" to finance ongoing development and support of evcc.&lt;/p&gt; 
&lt;p&gt;Learn more about our &lt;a href="https://docs.evcc.io/en/docs/sponsorship"&gt;sponsorship model&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>open-telemetry/opentelemetry-collector</title>
      <link>https://github.com/open-telemetry/opentelemetry-collector</link>
      <description>&lt;p&gt;OpenTelemetry Collector&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://opentelemetry.io/docs/collector/getting-started/"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md"&gt;Getting Involved&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp; &lt;a href="https://cloud-native.slack.com/archives/C01N6P7KR6W"&gt;Getting In Touch&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/actions/workflows/build-and-test.yml?query=branch%3Amain"&gt; &lt;img alt="Build Status" src="https://img.shields.io/github/actions/workflow/status/open-telemetry/opentelemetry-collector/build-and-test.yml?branch=main&amp;amp;style=for-the-badge"&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/open-telemetry/opentelemetry-collector"&gt; &lt;img alt="Go Report Card" src="https://goreportcard.com/badge/github.com/open-telemetry/opentelemetry-collector?style=for-the-badge"&gt; &lt;/a&gt; &lt;a href="https://codecov.io/gh/open-telemetry/opentelemetry-collector/branch/main/"&gt; &lt;img alt="Codecov Status" src="https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-collector?style=for-the-badge"&gt; &lt;/a&gt; &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/releases"&gt; &lt;img alt="GitHub release (latest by date including pre-releases)" src="https://img.shields.io/github/v/release/open-telemetry/opentelemetry-collector?include_prereleases&amp;amp;style=for-the-badge"&gt; &lt;/a&gt; &lt;br&gt; &lt;a href="https://www.bestpractices.dev/projects/8404"&gt;&lt;img src="https://www.bestpractices.dev/projects/8404/badge"&gt; &lt;/a&gt; &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:opentelemetry"&gt; &lt;img alt="Fuzzing Status" src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/opentelemetry.svg?sanitize=true"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/vision.md"&gt;Vision&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp; &lt;a href="https://opentelemetry.io/docs/collector/configuration/"&gt;Configuration&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp; &lt;a href="https://opentelemetry.io/docs/collector/internal-telemetry/#use-internal-telemetry-to-monitor-the-collector"&gt;Monitoring&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/security-best-practices.md"&gt;Security&lt;/a&gt; &amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp; &lt;a href="https://pkg.go.dev/go.opentelemetry.io/collector"&gt;Package&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;&lt;img src="https://opentelemetry.io/img/logos/opentelemetry-logo-nav.png" alt="OpenTelemetry Icon" width="45" height=""&gt; OpenTelemetry Collector&lt;/h1&gt; 
&lt;p&gt;The OpenTelemetry Collector offers a vendor-agnostic implementation on how to receive, process and export telemetry data. In addition, it removes the need to run, operate and maintain multiple agents/collectors in order to support open-source telemetry data formats (e.g. Jaeger, Prometheus, etc.) to multiple open-source or commercial back-ends.&lt;/p&gt; 
&lt;p&gt;Objectives:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usable: Reasonable default configuration, supports popular protocols, runs and collects out of the box.&lt;/li&gt; 
 &lt;li&gt;Performant: Highly stable and performant under varying loads and configurations.&lt;/li&gt; 
 &lt;li&gt;Observable: An exemplar of an observable service.&lt;/li&gt; 
 &lt;li&gt;Extensible: Customizable without touching the core code.&lt;/li&gt; 
 &lt;li&gt;Unified: Single codebase, deployable as an agent or collector with support for traces, metrics and logs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The OpenTelemetry Collector SIG is present at the &lt;a href="https://cloud-native.slack.com/archives/C01N6P7KR6W"&gt;#otel-collector&lt;/a&gt; channel on the CNCF Slack and &lt;a href="https://github.com/open-telemetry/community#implementation-sigs"&gt;meets once a week&lt;/a&gt; via video calls. Everyone is invited to join those calls, which typically serves the following purposes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;meet the humans behind the project&lt;/li&gt; 
 &lt;li&gt;get an opinion about specific proposals&lt;/li&gt; 
 &lt;li&gt;look for a sponsor for a proposed component after trying already via GitHub and Slack&lt;/li&gt; 
 &lt;li&gt;get attention to a specific pull-request that got stuck and is difficult to discuss asynchronously&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We rotate our video calls between three time slots, in order to allow everyone to join at least once every three meetings. The rotation order is as follows:&lt;/p&gt; 
&lt;p&gt;Tuesday:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=1700"&gt;17:00 PT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Wednesday:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=0900"&gt;09:00 PT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=0500"&gt;05:00 PT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Contributors to the project are also welcome to have ad-hoc meetings for synchronous discussions about specific points. Post a note in #otel-collector-dev on Slack inviting others, specifying the topic to be discussed. Unless there are strong reasons to keep the meeting private, please make it an open invitation for other contributors to join. Try also to identify who would be the other contributors interested on that topic and in which timezones they are.&lt;/p&gt; 
&lt;p&gt;Remember that our source of truth is GitHub: every decision made via Slack or video calls has to be recorded in the relevant GitHub issue. Ideally, the agenda items from the meeting notes would include a link to the issue or pull request where a discussion is happening already. We acknowledge that not everyone can join Slack or the synchronous calls and don't want them to feel excluded.&lt;/p&gt; 
&lt;h2&gt;Supported OTLP version&lt;/h2&gt; 
&lt;p&gt;This code base is currently built against using OTLP protocol v1.5.0, considered Stable. &lt;a href="https://github.com/open-telemetry/opentelemetry-proto?tab=readme-ov-file#stability-definition"&gt;See the OpenTelemetry Protocol Stability definition here.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Stability levels&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/component-stability.md"&gt;Stability Levels and versioning&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;When used as a library, the OpenTelemetry Collector attempts to track the currently supported versions of Go, as &lt;a href="https://go.dev/doc/devel/release#policy"&gt;defined by the Go team&lt;/a&gt;. Removing support for an unsupported Go version is not considered a breaking change.&lt;/p&gt; 
&lt;p&gt;Support for Go versions on the OpenTelemetry Collector is updated as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will add build and tests steps for the new Go minor version.&lt;/li&gt; 
 &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will remove support for Go version &lt;code&gt;N-2&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Official OpenTelemetry Collector distro binaries will be built with a release in the latest Go minor version series.&lt;/p&gt; 
&lt;h2&gt;Verifying the images signatures&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] To verify a signed artifact or blob, first &lt;a href="https://docs.sigstore.dev/cosign/system_config/installation/"&gt;install Cosign&lt;/a&gt;, then follow the instructions below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We are signing the images &lt;code&gt;otel/opentelemetry-collector&lt;/code&gt; and &lt;code&gt;otel/opentelemetry-collector-contrib&lt;/code&gt; using &lt;a href="https://github.com/sigstore/cosign"&gt;sigstore cosign&lt;/a&gt; tool and to verify the signatures you can run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cosign verify \
  --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/&amp;lt;RELEASE_TAG&amp;gt; \
  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
  &amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;RELEASE_TAG&amp;gt;&lt;/code&gt;: is the release that you want to validate&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;&lt;/code&gt;: is the image that you want to check&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cosign verify --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0 --certificate-oidc-issuer=https://token.actions.githubusercontent.com ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0

Verification for ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0 --
The following checks were performed on each of these signatures:
  - The cosign claims were validated
  - Existence of the claims in the transparency log was verified offline
  - The code-signing certificate was verified using trusted certificate authority certificates

[{"critical":{"identity":{"docker-reference":"ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"},"image":{"docker-manifest-digest":"sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a"},"type":"cosign container image signature"},"optional":{"1.3.6.1.4.1.57264.1.1":"https://token.actions.githubusercontent.com","1.3.6.1.4.1.57264.1.2":"push","1.3.6.1.4.1.57264.1.3":"9e20bf5c142e53070ccb8320a20315fffb41469e","1.3.6.1.4.1.57264.1.4":"Release Contrib","1.3.6.1.4.1.57264.1.5":"open-telemetry/opentelemetry-collector-releases","1.3.6.1.4.1.57264.1.6":"refs/tags/v0.98.0","Bundle":{"SignedEntryTimestamp":"MEUCIQDdlmNeKXQrHnonwWiHLhLLwFDVDNoOBCn2sv85J9P8mgIgDQFssWJImo1hn38VlojvSCL7Qq5FMmtnGu0oLsNdOm8=","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FVUNJUURFbDV6N0diMWRVYkM5KzR4c1VvbDhMcWZNV2hiTzhkdEpwdExyMXhUNWZnSWdTdEwwN1I0ZDA5R2x0ZkV0azJVbmlJSlJhQVdrVDJNWDVtRXJNSlplc2pRPSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaG9ha05EUW5jeVowRjNTVUpCWjBsVlNETkNjRFZTYlVSU1VpOXphMWg0YVdWUFlrcFhSbmRrUjNNNGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJOTlZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkUwMVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVZyWlRsSE1ubHNjMjkzYVZZMmRFOVZSazlRVVhNd2NXY3hTSEV5WmpsVUx6UTJZbEFLU1ZSNE0ybFRkVXBhV0hGc1dEUldWV2Q1VlZndmNVazJhblZ2WlZSVEswaG5XVUoyYjBseVNERTFUeTltZEd0VmVtRlBRMEpwZDNkbloxbHZUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZHTkRrMUNrdDFNRWhqTm5rek1rNUNTVTFFU21ReVpuWkxNMHBCZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwWjFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpoQ1NHOUJaVUZDTWtGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUlVOUlFVRkJVVVJCUldOM1VsRkpaMWg2Y2xaME0xQjRkU3ROWVZKRkswUkdORzlGUldNMGVucHphSGR1VDJ4bGMwZGlla2xwYnpNS0wxWmpRMGxSUkZNelJ6QmlNemRhYUhRNGFITjJUSEozYkc1UFFXYzJWRXh1U1ZSS09HTjNkMVEzTW5sMVRVdFlUbFJCUzBKblozRm9hMnBQVUZGUlJBcEJkMDV1UVVSQ2EwRnFRWGxFUkZSYVFqQlRPVXBGYkZsSGJuTnZWVmhLYm04MU5Fc3ZUVUZUTlN0RFFVMU9lbWRqUWpWQ2JrRk5OMWhNUjBoV01HRnhDbVpaY21weFkyOXFia3RaUTAxSFRWRnFjalpUVGt0Q2NVaEtZVGwxTDBSTlQySlpNa0pKTVV0ME4yTnhOemhFT0VOcVMzQmFVblJoYnpadFVVMUVZMk1LUms5M2VYWnhWalJPVld0dlpsRTlQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=","integratedTime":1712809120,"logIndex":84797936,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}},"Issuer":"https://token.actions.githubusercontent.com","Subject":"https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0","githubWorkflowName":"Release Contrib","githubWorkflowRef":"refs/tags/v0.98.0","githubWorkflowRepository":"open-telemetry/opentelemetry-collector-releases","githubWorkflowSha":"9e20bf5c142e53070ccb8320a20315fffb41469e","githubWorkflowTrigger":"push"}},{"critical":{"identity":{"docker-reference":"ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"},"image":{"docker-manifest-digest":"sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a"},"type":"cosign container image signature"},"optional":{"1.3.6.1.4.1.57264.1.1":"https://token.actions.githubusercontent.com","1.3.6.1.4.1.57264.1.2":"push","1.3.6.1.4.1.57264.1.3":"9e20bf5c142e53070ccb8320a20315fffb41469e","1.3.6.1.4.1.57264.1.4":"Release Contrib","1.3.6.1.4.1.57264.1.5":"open-telemetry/opentelemetry-collector-releases","1.3.6.1.4.1.57264.1.6":"refs/tags/v0.98.0","Bundle":{"SignedEntryTimestamp":"MEUCIQD1ehDnPO6fzoPIpeQ3KFuYHHBiX7RcEbpo9B2r7JAlzwIgZ1bsuQz7gAXbNU1IEdsTQgfAnRk3xVXO16GnKXM2sAQ=","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FUUNJRU92QXl0aE5RVGNvNHFMdG9GZUVOV0toNCtEK2I5SUxyYWhoa09WMmVBM0FpQjNEL2FpUGd1T05zUlB5alhaWk1hdnlCam0vMkVxNFNUMkZJWHozTnpyYWc9PSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaHBSRU5EUW5jMlowRjNTVUpCWjBsVlZuRlRLMnd4WXpoMWVFUktOWEppZDAxMlVuaDBSR3hXVW1nMGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJSZVZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkZGNVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVYyWlRCdGJrRkdRVzl1TVZoUGRIVlRMMXBNT0djeE5YUlJkVmxPTmtRemVUUlBWM0FLT1ZSTFMwUlVkRkJHU2xST1ZrWlJkVTlKUWs1bVJqWk1ORTlGYkd4dlZuUndaSE5uYjB0NVZGTnlPR3hTV1c1S1JIRlBRMEpwTUhkbloxbHdUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZDSzFkSENuVmtlRE5IZUcxS1RWUkpUVVJyYW13clJtdzFXRzkzZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwZDFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpsQ1NITkJaVkZDTTBGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUjJKSlFVRkJVVVJCUldkM1VtZEphRUZQZUZNM2RteDRjVzVGYTBKVVRtSlZVRUpsUkZSbk0waGtlRlkyY0cxWk9FdGliREV6TjNBS1lWUnViMEZwUlVFelMyMUxVbU5uYWxBeVQzSmxORVpyVm5vNU4xaENNWGRsUzBOeWFXazFTMWx2UTB0bVkxRktSREJSZDBObldVbExiMXBKZW1vd1JRcEJkMDFFWVVGQmQxcFJTWGhCUzNwcVpHMUZTV2gzV21Kb1lVSlNlalk1Y1N0MWVrNVZSMmxhYlRWVk4xcE5aWFJMUTFSM1VFTkljRkZQVldvdlVERkJDa2R0YWt3elJucFFObTVpYkRGblNYZFNUbXN6UkhkNWMwOUJUMHhoUVVoR09IaHhZV0ZzT0U5WGNGRmFhRGh4TTJVMVNVSmFXR0ZWVkhocFlWbGFTM29LUXpWS1RGVlNWbnBMTURsd04wVjBUd290TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=","integratedTime":1712809122,"logIndex":84797940,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}},"Issuer":"https://token.actions.githubusercontent.com","Subject":"https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0","githubWorkflowName":"Release Contrib","githubWorkflowRef":"refs/tags/v0.98.0","githubWorkflowRepository":"open-telemetry/opentelemetry-collector-releases","githubWorkflowSha":"9e20bf5c142e53070ccb8320a20315fffb41469e","githubWorkflowTrigger":"push"}}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] We started signing the images with release &lt;code&gt;v0.95.0&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;Here is a list of community roles with current and previous members:&lt;/p&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/codeboten"&gt;Alex Boten&lt;/a&gt;, Honeycomb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BogdanDrutu"&gt;Bogdan Drutu&lt;/a&gt;, Snowflake&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmitryax"&gt;Dmitrii Anoshin&lt;/a&gt;, Splunk&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mx-psi"&gt;Pablo Baeyens&lt;/a&gt;, DataDog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the maintainer role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#maintainer"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Approvers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atoulme"&gt;Antoine Toulme&lt;/a&gt;, Splunk&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmathieu"&gt;Damien Mathieu&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evan-bradley"&gt;Evan Bradley&lt;/a&gt;, Dynatrace&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jade-guiton-dd"&gt;Jade Guiton&lt;/a&gt;, Datadog&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jmacd"&gt;Joshua MacDonald&lt;/a&gt;, Microsoft&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TylerHelmuth"&gt;Tyler Helmuth&lt;/a&gt;, Honeycomb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/songy23"&gt;Yang Song&lt;/a&gt;, Datadog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the approver role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#approver"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In addition to what is described at the organization-level, the SIG Collector requires all core approvers to take part in rotating the role of the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/release.md#release-manager"&gt;release manager&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andrzej-stencel"&gt;Andrzej Stencel&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sincejune"&gt;Chao Weng&lt;/a&gt;, AppDynamics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VihasMakwana"&gt;Vihas Makwana&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;Actively seeking contributors to triage issues&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the triager role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#triager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pjanotti"&gt;Paulo Janotti&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tigrannajaryan"&gt;Tigran Najaryan&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Approvers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aneurysm9"&gt;Anthony Mirabella&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djaglowski"&gt;Daniel Jaglowski&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/james-bebbington"&gt;James Bebbington&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jrcamp"&gt;Jay Camp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jpkrohling"&gt;Juraci Paix√£o Kr√∂hling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nilebox"&gt;Nail Islamov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/owais"&gt;Owais Lone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rghetia"&gt;Rahul Patel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sjkaris"&gt;Steven Karis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alolita"&gt;Alolita Sharma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andrewhsu"&gt;Andrew Hsu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/punya"&gt;Punya Biswal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flands"&gt;Steve Flanders&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Thanks to all of our contributors!&lt;/h3&gt; 
&lt;a href="https://github.com/open-telemetry/opentelemetry-collector/graphs/contributors"&gt; &lt;img alt="Repo contributors" src="https://contrib.rocks/image?repo=open-telemetry/opentelemetry-collector"&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>opencontainers/image-spec</title>
      <link>https://github.com/opencontainers/image-spec</link>
      <description>&lt;p&gt;OCI Image Format&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OCI Image Format Specification&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/license/opencontainers/image-spec" alt="License"&gt; &lt;a href="https://pkg.go.dev/github.com/opencontainers/image-spec"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/opencontainers/image-spec.svg?sanitize=true" alt="Go Reference"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The OCI Image Format project creates and maintains the software shipping container image format spec (OCI Image Format).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/image-spec/main/spec.md"&gt;The specification can be found here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This repository also provides &lt;a href="https://raw.githubusercontent.com/opencontainers/image-spec/main/specs-go"&gt;Go types&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/opencontainers/image-spec/main/schema"&gt;intra-blob validation tooling, and JSON Schema&lt;/a&gt;. The Go types and validation should be compatible with the current Go release; earlier Go releases are not supported.&lt;/p&gt; 
&lt;p&gt;Additional documentation about how this group operates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/opencontainers/org/raw/master/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/image-spec/main/#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/image-spec/main/RELEASES.md"&gt;Releases&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Running an OCI Image&lt;/h2&gt; 
&lt;p&gt;The OCI Image Format partner project is the &lt;a href="https://github.com/opencontainers/runtime-spec"&gt;OCI Runtime Spec project&lt;/a&gt;. The Runtime Specification outlines how to run a "&lt;a href="https://github.com/opencontainers/runtime-spec/raw/main/bundle.md"&gt;filesystem bundle&lt;/a&gt;" that is unpacked on disk. At a high-level an OCI implementation would download an OCI Image then unpack that image into an OCI Runtime filesystem bundle. At this point the OCI Runtime Bundle would be run by an OCI Runtime.&lt;/p&gt; 
&lt;p&gt;This entire workflow supports the UX that users have come to expect from container engines like Docker and rkt: primarily, the ability to run an image with no additional arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;docker run example.com/org/app:v1.0.0&lt;/li&gt; 
 &lt;li&gt;rkt run example.com/org/app,version=v1.0.0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To support this UX the OCI Image Format contains sufficient information to launch the application on the target platform (e.g. command, arguments, environment variables, etc).&lt;/p&gt; 
&lt;h2&gt;Distributing an OCI Image&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/opencontainers/distribution-spec/"&gt;OCI Distribution Spec Project&lt;/a&gt; defines an API protocol to facilitate and standardize the distribution of content. This API includes support for pushing and pulling OCI images to an OCI conformant registry.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Q: What happens to AppC or Docker Image Formats?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: Existing formats can continue to be a proving ground for technologies, as needed. The OCI Image Format project strives to provide a dependable open specification that can be shared between different tools and be evolved for years or decades of compatibility; as the deb and rpm format have.&lt;/p&gt; 
&lt;p&gt;Find more &lt;a href="https://www.opencontainers.org/faq"&gt;FAQ on the OCI site&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/opencontainers/image-spec/milestones"&gt;GitHub milestones&lt;/a&gt; lay out the path to the future improvements.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Development happens on GitHub for the spec. Issues are used for bugs and actionable items and longer discussions can happen on the &lt;a href="https://raw.githubusercontent.com/opencontainers/image-spec/main/#mailing-list"&gt;mailing list&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The specification and code is licensed under the Apache 2.0 license found in the &lt;code&gt;LICENSE&lt;/code&gt; file of this repository.&lt;/p&gt; 
&lt;h3&gt;Discuss your design&lt;/h3&gt; 
&lt;p&gt;The project welcomes submissions, but please let everyone know what you are working on.&lt;/p&gt; 
&lt;p&gt;Before undertaking a nontrivial change to this specification, send mail to the &lt;a href="https://raw.githubusercontent.com/opencontainers/image-spec/main/#mailing-list"&gt;mailing list&lt;/a&gt; to discuss what you plan to do. This gives everyone a chance to validate the design, helps prevent duplication of effort, and ensures that the idea fits. It also guarantees that the design is sound before code is written; a GitHub pull-request is not the place for high-level discussions.&lt;/p&gt; 
&lt;p&gt;Typos and grammatical errors can go straight to a pull-request. When in doubt, start on the &lt;a href="https://raw.githubusercontent.com/opencontainers/image-spec/main/#mailing-list"&gt;mailing-list&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Meetings&lt;/h3&gt; 
&lt;p&gt;Please see the &lt;a href="https://github.com/opencontainers/org#meetings"&gt;OCI org repository README&lt;/a&gt; for the most up-to-date information on OCI contributor and maintainer meeting schedules. You can also find links to meeting agendas and minutes for all prior meetings.&lt;/p&gt; 
&lt;h3&gt;Mailing List&lt;/h3&gt; 
&lt;p&gt;You can subscribe and join the mailing list on &lt;a href="https://groups.google.com/a/opencontainers.org/forum/#!forum/dev"&gt;Google Groups&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Markdown style&lt;/h3&gt; 
&lt;p&gt;To keep consistency throughout the Markdown files in the Open Container spec all files should be formatted one sentence per line. This fixes two things: it makes diffing easier with git and it resolves fights about line wrapping length. For example, this paragraph will span three lines in the Markdown source.&lt;/p&gt; 
&lt;h3&gt;Git commit&lt;/h3&gt; 
&lt;h4&gt;Sign your work&lt;/h4&gt; 
&lt;p&gt;The sign-off is a simple line at the end of the explanation for the patch, which certifies that you wrote it or otherwise have the right to pass it on as an open-source patch. The rules are pretty simple: if you can certify the below (from &lt;a href="https://developercertificate.org/"&gt;developercertificate.org&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
660 York Street, Suite 102,
San Francisco, CA 94110 USA

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;then you just add a line to every git commit message:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;Signed-off-by: Joe Smith &amp;lt;joe@gmail.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;using your real name (sorry, no pseudonyms or anonymous contributions.)&lt;/p&gt; 
&lt;p&gt;You can add the sign off when creating the git commit via &lt;code&gt;git commit -s&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Commit Style&lt;/h3&gt; 
&lt;p&gt;Simple house-keeping for clean git history. Read more on &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;How to Write a Git Commit Message&lt;/a&gt; or the Discussion section of &lt;a href="https://git-scm.com/docs/git-commit"&gt;&lt;code&gt;git-commit(1)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Separate the subject from body with a blank line&lt;/li&gt; 
 &lt;li&gt;Limit the subject line to 50 characters&lt;/li&gt; 
 &lt;li&gt;Capitalize the subject line&lt;/li&gt; 
 &lt;li&gt;Do not end the subject line with a period&lt;/li&gt; 
 &lt;li&gt;Use the imperative mood in the subject line&lt;/li&gt; 
 &lt;li&gt;Wrap the body at 72 characters&lt;/li&gt; 
 &lt;li&gt;Use the body to explain what and why vs. how 
  &lt;ul&gt; 
   &lt;li&gt;If there was important/useful/essential conversation or information, copy or include a reference&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;When possible, one keyword to scope the change in the subject (i.e. "README: ...", "runtime: ...")&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>kubeedge/kubeedge</title>
      <link>https://github.com/kubeedge/kubeedge</link>
      <description>&lt;p&gt;Kubernetes Native Edge Computing Framework (project under CNCF)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KubeEdge&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/kubeedge/kubeedge"&gt;&lt;img src="https://goreportcard.com/badge/github.com/kubeedge/kubeedge" alt="Go Report Card"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/kubeedge/kubeedge/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/kubeedge/kubeedge.svg?style=flat-square" alt="LICENSE"&gt;&lt;/a&gt; &lt;a href="https://github.com/kubeedge/kubeedge/releases"&gt;&lt;img src="https://img.shields.io/github/release/kubeedge/kubeedge/all.svg?style=flat-square" alt="Releases"&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/3018"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/3018/badge" alt="CII Best Practices"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/kubeedge/kubeedge/master/docs/images/kubeedge-logo-only.png"&gt; 
&lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/kubeedge/kubeedge/master/README_zh.md"&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;KubeEdge is built upon Kubernetes and extends native containerized application orchestration and device management to hosts at the Edge. It consists of cloud part and edge part, provides core infrastructure support for networking, application deployment and metadata synchronization between cloud and edge. It also supports &lt;strong&gt;MQTT&lt;/strong&gt; which enables edge devices to access through edge nodes.&lt;/p&gt; 
&lt;p&gt;With KubeEdge it is easy to get and deploy existing complicated machine learning, image recognition, event processing and other high level applications to the Edge. With business logic running at the Edge, much larger volumes of data can be secured &amp;amp; processed locally where the data is produced. With data processed at the Edge, the responsiveness is increased dramatically and data privacy is protected.&lt;/p&gt; 
&lt;p&gt;KubeEdge is a graduation-level hosted project by the &lt;a href="https://cncf.io"&gt;Cloud Native Computing Foundation&lt;/a&gt; (CNCF). KubeEdge graduation &lt;a href="https://www.cncf.io/announcements/2024/10/15/cloud-native-computing-foundation-announces-kubeedge-graduation/"&gt;announcement&lt;/a&gt; by CNCF.&lt;/p&gt; 
&lt;h2&gt;Advantages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Kubernetes-native support&lt;/strong&gt;: Managing edge applications and edge devices in the cloud with fully compatible Kubernetes APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cloud-Edge Reliable Collaboration&lt;/strong&gt;: Ensure reliable messages delivery without loss over unstable cloud-edge network.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Edge Autonomy&lt;/strong&gt;: Ensure edge nodes run autonomously and the applications in edge run normally, when the cloud-edge network is unstable or edge is offline and restarted.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Edge Devices Management&lt;/strong&gt;: Managing edge devices through Kubernetes native APIs implemented by CRD.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extremely Lightweight Edge Agent&lt;/strong&gt;: Extremely lightweight Edge Agent(EdgeCore) to run on resource constrained edge.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How It Works&lt;/h2&gt; 
&lt;p&gt;KubeEdge consists of cloud part and edge part.&lt;/p&gt; 
&lt;h3&gt;Architecture&lt;/h3&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/kubeedge/kubeedge/master/docs/images/kubeedge_arch.png" width="85%" align="center"&gt; 
&lt;/div&gt; 
&lt;h3&gt;In the Cloud&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/cloud/cloudhub"&gt;CloudHub&lt;/a&gt;: a web socket server responsible for watching changes at the cloud side, caching and sending messages to EdgeHub.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/cloud/edge_controller"&gt;EdgeController&lt;/a&gt;: an extended kubernetes controller which manages edge nodes and pods metadata so that the data can be targeted to a specific edge node.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/cloud/device_controller"&gt;DeviceController&lt;/a&gt;: an extended kubernetes controller which manages devices so that the device metadata/status data can be synced between edge and cloud.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;On the Edge&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/edge/edgehub"&gt;EdgeHub&lt;/a&gt;: a web socket client responsible for interacting with Cloud Service for the edge computing (like Edge Controller as in the KubeEdge Architecture). This includes syncing cloud-side resource updates to the edge, and reporting edge-side host and device status changes to the cloud.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/edge/edged"&gt;Edged&lt;/a&gt;: an agent that runs on edge nodes and manages containerized applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/edge/eventbus"&gt;EventBus&lt;/a&gt;: a MQTT client to interact with MQTT servers (mosquitto), offering publish and subscribe capabilities to other components.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/edge/servicebus"&gt;ServiceBus&lt;/a&gt;: an HTTP client to interact with HTTP servers (REST), offering HTTP client capabilities to components of cloud to reach HTTP servers running at edge.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/edge/devicetwin"&gt;DeviceTwin&lt;/a&gt;: responsible for storing device status and syncing device status to the cloud. It also provides query interfaces for applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/en/docs/architecture/edge/metamanager"&gt;MetaManager&lt;/a&gt;: the message processor between edged and edgehub. It is also responsible for storing/retrieving metadata to/from a lightweight database (SQLite).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Kubernetes compatibility&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;Kubernetes 1.25&lt;/th&gt; 
   &lt;th&gt;Kubernetes 1.26&lt;/th&gt; 
   &lt;th&gt;Kubernetes 1.27&lt;/th&gt; 
   &lt;th&gt;Kubernetes 1.28&lt;/th&gt; 
   &lt;th&gt;Kubernetes 1.29&lt;/th&gt; 
   &lt;th&gt;Kubernetes 1.30&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeEdge 1.17&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeEdge 1.18&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeEdge 1.19&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeEdge 1.20&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeEdge 1.21&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;KubeEdge HEAD (master)&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;+&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
   &lt;td&gt;‚úì&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Key:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;‚úì&lt;/code&gt; KubeEdge and the Kubernetes version are exactly compatible.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;+&lt;/code&gt; KubeEdge has features or API objects that may not be present in the Kubernetes version.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-&lt;/code&gt; The Kubernetes version has features or API objects that KubeEdge can't use.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Guides&lt;/h2&gt; 
&lt;p&gt;Get start with this &lt;a href="https://kubeedge.io/en/docs"&gt;doc&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See our documentation on &lt;a href="https://kubeedge.io"&gt;kubeedge.io&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;To learn deeply about KubeEdge, try some examples on &lt;a href="https://github.com/kubeedge/examples"&gt;examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubeedge/community/raw/master/roadmap.md"&gt;2024 Roadmap&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Meeting&lt;/h2&gt; 
&lt;p&gt;Technical Steering Committees (TSC) Meeting:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pacific Time: &lt;strong&gt;Wednesdays at 10:00-11:00 Beijing Time&lt;/strong&gt; (biweekly, starting from Feb. 26th 2020). (&lt;a href="https://www.thetimezoneconverter.com/?t=10%3A00&amp;amp;tz=GMT%2B8&amp;amp;"&gt;Convert to your timezone.&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Regular Community Meeting:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Europe Time: &lt;strong&gt;Wednesdays at 16:00-17:30 Beijing Time&lt;/strong&gt; (weekly, starting from Feb. 19th 2020). (&lt;a href="https://www.thetimezoneconverter.com/?t=16%3A30&amp;amp;tz=GMT%2B8&amp;amp;"&gt;Convert to your timezone.&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.google.com/document/d/1Sr5QS_Z04uPfRbA7PrXr3aPwCRpx7EtsyHq7mp6CnHs/edit"&gt;Meeting notes and agenda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLQtlO1kVWGXkRGkjSrLGEPJODoPb8s5FM"&gt;Meeting recordings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://zoom.us/j/4167237304"&gt;Meeting link&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://calendar.google.com/calendar/embed?src=8rjk8o516vfte21qibvlae3lj4%40group.calendar.google.com"&gt;Meeting Calendar&lt;/a&gt; | &lt;a href="https://calendar.google.com/calendar?cid=OHJqazhvNTE2dmZ0ZTIxcWlidmxhZTNsajRAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ"&gt;Subscribe&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;If you need support, start with the &lt;a href="https://kubeedge.io/en/docs/developer/troubleshooting"&gt;troubleshooting guide&lt;/a&gt;, and work your way through the process that we've outlined.&lt;/p&gt; 
&lt;p&gt;If you have questions, feel free to reach out to us in the following ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/kubeedge"&gt;mailing list&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://kubeedge.io/docs/community/slack"&gt;slack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/kubeedge"&gt;twitter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you're interested in being a contributor and want to get involved in developing the KubeEdge code, please see &lt;a href="https://raw.githubusercontent.com/kubeedge/kubeedge/master/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;h3&gt;Security Audit&lt;/h3&gt; 
&lt;p&gt;A third party security audit of KubeEdge has been completed in July 2022. Additionally, the KubeEdge community completed an overall system security analysis of KubeEdge. The detailed reports are as follows.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/kubeedge/community/raw/master/sig-security/sig-security-audit/KubeEdge-security-audit-2022.pdf"&gt;Security audit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/kubeedge/community/raw/master/sig-security/sig-security-audit/KubeEdge-threat-model-and-security-protection-analysis.md"&gt;Threat model and security protection analysis paper&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Reporting security vulnerabilities&lt;/h3&gt; 
&lt;p&gt;We encourage security researchers, industry organizations and users to proactively report suspected vulnerabilities to our security team (&lt;code&gt;cncf-kubeedge-security@lists.cncf.io&lt;/code&gt;), the team will help diagnose the severity of the issue and determine how to address the issue as soon as possible.&lt;/p&gt; 
&lt;p&gt;For further details please see &lt;a href="https://github.com/kubeedge/community/raw/master/team-security/SECURITY.md"&gt;Security Policy&lt;/a&gt; for our security process and how to report vulnerabilities.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;KubeEdge is under the Apache 2.0 license. See the &lt;a href="https://raw.githubusercontent.com/kubeedge/kubeedge/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis/go-redis</title>
      <link>https://github.com/redis/go-redis</link>
      <description>&lt;p&gt;Redis Go client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redis client for Go&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/redis/go-redis/actions"&gt;&lt;img src="https://github.com/redis/go-redis/actions/workflows/build.yml/badge.svg?sanitize=true" alt="build workflow"&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/redis/go-redis/v9?tab=doc"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/redis/go-redis/v9" alt="PkgGoDev"&gt;&lt;/a&gt; &lt;a href="https://redis.uptrace.dev/"&gt;&lt;img src="https://img.shields.io/badge/redis-documentation-informational" alt="Documentation"&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/redis/go-redis/v9"&gt;&lt;img src="https://goreportcard.com/badge/github.com/redis/go-redis/v9" alt="Go Report Card"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/github/redis/go-redis"&gt;&lt;img src="https://codecov.io/github/redis/go-redis/graph/badge.svg?token=tsrCZKuSSw" alt="codecov"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/W4txy5AeKM"&gt;&lt;img src="https://img.shields.io/discord/697882427875393627.svg?style=social&amp;amp;logo=discord" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://www.twitch.tv/redisinc"&gt;&lt;img src="https://img.shields.io/twitch/status/redisinc?style=social" alt="Twitch"&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/redisinc"&gt;&lt;img src="https://img.shields.io/youtube/channel/views/UCD78lHSwYqMlyetR0_P4Vig?style=social" alt="YouTube"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/redisinc"&gt;&lt;img src="https://img.shields.io/twitter/follow/redisinc?style=social" alt="Twitter"&gt;&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/tagged/go-redis"&gt;&lt;img src="https://img.shields.io/stackexchange/stackoverflow/t/go-redis?style=social&amp;amp;logo=stackoverflow&amp;amp;label=Stackoverflow" alt="Stack Exchange questions"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;go-redis is the official Redis client library for the Go programming language. It offers a straightforward interface for interacting with Redis servers.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Supported versions&lt;/h2&gt; 
&lt;p&gt;In &lt;code&gt;go-redis&lt;/code&gt; we are aiming to support the last three releases of Redis. Currently, this means we do support:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/redis/redis/7.2/00-RELEASENOTES"&gt;Redis 7.2&lt;/a&gt; - using Redis Stack 7.2 for modules support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/redis/redis/7.4/00-RELEASENOTES"&gt;Redis 7.4&lt;/a&gt; - using Redis Stack 7.4 for modules support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/redis/redis/8.0/00-RELEASENOTES"&gt;Redis 8.0&lt;/a&gt; - using Redis CE 8.0 where modules are included&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Although the &lt;code&gt;go.mod&lt;/code&gt; states it requires at minimum &lt;code&gt;go 1.18&lt;/code&gt;, our CI is configured to run the tests against all three versions of Redis and latest two versions of Go (&lt;a href="https://go.dev/doc/devel/release#go1.23.0"&gt;1.23&lt;/a&gt;, &lt;a href="https://go.dev/doc/devel/release#go1.24.0"&gt;1.24&lt;/a&gt;). We observe that some modules related test may not pass with Redis Stack 7.2 and some commands are changed with Redis CE 8.0. Please do refer to the documentation and the tests if you experience any issues. We do plan to update the go version in the &lt;code&gt;go.mod&lt;/code&gt; to &lt;code&gt;go 1.24&lt;/code&gt; in one of the next releases.&lt;/p&gt; 
&lt;h2&gt;How do I Redis?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://university.redis.com/"&gt;Learn for free at Redis University&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://launchpad.redis.com/"&gt;Build faster with the Redis Launchpad&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://redis.com/try-free/"&gt;Try the Redis Cloud&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://developer.redis.com/"&gt;Dive in developer tutorials&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://redis.com/community/"&gt;Join the Redis community&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://redis.com/company/careers/jobs/"&gt;Work at Redis&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev"&gt;English&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev/zh/"&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/redis/go-redis/discussions"&gt;Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/W4txy5AeKM"&gt;Chat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pkg.go.dev/github.com/redis/go-redis/v9"&gt;Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pkg.go.dev/github.com/redis/go-redis/v9#pkg-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/go-redis/redismock"&gt;Redis Mock&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bsm/redislock"&gt;Distributed Locks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/go-redis/cache"&gt;Redis Cache&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/go-redis/redis_rate"&gt;Rate limiting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This client also works with &lt;a href="https://github.com/apache/incubator-kvrocks"&gt;Kvrocks&lt;/a&gt;, a distributed key value NoSQL database that uses RocksDB as storage engine and is compatible with Redis protocol.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Redis commands except QUIT and SYNC.&lt;/li&gt; 
 &lt;li&gt;Automatic connection pooling.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/redis/go-redis/master/#1-streaming-credentials-provider-highest-priority"&gt;StreamingCredentialsProvider (e.g. entra id, oauth)&lt;/a&gt; (experimental)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev/guide/go-redis-pubsub.html"&gt;Pub/Sub&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev/guide/go-redis-pipelines.html"&gt;Pipelines and transactions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev/guide/lua-scripting.html"&gt;Scripting&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev/guide/go-redis-sentinel.html"&gt;Redis Sentinel&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev/guide/go-redis-cluster.html"&gt;Redis Cluster&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev/guide/ring.html"&gt;Redis Ring&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.uptrace.dev/guide/redis-performance-monitoring.html"&gt;Redis Performance Monitoring&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://redis.io/docs/data-types/probabilistic/"&gt;Redis Probabilistic [RedisStack]&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;go-redis supports 2 last Go versions and requires a Go version with &lt;a href="https://github.com/golang/go/wiki/Modules"&gt;modules&lt;/a&gt; support. So make sure to initialize a Go module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;go mod init github.com/my/repo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then install go-redis/&lt;strong&gt;v9&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;go get github.com/redis/go-redis/v9
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    "context"
    "fmt"

    "github.com/redis/go-redis/v9"
)

var ctx = context.Background()

func ExampleClient() {
    rdb := redis.NewClient(&amp;amp;redis.Options{
        Addr:     "localhost:6379",
        Password: "", // no password set
        DB:       0,  // use default DB
    })

    err := rdb.Set(ctx, "key", "value", 0).Err()
    if err != nil {
        panic(err)
    }

    val, err := rdb.Get(ctx, "key").Result()
    if err != nil {
        panic(err)
    }
    fmt.Println("key", val)

    val2, err := rdb.Get(ctx, "key2").Result()
    if err == redis.Nil {
        fmt.Println("key2 does not exist")
    } else if err != nil {
        panic(err)
    } else {
        fmt.Println("key2", val2)
    }
    // Output: key value
    // key2 does not exist
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Authentication&lt;/h3&gt; 
&lt;p&gt;The Redis client supports multiple ways to provide authentication credentials, with a clear priority order. Here are the available options:&lt;/p&gt; 
&lt;h4&gt;1. Streaming Credentials Provider (Highest Priority) - Experimental feature&lt;/h4&gt; 
&lt;p&gt;The streaming credentials provider allows for dynamic credential updates during the connection lifetime. This is particularly useful for managed identity services and token-based authentication.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type StreamingCredentialsProvider interface {
    Subscribe(listener CredentialsListener) (Credentials, UnsubscribeFunc, error)
}

type CredentialsListener interface {
    OnNext(credentials Credentials)  // Called when credentials are updated
    OnError(err error)              // Called when an error occurs
}

type Credentials interface {
    BasicAuth() (username string, password string)
    RawCredentials() string
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;rdb := redis.NewClient(&amp;amp;redis.Options{
    Addr: "localhost:6379",
    StreamingCredentialsProvider: &amp;amp;MyCredentialsProvider{},
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The streaming credentials provider can be used with &lt;a href="https://github.com/redis/go-redis-entraid"&gt;go-redis-entraid&lt;/a&gt; to enable Entra ID (formerly Azure AD) authentication. This allows for seamless integration with Azure's managed identity services and token-based authentication.&lt;/p&gt; 
&lt;p&gt;Example with Entra ID:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    "github.com/redis/go-redis/v9"
    "github.com/redis/go-redis-entraid"
)

// Create an Entra ID credentials provider
provider := entraid.NewDefaultAzureIdentityProvider()

// Configure Redis client with Entra ID authentication
rdb := redis.NewClient(&amp;amp;redis.Options{
    Addr: "your-redis-server.redis.cache.windows.net:6380",
    StreamingCredentialsProvider: provider,
    TLSConfig: &amp;amp;tls.Config{
        MinVersion: tls.VersionTLS12,
    },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. Context-based Credentials Provider&lt;/h4&gt; 
&lt;p&gt;The context-based provider allows credentials to be determined at the time of each operation, using the context.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;rdb := redis.NewClient(&amp;amp;redis.Options{
    Addr: "localhost:6379",
    CredentialsProviderContext: func(ctx context.Context) (string, string, error) {
        // Return username, password, and any error
        return "user", "pass", nil
    },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. Regular Credentials Provider&lt;/h4&gt; 
&lt;p&gt;A simple function-based provider that returns static credentials.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;rdb := redis.NewClient(&amp;amp;redis.Options{
    Addr: "localhost:6379",
    CredentialsProvider: func() (string, string) {
        // Return username and password
        return "user", "pass"
    },
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;4. Username/Password Fields (Lowest Priority)&lt;/h4&gt; 
&lt;p&gt;The most basic way to provide credentials is through the &lt;code&gt;Username&lt;/code&gt; and &lt;code&gt;Password&lt;/code&gt; fields in the options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;rdb := redis.NewClient(&amp;amp;redis.Options{
    Addr:     "localhost:6379",
    Username: "user",
    Password: "pass",
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Priority Order&lt;/h4&gt; 
&lt;p&gt;The client will use credentials in the following priority order:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Streaming Credentials Provider (if set)&lt;/li&gt; 
 &lt;li&gt;Context-based Credentials Provider (if set)&lt;/li&gt; 
 &lt;li&gt;Regular Credentials Provider (if set)&lt;/li&gt; 
 &lt;li&gt;Username/Password fields (if set)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If none of these are set, the client will attempt to connect without authentication.&lt;/p&gt; 
&lt;h3&gt;Protocol Version&lt;/h3&gt; 
&lt;p&gt;The client supports both RESP2 and RESP3 protocols. You can specify the protocol version in the options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;rdb := redis.NewClient(&amp;amp;redis.Options{
    Addr:     "localhost:6379",
    Password: "", // no password set
    DB:       0,  // use default DB
    Protocol: 3,  // specify 2 for RESP 2 or 3 for RESP 3
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Connecting via a redis url&lt;/h3&gt; 
&lt;p&gt;go-redis also supports connecting via the &lt;a href="https://github.com/redis/redis-specifications/tree/master/uri/redis.txt"&gt;redis uri specification&lt;/a&gt;. The example below demonstrates how the connection can easily be configured using a string, adhering to this specification.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    "github.com/redis/go-redis/v9"
)

func ExampleClient() *redis.Client {
    url := "redis://user:password@localhost:6379/0?protocol=3"
    opts, err := redis.ParseURL(url)
    if err != nil {
        panic(err)
    }

    return redis.NewClient(opts)
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Instrument with OpenTelemetry&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    "github.com/redis/go-redis/v9"
    "github.com/redis/go-redis/extra/redisotel/v9"
    "errors"
)

func main() {
    ...
    rdb := redis.NewClient(&amp;amp;redis.Options{...})

    if err := errors.Join(redisotel.InstrumentTracing(rdb), redisotel.InstrumentMetrics(rdb)); err != nil {
        log.Fatal(err)
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Advanced Configuration&lt;/h3&gt; 
&lt;p&gt;go-redis supports extending the client identification phase to allow projects to send their own custom client identification.&lt;/p&gt; 
&lt;h4&gt;Default Client Identification&lt;/h4&gt; 
&lt;p&gt;By default, go-redis automatically sends the client library name and version during the connection process. This feature is available in redis-server as of version 7.2. As a result, the command is "fire and forget", meaning it should fail silently, in the case that the redis server does not support this feature.&lt;/p&gt; 
&lt;h4&gt;Disabling Identity Verification&lt;/h4&gt; 
&lt;p&gt;When connection identity verification is not required or needs to be explicitly disabled, a &lt;code&gt;DisableIdentity&lt;/code&gt; configuration option exists. Initially there was a typo and the option was named &lt;code&gt;DisableIndentity&lt;/code&gt; instead of &lt;code&gt;DisableIdentity&lt;/code&gt;. The misspelled option is marked as Deprecated and will be removed in V10 of this library. Although both options will work at the moment, the correct option is &lt;code&gt;DisableIdentity&lt;/code&gt;. The deprecated option will be removed in V10 of this library, so please use the correct option name to avoid any issues.&lt;/p&gt; 
&lt;p&gt;To disable verification, set the &lt;code&gt;DisableIdentity&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; in the Redis client options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;rdb := redis.NewClient(&amp;amp;redis.Options{
    Addr:            "localhost:6379",
    Password:        "",
    DB:              0,
    DisableIdentity: true, // Disable set-info on connect
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Unstable RESP3 Structures for RediSearch Commands&lt;/h4&gt; 
&lt;p&gt;When integrating Redis with application functionalities using RESP3, it's important to note that some response structures aren't final yet. This is especially true for more complex structures like search and query results. We recommend using RESP2 when using the search and query capabilities, but we plan to stabilize the RESP3-based API-s in the coming versions. You can find more guidance in the upcoming release notes.&lt;/p&gt; 
&lt;p&gt;To enable unstable RESP3, set the option in your client configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;redis.NewClient(&amp;amp;redis.Options{
			UnstableResp3: true,
		})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When UnstableResp3 mode is enabled, it's necessary to use RawResult() and RawVal() to retrieve a raw data. Since, raw response is the only option for unstable search commands Val() and Result() calls wouldn't have any affect on them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;res1, err := client.FTSearchWithArgs(ctx, "txt", "foo bar", &amp;amp;redis.FTSearchOptions{}).RawResult()
val1 := client.FTSearchWithArgs(ctx, "txt", "foo bar", &amp;amp;redis.FTSearchOptions{}).RawVal()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Redis-Search Default Dialect&lt;/h4&gt; 
&lt;p&gt;In the Redis-Search module, &lt;strong&gt;the default dialect is 2&lt;/strong&gt;. If needed, you can explicitly specify a different dialect using the appropriate configuration in your queries.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Be aware that the query dialect may impact the results returned. If needed, you can revert to a different dialect version by passing the desired dialect in the arguments of the command you want to execute. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	res2, err := rdb.FTSearchWithArgs(ctx,
		"idx:bicycle",
		"@pickup_zone:[CONTAINS $bike]",
		&amp;amp;redis.FTSearchOptions{
			Params: map[string]interface{}{
				"bike": "POINT(-0.1278 51.5074)",
			},
			DialectVersion: 3,
		},
	).Result()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find further details in the &lt;a href="https://redis.io/docs/latest/develop/interact/search-and-query/advanced-concepts/dialects/"&gt;query dialect documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions to the go-redis library! If you have a bug fix, feature request, or improvement, please open an issue or pull request on GitHub. We appreciate your help in making go-redis better for everyone. If you are interested in contributing to the go-redis library, please check out our &lt;a href="https://raw.githubusercontent.com/redis/go-redis/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more information on how to get started.&lt;/p&gt; 
&lt;h2&gt;Look and feel&lt;/h2&gt; 
&lt;p&gt;Some corner cases:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// SET key value EX 10 NX
set, err := rdb.SetNX(ctx, "key", "value", 10*time.Second).Result()

// SET key value keepttl NX
set, err := rdb.SetNX(ctx, "key", "value", redis.KeepTTL).Result()

// SORT list LIMIT 0 2 ASC
vals, err := rdb.Sort(ctx, "list", &amp;amp;redis.Sort{Offset: 0, Count: 2, Order: "ASC"}).Result()

// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2
vals, err := rdb.ZRangeByScoreWithScores(ctx, "zset", &amp;amp;redis.ZRangeBy{
    Min: "-inf",
    Max: "+inf",
    Offset: 0,
    Count: 2,
}).Result()

// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM
vals, err := rdb.ZInterStore(ctx, "out", &amp;amp;redis.ZStore{
    Keys: []string{"zset1", "zset2"},
    Weights: []int64{2, 3}
}).Result()

// EVAL "return {KEYS[1],ARGV[1]}" 1 "key" "hello"
vals, err := rdb.Eval(ctx, "return {KEYS[1],ARGV[1]}", []string{"key"}, "hello").Result()

// custom command
res, err := rdb.Do(ctx, "set", "key", "value").Result()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Run the test&lt;/h2&gt; 
&lt;p&gt;go-redis will start a redis-server and run the test cases.&lt;/p&gt; 
&lt;p&gt;The paths of redis-server bin file and redis config file are defined in &lt;code&gt;main_test.go&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var (
	redisServerBin, _  = filepath.Abs(filepath.Join("testdata", "redis", "src", "redis-server"))
	redisServerConf, _ = filepath.Abs(filepath.Join("testdata", "redis", "redis.conf"))
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For local testing, you can change the variables to refer to your local files, or create a soft link to the corresponding folder for redis-server and copy the config file to &lt;code&gt;testdata/redis/&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ln -s /usr/bin/redis-server ./go-redis/testdata/redis/src
cp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lastly, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;go test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another option is to run your specific tests with an already running redis. The example below, tests against a redis running on port 9999.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;REDIS_PORT=9999 go test &amp;lt;your options&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;See also&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://bun.uptrace.dev"&gt;Golang ORM&lt;/a&gt; for PostgreSQL, MySQL, MSSQL, and SQLite&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bun.uptrace.dev/postgres/"&gt;Golang PostgreSQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bunrouter.uptrace.dev/"&gt;Golang HTTP router&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/uptrace/go-clickhouse"&gt;Golang ClickHouse ORM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The go-redis project was originally initiated by &lt;span&gt;‚≠ê&lt;/span&gt; &lt;a href="https://github.com/uptrace/uptrace"&gt;&lt;strong&gt;uptrace/uptrace&lt;/strong&gt;&lt;/a&gt;. Uptrace is an open-source APM tool that supports distributed tracing, metrics, and logs. You can use it to monitor applications and set up automatic alerts to receive notifications via email, Slack, Telegram, and others.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href="https://github.com/redis/go-redis/tree/master/example/otel"&gt;OpenTelemetry&lt;/a&gt; example which demonstrates how you can use Uptrace to monitor go-redis.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; 
&lt;a href="https://github.com/redis/go-redis/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=redis/go-redis"&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>envoyproxy/ai-gateway</title>
      <link>https://github.com/envoyproxy/ai-gateway</link>
      <description>&lt;p&gt;Envoy AI Gateway is an open source project for using Envoy Gateway to handle request traffic from application clients to Generative AI services.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Envoy AI Gateway&lt;/h1&gt; 
&lt;p&gt;Envoy AI Gateway is an open source project for using &lt;a href="https://github.com/envoyproxy/gateway"&gt;Envoy Gateway&lt;/a&gt; to handle request traffic from application clients to Generative AI services.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;When using Envoy AI Gateway, we refer to a two-tier gateway pattern. &lt;strong&gt;The Tier One Gateway&lt;/strong&gt; functions as a centralized entry point, and the &lt;strong&gt;Tier Two Gateway&lt;/strong&gt; handles ingress traffic to a self-hosted model serving cluster.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;strong&gt;Tier One Gateway&lt;/strong&gt; handles authentication, top-level routing, and global rate limiting&lt;/li&gt; 
 &lt;li&gt;The &lt;strong&gt;Tier Two Gateway&lt;/strong&gt; provides fine-grained control over self-hosted model access, with endpoint picker support for LLM inference optimization.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/blog/images/aigw-ref.drawio.png" alt=""&gt;&lt;/p&gt; 
&lt;h2&gt;Supported AI Providers&lt;/h2&gt; 
&lt;p&gt;Envoy AI Gateway supports a wide range of AI providers, making it easy to integrate with your preferred LLM services:&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/openai.svg?sanitize=true" width="60" height="60" alt="OpenAI"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;OpenAI&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/azure-openai.svg?sanitize=true" width="60" height="60" alt="Azure OpenAI"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Azure OpenAI&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/google-gemini.svg?sanitize=true" width="60" height="60" alt="Google Gemini"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Google Gemini&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/vertex-ai.svg?sanitize=true" width="60" height="60" alt="Vertex AI"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Vertex AI&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/aws-bedrock.svg?sanitize=true" width="60" height="60" alt="AWS Bedrock"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;AWS Bedrock&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/mistral.svg?sanitize=true" width="60" height="60" alt="Mistral"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Mistral&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/cohere.svg?sanitize=true" width="60" height="60" alt="Cohere"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Cohere&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/groq.svg?sanitize=true" width="60" height="60" alt="Groq"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Groq&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/together-ai.svg?sanitize=true" width="60" height="60" alt="Together AI"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Together AI&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/deepinfra.svg?sanitize=true" width="60" height="60" alt="DeepInfra"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;DeepInfra&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/deepseek.svg?sanitize=true" width="60" height="60" alt="DeepSeek"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;DeepSeek&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/hunyuan.svg?sanitize=true" width="60" height="60" alt="Hunyuan"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Hunyuan&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/sambanova.svg?sanitize=true" width="60" height="60" alt="SambaNova"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;SambaNova&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; &lt;img src="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/site/static/img/providers/grok.svg?sanitize=true" width="60" height="60" alt="Grok"&gt; &lt;br&gt;&lt;sub&gt;&lt;b&gt;Grok&lt;/b&gt;&lt;/sub&gt; &lt;/td&gt; 
    &lt;td align="center" width="120"&gt; 
     &lt;!-- Empty cell for symmetry --&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://aigateway.envoyproxy.io/blog"&gt;Blog&lt;/a&gt; introducing Envoy AI Gateway.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aigateway.envoyproxy.io/docs"&gt;Documentation&lt;/a&gt; for Envoy AI Gateway.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aigateway.envoyproxy.io/docs/getting-started/"&gt;Quickstart&lt;/a&gt; to use Envoy AI Gateway in a few simple steps.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aigateway.envoyproxy.io/docs/concepts/"&gt;Concepts&lt;/a&gt; to understand the architecture and resources of Envoy AI Gateway.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Slack: Join the &lt;a href="https://communityinviter.com/apps/envoyproxy/envoy"&gt;Envoy Slack workspace&lt;/a&gt; if you're not already a member. Otherwise, use the &lt;a href="https://envoyproxy.slack.com/archives/C07Q4N24VAA"&gt;Envoy AI Gateway channel&lt;/a&gt; to start collaborating with the community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Involved&lt;/h2&gt; 
&lt;p&gt;We adhere to the &lt;a href="https://github.com/cncf/foundation/raw/main/code-of-conduct.md"&gt;CNCF Code of conduct&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Envoy AI Gateway team and community members meet every Thursday. Please register for the meeting, add agenda points, and get involved. The meeting details are available in the &lt;a href="https://docs.google.com/document/d/10e1sfsF-3G3Du5nBHGmLjXw5GVMqqCvFDqp_O65B0_w/edit?tab=t.0"&gt;public document&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To contribute to the project via pull requests, please read the &lt;a href="https://raw.githubusercontent.com/envoyproxy/ai-gateway/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file which includes information on how to build and test the project.&lt;/p&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;The proposal of using Envoy Gateway as a &lt;a href="https://docs.google.com/document/d/1FQN_hGhTNeoTgV5Jj16ialzaSiAxC0ozxH1D9ngCVew/edit?tab=t.0#heading=h.uuu99yemq4eo"&gt;Cloud Native LLM Gateway&lt;/a&gt; inspired the initiation of this project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>testcontainers/testcontainers-go</title>
      <link>https://github.com/testcontainers/testcontainers-go</link>
      <description>&lt;p&gt;Testcontainers for Go is a Go package that makes it simple to create and clean up container-based dependencies for automated integration/smoke tests. The clean, easy-to-use API enables developers to programmatically define containers that should be run as part of a test and clean up those resources when the test is done.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Testcontainers&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/testcontainers/testcontainers-go/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/testcontainers/testcontainers-go/actions/workflows/ci.yml/badge.svg?branch=main" alt="Main pipeline"&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/testcontainers/testcontainers-go"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/testcontainers/testcontainers-go.svg?sanitize=true" alt="GoDoc Reference"&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/testcontainers/testcontainers-go"&gt;&lt;img src="https://goreportcard.com/badge/github.com/testcontainers/testcontainers-go" alt="Go Report Card"&gt;&lt;/a&gt; &lt;a href="https://sonarcloud.io/summary/new_code?id=testcontainers_testcontainers-go"&gt;&lt;img src="https://sonarcloud.io/api/project_badges/measure?project=testcontainers_testcontainers-go&amp;amp;metric=alert_status" alt="Quality Gate Status"&gt;&lt;/a&gt; &lt;a href="https://github.com/testcontainers/testcontainers-go/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue" alt="License"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/codespaces/new?hide_repo_select=true&amp;amp;ref=main&amp;amp;repo=141451032&amp;amp;machine=standardLinux32gb&amp;amp;devcontainer_path=.devcontainer%2Fdevcontainer.json&amp;amp;location=EastUs"&gt;&lt;img src="https://github.com/codespaces/badge.svg?sanitize=true" alt="Open in GitHub Codespaces"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://testcontainers.slack.com/"&gt;&lt;img src="https://img.shields.io/badge/Slack-4A154B?logo=slack" alt="Join our Slack"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Testcontainers for Go&lt;/em&gt; is a Go package that makes it simple to create and clean up container-based dependencies for automated integration/smoke tests. The clean, easy-to-use API enables developers to programmatically define containers that should be run as part of a test and clean up those resources when the test is done.&lt;/p&gt; 
&lt;p&gt;You can find more information about &lt;em&gt;Testcontainers for Go&lt;/em&gt; at &lt;a href="https://golang.testcontainers.org"&gt;golang.testcontainers.org&lt;/a&gt;, which is rendered from the &lt;a href="https://raw.githubusercontent.com/testcontainers/testcontainers-go/main/docs"&gt;./docs&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Using &lt;em&gt;Testcontainers for Go&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Please visit &lt;a href="https://golang.testcontainers.org/quickstart"&gt;the quickstart guide&lt;/a&gt; to understand how to add the dependency to your Go project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hibiken/asynq</title>
      <link>https://github.com/hibiken/asynq</link>
      <description>&lt;p&gt;Simple, reliable, and efficient distributed task queue in Go&lt;/p&gt;&lt;hr&gt;&lt;img src="https://user-images.githubusercontent.com/11155743/114697792-ffbfa580-9d26-11eb-8e5b-33bef69476dc.png" alt="Asynq logo" width="360px"&gt; 
&lt;h1&gt;Simple, reliable &amp;amp; efficient distributed task queue in Go&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://godoc.org/github.com/hibiken/asynq"&gt;&lt;img src="https://godoc.org/github.com/hibiken/asynq?status.svg?sanitize=true" alt="GoDoc"&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/hibiken/asynq"&gt;&lt;img src="https://goreportcard.com/badge/github.com/hibiken/asynq" alt="Go Report Card"&gt;&lt;/a&gt; &lt;img src="https://github.com/hibiken/asynq/workflows/build/badge.svg?sanitize=true" alt="Build Status"&gt; &lt;a href="https://opensource.org/licenses/MIT"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-green.svg?sanitize=true" alt="License: MIT"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/go-asynq/community"&gt;&lt;img src="https://badges.gitter.im/go-asynq/gitter.svg?sanitize=true" alt="Gitter chat"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Asynq is a Go library for queueing tasks and processing them asynchronously with workers. It's backed by &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; and is designed to be scalable yet easy to get started.&lt;/p&gt; 
&lt;p&gt;Highlevel overview of how Asynq works:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Client puts tasks on a queue&lt;/li&gt; 
 &lt;li&gt;Server pulls tasks off queues and starts a worker goroutine for each task&lt;/li&gt; 
 &lt;li&gt;Tasks are processed concurrently by multiple workers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Task queues are used as a mechanism to distribute work across multiple machines. A system can consist of multiple worker servers and brokers, giving way to high availability and horizontal scaling.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example use case&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/11155743/116358505-656f5f80-a806-11eb-9c16-94e49dab0f99.jpg" alt="Task Queue Diagram"&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Guaranteed &lt;a href="https://www.cloudcomputingpatterns.org/at_least_once_delivery/"&gt;at least one execution&lt;/a&gt; of a task&lt;/li&gt; 
 &lt;li&gt;Scheduling of tasks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hibiken/asynq/wiki/Task-Retry"&gt;Retries&lt;/a&gt; of failed tasks&lt;/li&gt; 
 &lt;li&gt;Automatic recovery of tasks in the event of a worker crash&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hibiken/asynq/wiki/Queue-Priority#weighted-priority"&gt;Weighted priority queues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hibiken/asynq/wiki/Queue-Priority#strict-priority"&gt;Strict priority queues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Low latency to add a task since writes are fast in Redis&lt;/li&gt; 
 &lt;li&gt;De-duplication of tasks using &lt;a href="https://github.com/hibiken/asynq/wiki/Unique-Tasks"&gt;unique option&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Allow &lt;a href="https://github.com/hibiken/asynq/wiki/Task-Timeout-and-Cancelation"&gt;timeout and deadline per task&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Allow &lt;a href="https://github.com/hibiken/asynq/wiki/Task-aggregation"&gt;aggregating group of tasks&lt;/a&gt; to batch multiple successive operations&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hibiken/asynq/wiki/Handler-Deep-Dive"&gt;Flexible handler interface with support for middlewares&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hibiken/asynq/master/tools/asynq/README.md#pause"&gt;Ability to pause queue&lt;/a&gt; to stop processing tasks from the queue&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hibiken/asynq/wiki/Periodic-Tasks"&gt;Periodic Tasks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hibiken/asynq/wiki/Automatic-Failover"&gt;Support Redis Sentinels&lt;/a&gt; for high availability&lt;/li&gt; 
 &lt;li&gt;Integration with &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; to collect and visualize queue metrics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hibiken/asynq/master/#web-ui"&gt;Web UI&lt;/a&gt; to inspect and remote-control queues and tasks&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/hibiken/asynq/master/#command-line-tool"&gt;CLI&lt;/a&gt; to inspect and remote-control queues and tasks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stability and Compatibility&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: The library relatively stable and is currently undergoing &lt;strong&gt;moderate development&lt;/strong&gt; with less frequent breaking API changes.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚òùÔ∏è &lt;strong&gt;Important Note&lt;/strong&gt;: Current major version is zero (&lt;code&gt;v0.x.x&lt;/code&gt;) to accommodate rapid development and fast iteration while getting early feedback from users (&lt;em&gt;feedback on APIs are appreciated!&lt;/em&gt;). The public API could change without a major version update before &lt;code&gt;v1.0.0&lt;/code&gt; release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Redis Cluster Compatibility&lt;/h3&gt; 
&lt;p&gt;Some of the lua scripts in this library may not be compatible with Redis Cluster.&lt;/p&gt; 
&lt;h2&gt;Sponsoring&lt;/h2&gt; 
&lt;p&gt;If you are using this package in production, &lt;strong&gt;please consider sponsoring the project to show your support!&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;Make sure you have Go installed (&lt;a href="https://golang.org/dl/"&gt;download&lt;/a&gt;). The &lt;strong&gt;last two&lt;/strong&gt; Go versions are supported (See &lt;a href="https://go.dev/dl"&gt;https://go.dev/dl&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Initialize your project by creating a folder and then running &lt;code&gt;go mod init github.com/your/repo&lt;/code&gt; (&lt;a href="https://blog.golang.org/using-go-modules"&gt;learn more&lt;/a&gt;) inside the folder. Then install Asynq library with the &lt;a href="https://golang.org/cmd/go/#hdr-Add_dependencies_to_current_module_and_install_them"&gt;&lt;code&gt;go get&lt;/code&gt;&lt;/a&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get -u github.com/hibiken/asynq
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Make sure you're running a Redis server locally or from a &lt;a href="https://hub.docker.com/_/redis"&gt;Docker&lt;/a&gt; container. Version &lt;code&gt;4.0&lt;/code&gt; or higher is required.&lt;/p&gt; 
&lt;p&gt;Next, write a package that encapsulates task creation and task handling.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package tasks

import (
    "context"
    "encoding/json"
    "fmt"
    "log"
    "time"
    "github.com/hibiken/asynq"
)

// A list of task types.
const (
    TypeEmailDelivery   = "email:deliver"
    TypeImageResize     = "image:resize"
)

type EmailDeliveryPayload struct {
    UserID     int
    TemplateID string
}

type ImageResizePayload struct {
    SourceURL string
}

//----------------------------------------------
// Write a function NewXXXTask to create a task.
// A task consists of a type and a payload.
//----------------------------------------------

func NewEmailDeliveryTask(userID int, tmplID string) (*asynq.Task, error) {
    payload, err := json.Marshal(EmailDeliveryPayload{UserID: userID, TemplateID: tmplID})
    if err != nil {
        return nil, err
    }
    return asynq.NewTask(TypeEmailDelivery, payload), nil
}

func NewImageResizeTask(src string) (*asynq.Task, error) {
    payload, err := json.Marshal(ImageResizePayload{SourceURL: src})
    if err != nil {
        return nil, err
    }
    // task options can be passed to NewTask, which can be overridden at enqueue time.
    return asynq.NewTask(TypeImageResize, payload, asynq.MaxRetry(5), asynq.Timeout(20 * time.Minute)), nil
}

//---------------------------------------------------------------
// Write a function HandleXXXTask to handle the input task.
// Note that it satisfies the asynq.HandlerFunc interface.
//
// Handler doesn't need to be a function. You can define a type
// that satisfies asynq.Handler interface. See examples below.
//---------------------------------------------------------------

func HandleEmailDeliveryTask(ctx context.Context, t *asynq.Task) error {
    var p EmailDeliveryPayload
    if err := json.Unmarshal(t.Payload(), &amp;amp;p); err != nil {
        return fmt.Errorf("json.Unmarshal failed: %v: %w", err, asynq.SkipRetry)
    }
    log.Printf("Sending Email to User: user_id=%d, template_id=%s", p.UserID, p.TemplateID)
    // Email delivery code ...
    return nil
}

// ImageProcessor implements asynq.Handler interface.
type ImageProcessor struct {
    // ... fields for struct
}

func (processor *ImageProcessor) ProcessTask(ctx context.Context, t *asynq.Task) error {
    var p ImageResizePayload
    if err := json.Unmarshal(t.Payload(), &amp;amp;p); err != nil {
        return fmt.Errorf("json.Unmarshal failed: %v: %w", err, asynq.SkipRetry)
    }
    log.Printf("Resizing image: src=%s", p.SourceURL)
    // Image resizing code ...
    return nil
}

func NewImageProcessor() *ImageProcessor {
	return &amp;amp;ImageProcessor{}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In your application code, import the above package and use &lt;a href="https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Client"&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; to put tasks on queues.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"
    "time"

    "github.com/hibiken/asynq"
    "your/app/package/tasks"
)

const redisAddr = "127.0.0.1:6379"

func main() {
    client := asynq.NewClient(asynq.RedisClientOpt{Addr: redisAddr})
    defer client.Close()

    // ------------------------------------------------------
    // Example 1: Enqueue task to be processed immediately.
    //            Use (*Client).Enqueue method.
    // ------------------------------------------------------

    task, err := tasks.NewEmailDeliveryTask(42, "some:template:id")
    if err != nil {
        log.Fatalf("could not create task: %v", err)
    }
    info, err := client.Enqueue(task)
    if err != nil {
        log.Fatalf("could not enqueue task: %v", err)
    }
    log.Printf("enqueued task: id=%s queue=%s", info.ID, info.Queue)


    // ------------------------------------------------------------
    // Example 2: Schedule task to be processed in the future.
    //            Use ProcessIn or ProcessAt option.
    // ------------------------------------------------------------

    info, err = client.Enqueue(task, asynq.ProcessIn(24*time.Hour))
    if err != nil {
        log.Fatalf("could not schedule task: %v", err)
    }
    log.Printf("enqueued task: id=%s queue=%s", info.ID, info.Queue)


    // ----------------------------------------------------------------------------
    // Example 3: Set other options to tune task processing behavior.
    //            Options include MaxRetry, Queue, Timeout, Deadline, Unique etc.
    // ----------------------------------------------------------------------------

    task, err = tasks.NewImageResizeTask("https://example.com/myassets/image.jpg")
    if err != nil {
        log.Fatalf("could not create task: %v", err)
    }
    info, err = client.Enqueue(task, asynq.MaxRetry(10), asynq.Timeout(3 * time.Minute))
    if err != nil {
        log.Fatalf("could not enqueue task: %v", err)
    }
    log.Printf("enqueued task: id=%s queue=%s", info.ID, info.Queue)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, start a worker server to process these tasks in the background. To start the background workers, use &lt;a href="https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Server"&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/a&gt; and provide your &lt;a href="https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Handler"&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; to process the tasks.&lt;/p&gt; 
&lt;p&gt;You can optionally use &lt;a href="https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#ServeMux"&gt;&lt;code&gt;ServeMux&lt;/code&gt;&lt;/a&gt; to create a handler, just as you would with &lt;a href="https://golang.org/pkg/net/http/"&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; Handler.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/hibiken/asynq"
    "your/app/package/tasks"
)

const redisAddr = "127.0.0.1:6379"

func main() {
    srv := asynq.NewServer(
        asynq.RedisClientOpt{Addr: redisAddr},
        asynq.Config{
            // Specify how many concurrent workers to use
            Concurrency: 10,
            // Optionally specify multiple queues with different priority.
            Queues: map[string]int{
                "critical": 6,
                "default":  3,
                "low":      1,
            },
            // See the godoc for other configuration options
        },
    )

    // mux maps a type to a handler
    mux := asynq.NewServeMux()
    mux.HandleFunc(tasks.TypeEmailDelivery, tasks.HandleEmailDeliveryTask)
    mux.Handle(tasks.TypeImageResize, tasks.NewImageProcessor())
    // ...register other handlers...

    if err := srv.Run(mux); err != nil {
        log.Fatalf("could not run server: %v", err)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a more detailed walk-through of the library, see our &lt;a href="https://github.com/hibiken/asynq/wiki/Getting-Started"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt; 
&lt;p&gt;To learn more about &lt;code&gt;asynq&lt;/code&gt; features and APIs, see the package &lt;a href="https://godoc.org/github.com/hibiken/asynq"&gt;godoc&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Web UI&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/hibiken/asynqmon"&gt;Asynqmon&lt;/a&gt; is a web based tool for monitoring and administrating Asynq queues and tasks.&lt;/p&gt; 
&lt;p&gt;Here's a few screenshots of the Web UI:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Queues view&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/11155743/114697016-07327f00-9d26-11eb-808c-0ac841dc888e.png" alt="Web UI Queues View"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tasks view&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/11155743/114697070-1f0a0300-9d26-11eb-855c-d3ec263865b7.png" alt="Web UI TasksView"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Metrics view&lt;/strong&gt; &lt;img width="1532" alt="Screen Shot 2021-12-19 at 4 37 19 PM" src="https://user-images.githubusercontent.com/10953044/146777420-cae6c476-bac6-469c-acce-b2f6584e8707.png"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Settings and adaptive dark mode&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/11155743/114697149-3517c380-9d26-11eb-9f7a-ae2dd00aad5b.png" alt="Web UI Settings and adaptive dark mode"&gt;&lt;/p&gt; 
&lt;p&gt;For details on how to use the tool, refer to the tool's &lt;a href="https://github.com/hibiken/asynqmon#readme"&gt;README&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Command Line Tool&lt;/h2&gt; 
&lt;p&gt;Asynq ships with a command line tool to inspect the state of queues and tasks.&lt;/p&gt; 
&lt;p&gt;To install the CLI tool, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install github.com/hibiken/asynq/tools/asynq@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here's an example of running the &lt;code&gt;asynq dash&lt;/code&gt; command:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/hibiken/asynq/master/docs/assets/dash.gif" alt="Gif"&gt;&lt;/p&gt; 
&lt;p&gt;For details on how to use the tool, refer to the tool's &lt;a href="https://raw.githubusercontent.com/hibiken/asynq/master/tools/asynq/README.md"&gt;README&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We are open to, and grateful for, any contributions (GitHub issues/PRs, feedback on &lt;a href="https://gitter.im/go-asynq/community"&gt;Gitter channel&lt;/a&gt;, etc) made by the community.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/hibiken/asynq/master/CONTRIBUTING.md"&gt;Contribution Guide&lt;/a&gt; before contributing.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2019-present &lt;a href="https://github.com/hibiken"&gt;Ken Hibino&lt;/a&gt; and &lt;a href="https://github.com/hibiken/asynq/graphs/contributors"&gt;Contributors&lt;/a&gt;. &lt;code&gt;Asynq&lt;/code&gt; is free and open-source software licensed under the &lt;a href="https://github.com/hibiken/asynq/raw/master/LICENSE"&gt;MIT License&lt;/a&gt;. Official logo was created by &lt;a href="https://github.com/koddr"&gt;Vic Sh√≥stak&lt;/a&gt; and distributed under &lt;a href="https://creativecommons.org/publicdomain/zero/1.0/"&gt;Creative Commons&lt;/a&gt; license (CC0 1.0 Universal).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>alireza0/s-ui</title>
      <link>https://github.com/alireza0/s-ui</link>
      <description>&lt;p&gt;An advanced Web Panel ‚Ä¢ Built for SagerNet/Sing-Box&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;S-UI&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;An Advanced Web Panel ‚Ä¢ Built on SagerNet/Sing-Box&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/v/release/alireza0/s-ui.svg?sanitize=true" alt=""&gt; &lt;img src="https://img.shields.io/docker/pulls/alireza7/s-ui.svg?sanitize=true" alt="S-UI Docker pull"&gt; &lt;a href="https://goreportcard.com/report/github.com/alireza0/s-ui"&gt;&lt;img src="https://goreportcard.com/badge/github.com/alireza0/s-ui" alt="Go Report Card"&gt;&lt;/a&gt; &lt;a href="https://img.shields.io/github/downloads/alireza0/s-ui/total.svg"&gt;&lt;img src="https://img.shields.io/github/downloads/alireza0/s-ui/total.svg?sanitize=true" alt="Downloads"&gt;&lt;/a&gt; &lt;a href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;&lt;img src="https://img.shields.io/badge/license-GPL%20V3-blue.svg?longCache=true" alt="License"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This project is only for personal learning and communication, please do not use it for illegal purposes, please do not use it in a production environment&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;If you think this project is helpful to you, you may wish to give a&lt;/strong&gt;&lt;span&gt;üåü&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/alireza7"&gt;&lt;img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="&amp;quot;Buy Me A Coffee&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;USDT (TRC20): &lt;code&gt;TYTq73Gj6dJ67qe58JVPD9zpjW2cc9XgVz&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Overview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Features&lt;/th&gt; 
   &lt;th align="center"&gt;Enable?&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Protocol&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Language&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Client/Inbound&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Advanced Traffic Routing Interface&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Client &amp;amp; Traffic &amp;amp; System Status&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Subscription Service (link/json + info)&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dark/Light Theme&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;API Interface&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;API Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/alireza0/s-ui/wiki/API-Documentation"&gt;API-Documentation Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Default Installation Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Panel Port: 2095&lt;/li&gt; 
 &lt;li&gt;Panel Path: /app/&lt;/li&gt; 
 &lt;li&gt;Subscription Port: 2096&lt;/li&gt; 
 &lt;li&gt;Subscription Path: /sub/&lt;/li&gt; 
 &lt;li&gt;User/Password: admin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install &amp;amp; Upgrade to Latest Version&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/master/install.sh)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install legacy Version&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; To install your desired legacy version, add the version to the end of the installation command. e.g., ver &lt;code&gt;1.0.0&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;VERSION=1.0.0 &amp;amp;&amp;amp; bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/$VERSION/install.sh) $VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Manual installation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Get the latest version of S-UI based on your OS/Architecture from GitHub: &lt;a href="https://github.com/alireza0/s-ui/releases/latest"&gt;https://github.com/alireza0/s-ui/releases/latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt; Get the latest version of &lt;code&gt;s-ui.sh&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh"&gt;https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt; Copy &lt;code&gt;s-ui.sh&lt;/code&gt; to /usr/bin/ and run &lt;code&gt;chmod +x /usr/bin/s-ui&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Extract s-ui tar.gz file to a directory of your choice and navigate to the directory where you extracted the tar.gz file.&lt;/li&gt; 
 &lt;li&gt;Copy *.service files to /etc/systemd/system/ and run &lt;code&gt;systemctl daemon-reload&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Enable autostart and start S-UI service using &lt;code&gt;systemctl enable s-ui --now&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Start sing-box service using &lt;code&gt;systemctl enable sing-box --now&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Uninstall S-UI&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo -i

systemctl disable s-ui  --now

rm -f /etc/systemd/system/sing-box.service
systemctl daemon-reload

rm -fr /usr/local/s-ui
rm /usr/bin/s-ui
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install using Docker&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Usage&lt;/h3&gt; 
 &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Install Docker&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;curl -fsSL https://get.docker.com | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Install S-UI&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Docker compose method&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;mkdir s-ui &amp;amp;&amp;amp; cd s-ui
wget -q https://raw.githubusercontent.com/alireza0/s-ui/master/docker-compose.yml
docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Use docker&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;mkdir s-ui &amp;amp;&amp;amp; cd s-ui
docker run -itd \
    -p 2095:2095 -p 2096:2096 -p 443:443 -p 80:80 \
    -v $PWD/db/:/usr/local/s-ui/db/ \
    -v $PWD/cert/:/root/cert/ \
    --name s-ui --restart=unless-stopped \
    alireza7/s-ui:latest
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Build your own image&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/alireza0/s-ui
git submodule update --init --recursive
docker build -t s-ui .
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Manual run ( contribution )&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Build and run whole project&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;./runSUI.sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Clone the repository&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# clone repository
git clone https://github.com/alireza0/s-ui
# clone submodules
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;- Frontend&lt;/h3&gt; 
 &lt;p&gt;Visit &lt;a href="https://github.com/alireza0/s-ui-frontend"&gt;s-ui-frontend&lt;/a&gt; for frontend code&lt;/p&gt; 
 &lt;h3&gt;- Backend&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Please build frontend once before!&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;To build backend:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# remove old frontend compiled files
rm -fr web/html/*
# apply new frontend compiled files
cp -R frontend/dist/ web/html/
# build
go build -o sui main.go
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To run backend (from root folder of repository):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;./sui
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;English&lt;/li&gt; 
 &lt;li&gt;Farsi&lt;/li&gt; 
 &lt;li&gt;Vietnamese&lt;/li&gt; 
 &lt;li&gt;Chinese (Simplified)&lt;/li&gt; 
 &lt;li&gt;Chinese (Traditional)&lt;/li&gt; 
 &lt;li&gt;Russian&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported protocols: 
  &lt;ul&gt; 
   &lt;li&gt;General: Mixed, SOCKS, HTTP, HTTPS, Direct, Redirect, TProxy&lt;/li&gt; 
   &lt;li&gt;V2Ray based: VLESS, VMess, Trojan, Shadowsocks&lt;/li&gt; 
   &lt;li&gt;Other protocols: ShadowTLS, Hysteria, Hysteria2, Naive, TUIC&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Supports XTLS protocols&lt;/li&gt; 
 &lt;li&gt;An advanced interface for routing traffic, incorporating PROXY Protocol, External, and Transparent Proxy, SSL Certificate, and Port&lt;/li&gt; 
 &lt;li&gt;An advanced interface for inbound and outbound configuration&lt;/li&gt; 
 &lt;li&gt;Clients‚Äô traffic cap and expiration date&lt;/li&gt; 
 &lt;li&gt;Displays online clients, inbounds and outbounds with traffic statistics, and system status monitoring&lt;/li&gt; 
 &lt;li&gt;Subscription service with ability to add external links and subscription&lt;/li&gt; 
 &lt;li&gt;HTTPS for secure access to the web panel and subscription service (self-provided domain + SSL certificate)&lt;/li&gt; 
 &lt;li&gt;Dark/Light theme&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Recommended OS&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ubuntu 20.04+&lt;/li&gt; 
 &lt;li&gt;Debian 11+&lt;/li&gt; 
 &lt;li&gt;CentOS 8+&lt;/li&gt; 
 &lt;li&gt;Fedora 36+&lt;/li&gt; 
 &lt;li&gt;Arch Linux&lt;/li&gt; 
 &lt;li&gt;Parch Linux&lt;/li&gt; 
 &lt;li&gt;Manjaro&lt;/li&gt; 
 &lt;li&gt;Armbian&lt;/li&gt; 
 &lt;li&gt;AlmaLinux 9+&lt;/li&gt; 
 &lt;li&gt;Rocky Linux 9+&lt;/li&gt; 
 &lt;li&gt;Oracle Linux 8+&lt;/li&gt; 
 &lt;li&gt;OpenSUSE Tubleweed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Environment Variables&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Usage&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Variable&lt;/th&gt; 
    &lt;th align="center"&gt;Type&lt;/th&gt; 
    &lt;th align="left"&gt;Default&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_LOG_LEVEL&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;"debug"&lt;/code&gt; | &lt;code&gt;"info"&lt;/code&gt; | &lt;code&gt;"warn"&lt;/code&gt; | &lt;code&gt;"error"&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"info"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_DEBUG&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_BIN_FOLDER&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"bin"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_DB_FOLDER&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"db"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SINGBOX_API&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;SSL Certificate&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Certbot&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;snap install core; snap refresh core
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot

certbot certonly --standalone --register-unsafely-without-email --non-interactive --agree-tos -d &amp;lt;Your Domain Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Stargazers over Time&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://starchart.cc/alireza0/s-ui"&gt;&lt;img src="https://starchart.cc/alireza0/s-ui.svg?sanitize=true" alt="Stargazers over time"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spf13/viper</title>
      <link>https://github.com/spf13/viper</link>
      <description>&lt;p&gt;Go configuration with fangs&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;h2&gt;Viper v2 feedback&lt;/h2&gt; 
 &lt;p&gt;Viper is heading towards v2 and we would love to hear what &lt;em&gt;&lt;strong&gt;you&lt;/strong&gt;&lt;/em&gt; would like to see in it. Share your thoughts here: &lt;a href="https://forms.gle/R6faU74qPRPAzchZ9"&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/acae9193-2974-41f3-808d-2d433f5ada5e" alt="viper logo"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/avelino/awesome-go#configuration"&gt;&lt;img src="https://awesome.re/mentioned-badge-flat.svg?sanitize=true" alt="Mentioned in Awesome Go"&gt;&lt;/a&gt; &lt;a href="https://repl.it/@sagikazarmark/Viper-example#main.go"&gt;&lt;img src="https://repl.it/badge/github/sagikazarmark/Viper-example" alt="run on repl.it"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/spf13/viper/actions?query=workflow%3ACI"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/spf13/viper/ci.yaml?branch=master&amp;amp;style=flat-square" alt="GitHub Workflow Status"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/spf13/viper?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge"&gt;&lt;img src="https://badges.gitter.im/Join%20Chat.svg?sanitize=true" alt="Join the chat at https://gitter.im/spf13/viper"&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/spf13/viper"&gt;&lt;img src="https://goreportcard.com/badge/github.com/spf13/viper?style=flat-square" alt="Go Report Card"&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/go%20version-%3E=1.23-61CFDD.svg?style=flat-square" alt="Go Version"&gt; &lt;a href="https://pkg.go.dev/mod/github.com/spf13/viper"&gt;&lt;img src="https://pkg.go.dev/badge/mod/github.com/spf13/viper" alt="PkgGoDev"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Go configuration with fangs!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Many Go projects are built using Viper including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://gohugo.io"&gt;Hugo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://rexray.readthedocs.org/en/stable/"&gt;EMC RexRay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Imgur/incus"&gt;Imgur‚Äôs Incus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nanobox-io/nanobox"&gt;Nanobox&lt;/a&gt;/&lt;a href="https://github.com/nanopack"&gt;Nanopack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/docker/Notary"&gt;Docker Notary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.bloomapi.com/"&gt;BloomApi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/digitalocean/doctl"&gt;doctl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jgsqware/clairctl"&gt;Clairctl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mercure.rocks"&gt;Mercure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/meshery/meshery"&gt;Meshery&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bearer/bearer"&gt;Bearer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/coder/coder"&gt;Coder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://vitess.io/"&gt;Vitess&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;go get github.com/spf13/viper
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Viper uses &lt;a href="https://go.dev/wiki/Modules"&gt;Go Modules&lt;/a&gt; to manage dependencies.&lt;/p&gt; 
&lt;h2&gt;What is Viper?&lt;/h2&gt; 
&lt;p&gt;Viper is a complete configuration solution for Go applications including &lt;a href="https://12factor.net/#the_twelve_factors"&gt;12-Factor apps&lt;/a&gt;. It is designed to work within an application, and can handle all types of configuration needs and formats. It supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;setting defaults&lt;/li&gt; 
 &lt;li&gt;reading from JSON, TOML, YAML, HCL, envfile and Java properties config files&lt;/li&gt; 
 &lt;li&gt;live watching and re-reading of config files (optional)&lt;/li&gt; 
 &lt;li&gt;reading from environment variables&lt;/li&gt; 
 &lt;li&gt;reading from remote config systems (etcd or Consul), and watching changes&lt;/li&gt; 
 &lt;li&gt;reading from command line flags&lt;/li&gt; 
 &lt;li&gt;reading from buffer&lt;/li&gt; 
 &lt;li&gt;setting explicit values&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Viper can be thought of as a registry for all of your applications configuration needs.&lt;/p&gt; 
&lt;h2&gt;Why Viper?&lt;/h2&gt; 
&lt;p&gt;When building a modern application, you don‚Äôt want to worry about configuration file formats; you want to focus on building awesome software. Viper is here to help with that.&lt;/p&gt; 
&lt;p&gt;Viper does the following for you:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Find, load, and unmarshal a configuration file in JSON, TOML, YAML, HCL, INI, envfile or Java properties formats.&lt;/li&gt; 
 &lt;li&gt;Provide a mechanism to set default values for your different configuration options.&lt;/li&gt; 
 &lt;li&gt;Provide a mechanism to set override values for options specified through command line flags.&lt;/li&gt; 
 &lt;li&gt;Provide an alias system to easily rename parameters without breaking existing code.&lt;/li&gt; 
 &lt;li&gt;Make it easy to tell the difference between when a user has provided a command line or config file which is the same as the default.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Viper uses the following precedence order. Each item takes precedence over the item below it:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;explicit call to &lt;code&gt;Set&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;flag&lt;/li&gt; 
 &lt;li&gt;env&lt;/li&gt; 
 &lt;li&gt;config&lt;/li&gt; 
 &lt;li&gt;key/value store&lt;/li&gt; 
 &lt;li&gt;default&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Viper configuration keys are case insensitive. There are ongoing discussions about making that optional.&lt;/p&gt; 
&lt;h2&gt;Putting Values into Viper&lt;/h2&gt; 
&lt;h3&gt;Establishing Defaults&lt;/h3&gt; 
&lt;p&gt;A good configuration system will support default values. A default value is not required for a key, but it‚Äôs useful in the event that a key hasn't been set via config file, environment variable, remote configuration or flag.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.SetDefault("ContentDir", "content")
viper.SetDefault("LayoutDir", "layouts")
viper.SetDefault("Taxonomies", map[string]string{"tag": "tags", "category": "categories"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reading Config Files&lt;/h3&gt; 
&lt;p&gt;Viper requires minimal configuration so it knows where to look for config files. Viper supports JSON, TOML, YAML, HCL, INI, envfile and Java Properties files. Viper can search multiple paths, but currently a single Viper instance only supports a single configuration file. Viper does not default to any configuration search paths leaving defaults decision to an application.&lt;/p&gt; 
&lt;p&gt;Here is an example of how to use Viper to search for and read a configuration file. None of the specific paths are required, but at least one path should be provided where a configuration file is expected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.SetConfigName("config") // name of config file (without extension)
viper.SetConfigType("yaml") // REQUIRED if the config file does not have the extension in the name
viper.AddConfigPath("/etc/appname/")   // path to look for the config file in
viper.AddConfigPath("$HOME/.appname")  // call multiple times to add many search paths
viper.AddConfigPath(".")               // optionally look for config in the working directory
err := viper.ReadInConfig() // Find and read the config file
if err != nil { // Handle errors reading the config file
	panic(fmt.Errorf("fatal error config file: %w", err))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can handle the specific case where no config file is found like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;if err := viper.ReadInConfig(); err != nil {
	if _, ok := err.(viper.ConfigFileNotFoundError); ok {
		// Config file not found; ignore error if desired
	} else {
		// Config file was found but another error was produced
	}
}

// Config file found and successfully parsed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;NOTE [since 1.6]:&lt;/em&gt; You can also have a file without an extension and specify the format programmatically. For those configuration files that lie in the home of the user without any extension like &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Writing Config Files&lt;/h3&gt; 
&lt;p&gt;Reading from config files is useful, but at times you want to store all modifications made at run time. For that, a bunch of commands are available, each with its own purpose:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;WriteConfig - writes the current viper configuration to the predefined path, if exists. Errors if no predefined path. Will overwrite the current config file, if it exists.&lt;/li&gt; 
 &lt;li&gt;SafeWriteConfig - writes the current viper configuration to the predefined path. Errors if no predefined path. Will not overwrite the current config file, if it exists.&lt;/li&gt; 
 &lt;li&gt;WriteConfigAs - writes the current viper configuration to the given filepath. Will overwrite the given file, if it exists.&lt;/li&gt; 
 &lt;li&gt;SafeWriteConfigAs - writes the current viper configuration to the given filepath. Will not overwrite the given file, if it exists.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As a rule of the thumb, everything marked with safe won't overwrite any file, but just create if not existent, whilst the default behavior is to create or truncate.&lt;/p&gt; 
&lt;p&gt;A small examples section:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.WriteConfig() // writes current config to predefined path set by 'viper.AddConfigPath()' and 'viper.SetConfigName'
viper.SafeWriteConfig()
viper.WriteConfigAs("/path/to/my/.config")
viper.SafeWriteConfigAs("/path/to/my/.config") // will error since it has already been written
viper.SafeWriteConfigAs("/path/to/my/.other_config")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Watching and re-reading config files&lt;/h3&gt; 
&lt;p&gt;Viper supports the ability to have your application live read a config file while running.&lt;/p&gt; 
&lt;p&gt;Gone are the days of needing to restart a server to have a config take effect, viper powered applications can read an update to a config file while running and not miss a beat.&lt;/p&gt; 
&lt;p&gt;Simply tell the viper instance to watchConfig. Optionally you can provide a function for Viper to run each time a change occurs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Make sure you add all of the configPaths prior to calling &lt;code&gt;WatchConfig()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.OnConfigChange(func(e fsnotify.Event) {
	fmt.Println("Config file changed:", e.Name)
})
viper.WatchConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reading Config from io.Reader&lt;/h3&gt; 
&lt;p&gt;Viper predefines many configuration sources such as files, environment variables, flags, and remote K/V store, but you are not bound to them. You can also implement your own required configuration source and feed it to viper.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.SetConfigType("yaml") // or viper.SetConfigType("YAML")

// any approach to require this configuration into your program.
var yamlExample = []byte(`
Hacker: true
name: steve
hobbies:
- skateboarding
- snowboarding
- go
clothing:
  jacket: leather
  trousers: denim
age: 35
eyes : brown
beard: true
`)

viper.ReadConfig(bytes.NewBuffer(yamlExample))

viper.Get("name") // this would be "steve"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Setting Overrides&lt;/h3&gt; 
&lt;p&gt;These could be from a command line flag, or from your own application logic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.Set("Verbose", true)
viper.Set("LogFile", LogFile)
viper.Set("host.port", 5899)   // set subset
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Registering and Using Aliases&lt;/h3&gt; 
&lt;p&gt;Aliases permit a single value to be referenced by multiple keys&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.RegisterAlias("loud", "Verbose")

viper.Set("verbose", true) // same result as next line
viper.Set("loud", true)   // same result as prior line

viper.GetBool("loud") // true
viper.GetBool("verbose") // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Working with Environment Variables&lt;/h3&gt; 
&lt;p&gt;Viper has full support for environment variables. This enables 12 factor applications out of the box. There are five methods that exist to aid working with ENV:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;AutomaticEnv()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;BindEnv(string...) : error&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SetEnvPrefix(string)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SetEnvKeyReplacer(string...) *strings.Replacer&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AllowEmptyEnv(bool)&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;When working with ENV variables, it‚Äôs important to recognize that Viper treats ENV variables as case sensitive.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Viper provides a mechanism to try to ensure that ENV variables are unique. By using &lt;code&gt;SetEnvPrefix&lt;/code&gt;, you can tell Viper to use a prefix while reading from the environment variables. Both &lt;code&gt;BindEnv&lt;/code&gt; and &lt;code&gt;AutomaticEnv&lt;/code&gt; will use this prefix.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;BindEnv&lt;/code&gt; takes one or more parameters. The first parameter is the key name, the rest are the name of the environment variables to bind to this key. If more than one are provided, they will take precedence in the specified order. The name of the environment variable is case sensitive. If the ENV variable name is not provided, then Viper will automatically assume that the ENV variable matches the following format: prefix + "_" + the key name in ALL CAPS. When you explicitly provide the ENV variable name (the second parameter), it &lt;strong&gt;does not&lt;/strong&gt; automatically add the prefix. For example if the second parameter is "id", Viper will look for the ENV variable "ID".&lt;/p&gt; 
&lt;p&gt;One important thing to recognize when working with ENV variables is that the value will be read each time it is accessed. Viper does not fix the value when the &lt;code&gt;BindEnv&lt;/code&gt; is called.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;AutomaticEnv&lt;/code&gt; is a powerful helper especially when combined with &lt;code&gt;SetEnvPrefix&lt;/code&gt;. When called, Viper will check for an environment variable any time a &lt;code&gt;viper.Get&lt;/code&gt; request is made. It will apply the following rules. It will check for an environment variable with a name matching the key uppercased and prefixed with the &lt;code&gt;EnvPrefix&lt;/code&gt; if set.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;SetEnvKeyReplacer&lt;/code&gt; allows you to use a &lt;code&gt;strings.Replacer&lt;/code&gt; object to rewrite Env keys to an extent. This is useful if you want to use &lt;code&gt;-&lt;/code&gt; or something in your &lt;code&gt;Get()&lt;/code&gt; calls, but want your environmental variables to use &lt;code&gt;_&lt;/code&gt; delimiters. An example of using it can be found in &lt;code&gt;viper_test.go&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can use &lt;code&gt;EnvKeyReplacer&lt;/code&gt; with &lt;code&gt;NewWithOptions&lt;/code&gt; factory function. Unlike &lt;code&gt;SetEnvKeyReplacer&lt;/code&gt;, it accepts a &lt;code&gt;StringReplacer&lt;/code&gt; interface allowing you to write custom string replacing logic.&lt;/p&gt; 
&lt;p&gt;By default empty environment variables are considered unset and will fall back to the next configuration source. To treat empty environment variables as set, use the &lt;code&gt;AllowEmptyEnv&lt;/code&gt; method.&lt;/p&gt; 
&lt;h4&gt;Env example&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;SetEnvPrefix("spf") // will be uppercased automatically
BindEnv("id")

os.Setenv("SPF_ID", "13") // typically done outside of the app

id := Get("id") // 13
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Working with Flags&lt;/h3&gt; 
&lt;p&gt;Viper has the ability to bind to flags. Specifically, Viper supports &lt;code&gt;Pflags&lt;/code&gt; as used in the &lt;a href="https://github.com/spf13/cobra"&gt;Cobra&lt;/a&gt; library.&lt;/p&gt; 
&lt;p&gt;Like &lt;code&gt;BindEnv&lt;/code&gt;, the value is not set when the binding method is called, but when it is accessed. This means you can bind as early as you want, even in an &lt;code&gt;init()&lt;/code&gt; function.&lt;/p&gt; 
&lt;p&gt;For individual flags, the &lt;code&gt;BindPFlag()&lt;/code&gt; method provides this functionality.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;serverCmd.Flags().Int("port", 1138, "Port to run Application server on")
viper.BindPFlag("port", serverCmd.Flags().Lookup("port"))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also bind an existing set of pflags (pflag.FlagSet):&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;pflag.Int("flagname", 1234, "help message for flagname")

pflag.Parse()
viper.BindPFlags(pflag.CommandLine)

i := viper.GetInt("flagname") // retrieve values from viper instead of pflag
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The use of &lt;a href="https://github.com/spf13/pflag/"&gt;pflag&lt;/a&gt; in Viper does not preclude the use of other packages that use the &lt;a href="https://golang.org/pkg/flag/"&gt;flag&lt;/a&gt; package from the standard library. The pflag package can handle the flags defined for the flag package by importing these flags. This is accomplished by a calling a convenience function provided by the pflag package called AddGoFlagSet().&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"flag"
	"github.com/spf13/pflag"
)

func main() {

	// using standard library "flag" package
	flag.Int("flagname", 1234, "help message for flagname")

	pflag.CommandLine.AddGoFlagSet(flag.CommandLine)
	pflag.Parse()
	viper.BindPFlags(pflag.CommandLine)

	i := viper.GetInt("flagname") // retrieve value from viper

	// ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Flag interfaces&lt;/h4&gt; 
&lt;p&gt;Viper provides two Go interfaces to bind other flag systems if you don‚Äôt use &lt;code&gt;Pflags&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;FlagValue&lt;/code&gt; represents a single flag. This is a very simple example on how to implement this interface:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type myFlag struct {}
func (f myFlag) HasChanged() bool { return false }
func (f myFlag) Name() string { return "my-flag-name" }
func (f myFlag) ValueString() string { return "my-flag-value" }
func (f myFlag) ValueType() string { return "string" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once your flag implements this interface, you can simply tell Viper to bind it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.BindFlagValue("my-flag-name", myFlag{})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;FlagValueSet&lt;/code&gt; represents a group of flags. This is a very simple example on how to implement this interface:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type myFlagSet struct {
	flags []myFlag
}

func (f myFlagSet) VisitAll(fn func(FlagValue)) {
	for _, flag := range flags {
		fn(flag)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once your flag set implements this interface, you can simply tell Viper to bind it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;fSet := myFlagSet{
	flags: []myFlag{myFlag{}, myFlag{}},
}
viper.BindFlagValues("my-flags", fSet)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remote Key/Value Store Support&lt;/h3&gt; 
&lt;p&gt;To enable remote support in Viper, do a blank import of the &lt;code&gt;viper/remote&lt;/code&gt; package:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;import _ "github.com/spf13/viper/remote"&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Viper will read a config string (as JSON, TOML, YAML, HCL or envfile) retrieved from a path in a Key/Value store such as etcd or Consul. These values take precedence over default values, but are overridden by configuration values retrieved from disk, flags, or environment variables.&lt;/p&gt; 
&lt;p&gt;Viper supports multiple hosts. To use, pass a list of endpoints separated by &lt;code&gt;;&lt;/code&gt;. For example &lt;code&gt;http://127.0.0.1:4001;http://127.0.0.1:4002&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Viper uses &lt;a href="https://github.com/sagikazarmark/crypt"&gt;crypt&lt;/a&gt; to retrieve configuration from the K/V store, which means that you can store your configuration values encrypted and have them automatically decrypted if you have the correct gpg keyring. Encryption is optional.&lt;/p&gt; 
&lt;p&gt;You can use remote configuration in conjunction with local configuration, or independently of it.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;crypt&lt;/code&gt; has a command-line helper that you can use to put configurations in your K/V store. &lt;code&gt;crypt&lt;/code&gt; defaults to etcd on &lt;a href="http://127.0.0.1:4001"&gt;http://127.0.0.1:4001&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ go get github.com/sagikazarmark/crypt/bin/crypt
$ crypt set -plaintext /config/hugo.json /Users/hugo/settings/config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Confirm that your value was set:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ crypt get -plaintext /config/hugo.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;code&gt;crypt&lt;/code&gt; documentation for examples of how to set encrypted values, or how to use Consul.&lt;/p&gt; 
&lt;h3&gt;Remote Key/Value Store Example - Unencrypted&lt;/h3&gt; 
&lt;h4&gt;etcd&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("etcd", "http://127.0.0.1:4001","/config/hugo.json")
viper.SetConfigType("json") // because there is no file extension in a stream of bytes, supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;etcd3&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("etcd3", "http://127.0.0.1:4001","/config/hugo.json")
viper.SetConfigType("json") // because there is no file extension in a stream of bytes, supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Consul&lt;/h4&gt; 
&lt;p&gt;You need to set a key to Consul key/value storage with JSON value containing your desired config. For example, create a Consul key/value store key &lt;code&gt;MY_CONSUL_KEY&lt;/code&gt; with value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "port": 8080,
    "hostname": "myhostname.com"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("consul", "localhost:8500", "MY_CONSUL_KEY")
viper.SetConfigType("json") // Need to explicitly set this to json
err := viper.ReadRemoteConfig()

fmt.Println(viper.Get("port")) // 8080
fmt.Println(viper.Get("hostname")) // myhostname.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Firestore&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("firestore", "google-cloud-project-id", "collection/document")
viper.SetConfigType("json") // Config's format: "json", "toml", "yaml", "yml"
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, you're allowed to use &lt;code&gt;SecureRemoteProvider&lt;/code&gt; also&lt;/p&gt; 
&lt;h4&gt;NATS&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddRemoteProvider("nats", "nats://127.0.0.1:4222", "myapp.config")
viper.SetConfigType("json")
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remote Key/Value Store Example - Encrypted&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.AddSecureRemoteProvider("etcd","http://127.0.0.1:4001","/config/hugo.json","/etc/secrets/mykeyring.gpg")
viper.SetConfigType("json") // because there is no file extension in a stream of bytes,  supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"
err := viper.ReadRemoteConfig()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Watching Changes in etcd - Unencrypted&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// alternatively, you can create a new viper instance.
var runtime_viper = viper.New()

runtime_viper.AddRemoteProvider("etcd", "http://127.0.0.1:4001", "/config/hugo.yml")
runtime_viper.SetConfigType("yaml") // because there is no file extension in a stream of bytes, supported extensions are "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"

// read from remote config the first time.
err := runtime_viper.ReadRemoteConfig()

// unmarshal config
runtime_viper.Unmarshal(&amp;amp;runtime_conf)

// open a goroutine to watch remote changes forever
go func(){
	for {
		time.Sleep(time.Second * 5) // delay after each request

		// currently, only tested with etcd support
		err := runtime_viper.WatchRemoteConfig()
		if err != nil {
			log.Errorf("unable to read remote config: %v", err)
			continue
		}

		// unmarshal new config into our runtime config struct. you can also use channel
		// to implement a signal to notify the system of the changes
		runtime_viper.Unmarshal(&amp;amp;runtime_conf)
	}
}()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Values From Viper&lt;/h2&gt; 
&lt;p&gt;In Viper, there are a few ways to get a value depending on the value‚Äôs type. The following functions and methods exist:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Get(key string) : any&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetBool(key string) : bool&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetFloat64(key string) : float64&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetInt(key string) : int&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetIntSlice(key string) : []int&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetString(key string) : string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetStringMap(key string) : map[string]any&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetStringMapString(key string) : map[string]string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetStringSlice(key string) : []string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetTime(key string) : time.Time&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GetDuration(key string) : time.Duration&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;IsSet(key string) : bool&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AllSettings() : map[string]any&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;One important thing to recognize is that each Get function will return a zero value if it‚Äôs not found. To check if a given key exists, the &lt;code&gt;IsSet()&lt;/code&gt; method has been provided.&lt;/p&gt; 
&lt;p&gt;The zero value will also be returned if the value is set, but fails to parse as the requested type.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;viper.GetString("logfile") // case-insensitive Setting &amp;amp; Getting
if viper.GetBool("verbose") {
	fmt.Println("verbose enabled")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Accessing nested keys&lt;/h3&gt; 
&lt;p&gt;The accessor methods also accept formatted paths to deeply nested keys. For example, if the following JSON file is loaded:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
    "host": {
        "address": "localhost",
        "port": 5799
    },
    "datastore": {
        "metric": {
            "host": "127.0.0.1",
            "port": 3099
        },
        "warehouse": {
            "host": "198.0.0.1",
            "port": 2112
        }
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Viper can access a nested field by passing a &lt;code&gt;.&lt;/code&gt; delimited path of keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;GetString("datastore.metric.host") // (returns "127.0.0.1")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This obeys the precedence rules established above; the search for the path will cascade through the remaining configuration registries until found.&lt;/p&gt; 
&lt;p&gt;For example, given this configuration file, both &lt;code&gt;datastore.metric.host&lt;/code&gt; and &lt;code&gt;datastore.metric.port&lt;/code&gt; are already defined (and may be overridden). If in addition &lt;code&gt;datastore.metric.protocol&lt;/code&gt; was defined in the defaults, Viper would also find it.&lt;/p&gt; 
&lt;p&gt;However, if &lt;code&gt;datastore.metric&lt;/code&gt; was overridden (by a flag, an environment variable, the &lt;code&gt;Set()&lt;/code&gt; method, ‚Ä¶) with an immediate value, then all sub-keys of &lt;code&gt;datastore.metric&lt;/code&gt; become undefined, they are ‚Äúshadowed‚Äù by the higher-priority configuration level.&lt;/p&gt; 
&lt;p&gt;Viper can access array indices by using numbers in the path. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsonc"&gt;{
    "host": {
        "address": "localhost",
        "ports": [
            5799,
            6029
        ]
    },
    "datastore": {
        "metric": {
            "host": "127.0.0.1",
            "port": 3099
        },
        "warehouse": {
            "host": "198.0.0.1",
            "port": 2112
        }
    }
}

GetInt("host.ports.1") // returns 6029

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lastly, if there exists a key that matches the delimited key path, its value will be returned instead. E.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsonc"&gt;{
    "datastore.metric.host": "0.0.0.0",
    "host": {
        "address": "localhost",
        "port": 5799
    },
    "datastore": {
        "metric": {
            "host": "127.0.0.1",
            "port": 3099
        },
        "warehouse": {
            "host": "198.0.0.1",
            "port": 2112
        }
    }
}

GetString("datastore.metric.host") // returns "0.0.0.0"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Extracting a sub-tree&lt;/h3&gt; 
&lt;p&gt;When developing reusable modules, it's often useful to extract a subset of the configuration and pass it to a module. This way the module can be instantiated more than once, with different configurations.&lt;/p&gt; 
&lt;p&gt;For example, an application might use multiple different cache stores for different purposes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;cache:
  cache1:
    max-items: 100
    item-size: 64
  cache2:
    max-items: 200
    item-size: 80
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We could pass the cache name to a module (eg. &lt;code&gt;NewCache("cache1")&lt;/code&gt;), but it would require weird concatenation for accessing config keys and would be less separated from the global config.&lt;/p&gt; 
&lt;p&gt;So instead of doing that let's pass a Viper instance to the constructor that represents a subset of the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;cache1Config := viper.Sub("cache.cache1")
if cache1Config == nil { // Sub returns nil if the key cannot be found
	panic("cache configuration not found")
}

cache1 := NewCache(cache1Config)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Always check the return value of &lt;code&gt;Sub&lt;/code&gt;. It returns &lt;code&gt;nil&lt;/code&gt; if a key cannot be found.&lt;/p&gt; 
&lt;p&gt;Internally, the &lt;code&gt;NewCache&lt;/code&gt; function can address &lt;code&gt;max-items&lt;/code&gt; and &lt;code&gt;item-size&lt;/code&gt; keys directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func NewCache(v *Viper) *Cache {
	return &amp;amp;Cache{
		MaxItems: v.GetInt("max-items"),
		ItemSize: v.GetInt("item-size"),
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting code is easy to test, since it's decoupled from the main config structure, and easier to reuse (for the same reason).&lt;/p&gt; 
&lt;h3&gt;Unmarshaling&lt;/h3&gt; 
&lt;p&gt;You also have the option of Unmarshaling all or a specific value to a struct, map, etc.&lt;/p&gt; 
&lt;p&gt;There are two methods to do this:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Unmarshal(rawVal any) : error&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;UnmarshalKey(key string, rawVal any) : error&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type config struct {
	Port int
	Name string
	PathMap string `mapstructure:"path_map"`
}

var C config

err := viper.Unmarshal(&amp;amp;C)
if err != nil {
	t.Fatalf("unable to decode into struct, %v", err)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to unmarshal configuration where the keys themselves contain dot (the default key delimiter), you have to change the delimiter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;v := viper.NewWithOptions(viper.KeyDelimiter("::"))

v.SetDefault("chart::values", map[string]any{
	"ingress": map[string]any{
		"annotations": map[string]any{
			"traefik.frontend.rule.type":                 "PathPrefix",
			"traefik.ingress.kubernetes.io/ssl-redirect": "true",
		},
	},
})

type config struct {
	Chart struct{
		Values map[string]any
	}
}

var C config

v.Unmarshal(&amp;amp;C)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Viper also supports unmarshaling into embedded structs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;/*
Example config:

module:
    enabled: true
    token: 89h3f98hbwf987h3f98wenf89ehf
*/
type config struct {
	Module struct {
		Enabled bool

		moduleConfig `mapstructure:",squash"`
	}
}

// moduleConfig could be in a module specific package
type moduleConfig struct {
	Token string
}

var C config

err := viper.Unmarshal(&amp;amp;C)
if err != nil {
	t.Fatalf("unable to decode into struct, %v", err)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Viper uses &lt;a href="https://github.com/go-viper/mapstructure"&gt;github.com/go-viper/mapstructure&lt;/a&gt; under the hood for unmarshaling values which uses &lt;code&gt;mapstructure&lt;/code&gt; tags by default.&lt;/p&gt; 
&lt;h3&gt;Decoding custom formats&lt;/h3&gt; 
&lt;p&gt;A frequently requested feature for Viper is adding more value formats and decoders. For example, parsing character (dot, comma, semicolon, etc) separated strings into slices.&lt;/p&gt; 
&lt;p&gt;This is already available in Viper using mapstructure decode hooks.&lt;/p&gt; 
&lt;p&gt;Read more about the details in &lt;a href="https://sagikazarmark.hu/blog/decoding-custom-formats-with-viper/"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Marshalling to string&lt;/h3&gt; 
&lt;p&gt;You may need to marshal all the settings held in viper into a string rather than write them to a file. You can use your favorite format's marshaller with the config returned by &lt;code&gt;AllSettings()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	yaml "go.yaml.in/yaml/v3"
	// ...
)

func yamlStringSettings() string {
	c := viper.AllSettings()
	bs, err := yaml.Marshal(c)
	if err != nil {
		log.Fatalf("unable to marshal config to YAML: %v", err)
	}
	return string(bs)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Viper or Vipers?&lt;/h2&gt; 
&lt;p&gt;Viper comes with a global instance (singleton) out of the box.&lt;/p&gt; 
&lt;p&gt;Although it makes setting up configuration easy, using it is generally discouraged as it makes testing harder and can lead to unexpected behavior.&lt;/p&gt; 
&lt;p&gt;The best practice is to initialize a Viper instance and pass that around when necessary.&lt;/p&gt; 
&lt;p&gt;The global instance &lt;em&gt;MAY&lt;/em&gt; be deprecated in the future. See &lt;a href="https://github.com/spf13/viper/issues/1855"&gt;#1855&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;Working with multiple vipers&lt;/h3&gt; 
&lt;p&gt;You can also create many different vipers for use in your application. Each will have its own unique set of configurations and values. Each can read from a different config file, key value store, etc. All of the functions that viper package supports are mirrored as methods on a viper.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;x := viper.New()
y := viper.New()

x.SetDefault("ContentDir", "content")
y.SetDefault("ContentDir", "foobar")

//...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When working with multiple vipers, it is up to the user to keep track of the different vipers.&lt;/p&gt; 
&lt;h2&gt;Q &amp;amp; A&lt;/h2&gt; 
&lt;h3&gt;Why is it called ‚ÄúViper‚Äù?&lt;/h3&gt; 
&lt;p&gt;A: Viper is designed to be a &lt;a href="http://en.wikipedia.org/wiki/Viper_(G.I._Joe)"&gt;companion&lt;/a&gt; to &lt;a href="https://github.com/spf13/cobra"&gt;Cobra&lt;/a&gt;. While both can operate completely independently, together they make a powerful pair to handle much of your application foundation needs.&lt;/p&gt; 
&lt;h3&gt;Why is it called ‚ÄúCobra‚Äù?&lt;/h3&gt; 
&lt;p&gt;Is there a better name for a &lt;a href="http://en.wikipedia.org/wiki/Cobra_Commander"&gt;commander&lt;/a&gt;?&lt;/p&gt; 
&lt;h3&gt;Does Viper support case sensitive keys?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; No.&lt;/p&gt; 
&lt;p&gt;Viper merges configuration from various sources, many of which are either case insensitive or uses different casing than the rest of the sources (eg. env vars). In order to provide the best experience when using multiple sources, the decision has been made to make all keys case insensitive.&lt;/p&gt; 
&lt;p&gt;There has been several attempts to implement case sensitivity, but unfortunately it's not that trivial. We might take a stab at implementing it in &lt;a href="https://github.com/spf13/viper/issues/772"&gt;Viper v2&lt;/a&gt;, but despite the initial noise, it does not seem to be requested that much.&lt;/p&gt; 
&lt;p&gt;You can vote for case sensitivity by filling out this feedback form: &lt;a href="https://forms.gle/R6faU74qPRPAzchZ9"&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Is it safe to concurrently read and write to a viper?&lt;/h3&gt; 
&lt;p&gt;No, you will need to synchronize access to the viper yourself (for example by using the &lt;code&gt;sync&lt;/code&gt; package). Concurrent reads and writes can cause a panic.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/spf13/viper/master/TROUBLESHOOTING.md"&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;For an optimal developer experience, it is recommended to install &lt;a href="https://nixos.org/download.html"&gt;Nix&lt;/a&gt; and &lt;a href="https://direnv.net/docs/installation.html"&gt;direnv&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Alternatively, install &lt;a href="https://go.dev/dl/"&gt;Go&lt;/a&gt; on your computer then run &lt;code&gt;make deps&lt;/code&gt; to install the rest of the dependencies.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Run the test suite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run linters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make lint # pass -j option to run them in parallel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some linter violations can automatically be fixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;make fmt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The project is licensed under the &lt;a href="https://raw.githubusercontent.com/spf13/viper/master/LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudwego/eino-examples</title>
      <link>https://github.com/cloudwego/eino-examples</link>
      <description>&lt;p&gt;Examples and demonstrations for using the Eino framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eino Examples&lt;/h1&gt; 
&lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/cloudwego/eino-examples/main/README.zh_CN.md"&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This repository contains examples and demonstrations for using the Eino framework. It provides practical examples to help developers better understand and utilize Eino's features.&lt;/p&gt; 
&lt;h2&gt;Repository Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;components/&lt;/strong&gt;: Examples demonstrating the usage of various components from cloudwego/eino-ext&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Includes implementations and usage patterns for different component types&lt;/li&gt; 
   &lt;li&gt;Shows how to use and customize Eino's extension components&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;compose/&lt;/strong&gt;: Examples showcasing Eino's orchestration capabilities&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Demonstrates how to use Graph and Chain orchestration&lt;/li&gt; 
   &lt;li&gt;Provides patterns for combining different components&lt;/li&gt; 
   &lt;li&gt;Shows various orchestration scenarios and best practices&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;flow/&lt;/strong&gt;: Examples illustrating the usage of Eino's flow module&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Contains demonstrations of flow-based programming patterns&lt;/li&gt; 
   &lt;li&gt;Shows how to implement and manage data flows&lt;/li&gt; 
   &lt;li&gt;Includes examples of stream processing&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;quickstart/&lt;/strong&gt;: Quick start examples from the user documentation&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Basic examples to help new users get started&lt;/li&gt; 
   &lt;li&gt;Contains the same demos as shown in the official documentation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a potential security issue in this project, or think you may have discovered a security issue, we ask that you notify Bytedance Security via our &lt;a href="https://security.bytedance.com/src"&gt;security center&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/cloudwego/eino-examples/main/sec@bytedance.com"&gt;vulnerability reporting email&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/cloudwego/eino-examples/main/LICENSE.txt"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>