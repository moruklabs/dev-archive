<rss version="2.0">
  <channel>
    <title>GitHub Go Monthly Trending</title>
    <description>Monthly Trending of Go in GitHub</description>
    <pubDate>Sat, 16 Aug 2025 01:53:32 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>ollama/ollama</title>
      <link>https://github.com/ollama/ollama</link>
      <description>&lt;p&gt;Get up and running with OpenAI gpt-oss, DeepSeek-R1, Gemma 3 and other models.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt;
  &amp;nbsp; 
 &lt;a href="https://ollama.com"&gt; &lt;img alt="ollama" width="240" src="https://github.com/ollama/ollama/assets/3325447/0d0b44e2-8f4a-4e99-9b52-a5c1c741c8f7" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h1&gt;Ollama&lt;/h1&gt; 
&lt;p&gt;Get up and running with large language models.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://ollama.com/download/Ollama.dmg"&gt;Download&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://ollama.com/download/OllamaSetup.exe"&gt;Download&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl -fsSL https://ollama.com/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/ollama/ollama/raw/main/docs/linux.md"&gt;Manual install instructions&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;The official &lt;a href="https://hub.docker.com/r/ollama/ollama"&gt;Ollama Docker image&lt;/a&gt; &lt;code&gt;ollama/ollama&lt;/code&gt; is available on Docker Hub.&lt;/p&gt; 
&lt;h3&gt;Libraries&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama/ollama-python"&gt;ollama-python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama/ollama-js"&gt;ollama-js&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Community&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/ollama"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reddit.com/r/ollama"&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;p&gt;To run and chat with &lt;a href="https://ollama.com/library/gemma3"&gt;Gemma 3&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama run gemma3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Model library&lt;/h2&gt; 
&lt;p&gt;Ollama supports a list of models available on &lt;a href="https://ollama.com/library" title="ollama model library"&gt;ollama.com/library&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Here are some example models that can be downloaded:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Model&lt;/th&gt; 
   &lt;th&gt;Parameters&lt;/th&gt; 
   &lt;th&gt;Size&lt;/th&gt; 
   &lt;th&gt;Download&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;1B&lt;/td&gt; 
   &lt;td&gt;815MB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:1b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;4B&lt;/td&gt; 
   &lt;td&gt;3.3GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;12B&lt;/td&gt; 
   &lt;td&gt;8.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:12b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Gemma 3&lt;/td&gt; 
   &lt;td&gt;27B&lt;/td&gt; 
   &lt;td&gt;17GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run gemma3:27b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;QwQ&lt;/td&gt; 
   &lt;td&gt;32B&lt;/td&gt; 
   &lt;td&gt;20GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run qwq&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepSeek-R1&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.7GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run deepseek-r1&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DeepSeek-R1&lt;/td&gt; 
   &lt;td&gt;671B&lt;/td&gt; 
   &lt;td&gt;404GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run deepseek-r1:671b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 4&lt;/td&gt; 
   &lt;td&gt;109B&lt;/td&gt; 
   &lt;td&gt;67GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama4:scout&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 4&lt;/td&gt; 
   &lt;td&gt;400B&lt;/td&gt; 
   &lt;td&gt;245GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama4:maverick&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.3&lt;/td&gt; 
   &lt;td&gt;70B&lt;/td&gt; 
   &lt;td&gt;43GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2&lt;/td&gt; 
   &lt;td&gt;3B&lt;/td&gt; 
   &lt;td&gt;2.0GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2&lt;/td&gt; 
   &lt;td&gt;1B&lt;/td&gt; 
   &lt;td&gt;1.3GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2:1b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2 Vision&lt;/td&gt; 
   &lt;td&gt;11B&lt;/td&gt; 
   &lt;td&gt;7.9GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2-vision&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.2 Vision&lt;/td&gt; 
   &lt;td&gt;90B&lt;/td&gt; 
   &lt;td&gt;55GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.2-vision:90b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.1&lt;/td&gt; 
   &lt;td&gt;8B&lt;/td&gt; 
   &lt;td&gt;4.7GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.1&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 3.1&lt;/td&gt; 
   &lt;td&gt;405B&lt;/td&gt; 
   &lt;td&gt;231GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama3.1:405b&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Phi 4&lt;/td&gt; 
   &lt;td&gt;14B&lt;/td&gt; 
   &lt;td&gt;9.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run phi4&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Phi 4 Mini&lt;/td&gt; 
   &lt;td&gt;3.8B&lt;/td&gt; 
   &lt;td&gt;2.5GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run phi4-mini&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mistral&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run mistral&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Moondream 2&lt;/td&gt; 
   &lt;td&gt;1.4B&lt;/td&gt; 
   &lt;td&gt;829MB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run moondream&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Neural Chat&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run neural-chat&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Starling&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.1GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run starling-lm&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Code Llama&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;3.8GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run codellama&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Llama 2 Uncensored&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;3.8GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llama2-uncensored&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;LLaVA&lt;/td&gt; 
   &lt;td&gt;7B&lt;/td&gt; 
   &lt;td&gt;4.5GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run llava&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Granite-3.3&lt;/td&gt; 
   &lt;td&gt;8B&lt;/td&gt; 
   &lt;td&gt;4.9GB&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;ollama run granite3.3&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You should have at least 8 GB of RAM available to run the 7B models, 16 GB to run the 13B models, and 32 GB to run the 33B models.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Customize a model&lt;/h2&gt; 
&lt;h3&gt;Import from GGUF&lt;/h3&gt; 
&lt;p&gt;Ollama supports importing GGUF models in the Modelfile:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Create a file named &lt;code&gt;Modelfile&lt;/code&gt;, with a &lt;code&gt;FROM&lt;/code&gt; instruction with the local filepath to the model you want to import.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;FROM ./vicuna-33b.Q4_0.gguf
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create the model in Ollama&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;ollama create example -f Modelfile
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the model&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;ollama run example
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Import from Safetensors&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/ollama/ollama/main/docs/import.md"&gt;guide&lt;/a&gt; on importing models for more information.&lt;/p&gt; 
&lt;h3&gt;Customize a prompt&lt;/h3&gt; 
&lt;p&gt;Models from the Ollama library can be customized with a prompt. For example, to customize the &lt;code&gt;llama3.2&lt;/code&gt; model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama pull llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a &lt;code&gt;Modelfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;FROM llama3.2

# set the temperature to 1 [higher is more creative, lower is more coherent]
PARAMETER temperature 1

# set the system message
SYSTEM """
You are Mario from Super Mario Bros. Answer as Mario, the assistant, only.
"""
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, create and run the model:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ollama create mario -f ./Modelfile
ollama run mario
&amp;gt;&amp;gt;&amp;gt; hi
Hello! It's your friend Mario.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on working with a Modelfile, see the &lt;a href="https://raw.githubusercontent.com/ollama/ollama/main/docs/modelfile.md"&gt;Modelfile&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;h2&gt;CLI Reference&lt;/h2&gt; 
&lt;h3&gt;Create a model&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;ollama create&lt;/code&gt; is used to create a model from a Modelfile.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama create mymodel -f ./Modelfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pull a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama pull llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This command can also be used to update a local model. Only the diff will be pulled.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Remove a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama rm llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Copy a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama cp llama3.2 my-model
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multiline input&lt;/h3&gt; 
&lt;p&gt;For multiline input, you can wrap text with &lt;code&gt;"""&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; """Hello,
... world!
... """
I'm a basic program that prints the famous "Hello, world!" message to the console.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multimodal models&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;ollama run llava "What's in this image? /Users/jmorgan/Desktop/smile.png"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: The image features a yellow smiley face, which is likely the central focus of the picture.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Pass the prompt as an argument&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama run llama3.2 "Summarize this file: $(cat README.md)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;: Ollama is a lightweight, extensible framework for building and running language models on the local machine. It provides a simple API for creating, running, and managing models, as well as a library of pre-built models that can be easily used in a variety of applications.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Show model information&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama show llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;List models on your computer&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;List which models are currently loaded&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama ps
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Stop a model which is currently running&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;ollama stop llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Start Ollama&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;ollama serve&lt;/code&gt; is used when you want to start ollama without running the desktop application.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/ollama/ollama/raw/main/docs/development.md"&gt;developer guide&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Running local builds&lt;/h3&gt; 
&lt;p&gt;Next, start the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;./ollama serve
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, in a separate shell, run a model:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;./ollama run llama3.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;REST API&lt;/h2&gt; 
&lt;p&gt;Ollama has a REST API for running and managing models.&lt;/p&gt; 
&lt;h3&gt;Generate a response&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl http://localhost:11434/api/generate -d '{
  "model": "llama3.2",
  "prompt":"Why is the sky blue?"
}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chat with a model&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl http://localhost:11434/api/chat -d '{
  "model": "llama3.2",
  "messages": [
    { "role": "user", "content": "why is the sky blue?" }
  ]
}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/ollama/ollama/main/docs/api.md"&gt;API documentation&lt;/a&gt; for all endpoints.&lt;/p&gt; 
&lt;h2&gt;Community Integrations&lt;/h2&gt; 
&lt;h3&gt;Web &amp;amp; Desktop&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/open-webui/open-webui"&gt;Open WebUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aws-samples/swift-chat"&gt;SwiftChat (macOS with ReactNative)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AugustDev/enchanted"&gt;Enchanted (macOS native)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/fmaclen/hollama"&gt;Hollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ParisNeo/lollms-webui"&gt;Lollms-Webui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danny-avila/LibreChat"&gt;LibreChat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bionic-gpt/bionic-gpt"&gt;Bionic GPT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rtcfirefly/ollama-ui"&gt;HTML UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jikkuatwork/saddle"&gt;Saddle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tagspaces.org"&gt;TagSpaces&lt;/a&gt; (A platform for file-based apps, &lt;a href="https://docs.tagspaces.org/ai/"&gt;utilizing Ollama&lt;/a&gt; for the generation of tags and descriptions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivanfioravanti/chatbot-ollama"&gt;Chatbot UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mckaywrigley/chatbot-ui"&gt;Chatbot UI v2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama-interface/Ollama-Gui?tab=readme-ov-file"&gt;Typescript UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/richawo/minimal-llm-ui"&gt;Minimalistic React UI for Ollama Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kevinhermawan/Ollamac"&gt;Ollamac&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/enricoros/big-AGI"&gt;big-AGI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cheshire-cat-ai/core"&gt;Cheshire Cat assistant framework&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/semperai/amica"&gt;Amica&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BruceMacD/chatd"&gt;chatd&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kghandour/Ollama-SwiftUI"&gt;Ollama-SwiftUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/langgenius/dify"&gt;Dify.AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mindmac.app"&gt;MindMac&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakobhoeg/nextjs-ollama-llm-ui"&gt;NextJS Web Interface for Ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://msty.app"&gt;Msty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Bin-Huang/Chatbox"&gt;Chatbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tgraupmann/WinForm_Ollama_Copilot"&gt;WinForm Ollama Copilot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web"&gt;NextChat&lt;/a&gt; with &lt;a href="https://docs.nextchat.dev/models/ollama"&gt;Get Started Doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mmo80/alpaca-webui"&gt;Alpaca WebUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/enoch1118/ollamaGUI"&gt;OllamaGUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/InternLM/OpenAOE"&gt;OpenAOE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/leonid20000/OdinRunes"&gt;Odin Runes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mrdjohnson/llm-x"&gt;LLM-X&lt;/a&gt; (Progressive Web App)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mintplex-Labs/anything-llm"&gt;AnythingLLM (Docker + MacOs/Windows/Linux native app)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama_basic_chat"&gt;Ollama Basic Chat: Uses HyperDiv Reactive UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/drazdra/ollama-chats"&gt;Ollama-chats RPG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://intellibar.app/"&gt;IntelliBar&lt;/a&gt; (AI-powered assistant for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AliAhmedNada/jirapt"&gt;Jirapt&lt;/a&gt; (Jira Integration to generate issues, tasks, epics)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AliAhmedNada/ojira"&gt;ojira&lt;/a&gt; (Jira chrome plugin to easily generate descriptions for tasks)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reid41/QA-Pilot"&gt;QA-Pilot&lt;/a&gt; (Interactive chat tool that can leverage Ollama models for rapid understanding and navigation of GitHub code repositories)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sugarforever/chat-ollama"&gt;ChatOllama&lt;/a&gt; (Open Source Chatbot based on Ollama with Knowledge Bases)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Nagi-ovo/CRAG-Ollama-Chat"&gt;CRAG Ollama Chat&lt;/a&gt; (Simple Web Search with Corrective RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/infiniflow/ragflow"&gt;RAGFlow&lt;/a&gt; (Open-source Retrieval-Augmented Generation engine based on deep document understanding)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/StreamDeploy-DevRel/streamdeploy-llm-app-scaffold"&gt;StreamDeploy&lt;/a&gt; (LLM Application Scaffold)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/swuecho/chat"&gt;chat&lt;/a&gt; (chat web app for teams)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lobehub/lobe-chat"&gt;Lobe Chat&lt;/a&gt; with &lt;a href="https://lobehub.com/docs/self-hosting/examples/ollama"&gt;Integrating Doc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/datvodinh/rag-chatbot.git"&gt;Ollama RAG Chatbot&lt;/a&gt; (Local Chat with multiple PDFs using Ollama and RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.nurgo-software.com/products/brainsoup"&gt;BrainSoup&lt;/a&gt; (Flexible native client with RAG &amp;amp; multi-agent automation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Renset/macai"&gt;macai&lt;/a&gt; (macOS client for Ollama, ChatGPT, and other compatible API back-ends)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/josStorer/RWKV-Runner"&gt;RWKV-Runner&lt;/a&gt; (RWKV offline LLM deployment tool, also usable as a client for ChatGPT and Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dezoito/ollama-grid-search"&gt;Ollama Grid Search&lt;/a&gt; (app to evaluate and compare models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Otacon/olpaka"&gt;Olpaka&lt;/a&gt; (User-friendly Flutter Web App for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://casibase.org"&gt;Casibase&lt;/a&gt; (An open source AI knowledge base and dialogue system combining the latest RAG, SSO, ollama support, and multiple large language models.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CrazyNeil/OllamaSpring"&gt;OllamaSpring&lt;/a&gt; (Ollama Client for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kartikm7/llocal"&gt;LLocal.in&lt;/a&gt; (Easy to use Electron Desktop Client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dcSpark/shinkai-apps"&gt;Shinkai Desktop&lt;/a&gt; (Two click install Local AI using Ollama + Files + RAG)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zeyoyt/ailama"&gt;AiLama&lt;/a&gt; (A Discord User App that allows you to interact with Ollama anywhere in Discord)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama_mesop/"&gt;Ollama with Google Mesop&lt;/a&gt; (Mesop Chat Client implementation with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SciPhi-AI/R2R"&gt;R2R&lt;/a&gt; (Open-source RAG engine)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/elearningshow/ollama-kis"&gt;Ollama-Kis&lt;/a&gt; (A simple easy-to-use GUI with sample custom LLM for Drivers Education)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://opengpa.org"&gt;OpenGPA&lt;/a&gt; (Open-source offline-first Enterprise Agentic Application)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mateuszmigas/painting-droid"&gt;Painting Droid&lt;/a&gt; (Painting app with AI integrations)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.kerlig.com/"&gt;Kerlig AI&lt;/a&gt; (AI writing assistant for macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MindWorkAI/AI-Studio"&gt;AI Studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gyopak/sidellama"&gt;Sidellama&lt;/a&gt; (browser-based LLM client)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trypromptly/LLMStack"&gt;LLMStack&lt;/a&gt; (No-code multi-agent framework to build LLM agents and workflows)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://boltai.com"&gt;BoltAI for Mac&lt;/a&gt; (AI Chat Client for Mac)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/av/harbor"&gt;Harbor&lt;/a&gt; (Containerized LLM Toolkit with Ollama as default backend)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/szczyglis-dev/py-gpt"&gt;PyGPT&lt;/a&gt; (AI desktop assistant for Linux, Windows, and Mac)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Jeffser/Alpaca"&gt;Alpaca&lt;/a&gt; (An Ollama client application for Linux and macOS made with GTK4 and Adwaita)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Significant-Gravitas/AutoGPT/raw/master/docs/content/platform/ollama.md"&gt;AutoGPT&lt;/a&gt; (AutoGPT Ollama integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.jonathanhecl.com/go-crew/"&gt;Go-CREW&lt;/a&gt; (Powerful Offline RAG in Golang)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openvmp/partcad/"&gt;PartCAD&lt;/a&gt; (CAD model generation with OpenSCAD and CadQuery)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama4j/ollama4j-web-ui"&gt;Ollama4j Web UI&lt;/a&gt; - Java-based Web UI for Ollama built with Vaadin, Spring Boot, and Ollama4j&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kspviswa/pyOllaMx"&gt;PyOllaMx&lt;/a&gt; - macOS application capable of chatting with both Ollama and Apple MLX models.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cline/cline"&gt;Cline&lt;/a&gt; - Formerly known as Claude Dev is a VSCode extension for multi-file/whole-repo coding&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kangfenmao/cherry-studio"&gt;Cherry Studio&lt;/a&gt; (Desktop client with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1runeberg/confichat"&gt;ConfiChat&lt;/a&gt; (Lightweight, standalone, multi-platform, and privacy-focused LLM chat interface with optional encryption)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nickthecook/archyve"&gt;Archyve&lt;/a&gt; (RAG-enabling document library)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama-crew-mesop"&gt;crewAI with Mesop&lt;/a&gt; (Mesop Web Interface to run crewAI with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chyok/ollama-gui"&gt;Tkinter-based client&lt;/a&gt; (Python tkinter-based Client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/trendy-design/llmchat"&gt;LLMChat&lt;/a&gt; (Privacy focused, 100% local, intuitive all-in-one chat interface)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Leon-Sander/Local-Multimodal-AI-Chat"&gt;Local Multimodal AI Chat&lt;/a&gt; (Ollama-based LLM Chat with support for multiple features, including PDF RAG, voice chat, image-based interactions, and integration with OpenAI.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xark-argo/argo"&gt;ARGO&lt;/a&gt; (Locally download and run Ollama and Huggingface models with RAG and deep research on Mac/Windows/Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EliasPereirah/OrionChat"&gt;OrionChat&lt;/a&gt; - OrionChat is a web interface for chatting with different AI providers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bklieger-groq/g1"&gt;G1&lt;/a&gt; (Prototype of using prompting strategies to improve the LLM's reasoning through o1-like reasoning chains.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lemonit-eric-mao/ollama-web-management"&gt;Web management&lt;/a&gt; (Web management page)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/promptery/promptery"&gt;Promptery&lt;/a&gt; (desktop client for Ollama.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JHubi1/ollama-app"&gt;Ollama App&lt;/a&gt; (Modern and easy-to-use multi-platform client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/annilq/chat-ollama"&gt;chat-ollama&lt;/a&gt; (a React Native client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tcsenpai/spacellama"&gt;SpaceLlama&lt;/a&gt; (Firefox and Chrome extension to quickly summarize web pages with ollama in a sidebar)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tcsenpai/youlama"&gt;YouLama&lt;/a&gt; (Webapp to quickly summarize any YouTube video, supporting Invidious as well)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tcsenpai/dualmind"&gt;DualMind&lt;/a&gt; (Experimental app allowing two models to talk to each other in the terminal or in a web interface)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/h1ddenpr0cess20/ollamarama-matrix"&gt;ollamarama-matrix&lt;/a&gt; (Ollama chatbot for the Matrix chat protocol)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anan1213095357/ollama-chat-app"&gt;ollama-chat-app&lt;/a&gt; (Flutter-based chat app)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.perfectmemory.ai/"&gt;Perfect Memory AI&lt;/a&gt; (Productivity AI assists personalized by what you have seen on your screen, heard, and said in the meetings)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hexastack/hexabot"&gt;Hexabot&lt;/a&gt; (A conversational AI builder)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/reddit_analyzer"&gt;Reddit Rate&lt;/a&gt; (Search and Rate Reddit topics with a weighted summation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adarshM84/OpenTalkGpt"&gt;OpenTalkGpt&lt;/a&gt; (Chrome Extension to manage open-source models supported by Ollama, create custom models, and chat with models from a user-friendly UI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vinhnx/vt.ai"&gt;VT&lt;/a&gt; (A minimal multimodal AI chat app, with dynamic conversation routing. Supports local models via Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nosia-ai/nosia"&gt;Nosia&lt;/a&gt; (Easy to install and use RAG platform based on Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nbonamy/witsy"&gt;Witsy&lt;/a&gt; (An AI Desktop application available for Mac/Windows/Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/US-Artificial-Intelligence/abbey"&gt;Abbey&lt;/a&gt; (A configurable AI interface server with notebooks, document storage, and YouTube support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmayboroda/minima"&gt;Minima&lt;/a&gt; (RAG with on-premises or fully local workflow)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AidfulAI/aidful-ollama-model-delete"&gt;aidful-ollama-model-delete&lt;/a&gt; (User interface for simplified model cleanup)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ItzCrazyKns/Perplexica"&gt;Perplexica&lt;/a&gt; (An AI-powered search engine &amp;amp; an open-source alternative to Perplexity AI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oslook/ollama-webui"&gt;Ollama Chat WebUI for Docker &lt;/a&gt; (Support for local docker deployment, lightweight ollama webui)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aka.ms/ai-tooklit/ollama-docs"&gt;AI Toolkit for Visual Studio Code&lt;/a&gt; (Microsoft-official VSCode extension to chat, test, evaluate models with Ollama support, and use them in your AI applications.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anilkay/MinimalNextOllamaChat"&gt;MinimalNextOllamaChat&lt;/a&gt; (Minimal Web UI for Chat and Model Control)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TilmanGriesel/chipper"&gt;Chipper&lt;/a&gt; AI interface for tinkerers (Ollama, Haystack RAG, Python)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/CosmicEventHorizon/ChibiChat"&gt;ChibiChat&lt;/a&gt; (Kotlin-based Android app to chat with Ollama and Koboldcpp API endpoints)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/qusaismael/localllm"&gt;LocalLLM&lt;/a&gt; (Minimal Web-App to run ollama models on it with a GUI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/buiducnhat/ollamazing"&gt;Ollamazing&lt;/a&gt; (Web extension to run Ollama models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/benhaotang/OpenDeepResearcher-via-searxng"&gt;OpenDeepResearcher-via-searxng&lt;/a&gt; (A Deep Research equivalent endpoint with Ollama support for running locally)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AIDotNet/AntSK"&gt;AntSK&lt;/a&gt; (Out-of-the-box &amp;amp; Adaptable RAG Chatbot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1Panel-dev/MaxKB/"&gt;MaxKB&lt;/a&gt; (Ready-to-use &amp;amp; flexible RAG Chatbot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danielekp/yla"&gt;yla&lt;/a&gt; (Web interface to freely interact with your customized models)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RockChinQ/LangBot"&gt;LangBot&lt;/a&gt; (LLM-based instant messaging bots platform, with Agents, RAG features, supports multiple platforms)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1Panel-dev/1Panel/"&gt;1Panel&lt;/a&gt; (Web-based Linux Server Management Tool)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Soulter/AstrBot/"&gt;AstrBot&lt;/a&gt; (User-friendly LLM-based multi-platform chatbot with a WebUI, supporting RAG, LLM agents, and plugins integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ibrahimcetin/reins"&gt;Reins&lt;/a&gt; (Easily tweak parameters, customize system prompts per chat, and enhance your AI experiments with reasoning model support.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aharon-Bensadoun/Flufy"&gt;Flufy&lt;/a&gt; (A beautiful chat interface for interacting with Ollama's API. Built with React, TypeScript, and Material-UI.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zeozeozeo/ellama"&gt;Ellama&lt;/a&gt; (Friendly native app to chat with an Ollama instance)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mediar-ai/screenpipe"&gt;screenpipe&lt;/a&gt; Build agents powered by your screen history&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hengkysteen/ollamb"&gt;Ollamb&lt;/a&gt; (Simple yet rich in features, cross-platform built with Flutter and designed for Ollama. Try the &lt;a href="https://hengkysteen.github.io/demo/ollamb/"&gt;web demo&lt;/a&gt;.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Writeopia/Writeopia"&gt;Writeopia&lt;/a&gt; (Text editor with integration with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AppFlowy-IO/AppFlowy"&gt;AppFlowy&lt;/a&gt; (AI collaborative workspace with Ollama, cross-platform and self-hostable)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cushydigit/lumina.git"&gt;Lumina&lt;/a&gt; (A lightweight, minimal React.js frontend for interacting with Ollama servers)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/tiny-notepad"&gt;Tiny Notepad&lt;/a&gt; (A lightweight, notepad-like interface to chat with ollama available on PyPI)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hellotunamayo/macLlama"&gt;macLlama (macOS native)&lt;/a&gt; (A native macOS GUI application for interacting with Ollama models, featuring a chat interface.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/philberndt/GPTranslate"&gt;GPTranslate&lt;/a&gt; (A fast and lightweight, AI powered desktop translation application written with Rust and Tauri. Features real-time translation with OpenAI/Azure/Ollama.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NGC13009/ollama-launcher"&gt;ollama launcher&lt;/a&gt; (A launcher for Ollama, aiming to provide users with convenient functions such as ollama server launching, management, or configuration.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aj-Seven/ai-hub"&gt;ai-hub&lt;/a&gt; (AI Hub supports multiple models via API keys and Chat support via Ollama API.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/mayan-edms/mayan-edms"&gt;Mayan EDMS&lt;/a&gt; (Open source document management system to organize, tag, search, and automate your files with powerful Ollama driven workflows.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Cloud&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/run/docs/tutorials/gpu-gemma2-with-ollama"&gt;Google Cloud&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://fly.io/docs/python/do-more/add-ollama/"&gt;Fly.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.koyeb.com/deploy/ollama"&gt;Koyeb&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Terminal&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ggozad/oterm"&gt;oterm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/s-kostyaev/ellama"&gt;Ellama Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zweifisch/ollama"&gt;Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paradoxical-dev/neollama"&gt;neollama&lt;/a&gt; UI client for interacting with models from within Neovim&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/David-Kunz/gen.nvim"&gt;gen.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nomnivore/ollama.nvim"&gt;ollama.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marco-souza/ollero.nvim"&gt;ollero.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gerazov/ollama-chat.nvim"&gt;ollama-chat.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/huynle/ogpt.nvim"&gt;ogpt.nvim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/karthink/gptel"&gt;gptel Emacs client&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dustinblackman/oatmeal"&gt;Oatmeal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pgibler/cmdh"&gt;cmdh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/npahlfer/ooo"&gt;ooo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/reid41/shell-pilot"&gt;shell-pilot&lt;/a&gt;(Interact with models via pure shell scripts on Linux or macOS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pythops/tenere"&gt;tenere&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/taketwo/llm-ollama"&gt;llm-ollama&lt;/a&gt; for &lt;a href="https://llm.datasette.io/en/stable/"&gt;Datasette's LLM CLI&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/anaisbetts/typechat-cli"&gt;typechat-cli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djcopley/ShellOracle"&gt;ShellOracle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yusufcanb/tlm"&gt;tlm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ericcurtin/podman-ollama"&gt;podman-ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sammcj/gollama"&gt;gollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paulrobello/parllama"&gt;ParLlama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cognitivetech/ollama-ebook-summary/"&gt;Ollama eBook Summary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama_moe"&gt;Ollama Mixture of Experts (MOE) in 50 lines of code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pepo-ec/vim-intelligence-bridge"&gt;vim-intelligence-bridge&lt;/a&gt; Simple interaction of "Ollama" with the Vim editor&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x-cmd.com/mod/ollama"&gt;x-cmd ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/drunkwcodes/bb7"&gt;bb7&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcusziade/Swollama"&gt;SwollamaCLI&lt;/a&gt; bundled with the Swollama Swift package. &lt;a href="https://github.com/marcusziade/Swollama?tab=readme-ov-file#cli-usage"&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigoden/aichat"&gt;aichat&lt;/a&gt; All-in-one LLM CLI tool featuring Shell Assistant, Chat-REPL, RAG, AI tools &amp;amp; agents, with access to OpenAI, Claude, Gemini, Ollama, Groq, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rrg92/powershai"&gt;PowershAI&lt;/a&gt; PowerShell module that brings AI to terminal on Windows, including support for Ollama&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Abyss-c0re/deepshell"&gt;DeepShell&lt;/a&gt; Your self-hosted AI assistant. Interactive Shell, Files and Folders analysis.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xyproto/orbiton"&gt;orbiton&lt;/a&gt; Configuration-free text editor and IDE with support for tab completion with Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/molbal/orca-cli"&gt;orca-cli&lt;/a&gt; Ollama Registry CLI Application - Browse, pull, and download models from Ollama Registry in your terminal.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jonathanhecl/gguf-to-ollama"&gt;GGUF-to-Ollama&lt;/a&gt; - Importing GGUF to Ollama made easy (multiplatform)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapidarchitect/ollama_strands"&gt;AWS-Strands-With-Ollama&lt;/a&gt; - AWS Strands Agents with Ollama Examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/attogram/ollama-multirun"&gt;ollama-multirun&lt;/a&gt; - A bash shell script to run a single prompt against any or all of your locally installed ollama models, saving the output and performance statistics as easily navigable web pages. (&lt;a href="https://attogram.github.io/ai_test_zone/"&gt;Demo&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/attogram/ollama-bash-toolshed"&gt;ollama-bash-toolshed&lt;/a&gt; - Bash scripts to chat with tool using models. Add new tools to your shed with ease. Runs on Ollama.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Apple Vision Pro&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aws-samples/swift-chat"&gt;SwiftChat&lt;/a&gt; (Cross-platform AI chat app supporting Apple Vision Pro via "Designed for iPad")&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AugustDev/enchanted"&gt;Enchanted&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/timescale/pgai"&gt;pgai&lt;/a&gt; - PostgreSQL as a vector database (Create and search embeddings from Ollama models using pgvector) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/timescale/pgai/raw/main/docs/vectorizer-quick-start.md"&gt;Get started guide&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mindsdb/mindsdb/raw/staging/mindsdb/integrations/handlers/ollama_handler/README.md"&gt;MindsDB&lt;/a&gt; (Connects Ollama models with nearly 200 data platforms and apps)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/philippgille/chromem-go/raw/v0.5.0/embed_ollama.go"&gt;chromem-go&lt;/a&gt; with &lt;a href="https://github.com/philippgille/chromem-go/tree/v0.5.0/examples/rag-wikipedia-ollama"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dbkangaroo/kangaroo"&gt;Kangaroo&lt;/a&gt; (AI-powered SQL client and admin tool for popular databases)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Package managers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/ollama/"&gt;Pacman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gentoo/guru/tree/master/app-misc/ollama"&gt;Gentoo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://formulae.brew.sh/formula/ollama"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://artifacthub.io/packages/helm/ollama-helm/ollama"&gt;Helm Chart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://codeberg.org/tusharhero/ollama-guix"&gt;Guix channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://search.nixos.org/packages?show=ollama&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=ollama"&gt;Nix package&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://flox.dev/blog/ollama-part-one"&gt;Flox&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Libraries&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://python.langchain.com/docs/integrations/chat/ollama/"&gt;LangChain&lt;/a&gt; and &lt;a href="https://js.langchain.com/docs/integrations/chat/ollama/"&gt;LangChain.js&lt;/a&gt; with &lt;a href="https://js.langchain.com/docs/tutorials/local_rag/"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://firebase.google.com/docs/genkit/plugins/ollama"&gt;Firebase Genkit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/crewAIInc/crewAI"&gt;crewAI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://remembersoftwares.github.io/yacana/"&gt;Yacana&lt;/a&gt; (User-friendly multi-agent framework for brainstorming and executing predetermined flows with built-in tool integration)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-ai"&gt;Spring AI&lt;/a&gt; with &lt;a href="https://docs.spring.io/spring-ai/reference/api/chat/ollama-chat.html"&gt;reference&lt;/a&gt; and &lt;a href="https://github.com/tzolov/ollama-tools"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tmc/langchaingo/"&gt;LangChainGo&lt;/a&gt; with &lt;a href="https://github.com/tmc/langchaingo/tree/main/examples/ollama-completion-example"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/langchain4j/langchain4j"&gt;LangChain4j&lt;/a&gt; with &lt;a href="https://github.com/langchain4j/langchain4j-examples/tree/main/ollama-examples/src/main/java"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Abraxas-365/langchain-rust"&gt;LangChainRust&lt;/a&gt; with &lt;a href="https://github.com/Abraxas-365/langchain-rust/raw/main/examples/llm_ollama.rs"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tryAGI/LangChain"&gt;LangChain for .NET&lt;/a&gt; with &lt;a href="https://github.com/tryAGI/LangChain/raw/main/examples/LangChain.Samples.OpenAI/Program.cs"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/theodo-group/LLPhant?tab=readme-ov-file#ollama"&gt;LLPhant&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.llamaindex.ai/en/stable/examples/llm/ollama/"&gt;LlamaIndex&lt;/a&gt; and &lt;a href="https://ts.llamaindex.ai/modules/llms/available_llms/ollama"&gt;LlamaIndexTS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BerriAI/litellm"&gt;LiteLLM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/presbrey/ollamafarm"&gt;OllamaFarm for Go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/awaescher/OllamaSharp"&gt;OllamaSharp for .NET&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gbaptista/ollama-ai"&gt;Ollama for Ruby&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pepperoni21/ollama-rs"&gt;Ollama-rs for Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jmont-dev/ollama-hpp"&gt;Ollama-hpp for C++&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ollama4j/ollama4j"&gt;Ollama4j for Java&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://modelfusion.dev/integration/model-provider/ollama"&gt;ModelFusion Typescript Library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kevinhermawan/OllamaKit"&gt;OllamaKit for Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/breitburg/dart-ollama"&gt;Ollama for Dart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/cloudstudio/ollama-laravel"&gt;Ollama for Laravel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/davidmigloz/langchain_dart"&gt;LangChainDart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/semantic-kernel/tree/main/python/semantic_kernel/connectors/ai/ollama"&gt;Semantic Kernel - Python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/deepset-ai/haystack-integrations/raw/main/integrations/ollama.md"&gt;Haystack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/brainlid/langchain"&gt;Elixir LangChain&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JBGruber/rollama"&gt;Ollama for R - rollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hauselin/ollama-r"&gt;Ollama for R - ollama-r&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lebrunel/ollama-ex"&gt;Ollama-ex for Elixir&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/b-tocs/abap_btocs_ollama"&gt;Ollama Connector for SAP ABAP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://testcontainers.com/modules/ollama/"&gt;Testcontainers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://portkey.ai/docs/welcome/integration-guides/ollama"&gt;Portkey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/svilupp/PromptingTools.jl"&gt;PromptingTools.jl&lt;/a&gt; with an &lt;a href="https://svilupp.github.io/PromptingTools.jl/dev/examples/working_with_ollama"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Project-Llama/llamascript"&gt;LlamaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emirsahin1/llm-axe"&gt;llm-axe&lt;/a&gt; (Python Toolkit for Building LLM Powered Apps)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.gollm.co/examples/ollama-example"&gt;Gollm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jonathanhecl/gollama"&gt;Gollama for Golang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xyproto/ollamaclient"&gt;Ollamaclient for Golang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gitlab.com/tozd/go/fun"&gt;High-level function abstraction in Go&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ArdaGnsrn/ollama-php"&gt;Ollama PHP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/agents-flex/agents-flex"&gt;Agents-Flex for Java&lt;/a&gt; with &lt;a href="https://github.com/agents-flex/agents-flex/tree/main/agents-flex-llm/agents-flex-llm-ollama/src/test/java/com/agentsflex/llm/ollama"&gt;example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/parakeet-nest/parakeet"&gt;Parakeet&lt;/a&gt; is a GoLang library, made to simplify the development of small generative AI applications with Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andygill/haverscript"&gt;Haverscript&lt;/a&gt; with &lt;a href="https://github.com/andygill/haverscript/tree/main/examples"&gt;examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mattt/ollama-swift"&gt;Ollama for Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcusziade/Swollama"&gt;Swollama for Swift&lt;/a&gt; with &lt;a href="https://marcusziade.github.io/Swollama/documentation/swollama/"&gt;DocC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/prasad89/golamify"&gt;GoLamify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tusharad/ollama-haskell"&gt;Ollama for Haskell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nbonamy/multi-llm-ts"&gt;multi-llm-ts&lt;/a&gt; (A Typescript/JavaScript library allowing access to different LLM in a unified API)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lofcz/llmtornado"&gt;LlmTornado&lt;/a&gt; (C# library providing a unified interface for major FOSS &amp;amp; Commercial inference APIs)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dravenk/ollama-zig"&gt;Ollama for Zig&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lunary-ai/abso"&gt;Abso&lt;/a&gt; (OpenAI-compatible TypeScript SDK for any LLM provider)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/goodreasonai/nichey"&gt;Nichey&lt;/a&gt; is a Python package for generating custom wikis for your research topic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kassane/ollama-d"&gt;Ollama for D&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HardCodeDev777/OllamaPlusPlus"&gt;OllamaPlusPlus&lt;/a&gt; (Very simple C++ library for Ollama)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mobile&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aws-samples/swift-chat"&gt;SwiftChat&lt;/a&gt; (Lightning-fast Cross-platform AI chat app with native UI for Android, iOS, and iPad)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AugustDev/enchanted"&gt;Enchanted&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Mobile-Artificial-Intelligence/maid"&gt;Maid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/JHubi1/ollama-app"&gt;Ollama App&lt;/a&gt; (Modern and easy-to-use multi-platform client for Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/1runeberg/confichat"&gt;ConfiChat&lt;/a&gt; (Lightweight, standalone, multi-platform, and privacy-focused LLM chat interface with optional encryption)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sunshine0523/OllamaServer"&gt;Ollama Android Chat&lt;/a&gt; (No need for Termux, start the Ollama service with one click on an Android device)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ibrahimcetin/reins"&gt;Reins&lt;/a&gt; (Easily tweak parameters, customize system prompts per chat, and enhance your AI experiments with reasoning model support.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Extensions &amp;amp; Plugins&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MassimilianoPasquini97/raycast_ollama"&gt;Raycast extension&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mxyng/discollama"&gt;Discollama&lt;/a&gt; (Discord bot inside the Ollama discord channel)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/continuedev/continue"&gt;Continue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/thewh1teagle/vibe"&gt;Vibe&lt;/a&gt; (Transcribe and analyze meetings with Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hinterdupfinger/obsidian-ollama"&gt;Obsidian Ollama plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/omagdy7/ollama-logseq"&gt;Logseq Ollama plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andersrex/notesollama"&gt;NotesOllama&lt;/a&gt; (Apple Notes Ollama plugin)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samalba/dagger-chatbot"&gt;Dagger Chatbot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mekb-turtle/discord-ai-bot"&gt;Discord AI Bot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ruecat/ollama-telegram"&gt;Ollama Telegram Bot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ej52/hass-ollama-conversation"&gt;Hass Ollama Conversation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abrenneke/rivet-plugin-ollama"&gt;Rivet plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/longy2k/obsidian-bmo-chatbot"&gt;Obsidian BMO Chatbot plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/herval/cliobot"&gt;Cliobot&lt;/a&gt; (Telegram bot with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/logancyang/obsidian-copilot"&gt;Copilot for Obsidian plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pfrankov/obsidian-local-gpt"&gt;Obsidian Local GPT plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.openinterpreter.com/language-model-setup/local-models/ollama"&gt;Open Interpreter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ex3ndr/llama-coder"&gt;Llama Coder&lt;/a&gt; (Copilot alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bernardo-bruning/ollama-copilot"&gt;Ollama Copilot&lt;/a&gt; (Proxy that allows you to use Ollama as a copilot like GitHub Copilot)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rjmacarthy/twinny"&gt;twinny&lt;/a&gt; (Copilot and Copilot chat alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/RussellCanfield/wingman-ai"&gt;Wingman-AI&lt;/a&gt; (Copilot code and chat alternative using Ollama and Hugging Face)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n4ze3m/page-assist"&gt;Page Assist&lt;/a&gt; (Chrome Extension)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/imoize/plasmoid-ollamacontrol"&gt;Plasmoid Ollama Control&lt;/a&gt; (KDE Plasma extension that allows you to quickly manage/control Ollama model)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tusharhero/aitelegrambot"&gt;AI Telegram Bot&lt;/a&gt; (Telegram bot using Ollama in backend)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yaroslavyaroslav/OpenAI-sublime-text"&gt;AI ST Completion&lt;/a&gt; (Sublime Text 4 AI assistant plugin with Ollama support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kevinthedang/discord-ollama"&gt;Discord-Ollama Chat Bot&lt;/a&gt; (Generalized TypeScript Discord Bot w/ Tuning Documentation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/josStorer/chatGPTBox"&gt;ChatGPTBox: All in one browser extension&lt;/a&gt; with &lt;a href="https://github.com/josStorer/chatGPTBox/issues/616#issuecomment-1975186467"&gt;Integrating Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rapmd73/Companion"&gt;Discord AI chat/moderation bot&lt;/a&gt; Chat/moderation bot written in python. Uses Ollama to create personalities.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nischalj10/headless-ollama"&gt;Headless Ollama&lt;/a&gt; (Scripts to automatically install ollama client &amp;amp; models on any OS for apps that depend on ollama server)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xuyangbocn/terraform-aws-self-host-llm"&gt;Terraform AWS Ollama &amp;amp; Open WebUI&lt;/a&gt; (A Terraform module to deploy on AWS a ready-to-use Ollama service, together with its front-end Open WebUI service.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakubburkiewicz/node-red-contrib-ollama"&gt;node-red-contrib-ollama&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ivostoykov/localAI"&gt;Local AI Helper&lt;/a&gt; (Chrome and Firefox extensions that enable interactions with the active tab and customisable API endpoints. Includes secure storage for user prompts.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jake83741/vnc-lm"&gt;vnc-lm&lt;/a&gt; (Discord bot for messaging with LLMs through Ollama and LiteLLM. Seamlessly move between local and flagship models.)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SilasMarvin/lsp-ai"&gt;LSP-AI&lt;/a&gt; (Open-source language server for AI-powered functionality)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Palm1r/QodeAssist"&gt;QodeAssist&lt;/a&gt; (AI-powered coding assistant plugin for Qt Creator)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ECuiDev/obsidian-quiz-generator"&gt;Obsidian Quiz Generator plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/philffm/ai-summary-helper"&gt;AI Summmary Helper plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/suncloudsmoon/TextCraft"&gt;TextCraft&lt;/a&gt; (Copilot in Word alternative using Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zeitlings/alfred-ollama"&gt;Alfred Ollama&lt;/a&gt; (Alfred Workflow)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/adarshM84/TextLLaMA"&gt;TextLLaMA&lt;/a&gt; A Chrome Extension that helps you write emails, correct grammar, and translate into any language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zyphixor/simple-discord-ai"&gt;Simple-Discord-AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/innightwolfsleep/llm_telegram_bot"&gt;LLM Telegram Bot&lt;/a&gt; (telegram bot, primary for RP. Oobabooga-like buttons, &lt;a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui"&gt;A1111&lt;/a&gt; API integration e.t.c)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sammcj/mcp-llm"&gt;mcp-llm&lt;/a&gt; (MCP Server to allow LLMs to call other LLMs)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HardCodeDev777/SimpleOllamaUnity"&gt;SimpleOllamaUnity&lt;/a&gt; (Unity Engine extension for communicating with Ollama in a few lines of code. Also works at runtime)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/HardCodeDev777/UnityCodeLama"&gt;UnityCodeLama&lt;/a&gt; (Unity Edtior tool to analyze scripts via Ollama)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NativeMindBrowser/NativeMindExtension"&gt;NativeMind&lt;/a&gt; (Private, on-device AI Assistant, no cloud dependencies)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gmai.premex.se/"&gt;GMAI - Gradle Managed AI&lt;/a&gt; (Gradle plugin for automated Ollama lifecycle management during build phases)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported backends&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ggml-org/llama.cpp"&gt;llama.cpp&lt;/a&gt; project founded by Georgi Gerganov.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Observability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.comet.com/docs/opik/cookbook/ollama"&gt;Opik&lt;/a&gt; is an open-source platform to debug, evaluate, and monitor your LLM applications, RAG systems, and agentic workflows with comprehensive tracing, automated evaluations, and production-ready dashboards. Opik supports native intergration to Ollama.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://lunary.ai/docs/integrations/ollama"&gt;Lunary&lt;/a&gt; is the leading open-source LLM observability platform. It provides a variety of enterprise-grade features such as real-time analytics, prompt templates management, PII masking, and comprehensive agent tracing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openlit/openlit"&gt;OpenLIT&lt;/a&gt; is an OpenTelemetry-native tool for monitoring Ollama Applications &amp;amp; GPUs using traces and metrics.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.honeyhive.ai/integrations/ollama"&gt;HoneyHive&lt;/a&gt; is an AI observability and evaluation platform for AI agents. Use HoneyHive to evaluate agent performance, interrogate failures, and monitor quality in production.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://langfuse.com/docs/integrations/ollama"&gt;Langfuse&lt;/a&gt; is an open source LLM observability platform that enables teams to collaboratively monitor, evaluate and debug AI applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mlflow.org/docs/latest/llms/tracing/index.html#automatic-tracing"&gt;MLflow Tracing&lt;/a&gt; is an open source LLM observability tool with a convenient API to log and visualize traces, making it easy to debug and evaluate GenAI applications.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>projectdiscovery/httpx</title>
      <link>https://github.com/projectdiscovery/httpx</link>
      <description>&lt;p&gt;httpx is a fast and multi-purpose HTTP toolkit that allows running multiple probes using the retryablehttp library.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;img src="https://raw.githubusercontent.com/projectdiscovery/httpx/dev/static/httpx-logo.png" alt="httpx" width="200px" /&gt; &lt;br /&gt; &lt;/h1&gt; 
&lt;p align="center"&gt; &lt;a href="https://opensource.org/licenses/MIT"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-_red.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/badge/github.com/projectdiscovery/httpx"&gt;&lt;img src="https://goreportcard.com/badge/github.com/projectdiscovery/httpx" /&gt;&lt;/a&gt; &lt;a href="https://github.com/projectdiscovery/httpx/releases"&gt;&lt;img src="https://img.shields.io/github/release/projectdiscovery/httpx" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/projectdiscovery/httpx"&gt;&lt;img src="https://img.shields.io/docker/pulls/projectdiscovery/httpx.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/pdiscoveryio"&gt;&lt;img src="https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/projectdiscovery"&gt;&lt;img src="https://img.shields.io/discord/695645237418131507.svg?logo=discord" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/projectdiscovery/httpx/dev/#features"&gt;Features&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/projectdiscovery/httpx/dev/#installation-instructions"&gt;Installation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/projectdiscovery/httpx/dev/#usage"&gt;Usage&lt;/a&gt; • &lt;a href="https://docs.projectdiscovery.io/tools/httpx/"&gt;Documentation&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/projectdiscovery/httpx/dev/#notes"&gt;Notes&lt;/a&gt; • &lt;a href="https://discord.gg/projectdiscovery"&gt;Join Discord&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;code&gt;httpx&lt;/code&gt; is a fast and multi-purpose HTTP toolkit that allows running multiple probes using the &lt;a href="https://github.com/projectdiscovery/retryablehttp-go"&gt;retryablehttp&lt;/a&gt; library. It is designed to maintain result reliability with an increased number of threads.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;h1 align="center"&gt; &lt;img src="https://user-images.githubusercontent.com/8293321/135731750-4c1d38b1-bd2a-40f9-88e9-3c4b9f6da378.png" alt="httpx" width="700px" /&gt; &lt;br /&gt; &lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple and modular code base making it easy to contribute.&lt;/li&gt; 
 &lt;li&gt;Fast And fully configurable flags to probe multiple elements.&lt;/li&gt; 
 &lt;li&gt;Supports multiple HTTP based probings.&lt;/li&gt; 
 &lt;li&gt;Smart auto fallback from https to http as default.&lt;/li&gt; 
 &lt;li&gt;Supports hosts, URLs and CIDR as input.&lt;/li&gt; 
 &lt;li&gt;Handles edge cases doing retries, backoffs etc for handling WAFs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported probes&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Probes&lt;/th&gt; 
   &lt;th&gt;Default check&lt;/th&gt; 
   &lt;th&gt;Probes&lt;/th&gt; 
   &lt;th&gt;Default check&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;URL&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;IP&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Title&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;CNAME&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Status Code&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Raw HTTP&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Content Length&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;HTTP2&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;TLS Certificate&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;HTTP Pipeline&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;CSP Header&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Virtual host&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Line Count&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Word Count&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Location Header&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;CDN&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web Server&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Paths&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web Socket&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Ports&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Response Time&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Request Method&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Favicon Hash&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;Probe Status&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Body Hash&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
   &lt;td&gt;Header Hash&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Redirect chain&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;URL Scheme&lt;/td&gt; 
   &lt;td&gt;true&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;JARM Hash&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
   &lt;td&gt;ASN&lt;/td&gt; 
   &lt;td&gt;false&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Installation Instructions&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;httpx&lt;/code&gt; requires &lt;strong&gt;go1.21&lt;/strong&gt; to install successfully. Run the following command to get the repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To learn more about installing httpx, see &lt;a href="https://docs.projectdiscovery.io/tools/httpx/install"&gt;https://docs.projectdiscovery.io/tools/httpx/install&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;span&gt;❗&lt;/span&gt; &lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;This project is in active development&lt;/strong&gt;. Expect breaking changes with releases. Review the changelog before updating.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;This project was primarily built to be used as a standalone CLI tool. &lt;strong&gt;Running it as a service may pose security risks.&lt;/strong&gt; It's recommended to use with caution and additional security measures.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;httpx -h
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will display help for the tool. Here are all the switches it supports.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;Usage:
  ./httpx [flags]

Flags:
httpx is a fast and multi-purpose HTTP toolkit that allows running multiple probes using the retryablehttp library.

Usage:
  ./httpx [flags]

Flags:
INPUT:
   -l, -list string      input file containing list of hosts to process
   -rr, -request string  file containing raw request
   -u, -target string[]  input target host(s) to probe

PROBES:
   -sc, -status-code      display response status-code
   -cl, -content-length   display response content-length
   -ct, -content-type     display response content-type
   -location              display response redirect location
   -favicon               display mmh3 hash for '/favicon.ico' file
   -hash string           display response body hash (supported: md5,mmh3,simhash,sha1,sha256,sha512)
   -jarm                  display jarm fingerprint hash
   -rt, -response-time    display response time
   -lc, -line-count       display response body line count
   -wc, -word-count       display response body word count
   -title                 display page title
   -bp, -body-preview     display first N characters of response body (default 100)
   -server, -web-server   display server name
   -td, -tech-detect      display technology in use based on wappalyzer dataset
   -method                display http request method
   -websocket             display server using websocket
   -ip                    display host ip
   -cname                 display host cname
   -extract-fqdn, -efqdn  get domain and subdomains from response body and header in jsonl/csv output
   -asn                   display host asn information
   -cdn                   display cdn/waf in use (default true)
   -probe                 display probe status

HEADLESS:
   -ss, -screenshot                 enable saving screenshot of the page using headless browser
   -system-chrome                   enable using local installed chrome for screenshot
   -ho, -headless-options string[]  start headless chrome with additional options
   -esb, -exclude-screenshot-bytes  enable excluding screenshot bytes from json output
   -no-screenshot-full-page         disable saving full page screenshot
   -ehb, -exclude-headless-body     enable excluding headless header from json output
   -st, -screenshot-timeout value   set timeout for screenshot in seconds (default 10s)
   -sid, -screenshot-idle value     set idle time before taking screenshot in seconds (default 1s)

MATCHERS:
   -mc, -match-code string            match response with specified status code (-mc 200,302)
   -ml, -match-length string          match response with specified content length (-ml 100,102)
   -mlc, -match-line-count string     match response body with specified line count (-mlc 423,532)
   -mwc, -match-word-count string     match response body with specified word count (-mwc 43,55)
   -mfc, -match-favicon string[]      match response with specified favicon hash (-mfc 1494302000)
   -ms, -match-string string[]        match response with specified string (-ms admin)
   -mr, -match-regex string[]         match response with specified regex (-mr admin)
   -mcdn, -match-cdn string[]         match host with specified cdn provider (cloudfront, fastly, google)
   -mrt, -match-response-time string  match response with specified response time in seconds (-mrt '&amp;lt; 1')
   -mdc, -match-condition string      match response with dsl expression condition

EXTRACTOR:
   -er, -extract-regex string[]   display response content with matched regex
   -ep, -extract-preset string[]  display response content matched by a pre-defined regex (url,ipv4,mail)

FILTERS:
   -fc, -filter-code string            filter response with specified status code (-fc 403,401)
   -fep, -filter-error-page            filter response with ML based error page detection
   -fd, -filter-duplicates             filter out near-duplicate responses (only first response is retained)
   -fl, -filter-length string          filter response with specified content length (-fl 23,33)
   -flc, -filter-line-count string     filter response body with specified line count (-flc 423,532)
   -fwc, -filter-word-count string     filter response body with specified word count (-fwc 423,532)
   -ffc, -filter-favicon string[]      filter response with specified favicon hash (-ffc 1494302000)
   -fs, -filter-string string[]        filter response with specified string (-fs admin)
   -fe, -filter-regex string[]         filter response with specified regex (-fe admin)
   -fcdn, -filter-cdn string[]         filter host with specified cdn provider (cloudfront, fastly, google)
   -frt, -filter-response-time string  filter response with specified response time in seconds (-frt '&amp;gt; 1')
   -fdc, -filter-condition string      filter response with dsl expression condition
   -strip                              strips all tags in response. supported formats: html,xml (default html)

RATE-LIMIT:
   -t, -threads int              number of threads to use (default 50)
   -rl, -rate-limit int          maximum requests to send per second (default 150)
   -rlm, -rate-limit-minute int  maximum number of requests to send per minute

MISCELLANEOUS:
   -pa, -probe-all-ips        probe all the ips associated with same host
   -p, -ports string[]        ports to probe (nmap syntax: eg http:1,2-10,11,https:80)
   -path string               path or list of paths to probe (comma-separated, file)
   -tls-probe                 send http probes on the extracted TLS domains (dns_name)
   -csp-probe                 send http probes on the extracted CSP domains
   -tls-grab                  perform TLS(SSL) data grabbing
   -pipeline                  probe and display server supporting HTTP1.1 pipeline
   -http2                     probe and display server supporting HTTP2
   -vhost                     probe and display server supporting VHOST
   -ldv, -list-dsl-variables  list json output field keys name that support dsl matcher/filter

UPDATE:
   -up, -update                 update httpx to latest version
   -duc, -disable-update-check  disable automatic httpx update check

OUTPUT:
   -o, -output string                     file to write output results
   -oa, -output-all                       filename to write output results in all formats
   -sr, -store-response                   store http response to output directory
   -srd, -store-response-dir string       store http response to custom directory
   -ob, -omit-body                        omit response body in output
   -csv                                   store output in csv format
   -csvo, -csv-output-encoding string     define output encoding
   -j, -json                              store output in JSONL(ines) format
   -irh, -include-response-header         include http response (headers) in JSON output (-json only)
   -irr, -include-response                include http request/response (headers + body) in JSON output (-json only)
   -irrb, -include-response-base64        include base64 encoded http request/response in JSON output (-json only)
   -include-chain                         include redirect http chain in JSON output (-json only)
   -store-chain                           include http redirect chain in responses (-sr only)
   -svrc, -store-vision-recon-cluster     include visual recon clusters (-ss and -sr only)
   -pr, -protocol string                  protocol to use (unknown, http11)
   -fepp, -filter-error-page-path string  path to store filtered error pages (default "filtered_error_page.json")

CONFIGURATIONS:
   -config string                   path to the httpx configuration file (default $HOME/.config/httpx/config.yaml)
   -r, -resolvers string[]          list of custom resolver (file or comma separated)
   -allow string[]                  allowed list of IP/CIDR's to process (file or comma separated)
   -deny string[]                   denied list of IP/CIDR's to process (file or comma separated)
   -sni, -sni-name string           custom TLS SNI name
   -random-agent                    enable Random User-Agent to use (default true)
   -H, -header string[]             custom http headers to send with request
   -http-proxy, -proxy string       http proxy to use (eg http://127.0.0.1:8080)
   -unsafe                          send raw requests skipping golang normalization
   -resume                          resume scan using resume.cfg
   -fr, -follow-redirects           follow http redirects
   -maxr, -max-redirects int        max number of redirects to follow per host (default 10)
   -fhr, -follow-host-redirects     follow redirects on the same host
   -rhsts, -respect-hsts            respect HSTS response headers for redirect requests
   -vhost-input                     get a list of vhosts as input
   -x string                        request methods to probe, use 'all' to probe all HTTP methods
   -body string                     post body to include in http request
   -s, -stream                      stream mode - start elaborating input targets without sorting
   -sd, -skip-dedupe                disable dedupe input items (only used with stream mode)
   -ldp, -leave-default-ports       leave default http/https ports in host header (eg. http://host:80 - https://host:443
   -ztls                            use ztls library with autofallback to standard one for tls13
   -no-decode                       avoid decoding body
   -tlsi, -tls-impersonate          enable experimental client hello (ja3) tls randomization
   -no-stdin                        Disable Stdin processing
   -hae, -http-api-endpoint string  experimental http api endpoint

DEBUG:
   -health-check, -hc        run diagnostic check up
   -debug                    display request/response content in cli
   -debug-req                display request content in cli
   -debug-resp               display response content in cli
   -version                  display httpx version
   -stats                    display scan statistic
   -profile-mem string       optional httpx memory profile dump file
   -silent                   silent mode
   -v, -verbose              verbose mode
   -si, -stats-interval int  number of seconds to wait between showing a statistics update (default: 5)
   -nc, -no-color            disable colors in cli output
   -tr, -trace               trace

OPTIMIZATIONS:
   -nf, -no-fallback                  display both probed protocol (HTTPS and HTTP)
   -nfs, -no-fallback-scheme          probe with protocol scheme specified in input 
   -maxhr, -max-host-error int        max error count per host before skipping remaining path/s (default 30)
   -e, -exclude string[]              exclude host matching specified filter ('cdn', 'private-ips', cidr, ip, regex)
   -retries int                       number of retries
   -timeout int                       timeout in seconds (default 10)
   -delay value                       duration between each http request (eg: 200ms, 1s) (default -1ns)
   -rsts, -response-size-to-save int  max response size to save in bytes (default 2147483647)
   -rstr, -response-size-to-read int  max response size to read in bytes (default 2147483647)

CLOUD:
   -auth                           configure projectdiscovery cloud (pdcp) api key (default true)
   -ac, -auth-config string        configure projectdiscovery cloud (pdcp) api key credential file
   -pd, -dashboard                 upload / view output in projectdiscovery cloud (pdcp) UI dashboard
   -tid, -team-id string           upload asset results to given team id (optional)
   -aid, -asset-id string          upload new assets to existing asset id (optional)
   -aname, -asset-name string      assets group name to set (optional)
   -pdu, -dashboard-upload string  upload httpx output file (jsonl) in projectdiscovery cloud (pdcp) UI dashboard
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Running httpx&lt;/h1&gt; 
&lt;p&gt;For details about running httpx, see &lt;a href="https://docs.projectdiscovery.io/tools/httpx/running"&gt;https://docs.projectdiscovery.io/tools/httpx/running&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using &lt;code&gt;httpx&lt;/code&gt; as a library&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;httpx&lt;/code&gt; can be used as a library by creating an instance of the &lt;code&gt;Option&lt;/code&gt; struct and populating it with the same options that would be specified via CLI. Once validated, the struct should be passed to a runner instance (to be closed at the end of the program) and the &lt;code&gt;RunEnumeration&lt;/code&gt; method should be called. A minimal example of how to do it is in the &lt;a href="https://raw.githubusercontent.com/projectdiscovery/httpx/dev/examples/"&gt;examples&lt;/a&gt; folder&lt;/p&gt; 
&lt;h1&gt;Notes&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;As default, &lt;code&gt;httpx&lt;/code&gt; probe with &lt;strong&gt;HTTPS&lt;/strong&gt; scheme and fall-back to &lt;strong&gt;HTTP&lt;/strong&gt; only if &lt;strong&gt;HTTPS&lt;/strong&gt; is not reachable.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;-no-fallback&lt;/code&gt; flag can be used to probe and display both &lt;strong&gt;HTTP&lt;/strong&gt; and &lt;strong&gt;HTTPS&lt;/strong&gt; result.&lt;/li&gt; 
 &lt;li&gt;Custom scheme for ports can be defined, for example &lt;code&gt;-ports http:443,http:80,https:8443&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Custom resolver supports multiple protocol (&lt;strong&gt;doh|tcp|udp&lt;/strong&gt;) in form of &lt;code&gt;protocol:resolver:port&lt;/code&gt; (e.g. &lt;code&gt;udp:127.0.0.1:53&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;The following flags should be used for specific use cases instead of running them as default with other probes: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;-ports&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-path&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-vhost&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-screenshot&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-csp-probe&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-tls-probe&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-favicon&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-http2&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-pipeline&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;-tls-impersonate&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Acknowledgement&lt;/h1&gt; 
&lt;p&gt;Probing feature is inspired by &lt;a href="https://github.com/tomnomnom/httprobe"&gt;@tomnomnom/httprobe&lt;/a&gt; work ❤️&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;code&gt;httpx&lt;/code&gt; is made with 💙 by the &lt;a href="https://projectdiscovery.io"&gt;projectdiscovery&lt;/a&gt; team and distributed under &lt;a href="https://raw.githubusercontent.com/projectdiscovery/httpx/dev/LICENSE.md"&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/projectdiscovery"&gt;&lt;img src="https://raw.githubusercontent.com/projectdiscovery/nuclei-burp-plugin/main/static/join-discord.png" width="300" alt="Join Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>cloudwego/eino</title>
      <link>https://github.com/cloudwego/eino</link>
      <description>&lt;p&gt;The ultimate LLM/AI application development framework in Golang.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eino&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/badges/.badges/main/coverage.svg?sanitize=true" alt="coverage" /&gt; &lt;a href="https://github.com/cloudwego/eino/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/cloudwego/eino" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://www.cloudwego.io/"&gt;&lt;img src="https://img.shields.io/website?up_message=cloudwego&amp;amp;url=https%3A%2F%2Fwww.cloudwego.io%2F" alt="WebSite" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudwego/eino/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/cloudwego/eino" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/cloudwego/eino"&gt;&lt;img src="https://goreportcard.com/badge/github.com/cloudwego/eino" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/eino"&gt;&lt;img src="https://img.shields.io/github/issues/cloudwego/eino" alt="OpenIssue" /&gt;&lt;/a&gt; &lt;a href="https://github.com/cloudwego/eino/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;img src="https://img.shields.io/github/issues-closed/cloudwego/eino" alt="ClosedIssue" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/stars/cloudwego/eino" alt="Stars" /&gt; &lt;img src="https://img.shields.io/github/forks/cloudwego/eino" alt="Forks" /&gt;&lt;/p&gt; 
&lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/cloudwego/eino/main/README.zh_CN.md"&gt;中文&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Eino['aino]&lt;/strong&gt; (pronounced similarly to "I know") aims to be the ultimate LLM application development framework in Golang. Drawing inspirations from many excellent LLM application development frameworks in the open-source community such as LangChain &amp;amp; LlamaIndex, etc., as well as learning from cutting-edge research and real world applications, Eino offers an LLM application development framework that emphasizes on simplicity, scalability, reliability and effectiveness that better aligns with Golang programming conventions.&lt;/p&gt; 
&lt;p&gt;What Eino provides are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a carefully curated list of &lt;strong&gt;component&lt;/strong&gt; abstractions and implementations that can be easily reused and combined to build LLM applications&lt;/li&gt; 
 &lt;li&gt;a powerful &lt;strong&gt;composition&lt;/strong&gt; framework that does the heavy lifting of strong type checking, stream processing, concurrency management, aspect injection, option assignment, etc. for the user.&lt;/li&gt; 
 &lt;li&gt;a set of meticulously designed &lt;strong&gt;API&lt;/strong&gt; that obsesses on simplicity and clarity.&lt;/li&gt; 
 &lt;li&gt;an ever-growing collection of best practices in the form of bundled &lt;strong&gt;flows&lt;/strong&gt; and &lt;strong&gt;examples&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;a useful set of tools that covers the entire development cycle, from visualized development and debugging to online tracing and evaluation.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With the above arsenal, Eino can standardize, simplify, and improve efficiency at different stages of the AI application development cycle: &lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/eino_concept.jpeg" alt="" /&gt;&lt;/p&gt; 
&lt;h1&gt;A quick walkthrough&lt;/h1&gt; 
&lt;p&gt;Use a component directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;model, _ := openai.NewChatModel(ctx, config) // create an invokable LLM instance
message, _ := model.Generate(ctx, []*Message{
    SystemMessage("you are a helpful assistant."),
    UserMessage("what does the future AI App look like?")})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, you can do that, Eino provides lots of useful components to use out of the box. But you can do more by using orchestration, for three reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;orchestration encapsulates common patterns of LLM application.&lt;/li&gt; 
 &lt;li&gt;orchestration solves the difficult problem of processing stream response by the LLM.&lt;/li&gt; 
 &lt;li&gt;orchestration handles type safety, concurrency management, aspect injection and option assignment for you.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Eino provides three set of APIs for orchestration&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;API&lt;/th&gt; 
   &lt;th&gt;Characteristics and usage&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Chain&lt;/td&gt; 
   &lt;td&gt;Simple chained directed graph that can only go forward.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Graph&lt;/td&gt; 
   &lt;td&gt;Cyclic or Acyclic directed graph. Powerful and flexible.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Workflow&lt;/td&gt; 
   &lt;td&gt;Acyclic graph that supports data mapping at struct field level.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Let's create a simple chain: a ChatTemplate followed by a ChatModel.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/simple_chain.png" alt="" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;chain, _ := NewChain[map[string]any, *Message]().
           AppendChatTemplate(prompt).
           AppendChatModel(model).
           Compile(ctx)

chain.Invoke(ctx, map[string]any{"query": "what's your name?"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let's create a graph that uses a ChatModel to generate answer or tool calls, then uses a ToolsNode to execute those tools if needed.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/tool_call_graph.png" alt="" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;graph := NewGraph[map[string]any, *schema.Message]()

_ = graph.AddChatTemplateNode("node_template", chatTpl)
_ = graph.AddChatModelNode("node_model", chatModel)
_ = graph.AddToolsNode("node_tools", toolsNode)
_ = graph.AddLambdaNode("node_converter", takeOne)

_ = graph.AddEdge(START, "node_template")
_ = graph.AddEdge("node_template", "node_model")
_ = graph.AddBranch("node_model", branch)
_ = graph.AddEdge("node_tools", "node_converter")
_ = graph.AddEdge("node_converter", END)

compiledGraph, err := graph.Compile(ctx)
if err != nil {
return err
}
out, err := r.Invoke(ctx, map[string]any{"query":"Beijing's weather this weekend"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let's create a workflow that flexibly maps input &amp;amp; output at the field level:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/simple_workflow.png" alt="" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;type Input1 struct {
    Input string
}

type Output1 struct {
    Output string
}

type Input2 struct {
    Role schema.RoleType
}

type Output2 struct {
    Output string
}

type Input3 struct {
    Query string
    MetaData string
}

var (
    ctx context.Context
    m model.BaseChatModel
    lambda1 func(context.Context, Input1) (Output1, error)
    lambda2 func(context.Context, Input2) (Output2, error)
    lambda3 func(context.Context, Input3) (*schema.Message, error)
)

wf := NewWorkflow[[]*schema.Message, *schema.Message]()
wf.AddChatModelNode("model", m).AddInput(START)
wf.AddLambdaNode("lambda1", InvokableLambda(lambda1)).
    AddInput("model", MapFields("Content", "Input"))
wf.AddLambdaNode("lambda2", InvokableLambda(lambda2)).
    AddInput("model", MapFields("Role", "Role"))
wf.AddLambdaNode("lambda3", InvokableLambda(lambda3)).
    AddInput("lambda1", MapFields("Output", "Query")).
    AddInput("lambda2", MapFields("Output", "MetaData"))
wf.End().AddInput("lambda3")
runnable, err := wf.Compile(ctx)
if err != nil {
    return err
}
our, err := runnable.Invoke(ctx, []*schema.Message{
    schema.UserMessage("kick start this workflow!"),
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now let's create a 'ReAct' agent: A ChatModel binds to Tools. It receives input Messages and decides independently whether to call the Tool or output the final result. The execution result of the Tool will again become the input Message for the ChatModel and serve as the context for the next round of independent judgment.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/react.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;We provide a complete implementation for ReAct Agent out of the box in the &lt;code&gt;flow&lt;/code&gt; package. Check out the code here: &lt;a href="https://github.com/cloudwego/eino/raw/main/flow/agent/react/react.go"&gt;flow/agent/react&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Our implementation of ReAct Agent uses Eino's &lt;strong&gt;graph orchestration&lt;/strong&gt; exclusively, which provides the following benefits out of the box:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Type checking: it makes sure the two nodes' input and output types match at compile time.&lt;/li&gt; 
 &lt;li&gt;Stream processing: concatenates message stream before passing to chatModel and toolsNode if needed, and copies the stream into callback handlers.&lt;/li&gt; 
 &lt;li&gt;Concurrency management: the shared state can be safely read and written because the StatePreHandler is concurrency safe.&lt;/li&gt; 
 &lt;li&gt;Aspect injection: injects callback aspects before and after the execution of ChatModel if the specified ChatModel implementation hasn't injected itself.&lt;/li&gt; 
 &lt;li&gt;Option assignment: call options are assigned either globally, to specific component type or to specific node.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, you could easily extend the compiled graph with callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;handler := NewHandlerBuilder().
  OnStartFn(
    func(ctx context.Context, info *RunInfo, input CallbackInput) context.Context) {
        log.Infof("onStart, runInfo: %v, input: %v", info, input)
    }).
  OnEndFn(
    func(ctx context.Context, info *RunInfo, output CallbackOutput) context.Context) {
        log.Infof("onEnd, runInfo: %v, out: %v", info, output)
    }).
  Build()
  
compiledGraph.Invoke(ctx, input, WithCallbacks(handler))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or you could easily assign options to different nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Go"&gt;// assign to All nodes
compiledGraph.Invoke(ctx, input, WithCallbacks(handler))

// assign only to ChatModel nodes
compiledGraph.Invoke(ctx, input, WithChatModelOption(WithTemperature(0.5))

// assign only to node_1
compiledGraph.Invoke(ctx, input, WithCallbacks(handler).DesignateNode("node_1"))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Key Features&lt;/h1&gt; 
&lt;h2&gt;Rich Components&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Encapsulates common building blocks into &lt;strong&gt;component abstractions&lt;/strong&gt;, each have multiple &lt;strong&gt;component implementations&lt;/strong&gt; that are ready to be used out of the box.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;component abstractions such as ChatModel, Tool, ChatTemplate, Retriever, Document Loader, Lambda, etc.&lt;/li&gt; 
   &lt;li&gt;each component type has an interface of its own: defined Input &amp;amp; Output Type, defined Option type, and streaming paradigms that make sense.&lt;/li&gt; 
   &lt;li&gt;implementations are transparent. Abstractions are all you care about when orchestrating components together.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implementations can be nested and captures complex business logic.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ReAct Agent, MultiQueryRetriever, Host MultiAgent, etc. They consist of multiple components and non-trivial business logic.&lt;/li&gt; 
   &lt;li&gt;They are still transparent from the outside. A MultiQueryRetriever can be used anywhere that accepts a Retriever.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Powerful Orchestration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Data flows from Retriever / Document Loaders / ChatTemplate to ChatModel, then flows to Tools and parsed as Final Answer. This directed, controlled flow of data through multiple components can be implemented through &lt;strong&gt;graph orchestration&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Component instances are graph nodes, and edges are data flow channels.&lt;/li&gt; 
 &lt;li&gt;Graph orchestration is powerful and flexible enough to implement complex business logic: 
  &lt;ul&gt; 
   &lt;li&gt;type checking, stream processing, concurrency management, aspect injection and option assignment are handled by the framework.&lt;/li&gt; 
   &lt;li&gt;branch out execution at runtime, read and write global state, or do field level data mapping using workflow(currently in alpha stage).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Complete Stream Processing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stream processing is important because ChatModel outputs chunks of messages in real time as it generates them. It's especially important with orchestration because more components need to handle streaming data.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;concatenates&lt;/strong&gt; stream chunks for downstream nodes that only accepts non-stream input, such as ToolsNode.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;boxes&lt;/strong&gt; non stream into stream when stream is needed during graph execution.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;merges&lt;/strong&gt; multiple streams as they converge into a single downward node.&lt;/li&gt; 
 &lt;li&gt;Eino automatically &lt;strong&gt;copies&lt;/strong&gt; stream as they fan out to different downward node, or is passed to callback handlers.&lt;/li&gt; 
 &lt;li&gt;Orchestration elements such as &lt;strong&gt;branch&lt;/strong&gt; and &lt;strong&gt;state handlers&lt;/strong&gt; are also stream aware.&lt;/li&gt; 
 &lt;li&gt;With these streaming processing abilities, the streaming paradigms of components themselves become transparent to the user.&lt;/li&gt; 
 &lt;li&gt;A compiled Graph can run with 4 different streaming paradigms:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Streaming Paradigm&lt;/th&gt; 
   &lt;th&gt;Explanation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Invoke&lt;/td&gt; 
   &lt;td&gt;Accepts non-stream type I and returns non-stream type O&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Stream&lt;/td&gt; 
   &lt;td&gt;Accepts non-stream type I and returns stream type StreamReader[O]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Collect&lt;/td&gt; 
   &lt;td&gt;Accepts stream type StreamReader[I] and returns non-stream type O&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Transform&lt;/td&gt; 
   &lt;td&gt;Accepts stream type StreamReader[I] and returns stream type StreamReader[O]&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Highly Extensible Aspects (Callbacks)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Aspects handle cross-cutting concerns such as logging, tracing, metrics, etc., as well as exposing internal details of component implementations.&lt;/li&gt; 
 &lt;li&gt;Five aspects are supported: &lt;strong&gt;OnStart, OnEnd, OnError, OnStartWithStreamInput, OnEndWithStreamOutput&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Developers can easily create custom callback handlers, add them during graph run via options, and they will be invoked during graph run.&lt;/li&gt; 
 &lt;li&gt;Graph can also inject aspects to those component implementations that do not support callbacks on their own.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Eino Framework Structure&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/eino_framework.jpeg" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;The Eino framework consists of several parts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Eino(this repo): Contains Eino's type definitions, streaming mechanism, component abstractions, orchestration capabilities, aspect mechanisms, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/cloudwego/eino-ext"&gt;EinoExt&lt;/a&gt;: Component implementations, callback handlers implementations, component usage examples, and various tools such as evaluators, prompt optimizers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/cloudwego/eino-ext/tree/main/devops"&gt;Eino Devops&lt;/a&gt;: visualized developing, visualized debugging etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/cloudwego/eino-examples"&gt;EinoExamples&lt;/a&gt; is the repo containing example applications and best practices for Eino.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Detailed Documentation&lt;/h2&gt; 
&lt;p&gt;For learning and using Eino, we provide a comprehensive Eino User Manual to help you quickly understand the concepts in Eino and master the skills of developing AI applications based on Eino. Start exploring through the &lt;a href="https://www.cloudwego.io/zh/docs/eino/"&gt;Eino User Manual&lt;/a&gt; now!&lt;/p&gt; 
&lt;p&gt;For a quick introduction to building AI applications with Eino, we recommend starting with &lt;a href="https://www.cloudwego.io/zh/docs/eino/quick_start/"&gt;Eino: Quick Start&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go 1.18 and above.&lt;/li&gt; 
 &lt;li&gt;Eino relies on &lt;a href="https://github.com/getkin/kin-openapi"&gt;kin-openapi&lt;/a&gt; 's OpenAPI JSONSchema implementation. In order to remain compatible with Go 1.18, we have fixed kin-openapi's version to be v0.118.0.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a potential security issue in this project, or think you may have discovered a security issue, we ask that you notify Bytedance Security via our &lt;a href="https://security.bytedance.com/src"&gt;security center&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/cloudwego/eino/main/sec@bytedance.com"&gt;vulnerability reporting email&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; 
&lt;h2&gt;Contact US&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;How to become a member: &lt;a href="https://github.com/cloudwego/community/raw/main/COMMUNITY_MEMBERSHIP.md"&gt;COMMUNITY MEMBERSHIP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Issues: &lt;a href="https://github.com/cloudwego/eino/issues"&gt;Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Lark: Scan the QR code below with &lt;a href="https://www.feishu.cn/en/"&gt;Register Feishu&lt;/a&gt; to join our CloudWeGo/eino user group.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;    &lt;img src="https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/lark_group_zh.png" alt="LarkGroup" width="200" /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/cloudwego/eino/main/LICENSE-APACHE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/github-mcp-server</title>
      <link>https://github.com/github/github-mcp-server</link>
      <description>&lt;p&gt;GitHub's official MCP Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub MCP Server&lt;/h1&gt; 
&lt;p&gt;The GitHub MCP Server connects AI tools directly to GitHub's platform. This gives AI agents, assistants, and chatbots the ability to read repositories and code files, manage issues and PRs, analyze code, and automate workflows. All through natural language interactions.&lt;/p&gt; 
&lt;h3&gt;Use Cases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Repository Management: Browse and query code, search files, analyze commits, and understand project structure across any repository you have access to.&lt;/li&gt; 
 &lt;li&gt;Issue &amp;amp; PR Automation: Create, update, and manage issues and pull requests. Let AI help triage bugs, review code changes, and maintain project boards.&lt;/li&gt; 
 &lt;li&gt;CI/CD &amp;amp; Workflow Intelligence: Monitor GitHub Actions workflow runs, analyze build failures, manage releases, and get insights into your development pipeline.&lt;/li&gt; 
 &lt;li&gt;Code Analysis: Examine security findings, review Dependabot alerts, understand code patterns, and get comprehensive insights into your codebase.&lt;/li&gt; 
 &lt;li&gt;Team Collaboration: Access discussions, manage notifications, analyze team activity, and streamline processes for your team.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Built for developers who want to connect their AI tools to GitHub context and capabilities, from simple natural language queries to complex multi-step agent workflows.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Remote GitHub MCP Server&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;config=%7B%22type%22%3A%20%22http%22%2C%22url%22%3A%20%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D"&gt;&lt;img src="https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" alt="Install in VS Code" /&gt;&lt;/a&gt; &lt;a href="https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;config=%7B%22type%22%3A%20%22http%22%2C%22url%22%3A%20%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D&amp;amp;quality=insiders"&gt;&lt;img src="https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" alt="Install in VS Code Insiders" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The remote GitHub MCP Server is hosted by GitHub and provides the easiest method for getting up and running. If your MCP host does not support remote MCP servers, don't worry! You can use the &lt;a href="https://github.com/github/github-mcp-server?tab=readme-ov-file#local-github-mcp-server"&gt;local version of the GitHub MCP Server&lt;/a&gt; instead.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;A compatible MCP host with remote server support (VS Code 1.101+, Claude Desktop, Cursor, Windsurf, etc.)&lt;/li&gt; 
 &lt;li&gt;Any applicable &lt;a href="https://github.com/github/github-mcp-server/raw/main/docs/policies-and-governance.md"&gt;policies enabled&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Install in VS Code&lt;/h3&gt; 
&lt;p&gt;For quick installation, use one of the one-click install buttons above. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start. Make sure you're using &lt;a href="https://code.visualstudio.com/updates/v1_101"&gt;VS Code 1.101&lt;/a&gt; or &lt;a href="https://code.visualstudio.com/updates"&gt;later&lt;/a&gt; for remote MCP and OAuth support.&lt;/p&gt; 
&lt;p&gt;Alternatively, to manually configure VS Code, choose the appropriate JSON block from the examples below and add it to your host configuration:&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;th&gt;Using OAuth&lt;/th&gt;
   &lt;th&gt;Using a GitHub PAT&lt;/th&gt;
  &lt;/tr&gt; 
  &lt;tr&gt;
   &lt;th align="left" colspan="2"&gt;VS Code (version 1.101 or greater)&lt;/th&gt;
  &lt;/tr&gt; 
  &lt;tr valign="top"&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "servers": {
    "github": {
      "type": "http",
      "url": "https://api.githubcopilot.com/mcp/"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{
  "servers": {
    "github": {
      "type": "http",
      "url": "https://api.githubcopilot.com/mcp/",
      "headers": {
        "Authorization": "Bearer ${input:github_mcp_pat}"
      }
    }
  },
  "inputs": [
    {
      "type": "promptString",
      "id": "github_mcp_pat",
      "description": "GitHub Personal Access Token",
      "password": true
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Install in other MCP hosts&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-other-copilot-ides.md"&gt;GitHub Copilot in other IDEs&lt;/a&gt;&lt;/strong&gt; - Installation for JetBrains, Visual Studio, Eclipse, and Xcode with GitHub Copilot&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-claude.md"&gt;Claude Applications&lt;/a&gt;&lt;/strong&gt; - Installation guide for Claude Web, Claude Desktop and Claude Code CLI&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-cursor.md"&gt;Cursor&lt;/a&gt;&lt;/strong&gt; - Installation guide for Cursor IDE&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-windsurf.md"&gt;Windsurf&lt;/a&gt;&lt;/strong&gt; - Installation guide for Windsurf IDE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each MCP host application needs to configure a GitHub App or OAuth App to support remote access via OAuth. Any host application that supports remote MCP servers should support the remote GitHub server with PAT authentication. Configuration details and support levels vary by host. Make sure to refer to the host application's documentation for more info.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;⚠️ &lt;strong&gt;Public Preview Status:&lt;/strong&gt; The &lt;strong&gt;remote&lt;/strong&gt; GitHub MCP Server is currently in Public Preview. During preview, access may be gated depending on authentication type and surface:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;OAuth: Subject to GitHub Copilot Editor Preview Policy until GA&lt;/li&gt; 
  &lt;li&gt;PAT: Controlled via your organization's PAT policies&lt;/li&gt; 
  &lt;li&gt;MCP Servers in Copilot policy: Enables/disables access to all MCP servers in VS Code, with other Copilot editors migrating to this policy in the coming months.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/remote-server.md"&gt;Remote Server Documentation&lt;/a&gt; on how to pass additional configuration settings to the remote GitHub MCP Server.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Local GitHub MCP Server&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&amp;amp;config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D"&gt;&lt;img src="https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" alt="Install with Docker in VS Code" /&gt;&lt;/a&gt; &lt;a href="https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&amp;amp;config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&amp;amp;quality=insiders"&gt;&lt;img src="https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white" alt="Install with Docker in VS Code Insiders" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;To run the server in a container, you will need to have &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; installed.&lt;/li&gt; 
 &lt;li&gt;Once Docker is installed, you will also need to ensure Docker is running. The image is public; if you get errors on pull, you may have an expired token and need to &lt;code&gt;docker logout ghcr.io&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Lastly you will need to &lt;a href="https://github.com/settings/personal-access-tokens/new"&gt;Create a GitHub Personal Access Token&lt;/a&gt;. The MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens"&gt;documentation&lt;/a&gt;).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;details&gt;
 &lt;summary&gt;&lt;b&gt;Handling PATs Securely&lt;/b&gt;&lt;/summary&gt; 
 &lt;h3&gt;Environment Variables (Recommended)&lt;/h3&gt; 
 &lt;p&gt;To keep your GitHub PAT secure and reusable across different MCP hosts:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Store your PAT in environment variables&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;export GITHUB_PAT=your_token_here
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or create a &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-env"&gt;GITHUB_PAT=your_token_here
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Protect your &lt;code&gt;.env&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Add to .gitignore to prevent accidental commits
echo ".env" &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reference the token in configurations&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# CLI usage
claude mcp update github -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_PAT

# In config files (where supported)
"env": {
  "GITHUB_PERSONAL_ACCESS_TOKEN": "$GITHUB_PAT"
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Environment variable support varies by host app and IDE. Some applications (like Windsurf) require hardcoded tokens in config files.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h3&gt;Token Security Best Practices&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Minimum scopes&lt;/strong&gt;: Only grant necessary permissions 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt; - Repository operations&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;read:packages&lt;/code&gt; - Docker image access&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;read:org&lt;/code&gt; - Organization team access&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Separate tokens&lt;/strong&gt;: Use different PATs for different projects/environments&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Regular rotation&lt;/strong&gt;: Update tokens periodically&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Never commit&lt;/strong&gt;: Keep tokens out of version control&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;File permissions&lt;/strong&gt;: Restrict access to config files containing tokens &lt;pre&gt;&lt;code class="language-bash"&gt;chmod 600 ~/.your-app/config.json
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Install in GitHub Copilot on VS Code&lt;/h3&gt; 
&lt;p&gt;For quick installation, use one of the one-click install buttons above. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.&lt;/p&gt; 
&lt;p&gt;More about using MCP server tools in VS Code's &lt;a href="https://code.visualstudio.com/docs/copilot/chat/mcp-servers"&gt;agent mode documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Install in GitHub Copilot on other IDEs (JetBrains, Visual Studio, Eclipse, etc.)&lt;/p&gt; 
&lt;p&gt;Add the following JSON block to your IDE's MCP settings.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "mcp": {
    "inputs": [
      {
        "type": "promptString",
        "id": "github_token",
        "description": "GitHub Personal Access Token",
        "password": true
      }
    ],
    "servers": {
      "github": {
        "command": "docker",
        "args": [
          "run",
          "-i",
          "--rm",
          "-e",
          "GITHUB_PERSONAL_ACCESS_TOKEN",
          "ghcr.io/github/github-mcp-server"
        ],
        "env": {
          "GITHUB_PERSONAL_ACCESS_TOKEN": "${input:github_token}"
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Optionally, you can add a similar example (i.e. without the mcp key) to a file called &lt;code&gt;.vscode/mcp.json&lt;/code&gt; in your workspace. This will allow you to share the configuration with other host applications that accept the same format.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Example JSON block without the MCP key included&lt;/b&gt;&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;{
  "inputs": [
    {
      "type": "promptString",
      "id": "github_token",
      "description": "GitHub Personal Access Token",
      "password": true
    }
  ],
  "servers": {
    "github": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GITHUB_PERSONAL_ACCESS_TOKEN",
        "ghcr.io/github/github-mcp-server"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${input:github_token}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Install in Other MCP Hosts&lt;/h3&gt; 
&lt;p&gt;For other MCP host applications, please refer to our installation guides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-other-copilot-ides.md"&gt;GitHub Copilot in other IDEs&lt;/a&gt;&lt;/strong&gt; - Installation for JetBrains, Visual Studio, Eclipse, and Xcode with GitHub Copilot&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-claude.md"&gt;Claude Code &amp;amp; Claude Desktop&lt;/a&gt;&lt;/strong&gt; - Installation guide for Claude Code and Claude Desktop&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-cursor.md"&gt;Cursor&lt;/a&gt;&lt;/strong&gt; - Installation guide for Cursor IDE&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/install-windsurf.md"&gt;Windsurf&lt;/a&gt;&lt;/strong&gt; - Installation guide for Windsurf IDE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a complete overview of all installation options, see our &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/docs/installation-guides/installation-guides.md"&gt;Installation Guides Index&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any host application that supports local MCP servers should be able to access the local GitHub MCP server. However, the specific configuration process, syntax and stability of the integration will vary by host application. While many may follow a similar format to the examples above, this is not guaranteed. Please refer to your host application's documentation for the correct MCP configuration syntax and setup process.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Build from source&lt;/h3&gt; 
&lt;p&gt;If you don't have Docker, you can use &lt;code&gt;go build&lt;/code&gt; to build the binary in the &lt;code&gt;cmd/github-mcp-server&lt;/code&gt; directory, and use the &lt;code&gt;github-mcp-server stdio&lt;/code&gt; command with the &lt;code&gt;GITHUB_PERSONAL_ACCESS_TOKEN&lt;/code&gt; environment variable set to your token. To specify the output location of the build, use the &lt;code&gt;-o&lt;/code&gt; flag. You should configure your server to use the built executable as its &lt;code&gt;command&lt;/code&gt;. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-JSON"&gt;{
  "mcp": {
    "servers": {
      "github": {
        "command": "/path/to/github-mcp-server",
        "args": ["stdio"],
        "env": {
          "GITHUB_PERSONAL_ACCESS_TOKEN": "&amp;lt;YOUR_TOKEN&amp;gt;"
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tool Configuration&lt;/h2&gt; 
&lt;p&gt;The GitHub MCP Server supports enabling or disabling specific groups of functionalities via the &lt;code&gt;--toolsets&lt;/code&gt; flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Toolsets are not limited to Tools. Relevant MCP Resources and Prompts are also included where applicable.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Available Toolsets&lt;/h3&gt; 
&lt;p&gt;The following sets of tools are available (all are on by default):&lt;/p&gt; 
&lt;!-- START AUTOMATED TOOLSETS --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Toolset&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;context&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Strongly recommended&lt;/strong&gt;: Tools that provide context about the current user and GitHub context you are operating in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;actions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Actions workflows and CI/CD operations&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;code_security&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Code security related tools, such as GitHub Code Scanning&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dependabot&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Dependabot tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;discussions&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Discussions related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;experiments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Experimental features that are not considered stable yet&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;gists&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Gist related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;issues&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Issues related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;notifications&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Notifications related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;orgs&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Organization related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;pull_requests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Pull Request related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;repos&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub Repository related tools&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;secret_protection&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Secret protection related tools, such as GitHub Secret Scanning&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;users&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;GitHub User related tools&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- END AUTOMATED TOOLSETS --&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;!-- START AUTOMATED TOOLS --&gt; 
&lt;details&gt; 
 &lt;summary&gt;Actions&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;cancel_workflow_run&lt;/strong&gt; - Cancel workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_workflow_run_logs&lt;/strong&gt; - Delete workflow logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;download_workflow_run_artifact&lt;/strong&gt; - Download workflow artifact&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;artifact_id&lt;/code&gt;: The unique identifier of the artifact (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_job_logs&lt;/strong&gt; - Get job logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;failed_only&lt;/code&gt;: When true, gets logs for all failed jobs in run_id (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;job_id&lt;/code&gt;: The unique identifier of the workflow job (required for single job logs) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;return_content&lt;/code&gt;: Returns actual log content instead of URLs (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (required when using failed_only) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tail_lines&lt;/code&gt;: Number of lines to return from the end of the log (number, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run&lt;/strong&gt; - Get workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run_logs&lt;/strong&gt; - Get workflow run logs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run_usage&lt;/strong&gt; - Get workflow usage&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_jobs&lt;/strong&gt; - List workflow jobs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: Filters jobs by their completed_at timestamp (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_run_artifacts&lt;/strong&gt; - List workflow artifacts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_runs&lt;/strong&gt; - List workflow runs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;actor&lt;/code&gt;: Returns someone's workflow runs. Use the login for the user who created the workflow run. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Returns workflow runs associated with a branch. Use the name of the branch. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: Returns workflow runs for a specific event type (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;status&lt;/code&gt;: Returns workflow runs with the check run status (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;workflow_id&lt;/code&gt;: The workflow ID or workflow file name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflows&lt;/strong&gt; - List workflows&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;rerun_failed_jobs&lt;/strong&gt; - Rerun failed jobs&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;rerun_workflow_run&lt;/strong&gt; - Rerun workflow run&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: The unique identifier of the workflow run (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;run_workflow&lt;/strong&gt; - Run workflow&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;inputs&lt;/code&gt;: Inputs the workflow accepts (object, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: The git reference for the workflow. The reference can be a branch or tag name. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;workflow_id&lt;/code&gt;: The workflow ID (numeric) or workflow file name (e.g., main.yml, ci.yaml) (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Code Security&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_code_scanning_alert&lt;/strong&gt; - Get code scanning alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_code_scanning_alerts&lt;/strong&gt; - List code scanning alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: The Git reference for the results you want to list. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: Filter code scanning alerts by severity (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter code scanning alerts by state. Defaults to open (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tool_name&lt;/code&gt;: The name of the tool used for code scanning. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Context&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_me&lt;/strong&gt; - Get my user profile&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;No parameters required&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_team_members&lt;/strong&gt; - Get team members&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;org&lt;/code&gt;: Organization login (owner) that contains the team. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;team_slug&lt;/code&gt;: Team slug (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_teams&lt;/strong&gt; - Get teams&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;user&lt;/code&gt;: Username to get teams for. If not provided, uses the authenticated user. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Dependabot&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_dependabot_alert&lt;/strong&gt; - Get dependabot alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_dependabot_alerts&lt;/strong&gt; - List dependabot alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: Filter dependabot alerts by severity (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter dependabot alerts by state. Defaults to open (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Discussions&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_discussion&lt;/strong&gt; - Get discussion&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;discussionNumber&lt;/code&gt;: Discussion Number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_discussion_comments&lt;/strong&gt; - Get discussion comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page's PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;discussionNumber&lt;/code&gt;: Discussion Number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_discussion_categories&lt;/strong&gt; - List discussion categories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. If not provided, discussion categories will be queried at the organisation level. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_discussions&lt;/strong&gt; - List discussions&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page's PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;category&lt;/code&gt;: Optional filter by discussion category ID. If provided, only discussions with this category are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Order direction. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;orderBy&lt;/code&gt;: Order discussions by field. If provided, the 'direction' also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. If not provided, discussions will be queried at the organisation level. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Gists&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_gist&lt;/strong&gt; - Create Gist&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content for simple single-file gist creation (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Description of the gist (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: Filename for simple single-file gist creation (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;public&lt;/code&gt;: Whether the gist is public (boolean, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_gists&lt;/strong&gt; - List Gists&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Only gists updated after this time (ISO 8601 timestamp) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;username&lt;/code&gt;: GitHub username (omit for authenticated user's gists) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_gist&lt;/strong&gt; - Update Gist&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content for the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Updated description of the gist (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: Filename to update or create (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;gist_id&lt;/code&gt;: ID of the gist to update (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Issues&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_issue_comment&lt;/strong&gt; - Add comment to issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Comment content (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number to comment on (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_sub_issue&lt;/strong&gt; - Add sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;replace_parent&lt;/code&gt;: When true, replaces the sub-issue's current parent issue (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to add. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;assign_copilot_to_issue&lt;/strong&gt; - Assign Copilot to issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issueNumber&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_issue&lt;/strong&gt; - Open new issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;assignees&lt;/code&gt;: Usernames to assign to this issue (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Issue body content (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: Labels to apply to this issue (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;milestone&lt;/code&gt;: Milestone number (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: Issue title (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: Type of this issue (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_issue&lt;/strong&gt; - Get issue details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_issue_comments&lt;/strong&gt; - Get issue comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_issue_types&lt;/strong&gt; - List available issue types&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The organization owner of the repository (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_issues&lt;/strong&gt; - List issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after&lt;/code&gt;: Cursor for pagination. Use the endCursor from the previous page's PageInfo for GraphQL APIs. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Order direction. If provided, the 'orderBy' also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: Filter by labels (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;orderBy&lt;/code&gt;: Order issues by field. If provided, the 'direction' also needs to be provided. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Filter by date (ISO 8601 timestamp) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state, by default both open and closed issues are returned when not provided (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_sub_issues&lt;/strong&gt; - List sub-issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (default: 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;per_page&lt;/code&gt;: Number of results per page (max 100, default: 30) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;remove_sub_issue&lt;/strong&gt; - Remove sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to remove. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;reprioritize_sub_issue&lt;/strong&gt; - Reprioritize sub-issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;after_id&lt;/code&gt;: The ID of the sub-issue to be prioritized after (either after_id OR before_id should be specified) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;before_id&lt;/code&gt;: The ID of the sub-issue to be prioritized before (either after_id OR before_id should be specified) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: The number of the parent issue (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sub_issue_id&lt;/code&gt;: The ID of the sub-issue to reprioritize. ID is not the same as issue number (number, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_issues&lt;/strong&gt; - Search issues&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only issues for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub issues search syntax (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only issues for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by number of matches of categories, defaults to best match (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_issue&lt;/strong&gt; - Edit issue&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;assignees&lt;/code&gt;: New assignees (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: New description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number to update (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: New labels (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;milestone&lt;/code&gt;: New milestone number (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: New state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: New title (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: New issue type (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Notifications&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;dismiss_notification&lt;/strong&gt; - Dismiss notification&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: The new state of the notification (read/done) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;threadID&lt;/code&gt;: The ID of the notification thread (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_notification_details&lt;/strong&gt; - Get notification details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;notificationID&lt;/code&gt;: The ID of the notification (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_notifications&lt;/strong&gt; - List notifications&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;before&lt;/code&gt;: Only show notifications updated before the given time (ISO 8601 format) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: Filter notifications to, use default unless specified. Read notifications are ones that have already been acknowledged by the user. Participating notifications are those that the user is directly involved in, such as issues or pull requests they have commented on or created. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only notifications for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only notifications for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Only show notifications updated after the given time (ISO 8601 format) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;manage_notification_subscription&lt;/strong&gt; - Manage notification subscription&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Action to perform: ignore, watch, or delete the notification subscription. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;notificationID&lt;/code&gt;: The ID of the notification thread. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;manage_repository_notification_subscription&lt;/strong&gt; - Manage repository notification subscription&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Action to perform: ignore, watch, or delete the repository notification subscription. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The account owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;mark_all_notifications_read&lt;/strong&gt; - Mark all notifications as read&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;lastReadAt&lt;/code&gt;: Describes the last point that notifications were checked (optional). Default: Now (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only notifications for this repository are marked as read. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only notifications for this repository are marked as read. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Organizations&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;search_orgs&lt;/strong&gt; - Search organizations 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Organization search query. Examples: 'microsoft', 'location:california', 'created:&amp;gt;=2025-01-01'. Search is automatically scoped to type:org. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by category (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Pull Requests&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_comment_to_pending_review&lt;/strong&gt; - Add review comment to the requester's latest pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: The text of the review comment (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;line&lt;/code&gt;: The line of the blob in the pull request diff that the comment applies to. For multi-line comments, the last line of the range (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The relative path to the file that necessitates a comment (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;side&lt;/code&gt;: The side of the diff to comment on. LEFT indicates the previous state, RIGHT indicates the new state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;startLine&lt;/code&gt;: For multi-line comments, the first line of the range that the comment applies to (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;startSide&lt;/code&gt;: For multi-line comments, the starting side of the diff that the comment applies to. LEFT indicates the previous state, RIGHT indicates the new state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;subjectType&lt;/code&gt;: The level at which the comment is targeted (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_and_submit_pull_request_review&lt;/strong&gt; - Create and submit a pull request review without comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Review comment text (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;commitID&lt;/code&gt;: SHA of commit to review (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: Review action to perform (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_pending_pull_request_review&lt;/strong&gt; - Create pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;commitID&lt;/code&gt;: SHA of commit to review (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_pull_request&lt;/strong&gt; - Open new pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: Branch to merge into (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: PR description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: Create as draft PR (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;head&lt;/code&gt;: Branch containing changes (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;maintainer_can_modify&lt;/code&gt;: Allow maintainer edits (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: PR title (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_pending_pull_request_review&lt;/strong&gt; - Delete the requester's latest pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request&lt;/strong&gt; - Get pull request details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_comments&lt;/strong&gt; - Get pull request comments&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_diff&lt;/strong&gt; - Get pull request diff&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_files&lt;/strong&gt; - Get pull request files&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_reviews&lt;/strong&gt; - Get pull request reviews&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_status&lt;/strong&gt; - Get pull request status checks&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_pull_requests&lt;/strong&gt; - List pull requests&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: Filter by base branch (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Sort direction (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;head&lt;/code&gt;: Filter by head user/org and branch (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort by (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;merge_pull_request&lt;/strong&gt; - Merge pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;commit_message&lt;/code&gt;: Extra detail for merge commit (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;commit_title&lt;/code&gt;: Title for merge commit (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;merge_method&lt;/code&gt;: Merge method (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;request_copilot_review&lt;/strong&gt; - Request Copilot review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_pull_requests&lt;/strong&gt; - Search pull requests&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner. If provided with repo, only pull requests for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub pull request search syntax (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name. If provided with owner, only pull requests for this repository are listed. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field by number of matches of categories, defaults to best match (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;submit_pending_pull_request_review&lt;/strong&gt; - Submit the requester's latest pending pull request review&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: The text of the review comment (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: The event to perform (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_pull_request&lt;/strong&gt; - Edit pull request&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: New base branch name (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: New description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: Mark pull request as draft (true) or ready for review (false) (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;maintainer_can_modify&lt;/code&gt;: Allow maintainer edits (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number to update (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;reviewers&lt;/code&gt;: GitHub usernames to request reviews from (string[], optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: New state (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: New title (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_pull_request_branch&lt;/strong&gt; - Update pull request branch&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;expectedHeadSha&lt;/code&gt;: The expected SHA of the pull request's HEAD ref (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Repositories&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_branch&lt;/strong&gt; - Create branch&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Name for new branch (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;from_branch&lt;/code&gt;: Source branch (defaults to repo default) (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_or_update_file&lt;/strong&gt; - Create or update file&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to create/update the file in (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Content of the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path where to create/update the file (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Required if updating an existing file. The blob SHA of the file being replaced. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_repository&lt;/strong&gt; - Create repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;autoInit&lt;/code&gt;: Initialize with README (boolean, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Repository description (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;private&lt;/code&gt;: Whether repo should be private (boolean, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_file&lt;/strong&gt; - Delete file&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to delete the file from (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path to the file to delete (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;fork_repository&lt;/strong&gt; - Fork repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;organization&lt;/code&gt;: Organization to fork to (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_commit&lt;/strong&gt; - Get commit details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Commit SHA, branch name, or tag name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_file_contents&lt;/strong&gt; - Get file or directory contents&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (username or organization) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path to file/directory (directories must end with a slash '/') (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: Accepts optional git refs such as &lt;code&gt;refs/tags/{tag}&lt;/code&gt;, &lt;code&gt;refs/heads/{branch}&lt;/code&gt; or &lt;code&gt;refs/pull/{pr_number}/head&lt;/code&gt; (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Accepts optional commit SHA. If specified, it will be used instead of ref (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_latest_release&lt;/strong&gt; - Get latest release&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_tag&lt;/strong&gt; - Get tag details&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;tag&lt;/code&gt;: Tag name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_branches&lt;/strong&gt; - List branches&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_commits&lt;/strong&gt; - List commits&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;author&lt;/code&gt;: Author username or email address to filter commits by (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Commit SHA, branch or tag name to list commits of. If not provided, uses the default branch of the repository. If a commit SHA is provided, will list commits up to that SHA. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_releases&lt;/strong&gt; - List releases&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_tags&lt;/strong&gt; - List tags&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;push_files&lt;/strong&gt; - Push files to repository&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to push to (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;files&lt;/code&gt;: Array of file objects to push, each object with path (string) and content (string) (object[], required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_code&lt;/strong&gt; - Search code&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order for results (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query using GitHub's powerful code search syntax. Examples: 'content:Skill language:Java org:github', 'NOT is:archived language:Python OR language:go', 'repo:github/github-mcp-server'. Supports exact matching, language filters, path filters, and more. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field ('indexed' only) (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_repositories&lt;/strong&gt; - Search repositories&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Repository search query. Examples: 'machine learning in:name stars:&amp;gt;1000 language:python', 'topic:react', 'user:facebook'. Supports advanced search syntax for precise filtering. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Secret Protection&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_secret_scanning_alert&lt;/strong&gt; - Get secret scanning alert&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: The number of the alert. (number, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_secret_scanning_alerts&lt;/strong&gt; - List secret scanning alerts&lt;/p&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The owner of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;resolution&lt;/code&gt;: Filter by resolution (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;secret_type&lt;/code&gt;: A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Users&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;search_users&lt;/strong&gt; - Search users 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number for pagination (min 1) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page for pagination (min 1, max 100) (number, optional)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: User search query. Examples: 'john smith', 'location:seattle', 'followers:&amp;gt;100'. Search is automatically scoped to type:user. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort users by number of followers or repositories, or when the person joined GitHub. (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;!-- END AUTOMATED TOOLS --&gt; 
&lt;h3&gt;Additional Tools in Remote Github MCP Server&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;Copilot coding agent&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;create_pull_request_with_copilot&lt;/strong&gt; - Perform task with GitHub Copilot coding agent 
   &lt;ul&gt; 
    &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner. You can guess the owner, but confirm it with the user before proceeding. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name. You can guess the repository name, but confirm it with the user before proceeding. (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;problem_statement&lt;/code&gt;: Detailed description of the task to be performed (e.g., 'Implement a feature that does X', 'Fix bug Y', etc.) (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: Title for the pull request that will be created (string, required)&lt;/li&gt; 
    &lt;li&gt;&lt;code&gt;base_ref&lt;/code&gt;: Git reference (e.g., branch) that the agent will start its work from. If not specified, defaults to the repository's default branch (string, optional)&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h4&gt;Specifying Toolsets&lt;/h4&gt; 
&lt;p&gt;To specify toolsets you want available to the LLM, you can pass an allow-list in two ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Command Line Argument&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;github-mcp-server --toolsets repos,issues,pull_requests,actions,code_security
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Environment Variable&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;GITHUB_TOOLSETS="repos,issues,pull_requests,actions,code_security" ./github-mcp-server
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The environment variable &lt;code&gt;GITHUB_TOOLSETS&lt;/code&gt; takes precedence over the command line argument if both are provided.&lt;/p&gt; 
&lt;h3&gt;Using Toolsets With Docker&lt;/h3&gt; 
&lt;p&gt;When using Docker, you can pass the toolsets as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_TOOLSETS="repos,issues,pull_requests,actions,code_security,experiments" \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The "all" Toolset&lt;/h3&gt; 
&lt;p&gt;The special toolset &lt;code&gt;all&lt;/code&gt; can be provided to enable all available toolsets regardless of any other configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./github-mcp-server --toolsets all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or using the environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;GITHUB_TOOLSETS="all" ./github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dynamic Tool Discovery&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.&lt;/p&gt; 
&lt;p&gt;Instead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the sheer number of tools available.&lt;/p&gt; 
&lt;h3&gt;Using Dynamic Tool Discovery&lt;/h3&gt; 
&lt;p&gt;When using the binary, you can pass the &lt;code&gt;--dynamic-toolsets&lt;/code&gt; flag.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./github-mcp-server --dynamic-toolsets
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using Docker, you can pass the toolsets as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_DYNAMIC_TOOLSETS=1 \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Read-Only Mode&lt;/h2&gt; 
&lt;p&gt;To run the server in read-only mode, you can use the &lt;code&gt;--read-only&lt;/code&gt; flag. This will only offer read-only tools, preventing any modifications to repositories, issues, pull requests, etc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./github-mcp-server --read-only
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using Docker, you can pass the read-only mode as an environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -i --rm \
  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \
  -e GITHUB_READ_ONLY=1 \
  ghcr.io/github/github-mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;GitHub Enterprise Server and Enterprise Cloud with data residency (ghe.com)&lt;/h2&gt; 
&lt;p&gt;The flag &lt;code&gt;--gh-host&lt;/code&gt; and the environment variable &lt;code&gt;GITHUB_HOST&lt;/code&gt; can be used to set the hostname for GitHub Enterprise Server or GitHub Enterprise Cloud with data residency.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For GitHub Enterprise Server, prefix the hostname with the &lt;code&gt;https://&lt;/code&gt; URI scheme, as it otherwise defaults to &lt;code&gt;http://&lt;/code&gt;, which GitHub Enterprise Server does not support.&lt;/li&gt; 
 &lt;li&gt;For GitHub Enterprise Cloud with data residency, use &lt;code&gt;https://YOURSUBDOMAIN.ghe.com&lt;/code&gt; as the hostname.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;"github": {
    "command": "docker",
    "args": [
    "run",
    "-i",
    "--rm",
    "-e",
    "GITHUB_PERSONAL_ACCESS_TOKEN",
    "-e",
    "GITHUB_HOST",
    "ghcr.io/github/github-mcp-server"
    ],
    "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${input:github_token}",
        "GITHUB_HOST": "https://&amp;lt;your GHES or ghe.com domain name&amp;gt;"
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;i18n / Overriding Descriptions&lt;/h2&gt; 
&lt;p&gt;The descriptions of the tools can be overridden by creating a &lt;code&gt;github-mcp-server-config.json&lt;/code&gt; file in the same directory as the binary.&lt;/p&gt; 
&lt;p&gt;The file should contain a JSON object with the tool names as keys and the new descriptions as values. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "TOOL_ADD_ISSUE_COMMENT_DESCRIPTION": "an alternative description",
  "TOOL_CREATE_BRANCH_DESCRIPTION": "Create a new branch in a GitHub repository"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can create an export of the current translations by running the binary with the &lt;code&gt;--export-translations&lt;/code&gt; flag.&lt;/p&gt; 
&lt;p&gt;This flag will preserve any translations/overrides you have made, while adding any new translations that have been added to the binary since the last time you exported.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./github-mcp-server --export-translations
cat github-mcp-server-config.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use ENV vars to override the descriptions. The environment variable names are the same as the keys in the JSON file, prefixed with &lt;code&gt;GITHUB_MCP_&lt;/code&gt; and all uppercase.&lt;/p&gt; 
&lt;p&gt;For example, to override the &lt;code&gt;TOOL_ADD_ISSUE_COMMENT_DESCRIPTION&lt;/code&gt; tool, you can set the following environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;export GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION="an alternative description"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Library Usage&lt;/h2&gt; 
&lt;p&gt;The exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href="https://raw.githubusercontent.com/github/github-mcp-server/main/LICENSE"&gt;MIT&lt;/a&gt; for the full terms.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sst/opencode</title>
      <link>https://github.com/sst/opencode</link>
      <description>&lt;p&gt;AI coding agent, built for the terminal.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://opencode.ai"&gt; 
  &lt;picture&gt; 
   &lt;source srcset="packages/web/src/assets/logo-ornate-dark.svg" media="(prefers-color-scheme: dark)" /&gt; 
   &lt;source srcset="packages/web/src/assets/logo-ornate-light.svg" media="(prefers-color-scheme: light)" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/sst/opencode/dev/packages/web/src/assets/logo-ornate-light.svg?sanitize=true" alt="opencode logo" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;AI coding agent, built for the terminal.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://opencode.ai/discord"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1391832426048651334?style=flat-square&amp;amp;label=discord" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/opencode-ai"&gt;&lt;img alt="npm" src="https://img.shields.io/npm/v/opencode-ai?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/sst/opencode/actions/workflows/publish.yml"&gt;&lt;img alt="Build status" src="https://img.shields.io/github/actions/workflow/status/sst/opencode/publish.yml?style=flat-square&amp;amp;branch=dev" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opencode.ai"&gt;&lt;img src="https://raw.githubusercontent.com/sst/opencode/dev/packages/web/src/assets/lander/screenshot.png" alt="opencode Terminal UI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# YOLO
curl -fsSL https://opencode.ai/install | bash

# Package managers
npm i -g opencode-ai@latest        # or bun/pnpm/yarn
brew install sst/tap/opencode      # macOS and Linux
paru -S opencode-bin               # Arch Linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Remove versions older than 0.1.x before installing.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installation Directory&lt;/h4&gt; 
&lt;p&gt;The install script respects the following priority order for the installation path:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;$OPENCODE_INSTALL_DIR&lt;/code&gt; - Custom installation directory&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_BIN_DIR&lt;/code&gt; - XDG Base Directory Specification compliant path&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/bin&lt;/code&gt; - Standard user binary directory (if exists or can be created)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.opencode/bin&lt;/code&gt; - Default fallback&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Examples
OPENCODE_INSTALL_DIR=/usr/local/bin curl -fsSL https://opencode.ai/install | bash
XDG_BIN_DIR=$HOME/.local/bin curl -fsSL https://opencode.ai/install | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For more info on how to configure opencode &lt;a href="https://opencode.ai/docs"&gt;&lt;strong&gt;head over to our docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;opencode is an opinionated tool so any fundamental feature needs to go through a design process with the core team.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] We do not accept PRs for core features.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;However we still merge a ton of PRs - you can contribute:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug fixes&lt;/li&gt; 
 &lt;li&gt;Improvements to LLM performance&lt;/li&gt; 
 &lt;li&gt;Support for new providers&lt;/li&gt; 
 &lt;li&gt;Fixes for env specific quirks&lt;/li&gt; 
 &lt;li&gt;Missing standard behavior&lt;/li&gt; 
 &lt;li&gt;Documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Take a look at the git history to see what kind of PRs we end up merging.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you do not follow the above guidelines we might close your PR.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To run opencode locally you need.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bun&lt;/li&gt; 
 &lt;li&gt;Golang 1.24.x&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And run.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ bun install
$ bun dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Development Notes&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;API Client&lt;/strong&gt;: After making changes to the TypeScript API endpoints in &lt;code&gt;packages/opencode/src/server/server.ts&lt;/code&gt;, you will need the opencode team to generate a new stainless sdk for the clients.&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;h4&gt;How is this different than Claude Code?&lt;/h4&gt; 
&lt;p&gt;It's very similar to Claude Code in terms of capability. Here are the key differences:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open source&lt;/li&gt; 
 &lt;li&gt;Not coupled to any provider. Although Anthropic is recommended, opencode can be used with OpenAI, Google or even local models. As models evolve the gaps between them will close and pricing will drop so being provider-agnostic is important.&lt;/li&gt; 
 &lt;li&gt;A focus on TUI. opencode is built by neovim users and the creators of &lt;a href="https://terminal.shop"&gt;terminal.shop&lt;/a&gt;; we are going to push the limits of what's possible in the terminal.&lt;/li&gt; 
 &lt;li&gt;A client/server architecture. This for example can allow opencode to run on your computer, while you can drive it remotely from a mobile app. Meaning that the TUI frontend is just one of the possible clients.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;What's the other repo?&lt;/h4&gt; 
&lt;p&gt;The other confusingly named repo has no relation to this one. You can &lt;a href="https://x.com/thdxr/status/1933561254481666466"&gt;read the story behind it here&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;Join our community&lt;/strong&gt; &lt;a href="https://discord.gg/opencode"&gt;Discord&lt;/a&gt; | &lt;a href="https://www.youtube.com/c/sst-dev"&gt;YouTube&lt;/a&gt; | &lt;a href="https://x.com/SST_dev"&gt;X.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nats-io/nats-server</title>
      <link>https://github.com/nats-io/nats-server</link>
      <description>&lt;p&gt;High-Performance server for NATS.io, the cloud and edge native messaging system.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/nats-io/nats-server/main/logos/nats-horizontal-color.png" width="300" alt="NATS Logo" /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://nats.io"&gt;NATS&lt;/a&gt; is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (&lt;a href="https://cncf.io"&gt;CNCF&lt;/a&gt;). NATS has over &lt;a href="https://nats.io/download/"&gt;40 client language implementations&lt;/a&gt;, and its server can run on-premise, in the cloud, at the edge, and even on a Raspberry Pi. NATS can secure and simplify design and operation of modern distributed systems.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache2-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nats-io/nats-server/actions/workflows/tests.yaml"&gt;&lt;img src="https://github.com/nats-io/nats-server/actions/workflows/tests.yaml/badge.svg?branch=main" alt="Build" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nats-io/nats-server/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/nats-io/nats-server" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://slack.nats.io"&gt;&lt;img src="https://img.shields.io/badge/chat-on%20slack-green" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/nats-io/nats-server?branch=main"&gt;&lt;img src="https://coveralls.io/repos/github/nats-io/nats-server/badge.svg?branch=main" alt="Coverage" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/_/nats"&gt;&lt;img src="https://img.shields.io/docker/pulls/_/nats.svg?sanitize=true" alt="Docker Downloads" /&gt;&lt;/a&gt; &lt;a href="https://somsubhra.github.io/github-release-stats/?username=nats-io&amp;amp;repository=nats-server"&gt;&lt;img src="https://img.shields.io/github/downloads/nats-io/nats-server/total.svg?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/1895"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/1895/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/nats/nats"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/nats" alt="Artifact Hub" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nats.io"&gt;Official Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nats.io"&gt;Official Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nats.io/reference/faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href="https://rethink.synadia.com/episodes/1/"&gt;a video overview&lt;/a&gt; of NATS.&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href="https://www.youtube.com/watch?v=sm63oAVPqAM"&gt;this video from SCALE 13x&lt;/a&gt; to learn more about its origin story and design philosophy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/nats_io"&gt;Twitter&lt;/a&gt;: Follow us on Twitter!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/natsio"&gt;Google Groups&lt;/a&gt;: Where you can ask questions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://natsio.slack.com"&gt;Slack&lt;/a&gt;: Click &lt;a href="https://slack.nats.io"&gt;here&lt;/a&gt; to join. You can ask questions to our maintainers and to the rich and active community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are interested in contributing to NATS, read about our...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nats-io/nats-server/main/CONTRIBUTING.md"&gt;Contributing guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nats-io"&gt;Report issues or propose Pull Requests&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The NATS product roadmap can be found &lt;a href="https://nats.io/about/#roadmap"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;Who uses NATS? See our &lt;a href="https://nats.io/#who-uses-nats"&gt;list of users&lt;/a&gt; on &lt;a href="https://nats.io"&gt;https://nats.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;h3&gt;Security Audit&lt;/h3&gt; 
&lt;p&gt;A third party security audit was performed by Trail of Bits following engagement by the Open Source Technology Improvement Fund (OSTIF). You can see the &lt;a href="https://github.com/trailofbits/publications/raw/master/reviews/2025-04-ostif-nats-securityreview.pdf"&gt;full report from April 2025 here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Reporting Security Vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you've found a vulnerability or a potential vulnerability in the NATS server, please let us know at &lt;a href="mailto:security@nats.io"&gt;nats-security&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless otherwise noted, the NATS source files are distributed under the Apache Version 2.0 license found in the LICENSE file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>steveiliop56/tinyauth</title>
      <link>https://github.com/steveiliop56/tinyauth</link>
      <description>&lt;p&gt;The simplest way to protect your apps with a login screen.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img alt="Tinyauth" title="Tinyauth" width="96" src="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/assets/logo-rounded.png" /&gt; 
 &lt;h1&gt;Tinyauth&lt;/h1&gt; 
 &lt;p&gt;The easiest way to secure your apps with a login screen.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;img alt="License" src="https://img.shields.io/github/license/steveiliop56/tinyauth" /&gt; 
 &lt;img alt="Release" src="https://img.shields.io/github/v/release/steveiliop56/tinyauth" /&gt; 
 &lt;img alt="Issues" src="https://img.shields.io/github/issues/steveiliop56/tinyauth" /&gt; 
 &lt;img alt="Tinyauth CI" src="https://github.com/steveiliop56/tinyauth/actions/workflows/ci.yml/badge.svg?sanitize=true" /&gt; 
 &lt;a title="Crowdin" target="_blank" href="https://crowdin.com/project/tinyauth"&gt;&lt;img src="https://badges.crowdin.net/tinyauth/localized.svg?sanitize=true" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;Tinyauth is a simple authentication middleware that adds a simple login screen or OAuth with Google, Github and any provider to all of your docker apps. It supports all the popular proxies like Traefik, Nginx and Caddy.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/assets/screenshot.png" alt="Screenshot" /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Tinyauth is in active development and configuration may change often. Please make sure to carefully read the release notes before updating.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can easily get started with Tinyauth by following the guide in the &lt;a href="https://tinyauth.app/docs/getting-started.html"&gt;documentation&lt;/a&gt;. There is also an available &lt;a href="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/docker-compose.example.yml"&gt;docker compose&lt;/a&gt; file that has Traefik, Whoami and Tinyauth to demonstrate its capabilities.&lt;/p&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;If you are still not sure if Tinyauth suits your needs you can try out the &lt;a href="https://demo.tinyauth.app"&gt;demo&lt;/a&gt;. The default username is &lt;code&gt;user&lt;/code&gt; and the default password is &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find documentation and guides on all of the available configuration of Tinyauth in the &lt;a href="https://tinyauth.app"&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Discord&lt;/h2&gt; 
&lt;p&gt;Tinyauth has a &lt;a href="https://discord.gg/eHzVaCzRRd"&gt;discord&lt;/a&gt; server. Feel free to hop in to chat about self-hosting, homelabs and of course Tinyauth. See you there!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;All contributions to the codebase are welcome! If you have any free time feel free to pick up an &lt;a href="https://github.com/steveiliop56/tinyauth/issues"&gt;issue&lt;/a&gt; or add your own missing features. Make sure to check out the &lt;a href="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; for instructions on how to get the development server up and running.&lt;/p&gt; 
&lt;h2&gt;Localization&lt;/h2&gt; 
&lt;p&gt;If you would like to help translate Tinyauth into more languages, visit the &lt;a href="https://crowdin.com/project/tinyauth"&gt;Crowdin&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Tinyauth is licensed under the GNU General Public License v3.0. TL;DR — You may copy, distribute and modify the software as long as you track changes/dates in source files. Any modifications to or software including (via compiler) GPL-licensed code must also be made available under the GPL along with build &amp;amp; install instructions. For more information about the license check the &lt;a href="https://raw.githubusercontent.com/steveiliop56/tinyauth/main/LICENSE"&gt;license&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;A big thank you to the following people for providing me with more coffee:&lt;/p&gt; 
&lt;!-- sponsors --&gt;
&lt;a href="https://github.com/erwinkramer"&gt;&lt;img src="https://github.com/erwinkramer.png" width="64px" alt="User avatar: erwinkramer" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/nicotsx"&gt;&lt;img src="https://github.com/nicotsx.png" width="64px" alt="User avatar: nicotsx" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/SimpleHomelab"&gt;&lt;img src="https://github.com/SimpleHomelab.png" width="64px" alt="User avatar: SimpleHomelab" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/jmadden91"&gt;&lt;img src="https://github.com/jmadden91.png" width="64px" alt="User avatar: jmadden91" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/tribor"&gt;&lt;img src="https://github.com/tribor.png" width="64px" alt="User avatar: tribor" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/eliasbenb"&gt;&lt;img src="https://github.com/eliasbenb.png" width="64px" alt="User avatar: eliasbenb" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="https://github.com/afunworm"&gt;&lt;img src="https://github.com/afunworm.png" width="64px" alt="User avatar: afunworm" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;!-- sponsors --&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Freepik&lt;/strong&gt; for providing the police hat and badge.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Renee French&lt;/strong&gt; for the original gopher logo.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Coderabbit AI&lt;/strong&gt; for providing free AI code reviews.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Syrhu&lt;/strong&gt; for providing the background image of the app.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#steveiliop56/tinyauth&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=steveiliop56/tinyauth&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bluenviron/mediamtx</title>
      <link>https://github.com/bluenviron/mediamtx</link>
      <description>&lt;p&gt;Ready-to-use SRT / WebRTC / RTSP / RTMP / LL-HLS media server and media proxy that allows to read, publish, proxy, record and playback video and audio streams.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;img src="https://raw.githubusercontent.com/bluenviron/mediamtx/main/logo.png" alt="MediaMTX / rtsp-simple-server" /&gt; &lt;br /&gt; &lt;br /&gt; &lt;p&gt;&lt;a href="https://github.com/bluenviron/mediamtx/actions/workflows/code_test.yml"&gt;&lt;img src="https://github.com/bluenviron/mediamtx/actions/workflows/code_test.yml/badge.svg?sanitize=true" alt="Test" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bluenviron/mediamtx/actions/workflows/code_lint.yml"&gt;&lt;img src="https://github.com/bluenviron/mediamtx/actions/workflows/code_lint.yml/badge.svg?sanitize=true" alt="Lint" /&gt;&lt;/a&gt; &lt;a href="https://app.codecov.io/gh/bluenviron/mediamtx/tree/main"&gt;&lt;img src="https://codecov.io/gh/bluenviron/mediamtx/branch/main/graph/badge.svg?sanitize=true" alt="CodeCov" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bluenviron/mediamtx/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/bluenviron/mediamtx" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/bluenviron/mediamtx"&gt;&lt;img src="https://img.shields.io/badge/docker-bluenviron/mediamtx-blue" alt="Docker Hub" /&gt;&lt;/a&gt; &lt;a href="https://bluenviron.github.io/mediamtx"&gt;&lt;img src="https://img.shields.io/badge/api-documentation-blue" alt="API Documentation" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;em&gt;MediaMTX&lt;/em&gt; is a ready-to-use and zero-dependency real-time media server and media proxy that allows to publish, read, proxy, record and playback video and audio streams. It has been conceived as a "media router" that routes media streams from one end to the other.&lt;/p&gt; 
&lt;p&gt;Live streams can be published to the server with:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;protocol&lt;/th&gt; 
   &lt;th&gt;variants&lt;/th&gt; 
   &lt;th&gt;video codecs&lt;/th&gt; 
   &lt;th&gt;audio codecs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-clients"&gt;SRT clients&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-cameras-and-servers"&gt;SRT cameras and servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-clients"&gt;WebRTC clients&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WHIP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers"&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, G722, G711 (PCMA, PCMU)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-servers"&gt;WebRTC servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WHEP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers"&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, G722, G711 (PCMA, PCMU)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients"&gt;RTSP clients&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;UDP, TCP, RTSPS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG and any RTP-compatible codec&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G726, G722, G711 (PCMA, PCMU), LPCM and any RTP-compatible codec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-cameras-and-servers"&gt;RTSP cameras and servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;UDP, UDP-Multicast, TCP, RTSPS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG and any RTP-compatible codec&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G726, G722, G711 (PCMA, PCMU), LPCM and any RTP-compatible codec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-clients"&gt;RTMP clients&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP, RTMPS, Enhanced RTMP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, H265, H264&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G711 (PCMA, PCMU), LPCM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-cameras-and-servers"&gt;RTMP cameras and servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP, RTMPS, Enhanced RTMP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, H265, H264&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G711 (PCMA, PCMU), LPCM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls-cameras-and-servers"&gt;HLS cameras and servers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Low-Latency HLS, MP4-based HLS, legacy HLS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers-1"&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#mpeg-ts"&gt;MPEG-TS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MPEG-TS over UDP, MPEG-TS over Unix sockets&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtp"&gt;RTP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTP over UDP, RTP over Unix sockets&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG and any RTP-compatible codec&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G726, G722, G711 (PCMA, PCMU), LPCM and any RTP-compatible codec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#raspberry-pi-cameras"&gt;Raspberry Pi Cameras&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;H264&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Live streams can be read from the server with:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;protocol&lt;/th&gt; 
   &lt;th&gt;variants&lt;/th&gt; 
   &lt;th&gt;video codecs&lt;/th&gt; 
   &lt;th&gt;audio codecs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt"&gt;SRT&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc"&gt;WebRTC&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WHEP&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers"&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, G722, G711 (PCMA, PCMU)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp"&gt;RTSP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;UDP, UDP-Multicast, TCP, RTSPS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, VP8, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG and any RTP-compatible codec&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G726, G722, G711 (PCMA, PCMU), LPCM and any RTP-compatible codec&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp"&gt;RTMP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP, RTMPS, Enhanced RTMP&lt;/td&gt; 
   &lt;td&gt;H264&lt;/td&gt; 
   &lt;td&gt;MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls"&gt;HLS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Low-Latency HLS, MP4-based HLS, legacy HLS&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers-1"&gt;H265&lt;/a&gt;, H264&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Live streams be recorded and played back with:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;format&lt;/th&gt; 
   &lt;th&gt;video codecs&lt;/th&gt; 
   &lt;th&gt;audio codecs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#record-streams-to-disk"&gt;fMP4&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;AV1, VP9, H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video, M-JPEG&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3, G711 (PCMA, PCMU), LPCM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#record-streams-to-disk"&gt;MPEG-TS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;H265, H264, MPEG-4 Video (H263, Xvid), MPEG-1/2 Video&lt;/td&gt; 
   &lt;td&gt;Opus, MPEG-4 Audio (AAC), MPEG-1/2 Audio (MP3), AC-3&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Publish live streams to the server&lt;/li&gt; 
 &lt;li&gt;Read live streams from the server&lt;/li&gt; 
 &lt;li&gt;Streams are automatically converted from a protocol to another&lt;/li&gt; 
 &lt;li&gt;Serve several streams at once in separate paths&lt;/li&gt; 
 &lt;li&gt;Record streams to disk&lt;/li&gt; 
 &lt;li&gt;Playback recorded streams&lt;/li&gt; 
 &lt;li&gt;Authenticate users&lt;/li&gt; 
 &lt;li&gt;Redirect readers to other RTSP servers (load balancing)&lt;/li&gt; 
 &lt;li&gt;Control the server through the Control API&lt;/li&gt; 
 &lt;li&gt;Reload the configuration without disconnecting existing clients (hot reloading)&lt;/li&gt; 
 &lt;li&gt;Read Prometheus-compatible metrics&lt;/li&gt; 
 &lt;li&gt;Run hooks (external commands) when clients connect, disconnect, read or publish streams&lt;/li&gt; 
 &lt;li&gt;Compatible with Linux, Windows and macOS, does not require any dependency or interpreter, it's a single executable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note about rtsp-simple-server&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;rtsp-simple-server&lt;/em&gt; has been rebranded as &lt;em&gt;MediaMTX&lt;/em&gt;. The reason is pretty obvious: this project started as a RTSP server but has evolved into a much more versatile product that is not tied to the RTSP protocol anymore. Nothing will change regarding license, features and backward compatibility.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standalone-binary"&gt;Standalone binary&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#docker-image"&gt;Docker image&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#arch-linux-package"&gt;Arch Linux package&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#freebsd"&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#openwrt-binary"&gt;OpenWrt binary&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#basic-usage"&gt;Basic usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#publish-to-the-server"&gt;Publish to the server&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-software"&gt;By software&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg"&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer"&gt;GStreamer&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio"&gt;OBS Studio&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#opencv"&gt;OpenCV&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#unity"&gt;Unity&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers"&gt;Web browsers&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-device"&gt;By device&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#generic-webcam"&gt;Generic webcam&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#raspberry-pi-cameras"&gt;Raspberry Pi Cameras&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#adding-audio"&gt;Adding audio&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#secondary-stream"&gt;Secondary stream&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-protocol"&gt;By protocol&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-clients"&gt;SRT clients&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-cameras-and-servers"&gt;SRT cameras and servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-clients"&gt;WebRTC clients&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-servers"&gt;WebRTC servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients"&gt;RTSP clients&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-cameras-and-servers"&gt;RTSP cameras and servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-clients"&gt;RTMP clients&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-cameras-and-servers"&gt;RTMP cameras and servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls-cameras-and-servers"&gt;HLS cameras and servers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#mpeg-ts"&gt;MPEG-TS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtp"&gt;RTP&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#read-from-the-server"&gt;Read from the server&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-software-1"&gt;By software&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1"&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1"&gt;GStreamer&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc"&gt;VLC&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#unity-1"&gt;Unity&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers-1"&gt;Web browsers&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#by-protocol-1"&gt;By protocol&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt"&gt;SRT&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc"&gt;WebRTC&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp"&gt;RTSP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp"&gt;RTMP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls"&gt;HLS&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#other-features"&gt;Other features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authentication"&gt;Authentication&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#internal"&gt;Internal&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#http-based"&gt;HTTP-based&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#jwt-based"&gt;JWT-based&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#encrypt-the-configuration"&gt;Encrypt the configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#remuxing-re-encoding-compression"&gt;Remuxing, re-encoding, compression&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#record-streams-to-disk"&gt;Record streams to disk&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#playback-recorded-streams"&gt;Playback recorded streams&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#forward-streams-to-other-servers"&gt;Forward streams to other servers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#proxy-requests-to-other-servers"&gt;Proxy requests to other servers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#on-demand-publishing"&gt;On-demand publishing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#route-absolute-timestamps"&gt;Route absolute timestamps&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#expose-the-server-in-a-subfolder"&gt;Expose the server in a subfolder&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#start-on-boot"&gt;Start on boot&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#linux"&gt;Linux&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#openwrt"&gt;OpenWrt&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hooks"&gt;Hooks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#control-api"&gt;Control API&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#metrics"&gt;Metrics&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#pprof"&gt;pprof&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#srt-specific-features"&gt;SRT-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standard-stream-id-syntax"&gt;Standard stream ID syntax&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-specific-features"&gt;WebRTC-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authenticating-with-whipwhep"&gt;Authenticating with WHIP/WHEP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#solving-webrtc-connectivity-issues"&gt;Solving WebRTC connectivity issues&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers"&gt;Supported browsers&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls-specific-features"&gt;HLS-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#supported-browsers-1"&gt;Supported browsers&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features"&gt;RTSP-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#transport-protocols"&gt;Transport protocols&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#encryption"&gt;Encryption&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#corrupted-frames"&gt;Corrupted frames&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-specific-features"&gt;RTMP-specific features&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#encryption-1"&gt;Encryption&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#compile-from-source"&gt;Compile from source&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standard"&gt;Standard&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#openwrt-1"&gt;OpenWrt&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#custom-libcamera"&gt;Custom libcamera&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#cross-compile"&gt;Cross compile&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#compile-for-all-supported-platforms"&gt;Compile for all supported platforms&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#docker-image-1"&gt;Docker image&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#specifications"&gt;Specifications&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#related-projects"&gt;Related projects&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are several installation methods available: standalone binary, Docker image, Arch Linux package, FreeBSD Ports Collection or package and OpenWrt binary.&lt;/p&gt; 
&lt;h3&gt;Standalone binary&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download and extract a standalone binary from the &lt;a href="https://github.com/bluenviron/mediamtx/releases"&gt;release page&lt;/a&gt; that corresponds to your operating system and architecture.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Start the server:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;./mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Docker image&lt;/h3&gt; 
&lt;p&gt;Download and launch the image:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm -it --network=host bluenviron/mediamtx:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Available images:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;name&lt;/th&gt; 
   &lt;th&gt;FFmpeg included&lt;/th&gt; 
   &lt;th&gt;RPI Camera support&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bluenviron/mediamtx:latest&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bluenviron/mediamtx:latest-ffmpeg&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bluenviron/mediamtx:latest-rpi&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;bluenviron/mediamtx:latest-ffmpeg-rpi&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The &lt;code&gt;--network=host&lt;/code&gt; flag is mandatory for RTSP to work, since Docker can change the source port of UDP packets for routing reasons, and this doesn't allow the server to identify the senders of the packets.&lt;/p&gt; 
&lt;p&gt;If the &lt;code&gt;--network=host&lt;/code&gt; cannot be used (for instance, it is not compatible with Windows or Kubernetes), you can disable the RTSP UDP transport protocol, add the server IP to &lt;code&gt;MTX_WEBRTCADDITIONALHOSTS&lt;/code&gt; and expose ports manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm -it \
-e MTX_RTSPTRANSPORTS=tcp \
-e MTX_WEBRTCADDITIONALHOSTS=192.168.x.x \
-p 8554:8554 \
-p 1935:1935 \
-p 8888:8888 \
-p 8889:8889 \
-p 8890:8890/udp \
-p 8189:8189/udp \
bluenviron/mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux package&lt;/h3&gt; 
&lt;p&gt;If you are running the Arch Linux distribution, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://aur.archlinux.org/mediamtx.git
cd mediamtx
makepkg -si
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;p&gt;Available via ports tree or using packages (2025Q2 and later) as listed below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd /usr/ports/multimedia/mediamtx &amp;amp;&amp;amp; make install clean
pkg install mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;OpenWrt binary&lt;/h3&gt; 
&lt;p&gt;If the architecture of the OpenWrt device is amd64, armv6, armv7 or arm64, use the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standalone-binary"&gt;standalone binary method&lt;/a&gt; and download a Linux binary that corresponds to your architecture.&lt;/p&gt; 
&lt;p&gt;Otherwise, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#openwrt-1"&gt;compile the server from source&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Basic usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Publish a stream. For instance, you can publish a video/audio file with &lt;em&gt;FFmpeg&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or &lt;em&gt;GStreamer&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 rtspclientsink name=s location=rtsp://localhost:8554/mystream filesrc location=file.mp4 \
! qtdemux name=d d.video_0 ! queue ! s.sink_0 d.audio_0 ! queue ! s.sink_1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the stream. For instance, you can open the stream with &lt;em&gt;VLC&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;vlc --network-caching=50 rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or &lt;em&gt;GStreamer&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;gst-play-1.0 rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or &lt;em&gt;FFmpeg&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -i rtsp://localhost:8554/mystream -c copy output.mp4
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Publish to the server&lt;/h2&gt; 
&lt;h3&gt;By software&lt;/h3&gt; 
&lt;h4&gt;FFmpeg&lt;/h4&gt; 
&lt;p&gt;FFmpeg can publish a stream to the server in several ways (SRT client, SRT server, RTSP client, RTMP client, MPEG-TS over UDP, MPEG-TS over Unix sockets, WebRTC with WHIP, RTP over UDP, rtp over Unix sockets). The recommended one consists in publishing as a &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients"&gt;RTSP client&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features"&gt;RTSP-specific features&lt;/a&gt;). You can set the transport protocol by using the &lt;code&gt;rtsp_transport&lt;/code&gt; flag, for instance, in order to use TCP:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp -rtsp_transport tcp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;GStreamer&lt;/h4&gt; 
&lt;p&gt;GStreamer can publish a stream to the server in several ways (SRT client, SRT server, RTSP client, RTMP client, MPEG-TS over UDP, WebRTC with WHIP, RTP over UDP). The recommended one consists in publishing as a &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients"&gt;RTSP client&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 rtspclientsink name=s location=rtsp://localhost:8554/mystream \
filesrc location=file.mp4 ! qtdemux name=d \
d.video_0 ! queue ! s.sink_0 \
d.audio_0 ! queue ! s.sink_1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the stream is video only:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 filesrc location=file.mp4 ! qtdemux name=d \
d.video_0 ! rtspclientsink location=rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features"&gt;RTSP-specific features&lt;/a&gt;). You can set the transport protocol by using the &lt;code&gt;protocols&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 filesrc location=file.mp4 ! qtdemux name=d \
d.video_0 ! rtspclientsink location=rtsp://localhost:8554/mystream protocols=tcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If encryption is enabled, the &lt;code&gt;tls-validation-flags&lt;/code&gt; and &lt;code&gt;profiles&lt;/code&gt; options must be specified too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 filesrc location=file.mp4 ! qtdemux name=d \
d.video_0 ! rtspclientsink location=rtsp://localhost:8554/mystream tls-validation-flags=0 profiles=GST_RTSP_PROFILE_SAVP
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;GStreamer can also publish a stream by using the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc"&gt;WebRTC / WHIP protocol&lt;/a&gt;. Make sure that GStreamer version is at least 1.22, and that if the codec is H264, the profile is baseline. Use the &lt;code&gt;whipclientsink&lt;/code&gt; element:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gst-launch-1.0 videotestsrc \
! video/x-raw,width=1920,height=1080,format=I420 \
! x264enc speed-preset=ultrafast bitrate=2000 \
! video/x-h264,profile=baseline \
! whipclientsink signaller::whip-endpoint=http://localhost:8889/mystream/whip
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;OBS Studio&lt;/h4&gt; 
&lt;p&gt;OBS Studio can publish to the server in several ways (SRT client, RTMP client, WebRTC client). The recommended one consists in publishing as a &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtmp-clients"&gt;RTMP client&lt;/a&gt;. In &lt;code&gt;Settings -&amp;gt; Stream&lt;/code&gt; (or in the Auto-configuration Wizard), use the following parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Service: &lt;code&gt;Custom...&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Server: &lt;code&gt;rtmp://localhost/mystream&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Stream key: (empty)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If credentials are in use, use the following parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Service: &lt;code&gt;Custom...&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Server: &lt;code&gt;rtmp://localhost/mystream?user=myuser&amp;amp;pass=mypass&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Stream key: (empty)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Save the configuration and click &lt;code&gt;Start streaming&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to generate a stream that can be read with WebRTC, open &lt;code&gt;Settings -&amp;gt; Output -&amp;gt; Recording&lt;/code&gt; and use the following parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;FFmpeg output type: &lt;code&gt;Output to URL&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;File path or URL: &lt;code&gt;rtsp://localhost:8554/mystream&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Container format: &lt;code&gt;rtsp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Check &lt;code&gt;show all codecs (even if potentically incompatible)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Video encoder: &lt;code&gt;h264_nvenc (libx264)&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Video encoder settings (if any): &lt;code&gt;bf=0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Audio track: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Audio encoder: &lt;code&gt;libopus&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then use the button &lt;code&gt;Start Recording&lt;/code&gt; (instead of &lt;code&gt;Start Streaming&lt;/code&gt;) to start streaming.&lt;/p&gt; 
&lt;p&gt;Recent versions of OBS Studio can also publish to the server with the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc"&gt;WebRTC / WHIP protocol&lt;/a&gt;. Use the following parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Service: &lt;code&gt;WHIP&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Server: &lt;code&gt;http://localhost:8889/mystream/whip&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Bearer Token: &lt;code&gt;myuser:mypass&lt;/code&gt; (when internal authentication is enabled) or &lt;code&gt;JWT&lt;/code&gt; (when JWT-based authentication is enabled)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Save the configuration and click &lt;code&gt;Start streaming&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;OpenCV&lt;/h4&gt; 
&lt;p&gt;Software which uses the OpenCV library can publish to the server through its GStreamer plugin, as a &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-clients"&gt;RTSP client&lt;/a&gt;. It must be compiled with GStreamer support, by following this procedure:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-ugly gstreamer1.0-rtsp python3-dev python3-numpy
git clone --depth=1 -b 4.5.4 https://github.com/opencv/opencv
cd opencv
mkdir build &amp;amp;&amp;amp; cd build
cmake -D CMAKE_INSTALL_PREFIX=/usr -D WITH_GSTREAMER=ON ..
make -j$(nproc)
sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check that OpenCV has been installed correctly by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;python3 -c 'import cv2; print(cv2.getBuildInformation())'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check that the output contains &lt;code&gt;GStreamer: YES&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Videos can be published with &lt;code&gt;cv2.VideoWriter&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from datetime import datetime
from time import sleep, time

import cv2
import numpy as np

fps = 15
width = 800
height = 600
colors = [
    (0, 0, 255),
    (255, 0, 0),
    (0, 255, 0),
]

out = cv2.VideoWriter('appsrc ! videoconvert' + \
    ' ! video/x-raw,format=I420' + \
    ' ! x264enc speed-preset=ultrafast bitrate=600 key-int-max=' + str(fps * 2) + \
    ' ! video/x-h264,profile=baseline' + \
    ' ! rtspclientsink location=rtsp://localhost:8554/mystream',
    cv2.CAP_GSTREAMER, 0, fps, (width, height), True)
if not out.isOpened():
    raise Exception("can't open video writer")

curcolor = 0
start = time()

while True:
    frame = np.zeros((height, width, 3), np.uint8)

    # create a rectangle
    color = colors[curcolor]
    curcolor += 1
    curcolor %= len(colors)
    for y in range(0, int(frame.shape[0] / 2)):
        for x in range(0, int(frame.shape[1] / 2)):
            frame[y][x] = color

    out.write(frame)
    print("%s frame written to the server" % datetime.now())

    now = time()
    diff = (1 / fps) - now - start
    if diff &amp;gt; 0:
        sleep(diff)
    start = now
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Unity&lt;/h4&gt; 
&lt;p&gt;Software written with the Unity Engine can publish a stream to the server by using the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc"&gt;WebRTC protocol&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Create a new Unity project or open an existing open.&lt;/p&gt; 
&lt;p&gt;Open &lt;em&gt;Window -&amp;gt; Package Manager&lt;/em&gt;, click on the plus sign, &lt;em&gt;Add Package by name...&lt;/em&gt; and insert &lt;code&gt;com.unity.webrtc&lt;/code&gt;. Wait for the package to be installed.&lt;/p&gt; 
&lt;p&gt;In the &lt;em&gt;Project&lt;/em&gt; window, under &lt;code&gt;Assets&lt;/code&gt;, create a new C# Script called &lt;code&gt;WebRTCPublisher.cs&lt;/code&gt; with this content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cs"&gt;using System.Collections;
using UnityEngine;
using Unity.WebRTC;
using UnityEngine.Networking;

public class WebRTCPublisher : MonoBehaviour
{
    public string url = "http://localhost:8889/unity/whip";
    public int videoWidth = 1280;
    public int videoHeight = 720;

    private RTCPeerConnection pc;
    private MediaStream videoStream;

    void Start()
    {
        pc = new RTCPeerConnection();
        Camera sourceCamera = gameObject.GetComponent&amp;lt;Camera&amp;gt;();
        videoStream = sourceCamera.CaptureStream(videoWidth, videoHeight);
        foreach (var track in videoStream.GetTracks())
        {
            pc.AddTrack(track);
        }

        StartCoroutine(WebRTC.Update());
        StartCoroutine(createOffer());
    }

    private IEnumerator createOffer()
    {
        var op = pc.CreateOffer();
        yield return op;
        if (op.IsError) {
            Debug.LogError("CreateOffer() failed");
            yield break;
        }

        yield return setLocalDescription(op.Desc);
    }

    private IEnumerator setLocalDescription(RTCSessionDescription offer)
    {
        var op = pc.SetLocalDescription(ref offer);
        yield return op;
        if (op.IsError) {
            Debug.LogError("SetLocalDescription() failed");
            yield break;
        }

        yield return postOffer(offer);
    }

    private IEnumerator postOffer(RTCSessionDescription offer)
    {
        var content = new System.Net.Http.StringContent(offer.sdp);
        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/sdp");
        var client = new System.Net.Http.HttpClient();

        var task = System.Threading.Tasks.Task.Run(async () =&amp;gt; {
            var res = await client.PostAsync(new System.UriBuilder(url).Uri, content);
            res.EnsureSuccessStatusCode();
            return await res.Content.ReadAsStringAsync();
        });
        yield return new WaitUntil(() =&amp;gt; task.IsCompleted);
        if (task.Exception != null) {
            Debug.LogError(task.Exception);
            yield break;
        }

        yield return setRemoteDescription(task.Result);
    }

    private IEnumerator setRemoteDescription(string answer)
    {
        RTCSessionDescription desc = new RTCSessionDescription();
        desc.type = RTCSdpType.Answer;
        desc.sdp = answer;
        var op = pc.SetRemoteDescription(ref desc);
        yield return op;
        if (op.IsError) {
            Debug.LogError("SetRemoteDescription() failed");
            yield break;
        }

        yield break;
    }

    void OnDestroy()
    {
        pc?.Close();
        pc?.Dispose();
        videoStream?.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the &lt;em&gt;Hierarchy&lt;/em&gt; window, find or create a scene and a camera, then add the &lt;code&gt;WebRTCPublisher.cs&lt;/code&gt; script as component of the camera, by dragging it inside the &lt;em&gt;Inspector&lt;/em&gt; window. then Press the &lt;em&gt;Play&lt;/em&gt; button at the top of the page.&lt;/p&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/unity&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Web browsers&lt;/h4&gt; 
&lt;p&gt;Web browsers can publish a stream to the server by using the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc"&gt;WebRTC protocol&lt;/a&gt;. Start the server and open the web page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream/publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This web page can be embedded into another web page by using an iframe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;iframe src="http://mediamtx-ip:8889/mystream/publish" scrolling="no"&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced setups, you can create and serve a custom web page by starting from the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/webrtc/publish_index.html"&gt;source code of the WebRTC publish page&lt;/a&gt;. In particular, there's a ready-to-use, standalone JavaScript class for publishing streams with WebRTC, available in &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/webrtc/publisher.js"&gt;publisher.js&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;By device&lt;/h3&gt; 
&lt;h4&gt;Generic webcam&lt;/h4&gt; 
&lt;p&gt;If the operating system is Linux-based, edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  cam:
    runOnInit: ffmpeg -f v4l2 -i /dev/video0 -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH
    runOnInitRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the operating system is Windows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  cam:
    runOnInit: ffmpeg -f dshow -i video="USB2.0 HD UVC WebCam" -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH
    runOnInitRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;code&gt;USB2.0 HD UVC WebCam&lt;/code&gt; is the name of a webcam, that can be obtained with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -list_devices true -f dshow -i dummy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/cam&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Raspberry Pi Cameras&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;MediaMTX&lt;/em&gt; natively supports most of the Raspberry Pi Camera models, enabling high-quality and low-latency video streaming from the camera to any user, for any purpose. There are a couple of requirements:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The server must run on a Raspberry Pi, with one of the following operating systems:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Raspberry Pi OS Bookworm&lt;/li&gt; 
   &lt;li&gt;Raspberry Pi OS Bullseye&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Both 32 bit and 64 bit architectures are supported.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you are using Raspberry Pi OS Bullseye, make sure that the legacy camera stack is disabled. Type &lt;code&gt;sudo raspi-config&lt;/code&gt;, then go to &lt;code&gt;Interfacing options&lt;/code&gt;, &lt;code&gt;enable/disable legacy camera support&lt;/code&gt;, choose &lt;code&gt;no&lt;/code&gt;. Reboot the system.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If you want to run the standard (non-Docker) version of the server:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the server executable. If you're using 64-bit version of the operative system, make sure to pick the &lt;code&gt;arm64&lt;/code&gt; variant.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  cam:
    source: rpiCamera
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/cam&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to run the server inside Docker, you need to use the &lt;code&gt;latest-rpi&lt;/code&gt; image and launch the container with some additional flags:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it \
--network=host \
--privileged \
--tmpfs /dev/shm:exec \
-v /run/udev:/run/udev:ro \
-e MTX_PATHS_CAM_SOURCE=rpiCamera \
bluenviron/mediamtx:latest-rpi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be aware that precompiled binaries and Docker images are not compatible with cameras that require a custom &lt;code&gt;libcamera&lt;/code&gt; (like some ArduCam products), since they come with a bundled &lt;code&gt;libcamera&lt;/code&gt;. If you want to use a custom one, you can &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#custom-libcamera"&gt;compile from source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Camera settings can be changed by using the &lt;code&gt;rpiCamera*&lt;/code&gt; parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  cam:
    source: rpiCamera
    rpiCameraWidth: 1920
    rpiCameraHeight: 1080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All available parameters are listed in the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/mediamtx.yml"&gt;sample configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;h5&gt;Adding audio&lt;/h5&gt; 
&lt;p&gt;In order to add audio from a USB microfone, install GStreamer and alsa-utils:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y gstreamer1.0-tools gstreamer1.0-rtsp gstreamer1.0-alsa alsa-utils
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;list available audio cards with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;arecord -L
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Sample output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;surround51:CARD=ICH5,DEV=0
    Intel ICH5, Intel ICH5
    5.1 Surround output to Front, Center, Rear and Subwoofer speakers
default:CARD=U0x46d0x809
    USB Device 0x46d:0x809, USB Audio
    Default Audio Device
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Find the audio card of the microfone and take note of its name, for instance &lt;code&gt;default:CARD=U0x46d0x809&lt;/code&gt;. Then create a new path that takes the video stream from the camera and audio from the microphone:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  cam:
    source: rpiCamera

  cam_with_audio:
    runOnInit: &amp;gt;
      gst-launch-1.0
      rtspclientsink name=s location=rtsp://localhost:$RTSP_PORT/cam_with_audio
      rtspsrc location=rtsp://127.0.0.1:$RTSP_PORT/cam latency=0 ! rtph264depay ! s.
      alsasrc device=default:CARD=U0x46d0x809 ! opusenc bitrate=16000 ! s.
    runOnInitRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/cam_with_audio&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Secondary stream&lt;/h5&gt; 
&lt;p&gt;It is possible to enable a secondary stream from the same camera, with a different resolution, FPS and codec. Configuration is the same of a primary stream, with &lt;code&gt;rpiCameraSecondary&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; and parameters adjusted accordingly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  # primary stream
  rpi:
    source: rpiCamera
    # Width of frames.
    rpiCameraWidth: 1920
    # Height of frames.
    rpiCameraHeight: 1080
    # FPS.
    rpiCameraFPS: 30

  # secondary stream
  secondary:
    source: rpiCamera
    # This is a secondary stream.
    rpiCameraSecondary: true
    # Width of frames.
    rpiCameraWidth: 640
    # Height of frames.
    rpiCameraHeight: 480
    # FPS.
    rpiCameraFPS: 10
    # Codec. in case of secondary streams, it defaults to M-JPEG.
    rpiCameraCodec: auto
    # JPEG quality.
    rpiCameraMJPEGQuality: 60
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The secondary stream is available in path &lt;code&gt;/secondary&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;By protocol&lt;/h3&gt; 
&lt;h4&gt;SRT clients&lt;/h4&gt; 
&lt;p&gt;SRT is a protocol that allows to publish and read live data stream, providing encryption, integrity and a retransmission mechanism. It is usually used to transfer media streams encoded with MPEG-TS. In order to publish a stream to the server with the SRT protocol, use this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=publish:mystream&amp;amp;pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;mystream&lt;/code&gt; with any name you want. The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If credentials are enabled, append username and password to &lt;code&gt;streamid&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=publish:mystream:user:pass&amp;amp;pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to use the standard stream ID syntax instead of the custom one in use by this server, see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standard-stream-id-syntax"&gt;Standard stream ID syntax&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to publish a stream by using a client in listening mode (i.e. with &lt;code&gt;mode=listener&lt;/code&gt; appended to the URL), read the next section.&lt;/p&gt; 
&lt;p&gt;Known clients that can publish with SRT are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer"&gt;GStreamer&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio"&gt;OBS Studio&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;SRT cameras and servers&lt;/h4&gt; 
&lt;p&gt;In order to ingest into the server a SRT stream from an existing server, camera or client in listening mode (i.e. with &lt;code&gt;mode=listener&lt;/code&gt; appended to the URL), add the corresponding URL into the &lt;code&gt;source&lt;/code&gt; parameter of a path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  proxied:
    # url of the source stream, in the format srt://host:port?streamid=streamid&amp;amp;other_parameters
    source: srt://original-url
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;WebRTC clients&lt;/h4&gt; 
&lt;p&gt;WebRTC is an API that makes use of a set of protocols and methods to connect two clients together and allow them to exchange real-time media or data streams. You can publish a stream with WebRTC and a web browser by visiting:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream/publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;WHIP is a WebRTC extensions that allows to publish streams by using a URL, without passing through a web page. This allows to use WebRTC as a general purpose streaming protocol. If you are using a software that supports WHIP (for instance, latest versions of OBS Studio), you can publish a stream to the server by using this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream/whip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding authentication, read &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authenticating-with-whipwhep"&gt;Authenticating with WHIP/WHEP&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Depending on the network it may be difficult to establish a connection between server and clients, read &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#solving-webrtc-connectivity-issues"&gt;Solving WebRTC connectivity issues&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can publish with WebRTC and WHIP are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer"&gt;GStreamer&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio"&gt;OBS Studio&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#unity"&gt;Unity&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers"&gt;Web browsers&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;WebRTC servers&lt;/h4&gt; 
&lt;p&gt;In order to ingest into the server a WebRTC stream from an existing server, add the corresponding WHEP URL into the &lt;code&gt;source&lt;/code&gt; parameter of a path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  proxied:
    # url of the source stream, in the format whep://host:port/path (HTTP) or wheps:// (HTTPS)
    source: wheps://host:port/path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RTSP clients&lt;/h4&gt; 
&lt;p&gt;RTSP is a protocol that allows to publish and read streams. It supports different underlying transport protocols and allows to encrypt streams in transit (see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features"&gt;RTSP-specific features&lt;/a&gt;). In order to publish a stream to the server with the RTSP protocol, use this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can publish with RTSP are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer"&gt;GStreamer&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio"&gt;OBS Studio&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;RTSP cameras and servers&lt;/h4&gt; 
&lt;p&gt;Most IP cameras expose their video stream by using a RTSP server that is embedded into the camera itself. In particular, cameras that are compliant with ONVIF profile S or T meet this requirement. You can use &lt;em&gt;MediaMTX&lt;/em&gt; to connect to one or several existing RTSP servers and read their video streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  proxied:
    # url of the source stream, in the format rtsp://user:pass@host:port/path
    source: rtsp://original-url
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/proxied&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The server supports any number of source streams (count is just limited by available hardware resources) it's enough to add additional entries to the paths section:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  proxied1:
    source: rtsp://url1

  proxied2:
    source: rtsp://url1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RTMP clients&lt;/h4&gt; 
&lt;p&gt;RTMP is a protocol that allows to read and publish streams, but is less versatile and less efficient than RTSP and WebRTC (doesn't support UDP, doesn't support most RTSP codecs, doesn't support feedback mechanism). Streams can be published to the server by using the URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmp://localhost/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mystream&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In case authentication is enabled, credentials can be passed to the server by using the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt; query parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmp://localhost/mystream?user=myuser&amp;amp;pass=mypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can publish with RTMP are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer"&gt;GStreamer&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#obs-studio"&gt;OBS Studio&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;RTMP cameras and servers&lt;/h4&gt; 
&lt;p&gt;You can use &lt;em&gt;MediaMTX&lt;/em&gt; to connect to one or several existing RTMP servers and read their video streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  proxied:
    # url of the source stream, in the format rtmp://user:pass@host:port/path
    source: rtmp://original-url
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/proxied&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;HLS cameras and servers&lt;/h4&gt; 
&lt;p&gt;HLS is a streaming protocol that works by splitting streams into segments, and by serving these segments and a playlist with the HTTP protocol. You can use &lt;em&gt;MediaMTX&lt;/em&gt; to connect to one or several existing HLS servers and read their video streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  proxied:
    # url of the playlist of the stream, in the format http://user:pass@host:port/path
    source: http://original-url/stream/index.m3u8
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/proxied&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;MPEG-TS&lt;/h4&gt; 
&lt;p&gt;The server supports ingesting MPEG-TS streams, shipped in two different ways (UDP packets or Unix sockets).&lt;/p&gt; 
&lt;p&gt;In order to read a UDP MPEG-TS stream, edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  mypath:
    source: udp+mpegts://238.0.0.1:1234
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;code&gt;238.0.0.1&lt;/code&gt; is the IP for listening packets, in this case a multicast IP.&lt;/p&gt; 
&lt;p&gt;You can generate a UDP multicast MPEG-TS stream with GStreamer:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 -v mpegtsmux name=mux alignment=1 ! udpsink host=238.0.0.1 port=1234 \
videotestsrc ! video/x-raw,width=1280,height=720,format=I420 ! x264enc speed-preset=ultrafast bitrate=3000 key-int-max=60 ! video/x-h264,profile=high ! mux. \
audiotestsrc ! audioconvert ! avenc_aac ! mux.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or FFmpeg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-f mpegts udp://238.0.0.1:1234?pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream is available in path &lt;code&gt;/mypath&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If the listening IP is a multicast IP, &lt;em&gt;MediaMTX&lt;/em&gt; will listen for incoming packets on the default multicast interface, picked by the operating system. It is possible to specify the interface manually by using the &lt;code&gt;interface&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  mypath:
    source: udp+mpegts://238.0.0.1:1234?interface=eth0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to restrict who can send packets by using the &lt;code&gt;source&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  mypath:
    source: udp+mpegts://0.0.0.0:1234?source=192.168.3.5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can publish with UDP and MPEG-TS are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg"&gt;FFmpeg&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer"&gt;GStreamer&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unix sockets are more efficient than UDP packets and can be used as transport by specifying the &lt;code&gt;unix+mpegts&lt;/code&gt; scheme:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  mypath:
    source: unix+mpegts:///tmp/socket.sock
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FFmpeg can generate such streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-f mpegts unix:/tmp/socket.sock
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RTP&lt;/h4&gt; 
&lt;p&gt;The server supports ingesting RTP streams, shipped in two different ways (UDP packets or Unix sockets).&lt;/p&gt; 
&lt;p&gt;In order to read a UDP RTP stream, edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  mypath:
    source: udp+rtp://238.0.0.1:1234
    rtpSDP: |
      v=0
      o=- 123456789 123456789 IN IP4 192.168.1.100
      s=H264 Video Stream
      c=IN IP4 192.168.1.100
      t=0 0
      m=video 5004 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e01e;packetization-mode=1;sprop-parameter-sets=Z0LAHtkDxWhAAAADAEAAAAwDxYuS,aMuMsg==
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;rtpSDP&lt;/code&gt; must contain a valid SDP, that is a description of the RTP session.&lt;/p&gt; 
&lt;p&gt;FFmpeg can generate a RTP over UDP stream:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-f rtp udp://238.0.0.1:1234?pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The stream is available on path &lt;code&gt;/mypath&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can publish with UDP and MPEG-TS are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg"&gt;FFmpeg&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer"&gt;GStreamer&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unix sockets are more efficient than UDP packets and can be used as transport by specifying the &lt;code&gt;unix+rtp&lt;/code&gt; scheme:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  mypath:
    source: unix+rtp:///tmp/socket.sock
    rtpSDP: |
      v=0
      o=- 123456789 123456789 IN IP4 192.168.1.100
      s=H264 Video Stream
      c=IN IP4 192.168.1.100
      t=0 0
      m=video 5004 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e01e;packetization-mode=1;sprop-parameter-sets=Z0LAHtkDxWhAAAADAEAAAAwDxYuS,aMuMsg==
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;FFmpeg can generate such streams:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-f rtp unix:/tmp/socket.sock
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Read from the server&lt;/h2&gt; 
&lt;h3&gt;By software&lt;/h3&gt; 
&lt;h4&gt;FFmpeg&lt;/h4&gt; 
&lt;p&gt;FFmpeg can read a stream from the server in several ways (RTSP, RTMP, HLS, WebRTC with WHEP, SRT). The recommended one consists in reading with &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp"&gt;RTSP&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -i rtsp://localhost:8554/mystream -c copy output.mp4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features"&gt;RTSP-specific features&lt;/a&gt;). You can set the transport protocol by using the &lt;code&gt;rtsp_transport&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -rtsp_transport tcp -i rtsp://localhost:8554/mystream -c copy output.mp4
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;GStreamer&lt;/h4&gt; 
&lt;p&gt;GStreamer can read a stream from the server in several ways (RTSP, RTMP, HLS, WebRTC with WHEP, SRT). The recommended one consists in reading with &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp"&gt;RTSP&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 rtspsrc location=rtsp://127.0.0.1:8554/mystream latency=0 ! decodebin ! autovideosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features"&gt;RTSP-specific features&lt;/a&gt;). You can change the transport protocol by using the &lt;code&gt;protocols&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 rtspsrc protocols=tcp location=rtsp://127.0.0.1:8554/mystream latency=0 ! decodebin ! autovideosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If encryption is enabled, set &lt;code&gt;tls-validation-flags&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 rtspsrc tls-validation-flags=0 location=rtsps://ip:8322/...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GStreamer also supports reading streams with WebRTC/WHEP, although track codecs must be specified in advance through the &lt;code&gt;video-caps&lt;/code&gt; and &lt;code&gt;audio-caps&lt;/code&gt; parameters. Furthermore, if audio is not present, &lt;code&gt;audio-caps&lt;/code&gt; must be set anyway and must point to a PCMU codec. For instance, the command for reading a video-only H264 stream is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 whepsrc whep-endpoint=http://127.0.0.1:8889/stream/whep use-link-headers=true \
video-caps="application/x-rtp,media=video,encoding-name=H264,payload=127,clock-rate=90000" \
audio-caps="application/x-rtp,media=audio,encoding-name=PCMU,payload=0,clock-rate=8000" \
! rtph264depay ! decodebin ! autovideosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While the command for reading an audio-only Opus stream is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 whepsrc whep-endpoint="http://127.0.0.1:8889/stream/whep" use-link-headers=true \
audio-caps="application/x-rtp,media=audio,encoding-name=OPUS,payload=111,clock-rate=48000,encoding-params=(string)2" \
! rtpopusdepay ! decodebin ! autoaudiosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While the command for reading a H264 and Opus stream is:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gst-launch-1.0 whepsrc whep-endpoint=http://127.0.0.1:8889/stream/whep use-link-headers=true \
video-caps="application/x-rtp,media=video,encoding-name=H264,payload=127,clock-rate=90000" \
audio-caps="application/x-rtp,media=audio,encoding-name=OPUS,payload=111,clock-rate=48000,encoding-params=(string)2" \
! decodebin ! autovideosink
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;VLC&lt;/h4&gt; 
&lt;p&gt;VLC can read a stream from the server in several ways (RTSP, RTMP, HLS, SRT). The recommended one consists in reading with &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp"&gt;RTSP&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;vlc --network-caching=50 rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The RTSP protocol supports several underlying transport protocols, each with its own characteristics (see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features"&gt;RTSP-specific features&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;In order to use the TCP transport protocol, use the &lt;code&gt;--rtsp_tcp&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;vlc --network-caching=50 --rtsp-tcp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In order to use the UDP-multicast transport protocol, append &lt;code&gt;?vlcmulticast&lt;/code&gt; to the URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;vlc --network-caching=50 rtsp://localhost:8554/mystream?vlcmulticast
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Ubuntu bug&lt;/h5&gt; 
&lt;p&gt;The VLC shipped with Ubuntu 21.10 doesn't support playing RTSP due to a license issue (see &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=982299"&gt;here&lt;/a&gt; and &lt;a href="https://stackoverflow.com/questions/69766748/cvlc-cannot-play-rtsp-omxplayer-instead-can"&gt;here&lt;/a&gt;). To fix the issue, remove the default VLC instance and install the snap version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt purge -y vlc
snap install vlc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Encrypted streams&lt;/h5&gt; 
&lt;p&gt;At the moment VLC doesn't support reading encrypted RTSP streams. However, you can use a proxy like &lt;a href="https://www.stunnel.org"&gt;stunnel&lt;/a&gt; or &lt;a href="https://nginx.org/"&gt;nginx&lt;/a&gt; or a local &lt;em&gt;MediaMTX&lt;/em&gt; instance to decrypt streams before reading them.&lt;/p&gt; 
&lt;h4&gt;Unity&lt;/h4&gt; 
&lt;p&gt;Software written with the Unity Engine can read a stream from the server by using the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc"&gt;WebRTC protocol&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Create a new Unity project or open an existing open.&lt;/p&gt; 
&lt;p&gt;Open &lt;em&gt;Window -&amp;gt; Package Manager&lt;/em&gt;, click on the plus sign, &lt;em&gt;Add Package by name...&lt;/em&gt; and insert &lt;code&gt;com.unity.webrtc&lt;/code&gt;. Wait for the package to be installed.&lt;/p&gt; 
&lt;p&gt;In the &lt;em&gt;Project&lt;/em&gt; window, under &lt;code&gt;Assets&lt;/code&gt;, create a new C# Script called &lt;code&gt;WebRTCReader.cs&lt;/code&gt; with this content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-cs"&gt;using System.Collections;
using UnityEngine;
using Unity.WebRTC;

public class WebRTCReader : MonoBehaviour
{
    public string url = "http://localhost:8889/stream/whep";

    private RTCPeerConnection pc;
    private MediaStream receiveStream;

    void Start()
    {
        UnityEngine.UI.RawImage rawImage = gameObject.GetComponentInChildren&amp;lt;UnityEngine.UI.RawImage&amp;gt;();
        AudioSource audioSource = gameObject.GetComponentInChildren&amp;lt;AudioSource&amp;gt;();
        pc = new RTCPeerConnection();
        receiveStream = new MediaStream();

        pc.OnTrack = e =&amp;gt;
        {
            receiveStream.AddTrack(e.Track);
        };

        receiveStream.OnAddTrack = e =&amp;gt;
        {
            if (e.Track is VideoStreamTrack videoTrack)
            {
                videoTrack.OnVideoReceived += (tex) =&amp;gt;
                {
                    rawImage.texture = tex;
                };
            }
            else if (e.Track is AudioStreamTrack audioTrack)
            {
                audioSource.SetTrack(audioTrack);
                audioSource.loop = true;
                audioSource.Play();
            }
        };

        RTCRtpTransceiverInit init = new RTCRtpTransceiverInit();
        init.direction = RTCRtpTransceiverDirection.RecvOnly;
        pc.AddTransceiver(TrackKind.Audio, init);
        pc.AddTransceiver(TrackKind.Video, init);

        StartCoroutine(WebRTC.Update());
        StartCoroutine(createOffer());
    }

    private IEnumerator createOffer()
    {
        var op = pc.CreateOffer();
        yield return op;
        if (op.IsError) {
            Debug.LogError("CreateOffer() failed");
            yield break;
        }

        yield return setLocalDescription(op.Desc);
    }

    private IEnumerator setLocalDescription(RTCSessionDescription offer)
    {
        var op = pc.SetLocalDescription(ref offer);
        yield return op;
        if (op.IsError) {
            Debug.LogError("SetLocalDescription() failed");
            yield break;
        }

        yield return postOffer(offer);
    }

    private IEnumerator postOffer(RTCSessionDescription offer)
    {
        var content = new System.Net.Http.StringContent(offer.sdp);
        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/sdp");
        var client = new System.Net.Http.HttpClient();

        var task = System.Threading.Tasks.Task.Run(async () =&amp;gt; {
            var res = await client.PostAsync(new System.UriBuilder(url).Uri, content);
            res.EnsureSuccessStatusCode();
            return await res.Content.ReadAsStringAsync();
        });
        yield return new WaitUntil(() =&amp;gt; task.IsCompleted);
        if (task.Exception != null) {
            Debug.LogError(task.Exception);
            yield break;
        }

        yield return setRemoteDescription(task.Result);
    }

    private IEnumerator setRemoteDescription(string answer)
    {
        RTCSessionDescription desc = new RTCSessionDescription();
        desc.type = RTCSdpType.Answer;
        desc.sdp = answer;
        var op = pc.SetRemoteDescription(ref desc);
        yield return op;
        if (op.IsError) {
            Debug.LogError("SetRemoteDescription() failed");
            yield break;
        }

        yield break;
    }

    void OnDestroy()
    {
        pc?.Close();
        pc?.Dispose();
        receiveStream?.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Edit the &lt;code&gt;url&lt;/code&gt; variable according to your needs.&lt;/p&gt; 
&lt;p&gt;In the &lt;em&gt;Hierarchy&lt;/em&gt; window, find or create a scene. Inside the scene, add a &lt;em&gt;Canvas&lt;/em&gt;. Inside the Canvas, add a &lt;em&gt;Raw Image&lt;/em&gt; and an &lt;em&gt;Audio Source&lt;/em&gt;. Then add the &lt;code&gt;WebRTCReader.cs&lt;/code&gt; script as component of the canvas, by dragging it inside the &lt;em&gt;Inspector&lt;/em&gt; window. then Press the &lt;em&gt;Play&lt;/em&gt; button at the top of the page.&lt;/p&gt; 
&lt;h4&gt;Web browsers&lt;/h4&gt; 
&lt;p&gt;Web browsers can read a stream from the server in several ways (WebRTC or HLS).&lt;/p&gt; 
&lt;p&gt;You can read a stream by using the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#webrtc-1"&gt;WebRTC protocol&lt;/a&gt; by visiting the web page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This web page can be embedded into another web page by using an iframe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;iframe src="http://mediamtx-ip:8889/mystream" scrolling="no"&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced setups, you can create and serve a custom web page by starting from the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/webrtc/read_index.html"&gt;source code of the WebRTC read page&lt;/a&gt;. In particular, there's a ready-to-use, standalone JavaScript class for reading streams with WebRTC, available in &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/webrtc/reader.js"&gt;reader.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Web browsers can also read a stream with the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#hls"&gt;HLS protocol&lt;/a&gt;. Latency is higher but there are less problems related to connectivity between server and clients, furthermore the server load can be balanced by using a common HTTP CDN (like CloudFront or Cloudflare), and this allows to handle readers in the order of millions. Visit the web page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8888/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This web page can be embedded into another web page by using an iframe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;iframe src="http://mediamtx-ip:8888/mystream" scrolling="no"&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced setups, you can create and serve a custom web page by starting from the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/internal/servers/hls/index.html"&gt;source code of the HLS read page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;By protocol&lt;/h3&gt; 
&lt;h4&gt;SRT&lt;/h4&gt; 
&lt;p&gt;SRT is a protocol that allows to publish and read live data stream, providing encryption, integrity and a retransmission mechanism. It is usually used to transfer media streams encoded with MPEG-TS. In order to read a stream from the server with the SRT protocol, use this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=read:mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;mystream&lt;/code&gt; with the path name.&lt;/p&gt; 
&lt;p&gt;If credentials are enabled, append username and password to &lt;code&gt;streamid&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=read:mystream:user:pass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to use the standard stream ID syntax instead of the custom one in use by this server, see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#standard-stream-id-syntax"&gt;Standard stream ID syntax&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can read with SRT are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1"&gt;GStreamer&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc"&gt;VLC&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;WebRTC&lt;/h4&gt; 
&lt;p&gt;WebRTC is an API that makes use of a set of protocols and methods to connect two clients together and allow them to exchange real-time media or data streams. You can read a stream with WebRTC and a web browser by visiting:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;WHEP is a WebRTC extensions that allows to read streams by using a URL, without passing through a web page. This allows to use WebRTC as a general purpose streaming protocol. If you are using a software that supports WHEP, you can read a stream from the server by using this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8889/mystream/whep
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regarding authentication, read &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authenticating-with-whipwhep"&gt;Authenticating with WHIP/WHEP&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Depending on the network it may be difficult to establish a connection between server and clients, read &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#solving-webrtc-connectivity-issues"&gt;Solving WebRTC connectivity issues&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Known clients that can read with WebRTC and WHEP are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1"&gt;GStreamer&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#unity-1"&gt;Unity&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers-1"&gt;web browsers&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;RTSP&lt;/h4&gt; 
&lt;p&gt;RTSP is a protocol that allows to publish and read streams. It supports different underlying transport protocols and allows to encrypt streams in transit (see &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#rtsp-specific-features"&gt;RTSP-specific features&lt;/a&gt;). In order to read a stream with the RTSP protocol, use this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can read with RTSP are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1"&gt;GStreamer&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc"&gt;VLC&lt;/a&gt;.&lt;/p&gt; 
&lt;h5&gt;Latency&lt;/h5&gt; 
&lt;p&gt;The RTSP protocol doesn't introduce any latency by itself. Latency is usually introduced by clients, that put frames in a buffer to compensate network fluctuations. In order to decrease latency, the best way consists in tuning the client. For instance, in VLC, latency can be decreased by decreasing the &lt;em&gt;Network caching&lt;/em&gt; parameter, that is available in the &lt;em&gt;Open network stream&lt;/em&gt; dialog or alternatively can be set with the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;vlc --network-caching=50 rtsp://...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;RTMP&lt;/h4&gt; 
&lt;p&gt;RTMP is a protocol that allows to read and publish streams, but is less versatile and less efficient than RTSP and WebRTC (doesn't support UDP, doesn't support most RTSP codecs, doesn't support feedback mechanism). Streams can be read from the server by using the URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmp://localhost/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case authentication is enabled, credentials can be passed to the server by using the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt; query parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmp://localhost/mystream?user=myuser&amp;amp;pass=mypass
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can read with RTMP are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1"&gt;GStreamer&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc"&gt;VLC&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;HLS&lt;/h4&gt; 
&lt;p&gt;HLS is a protocol that works by splitting streams into segments, and by serving these segments and a playlist with the HTTP protocol. You can use &lt;em&gt;MediaMTX&lt;/em&gt; to generate a HLS stream, that is accessible through a web page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8888/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and can also be accessed without using the browsers, by software that supports the HLS protocol (for instance VLC or &lt;em&gt;MediaMTX&lt;/em&gt; itself) by using this URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:8888/mystream/index.m3u8
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Known clients that can read with HLS are &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#ffmpeg-1"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#gstreamer-1"&gt;GStreamer&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#vlc"&gt;VLC&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#web-browsers-1"&gt;web browsers&lt;/a&gt;.&lt;/p&gt; 
&lt;h5&gt;LL-HLS&lt;/h5&gt; 
&lt;p&gt;Low-Latency HLS is a recently standardized variant of the protocol that allows to greatly reduce playback latency. It works by splitting segments into parts, that are served before the segment is complete. LL-HLS is enabled by default. If the stream is not shown correctly, try tuning the hlsPartDuration parameter, for instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;hlsPartDuration: 500ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Compatibility with Apple devices&lt;/h5&gt; 
&lt;p&gt;In order to correctly display Low-Latency HLS streams in Safari running on Apple devices (iOS or macOS), a TLS certificate is needed and can be generated with OpenSSL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;openssl genrsa -out server.key 2048
openssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Set the &lt;code&gt;hlsEncryption&lt;/code&gt;, &lt;code&gt;hlsServerKey&lt;/code&gt; and &lt;code&gt;hlsServerCert&lt;/code&gt; parameters in the configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;hlsEncryption: yes
hlsServerKey: server.key
hlsServerCert: server.crt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Keep also in mind that not all H264 video streams can be played on Apple Devices due to some intrinsic properties (distance between I-Frames, profile). If the video can't be played correctly, you can either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;re-encode it by following instructions in this README&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;disable the Low-latency variant of HLS and go back to the legacy variant:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;  hlsVariant: mpegts
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Latency&lt;/h5&gt; 
&lt;p&gt;in HLS, latency is introduced since a client must wait for the server to generate segments before downloading them. This latency amounts to 500ms-3s when the low-latency HLS variant is enabled (and it is by default), otherwise amounts to 1-15secs.&lt;/p&gt; 
&lt;p&gt;To decrease the latency, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;try decreasing the hlsPartDuration parameter&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;try decreasing the hlsSegmentDuration parameter&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The segment duration is influenced by the interval between the IDR frames of the video track. An IDR frame is a frame that can be decoded independently from the others. The server changes the segment duration in order to include at least one IDR frame into each segment. Therefore, you need to decrease the interval between the IDR frames. This can be done in two ways:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;if the stream is being hardware-generated (i.e. by a camera), there's usually a setting called Key-Frame Interval in the camera configuration page&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;otherwise, the stream must be re-encoded. It's possible to tune the IDR frame interval by using ffmpeg's -g option:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -i rtsp://original-stream -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -max_muxing_queue_size 1024 -g 30 -f rtsp rtsp://localhost:$RTSP_PORT/compressed
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other features&lt;/h2&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;All the configuration parameters are listed and commented in the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/mediamtx.yml"&gt;configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are 3 ways to change the configuration:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;By editing the &lt;code&gt;mediamtx.yml&lt;/code&gt; file, that is&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;included into the release bundle&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;available in the root folder of the Docker image (&lt;code&gt;/mediamtx.yml&lt;/code&gt;); it can be overridden in this way:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run --rm -it --network=host -v "$PWD/mediamtx.yml:/mediamtx.yml:ro" bluenviron/mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The configuration can be changed dynamically when the server is running (hot reloading) by writing to the configuration file. Changes are detected and applied without disconnecting existing clients, whenever it's possible.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;By overriding configuration parameters with environment variables, in the format &lt;code&gt;MTX_PARAMNAME&lt;/code&gt;, where &lt;code&gt;PARAMNAME&lt;/code&gt; is the uppercase name of a parameter. For instance, the &lt;code&gt;rtspAddress&lt;/code&gt; parameter can be overridden in the following way:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;MTX_RTSPADDRESS="127.0.0.1:8554" ./mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Parameters that have array as value can be overridden by setting a comma-separated list. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;MTX_RTSPTRANSPORTS="tcp,udp"
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Parameters in maps can be overridden by using underscores, in the following way:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;MTX_PATHS_TEST_SOURCE=rtsp://myurl ./mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method is particularly useful when using Docker; any configuration parameter can be changed by passing environment variables with the &lt;code&gt;-e&lt;/code&gt; flag:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run --rm -it --network=host -e MTX_PATHS_TEST_SOURCE=rtsp://myurl bluenviron/mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;By using the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#control-api"&gt;Control API&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Authentication&lt;/h3&gt; 
&lt;h4&gt;Internal&lt;/h4&gt; 
&lt;p&gt;The server provides three methods to authenticate users:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Internal: users are stored in the configuration file&lt;/li&gt; 
 &lt;li&gt;HTTP-based: an external HTTP URL is contacted to perform authentication&lt;/li&gt; 
 &lt;li&gt;JWT: an external identity server provides authentication through JWTs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The internal authentication method is the default one. Users are stored inside the configuration file, in this format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;authInternalUsers:
  # Username. 'any' means any user, including anonymous ones.
- user: any
  # Password. Not used in case of 'any' user.
  pass:
  # IPs or networks allowed to use this user. An empty list means any IP.
  ips: []
  # List of permissions.
  permissions:
    # Available actions are: publish, read, playback, api, metrics, pprof.
  - action: publish
    # Paths can be set to further restrict access to a specific path.
    # An empty path means any path.
    # Regular expressions can be used by using a tilde as prefix.
    path:
  - action: read
    path:
  - action: playback
    path:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Only clients that provide username and passwords will be able to perform a certain action:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://myuser:mypass@localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If storing plain credentials in the configuration file is a security problem, username and passwords can be stored as hashed strings. The Argon2 and SHA256 hashing algorithms are supported. To use Argon2, the string must be hashed using Argon2id (recommended) or Argon2i:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo -n "mypass" | argon2 saltItWithSalt -id -l 32 -e
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then stored with the &lt;code&gt;argon2:&lt;/code&gt; prefix:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;authInternalUsers:
- user: argon2:$argon2id$v=19$m=4096,t=3,p=1$MTIzNDU2Nzg$OGGO0eCMN0ievb4YGSzvS/H+Vajx1pcbUmtLp2tRqRU
  pass: argon2:$argon2i$v=19$m=4096,t=3,p=1$MTIzNDU2Nzg$oct3kOiFywTdDdt19kT07hdvmsPTvt9zxAUho2DLqZw
  permissions:
  - action: publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use SHA256, the string must be hashed with SHA256 and encoded with base64:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo -n "mypass" | openssl dgst -binary -sha256 | openssl base64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then stored with the &lt;code&gt;sha256:&lt;/code&gt; prefix:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;authInternalUsers:
- user: sha256:j1tsRqDEw9xvq/D7/9tMx6Jh/jMhk3UfjwIB2f1zgMo=
  pass: sha256:BdSWkrdV+ZxFBLUQQY7+7uv9RmiSVA8nrPmjGjJtZQQ=
  permissions:
  - action: publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: enable encryption or use a VPN to ensure that no one is intercepting the credentials in transit.&lt;/p&gt; 
&lt;h4&gt;HTTP-based&lt;/h4&gt; 
&lt;p&gt;Authentication can be delegated to an external HTTP server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;authMethod: http
authHTTPAddress: http://myauthserver/auth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each time a user needs to be authenticated, the specified URL will be requested with the POST method and this payload:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "user": "user",
  "password": "password",
  "token": "token",
  "ip": "ip",
  "action": "publish|read|playback|api|metrics|pprof",
  "path": "path",
  "protocol": "rtsp|rtmp|hls|webrtc|srt",
  "id": "id",
  "query": "query"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the URL returns a status code that begins with &lt;code&gt;20&lt;/code&gt; (i.e. &lt;code&gt;200&lt;/code&gt;), authentication is successful, otherwise it fails. Be aware that it's perfectly normal for the authentication server to receive requests with empty users and passwords, i.e.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "user": "",
  "password": ""
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This happens because RTSP clients don't provide credentials until they are asked to. In order to receive the credentials, the authentication server must reply with status code &lt;code&gt;401&lt;/code&gt;, then the client will send credentials.&lt;/p&gt; 
&lt;p&gt;Some actions can be excluded from the process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;# Actions to exclude from HTTP-based authentication.
# Format is the same as the one of user permissions.
authHTTPExclude:
- action: api
- action: metrics
- action: pprof
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JWT-based&lt;/h4&gt; 
&lt;p&gt;Authentication can be delegated to an external identity server, that is capable of generating JWTs and provides a JWKS endpoint. With respect to the HTTP-based method, this has the advantage that the external server is contacted once, and not for every request, greatly improving performance. In order to use the JWT-based authentication method, set &lt;code&gt;authMethod&lt;/code&gt; and &lt;code&gt;authJWTJWKS&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;authMethod: jwt
authJWTJWKS: http://my_identity_server/jwks_endpoint
authJWTClaimKey: mediamtx_permissions
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The JWT is expected to contain a claim, with a list of permissions in the same format as the one of user permissions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
 "mediamtx_permissions": [
    {
      "action": "publish",
      "path": ""
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Clients are expected to pass the JWT in one of the following ways (from best to worst):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Through the &lt;code&gt;Authorization: Bearer&lt;/code&gt; HTTP header. This is possible if the protocol or feature is based on HTTP, like HLS, WebRTC, API, Metrics, pprof.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;As password. Username is arbitrary.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;As query parameter in the URL, with the &lt;code&gt;jwt&lt;/code&gt; key. This method is discouraged since the JWT is publicly shared when the URL is shared, causing a security issue.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;These are the recommended methods for each client:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;client&lt;/th&gt; 
   &lt;th&gt;protocol&lt;/th&gt; 
   &lt;th&gt;method&lt;/th&gt; 
   &lt;th&gt;notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web browsers&lt;/td&gt; 
   &lt;td&gt;HLS&lt;/td&gt; 
   &lt;td&gt;Authorization: Bearer&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Web browsers&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
   &lt;td&gt;Authorization: Bearer&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OBS Studio&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
   &lt;td&gt;Authorization: Bearer&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OBS Studio&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
   &lt;td&gt;Query parameter&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;FFmpeg&lt;/td&gt; 
   &lt;td&gt;RTSP&lt;/td&gt; 
   &lt;td&gt;Query parameter&lt;/td&gt; 
   &lt;td&gt;password is truncated and cannot be used&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;FFmpeg&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
   &lt;td&gt;unsupported&lt;/td&gt; 
   &lt;td&gt;Passwords and query parameters are currently truncated to 1024 characters by FFmpeg, so it's impossible to use FFMPEG+RTMP+JWT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GStreamer&lt;/td&gt; 
   &lt;td&gt;RTSP&lt;/td&gt; 
   &lt;td&gt;Password&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;GStreamer&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
   &lt;td&gt;Query parameter&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;any&lt;/td&gt; 
   &lt;td&gt;SRT&lt;/td&gt; 
   &lt;td&gt;unsupported&lt;/td&gt; 
   &lt;td&gt;SRT truncates passwords and query parameters to 512 characters, so it's impossible to use SRT+JWT. See &lt;a href="https://github.com/bluenviron/mediamtx/issues/3430"&gt;#3430&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Here's a tutorial on how to setup the &lt;a href="https://www.keycloak.org/"&gt;Keycloak identity server&lt;/a&gt; in order to provide JWTs:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Start Keycloak:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run --name=keycloak -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:23.0.7 start-dev
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open the Keycloak administration console on &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;, click on &lt;em&gt;master&lt;/em&gt; in the top left corner, &lt;em&gt;create realm&lt;/em&gt;, set realm name to &lt;code&gt;mediamtx&lt;/code&gt;, Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open page &lt;em&gt;Client scopes&lt;/em&gt;, &lt;em&gt;create client scope&lt;/em&gt;, set name to &lt;code&gt;mediamtx&lt;/code&gt;, Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open tab &lt;em&gt;Mappers&lt;/em&gt;, &lt;em&gt;Configure a new Mapper&lt;/em&gt;, &lt;em&gt;User Attribute&lt;/em&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Name: &lt;code&gt;mediamtx_permissions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;User Attribute: &lt;code&gt;mediamtx_permissions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Token Claim Name: &lt;code&gt;mediamtx_permissions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Claim JSON Type: &lt;code&gt;JSON&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Multivalued: &lt;code&gt;On&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open page &lt;em&gt;Clients&lt;/em&gt;, &lt;em&gt;Create client&lt;/em&gt;, set Client ID to &lt;code&gt;mediamtx&lt;/code&gt;, Next, Client authentication &lt;code&gt;On&lt;/code&gt;, Next, Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open tab &lt;em&gt;Credentials&lt;/em&gt;, copy client secret somewhere&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open tab &lt;em&gt;Client scopes&lt;/em&gt;, &lt;em&gt;Add client scope&lt;/em&gt;, Select &lt;code&gt;mediamtx&lt;/code&gt;, Add, Default&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open page &lt;em&gt;Users&lt;/em&gt;, &lt;em&gt;Add user&lt;/em&gt;, Username &lt;code&gt;testuser&lt;/code&gt;, Tab credentials, &lt;em&gt;Set password&lt;/em&gt;, pick a password, Save&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open tab &lt;em&gt;Attributes&lt;/em&gt;, &lt;em&gt;Add an attribute&lt;/em&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Key: &lt;code&gt;mediamtx_permissions&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Value: &lt;code&gt;{"action":"publish", "path": ""}&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;You can add as many attributes with key &lt;code&gt;mediamtx_permissions&lt;/code&gt; as you want, each with a single permission in it&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In MediaMTX, use the following URL:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;authJWTJWKS: http://localhost:8080/realms/mediamtx/protocol/openid-connect/certs
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Perform authentication on Keycloak:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;curl \
-d "client_id=mediamtx" \
-d "client_secret=$CLIENT_SECRET" \
-d "username=$USER" \
-d "password=$PASS" \
-d "grant_type=password" \
http://localhost:8080/realms/mediamtx/protocol/openid-connect/token
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The JWT is inside the &lt;code&gt;access_token&lt;/code&gt; key of the response:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-json"&gt;{"access_token":"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIyNzVjX3ptOVlOdHQ0TkhwWVk4Und6ZndUclVGSzRBRmQwY3lsM2wtY3pzIn0.eyJleHAiOjE3MDk1NTUwOTIsImlhdCI6MTcwOTU1NDc5MiwianRpIjoiMzE3ZTQ1NGUtNzczMi00OTM1LWExNzAtOTNhYzQ2ODhhYWIxIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9tZWRpYW10eCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI2NTBhZDA5Zi03MDgxLTQyNGItODI4Ni0xM2I3YTA3ZDI0MWEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZWRpYW10eCIsInNlc3Npb25fc3RhdGUiOiJjYzJkNDhjYy1kMmU5LTQ0YjAtODkzZS0wYTdhNjJiZDI1YmQiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIi8qIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1tZWRpYW10eCJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoibWVkaWFtdHggcHJvZmlsZSBlbWFpbCIsInNpZCI6ImNjMmQ0OGNjLWQyZTktNDRiMC04OTNlLTBhN2E2MmJkMjViZCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibWVkaWFtdHhfcGVybWlzc2lvbnMiOlt7ImFjdGlvbiI6InB1Ymxpc2giLCJwYXRocyI6ImFsbCJ9XSwicHJlZmVycmVkX3VzZXJuYW1lIjoidGVzdHVzZXIifQ.Gevz7rf1qHqFg7cqtSfSP31v_NS0VH7MYfwAdra1t6Yt5rTr9vJzqUeGfjYLQWR3fr4XC58DrPOhNnILCpo7jWRdimCnbPmuuCJ0AYM-Aoi3PAsWZNxgmtopq24_JokbFArY9Y1wSGFvF8puU64lt1jyOOyxf2M4cBHCs_EarCKOwuQmEZxSf8Z-QV9nlfkoTUszDCQTiKyeIkLRHL2Iy7Fw7_T3UI7sxJjVIt0c6HCNJhBBazGsYzmcSQ_GrmhbUteMTg00o6FicqkMBe99uZFnx9wIBm_QbO9hbAkkzF923I-DTAQrFLxT08ESMepDwmzFrmnwWYBLE3u8zuUlCA","expires_in":300,"refresh_expires_in":1800,"refresh_token":"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3OTI3Zjg4Zi05YWM4LTRlNmEtYWE1OC1kZmY0MDQzZDRhNGUifQ.eyJleHAiOjE3MDk1NTY1OTIsImlhdCI6MTcwOTU1NDc5MiwianRpIjoiMGVhZWFhMWItYzNhMC00M2YxLWJkZjAtZjI2NTRiODlkOTE3IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9tZWRpYW10eCIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9yZWFsbXMvbWVkaWFtdHgiLCJzdWIiOiI2NTBhZDA5Zi03MDgxLTQyNGItODI4Ni0xM2I3YTA3ZDI0MWEiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoibWVkaWFtdHgiLCJzZXNzaW9uX3N0YXRlIjoiY2MyZDQ4Y2MtZDJlOS00NGIwLTg5M2UtMGE3YTYyYmQyNWJkIiwic2NvcGUiOiJtZWRpYW10eCBwcm9maWxlIGVtYWlsIiwic2lkIjoiY2MyZDQ4Y2MtZDJlOS00NGIwLTg5M2UtMGE3YTYyYmQyNWJkIn0.yuXV8_JU0TQLuosNdp5xlYMjn7eO5Xq-PusdHzE7bsQ","token_type":"Bearer","not-before-policy":0,"session_state":"cc2d48cc-d2e9-44b0-893e-0a7a62bd25bd","scope":"mediamtx profile email"}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Encrypt the configuration&lt;/h3&gt; 
&lt;p&gt;The configuration file can be entirely encrypted for security purposes by using the &lt;code&gt;crypto_secretbox&lt;/code&gt; function of the NaCL function. An online tool for performing this operation is &lt;a href="https://play.golang.org/p/rX29jwObNe4"&gt;available here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;After performing the encryption, put the base64-encoded result into the configuration file, and launch the server with the &lt;code&gt;MTX_CONFKEY&lt;/code&gt; variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;MTX_CONFKEY=mykey ./mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remuxing, re-encoding, compression&lt;/h3&gt; 
&lt;p&gt;To change the format, codec or compression of a stream, use &lt;em&gt;FFmpeg&lt;/em&gt; or &lt;em&gt;GStreamer&lt;/em&gt; together with &lt;em&gt;MediaMTX&lt;/em&gt;. For instance, to re-encode an existing stream, that is available in the &lt;code&gt;/original&lt;/code&gt; path, and publish the resulting stream in the &lt;code&gt;/compressed&lt;/code&gt; path, edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  compressed:
  original:
    runOnReady: &amp;gt;
      ffmpeg -i rtsp://localhost:$RTSP_PORT/$MTX_PATH
        -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k
        -max_muxing_queue_size 1024 -f rtsp rtsp://localhost:$RTSP_PORT/compressed
    runOnReadyRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Record streams to disk&lt;/h3&gt; 
&lt;p&gt;To save available streams to disk, set the &lt;code&gt;record&lt;/code&gt; and the &lt;code&gt;recordPath&lt;/code&gt; parameter in the configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Record streams to disk.
  record: yes
  # Path of recording segments.
  # Extension is added automatically.
  # Available variables are %path (path name), %Y %m %d (year, month, day),
  # %H %M %S (hours, minutes, seconds), %f (microseconds), %z (time zone), %s (unix epoch).
  recordPath: ./recordings/%path/%Y-%m-%d_%H-%M-%S-%f
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All available recording parameters are listed in the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/mediamtx.yml"&gt;sample configuration file&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Be aware that not all codecs can be saved with all formats, as described in the compatibility matrix at the beginning of the README.&lt;/p&gt; 
&lt;p&gt;To upload recordings to a remote location, you can use &lt;em&gt;MediaMTX&lt;/em&gt; together with &lt;a href="https://github.com/rclone/rclone"&gt;rclone&lt;/a&gt;, a command line tool that provides file synchronization capabilities with a huge variety of services (including S3, FTP, SMB, Google Drive):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download and install &lt;a href="https://github.com/rclone/rclone"&gt;rclone&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Configure &lt;em&gt;rclone&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;rclone config
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Place &lt;code&gt;rclone&lt;/code&gt; into the &lt;code&gt;runOnInit&lt;/code&gt; and &lt;code&gt;runOnRecordSegmentComplete&lt;/code&gt; hooks:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # this is needed to sync segments after a crash.
  # replace myconfig with the name of the rclone config.
  runOnInit: rclone sync -v ./recordings myconfig:/my-path/recordings

  # this is called when a segment has been finalized.
  # replace myconfig with the name of the rclone config.
  runOnRecordSegmentComplete: rclone sync -v --min-age=1ms ./recordings myconfig:/my-path/recordings
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to delete local segments after they are uploaded, replace &lt;code&gt;rclone sync&lt;/code&gt; with &lt;code&gt;rclone move&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Playback recorded streams&lt;/h3&gt; 
&lt;p&gt;Existing recordings can be served to users through a dedicated HTTP server, that can be enabled inside the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;playback: yes
playbackAddress: :9996
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The server provides an endpoint to list recorded timespans:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:9996/list?path=[mypath]&amp;amp;start=[start]&amp;amp;end=[end]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[mypath] is the name of a path&lt;/li&gt; 
 &lt;li&gt;[start] (optional) is the start date in &lt;a href="https://www.utctime.net/"&gt;RFC3339 format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[end] (optional) is the end date in &lt;a href="https://www.utctime.net/"&gt;RFC3339 format&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The server will return a list of timespans in JSON format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;[
  {
    "start": "2006-01-02T15:04:05Z07:00",
    "duration": 60.0,
    "url": "http://localhost:9996/get?path=[mypath]&amp;amp;start=2006-01-02T15%3A04%3A05Z07%3A00&amp;amp;duration=60.0"
  },
  {
    "start": "2006-01-02T15:07:05Z07:00",
    "duration": 32.33,
    "url": "http://localhost:9996/get?path=[mypath]&amp;amp;start=2006-01-02T15%3A07%3A05Z07%3A00&amp;amp;duration=32.33"
  }
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The server provides an endpoint to download recordings:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:9996/get?path=[mypath]&amp;amp;start=[start]&amp;amp;duration=[duration]&amp;amp;format=[format]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[mypath] is the path name&lt;/li&gt; 
 &lt;li&gt;[start] is the start date in &lt;a href="https://www.utctime.net/"&gt;RFC3339 format&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[duration] is the maximum duration of the recording in seconds&lt;/li&gt; 
 &lt;li&gt;[format] (optional) is the output format of the stream. Available values are "fmp4" (default) and "mp4"&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All parameters must be &lt;a href="https://www.urlencoder.org/"&gt;url-encoded&lt;/a&gt;. For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:9996/get?path=mypath&amp;amp;start=2024-01-14T16%3A33%3A17%2B00%3A00&amp;amp;duration=200.5
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resulting stream uses the fMP4 format, that is natively compatible with any browser, therefore its URL can be directly inserted into a &amp;lt;video&amp;gt; tag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;video controls&amp;gt;
  &amp;lt;source src="http://localhost:9996/get?path=[mypath]&amp;amp;start=[start_date]&amp;amp;duration=[duration]" type="video/mp4" /&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The fMP4 format may offer limited compatibility with some players. To fix the issue, it's possible to use the standard MP4 format, by adding &lt;code&gt;format=mp4&lt;/code&gt; to a &lt;code&gt;/get&lt;/code&gt; request:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://localhost:9996/get?path=[mypath]&amp;amp;start=[start_date]&amp;amp;duration=[duration]&amp;amp;format=mp4
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Forward streams to other servers&lt;/h3&gt; 
&lt;p&gt;To forward incoming streams to another server, use &lt;em&gt;FFmpeg&lt;/em&gt; inside the &lt;code&gt;runOnReady&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  runOnReady: &amp;gt;
    ffmpeg -i rtsp://localhost:$RTSP_PORT/$MTX_PATH
    -c copy
    -f rtsp rtsp://other-server:8554/another-path
  runOnReadyRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Proxy requests to other servers&lt;/h3&gt; 
&lt;p&gt;The server allows to proxy incoming requests to other servers or cameras. This is useful to expose servers or cameras behind a NAT. Edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  "~^proxy_(.+)$":
    # If path name is a regular expression, $G1, G2, etc will be replaced
    # with regular expression groups.
    source: rtsp://other-server:8554/$G1
    sourceOnDemand: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All requests addressed to &lt;code&gt;rtsp://server:8854/proxy_a&lt;/code&gt; will be forwarded to &lt;code&gt;rtsp://other-server:8854/a&lt;/code&gt; and so on.&lt;/p&gt; 
&lt;h3&gt;On-demand publishing&lt;/h3&gt; 
&lt;p&gt;Edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and replace everything inside section &lt;code&gt;paths&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  ondemand:
    runOnDemand: ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH
    runOnDemandRestart: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command inserted into &lt;code&gt;runOnDemand&lt;/code&gt; will start only when a client requests the path &lt;code&gt;ondemand&lt;/code&gt;, therefore the file will start streaming only when requested.&lt;/p&gt; 
&lt;h3&gt;Route absolute timestamps&lt;/h3&gt; 
&lt;p&gt;Some streaming protocols allow to route absolute timestamps, associated with each frame, that are useful for synchronizing several video or data streams together. In particular, &lt;em&gt;MediaMTX&lt;/em&gt; supports receiving absolute timestamps with the following protocols and devices:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HLS (through the &lt;code&gt;EXT-X-PROGRAM-DATE-TIME&lt;/code&gt; tag in playlists)&lt;/li&gt; 
 &lt;li&gt;RTSP (through RTCP reports, when &lt;code&gt;useAbsoluteTimestamp&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; in settings)&lt;/li&gt; 
 &lt;li&gt;WebRTC (through RTCP reports, when &lt;code&gt;useAbsoluteTimestamp&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; in settings)&lt;/li&gt; 
 &lt;li&gt;Raspberry Pi Camera&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;and supports sending absolute timestamps with the following protocols:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HLS (through the &lt;code&gt;EXT-X-PROGRAM-DATE-TIME&lt;/code&gt; tag in playlists)&lt;/li&gt; 
 &lt;li&gt;RTSP (through RTCP reports)&lt;/li&gt; 
 &lt;li&gt;WebRTC (through RTCP reports)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A library that can read absolute timestamps with HLS is &lt;a href="https://github.com/bluenviron/gohlslib"&gt;gohlslib&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A library that can read absolute timestamps with RTSP is &lt;a href="https://github.com/bluenviron/gortsplib"&gt;gortsplib&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A browser can read read absolute timestamps with WebRTC if it exposes the &lt;a href="https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-estimatedplayouttimestamp"&gt;estimatedPlayoutTimestamp&lt;/a&gt; statistic.&lt;/p&gt; 
&lt;h3&gt;Expose the server in a subfolder&lt;/h3&gt; 
&lt;p&gt;HTTP-based services (WebRTC, HLS, Control API, Playback Server, Metrics, pprof) can be exposed in a subfolder of an existing HTTP server or reverse proxy. The reverse proxy must be able to intercept HTTP requests addressed to MediaMTX and corresponding responses, and perform the following changes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;The subfolder path must be stripped from request paths. For instance, if the server is exposed behind &lt;code&gt;/subpath&lt;/code&gt; and the reverse proxy receives a request with path &lt;code&gt;/subpath/mystream/index.m3u8&lt;/code&gt;, this has to be changed into &lt;code&gt;/mystream/index.m3u8&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Any &lt;code&gt;Location&lt;/code&gt; header in responses must be prefixed with the subfolder path. For instance, if the server is exposed behind &lt;code&gt;/subpath&lt;/code&gt; and the server sends a response with &lt;code&gt;Location: /mystream/index.m3u8&lt;/code&gt;, this has to be changed into &lt;code&gt;Location: /subfolder/mystream/index.m3u8&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If &lt;em&gt;nginx&lt;/em&gt; is the reverse proxy, this can be achieved with the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;location /subpath/ {
    proxy_pass http://mediamtx-ip:8889/;
    proxy_redirect / /subpath/;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;em&gt;Apache HTTP Server&lt;/em&gt; is the reverse proxy, this can be achieved with the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;Location /subpath&amp;gt;
    ProxyPass http://mediamtx-ip:8889
    ProxyPassReverse http://mediamtx-ip:8889
    Header edit Location ^(.*)$ "/subpath$1"
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If &lt;em&gt;Caddy&lt;/em&gt; is the reverse proxy, this can be achieved with the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;:80 {
    handle_path /subpath/* {
        reverse_proxy {
            to mediamtx-ip:8889
            header_down Location ^/ /subpath/
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Start on boot&lt;/h3&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;p&gt;On most Linux distributions (including Ubuntu and Debian, but not OpenWrt), &lt;em&gt;systemd&lt;/em&gt; is in charge of managing services and starting them on boot.&lt;/p&gt; 
&lt;p&gt;Move the server executable and configuration in global folders:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo mv mediamtx /usr/local/bin/
sudo mv mediamtx.yml /usr/local/etc/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a &lt;em&gt;systemd&lt;/em&gt; service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo tee /etc/systemd/system/mediamtx.service &amp;gt;/dev/null &amp;lt;&amp;lt; EOF
[Unit]
Wants=network.target
[Service]
ExecStart=/usr/local/bin/mediamtx /usr/local/etc/mediamtx.yml
[Install]
WantedBy=multi-user.target
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If SELinux is enabled (for instance in case of RedHat, Rocky, CentOS++), add correct security context:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;semanage fcontext -a -t bin_t /usr/local/bin/mediamtx
restorecon -Fv /usr/local/bin/mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enable and start the service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo systemctl daemon-reload
sudo systemctl enable mediamtx
sudo systemctl start mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;OpenWrt&lt;/h4&gt; 
&lt;p&gt;Move the server executable and configuration in global folders:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;mv mediamtx /usr/bin/
mkdir -p /usr/etc &amp;amp;&amp;amp; mv mediamtx.yml /usr/etc/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create a procd service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;tee /etc/init.d/mediamtx &amp;gt;/dev/null &amp;lt;&amp;lt; EOF
#!/bin/sh /etc/rc.common
USE_PROCD=1
START=95
STOP=01
start_service() {
    procd_open_instance
    procd_set_param command /usr/bin/mediamtx
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_close_instance
}
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enable and start the service:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;chmod +x /etc/init.d/mediamtx
/etc/init.d/mediamtx enable
/etc/init.d/mediamtx start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read the server logs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;logread
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;Download the &lt;a href="https://github.com/winsw/winsw/releases/download/v2.11.0/WinSW-x64.exe"&gt;WinSW v2 executable&lt;/a&gt; and place it into the same folder of &lt;code&gt;mediamtx.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In the same folder, create a file named &lt;code&gt;WinSW-x64.xml&lt;/code&gt; with this content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;service&amp;gt;
  &amp;lt;id&amp;gt;mediamtx&amp;lt;/id&amp;gt;
  &amp;lt;name&amp;gt;mediamtx&amp;lt;/name&amp;gt;
  &amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;
  &amp;lt;executable&amp;gt;%BASE%/mediamtx.exe&amp;lt;/executable&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open a terminal, navigate to the folder and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;WinSW-x64 install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The server is now installed as a system service and will start at boot time.&lt;/p&gt; 
&lt;h3&gt;Hooks&lt;/h3&gt; 
&lt;p&gt;The server allows to specify commands that are executed when a certain event happens, allowing the propagation of events to external software.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;runOnConnect&lt;/code&gt; allows to run a command when a client connects to the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;# Command to run when a client connects to the server.
# This is terminated with SIGINT when a client disconnects from the server.
# The following environment variables are available:
# * MTX_CONN_TYPE: connection type
# * MTX_CONN_ID: connection ID
# * RTSP_PORT: RTSP server port
runOnConnect: curl http://my-custom-server/webhook?conn_type=$MTX_CONN_TYPE&amp;amp;conn_id=$MTX_CONN_ID
# Restart the command if it exits.
runOnConnectRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnDisconnect&lt;/code&gt; allows to run a command when a client disconnects from the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;# Command to run when a client disconnects from the server.
# Environment variables are the same of runOnConnect.
runOnDisconnect: curl http://my-custom-server/webhook?conn_type=$MTX_CONN_TYPE&amp;amp;conn_id=$MTX_CONN_ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnInit&lt;/code&gt; allows to run a command when a path is initialized. This can be used to publish a stream when the server is launched:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  mypath:
    # Command to run when this path is initialized.
    # This can be used to publish a stream when the server is launched.
    # The following environment variables are available:
    # * MTX_PATH: path name
    # * RTSP_PORT: RTSP server port
    # * G1, G2, ...: regular expression groups, if path name is
    #   a regular expression.
    runOnInit: ffmpeg -i my_file.mp4 -c copy -f rtsp rtsp://localhost:8554/mypath
    # Restart the command if it exits.
    runOnInitRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnDemand&lt;/code&gt; allows to run a command when a path is requested by a reader. This can be used to publish a stream on demand:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Command to run when this path is requested by a reader
  # and no one is publishing to this path yet.
  # This is terminated with SIGINT when there are no readers anymore.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_QUERY: query parameters (passed by first reader)
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnDemand: ffmpeg -i my_file.mp4 -c copy -f rtsp rtsp://localhost:8554/mypath
  # Restart the command if it exits.
  runOnDemandRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnUnDemand&lt;/code&gt; allows to run a command when there are no readers anymore:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Command to run when there are no readers anymore.
  # Environment variables are the same of runOnDemand.
  runOnUnDemand:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnReady&lt;/code&gt; allows to run a command when a stream is ready to be read:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Command to run when the stream is ready to be read, whenever it is
  # published by a client or pulled from a server / camera.
  # This is terminated with SIGINT when the stream is not ready anymore.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_QUERY: query parameters (passed by publisher)
  # * MTX_SOURCE_TYPE: source type
  # * MTX_SOURCE_ID: source ID
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnReady: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;source_type=$MTX_SOURCE_TYPE&amp;amp;source_id=$MTX_SOURCE_ID
  # Restart the command if it exits.
  runOnReadyRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnNotReady&lt;/code&gt; allows to run a command when a stream is not available anymore:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Command to run when the stream is not available anymore.
  # Environment variables are the same of runOnReady.
  runOnNotReady: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;source_type=$MTX_SOURCE_TYPE&amp;amp;source_id=$MTX_SOURCE_ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnRead&lt;/code&gt; allows to run a command when a client starts reading:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Command to run when a client starts reading.
  # This is terminated with SIGINT when a client stops reading.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_QUERY: query parameters (passed by reader)
  # * MTX_READER_TYPE: reader type
  # * MTX_READER_ID: reader ID
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnRead: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;reader_type=$MTX_READER_TYPE&amp;amp;reader_id=$MTX_READER_ID
  # Restart the command if it exits.
  runOnReadRestart: no
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnUnread&lt;/code&gt; allows to run a command when a client stops reading:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Command to run when a client stops reading.
  # Environment variables are the same of runOnRead.
  runOnUnread: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;reader_type=$MTX_READER_TYPE&amp;amp;reader_id=$MTX_READER_ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnRecordSegmentCreate&lt;/code&gt; allows to run a command when a recording segment is created:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Command to run when a recording segment is created.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_SEGMENT_PATH: segment file path
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnRecordSegmentCreate: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;segment_path=$MTX_SEGMENT_PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runOnRecordSegmentComplete&lt;/code&gt; allows to run a command when a recording segment is complete:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;pathDefaults:
  # Command to run when a recording segment is complete.
  # The following environment variables are available:
  # * MTX_PATH: path name
  # * MTX_SEGMENT_PATH: segment file path
  # * MTX_SEGMENT_DURATION: segment duration
  # * RTSP_PORT: RTSP server port
  # * G1, G2, ...: regular expression groups, if path name is
  #   a regular expression.
  runOnRecordSegmentComplete: curl http://my-custom-server/webhook?path=$MTX_PATH&amp;amp;segment_path=$MTX_SEGMENT_PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Control API&lt;/h3&gt; 
&lt;p&gt;The server can be queried and controlled with an API, that can be enabled by setting the &lt;code&gt;api&lt;/code&gt; parameter in the configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;api: yes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To obtain a list of of active paths, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl http://127.0.0.1:9997/v3/paths/list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The control API is documented in the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/api/openapi.yaml"&gt;OpenAPI / Swagger file&lt;/a&gt; and in a &lt;a href="https://bluenviron.github.io/mediamtx/"&gt;dedicated site&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Be aware that by default the Control API is accessible by localhost only; to increase visibility or add authentication, check &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#authentication"&gt;Authentication&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Metrics&lt;/h3&gt; 
&lt;p&gt;A metrics exporter, compatible with &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt;, can be enabled with the parameter &lt;code&gt;metrics: yes&lt;/code&gt;; then the server can be queried for metrics with Prometheus or with a simple HTTP request:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl localhost:9998/metrics
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Obtaining:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ini"&gt;# metrics of every path
paths{name="[path_name]",state="[state]"} 1
paths_bytes_received{name="[path_name]",state="[state]"} 1234
paths_bytes_sent{name="[path_name]",state="[state]"} 1234
paths_readers{name="[path_name]",state="[state]"} 1234

# metrics of every HLS muxer
hls_muxers{name="[name]"} 1
hls_muxers_bytes_sent{name="[name]"} 187

# metrics of every RTSP connection
rtsp_conns{id="[id]"} 1
rtsp_conns_bytes_received{id="[id]"} 1234
rtsp_conns_bytes_sent{id="[id]"} 187

# metrics of every RTSP session
rtsp_sessions{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1
rtsp_sessions_bytes_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1234
rtsp_sessions_bytes_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 187
rtsp_sessions_rtp_packets_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsp_sessions_rtp_packets_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsp_sessions_rtp_packets_lost{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsp_sessions_rtp_packets_in_error{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsp_sessions_rtp_packets_jitter{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsp_sessions_rtcp_packets_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsp_sessions_rtcp_packets_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsp_sessions_rtcp_packets_in_error{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123

# metrics of every RTSPS connection
rtsps_conns{id="[id]"} 1
rtsps_conns_bytes_received{id="[id]"} 1234
rtsps_conns_bytes_sent{id="[id]"} 187

# metrics of every RTSPS session
rtsps_sessions{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1
rtsps_sessions_bytes_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1234
rtsps_sessions_bytes_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 187
rtsps_sessions_rtp_packets_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsps_sessions_rtp_packets_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsps_sessions_rtp_packets_lost{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsps_sessions_rtp_packets_in_error{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsps_sessions_rtp_packets_jitter{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsps_sessions_rtcp_packets_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsps_sessions_rtcp_packets_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
rtsps_sessions_rtcp_packets_in_error{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123

# metrics of every RTMP connection
rtmp_conns{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1
rtmp_conns_bytes_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1234
rtmp_conns_bytes_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 187

# metrics of every RTMPS connection
rtmps_conns{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1
rtmps_conns_bytes_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1234
rtmps_conns_bytes_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 187

# metrics of every SRT connection
srt_conns{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1
srt_conns_packets_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_sent_unique{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_unique{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_send_loss{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_loss{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_retrans{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_retrans{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_sent_ack{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_ack{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_sent_nak{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_nak{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_sent_km{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_km{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_us_snd_duration{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_send_drop{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_drop{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_undecrypt{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 187
srt_conns_bytes_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1234
srt_conns_bytes_sent_unique{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_received_unique{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_received_loss{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_retrans{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_received_retrans{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_send_drop{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_received_drop{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_received_undecrypt{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_us_packets_send_period{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123.123
srt_conns_packets_flow_window{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_flight_size{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_ms_rtt{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123.123
srt_conns_mbps_send_rate{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_mbps_receive_rate{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123.123
srt_conns_mbps_link_capacity{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123.123
srt_conns_bytes_avail_send_buf{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_avail_receive_buf{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_mbps_max_bw{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} -123
srt_conns_bytes_mss{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_send_buf{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_send_buf{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_ms_send_buf{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_ms_send_tsb_pd_delay{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_receive_buf{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_bytes_receive_buf{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_ms_receive_buf{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_ms_receive_tsb_pd_delay{iid="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_reorder_tolerance{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_avg_belated_time{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_send_loss_rate{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
srt_conns_packets_received_loss_rate{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123

# metrics of every WebRTC session
webrtc_sessions{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1
webrtc_sessions_bytes_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 1234
webrtc_sessions_bytes_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 187
webrtc_sessions_rtp_packets_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
webrtc_sessions_rtp_packets_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
webrtc_sessions_rtp_packets_lost{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
webrtc_sessions_rtp_packets_jitter{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
webrtc_sessions_rtcp_packets_received{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
webrtc_sessions_rtcp_packets_sent{id="[id]",path="[path]",remoteAddr="[remoteAddr]",state="[state]"} 123
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Metrics can be tuned and filtered by using query parameters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;type=[TYPE]&lt;/code&gt;: show metrics of a certain type only (where TYPE can be &lt;code&gt;paths&lt;/code&gt;, &lt;code&gt;hls_muxers&lt;/code&gt;, &lt;code&gt;rtsp_conns&lt;/code&gt;, &lt;code&gt;rtsp_sessions&lt;/code&gt;, &lt;code&gt;rtsps_conns&lt;/code&gt;, &lt;code&gt;rtsps_sessions&lt;/code&gt;, &lt;code&gt;rtmp_conns&lt;/code&gt;, &lt;code&gt;rtmps_conns&lt;/code&gt;, &lt;code&gt;srt_conns&lt;/code&gt;, &lt;code&gt;webrtc_sessions&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;path=[PATH]&lt;/code&gt;: show metrics belonging to a specific path only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;hls_muxer=[PATH]&lt;/code&gt;: show metrics belonging to a specific HLS muxer only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp_conn=[ID]&lt;/code&gt; show metrics belonging to a specific RTSP connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp_session=[SESSION]&lt;/code&gt;: show metrics belonging to a specific RTSP session only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsps_conn=[ID]&lt;/code&gt; show metrics belonging to a specific RTSPS connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsps_session=[SESSION]&lt;/code&gt;: show metrics belonging to a specific RTSPS session only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtmp_conn=[ID]&lt;/code&gt; show metrics belonging to a specific RTMP connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtmps_conn=[ID]&lt;/code&gt; show metrics belonging to a specific RTMPS connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;srt_conn=[ID]&lt;/code&gt; show metrics belonging to a specific SRT connection only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;webrtc_session=[ID]&lt;/code&gt; show metrics belonging to a specific WebRTC session only&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;pprof&lt;/h3&gt; 
&lt;p&gt;A performance monitor, compatible with pprof, can be enabled with the parameter &lt;code&gt;pprof: yes&lt;/code&gt;; then the server can be queried for metrics with pprof-compatible tools, like:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go tool pprof -text http://localhost:9999/debug/pprof/goroutine
go tool pprof -text http://localhost:9999/debug/pprof/heap
go tool pprof -text http://localhost:9999/debug/pprof/profile?seconds=30
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SRT-specific features&lt;/h3&gt; 
&lt;h4&gt;Standard stream ID syntax&lt;/h4&gt; 
&lt;p&gt;In SRT, the stream ID is a string that is sent to the remote part in order to advertise what action the caller is gonna do (publish or read), the path and the credentials. All these informations have to be encoded into a single string. This server supports two stream ID syntaxes, a custom one (that is the one reported in rest of the README) and also a &lt;a href="https://github.com/Haivision/srt/raw/master/docs/features/access-control.md"&gt;standard one&lt;/a&gt; proposed by the authors of the protocol and enforced by some hardware. The standard syntax can be used in this way:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;srt://localhost:8890?streamid=#!::m=publish,r=mypath,u=myuser,s=mypass&amp;amp;pkt_size=1316
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;key &lt;code&gt;m&lt;/code&gt; contains the action (&lt;code&gt;publish&lt;/code&gt; or &lt;code&gt;request&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;key &lt;code&gt;r&lt;/code&gt; contains the path&lt;/li&gt; 
 &lt;li&gt;key &lt;code&gt;u&lt;/code&gt; contains the username&lt;/li&gt; 
 &lt;li&gt;key &lt;code&gt;s&lt;/code&gt; contains the password&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;WebRTC-specific features&lt;/h3&gt; 
&lt;h4&gt;Authenticating with WHIP/WHEP&lt;/h4&gt; 
&lt;p&gt;When using WHIP or WHEP to establish a WebRTC connection, there are several ways to provide credentials.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If internal authentication or HTTP-based authentication is in use, username and password can be passed through the &lt;code&gt;Authorization: Basic&lt;/code&gt; HTTP header:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Authorization: Basic base64(user:pass)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;base64(user:pass)&lt;/code&gt; is the base64 encoding of "user:pass".&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;Authorization: Basic&lt;/code&gt; header cannot be used (for instance, in software like OBS Studio), credentials can be passed through the &lt;code&gt;Authorization: Bearer&lt;/code&gt; header, where value is the concatenation of username and password, separated by a colon:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Authorization: Bearer username:password
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If JWT-based authentication is in use, the JWT can be passed through the &lt;code&gt;Authorization: Bearer&lt;/code&gt; header:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Authorization: Bearer MY_JWT
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Solving WebRTC connectivity issues&lt;/h4&gt; 
&lt;p&gt;If the server is hosted inside a container or is behind a NAT, additional configuration is required in order to allow the two WebRTC parts (server and client) to establish a connection.&lt;/p&gt; 
&lt;p&gt;Make sure that &lt;code&gt;webrtcAdditionalHosts&lt;/code&gt; includes your public IPs, that are IPs that can be used by clients to reach the server. If clients are on the same LAN as the server, add the LAN address of the server. If clients are coming from the internet, add the public IP address of the server, or alternatively a DNS name, if you have one. You can add several values to support all scenarios:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;webrtcAdditionalHosts: [192.168.x.x, 1.2.3.4, my-dns.example.org, ...]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If there's a NAT / container between server and clients, it must be configured to route all incoming UDP packets on port 8189 to the server. If you're using Docker, this can be achieved with the flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it \
-p 8189:8189/udp
....
bluenviron/mediamtx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you still have problems, the UDP protocol might be blocked by a firewall. Enable the TCP protocol by enabling the local TCP listener:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;webrtcLocalTCPAddress: :8189
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If there's a NAT / container between server and clients, it must be configured to route all incoming TCP packets on port 8189 to the server.&lt;/p&gt; 
&lt;p&gt;If you still have problems, add a STUN server. When a STUN server is in use, server IP is obtained automatically and connections are established with the "UDP hole punching" technique, that uses a random UDP port that does not need to be open. For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;webrtcICEServers2:
  - url: stun:stun.l.google.com:19302
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you really still have problems, you can force all WebRTC/ICE connections to pass through a TURN server, like &lt;a href="https://github.com/coturn/coturn"&gt;coturn&lt;/a&gt;, that must be configured externally. The server address and credentials must be set in the configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;webrtcICEServers2:
- url: turn:host:port
  username: user
  password: password
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where user and pass are the username and password of the server. Note that port is not optional.&lt;/p&gt; 
&lt;p&gt;If the server uses a secret-based authentication (for instance, coturn with the use-auth-secret option), it must be configured by using AUTH_SECRET as username, and the secret as password:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;webrtcICEServers2:
- url: turn:host:port
  username: AUTH_SECRET
  password: secret
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where secret is the secret of the TURN server. MediaMTX will generate a set of credentials by using the secret, and credentials will be sent to clients before the WebRTC/ICE connection is established.&lt;/p&gt; 
&lt;p&gt;In some cases you may want the browser to connect using TURN servers but have mediamtx not using TURN (for example if the TURN server is on the same network as mediamtx). To allow this you can configure the TURN server to be client only:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;webrtcICEServers2:
- url: turn:host:port
  username: user
  password: password
  clientOnly: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Supported browsers&lt;/h4&gt; 
&lt;p&gt;The server can ingest and broadcast with WebRTC a wide variety of video and audio codecs (that are listed at the beginning of the README), but not all browsers can publish and read all codecs due to internal limitations that cannot be overcome by this or any other server.&lt;/p&gt; 
&lt;p&gt;In particular, reading and publishing H265 tracks with WebRTC was not possible until some time ago due to lack of browser support. The situation improved recently and can be described as following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Safari on iOS and macOS fully supports publishing and reading H265 tracks&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Chrome on Windows supports publishing and reading H265 tracks when a GPU is present and when the browser is launched with the following flags:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;chrome.exe --enable-features=PlatformHEVCEncoderSupport,WebRtcAllowH265Receive,WebRtcAllowH265Send --force-fieldtrials=WebRTC-Video-H26xPacketBuffer/Enabled
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We are expecting these flags to become redundant in the future and the feature to be turned on by default.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can check what codecs your browser can publish or read with WebRTC by &lt;a href="https://jsfiddle.net/v24s8q1f/"&gt;using this tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to support most browsers, you can to re-encode the stream by using H264 and Opus codecs, for instance by using FFmpeg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -i rtsp://original-source \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-c:a libopus -b:a 64K -async 50 \
-f rtsp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;HLS-specific features&lt;/h3&gt; 
&lt;h4&gt;Supported browsers&lt;/h4&gt; 
&lt;p&gt;The server can produce HLS streams with a variety of video and audio codecs (that are listed at the beginning of the README), but not all browsers can read all codecs due to internal limitations that cannot be overcome by this or any other server.&lt;/p&gt; 
&lt;p&gt;You can check what codecs your browser can read with HLS by &lt;a href="https://jsfiddle.net/tjcyv5aw/"&gt;using this tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to support most browsers, you can to re-encode the stream by using H264 and AAC codecs, for instance by using FFmpeg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;ffmpeg -i rtsp://original-source \
-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \
-c:a aac -b:a 160k \
-f rtsp rtsp://localhost:8554/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RTSP-specific features&lt;/h3&gt; 
&lt;h4&gt;Transport protocols&lt;/h4&gt; 
&lt;p&gt;The RTSP protocol supports different underlying transport protocols, that are chosen by clients during the handshake with the server:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;UDP: the most performant, but doesn't work when there's a NAT/firewall between server and clients.&lt;/li&gt; 
 &lt;li&gt;UDP-multicast: allows to save bandwidth when clients are all in the same LAN, by sending packets once to a fixed multicast IP.&lt;/li&gt; 
 &lt;li&gt;TCP: the most versatile.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The default transport protocol is UDP. To change the transport protocol, you have to tune the configuration of your client of choice.&lt;/p&gt; 
&lt;h4&gt;Encryption&lt;/h4&gt; 
&lt;p&gt;Incoming and outgoing RTSP streams can be encrypted with TLS, obtaining the RTSPS protocol. A TLS certificate is needed and can be generated with OpenSSL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;openssl genrsa -out server.key 2048
openssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Edit &lt;code&gt;mediamtx.yml&lt;/code&gt; and set the &lt;code&gt;encryption&lt;/code&gt;, &lt;code&gt;serverKey&lt;/code&gt; and serverCert parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;rtspEncryption: optional
rtspServerKey: server.key
rtspServerCert: server.crt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Streams can be published and read with the &lt;code&gt;rtsps&lt;/code&gt; scheme and the &lt;code&gt;8322&lt;/code&gt; port:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtsps://localhost:8322/mystream
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Corrupted frames&lt;/h4&gt; 
&lt;p&gt;In some scenarios, when publishing or reading from the server with RTSP, frames can get corrupted. This can be caused by several reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When the transport protocol is UDP (which is default one), packets sent to the server might get discarded because the UDP read buffer size is too small. This can be noticed in logs through the "RTP packets lost" message. Try increasing the UDP read buffer size:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;rtspUDPReadBufferSize: 1000000
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the source of the stream is a camera:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  test:
    source: rtsp://..
    rtspUDPReadBufferSize: 1000000
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Both these options require the &lt;code&gt;net.core.rmem_max&lt;/code&gt; system parameter to be equal or greater than &lt;code&gt;rtspUDPReadBufferSize&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo sysctl net.core.rmem_max=100000000
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When the transport protocol is UDP (which is the default one), packets sent from the server to readers might get discarded because the write queue is too small. This can be noticed in logs through the "reader is too slow" message. Try increasing the write queue:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;writeQueueSize: 1024
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The stream is too big and it can't be transmitted correctly with the UDP transport protocol. UDP is more performant, faster and more efficient than TCP, but doesn't have a retransmission mechanism, that is needed in case of streams that need a large bandwidth. A solution consists in switching to TCP:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;rtspTransports: [tcp]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case the source is a camera:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yml"&gt;paths:
  test:
    source: rtsp://..
    rtspTransport: tcp
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The stream throughput is too big to be handled by the network between server and readers. Upgrade the network or decrease the stream bitrate by re-encoding it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;RTMP-specific features&lt;/h3&gt; 
&lt;h4&gt;Encryption&lt;/h4&gt; 
&lt;p&gt;RTMP connections can be encrypted with TLS, obtaining the RTMPS protocol. A TLS certificate is needed and can be generated with OpenSSL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;openssl genrsa -out server.key 2048
openssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Edit mediamtx.yml and set the &lt;code&gt;rtmpEncryption&lt;/code&gt;, &lt;code&gt;rtmpServerKey&lt;/code&gt; and &lt;code&gt;rtmpServerCert&lt;/code&gt; parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;rtmpEncryption: optional
rtmpServerKey: server.key
rtmpServerCert: server.crt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Streams can be published and read with the rtmps scheme and the 1937 port:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rtmps://localhost:1937/...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be aware that RTMPS is currently unsupported by all major players. However, you can use a proxy like &lt;a href="https://www.stunnel.org"&gt;stunnel&lt;/a&gt; or &lt;a href="https://nginx.org/"&gt;nginx&lt;/a&gt; or a dedicated &lt;em&gt;MediaMTX&lt;/em&gt; instance to decrypt streams before reading them.&lt;/p&gt; 
&lt;h2&gt;Compile from source&lt;/h2&gt; 
&lt;h3&gt;Standard&lt;/h3&gt; 
&lt;p&gt;Install git and Go ≥ 1.24. Clone the repository, enter into the folder and start the building process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/bluenviron/mediamtx
cd mediamtx
go generate ./...
CGO_ENABLED=0 go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will produce the &lt;code&gt;mediamtx&lt;/code&gt; binary.&lt;/p&gt; 
&lt;h3&gt;OpenWrt&lt;/h3&gt; 
&lt;p&gt;The compilation procedure is the same as the standard one. On the OpenWrt device, install git and Go:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;opkg update
opkg install golang git git-http
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Clone the repository, enter into the folder and start the building process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/bluenviron/mediamtx
cd mediamtx
go generate ./...
CGO_ENABLED=0 go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will produce the &lt;code&gt;mediamtx&lt;/code&gt; binary.&lt;/p&gt; 
&lt;p&gt;If the OpenWrt device doesn't have enough resources to compile, you can &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/#cross-compile"&gt;cross compile&lt;/a&gt; from another machine.&lt;/p&gt; 
&lt;h3&gt;Custom libcamera&lt;/h3&gt; 
&lt;p&gt;If you need to use a custom or external libcamera when interacting with the Raspberry Pi Camera, you have to compile &lt;a href="https://github.com/bluenviron/mediamtx-rpicamera"&gt;mediamtx-rpicamera&lt;/a&gt; before compiling the server. Instructions are present in the &lt;code&gt;mediamtx-rpicamera&lt;/code&gt; repository.&lt;/p&gt; 
&lt;h3&gt;Cross compile&lt;/h3&gt; 
&lt;p&gt;Cross compilation allows to build an executable for a target machine from another machine with different operating system or architecture. This is useful in case the target machine doesn't have enough resources for compilation or if you don't want to install the compilation dependencies on it.&lt;/p&gt; 
&lt;p&gt;On the machine you want to use to compile, install git and Go ≥ 1.24. Clone the repository, enter into the folder and start the building process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/bluenviron/mediamtx
cd mediamtx
go generate ./...
CGO_ENABLED=0 GOOS=my_os GOARCH=my_arch go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;my_os&lt;/code&gt; and &lt;code&gt;my_arch&lt;/code&gt; with the operating system and architecture of your target machine. A list of all supported combinations can be obtained with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go tool dist list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case of the &lt;code&gt;arm&lt;/code&gt; architecture, there's an additional flag available, &lt;code&gt;GOARM&lt;/code&gt;, that allows to set the ARM version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;CGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=7 go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case of the &lt;code&gt;mips&lt;/code&gt; architecture, there's an additional flag available, &lt;code&gt;GOMIPS&lt;/code&gt;, that allows to set additional parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;CGO_ENABLED=0 GOOS=linux GOARCH=mips GOMIPS=softfloat go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will produce the &lt;code&gt;mediamtx&lt;/code&gt; binary.&lt;/p&gt; 
&lt;h3&gt;Compile for all supported platforms&lt;/h3&gt; 
&lt;p&gt;Install Docker and launch:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;make binaries
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The command will produce tarballs in folder &lt;code&gt;binaries/&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker image&lt;/h3&gt; 
&lt;p&gt;The official Docker image can be recompiled by following these steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Build binaries for all supported platforms:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;make binaries
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build the image by using one of the Dockerfiles inside the &lt;code&gt;docker/&lt;/code&gt; folder:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker build . -f docker/standard.Dockerfile -t my-mediamtx
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A Dockerfile is available for each image variant (&lt;code&gt;standard.Dockerfile&lt;/code&gt;, &lt;code&gt;ffmpeg.Dockerfile&lt;/code&gt;, &lt;code&gt;rpi.Dockerfile&lt;/code&gt;, &lt;code&gt;ffmpeg-rpi.Dockerfile&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;All the code in this repository is released under the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/LICENSE"&gt;MIT License&lt;/a&gt;. Compiled binaries include some third-party dependencies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;all the Golang-based dependencies listed into the &lt;a href="https://raw.githubusercontent.com/bluenviron/mediamtx/main/go.mod"&gt;go.mod file&lt;/a&gt;, which are all released under either the MIT license, BSD 3-Clause license or Apache License 2.0.&lt;/li&gt; 
 &lt;li&gt;hls.js, released under the &lt;a href="https://github.com/video-dev/hls.js/raw/master/LICENSE"&gt;Apache License 2.0&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;mediamtx-rpicamera, which is released under the same license of &lt;em&gt;MediaMTX&lt;/em&gt; but includes some &lt;a href="https://github.com/bluenviron/mediamtx-rpicamera?tab=readme-ov-file#license"&gt;third-party dependencies&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Specifications&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;name&lt;/th&gt; 
   &lt;th&gt;area&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/bluenviron/gortsplib#specifications"&gt;RTSP / RTP / RTCP specifications&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTSP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/bluenviron/gohlslib#specifications"&gt;HLS specifications&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;HLS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://veovera.org/docs/legacy/amf0-file-format-spec.pdf"&gt;Action Message Format - AMF 0&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://veovera.org/docs/legacy/video-file-format-v10-1-spec.pdf"&gt;FLV&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://veovera.org/docs/legacy/rtmp-v1-0-spec.pdf"&gt;RTMP&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://veovera.org/docs/enhanced/enhanced-rtmp-v2.pdf"&gt;Enhanced RTMP v2&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;RTMP&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.w3.org/TR/webrtc/"&gt;WebRTC: Real-Time Communication in Browsers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8835"&gt;RFC8835, Transports for WebRTC&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc7742"&gt;RFC7742, WebRTC Video Processing and Codec Requirements&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc7874"&gt;RFC7847, WebRTC Audio Codec and Processing Requirements&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc7875"&gt;RFC7875, Additional WebRTC Audio Codecs for Interoperability&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://datatracker.ietf.org/doc/draft-ietf-avtcore-hevc-webrtc/"&gt;H.265 Profile for WebRTC&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://datatracker.ietf.org/doc/draft-ietf-wish-whip/"&gt;WebRTC HTTP Ingestion Protocol (WHIP)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://datatracker.ietf.org/doc/draft-murillo-whep/"&gt;WebRTC HTTP Egress Protocol (WHEP)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;WebRTC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://haivision.github.io/srt-rfc/draft-sharabayko-srt.html"&gt;The SRT Protocol&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;SRT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/bluenviron/mediacommon#specifications"&gt;Codec specifications&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;codecs&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/golang-standards/project-layout"&gt;Golang project layout&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;project layout&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Related projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bluenviron/gortsplib"&gt;gortsplib (RTSP library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bluenviron/gohlslib"&gt;gohlslib (HLS library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bluenviron/mediacommon"&gt;mediacommon (codecs and formats library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bluenviron/mediamtx-rpicamera"&gt;mediamtx-rpicamera (Raspberry Pi Camera component)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/datarhei/gosrt"&gt;datarhei/gosrt (SRT library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pion/webrtc"&gt;pion/webrtc (WebRTC library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pion/sdp"&gt;pion/sdp (SDP library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pion/rtp"&gt;pion/rtp (RTP library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pion/rtcp"&gt;pion/rtcp (RTCP library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/asticode/go-astits"&gt;go-astits (MPEG-TS library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/abema/go-mp4"&gt;go-mp4 (MP4 library used internally)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/video-dev/hls.js"&gt;hls.js (browser-side HLS library used internally)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>FiloSottile/mkcert</title>
      <link>https://github.com/FiloSottile/mkcert</link>
      <description>&lt;p&gt;A simple zero-config tool to make locally trusted development certificates with any names you'd like.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mkcert&lt;/h1&gt; 
&lt;p&gt;mkcert is a simple tool for making locally-trusted development certificates. It requires no configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ mkcert -install
Created a new local CA 💥
The local CA is now installed in the system trust store! ⚡️
The local CA is now installed in the Firefox trust store (requires browser restart)! 🦊

$ mkcert example.com "*.example.com" example.test localhost 127.0.0.1 ::1

Created a new certificate valid for the following names 📜
 - "example.com"
 - "*.example.com"
 - "example.test"
 - "localhost"
 - "127.0.0.1"
 - "::1"

The certificate is at "./example.com+5.pem" and the key at "./example.com+5-key.pem" ✅
&lt;/code&gt;&lt;/pre&gt; 
&lt;p align="center"&gt;&lt;img width="498" alt="Chrome and Firefox screenshot" src="https://user-images.githubusercontent.com/1225294/51066373-96d4aa80-15be-11e9-91e2-f4e44a3a4458.png" /&gt;&lt;/p&gt; 
&lt;p&gt;Using certificates from real certificate authorities (CAs) for development can be dangerous or impossible (for hosts like &lt;code&gt;example.test&lt;/code&gt;, &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt;), but self-signed certificates cause trust errors. Managing your own CA is the best solution, but usually involves arcane commands, specialized knowledge and manual steps.&lt;/p&gt; 
&lt;p&gt;mkcert automatically creates and installs a local CA in the system root store, and generates locally-trusted certificates. mkcert does not automatically configure servers to use the certificates, though, that's up to you.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the &lt;code&gt;rootCA-key.pem&lt;/code&gt; file that mkcert automatically generates gives complete power to intercept secure requests from your machine. Do not share it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;On macOS, use &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install mkcert
brew install nss # if you use Firefox
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or &lt;a href="https://www.macports.org/"&gt;MacPorts&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo port selfupdate
sudo port install mkcert
sudo port install nss # if you use Firefox
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;On Linux, first install &lt;code&gt;certutil&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo apt install libnss3-tools
    -or-
sudo yum install nss-tools
    -or-
sudo pacman -S nss
    -or-
sudo zypper install mozilla-nss-tools
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can install using &lt;a href="https://docs.brew.sh/Homebrew-on-Linux"&gt;Homebrew on Linux&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;brew install mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or build from source (requires Go 1.13+)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/FiloSottile/mkcert &amp;amp;&amp;amp; cd mkcert
go build -ldflags "-X main.Version=$(git describe --tags)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or use &lt;a href="https://github.com/FiloSottile/mkcert/releases"&gt;the pre-built binaries&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
chmod +x mkcert-v*-linux-amd64
sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Arch Linux users, &lt;a href="https://archlinux.org/packages/extra/x86_64/mkcert/"&gt;&lt;code&gt;mkcert&lt;/code&gt;&lt;/a&gt; is available on the official Arch Linux repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo pacman -Syu mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;On Windows, use &lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;choco install mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or use Scoop&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;scoop bucket add extras
scoop install mkcert
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or build from source (requires Go 1.10+), or use &lt;a href="https://github.com/FiloSottile/mkcert/releases"&gt;the pre-built binaries&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you're running into permission problems try running &lt;code&gt;mkcert&lt;/code&gt; as an Administrator.&lt;/p&gt; 
&lt;h2&gt;Supported root stores&lt;/h2&gt; 
&lt;p&gt;mkcert supports the following root stores:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;macOS system store&lt;/li&gt; 
 &lt;li&gt;Windows system store&lt;/li&gt; 
 &lt;li&gt;Linux variants that provide either 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;update-ca-trust&lt;/code&gt; (Fedora, RHEL, CentOS) or&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;update-ca-certificates&lt;/code&gt; (Ubuntu, Debian, OpenSUSE, SLES) or&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;trust&lt;/code&gt; (Arch)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Firefox (macOS and Linux only)&lt;/li&gt; 
 &lt;li&gt;Chrome and Chromium&lt;/li&gt; 
 &lt;li&gt;Java (when &lt;code&gt;JAVA_HOME&lt;/code&gt; is set)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To only install the local root CA into a subset of them, you can set the &lt;code&gt;TRUST_STORES&lt;/code&gt; environment variable to a comma-separated list. Options are: "system", "java" and "nss" (includes Firefox).&lt;/p&gt; 
&lt;h2&gt;Advanced topics&lt;/h2&gt; 
&lt;h3&gt;Advanced options&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;	-cert-file FILE, -key-file FILE, -p12-file FILE
	    Customize the output paths.

	-client
	    Generate a certificate for client authentication.

	-ecdsa
	    Generate a certificate with an ECDSA key.

	-pkcs12
	    Generate a ".p12" PKCS #12 file, also know as a ".pfx" file,
	    containing certificate and key for legacy applications.

	-csr CSR
	    Generate a certificate based on the supplied CSR. Conflicts with
	    all other flags and arguments except -install and -cert-file.
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; place these options before the domain names list.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Example&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;mkcert -key-file key.pem -cert-file cert.pem example.com *.example.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;S/MIME&lt;/h3&gt; 
&lt;p&gt;mkcert automatically generates an S/MIME certificate if one of the supplied names is an email address.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mkcert filippo@example.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Mobile devices&lt;/h3&gt; 
&lt;p&gt;For the certificates to be trusted on mobile devices, you will have to install the root CA. It's the &lt;code&gt;rootCA.pem&lt;/code&gt; file in the folder printed by &lt;code&gt;mkcert -CAROOT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;On iOS, you can either use AirDrop, email the CA to yourself, or serve it from an HTTP server. After opening it, you need to &lt;a href="https://github.com/FiloSottile/mkcert/issues/233#issuecomment-690110809"&gt;install the profile in Settings &amp;gt; Profile Downloaded&lt;/a&gt; and then &lt;a href="https://support.apple.com/en-nz/HT204477"&gt;enable full trust in it&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For Android, you will have to install the CA and then enable user roots in the development build of your app. See &lt;a href="https://stackoverflow.com/a/22040887/749014"&gt;this StackOverflow answer&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using the root with Node.js&lt;/h3&gt; 
&lt;p&gt;Node does not use the system root store, so it won't accept mkcert certificates automatically. Instead, you will have to set the &lt;a href="https://nodejs.org/api/cli.html#cli_node_extra_ca_certs_file"&gt;&lt;code&gt;NODE_EXTRA_CA_CERTS&lt;/code&gt;&lt;/a&gt; environment variable.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;export NODE_EXTRA_CA_CERTS="$(mkcert -CAROOT)/rootCA.pem"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Changing the location of the CA files&lt;/h3&gt; 
&lt;p&gt;The CA certificate and its key are stored in an application data folder in the user home. You usually don't have to worry about it, as installation is automated, but the location is printed by &lt;code&gt;mkcert -CAROOT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to manage separate CAs, you can use the environment variable &lt;code&gt;$CAROOT&lt;/code&gt; to set the folder where mkcert will place and look for the local CA files.&lt;/p&gt; 
&lt;h3&gt;Installing the CA on other systems&lt;/h3&gt; 
&lt;p&gt;Installing in the trust store does not require the CA key, so you can export the CA certificate and use mkcert to install it in other machines.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Look for the &lt;code&gt;rootCA.pem&lt;/code&gt; file in &lt;code&gt;mkcert -CAROOT&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;copy it to a different machine&lt;/li&gt; 
 &lt;li&gt;set &lt;code&gt;$CAROOT&lt;/code&gt; to its directory&lt;/li&gt; 
 &lt;li&gt;run &lt;code&gt;mkcert -install&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Remember that mkcert is meant for development purposes, not production, so it should not be used on end users' machines, and that you should &lt;em&gt;not&lt;/em&gt; export or share &lt;code&gt;rootCA-key.pem&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>m1k1o/neko</title>
      <link>https://github.com/m1k1o/neko</link>
      <description>&lt;p&gt;A self hosted virtual browser that runs in docker and uses WebRTC.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://github.com/m1k1o/neko" title="Neko's Github repository."&gt; &lt;img src="https://neko.m1k1o.net/img/logo.png" width="400" height="auto" /&gt; &lt;/a&gt; 
 &lt;p align="center"&gt; &lt;a href="https://github.com/m1k1o/neko/releases"&gt; &lt;img src="https://img.shields.io/github/v/release/m1k1o/neko" alt="release" /&gt; &lt;/a&gt; &lt;a href="https://github.com/m1k1o/neko/raw/master/LICENSE"&gt; &lt;img src="https://img.shields.io/github/license/m1k1o/neko" alt="license" /&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/r/m1k1o/neko"&gt; &lt;img src="https://img.shields.io/docker/pulls/m1k1o/neko" alt="pulls" /&gt; &lt;/a&gt; &lt;a href="https://github.com/m1k1o/neko/issues"&gt; &lt;img src="https://img.shields.io/github/issues/m1k1o/neko" alt="issues" /&gt; &lt;/a&gt; &lt;a href="https://github.com/sponsors/m1k1o"&gt; &lt;img src="https://img.shields.io/badge/-sponsor-red" alt="issues" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/3U6hWpC"&gt; &lt;img src="https://discordapp.com/api/guilds/665851821906067466/widget.png" alt="Chat on discord" /&gt; &lt;/a&gt; &lt;a href="https://hellogithub.com/repository/4536d4546af24196af3f08a023dfa007" target="_blank"&gt; &lt;img src="https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=4536d4546af24196af3f08a023dfa007&amp;amp;claim_uid=0x19e4dJwD83aW2&amp;amp;theme=small" alt="Featured｜HelloGitHub" /&gt; &lt;/a&gt; &lt;a href="https://github.com/m1k1o/neko/actions"&gt; &lt;img src="https://github.com/m1k1o/neko/actions/workflows/ghcr.yml/badge.svg?sanitize=true" alt="build" /&gt; &lt;/a&gt; &lt;/p&gt; 
 &lt;img src="https://neko.m1k1o.net/img/intro.gif" width="650" height="auto" /&gt; 
&lt;/div&gt; 
&lt;h1&gt;n.eko&lt;/h1&gt; 
&lt;p&gt;Welcome to Neko, a self-hosted virtual browser that runs in Docker and uses WebRTC technology. Neko is a powerful tool that allows you to &lt;strong&gt;run a fully-functional browser in a virtual environment&lt;/strong&gt;, giving you the ability to &lt;strong&gt;access the internet securely and privately from anywhere&lt;/strong&gt;. With Neko, you can browse the web, &lt;strong&gt;run applications&lt;/strong&gt;, and perform other tasks just as you would on a regular browser, all within a &lt;strong&gt;secure and isolated environment&lt;/strong&gt;. Whether you are a developer looking to test web applications, a &lt;strong&gt;privacy-conscious user seeking a secure browsing experience&lt;/strong&gt;, or simply someone who wants to take advantage of the &lt;strong&gt;convenience and flexibility of a virtual browser&lt;/strong&gt;, Neko is the perfect solution.&lt;/p&gt; 
&lt;p&gt;In addition to its security and privacy features, Neko offers the &lt;strong&gt;ability for multiple users to access it simultaneously&lt;/strong&gt;. This makes it an ideal solution for teams or organizations that need to share access to a browser, as well as for individuals who want to use &lt;strong&gt;multiple devices to access the same virtual environment&lt;/strong&gt;. With Neko, you can &lt;strong&gt;easily and securely share access to a browser with others&lt;/strong&gt;, without having to worry about maintaining separate configurations or settings. Whether you need to &lt;strong&gt;collaborate on a project&lt;/strong&gt;, access shared resources, or simply want to &lt;strong&gt;share access to a browser with friends or family&lt;/strong&gt;, Neko makes it easy to do so.&lt;/p&gt; 
&lt;p&gt;Neko is also a great tool for &lt;strong&gt;hosting watch parties&lt;/strong&gt; and interactive presentations. With its virtual browser capabilities, Neko allows you to host watch parties and presentations that are &lt;strong&gt;accessible from anywhere&lt;/strong&gt;, without the need for in-person gatherings. This makes it easy to &lt;strong&gt;stay connected with friends and colleagues&lt;/strong&gt;, even when you are unable to meet in person. With Neko, you can easily host a watch party or give an &lt;strong&gt;interactive presentation&lt;/strong&gt;, whether it's for leisure or work. Simply invite your guests to join the virtual environment, and you can share the screen and &lt;strong&gt;interact with them in real-time&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;This app uses WebRTC to stream a desktop inside of a docker container, original author made this because &lt;a href="https://en.wikipedia.org/wiki/Rabb.it"&gt;rabb.it&lt;/a&gt; went under and his internet could not handle streaming and discord kept crashing when his friend attempted to. He just wanted to watch anime with his friends ლ(ಠ益ಠლ) so he started digging throughout the internet and found a few &lt;em&gt;kinda&lt;/em&gt; clones, but none of them had the virtual browser, then he found &lt;a href="https://github.com/Khauri/Turtus"&gt;Turtus&lt;/a&gt; and he was able to figure out the rest.&lt;/p&gt; 
&lt;p&gt;Then I found &lt;a href="https://github.com/nurdism/neko"&gt;this&lt;/a&gt; project and started to dig into it. I really liked the idea of having collaborative browser browsing together with multiple people, so I created a fork. Initially, I wanted to merge my changes to the upstream repository, but the original author did not have time for this project anymore and it got eventually archived.&lt;/p&gt; 
&lt;h2&gt;Use-cases and comparison&lt;/h2&gt; 
&lt;p&gt;Neko started as a virtual browser that is streamed using WebRTC to multiple users.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It is &lt;strong&gt;not only limited to a browser&lt;/strong&gt;; it can run anything that runs on linux (e.g. VLC). Browser only happens to be the most popular and widely used use-case.&lt;/li&gt; 
 &lt;li&gt;In fact, it is not limited to a single program either; you can install a full desktop environment (e.g. XFCE, KDE).&lt;/li&gt; 
 &lt;li&gt;Speaking of limits, it does not need to run in a container; you could install neko on your host, connect to your X server and control your whole VM.&lt;/li&gt; 
 &lt;li&gt;Theoretically it is not limited to only X server, anything that can be controlled and scraped periodically for images could be used instead. 
  &lt;ul&gt; 
   &lt;li&gt;Like implementing RDP or VNC protocol, where neko would only act as WebRTC relay server. This is currently only future.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Primary use case is connecting with multiple people, leveraging real time synchronization and interactivity:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Watch party&lt;/strong&gt; - watching video content together with multiple people and reacting to it (chat, emotes) - open source alternative to &lt;a href="https://giggl.app/"&gt;giggl.app&lt;/a&gt; or &lt;a href="https://watch.hyperbeam.com"&gt;hyperbeam&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interactive presentation&lt;/strong&gt; - not only screen sharing, but others can control the screen.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Collaborative tool&lt;/strong&gt; - brainstorming ideas, cobrowsing, code debugging together.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support/Teaching&lt;/strong&gt; - interactively guiding people in controlled environment.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Embed anything&lt;/strong&gt; - embed virtual browser in your web app - open source alternative to &lt;a href="https://hyperbeam.com/"&gt;hyperbeam API&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;open any third-party website or application, synchronize audio and video flawlessly among multiple participants.&lt;/li&gt; 
   &lt;li&gt;request rooms using API with &lt;a href="https://github.com/m1k1o/neko-rooms"&gt;neko-rooms&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Other use cases that benefit from single-user:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Personal workspace&lt;/strong&gt; - streaming containerized apps and desktops to end-users - similar to &lt;a href="https://www.kasmweb.com/"&gt;kasm&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Persistent browser&lt;/strong&gt; - own browser with persistent cookies available anywhere - similar to &lt;a href="https://www.mightyapp.com/"&gt;mightyapp&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;no state is left on the host browser after terminating the connection.&lt;/li&gt; 
   &lt;li&gt;sensitive data like cookies are not transferred - only video is shared.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Throwaway browser&lt;/strong&gt; - a better solution for planning secret parties and buying birthday gifts off the internet. 
  &lt;ul&gt; 
   &lt;li&gt;use Tor Browser and &lt;a href="https://github.com/m1k1o/neko-vpn"&gt;VPN&lt;/a&gt; for additional anonymity.&lt;/li&gt; 
   &lt;li&gt;mitigates risk of OS fingerprinting and browser vulnerabilities by running in container.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Session broadcasting&lt;/strong&gt; - broadcast room content using RTMP (to e.g. twitch or youtube...).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Session recording&lt;/strong&gt; - broadcast RTMP can be saved to a file using e.g. &lt;a href="https://www.nginx.com/products/nginx/modules/rtmp-media-streaming/"&gt;nginx-rtmp&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;have clean environment when recording tutorials.&lt;/li&gt; 
   &lt;li&gt;no need to hide bookmarks or use incognito mode.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jump host&lt;/strong&gt; - access your internal applications securely without the need for VPN.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automated browser&lt;/strong&gt; - you can install &lt;a href="https://playwright.dev/"&gt;playwright&lt;/a&gt; or &lt;a href="https://pptr.dev/"&gt;puppeteer&lt;/a&gt; and automate tasks while being able to actively intercept them.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Compared to clientless remote desktop gateway (e.g. &lt;a href="https://guacamole.apache.org/"&gt;Apache Guacamole&lt;/a&gt; or &lt;a href="https://github.com/novnc/websockify"&gt;websockify&lt;/a&gt; with &lt;a href="https://novnc.com/"&gt;noVNC&lt;/a&gt;), installed with remote desktop server along with desired program (e.g. &lt;a href="https://docs.linuxserver.io/images/docker-firefox"&gt;linuxserver/firefox&lt;/a&gt;) provides neko additionally:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Smooth video&lt;/strong&gt; because it uses WebRTC and not images sent over WebSockets.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built in audio&lt;/strong&gt; support, what is not part of Apache Guacamole or noVNC.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-participant control&lt;/strong&gt;, what is not natively supported by Apache Guacamole or noVNC.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported browsers&lt;/h3&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#firefox"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/firefox.svg?sanitize=true" title="ghcr.io/m1k1o/neko/firefox" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#tor-browser"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/tor-browser.svg?sanitize=true" title="ghcr.io/m1k1o/neko/tor-browser" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#waterfox"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/waterfox.svg?sanitize=true" title="ghcr.io/m1k1o/neko/waterfox" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#chromium"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/chromium.svg?sanitize=true" title="ghcr.io/m1k1o/neko/chromium" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#google-chrome"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/google-chrome.svg?sanitize=true" title="ghcr.io/m1k1o/neko/google-chrome" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#ungoogled-chromium"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/ungoogled-chromium.svg?sanitize=true" title="ghcr.io/m1k1o/neko/google-chrome" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#microsoft-edge"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/microsoft-edge.svg?sanitize=true" title="ghcr.io/m1k1o/neko/microsoft-edge" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#brave"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/brave.svg?sanitize=true" title="ghcr.io/m1k1o/neko/brave" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#vivaldi"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/vivaldi.svg?sanitize=true" title="ghcr.io/m1k1o/neko/vivaldi" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#opera"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/opera.svg?sanitize=true" title="ghcr.io/m1k1o/neko/opera" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;p&gt;... see &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images"&gt;all available images&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;Other applications&lt;/h3&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#xfce"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/xfce.svg?sanitize=true" title="ghcr.io/m1k1o/neko/xfce" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#kde"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/kde.svg?sanitize=true" title="ghcr.io/m1k1o/neko/kde" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#remmina"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/remmina.svg?sanitize=true" title="ghcr.io/m1k1o/neko/remmina" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;a href="https://neko.m1k1o.net/docs/v3/installation/docker-images#vlc"&gt; &lt;img src="https://neko.m1k1o.net/img/icons/vlc.svg?sanitize=true" title="ghcr.io/m1k1o/neko/vlc" width="60" height="auto" /&gt; &lt;/a&gt; 
 &lt;p&gt;... others in &lt;a href="https://github.com/m1k1o/neko-apps"&gt;m1k1o/neko-apps&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;Why neko?&lt;/h3&gt; 
&lt;p&gt;I like cats 🐱 (&lt;code&gt;Neko&lt;/code&gt; is the Japanese word for cat), I'm a weeb/nerd.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;But why the cat butt?&lt;/strong&gt;&lt;/em&gt; Because cats are &lt;em&gt;assholes&lt;/em&gt;, but you love them anyways.&lt;/p&gt; 
&lt;h2&gt;Multiple rooms&lt;/h2&gt; 
&lt;p&gt;For neko room management software, visit &lt;a href="https://github.com/m1k1o/neko-rooms"&gt;neko-rooms&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;It also offers &lt;a href="https://github.com/m1k1o/neko-rooms/?tab=readme-ov-file#zero-knowledge-installation-with-https"&gt;Zero-knowledge installation (with HTTPS)&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Full documentation is available at &lt;a href="https://neko.m1k1o.net/"&gt;neko.m1k1o.net&lt;/a&gt;. Key sections include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://neko.m1k1o.net/docs/v3/migration-from-v2"&gt;Migration from V2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://neko.m1k1o.net/docs/v3/quick-start"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://neko.m1k1o.net/docs/v3/installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://neko.m1k1o.net/docs/v3/installation/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://neko.m1k1o.net/docs/v3/configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://neko.m1k1o.net/docs/v3/faq"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://neko.m1k1o.net/docs/v3/troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;p&gt;Contributions are welcome! Check the &lt;a href="https://neko.m1k1o.net/contributing"&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you find Neko useful, consider supporting the project via &lt;a href="https://github.com/sponsors/m1k1o"&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ibnaleem/gosearch</title>
      <link>https://github.com/ibnaleem/gosearch</link>
      <description>&lt;p&gt;🔍 Search anyone's digital footprint across 300+ websites&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ibnaleem/gosearch/main/img/gosearch-logo.png" height="50%" width="50%" /&gt;&lt;br /&gt; &lt;i&gt;This project heavily relies on contributors, please see &lt;a href="https://raw.githubusercontent.com/ibnaleem/gosearch/main/#contributing"&gt;Contributing&lt;/a&gt; for more details.&lt;/i&gt;&lt;br /&gt; &lt;code&gt;go install github.com/ibnaleem/gosearch@latest&lt;/code&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://github.com/ibnaleem/gosearch/actions/workflows/go.yml/badge.svg?event=push" alt="GitHub Actions Badge" /&gt; &lt;img src="https://img.shields.io/github/last-commit/ibnaleem/gosearch" /&gt; &lt;img src="https://img.shields.io/github/commit-activity/w/ibnaleem/gosearch" /&gt; &lt;img src="https://img.shields.io/github/contributors/ibnaleem/gosearch" /&gt; &lt;img alt="Number of websites" src="https://img.shields.io/badge/websites-305-blue" /&gt; &lt;img alt="GitHub repo size" src="https://img.shields.io/github/repo-size/ibnaleem/gosearch" /&gt; &lt;img alt="GitHub License" src="https://img.shields.io/github/license/ibnaleem/gosearch" /&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/ibnaleem/gosearch/main/img/1.png" height="80%" width="80%" /&gt;&lt;br /&gt; &lt;img src="https://raw.githubusercontent.com/ibnaleem/gosearch/main/img/2.png" height="80%" width="80%" /&gt;&lt;br /&gt; &lt;img src="https://raw.githubusercontent.com/ibnaleem/gosearch/main/img/3.png" height="80%" width="80%" /&gt;&lt;br /&gt; &lt;img src="https://raw.githubusercontent.com/ibnaleem/gosearch/main/img/4.png" height="80%" width="80%" /&gt;&lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;You don't have time searching every profile with a username. Instead, you can leverage concurrency and a binary that does the work for you, and then some.&lt;/p&gt; 
&lt;p&gt;I initially wrote this project to learn Go, an upcoming programming language used for backend services. I decided to create a Sherlock clone, addressing some of its faults, limitations, and adding more features. This eventually led to a community driven OSINT tool that was &lt;a href="https://osintnewsletter.com/p/62"&gt;praised in the OSINT letter.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GoSearch isn't limited to searching websites; it can search &lt;strong&gt;900k leaked credentials&lt;/strong&gt; from &lt;a href="https://cavalier.hudsonrock.com/api/json/v2/osint-tools/search-by-username?username=mrrobot"&gt;HudsonRock's Cybercrime Intelligence API&lt;/a&gt;, over &lt;strong&gt;3.2 billion leaked credentials&lt;/strong&gt; from &lt;a href="https://www.proxynova.com/tools/comb/"&gt;ProxyNova's Combination Of Many Breaches API&lt;/a&gt;, and &lt;strong&gt;18 billion leaked credentials&lt;/strong&gt; from BreachDirectory.org with an API key (see &lt;a href="https://raw.githubusercontent.com/ibnaleem/gosearch/main/#use-cases"&gt;Use Cases&lt;/a&gt;)&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;br /&gt; If you are on 32-bit architecture, please &lt;a href="https://github.com/ibnaleem/gosearch/tree/32-bit"&gt;use this branch&lt;/a&gt; or GoSearch will fail to build. For an in-depth overview of this issue, please see &lt;a href="https://github.com/ibnaleem/gosearch/issues/72"&gt;#72&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;br /&gt; If you're using Windows Defender, it might mistakenly flag GoSearch as malware. Rest assured, GoSearch is not malicious; you can review the full source code yourself to verify this. For an in-depth overview of this issue, please see &lt;a href="https://github.com/ibnaleem/gosearch/issues/90"&gt;#90&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;$ go install github.com/ibnaleem/gosearch@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Unix:&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;$ gosearch -u [username]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;C:\Users\Bob&amp;gt; gosearch.exe -u [username]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Use Cases&lt;/h2&gt; 
&lt;p&gt;Ideally, it is best practice to run GoSearch with the &lt;code&gt;--no-false-positives&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ gosearch -u [USERNAME] --no-false-positives
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will display profiles GoSearch is confident exist on a website. GoSearch also allows you to search &lt;a href="https://breachdirectory.org"&gt;BreachDirectory&lt;/a&gt; for compromised passwords associated with a specific username. For this, you must &lt;a href="https://rapidapi.com/rohan-patra/api/breachdirectory"&gt;obtain an API key&lt;/a&gt; and provide it with the &lt;code&gt;-b&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ gosearch -u [USERNAME] -b [API-KEY] --no-false-positives
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If GoSearch finds password hashes, it will attempt to crack them using &lt;a href="https://weakpass.com"&gt;Weakpass&lt;/a&gt;. The success rate is nearly 100%, as Weakpass uses a large wordlist of common data-wells, which align with the breaches reported by &lt;a href="https://breachdirectory.org"&gt;BreachDirectory&lt;/a&gt;. Every single password hash that's been found in &lt;a href="https://breachdirectory.org"&gt;BreachDirectory&lt;/a&gt; has been cracked by &lt;a href="https://weakpass.com"&gt;Weakpass&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you're not using BreachDirectory, GoSearch will search for breaches on HudsonRock's Cybercrime Intelligence &amp;amp; ProxyNova's Databases, respectively. It will also search common TLDs for any domains associated with a given username. This is done whether BreachDirectory is searched or not.&lt;/p&gt; 
&lt;h2&gt;I Don't Have a Username&lt;/h2&gt; 
&lt;p&gt;If you're uncertain about a person's username, you could try generating some by using &lt;a href="https://github.com/urbanadventurer/username-anarchy"&gt;urbanadventurer/username-anarchy&lt;/a&gt;. Note that &lt;code&gt;username-anarchy&lt;/code&gt; can only run in Unix terminals (Mac/Linux)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/urbanadventurer/username-anarchy
$ cd username-anarchy
$ (username-anarchy) ./username-anarchy firstname lastname
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Why &lt;code&gt;GoSearch&lt;/code&gt;?&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;GoSearch&lt;/code&gt; is inspired by &lt;a href="https://github.com/sherlock-project/sherlock"&gt;Sherlock&lt;/a&gt;, a popular username search tool. However, &lt;code&gt;GoSearch&lt;/code&gt; improves upon Sherlock by addressing several of its key limitations:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sherlock is Python-based, which makes it slower compared to Go.&lt;/li&gt; 
 &lt;li&gt;Sherlock is outdated and lacks updates.&lt;/li&gt; 
 &lt;li&gt;Sherlock sometimes reports false positives as valid results.&lt;/li&gt; 
 &lt;li&gt;Sherlock frequently misses actual usernames, leading to false negatives.&lt;/li&gt; 
 &lt;li&gt;Sherlock does not search HudsonRock's Cybercrime Intelligence database&lt;/li&gt; 
 &lt;li&gt;Sherlock does not search ProxyNova's database&lt;/li&gt; 
 &lt;li&gt;Sherlock does not search BreachDirectory's database&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The primary issue with Sherlock is false negatives—when a username exists on a platform but is not detected. The secondary issue is false positives, where a username is incorrectly flagged as available. &lt;code&gt;GoSearch&lt;/code&gt; tackles these problems by colour-coding uncertain results as yellow which indicates potential false positives. This allows users to easily filter out irrelevant links.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see &lt;a href="https://github.com/ibnaleem/gosearch/raw/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md.&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/ibnaleem"&gt;&lt;img alt="ibnaleem" src="https://avatars.githubusercontent.com/u/134088573?v=4" width="117" /&gt;&lt;br /&gt;ibnaleem&lt;/a&gt;&lt;/td&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/shelepuginivan"&gt;&lt;img alt="shelepuginivan" src="https://avatars.githubusercontent.com/u/110753839?v=4" width="117" /&gt;&lt;br /&gt;shelepuginivan&lt;/a&gt;&lt;/td&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/arealibusadrealiora"&gt;&lt;img alt="arealibusadrealiora" src="https://avatars.githubusercontent.com/u/113445322?v=4" width="117" /&gt;&lt;br /&gt;arealibusadrealiora&lt;/a&gt;&lt;/td&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/AtahanPoyraz"&gt;&lt;img alt="AtahanPoyraz" src="https://avatars.githubusercontent.com/u/129458900?v=4" width="117" /&gt;&lt;br /&gt;AtahanPoyraz&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/vickychhetri"&gt;&lt;img alt="vickychhetri" src="https://avatars.githubusercontent.com/u/82648574?v=4" width="117" /&gt;&lt;br /&gt;vickychhetri&lt;/a&gt;&lt;/td&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/olekukonko"&gt;&lt;img alt="olekukonko" src="https://avatars.githubusercontent.com/u/2615393?v=4" width="117" /&gt;&lt;br /&gt;olekukonko&lt;/a&gt;&lt;/td&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/CptIdea"&gt;&lt;img alt="CptIdea" src="https://avatars.githubusercontent.com/u/59538729?v=4" width="117" /&gt;&lt;br /&gt;CptIdea&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/anotherhadi"&gt;&lt;img alt="anotherhadi" src="https://avatars.githubusercontent.com/u/112569860?v=4" width="117" /&gt;&lt;br /&gt;anotherhadi&lt;/a&gt;&lt;/td&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/paulpogoda"&gt;&lt;img alt="paulpogoda" src="https://avatars.githubusercontent.com/u/170966925?v=4" width="117" /&gt;&lt;br /&gt;paulpogoda&lt;/a&gt;&lt;/td&gt;
   &lt;td align="center"&gt;&lt;a href="https://github.com/apps/dependabot"&gt;&lt;img alt="dependabot[bot]" src="https://avatars.githubusercontent.com/in/29110?v=4" width="117" /&gt;&lt;br /&gt;dependabot[bot]&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;LICENSE&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the GNU General Public License - see the &lt;a href="https://github.com/ibnaleem/gosearch/raw/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://buymeacoffee.com/gosearch"&gt;&lt;img src="https://img.shields.io/badge/Buy%20Me%20a%20Coffee-ffdd00?style=for-the-badge&amp;amp;logo=buy-me-a-coffee&amp;amp;logoColor=black" alt="BuyMeACoffee" /&gt;&lt;/a&gt; &lt;a href="https://thanks.dev/u/gh/ibnaleem"&gt;&lt;img src="https://img.shields.io/badge/thanks.dev-0a0a0a?style=for-the-badge&amp;amp;logo=tv-time&amp;amp;logoColor=white" alt="Thanks.dev" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Bitcoin&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;bc1qjrtyq8m7urapu7cvmvrrs6m7qkh2jpn5wqezfl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Stargazers Over Time&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://starchart.cc/ibnaleem/gosearch"&gt;&lt;img src="https://starchart.cc/ibnaleem/gosearch.svg?variant=adaptive" alt="Stargazers over time" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>crossplane/crossplane</title>
      <link>https://github.com/crossplane/crossplane</link>
      <description>&lt;p&gt;The Cloud Native Control Plane&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://www.bestpractices.dev/projects/3260"&gt;&lt;img src="https://www.bestpractices.dev/projects/3260/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;img src="https://github.com/crossplane/crossplane/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt; &lt;a href="https://goreportcard.com/report/github.com/crossplane/crossplane"&gt;&lt;img src="https://goreportcard.com/badge/github.com/crossplane/crossplane" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/crossplane/crossplane/main/banner.png" alt="Crossplane" /&gt;&lt;/p&gt; 
&lt;p&gt;Crossplane is a framework for building cloud native control planes without needing to write code. It has a highly extensible backend that enables you to build a control plane that can orchestrate applications and infrastructure no matter where they run, and a highly configurable frontend that puts you in control of the schema of the declarative API it offers.&lt;/p&gt; 
&lt;p&gt;Crossplane is a &lt;a href="https://www.cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt; project.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;Crossplane's &lt;a href="https://docs.crossplane.io/latest/get-started/get-started-with-composition"&gt;Get Started Docs&lt;/a&gt; covers install and resource quickstarts.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/crossplane/crossplane/releases"&gt;&lt;img src="https://img.shields.io/github/release/crossplane/crossplane/all.svg?sanitize=true" alt="GitHub release" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/crossplane/crossplane"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/crossplane" alt="Artifact Hub" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Currently maintained releases, as well as the next few upcoming releases are listed below. For more information take a look at the Crossplane &lt;a href="https://docs.crossplane.io/knowledge-base/guides/release-cycle"&gt;release cycle documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;Release&lt;/th&gt; 
   &lt;th align="center"&gt;Release Date&lt;/th&gt; 
   &lt;th align="center"&gt;EOL&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;v1.19&lt;/td&gt; 
   &lt;td align="center"&gt;Feb 11, 2025&lt;/td&gt; 
   &lt;td align="center"&gt;Nov 2025&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;v1.20&lt;/td&gt; 
   &lt;td align="center"&gt;May 21, 2025&lt;/td&gt; 
   &lt;td align="center"&gt;Feb 2026&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;v2.0&lt;/td&gt; 
   &lt;td align="center"&gt;Aug 8, 2025&lt;/td&gt; 
   &lt;td align="center"&gt;May 2026&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;v2.1&lt;/td&gt; 
   &lt;td align="center"&gt;Early Nov '25&lt;/td&gt; 
   &lt;td align="center"&gt;Aug 2026&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;v2.2&lt;/td&gt; 
   &lt;td align="center"&gt;Early Feb '26&lt;/td&gt; 
   &lt;td align="center"&gt;Nov 2026&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;v2.3&lt;/td&gt; 
   &lt;td align="center"&gt;Early May '26&lt;/td&gt; 
   &lt;td align="center"&gt;Feb 2027&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;You can subscribe to the &lt;a href="https://zoom-lfx.platform.linuxfoundation.org/meetings/crossplane?view=month"&gt;community calendar&lt;/a&gt; to track all release dates, and find the most recent releases on the &lt;a href="https://github.com/crossplane/crossplane/releases"&gt;releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The public roadmap for Crossplane is published as a GitHub project board. Issues added to the roadmap have been triaged and identified as valuable to the community, and therefore a priority for the project that we expect to invest in.&lt;/p&gt; 
&lt;p&gt;The maintainer team regularly triages requests from the community to identify features and issues of suitable scope and impact to include in this roadmap. The community is encouraged to show their support for potential roadmap issues by adding a &lt;span&gt;👍&lt;/span&gt; reaction, leaving descriptive comments, and attending the &lt;a href="https://github.com/crossplane/crossplane/raw/main/README.md#get-involved"&gt;regular community meetings&lt;/a&gt; to discuss their requirements and use cases.&lt;/p&gt; 
&lt;p&gt;The maintainer team updates the roadmap on an as needed basis, in response to demand, priority, and available resources. The public roadmap can be updated at any time.&lt;/p&gt; 
&lt;p&gt;Milestones assigned to any issues in the roadmap are intended to give a sense of overall priority and the expected order of delivery. They should be considered approximate estimations and are &lt;strong&gt;not&lt;/strong&gt; a strict commitment to a specific delivery timeline.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/orgs/crossplane/projects/20/views/9?pane=info"&gt;Crossplane Roadmap&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Get Involved&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://slack.crossplane.io"&gt;&lt;img src="https://img.shields.io/badge/slack-crossplane-red?logo=slack" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://bsky.app/profile/crossplane.io"&gt;&lt;img src="https://img.shields.io/badge/bluesky-Follow-blue?logo=bluesky" alt="Bluesky Follow" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=crossplane_io&amp;amp;user_id=788180534543339520"&gt;&lt;img src="https://img.shields.io/twitter/follow/crossplane_io?logo=X&amp;amp;label=Follow&amp;amp;style=flat" alt="Twitter Follow" /&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@Crossplane"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UC19FgzMBMqBro361HbE46Fw" alt="YouTube Channel Subscribers" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Crossplane is a community driven project; we welcome your contribution. To file a bug, suggest an improvement, or request a new feature please open an &lt;a href="https://github.com/crossplane/crossplane/issues"&gt;issue against Crossplane&lt;/a&gt; or the relevant provider. Refer to our &lt;a href="https://raw.githubusercontent.com/crossplane/crossplane/main/contributing/README.md"&gt;contributing guide&lt;/a&gt; for more information on how you can help.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Discuss Crossplane on &lt;a href="https://slack.crossplane.io"&gt;Slack&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Follow us on &lt;a href="https://bsky.app/profile/crossplane.io"&gt;Bluesky&lt;/a&gt;, &lt;a href="https://twitter.com/crossplane_io"&gt;Twitter&lt;/a&gt;, or &lt;a href="https://www.linkedin.com/company/crossplane/"&gt;LinkedIn&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Contact us via &lt;a href="mailto:crossplane-info@lists.cncf.io"&gt;Email&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join our regular community meetings.&lt;/li&gt; 
 &lt;li&gt;Provide feedback on our &lt;a href="https://github.com/orgs/crossplane/projects/20/views/9?pane=info"&gt;roadmap and releases board&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The Crossplane community meeting takes place every 4 weeks on &lt;a href="https://www.thetimezoneconverter.com/?t=10:00&amp;amp;tz=PT%20%28Pacific%20Time%29"&gt;Thursday at 10:00am Pacific Time&lt;/a&gt;. You can find the up to date meeting schedule on the &lt;a href="https://zoom-lfx.platform.linuxfoundation.org/meetings/crossplane?view=month"&gt;Community Calendar&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Anyone who wants to discuss the direction of the project, design and implementation reviews, or raise general questions with the broader community is encouraged to join.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Meeting link: &lt;a href="https://zoom-lfx.platform.linuxfoundation.org/meeting/98901510164?password=c60c41ae-1e1e-42d0-9a74-16de2fbb66f9"&gt;https://zoom-lfx.platform.linuxfoundation.org/meeting/98901510164?password=c60c41ae-1e1e-42d0-9a74-16de2fbb66f9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.google.com/document/d/1q_sp2jLQsDEOX7Yug6TPOv7Fwrys6EwcF5Itxjkno7Y/edit?usp=sharing"&gt;Current agenda and past meeting notes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL510POnNVaaYYYDSICFSNWFqNbx1EMr-M"&gt;Past meeting recordings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://zoom-lfx.platform.linuxfoundation.org/meetings/crossplane?view=month"&gt;Community Calendar&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Special Interest Groups (SIG)&lt;/h3&gt; 
&lt;p&gt;Each SIG collaborates in Slack and some groups have regular meetings, you can find the meetings in the &lt;a href="https://zoom-lfx.platform.linuxfoundation.org/meetings/crossplane?view=month"&gt;Community Calendar&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C08V9PMLRQA"&gt;#sig-cli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C05BP6QFLUW"&gt;#sig-composition-environments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C031Y29CSAE"&gt;#sig-composition-functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C05BP8W5ALW"&gt;#sig-deletion-ordering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C05U1LLM3B2"&gt;#sig-devex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C02CAQ52DPU"&gt;#sig-docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C05C8CCTVNV"&gt;#sig-e2e-testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C061GNH3LA0"&gt;#sig-observability&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C04D5988QEA"&gt;#sig-observe-only&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C056YAQRV16"&gt;#sig-provider-families&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C05BY7DKFV2"&gt;#sig-secret-stores&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crossplane.slack.com/archives/C05T19TB729"&gt;#sig-upjet&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;A list of publicly known users of the Crossplane project can be found in &lt;a href="https://raw.githubusercontent.com/crossplane/crossplane/main/ADOPTERS.md"&gt;ADOPTERS.md&lt;/a&gt;. We encourage all users of Crossplane to add themselves to this list - we want to see the community's growing success!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Crossplane is under the Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fcrossplane%2Fcrossplane?ref=badge_large"&gt;&lt;img src="https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcrossplane%2Fcrossplane.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- Named links --&gt;</description>
    </item>
    
    <item>
      <title>openai/openai-go</title>
      <link>https://github.com/openai/openai-go</link>
      <description>&lt;p&gt;The official Go library for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Go API Library&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/openai/openai-go/v2"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/openai/openai-go.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The OpenAI Go library provides convenient access to the &lt;a href="https://platform.openai.com/docs"&gt;OpenAI REST API&lt;/a&gt; from applications written in Go.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The latest version of this package has small and limited breaking changes. See the &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/CHANGELOG.md"&gt;changelog&lt;/a&gt; for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;!-- x-release-please-start-version --&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"github.com/openai/openai-go/v2" // imported as openai
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- x-release-please-end --&gt; 
&lt;p&gt;Or to pin the version:&lt;/p&gt; 
&lt;!-- x-release-please-start-version --&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get -u 'github.com/openai/openai-go@v2.0.2'
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- x-release-please-end --&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;This library requires Go 1.21+.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The full API of this library can be found in &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/api.md"&gt;api.md&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"fmt"

	"github.com/openai/openai-go/v2"
	"github.com/openai/openai-go/v2/option"
	"github.com/openai/openai-go/v2/shared"
)

func main() {
	client := openai.NewClient(
		option.WithAPIKey("My API Key"), // defaults to os.LookupEnv("OPENAI_API_KEY")
	)
	chatCompletion, err := client.Chat.Completions.New(context.TODO(), openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{
			openai.UserMessage("Say this is a test"),
		},
		Model: openai.ChatModelGPT4o,
	})
	if err != nil {
		panic(err.Error())
	}
	println(chatCompletion.Choices[0].Message.Content)
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Conversations&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;param := openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage("What kind of houseplant is easy to take care of?"),
	},
	Seed:     openai.Int(1),
	Model:    openai.ChatModelGPT4o,
}

completion, err := client.Chat.Completions.New(ctx, param)

param.Messages = append(param.Messages, completion.Choices[0].Message.ToParam())
param.Messages = append(param.Messages, openai.UserMessage("How big are those?"))

// continue the conversation
completion, err = client.Chat.Completions.New(ctx, param)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Streaming responses&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;question := "Write an epic"

stream := client.Chat.Completions.NewStreaming(ctx, openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage(question),
	},
	Seed:  openai.Int(0),
	Model: openai.ChatModelGPT4o,
})

// optionally, an accumulator helper can be used
acc := openai.ChatCompletionAccumulator{}

for stream.Next() {
	chunk := stream.Current()
	acc.AddChunk(chunk)

	if content, ok := acc.JustFinishedContent(); ok {
		println("Content stream finished:", content)
	}

	// if using tool calls
	if tool, ok := acc.JustFinishedToolCall(); ok {
		println("Tool call stream finished:", tool.Index, tool.Name, tool.Arguments)
	}

	if refusal, ok := acc.JustFinishedRefusal(); ok {
		println("Refusal stream finished:", refusal)
	}

	// it's best to use chunks after handling JustFinished events
	if len(chunk.Choices) &amp;gt; 0 {
		println(chunk.Choices[0].Delta.Content)
	}
}

if stream.Err() != nil {
	panic(stream.Err())
}

// After the stream is finished, acc can be used like a ChatCompletion
_ = acc.Choices[0].Message.Content
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/examples/chat-completion-accumulating/main.go"&gt;full streaming and accumulation example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Tool calling&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;import (
	"encoding/json"
	// ...
)

// ...

question := "What is the weather in New York City?"

params := openai.ChatCompletionNewParams{
	Messages: []openai.ChatCompletionMessageParamUnion{
		openai.UserMessage(question),
	},
	Tools: []openai.ChatCompletionToolParam{
		{
			Function: openai.FunctionDefinitionParam{
				Name:        "get_weather",
				Description: openai.String("Get weather at the given location"),
				Parameters: openai.FunctionParameters{
					"type": "object",
					"properties": map[string]interface{}{
						"location": map[string]string{
							"type": "string",
						},
					},
					"required": []string{"location"},
				},
			},
		},
	},
	Model: openai.ChatModelGPT4o,
}

// If there is a was a function call, continue the conversation
params.Messages = append(params.Messages, completion.Choices[0].Message.ToParam())
for _, toolCall := range toolCalls {
	if toolCall.Function.Name == "get_weather" {
		// Extract the location from the function call arguments
		var args map[string]interface{}
		err := json.Unmarshal([]byte(toolCall.Function.Arguments), &amp;amp;args)
		if err != nil {
			panic(err)
		}
		location := args["location"].(string)

		// Simulate getting weather data
		weatherData := getWeather(location)

		// Print the weather data
		fmt.Printf("Weather in %s: %s\n", location, weatherData)

		params.Messages = append(params.Messages, openai.ToolMessage(weatherData, toolCall.ID))
	}
}

// ... continue the conversation with the information provided by the tool
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/examples/chat-completion-tool-calling/main.go"&gt;full tool calling example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Structured outputs&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;import (
	"encoding/json"
	"github.com/invopop/jsonschema"
	// ...
)

// A struct that will be converted to a Structured Outputs response schema
type HistoricalComputer struct {
	Origin       Origin   `json:"origin" jsonschema_description:"The origin of the computer"`
	Name         string   `json:"full_name" jsonschema_description:"The name of the device model"`
	Legacy       string   `json:"legacy" jsonschema:"enum=positive,enum=neutral,enum=negative" jsonschema_description:"Its influence on the field of computing"`
	NotableFacts []string `json:"notable_facts" jsonschema_description:"A few key facts about the computer"`
}

type Origin struct {
	YearBuilt    int64  `json:"year_of_construction" jsonschema_description:"The year it was made"`
	Organization string `json:"organization" jsonschema_description:"The organization that was in charge of its development"`
}

func GenerateSchema[T any]() interface{} {
	// Structured Outputs uses a subset of JSON schema
	// These flags are necessary to comply with the subset
	reflector := jsonschema.Reflector{
		AllowAdditionalProperties: false,
		DoNotReference:            true,
	}
	var v T
	schema := reflector.Reflect(v)
	return schema
}

// Generate the JSON schema at initialization time
var HistoricalComputerResponseSchema = GenerateSchema[HistoricalComputer]()

func main() {

	// ...

	question := "What computer ran the first neural network?"

	schemaParam := openai.ResponseFormatJSONSchemaJSONSchemaParam{
		Name:        "historical_computer",
		Description: openai.String("Notable information about a computer"),
		Schema:      HistoricalComputerResponseSchema,
		Strict:      openai.Bool(true),
	}

	chat, _ := client.Chat.Completions.New(ctx, openai.ChatCompletionNewParams{
		// ...
		ResponseFormat: openai.ChatCompletionNewParamsResponseFormatUnion{
			OfJSONSchema: &amp;amp;openai.ResponseFormatJSONSchemaParam{
				JSONSchema: schemaParam,
			},
		},
		// only certain models can perform structured outputs
		Model: openai.ChatModelGPT4o2024_08_06,
	})

	// extract into a well-typed struct
	var historicalComputer HistoricalComputer
	_ = json.Unmarshal([]byte(chat.Choices[0].Message.Content), &amp;amp;historicalComputer)

	historicalComputer.Name
	historicalComputer.Origin.YearBuilt
	historicalComputer.Origin.Organization
	for i, fact := range historicalComputer.NotableFacts {
		// ...
	}
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/examples/structured-outputs/main.go"&gt;full structured outputs example&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h3&gt;Request fields&lt;/h3&gt; 
&lt;p&gt;The openai library uses the &lt;a href="https://tip.golang.org/doc/go1.24#encodingjsonpkgencodingjson"&gt;&lt;code&gt;omitzero&lt;/code&gt;&lt;/a&gt; semantics from the Go 1.24+ &lt;code&gt;encoding/json&lt;/code&gt; release for request fields.&lt;/p&gt; 
&lt;p&gt;Required primitive fields (&lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc.) feature the tag &lt;code&gt;`json:"...,required"`&lt;/code&gt;. These fields are always serialized, even their zero values.&lt;/p&gt; 
&lt;p&gt;Optional primitive types are wrapped in a &lt;code&gt;param.Opt[T]&lt;/code&gt;. These fields can be set with the provided constructors, &lt;code&gt;openai.String(string)&lt;/code&gt;, &lt;code&gt;openai.Int(int64)&lt;/code&gt;, etc.&lt;/p&gt; 
&lt;p&gt;Any &lt;code&gt;param.Opt[T]&lt;/code&gt;, map, slice, struct or string enum uses the tag &lt;code&gt;`json:"...,omitzero"`&lt;/code&gt;. Its zero value is considered omitted.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;param.IsOmitted(any)&lt;/code&gt; function can confirm the presence of any &lt;code&gt;omitzero&lt;/code&gt; field.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;p := openai.ExampleParams{
	ID:   "id_xxx",             // required property
	Name: openai.String("..."), // optional property

	Point: openai.Point{
		X: 0,             // required field will serialize as 0
		Y: openai.Int(1), // optional field will serialize as 1
		// ... omitted non-required fields will not be serialized
	},

	Origin: openai.Origin{}, // the zero value of [Origin] is considered omitted
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To send &lt;code&gt;null&lt;/code&gt; instead of a &lt;code&gt;param.Opt[T]&lt;/code&gt;, use &lt;code&gt;param.Null[T]()&lt;/code&gt;. To send &lt;code&gt;null&lt;/code&gt; instead of a struct &lt;code&gt;T&lt;/code&gt;, use &lt;code&gt;param.NullStruct[T]()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;p.Name = param.Null[string]()       // 'null' instead of string
p.Point = param.NullStruct[Point]() // 'null' instead of struct

param.IsNull(p.Name)  // true
param.IsNull(p.Point) // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Request structs contain a &lt;code&gt;.SetExtraFields(map[string]any)&lt;/code&gt; method which can send non-conforming fields in the request body. Extra fields overwrite any struct fields with a matching key. For security reasons, only use &lt;code&gt;SetExtraFields&lt;/code&gt; with trusted data.&lt;/p&gt; 
&lt;p&gt;To send a custom value instead of a struct, use &lt;code&gt;param.Override[T](value)&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// In cases where the API specifies a given type,
// but you want to send something else, use [SetExtraFields]:
p.SetExtraFields(map[string]any{
	"x": 0.01, // send "x" as a float instead of int
})

// Send a number instead of an object
custom := param.Override[openai.FooParams](12)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Request unions&lt;/h3&gt; 
&lt;p&gt;Unions are represented as a struct with fields prefixed by "Of" for each of it's variants, only one field can be non-zero. The non-zero field will be serialized.&lt;/p&gt; 
&lt;p&gt;Sub-properties of the union can be accessed via methods on the union struct. These methods return a mutable pointer to the underlying data, if present.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Only one field can be non-zero, use param.IsOmitted() to check if a field is set
type AnimalUnionParam struct {
	OfCat *Cat `json:",omitzero,inline`
	OfDog *Dog `json:",omitzero,inline`
}

animal := AnimalUnionParam{
	OfCat: &amp;amp;Cat{
		Name: "Whiskers",
		Owner: PersonParam{
			Address: AddressParam{Street: "3333 Coyote Hill Rd", Zip: 0},
		},
	},
}

// Mutating a field
if address := animal.GetOwner().GetAddress(); address != nil {
	address.ZipCode = 94304
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Response objects&lt;/h3&gt; 
&lt;p&gt;All fields in response structs are ordinary value types (not pointers or wrappers). Response structs also include a special &lt;code&gt;JSON&lt;/code&gt; field containing metadata about each property.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type Animal struct {
	Name   string `json:"name,nullable"`
	Owners int    `json:"owners"`
	Age    int    `json:"age"`
	JSON   struct {
		Name        respjson.Field
		Owner       respjson.Field
		Age         respjson.Field
		ExtraFields map[string]respjson.Field
	} `json:"-"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To handle optional data, use the &lt;code&gt;.Valid()&lt;/code&gt; method on the JSON field. &lt;code&gt;.Valid()&lt;/code&gt; returns true if a field is not &lt;code&gt;null&lt;/code&gt;, not present, or couldn't be marshaled.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;.Valid()&lt;/code&gt; is false, the corresponding field will simply be its zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;raw := `{"owners": 1, "name": null}`

var res Animal
json.Unmarshal([]byte(raw), &amp;amp;res)

// Accessing regular fields

res.Owners // 1
res.Name   // ""
res.Age    // 0

// Optional field checks

res.JSON.Owners.Valid() // true
res.JSON.Name.Valid()   // false
res.JSON.Age.Valid()    // false

// Raw JSON values

res.JSON.Owners.Raw()                  // "1"
res.JSON.Name.Raw() == "null"          // true
res.JSON.Name.Raw() == respjson.Null   // true
res.JSON.Age.Raw() == ""               // true
res.JSON.Age.Raw() == respjson.Omitted // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These &lt;code&gt;.JSON&lt;/code&gt; structs also include an &lt;code&gt;ExtraFields&lt;/code&gt; map containing any properties in the json response that were not specified in the struct. This can be useful for API features not yet present in the SDK.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;body := res.JSON.ExtraFields["my_unexpected_field"].Raw()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Response Unions&lt;/h3&gt; 
&lt;p&gt;In responses, unions are represented by a flattened struct containing all possible fields from each of the object variants. To convert it to a variant use the &lt;code&gt;.AsFooVariant()&lt;/code&gt; method or the &lt;code&gt;.AsAny()&lt;/code&gt; method if present.&lt;/p&gt; 
&lt;p&gt;If a response value union contains primitive values, primitive fields will be alongside the properties but prefixed with &lt;code&gt;Of&lt;/code&gt; and feature the tag &lt;code&gt;json:"...,inline"&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type AnimalUnion struct {
	// From variants [Dog], [Cat]
	Owner Person `json:"owner"`
	// From variant [Dog]
	DogBreed string `json:"dog_breed"`
	// From variant [Cat]
	CatBreed string `json:"cat_breed"`
	// ...

	JSON struct {
		Owner respjson.Field
		// ...
	} `json:"-"`
}

// If animal variant
if animal.Owner.Address.ZipCode == "" {
	panic("missing zip code")
}

// Switch on the variant
switch variant := animal.AsAny().(type) {
case Dog:
case Cat:
default:
	panic("unexpected type")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RequestOptions&lt;/h3&gt; 
&lt;p&gt;This library uses the functional options pattern. Functions defined in the &lt;code&gt;option&lt;/code&gt; package return a &lt;code&gt;RequestOption&lt;/code&gt;, which is a closure that mutates a &lt;code&gt;RequestConfig&lt;/code&gt;. These options can be supplied to the client or at individual requests. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;client := openai.NewClient(
	// Adds a header to every request made by the client
	option.WithHeader("X-Some-Header", "custom_header_info"),
)

client.Chat.Completions.New(context.TODO(), ...,
	// Override the header
	option.WithHeader("X-Some-Header", "some_other_custom_header_info"),
	// Add an undocumented field to the request body, using sjson syntax
	option.WithJSONSet("some.json.path", map[string]string{"my": "object"}),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The request option &lt;code&gt;option.WithDebugLog(nil)&lt;/code&gt; may be helpful while debugging.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://pkg.go.dev/github.com/openai/openai-go/option"&gt;full list of request options&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Pagination&lt;/h3&gt; 
&lt;p&gt;This library provides some conveniences for working with paginated list endpoints.&lt;/p&gt; 
&lt;p&gt;You can use &lt;code&gt;.ListAutoPaging()&lt;/code&gt; methods to iterate through items across all pages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;iter := client.FineTuning.Jobs.ListAutoPaging(context.TODO(), openai.FineTuningJobListParams{
	Limit: openai.Int(20),
})
// Automatically fetches more pages as needed.
for iter.Next() {
	fineTuningJob := iter.Current()
	fmt.Printf("%+v\n", fineTuningJob)
}
if err := iter.Err(); err != nil {
	panic(err.Error())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use simple &lt;code&gt;.List()&lt;/code&gt; methods to fetch a single page and receive a standard response object with additional helper methods like &lt;code&gt;.GetNextPage()&lt;/code&gt;, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;page, err := client.FineTuning.Jobs.List(context.TODO(), openai.FineTuningJobListParams{
	Limit: openai.Int(20),
})
for page != nil {
	for _, job := range page.Data {
		fmt.Printf("%+v\n", job)
	}
	page, err = page.GetNextPage()
}
if err != nil {
	panic(err.Error())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Errors&lt;/h3&gt; 
&lt;p&gt;When the API returns a non-success status code, we return an error with type &lt;code&gt;*openai.Error&lt;/code&gt;. This contains the &lt;code&gt;StatusCode&lt;/code&gt;, &lt;code&gt;*http.Request&lt;/code&gt;, and &lt;code&gt;*http.Response&lt;/code&gt; values of the request, as well as the JSON of the error body (much like other response objects in the SDK).&lt;/p&gt; 
&lt;p&gt;To handle errors, we recommend that you use the &lt;code&gt;errors.As&lt;/code&gt; pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;_, err := client.FineTuning.Jobs.New(context.TODO(), openai.FineTuningJobNewParams{
	Model:        openai.FineTuningJobNewParamsModelBabbage002,
	TrainingFile: "file-abc123",
})
if err != nil {
	var apierr *openai.Error
	if errors.As(err, &amp;amp;apierr) {
		println(string(apierr.DumpRequest(true)))  // Prints the serialized HTTP request
		println(string(apierr.DumpResponse(true))) // Prints the serialized HTTP response
	}
	panic(err.Error()) // GET "/fine_tuning/jobs": 400 Bad Request { ... }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When other errors occur, they are returned unwrapped; for example, if HTTP transport fails, you might receive &lt;code&gt;*url.Error&lt;/code&gt; wrapping &lt;code&gt;*net.OpError&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Timeouts&lt;/h3&gt; 
&lt;p&gt;Requests do not time out by default; use context to configure a timeout for a request lifecycle.&lt;/p&gt; 
&lt;p&gt;Note that if a request is &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/#retries"&gt;retried&lt;/a&gt;, the context timeout does not start over. To set a per-retry timeout, use &lt;code&gt;option.WithRequestTimeout()&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// This sets the timeout for the request, including all the retries.
ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)
defer cancel()
client.Chat.Completions.New(
	ctx,
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String("How can I list all files in a directory using Python?"),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	// This sets the per-retry timeout
	option.WithRequestTimeout(20*time.Second),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;File uploads&lt;/h3&gt; 
&lt;p&gt;Request parameters that correspond to file uploads in multipart requests are typed as &lt;code&gt;io.Reader&lt;/code&gt;. The contents of the &lt;code&gt;io.Reader&lt;/code&gt; will by default be sent as a multipart form part with the file name of "anonymous_file" and content-type of "application/octet-stream".&lt;/p&gt; 
&lt;p&gt;The file name and content-type can be customized by implementing &lt;code&gt;Name() string&lt;/code&gt; or &lt;code&gt;ContentType() string&lt;/code&gt; on the run-time type of &lt;code&gt;io.Reader&lt;/code&gt;. Note that &lt;code&gt;os.File&lt;/code&gt; implements &lt;code&gt;Name() string&lt;/code&gt;, so a file returned by &lt;code&gt;os.Open&lt;/code&gt; will be sent with the file name on disk.&lt;/p&gt; 
&lt;p&gt;We also provide a helper &lt;code&gt;openai.File(reader io.Reader, filename string, contentType string)&lt;/code&gt; which can be used to wrap any &lt;code&gt;io.Reader&lt;/code&gt; with the appropriate file name and content type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// A file from the file system
file, err := os.Open("input.jsonl")
openai.FileNewParams{
	File:    file,
	Purpose: openai.FilePurposeFineTune,
}

// A file from a string
openai.FileNewParams{
	File:    strings.NewReader("my file contents"),
	Purpose: openai.FilePurposeFineTune,
}

// With a custom filename and contentType
openai.FileNewParams{
	File:    openai.File(strings.NewReader(`{"hello": "foo"}`), "file.go", "application/json"),
	Purpose: openai.FilePurposeFineTune,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Webhook Verification&lt;/h2&gt; 
&lt;p&gt;Verifying webhook signatures is &lt;em&gt;optional but encouraged&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;For more information about webhooks, see &lt;a href="https://platform.openai.com/docs/guides/webhooks"&gt;the API docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Parsing webhook payloads&lt;/h3&gt; 
&lt;p&gt;For most use cases, you will likely want to verify the webhook and parse the payload at the same time. To achieve this, we provide the method &lt;code&gt;client.Webhooks.Unwrap()&lt;/code&gt;, which parses a webhook request and verifies that it was sent by OpenAI. This method will return an error if the signature is invalid.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter should be the raw JSON bytes sent from the server (do not parse it first). The &lt;code&gt;Unwrap()&lt;/code&gt; method will parse this JSON for you into an event object after verifying the webhook was sent from OpenAI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"io"
	"log"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/openai/openai-go/v2"
	"github.com/openai/openai-go/v2/option"
	"github.com/openai/openai-go/v2/webhooks"
)

func main() {
	client := openai.NewClient(
		option.WithWebhookSecret(os.Getenv("OPENAI_WEBHOOK_SECRET")), // env var used by default; explicit here.
	)

	r := gin.Default()

	r.POST("/webhook", func(c *gin.Context) {
		body, err := io.ReadAll(c.Request.Body)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Error reading request body"})
			return
		}
		defer c.Request.Body.Close()

		webhookEvent, err := client.Webhooks.Unwrap(body, c.Request.Header)
		if err != nil {
			log.Printf("Invalid webhook signature: %v", err)
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid signature"})
			return
		}

		switch event := webhookEvent.AsAny().(type) {
		case webhooks.ResponseCompletedWebhookEvent:
			log.Printf("Response completed: %+v", event.Data)
		case webhooks.ResponseFailedWebhookEvent:
			log.Printf("Response failed: %+v", event.Data)
		default:
			log.Printf("Unhandled event type: %T", event)
		}

		c.JSON(http.StatusOK, gin.H{"message": "ok"})
	})

	r.Run(":8000")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Verifying webhook payloads directly&lt;/h3&gt; 
&lt;p&gt;In some cases, you may want to verify the webhook separately from parsing the payload. If you prefer to handle these steps separately, we provide the method &lt;code&gt;client.Webhooks.VerifySignature()&lt;/code&gt; to &lt;em&gt;only verify&lt;/em&gt; the signature of a webhook request. Like &lt;code&gt;Unwrap()&lt;/code&gt;, this method will return an error if the signature is invalid.&lt;/p&gt; 
&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter should be the raw JSON bytes sent from the server (do not parse it first). You will then need to parse the body after verifying the signature.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/openai/openai-go/v2"
	"github.com/openai/openai-go/v2/option"
)

func main() {
	client := openai.NewClient(
		option.WithWebhookSecret(os.Getenv("OPENAI_WEBHOOK_SECRET")), // env var used by default; explicit here.
	)

	r := gin.Default()

	r.POST("/webhook", func(c *gin.Context) {
		body, err := io.ReadAll(c.Request.Body)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Error reading request body"})
			return
		}
		defer c.Request.Body.Close()

		err = client.Webhooks.VerifySignature(body, c.Request.Header)
		if err != nil {
			log.Printf("Invalid webhook signature: %v", err)
			c.JSON(http.StatusBadRequest, gin.H{"error": "invalid signature"})
			return
		}

		c.JSON(http.StatusOK, gin.H{"message": "ok"})
	})

	r.Run(":8000")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Retries&lt;/h3&gt; 
&lt;p&gt;Certain errors will be automatically retried 2 times by default, with a short exponential backoff. We retry by default all connection errors, 408 Request Timeout, 409 Conflict, 429 Rate Limit, and &amp;gt;=500 Internal errors.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;WithMaxRetries&lt;/code&gt; option to configure or disable this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Configure the default for all requests:
client := openai.NewClient(
	option.WithMaxRetries(0), // default is 2
)

// Override per-request:
client.Chat.Completions.New(
	context.TODO(),
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String("How can I get the name of the current day in JavaScript?"),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	option.WithMaxRetries(5),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Accessing raw response data (e.g. response headers)&lt;/h3&gt; 
&lt;p&gt;You can access the raw HTTP response data by using the &lt;code&gt;option.WithResponseInto()&lt;/code&gt; request option. This is useful when you need to examine response headers, status codes, or other details.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Create a variable to store the HTTP response
var response *http.Response
chatCompletion, err := client.Chat.Completions.New(
	context.TODO(),
	openai.ChatCompletionNewParams{
		Messages: []openai.ChatCompletionMessageParamUnion{{
			OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{
				Content: openai.ChatCompletionUserMessageParamContentUnion{
					OfString: openai.String("Say this is a test"),
				},
			},
		}},
		Model: shared.ChatModelGPT5,
	},
	option.WithResponseInto(&amp;amp;response),
)
if err != nil {
	// handle error
}
fmt.Printf("%+v\n", chatCompletion)

fmt.Printf("Status Code: %d\n", response.StatusCode)
fmt.Printf("Headers: %+#v\n", response.Header)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Making custom/undocumented requests&lt;/h3&gt; 
&lt;p&gt;This library is typed for convenient access to the documented API. If you need to access undocumented endpoints, params, or response properties, the library can still be used.&lt;/p&gt; 
&lt;h4&gt;Undocumented endpoints&lt;/h4&gt; 
&lt;p&gt;To make requests to undocumented endpoints, you can use &lt;code&gt;client.Get&lt;/code&gt;, &lt;code&gt;client.Post&lt;/code&gt;, and other HTTP verbs. &lt;code&gt;RequestOptions&lt;/code&gt; on the client, such as retries, will be respected when making these requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var (
    // params can be an io.Reader, a []byte, an encoding/json serializable object,
    // or a "…Params" struct defined in this library.
    params map[string]any

    // result can be an []byte, *http.Response, a encoding/json deserializable object,
    // or a model defined in this library.
    result *http.Response
)
err := client.Post(context.Background(), "/unspecified", params, &amp;amp;result)
if err != nil {
    …
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Undocumented request params&lt;/h4&gt; 
&lt;p&gt;To make requests using undocumented parameters, you may use either the &lt;code&gt;option.WithQuerySet()&lt;/code&gt; or the &lt;code&gt;option.WithJSONSet()&lt;/code&gt; methods.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;params := FooNewParams{
    ID:   "id_xxxx",
    Data: FooNewParamsData{
        FirstName: openai.String("John"),
    },
}
client.Foo.New(context.Background(), params, option.WithJSONSet("data.last_name", "Doe"))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Undocumented response properties&lt;/h4&gt; 
&lt;p&gt;To access undocumented response properties, you may either access the raw JSON of the response as a string with &lt;code&gt;result.JSON.RawJSON()&lt;/code&gt;, or get the raw JSON of a particular field on the result with &lt;code&gt;result.JSON.Foo.Raw()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Any fields that are not present on the response struct will be saved and can be accessed by &lt;code&gt;result.JSON.ExtraFields()&lt;/code&gt; which returns the extra fields as a &lt;code&gt;map[string]Field&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Middleware&lt;/h3&gt; 
&lt;p&gt;We provide &lt;code&gt;option.WithMiddleware&lt;/code&gt; which applies the given middleware to requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func Logger(req *http.Request, next option.MiddlewareNext) (res *http.Response, err error) {
	// Before the request
	start := time.Now()
	LogReq(req)

	// Forward the request to the next handler
	res, err = next(req)

	// Handle stuff after the request
	end := time.Now()
	LogRes(res, err, start - end)

    return res, err
}

client := openai.NewClient(
	option.WithMiddleware(Logger),
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When multiple middlewares are provided as variadic arguments, the middlewares are applied left to right. If &lt;code&gt;option.WithMiddleware&lt;/code&gt; is given multiple times, for example first in the client then the method, the middleware in the client will run first and the middleware given in the method will run next.&lt;/p&gt; 
&lt;p&gt;You may also replace the default &lt;code&gt;http.Client&lt;/code&gt; with &lt;code&gt;option.WithHTTPClient(client)&lt;/code&gt;. Only one http client is accepted (this overwrites any previous client) and receives requests after any middleware has been applied.&lt;/p&gt; 
&lt;h2&gt;Microsoft Azure OpenAI&lt;/h2&gt; 
&lt;p&gt;To use this library with [Azure OpenAI]&lt;a href="https://learn.microsoft.com/azure/ai-services/openai/overview"&gt;https://learn.microsoft.com/azure/ai-services/openai/overview&lt;/a&gt;), use the option.RequestOption functions in the &lt;code&gt;azure&lt;/code&gt; package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/openai/openai-go/v2"
	"github.com/openai/openai-go/v2/azure"
)

func main() {
	const azureOpenAIEndpoint = "https://&amp;lt;azure-openai-resource&amp;gt;.openai.azure.com"

	// The latest API versions, including previews, can be found here:
	// ttps://learn.microsoft.com/en-us/azure/ai-services/openai/reference#rest-api-versionng
	const azureOpenAIAPIVersion = "2024-06-01"

	tokenCredential, err := azidentity.NewDefaultAzureCredential(nil)

	if err != nil {
		fmt.Printf("Failed to create the DefaultAzureCredential: %s", err)
		os.Exit(1)
	}

	client := openai.NewClient(
		azure.WithEndpoint(azureOpenAIEndpoint, azureOpenAIAPIVersion),

		// Choose between authenticating using a TokenCredential or an API Key
		azure.WithTokenCredential(tokenCredential),
		// or azure.WithAPIKey(azureOpenAIAPIKey),
	)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Semantic versioning&lt;/h2&gt; 
&lt;p&gt;This package generally follows &lt;a href="https://semver.org/spec/v2.0.0.html"&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals.)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; 
&lt;p&gt;We are keen for your feedback; please open an &lt;a href="https://www.github.com/openai/openai-go/issues"&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/openai/openai-go/main/CONTRIBUTING.md"&gt;the contributing documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>modelcontextprotocol/go-sdk</title>
      <link>https://github.com/modelcontextprotocol/go-sdk</link>
      <description>&lt;p&gt;The official Go SDK for Model Context Protocol servers and clients. Maintained in collaboration with Google.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Go SDK v0.2.0&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://codespaces.new/modelcontextprotocol/go-sdk"&gt;&lt;img src="https://github.com/codespaces/badge.svg?sanitize=true" alt="Open in GitHub Codespaces" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;BREAKING CHANGES&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This version contains breaking changes. See the &lt;a href="https://github.com/modelcontextprotocol/go-sdk/releases/tag/v0.2.0"&gt;release notes&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/modelcontextprotocol/go-sdk" alt="PkgGoDev" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains an unreleased implementation of the official Go software development kit (SDK) for the Model Context Protocol (MCP).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The SDK should be considered unreleased, and is currently unstable and subject to breaking changes. Please test it out and file bug reports or API proposals, but don't use it in real projects. See the issue tracker for known issues and missing features. We aim to release a stable version of the SDK in August, 2025.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;The design doc for this SDK is at &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/design/design.md"&gt;design.md&lt;/a&gt;, which was initially reviewed at &lt;a href="https://github.com/orgs/modelcontextprotocol/discussions/364"&gt;modelcontextprotocol/discussions/364&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Further design discussion should occur in &lt;a href="https://github.com/modelcontextprotocol/go-sdk/issues"&gt;issues&lt;/a&gt; (for concrete proposals) or &lt;a href="https://github.com/modelcontextprotocol/go-sdk/discussions"&gt;discussions&lt;/a&gt; for open-ended discussion. See &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Package documentation&lt;/h2&gt; 
&lt;p&gt;The SDK consists of three importable packages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/mcp"&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/mcp&lt;/code&gt;&lt;/a&gt; package defines the primary APIs for constructing and using MCP clients and servers.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/jsonschema"&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/jsonschema&lt;/code&gt;&lt;/a&gt; package provides an implementation of &lt;a href="https://json-schema.org/"&gt;JSON Schema&lt;/a&gt;, used for MCP tool input and output schema.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://pkg.go.dev/github.com/modelcontextprotocol/go-sdk/jsonrpc"&gt;&lt;code&gt;github.com/modelcontextprotocol/go-sdk/jsonrpc&lt;/code&gt;&lt;/a&gt; package is for users implementing their own transports.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;In this example, an MCP client communicates with an MCP server running in a sidecar process:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"log"
	"os/exec"

	"github.com/modelcontextprotocol/go-sdk/mcp"
)

func main() {
	ctx := context.Background()

	// Create a new client, with no features.
	client := mcp.NewClient(&amp;amp;mcp.Implementation{Name: "mcp-client", Version: "v1.0.0"}, nil)

	// Connect to a server over stdin/stdout
	transport := &amp;amp;mcp.CommandTransport{Command: exec.Command("myserver")}
	session, err := client.Connect(ctx, transport, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer session.Close()

	// Call a tool on the server.
	params := &amp;amp;mcp.CallToolParams{
		Name:      "greet",
		Arguments: map[string]any{"name": "you"},
	}
	res, err := session.CallTool(ctx, params)
	if err != nil {
		log.Fatalf("CallTool failed: %v", err)
	}
	if res.IsError {
		log.Fatal("tool failed")
	}
	for _, c := range res.Content {
		log.Print(c.(*mcp.TextContent).Text)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here's an example of the corresponding server component, which communicates with its client over stdin/stdout:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
	"context"
	"log"

	"github.com/modelcontextprotocol/go-sdk/mcp"
)

type HiParams struct {
	Name string `json:"name" jsonschema:"the name of the person to greet"`
}

func SayHi(ctx context.Context, req *mcp.ServerRequest[*mcp.CallToolParamsFor[HiParams]]) (*mcp.CallToolResultFor[any], error) {
	return &amp;amp;mcp.CallToolResultFor[any]{
		Content: []mcp.Content{&amp;amp;mcp.TextContent{Text: "Hi " + req.Params.Arguments.Name}},
	}, nil
}

func main() {
	// Create a server with a single tool.
	server := mcp.NewServer(&amp;amp;mcp.Implementation{Name: "greeter", Version: "v1.0.0"}, nil)

	mcp.AddTool(server, &amp;amp;mcp.Tool{Name: "greet", Description: "say hi"}, SayHi)
	// Run the server over stdin/stdout, until the client disconnects
	if err := server.Run(context.Background(), &amp;amp;mcp.StdioTransport{}); err != nil {
		log.Fatal(err)
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/examples/"&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory contains more example clients and servers.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Several existing Go MCP SDKs inspired the development and design of this official SDK, notably &lt;a href="https://github.com/mark3labs/mcp-go"&gt;mcp-go&lt;/a&gt;, authored by Ed Zynda. We are grateful to Ed as well as the other contributors to mcp-go, and to authors and contributors of other SDKs such as &lt;a href="https://github.com/metoro-io/mcp-golang"&gt;mcp-golang&lt;/a&gt; and &lt;a href="https://github.com/ThinkInAIXYZ/go-mcp"&gt;go-mcp&lt;/a&gt;. Thanks to their work, there is a thriving ecosystem of Go MCP clients and servers.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/modelcontextprotocol/go-sdk/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sundowndev/phoneinfoga</title>
      <link>https://github.com/sundowndev/phoneinfoga</link>
      <description>&lt;p&gt;Information gathering framework for phone numbers&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/docs/images/banner.png" width="500" alt="project logo" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://github.com/sundowndev/phoneinfoga/actions"&gt; &lt;img src="https://github.com/sundowndev/phoneinfoga/workflows/Build/badge.svg?sanitize=true" alt="build status" /&gt; &lt;/a&gt; 
 &lt;a href="https://goreportcard.com/report/github.com/sundowndev/phoneinfoga/v2"&gt; &lt;img src="https://goreportcard.com/badge/github.com/sundowndev/phoneinfoga/v2" alt="go report" /&gt; &lt;/a&gt; 
 &lt;a href="https://codeclimate.com/github/sundowndev/phoneinfoga/maintainability"&gt; &lt;img src="https://api.codeclimate.com/v1/badges/3259feb1c68df1cd4f71/maintainability" alt="code climate badge" /&gt; &lt;/a&gt; 
 &lt;a href="https://coveralls.io/github/sundowndev/phoneinfoga"&gt; &lt;img src="https://coveralls.io/repos/github/sundowndev/phoneinfoga/badge.svg?sanitize=true" alt="Coverage Status" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/sundowndev/phoneinfoga/releases"&gt; &lt;img src="https://img.shields.io/github/release/SundownDEV/phoneinfoga.svg?sanitize=true" alt="Latest version" /&gt; &lt;/a&gt; 
 &lt;a href="https://hub.docker.com/r/sundowndev/phoneinfoga"&gt; &lt;img src="https://img.shields.io/docker/pulls/sundowndev/phoneinfoga.svg?sanitize=true" alt="Docker pulls" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h4 align="center"&gt;Information gathering framework for phone numbers&lt;/h4&gt; 
&lt;p align="center"&gt; &lt;a href="https://sundowndev.github.io/phoneinfoga/"&gt;Documentation&lt;/a&gt; • &lt;a href="https://petstore.swagger.io/?url=https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/web/docs/swagger.yaml"&gt;API documentation&lt;/a&gt; • &lt;a href="https://medium.com/@SundownDEV/phone-number-scanning-osint-recon-tool-6ad8f0cac27b"&gt;Related blog post&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;PhoneInfoga is one of the most advanced tools to scan international phone numbers. It allows you to first gather basic information such as country, area, carrier and line type, then use various techniques to try to find the VoIP provider or identify the owner. It works with a collection of scanners that must be configured in order for the tool to be effective. PhoneInfoga doesn't automate everything, it's just there to help investigating on phone numbers.&lt;/p&gt; 
&lt;h2&gt;Current status&lt;/h2&gt; 
&lt;p&gt;This project is stable and production-ready.&lt;/p&gt; 
&lt;h4&gt;Demo instance termination&lt;/h4&gt; 
&lt;p&gt;The demo instance has been terminated on December 21th, 2023. It's been expensive to maintain this instance throughout the years given the number of requests it received (~20K/month), without bringing much value to users compared to using it locally. Use it locally with your own API keys for a better experience.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check if phone number exists&lt;/li&gt; 
 &lt;li&gt;Gather basic information such as country, line type and carrier&lt;/li&gt; 
 &lt;li&gt;OSINT footprinting using external APIs, phone books &amp;amp; search engines&lt;/li&gt; 
 &lt;li&gt;Check for reputation reports, social media, disposable numbers and more&lt;/li&gt; 
 &lt;li&gt;Use the graphical user interface to run scans from the browser&lt;/li&gt; 
 &lt;li&gt;Programmatic usage with the &lt;a href="https://petstore.swagger.io/?url=https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/web/docs/swagger.yaml"&gt;REST API&lt;/a&gt; and &lt;a href="https://pkg.go.dev/github.com/sundowndev/phoneinfoga/v2"&gt;Go modules&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Anti-features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Does not claim to provide relevant or verified data, it's just a tool !&lt;/li&gt; 
 &lt;li&gt;Does not allow to "track" a phone or its owner in real time&lt;/li&gt; 
 &lt;li&gt;Does not allow to get the precise phone location&lt;/li&gt; 
 &lt;li&gt;Does not allow to hack a phone&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fsundowndev%2FPhoneInfoga?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fsundowndev%2FPhoneInfoga.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This tool is licensed under the GNU General Public License v3.0.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.flaticon.com/free-icon/fingerprint-search-symbol-of-secret-service-investigation_48838"&gt;Icon&lt;/a&gt; made by &lt;a href="https://www.freepik.com/" title="Freepik"&gt;Freepik&lt;/a&gt; from &lt;a href="https://www.flaticon.com/" title="Flaticon"&gt;flaticon.com&lt;/a&gt; is licensed by &lt;a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank"&gt;CC 3.0 BY&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Support me by signing up to DigitalOcean using my link ($200 free credits)&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.digitalocean.com/?refcode=31f5ef768eb3&amp;amp;utm_campaign=Referral_Invite&amp;amp;utm_medium=Referral_Program&amp;amp;utm_source=badge"&gt;&lt;img src="https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%203.svg?sanitize=true" alt="DigitalOcean Referral Badge" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://github.com/sundowndev/static/raw/main/sponsors.svg?v=c68eba9" width="100%" heigh="auto" /&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AlexxIT/go2rtc</title>
      <link>https://github.com/AlexxIT/go2rtc</link>
      <description>&lt;p&gt;Ultimate camera streaming application with support RTSP, RTMP, HTTP-FLV, WebRTC, MSE, HLS, MP4, MJPEG, HomeKit, FFmpeg, etc.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/logo.gif" alt="go2rtc" /&gt; &lt;br /&gt; &lt;a href="https://github.com/AlexxIT/go2rtc/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/AlexxIT/go2rtc?style=flat-square&amp;amp;logo=github" alt="stars" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/alexxit/go2rtc"&gt;&lt;img src="https://img.shields.io/docker/pulls/alexxit/go2rtc?style=flat-square&amp;amp;logo=docker&amp;amp;logoColor=white&amp;amp;label=pulls" alt="docker pulls" /&gt;&lt;/a&gt; &lt;a href="https://github.com/AlexxIT/go2rtc/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/AlexxIT/go2rtc/total?color=blue&amp;amp;style=flat-square&amp;amp;logo=github" alt="releases" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/AlexxIT/go2rtc"&gt;&lt;img src="https://goreportcard.com/badge/github.com/AlexxIT/go2rtc" alt="goreport" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; 
&lt;p&gt;Ultimate camera streaming application with support for RTSP, WebRTC, HomeKit, FFmpeg, RTMP, etc.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/go2rtc.png" alt="" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;zero-dependency and zero-config &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary"&gt;small app&lt;/a&gt; for all OS (Windows, macOS, Linux, ARM)&lt;/li&gt; 
 &lt;li&gt;zero-delay for many supported protocols (lowest possible streaming latency)&lt;/li&gt; 
 &lt;li&gt;streaming from &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;RTSP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp"&gt;RTMP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip"&gt;DVRIP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;HTTP&lt;/a&gt; (FLV/MJPEG/JPEG/TS), &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device"&gt;USB Cameras&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;other sources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;streaming from any sources, supported by &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;streaming to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;RTSP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;MSE/MP4&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-homekit"&gt;HomeKit&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls"&gt;HLS&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg"&gt;MJPEG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#publish-stream"&gt;publish&lt;/a&gt; any source to popular streaming services (YouTube, Telegram, etc.)&lt;/li&gt; 
 &lt;li&gt;first project in the World with support streaming from &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit"&gt;HomeKit Cameras&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;support H265 for WebRTC in browser (Safari only, &lt;a href="https://github.com/AlexxIT/Blog/issues/5"&gt;read more&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;on-the-fly transcoding for unsupported codecs via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;play audio files and live streams on some cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera"&gt;speaker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;multi-source 2-way &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation"&gt;codecs negotiation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;mixing tracks from different sources to single stream&lt;/li&gt; 
   &lt;li&gt;auto-match client-supported codecs&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;2-way audio&lt;/a&gt; for some cameras&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;streaming from private networks via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;ngrok&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;can be &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;integrated to&lt;/a&gt; any smart home platform or be used as &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary"&gt;standalone app&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Inspired by:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;series of streaming projects from &lt;a href="https://github.com/deepch"&gt;@deepch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pion/webrtc"&gt;webrtc&lt;/a&gt; go library and whole &lt;a href="https://github.com/pion"&gt;@pion&lt;/a&gt; team&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aler9/rtsp-simple-server"&gt;rtsp-simple-server&lt;/a&gt; idea from &lt;a href="https://github.com/aler9"&gt;@aler9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gstreamer.freedesktop.org/"&gt;GStreamer&lt;/a&gt; framework pipeline idea&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mediasoup.org/"&gt;MediaSoup&lt;/a&gt; framework routing idea&lt;/li&gt; 
 &lt;li&gt;HomeKit Accessory Protocol from &lt;a href="https://github.com/brutella/hap"&gt;@brutella&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;creator of the project's logo &lt;a href="https://www.instagram.com/v_novoseltsev"&gt;@v_novoseltsev&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start"&gt;Fast start&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary"&gt;go2rtc: Binary&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-docker"&gt;go2rtc: Docker&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on"&gt;go2rtc: Home Assistant Add-on&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration"&gt;go2rtc: Home Assistant Integration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-dev-version"&gt;go2rtc: Dev version&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;Module: Streams&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;Two way audio&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;Source: RTSP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp"&gt;Source: RTMP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;Source: HTTP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-onvif"&gt;Source: ONVIF&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;Source: FFmpeg&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device"&gt;Source: FFmpeg Device&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec"&gt;Source: Exec&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo"&gt;Source: Echo&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-expr"&gt;Source: Expr&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit"&gt;Source: HomeKit&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-bubble"&gt;Source: Bubble&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip"&gt;Source: DVRIP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;Source: Tapo&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-kasa"&gt;Source: Kasa&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-gopro"&gt;Source: GoPro&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ivideon"&gt;Source: Ivideon&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass"&gt;Source: Hass&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi"&gt;Source: ISAPI&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-nest"&gt;Source: Nest&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock"&gt;Source: Roborock&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webrtc"&gt;Source: WebRTC&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent"&gt;Source: WebTorrent&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources"&gt;Incoming sources&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera"&gt;Stream to camera&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#publish-stream"&gt;Publish stream&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;Module: API&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;Module: RTSP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp"&gt;Module: RTMP&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;Module: WebRTC&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-homekit"&gt;Module: HomeKit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent"&gt;Module: WebTorrent&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;Module: ngrok&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass"&gt;Module: Hass&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;Module: MP4&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls"&gt;Module: HLS&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg"&gt;Module: MJPEG&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-log"&gt;Module: Log&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#security"&gt;Security&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters"&gt;Codecs filters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-madness"&gt;Codecs madness&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation"&gt;Codecs negotiation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#projects-using-go2rtc"&gt;Projects using go2rtc&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#cameras-experience"&gt;Camera experience&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#tips"&gt;TIPS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Fast start&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary"&gt;binary&lt;/a&gt; or use &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-docker"&gt;Docker&lt;/a&gt; or Home Assistant &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on"&gt;Add-on&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration"&gt;Integration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Open web interface: &lt;code&gt;http://localhost:1984/&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Optionally:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;add your &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;streams&lt;/a&gt; to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;config&lt;/a&gt; file&lt;/li&gt; 
 &lt;li&gt;setup &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;external access&lt;/a&gt; to webrtc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Developers:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;write your own &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;web interface&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;integrate &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;web api&lt;/a&gt; into your smart home platform&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;go2rtc: Binary&lt;/h3&gt; 
&lt;p&gt;Download binary for your OS from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/"&gt;latest release&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_win64.zip&lt;/code&gt; - Windows 10+ 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_win32.zip&lt;/code&gt; - Windows 7+ 32-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_win_arm64.zip&lt;/code&gt; - Windows ARM 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_amd64&lt;/code&gt; - Linux 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_i386&lt;/code&gt; - Linux 32-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_arm64&lt;/code&gt; - Linux ARM 64-bit (ex. Raspberry 64-bit OS)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_arm&lt;/code&gt; - Linux ARM 32-bit (ex. Raspberry 32-bit OS)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_armv6&lt;/code&gt; - Linux ARMv6 (for old Raspberry 1 and Zero)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_linux_mipsel&lt;/code&gt; - Linux MIPS (ex. &lt;a href="https://github.com/AlexxIT/XiaomiGateway3"&gt;Xiaomi Gateway 3&lt;/a&gt;, &lt;a href="https://github.com/gtxaspec/wz_mini_hacks"&gt;Wyze cameras&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_mac_amd64.zip&lt;/code&gt; - macOS 10.13+ Intel 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_mac_arm64.zip&lt;/code&gt; - macOS ARM 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_freebsd_amd64.zip&lt;/code&gt; - FreeBSD 64-bit&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go2rtc_freebsd_arm64.zip&lt;/code&gt; - FreeBSD ARM 64-bit&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Don't forget to fix the rights &lt;code&gt;chmod +x go2rtc_xxx_xxx&lt;/code&gt; on Linux and Mac.&lt;/p&gt; 
&lt;h3&gt;go2rtc: Docker&lt;/h3&gt; 
&lt;p&gt;The Docker container &lt;a href="https://hub.docker.com/r/alexxit/go2rtc"&gt;&lt;code&gt;alexxit/go2rtc&lt;/code&gt;&lt;/a&gt; supports multiple architectures including &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;386&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, and &lt;code&gt;arm&lt;/code&gt;. This container offers the same functionality as the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on"&gt;Home Assistant Add-on&lt;/a&gt; but is designed to operate independently of Home Assistant. It comes preinstalled with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;ngrok&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo"&gt;Python&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;go2rtc: Home Assistant Add-on&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&amp;amp;repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons"&gt;&lt;img src="https://my.home-assistant.io/badges/supervisor_addon.svg?sanitize=true" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Add-On: 
  &lt;ul&gt; 
   &lt;li&gt;Settings &amp;gt; Add-ons &amp;gt; Plus &amp;gt; Repositories &amp;gt; Add &lt;code&gt;https://github.com/AlexxIT/hassio-addons&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;go2rtc &amp;gt; Install &amp;gt; Start&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Setup &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass"&gt;Integration&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;go2rtc: Home Assistant Integration&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/AlexxIT/WebRTC"&gt;WebRTC Camera&lt;/a&gt; custom component can be used on any &lt;a href="https://www.home-assistant.io/installation/"&gt;Home Assistant installation&lt;/a&gt;, including &lt;a href="https://github.com/AlexxIT/HassWP"&gt;HassWP&lt;/a&gt; on Windows. It can automatically download and use the latest version of go2rtc. Or it can connect to an existing version of go2rtc. Addon installation in this case is optional.&lt;/p&gt; 
&lt;h3&gt;go2rtc: Dev version&lt;/h3&gt; 
&lt;p&gt;Latest, but maybe unstable version:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Binary: &lt;a href="https://nightly.link/AlexxIT/go2rtc/workflows/build/master"&gt;latest nightly release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Docker: &lt;code&gt;alexxit/go2rtc:master&lt;/code&gt; or &lt;code&gt;alexxit/go2rtc:master-hardware&lt;/code&gt; versions&lt;/li&gt; 
 &lt;li&gt;Hass Add-on: &lt;code&gt;go2rtc master&lt;/code&gt; or &lt;code&gt;go2rtc master hardware&lt;/code&gt; versions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;by default go2rtc will search &lt;code&gt;go2rtc.yaml&lt;/code&gt; in the current work directory&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;api&lt;/code&gt; server will start on default &lt;strong&gt;1984 port&lt;/strong&gt; (TCP)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp&lt;/code&gt; server will start on default &lt;strong&gt;8554 port&lt;/strong&gt; (TCP)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;webrtc&lt;/code&gt; will use port &lt;strong&gt;8555&lt;/strong&gt; (TCP/UDP) for connections&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ffmpeg&lt;/code&gt; will use default transcoding options&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Configuration options and a complete list of settings can be found in &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Configuration"&gt;the wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Available modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;streams&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api"&gt;api&lt;/a&gt; - HTTP API (important for WebRTC support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;rtsp&lt;/a&gt; - RTSP Server (important for FFmpeg support)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;webrtc&lt;/a&gt; - WebRTC Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;mp4&lt;/a&gt; - MSE, MP4 stream and MP4 snapshot Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls"&gt;hls&lt;/a&gt; - HLS TS or fMP4 stream Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg"&gt;mjpeg&lt;/a&gt; - MJPEG Server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg&lt;/a&gt; - FFmpeg integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;ngrok&lt;/a&gt; - ngrok integration (external access for private network)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass"&gt;hass&lt;/a&gt; - Home Assistant integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-log"&gt;log&lt;/a&gt; - logs config&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Module: Streams&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; supports different stream source types. You can config one or multiple links of any type as a stream source.&lt;/p&gt; 
&lt;p&gt;Available source types:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;rtsp&lt;/a&gt; - &lt;code&gt;RTSP&lt;/code&gt; and &lt;code&gt;RTSPS&lt;/code&gt; cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;two-way audio&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp"&gt;rtmp&lt;/a&gt; - &lt;code&gt;RTMP&lt;/code&gt; streams&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;http&lt;/a&gt; - &lt;code&gt;HTTP-FLV&lt;/code&gt;, &lt;code&gt;MPEG-TS&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt; (snapshots), &lt;code&gt;MJPEG&lt;/code&gt; streams&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-onvif"&gt;onvif&lt;/a&gt; - get camera &lt;code&gt;RTSP&lt;/code&gt; link and snapshot link using &lt;code&gt;ONVIF&lt;/code&gt; protocol&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg&lt;/a&gt; - FFmpeg integration (&lt;code&gt;HLS&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt; and many others)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device"&gt;ffmpeg:device&lt;/a&gt; - local USB Camera or Webcam&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec"&gt;exec&lt;/a&gt; - get media from external app output&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo"&gt;echo&lt;/a&gt; - get stream link from bash or python&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-expr"&gt;expr&lt;/a&gt; - get stream link via built-in expression language&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit"&gt;homekit&lt;/a&gt; - streaming from HomeKit Camera&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-bubble"&gt;bubble&lt;/a&gt; - streaming from ESeeCloud/dvr163 NVR&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip"&gt;dvrip&lt;/a&gt; - streaming from DVR-IP NVR&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;tapo&lt;/a&gt; - TP-Link Tapo cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;two way audio&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;kasa&lt;/a&gt; - TP-Link Kasa cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-gopro"&gt;gopro&lt;/a&gt; - GoPro cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ivideon"&gt;ivideon&lt;/a&gt; - public cameras from &lt;a href="https://tv.ivideon.com/"&gt;Ivideon&lt;/a&gt; service&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass"&gt;hass&lt;/a&gt; - Home Assistant integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi"&gt;isapi&lt;/a&gt; - two-way audio for Hikvision (ISAPI) cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock"&gt;roborock&lt;/a&gt; - Roborock vacuums with cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webrtc"&gt;webrtc&lt;/a&gt; - WebRTC/WHEP sources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent"&gt;webtorrent&lt;/a&gt; - WebTorrent source from another go2rtc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources"&gt;incoming sources&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Two-way audio&lt;/h4&gt; 
&lt;p&gt;Supported sources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;RTSP cameras&lt;/a&gt; with &lt;a href="https://www.onvif.org/specs/stream/ONVIF-Streaming-Spec.pdf"&gt;ONVIF Profile T&lt;/a&gt; (back channel connection)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip"&gt;DVRIP&lt;/a&gt; cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;TP-Link Tapo&lt;/a&gt; cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi"&gt;Hikvision ISAPI&lt;/a&gt; cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock"&gt;Roborock vacuums&lt;/a&gt; models with cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec"&gt;Exec&lt;/a&gt; audio on server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-browser"&gt;Any Browser&lt;/a&gt; as IP-camera&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Two-way audio can be used in browser with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC&lt;/a&gt; technology. The browser will give access to the microphone only for HTTPS sites (&lt;a href="https://stackoverflow.com/questions/52759992/how-to-access-camera-and-microphone-in-chrome-without-https"&gt;read more&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;go2rtc also supports &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera"&gt;play audio&lt;/a&gt; files and live streams on this cameras.&lt;/p&gt; 
&lt;h4&gt;Source: RTSP&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  sonoff_camera: rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0
  dahua_camera:
    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&amp;amp;unicast=true&amp;amp;proto=Onvif
    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=1#backchannel=0
  amcrest_doorbell:
    - rtsp://username:password@192.168.1.123:554/cam/realmonitor?channel=1&amp;amp;subtype=0#backchannel=0
  unifi_camera: rtspx://192.168.1.123:7441/fD6ouM72bWoFijxK
  glichy_camera: ffmpeg:rtsp://username:password@192.168.1.123/live/ch00_1 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Recommendations&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Amcrest Doorbell&lt;/strong&gt; users may want to disable two-way audio, because with an active stream, you won't have a working call button. You need to add &lt;code&gt;#backchannel=0&lt;/code&gt; to the end of your RTSP link in YAML config file&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dahua Doorbell&lt;/strong&gt; users may want to change &lt;a href="https://github.com/AlexxIT/go2rtc/issues/49#issuecomment-2127107379"&gt;audio codec&lt;/a&gt; for proper 2-way audio. Make sure not to request backchannel multiple times by adding &lt;code&gt;#backchannel=0&lt;/code&gt; to other stream sources of the same doorbell. The &lt;code&gt;unicast=true&amp;amp;proto=Onvif&lt;/code&gt; is preferred for 2-way audio as this makes the doorbell accept multiple codecs for the incoming audio&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reolink&lt;/strong&gt; users may want NOT to use RTSP protocol at all, some camera models have a very awful, unusable stream implementation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ubiquiti UniFi&lt;/strong&gt; users may want to disable HTTPS verification. Use &lt;code&gt;rtspx://&lt;/code&gt; prefix instead of &lt;code&gt;rtsps://&lt;/code&gt;. And don't use &lt;code&gt;?enableSrtp&lt;/code&gt; &lt;a href="https://github.com/AlexxIT/go2rtc/issues/81"&gt;suffix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TP-Link Tapo&lt;/strong&gt; users may skip login and password, because go2rtc support login &lt;a href="https://drmnsamoliu.github.io/video.html"&gt;without them&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;If your camera has two RTSP links, you can add both as sources. This is useful when streams have different codecs, for example AAC audio with main stream and PCMU/PCMA audio with second stream&lt;/li&gt; 
 &lt;li&gt;If the stream from your camera is glitchy, try using &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg source&lt;/a&gt;. It will not add CPU load if you don't use transcoding&lt;/li&gt; 
 &lt;li&gt;If the stream from your camera is very glitchy, try to use transcoding with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg source&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Other options&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Format: &lt;code&gt;rtsp...#{param1}#{param2}#{param3}&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add custom timeout &lt;code&gt;#timeout=30&lt;/code&gt; (in seconds)&lt;/li&gt; 
 &lt;li&gt;Ignore audio - &lt;code&gt;#media=video&lt;/code&gt; or ignore video - &lt;code&gt;#media=audio&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Ignore two-way audio API &lt;code&gt;#backchannel=0&lt;/code&gt; - important for some glitchy cameras&lt;/li&gt; 
 &lt;li&gt;Use WebSocket transport &lt;code&gt;#transport=ws...&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;RTSP over WebSocket&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # WebSocket with authorization, RTSP - without
  axis-rtsp-ws:  rtsp://192.168.1.123:4567/axis-media/media.amp?overview=0&amp;amp;camera=1&amp;amp;resolution=1280x720&amp;amp;videoframeskipmode=empty&amp;amp;Axis-Orig-Sw=true#transport=ws://user:pass@192.168.1.123:4567/rtsp-over-websocket
  # WebSocket without authorization, RTSP - with
  dahua-rtsp-ws: rtsp://user:pass@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=1&amp;amp;proto=Private3#transport=ws://192.168.1.123/rtspoverwebsocket
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: RTMP&lt;/h4&gt; 
&lt;p&gt;You can get a stream from an RTMP server, for example &lt;a href="https://github.com/arut/nginx-rtmp-module"&gt;Nginx with nginx-rtmp-module&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  rtmp_stream: rtmp://192.168.1.123/live/camera1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: HTTP&lt;/h4&gt; 
&lt;p&gt;Support Content-Type:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP-FLV&lt;/strong&gt; (&lt;code&gt;video/x-flv&lt;/code&gt;) - same as RTMP, but over HTTP&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP-JPEG&lt;/strong&gt; (&lt;code&gt;image/jpeg&lt;/code&gt;) - camera snapshot link, can be converted by go2rtc to MJPEG stream&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP-MJPEG&lt;/strong&gt; (&lt;code&gt;multipart/x&lt;/code&gt;) - simple MJPEG stream over HTTP&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MPEG-TS&lt;/strong&gt; (&lt;code&gt;video/mpeg&lt;/code&gt;) - legacy &lt;a href="https://en.wikipedia.org/wiki/MPEG_transport_stream"&gt;streaming format&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Source also supports HTTP and TCP streams with autodetection for different formats: &lt;strong&gt;MJPEG&lt;/strong&gt;, &lt;strong&gt;H.264/H.265 bitstream&lt;/strong&gt;, &lt;strong&gt;MPEG-TS&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # [HTTP-FLV] stream in video/x-flv format
  http_flv: http://192.168.1.123:20880/api/camera/stream/780900131155/657617
  
  # [JPEG] snapshots from Dahua camera, will be converted to MJPEG stream
  dahua_snap: http://admin:password@192.168.1.123/cgi-bin/snapshot.cgi?channel=1

  # [MJPEG] stream will be proxied without modification
  http_mjpeg: https://mjpeg.sanford.io/count.mjpeg

  # [MJPEG or H.264/H.265 bitstream or MPEG-TS]
  tcp_magic: tcp://192.168.1.123:12345

  # Add custom header
  custom_header: "https://mjpeg.sanford.io/count.mjpeg#header=Authorization: Bearer XXX"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Dahua camera has a bug: if you select MJPEG codec for RTSP second stream, snapshot won't work.&lt;/p&gt; 
&lt;h4&gt;Source: ONVIF&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0"&gt;New in v1.5.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;The source is not very useful if you already know RTSP and snapshot links for your camera. But it can be useful if you don't.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WebUI &amp;gt; Add&lt;/strong&gt; webpage support ONVIF autodiscovery. Your server must be on the same subnet as the camera. If you use Docker, you must use "network host".&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  dahua1: onvif://admin:password@192.168.1.123
  reolink1: onvif://admin:password@192.168.1.123:8000
  tapo1: onvif://admin:password@192.168.1.123:2020
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: FFmpeg&lt;/h4&gt; 
&lt;p&gt;You can get any stream, file or device via FFmpeg and push it to go2rtc. The app will automatically start FFmpeg with the proper arguments when someone starts watching the stream.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;FFmpeg preistalled for &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hass Add-on&lt;/strong&gt; users can target files from &lt;a href="https://www.home-assistant.io/more-info/local-media/setup-media/"&gt;/media&lt;/a&gt; folder&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Format: &lt;code&gt;ffmpeg:{input}#{param1}#{param2}#{param3}&lt;/code&gt;. Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # [FILE] all tracks will be copied without transcoding codecs
  file1: ffmpeg:/media/BigBuckBunny.mp4

  # [FILE] video will be transcoded to H264, audio will be skipped
  file2: ffmpeg:/media/BigBuckBunny.mp4#video=h264

  # [FILE] video will be copied, audio will be transcoded to PCMU
  file3: ffmpeg:/media/BigBuckBunny.mp4#video=copy#audio=pcmu

  # [HLS] video will be copied, audio will be skipped
  hls: ffmpeg:https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear5/prog_index.m3u8#video=copy

  # [MJPEG] video will be transcoded to H264
  mjpeg: ffmpeg:http://185.97.122.128/cgi-bin/faststream.jpg#video=h264

  # [RTSP] video with rotation, should be transcoded, so select H264
  rotate: ffmpeg:rtsp://12345678@192.168.1.123/av_stream/ch0#video=h264#rotate=90
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All transcoding formats have &lt;a href="https://github.com/AlexxIT/go2rtc/raw/master/internal/ffmpeg/ffmpeg.go"&gt;built-in templates&lt;/a&gt;: &lt;code&gt;h264&lt;/code&gt;, &lt;code&gt;h265&lt;/code&gt;, &lt;code&gt;opus&lt;/code&gt;, &lt;code&gt;pcmu&lt;/code&gt;, &lt;code&gt;pcmu/16000&lt;/code&gt;, &lt;code&gt;pcmu/48000&lt;/code&gt;, &lt;code&gt;pcma&lt;/code&gt;, &lt;code&gt;pcma/16000&lt;/code&gt;, &lt;code&gt;pcma/48000&lt;/code&gt;, &lt;code&gt;aac&lt;/code&gt;, &lt;code&gt;aac/16000&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;But you can override them via YAML config. You can also add your own formats to the config and use them with source params.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg:
  bin: ffmpeg  # path to ffmpeg binary
  h264: "-codec:v libx264 -g:v 30 -preset:v superfast -tune:v zerolatency -profile:v main -level:v 4.1"
  mycodec: "-any args that supported by ffmpeg..."
  myinput: "-fflags nobuffer -flags low_delay -timeout 5000000 -i {input}"
  myraw: "-ss 00:00:20"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can use go2rtc stream name as ffmpeg input (ex. &lt;code&gt;ffmpeg:camera1#video=h264&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;video&lt;/code&gt; and &lt;code&gt;audio&lt;/code&gt; params multiple times (ex. &lt;code&gt;#video=copy#audio=copy#audio=pcmu&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt;, &lt;code&gt;270&lt;/code&gt; or &lt;code&gt;-90&lt;/code&gt; values, important with transcoding (ex. &lt;code&gt;#video=h264#rotate=90&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;width&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt; params, important with transcoding (ex. &lt;code&gt;#video=h264#width=1280&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;drawtext&lt;/code&gt; to add a timestamp (ex. &lt;code&gt;drawtext=x=2:y=2:fontsize=12:fontcolor=white:box=1:boxcolor=black&lt;/code&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;This will greatly increase the CPU of the server, even with hardware acceleration&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;raw&lt;/code&gt; param for any additional FFmpeg arguments (ex. &lt;code&gt;#raw=-vf transpose=1&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;You can use &lt;code&gt;input&lt;/code&gt; param to override default input template (ex. &lt;code&gt;#input=rtsp/udp&lt;/code&gt; will change RTSP transport from TCP to UDP+TCP) 
  &lt;ul&gt; 
   &lt;li&gt;You can use raw input value (ex. &lt;code&gt;#input=-timeout 5000000 -i {input}&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;You can add your own input templates&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration"&gt;hardware acceleration&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; It is recommended to check the available hardware in the WebUI add page.&lt;/p&gt; 
&lt;h4&gt;Source: FFmpeg Device&lt;/h4&gt; 
&lt;p&gt;You can get video from any USB camera or Webcam as RTSP or WebRTC stream. This is part of FFmpeg integration.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;check available devices in web interface&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;video_size&lt;/code&gt; and &lt;code&gt;framerate&lt;/code&gt; must be supported by your camera!&lt;/li&gt; 
 &lt;li&gt;for Linux supported only video for now&lt;/li&gt; 
 &lt;li&gt;for macOS you can stream FaceTime camera or whole desktop!&lt;/li&gt; 
 &lt;li&gt;for macOS important to set right framerate&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Format: &lt;code&gt;ffmpeg:device?{input-params}#{param1}#{param2}#{param3}&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  linux_usbcam:   ffmpeg:device?video=0&amp;amp;video_size=1280x720#video=h264
  windows_webcam: ffmpeg:device?video=0#video=h264
  macos_facetime: ffmpeg:device?video=0&amp;amp;audio=1&amp;amp;video_size=1280x720&amp;amp;framerate=30#video=h264#audio=pcma
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; It is recommended to check the available devices in the WebUI add page.&lt;/p&gt; 
&lt;h4&gt;Source: Exec&lt;/h4&gt; 
&lt;p&gt;Exec source can run any external application and expect data from it. Two transports are supported - &lt;strong&gt;pipe&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0"&gt;v1.5.0&lt;/a&gt;&lt;/em&gt;) and &lt;strong&gt;RTSP&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to use &lt;strong&gt;RTSP&lt;/strong&gt; transport, the command must contain the &lt;code&gt;{output}&lt;/code&gt; argument in any place. On launch, it will be replaced by the local address of the RTSP server.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;pipe&lt;/strong&gt; reads data from app stdout in different formats: &lt;strong&gt;MJPEG&lt;/strong&gt;, &lt;strong&gt;H.264/H.265 bitstream&lt;/strong&gt;, &lt;strong&gt;MPEG-TS&lt;/strong&gt;. Also pipe can write data to app stdin in two formats: &lt;strong&gt;PCMA&lt;/strong&gt; and &lt;strong&gt;PCM/48000&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The source can be used with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://ffmpeg.org/"&gt;FFmpeg&lt;/a&gt; - go2rtc ffmpeg source just a shortcut to exec source&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ffmpeg.org/ffplay.html"&gt;FFplay&lt;/a&gt; - play audio on your server&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gstreamer.freedesktop.org/"&gt;GStreamer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.raspberrypi.com/documentation/computers/camera_software.html"&gt;Raspberry Pi Cameras&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;any of your own software&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Pipe commands support parameters (format: &lt;code&gt;exec:{command}#{param1}#{param2}&lt;/code&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;killsignal&lt;/code&gt; - signal which will be sent to stop the process (numeric form)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;killtimeout&lt;/code&gt; - time in seconds for forced termination with sigkill&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;backchannel&lt;/code&gt; - enable backchannel for two-way audio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  stream: exec:ffmpeg -re -i /media/BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp {output}
  picam_h264: exec:libcamera-vid -t 0 --inline -o -
  picam_mjpeg: exec:libcamera-vid -t 0 --codec mjpeg -o -
  pi5cam_h264: exec:libcamera-vid -t 0 --libav-format h264 -o -
  canon: exec:gphoto2 --capture-movie --stdout#killsignal=2#killtimeout=5
  play_pcma: exec:ffplay -fflags nobuffer -f alaw -ar 8000 -i -#backchannel=1
  play_pcm48k: exec:ffplay -fflags nobuffer -f s16be -ar 48000 -i -#backchannel=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Echo&lt;/h4&gt; 
&lt;p&gt;Some sources may have a dynamic link. And you will need to get it using a Bash or Python script. Your script should echo a link to the source. RTSP, FFmpeg or any of the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;supported sources&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users has preinstalled &lt;code&gt;python3&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Check examples in &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Source-Echo-examples"&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  apple_hls: echo:python3 hls.py https://developer.apple.com/streaming/examples/basic-stream-osx-ios5.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Expr&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.2"&gt;New in v1.8.2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Like &lt;code&gt;echo&lt;/code&gt; source, but uses the built-in &lt;a href="https://github.com/antonmedv/expr"&gt;expr&lt;/a&gt; expression language (&lt;a href="https://github.com/AlexxIT/go2rtc/raw/master/internal/expr/README.md"&gt;read more&lt;/a&gt;).&lt;/p&gt; 
&lt;h4&gt;Source: HomeKit&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can use HomeKit Cameras &lt;strong&gt;without Apple devices&lt;/strong&gt; (iPhone, iPad, etc.), it's just a yet another protocol&lt;/li&gt; 
 &lt;li&gt;HomeKit device can be paired with only one ecosystem. So, if you have paired it to an iPhone (Apple Home), you can't pair it with Home Assistant or go2rtc. Or if you have paired it to go2rtc, you can't pair it with an iPhone&lt;/li&gt; 
 &lt;li&gt;HomeKit device should be on the same network with working &lt;a href="https://en.wikipedia.org/wiki/Multicast_DNS"&gt;mDNS&lt;/a&gt; between the device and go2rtc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;go2rtc supports importing paired HomeKit devices from &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass"&gt;Home Assistant&lt;/a&gt;. So you can use HomeKit camera with Hass and go2rtc simultaneously. If you are using Hass, I recommend pairing devices with it; it will give you more options.&lt;/p&gt; 
&lt;p&gt;You can pair device with go2rtc on the HomeKit page. If you can't see your devices, reload the page. Also, try rebooting your HomeKit device (power off). If you still can't see it, you have a problem with mDNS.&lt;/p&gt; 
&lt;p&gt;If you see a device but it does not have a pairing button, it is paired to some ecosystem (Apple Home, Home Assistant, HomeBridge etc). You need to delete the device from that ecosystem, and it will be available for pairing. If you cannot unpair the device, you will have to reset it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HomeKit audio uses very non-standard &lt;strong&gt;AAC-ELD&lt;/strong&gt; codec with very non-standard params and specification violations&lt;/li&gt; 
 &lt;li&gt;Audio can't be played in &lt;code&gt;VLC&lt;/code&gt; and probably any other player&lt;/li&gt; 
 &lt;li&gt;Audio should be transcoded for use with MSE, WebRTC, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Recommended settings for using HomeKit Camera with WebRTC, MSE, MP4, RTSP:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;streams:
  aqara_g3:
    - hass:Camera-Hub-G3-AB12
    - ffmpeg:aqara_g3#audio=aac#audio=opus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;RTSP link with "normal" audio for any player: &lt;code&gt;rtsp://192.168.1.123:8554/aqara_g3?video&amp;amp;audio=aac&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This source is in active development!&lt;/strong&gt; Tested only with &lt;a href="https://www.aqara.com/eu/product/camera-hub-g3"&gt;Aqara Camera Hub G3&lt;/a&gt; (both EU and CN versions).&lt;/p&gt; 
&lt;h4&gt;Source: Bubble&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1"&gt;New in v1.6.1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Other names: &lt;a href="http://www.eseecloud.com/"&gt;ESeeCloud&lt;/a&gt;, &lt;a href="http://help.dvr163.com/"&gt;dvr163&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can skip &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;ch&lt;/code&gt; and &lt;code&gt;stream&lt;/code&gt; if they are default&lt;/li&gt; 
 &lt;li&gt;set up separate streams for different channels and streams&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  camera1: bubble://username:password@192.168.1.123:34567/bubble/live?ch=0&amp;amp;stream=0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: DVRIP&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0"&gt;New in v1.2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Other names: DVR-IP, NetSurveillance, Sofia protocol (NETsurveillance ActiveX plugin XMeye SDK).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can skip &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;channel&lt;/code&gt; and &lt;code&gt;subtype&lt;/code&gt; if they are default&lt;/li&gt; 
 &lt;li&gt;set up separate streams for different channels&lt;/li&gt; 
 &lt;li&gt;use &lt;code&gt;subtype=0&lt;/code&gt; for Main stream, and &lt;code&gt;subtype=1&lt;/code&gt; for Extra1 stream&lt;/li&gt; 
 &lt;li&gt;only the TCP protocol is supported&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  only_stream: dvrip://username:password@192.168.1.123:34567?channel=0&amp;amp;subtype=0
  only_tts: dvrip://username:password@192.168.1.123:34567?backchannel=1
  two_way_audio:
    - dvrip://username:password@192.168.1.123:34567?channel=0&amp;amp;subtype=0
    - dvrip://username:password@192.168.1.123:34567?backchannel=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Tapo&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0"&gt;New in v1.2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.tapo.com/"&gt;TP-Link Tapo&lt;/a&gt; proprietary camera protocol with &lt;strong&gt;two way audio&lt;/strong&gt; support.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;stream quality is the same as &lt;a href="https://www.tapo.com/en/faq/34/"&gt;RTSP protocol&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;use the &lt;strong&gt;cloud password&lt;/strong&gt;, this is not the RTSP password! you do not need to add a login!&lt;/li&gt; 
 &lt;li&gt;you can also use UPPERCASE MD5 hash from your cloud password with &lt;code&gt;admin&lt;/code&gt; username&lt;/li&gt; 
 &lt;li&gt;some new camera firmwares require SHA256 instead of MD5&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # cloud password without username
  camera1: tapo://cloud-password@192.168.1.123
  # admin username and UPPERCASE MD5 cloud-password hash
  camera2: tapo://admin:UPPERCASE-MD5@192.168.1.123
  # admin username and UPPERCASE SHA256 cloud-password hash
  camera3: tapo://admin:UPPERCASE-SHA256@192.168.1.123
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;echo -n "cloud password" | md5 | awk '{print toupper($0)}'
echo -n "cloud password" | shasum -a 256 | awk '{print toupper($0)}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Kasa&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0"&gt;New in v1.7.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.kasasmart.com/"&gt;TP-Link Kasa&lt;/a&gt; non-standard protocol &lt;a href="https://medium.com/@hu3vjeen/reverse-engineering-tp-link-kc100-bac4641bf1cd"&gt;more info&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;username&lt;/code&gt; - urlsafe email, &lt;code&gt;alex@gmail.com&lt;/code&gt; -&amp;gt; &lt;code&gt;alex%40gmail.com&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;password&lt;/code&gt; - base64password, &lt;code&gt;secret1&lt;/code&gt; -&amp;gt; &lt;code&gt;c2VjcmV0MQ==&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  kc401: kasa://username:password@192.168.1.123:19443/https/stream/mixed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Tested: KD110, KC200, KC401, KC420WS, EC71.&lt;/p&gt; 
&lt;h4&gt;Source: GoPro&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.3"&gt;New in v1.8.3&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Support streaming from &lt;a href="https://gopro.com/"&gt;GoPro&lt;/a&gt; cameras, connected via USB or Wi-Fi to Linux, Mac, Windows. &lt;a href="https://github.com/AlexxIT/go2rtc/tree/master/internal/gopro"&gt;Read more&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Source: Ivideon&lt;/h4&gt; 
&lt;p&gt;Support public cameras from the service &lt;a href="https://tv.ivideon.com/"&gt;Ivideon&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  quailcam: ivideon:100-tu5dkUPct39cTp9oNEN2B6/0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Hass&lt;/h4&gt; 
&lt;p&gt;Support import camera links from &lt;a href="https://www.home-assistant.io/"&gt;Home Assistant&lt;/a&gt; config files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.home-assistant.io/integrations/generic/"&gt;Generic Camera&lt;/a&gt;, setup via GUI&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.home-assistant.io/integrations/homekit_controller/"&gt;HomeKit Camera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.home-assistant.io/integrations/onvif/"&gt;ONVIF&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/humbertogontijo/homeassistant-roborock"&gt;Roborock&lt;/a&gt; vacuums with camera&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;hass:
  config: "/config"  # skip this setting if you Hass add-on user

streams:
  generic_camera: hass:Camera1  # Settings &amp;gt; Integrations &amp;gt; Integration Name
  aqara_g3: hass:Camera-Hub-G3-AB12
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;WebRTC Cameras&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0"&gt;v1.6.0&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;Any cameras in WebRTC format are supported. But at the moment Home Assistant only supports some &lt;a href="https://www.home-assistant.io/integrations/nest/"&gt;Nest&lt;/a&gt; cameras in this format.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important.&lt;/strong&gt; The Nest API only allows you to get a link to a stream for 5 minutes. Do not use this with Frigate! If the stream expires, Frigate will consume all available RAM on your machine within seconds. It's recommended to use &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-nest"&gt;Nest source&lt;/a&gt; - it supports extending the stream.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  # link to Home Assistant Supervised
  hass-webrtc1: hass://supervisor?entity_id=camera.nest_doorbell
  # link to external Hass with Long-Lived Access Tokens
  hass-webrtc2: hass://192.168.1.123:8123?entity_id=camera.nest_doorbell&amp;amp;token=eyXYZ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;RTSP Cameras&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;By default, the Home Assistant API does not allow you to get a dynamic RTSP link to a camera stream. So more cameras, like &lt;a href="https://www.home-assistant.io/integrations/tuya/"&gt;Tuya&lt;/a&gt;, and possibly others, can also be imported using &lt;a href="https://github.com/felipecrs/hass-expose-camera-stream-source#importing-home-assistant-cameras-to-go2rtc-andor-frigate"&gt;this method&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Source: ISAPI&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This source type supports only backchannel audio for the Hikvision ISAPI protocol. So it should be used as a second source in addition to the RTSP protocol.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  hikvision1:
    - rtsp://admin:password@192.168.1.123:554/Streaming/Channels/101
    - isapi://admin:password@192.168.1.123:80/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Nest&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0"&gt;New in v1.6.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Currently, only WebRTC cameras are supported.&lt;/p&gt; 
&lt;p&gt;For simplicity, it is recommended to connect the Nest/WebRTC camera to the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass"&gt;Home Assistant&lt;/a&gt;. But if you can somehow get the below parameters, Nest/WebRTC source will work without Hass.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  nest-doorbell: nest:?client_id=***&amp;amp;client_secret=***&amp;amp;refresh_token=***&amp;amp;project_id=***&amp;amp;device_id=***
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source: Roborock&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This source type supports Roborock vacuums with cameras. Known working models:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Roborock S6 MaxV - only video (the vacuum has no microphone)&lt;/li&gt; 
 &lt;li&gt;Roborock S7 MaxV - video and two-way audio&lt;/li&gt; 
 &lt;li&gt;Roborock Qrevo MaxV - video and two-way audio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Source supports loading Roborock credentials from Home Assistant &lt;a href="https://github.com/humbertogontijo/homeassistant-roborock"&gt;custom integration&lt;/a&gt; or the &lt;a href="https://www.home-assistant.io/integrations/roborock"&gt;core integration&lt;/a&gt;. Otherwise, you need to log in to your Roborock account (MiHome account is not supported). Go to: go2rtc WebUI &amp;gt; Add webpage. Copy &lt;code&gt;roborock://...&lt;/code&gt; source for your vacuum and paste it to &lt;code&gt;go2rtc.yaml&lt;/code&gt; config.&lt;/p&gt; 
&lt;p&gt;If you have a graphic PIN for your vacuum, add it as a numeric PIN (lines: 123, 456, 789) to the end of the &lt;code&gt;roborock&lt;/code&gt; link.&lt;/p&gt; 
&lt;h4&gt;Source: WebRTC&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This source type supports four connection formats.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;whep&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://datatracker.ietf.org/doc/draft-murillo-whep/"&gt;WebRTC/WHEP&lt;/a&gt; is replaced by &lt;a href="https://datatracker.ietf.org/doc/charter-ietf-wish/02/"&gt;WebRTC/WISH&lt;/a&gt; standard for WebRTC video/audio viewers. But it may already be supported in some third-party software. It is supported in go2rtc.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This format is only supported in go2rtc. Unlike WHEP, it supports asynchronous WebRTC connections and two-way audio.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;openipc&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0"&gt;v1.7.0&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;Support connection to &lt;a href="https://openipc.org/"&gt;OpenIPC&lt;/a&gt; cameras.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;wyze&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1"&gt;v1.6.1&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;Supports connection to &lt;a href="https://www.wyze.com/"&gt;Wyze&lt;/a&gt; cameras, using WebRTC protocol. You can use the &lt;a href="https://github.com/mrlt8/docker-wyze-bridge"&gt;docker-wyze-bridge&lt;/a&gt; project to get connection credentials.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;kinesis&lt;/strong&gt; (&lt;em&gt;from &lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1"&gt;v1.6.1&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;Supports &lt;a href="https://aws.amazon.com/kinesis/video-streams/"&gt;Amazon Kinesis Video Streams&lt;/a&gt;, using WebRTC protocol. You need to specify the signalling WebSocket URL with all credentials in query params, &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;ice_servers&lt;/code&gt; list in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer"&gt;JSON format&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;switchbot&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Support connection to &lt;a href="https://us.switch-bot.com/"&gt;SwitchBot&lt;/a&gt; cameras that are based on Kinesis Video Streams. Specifically, this includes &lt;a href="https://us.switch-bot.com/pages/switchbot-pan-tilt-cam-plus-2k"&gt;Pan/Tilt Cam Plus 2K&lt;/a&gt; and &lt;a href="https://us.switch-bot.com/pages/switchbot-pan-tilt-cam-plus-3k"&gt;Pan/Tilt Cam Plus 3K&lt;/a&gt;. &lt;code&gt;Outdoor Spotlight Cam 1080P&lt;/code&gt;, &lt;code&gt;Outdoor Spotlight Cam 2K&lt;/code&gt;, &lt;code&gt;Pan/Tilt Cam&lt;/code&gt;, &lt;code&gt;Pan/Tilt Cam 2K&lt;/code&gt;, &lt;code&gt;Indoor Cam&lt;/code&gt; are based on Tuya, so this feature is not available.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  webrtc-whep:      webrtc:http://192.168.1.123:1984/api/webrtc?src=camera1
  webrtc-go2rtc:    webrtc:ws://192.168.1.123:1984/api/ws?src=camera1
  webrtc-openipc:   webrtc:ws://192.168.1.123/webrtc_ws#format=openipc#ice_servers=[{"urls":"stun:stun.kinesisvideo.eu-north-1.amazonaws.com:443"}]
  webrtc-wyze:      webrtc:http://192.168.1.123:5000/signaling/camera1?kvs#format=wyze
  webrtc-kinesis:   webrtc:wss://...amazonaws.com/?...#format=kinesis#client_id=...#ice_servers=[{...},{...}]
  webrtc-switchbot: webrtc:wss://...amazonaws.com/?...#format=switchbot#resolution=hd#client_id=...#ice_servers=[{...},{...}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; For &lt;code&gt;kinesis&lt;/code&gt; sources, you can use &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo"&gt;echo&lt;/a&gt; to get connection params using &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt; or any other script language.&lt;/p&gt; 
&lt;h4&gt;Source: WebTorrent&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This source can get a stream from another go2rtc via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent"&gt;WebTorrent&lt;/a&gt; protocol.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  webtorrent1: webtorrent:?share=huofssuxaty00izc&amp;amp;pwd=k3l2j9djeg8v8r7e
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Incoming sources&lt;/h4&gt; 
&lt;p&gt;By default, go2rtc establishes a connection to the source when any client requests it. Go2rtc drops the connection to the source when it has no clients left.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go2rtc also can accepts incoming sources in &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;RTSP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp"&gt;RTMP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;HTTP&lt;/a&gt; and &lt;strong&gt;WebRTC/WHIP&lt;/strong&gt; formats&lt;/li&gt; 
 &lt;li&gt;Go2rtc won't stop such a source if it has no clients&lt;/li&gt; 
 &lt;li&gt;You can push data only to an existing stream (create a stream with empty source in config)&lt;/li&gt; 
 &lt;li&gt;You can push multiple incoming sources to the same stream&lt;/li&gt; 
 &lt;li&gt;You can push data to a non-empty stream, so it will have additional codecs inside&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RTSP with any codec &lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp rtsp://localhost:8554/camera1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP-MJPEG with MJPEG codec &lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg -re -i BigBuckBunny.mp4 -c mjpeg -f mpjpeg http://localhost:1984/api/stream.mjpeg?dst=camera1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;HTTP-FLV with H264, AAC codecs &lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -f flv http://localhost:1984/api/stream.flv?dst=camera1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;MPEG-TS with H264 codec &lt;pre&gt;&lt;code class="language-yaml"&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -f mpegts http://localhost:1984/api/stream.ts?dst=camera1
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Incoming: Browser&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can turn the browser of any PC or mobile into an IP camera with support for video and two-way audio. Or even broadcast your PC screen:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create empty stream in the &lt;code&gt;go2rtc.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Go to go2rtc WebUI&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;links&lt;/code&gt; page for your stream&lt;/li&gt; 
 &lt;li&gt;Select &lt;code&gt;camera+microphone&lt;/code&gt; or &lt;code&gt;display+speaker&lt;/code&gt; option&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;webrtc&lt;/code&gt; local page (your go2rtc &lt;strong&gt;should work over HTTPS!&lt;/strong&gt;) or &lt;code&gt;share link&lt;/code&gt; via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent"&gt;WebTorrent&lt;/a&gt; technology (work over HTTPS by default)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Incoming: WebRTC/WHIP&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can use &lt;strong&gt;OBS Studio&lt;/strong&gt; or any other broadcast software with &lt;a href="https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html"&gt;WHIP&lt;/a&gt; protocol support. This standard has not yet been approved. But you can download OBS Studio &lt;a href="https://github.com/obsproject/obs-studio/actions/runs/3969201209"&gt;dev version&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Settings &amp;gt; Stream &amp;gt; Service: WHIP &amp;gt; &lt;a href="http://192.168.1.123:1984/api/webrtc?dst=camera1"&gt;http://192.168.1.123:1984/api/webrtc?dst=camera1&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Stream to camera&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;go2rtc supports playing audio files (ex. music or &lt;a href="https://www.home-assistant.io/integrations/#text-to-speech"&gt;TTS&lt;/a&gt;) and live streams (ex. radio) on cameras with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio"&gt;two-way audio&lt;/a&gt; support (RTSP/ONVIF cameras, TP-Link Tapo, Hikvision ISAPI, Roborock vacuums, any Browser).&lt;/p&gt; 
&lt;p&gt;API example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;POST http://localhost:1984/api/streams?dst=camera1&amp;amp;src=ffmpeg:http://example.com/song.mp3#audio=pcma#input=file
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can stream: local files, web files, live streams or any format, supported by FFmpeg&lt;/li&gt; 
 &lt;li&gt;you should use &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;ffmpeg source&lt;/a&gt; for transcoding audio to codec, that your camera supports&lt;/li&gt; 
 &lt;li&gt;you can check camera codecs on the go2rtc WebUI info page when the stream is active&lt;/li&gt; 
 &lt;li&gt;some cameras support only low quality &lt;code&gt;PCMA/8000&lt;/code&gt; codec (ex. &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo"&gt;Tapo&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;it is recommended to choose higher quality formats if your camera supports them (ex. &lt;code&gt;PCMA/48000&lt;/code&gt; for some Dahua cameras)&lt;/li&gt; 
 &lt;li&gt;if you play files over &lt;code&gt;http&lt;/code&gt; link, you need to add &lt;code&gt;#input=file&lt;/code&gt; params for transcoding, so the file will be transcoded and played in real time&lt;/li&gt; 
 &lt;li&gt;if you play live streams, you should skip &lt;code&gt;#input&lt;/code&gt; param, because it is already in real time&lt;/li&gt; 
 &lt;li&gt;you can stop active playback by calling the API with the empty &lt;code&gt;src&lt;/code&gt; parameter&lt;/li&gt; 
 &lt;li&gt;you will see one active producer and one active consumer in go2rtc WebUI info page during streaming&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Publish stream&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0"&gt;New in v1.8.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can publish any stream to streaming services (YouTube, Telegram, etc.) via RTMP/RTMPS. Important:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported codecs: H264 for video and AAC for audio&lt;/li&gt; 
 &lt;li&gt;AAC audio is required for YouTube; videos without audio will not work&lt;/li&gt; 
 &lt;li&gt;You don't need to enable &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp"&gt;RTMP module&lt;/a&gt; listening for this task&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use the API:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;POST http://localhost:1984/api/streams?src=camera1&amp;amp;dst=rtmps://...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or config file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;publish:
  # publish stream "video_audio_transcode" to Telegram
  video_audio_transcode:
    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx
  # publish stream "audio_transcode" to Telegram and YouTube
  audio_transcode:
    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx
    - rtmp://xxx.rtmp.youtube.com/live2/xxxx-xxxx-xxxx-xxxx-xxxx

streams:
  video_audio_transcode:
    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=h264#hardware#audio=aac
  audio_transcode:
    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=copy#audio=aac
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Telegram Desktop App&lt;/strong&gt; &amp;gt; Any public or private channel or group (where you admin) &amp;gt; Live stream &amp;gt; Start with... &amp;gt; Start streaming.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt; &amp;gt; Create &amp;gt; Go live &amp;gt; Stream latency: Ultra low-latency &amp;gt; Copy: Stream URL + Stream key.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Module: API&lt;/h3&gt; 
&lt;p&gt;The HTTP API is the main part for interacting with the application. Default address: &lt;code&gt;http://localhost:1984/&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; go2rtc passes requests from localhost and from Unix sockets without HTTP authorisation, even if you have it configured! It is your responsibility to set up secure external access to the API. If not properly configured, an attacker can gain access to your cameras and even your server.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/tree/master/api"&gt;API description&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Module config&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;you can disable HTTP API with &lt;code&gt;listen: ""&lt;/code&gt; and use, for example, only RTSP client/server protocol&lt;/li&gt; 
 &lt;li&gt;you can enable HTTP API only on localhost with &lt;code&gt;listen: "127.0.0.1:1984"&lt;/code&gt; setting&lt;/li&gt; 
 &lt;li&gt;you can change the API &lt;code&gt;base_path&lt;/code&gt; and host go2rtc on your main app webserver suburl&lt;/li&gt; 
 &lt;li&gt;all files from &lt;code&gt;static_dir&lt;/code&gt; hosted on root path: &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;you can use raw TLS cert/key content or path to files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;api:
  listen: ":1984"    # default ":1984", HTTP API port ("" - disabled)
  username: "admin"  # default "", Basic auth for WebUI
  password: "pass"   # default "", Basic auth for WebUI
  base_path: "/rtc"  # default "", API prefix for serving on suburl (/api =&amp;gt; /rtc/api)
  static_dir: "www"  # default "", folder for static files (custom web interface)
  origin: "*"        # default "", allow CORS requests (only * supported)
  tls_listen: ":443" # default "", enable HTTPS server
  tls_cert: |        # default "", PEM-encoded fullchain certificate for HTTPS
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
  tls_key: |         # default "", PEM-encoded private key for HTTPS
    -----BEGIN PRIVATE KEY-----
    ...
    -----END PRIVATE KEY-----
  unix_listen: "/tmp/go2rtc.sock"  # default "", unix socket listener for API
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MJPEG over WebSocket plays better than native MJPEG because Chrome &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=527446"&gt;bug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MP4 over WebSocket was created only for Apple iOS because it doesn't support MSE and native MP4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Module: RTSP&lt;/h3&gt; 
&lt;p&gt;You can get any stream as RTSP-stream: &lt;code&gt;rtsp://192.168.1.123:8554/{stream_name}&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can enable external password protection for your RTSP streams. Password protection is always disabled for localhost calls (ex. FFmpeg or Hass on the same server).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;rtsp:
  listen: ":8554"    # RTSP Server TCP port, default - 8554
  username: "admin"  # optional, default - disabled
  password: "pass"   # optional, default - disabled
  default_query: "video&amp;amp;audio"  # optional, default codecs filters 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default go2rtc provide RTSP-stream with only one first video and only one first audio. You can change it with the &lt;code&gt;default_query&lt;/code&gt; setting:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;default_query: "mp4"&lt;/code&gt; - MP4 compatible codecs (H264, H265, AAC)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;default_query: "video=all&amp;amp;audio=all"&lt;/code&gt; - all tracks from all source (not all players can handle this)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;default_query: "video=h264,h265"&lt;/code&gt; - only one video track (H264 or H265)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;default_query: "video&amp;amp;audio=all"&lt;/code&gt; - only one first any video and all audio as separate tracks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters"&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Module: RTMP&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0"&gt;New in v1.8.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can get any stream as RTMP-stream: &lt;code&gt;rtmp://192.168.1.123/{stream_name}&lt;/code&gt;. Only H264/AAC codecs supported right now.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources"&gt;Incoming stream&lt;/a&gt; in RTMP format tested only with &lt;a href="https://obsproject.com/"&gt;OBS Studio&lt;/a&gt; and a Dahua camera. Different FFmpeg versions have different problems with this format.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;rtmp:
  listen: ":1935"  # by default - disabled!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Module: WebRTC&lt;/h3&gt; 
&lt;p&gt;In most cases, &lt;a href="https://en.wikipedia.org/wiki/WebRTC"&gt;WebRTC&lt;/a&gt; uses a direct peer-to-peer connection from your browser to go2rtc and sends media data via UDP. It &lt;strong&gt;can't pass&lt;/strong&gt; media data through your Nginx or Cloudflare or &lt;a href="https://www.nabucasa.com/"&gt;Nabu Casa&lt;/a&gt; HTTP TCP connection! It can automatically detect your external IP via a public &lt;a href="https://en.wikipedia.org/wiki/STUN"&gt;STUN&lt;/a&gt; server. It can establish an external direct connection via &lt;a href="https://en.wikipedia.org/wiki/UDP_hole_punching"&gt;UDP hole punching&lt;/a&gt; technology even if you do not open your server to the World.&lt;/p&gt; 
&lt;p&gt;But about 10-20% of users may need to configure additional settings for external access if &lt;strong&gt;mobile phone&lt;/strong&gt; or &lt;strong&gt;go2rtc server&lt;/strong&gt; is behind &lt;a href="https://tomchen.github.io/symmetric-nat-test/"&gt;Symmetric NAT&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;by default, WebRTC uses both TCP and UDP on port 8555 for connections&lt;/li&gt; 
 &lt;li&gt;you can use this port for external access&lt;/li&gt; 
 &lt;li&gt;you can change the port in YAML config:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webrtc:
  listen: ":8555"  # address of your local server and port (TCP/UDP)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Static public IP&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;forward the port 8555 on your router (you can use the same 8555 port or any other as external port)&lt;/li&gt; 
 &lt;li&gt;add your external IP address and external port to the YAML config&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webrtc:
  candidates:
    - 216.58.210.174:8555  # if you have a static public IP address
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Dynamic public IP&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;forward the port 8555 on your router (you can use the same 8555 port or any other as the external port)&lt;/li&gt; 
 &lt;li&gt;add &lt;code&gt;stun&lt;/code&gt; word and external port to YAML config 
  &lt;ul&gt; 
   &lt;li&gt;go2rtc automatically detects your external address with STUN server&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webrtc:
  candidates:
    - stun:8555  # if you have a dynamic public IP address
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Private IP&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;setup integration with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok"&gt;ngrok service&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ngrok:
  command: ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Hard tech way 1. Own TCP-tunnel&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you have a personal &lt;a href="https://en.wikipedia.org/wiki/Virtual_private_server"&gt;VPS&lt;/a&gt;, you can create a TCP tunnel and setup in the same way as "Static public IP". But use your VPS IP address in the YAML config.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Hard tech way 2. Using TURN-server&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you have personal &lt;a href="https://en.wikipedia.org/wiki/Virtual_private_server"&gt;VPS&lt;/a&gt;, you can install TURN server (e.g. &lt;a href="https://github.com/coturn/coturn"&gt;coturn&lt;/a&gt;, config &lt;a href="https://github.com/AlexxIT/WebRTC/wiki/Coturn-Example"&gt;example&lt;/a&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webrtc:
  ice_servers:
    - urls: [stun:stun.l.google.com:19302]
    - urls: [turn:123.123.123.123:3478]
      username: your_user
      credential: your_pass
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Module: HomeKit&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0"&gt;New in v1.7.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;HomeKit module can work in two modes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;export any H264 camera to Apple HomeKit&lt;/li&gt; 
 &lt;li&gt;transparent proxy any Apple HomeKit camera (Aqara, Eve, Eufy, etc.) back to Apple HomeKit, so you will have all camera features in Apple Home and also will have RTSP/WebRTC/MP4/etc. from your HomeKit camera&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HomeKit cameras support only H264 video and OPUS audio&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Minimal config&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  dahua1: rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0
homekit:
  dahua1:  # same stream ID from streams list, default PIN - 19550224
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Full config&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  dahua1:
    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0
    - ffmpeg:dahua1#video=h264#hardware  # if your camera doesn't support H264, important for HomeKit
    - ffmpeg:dahua1#audio=opus           # only OPUS audio supported by HomeKit

homekit:
  dahua1:                   # same stream ID from streams list
    pin: 12345678           # custom PIN, default: 19550224
    name: Dahua camera      # custom camera name, default: generated from stream ID
    device_id: dahua1       # custom ID, default: generated from stream ID
    device_private: dahua1  # custom key, default: generated from stream ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Proxy HomeKit camera&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Video stream from HomeKit camera to Apple device (iPhone, AppleTV) will be transmitted directly&lt;/li&gt; 
 &lt;li&gt;Video stream from HomeKit camera to RTSP/WebRTC/MP4/etc. will be transmitted via go2rtc&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  aqara1:
    - homekit://...
    - ffmpeg:aqara1#audio=aac#audio=opus  # optional audio transcoding

homekit:
  aqara1:  # same stream ID from streams list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Module: WebTorrent&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0"&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This module supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Share any local stream via &lt;a href="https://webtorrent.io/"&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; 
 &lt;li&gt;Get any &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-browser"&gt;incoming stream&lt;/a&gt; from PC or mobile via &lt;a href="https://webtorrent.io/"&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; 
 &lt;li&gt;Get any remote &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent"&gt;go2rtc source&lt;/a&gt; via &lt;a href="https://webtorrent.io/"&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Securely and freely. You do not need to open a public access to the go2rtc server. But in some cases (Symmetric NAT), you may need to set up external access to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC module&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To generate a sharing link or incoming link, go to the go2rtc WebUI (stream links page). This link is &lt;strong&gt;temporary&lt;/strong&gt; and will stop working after go2rtc is restarted!&lt;/p&gt; 
&lt;p&gt;You can create permanent external links in the go2rtc config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;webtorrent:
  shares:
    super-secret-share:  # share name, should be unique among all go2rtc users!
      pwd: super-secret-password
      src: rtsp-dahua1   # stream name from streams section
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Link example: &lt;a href="https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&amp;amp;pwd=wznEQqznxW&amp;amp;media=video+audio"&gt;https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&amp;amp;pwd=wznEQqznxW&amp;amp;media=video+audio&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;TODO: article on how it works...&lt;/p&gt; 
&lt;h3&gt;Module: ngrok&lt;/h3&gt; 
&lt;p&gt;With ngrok integration, you can get external access to your streams in situations when you have Internet with a private IP address.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ngrok is pre-installed for &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass add-on&lt;/strong&gt; users&lt;/li&gt; 
 &lt;li&gt;you may need external access for two different things: 
  &lt;ul&gt; 
   &lt;li&gt;WebRTC stream, so you need a tunnel WebRTC TCP port (ex. 8555)&lt;/li&gt; 
   &lt;li&gt;go2rtc web interface, so you need a tunnel API HTTP port (ex. 1984)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ngrok supports authorization for your web interface&lt;/li&gt; 
 &lt;li&gt;ngrok automatically adds HTTPS to your web interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The ngrok free subscription has the following limitations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can reserve a free domain for serving the web interface, but the TCP address you get will always be random and change with each restart of the ngrok agent (not a problem for WebRTC stream)&lt;/li&gt; 
 &lt;li&gt;You can forward multiple ports from a single agent, but you can only run one ngrok agent on the free plan&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;go2rtc will automatically get your external TCP address (if you enable it in ngrok config) and use it with WebRTC connection (if you enable it in webrtc config).&lt;/p&gt; 
&lt;p&gt;You need to manually download the &lt;a href="https://ngrok.com/download"&gt;ngrok agent app&lt;/a&gt; for your OS and register with the &lt;a href="https://ngrok.com/signup"&gt;ngrok service&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tunnel for only WebRTC Stream&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You need to add your &lt;a href="https://dashboard.ngrok.com/get-started/your-authtoken"&gt;ngrok authtoken&lt;/a&gt; and WebRTC TCP port to YAML:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ngrok:
  command: ngrok tcp 8555 --authtoken eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Tunnel for WebRTC and Web interface&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You need to create &lt;code&gt;ngrok.yaml&lt;/code&gt; config file and add it to the go2rtc config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ngrok:
  command: ngrok start --all --config ngrok.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ngrok config example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: "2"
authtoken: eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw
tunnels:
  api:
    addr: 1984  # use the same port as in the go2rtc config
    proto: http
    basic_auth:
      - admin:password  # you can set login/pass for your web interface
  webrtc:
    addr: 8555  # use the same port as in the go2rtc config
    proto: tcp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://ngrok.com/docs/agent/config/"&gt;ngrok agent documentation&lt;/a&gt; for more details on the ngrok configuration file.&lt;/p&gt; 
&lt;h3&gt;Module: Hass&lt;/h3&gt; 
&lt;p&gt;The best and easiest way to use go2rtc inside Home Assistant is to install the custom integration &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration"&gt;WebRTC Camera&lt;/a&gt; and custom Lovelace card.&lt;/p&gt; 
&lt;p&gt;But go2rtc is also compatible and can be used with the &lt;a href="https://www.home-assistant.io/integrations/rtsp_to_webrtc/"&gt;RTSPtoWebRTC&lt;/a&gt; built-in integration.&lt;/p&gt; 
&lt;p&gt;You have several options on how to add a camera to Home Assistant:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Camera RTSP source =&amp;gt; &lt;a href="https://www.home-assistant.io/integrations/generic/"&gt;Generic Camera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Camera &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams"&gt;any source&lt;/a&gt; =&amp;gt; &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;go2rtc config&lt;/a&gt; =&amp;gt; &lt;a href="https://www.home-assistant.io/integrations/generic/"&gt;Generic Camera&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Install any &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start"&gt;go2rtc&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Add your stream to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;go2rtc config&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href="https://my.home-assistant.io/redirect/config_flow_start/?domain=onvif"&gt;ONVIF&lt;/a&gt; &amp;gt; Host: &lt;code&gt;127.0.0.1&lt;/code&gt;, Port: &lt;code&gt;1984&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href="https://my.home-assistant.io/redirect/config_flow_start/?domain=generic"&gt;Generic Camera&lt;/a&gt; &amp;gt; Stream Source URL: &lt;code&gt;rtsp://127.0.0.1:8554/camera1&lt;/code&gt; (change to your stream name, leave everything else as is)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You have several options on how to watch the stream from the cameras in Home Assistant:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; =&amp;gt; &lt;code&gt;Picture Entity Card&lt;/code&gt; =&amp;gt; Technology &lt;code&gt;HLS&lt;/code&gt;, codecs: &lt;code&gt;H264/H265/AAC&lt;/code&gt;, poor latency.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; =&amp;gt; &lt;a href="https://www.home-assistant.io/integrations/rtsp_to_webrtc/"&gt;RTSPtoWebRTC&lt;/a&gt; =&amp;gt; &lt;code&gt;Picture Entity Card&lt;/code&gt; =&amp;gt; Technology &lt;code&gt;WebRTC&lt;/code&gt;, codecs: &lt;code&gt;H264/PCMU/PCMA/OPUS&lt;/code&gt;, best latency. 
  &lt;ul&gt; 
   &lt;li&gt;Install any &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start"&gt;go2rtc&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href="https://my.home-assistant.io/redirect/config_flow_start/?domain=rtsp_to_webrtc"&gt;RTSPtoWebRTC&lt;/a&gt; &amp;gt; &lt;code&gt;http://127.0.0.1:1984/&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;RTSPtoWebRTC &amp;gt; Configure &amp;gt; STUN server: &lt;code&gt;stun.l.google.com:19302&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Use Picture Entity or Picture Glance Lovelace card&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; or &lt;code&gt;Camera URL&lt;/code&gt; =&amp;gt; &lt;a href="https://github.com/AlexxIT/WebRTC"&gt;WebRTC Camera&lt;/a&gt; =&amp;gt; Technology: &lt;code&gt;WebRTC/MSE/MP4/MJPEG&lt;/code&gt;, codecs: &lt;code&gt;H264/H265/AAC/PCMU/PCMA/OPUS&lt;/code&gt;, best latency, best compatibility. 
  &lt;ul&gt; 
   &lt;li&gt;Install and add &lt;a href="https://github.com/AlexxIT/WebRTC"&gt;WebRTC Camera&lt;/a&gt; custom integration&lt;/li&gt; 
   &lt;li&gt;Use WebRTC Camera custom Lovelace card&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can add camera &lt;code&gt;entity_id&lt;/code&gt; to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;go2rtc config&lt;/a&gt; if you need transcoding:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  "camera.hall": ffmpeg:{input}#video=copy#audio=opus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Default Home Assistant lovelace cards don't support two-way audio. You can use 2-way audio from &lt;a href="https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&amp;amp;repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons"&gt;Add-on Web UI&lt;/a&gt;, but you need to use HTTPS to access the microphone. This is a browser restriction and cannot be avoided.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; There is also another nice card with go2rtc support - &lt;a href="https://github.com/dermotduffy/frigate-hass-card"&gt;Frigate Lovelace Card&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Module: MP4&lt;/h3&gt; 
&lt;p&gt;Provides several features:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;MSE stream (fMP4 over WebSocket)&lt;/li&gt; 
 &lt;li&gt;Camera snapshots in MP4 format (single frame), can be sent to &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram"&gt;Telegram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;HTTP progressive streaming (MP4 file stream) - bad format for streaming because of high start delay. This format doesn't work in all Safari browsers, but go2rtc will automatically redirect it to HLS/fMP4 in this case.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;API examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MP4 snapshot: &lt;code&gt;http://192.168.1.123:1984/api/frame.mp4?src=camera1&lt;/code&gt; (H264, H265)&lt;/li&gt; 
 &lt;li&gt;MP4 stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&lt;/code&gt; (H264, H265, AAC)&lt;/li&gt; 
 &lt;li&gt;MP4 file: &lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&lt;/code&gt; (H264, H265*, AAC, OPUS, MP3, PCMA, PCMU, PCM) 
  &lt;ul&gt; 
   &lt;li&gt;You can use &lt;code&gt;mp4&lt;/code&gt;, &lt;code&gt;mp4=flac&lt;/code&gt; and &lt;code&gt;mp4=all&lt;/code&gt; param for codec filters&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;duration&lt;/code&gt; param in seconds (ex. &lt;code&gt;duration=15&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;filename&lt;/code&gt; param (ex. &lt;code&gt;filename=record.mp4&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt; or &lt;code&gt;270&lt;/code&gt; values&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;scale&lt;/code&gt; param with positive integer values (ex. &lt;code&gt;scale=4:3&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters"&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Rotate and scale params don't use transcoding and change video using metadata.&lt;/p&gt; 
&lt;h3&gt;Module: HLS&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/releases/tag/v1.1.0"&gt;New in v1.1.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming"&gt;HLS&lt;/a&gt; is the worst technology for real-time streaming. It can only be useful on devices that do not support more modern technology, like &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;MSE/MP4&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The go2rtc implementation differs from the standards and may not work with all players.&lt;/p&gt; 
&lt;p&gt;API examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HLS/TS stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&lt;/code&gt; (H264)&lt;/li&gt; 
 &lt;li&gt;HLS/fMP4 stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4&lt;/code&gt; (H264, H265, AAC)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read more about &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters"&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Module: MJPEG&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Important.&lt;/strong&gt; For stream in MJPEG format, your source MUST contain the MJPEG codec. If your stream has an MJPEG codec, you can receive &lt;strong&gt;MJPEG stream&lt;/strong&gt; or &lt;strong&gt;JPEG snapshots&lt;/strong&gt; via API.&lt;/p&gt; 
&lt;p&gt;You can receive an MJPEG stream in several ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;some cameras support MJPEG codec inside &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp"&gt;RTSP stream&lt;/a&gt; (ex. second stream for Dahua cameras)&lt;/li&gt; 
 &lt;li&gt;some cameras have an HTTP link with &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;MJPEG stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;some cameras have an HTTP link with snapshots - go2rtc can convert them to &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http"&gt;MJPEG stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;you can convert H264/H265 stream from your camera via &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg integraion&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With this example, your stream will have both H264 and MJPEG codecs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  camera1:
    - rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0
    - ffmpeg:camera1#video=mjpeg
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;API examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MJPEG stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.mjpeg?src=camera1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;JPEG snapshots: &lt;code&gt;http://192.168.1.123:1984/api/frame.jpeg?src=camera1&lt;/code&gt; 
  &lt;ul&gt; 
   &lt;li&gt;You can use &lt;code&gt;width&lt;/code&gt;/&lt;code&gt;w&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt;/&lt;code&gt;h&lt;/code&gt; params&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt;, &lt;code&gt;270&lt;/code&gt; or &lt;code&gt;-90&lt;/code&gt; values&lt;/li&gt; 
   &lt;li&gt;You can use &lt;code&gt;hardware&lt;/code&gt;/&lt;code&gt;hw&lt;/code&gt; param &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration"&gt;read more&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; This module also supports streaming to the server console (terminal) in the &lt;strong&gt;animated ASCII art&lt;/strong&gt; format (&lt;a href="https://github.com/AlexxIT/go2rtc/raw/master/internal/mjpeg/README.md"&gt;read more&lt;/a&gt;):&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=sHj_3h_sX7M"&gt;&lt;img src="https://img.youtube.com/vi/sHj_3h_sX7M/mqdefault.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Module: Log&lt;/h3&gt; 
&lt;p&gt;You can set different log levels for different modules.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;log:
  level: info  # default level
  api: trace
  exec: debug
  ngrok: info
  rtsp: warn
  streams: error
  webrtc: fatal
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;By default, &lt;code&gt;go2rtc&lt;/code&gt; starts the Web interface on port &lt;code&gt;1984&lt;/code&gt; and RTSP on port &lt;code&gt;8554&lt;/code&gt;, as well as uses port &lt;code&gt;8555&lt;/code&gt; for WebRTC connections. The three ports are accessible from your local network. So anyone on your local network can watch video from your cameras without authorization. The same rule applies to the Home Assistant Add-on.&lt;/p&gt; 
&lt;p&gt;This is not a problem if you trust your local network as much as I do. But you can change this behaviour with a &lt;code&gt;go2rtc.yaml&lt;/code&gt; config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;api:
  listen: "127.0.0.1:1984" # localhost

rtsp:
  listen: "127.0.0.1:8554" # localhost

webrtc:
  listen: ":8555" # external TCP/UDP port
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;local access to RTSP is not a problem for &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg&lt;/a&gt; integration, because it runs locally on your server&lt;/li&gt; 
 &lt;li&gt;local access to API is not a problem for the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on"&gt;Home Assistant add-on&lt;/a&gt;, because Hass runs locally on the same server, and the add-on web UI is protected with Hass authorization (&lt;a href="https://www.home-assistant.io/blog/2019/04/15/hassio-ingress/"&gt;Ingress feature&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;external access to WebRTC TCP port is not a problem, because it is used only for transmitting encrypted media data 
  &lt;ul&gt; 
   &lt;li&gt;anyway you need to open this port to your local network and to the Internet for WebRTC to work&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you need web interface protection without the Home Assistant add-on, you need to use a reverse proxy, like &lt;a href="https://nginx.org/"&gt;Nginx&lt;/a&gt;, &lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt;, &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;p&gt;PS. Additionally, WebRTC will try to use the 8555 UDP port to transmit encrypted media. It works without problems on the local network, and sometimes also works for external access, even if you haven't opened this port on your router (&lt;a href="https://en.wikipedia.org/wiki/UDP_hole_punching"&gt;read more&lt;/a&gt;). But for stable external WebRTC access, you need to open the 8555 port on your router for both TCP and UDP.&lt;/p&gt; 
&lt;h2&gt;Codecs filters&lt;/h2&gt; 
&lt;p&gt;go2rtc can automatically detect which codecs your device supports for &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc"&gt;WebRTC&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;MSE&lt;/a&gt; technologies.&lt;/p&gt; 
&lt;p&gt;But it cannot be done for &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp"&gt;RTSP&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4"&gt;HTTP progressive streaming&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls"&gt;HLS&lt;/a&gt; technologies. You can manually add a codec filter when you create a link to a stream. The filters work the same for all three technologies. Filters do not create a new codec. They only select the suitable codec from existing sources. You can add new codecs to the stream using the &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg transcoding&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Without filters:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;RTSP will provide only the first video and only the first audio (any codec)&lt;/li&gt; 
 &lt;li&gt;MP4 will include only compatible codecs (H264, H265, AAC)&lt;/li&gt; 
 &lt;li&gt;HLS will output in the legacy TS format (H264 without audio)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?mp4&lt;/code&gt; - useful for recording as MP4 files (e.g. Hass or Frigate)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video=h264,h265&amp;amp;audio=aac&lt;/code&gt; - full version of the filter above&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video=h264&amp;amp;audio=aac&amp;amp;audio=opus&lt;/code&gt; - H264 video codec and two separate audio tracks&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video&amp;amp;audio=all&lt;/code&gt; - any video codec and all audio codecs as separate tracks&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4&lt;/code&gt; - HLS stream with MP4 compatible codecs (HLS/fMP4)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4=flac&lt;/code&gt; - HLS stream with PCMA/PCMU/PCM audio support (HLS/fMP4), won't work on old devices&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&amp;amp;mp4=flac&lt;/code&gt; - MP4 file with PCMA/PCMU/PCM audio support, won't work on old devices (ex. iOS 12)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&amp;amp;mp4=all&lt;/code&gt; - MP4 file with non-standard audio codecs, won't work on some players&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Codecs madness&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;AVC/H.264&lt;/code&gt; video can be played almost anywhere. But &lt;code&gt;HEVC/H.265&lt;/code&gt; has many limitations in supporting different devices and browsers. It's all about patents and money; you can't do anything about it.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Device&lt;/th&gt; 
   &lt;th&gt;WebRTC&lt;/th&gt; 
   &lt;th&gt;MSE&lt;/th&gt; 
   &lt;th&gt;HTTP*&lt;/th&gt; 
   &lt;th&gt;HLS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;latency&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;best&lt;/td&gt; 
   &lt;td&gt;medium&lt;/td&gt; 
   &lt;td&gt;bad&lt;/td&gt; 
   &lt;td&gt;bad&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;- Desktop Chrome 107+ &lt;br /&gt; - Desktop Edge &lt;br /&gt; - Android Chrome 107+&lt;/td&gt; 
   &lt;td&gt;H264 &lt;br /&gt; PCMU, PCMA &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264, H265* &lt;br /&gt; AAC, FLAC* &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264, H265* &lt;br /&gt; AAC, FLAC* &lt;br /&gt; OPUS, MP3&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Desktop Firefox&lt;/td&gt; 
   &lt;td&gt;H264 &lt;br /&gt; PCMU, PCMA &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264 &lt;br /&gt; AAC, FLAC* &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264 &lt;br /&gt; AAC, FLAC* &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;- Desktop Safari 14+ &lt;br /&gt; - iPad Safari 14+ &lt;br /&gt; - iPhone Safari 17.1+&lt;/td&gt; 
   &lt;td&gt;H264, H265* &lt;br /&gt; PCMU, PCMA &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;H264, H265 &lt;br /&gt; AAC, FLAC*&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;H264, H265 &lt;br /&gt; AAC, FLAC*&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;iPhone Safari 14+&lt;/td&gt; 
   &lt;td&gt;H264, H265* &lt;br /&gt; PCMU, PCMA &lt;br /&gt; OPUS&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;H264, H265 &lt;br /&gt; AAC, FLAC*&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS &lt;a href="https://apps.apple.com/app/home-assistant/id1099568401"&gt;Hass App&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;H264, H265 &lt;br /&gt; AAC, FLAC*&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;code&gt;HTTP*&lt;/code&gt; - HTTP Progressive Streaming, not related to &lt;a href="https://en.wikipedia.org/wiki/Progressive_download"&gt;progressive download&lt;/a&gt;, because the file has no size and no end&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Chrome H265: &lt;a href="https://chromestatus.com/feature/5186511939567616"&gt;read this&lt;/a&gt; and &lt;a href="https://github.com/StaZhu/enable-chromium-hevc-hardware-decoding"&gt;read this&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Edge H265: &lt;a href="https://www.reddit.com/r/MicrosoftEdge/comments/v9iw8k/enable_hevc_support_in_edge/"&gt;read this&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Desktop Safari H265: Menu &amp;gt; Develop &amp;gt; Experimental &amp;gt; WebRTC H265&lt;/li&gt; 
 &lt;li&gt;iOS Safari H265: Settings &amp;gt; Safari &amp;gt; Advanced &amp;gt; Experimental &amp;gt; WebRTC H265&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Audio&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go2rtc support &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#built-in-transcoding"&gt;automatic repack&lt;/a&gt; &lt;code&gt;PCMA/PCMU/PCM&lt;/code&gt; codecs to &lt;code&gt;FLAC&lt;/code&gt; for MSE/MP4/HLS so they will work almost anywhere&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;WebRTC&lt;/strong&gt; audio codecs: &lt;code&gt;PCMU/8000&lt;/code&gt;, &lt;code&gt;PCMA/8000&lt;/code&gt;, &lt;code&gt;OPUS/48000/2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;OPUS&lt;/code&gt; and &lt;code&gt;MP3&lt;/code&gt; inside &lt;strong&gt;MP4&lt;/strong&gt; are part of the standard, but some players do not support them anyway (especially Apple)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Apple devices&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;all Apple devices don't support HTTP progressive streaming&lt;/li&gt; 
 &lt;li&gt;iPhones don't support MSE technology because it competes with the HTTP Live Streaming (HLS) technology, invented by Apple&lt;/li&gt; 
 &lt;li&gt;HLS is the worst technology for &lt;strong&gt;live&lt;/strong&gt; streaming, it still exists only because of iPhones&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Codec names&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;H264 = H.264 = AVC (Advanced Video Coding)&lt;/li&gt; 
 &lt;li&gt;H265 = H.265 = HEVC (High Efficiency Video Coding)&lt;/li&gt; 
 &lt;li&gt;PCMA = G.711 PCM (A-law) = PCM A-law (&lt;code&gt;alaw&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;PCMU = G.711 PCM (µ-law) = PCM mu-law (&lt;code&gt;mulaw&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;PCM = L16 = PCM signed 16-bit big-endian (&lt;code&gt;s16be&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;AAC = MPEG4-GENERIC&lt;/li&gt; 
 &lt;li&gt;MP3 = MPEG-1 Audio Layer III or MPEG-2 Audio Layer III&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Built-in transcoding&lt;/h2&gt; 
&lt;p&gt;There are no plans to embed complex transcoding algorithms inside go2rtc. &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;FFmpeg source&lt;/a&gt; does a great job with this. Including &lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration"&gt;hardware acceleration&lt;/a&gt; support.&lt;/p&gt; 
&lt;p&gt;But go2rtc has some simple algorithms. They are turned on automatically; you do not need to set them up additionally.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PCM for MSE/MP4/HLS&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Go2rtc can pack &lt;code&gt;PCMA&lt;/code&gt;, &lt;code&gt;PCMU&lt;/code&gt; and &lt;code&gt;PCM&lt;/code&gt; codecs into an MP4 container so that they work in all browsers and all built-in players on modern devices. Including Apple QuickTime:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;PCMA/PCMU =&amp;gt; PCM =&amp;gt; FLAC =&amp;gt; MSE/MP4/HLS
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Resample PCMA/PCMU for WebRTC&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;By default WebRTC supports only &lt;code&gt;PCMA/8000&lt;/code&gt; and &lt;code&gt;PCMU/8000&lt;/code&gt;. But go2rtc can automatically resample PCMA and PCMU codecs with a different sample rate. Also, go2rtc can transcode &lt;code&gt;PCM&lt;/code&gt; codec to &lt;code&gt;PCMA/8000&lt;/code&gt;, so WebRTC can play it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;PCM/xxx =&amp;gt; PCMA/8000 =&amp;gt; WebRTC
PCMA/xxx =&amp;gt; PCMA/8000 =&amp;gt; WebRTC
PCMU/xxx =&amp;gt; PCMU/8000 =&amp;gt; WebRTC
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;FLAC codec not supported in an RTSP stream. If you are using Frigate or Hass for recording MP4 files with PCMA/PCMU/PCM audio, you should set up transcoding to the AAC codec.&lt;/li&gt; 
 &lt;li&gt;PCMA and PCMU are VERY low-quality codecs. They support only 256! different sounds. Use them only when you have no other options.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Codecs negotiation&lt;/h2&gt; 
&lt;p&gt;For example, you want to watch RTSP-stream from &lt;a href="https://www.dahuasecurity.com/fr/products/All-Products/Network-Cameras/Wireless-Series/Wi-Fi-Series/4MP/IPC-K42"&gt;Dahua IPC-K42&lt;/a&gt; camera in your Chrome browser.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;this camera supports two-way audio standard &lt;strong&gt;ONVIF Profile T&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;this camera supports codecs &lt;strong&gt;H264, H265&lt;/strong&gt; for send video, and you select &lt;code&gt;H264&lt;/code&gt; in camera settings&lt;/li&gt; 
 &lt;li&gt;this camera supports codecs &lt;strong&gt;AAC, PCMU, PCMA&lt;/strong&gt; for sending audio (from mic), and you select &lt;code&gt;AAC/16000&lt;/code&gt; in camera settings&lt;/li&gt; 
 &lt;li&gt;this camera supports codecs &lt;strong&gt;AAC, PCMU, PCMA&lt;/strong&gt; for receiving audio (to speaker), you don't need to select them&lt;/li&gt; 
 &lt;li&gt;your browser supports codecs &lt;strong&gt;H264, VP8, VP9, AV1&lt;/strong&gt; for receiving video, you don't need to select them&lt;/li&gt; 
 &lt;li&gt;your browser supports codecs &lt;strong&gt;OPUS, PCMU, PCMA&lt;/strong&gt; for sending and receiving audio, you don't need to select them&lt;/li&gt; 
 &lt;li&gt;you can't get camera audio directly, because its audio codecs don't match with your browser codecs 
  &lt;ul&gt; 
   &lt;li&gt;so you decide to use transcoding via FFmpeg and add this setting to the config YAML file&lt;/li&gt; 
   &lt;li&gt;you have chosen &lt;code&gt;OPUS/48000/2&lt;/code&gt; codec, because it is higher quality than the &lt;code&gt;PCMU/8000&lt;/code&gt; or &lt;code&gt;PCMA/8000&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Now you have a stream with two sources - &lt;strong&gt;RTSP and FFmpeg&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;streams:
  dahua:
    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&amp;amp;unicast=true&amp;amp;proto=Onvif
    - ffmpeg:rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0#audio=opus
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; automatically matches codecs for your browser and all your stream sources. This is called &lt;strong&gt;multi-source two-way codec negotiation&lt;/strong&gt;. And this is one of the main features of this app.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/codecs.svg?sanitize=true" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; You can select &lt;code&gt;PCMU&lt;/code&gt; or &lt;code&gt;PCMA&lt;/code&gt; codec in camera settings and not use transcoding at all. Or you can select &lt;code&gt;AAC&lt;/code&gt; codec for main stream and &lt;code&gt;PCMU&lt;/code&gt; codec for second stream and add both RTSP to YAML config, this also will work fine.&lt;/p&gt; 
&lt;h2&gt;Projects using go2rtc&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://frigate.video/"&gt;Frigate&lt;/a&gt; 0.12+ - open-source NVR built around real-time AI object detection&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dermotduffy/frigate-hass-card"&gt;Frigate Lovelace Card&lt;/a&gt; - custom card for Home Assistant&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/OpenIPC/firmware/tree/master/general/package/go2rtc"&gt;OpenIPC&lt;/a&gt; - alternative IP camera firmware from an open community&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gtxaspec/wz_mini_hacks"&gt;wz_mini_hacks&lt;/a&gt; - custom firmware for Wyze cameras&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/oischinger/eufyp2pstream"&gt;EufyP2PStream&lt;/a&gt; - a small project that provides a video/audio stream from Eufy cameras that don't directly support RTSP&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bropat/ioBroker.eusec"&gt;ioBroker.euSec&lt;/a&gt; - &lt;a href="https://www.iobroker.net/"&gt;ioBroker&lt;/a&gt; adapter for controlling Eufy security devices&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Anonym-tsk/MMM-go2rtc"&gt;MMM-go2rtc&lt;/a&gt; - MagicMirror² module&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tsightler/ring-mqtt"&gt;ring-mqtt&lt;/a&gt; - Ring-to-MQTT bridge&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Distributions&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pkgs.alpinelinux.org/packages?name=go2rtc"&gt;Alpine Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://linux-packages.com/aur/package/go2rtc"&gt;Arch User Repository&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/inode64/inode64-overlay/tree/main/media-video/go2rtc"&gt;Gentoo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://search.nixos.org/packages?query=go2rtc"&gt;NixOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tteck.github.io/Proxmox/"&gt;Proxmox Helper Scripts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.myqnap.org/product/go2rtc/"&gt;QNAP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://synocommunity.com/package/go2rtc"&gt;Synology NAS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://unraid.net/community/apps?q=go2rtc"&gt;Unraid&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Camera experience&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.dahuasecurity.com/"&gt;Dahua&lt;/a&gt; - reference implementation streaming protocols, a lot of settings, high stream quality, multiple streaming clients&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.ezviz.com/"&gt;EZVIZ&lt;/a&gt; - awful RTSP protocol implementation, many bugs in SDP&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.hikvision.com/"&gt;Hikvision&lt;/a&gt; - a lot of proprietary streaming technologies&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://reolink.com/"&gt;Reolink&lt;/a&gt; - some models have an awful, unusable RTSP implementation and not the best RTMP alternative (I recommend that you contact Reolink support for new firmware), few settings&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://sonoff.tech/"&gt;Sonoff&lt;/a&gt; - very low stream quality, no settings, not the best protocol implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tp-link.com/"&gt;TP-Link&lt;/a&gt; - few streaming clients, packet loss?&lt;/li&gt; 
 &lt;li&gt;Chinese cheap noname cameras, Wyze Cams, Xiaomi cameras with hacks (usually have &lt;code&gt;/live/ch00_1&lt;/code&gt; in RTSP URL) - awful but usable RTSP protocol implementation, low stream quality, few settings, packet loss?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;TIPS&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Using apps for low RTSP delay&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ffplay -fflags nobuffer -flags low_delay "rtsp://192.168.1.123:8554/camera1"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;VLC &amp;gt; Preferences &amp;gt; Input / Codecs &amp;gt; Default Caching Level: Lowest Latency&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Snapshots to Telegram&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram"&gt;read more&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Q. What's the difference between go2rtc, WebRTC Camera and RTSPtoWebRTC?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; is a new version of the server-side &lt;a href="https://github.com/AlexxIT/WebRTC"&gt;WebRTC Camera&lt;/a&gt; integration, completely rewritten from scratch, with a number of fixes and a huge number of new features. It is compatible with native Home Assistant &lt;a href="https://www.home-assistant.io/integrations/rtsp_to_webrtc/"&gt;RTSPtoWebRTC&lt;/a&gt; integration. So you &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass"&gt;can use&lt;/a&gt; default Lovelace Picture Entity or Picture Glance.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q. Should I use the go2rtc add-on or WebRTC Camera integration?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; is more than just viewing your stream online with WebRTC/MSE/HLS/etc. You can use it all the time for your various tasks. But every time Hass is rebooted, all integrations are also rebooted. So your streams may be interrupted if you use them in additional tasks.&lt;/p&gt; 
&lt;p&gt;Basic users can use the &lt;strong&gt;WebRTC Camera&lt;/strong&gt; integration. Advanced users can use the go2rtc add-on or the Frigate 0.12+ add-on.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q. Which RTSP link should I use inside Hass?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can use a direct link to your cameras there (as you always do). &lt;strong&gt;go2rtc&lt;/strong&gt; supports zero-config feature. You may leave &lt;code&gt;streams&lt;/code&gt; config section empty. And your streams will be created on the fly on first start from Hass. And your cameras will have multiple connections. Some from Hass directly and one from &lt;strong&gt;go2rtc&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Also, you can specify your streams in &lt;strong&gt;go2rtc&lt;/strong&gt; &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration"&gt;config file&lt;/a&gt; and use RTSP links to this add-on with additional features: multi-source &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation"&gt;codecs negotiation&lt;/a&gt; or FFmpeg &lt;a href="https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg"&gt;transcoding&lt;/a&gt; for unsupported codecs. Or use them as a source for Frigate. And your cameras will have one connection from &lt;strong&gt;go2rtc&lt;/strong&gt;. And &lt;strong&gt;go2rtc&lt;/strong&gt; will have multiple connections - some from Hass via RTSP protocol, some from your browser via WebRTC/MSE/HLS protocols.&lt;/p&gt; 
&lt;p&gt;Use any config that you like.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q. What about Lovelace card with support for two-way audio?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;At this moment, I am focused on improving stability and adding new features to &lt;strong&gt;go2rtc&lt;/strong&gt;. Maybe someone could write such a card themselves. It's not difficult, I have &lt;a href="https://github.com/AlexxIT/go2rtc/raw/master/www/webrtc.html"&gt;some sketches&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>alireza0/s-ui</title>
      <link>https://github.com/alireza0/s-ui</link>
      <description>&lt;p&gt;An advanced Web Panel • Built for SagerNet/Sing-Box&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;S-UI&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;An Advanced Web Panel • Built on SagerNet/Sing-Box&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/v/release/alireza0/s-ui.svg?sanitize=true" alt="" /&gt; &lt;img src="https://img.shields.io/docker/pulls/alireza7/s-ui.svg?sanitize=true" alt="S-UI Docker pull" /&gt; &lt;a href="https://goreportcard.com/report/github.com/alireza0/s-ui"&gt;&lt;img src="https://goreportcard.com/badge/github.com/alireza0/s-ui" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://img.shields.io/github/downloads/alireza0/s-ui/total.svg"&gt;&lt;img src="https://img.shields.io/github/downloads/alireza0/s-ui/total.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;&lt;img src="https://img.shields.io/badge/license-GPL%20V3-blue.svg?longCache=true" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This project is only for personal learning and communication, please do not use it for illegal purposes, please do not use it in a production environment&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;If you think this project is helpful to you, you may wish to give a&lt;/strong&gt;&lt;span&gt;🌟&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/alireza7"&gt;&lt;img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="&amp;quot;Buy Me A Coffee&amp;quot;" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;USDT (TRC20): &lt;code&gt;TYTq73Gj6dJ67qe58JVPD9zpjW2cc9XgVz&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Overview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Features&lt;/th&gt; 
   &lt;th align="center"&gt;Enable?&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Protocol&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Language&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Client/Inbound&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Advanced Traffic Routing Interface&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Client &amp;amp; Traffic &amp;amp; System Status&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Subscription Service (link/json + info)&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dark/Light Theme&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;API Interface&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/alireza0/s-ui-frontend/raw/main/media/main.png" alt="&amp;quot;Main&amp;quot;" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/alireza0/s-ui-frontend/raw/main/screenshots.md"&gt;Other UI Screenshots&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;API Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/alireza0/s-ui/wiki/API-Documentation"&gt;API-Documentation Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Default Installation Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Panel Port: 2095&lt;/li&gt; 
 &lt;li&gt;Panel Path: /app/&lt;/li&gt; 
 &lt;li&gt;Subscription Port: 2096&lt;/li&gt; 
 &lt;li&gt;Subscription Path: /sub/&lt;/li&gt; 
 &lt;li&gt;User/Password: admin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install &amp;amp; Upgrade to Latest Version&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/master/install.sh)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install legacy Version&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; To install your desired legacy version, add the version to the end of the installation command. e.g., ver &lt;code&gt;1.0.0&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;VERSION=1.0.0 &amp;amp;&amp;amp; bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/$VERSION/install.sh) $VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Manual installation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Get the latest version of S-UI based on your OS/Architecture from GitHub: &lt;a href="https://github.com/alireza0/s-ui/releases/latest"&gt;https://github.com/alireza0/s-ui/releases/latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt; Get the latest version of &lt;code&gt;s-ui.sh&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh"&gt;https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt; Copy &lt;code&gt;s-ui.sh&lt;/code&gt; to /usr/bin/ and run &lt;code&gt;chmod +x /usr/bin/s-ui&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Extract s-ui tar.gz file to a directory of your choice and navigate to the directory where you extracted the tar.gz file.&lt;/li&gt; 
 &lt;li&gt;Copy *.service files to /etc/systemd/system/ and run &lt;code&gt;systemctl daemon-reload&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Enable autostart and start S-UI service using &lt;code&gt;systemctl enable s-ui --now&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Start sing-box service using &lt;code&gt;systemctl enable sing-box --now&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Uninstall S-UI&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo -i

systemctl disable s-ui  --now

rm -f /etc/systemd/system/sing-box.service
systemctl daemon-reload

rm -fr /usr/local/s-ui
rm /usr/bin/s-ui
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install using Docker&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Usage&lt;/h3&gt; 
 &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Install Docker&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;curl -fsSL https://get.docker.com | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Install S-UI&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Docker compose method&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;mkdir s-ui &amp;amp;&amp;amp; cd s-ui
wget -q https://raw.githubusercontent.com/alireza0/s-ui/master/docker-compose.yml
docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Use docker&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;mkdir s-ui &amp;amp;&amp;amp; cd s-ui
docker run -itd \
    -p 2095:2095 -p 2096:2096 -p 443:443 -p 80:80 \
    -v $PWD/db/:/usr/local/s-ui/db/ \
    -v $PWD/cert/:/root/cert/ \
    --name s-ui --restart=unless-stopped \
    alireza7/s-ui:latest
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Build your own image&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/alireza0/s-ui
git submodule update --init --recursive
docker build -t s-ui .
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Manual run ( contribution )&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Build and run whole project&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;./runSUI.sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Clone the repository&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# clone repository
git clone https://github.com/alireza0/s-ui
# clone submodules
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;- Frontend&lt;/h3&gt; 
 &lt;p&gt;Visit &lt;a href="https://github.com/alireza0/s-ui-frontend"&gt;s-ui-frontend&lt;/a&gt; for frontend code&lt;/p&gt; 
 &lt;h3&gt;- Backend&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Please build frontend once before!&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;To build backend:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# remove old frontend compiled files
rm -fr web/html/*
# apply new frontend compiled files
cp -R frontend/dist/ web/html/
# build
go build -o sui main.go
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To run backend (from root folder of repository):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;./sui
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;English&lt;/li&gt; 
 &lt;li&gt;Farsi&lt;/li&gt; 
 &lt;li&gt;Vietnamese&lt;/li&gt; 
 &lt;li&gt;Chinese (Simplified)&lt;/li&gt; 
 &lt;li&gt;Chinese (Traditional)&lt;/li&gt; 
 &lt;li&gt;Russian&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported protocols: 
  &lt;ul&gt; 
   &lt;li&gt;General: Mixed, SOCKS, HTTP, HTTPS, Direct, Redirect, TProxy&lt;/li&gt; 
   &lt;li&gt;V2Ray based: VLESS, VMess, Trojan, Shadowsocks&lt;/li&gt; 
   &lt;li&gt;Other protocols: ShadowTLS, Hysteria, Hysteria2, Naive, TUIC&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Supports XTLS protocols&lt;/li&gt; 
 &lt;li&gt;An advanced interface for routing traffic, incorporating PROXY Protocol, External, and Transparent Proxy, SSL Certificate, and Port&lt;/li&gt; 
 &lt;li&gt;An advanced interface for inbound and outbound configuration&lt;/li&gt; 
 &lt;li&gt;Clients’ traffic cap and expiration date&lt;/li&gt; 
 &lt;li&gt;Displays online clients, inbounds and outbounds with traffic statistics, and system status monitoring&lt;/li&gt; 
 &lt;li&gt;Subscription service with ability to add external links and subscription&lt;/li&gt; 
 &lt;li&gt;HTTPS for secure access to the web panel and subscription service (self-provided domain + SSL certificate)&lt;/li&gt; 
 &lt;li&gt;Dark/Light theme&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Recommended OS&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ubuntu 22.04+&lt;/li&gt; 
 &lt;li&gt;Debian 12+&lt;/li&gt; 
 &lt;li&gt;CentOS 9+&lt;/li&gt; 
 &lt;li&gt;Fedora 36+&lt;/li&gt; 
 &lt;li&gt;Arch Linux&lt;/li&gt; 
 &lt;li&gt;Parch Linux&lt;/li&gt; 
 &lt;li&gt;Manjaro&lt;/li&gt; 
 &lt;li&gt;Armbian&lt;/li&gt; 
 &lt;li&gt;AlmaLinux 9.5+&lt;/li&gt; 
 &lt;li&gt;Rocky Linux 9.5+&lt;/li&gt; 
 &lt;li&gt;Oracle Linux 8+&lt;/li&gt; 
 &lt;li&gt;OpenSUSE Tubleweed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Environment Variables&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Usage&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Variable&lt;/th&gt; 
    &lt;th align="center"&gt;Type&lt;/th&gt; 
    &lt;th align="left"&gt;Default&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_LOG_LEVEL&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;"debug"&lt;/code&gt; | &lt;code&gt;"info"&lt;/code&gt; | &lt;code&gt;"warn"&lt;/code&gt; | &lt;code&gt;"error"&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"info"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_DEBUG&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_BIN_FOLDER&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"bin"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_DB_FOLDER&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"db"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SINGBOX_API&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;SSL Certificate&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Certbot&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;snap install core; snap refresh core
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot

certbot certonly --standalone --register-unsafely-without-email --non-interactive --agree-tos -d &amp;lt;Your Domain Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Stargazers over Time&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://starchart.cc/alireza0/s-ui"&gt;&lt;img src="https://starchart.cc/alireza0/s-ui.svg?sanitize=true" alt="Stargazers over time" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gotify/server</title>
      <link>https://github.com/gotify/server</link>
      <description>&lt;p&gt;A simple server for sending and receiving messages in real-time per WebSocket. (Includes a sleek web-ui)&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://github.com/gotify/logo"&gt; &lt;img height="275px" src="https://raw.githubusercontent.com/gotify/logo/master/gotify-logo.png" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1 align="center"&gt;gotify/server&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/gotify/server/actions/workflows/build.yml"&gt; &lt;img alt="Build Status" src="https://github.com/gotify/server/actions/workflows/build.yml/badge.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://codecov.io/gh/gotify/server"&gt; &lt;img alt="codecov" src="https://codecov.io/gh/gotify/server/branch/master/graph/badge.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/gotify/server"&gt; &lt;img alt="Go Report Card" src="https://goreportcard.com/badge/github.com/gotify/server" /&gt; &lt;/a&gt; &lt;a href="https://matrix.to/#/#gotify:matrix.org"&gt; &lt;img alt="Matrix" src="https://img.shields.io/matrix/gotify:matrix.org.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/r/gotify/server"&gt; &lt;img alt="Docker Pulls" src="https://img.shields.io/docker/pulls/gotify/server.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/gotify/server/releases/latest"&gt; &lt;img alt="latest release" src="https://img.shields.io/github/release/gotify/server.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Intro&lt;/h2&gt; 
&lt;p&gt;We wanted a simple server for sending and receiving messages (in real time per WebSocket). For this, not many open source projects existed and most of the existing ones were abandoned. Also, a requirement was that it can be self-hosted. We know there are many free and commercial push services out there.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;img alt="Gotify UI screenshot" src="https://raw.githubusercontent.com/gotify/server/master/ui.png" align="right" width="500px" /&gt; 
&lt;ul&gt; 
 &lt;li&gt;send messages via REST-API&lt;/li&gt; 
 &lt;li&gt;receive messages via WebSocket&lt;/li&gt; 
 &lt;li&gt;manage users, clients and applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://gotify.net/docs/plugin"&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Web-UI -&amp;gt; &lt;a href="https://raw.githubusercontent.com/gotify/server/master/ui"&gt;./ui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;CLI for sending messages -&amp;gt; &lt;a href="https://github.com/gotify/cli"&gt;gotify/cli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Android-App -&amp;gt; &lt;a href="https://github.com/gotify/android"&gt;gotify/android&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.github.gotify"&gt;&lt;img src="https://play.google.com/intl/en_gb/badges/images/generic/en_badge_web_generic.png" alt="Get it on Google Play" width="150" /&gt;&lt;/a&gt; &lt;a href="https://f-droid.org/de/packages/com.github.gotify/"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" width="150" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;(Google Play and the Google Play logo are trademarks of Google LLC.)&lt;/sub&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://gotify.net/docs"&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://gotify.net/docs/install"&gt;Install&lt;/a&gt; ᛫ &lt;a href="https://gotify.net/docs/config"&gt;Configuration&lt;/a&gt; ᛫ &lt;a href="https://gotify.net/api-docs"&gt;REST-API&lt;/a&gt; ᛫ &lt;a href="https://gotify.net/docs/dev-setup"&gt;Setup Dev Environment&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome all kinds of contribution, including bug reports, feature requests, documentation improvements, UI refinements, etc. Check out &lt;a href="https://raw.githubusercontent.com/gotify/server/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for guidelines.&lt;/p&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;We use &lt;a href="http://semver.org/"&gt;SemVer&lt;/a&gt; for versioning. For the versions available, see the &lt;a href="https://github.com/gotify/server/tags"&gt;tags on this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/gotify/server/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>external-secrets/external-secrets</title>
      <link>https://github.com/external-secrets/external-secrets</link>
      <description>&lt;p&gt;External Secrets Operator reads information from a third-party service like AWS Secrets Manager and automatically injects the values as Kubernetes Secrets.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/eso-logo-large.png" width="30%" align="center" alt="external-secrets" /&gt; &lt;/p&gt; 
&lt;h2&gt;Project Releases Paused Until Maintainer Team is Rebuilt ⚠️&lt;/h2&gt; 
&lt;p&gt;The current maintainers of External Secrets Operator decided to pause official SemVer releases.&lt;/p&gt; 
&lt;p&gt;Despite strong adoption and a growing user base, the project is currently maintained by a very small core team. This limited capacity makes it unsustainable to continue regular development, community support, and release management.&lt;/p&gt; 
&lt;p&gt;To ensure the long-term health of the project, we are temporarily pausing all official releases - including new features, patches, and published container images - until we have at least five consistent, long-term community maintainers.&lt;/p&gt; 
&lt;h3&gt;What does this mean?&lt;/h3&gt; 
&lt;p&gt;✅ We will continue reviewing and merging community PRs.&lt;/p&gt; 
&lt;p&gt;✅ Contributions will be available on the main branch.&lt;/p&gt; 
&lt;p&gt;❌ We will not provide support via GitHub Discussions, Slack, or issue comments.&lt;/p&gt; 
&lt;p&gt;❌ We will not publish any new releases (major, minor, or patch), including 0.19.x and 1.0.x.&lt;/p&gt; 
&lt;h3&gt;How You Can Help&lt;/h3&gt; 
&lt;p&gt;If your company or team relies on External Secrets Operator, please consider contributing back - especially if you work for an organization with a defined open source strategy.&lt;/p&gt; 
&lt;p&gt;➡️ To get involved, please fill out &lt;a href="https://forms.gle/utsekWEBwrfo1dHs8"&gt;this form&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also check out the &lt;a href="https://github.com/external-secrets/external-secrets/raw/main/GOVERNANCE.md"&gt;Governance document&lt;/a&gt; or join the &lt;a href="https://github.com/external-secrets/external-secrets/issues/5084"&gt;GitHub Issue&lt;/a&gt; for more context.&lt;/p&gt; 
&lt;p&gt;We truly regret having to take this step, but it's necessary to raise awareness among the many organizations relying on External Secrets in production. We need your support to continue moving the project forward.&lt;/p&gt; 
&lt;p&gt;Thank you for your understanding and for being part of this community.&lt;/p&gt; 
&lt;h1&gt;External Secrets&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/external-secrets/external-secrets/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/5947"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/5327/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://securityscorecards.dev/viewer/?uri=github.com/external-secrets/external-secrets"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/external-secrets/external-secrets/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/external-secrets/external-secrets"&gt;&lt;img src="https://goreportcard.com/badge/github.com/external-secrets/external-secrets" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fexternal-secrets%2Fexternal-secrets?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fexternal-secrets%2Fexternal-secrets.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/external-secrets-operator/external-secrets"&gt;&lt;img alt="Artifact Hub" src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/external-secrets" /&gt;&lt;/a&gt; &lt;a href="https://operatorhub.io/operator/external-secrets-operator"&gt;&lt;img alt="operatorhub.io" src="https://img.shields.io/badge/operatorhub.io-external--secrets-brightgreen" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;External Secrets Operator&lt;/strong&gt; is a Kubernetes operator that integrates external secret management systems like &lt;a href="https://aws.amazon.com/secrets-manager/"&gt;AWS Secrets Manager&lt;/a&gt;, &lt;a href="https://www.vaultproject.io/"&gt;HashiCorp Vault&lt;/a&gt;, &lt;a href="https://cloud.google.com/secret-manager"&gt;Google Secrets Manager&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/key-vault/"&gt;Azure Key Vault&lt;/a&gt;, &lt;a href="https://www.ibm.com/cloud/secrets-manager"&gt;IBM Cloud Secrets Manager&lt;/a&gt;, &lt;a href="https://akeyless.io"&gt;Akeyless&lt;/a&gt;, &lt;a href="https://www.conjur.org"&gt;CyberArk Conjur&lt;/a&gt;, &lt;a href="https://www.pulumi.com/product/esc/"&gt;Pulumi ESC&lt;/a&gt; and many more. The operator reads information from external APIs and automatically injects the values into a &lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Kubernetes Secret&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Multiple people and organizations are joining efforts to create a single External Secrets solution based on existing projects. If you are curious about the origins of this project, check out &lt;a href="https://github.com/external-secrets/kubernetes-external-secrets/issues/47"&gt;this issue&lt;/a&gt; and &lt;a href="https://github.com/external-secrets/kubernetes-external-secrets/pull/477"&gt;this PR&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;External Secrets Operator guides and reference documentation is available at &lt;a href="https://external-secrets.io"&gt;external-secrets.io&lt;/a&gt;. Also see our &lt;a href="https://external-secrets.io/main/introduction/stability-support/"&gt;stability and support&lt;/a&gt; policy.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome and encourage contributions to this project! Please read the &lt;a href="https://www.external-secrets.io/main/contributing/devguide/"&gt;Developer&lt;/a&gt; and &lt;a href="https://www.external-secrets.io/main/contributing/process/"&gt;Contribution process&lt;/a&gt; guides. Also make sure to check the &lt;a href="https://www.external-secrets.io/main/contributing/coc/"&gt;Code of Conduct&lt;/a&gt; and adhere to its guidelines.&lt;/p&gt; 
&lt;h3&gt;Sponsoring&lt;/h3&gt; 
&lt;p&gt;Please consider sponsoring this project, there are many ways you can help us with: engineering time, providing infrastructure, donating money, etc. We are open to cooperations, feel free to approach as and we discuss how this could look like. We can keep your contribution anonymized if that's required (depending on the type of contribution), and anonymous donations are possible inside &lt;a href="https://opencollective.com/external-secrets-org"&gt;Opencollective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Bi-weekly Development Meeting&lt;/h2&gt; 
&lt;p&gt;We host our development meeting every odd wednesday on &lt;a href="https://meet.jit.si/eso-community-meeting"&gt;Jitsi&lt;/a&gt;. We run the meeting with alternating times &lt;a href="https://dateful.com/time-zone-converter?t=20:00&amp;amp;tz=Europe/Berlin"&gt;8:00 PM Berlin Time&lt;/a&gt; and &lt;a href="https://dateful.com/time-zone-converter?t=13:00&amp;amp;tz=Europe/Berlin"&gt;1:00 PM Berlin Time&lt;/a&gt;, we'll announce the time in our &lt;a href="https://kubernetes.slack.com/messages/external-secrets"&gt;Kubernetes Slack channel&lt;/a&gt;. Meeting notes are recorded on &lt;a href="https://hackmd.io/GSGEpTVdRZCP6LDxV3FHJA"&gt;hackmd&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Anyone is welcome to join. Feel free to ask questions, request feedback, raise awareness for an issue, or just say hi. ;)&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;Please report vulnerabilities by email to &lt;a href="mailto:cncf-ExternalSecretsOp-maintainers@lists.cncf.io"&gt;cncf-ExternalSecretsOp-maintainers@lists.cncf.io&lt;/a&gt;. Also see our &lt;a href="https://raw.githubusercontent.com/external-secrets/external-secrets/main/SECURITY.md"&gt;SECURITY.md file&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;software bill of materials&lt;/h2&gt; 
&lt;p&gt;We attach SBOM and provenance file to our GitHub release. Also, they are attached to container images.&lt;/p&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;Please create a PR and add your company or project to our &lt;a href="https://raw.githubusercontent.com/external-secrets/external-secrets/main/ADOPTERS.md"&gt;ADOPTERS.md file&lt;/a&gt; if you are using our project!&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;You can find the roadmap in our documentation: &lt;a href="https://external-secrets.io/main/contributing/roadmap/"&gt;https://external-secrets.io/main/contributing/roadmap/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Kicked off by&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/Godaddylogo_2020.png" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsored by&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/ESI_Logo.svg?sanitize=true" alt="External Secrets Inc." /&gt; &lt;img src="https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/CS_logo_1.png" alt="Container Solutions" /&gt; &lt;img src="https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/form3_logo.png" alt="Form 3" /&gt; &lt;img src="https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/pento_logo.png" alt="Pento " /&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fexternal-secrets%2Fexternal-secrets?ref=badge_large"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fexternal-secrets%2Fexternal-secrets.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>slackhq/nebula</title>
      <link>https://github.com/slackhq/nebula</link>
      <description>&lt;p&gt;A scalable overlay networking tool with a focus on performance, simplicity and security&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Nebula?&lt;/h2&gt; 
&lt;p&gt;Nebula is a scalable overlay networking tool with a focus on performance, simplicity and security. It lets you seamlessly connect computers anywhere in the world. Nebula is portable, and runs on Linux, OSX, Windows, iOS, and Android. It can be used to connect a small number of computers, but is also able to connect tens of thousands of computers.&lt;/p&gt; 
&lt;p&gt;Nebula incorporates a number of existing concepts like encryption, security groups, certificates, and tunneling. What makes Nebula different to existing offerings is that it brings all of these ideas together, resulting in a sum that is greater than its individual parts.&lt;/p&gt; 
&lt;p&gt;Further documentation can be found &lt;a href="https://nebula.defined.net/docs/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can read more about Nebula &lt;a href="https://medium.com/p/884110a5579"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also join the NebulaOSS Slack group &lt;a href="https://join.slack.com/t/nebulaoss/shared_invite/zt-39pk4xopc-CUKlGcb5Z39dQ0cK1v7ehA"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;h4&gt;Desktop and Server&lt;/h4&gt; 
&lt;p&gt;Check the &lt;a href="https://github.com/slackhq/nebula/releases/latest"&gt;releases&lt;/a&gt; page for downloads or see the &lt;a href="https://github.com/slackhq/nebula#distribution-packages"&gt;Distribution Packages&lt;/a&gt; section.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux - 64 and 32 bit, arm, and others&lt;/li&gt; 
 &lt;li&gt;Windows&lt;/li&gt; 
 &lt;li&gt;MacOS&lt;/li&gt; 
 &lt;li&gt;Freebsd&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Distribution Packages&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/nebula/"&gt;Arch Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -S nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://src.fedoraproject.org/rpms/nebula"&gt;Fedora Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo dnf install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://packages.debian.org/source/stable/nebula"&gt;Debian Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://pkgs.alpinelinux.org/packages?name=nebula"&gt;Alpine Linux&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;sudo apk add nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/Homebrew/homebrew-core/raw/HEAD/Formula/n/nebula.rb"&gt;macOS Homebrew&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;brew install nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://hub.docker.com/r/nebulaoss/nebula"&gt;Docker&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker pull nebulaoss/nebula
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Mobile&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://apps.apple.com/us/app/mobile-nebula/id1509587936?itsct=apps_box&amp;amp;itscg=30200"&gt;iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=net.defined.mobile_nebula&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1"&gt;Android&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Technical Overview&lt;/h2&gt; 
&lt;p&gt;Nebula is a mutually authenticated peer-to-peer software-defined network based on the &lt;a href="https://noiseprotocol.org/"&gt;Noise Protocol Framework&lt;/a&gt;. Nebula uses certificates to assert a node's IP address, name, and membership within user-defined groups. Nebula's user-defined groups allow for provider agnostic traffic filtering between nodes. Discovery nodes (aka lighthouses) allow individual peers to find each other and optionally use UDP hole punching to establish connections from behind most firewalls or NATs. Users can move data between nodes in any number of cloud service providers, datacenters, and endpoints, without needing to maintain a particular addressing scheme.&lt;/p&gt; 
&lt;p&gt;Nebula uses Elliptic-curve Diffie-Hellman (&lt;code&gt;ECDH&lt;/code&gt;) key exchange and &lt;code&gt;AES-256-GCM&lt;/code&gt; in its default configuration.&lt;/p&gt; 
&lt;p&gt;Nebula was created to provide a mechanism for groups of hosts to communicate securely, even across the internet, while enabling expressive firewall definitions similar in style to cloud security groups.&lt;/p&gt; 
&lt;h2&gt;Getting started (quickly)&lt;/h2&gt; 
&lt;p&gt;To set up a Nebula network, you'll need:&lt;/p&gt; 
&lt;h4&gt;1. The &lt;a href="https://github.com/slackhq/nebula/releases"&gt;Nebula binaries&lt;/a&gt; or &lt;a href="https://github.com/slackhq/nebula#distribution-packages"&gt;Distribution Packages&lt;/a&gt; for your specific platform. Specifically you'll need &lt;code&gt;nebula-cert&lt;/code&gt; and the specific nebula binary for each platform you use.&lt;/h4&gt; 
&lt;h4&gt;2. (Optional, but you really should..) At least one discovery node with a routable IP address, which we call a lighthouse.&lt;/h4&gt; 
&lt;p&gt;Nebula lighthouses allow nodes to find each other, anywhere in the world. A lighthouse is the only node in a Nebula network whose IP should not change. Running a lighthouse requires very few compute resources, and you can easily use the least expensive option from a cloud hosting provider. If you're not sure which provider to use, a number of us have used $6/mo &lt;a href="https://digitalocean.com"&gt;DigitalOcean&lt;/a&gt; droplets as lighthouses.&lt;/p&gt; 
&lt;p&gt;Once you have launched an instance, ensure that Nebula udp traffic (default port udp/4242) can reach it over the internet.&lt;/p&gt; 
&lt;h4&gt;3. A Nebula certificate authority, which will be the root of trust for a particular Nebula network.&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./nebula-cert ca -name "Myorganization, Inc"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create files named &lt;code&gt;ca.key&lt;/code&gt; and &lt;code&gt;ca.cert&lt;/code&gt; in the current directory. The &lt;code&gt;ca.key&lt;/code&gt; file is the most sensitive file you'll create, because it is the key used to sign the certificates for individual nebula nodes/hosts. Please store this file somewhere safe, preferably with strong encryption.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Be aware!&lt;/strong&gt; By default, certificate authorities have a 1-year lifetime before expiration. See &lt;a href="https://nebula.defined.net/docs/guides/rotating-certificate-authority/"&gt;this guide&lt;/a&gt; for details on rotating a CA.&lt;/p&gt; 
&lt;h4&gt;4. Nebula host keys and certificates generated from that certificate authority&lt;/h4&gt; 
&lt;p&gt;This assumes you have four nodes, named lighthouse1, laptop, server1, host3. You can name the nodes any way you'd like, including FQDN. You'll also need to choose IP addresses and the associated subnet. In this example, we are creating a nebula network that will use 192.168.100.x/24 as its network range. This example also demonstrates nebula groups, which can later be used to define traffic rules in a nebula network.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./nebula-cert sign -name "lighthouse1" -ip "192.168.100.1/24"
./nebula-cert sign -name "laptop" -ip "192.168.100.2/24" -groups "laptop,home,ssh"
./nebula-cert sign -name "server1" -ip "192.168.100.9/24" -groups "servers"
./nebula-cert sign -name "host3" -ip "192.168.100.10/24"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, host certificates will expire 1 second before the CA expires. Use the &lt;code&gt;-duration&lt;/code&gt; flag to specify a shorter lifetime.&lt;/p&gt; 
&lt;h4&gt;5. Configuration files for each host&lt;/h4&gt; 
&lt;p&gt;Download a copy of the nebula &lt;a href="https://github.com/slackhq/nebula/raw/master/examples/config.yml"&gt;example configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;On the lighthouse node, you'll need to ensure &lt;code&gt;am_lighthouse: true&lt;/code&gt; is set.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On the individual hosts, ensure the lighthouse is defined properly in the &lt;code&gt;static_host_map&lt;/code&gt; section, and is added to the lighthouse &lt;code&gt;hosts&lt;/code&gt; section.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;6. Copy nebula credentials, configuration, and binaries to each host&lt;/h4&gt; 
&lt;p&gt;For each host, copy the nebula binary to the host, along with &lt;code&gt;config.yml&lt;/code&gt; from step 5, and the files &lt;code&gt;ca.crt&lt;/code&gt;, &lt;code&gt;{host}.crt&lt;/code&gt;, and &lt;code&gt;{host}.key&lt;/code&gt; from step 4.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;DO NOT COPY &lt;code&gt;ca.key&lt;/code&gt; TO INDIVIDUAL NODES.&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;7. Run nebula on each host&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./nebula -config /path/to/config.yml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more detailed instructions, &lt;a href="https://nebula.defined.net/docs/"&gt;find the full documentation here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Building Nebula from source&lt;/h2&gt; 
&lt;p&gt;Make sure you have &lt;a href="https://go.dev/doc/install"&gt;go&lt;/a&gt; installed and clone this repo. Change to the nebula directory.&lt;/p&gt; 
&lt;p&gt;To build nebula for all platforms: &lt;code&gt;make all&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To build nebula for a specific platform (ex, Windows): &lt;code&gt;make bin-windows&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/slackhq/nebula/master/Makefile"&gt;Makefile&lt;/a&gt; for more details on build targets&lt;/p&gt; 
&lt;h2&gt;Curve P256 and BoringCrypto&lt;/h2&gt; 
&lt;p&gt;The default curve used for cryptographic handshakes and signatures is Curve25519. This is the recommended setting for most users. If your deployment has certain compliance requirements, you have the option of creating your CA using &lt;code&gt;nebula-cert ca -curve P256&lt;/code&gt; to use NIST Curve P256. The CA will then sign certificates using ECDSA P256, and any hosts using these certificates will use P256 for ECDH handshakes.&lt;/p&gt; 
&lt;p&gt;In addition, Nebula can be built using the &lt;a href="https://github.com/golang/go/raw/go1.20/src/crypto/internal/boring/README.md"&gt;BoringCrypto GOEXPERIMENT&lt;/a&gt; by running either of the following make targets:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;make bin-boringcrypto
make release-boringcrypto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is not the recommended default deployment, but may be useful based on your compliance requirements.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Nebula was created at Slack Technologies, Inc by Nate Brown and Ryan Huber, with contributions from Oliver Fross, Alan Lam, Wade Simmons, and Lining Wang.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitleaks/gitleaks</title>
      <link>https://github.com/gitleaks/gitleaks</link>
      <description>&lt;p&gt;Find secrets with Gitleaks 🔑&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gitleaks&lt;/h1&gt; 
&lt;pre&gt;&lt;code&gt;┌─○───┐
│ │╲  │
│ │ ○ │
│ ○ ░ │
└─░───┘
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/gitleaks/gitleaks/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/gitleaks/gitleaks/actions/workflows/test.yml/badge.svg?sanitize=true" alt="GitHub Action Test" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/zricethezav/gitleaks"&gt;&lt;img src="https://img.shields.io/docker/pulls/zricethezav/gitleaks.svg?sanitize=true" alt="Docker Hub" /&gt;&lt;/a&gt; &lt;a href="https://gitleaks.io/playground"&gt;&lt;img src="https://img.shields.io/badge/gitleaks%20-playground-blue" alt="Gitleaks Playground" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gitleaks/gitleaks-action"&gt;&lt;img src="https://img.shields.io/badge/protected%20by-gitleaks-blue" alt="Gitleaks Action" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/zricethezav/gitleaks/v8"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/gitleaks/gitleaks/v8?status" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/gitleaks/gitleaks/v8"&gt;&lt;img src="https://goreportcard.com/badge/github.com/gitleaks/gitleaks/v8" alt="GoReportCard" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/gitleaks/gitleaks/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/gitleaks/gitleaks.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Join our Discord! &lt;a href="https://discord.gg/8Hzbrnkr7E"&gt;&lt;img src="https://img.shields.io/discord/1102689410522284044.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Gitleaks is a tool for &lt;strong&gt;detecting&lt;/strong&gt; secrets like passwords, API keys, and tokens in git repos, files, and whatever else you wanna throw at it via &lt;code&gt;stdin&lt;/code&gt;. If you wanna learn more about how the detection engine works check out this blog: &lt;a href="https://lookingatcomputer.substack.com/p/regex-is-almost-all-you-need"&gt;Regex is (almost) all you need&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;➜  ~/code(master) gitleaks git -v

    ○
    │╲
    │ ○
    ○ ░
    ░    gitleaks


Finding:     "export BUNDLE_ENTERPRISE__CONTRIBSYS__COM=cafebabe:deadbeef",
Secret:      cafebabe:deadbeef
RuleID:      sidekiq-secret
Entropy:     2.609850
File:        cmd/generate/config/rules/sidekiq.go
Line:        23
Commit:      cd5226711335c68be1e720b318b7bc3135a30eb2
Author:      John
Email:       john@users.noreply.github.com
Date:        2022-08-03T12:31:40Z
Fingerprint: cd5226711335c68be1e720b318b7bc3135a30eb2:cmd/generate/config/rules/sidekiq.go:sidekiq-secret:23
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Gitleaks can be installed using Homebrew, Docker, or Go. Gitleaks is also available in binary form for many popular platforms and OS types on the &lt;a href="https://github.com/gitleaks/gitleaks/releases"&gt;releases page&lt;/a&gt;. In addition, Gitleaks can be implemented as a pre-commit hook directly in your repo or as a GitHub action using &lt;a href="https://github.com/gitleaks/gitleaks-action"&gt;Gitleaks-Action&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installing&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# MacOS
brew install gitleaks

# Docker (DockerHub)
docker pull zricethezav/gitleaks:latest
docker run -v ${path_to_host_folder_to_scan}:/path zricethezav/gitleaks:latest [COMMAND] [OPTIONS] [SOURCE_PATH]

# Docker (ghcr.io)
docker pull ghcr.io/gitleaks/gitleaks:latest
docker run -v ${path_to_host_folder_to_scan}:/path ghcr.io/gitleaks/gitleaks:latest [COMMAND] [OPTIONS] [SOURCE_PATH]

# From Source (make sure `go` is installed)
git clone https://github.com/gitleaks/gitleaks.git
cd gitleaks
make build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GitHub Action&lt;/h3&gt; 
&lt;p&gt;Check out the official &lt;a href="https://github.com/gitleaks/gitleaks-action"&gt;Gitleaks GitHub Action&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;name: gitleaks
on: [pull_request, push, workflow_dispatch]
jobs:
  scan:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pre-Commit&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install pre-commit from &lt;a href="https://pre-commit.com/#install"&gt;https://pre-commit.com/#install&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file at the root of your repository with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repos:
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.24.2
    hooks:
      - id: gitleaks
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;for a &lt;a href="https://github.com/gitleaks/gitleaks/releases"&gt;native execution of gitleaks&lt;/a&gt; or use the &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/.pre-commit-hooks.yaml"&gt;&lt;code&gt;gitleaks-docker&lt;/code&gt; pre-commit ID&lt;/a&gt; for executing gitleaks using the &lt;a href="https://raw.githubusercontent.com/gitleaks/gitleaks/master/#docker"&gt;official Docker images&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Auto-update the config to the latest repos' versions by executing &lt;code&gt;pre-commit autoupdate&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install with &lt;code&gt;pre-commit install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Now you're all set!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;➜ git commit -m "this commit contains a secret"
Detect hardcoded secrets.................................................Failed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: to disable the gitleaks pre-commit hook you can prepend &lt;code&gt;SKIP=gitleaks&lt;/code&gt; to the commit command and it will skip running gitleaks&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;➜ SKIP=gitleaks git commit -m "skip gitleaks check"
Detect hardcoded secrets................................................Skipped
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Usage:
  gitleaks [command]

Available Commands:
  dir         scan directories or files for secrets
  git         scan git repositories for secrets
  help        Help about any command
  stdin       detect secrets from stdin
  version     display gitleaks version

Flags:
  -b, --baseline-path string          path to baseline with issues that can be ignored
  -c, --config string                 config file path
                                      order of precedence:
                                      1. --config/-c
                                      2. env var GITLEAKS_CONFIG
                                      3. env var GITLEAKS_CONFIG_TOML with the file content
                                      4. (target path)/.gitleaks.toml
                                      If none of the four options are used, then gitleaks will use the default config
      --diagnostics string            enable diagnostics (comma-separated list: cpu,mem,trace). cpu=CPU profiling, mem=memory profiling, trace=execution tracing
      --diagnostics-dir string        directory to store diagnostics output files (defaults to current directory)
      --enable-rule strings           only enable specific rules by id
      --exit-code int                 exit code when leaks have been encountered (default 1)
  -i, --gitleaks-ignore-path string   path to .gitleaksignore file or folder containing one (default ".")
  -h, --help                          help for gitleaks
      --ignore-gitleaks-allow         ignore gitleaks:allow comments
  -l, --log-level string              log level (trace, debug, info, warn, error, fatal) (default "info")
      --max-decode-depth int          allow recursive decoding up to this depth (default "0", no decoding is done)
      --max-archive-depth int         allow scanning into nested archives up to this depth (default "0", no archive traversal is done)
      --max-target-megabytes int      files larger than this will be skipped
      --no-banner                     suppress banner
      --no-color                      turn off color for verbose output
      --redact uint[=100]             redact secrets from logs and stdout. To redact only parts of the secret just apply a percent value from 0..100. For example --redact=20 (default 100%)
  -f, --report-format string          output format (json, csv, junit, sarif, template)
  -r, --report-path string            report file
      --report-template string        template file used to generate the report (implies --report-format=template)
  -v, --verbose                       show verbose output from scan
      --version                       version for gitleaks

Use "gitleaks [command] --help" for more information about a command.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commands&lt;/h3&gt; 
&lt;p&gt;⚠️ v8.19.0 introduced a change that deprecated &lt;code&gt;detect&lt;/code&gt; and &lt;code&gt;protect&lt;/code&gt;. Those commands are still available but are hidden in the &lt;code&gt;--help&lt;/code&gt; menu. Take a look at this &lt;a href="https://gist.github.com/zricethezav/b325bb93ebf41b9c0b0507acf12810d2"&gt;gist&lt;/a&gt; for easy command translations. If you find v8.19.0 broke an existing command (&lt;code&gt;detect&lt;/code&gt;/&lt;code&gt;protect&lt;/code&gt;), please open an issue.&lt;/p&gt; 
&lt;p&gt;There are three scanning modes: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt;, and &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Git&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;git&lt;/code&gt; command lets you scan local git repos. Under the hood, gitleaks uses the &lt;code&gt;git log -p&lt;/code&gt; command to scan patches. You can configure the behavior of &lt;code&gt;git log -p&lt;/code&gt; with the &lt;code&gt;log-opts&lt;/code&gt; option. For example, if you wanted to run gitleaks on a range of commits you could use the following command: &lt;code&gt;gitleaks git -v --log-opts="--all commitA..commitB" path_to_repo&lt;/code&gt;. See the &lt;a href="https://git-scm.com/docs/git-log"&gt;git log&lt;/a&gt; documentation for more information. If there is no target specified as a positional argument, then gitleaks will attempt to scan the current working directory as a git repo.&lt;/p&gt; 
&lt;h4&gt;Dir&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;dir&lt;/code&gt; (aliases include &lt;code&gt;files&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt;) command lets you scan directories and files. Example: &lt;code&gt;gitleaks dir -v path_to_directory_or_file&lt;/code&gt;. If there is no target specified as a positional argument, then gitleaks will scan the current working directory.&lt;/p&gt; 
&lt;h4&gt;Stdin&lt;/h4&gt; 
&lt;p&gt;You can also stream data to gitleaks with the &lt;code&gt;stdin&lt;/code&gt; command. Example: &lt;code&gt;cat some_file | gitleaks -v stdin&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Creating a baseline&lt;/h3&gt; 
&lt;p&gt;When scanning large repositories or repositories with a long history, it can be convenient to use a baseline. When using a baseline, gitleaks will ignore any old findings that are present in the baseline. A baseline can be any gitleaks report. To create a gitleaks report, run gitleaks with the &lt;code&gt;--report-path&lt;/code&gt; parameter.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gitleaks git --report-path gitleaks-report.json # This will save the report in a file called gitleaks-report.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once as baseline is created it can be applied when running the detect command again:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;gitleaks git --baseline-path gitleaks-report.json --report-path findings.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After running the detect command with the --baseline-path parameter, report output (findings.json) will only contain new issues.&lt;/p&gt; 
&lt;h2&gt;Pre-Commit hook&lt;/h2&gt; 
&lt;p&gt;You can run Gitleaks as a pre-commit hook by copying the example &lt;code&gt;pre-commit.py&lt;/code&gt; script into your &lt;code&gt;.git/hooks/&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Load Configuration&lt;/h2&gt; 
&lt;p&gt;The order of precedence is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;--config/-c&lt;/code&gt; option: &lt;pre&gt;&lt;code class="language-bash"&gt;gitleaks git --config /home/dev/customgitleaks.toml .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Environment variable &lt;code&gt;GITLEAKS_CONFIG&lt;/code&gt; with the file path: &lt;pre&gt;&lt;code class="language-bash"&gt;export GITLEAKS_CONFIG="/home/dev/customgitleaks.toml"
gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Environment variable &lt;code&gt;GITLEAKS_CONFIG_TOML&lt;/code&gt; with the file content: &lt;pre&gt;&lt;code class="language-bash"&gt;export GITLEAKS_CONFIG_TOML=`cat customgitleaks.toml`
gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;A &lt;code&gt;.gitleaks.toml&lt;/code&gt; file within the target path: &lt;pre&gt;&lt;code class="language-bash"&gt;gitleaks git .
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;If none of the four options are used, then gitleaks will use the default config.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Gitleaks offers a configuration format you can follow to write your own secret detection rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# Title for the gitleaks configuration file.
title = "Custom Gitleaks configuration"

# You have basically two options for your custom configuration:
#
# 1. define your own configuration, default rules do not apply
#
#    use e.g., the default configuration as starting point:
#    https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml
#
# 2. extend a configuration, the rules are overwritten or extended
#
#    When you extend a configuration the extended rules take precedence over the
#    default rules. I.e., if there are duplicate rules in both the extended
#    configuration and the default configuration the extended rules or
#    attributes of them will override the default rules.
#    Another thing to know with extending configurations is you can chain
#    together multiple configuration files to a depth of 2. Allowlist arrays are
#    appended and can contain duplicates.

# useDefault and path can NOT be used at the same time. Choose one.
[extend]
# useDefault will extend the default gitleaks config built in to the binary
# the latest version is located at:
# https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml
useDefault = true
# or you can provide a path to a configuration to extend from.
# The path is relative to where gitleaks was invoked,
# not the location of the base config.
# path = "common_config.toml"
# If there are any rules you don't want to inherit, they can be specified here.
disabledRules = [ "generic-api-key"]

# An array of tables that contain information that define instructions
# on how to detect secrets
[[rules]]
# Unique identifier for this rule
id = "awesome-rule-1"

# Short human-readable description of the rule.
description = "awesome rule 1"

# Golang regular expression used to detect secrets. Note Golang's regex engine
# does not support lookaheads.
regex = '''one-go-style-regex-for-this-rule'''

# Int used to extract secret from regex match and used as the group that will have
# its entropy checked if `entropy` is set.
secretGroup = 3

# Float representing the minimum shannon entropy a regex group must have to be considered a secret.
entropy = 3.5

# Golang regular expression used to match paths. This can be used as a standalone rule or it can be used
# in conjunction with a valid `regex` entry.
path = '''a-file-path-regex'''

# Keywords are used for pre-regex check filtering. Rules that contain
# keywords will perform a quick string compare check to make sure the
# keyword(s) are in the content being scanned. Ideally these values should
# either be part of the identiifer or unique strings specific to the rule's regex
# (introduced in v8.6.0)
keywords = [
  "auth",
  "password",
  "token",
]

# Array of strings used for metadata and reporting purposes.
tags = ["tag","another tag"]

    # ⚠️ In v8.21.0 `[rules.allowlist]` was replaced with `[[rules.allowlists]]`.
    # This change was backwards-compatible: instances of `[rules.allowlist]` still  work.
    #
    # You can define multiple allowlists for a rule to reduce false positives.
    # A finding will be ignored if _ANY_ `[[rules.allowlists]]` matches.
    [[rules.allowlists]]
    description = "ignore commit A"
    # When multiple criteria are defined the default condition is "OR".
    # e.g., this can match on |commits| OR |paths| OR |stopwords|.
    condition = "OR"
    commits = [ "commit-A", "commit-B"]
    paths = [
      '''go\.mod''',
      '''go\.sum'''
    ]
    # note: stopwords targets the extracted secret, not the entire regex match
    # like 'regexes' does. (stopwords introduced in 8.8.0)
    stopwords = [
      '''client''',
      '''endpoint''',
    ]

    [[rules.allowlists]]
    # The "AND" condition can be used to make sure all criteria match.
    # e.g., this matches if |regexes| AND |paths| are satisfied.
    condition = "AND"
    # note: |regexes| defaults to check the _Secret_ in the finding.
    # Acceptable values for |regexTarget| are "secret" (default), "match", and "line".
    regexTarget = "match"
    regexes = [ '''(?i)parseur[il]''' ]
    paths = [ '''package-lock\.json''' ]

# You can extend a particular rule from the default config. e.g., gitlab-pat
# if you have defined a custom token prefix on your GitLab instance
[[rules]]
id = "gitlab-pat"
# all the other attributes from the default rule are inherited

    [[rules.allowlists]]
    regexTarget = "line"
    regexes = [ '''MY-glpat-''' ]


# ⚠️ In v8.25.0 `[allowlist]` was replaced with `[[allowlists]]`.
#
# Global allowlists have a higher order of precedence than rule-specific allowlists.
# If a commit listed in the `commits` field below is encountered then that commit will be skipped and no
# secrets will be detected for said commit. The same logic applies for regexes and paths.
[[allowlists]]
description = "global allow list"
commits = [ "commit-A", "commit-B", "commit-C"]
paths = [
  '''gitleaks\.toml''',
  '''(.*?)(jpg|gif|doc)'''
]
# note: (global) regexTarget defaults to check the _Secret_ in the finding.
# Acceptable values for regexTarget are "match" and "line"
regexTarget = "match"
regexes = [
  '''219-09-9999''',
  '''078-05-1120''',
  '''(9[0-9]{2}|666)-\d{2}-\d{4}''',
]
# note: stopwords targets the extracted secret, not the entire regex match
# like 'regexes' does. (stopwords introduced in 8.8.0)
stopwords = [
  '''client''',
  '''endpoint''',
]

# ⚠️ In v8.25.0, `[[allowlists]]` have a new field called |targetRules|.
#
# Common allowlists can be defined once and assigned to multiple rules using |targetRules|.
# This will only run on the specified rules, not globally.
[[allowlists]]
targetRules = ["awesome-rule-1", "awesome-rule-2"]
description = "Our test assets trigger false-positives in a couple rules."
paths = ['''tests/expected/._\.json$''']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to the default &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/config/gitleaks.toml"&gt;gitleaks config&lt;/a&gt; for examples or follow the &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; if you would like to contribute to the default configuration. Additionally, you can check out &lt;a href="https://blog.gitleaks.io/stop-leaking-secrets-configuration-2-3-aeed293b1fbf"&gt;this gitleaks blog post&lt;/a&gt; which covers advanced configuration setups.&lt;/p&gt; 
&lt;h3&gt;Additional Configuration&lt;/h3&gt; 
&lt;h4&gt;Composite Rules (Multi-part or &lt;code&gt;required&lt;/code&gt; Rules)&lt;/h4&gt; 
&lt;p&gt;In v8.28.0 Gitleaks introduced composite rules, which are made up of a single "primary" rule and one or more auxiliary or &lt;code&gt;required&lt;/code&gt; rules. To create a composite rule, add a &lt;code&gt;[[rules.required]]&lt;/code&gt; table to the primary rule specifying an &lt;code&gt;id&lt;/code&gt; and optionally &lt;code&gt;withinLines&lt;/code&gt; and/or &lt;code&gt;withinColumns&lt;/code&gt; proximity constraints. A fragment is a chunk of content that Gitleaks processes at once (typically a file, part of a file, or git diff), and proximity matching instructs the primary rule to only report a finding if the auxiliary &lt;code&gt;required&lt;/code&gt; rules also find matches within the specified area of the fragment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Proximity matching:&lt;/strong&gt; Using the &lt;code&gt;withinLines&lt;/code&gt; and &lt;code&gt;withinColumns&lt;/code&gt; fields instructs the primary rule to only report a finding if the auxiliary &lt;code&gt;required&lt;/code&gt; rules also find matches within the specified proximity. You can set:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;withinLines: N&lt;/code&gt;&lt;/strong&gt; - required findings must be within N lines (vertically)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;withinColumns: N&lt;/code&gt;&lt;/strong&gt; - required findings must be within N characters (horizontally)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Both&lt;/strong&gt; - creates a rectangular search area (both constraints must be satisfied)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Neither&lt;/strong&gt; - fragment-level matching (required findings can be anywhere in the same fragment)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here are diagrams illustrating each proximity behavior:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;p = primary captured secret
a = auxiliary (required) captured secret
fragment = section of data gitleaks is looking at


    *Fragment-level proximity*               
    Any required finding in the fragment
          ┌────────┐                       
   ┌──────┤fragment├─────┐                 
   │      └──────┬─┤     │ ┌───────┐       
   │             │a│◀────┼─│✓ MATCH│       
   │          ┌─┐└─┘     │ └───────┘       
   │┌─┐       │p│        │                 
   ││a│    ┌─┐└─┘        │ ┌───────┐       
   │└─┘    │a│◀──────────┼─│✓ MATCH│       
   └─▲─────┴─┴───────────┘ └───────┘       
     │    ┌───────┐                        
     └────│✓ MATCH│                        
          └───────┘                        
                                           
                                           
   *Column bounded proximity*
   `withinColumns = 3`                    
          ┌────────┐                       
   ┌────┬─┤fragment├─┬───┐                 
   │      └──────┬─┤     │ ┌───────────┐   
   │    │        │a│◀┼───┼─│+1C ✓ MATCH│   
   │          ┌─┐└─┘     │ └───────────┘   
   │┌─┐ │     │p│    │   │                 
┌──▶│a│  ┌─┐  └─┘        │ ┌───────────┐   
│  │└─┘ ││a│◀────────┼───┼─│-2C ✓ MATCH│   
│  │       ┘             │ └───────────┘   
│  └── -3C ───0C─── +3C ─┘                 
│  ┌─────────┐                             
│  │ -4C ✗ NO│                             
└──│  MATCH  │                             
   └─────────┘                             
                                           
                                           
   *Line bounded proximity*
   `withinLines = 4`                      
         ┌────────┐                        
   ┌─────┤fragment├─────┐                  
  +4L─ ─ ┴────────┘─ ─ ─│                  
   │                    │                  
   │              ┌─┐   │ ┌────────────┐   
   │         ┌─┐  │a│◀──┼─│+1L ✓ MATCH │   
   0L  ┌─┐   │p│  └─┘   │ ├────────────┤   
   │   │a│◀──┴─┴────────┼─│-1L ✓ MATCH │   
   │   └─┘              │ └────────────┘   
   │                    │ ┌─────────┐      
  -4L─ ─ ─ ─ ─ ─ ─ ─┌─┐─│ │-5L ✗ NO │      
   │                │a│◀┼─│  MATCH  │      
   └────────────────┴─┴─┘ └─────────┘      
                                           
                                           
   *Line and column bounded proximity*
   `withinLines = 4`                      
   `withinColumns = 3`                    
         ┌────────┐                        
   ┌─────┤fragment├─────┐                  
  +4L   ┌└────────┴ ┐   │                  
   │            ┌─┐     │ ┌───────────────┐
   │    │       │a│◀┼───┼─│+2L/+1C ✓ MATCH│
   │         ┌─┐└─┘     │ └───────────────┘
   0L   │    │p│    │   │                  
   │         └─┘        │                  
   │    │           │   │ ┌────────────┐   
  -4L    ─ ─ ─ ─ ─ ─┌─┐ │ │-5L/+3C ✗ NO│   
   │                │a│◀┼─│   MATCH    │   
   └───-3C────0L───+3C┴─┘ └────────────┘   
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt;
 &lt;summary&gt;Some final quick thoughts on composite rules.&lt;/summary&gt;This is an experimental feature! It's subject to change so don't go sellin' a new B2B SaaS feature built ontop of this feature. Scan type (git vs dir) based context is interesting. I'm monitoring the situation. Composite rules might not be super useful for git scans because gitleaks only looks at additions in the git history. It could be useful to scan non-additions in git history for `required` rules. Oh, right this is a readme, I'll shut up now.
&lt;/details&gt; 
&lt;h4&gt;gitleaks:allow&lt;/h4&gt; 
&lt;p&gt;If you are knowingly committing a test secret that gitleaks will catch you can add a &lt;code&gt;gitleaks:allow&lt;/code&gt; comment to that line which will instruct gitleaks to ignore that secret. Ex:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;class CustomClass:
    discord_client_secret = '8dyfuiRyq=vVc3RRr_edRk-fK__JItpZ'  #gitleaks:allow

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;.gitleaksignore&lt;/h4&gt; 
&lt;p&gt;You can ignore specific findings by creating a &lt;code&gt;.gitleaksignore&lt;/code&gt; file at the root of your repo. In release v8.10.0 Gitleaks added a &lt;code&gt;Fingerprint&lt;/code&gt; value to the Gitleaks report. Each leak, or finding, has a Fingerprint that uniquely identifies a secret. Add this fingerprint to the &lt;code&gt;.gitleaksignore&lt;/code&gt; file to ignore that specific secret. See Gitleaks' &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/.gitleaksignore"&gt;.gitleaksignore&lt;/a&gt; for an example. Note: this feature is experimental and is subject to change in the future.&lt;/p&gt; 
&lt;h4&gt;Decoding&lt;/h4&gt; 
&lt;p&gt;Sometimes secrets are encoded in a way that can make them difficult to find with just regex. Now you can tell gitleaks to automatically find and decode encoded text. The flag &lt;code&gt;--max-decode-depth&lt;/code&gt; enables this feature (the default value "0" means the feature is disabled by default).&lt;/p&gt; 
&lt;p&gt;Recursive decoding is supported since decoded text can also contain encoded text. The flag &lt;code&gt;--max-decode-depth&lt;/code&gt; sets the recursion limit. Recursion stops when there are no new segments of encoded text to decode, so setting a really high max depth doesn't mean it will make that many passes. It will only make as many as it needs to decode the text. Overall, decoding only minimally increases scan times.&lt;/p&gt; 
&lt;p&gt;The findings for encoded text differ from normal findings in the following ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The location points the bounds of the encoded text 
  &lt;ul&gt; 
   &lt;li&gt;If the rule matches outside the encoded text, the bounds are adjusted to include that as well&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The match and secret contain the decoded value&lt;/li&gt; 
 &lt;li&gt;Two tags are added &lt;code&gt;decoded:&amp;lt;encoding&amp;gt;&lt;/code&gt; and &lt;code&gt;decode-depth:&amp;lt;depth&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Currently supported encodings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;percent&lt;/strong&gt; - Any printable ASCII percent encoded values&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;hex&lt;/strong&gt; - Any printable ASCII hex encoded values &amp;gt;= 32 characters&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;base64&lt;/strong&gt; - Any printable ASCII base64 encoded values &amp;gt;= 16 characters&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Archive Scanning&lt;/h4&gt; 
&lt;p&gt;Sometimes secrets are packaged within archive files like zip files or tarballs, making them difficult to discover. Now you can tell gitleaks to automatically extract and scan the contents of archives. The flag &lt;code&gt;--max-archive-depth&lt;/code&gt; enables this feature for both &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; scan types. The default value of "0" means this feature is disabled by default.&lt;/p&gt; 
&lt;p&gt;Recursive scanning is supported since archives can also contain other archives. The &lt;code&gt;--max-archive-depth&lt;/code&gt; flag sets the recursion limit. Recursion stops when there are no new archives to extract, so setting a very high max depth just sets the potential to go that deep. It will only go as deep as it needs to.&lt;/p&gt; 
&lt;p&gt;The findings for secrets located within an archive will include the path to the file inside the archive. Inner paths are separated with &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Example finding (shortened for brevity):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Finding:     DB_PASSWORD=8ae31cacf141669ddfb5da
...
File:        testdata/archives/nested.tar.gz!archives/files.tar!files/.env.prod
Line:        4
Commit:      6e6ee6596d337bb656496425fb98644eb62b4a82
...
Fingerprint: 6e6ee6596d337bb656496425fb98644eb62b4a82:testdata/archives/nested.tar.gz!archives/files.tar!files/.env.prod:generic-api-key:4
Link:        https://github.com/leaktk/gitleaks/blob/6e6ee6596d337bb656496425fb98644eb62b4a82/testdata/archives/nested.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This means a secret was detected on line 4 of &lt;code&gt;files/.env.prod.&lt;/code&gt; which is in &lt;code&gt;archives/files.tar&lt;/code&gt; which is in &lt;code&gt;testdata/archives/nested.tar.gz&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Currently supported formats:&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://github.com/mholt/archives?tab=readme-ov-file#supported-compression-formats"&gt;compression&lt;/a&gt; and &lt;a href="https://github.com/mholt/archives?tab=readme-ov-file#supported-archive-formats"&gt;archive&lt;/a&gt; formats supported by mholt's &lt;a href="https://github.com/mholt/archives"&gt;archives package&lt;/a&gt; are supported.&lt;/p&gt; 
&lt;h4&gt;Reporting&lt;/h4&gt; 
&lt;p&gt;Gitleaks has built-in support for several report formats: &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/json_simple.json"&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/csv_simple.csv?plain=1"&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/junit_simple.xml"&gt;&lt;code&gt;junit&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/sarif_simple.sarif"&gt;&lt;code&gt;sarif&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If none of these formats fit your need, you can create your own report format with a &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-templates-in-go#step-4-writing-a-template"&gt;Go &lt;code&gt;text/template&lt;/code&gt; .tmpl file&lt;/a&gt; and the &lt;code&gt;--report-template&lt;/code&gt; flag. The template can use &lt;a href="https://masterminds.github.io/sprig/"&gt;extended functionality from the &lt;code&gt;Masterminds/sprig&lt;/code&gt; template library&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, the following template provides a custom JSON output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-gotemplate"&gt;# jsonextra.tmpl
[{{ $lastFinding := (sub (len . ) 1) }}
{{- range $i, $finding := . }}{{with $finding}}
    {
        "Description": {{ quote .Description }},
        "StartLine": {{ .StartLine }},
        "EndLine": {{ .EndLine }},
        "StartColumn": {{ .StartColumn }},
        "EndColumn": {{ .EndColumn }},
        "Line": {{ quote .Line }},
        "Match": {{ quote .Match }},
        "Secret": {{ quote .Secret }},
        "File": "{{ .File }}",
        "SymlinkFile": {{ quote .SymlinkFile }},
        "Commit": {{ quote .Commit }},
        "Entropy": {{ .Entropy }},
        "Author": {{ quote .Author }},
        "Email": {{ quote .Email }},
        "Date": {{ quote .Date }},
        "Message": {{ quote .Message }},
        "Tags": [{{ $lastTag := (sub (len .Tags ) 1) }}{{ range $j, $tag := .Tags }}{{ quote . }}{{ if ne $j $lastTag }},{{ end }}{{ end }}],
        "RuleID": {{ quote .RuleID }},
        "Fingerprint": {{ quote .Fingerprint }}
    }{{ if ne $i $lastFinding }},{{ end }}
{{- end}}{{ end }}
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Usage:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ gitleaks dir ~/leaky-repo/ --report-path "report.json" --report-format template --report-template testdata/report/jsonextra.tmpl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sponsorships&lt;/h2&gt; 
&lt;p align="left"&gt; &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks"&gt;coderabbit.ai&lt;/a&gt;&lt;/h3&gt;
&lt;a href="https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks"&gt; &lt;/a&gt;
&lt;a href="https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks"&gt; &lt;img alt="CodeRabbit.ai Sponsorship" src="https://github.com/gitleaks/gitleaks/assets/15034943/76c30a85-887b-47ca-9956-17a8e55c6c41" width="200" /&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;Exit Codes&lt;/h2&gt; 
&lt;p&gt;You can always set the exit code when leaks are encountered with the --exit-code flag. Default exit codes below:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;0 - no leaks present
1 - leaks or error encountered
126 - unknown flag
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>charmbracelet/bubbletea</title>
      <link>https://github.com/charmbracelet/bubbletea</link>
      <description>&lt;p&gt;A powerful little TUI framework 🏗&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bubble Tea&lt;/h1&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png" width="308" /&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://stuff.charm.sh/bubbletea/bubble-tea-v2-dark.png" width="312" /&gt; 
  &lt;img src="https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png" width="308" /&gt; 
 &lt;/picture&gt; &lt;br /&gt; &lt;a href="https://github.com/charmbracelet/bubbletea/releases"&gt;&lt;img src="https://img.shields.io/github/release/charmbracelet/bubbletea.svg?sanitize=true" alt="Latest Release" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;&lt;img src="https://godoc.org/github.com/charmbracelet/bubbletea?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://github.com/charmbracelet/bubbletea/actions"&gt;&lt;img src="https://github.com/charmbracelet/bubbletea/actions/workflows/build.yml/badge.svg?branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;The fun, functional and stateful way to build terminal apps. A Go framework based on &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;. Bubble Tea is well-suited for simple and complex terminal applications, either inline, full-window, or a mix of both.&lt;/p&gt; 
&lt;p&gt; &lt;img src="https://stuff.charm.sh/bubbletea/bubbletea-example.gif" width="100%" alt="Bubble Tea Example" /&gt; &lt;/p&gt; 
&lt;p&gt;Bubble Tea is in use in production and includes a number of features and performance optimizations we’ve added along the way. Among those is a framerate-based renderer, mouse support, focus reporting and more.&lt;/p&gt; 
&lt;p&gt;To get started, see the tutorial below, the &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/examples"&gt;examples&lt;/a&gt;, the &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;docs&lt;/a&gt;, the &lt;a href="https://charm.sh/yt"&gt;video tutorials&lt;/a&gt; and some common &lt;a href="https://raw.githubusercontent.com/charmbracelet/bubbletea/main/#libraries-we-use-with-bubble-tea"&gt;resources&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;By the way&lt;/h2&gt; 
&lt;p&gt;Be sure to check out &lt;a href="https://github.com/charmbracelet/bubbles"&gt;Bubbles&lt;/a&gt;, a library of common UI components for Bubble Tea.&lt;/p&gt; 
&lt;p&gt; &lt;a href="https://github.com/charmbracelet/bubbles"&gt;&lt;img src="https://stuff.charm.sh/bubbles/bubbles-badge.png" width="174" alt="Bubbles Badge" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/charmbracelet/bubbles"&gt;&lt;img src="https://stuff.charm.sh/bubbles-examples/textinput.gif" width="400" alt="Text Input Example from Bubbles" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Tutorial&lt;/h2&gt; 
&lt;p&gt;Bubble Tea is based on the functional design paradigms of &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;, which happens to work nicely with Go. It's a delightful way to build applications.&lt;/p&gt; 
&lt;p&gt;This tutorial assumes you have a working knowledge of Go.&lt;/p&gt; 
&lt;p&gt;By the way, the non-annotated source code for this program is available &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/tutorials/basics"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Enough! Let's get to it.&lt;/h3&gt; 
&lt;p&gt;For this tutorial, we're making a shopping list.&lt;/p&gt; 
&lt;p&gt;To start we'll define our package and import some libraries. Our only external import will be the Bubble Tea library, which we'll call &lt;code&gt;tea&lt;/code&gt; for short.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

// These imports will be used later on the tutorial. If you save the file
// now, Go might complain they are unused, but that's fine.
// You may also need to run `go mod tidy` to download bubbletea and its
// dependencies.
import (
    "fmt"
    "os"

    tea "github.com/charmbracelet/bubbletea"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Bubble Tea programs are comprised of a &lt;strong&gt;model&lt;/strong&gt; that describes the application state and three simple methods on that model:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Init&lt;/strong&gt;, a function that returns an initial command for the application to run.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;, a function that handles incoming events and updates the model accordingly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;, a function that renders the UI based on the data in the model.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The Model&lt;/h3&gt; 
&lt;p&gt;So let's start by defining our model which will store our application's state. It can be any type, but a &lt;code&gt;struct&lt;/code&gt; usually makes the most sense.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type model struct {
    choices  []string           // items on the to-do list
    cursor   int                // which to-do list item our cursor is pointing at
    selected map[int]struct{}   // which to-do items are selected
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Initialization&lt;/h3&gt; 
&lt;p&gt;Next, we’ll define our application’s initial state. In this case, we’re defining a function to return our initial model, however, we could just as easily define the initial model as a variable elsewhere, too.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func initialModel() model {
	return model{
		// Our to-do list is a grocery list
		choices:  []string{"Buy carrots", "Buy celery", "Buy kohlrabi"},

		// A map which indicates which choices are selected. We're using
		// the  map like a mathematical set. The keys refer to the indexes
		// of the `choices` slice, above.
		selected: make(map[int]struct{}),
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we define the &lt;code&gt;Init&lt;/code&gt; method. &lt;code&gt;Init&lt;/code&gt; can return a &lt;code&gt;Cmd&lt;/code&gt; that could perform some initial I/O. For now, we don't need to do any I/O, so for the command, we'll just return &lt;code&gt;nil&lt;/code&gt;, which translates to "no command."&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) Init() tea.Cmd {
    // Just return `nil`, which means "no I/O right now, please."
    return nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The Update Method&lt;/h3&gt; 
&lt;p&gt;Next up is the update method. The update function is called when ”things happen.” Its job is to look at what has happened and return an updated model in response. It can also return a &lt;code&gt;Cmd&lt;/code&gt; to make more things happen, but for now don't worry about that part.&lt;/p&gt; 
&lt;p&gt;In our case, when a user presses the down arrow, &lt;code&gt;Update&lt;/code&gt;’s job is to notice that the down arrow was pressed and move the cursor accordingly (or not).&lt;/p&gt; 
&lt;p&gt;The “something happened” comes in the form of a &lt;code&gt;Msg&lt;/code&gt;, which can be any type. Messages are the result of some I/O that took place, such as a keypress, timer tick, or a response from a server.&lt;/p&gt; 
&lt;p&gt;We usually figure out which type of &lt;code&gt;Msg&lt;/code&gt; we received with a type switch, but you could also use a type assertion.&lt;/p&gt; 
&lt;p&gt;For now, we'll just deal with &lt;code&gt;tea.KeyMsg&lt;/code&gt; messages, which are automatically sent to the update function when keys are pressed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
    switch msg := msg.(type) {

    // Is it a key press?
    case tea.KeyMsg:

        // Cool, what was the actual key pressed?
        switch msg.String() {

        // These keys should exit the program.
        case "ctrl+c", "q":
            return m, tea.Quit

        // The "up" and "k" keys move the cursor up
        case "up", "k":
            if m.cursor &amp;gt; 0 {
                m.cursor--
            }

        // The "down" and "j" keys move the cursor down
        case "down", "j":
            if m.cursor &amp;lt; len(m.choices)-1 {
                m.cursor++
            }

        // The "enter" key and the spacebar (a literal space) toggle
        // the selected state for the item that the cursor is pointing at.
        case "enter", " ":
            _, ok := m.selected[m.cursor]
            if ok {
                delete(m.selected, m.cursor)
            } else {
                m.selected[m.cursor] = struct{}{}
            }
        }
    }

    // Return the updated model to the Bubble Tea runtime for processing.
    // Note that we're not returning a command.
    return m, nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may have noticed that &lt;kbd&gt;ctrl+c&lt;/kbd&gt; and &lt;kbd&gt;q&lt;/kbd&gt; above return a &lt;code&gt;tea.Quit&lt;/code&gt; command with the model. That’s a special command which instructs the Bubble Tea runtime to quit, exiting the program.&lt;/p&gt; 
&lt;h3&gt;The View Method&lt;/h3&gt; 
&lt;p&gt;At last, it’s time to render our UI. Of all the methods, the view is the simplest. We look at the model in its current state and use it to return a &lt;code&gt;string&lt;/code&gt;. That string is our UI!&lt;/p&gt; 
&lt;p&gt;Because the view describes the entire UI of your application, you don’t have to worry about redrawing logic and stuff like that. Bubble Tea takes care of it for you.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) View() string {
    // The header
    s := "What should we buy at the market?\n\n"

    // Iterate over our choices
    for i, choice := range m.choices {

        // Is the cursor pointing at this choice?
        cursor := " " // no cursor
        if m.cursor == i {
            cursor = "&amp;gt;" // cursor!
        }

        // Is this choice selected?
        checked := " " // not selected
        if _, ok := m.selected[i]; ok {
            checked = "x" // selected!
        }

        // Render the row
        s += fmt.Sprintf("%s [%s] %s\n", cursor, checked, choice)
    }

    // The footer
    s += "\nPress q to quit.\n"

    // Send the UI for rendering
    return s
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;All Together Now&lt;/h3&gt; 
&lt;p&gt;The last step is to simply run our program. We pass our initial model to &lt;code&gt;tea.NewProgram&lt;/code&gt; and let it rip:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func main() {
    p := tea.NewProgram(initialModel())
    if _, err := p.Run(); err != nil {
        fmt.Printf("Alas, there's been an error: %v", err)
        os.Exit(1)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;What’s Next?&lt;/h2&gt; 
&lt;p&gt;This tutorial covers the basics of building an interactive terminal UI, but in the real world you'll also need to perform I/O. To learn about that have a look at the &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/tutorials/commands/"&gt;Command Tutorial&lt;/a&gt;. It's pretty simple.&lt;/p&gt; 
&lt;p&gt;There are also several &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/examples"&gt;Bubble Tea examples&lt;/a&gt; available and, of course, there are &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;Go Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;h3&gt;Debugging with Delve&lt;/h3&gt; 
&lt;p&gt;Since Bubble Tea apps assume control of stdin and stdout, you’ll need to run delve in headless mode and then connect to it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start the debugger
$ dlv debug --headless --api-version=2 --listen=127.0.0.1:43000 .
API server listening at: 127.0.0.1:43000

# Connect to it from another terminal
$ dlv connect 127.0.0.1:43000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not explicitly supply the &lt;code&gt;--listen&lt;/code&gt; flag, the port used will vary per run, so passing this in makes the debugger easier to use from a script or your IDE of choice.&lt;/p&gt; 
&lt;p&gt;Additionally, we pass in &lt;code&gt;--api-version=2&lt;/code&gt; because delve defaults to version 1 for backwards compatibility reasons. However, delve recommends using version 2 for all new development and some clients may no longer work with version 1. For more information, see the &lt;a href="https://github.com/go-delve/delve/tree/master/Documentation/api"&gt;Delve documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Logging Stuff&lt;/h3&gt; 
&lt;p&gt;You can’t really log to stdout with Bubble Tea because your TUI is busy occupying that! You can, however, log to a file by including something like the following prior to starting your Bubble Tea program:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;if len(os.Getenv("DEBUG")) &amp;gt; 0 {
	f, err := tea.LogToFile("debug.log", "debug")
	if err != nil {
		fmt.Println("fatal:", err)
		os.Exit(1)
	}
	defer f.Close()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see what’s being logged in real time, run &lt;code&gt;tail -f debug.log&lt;/code&gt; while you run your program in another window.&lt;/p&gt; 
&lt;h2&gt;Libraries we use with Bubble Tea&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/bubbles"&gt;Bubbles&lt;/a&gt;: Common Bubble Tea components such as text inputs, viewports, spinners and so on&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/lipgloss"&gt;Lip Gloss&lt;/a&gt;: Style, format and layout tools for terminal applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/harmonica"&gt;Harmonica&lt;/a&gt;: A spring animation library for smooth, natural motion&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lrstanley/bubblezone"&gt;BubbleZone&lt;/a&gt;: Easy mouse event tracking for Bubble Tea components&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NimbleMarkets/ntcharts"&gt;ntcharts&lt;/a&gt;: A terminal charting library built for Bubble Tea and &lt;a href="https://github.com/charmbracelet/lipgloss"&gt;Lip Gloss&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Bubble Tea in the Wild&lt;/h2&gt; 
&lt;p&gt;There are over &lt;a href="https://github.com/charmbracelet/bubbletea/network/dependents"&gt;10,000 applications&lt;/a&gt; built with Bubble Tea! Here are a handful of ’em.&lt;/p&gt; 
&lt;h3&gt;Staff favourites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/twpayne/chezmoi"&gt;chezmoi&lt;/a&gt;: securely manage your dotfiles across multiple machines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bensadeh/circumflex"&gt;circumflex&lt;/a&gt;: read Hacker News in the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.github.com/dlvhdr/gh-dash"&gt;gh-dash&lt;/a&gt;: a GitHub CLI extension for PRs and issues&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Broderick-Westrope/tetrigo"&gt;Tetrigo&lt;/a&gt;: Tetris in the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emprcl/signls"&gt;Signls&lt;/a&gt;: a generative midi sequencer designed for composition and live performance&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yorukot/superfile"&gt;Superfile&lt;/a&gt;: a super file manager&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;In Industry&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Microsoft Azure –&amp;nbsp;&lt;a href="https://github.com/Azure/aztfy"&gt;Aztify&lt;/a&gt;: bring Microsoft Azure resources under Terraform&lt;/li&gt; 
 &lt;li&gt;Daytona –&amp;nbsp;&lt;a href="https://github.com/daytonaio/daytona"&gt;Daytona&lt;/a&gt;: open source dev environment manager&lt;/li&gt; 
 &lt;li&gt;Cockroach Labs – &lt;a href="https://github.com/cockroachdb/cockroach"&gt;CockroachDB&lt;/a&gt;: a cloud-native, high-availability distributed SQL database&lt;/li&gt; 
 &lt;li&gt;Truffle Security Co. –&amp;nbsp;&lt;a href="https://github.com/trufflesecurity/trufflehog"&gt;Trufflehog&lt;/a&gt;: find leaked credentials&lt;/li&gt; 
 &lt;li&gt;NVIDIA –&amp;nbsp;&lt;a href="https://github.com/NVIDIA/container-canary"&gt;container-canary&lt;/a&gt;: a container validator&lt;/li&gt; 
 &lt;li&gt;AWS –&amp;nbsp;&lt;a href="https://github.com/awslabs/eks-node-viewer"&gt;eks-node-viewer&lt;/a&gt;: a tool for visualizing dynamic node usage within an EKS cluster&lt;/li&gt; 
 &lt;li&gt;MinIO –&amp;nbsp;&lt;a href="https://github.com/minio/mc"&gt;mc&lt;/a&gt;: the official &lt;a href="https://min.io"&gt;MinIO&lt;/a&gt; client&lt;/li&gt; 
 &lt;li&gt;Ubuntu –&amp;nbsp;&lt;a href="https://github.com/ubuntu/authd"&gt;Authd&lt;/a&gt;: an authentication daemon for cloud-based identity providers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Charm stuff&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/glow"&gt;Glow&lt;/a&gt;: a markdown reader, browser, and online markdown stash&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/huh"&gt;Huh?&lt;/a&gt;: an interactive prompt and form toolkit&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/mods"&gt;Mods&lt;/a&gt;: AI on the CLI, built for pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/wishlist"&gt;Wishlist&lt;/a&gt;: an SSH directory (and bastion!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;There’s so much more where that came from&lt;/h3&gt; 
&lt;p&gt;For more applications built with Bubble Tea see &lt;a href="https://github.com/charm-and-friends/charm-in-the-wild"&gt;Charm &amp;amp; Friends&lt;/a&gt;. Is there something cool you made with Bubble Tea you want to share? &lt;a href="https://github.com/charm-and-friends/charm-in-the-wild"&gt;PRs&lt;/a&gt; are welcome!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/charmbracelet/bubbletea/contribute"&gt;contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;We’d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/charmcli"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mastodon.social/@charmcli"&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://charm.sh/chat"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Bubble Tea is based on the paradigms of &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt; by Evan Czaplicki et alia and the excellent &lt;a href="https://github.com/tj/go-tea"&gt;go-tea&lt;/a&gt; by TJ Holowaychuk. It’s inspired by the many great &lt;a href="https://de.wikipedia.org/wiki/Zeichenorientierte_Benutzerschnittstelle"&gt;&lt;em&gt;Zeichenorientierte Benutzerschnittstellen&lt;/em&gt;&lt;/a&gt; of days past.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/charmbracelet/bubbletea/raw/main/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Part of &lt;a href="https://charm.sh"&gt;Charm&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://charm.sh/"&gt;&lt;img alt="The Charm logo" src="https://stuff.charm.sh/charm-banner-next.jpg" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Charm热爱开源 • Charm loves open source • نحنُ نحب المصادر المفتوحة&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jesseduffield/lazygit</title>
      <link>https://github.com/jesseduffield/lazygit</link>
      <description>&lt;p&gt;simple terminal UI for git commands&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lazygit_20231023"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/warp.png" width="330" alt="Warp" /&gt; 
  &lt;/div&gt; &lt;b&gt;Warp, the intelligent terminal&lt;/b&gt; &lt;br /&gt; &lt;b&gt;Available for MacOS and Linux&lt;/b&gt; &lt;br /&gt; 
  &lt;div&gt; 
   &lt;sup&gt;Visit&amp;nbsp;warp.dev&amp;nbsp;to learn more.&lt;/sup&gt; 
  &lt;/div&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;a href="https://www.subble.com"&gt; 
  &lt;div&gt; 
   &lt;img src="https://subble-marketing-portal-media-storage.s3.amazonaws.com/images/subble-black-name-logo.svg?sanitize=true" width="230" alt="Subble" /&gt; 
  &lt;/div&gt; &lt;b&gt;I (Jesse) co-founded Subble to save your company time and money by helping you manage its software subscriptions. Check it out!&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;img width="536" src="https://user-images.githubusercontent.com/8456633/174470852-339b5011-5800-4bb9-a628-ff230aa8cd4e.png" /&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;A simple terminal UI for git commands &lt;br /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jesseduffield/lazygit/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/jesseduffield/lazygit/total" alt="GitHub Releases" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/jesseduffield/lazygit"&gt;&lt;img src="https://goreportcard.com/badge/github.com/jesseduffield/lazygit" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_grade"&gt;&lt;img src="https://app.codacy.com/project/badge/Grade/f46416b715d74622895657935fcada21" alt="Codacy Badge" /&gt;&lt;/a&gt; &lt;a href="https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_coverage"&gt;&lt;img src="https://app.codacy.com/project/badge/Coverage/f46416b715d74622895657935fcada21" alt="Codacy Badge" /&gt;&lt;/a&gt; &lt;a href="https://golangci-lint.run/"&gt;&lt;img src="https://img.shields.io/badge/linted%20by-golangci--lint-brightgreen" alt="golangci-lint" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jesseduffield/lazygit/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/tag/jesseduffield/lazygit?color=blue" alt="GitHub tag" /&gt;&lt;/a&gt; &lt;a href="https://formulae.brew.sh/formula/lazygit"&gt;&lt;img src="https://img.shields.io/homebrew/v/lazygit?color=blue" alt="homebrew" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/commit_and_push-compressed.gif" alt="commit_and_push" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p align="center"&gt; Maintenance of this project is made possible by all the &lt;a href="https://github.com/jesseduffield/lazygit/graphs/contributors"&gt;contributors&lt;/a&gt; and &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsors&lt;/a&gt;. If you'd like to sponsor this project and have your avatar or company logo appear below &lt;a href="https://github.com/sponsors/jesseduffield"&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;!-- sponsors --&gt;&lt;a href="https://github.com/intabulas"&gt;&lt;img src="https://github.com/intabulas.png" width="60px" alt="Mark Lussier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/peppy"&gt;&lt;img src="https://github.com/peppy.png" width="60px" alt="Dean Herbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/piot"&gt;&lt;img src="https://github.com/piot.png" width="60px" alt="Peter Bjorklund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/rgwood"&gt;&lt;img src="https://github.com/rgwood.png" width="60px" alt="Reilly Wood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/oliverguenther"&gt;&lt;img src="https://github.com/oliverguenther.png" width="60px" alt="Oliver Günther" /&gt;&lt;/a&gt;&lt;a href="https://github.com/pawanjay176"&gt;&lt;img src="https://github.com/pawanjay176.png" width="60px" alt="Pawan Dhananjay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bdach"&gt;&lt;img src="https://github.com/bdach.png" width="60px" alt="Bartłomiej Dach" /&gt;&lt;/a&gt;&lt;a href="https://github.com/carstengehling"&gt;&lt;img src="https://github.com/carstengehling.png" width="60px" alt="Carsten Gehling" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ceuk"&gt;&lt;img src="https://github.com/ceuk.png" width="60px" alt="CEUK" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Xetera"&gt;&lt;img src="https://github.com/Xetera.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/HoldenLucas"&gt;&lt;img src="https://github.com/HoldenLucas.png" width="60px" alt="Holden Lucas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nartc"&gt;&lt;img src="https://github.com/nartc.png" width="60px" alt="Chau Tran" /&gt;&lt;/a&gt;&lt;a href="https://github.com/matejcik"&gt;&lt;img src="https://github.com/matejcik.png" width="60px" alt="matejcik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lucatume"&gt;&lt;img src="https://github.com/lucatume.png" width="60px" alt="theAverageDev (Luca Tumedei)" /&gt;&lt;/a&gt;&lt;a href="https://github.com/IvanZuy"&gt;&lt;img src="https://github.com/IvanZuy.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nicholascloud"&gt;&lt;img src="https://github.com/nicholascloud.png" width="60px" alt="Nicholas Cloud" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ava1ar"&gt;&lt;img src="https://github.com/ava1ar.png" width="60px" alt="Aliaksandr Stelmachonak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/minidfx"&gt;&lt;img src="https://github.com/minidfx.png" width="60px" alt="Burgy Benjamin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/JoeKlemmer"&gt;&lt;img src="https://github.com/JoeKlemmer.png" width="60px" alt="Joe Klemmer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tobi"&gt;&lt;img src="https://github.com/tobi.png" width="60px" alt="Tobias Lütke" /&gt;&lt;/a&gt;&lt;a href="https://github.com/benbfortis"&gt;&lt;img src="https://github.com/benbfortis.png" width="60px" alt="Ben Beaumont" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jakewarren"&gt;&lt;img src="https://github.com/jakewarren.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tgpholly"&gt;&lt;img src="https://github.com/tgpholly.png" width="60px" alt="Holly" /&gt;&lt;/a&gt;&lt;a href="https://github.com/socketbox"&gt;&lt;img src="https://github.com/socketbox.png" width="60px" alt="Casey Boettcher" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bitprophet"&gt;&lt;img src="https://github.com/bitprophet.png" width="60px" alt="Jeff Forcier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tayleighr"&gt;&lt;img src="https://github.com/tayleighr.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Novakov"&gt;&lt;img src="https://github.com/Novakov.png" width="60px" alt="Maciej T. Nowak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nekhaevskiy"&gt;&lt;img src="https://github.com/nekhaevskiy.png" width="60px" alt="Yury" /&gt;&lt;/a&gt;&lt;a href="https://github.com/reivilibre"&gt;&lt;img src="https://github.com/reivilibre.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andreaskurth"&gt;&lt;img src="https://github.com/andreaskurth.png" width="60px" alt="Andreas Kurth" /&gt;&lt;/a&gt;&lt;a href="https://github.com/BSteffaniak"&gt;&lt;img src="https://github.com/BSteffaniak.png" width="60px" alt="Braden Steffaniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jordan-gillard"&gt;&lt;img src="https://github.com/jordan-gillard.png" width="60px" alt="Jordan Gillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/smangels"&gt;&lt;img src="https://github.com/smangels.png" width="60px" alt="Sebastian" /&gt;&lt;/a&gt;&lt;a href="https://github.com/amslezak"&gt;&lt;img src="https://github.com/amslezak.png" width="60px" alt="Andy Slezak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mkock"&gt;&lt;img src="https://github.com/mkock.png" width="60px" alt="Martin Kock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jessealama"&gt;&lt;img src="https://github.com/jessealama.png" width="60px" alt="Jesse Alama" /&gt;&lt;/a&gt;&lt;a href="https://github.com/danielkokott"&gt;&lt;img src="https://github.com/danielkokott.png" width="60px" alt="Daniel Kokott" /&gt;&lt;/a&gt;&lt;a href="https://github.com/heijmans"&gt;&lt;img src="https://github.com/heijmans.png" width="60px" alt="Jan Heijmans" /&gt;&lt;/a&gt;&lt;a href="https://github.com/knowald"&gt;&lt;img src="https://github.com/knowald.png" width="60px" alt="Kevin Nowald" /&gt;&lt;/a&gt;&lt;a href="https://github.com/omarluq"&gt;&lt;img src="https://github.com/omarluq.png" width="60px" alt="Omar Luq" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanjli"&gt;&lt;img src="https://github.com/ethanjli.png" width="60px" alt="Ethan Li" /&gt;&lt;/a&gt;&lt;a href="https://github.com/phubaba"&gt;&lt;img src="https://github.com/phubaba.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/canhazcodez"&gt;&lt;img src="https://github.com/canhazcodez.png" width="60px" alt="Maxi" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neunkasulle"&gt;&lt;img src="https://github.com/neunkasulle.png" width="60px" alt="Jan Zenkner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/RVxLab"&gt;&lt;img src="https://github.com/RVxLab.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/FrederickGeek8"&gt;&lt;img src="https://github.com/FrederickGeek8.png" width="60px" alt="Frederick Morlock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ezdac"&gt;&lt;img src="https://github.com/ezdac.png" width="60px" alt="Maximilian Langenfeld" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbuls"&gt;&lt;img src="https://github.com/dbuls.png" width="60px" alt="Davis Buls" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lppassos"&gt;&lt;img src="https://github.com/lppassos.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neilcode"&gt;&lt;img src="https://github.com/neilcode.png" width="60px" alt="Neil Lambert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dhh"&gt;&lt;img src="https://github.com/dhh.png" width="60px" alt="David Heinemeier Hansson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanfischer"&gt;&lt;img src="https://github.com/ethanfischer.png" width="60px" alt="Ethan Fischer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/poshboytl"&gt;&lt;img src="https://github.com/poshboytl.png" width="60px" alt="Terry Tai" /&gt;&lt;/a&gt;&lt;a href="https://github.com/roesnera"&gt;&lt;img src="https://github.com/roesnera.png" width="60px" alt="Adam Roesner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/seven1m"&gt;&lt;img src="https://github.com/seven1m.png" width="60px" alt="Tim Morgan" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sgoridotla1"&gt;&lt;img src="https://github.com/sgoridotla1.png" width="60px" alt="Max Shypulniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ADIX7"&gt;&lt;img src="https://github.com/ADIX7.png" width="60px" alt="Kovács Ádám" /&gt;&lt;/a&gt;&lt;a href="https://github.com/slowdub"&gt;&lt;img src="https://github.com/slowdub.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/serranomorante"&gt;&lt;img src="https://github.com/serranomorante.png" width="60px" alt="Patricio Serrano" /&gt;&lt;/a&gt;&lt;a href="https://github.com/kiriDevs"&gt;&lt;img src="https://github.com/kiriDevs.png" width="60px" alt="Kiri" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Bparsons0904"&gt;&lt;img src="https://github.com/Bparsons0904.png" width="60px" alt="Bob Parsons" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bjornevik"&gt;&lt;img src="https://github.com/bjornevik.png" width="60px" alt="John Even Bjørnevik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/moberst"&gt;&lt;img src="https://github.com/moberst.png" width="60px" alt="Michael Oberst" /&gt;&lt;/a&gt;&lt;a href="https://github.com/stianh"&gt;&lt;img src="https://github.com/stianh.png" width="60px" alt="Stian Hegglund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/adam-e-trepanier"&gt;&lt;img src="https://github.com/adam-e-trepanier.png" width="60px" alt="Adam Trepanier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/arkalon76"&gt;&lt;img src="https://github.com/arkalon76.png" width="60px" alt="Kenth Fagerlund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Djuuu"&gt;&lt;img src="https://github.com/Djuuu.png" width="60px" alt="Julien Tardot" /&gt;&lt;/a&gt;&lt;a href="https://github.com/antikytheraton"&gt;&lt;img src="https://github.com/antikytheraton.png" width="60px" alt="Aaron Arredondo" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ellord"&gt;&lt;img src="https://github.com/ellord.png" width="60px" alt="Ellord Tayag" /&gt;&lt;/a&gt;&lt;a href="https://github.com/EdgarPost"&gt;&lt;img src="https://github.com/EdgarPost.png" width="60px" alt="Edgar Post-Buijs" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sbc64"&gt;&lt;img src="https://github.com/sbc64.png" width="60px" alt="sbc64" /&gt;&lt;/a&gt;&lt;a href="https://github.com/caillou"&gt;&lt;img src="https://github.com/caillou.png" width="60px" alt="Pierre Spring" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mebezac"&gt;&lt;img src="https://github.com/mebezac.png" width="60px" alt="Zac Clay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Tom94"&gt;&lt;img src="https://github.com/Tom94.png" width="60px" alt="Thomas Müller" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ccssmnn"&gt;&lt;img src="https://github.com/ccssmnn.png" width="60px" alt="Carl Assmann" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ognevsd"&gt;&lt;img src="https://github.com/ognevsd.png" width="60px" alt="Sergey Ognev" /&gt;&lt;/a&gt;&lt;a href="https://github.com/moodyhunter"&gt;&lt;img src="https://github.com/moodyhunter.png" width="60px" alt="Moody Liu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/code-hunger"&gt;&lt;img src="https://github.com/code-hunger.png" width="60px" alt="Alex G" /&gt;&lt;/a&gt;&lt;a href="https://github.com/elithper"&gt;&lt;img src="https://github.com/elithper.png" width="60px" alt="Michael Howard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/LasseBloch"&gt;&lt;img src="https://github.com/LasseBloch.png" width="60px" alt="Lasse Bloch Lauritsen" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lmarburger"&gt;&lt;img src="https://github.com/lmarburger.png" width="60px" alt="Larry Marburger" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbrockman"&gt;&lt;img src="https://github.com/dbrockman.png" width="60px" alt="David Brockman" /&gt;&lt;/a&gt;&lt;a href="https://github.com/slavshik"&gt;&lt;img src="https://github.com/slavshik.png" width="60px" alt="Alexander Slavschik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/aidalgol"&gt;&lt;img src="https://github.com/aidalgol.png" width="60px" alt="Aidan Gauland" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mbienkowsk"&gt;&lt;img src="https://github.com/mbienkowsk.png" width="60px" alt="Maksym Bieńkowski" /&gt;&lt;/a&gt;&lt;a href="https://github.com/joshuawootonn"&gt;&lt;img src="https://github.com/joshuawootonn.png" width="60px" alt="Joshua Wootonn" /&gt;&lt;/a&gt;&lt;a href="https://github.com/I4nJ"&gt;&lt;img src="https://github.com/I4nJ.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/gurbindersingh"&gt;&lt;img src="https://github.com/gurbindersingh.png" width="60px" alt="Gurbinder Singh" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sandviklee"&gt;&lt;img src="https://github.com/sandviklee.png" width="60px" alt="Simon Sandvik Lee" /&gt;&lt;/a&gt;&lt;a href="https://github.com/glagnar"&gt;&lt;img src="https://github.com/glagnar.png" width="60px" alt="Thomas Gilbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/skrzepto"&gt;&lt;img src="https://github.com/skrzepto.png" width="60px" alt="Szymon Mucha" /&gt;&lt;/a&gt;&lt;a href="https://github.com/TimShilov"&gt;&lt;img src="https://github.com/TimShilov.png" width="60px" alt="Tim Shilov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/unnawut"&gt;&lt;img src="https://github.com/unnawut.png" width="60px" alt="Unnawut Leepaisalsuwanna" /&gt;&lt;/a&gt;&lt;a href="https://github.com/wortmanb"&gt;&lt;img src="https://github.com/wortmanb.png" width="60px" alt="Bret Wortman" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andre-lameirinhas"&gt;&lt;img src="https://github.com/andre-lameirinhas.png" width="60px" alt="André Lameirinhas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/SVappsLAB"&gt;&lt;img src="https://github.com/SVappsLAB.png" width="60px" alt="Scott Velez" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ooojustin"&gt;&lt;img src="https://github.com/ooojustin.png" width="60px" alt="justin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/TakodaS"&gt;&lt;img src="https://github.com/TakodaS.png" width="60px" alt="Austen Bolitho" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mantzu132"&gt;&lt;img src="https://github.com/mantzu132.png" width="60px" alt="Mantas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mayfieldiv"&gt;&lt;img src="https://github.com/mayfieldiv.png" width="60px" alt="Mayfield" /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;h2&gt;Elevator Pitch&lt;/h2&gt; 
&lt;p&gt;Rant time: You've heard it before, git is &lt;em&gt;powerful&lt;/em&gt;, but what good is that power when everything is so damn hard to do? Interactive rebasing requires you to edit a goddamn TODO file in your editor? &lt;em&gt;Are you kidding me?&lt;/em&gt; To stage part of a file you need to use a command line program to step through each hunk and if a hunk can't be split down any further but contains code you don't want to stage, you have to edit an arcane patch file &lt;em&gt;by hand&lt;/em&gt;? &lt;em&gt;Are you KIDDING me?!&lt;/em&gt; Sometimes you get asked to stash your changes when switching branches only to realise that after you switch and unstash that there weren't even any conflicts and it would have been fine to just checkout the branch directly? &lt;em&gt;YOU HAVE GOT TO BE KIDDING ME!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;If you're a mere mortal like me and you're tired of hearing how powerful git is when in your daily life it's a powerful pain in your ass, lazygit might be for you.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#sponsors"&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#elevator-pitch"&gt;Elevator Pitch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#table-of-contents"&gt;Table of contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#features"&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#stage-individual-lines"&gt;Stage individual lines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#interactive-rebase"&gt;Interactive Rebase&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#cherry-pick"&gt;Cherry-pick&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#bisect"&gt;Bisect&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#nuke-the-working-tree"&gt;Nuke the working tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#amend-an-old-commit"&gt;Amend an old commit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#filter"&gt;Filter&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#invoke-a-custom-command"&gt;Invoke a custom command&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#worktrees"&gt;Worktrees&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#rebase-magic-custom-patches"&gt;Rebase magic (custom patches)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#rebase-from-marked-base-commit"&gt;Rebase from marked base commit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#undo"&gt;Undo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#commit-graph"&gt;Commit graph&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#compare-two-commits"&gt;Compare two commits&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#binary-releases"&gt;Binary Releases&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#homebrew"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#macports"&gt;MacPorts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#void-linux"&gt;Void Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#scoop-windows"&gt;Scoop (Windows)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#arch-linux"&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#fedora-and-rhel"&gt;Fedora and RHEL&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#solus-linux"&gt;Solus Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#debian-and-ubuntu"&gt;Debian and Ubuntu&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#funtoo-linux"&gt;Funtoo Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#gentoo-linux"&gt;Gentoo Linux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#freebsd"&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#termux"&gt;Termux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#conda"&gt;Conda&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#go"&gt;Go&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#chocolatey-windows"&gt;Chocolatey (Windows)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#winget-windows-10-1709-or-later"&gt;Winget (Windows 10 1709 or later)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#manual"&gt;Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#usage"&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#keybindings"&gt;Keybindings&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#changing-directory-on-exit"&gt;Changing Directory On Exit&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#undoredo"&gt;Undo/Redo&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#configuration"&gt;Configuration&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#custom-pagers"&gt;Custom Pagers&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#custom-commands"&gt;Custom Commands&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#git-flow-support"&gt;Git flow support&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#contributing"&gt;Contributing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#debugging-locally"&gt;Debugging Locally&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#donate"&gt;Donate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#faq"&gt;FAQ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#what-do-the-commit-colors-represent"&gt;What do the commit colors represent?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#shameless-plug"&gt;Shameless Plug&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/#alternatives"&gt;Alternatives&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Lazygit is not my fulltime job but it is a hefty part time job so if you want to support the project please consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Stage individual lines&lt;/h3&gt; 
&lt;p&gt;Press space on the selected line to stage it, or press &lt;code&gt;v&lt;/code&gt; to start selecting a range of lines. You can also press &lt;code&gt;a&lt;/code&gt; to select the entirety of the current hunk.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/stage_lines-compressed.gif" alt="stage_lines" /&gt;&lt;/p&gt; 
&lt;h3&gt;Interactive Rebase&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;i&lt;/code&gt; to start an interactive rebase. Then squash (&lt;code&gt;s&lt;/code&gt;), fixup (&lt;code&gt;f&lt;/code&gt;), drop (&lt;code&gt;d&lt;/code&gt;), edit (&lt;code&gt;e&lt;/code&gt;), move up (&lt;code&gt;ctrl+k&lt;/code&gt;) or move down (&lt;code&gt;ctrl+j&lt;/code&gt;) any of TODO commits, before continuing the rebase by bringing up the rebase options menu with &lt;code&gt;m&lt;/code&gt; and then selecting &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also perform any these actions as a once-off (e.g. pressing &lt;code&gt;s&lt;/code&gt; on a commit to squash it) without explicitly starting a rebase.&lt;/p&gt; 
&lt;p&gt;This demo also uses shift+down to select a range of commits to move and fixup.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/interactive_rebase-compressed.gif" alt="interactive_rebase" /&gt;&lt;/p&gt; 
&lt;h3&gt;Cherry-pick&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;shift+c&lt;/code&gt; on a commit to copy it and press &lt;code&gt;shift+v&lt;/code&gt; to paste (cherry-pick) it.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/cherry_pick-compressed.gif" alt="cherry_pick" /&gt;&lt;/p&gt; 
&lt;h3&gt;Bisect&lt;/h3&gt; 
&lt;p&gt;Press &lt;code&gt;b&lt;/code&gt; in the commits view to mark a commit as good/bad in order to begin a git bisect.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/bisect-compressed.gif" alt="bisect" /&gt;&lt;/p&gt; 
&lt;h3&gt;Nuke the working tree&lt;/h3&gt; 
&lt;p&gt;For when you really want to just get rid of anything that shows up when you run &lt;code&gt;git status&lt;/code&gt; (and yes that includes dirty submodules) &lt;a href="https://www.youtube.com/watch?v=N4E2B_k2Bss"&gt;kidpix style&lt;/a&gt;, press &lt;code&gt;shift+d&lt;/code&gt; to bring up the reset options menu and then select the 'nuke' option.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/nuke_working_tree-compressed.gif" alt="Nuke working tree" /&gt;&lt;/p&gt; 
&lt;h3&gt;Amend an old commit&lt;/h3&gt; 
&lt;p&gt;Pressing &lt;code&gt;shift+a&lt;/code&gt; on any commit will amend that commit with the currently staged changes (running an interactive rebase in the background).&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/amend_old_commit-compressed.gif" alt="amend_old_commit" /&gt;&lt;/p&gt; 
&lt;h3&gt;Filter&lt;/h3&gt; 
&lt;p&gt;You can filter a view with &lt;code&gt;/&lt;/code&gt;. Here we filter down our branches view and then hit &lt;code&gt;enter&lt;/code&gt; to view its commits.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/filter-compressed.gif" alt="filter" /&gt;&lt;/p&gt; 
&lt;h3&gt;Invoke a custom command&lt;/h3&gt; 
&lt;p&gt;Lazygit has a very flexible &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Command_Keybindings.md"&gt;custom command system&lt;/a&gt;. In this example a custom command is defined which emulates the built-in branch checkout action.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/custom_command-compressed.gif" alt="custom_command" /&gt;&lt;/p&gt; 
&lt;h3&gt;Worktrees&lt;/h3&gt; 
&lt;p&gt;You can create worktrees to have multiple branches going at once without the need for stashing or creating WIP commits when switching between them. Press &lt;code&gt;w&lt;/code&gt; in the branches view to create a worktree from the selected branch and switch to it.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/worktree_create_from_branches-compressed.gif" alt="worktree_create_from_branches" /&gt;&lt;/p&gt; 
&lt;h3&gt;Rebase magic (custom patches)&lt;/h3&gt; 
&lt;p&gt;You can build a custom patch from an old commit and then remove the patch from the commit, split out a new commit, apply the patch in reverse to the index, and more.&lt;/p&gt; 
&lt;p&gt;In this example we have a redundant comment that we want to remove from an old commit. We hit &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on the commit to view its files, then &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on a file to focus the patch, then &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; to add the comment line to our custom patch, and then &lt;code&gt;ctrl+p&lt;/code&gt; to view the custom patch options; selecting to remove the patch from the current commit.&lt;/p&gt; 
&lt;p&gt;Learn more in the &lt;a href="https://youtu.be/4XaToVut_hs"&gt;Rebase magic Youtube tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/custom_patch-compressed.gif" alt="custom_patch" /&gt;&lt;/p&gt; 
&lt;h3&gt;Rebase from marked base commit&lt;/h3&gt; 
&lt;p&gt;Say you're on a feature branch that was itself branched off of the develop branch, and you've decided you'd rather be branching off the master branch. You need a way to rebase only the commits from your feature branch. In this demo we check to see which was the last commit on the develop branch, then press &lt;code&gt;shift+b&lt;/code&gt; to mark that commit as our base commit, then press &lt;code&gt;r&lt;/code&gt; on the master branch to rebase onto it, only bringing across the commits from our feature branch. Then we push our changes with &lt;code&gt;shift+p&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/rebase_onto-compressed.gif" alt="rebase_onto" /&gt;&lt;/p&gt; 
&lt;h3&gt;Undo&lt;/h3&gt; 
&lt;p&gt;You can undo the last action by pressing &lt;code&gt;z&lt;/code&gt; and redo with &lt;code&gt;ctrl+z&lt;/code&gt;. Here we drop a couple of commits and then undo the actions. Undo uses the reflog which is specific to commits and branches so we can't undo changes to the working tree or stash.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Undoing.md"&gt;More info&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/undo-compressed.gif" alt="undo" /&gt;&lt;/p&gt; 
&lt;h3&gt;Commit graph&lt;/h3&gt; 
&lt;p&gt;When viewing the commit graph in an enlarged window (use &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; to cycle screen modes), the commit graph is shown. Colours correspond to the commit authors, and as you navigate down the graph, the parent commits of the selected commit are highlighted.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/commit_graph-compressed.gif" alt="commit_graph" /&gt;&lt;/p&gt; 
&lt;h3&gt;Compare two commits&lt;/h3&gt; 
&lt;p&gt;If you press &lt;code&gt;shift+w&lt;/code&gt; on a commit (or branch/ref) a menu will open that allows you to mark that commit so that any other commit you select will be diffed against it. Once you've selected the second commit, you'll see the diff in the main view and if you press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; you'll see the files of the diff. You can press &lt;code&gt;shift+w&lt;/code&gt; to view the diff menu again to see options like reversing the diff direction or exiting diff mode. You can also exit diff mode by pressing &lt;code&gt;&amp;lt;escape&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/demo/diff_commits-compressed.gif" alt="diff_commits" /&gt;&lt;/p&gt; 
&lt;h2&gt;Tutorials&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/CPLdltN7wgE"&gt;&lt;img src="https://i.imgur.com/sVEktDn.png" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/CPLdltN7wgE"&gt;15 Lazygit Features in 15 Minutes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/VDXvbHZYeKY"&gt;Basics Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/4XaToVut_hs"&gt;Rebase Magic Tutorial&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/lazygit/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/lazygit.svg?columns=3" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Most of the above packages are maintained by third parties so be sure to vet them yourself and confirm that the maintainer is a trustworthy looking person who attends local sports games and gives back to their communities with barbeque fundraisers etc&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Binary Releases&lt;/h3&gt; 
&lt;p&gt;For Windows, Mac OS(10.12+) or Linux, you can download a binary release &lt;a href="https://raw.githubusercontent.com/jesseduffield/releases"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;It works with Linux, too.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MacPorts&lt;/h3&gt; 
&lt;p&gt;Latest version built from github releases. Tap:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sudo port install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Void Linux&lt;/h3&gt; 
&lt;p&gt;Packages for Void Linux are available in the distro repo&lt;/p&gt; 
&lt;p&gt;They follow upstream latest releases&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo xbps-install -S lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt;. It's in the &lt;code&gt;extras&lt;/code&gt; bucket:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Add the extras bucket
scoop bucket add extras

# Install lazygit
scoop install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;gah (Linux and Mac OS)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href="https://github.com/marverix/gah/"&gt;gah&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;gah install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux&lt;/h3&gt; 
&lt;p&gt;Packages for Arch Linux are available via pacman and AUR (Arch User Repository).&lt;/p&gt; 
&lt;p&gt;There are two packages. The stable one which is built with the latest release and the git version which builds from the most recent commit.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stable: &lt;code&gt;sudo pacman -S lazygit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Development: &lt;a href="https://aur.archlinux.org/packages/lazygit-git/"&gt;https://aur.archlinux.org/packages/lazygit-git/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instruction of how to install AUR content can be found here: &lt;a href="https://wiki.archlinux.org/index.php/Arch_User_Repository"&gt;https://wiki.archlinux.org/index.php/Arch_User_Repository&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Fedora / Amazon Linux 2023 / CentOS Stream&lt;/h3&gt; 
&lt;p&gt;Packages for Fedora, Amazon Linux 2023 and CentOS Stream are available via &lt;a href="https://copr.fedorainfracloud.org/coprs/dejan/lazygit/"&gt;Copr&lt;/a&gt; (Cool Other Package Repo).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo dnf copr enable dejan/lazygit
sudo dnf install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These packages are built using the RPM spec file located here: &lt;a href="https://codeberg.org/dejan/rpm-lazygit"&gt;https://codeberg.org/dejan/rpm-lazygit&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You should be able to build RPMs for Fedora 41 or older, and other Fedora derivatives using the SRPM (Source RPM) file that you can grab from the latest COPR build.&lt;/p&gt; 
&lt;h3&gt;Solus Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo eopkg install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Debian and Ubuntu&lt;/h3&gt; 
&lt;p&gt;For &lt;strong&gt;Debian 13 "Trixie", Sid&lt;/strong&gt;, and later, or &lt;strong&gt;Ubuntu 25.10 "Questing Quokka"&lt;/strong&gt; and later:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;strong&gt;Debian 12 "Bookworm", Ubuntu 25.04 "Plucky Puffin"&lt;/strong&gt; and earlier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*')
curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
tar xf lazygit.tar.gz lazygit
sudo install lazygit -D -t /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Verify the correct installation of lazygit:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;lazygit --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Funtoo Linux&lt;/h3&gt; 
&lt;p&gt;Funtoo Linux has an autogenerated lazygit package in &lt;a href="https://github.com/funtoo/dev-kit/tree/1.4-release/dev-vcs/lazygit"&gt;dev-kit&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo emerge dev-vcs/lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Gentoo Linux&lt;/h3&gt; 
&lt;p&gt;Lazygit is not (yet) in main Gentoo portage, however an ebuild is available in &lt;a href="https://github.com/gentoo-mirror/guru/tree/master/dev-vcs/lazygit"&gt;GURU overlay&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can either add the overlay to your system and install lazygit as usual:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo eselect repository enable guru
sudo emaint sync -r guru
sudo emerge dev-vcs/lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE&lt;/h3&gt; 
&lt;p&gt;The lazygit package is currently built in &lt;a href="https://build.opensuse.org/package/show/devel:languages:go/lazygit"&gt;devel:languages:go/lazygit&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To install lazygit on openSUSE Tumbleweed run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/openSUSE_Factory/devel:languages:go.repo
sudo zypper ref &amp;amp;&amp;amp; sudo zypper in lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install lazygit on openSUSE Leap run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;source /etc/os-release
sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/$VERSION_ID/devel:languages:go.repo
sudo zypper ref &amp;amp;&amp;amp; sudo zypper in lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NixOs&lt;/h3&gt; 
&lt;p&gt;On NixOs lazygit is packaged with nix and distributed via nixpkgs. You can try the lazygit without installing it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;nix-shell -p lazygit
# or with flakes enabled
nix run nixpkgs#lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can add lazygit to you &lt;code&gt;configuration.nix&lt;/code&gt; using the &lt;code&gt;environment.systemPackages&lt;/code&gt; option. More details can be found via NixOs search &lt;a href="https://search.nixos.org/"&gt;page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Flox&lt;/h3&gt; 
&lt;p&gt;Lazygit can be installed into a Flox environment as follows.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;flox install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More details about Flox can be found on &lt;a href="https://flox.dev/"&gt;their website&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;pkg install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Termux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;apt install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Conda&lt;/h3&gt; 
&lt;p&gt;Released versions are available for different platforms, see &lt;a href="https://anaconda.org/conda-forge/lazygit"&gt;https://anaconda.org/conda-forge/lazygit&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;conda install -c conda-forge lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Go&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install github.com/jesseduffield/lazygit@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note: If you get an error claiming that lazygit cannot be found or is not defined, you may need to add &lt;code&gt;~/go/bin&lt;/code&gt; to your $PATH (MacOS/Linux), or &lt;code&gt;%HOME%\go\bin&lt;/code&gt; (Windows). Not to be mistaken for &lt;code&gt;C:\Go\bin&lt;/code&gt; (which is for Go's own binaries, not apps like lazygit).&lt;/p&gt; 
&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Winget (Windows 10 1709 or later)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazygit&lt;/code&gt; using the &lt;code&gt;winget&lt;/code&gt; command in the Windows Terminal with the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;winget install -e --id=JesseDuffield.lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You'll need to &lt;a href="https://golang.org/doc/install"&gt;install Go&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesseduffield/lazygit.git
cd lazygit
go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;go run main.go&lt;/code&gt; to compile and run in one go (pun definitely intended)&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Call &lt;code&gt;lazygit&lt;/code&gt; in your terminal inside a git repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ lazygit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want, you can also add an alias for this with &lt;code&gt;echo "alias lg='lazygit'" &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt; (or whichever rc file you're using).&lt;/p&gt; 
&lt;h3&gt;Keybindings&lt;/h3&gt; 
&lt;p&gt;You can check out the list of keybindings &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/keybindings"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Changing Directory On Exit&lt;/h3&gt; 
&lt;p&gt;If you change repos in lazygit and want your shell to change directory into that repo on exiting lazygit, add this to your &lt;code&gt;~/.zshrc&lt;/code&gt; (or other rc file):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE &amp;gt; /dev/null
    fi
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then &lt;code&gt;source ~/.zshrc&lt;/code&gt; and from now on when you call &lt;code&gt;lg&lt;/code&gt; and exit you'll switch directories to whatever you were in inside lazygit. To override this behaviour you can exit using &lt;code&gt;shift+Q&lt;/code&gt; rather than just &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Undo/Redo&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Undoing.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Config.md"&gt;configuration docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Custom Pagers&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Pagers.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Custom Commands&lt;/h3&gt; 
&lt;p&gt;If lazygit is missing a feature, there's a good chance you can implement it yourself with a custom command!&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/docs/Custom_Command_Keybindings.md"&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Git flow support&lt;/h3&gt; 
&lt;p&gt;Lazygit supports &lt;a href="https://github.com/nvie/gitflow"&gt;Gitflow&lt;/a&gt; if you have it installed. To understand how the Gitflow model works check out Vincent Driessen's original &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;post&lt;/a&gt; explaining it. To view Gitflow options from within Lazygit, press &lt;code&gt;i&lt;/code&gt; from within the branches view.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We love your input! Please check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazygit/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the &lt;a href="https://discord.gg/ehwFt2t4wt"&gt;discord channel&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/ehwFt2t4wt"&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazygit/assets/discord.png" width="75" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Check out this &lt;a href="https://www.youtube.com/watch?v=kNavnhzZHtk"&gt;video&lt;/a&gt; walking through the creation of a small feature in lazygit if you want an idea of where to get started.&lt;/p&gt; 
&lt;h3&gt;Debugging Locally&lt;/h3&gt; 
&lt;p&gt;Run &lt;code&gt;lazygit --debug&lt;/code&gt; in one terminal tab and &lt;code&gt;lazygit --logs&lt;/code&gt; in another to view the program and its log output side by side&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you would like to support the development of lazygit, consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;What do the commit colors represent?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Green: the commit is included in the master branch&lt;/li&gt; 
 &lt;li&gt;Yellow: the commit is not included in the master branch&lt;/li&gt; 
 &lt;li&gt;Red: the commit has not been pushed to the upstream branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Shameless Plug&lt;/h2&gt; 
&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href="https://twitter.com/DuffieldJesse"&gt;twitter&lt;/a&gt; or check out my &lt;a href="https://jesseduffield.com/"&gt;blog&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;p&gt;If you find that lazygit doesn't quite satisfy your requirements, these may be a better fit:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Extrawurst/gitui"&gt;GitUI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jonas/tig"&gt;tig&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>