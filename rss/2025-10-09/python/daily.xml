<rss version="2.0">
  <channel>
    <title>GitHub Python Daily Trending</title>
    <description>Daily Trending of Python in GitHub</description>
    <pubDate>Wed, 08 Oct 2025 01:38:57 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>swisskyrepo/PayloadsAllTheThings</title>
      <link>https://github.com/swisskyrepo/PayloadsAllTheThings</link>
      <description>&lt;p&gt;A list of useful payloads and bypass for Web Application Security and Pentest/CTF&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Payloads All The Things&lt;/h1&gt; 
&lt;p&gt;A list of useful payloads and bypasses for Web Application Security. Feel free to improve with your payloads and techniques!&lt;/p&gt; 
&lt;p&gt;You can also contribute with a &lt;span&gt;üçª&lt;/span&gt; IRL, or using the sponsor button.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sponsors/swisskyrepo"&gt;&lt;img src="https://img.shields.io/static/v1?label=Sponsor&amp;amp;message=%E2%9D%A4&amp;amp;logo=GitHub&amp;amp;link=https://github.com/sponsors/swisskyrepo" alt="Sponsor" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/tweet?text=Payloads%20All%20The%20Things,%20a%20list%20of%20useful%20payloads%20and%20bypasses%20for%20Web%20Application%20Security%20-%20by%20@pentest_swissky&amp;amp;url=https://github.com/swisskyrepo/PayloadsAllTheThings/"&gt;&lt;img src="https://img.shields.io/twitter/url/http/shields.io.svg?style=social" alt="Tweet" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An alternative display version is available at &lt;a href="https://swisskyrepo.github.io/PayloadsAllTheThings/"&gt;PayloadsAllTheThingsWeb&lt;/a&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/swisskyrepo/PayloadsAllTheThings/master/.github/banner.png" alt="banner" /&gt; &lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üìñ&lt;/span&gt; Documentation&lt;/h2&gt; 
&lt;p&gt;Every section contains the following files, you can use the &lt;code&gt;_template_vuln&lt;/code&gt; folder to create a new chapter:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;README.md - vulnerability description and how to exploit it, including several payloads&lt;/li&gt; 
 &lt;li&gt;Intruder - a set of files to give to Burp Intruder&lt;/li&gt; 
 &lt;li&gt;Images - pictures for the README.md&lt;/li&gt; 
 &lt;li&gt;Files - some files referenced in the README.md&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You might also like the other projects from the AllTheThings family :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://swisskyrepo.github.io/InternalAllTheThings/"&gt;InternalAllTheThings&lt;/a&gt; - Active Directory and Internal Pentest Cheatsheets&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://swisskyrepo.github.io/HardwareAllTheThings/"&gt;HardwareAllTheThings&lt;/a&gt; - Hardware/IOT Pentesting Wiki&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You want more? Check the &lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/raw/master/_LEARNING_AND_SOCIALS/BOOKS.md"&gt;Books&lt;/a&gt; and &lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/raw/master/_LEARNING_AND_SOCIALS/YOUTUBE.md"&gt;YouTube channel&lt;/a&gt; selections.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üßëüíª&lt;/span&gt; Contributions&lt;/h2&gt; 
&lt;p&gt;Be sure to read &lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/raw/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=swisskyrepo/PayloadsAllTheThings&amp;amp;max=36" alt="sponsors-list" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Thanks again for your contribution! &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üçª&lt;/span&gt; Sponsors&lt;/h2&gt; 
&lt;p&gt;This project is proudly sponsored by these companies.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Logo&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://serpapi.com"&gt;&lt;img src="https://avatars.githubusercontent.com/u/34724717?s=40&amp;amp;v=4" alt="sponsor-serpapi" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;SerpApi&lt;/strong&gt; is a real time API to access Google search results. It solves the issues of having to rent proxies, solving captchas, and JSON parsing.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://projectdiscovery.io/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/50994705?s=40&amp;amp;v=4" alt="sponsor-projectdiscovery" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;ProjectDiscovery&lt;/strong&gt; - Detect real, exploitable vulnerabilities. Harness the power of Nuclei for fast and accurate findings without false positives.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.vaadata.com/"&gt;&lt;img src="https://avatars.githubusercontent.com/u/48131541?s=40&amp;amp;v=4" alt="sponsor-vaadata" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;VAADATA&lt;/strong&gt; - Ethical Hacking Services&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>simular-ai/Agent-S</title>
      <link>https://github.com/simular-ai/Agent-S</link>
      <description>&lt;p&gt;Agent S: an open agentic framework that uses computers like a human&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;img src="https://raw.githubusercontent.com/simular-ai/Agent-S/main/images/agent_s.png" alt="Logo" style="vertical-align:middle" width="60" /&gt; Agent S: &lt;small&gt;Use Computer Like a Human&lt;/small&gt; &lt;/h1&gt; 
&lt;p align="center"&gt;&amp;nbsp; üåê &lt;a href="https://www.simular.ai/articles/agent-s3"&gt;[S3 blog]&lt;/a&gt;&amp;nbsp; üìÑ &lt;a href="https://arxiv.org/abs/2510.02250"&gt;[S3 Paper]&lt;/a&gt;&amp;nbsp; üé• &lt;a href="https://www.youtube.com/watch?v=VHr0a3UBsh4"&gt;[S3 Video]&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;&amp;nbsp; üåê &lt;a href="https://www.simular.ai/articles/agent-s2-technical-review"&gt;[S2 blog]&lt;/a&gt;&amp;nbsp; üìÑ &lt;a href="https://arxiv.org/abs/2504.00906"&gt;[S2 Paper (COLM 2025)]&lt;/a&gt;&amp;nbsp; üé• &lt;a href="https://www.youtube.com/watch?v=wUGVQl7c0eg"&gt;[S2 Video]&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;&amp;nbsp; üåê &lt;a href="https://www.simular.ai/agent-s"&gt;[S1 blog]&lt;/a&gt;&amp;nbsp; üìÑ &lt;a href="https://arxiv.org/abs/2410.08164"&gt;[S1 Paper (ICLR 2025)]&lt;/a&gt;&amp;nbsp; üé• &lt;a href="https://www.youtube.com/watch?v=OBDE3Knte0g"&gt;[S1 Video]&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt;&amp;nbsp; &lt;a href="https://trendshift.io/repositories/13151" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/13151" alt="simular-ai%2FAgent-S | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://img.shields.io/badge/OS-Windows-blue?logo=windows&amp;amp;logoColor=white" alt="Windows" /&gt; &lt;img src="https://img.shields.io/badge/OS-macOS-black?logo=apple&amp;amp;logoColor=white" alt="macOS" /&gt; &lt;img src="https://img.shields.io/badge/OS-Linux-yellow?logo=linux&amp;amp;logoColor=black" alt="Linux" /&gt; &lt;a href="https://discord.gg/E2XfsK9fPV"&gt; &lt;img src="https://dcbadge.limes.pink/api/server/https://discord.gg/E2XfsK9fPV?style=flat" alt="Discord" /&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp; &lt;a href="https://pepy.tech/projects/gui-agents"&gt; &lt;img src="https://static.pepy.tech/badge/gui-agents" alt="PyPI Downloads" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;!-- Keep these links. Translations will automatically update with the README. --&gt; 
 &lt;a href="https://www.readme-i18n.com/simular-ai/Agent-S?lang=de"&gt;Deutsch&lt;/a&gt; | 
 &lt;a href="https://www.readme-i18n.com/simular-ai/Agent-S?lang=es"&gt;Espa√±ol&lt;/a&gt; | 
 &lt;a href="https://www.readme-i18n.com/simular-ai/Agent-S?lang=fr"&gt;fran√ßais&lt;/a&gt; | 
 &lt;a href="https://www.readme-i18n.com/simular-ai/Agent-S?lang=ja"&gt;Êó•Êú¨Ë™û&lt;/a&gt; | 
 &lt;a href="https://www.readme-i18n.com/simular-ai/Agent-S?lang=ko"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt; | 
 &lt;a href="https://www.readme-i18n.com/simular-ai/Agent-S?lang=pt"&gt;Portugu√™s&lt;/a&gt; | 
 &lt;a href="https://www.readme-i18n.com/simular-ai/Agent-S?lang=ru"&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt; | 
 &lt;a href="https://www.readme-i18n.com/simular-ai/Agent-S?lang=zh"&gt;‰∏≠Êñá&lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt;
  &amp;nbsp;&amp;nbsp; 
 &lt;p&gt;Skip the setup? Try Agent S in &lt;a href="https://cloud.simular.ai/"&gt;Simular Cloud&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt; 
&lt;h2&gt;ü•≥ Updates&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2025/10/02&lt;/strong&gt;: Released Agent S3 and its &lt;a href="https://arxiv.org/abs/2510.02250"&gt;technical paper&lt;/a&gt;, setting a new SOTA of &lt;strong&gt;69.9%&lt;/strong&gt; on OSWorld (approaching 72% human performance), with strong generalizability on WindowsAgentArena and AndroidWorld! It is also simpler, faster, and more flexible.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2025/08/01&lt;/strong&gt;: Agent S2.5 is released (gui-agents v0.2.5): simpler, better, and faster! New SOTA on &lt;a href="https://os-world.github.io"&gt;OSWorld-Verified&lt;/a&gt;!&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2025/07/07&lt;/strong&gt;: The &lt;a href="https://arxiv.org/abs/2504.00906"&gt;Agent S2 paper&lt;/a&gt; is accepted to COLM 2025! See you in Montreal!&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2025/04/27&lt;/strong&gt;: The Agent S paper won the Best Paper Award üèÜ at ICLR 2025 Agentic AI for Science Workshop!&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2025/04/01&lt;/strong&gt;: Released the &lt;a href="https://arxiv.org/abs/2504.00906"&gt;Agent S2 paper&lt;/a&gt; with new SOTA results on OSWorld, WindowsAgentArena, and AndroidWorld!&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2025/03/12&lt;/strong&gt;: Released Agent S2 along with v0.2.0 of &lt;a href="https://github.com/simular-ai/Agent-S"&gt;gui-agents&lt;/a&gt;, the new state-of-the-art for computer use agents (CUA), outperforming OpenAI's CUA/Operator and Anthropic's Claude 3.7 Sonnet Computer-Use!&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2025/01/22&lt;/strong&gt;: The &lt;a href="https://arxiv.org/abs/2410.08164"&gt;Agent S paper&lt;/a&gt; is accepted to ICLR 2025!&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2025/01/21&lt;/strong&gt;: Released v0.1.2 of &lt;a href="https://github.com/simular-ai/Agent-S"&gt;gui-agents&lt;/a&gt; library, with support for Linux and Windows!&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2024/12/05&lt;/strong&gt;: Released v0.1.0 of &lt;a href="https://github.com/simular-ai/Agent-S"&gt;gui-agents&lt;/a&gt; library, allowing you to use Agent-S for Mac, OSWorld, and WindowsAgentArena with ease!&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; &lt;strong&gt;2024/10/10&lt;/strong&gt;: Released the &lt;a href="https://arxiv.org/abs/2410.08164"&gt;Agent S paper&lt;/a&gt; and codebase!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/simular-ai/Agent-S/main/#-introduction"&gt;üí° Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/simular-ai/Agent-S/main/#-current-results"&gt;üéØ Current Results&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/simular-ai/Agent-S/main/#%EF%B8%8F-installation--setup"&gt;üõ†Ô∏è Installation &amp;amp; Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/simular-ai/Agent-S/main/#-usage"&gt;üöÄ Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/simular-ai/Agent-S/main/#-acknowledgements"&gt;ü§ù Acknowledgements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/simular-ai/Agent-S/main/#-citation"&gt;üí¨ Citation&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;üí° Introduction&lt;/h2&gt; 
&lt;p&gt;Welcome to &lt;strong&gt;Agent S&lt;/strong&gt;, an open-source framework designed to enable autonomous interaction with computers through Agent-Computer Interface. Our mission is to build intelligent GUI agents that can learn from past experiences and perform complex tasks autonomously on your computer.&lt;/p&gt; 
&lt;p&gt;Whether you're interested in AI, automation, or contributing to cutting-edge agent-based systems, we're excited to have you here!&lt;/p&gt; 
&lt;h2&gt;üéØ Current Results&lt;/h2&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/simular-ai/Agent-S/main/images/s3_results.png" alt="Agent S3 Results" width="700" /&gt; &lt;/p&gt; 
&lt;p&gt;On OSWorld, Agent S3 alone reaches 62.6% in the 100-step setting, already exceeding the previous state of the art of 61.4% (Claude Sonnet 4.5). With the addition of Behavior Best-of-N, performance climbs even higher to 69.9%, bringing computer-use agents to within just a few points of human-level accuracy (72%).&lt;/p&gt; 
&lt;p&gt;Agent S3 also demonstrates strong zero-shot generalization. On WindowsAgentArena, accuracy rises from 50.2% using only Agent S3 to 56.6% by selecting from 3 rollouts. Similarly on AndroidWorld, performance improves from 68.1% to 71.6%&lt;/p&gt; 
&lt;h2&gt;üõ†Ô∏è Installation &amp;amp; Setup&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Single Monitor&lt;/strong&gt;: Our agent is designed for single monitor screens&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: The agent runs Python code to control your computer - use with care&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Supported Platforms&lt;/strong&gt;: Linux, Mac, and Windows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;To install Agent S3 without cloning the repository, run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install gui-agents
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you would like to test Agent S3 while making changes, clone the repository and install using&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip install -e .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Don't forget to also &lt;code&gt;brew install tesseract&lt;/code&gt;! Pytesseract requires this extra installation to work.&lt;/p&gt; 
&lt;h3&gt;API Configuration&lt;/h3&gt; 
&lt;h4&gt;Option 1: Environment Variables&lt;/h4&gt; 
&lt;p&gt;Add to your &lt;code&gt;.bashrc&lt;/code&gt; (Linux) or &lt;code&gt;.zshrc&lt;/code&gt; (MacOS):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export OPENAI_API_KEY=&amp;lt;YOUR_API_KEY&amp;gt;
export ANTHROPIC_API_KEY=&amp;lt;YOUR_ANTHROPIC_API_KEY&amp;gt;
export HF_TOKEN=&amp;lt;YOUR_HF_TOKEN&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Option 2: Python Script&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import os
os.environ["OPENAI_API_KEY"] = "&amp;lt;YOUR_API_KEY&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Supported Models&lt;/h3&gt; 
&lt;p&gt;We support Azure OpenAI, Anthropic, Gemini, Open Router, and vLLM inference. See &lt;a href="https://raw.githubusercontent.com/simular-ai/Agent-S/main/models.md"&gt;models.md&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Grounding Models (Required)&lt;/h3&gt; 
&lt;p&gt;For optimal performance, we recommend &lt;a href="https://huggingface.co/ByteDance-Seed/UI-TARS-1.5-7B"&gt;UI-TARS-1.5-7B&lt;/a&gt; hosted on Hugging Face Inference Endpoints or another provider. See &lt;a href="https://huggingface.co/learn/cookbook/en/enterprise_dedicated_endpoints"&gt;Hugging Face Inference Endpoints&lt;/a&gt; for setup instructions.&lt;/p&gt; 
&lt;h2&gt;üöÄ Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ö°Ô∏è &lt;strong&gt;Recommended Setup:&lt;/strong&gt;&lt;br /&gt; For the best configuration, we recommend using &lt;strong&gt;OpenAI gpt-5-2025-08-07&lt;/strong&gt; as the main model, paired with &lt;strong&gt;UI-TARS-1.5-7B&lt;/strong&gt; for grounding.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;CLI&lt;/h3&gt; 
&lt;p&gt;Note, this is running Agent S3, our improved agent, without bBoN.&lt;/p&gt; 
&lt;p&gt;Run Agent S3 with the required parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;agent_s \
    --provider openai \
    --model gpt-5-2025-08-07 \
    --ground_provider huggingface \
    --ground_url http://localhost:8080 \
    --ground_model ui-tars-1.5-7b \
    --grounding_width 1920 \
    --grounding_height 1080
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Local Coding Environment (Optional)&lt;/h4&gt; 
&lt;p&gt;For tasks that require code execution (e.g., data processing, file manipulation, system automation), you can enable the local coding environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;agent_s \
    --provider openai \
    --model gpt-5-2025-08-07 \
    --ground_provider huggingface \
    --ground_url http://localhost:8080 \
    --ground_model ui-tars-1.5-7b \
    --grounding_width 1920 \
    --grounding_height 1080 \
    --enable_local_env
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚ö†Ô∏è &lt;strong&gt;WARNING&lt;/strong&gt;: The local coding environment executes arbitrary Python and Bash code locally on your machine. Only use this feature in trusted environments and with trusted inputs.&lt;/p&gt; 
&lt;h4&gt;Required Parameters&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--provider&lt;/code&gt;&lt;/strong&gt;: Main generation model provider (e.g., openai, anthropic, etc.) - Default: "openai"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--model&lt;/code&gt;&lt;/strong&gt;: Main generation model name (e.g., gpt-5-2025-08-07) - Default: "gpt-5-2025-08-07"&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--ground_provider&lt;/code&gt;&lt;/strong&gt;: The provider for the grounding model - &lt;strong&gt;Required&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--ground_url&lt;/code&gt;&lt;/strong&gt;: The URL of the grounding model - &lt;strong&gt;Required&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--ground_model&lt;/code&gt;&lt;/strong&gt;: The model name for the grounding model - &lt;strong&gt;Required&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--grounding_width&lt;/code&gt;&lt;/strong&gt;: Width of the output coordinate resolution from the grounding model - &lt;strong&gt;Required&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--grounding_height&lt;/code&gt;&lt;/strong&gt;: Height of the output coordinate resolution from the grounding model - &lt;strong&gt;Required&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Optional Parameters&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--model_temperature&lt;/code&gt;&lt;/strong&gt;: The temperature to fix all model calls to (necessary to set to 1.0 for models like o3 but can be left blank for other models)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Grounding Model Dimensions&lt;/h4&gt; 
&lt;p&gt;The grounding width and height should match the output coordinate resolution of your grounding model:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;UI-TARS-1.5-7B&lt;/strong&gt;: Use &lt;code&gt;--grounding_width 1920 --grounding_height 1080&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UI-TARS-72B&lt;/strong&gt;: Use &lt;code&gt;--grounding_width 1000 --grounding_height 1000&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Optional Parameters&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--model_url&lt;/code&gt;&lt;/strong&gt;: Custom API URL for main generation model - Default: ""&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--model_api_key&lt;/code&gt;&lt;/strong&gt;: API key for main generation model - Default: ""&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--ground_api_key&lt;/code&gt;&lt;/strong&gt;: API key for grounding model endpoint - Default: ""&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--max_trajectory_length&lt;/code&gt;&lt;/strong&gt;: Maximum number of image turns to keep in trajectory - Default: 8&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--enable_reflection&lt;/code&gt;&lt;/strong&gt;: Enable reflection agent to assist the worker agent - Default: True&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;--enable_local_env&lt;/code&gt;&lt;/strong&gt;: Enable local coding environment for code execution (WARNING: Executes arbitrary code locally) - Default: False&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Local Coding Environment Details&lt;/h4&gt; 
&lt;p&gt;The local coding environment enables Agent S3 to execute Python and Bash code directly on your machine. This is particularly useful for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Data Processing&lt;/strong&gt;: Manipulating spreadsheets, CSV files, or databases&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;File Operations&lt;/strong&gt;: Bulk file processing, content extraction, or file organization&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;System Automation&lt;/strong&gt;: Configuration changes, system setup, or automation scripts&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Code Development&lt;/strong&gt;: Writing, editing, or executing code files&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Text Processing&lt;/strong&gt;: Document manipulation, content editing, or formatting&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When enabled, the agent can use the &lt;code&gt;call_code_agent&lt;/code&gt; action to execute code blocks for tasks that can be completed through programming rather than GUI interaction.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;: The same Python interpreter used to run Agent S3 (automatically detected)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt;: Available at &lt;code&gt;/bin/bash&lt;/code&gt; (standard on macOS and Linux)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;System Permissions&lt;/strong&gt;: The agent runs with the same permissions as the user executing it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Security Considerations:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The local environment executes arbitrary code with the same permissions as the user running the agent&lt;/li&gt; 
 &lt;li&gt;Only enable this feature in trusted environments&lt;/li&gt; 
 &lt;li&gt;Be cautious when the agent generates code for system-level operations&lt;/li&gt; 
 &lt;li&gt;Consider running in a sandboxed environment for untrusted tasks&lt;/li&gt; 
 &lt;li&gt;Bash scripts are executed with a 30-second timeout to prevent hanging processes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;gui_agents&lt;/code&gt; SDK&lt;/h3&gt; 
&lt;p&gt;First, we import the necessary modules. &lt;code&gt;AgentS3&lt;/code&gt; is the main agent class for Agent S3. &lt;code&gt;OSWorldACI&lt;/code&gt; is our grounding agent that translates agent actions into executable python code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import pyautogui
import io
from gui_agents.s3.agents.agent_s import AgentS3
from gui_agents.s3.agents.grounding import OSWorldACI
from gui_agents.s3.utils.local_env import LocalEnv  # Optional: for local coding environment

# Load in your API keys.
from dotenv import load_dotenv
load_dotenv()

current_platform = "linux"  # "darwin", "windows"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we define our engine parameters. &lt;code&gt;engine_params&lt;/code&gt; is used for the main agent, and &lt;code&gt;engine_params_for_grounding&lt;/code&gt; is for grounding. For &lt;code&gt;engine_params_for_grounding&lt;/code&gt;, we support custom endpoints like HuggingFace TGI, vLLM, and Open Router.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;engine_params = {
  "engine_type": provider,
  "model": model,
  "base_url": model_url,           # Optional
  "api_key": model_api_key,        # Optional
  "temperature": model_temperature # Optional
}

# Load the grounding engine from a custom endpoint
ground_provider = "&amp;lt;your_ground_provider&amp;gt;"
ground_url = "&amp;lt;your_ground_url&amp;gt;"
ground_model = "&amp;lt;your_ground_model&amp;gt;"
ground_api_key = "&amp;lt;your_ground_api_key&amp;gt;"

# Set grounding dimensions based on your model's output coordinate resolution
# UI-TARS-1.5-7B: grounding_width=1920, grounding_height=1080
# UI-TARS-72B: grounding_width=1000, grounding_height=1000
grounding_width = 1920  # Width of output coordinate resolution
grounding_height = 1080  # Height of output coordinate resolution

engine_params_for_grounding = {
  "engine_type": ground_provider,
  "model": ground_model,
  "base_url": ground_url,
  "api_key": ground_api_key,  # Optional
  "grounding_width": grounding_width,
  "grounding_height": grounding_height,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, we define our grounding agent and Agent S3.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# Optional: Enable local coding environment
enable_local_env = False  # Set to True to enable local code execution
local_env = LocalEnv() if enable_local_env else None

grounding_agent = OSWorldACI(
    env=local_env,  # Pass local_env for code execution capability
    platform=current_platform,
    engine_params_for_generation=engine_params,
    engine_params_for_grounding=engine_params_for_grounding,
    width=1920,  # Optional: screen width
    height=1080  # Optional: screen height
)

agent = AgentS3(
    engine_params,
    grounding_agent,
    platform=current_platform,
    max_trajectory_length=8,  # Optional: maximum image turns to keep
    enable_reflection=True     # Optional: enable reflection agent
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, let's query the agent!&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;# Get screenshot.
screenshot = pyautogui.screenshot()
buffered = io.BytesIO() 
screenshot.save(buffered, format="PNG")
screenshot_bytes = buffered.getvalue()

obs = {
  "screenshot": screenshot_bytes,
}

instruction = "Close VS Code"
info, action = agent.predict(instruction=instruction, observation=obs)

exec(action[0])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refer to &lt;code&gt;gui_agents/s3/cli_app.py&lt;/code&gt; for more details on how the inference loop works.&lt;/p&gt; 
&lt;h3&gt;OSWorld&lt;/h3&gt; 
&lt;p&gt;To deploy Agent S3 in OSWorld, follow the &lt;a href="https://raw.githubusercontent.com/simular-ai/Agent-S/main/osworld_setup/s3/OSWorld.md"&gt;OSWorld Deployment instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üí¨ Citations&lt;/h2&gt; 
&lt;p&gt;If you find this codebase useful, please cite:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@misc{Agent-S3,
      title={The Unreasonable Effectiveness of Scaling Agents for Computer Use}, 
      author={Gonzalo Gonzalez-Pumariega and Vincent Tu and Chih-Lun Lee and Jiachen Yang and Ang Li and Xin Eric Wang},
      year={2025},
      eprint={2510.02250},
      archivePrefix={arXiv},
      primaryClass={cs.AI},
      url={https://arxiv.org/abs/2510.02250}, 
}

@misc{Agent-S2,
      title={Agent S2: A Compositional Generalist-Specialist Framework for Computer Use Agents}, 
      author={Saaket Agashe and Kyle Wong and Vincent Tu and Jiachen Yang and Ang Li and Xin Eric Wang},
      year={2025},
      eprint={2504.00906},
      archivePrefix={arXiv},
      primaryClass={cs.AI},
      url={https://arxiv.org/abs/2504.00906}, 
}

@inproceedings{Agent-S,
    title={{Agent S: An Open Agentic Framework that Uses Computers Like a Human}},
    author={Saaket Agashe and Jiuzhou Han and Shuyu Gan and Jiachen Yang and Ang Li and Xin Eric Wang},
    booktitle={International Conference on Learning Representations (ICLR)},
    year={2025},
    url={https://arxiv.org/abs/2410.08164}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#simular-ai/Agent-S&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=simular-ai/Agent-S&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>comfyanonymous/ComfyUI</title>
      <link>https://github.com/comfyanonymous/ComfyUI</link>
      <description>&lt;p&gt;The most powerful and modular diffusion model GUI, api and backend with a graph/nodes interface.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;ComfyUI&lt;/h1&gt; 
 &lt;p&gt;&lt;strong&gt;The most powerful and modular visual AI engine and application.&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://www.comfy.org/"&gt;&lt;img src="https://img.shields.io/badge/ComfyOrg-4285F4?style=flat" alt="Website" /&gt;&lt;/a&gt; &lt;a href="https://www.comfy.org/discord"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscord.com%2Fapi%2Finvites%2Fcomfyorg%3Fwith_counts%3Dtrue&amp;amp;query=%24.approximate_member_count&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;label=Discord&amp;amp;color=green&amp;amp;suffix=%20total" alt="Dynamic JSON Badge" /&gt;&lt;/a&gt; &lt;a href="https://x.com/ComfyUI"&gt;&lt;img src="https://img.shields.io/twitter/follow/ComfyUI" alt="Twitter" /&gt;&lt;/a&gt; &lt;a href="https://app.element.io/#/room/%23comfyui_space%3Amatrix.org"&gt;&lt;img src="https://img.shields.io/badge/Matrix-000000?style=flat&amp;amp;logo=matrix&amp;amp;logoColor=white" alt="Matrix" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/comfyanonymous/ComfyUI/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/comfyanonymous/ComfyUI?style=flat&amp;amp;sort=semver" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/comfyanonymous/ComfyUI/releases"&gt;&lt;img src="https://img.shields.io/github/release-date/comfyanonymous/ComfyUI?style=flat" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/comfyanonymous/ComfyUI/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/comfyanonymous/ComfyUI/total?style=flat" alt="" /&gt;&lt;/a&gt; &lt;a href="https://github.com/comfyanonymous/ComfyUI/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/comfyanonymous/ComfyUI/latest/total?style=flat&amp;amp;label=downloads%40latest" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;!-- Workaround to display total user from https://github.com/badges/shields/issues/4500#issuecomment-2060079995 --&gt; 
 &lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/7ccaf2c1-9b72-41ae-9a89-5688c94b7abe" alt="ComfyUI Screenshot" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;ComfyUI lets you design and execute advanced stable diffusion pipelines using a graph/nodes/flowchart based interface. Available on Windows, Linux, and macOS.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;h4&gt;&lt;a href="https://www.comfy.org/download"&gt;Desktop Application&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The easiest way to get started.&lt;/li&gt; 
 &lt;li&gt;Available on Windows &amp;amp; macOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/#installing"&gt;Windows Portable Package&lt;/a&gt;&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get the latest commits and completely portable.&lt;/li&gt; 
 &lt;li&gt;Available on Windows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/#manual-install-windows-linux"&gt;Manual Install&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Supports all operating systems and GPU types (NVIDIA, AMD, Intel, Apple Silicon, Ascend).&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/"&gt;Examples&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;See what ComfyUI can do with the &lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/"&gt;example workflows&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nodes/graph/flowchart interface to experiment and create complex Stable Diffusion workflows without needing to code anything.&lt;/li&gt; 
 &lt;li&gt;Image Models 
  &lt;ul&gt; 
   &lt;li&gt;SD1.x, SD2.x (&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/unclip/"&gt;unCLIP&lt;/a&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/sdxl/"&gt;SDXL&lt;/a&gt;, &lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/sdturbo/"&gt;SDXL Turbo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/stable_cascade/"&gt;Stable Cascade&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/sd3/"&gt;SD3 and SD3.5&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Pixart Alpha and Sigma&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/aura_flow/"&gt;AuraFlow&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/hunyuan_dit/"&gt;HunyuanDiT&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/flux/"&gt;Flux&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/lumina2/"&gt;Lumina Image 2.0&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/hidream/"&gt;HiDream&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/qwen_image/"&gt;Qwen Image&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/hunyuan_image/"&gt;Hunyuan Image 2.1&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Image Editing Models 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/omnigen/"&gt;Omnigen 2&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/flux/#flux-kontext-image-editing-model"&gt;Flux Kontext&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/hidream/#hidream-e11"&gt;HiDream E1.1&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/qwen_image/#edit-model"&gt;Qwen Image Edit&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Video Models 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/video/"&gt;Stable Video Diffusion&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/mochi/"&gt;Mochi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/ltxv/"&gt;LTX-Video&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/hunyuan_video/"&gt;Hunyuan Video&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/wan/"&gt;Wan 2.1&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/wan22/"&gt;Wan 2.2&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Audio Models 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/audio/"&gt;Stable Audio&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/audio/"&gt;ACE Step&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;3D Models 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.comfy.org/tutorials/3d/hunyuan3D-2"&gt;Hunyuan3D 2.0&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Asynchronous Queue system&lt;/li&gt; 
 &lt;li&gt;Many optimizations: Only re-executes the parts of the workflow that changes between executions.&lt;/li&gt; 
 &lt;li&gt;Smart memory management: can automatically run large models on GPUs with as low as 1GB vram with smart offloading.&lt;/li&gt; 
 &lt;li&gt;Works even if you don't have a GPU with: &lt;code&gt;--cpu&lt;/code&gt; (slow)&lt;/li&gt; 
 &lt;li&gt;Can load ckpt and safetensors: All in one checkpoints or standalone diffusion models, VAEs and CLIP models.&lt;/li&gt; 
 &lt;li&gt;Safe loading of ckpt, pt, pth, etc.. files.&lt;/li&gt; 
 &lt;li&gt;Embeddings/Textual inversion&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/lora/"&gt;Loras (regular, locon and loha)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/hypernetworks/"&gt;Hypernetworks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Loading full workflows (with seeds) from generated PNG, WebP and FLAC files.&lt;/li&gt; 
 &lt;li&gt;Saving/Loading workflows as Json files.&lt;/li&gt; 
 &lt;li&gt;Nodes interface can be used to create complex workflows like one for &lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/2_pass_txt2img/"&gt;Hires fix&lt;/a&gt; or much more advanced ones.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/area_composition/"&gt;Area Composition&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/inpaint/"&gt;Inpainting&lt;/a&gt; with both regular and inpainting models.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/controlnet/"&gt;ControlNet and T2I-Adapter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/upscale_models/"&gt;Upscale Models (ESRGAN, ESRGAN variants, SwinIR, Swin2SR, etc...)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/gligen/"&gt;GLIGEN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/model_merging/"&gt;Model Merging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/lcm/"&gt;LCM models and Loras&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Latent previews with &lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/#how-to-show-high-quality-previews"&gt;TAESD&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Works fully offline: core will never download anything unless you want to.&lt;/li&gt; 
 &lt;li&gt;Optional API nodes to use paid models from external providers through the online &lt;a href="https://docs.comfy.org/tutorials/api-nodes/overview"&gt;Comfy API&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/extra_model_paths.yaml.example"&gt;Config file&lt;/a&gt; to set the search paths for models.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Workflow examples can be found on the &lt;a href="https://comfyanonymous.github.io/ComfyUI_examples/"&gt;Examples page&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Release Process&lt;/h2&gt; 
&lt;p&gt;ComfyUI follows a weekly release cycle targeting Friday but this regularly changes because of model releases or large changes to the codebase. There are three interconnected repositories:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/comfyanonymous/ComfyUI"&gt;ComfyUI Core&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Releases a new stable version (e.g., v0.7.0)&lt;/li&gt; 
   &lt;li&gt;Serves as the foundation for the desktop release&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/Comfy-Org/desktop"&gt;ComfyUI Desktop&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Builds a new release using the latest stable core version&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/Comfy-Org/ComfyUI_frontend"&gt;ComfyUI Frontend&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Weekly frontend updates are merged into the core repository&lt;/li&gt; 
   &lt;li&gt;Features are frozen for the upcoming core release&lt;/li&gt; 
   &lt;li&gt;Development continues for the next release cycle&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Shortcuts&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Keybind&lt;/th&gt; 
   &lt;th&gt;Explanation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Queue up current graph for generation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Queue up current graph as first for generation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Cancel current generation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Z&lt;/code&gt;/&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Y&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Undo/Redo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;S&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Save workflow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;O&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load workflow&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;A&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Select all nodes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt &lt;/code&gt;+ &lt;code&gt;C&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Collapse/uncollapse selected nodes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;M&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Mute/unmute selected nodes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;B&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bypass selected nodes (acts like the node was removed from the graph and the wires reconnected through)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Delete&lt;/code&gt;/&lt;code&gt;Backspace&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Delete selected nodes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Backspace&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Delete the current graph&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Space&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Move the canvas around when held and moving the cursor&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt;/&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Click&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Add clicked node to selection&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt;/&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;V&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Copy and paste selected nodes (without maintaining connections to outputs of unselected nodes)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt;/&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;V&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Copy and paste selected nodes (maintaining connections from outputs of unselected nodes to inputs of pasted nodes)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Drag&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Move multiple selected nodes at the same time&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load default graph&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;+&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Canvas Zoom in&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;-&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Canvas Zoom out&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + LMB + Vertical drag&lt;/td&gt; 
   &lt;td&gt;Canvas Zoom in/out&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pin/Unpin selected nodes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;G&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Group selected nodes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle visibility of the queue&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;H&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Toggle visibility of history&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Refresh graph&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;F&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Show/Hide menu&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Fit view to selection (Whole graph when nothing is selected)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Double-Click LMB&lt;/td&gt; 
   &lt;td&gt;Open node quick search palette&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Shift&lt;/code&gt; + Drag&lt;/td&gt; 
   &lt;td&gt;Move multiple wires at once&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + LMB&lt;/td&gt; 
   &lt;td&gt;Disconnect all wires from clicked slot&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; can also be replaced with &lt;code&gt;Cmd&lt;/code&gt; instead for macOS users&lt;/p&gt; 
&lt;h1&gt;Installing&lt;/h1&gt; 
&lt;h2&gt;Windows Portable&lt;/h2&gt; 
&lt;p&gt;There is a portable standalone build for Windows that should work for running on Nvidia GPUs or for running on your CPU only on the &lt;a href="https://github.com/comfyanonymous/ComfyUI/releases"&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;a href="https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia.7z"&gt;Direct link to download&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Simply download, extract with &lt;a href="https://7-zip.org"&gt;7-Zip&lt;/a&gt; and run. Make sure you put your Stable Diffusion checkpoints/models (the huge ckpt/safetensors files) in: ComfyUI\models\checkpoints&lt;/p&gt; 
&lt;p&gt;If you have trouble extracting it, right click the file -&amp;gt; properties -&amp;gt; unblock&lt;/p&gt; 
&lt;h4&gt;Alternative Downloads:&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_amd.7z"&gt;Experimental portable for AMD GPUs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/comfyanonymous/ComfyUI/releases/latest/download/ComfyUI_windows_portable_nvidia_cu128.7z"&gt;Portable with pytorch cuda 12.8 and python 3.12&lt;/a&gt; (Supports Nvidia 10 series and older GPUs).&lt;/p&gt; 
&lt;h4&gt;How do I share models between another UI and ComfyUI?&lt;/h4&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/extra_model_paths.yaml.example"&gt;Config file&lt;/a&gt; to set the search paths for models. In the standalone windows build you can find this file in the ComfyUI directory. Rename this file to extra_model_paths.yaml and edit it with your favorite text editor.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://docs.comfy.org/comfy-cli/getting-started"&gt;comfy-cli&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;You can install and start ComfyUI using comfy-cli:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install comfy-cli
comfy install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Manual Install (Windows, Linux)&lt;/h2&gt; 
&lt;p&gt;Python 3.13 is very well supported. If you have trouble with some custom node dependencies you can try 3.12&lt;/p&gt; 
&lt;p&gt;Git clone this repo.&lt;/p&gt; 
&lt;p&gt;Put your SD checkpoints (the huge ckpt/safetensors files) in: models/checkpoints&lt;/p&gt; 
&lt;p&gt;Put your VAE in: models/vae&lt;/p&gt; 
&lt;h3&gt;AMD GPUs (Linux)&lt;/h3&gt; 
&lt;p&gt;AMD users can install rocm and pytorch with pip if you don't have it already installed, this is the command to install the stable version:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm6.4&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This is the command to install the nightly with ROCm 7.0 which might have some performance improvements:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm7.0&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;AMD GPUs (Experimental: Windows and Linux), RDNA 3, 3.5 and 4 only.&lt;/h3&gt; 
&lt;p&gt;These have less hardware support than the builds above but they work on windows. You also need to install the pytorch version specific to your hardware.&lt;/p&gt; 
&lt;p&gt;RDNA 3 (RX 7000 series):&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install --pre torch torchvision torchaudio --index-url https://rocm.nightlies.amd.com/v2/gfx110X-dgpu/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;RDNA 3.5 (Strix halo/Ryzen AI Max+ 365):&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install --pre torch torchvision torchaudio --index-url https://rocm.nightlies.amd.com/v2/gfx1151/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;RDNA 4 (RX 9000 series):&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install --pre torch torchvision torchaudio --index-url https://rocm.nightlies.amd.com/v2/gfx120X-all/&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Intel GPUs (Windows and Linux)&lt;/h3&gt; 
&lt;p&gt;(Option 1) Intel Arc GPU users can install native PyTorch with torch.xpu support using pip. More information can be found &lt;a href="https://pytorch.org/docs/main/notes/get_start_xpu.html"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;To install PyTorch xpu, use the following command:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;code&gt;pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/xpu&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This is the command to install the Pytorch xpu nightly which might have some performance improvements:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;(Option 2) Alternatively, Intel GPUs supported by Intel Extension for PyTorch (IPEX) can leverage IPEX for improved performance.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;visit &lt;a href="https://intel.github.io/intel-extension-for-pytorch/index.html#installation?platform=gpu"&gt;Installation&lt;/a&gt; for more information.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;NVIDIA&lt;/h3&gt; 
&lt;p&gt;Nvidia users should install stable pytorch using this command:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu129&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This is the command to install pytorch nightly instead which might have performance improvements.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu130&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Troubleshooting&lt;/h4&gt; 
&lt;p&gt;If you get the "Torch not compiled with CUDA enabled" error, uninstall torch with:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip uninstall torch&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;And install it again with the command above.&lt;/p&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;p&gt;Install the dependencies by opening your terminal inside the ComfyUI folder and:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;After this you should have everything installed and can proceed to running ComfyUI.&lt;/p&gt; 
&lt;h3&gt;Others:&lt;/h3&gt; 
&lt;h4&gt;Apple Mac silicon&lt;/h4&gt; 
&lt;p&gt;You can install ComfyUI in Apple Mac silicon (M1 or M2) with any recent macOS version.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install pytorch nightly. For instructions, read the &lt;a href="https://developer.apple.com/metal/pytorch/"&gt;Accelerated PyTorch training on Mac&lt;/a&gt; Apple Developer guide (make sure to install the latest pytorch nightly).&lt;/li&gt; 
 &lt;li&gt;Follow the &lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/#manual-install-windows-linux"&gt;ComfyUI manual installation&lt;/a&gt; instructions for Windows and Linux.&lt;/li&gt; 
 &lt;li&gt;Install the ComfyUI &lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/#dependencies"&gt;dependencies&lt;/a&gt;. If you have another Stable Diffusion UI &lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/#i-already-have-another-ui-for-stable-diffusion-installed-do-i-really-have-to-install-all-of-these-dependencies"&gt;you might be able to reuse the dependencies&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Launch ComfyUI by running &lt;code&gt;python main.py&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Remember to add your models, VAE, LoRAs etc. to the corresponding Comfy folders, as discussed in &lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/#manual-install-windows-linux"&gt;ComfyUI manual installation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Ascend NPUs&lt;/h4&gt; 
&lt;p&gt;For models compatible with Ascend Extension for PyTorch (torch_npu). To get started, ensure your environment meets the prerequisites outlined on the &lt;a href="https://ascend.github.io/docs/sources/ascend/quick_install.html"&gt;installation&lt;/a&gt; page. Here's a step-by-step guide tailored to your platform and installation method:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Begin by installing the recommended or newer kernel version for Linux as specified in the Installation page of torch-npu, if necessary.&lt;/li&gt; 
 &lt;li&gt;Proceed with the installation of Ascend Basekit, which includes the driver, firmware, and CANN, following the instructions provided for your specific platform.&lt;/li&gt; 
 &lt;li&gt;Next, install the necessary packages for torch-npu by adhering to the platform-specific instructions on the &lt;a href="https://ascend.github.io/docs/sources/pytorch/install.html#pytorch"&gt;Installation&lt;/a&gt; page.&lt;/li&gt; 
 &lt;li&gt;Finally, adhere to the &lt;a href="https://raw.githubusercontent.com/comfyanonymous/ComfyUI/master/#manual-install-windows-linux"&gt;ComfyUI manual installation&lt;/a&gt; guide for Linux. Once all components are installed, you can run ComfyUI as described earlier.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Cambricon MLUs&lt;/h4&gt; 
&lt;p&gt;For models compatible with Cambricon Extension for PyTorch (torch_mlu). Here's a step-by-step guide tailored to your platform and installation method:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the Cambricon CNToolkit by adhering to the platform-specific instructions on the &lt;a href="https://www.cambricon.com/docs/sdk_1.15.0/cntoolkit_3.7.2/cntoolkit_install_3.7.2/index.html"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Next, install the PyTorch(torch_mlu) following the instructions on the &lt;a href="https://www.cambricon.com/docs/sdk_1.15.0/cambricon_pytorch_1.17.0/user_guide_1.9/index.html"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Launch ComfyUI by running &lt;code&gt;python main.py&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Iluvatar Corex&lt;/h4&gt; 
&lt;p&gt;For models compatible with Iluvatar Extension for PyTorch. Here's a step-by-step guide tailored to your platform and installation method:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the Iluvatar Corex Toolkit by adhering to the platform-specific instructions on the &lt;a href="https://support.iluvatar.com/#/DocumentCentre?id=1&amp;amp;nameCenter=2&amp;amp;productId=520117912052801536"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Launch ComfyUI by running &lt;code&gt;python main.py&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Running&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;python main.py&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;For AMD cards not officially supported by ROCm&lt;/h3&gt; 
&lt;p&gt;Try running it with this command if you have issues:&lt;/p&gt; 
&lt;p&gt;For 6700, 6600 and maybe other RDNA2 or older: &lt;code&gt;HSA_OVERRIDE_GFX_VERSION=10.3.0 python main.py&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For AMD 7600 and maybe other RDNA3 cards: &lt;code&gt;HSA_OVERRIDE_GFX_VERSION=11.0.0 python main.py&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;AMD ROCm Tips&lt;/h3&gt; 
&lt;p&gt;You can enable experimental memory efficient attention on recent pytorch in ComfyUI on some AMD GPUs using this command, it should already be enabled by default on RDNA3. If this improves speed for you on latest pytorch on your GPU please report it so that I can enable it by default.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;TORCH_ROCM_AOTRITON_ENABLE_EXPERIMENTAL=1 python main.py --use-pytorch-cross-attention&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can also try setting this env variable &lt;code&gt;PYTORCH_TUNABLEOP_ENABLED=1&lt;/code&gt; which might speed things up at the cost of a very slow initial run.&lt;/p&gt; 
&lt;h1&gt;Notes&lt;/h1&gt; 
&lt;p&gt;Only parts of the graph that have an output with all the correct inputs will be executed.&lt;/p&gt; 
&lt;p&gt;Only parts of the graph that change from each execution to the next will be executed, if you submit the same graph twice only the first will be executed. If you change the last part of the graph only the part you changed and the part that depends on it will be executed.&lt;/p&gt; 
&lt;p&gt;Dragging a generated png on the webpage or loading one will give you the full workflow including seeds that were used to create it.&lt;/p&gt; 
&lt;p&gt;You can use () to change emphasis of a word or phrase like: (good code:1.2) or (bad code:0.8). The default emphasis for () is 1.1. To use () characters in your actual prompt escape them like \( or \).&lt;/p&gt; 
&lt;p&gt;You can use {day|night}, for wildcard/dynamic prompts. With this syntax "{wild|card|test}" will be randomly replaced by either "wild", "card" or "test" by the frontend every time you queue the prompt. To use {} characters in your actual prompt escape them like: \{ or \}.&lt;/p&gt; 
&lt;p&gt;Dynamic prompts also support C-style comments, like &lt;code&gt;// comment&lt;/code&gt; or &lt;code&gt;/* comment */&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To use a textual inversion concepts/embeddings in a text prompt put them in the models/embeddings directory and use them in the CLIPTextEncode node like this (you can omit the .pt extension):&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;embedding:embedding_filename.pt&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;How to show high-quality previews?&lt;/h2&gt; 
&lt;p&gt;Use &lt;code&gt;--preview-method auto&lt;/code&gt; to enable previews.&lt;/p&gt; 
&lt;p&gt;The default installation includes a fast latent preview method that's low-resolution. To enable higher-quality previews with &lt;a href="https://github.com/madebyollin/taesd"&gt;TAESD&lt;/a&gt;, download the &lt;a href="https://github.com/madebyollin/taesd/"&gt;taesd_decoder.pth, taesdxl_decoder.pth, taesd3_decoder.pth and taef1_decoder.pth&lt;/a&gt; and place them in the &lt;code&gt;models/vae_approx&lt;/code&gt; folder. Once they're installed, restart ComfyUI and launch it with &lt;code&gt;--preview-method taesd&lt;/code&gt; to enable high-quality previews.&lt;/p&gt; 
&lt;h2&gt;How to use TLS/SSL?&lt;/h2&gt; 
&lt;p&gt;Generate a self-signed certificate (not appropriate for shared/production use) and key by running the command: &lt;code&gt;openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 3650 -nodes -subj "/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=CommonNameOrHostname"&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;--tls-keyfile key.pem --tls-certfile cert.pem&lt;/code&gt; to enable TLS/SSL, the app will now be accessible with &lt;code&gt;https://...&lt;/code&gt; instead of &lt;code&gt;http://...&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Windows users can use &lt;a href="https://github.com/alexisrolland/docker-openssl"&gt;alexisrolland/docker-openssl&lt;/a&gt; or one of the &lt;a href="https://wiki.openssl.org/index.php/Binaries"&gt;3rd party binary distributions&lt;/a&gt; to run the command example above. &lt;br /&gt;&lt;br /&gt;If you use a container, note that the volume mount &lt;code&gt;-v&lt;/code&gt; can be a relative path so &lt;code&gt;... -v ".\:/openssl-certs" ...&lt;/code&gt; would create the key &amp;amp; cert files in the current directory of your command prompt or powershell terminal.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support and dev channel&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://comfy.org/discord"&gt;Discord&lt;/a&gt;: Try the #help or #feedback channels.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://app.element.io/#/room/%23comfyui_space%3Amatrix.org"&gt;Matrix space: #comfyui_space:matrix.org&lt;/a&gt; (it's like discord but open source).&lt;/p&gt; 
&lt;p&gt;See also: &lt;a href="https://www.comfy.org/"&gt;https://www.comfy.org/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Frontend Development&lt;/h2&gt; 
&lt;p&gt;As of August 15, 2024, we have transitioned to a new frontend, which is now hosted in a separate repository: &lt;a href="https://github.com/Comfy-Org/ComfyUI_frontend"&gt;ComfyUI Frontend&lt;/a&gt;. This repository now hosts the compiled JS (from TS/Vue) under the &lt;code&gt;web/&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h3&gt;Reporting Issues and Requesting Features&lt;/h3&gt; 
&lt;p&gt;For any bugs, issues, or feature requests related to the frontend, please use the &lt;a href="https://github.com/Comfy-Org/ComfyUI_frontend"&gt;ComfyUI Frontend repository&lt;/a&gt;. This will help us manage and address frontend-specific concerns more efficiently.&lt;/p&gt; 
&lt;h3&gt;Using the Latest Frontend&lt;/h3&gt; 
&lt;p&gt;The new frontend is now the default for ComfyUI. However, please note:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The frontend in the main ComfyUI repository is updated fortnightly.&lt;/li&gt; 
 &lt;li&gt;Daily releases are available in the separate frontend repository.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To use the most up-to-date frontend version:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;For the latest daily release, launch ComfyUI with this command line argument:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;--front-end-version Comfy-Org/ComfyUI_frontend@latest
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;For a specific version, replace &lt;code&gt;latest&lt;/code&gt; with the desired version number:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;--front-end-version Comfy-Org/ComfyUI_frontend@1.2.2
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This approach allows you to easily switch between the stable fortnightly release and the cutting-edge daily updates, or even specific versions for testing purposes.&lt;/p&gt; 
&lt;h3&gt;Accessing the Legacy Frontend&lt;/h3&gt; 
&lt;p&gt;If you need to use the legacy frontend for any reason, you can access it using the following command line argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--front-end-version Comfy-Org/ComfyUI_legacy_frontend@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will use a snapshot of the legacy frontend preserved in the &lt;a href="https://github.com/Comfy-Org/ComfyUI_legacy_frontend"&gt;ComfyUI Legacy Frontend repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;QA&lt;/h1&gt; 
&lt;h3&gt;Which GPU should I buy for this?&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/comfyanonymous/ComfyUI/wiki/Which-GPU-should-I-buy-for-ComfyUI"&gt;See this page for some recommendations&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zie619/n8n-workflows</title>
      <link>https://github.com/Zie619/n8n-workflows</link>
      <description>&lt;p&gt;all of the workflows of n8n i could find (also from the site itself)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;‚ö° N8N Workflow Collection &amp;amp; Documentation&lt;/h1&gt; 
&lt;p&gt;A professionally organized collection of &lt;strong&gt;2,057 n8n workflows&lt;/strong&gt; with a lightning-fast documentation system that provides instant search, analysis, and browsing capabilities.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;‚ö†Ô∏è IMPORTANT NOTICE (Aug 14, 2025):&lt;/strong&gt; Repository history has been rewritten due to DMCA compliance. If you have a fork or local clone, please see &lt;a href="https://github.com/Zie619/n8n-workflows/issues/85"&gt;Issue 85&lt;/a&gt; for instructions on syncing your copy.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support My Work&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/zie619"&gt;&lt;img src="https://img.shields.io/badge/-Buy%20Me%20a%20Coffee-ffdd00?logo=buy-me-a-coffee&amp;amp;logoColor=black&amp;amp;style=flat" alt="Buy Me a Coffee" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you'd like to say thanks, consider buying me a coffee‚Äîyour support helps me keep improving this project!&lt;/p&gt; 
&lt;h2&gt;üöÄ &lt;strong&gt;NEW: Public Search Interface &amp;amp; High-Performance Documentation&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;üåê &lt;a href="https://zie619.github.io/n8n-workflows"&gt;Browse workflows online&lt;/a&gt; - No installation required!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Or run locally for development with 100x performance improvement:&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Option 1: Online Search (Recommended for Users)&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;üîó Visit: &lt;a href="https://zie619.github.io/n8n-workflows"&gt;zie619.github.io/n8n-workflows&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚ö° &lt;strong&gt;Instant access&lt;/strong&gt; - No setup required&lt;/li&gt; 
 &lt;li&gt;üîç &lt;strong&gt;Search 2,057+ workflows&lt;/strong&gt; directly in browser&lt;/li&gt; 
 &lt;li&gt;üì± &lt;strong&gt;Mobile-friendly&lt;/strong&gt; interface&lt;/li&gt; 
 &lt;li&gt;üè∑Ô∏è &lt;strong&gt;Category filtering&lt;/strong&gt; across 15 categories&lt;/li&gt; 
 &lt;li&gt;üì• &lt;strong&gt;Direct download&lt;/strong&gt; of workflow JSON files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Option 2: Local Development System&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install dependencies
pip install -r requirements.txt

# Start the fast API server
python run.py

# Open in browser
http://localhost:8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚ö° &lt;strong&gt;Sub-100ms response times&lt;/strong&gt; with SQLite FTS5 search&lt;/li&gt; 
 &lt;li&gt;üîç &lt;strong&gt;Instant full-text search&lt;/strong&gt; with advanced filtering&lt;/li&gt; 
 &lt;li&gt;üì± &lt;strong&gt;Responsive design&lt;/strong&gt; - works perfectly on mobile&lt;/li&gt; 
 &lt;li&gt;üåô &lt;strong&gt;Dark/light themes&lt;/strong&gt; with system preference detection&lt;/li&gt; 
 &lt;li&gt;üìä &lt;strong&gt;Live statistics&lt;/strong&gt; - 365 unique integrations, 29,445 total nodes&lt;/li&gt; 
 &lt;li&gt;üéØ &lt;strong&gt;Smart categorization&lt;/strong&gt; by trigger type and complexity&lt;/li&gt; 
 &lt;li&gt;üéØ &lt;strong&gt;Use case categorization&lt;/strong&gt; by service name mapped to categories&lt;/li&gt; 
 &lt;li&gt;üìÑ &lt;strong&gt;On-demand JSON viewing&lt;/strong&gt; and download&lt;/li&gt; 
 &lt;li&gt;üîó &lt;strong&gt;Mermaid diagram generation&lt;/strong&gt; for workflow visualization&lt;/li&gt; 
 &lt;li&gt;üîÑ &lt;strong&gt;Real-time workflow naming&lt;/strong&gt; with intelligent formatting&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Performance Comparison&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Metric&lt;/th&gt; 
   &lt;th&gt;Old System&lt;/th&gt; 
   &lt;th&gt;New System&lt;/th&gt; 
   &lt;th&gt;Improvement&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;File Size&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;71MB HTML&lt;/td&gt; 
   &lt;td&gt;&amp;lt;100KB&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;700x smaller&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Load Time&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;10+ seconds&lt;/td&gt; 
   &lt;td&gt;&amp;lt;1 second&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;10x faster&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Search&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Client-side only&lt;/td&gt; 
   &lt;td&gt;Full-text with FTS5&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Instant&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Memory Usage&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;~2GB RAM&lt;/td&gt; 
   &lt;td&gt;&amp;lt;50MB RAM&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;40x less&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Mobile Support&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Poor&lt;/td&gt; 
   &lt;td&gt;Excellent&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Fully responsive&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üìÇ Repository Organization&lt;/h2&gt; 
&lt;h3&gt;Workflow Collection&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;2,057 workflows&lt;/strong&gt; with meaningful, searchable names&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;365 unique integrations&lt;/strong&gt; across popular platforms&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;29,445 total nodes&lt;/strong&gt; with professional categorization&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Quality assurance&lt;/strong&gt; - All workflows analyzed and categorized&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Advanced Naming System ‚ú®&lt;/h3&gt; 
&lt;p&gt;Our intelligent naming system converts technical filenames into readable titles:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;code&gt;2051_Telegram_Webhook_Automation_Webhook.json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;code&gt;Telegram Webhook Automation&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;100% meaningful names&lt;/strong&gt; with smart capitalization&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automatic integration detection&lt;/strong&gt; from node analysis&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Use Case Category ‚ú®&lt;/h3&gt; 
&lt;p&gt;The search interface includes a dropdown filter that lets you browse 2,057+ workflows by category.&lt;/p&gt; 
&lt;p&gt;The system includes an automated categorization feature that organizes workflows by service categories to make them easier to discover and filter.&lt;/p&gt; 
&lt;h3&gt;How Categorization Works&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run the categorization script&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python create_categories.py
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Service Name Recognition&lt;/strong&gt; The script analyzes each workflow JSON filename to identify recognized service names (e.g., "Twilio", "Slack", "Gmail", etc.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Category Mapping&lt;/strong&gt; Each recognized service name is matched to its corresponding category using the definitions in &lt;code&gt;context/def_categories.json&lt;/code&gt;. For example:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Twilio ‚Üí Communication &amp;amp; Messaging&lt;/li&gt; 
   &lt;li&gt;Gmail ‚Üí Communication &amp;amp; Messaging&lt;/li&gt; 
   &lt;li&gt;Airtable ‚Üí Data Processing &amp;amp; Analysis&lt;/li&gt; 
   &lt;li&gt;Salesforce ‚Üí CRM &amp;amp; Sales&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Search Categories Generation&lt;/strong&gt; The script produces a &lt;code&gt;search_categories.json&lt;/code&gt; file that contains the categorized workflow data&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Filter Interface&lt;/strong&gt; Users can then filter workflows by category in the search interface, making it easier to find workflows for specific use cases&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Available Categories&lt;/h3&gt; 
&lt;p&gt;The categorization system includes the following main categories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AI Agent Development&lt;/li&gt; 
 &lt;li&gt;Business Process Automation&lt;/li&gt; 
 &lt;li&gt;Cloud Storage &amp;amp; File Management&lt;/li&gt; 
 &lt;li&gt;Communication &amp;amp; Messaging&lt;/li&gt; 
 &lt;li&gt;Creative Content &amp;amp; Video Automation&lt;/li&gt; 
 &lt;li&gt;Creative Design Automation&lt;/li&gt; 
 &lt;li&gt;CRM &amp;amp; Sales&lt;/li&gt; 
 &lt;li&gt;Data Processing &amp;amp; Analysis&lt;/li&gt; 
 &lt;li&gt;E-commerce &amp;amp; Retail&lt;/li&gt; 
 &lt;li&gt;Financial &amp;amp; Accounting&lt;/li&gt; 
 &lt;li&gt;Marketing &amp;amp; Advertising Automation&lt;/li&gt; 
 &lt;li&gt;Project Management&lt;/li&gt; 
 &lt;li&gt;Social Media Management&lt;/li&gt; 
 &lt;li&gt;Technical Infrastructure &amp;amp; DevOps&lt;/li&gt; 
 &lt;li&gt;Web Scraping &amp;amp; Data Extraction&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contribute Categories&lt;/h3&gt; 
&lt;p&gt;You can help expand the categorization by adding more service-to-category mappings (e.g., Twilio ‚Üí Communication &amp;amp; Messaging) in context/defs_categories.json.&lt;/p&gt; 
&lt;p&gt;Many workflow JSON files are conveniently named with the service name, often separated by underscores (_).&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üõ† Usage Instructions&lt;/h2&gt; 
&lt;h3&gt;Option 1: Modern Fast System (Recommended)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone repository
git clone &amp;lt;repo-url&amp;gt;
cd n8n-workflows

# Install Python dependencies
pip install -r requirements.txt

# Start the documentation server
python run.py

# Browse workflows at http://localhost:8000
# - Instant search across 2,057 workflows
# - Professional responsive interface
# - Real-time workflow statistics
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Option 2: Development Mode&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start with auto-reload for development
python run.py --dev

# Or specify custom host/port
python run.py --host 0.0.0.0 --port 3000

# Force database reindexing
python run.py --reindex
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Import Workflows into n8n&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Use the Python importer (recommended)
python import_workflows.py

# Or manually import individual workflows:
# 1. Open your n8n Editor UI
# 2. Click menu (‚ò∞) ‚Üí Import workflow
# 3. Choose any .json file from the workflows/ folder
# 4. Update credentials/webhook URLs before running
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üìä Workflow Statistics&lt;/h2&gt; 
&lt;h3&gt;Current Collection Stats&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Total Workflows&lt;/strong&gt;: 2,057 automation workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Active Workflows&lt;/strong&gt;: 215 (10.5% active rate)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Total Nodes&lt;/strong&gt;: 29,528 (avg 14.4 nodes per workflow)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Unique Integrations&lt;/strong&gt;: 367 different services and APIs&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: SQLite with FTS5 full-text search&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Trigger Distribution&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Complex&lt;/strong&gt;: 832 workflows (40.4%) - Multi-trigger systems&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Webhook&lt;/strong&gt;: 521 workflows (25.3%) - API-triggered automations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Manual&lt;/strong&gt;: 478 workflows (23.2%) - User-initiated workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scheduled&lt;/strong&gt;: 226 workflows (11.0%) - Time-based executions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Complexity Analysis&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Low (‚â§5 nodes)&lt;/strong&gt;: ~35% - Simple automations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Medium (6-15 nodes)&lt;/strong&gt;: ~45% - Standard workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High (16+ nodes)&lt;/strong&gt;: ~20% - Complex enterprise systems&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Popular Integrations&lt;/h3&gt; 
&lt;p&gt;Top services by usage frequency:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt;: Telegram, Discord, Slack, WhatsApp&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cloud Storage&lt;/strong&gt;: Google Drive, Google Sheets, Dropbox&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Databases&lt;/strong&gt;: PostgreSQL, MySQL, MongoDB, Airtable&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI/ML&lt;/strong&gt;: OpenAI, Anthropic, Hugging Face&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Development&lt;/strong&gt;: HTTP Request, Webhook, GraphQL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üîç Advanced Search Features&lt;/h2&gt; 
&lt;h3&gt;Smart Search Categories&lt;/h3&gt; 
&lt;p&gt;Our system automatically categorizes workflows into 15 main categories:&lt;/p&gt; 
&lt;h4&gt;Available Categories:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;AI Agent Development&lt;/strong&gt;: OpenAI, Anthropic, Hugging Face, CalcsLive&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Business Process Automation&lt;/strong&gt;: Workflow utilities, scheduling, data processing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cloud Storage &amp;amp; File Management&lt;/strong&gt;: Google Drive, Dropbox, OneDrive, Box&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Communication &amp;amp; Messaging&lt;/strong&gt;: Telegram, Discord, Slack, WhatsApp, Email&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Creative Content &amp;amp; Video Automation&lt;/strong&gt;: YouTube, Vimeo, content creation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Creative Design Automation&lt;/strong&gt;: Canva, Figma, image processing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CRM &amp;amp; Sales&lt;/strong&gt;: Salesforce, HubSpot, Pipedrive, customer management&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Processing &amp;amp; Analysis&lt;/strong&gt;: Database operations, analytics, data transformation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;E-commerce &amp;amp; Retail&lt;/strong&gt;: Shopify, Stripe, PayPal, online stores&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Financial &amp;amp; Accounting&lt;/strong&gt;: Financial tools, payment processing, accounting&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Marketing &amp;amp; Advertising Automation&lt;/strong&gt;: Email marketing, campaigns, lead generation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Project Management&lt;/strong&gt;: Jira, Trello, Asana, task management&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Social Media Management&lt;/strong&gt;: LinkedIn, Twitter/X, Facebook, Instagram&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Technical Infrastructure &amp;amp; DevOps&lt;/strong&gt;: GitHub, deployment, monitoring&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web Scraping &amp;amp; Data Extraction&lt;/strong&gt;: HTTP requests, webhooks, data collection&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;API Usage Examples&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Search workflows by text
curl "http://localhost:8000/api/workflows?q=telegram+automation"

# Filter by trigger type and complexity
curl "http://localhost:8000/api/workflows?trigger=Webhook&amp;amp;complexity=high"

# Find all messaging workflows
curl "http://localhost:8000/api/workflows/category/messaging"

# Get database statistics
curl "http://localhost:8000/api/stats"

# Browse available categories
curl "http://localhost:8000/api/categories"
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üèó Technical Architecture&lt;/h2&gt; 
&lt;h3&gt;Modern Stack&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SQLite Database&lt;/strong&gt; - FTS5 full-text search with 365 indexed integrations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;FastAPI Backend&lt;/strong&gt; - RESTful API with automatic OpenAPI documentation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Responsive Frontend&lt;/strong&gt; - Modern HTML5 with embedded CSS/JavaScript&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Smart Analysis&lt;/strong&gt; - Automatic workflow categorization and naming&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Key Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Change Detection&lt;/strong&gt; - MD5 hashing for efficient re-indexing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Background Processing&lt;/strong&gt; - Non-blocking workflow analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Compressed Responses&lt;/strong&gt; - Gzip middleware for optimal speed&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt; - Graceful degradation and comprehensive logging&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mobile Optimization&lt;/strong&gt; - Touch-friendly interface design&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database Performance&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;-- Optimized schema for lightning-fast queries
CREATE TABLE workflows (
    id INTEGER PRIMARY KEY,
    filename TEXT UNIQUE,
    name TEXT,
    active BOOLEAN,
    trigger_type TEXT,
    complexity TEXT,
    node_count INTEGER,
    integrations TEXT,  -- JSON array of 365 unique services
    description TEXT,
    file_hash TEXT,     -- MD5 for change detection
    analyzed_at TIMESTAMP
);

-- Full-text search with ranking
CREATE VIRTUAL TABLE workflows_fts USING fts5(
    filename, name, description, integrations, tags,
    content='workflows', content_rowid='id'
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üîß Setup &amp;amp; Requirements&lt;/h2&gt; 
&lt;h3&gt;System Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Python 3.7+&lt;/strong&gt; - For running the documentation system&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modern Browser&lt;/strong&gt; - Chrome, Firefox, Safari, Edge&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;50MB Storage&lt;/strong&gt; - For SQLite database and indexes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;n8n Instance&lt;/strong&gt; - For importing and running workflows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone repository
git clone &amp;lt;repo-url&amp;gt;
cd n8n-workflows

# Install dependencies
pip install -r requirements.txt

# Start documentation server
python run.py

# Access at http://localhost:8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development Setup&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create virtual environment
python3 -m venv .venv
source .venv/bin/activate  # Linux/Mac
# or .venv\Scripts\activate  # Windows

# Install dependencies
pip install -r requirements.txt

# Run with auto-reload for development
python api_server.py --reload

# Force database reindexing
python workflow_db.py --index --force
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üìã Naming Convention&lt;/h2&gt; 
&lt;h3&gt;Intelligent Formatting System&lt;/h3&gt; 
&lt;p&gt;Our system automatically converts technical filenames to user-friendly names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Automatic transformations:
2051_Telegram_Webhook_Automation_Webhook.json ‚Üí "Telegram Webhook Automation"
0250_HTTP_Discord_Import_Scheduled.json ‚Üí "HTTP Discord Import Scheduled"  
0966_OpenAI_Data_Processing_Manual.json ‚Üí "OpenAI Data Processing Manual"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Technical Format&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;[ID]_[Service1]_[Service2]_[Purpose]_[Trigger].json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Smart Capitalization Rules&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;HTTP&lt;/strong&gt; ‚Üí HTTP (not Http)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;API&lt;/strong&gt; ‚Üí API (not Api)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;webhook&lt;/strong&gt; ‚Üí Webhook&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;automation&lt;/strong&gt; ‚Üí Automation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;scheduled&lt;/strong&gt; ‚Üí Scheduled&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üöÄ API Documentation&lt;/h2&gt; 
&lt;h3&gt;Core Endpoints&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET /&lt;/code&gt; - Main workflow browser interface&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/stats&lt;/code&gt; - Database statistics and metrics&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows&lt;/code&gt; - Search with filters and pagination&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows/{filename}&lt;/code&gt; - Detailed workflow information&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows/{filename}/download&lt;/code&gt; - Download workflow JSON&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows/{filename}/diagram&lt;/code&gt; - Generate Mermaid diagram&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Advanced Search&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/workflows/category/{category}&lt;/code&gt; - Search by service category&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/categories&lt;/code&gt; - List all available categories&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET /api/integrations&lt;/code&gt; - Get integration statistics&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST /api/reindex&lt;/code&gt; - Trigger background reindexing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Response Examples&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;// GET /api/stats
{
  "total": 2053,
  "active": 215,
  "inactive": 1838,
  "triggers": {
    "Complex": 831,
    "Webhook": 519,
    "Manual": 477,
    "Scheduled": 226
  },
  "total_nodes": 29445,
  "unique_integrations": 365
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;üéâ This project solves &lt;a href="https://github.com/Zie619/n8n-workflows/issues/84"&gt;Issue #84&lt;/a&gt; - providing online access to workflows without requiring local setup!&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Adding New Workflows&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Export workflow&lt;/strong&gt; as JSON from n8n&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Name descriptively&lt;/strong&gt; following the established pattern: &lt;code&gt;[ID]_[Service]_[Purpose]_[Trigger].json&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add to workflows/&lt;/strong&gt; directory (create service folder if needed)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Remove sensitive data&lt;/strong&gt; (credentials, personal URLs)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add tags&lt;/strong&gt; for better searchability (calculation, automation, etc.)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Actions automatically&lt;/strong&gt; updates the public search interface&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Quality Standards&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚úÖ Workflow must be functional and tested&lt;/li&gt; 
 &lt;li&gt;‚úÖ Remove all credentials and sensitive data&lt;/li&gt; 
 &lt;li&gt;‚úÖ Follow naming convention for consistency&lt;/li&gt; 
 &lt;li&gt;‚úÖ Verify compatibility with recent n8n versions&lt;/li&gt; 
 &lt;li&gt;‚úÖ Include meaningful description or comments&lt;/li&gt; 
 &lt;li&gt;‚úÖ Add relevant tags for search optimization&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Custom Node Workflows&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;‚úÖ Include npm package links in descriptions&lt;/li&gt; 
 &lt;li&gt;‚úÖ Document custom node requirements&lt;/li&gt; 
 &lt;li&gt;‚úÖ Add installation instructions&lt;/li&gt; 
 &lt;li&gt;‚úÖ Use descriptive tags (like CalcsLive example)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Reindexing (for local development)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Force database reindexing after adding workflows
python run.py --reindex

# Or update search index only
python scripts/generate_search_index.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;‚ö†Ô∏è Important Notes&lt;/h2&gt; 
&lt;h3&gt;Security &amp;amp; Privacy&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Review before use&lt;/strong&gt; - All workflows shared as-is for educational purposes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update credentials&lt;/strong&gt; - Replace API keys, tokens, and webhooks&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Test safely&lt;/strong&gt; - Verify in development environment first&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Check permissions&lt;/strong&gt; - Ensure proper access rights for integrations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compatibility&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;n8n Version&lt;/strong&gt; - Compatible with n8n 1.0+ (most workflows)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Community Nodes&lt;/strong&gt; - Some workflows may require additional node installations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;API Changes&lt;/strong&gt; - External services may have updated their APIs since creation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dependencies&lt;/strong&gt; - Verify required integrations before importing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üìö Resources &amp;amp; References&lt;/h2&gt; 
&lt;h3&gt;Workflow Sources&lt;/h3&gt; 
&lt;p&gt;This comprehensive collection includes workflows from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Official n8n.io&lt;/strong&gt; - Documentation and community examples&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub repositories&lt;/strong&gt; - Open source community contributions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blog posts &amp;amp; tutorials&lt;/strong&gt; - Real-world automation patterns&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User submissions&lt;/strong&gt; - Tested and verified workflows&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise use cases&lt;/strong&gt; - Business process automations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Learn More&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.n8n.io/"&gt;n8n Documentation&lt;/a&gt; - Official documentation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://community.n8n.io/"&gt;n8n Community&lt;/a&gt; - Community forum and support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://n8n.io/workflows/"&gt;Workflow Templates&lt;/a&gt; - Official template library&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.n8n.io/integrations/"&gt;Integration Docs&lt;/a&gt; - Service-specific guides&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üèÜ Project Achievements&lt;/h2&gt; 
&lt;h3&gt;Repository Transformation&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;2,053 workflows&lt;/strong&gt; professionally organized and named&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;365 unique integrations&lt;/strong&gt; automatically detected and categorized&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;100% meaningful names&lt;/strong&gt; (improved from basic filename patterns)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Zero data loss&lt;/strong&gt; during intelligent renaming process&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced search&lt;/strong&gt; with 15 service categories&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Performance Revolution&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Sub-100ms search&lt;/strong&gt; with SQLite FTS5 full-text indexing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Instant filtering&lt;/strong&gt; across 29,445 workflow nodes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mobile-optimized&lt;/strong&gt; responsive design for all devices&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Real-time statistics&lt;/strong&gt; with live database queries&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Professional interface&lt;/strong&gt; with modern UX principles&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;System Reliability&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Robust error handling&lt;/strong&gt; with graceful degradation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Change detection&lt;/strong&gt; for efficient database updates&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Background processing&lt;/strong&gt; for non-blocking operations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive logging&lt;/strong&gt; for debugging and monitoring&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Production-ready&lt;/strong&gt; with proper middleware and security&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;em&gt;This repository represents the most comprehensive and well-organized collection of n8n workflows available, featuring cutting-edge search technology and professional documentation that makes workflow discovery and usage a delightful experience.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;üéØ Perfect for&lt;/strong&gt;: Developers, automation engineers, business analysts, and anyone looking to streamline their workflows with proven n8n automations.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Zie619/n8n-workflows/main/README_ZH.md"&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microsoft/BitNet</title>
      <link>https://github.com/microsoft/BitNet</link>
      <description>&lt;p&gt;Official inference framework for 1-bit LLMs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bitnet.cpp&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://opensource.org/licenses/MIT"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="License: MIT" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/version-1.0-blue" alt="version" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://huggingface.co/microsoft/BitNet-b1.58-2B-4T"&gt;&lt;img src="https://raw.githubusercontent.com/microsoft/BitNet/main/assets/header_model_release.png" alt="BitNet Model on Hugging Face" width="800" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Try it out via this &lt;a href="https://bitnet-demo.azurewebsites.net/"&gt;demo&lt;/a&gt;, or build and run it on your own &lt;a href="https://github.com/microsoft/BitNet?tab=readme-ov-file#build-from-source"&gt;CPU&lt;/a&gt; or &lt;a href="https://github.com/microsoft/BitNet/raw/main/gpu/README.md"&gt;GPU&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;bitnet.cpp is the official inference framework for 1-bit LLMs (e.g., BitNet b1.58). It offers a suite of optimized kernels, that support &lt;strong&gt;fast&lt;/strong&gt; and &lt;strong&gt;lossless&lt;/strong&gt; inference of 1.58-bit models on CPU and GPU (NPU support will coming next).&lt;/p&gt; 
&lt;p&gt;The first release of bitnet.cpp is to support inference on CPUs. bitnet.cpp achieves speedups of &lt;strong&gt;1.37x&lt;/strong&gt; to &lt;strong&gt;5.07x&lt;/strong&gt; on ARM CPUs, with larger models experiencing greater performance gains. Additionally, it reduces energy consumption by &lt;strong&gt;55.4%&lt;/strong&gt; to &lt;strong&gt;70.0%&lt;/strong&gt;, further boosting overall efficiency. On x86 CPUs, speedups range from &lt;strong&gt;2.37x&lt;/strong&gt; to &lt;strong&gt;6.17x&lt;/strong&gt; with energy reductions between &lt;strong&gt;71.9%&lt;/strong&gt; to &lt;strong&gt;82.2%&lt;/strong&gt;. Furthermore, bitnet.cpp can run a 100B BitNet b1.58 model on a single CPU, achieving speeds comparable to human reading (5-7 tokens per second), significantly enhancing the potential for running LLMs on local devices. Please refer to the &lt;a href="https://arxiv.org/abs/2410.16144"&gt;technical report&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/microsoft/BitNet/main/assets/m2_performance.jpg" alt="m2_performance" width="800" /&gt; 
&lt;img src="https://raw.githubusercontent.com/microsoft/BitNet/main/assets/intel_performance.jpg" alt="m2_performance" width="800" /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The tested models are dummy setups used in a research context to demonstrate the inference performance of bitnet.cpp.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;A demo of bitnet.cpp running a BitNet b1.58 3B model on Apple M2:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/7f46b736-edec-4828-b809-4be780a3e5b1"&gt;https://github.com/user-attachments/assets/7f46b736-edec-4828-b809-4be780a3e5b1&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What's New:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;05/20/2025 &lt;a href="https://github.com/microsoft/BitNet/raw/main/gpu/README.md"&gt;BitNet Official GPU inference kernel&lt;/a&gt; &lt;img src="https://img.shields.io/badge/NEW-red" alt="NEW" /&gt;&lt;/li&gt; 
 &lt;li&gt;04/14/2025 &lt;a href="https://huggingface.co/microsoft/BitNet-b1.58-2B-4T"&gt;BitNet Official 2B Parameter Model on Hugging Face&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;02/18/2025 &lt;a href="https://arxiv.org/abs/2502.11880"&gt;Bitnet.cpp: Efficient Edge Inference for Ternary LLMs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;11/08/2024 &lt;a href="https://arxiv.org/abs/2411.04965"&gt;BitNet a4.8: 4-bit Activations for 1-bit LLMs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;10/21/2024 &lt;a href="https://arxiv.org/abs/2410.16144"&gt;1-bit AI Infra: Part 1.1, Fast and Lossless BitNet b1.58 Inference on CPUs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;10/17/2024 bitnet.cpp 1.0 released.&lt;/li&gt; 
 &lt;li&gt;03/21/2024 &lt;a href="https://github.com/microsoft/unilm/raw/master/bitnet/The-Era-of-1-bit-LLMs__Training_Tips_Code_FAQ.pdf"&gt;The-Era-of-1-bit-LLMs__Training_Tips_Code_FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;02/27/2024 &lt;a href="https://arxiv.org/abs/2402.17764"&gt;The Era of 1-bit LLMs: All Large Language Models are in 1.58 Bits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;10/17/2023 &lt;a href="https://arxiv.org/abs/2310.11453"&gt;BitNet: Scaling 1-bit Transformers for Large Language Models&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;This project is based on the &lt;a href="https://github.com/ggerganov/llama.cpp"&gt;llama.cpp&lt;/a&gt; framework. We would like to thank all the authors for their contributions to the open-source community. Also, bitnet.cpp's kernels are built on top of the Lookup Table methodologies pioneered in &lt;a href="https://github.com/microsoft/T-MAC/"&gt;T-MAC&lt;/a&gt;. For inference of general low-bit LLMs beyond ternary models, we recommend using T-MAC.&lt;/p&gt; 
&lt;h2&gt;Official Models&lt;/h2&gt; 
&lt;table&gt;  
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th rowspan="2"&gt;Model&lt;/th&gt; 
   &lt;th rowspan="2"&gt;Parameters&lt;/th&gt; 
   &lt;th rowspan="2"&gt;CPU&lt;/th&gt; 
   &lt;th colspan="3"&gt;Kernel&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;I2_S&lt;/th&gt; 
   &lt;th&gt;TL1&lt;/th&gt; 
   &lt;th&gt;TL2&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td rowspan="2"&gt;&lt;a href="https://huggingface.co/microsoft/BitNet-b1.58-2B-4T"&gt;BitNet-b1.58-2B-4T&lt;/a&gt;&lt;/td&gt; 
   &lt;td rowspan="2"&gt;2.4B&lt;/td&gt; 
   &lt;td&gt;x86&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ARM&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Supported Models&lt;/h2&gt; 
&lt;p&gt;‚ùóÔ∏è&lt;strong&gt;We use existing 1-bit LLMs available on &lt;a href="https://huggingface.co/"&gt;Hugging Face&lt;/a&gt; to demonstrate the inference capabilities of bitnet.cpp. We hope the release of bitnet.cpp will inspire the development of 1-bit LLMs in large-scale settings in terms of model size and training tokens.&lt;/strong&gt;&lt;/p&gt; 
&lt;table&gt;  
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th rowspan="2"&gt;Model&lt;/th&gt; 
   &lt;th rowspan="2"&gt;Parameters&lt;/th&gt; 
   &lt;th rowspan="2"&gt;CPU&lt;/th&gt; 
   &lt;th colspan="3"&gt;Kernel&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;th&gt;I2_S&lt;/th&gt; 
   &lt;th&gt;TL1&lt;/th&gt; 
   &lt;th&gt;TL2&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td rowspan="2"&gt;&lt;a href="https://huggingface.co/1bitLLM/bitnet_b1_58-large"&gt;bitnet_b1_58-large&lt;/a&gt;&lt;/td&gt; 
   &lt;td rowspan="2"&gt;0.7B&lt;/td&gt; 
   &lt;td&gt;x86&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ARM&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td rowspan="2"&gt;&lt;a href="https://huggingface.co/1bitLLM/bitnet_b1_58-3B"&gt;bitnet_b1_58-3B&lt;/a&gt;&lt;/td&gt; 
   &lt;td rowspan="2"&gt;3.3B&lt;/td&gt; 
   &lt;td&gt;x86&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ARM&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td rowspan="2"&gt;&lt;a href="https://huggingface.co/HF1BitLLM/Llama3-8B-1.58-100B-tokens"&gt;Llama3-8B-1.58-100B-tokens&lt;/a&gt;&lt;/td&gt; 
   &lt;td rowspan="2"&gt;8.0B&lt;/td&gt; 
   &lt;td&gt;x86&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ARM&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td rowspan="2"&gt;&lt;a href="https://huggingface.co/collections/tiiuae/falcon3-67605ae03578be86e4e87026"&gt;Falcon3 Family&lt;/a&gt;&lt;/td&gt; 
   &lt;td rowspan="2"&gt;1B-10B&lt;/td&gt; 
   &lt;td&gt;x86&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ARM&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td rowspan="2"&gt;&lt;a href="https://huggingface.co/collections/tiiuae/falcon-edge-series-6804fd13344d6d8a8fa71130"&gt;Falcon-E Family&lt;/a&gt;&lt;/td&gt; 
   &lt;td rowspan="2"&gt;1B-3B&lt;/td&gt; 
   &lt;td&gt;x86&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ARM&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚úÖ&lt;/td&gt; 
   &lt;td&gt;‚ùå&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;python&amp;gt;=3.9&lt;/li&gt; 
 &lt;li&gt;cmake&amp;gt;=3.22&lt;/li&gt; 
 &lt;li&gt;clang&amp;gt;=18 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;For Windows users, install &lt;a href="https://visualstudio.microsoft.com/downloads/"&gt;Visual Studio 2022&lt;/a&gt;. In the installer, toggle on at least the following options(this also automatically installs the required additional tools like CMake):&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Desktop-development with C++&lt;/li&gt; 
     &lt;li&gt;C++-CMake Tools for Windows&lt;/li&gt; 
     &lt;li&gt;Git for Windows&lt;/li&gt; 
     &lt;li&gt;C++-Clang Compiler for Windows&lt;/li&gt; 
     &lt;li&gt;MS-Build Support for LLVM-Toolset (clang)&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;For Debian/Ubuntu users, you can download with &lt;a href="https://apt.llvm.org/"&gt;Automatic installation script&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;conda (highly recommend)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build from source&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] If you are using Windows, please remember to always use a Developer Command Prompt / PowerShell for VS2022 for the following commands. Please refer to the FAQs below if you see any issues.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repo&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone --recursive https://github.com/microsoft/BitNet.git
cd BitNet
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Install the dependencies&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# (Recommended) Create a new conda environment
conda create -n bitnet-cpp python=3.9
conda activate bitnet-cpp

pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Build the project&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Manually download the model and run with local path
huggingface-cli download microsoft/BitNet-b1.58-2B-4T-gguf --local-dir models/BitNet-b1.58-2B-4T
python setup_env.py -md models/BitNet-b1.58-2B-4T -q i2_s

&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;
usage: setup_env.py [-h] [--hf-repo {1bitLLM/bitnet_b1_58-large,1bitLLM/bitnet_b1_58-3B,HF1BitLLM/Llama3-8B-1.58-100B-tokens,tiiuae/Falcon3-1B-Instruct-1.58bit,tiiuae/Falcon3-3B-Instruct-1.58bit,tiiuae/Falcon3-7B-Instruct-1.58bit,tiiuae/Falcon3-10B-Instruct-1.58bit}] [--model-dir MODEL_DIR] [--log-dir LOG_DIR] [--quant-type {i2_s,tl1}] [--quant-embd]
                    [--use-pretuned]

Setup the environment for running inference

optional arguments:
  -h, --help            show this help message and exit
  --hf-repo {1bitLLM/bitnet_b1_58-large,1bitLLM/bitnet_b1_58-3B,HF1BitLLM/Llama3-8B-1.58-100B-tokens,tiiuae/Falcon3-1B-Instruct-1.58bit,tiiuae/Falcon3-3B-Instruct-1.58bit,tiiuae/Falcon3-7B-Instruct-1.58bit,tiiuae/Falcon3-10B-Instruct-1.58bit}, -hr {1bitLLM/bitnet_b1_58-large,1bitLLM/bitnet_b1_58-3B,HF1BitLLM/Llama3-8B-1.58-100B-tokens,tiiuae/Falcon3-1B-Instruct-1.58bit,tiiuae/Falcon3-3B-Instruct-1.58bit,tiiuae/Falcon3-7B-Instruct-1.58bit,tiiuae/Falcon3-10B-Instruct-1.58bit}
                        Model used for inference
  --model-dir MODEL_DIR, -md MODEL_DIR
                        Directory to save/load the model
  --log-dir LOG_DIR, -ld LOG_DIR
                        Directory to save the logging info
  --quant-type {i2_s,tl1}, -q {i2_s,tl1}
                        Quantization type
  --quant-embd          Quantize the embeddings to f16
  --use-pretuned, -p    Use the pretuned kernel parameters
&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Basic usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run inference with the quantized model
python run_inference.py -m models/BitNet-b1.58-2B-4T/ggml-model-i2_s.gguf -p "You are a helpful assistant" -cnv
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;
usage: run_inference.py [-h] [-m MODEL] [-n N_PREDICT] -p PROMPT [-t THREADS] [-c CTX_SIZE] [-temp TEMPERATURE] [-cnv]

Run inference

optional arguments:
  -h, --help            show this help message and exit
  -m MODEL, --model MODEL
                        Path to model file
  -n N_PREDICT, --n-predict N_PREDICT
                        Number of tokens to predict when generating text
  -p PROMPT, --prompt PROMPT
                        Prompt to generate text from
  -t THREADS, --threads THREADS
                        Number of threads to use
  -c CTX_SIZE, --ctx-size CTX_SIZE
                        Size of the prompt context
  -temp TEMPERATURE, --temperature TEMPERATURE
                        Temperature, a hyperparameter that controls the randomness of the generated text
  -cnv, --conversation  Whether to enable chat mode or not (for instruct models.)
                        (When this option is turned on, the prompt specified by -p will be used as the system prompt.)
&lt;/pre&gt; 
&lt;h3&gt;Benchmark&lt;/h3&gt; 
&lt;p&gt;We provide scripts to run the inference benchmark providing a model.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;usage: e2e_benchmark.py -m MODEL [-n N_TOKEN] [-p N_PROMPT] [-t THREADS]  
   
Setup the environment for running the inference  
   
required arguments:  
  -m MODEL, --model MODEL  
                        Path to the model file. 
   
optional arguments:  
  -h, --help  
                        Show this help message and exit. 
  -n N_TOKEN, --n-token N_TOKEN  
                        Number of generated tokens. 
  -p N_PROMPT, --n-prompt N_PROMPT  
                        Prompt to generate text from. 
  -t THREADS, --threads THREADS  
                        Number of threads to use. 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here's a brief explanation of each argument:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-m&lt;/code&gt;, &lt;code&gt;--model&lt;/code&gt;: The path to the model file. This is a required argument that must be provided when running the script.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-n&lt;/code&gt;, &lt;code&gt;--n-token&lt;/code&gt;: The number of tokens to generate during the inference. It is an optional argument with a default value of 128.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;--n-prompt&lt;/code&gt;: The number of prompt tokens to use for generating text. This is an optional argument with a default value of 512.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-t&lt;/code&gt;, &lt;code&gt;--threads&lt;/code&gt;: The number of threads to use for running the inference. It is an optional argument with a default value of 2.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;: Show the help message and exit. Use this argument to display usage information.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;python utils/e2e_benchmark.py -m /path/to/model -n 200 -p 256 -t 4  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command would run the inference benchmark using the model located at &lt;code&gt;/path/to/model&lt;/code&gt;, generating 200 tokens from a 256 token prompt, utilizing 4 threads.&lt;/p&gt; 
&lt;p&gt;For the model layout that do not supported by any public model, we provide scripts to generate a dummy model with the given model layout, and run the benchmark on your machine:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python utils/generate-dummy-bitnet-model.py models/bitnet_b1_58-large --outfile models/dummy-bitnet-125m.tl1.gguf --outtype tl1 --model-size 125M

# Run benchmark with the generated model, use -m to specify the model path, -p to specify the prompt processed, -n to specify the number of token to generate
python utils/e2e_benchmark.py -m models/dummy-bitnet-125m.tl1.gguf -p 512 -n 128
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Convert from &lt;code&gt;.safetensors&lt;/code&gt; Checkpoints&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Prepare the .safetensors model file
huggingface-cli download microsoft/bitnet-b1.58-2B-4T-bf16 --local-dir ./models/bitnet-b1.58-2B-4T-bf16

# Convert to gguf model
python ./utils/convert-helper-bitnet.py ./models/bitnet-b1.58-2B-4T-bf16
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FAQ (Frequently Asked Questions)üìå&lt;/h3&gt; 
&lt;h4&gt;Q1: The build dies with errors building llama.cpp due to issues with std::chrono in log.cpp?&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; This is an issue introduced in recent version of llama.cpp. Please refer to this &lt;a href="https://github.com/tinglou/llama.cpp/commit/4e3db1e3d78cc1bcd22bcb3af54bd2a4628dd323"&gt;commit&lt;/a&gt; in the &lt;a href="https://github.com/abetlen/llama-cpp-python/issues/1942"&gt;discussion&lt;/a&gt; to fix this issue.&lt;/p&gt; 
&lt;h4&gt;Q2: How to build with clang in conda environment on windows?&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Before building the project, verify your clang installation and access to Visual Studio tools by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;clang -v
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command checks that you are using the correct version of clang and that the Visual Studio tools are available. If you see an error message such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;'clang' is not recognized as an internal or external command, operable program or batch file.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It indicates that your command line window is not properly initialized for Visual Studio tools.&lt;/p&gt; 
&lt;p&gt;‚Ä¢ If you are using Command Prompt, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\Tools\VsDevCmd.bat" -startdir=none -arch=x64 -host_arch=x64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Ä¢ If you are using Windows PowerShell, run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\Tools\Microsoft.VisualStudio.DevShell.dll" Enter-VsDevShell 3f0e31ad -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These steps will initialize your environment and allow you to use the correct Visual Studio tools.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>daveebbelaar/ai-cookbook</title>
      <link>https://github.com/daveebbelaar/ai-cookbook</link>
      <description>&lt;p&gt;Examples and tutorials to help developers build AI systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;This Cookbook contains examples and tutorials to help developers build AI systems, offering copy/paste code snippets that you can easily integrate into your own projects.&lt;/p&gt; 
&lt;h2&gt;About Me&lt;/h2&gt; 
&lt;p&gt;Hi! I'm Dave, AI Engineer and founder of Datalumina¬Æ. On my &lt;a href="https://www.youtube.com/@daveebbelaar?sub_confirmation=1"&gt;YouTube channel&lt;/a&gt;, I share practical tutorials that teach developers how to build AI systems that actually work in the real world. Beyond these tutorials, I also help people start successful freelancing careers. Check out the links below to learn more.&lt;/p&gt; 
&lt;h3&gt;Explore More Resources&lt;/h3&gt; 
&lt;p&gt;Continue learning ‚Äì wherever you are in your AI journey.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;üß† &lt;strong&gt;Getting Started with AI &amp;amp; Python&lt;/strong&gt;&lt;br /&gt; Dive into foundational content to build your technical base&lt;br /&gt; ‚ñ∂Ô∏é &lt;a href="https://go.datalumina.com/XRPBiLb"&gt;Learn Python for AI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;üõ†Ô∏è &lt;strong&gt;Learn production-ready AI engieering&lt;/strong&gt;&lt;br /&gt; Learn the full GenAI stack, from basics to deployment&lt;br /&gt; ‚ñ∂Ô∏é &lt;a href="https://go.datalumina.com/CkIsMAK"&gt;Join the GenAI Accelerator&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;üí∏ &lt;strong&gt;Launch or grow your freelance AI business&lt;/strong&gt;&lt;br /&gt; Discover how to land clients, structure work, and scale&lt;br /&gt; ‚ñ∂Ô∏é &lt;a href="https://go.datalumina.com/MVWhVn9"&gt;Find Freelance Projects&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>BeehiveInnovations/zen-mcp-server</title>
      <link>https://github.com/BeehiveInnovations/zen-mcp-server</link>
      <description>&lt;p&gt;The power of Claude Code / GeminiCLI / CodexCLI + [Gemini / OpenAI / OpenRouter / Azure / Grok / Ollama / Custom Model / All Of The Above] working as one.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zen MCP: Many Workflows. One Context.&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/0d26061e-5f21-4ab1-b7d0-f883ddc2c3da"&gt;Zen in action&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;üëâ &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/#-watch-tools-in-action"&gt;Watch more examples&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;h3&gt;Your CLI + Multiple Models = Your AI Dev Team&lt;/h3&gt; 
 &lt;p&gt;&lt;strong&gt;Use the ü§ñ CLI you love:&lt;/strong&gt;&lt;br /&gt; &lt;a href="https://www.anthropic.com/claude-code"&gt;Claude Code&lt;/a&gt; ¬∑ &lt;a href="https://github.com/google-gemini/gemini-cli"&gt;Gemini CLI&lt;/a&gt; ¬∑ &lt;a href="https://github.com/openai/codex"&gt;Codex CLI&lt;/a&gt; ¬∑ &lt;a href="https://qwenlm.github.io/qwen-code-docs/"&gt;Qwen Code CLI&lt;/a&gt; ¬∑ &lt;a href="https://cursor.com"&gt;Cursor&lt;/a&gt; ¬∑ &lt;em&gt;and more&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;With multiple models within a single prompt:&lt;/strong&gt;&lt;br /&gt; Gemini ¬∑ OpenAI ¬∑ Anthropic ¬∑ Grok ¬∑ Azure ¬∑ Ollama ¬∑ OpenRouter ¬∑ DIAL ¬∑ On-Device Model&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h2&gt;üÜï Now with CLI-to-CLI Bridge&lt;/h2&gt; 
&lt;p&gt;The new &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/clink.md"&gt;&lt;code&gt;clink&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; (CLI + Link) tool connects external AI CLIs directly into your workflow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Connect external CLIs&lt;/strong&gt; like &lt;a href="https://github.com/google-gemini/gemini-cli"&gt;Gemini CLI&lt;/a&gt; and &lt;a href="https://github.com/openai/codex"&gt;Codex CLI&lt;/a&gt; directly into your workflow&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Codex Subagents&lt;/strong&gt; - Launch isolated Codex instances from &lt;em&gt;within&lt;/em&gt; Codex itself! Offload heavy tasks (code reviews, bug hunting) to fresh contexts while your main session's context window remains unpolluted. Each subagent returns only final results.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Context Isolation&lt;/strong&gt; - Run separate investigations without polluting your primary workspace&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Role Specialization&lt;/strong&gt; - Spawn &lt;code&gt;planner&lt;/code&gt;, &lt;code&gt;codereviewer&lt;/code&gt;, or custom role agents with specialized system prompts&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full CLI Capabilities&lt;/strong&gt; - Web search, file inspection, MCP tool access, latest documentation lookups&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless Continuity&lt;/strong&gt; - Sub-CLIs participate as first-class members with full conversation context between tools&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Codex spawns Codex subagent for isolated code review in fresh context
clink with codex codereviewer to audit auth module for security issues
# Subagent reviews in isolation, returns final report without cluttering your context as codex reads each file and walks the directory structure

# Consensus from different AI models ‚Üí Implementation handoff with full context preservation between tools
Use consensus with gpt-5 and gemini-pro to decide: dark mode or offline support next
Continue with clink gemini - implement the recommended feature
# Gemini receives full debate context and starts coding immediately
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;üëâ &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/clink.md"&gt;Learn more about clink&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Why Zen MCP?&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Why rely on one AI model when you can orchestrate them all?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A Model Context Protocol server that supercharges tools like &lt;a href="https://www.anthropic.com/claude-code"&gt;Claude Code&lt;/a&gt;, &lt;a href="https://developers.openai.com/codex/cli"&gt;Codex CLI&lt;/a&gt;, and IDE clients such as &lt;a href="https://cursor.com"&gt;Cursor&lt;/a&gt; or the &lt;a href="https://marketplace.visualstudio.com/items?itemName=Anthropic.claude-vscode"&gt;Claude Dev VS Code extension&lt;/a&gt;. &lt;strong&gt;Zen MCP connects your favorite AI tool to multiple AI models&lt;/strong&gt; for enhanced code analysis, problem-solving, and collaborative development.&lt;/p&gt; 
&lt;h3&gt;True AI Collaboration with Conversation Continuity&lt;/h3&gt; 
&lt;p&gt;Zen supports &lt;strong&gt;conversation threading&lt;/strong&gt; so your CLI can &lt;strong&gt;discuss ideas with multiple AI models, exchange reasoning, get second opinions, and even run collaborative debates between models&lt;/strong&gt; to help you reach deeper insights and better solutions.&lt;/p&gt; 
&lt;p&gt;Your CLI always stays in control but gets perspectives from the best AI for each subtask. Context carries forward seamlessly across tools and models, enabling complex workflows like: code reviews with multiple models ‚Üí automated planning ‚Üí implementation ‚Üí pre-commit validation.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;You're in control.&lt;/strong&gt; Your CLI of choice orchestrates the AI team, but you decide the workflow. Craft powerful prompts that bring in Gemini Pro, GPT 5, Flash, or local offline models exactly when needed.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Reasons to Use Zen MCP&lt;/b&gt;&lt;/summary&gt; 
 &lt;p&gt;A typical workflow with Claude Code as an example:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Model Orchestration&lt;/strong&gt; - Claude coordinates with Gemini Pro, O3, GPT-5, and 50+ other models to get the best analysis for each task&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Context Revival Magic&lt;/strong&gt; - Even after Claude's context resets, continue conversations seamlessly by having other models "remind" Claude of the discussion&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Guided Workflows&lt;/strong&gt; - Enforces systematic investigation phases that prevent rushed analysis and ensure thorough code examination&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extended Context Windows&lt;/strong&gt; - Break Claude's limits by delegating to Gemini (1M tokens) or O3 (200K tokens) for massive codebases&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;True Conversation Continuity&lt;/strong&gt; - Full context flows across tools and models - Gemini remembers what O3 said 10 steps ago&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Model-Specific Strengths&lt;/strong&gt; - Extended thinking with Gemini Pro, blazing speed with Flash, strong reasoning with O3, privacy with local Ollama&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Professional Code Reviews&lt;/strong&gt; - Multi-pass analysis with severity levels, actionable feedback, and consensus from multiple AI experts&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Smart Debugging Assistant&lt;/strong&gt; - Systematic root cause analysis with hypothesis tracking and confidence levels&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic Model Selection&lt;/strong&gt; - Claude intelligently picks the right model for each subtask (or you can specify)&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vision Capabilities&lt;/strong&gt; - Analyze screenshots, diagrams, and visual content with vision-enabled models&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Local Model Support&lt;/strong&gt; - Run Llama, Mistral, or other models locally for complete privacy and zero API costs&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bypass MCP Token Limits&lt;/strong&gt; - Automatically works around MCP's 25K limit for large prompts and responses&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;strong&gt;The Killer Feature:&lt;/strong&gt; When Claude's context resets, just ask to "continue with O3" - the other model's response magically revives Claude's understanding without re-ingesting documents!&lt;/p&gt; 
 &lt;h4&gt;Example: Multi-Model Code Review Workflow&lt;/h4&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;code&gt;Perform a codereview using gemini pro and o3 and use planner to generate a detailed plan, implement the fixes and do a final precommit check by continuing from the previous codereview&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;This triggers a &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/codereview.md"&gt;&lt;code&gt;codereview&lt;/code&gt;&lt;/a&gt; workflow where Claude walks the code, looking for all kinds of issues&lt;/li&gt; 
  &lt;li&gt;After multiple passes, collects relevant code and makes note of issues along the way&lt;/li&gt; 
  &lt;li&gt;Maintains a &lt;code&gt;confidence&lt;/code&gt; level between &lt;code&gt;exploring&lt;/code&gt;, &lt;code&gt;low&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt; and &lt;code&gt;certain&lt;/code&gt; to track how confidently it's been able to find and identify issues&lt;/li&gt; 
  &lt;li&gt;Generates a detailed list of critical -&amp;gt; low issues&lt;/li&gt; 
  &lt;li&gt;Shares the relevant files, findings, etc with &lt;strong&gt;Gemini Pro&lt;/strong&gt; to perform a deep dive for a second &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/codereview.md"&gt;&lt;code&gt;codereview&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Comes back with a response and next does the same with o3, adding to the prompt if a new discovery comes to light&lt;/li&gt; 
  &lt;li&gt;When done, Claude takes in all the feedback and combines a single list of all critical -&amp;gt; low issues, including good patterns in your code. The final list includes new findings or revisions in case Claude misunderstood or missed something crucial and one of the other models pointed this out&lt;/li&gt; 
  &lt;li&gt;It then uses the &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/planner.md"&gt;&lt;code&gt;planner&lt;/code&gt;&lt;/a&gt; workflow to break the work down into simpler steps if a major refactor is required&lt;/li&gt; 
  &lt;li&gt;Claude then performs the actual work of fixing highlighted issues&lt;/li&gt; 
  &lt;li&gt;When done, Claude returns to Gemini Pro for a &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/precommit.md"&gt;&lt;code&gt;precommit&lt;/code&gt;&lt;/a&gt; review&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;All within a single conversation thread! Gemini Pro in step 11 &lt;em&gt;knows&lt;/em&gt; what was recommended by O3 in step 7! Taking that context and review into consideration to aid with its final pre-commit review.&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Think of it as Claude Code &lt;em&gt;for&lt;/em&gt; Claude Code.&lt;/strong&gt; This MCP isn't magic. It's just &lt;strong&gt;super-glue&lt;/strong&gt;.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; Claude stays in full control ‚Äî but &lt;strong&gt;YOU&lt;/strong&gt; call the shots. Zen is designed to have Claude engage other models only when needed ‚Äî and to follow through with meaningful back-and-forth. &lt;strong&gt;You're&lt;/strong&gt; the one who crafts the powerful prompt that makes Claude bring in Gemini, Flash, O3 ‚Äî or fly solo. You're the guide. The prompter. The puppeteer.&lt;/p&gt; 
  &lt;h4&gt;You are the AI - &lt;strong&gt;Actually Intelligent&lt;/strong&gt;.&lt;/h4&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;h4&gt;Recommended AI Stack&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;For Claude Code Users&lt;/summary&gt; 
 &lt;p&gt;For best results when using &lt;a href="https://claude.ai/code"&gt;Claude Code&lt;/a&gt;:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;Sonnet 4.5&lt;/strong&gt; - All agentic work and orchestration&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Gemini 2.5 Pro&lt;/strong&gt; OR &lt;strong&gt;GPT-5-Pro&lt;/strong&gt; - Deep thinking, additional code reviews, debugging and validations, pre-commit analysis&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;For Codex Users&lt;/summary&gt; 
 &lt;p&gt;For best results when using &lt;a href="https://developers.openai.com/codex/cli"&gt;Codex CLI&lt;/a&gt;:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;GPT-5 Codex Medium&lt;/strong&gt; - All agentic work and orchestration&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;Gemini 2.5 Pro&lt;/strong&gt; OR &lt;strong&gt;GPT-5-Pro&lt;/strong&gt; - Deep thinking, additional code reviews, debugging and validations, pre-commit analysis&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Quick Start (5 minutes)&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; Python 3.10+, Git, &lt;a href="https://docs.astral.sh/uv/getting-started/installation/"&gt;uv installed&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Get API Keys&lt;/strong&gt; (choose one or more):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://openrouter.ai/"&gt;OpenRouter&lt;/a&gt;&lt;/strong&gt; - Access multiple models with one API&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://makersuite.google.com/app/apikey"&gt;Gemini&lt;/a&gt;&lt;/strong&gt; - Google's latest models&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://platform.openai.com/api-keys"&gt;OpenAI&lt;/a&gt;&lt;/strong&gt; - O3, GPT-5 series&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://learn.microsoft.com/azure/ai-services/openai/"&gt;Azure OpenAI&lt;/a&gt;&lt;/strong&gt; - Enterprise deployments of GPT-4o, GPT-4.1, GPT-5 family&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://console.x.ai/"&gt;X.AI&lt;/a&gt;&lt;/strong&gt; - Grok models&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://dialx.ai/"&gt;DIAL&lt;/a&gt;&lt;/strong&gt; - Vendor-agnostic model access&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://ollama.ai/"&gt;Ollama&lt;/a&gt;&lt;/strong&gt; - Local models (free)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;2. Install&lt;/strong&gt; (choose one):&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Option A: Clone and Automatic Setup&lt;/strong&gt; (recommended)&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/BeehiveInnovations/zen-mcp-server.git
cd zen-mcp-server

# Handles everything: setup, config, API keys from system environment. 
# Auto-configures Claude Desktop, Claude Code, Gemini CLI, Codex CLI, Qwen CLI
# Enable / disable additional settings in .env
./run-server.sh  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Option B: Instant Setup with &lt;a href="https://docs.astral.sh/uv/getting-started/installation/"&gt;uvx&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;// Add to ~/.claude/settings.json or .mcp.json
// Don't forget to add your API keys under env
{
  "mcpServers": {
    "zen": {
      "command": "bash",
      "args": ["-c", "for p in $(which uvx 2&amp;gt;/dev/null) $HOME/.local/bin/uvx /opt/homebrew/bin/uvx /usr/local/bin/uvx uvx; do [ -x \"$p\" ] &amp;amp;&amp;amp; exec \"$p\" --from git+https://github.com/BeehiveInnovations/zen-mcp-server.git zen-mcp-server; done; echo 'uvx not found' &amp;gt;&amp;amp;2; exit 1"],
      "env": {
        "PATH": "/usr/local/bin:/usr/bin:/bin:/opt/homebrew/bin:~/.local/bin",
        "GEMINI_API_KEY": "your-key-here",
        "DISABLED_TOOLS": "analyze,refactor,testgen,secaudit,docgen,tracer",
        "DEFAULT_MODEL": "auto"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3. Start Using!&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"Use zen to analyze this code for security issues with gemini pro"
"Debug this error with o3 and then get flash to suggest optimizations"
"Plan the migration strategy with zen, get consensus from multiple models"
"clink with cli_name=\"gemini\" role=\"planner\" to draft a phased rollout plan"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;üëâ &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/getting-started.md"&gt;Complete Setup Guide&lt;/a&gt;&lt;/strong&gt; with detailed installation, configuration for Gemini / Codex / Qwen, and troubleshooting üëâ &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/getting-started.md#ide-clients"&gt;Cursor &amp;amp; VS Code Setup&lt;/a&gt;&lt;/strong&gt; for IDE integration instructions üì∫ &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/#-watch-tools-in-action"&gt;Watch tools in action&lt;/a&gt;&lt;/strong&gt; to see real-world examples&lt;/p&gt; 
&lt;h2&gt;Provider Configuration&lt;/h2&gt; 
&lt;p&gt;Zen activates any provider that has credentials in your &lt;code&gt;.env&lt;/code&gt;. See &lt;code&gt;.env.example&lt;/code&gt; for deeper customization.&lt;/p&gt; 
&lt;h2&gt;Core Tools&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each tool comes with its own multi-step workflow, parameters, and descriptions that consume valuable context window space even when not in use. To optimize performance, some tools are disabled by default. See &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/#tool-configuration"&gt;Tool Configuration&lt;/a&gt; below to enable them.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Collaboration &amp;amp; Planning&lt;/strong&gt; &lt;em&gt;(Enabled by default)&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/clink.md"&gt;&lt;code&gt;clink&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Bridge requests to external AI CLIs (Gemini planner, codereviewer, etc.)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/chat.md"&gt;&lt;code&gt;chat&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Brainstorm ideas, get second opinions, validate approaches. With capable models (GPT-5 Pro, Gemini 2.5 Pro), generates complete code / implementation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/thinkdeep.md"&gt;&lt;code&gt;thinkdeep&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Extended reasoning, edge case analysis, alternative perspectives&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/planner.md"&gt;&lt;code&gt;planner&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Break down complex projects into structured, actionable plans&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/consensus.md"&gt;&lt;code&gt;consensus&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Get expert opinions from multiple AI models with stance steering&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Code Analysis &amp;amp; Quality&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/debug.md"&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Systematic investigation and root cause analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/precommit.md"&gt;&lt;code&gt;precommit&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Validate changes before committing, prevent regressions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/codereview.md"&gt;&lt;code&gt;codereview&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Professional reviews with severity levels and actionable feedback&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/analyze.md"&gt;&lt;code&gt;analyze&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(disabled by default - &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/#tool-configuration"&gt;enable&lt;/a&gt;)&lt;/em&gt; - Understand architecture, patterns, dependencies across entire codebases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Development Tools&lt;/strong&gt; &lt;em&gt;(Disabled by default - &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/#tool-configuration"&gt;enable&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/refactor.md"&gt;&lt;code&gt;refactor&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Intelligent code refactoring with decomposition focus&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/testgen.md"&gt;&lt;code&gt;testgen&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Comprehensive test generation with edge cases&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/secaudit.md"&gt;&lt;code&gt;secaudit&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Security audits with OWASP Top 10 analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/docgen.md"&gt;&lt;code&gt;docgen&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Generate documentation with complexity analysis&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Utilities&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/apilookup.md"&gt;&lt;code&gt;apilookup&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Forces current-year API/SDK documentation lookups in a sub-process (saves tokens within the current context window), prevents outdated training data responses&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/challenge.md"&gt;&lt;code&gt;challenge&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Prevent "You're absolutely right!" responses with critical analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/tracer.md"&gt;&lt;code&gt;tracer&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(disabled by default - &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/#tool-configuration"&gt;enable&lt;/a&gt;)&lt;/em&gt; - Static analysis prompts for call-flow mapping&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b id="tool-configuration"&gt;üëâ Tool Configuration&lt;/b&gt;&lt;/summary&gt; 
 &lt;h3&gt;Default Configuration&lt;/h3&gt; 
 &lt;p&gt;To optimize context window usage, only essential tools are enabled by default:&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Enabled by default:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;chat&lt;/code&gt;, &lt;code&gt;thinkdeep&lt;/code&gt;, &lt;code&gt;planner&lt;/code&gt;, &lt;code&gt;consensus&lt;/code&gt; - Core collaboration tools&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;codereview&lt;/code&gt;, &lt;code&gt;precommit&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt; - Essential code quality tools&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;apilookup&lt;/code&gt; - Rapid API/SDK information lookup&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;challenge&lt;/code&gt; - Critical thinking utility&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;strong&gt;Disabled by default:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;analyze&lt;/code&gt;, &lt;code&gt;refactor&lt;/code&gt;, &lt;code&gt;testgen&lt;/code&gt;, &lt;code&gt;secaudit&lt;/code&gt;, &lt;code&gt;docgen&lt;/code&gt;, &lt;code&gt;tracer&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Enabling Additional Tools&lt;/h3&gt; 
 &lt;p&gt;To enable additional tools, remove them from the &lt;code&gt;DISABLED_TOOLS&lt;/code&gt; list:&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Option 1: Edit your .env file&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Default configuration (from .env.example)
DISABLED_TOOLS=analyze,refactor,testgen,secaudit,docgen,tracer

# To enable specific tools, remove them from the list
# Example: Enable analyze tool
DISABLED_TOOLS=refactor,testgen,secaudit,docgen,tracer

# To enable ALL tools
DISABLED_TOOLS=
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Option 2: Configure in MCP settings&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;// In ~/.claude/settings.json or .mcp.json
{
  "mcpServers": {
    "zen": {
      "env": {
        // Tool configuration
        "DISABLED_TOOLS": "refactor,testgen,secaudit,docgen,tracer",
        "DEFAULT_MODEL": "pro",
        "DEFAULT_THINKING_MODE_THINKDEEP": "high",
        
        // API configuration
        "GEMINI_API_KEY": "your-gemini-key",
        "OPENAI_API_KEY": "your-openai-key",
        "OPENROUTER_API_KEY": "your-openrouter-key",
        
        // Logging and performance
        "LOG_LEVEL": "INFO",
        "CONVERSATION_TIMEOUT_HOURS": "6",
        "MAX_CONVERSATION_TURNS": "50"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Option 3: Enable all tools&lt;/strong&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-json"&gt;// Remove or empty the DISABLED_TOOLS to enable everything
{
  "mcpServers": {
    "zen": {
      "env": {
        "DISABLED_TOOLS": ""
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Essential tools (&lt;code&gt;version&lt;/code&gt;, &lt;code&gt;listmodels&lt;/code&gt;) cannot be disabled&lt;/li&gt; 
  &lt;li&gt;After changing tool configuration, restart your Claude session for changes to take effect&lt;/li&gt; 
  &lt;li&gt;Each tool adds to context window usage, so only enable what you need&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;üì∫ Watch Tools In Action&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Chat Tool&lt;/b&gt; - Collaborative decision making and multi-turn conversations&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;Picking Redis vs Memcached:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/41076cfe-dd49-4dfc-82f5-d7461b34705d"&gt;Chat Redis or Memcached_web.webm&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;Multi-turn conversation with continuation:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/37bd57ca-e8a6-42f7-b5fb-11de271e95db"&gt;Chat With Gemini_web.webm&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Consensus Tool&lt;/b&gt; - Multi-model debate and decision making&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;Multi-model consensus debate:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/76a23dd5-887a-4382-9cf0-642f5cf6219e"&gt;Zen Consensus Debate&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;PreCommit Tool&lt;/b&gt; - Comprehensive change validation&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;Pre-commit validation workflow:&lt;/strong&gt;&lt;/p&gt; 
 &lt;div align="center"&gt; 
  &lt;img src="https://github.com/user-attachments/assets/584adfa6-d252-49b4-b5b0-0cd6e97fb2c6" width="950" /&gt; 
 &lt;/div&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;API Lookup Tool&lt;/b&gt; - Current vs outdated API documentation&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;Without Zen - outdated APIs:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/01a79dc9-ad16-4264-9ce1-76a56c3580ee"&gt;API without Zen&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;With Zen - current APIs:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/5c847326-4b66-41f7-8f30-f380453dce22"&gt;API with Zen&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Challenge Tool&lt;/b&gt; - Critical thinking vs reflexive agreement&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;Without Zen:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/64f3c9fb-7ca9-4876-b687-25e847edfd87" alt="without_zen@2x" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;With Zen:&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/9d72f444-ba53-4ab1-83e5-250062c6ee70" alt="with_zen@2x" /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;AI Orchestration&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Auto model selection&lt;/strong&gt; - Claude picks the right AI for each task&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-model workflows&lt;/strong&gt; - Chain different models in single conversations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Conversation continuity&lt;/strong&gt; - Context preserved across tools and models&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/context-revival.md"&gt;Context revival&lt;/a&gt;&lt;/strong&gt; - Continue conversations even after context resets&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Model Support&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple providers&lt;/strong&gt; - Gemini, OpenAI, Azure, X.AI, OpenRouter, DIAL, Ollama&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Latest models&lt;/strong&gt; - GPT-5, Gemini 2.5 Pro, O3, Grok-4, local Llama&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/advanced-usage.md#thinking-modes"&gt;Thinking modes&lt;/a&gt;&lt;/strong&gt; - Control reasoning depth vs cost&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Vision support&lt;/strong&gt; - Analyze images, diagrams, screenshots&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Developer Experience&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Guided workflows&lt;/strong&gt; - Systematic investigation prevents rushed analysis&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Smart file handling&lt;/strong&gt; - Auto-expand directories, manage token limits&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web search integration&lt;/strong&gt; - Access current documentation and best practices&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/advanced-usage.md#working-with-large-prompts"&gt;Large prompt support&lt;/a&gt;&lt;/strong&gt; - Bypass MCP's 25K token limit&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Workflows&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Multi-model Code Review:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"Perform a codereview using gemini pro and o3, then use planner to create a fix strategy"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Üí Claude reviews code systematically ‚Üí Consults Gemini Pro ‚Üí Gets O3's perspective ‚Üí Creates unified action plan&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Collaborative Debugging:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"Debug this race condition with max thinking mode, then validate the fix with precommit"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Üí Deep investigation ‚Üí Expert analysis ‚Üí Solution implementation ‚Üí Pre-commit validation&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Architecture Planning:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;"Plan our microservices migration, get consensus from pro and o3 on the approach"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚Üí Structured planning ‚Üí Multiple expert opinions ‚Üí Consensus building ‚Üí Implementation roadmap&lt;/p&gt; 
&lt;p&gt;üëâ &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/advanced-usage.md"&gt;Advanced Usage Guide&lt;/a&gt;&lt;/strong&gt; for complex workflows, model configuration, and power-user features&lt;/p&gt; 
&lt;h2&gt;Quick Links&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;üìñ Documentation&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/index.md"&gt;Docs Overview&lt;/a&gt; - High-level map of major guides&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/getting-started.md"&gt;Getting Started&lt;/a&gt; - Complete setup guide&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/tools/"&gt;Tools Reference&lt;/a&gt; - All tools with examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/advanced-usage.md"&gt;Advanced Usage&lt;/a&gt; - Power user features&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/configuration.md"&gt;Configuration&lt;/a&gt; - Environment variables, restrictions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/adding_providers.md"&gt;Adding Providers&lt;/a&gt; - Provider-specific setup (OpenAI, Azure, custom gateways)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/model_ranking.md"&gt;Model Ranking Guide&lt;/a&gt; - How intelligence scores drive auto-mode suggestions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;üîß Setup &amp;amp; Support&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/wsl-setup.md"&gt;WSL Setup&lt;/a&gt; - Windows users&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/troubleshooting.md"&gt;Troubleshooting&lt;/a&gt; - Common issues&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/docs/contributions.md"&gt;Contributing&lt;/a&gt; - Code standards, PR process&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Apache 2.0 License - see &lt;a href="https://raw.githubusercontent.com/BeehiveInnovations/zen-mcp-server/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Built with the power of &lt;strong&gt;Multi-Model AI&lt;/strong&gt; collaboration ü§ù&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;ctual &lt;strong&gt;I&lt;/strong&gt;ntelligence by real Humans&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://modelcontextprotocol.com"&gt;MCP (Model Context Protocol)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://developers.openai.com/codex/cli"&gt;Codex CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://claude.ai/code"&gt;Claude Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ai.google.dev/"&gt;Gemini&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://openai.com/"&gt;OpenAI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.microsoft.com/azure/ai-services/openai/"&gt;Azure OpenAI&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Star History&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#BeehiveInnovations/zen-mcp-server&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=BeehiveInnovations/zen-mcp-server&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>virattt/ai-hedge-fund</title>
      <link>https://github.com/virattt/ai-hedge-fund</link>
      <description>&lt;p&gt;An AI Hedge Fund Team&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Hedge Fund&lt;/h1&gt; 
&lt;p&gt;This is a proof of concept for an AI-powered hedge fund. The goal of this project is to explore the use of AI to make trading decisions. This project is for &lt;strong&gt;educational&lt;/strong&gt; purposes only and is not intended for real trading or investment.&lt;/p&gt; 
&lt;p&gt;This system employs several agents working together:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Aswath Damodaran Agent - The Dean of Valuation, focuses on story, numbers, and disciplined valuation&lt;/li&gt; 
 &lt;li&gt;Ben Graham Agent - The godfather of value investing, only buys hidden gems with a margin of safety&lt;/li&gt; 
 &lt;li&gt;Bill Ackman Agent - An activist investor, takes bold positions and pushes for change&lt;/li&gt; 
 &lt;li&gt;Cathie Wood Agent - The queen of growth investing, believes in the power of innovation and disruption&lt;/li&gt; 
 &lt;li&gt;Charlie Munger Agent - Warren Buffett's partner, only buys wonderful businesses at fair prices&lt;/li&gt; 
 &lt;li&gt;Michael Burry Agent - The Big Short contrarian who hunts for deep value&lt;/li&gt; 
 &lt;li&gt;Mohnish Pabrai Agent - The Dhandho investor, who looks for doubles at low risk&lt;/li&gt; 
 &lt;li&gt;Peter Lynch Agent - Practical investor who seeks "ten-baggers" in everyday businesses&lt;/li&gt; 
 &lt;li&gt;Phil Fisher Agent - Meticulous growth investor who uses deep "scuttlebutt" research&lt;/li&gt; 
 &lt;li&gt;Rakesh Jhunjhunwala Agent - The Big Bull of India&lt;/li&gt; 
 &lt;li&gt;Stanley Druckenmiller Agent - Macro legend who hunts for asymmetric opportunities with growth potential&lt;/li&gt; 
 &lt;li&gt;Warren Buffett Agent - The oracle of Omaha, seeks wonderful companies at a fair price&lt;/li&gt; 
 &lt;li&gt;Valuation Agent - Calculates the intrinsic value of a stock and generates trading signals&lt;/li&gt; 
 &lt;li&gt;Sentiment Agent - Analyzes market sentiment and generates trading signals&lt;/li&gt; 
 &lt;li&gt;Fundamentals Agent - Analyzes fundamental data and generates trading signals&lt;/li&gt; 
 &lt;li&gt;Technicals Agent - Analyzes technical indicators and generates trading signals&lt;/li&gt; 
 &lt;li&gt;Risk Manager - Calculates risk metrics and sets position limits&lt;/li&gt; 
 &lt;li&gt;Portfolio Manager - Makes final trading decisions and generates orders&lt;/li&gt; 
&lt;/ol&gt; 
&lt;img width="1042" alt="Screenshot 2025-03-22 at 6 19 07 PM" src="https://github.com/user-attachments/assets/cbae3dcf-b571-490d-b0ad-3f0f035ac0d4" /&gt; 
&lt;p&gt;Note: the system does not actually make any trades.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://twitter.com/virattt"&gt;&lt;img src="https://img.shields.io/twitter/follow/virattt?style=social" alt="Twitter Follow" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;This project is for &lt;strong&gt;educational and research purposes only&lt;/strong&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not intended for real trading or investment&lt;/li&gt; 
 &lt;li&gt;No investment advice or guarantees provided&lt;/li&gt; 
 &lt;li&gt;Creator assumes no liability for financial losses&lt;/li&gt; 
 &lt;li&gt;Consult a financial advisor for investment decisions&lt;/li&gt; 
 &lt;li&gt;Past performance does not indicate future results&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By using this software, you agree to use it solely for learning purposes.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#how-to-install"&gt;How to Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#how-to-run"&gt;How to Run&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#%EF%B8%8F-command-line-interface"&gt;‚å®Ô∏è Command Line Interface&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#%EF%B8%8F-web-application"&gt;üñ•Ô∏è Web Application&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#how-to-contribute"&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#feature-requests"&gt;Feature Requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to Install&lt;/h2&gt; 
&lt;p&gt;Before you can run the AI Hedge Fund, you'll need to install it and set up your API keys. These steps are common to both the full-stack web application and command line interface.&lt;/p&gt; 
&lt;h3&gt;1. Clone the Repository&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/virattt/ai-hedge-fund.git
cd ai-hedge-fund
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Set up API keys&lt;/h3&gt; 
&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file for your API keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create .env file for your API keys (in the root directory)
cp .env.example .env
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open and edit the &lt;code&gt;.env&lt;/code&gt; file to add your API keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# For running LLMs hosted by openai (gpt-4o, gpt-4o-mini, etc.)
OPENAI_API_KEY=your-openai-api-key

# For getting financial data to power the hedge fund
FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: You must set at least one LLM API key (e.g. &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;, &lt;code&gt;GROQ_API_KEY&lt;/code&gt;, &lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;, or &lt;code&gt;DEEPSEEK_API_KEY&lt;/code&gt;) for the hedge fund to work.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Financial Data&lt;/strong&gt;: Data for AAPL, GOOGL, MSFT, NVDA, and TSLA is free and does not require an API key. For any other ticker, you will need to set the &lt;code&gt;FINANCIAL_DATASETS_API_KEY&lt;/code&gt; in the .env file.&lt;/p&gt; 
&lt;h2&gt;How to Run&lt;/h2&gt; 
&lt;h3&gt;‚å®Ô∏è Command Line Interface&lt;/h3&gt; 
&lt;p&gt;You can run the AI Hedge Fund directly via terminal. This approach offers more granular control and is useful for automation, scripting, and integration purposes.&lt;/p&gt; 
&lt;img width="992" alt="Screenshot 2025-01-06 at 5 50 17 PM" src="https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b" /&gt; 
&lt;h4&gt;Quick Start&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Poetry (if not already installed):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSL https://install.python-poetry.org | python3 -
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Install dependencies:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Run the AI Hedge Fund&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry run python src/main.py --ticker AAPL,MSFT,NVDA
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also specify a &lt;code&gt;--ollama&lt;/code&gt; flag to run the AI hedge fund using local LLMs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry run python src/main.py --ticker AAPL,MSFT,NVDA --ollama
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can optionally specify the start and end dates to make decisions over a specific time period.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry run python src/main.py --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Run the Backtester&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example Output:&lt;/strong&gt; &lt;img width="941" alt="Screenshot 2025-01-06 at 5 47 52 PM" src="https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47" /&gt;&lt;/p&gt; 
&lt;p&gt;Note: The &lt;code&gt;--ollama&lt;/code&gt;, &lt;code&gt;--start-date&lt;/code&gt;, and &lt;code&gt;--end-date&lt;/code&gt; flags work for the backtester, as well!&lt;/p&gt; 
&lt;h3&gt;üñ•Ô∏è Web Application&lt;/h3&gt; 
&lt;p&gt;The new way to run the AI Hedge Fund is through our web application that provides a user-friendly interface. This is recommended for users who prefer visual interfaces over command line tools.&lt;/p&gt; 
&lt;p&gt;Please see detailed instructions on how to install and run the web application &lt;a href="https://github.com/virattt/ai-hedge-fund/tree/main/app"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;img width="1721" alt="Screenshot 2025-06-28 at 6 41 03‚ÄØPM" src="https://github.com/user-attachments/assets/b95ab696-c9f4-416c-9ad1-51feb1f5374b" /&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repository&lt;/li&gt; 
 &lt;li&gt;Create a feature branch&lt;/li&gt; 
 &lt;li&gt;Commit your changes&lt;/li&gt; 
 &lt;li&gt;Push to the branch&lt;/li&gt; 
 &lt;li&gt;Create a Pull Request&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Please keep your pull requests small and focused. This will make it easier to review and merge.&lt;/p&gt; 
&lt;h2&gt;Feature Requests&lt;/h2&gt; 
&lt;p&gt;If you have a feature request, please open an &lt;a href="https://github.com/virattt/ai-hedge-fund/issues"&gt;issue&lt;/a&gt; and make sure it is tagged with &lt;code&gt;enhancement&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA/physicsnemo</title>
      <link>https://github.com/NVIDIA/physicsnemo</link>
      <description>&lt;p&gt;Open-source deep-learning framework for building, training, and fine-tuning deep learning models using state-of-the-art Physics-ML methods&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NVIDIA PhysicsNeMo&lt;/h1&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;p&gt;üìù NVIDIA Modulus has been renamed to NVIDIA PhysicsNeMo&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.repostatus.org/#active"&gt;&lt;img src="https://www.repostatus.org/badges/latest/active.svg?sanitize=true" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." /&gt;&lt;/a&gt; &lt;a href="https://github.com/NVIDIA/physicsnemo/raw/master/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/github/license/NVIDIA/physicsnemo" alt="GitHub" /&gt;&lt;/a&gt; &lt;a href="https://github.com/psf/black"&gt;&lt;img src="https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true" alt="Code style: black" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- markdownlint-enable --&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#what-is-physicsnemo"&gt;&lt;strong&gt;NVIDIA PhysicsNeMo&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/index.html"&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#installation"&gt;&lt;strong&gt;Install Guide&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#getting-started"&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#contributing-to-physicsnemo"&gt;&lt;strong&gt;Contributing Guidelines&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#license"&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is PhysicsNeMo?&lt;/h2&gt; 
&lt;p&gt;NVIDIA PhysicsNeMo is an open-source deep-learning framework for building, training, fine-tuning, and inferring Physics AI models using state-of-the-art SciML methods for AI4Science and engineering.&lt;/p&gt; 
&lt;p&gt;PhysicsNeMo provides Python modules to compose scalable and optimized training and inference pipelines to explore, develop, validate, and deploy AI models that combine physics knowledge with data, enabling real-time predictions.&lt;/p&gt; 
&lt;p&gt;Whether you are exploring the use of neural operators, GNNs, or transformers, or are interested in Physics-Informed Neural Networks or a hybrid approach in between, PhysicsNeMo provides you with an optimized stack that will enable you to train your models at scale.&lt;/p&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/docs/img/value_prop/Knowledge_guided_models.gif" alt="PhysicsNeMo" /&gt; &lt;/p&gt; 
&lt;!-- markdownlint-enable --&gt; 
&lt;!-- toc --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#more-about-physicsnemo"&gt;More About PhysicsNeMo&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#scalable-gpu-optimized-training-library"&gt;Scalable GPU-Optimized Training Library&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#a-suite-of-physics-informed-ml-models"&gt;A Suite of Physics-Informed ML Models&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#seamless-pytorch-integration"&gt;Seamless PyTorch Integration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#easy-customization-and-extension"&gt;Easy Customization and Extension&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#ai4science-library"&gt;AI4Science Library&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#domain-specific-packages"&gt;Domain-Specific Packages&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#who-is-using-and-contributing-to-physicsnemo"&gt;Who is Using and Contributing to PhysicsNeMo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#why-are-they-using-physicsnemo"&gt;Why Use PhysicsNeMo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#contributing-to-physicsnemo"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#communication"&gt;Communication&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- tocstop --&gt; 
&lt;h2&gt;More About PhysicsNeMo&lt;/h2&gt; 
&lt;p&gt;At a granular level, PhysicsNeMo is developed as modular functionality and therefore provides built-in composable modules that are packaged into a few key components:&lt;/p&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Component&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.models.html"&gt;&lt;strong&gt;physicsnemo.models&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A collection of optimized, customizable, and easy-to-use families of model architectures such as Neural Operators, Graph Neural Networks, Diffusion models, Transformer models, and many more&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.datapipes.html"&gt;&lt;strong&gt;physicsnemo.datapipes&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Optimized and scalable built-in data pipelines fine-tuned to handle engineering and scientific data structures like point clouds, meshes, etc.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.distributed.html"&gt;&lt;strong&gt;physicsnemo.distributed&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A distributed computing sub-module built on top of &lt;code&gt;torch.distributed&lt;/code&gt; to enable parallel training with just a few steps&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/NVIDIA/physicsnemo-curator"&gt;&lt;strong&gt;physicsnemo.curator&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A sub-module to streamline and accelerate the process of data curation for engineering datasets&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-sym/user_guide/features/csg_and_tessellated_module.html"&gt;&lt;strong&gt;physicsnemo.sym.geometry&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A sub-module to handle geometry for DL training using Constructive Solid Geometry modeling and CAD files in STL format&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-sym/user_guide/features/nodes.html"&gt;&lt;strong&gt;physicsnemo.sym.eq&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A sub-module to use PDEs in your DL training with several implementations of commonly observed equations and easy ways for customization&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-enable --&gt; 
&lt;p&gt;For a complete list, refer to the PhysicsNeMo API documentation for &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/index.html"&gt;PhysicsNeMo&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AI4Science Library&lt;/h2&gt; 
&lt;p&gt;Usually, PhysicsNeMo is used either as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A complementary tool to PyTorch when exploring AI for SciML and AI4Science applications.&lt;/li&gt; 
 &lt;li&gt;A deep learning research platform that provides scale and optimal performance on NVIDIA GPUs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Domain-Specific Packages&lt;/h3&gt; 
&lt;p&gt;The following are packages dedicated to domain experts of specific communities, catering to their unique exploration needs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NVIDIA/physicsnemo-cfd"&gt;PhysicsNeMo CFD&lt;/a&gt;: Inference sub-module of PhysicsNeMo to enable CFD domain experts to explore, experiment, and validate using pretrained AI models for CFD use cases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NVIDIA/physicsnemo-curator"&gt;PhysicsNeMo Curator&lt;/a&gt;: Inference sub-module of PhysicsNeMo to streamline and accelerate the process of data curation for engineering datasets.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NVIDIA/earth2studio"&gt;Earth-2 Studio&lt;/a&gt;: Inference sub-module of PhysicsNeMo to enable climate researchers and scientists to explore and experiment with pretrained AI models for weather and climate.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scalable GPU-Optimized Training Library&lt;/h3&gt; 
&lt;p&gt;PhysicsNeMo provides a highly optimized and scalable training library for maximizing the power of NVIDIA GPUs. &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.distributed.html"&gt;Distributed computing&lt;/a&gt; utilities allow for efficient scaling from a single GPU to multi-node GPU clusters with a few lines of code, ensuring that large-scale physics-informed machine learning (ML) models can be trained quickly and effectively. The framework includes support for advanced &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.utils.html#module-physicsnemo.utils.capture"&gt;optimization utilities&lt;/a&gt;, &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.datapipes.html"&gt;tailor-made datapipes&lt;/a&gt;, and &lt;a href="https://github.com/NVIDIA/physicsnemo-sym/tree/main/physicsnemo/sym/eq"&gt;validation utilities&lt;/a&gt; to enhance end-to-end training speed.&lt;/p&gt; 
&lt;h3&gt;A Suite of Physics-Informed ML Models&lt;/h3&gt; 
&lt;p&gt;PhysicsNeMo offers a library of state-of-the-art models specifically designed for Physics-ML applications. Users can build any model architecture by using the underlying PyTorch layers and combining them with curated PhysicsNeMo layers.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.models.html#model-zoo"&gt;Model Zoo&lt;/a&gt; includes optimized implementations of families of model architectures such as Neural Operators:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/physicsnemo/models/fno"&gt;Fourier Neural Operators (FNOs)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-sym/user_guide/neural_operators/deeponet.html"&gt;DeepONet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/examples/cfd/external_aerodynamics/domino/readme.html"&gt;DoMINO&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/physicsnemo/models/gnn_layers"&gt;Graph Neural Networks (GNNs)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/examples/cfd/vortex_shedding_mgn/readme.html"&gt;MeshGraphNet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/examples/cfd/lagrangian_mgn/readme.html"&gt;MeshGraphNet for Lagrangian&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/examples/cfd/external_aerodynamics/xaeronet/readme.html"&gt;XAeroNet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/physicsnemo/models/diffusion"&gt;Diffusion Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/examples/generative/corrdiff/readme.html"&gt;Correction Diffusion Model&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/examples/generative/diffusion/readme.html"&gt;DDPM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/examples/weather/graphcast/readme.html"&gt;PhysicsNeMo GraphCast&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NVIDIA/physicsnemo/tree/main/examples/cfd/darcy_transolver"&gt;Transsolver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NVIDIA/physicsnemo/tree/main/physicsnemo/models"&gt;RNNs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NVIDIA/physicsnemo/tree/main/physicsnemo/models/swinvrnn"&gt;SwinVRNN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-sym/user_guide/foundational/1d_wave_equation.html"&gt;Physics-Informed Neural Networks (PINNs)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And many others.&lt;/p&gt; 
&lt;p&gt;These models are optimized for various physics domains, such as computational fluid dynamics, structural mechanics, and electromagnetics. Users can download, customize, and build upon these models to suit their specific needs, significantly reducing the time required to develop high-fidelity simulations.&lt;/p&gt; 
&lt;h3&gt;Seamless PyTorch Integration&lt;/h3&gt; 
&lt;p&gt;PhysicsNeMo is built on top of PyTorch, providing a familiar and user-friendly experience for those already proficient with PyTorch. This includes a simple Python interface and modular design, making it easy to use PhysicsNeMo with existing PyTorch workflows. Users can leverage the extensive PyTorch ecosystem, including its libraries and tools, while benefiting from PhysicsNeMo's specialized capabilities for physics-ML. This seamless integration ensures users can quickly adopt PhysicsNeMo without a steep learning curve.&lt;/p&gt; 
&lt;p&gt;For more information, refer to &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.models.html#converting-pytorch-models-to-physicsnemo-models"&gt;Converting PyTorch Models to PhysicsNeMo Models&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Easy Customization and Extension&lt;/h3&gt; 
&lt;p&gt;PhysicsNeMo is designed to be highly extensible, allowing users to add new functionality with minimal effort. The framework provides Pythonic APIs for defining new physics models, geometries, and constraints, making it easy to extend its capabilities to new use cases. The adaptability of PhysicsNeMo is further enhanced by key features such as &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.deploy.html"&gt;ONNX support&lt;/a&gt; for flexible model deployment, robust &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.launch.logging.html"&gt;logging utilities&lt;/a&gt; for streamlined error handling, and efficient &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.launch.utils.html#module-physicsnemo.launch.utils.checkpoint"&gt;checkpointing&lt;/a&gt; to simplify model loading and saving.&lt;/p&gt; 
&lt;p&gt;This extensibility ensures that PhysicsNeMo can adapt to the evolving needs of researchers and engineers, facilitating the development of innovative solutions in the field of physics-ML.&lt;/p&gt; 
&lt;p&gt;Detailed information on features and capabilities can be found in the &lt;a href="https://docs.nvidia.com/physicsnemo/index.html#core"&gt;PhysicsNeMo documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/examples/README.md"&gt;Reference samples&lt;/a&gt; cover a broad spectrum of physics-constrained and data-driven workflows to suit the diversity of use cases in the science and engineering disciplines.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Have questions about how PhysicsNeMo can assist you? Try our [Experimental] chatbot, &lt;a href="https://chatgpt.com/g/g-PXrBv20SC-modulus-guide"&gt;PhysicsNeMo Guide&lt;/a&gt;, for answers.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Hello World&lt;/h3&gt; 
&lt;p&gt;You can start using PhysicsNeMo in your PyTorch code as simply as shown here:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; import torch
&amp;gt;&amp;gt;&amp;gt; from physicsnemo.models.mlp.fully_connected import FullyConnected
&amp;gt;&amp;gt;&amp;gt; model = FullyConnected(in_features=32, out_features=64)
&amp;gt;&amp;gt;&amp;gt; input = torch.randn(128, 32)
&amp;gt;&amp;gt;&amp;gt; output = model(input)
&amp;gt;&amp;gt;&amp;gt; output.shape
torch.Size([128, 64])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use the distributed module, you can do the following (example for distributed data parallel training; for a more in-depth tutorial, refer to &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/api/physicsnemo.distributed.html#"&gt;PhysicsNeMo Distributed&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import torch
from torch.nn.parallel import DistributedDataParallel
from physicsnemo.distributed import DistributedManager
from physicsnemo.models.mlp.fully_connected import FullyConnected

def main():
    DistributedManager.initialize()
    dist = DistributedManager()
    
    arch = FullyConnected(in_features=32, out_features=64).to(dist.device)
    
    if dist.distributed:
        ddps = torch.cuda.Stream()
        with torch.cuda.stream(ddps):
            arch = DistributedDataParallel(
                arch,
                device_ids=[dist.local_rank],
                output_device=dist.device,
                broadcast_buffers=dist.broadcast_buffers,
                find_unused_parameters=dist.find_unused_parameters,
            )
        torch.cuda.current_stream().wait_stream(ddps)

    # Set up the optimizer
    optimizer = torch.optim.Adam(
        arch.parameters(),
        lr=0.001,
    )

    def training_step(invar, target):
        pred = arch(invar)
        loss = torch.sum(torch.pow(pred - target, 2))
        loss.backward()
        optimizer.step()
        return loss

    # Sample training loop
    for i in range(20):
        # Random inputs and targets for simplicity
        input = torch.randn(128, 32, device=dist.device)
        target = torch.randn(128, 64, device=dist.device)

        # Training step
        loss = training_step(input, target)

if __name__ == "__main__":
    main()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use the PDE module, you can do the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; from physicsnemo.sym.eq.pdes.navier_stokes import NavierStokes
&amp;gt;&amp;gt;&amp;gt; ns = NavierStokes(nu=0.01, rho=1, dim=2)
&amp;gt;&amp;gt;&amp;gt; ns.pprint()
continuity: u__x + v__y
momentum_x: u*u__x + v*u__y + p__x + u__t - 0.01*u__x__x - 0.01*u__y__y
momentum_y: u*v__x + v*v__y + p__y + v__t - 0.01*v__x__x - 0.01*v__y__y
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Who is Using and Contributing to PhysicsNeMo&lt;/h2&gt; 
&lt;p&gt;PhysicsNeMo is an open-source project and gets contributions from researchers in the SciML and AI4Science fields. While the PhysicsNeMo team works on optimizing the underlying software stack, the community collaborates and contributes model architectures, datasets, and reference applications so we can innovate in the pursuit of developing generalizable model architectures and algorithms.&lt;/p&gt; 
&lt;p&gt;Some recent examples of community contributors are the &lt;a href="https://developer.nvidia.com/blog/spotlight-hp-3d-printing-and-nvidia-physicsnemo-collaborate-on-open-source-manufacturing-digital-twin/"&gt;HP Labs 3D Printing team&lt;/a&gt;, &lt;a href="https://developer.nvidia.com/blog/enabling-greater-patient-specific-cardiovascular-care-with-ai-surrogates/"&gt;Stanford Cardiovascular research team&lt;/a&gt;, &lt;a href="https://github.com/NVIDIA/physicsnemo/tree/main/examples/cfd/mhd_pino"&gt;UIUC team&lt;/a&gt;, &lt;a href="https://github.com/NVIDIA/physicsnemo/tree/main/examples/generative/diffusion"&gt;CMU team&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;p&gt;Recent examples of research teams using PhysicsNeMo are the &lt;a href="https://arxiv.org/abs/2404.05768"&gt;ORNL team&lt;/a&gt;, &lt;a href="https://www.nvidia.com/en-us/on-demand/session/gtc24-s62237/"&gt;TU Munich CFD team&lt;/a&gt;, etc.&lt;/p&gt; 
&lt;p&gt;Please navigate to this page for a complete list of research work leveraging PhysicsNeMo. For a list of enterprises using PhysicsNeMo, refer to the &lt;a href="https://developer.nvidia.com/physicsnemo"&gt;PhysicsNeMo Webpage&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Using PhysicsNeMo and interested in showcasing your work on &lt;a href="https://developer.nvidia.com/blog/category/simulation-modeling-design/"&gt;NVIDIA Blogs&lt;/a&gt;? Fill out this &lt;a href="https://forms.gle/XsBdWp3ji67yZAUF7"&gt;proposal form&lt;/a&gt; and we will get back to you!&lt;/p&gt; 
&lt;h2&gt;Why Are They Using PhysicsNeMo&lt;/h2&gt; 
&lt;p&gt;Here are some of the key benefits of PhysicsNeMo for SciML model development:&lt;/p&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;img src="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/docs/img/value_prop/benchmarking.svg?sanitize=true" width="100" /&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;img src="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/docs/img/value_prop/recipe.svg?sanitize=true" width="100" /&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;img src="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/docs/img/value_prop/performance.svg?sanitize=true" width="100" /&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;SciML Benchmarking and Validation&lt;/td&gt; 
   &lt;td&gt;Ease of Using Generalized SciML Recipes with Heterogeneous Datasets&lt;/td&gt; 
   &lt;td&gt;Out-of-the-Box Performance and Scalability&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PhysicsNeMo enables researchers to benchmark their AI models against proven architectures for standard benchmark problems with detailed domain-specific validation criteria.&lt;/td&gt; 
   &lt;td&gt;PhysicsNeMo enables researchers to pick from state-of-the-art SciML architectures and use built-in data pipelines for their use case.&lt;/td&gt; 
   &lt;td&gt;PhysicsNeMo provides out-of-the-box performant training pipelines, including optimized ETL pipelines for heterogeneous engineering and scientific datasets and out-of-the-box scaling across multi-GPU and multi-node GPUs.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;!-- markdownlint-enable --&gt; 
&lt;p&gt;See what your peer SciML researchers are saying about PhysicsNeMo (coming soon).&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The following resources will help you learn how to use PhysicsNeMo. The best way is to start with a reference sample and then update it for your own use case.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/tutorials/simple_training_example.html#using-custom-models-in-physicsnemo"&gt;Using PhysicsNeMo with your PyTorch model&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/tutorials/simple_training_example.html#using-built-in-models"&gt;Using PhysicsNeMo built-in models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/getting-started/index.html"&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NVIDIA/physicsnemo/raw/main/examples/README.md"&gt;Reference Samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/physicsnemo-core/index.html"&gt;User Guide Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.nvidia.com/en-us/on-demand/session/gtc24-dlit61460/?playlistId=playList-bd07f4dc-1397-4783-a959-65cec79aa985"&gt;Getting Started Webinar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openhackathons-org/End-to-End-AI-for-Science"&gt;AI4Science PhysicsNeMo Bootcamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://catalog.ngc.nvidia.com/models?filters=&amp;amp;orderBy=scoreDESC&amp;amp;query=PhysicsNeMo&amp;amp;page=&amp;amp;pageSize="&gt;PhysicsNeMo Pretrained Models&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://catalog.ngc.nvidia.com/resources?filters=&amp;amp;orderBy=scoreDESC&amp;amp;query=PhysicsNeMo&amp;amp;page=&amp;amp;pageSize="&gt;PhysicsNeMo Datasets and Supplementary Materials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.nvidia.com/courses/course-detail?course_id=course-v1:DLI+S-OV-04+V1"&gt;Self-Paced PhysicsNeMo DLI Training&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.nvidia.com/en-us/on-demand/deep-learning-for-science-and-engineering/"&gt;Deep Learning for Science and Engineering Lecture Series with PhysicsNeMo&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.nvidia.com/en-us/on-demand/session/dliteachingkit-setk5002/"&gt;PhysicsNeMo: Purpose and Usage&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.nvidia.com/en-us/on-demand/search/?facet.mimetype%5B%5D=event%20session&amp;amp;layout=list&amp;amp;page=1&amp;amp;q=physicsnemo&amp;amp;sort=relevance&amp;amp;sortDir=desc"&gt;Video Tutorials&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The following instructions help you install the base PhysicsNeMo modules to get started. There are additional optional dependencies for specific models that are listed under &lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#optional-dependencies"&gt;optional dependencies&lt;/a&gt;. The training recipes are not packaged into the pip wheels or the container to keep the footprint low. We recommend users clone the appropriate training recipes and use them as a starting point. These training recipes may require additional example-specific dependencies, as indicated through their associated &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt; 
&lt;h3&gt;PyPI&lt;/h3&gt; 
&lt;p&gt;The recommended method for installing the latest version of PhysicsNeMo is using PyPI:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Bash"&gt;pip install nvidia-physicsnemo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The installation can be verified by running the &lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/#hello-world"&gt;Hello World&lt;/a&gt; example.&lt;/p&gt; 
&lt;h4&gt;Optional Dependencies&lt;/h4&gt; 
&lt;p&gt;PhysicsNeMo has many optional dependencies that are used in specific components. When using pip, all dependencies used in PhysicsNeMo can be installed with &lt;code&gt;pip install nvidia-physicsnemo[all]&lt;/code&gt;. If you are developing PhysicsNeMo, developer dependencies can be installed using &lt;code&gt;pip install nvidia-physicsnemo[dev]&lt;/code&gt;. Otherwise, additional dependencies can be installed on a case-by-case basis. Detailed information on installing the optional dependencies can be found in the &lt;a href="https://docs.nvidia.com/deeplearning/physicsnemo/getting-started/index.html"&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;NVCR Container&lt;/h3&gt; 
&lt;p&gt;The recommended PhysicsNeMo Docker image can be pulled from the &lt;a href="https://catalog.ngc.nvidia.com/orgs/nvidia/teams/physicsnemo/containers/physicsnemo"&gt;NVIDIA Container Registry&lt;/a&gt; (refer to the NGC registry for the latest tag):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Bash"&gt;docker pull nvcr.io/nvidia/physicsnemo/physicsnemo:25.06
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Inside the container, you can clone the PhysicsNeMo git repositories and get started with the examples. The command below shows the instructions to launch the PhysicsNeMo container and run examples from this repo:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --shm-size=1g --ulimit memlock=-1 --ulimit stack=67108864 --runtime nvidia \
--rm -it nvcr.io/nvidia/physicsnemo/physicsnemo:25.06 bash
git clone https://github.com/NVIDIA/physicsnemo.git
cd physicsnemo/examples/cfd/darcy_fno/
pip install warp-lang # install NVIDIA Warp to run the Darcy example
python train_fno_darcy.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;From Source&lt;/h2&gt; 
&lt;h3&gt;Package&lt;/h3&gt; 
&lt;p&gt;For a local build of the PhysicsNeMo Python package from source, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Bash"&gt;git clone git@github.com:NVIDIA/physicsnemo.git &amp;amp;&amp;amp; cd physicsnemo

pip install --upgrade pip
pip install .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Source Container&lt;/h3&gt; 
&lt;p&gt;To build the PhysicsNeMo Docker image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker build -t physicsnemo:deploy \
    --build-arg TARGETPLATFORM=linux/amd64 --target deploy -f Dockerfile .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can run &lt;code&gt;make container-deploy&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To build the CI image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker build -t physicsnemo:ci \
    --build-arg TARGETPLATFORM=linux/amd64 --target ci -f Dockerfile .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can run &lt;code&gt;make container-ci&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Currently, only &lt;code&gt;linux/amd64&lt;/code&gt; and &lt;code&gt;linux/arm64&lt;/code&gt; platforms are supported. If using &lt;code&gt;linux/arm64&lt;/code&gt;, some dependencies like &lt;code&gt;warp-lang&lt;/code&gt; might not install correctly.&lt;/p&gt; 
&lt;h2&gt;PhysicsNeMo Migration Guide&lt;/h2&gt; 
&lt;p&gt;NVIDIA Modulus has been renamed to NVIDIA PhysicsNeMo. For migration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;code&gt;pip install nvidia-physicsnemo&lt;/code&gt; rather than &lt;code&gt;pip install nvidia-modulus&lt;/code&gt; for PyPI wheels.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;nvcr.io/nvidia/physicsnemo/physicsnemo:&amp;lt;tag&amp;gt;&lt;/code&gt; rather than &lt;code&gt;nvcr.io/nvidia/modulus/modulus:&amp;lt;tag&amp;gt;&lt;/code&gt; for Docker containers.&lt;/li&gt; 
 &lt;li&gt;Replace &lt;code&gt;nvidia-modulus&lt;/code&gt; with &lt;code&gt;nvidia-physicsnemo&lt;/code&gt; in your pip requirements files (&lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;pyproject.toml&lt;/code&gt;, etc.).&lt;/li&gt; 
 &lt;li&gt;In your code, change the import statements from &lt;code&gt;import modulus&lt;/code&gt; to &lt;code&gt;import physicsnemo&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The old PyPI registry and the NGC container registry will be deprecated soon and will not receive any bug fixes/updates. The old checkpoints will remain compatible with these updates.&lt;/p&gt; 
&lt;p&gt;More details to follow soon.&lt;/p&gt; 
&lt;h2&gt;Contributing to PhysicsNeMo&lt;/h2&gt; 
&lt;p&gt;PhysicsNeMo is an open-source collaboration, and its success is rooted in community contributions to further the field of Physics-ML. Thank you for contributing to the project so others can build on top of your contributions.&lt;/p&gt; 
&lt;p&gt;For guidance on contributing to PhysicsNeMo, please refer to the &lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Cite PhysicsNeMo&lt;/h2&gt; 
&lt;p&gt;If PhysicsNeMo helped your research and you would like to cite it, please refer to the &lt;a href="https://github.com/NVIDIA/physicsnemo/raw/main/CITATION.cff"&gt;guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;GitHub Discussions: Discuss new architectures, implementations, Physics-ML research, etc.&lt;/li&gt; 
 &lt;li&gt;GitHub Issues: Bug reports, feature requests, install issues, etc.&lt;/li&gt; 
 &lt;li&gt;PhysicsNeMo Forum: The &lt;a href="https://forums.developer.nvidia.com/t/welcome-to-the-physicsnemo-ml-model-framework-forum/178556"&gt;PhysicsNeMo Forum&lt;/a&gt; hosts an audience of new to moderate-level users and developers for general chat, online discussions, collaboration, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;Want to suggest some improvements to PhysicsNeMo? Use our &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSfX4zZ0Lp7MMxzi3xqvzX4IQDdWbkNh5H_a_clzIhclE2oSBQ/viewform?usp=sf_link"&gt;feedback form&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;PhysicsNeMo is provided under the Apache License 2.0. Please see &lt;a href="https://raw.githubusercontent.com/NVIDIA/physicsnemo/main/LICENSE.txt"&gt;LICENSE.txt&lt;/a&gt; for the full license text. Enterprise SLA, support, and preview access are available under NVAIE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trycua/cua</title>
      <link>https://github.com/trycua/cua</link>
      <description>&lt;p&gt;Open-source infrastructure for Computer-Use Agents. Sandboxes, SDKs, and benchmarks to train and evaluate AI agents that can control full desktops (macOS, Linux, Windows).&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" alt="Cua logo" height="150" srcset="img/logo_white.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" alt="Cua logo" height="150" srcset="img/logo_black.png" /&gt; 
  &lt;img alt="Cua logo" height="150" src="https://raw.githubusercontent.com/trycua/cua/main/img/logo_black.png" /&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/#"&gt;&lt;img src="https://img.shields.io/badge/Python-333333?logo=python&amp;amp;logoColor=white&amp;amp;labelColor=333333" alt="Python" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/trycua/cua/main/#"&gt;&lt;img src="https://img.shields.io/badge/Swift-F05138?logo=swift&amp;amp;logoColor=white" alt="Swift" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/trycua/cua/main/#"&gt;&lt;img src="https://img.shields.io/badge/macOS-000000?logo=apple&amp;amp;logoColor=F0F0F0" alt="macOS" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/mVnXXpdE85"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?&amp;amp;logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://trendshift.io/repositories/13685" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/13685" alt="trycua%2Fcua | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We‚Äôre hosting the &lt;strong&gt;Computer-Use Agents SOTA Challenge&lt;/strong&gt; at &lt;a href="https://hackthenorth.com"&gt;Hack the North&lt;/a&gt; and online!&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Track A (On-site @ UWaterloo)&lt;/strong&gt;: Reserved for participants accepted to Hack the North. üèÜ Prize: &lt;strong&gt;YC interview guaranteed&lt;/strong&gt;.&lt;br /&gt; &lt;strong&gt;Track B (Remote)&lt;/strong&gt;: Open to everyone worldwide. üèÜ Prize: &lt;strong&gt;Cash award&lt;/strong&gt;.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;üëâ Sign up here: &lt;a href="https://www.trycua.com/hackathon"&gt;trycua.com/hackathon&lt;/a&gt;&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;cua&lt;/strong&gt; ("koo-ah") is Docker for &lt;a href="https://www.oneusefulthing.org/p/when-you-give-a-claude-a-mouse"&gt;Computer-Use Agents&lt;/a&gt; - it enables AI agents to control full operating systems in virtual containers and deploy them locally or to the cloud.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;video src="https://github.com/user-attachments/assets/c619b4ea-bb8e-4382-860e-f3757e36af20" width="600" controls&gt;&lt;/video&gt; 
&lt;/div&gt; 
&lt;p&gt;With the Computer SDK, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;automate Windows, Linux, and macOS VMs with a consistent, &lt;a href="https://docs.trycua.com/docs/libraries/computer#interface-actions"&gt;pyautogui-like API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;create &amp;amp; manage VMs &lt;a href="https://docs.trycua.com/docs/computer-sdk/computers#cua-local-containers"&gt;locally&lt;/a&gt; or using &lt;a href="https://www.trycua.com/"&gt;cua cloud&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;With the Agent SDK, you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;run computer-use models with a &lt;a href="https://docs.trycua.com/docs/agent-sdk/message-format"&gt;consistent schema&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;benchmark on OSWorld-Verified, SheetBench-V2, and more &lt;a href="https://docs.trycua.com/docs/agent-sdk/integrations/hud"&gt;with a single line of code using HUD&lt;/a&gt; (&lt;a href="https://github.com/trycua/cua/raw/main/notebooks/eval_osworld.ipynb"&gt;Notebook&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;combine UI grounding models with any LLM using &lt;a href="https://docs.trycua.com/docs/agent-sdk/supported-agents/composed-agents"&gt;composed agents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;use new UI agent models and UI grounding models from the Model Zoo below with just a model string (e.g., &lt;code&gt;ComputerAgent(model="openai/computer-use-preview")&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;use API or local inference by changing a prefix (e.g., &lt;code&gt;openai/&lt;/code&gt;, &lt;code&gt;openrouter/&lt;/code&gt;, &lt;code&gt;ollama/&lt;/code&gt;, &lt;code&gt;huggingface-local/&lt;/code&gt;, &lt;code&gt;mlx/&lt;/code&gt;, &lt;a href="https://docs.litellm.ai/docs/providers"&gt;etc.&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CUA Model Zoo üê®&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;a href="https://docs.trycua.com/docs/agent-sdk/supported-agents/computer-use-agents"&gt;All-in-one CUAs&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href="https://docs.trycua.com/docs/agent-sdk/supported-agents/composed-agents"&gt;UI Grounding Models&lt;/a&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;a href="https://docs.trycua.com/docs/agent-sdk/supported-agents/composed-agents"&gt;UI Planning Models&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;anthropic/claude-sonnet-4-5-20250929&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;huggingface-local/xlangai/OpenCUA-{7B,32B}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;any all-in-one CUA&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;openai/computer-use-preview&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;huggingface-local/HelloKKMe/GTA1-{7B,32B,72B}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;any VLM (using liteLLM, requires &lt;code&gt;tools&lt;/code&gt; parameter)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;openrouter/z-ai/glm-4.5v&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;huggingface-local/Hcompany/Holo1.5-{3B,7B,72B}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;any LLM (using liteLLM, requires &lt;code&gt;moondream3+&lt;/code&gt; prefix )&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;huggingface-local/OpenGVLab/InternVL3_5-{1B,2B,4B,8B,...}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;any all-in-one CUA&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;huggingface-local/ByteDance-Seed/UI-TARS-1.5-7B&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;moondream3+{ui planning}&lt;/code&gt; (supports text-only models)&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;omniparser+{ui planning}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;{ui grounding}+{ui planning}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;human/human&lt;/code&gt; ‚Üí &lt;a href="https://docs.trycua.com/docs/agent-sdk/supported-agents/human-in-the-loop"&gt;Human-in-the-Loop&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Missing a model? &lt;a href="https://github.com/trycua/cua/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;projects=&amp;amp;title=%5BAgent%5D%3A+Add+model+support+for+"&gt;Raise a feature request&lt;/a&gt; or &lt;a href="https://github.com/trycua/cua/raw/main/CONTRIBUTING.md"&gt;contribute&lt;/a&gt;!&lt;/p&gt; 
&lt;br /&gt; 
&lt;h1&gt;Quick Start&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.trycua.com/docs/quickstart-ui"&gt;Get started with a Computer-Use Agent UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.trycua.com/docs/quickstart-cli"&gt;Get started with the Computer-Use Agent CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.trycua.com/docs/quickstart-devs"&gt;Get started with the Python SDKs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h1&gt;Usage (&lt;a href="https://docs.trycua.com/docs"&gt;Docs&lt;/a&gt;)&lt;/h1&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install cua-agent[all]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from agent import ComputerAgent

agent = ComputerAgent(
    model="anthropic/claude-3-5-sonnet-20241022",
    tools=[computer],
    max_trajectory_budget=5.0
)

messages = [{"role": "user", "content": "Take a screenshot and tell me what you see"}]

async for result in agent.run(messages):
    for item in result["output"]:
        if item["type"] == "message":
            print(item["content"][0]["text"])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Output format (OpenAI Agent Responses Format):&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{ 
  "output": [
    # user input
    {
        "role": "user",
        "content": "go to trycua on gh"
    },
    # first agent turn adds the model output to the history
    {
        "summary": [
            {
                "text": "Searching Firefox for Trycua GitHub",
                "type": "summary_text"
            }
        ],
        "type": "reasoning"
    },
    {
        "action": {
            "text": "Trycua GitHub",
            "type": "type"
        },
        "call_id": "call_QI6OsYkXxl6Ww1KvyJc4LKKq",
        "status": "completed",
        "type": "computer_call"
    },
    # second agent turn adds the computer output to the history
    {
        "type": "computer_call_output",
        "call_id": "call_QI6OsYkXxl6Ww1KvyJc4LKKq",
        "output": {
            "type": "input_image",
            "image_url": "data:image/png;base64,..."
        }
    },
    # final agent turn adds the agent output text to the history
    {
        "type": "message",
        "role": "assistant",
        "content": [
          {
            "text": "Success! The Trycua GitHub page has been opened.",
            "type": "output_text"
          }
        ]
    }
  ], 
  "usage": {
      "prompt_tokens": 150,
      "completion_tokens": 75,
      "total_tokens": 225,
      "response_cost": 0.01,
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Computer (&lt;a href="https://docs.trycua.com/docs/computer-sdk/computers"&gt;Docs&lt;/a&gt;)&lt;/h1&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install cua-computer[all]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from computer import Computer

async with Computer(
    os_type="linux",
    provider_type="cloud",
    name="your-container-name",
    api_key="your-api-key"
) as computer:
    # Take screenshot
    screenshot = await computer.interface.screenshot()

    # Click and type
    await computer.interface.left_click(100, 100)
    await computer.interface.type("Hello!")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/python/mcp-server/README.md"&gt;How to use the MCP Server with Claude Desktop or other MCP clients&lt;/a&gt; - One of the easiest ways to get started with Cua&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/python/agent/README.md"&gt;How to use OpenAI Computer-Use, Anthropic, OmniParser, or UI-TARS for your Computer-Use Agent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/lume/README.md"&gt;How to use Lume CLI for managing desktops&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.trycua.com/blog/training-computer-use-models-trajectories-1"&gt;Training Computer-Use Models: Collecting Human Trajectories with Cua (Part 1)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Modules&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Module&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Installation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/lume/README.md"&gt;&lt;strong&gt;Lume&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;VM management for macOS/Linux using Apple's Virtualization.Framework&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;curl -fsSL https://raw.githubusercontent.com/trycua/cua/main/libs/lume/scripts/install.sh | bash&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/lumier/README.md"&gt;&lt;strong&gt;Lumier&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Docker interface for macOS and Linux VMs&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;docker pull trycua/lumier:latest&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/python/computer/README.md"&gt;&lt;strong&gt;Computer (Python)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Python Interface for controlling virtual machines&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pip install "cua-computer[all]"&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/typescript/computer/README.md"&gt;&lt;strong&gt;Computer (Typescript)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Typescript Interface for controlling virtual machines&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;npm install @trycua/computer&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/python/agent/README.md"&gt;&lt;strong&gt;Agent&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;AI agent framework for automating tasks&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pip install "cua-agent[all]"&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/python/mcp-server/README.md"&gt;&lt;strong&gt;MCP Server&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;MCP server for using CUA with Claude Desktop&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pip install cua-mcp-server&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/python/som/README.md"&gt;&lt;strong&gt;SOM&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Self-of-Mark library for Agent&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pip install cua-som&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/python/computer-server/README.md"&gt;&lt;strong&gt;Computer Server&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Server component for Computer&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pip install cua-computer-server&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/python/core/README.md"&gt;&lt;strong&gt;Core (Python)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Python Core utilities&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pip install cua-core&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/typescript/core/README.md"&gt;&lt;strong&gt;Core (Typescript)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Typescript Core utilities&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;npm install @trycua/core&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our &lt;a href="https://discord.com/invite/mVnXXpdE85"&gt;Discord community&lt;/a&gt; to discuss ideas, get assistance, or share your demos!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Cua is open-sourced under the MIT License - see the &lt;a href="https://raw.githubusercontent.com/trycua/cua/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;p&gt;Portions of this project, specifically components adapted from Kasm Technologies Inc., are also licensed under the MIT License. See &lt;a href="https://raw.githubusercontent.com/trycua/cua/main/libs/kasm/LICENSE"&gt;libs/kasm/LICENSE&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;Microsoft's OmniParser, which is used in this project, is licensed under the Creative Commons Attribution 4.0 International License (CC-BY-4.0). See the &lt;a href="https://github.com/microsoft/OmniParser/raw/master/LICENSE"&gt;OmniParser LICENSE&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Third-Party Licenses and Optional Components&lt;/h3&gt; 
&lt;p&gt;Some optional extras for this project depend on third-party packages that are licensed under terms different from the MIT License.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The optional "omni" extra (installed via &lt;code&gt;pip install "cua-agent[omni]"&lt;/code&gt;) installs the &lt;code&gt;cua-som&lt;/code&gt; module, which includes &lt;code&gt;ultralytics&lt;/code&gt; and is licensed under the AGPL-3.0.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When you choose to install and use such optional extras, your use, modification, and distribution of those third-party components are governed by their respective licenses (e.g., AGPL-3.0 for &lt;code&gt;ultralytics&lt;/code&gt;).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions to Cua! Please refer to our &lt;a href="https://raw.githubusercontent.com/trycua/cua/main/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Trademarks&lt;/h2&gt; 
&lt;p&gt;Apple, macOS, and Apple Silicon are trademarks of Apple Inc.&lt;br /&gt; Ubuntu and Canonical are registered trademarks of Canonical Ltd.&lt;br /&gt; Microsoft is a registered trademark of Microsoft Corporation.&lt;/p&gt; 
&lt;p&gt;This project is not affiliated with, endorsed by, or sponsored by Apple Inc., Canonical Ltd., Microsoft Corporation, or Kasm Technologies.&lt;/p&gt; 
&lt;h2&gt;Stargazers&lt;/h2&gt; 
&lt;p&gt;Thank you to all our supporters!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://starchart.cc/trycua/cua"&gt;&lt;img src="https://starchart.cc/trycua/cua.svg?variant=adaptive" alt="Stargazers over time" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dgtlmoon/changedetection.io</title>
      <link>https://github.com/dgtlmoon/changedetection.io</link>
      <description>&lt;p&gt;Best and simplest tool for website change detection, web page monitoring, and website change alerts. Perfect for tracking content changes, price drops, restock alerts, and website defacement monitoring‚Äîall for free or enjoy our SaaS plan!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Detect Website Changes Automatically ‚Äî Monitor Web Page Changes in Real Time&lt;/h1&gt; 
&lt;p&gt;Monitor websites for updates ‚Äî get notified via Discord, Email, Slack, Telegram, Webhook and many more.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Detect web page content changes and get instant alerts.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Ideal for monitoring price changes, content edits, conditional changes and more.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://changedetection.io?src=github"&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/screenshot.png" style="max-width:100%;" alt="Web site page change monitoring" title="Web site page change monitoring" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/dgtlmoon/changedetection.io/releases"&gt;&lt;img src="https://img.shields.io:/github/v/release/dgtlmoon/changedetection.io?style=for-the-badge" alt="Release Version" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/dgtlmoon/changedetection.io"&gt;&lt;img src="https://img.shields.io/docker/pulls/dgtlmoon/changedetection.io?style=for-the-badge" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/LICENSE.md"&gt;&lt;img src="https://img.shields.io/github/license/dgtlmoon/changedetection.io.svg?style=for-the-badge" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/dgtlmoon/changedetection.io/actions/workflows/test-only.yml/badge.svg?branch=master" alt="changedetection.io" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://changedetection.io"&gt;&lt;strong&gt;Get started with website page change monitoring straight away. Don't have time? Try our $8.99/month subscription, use our proxies and support!&lt;/strong&gt;&lt;/a&gt; , &lt;em&gt;half the price of other website change monitoring services!&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Chrome browser included.&lt;/li&gt; 
 &lt;li&gt;Nothing to install, access via browser login after signup.&lt;/li&gt; 
 &lt;li&gt;Super fast, no registration needed setup.&lt;/li&gt; 
 &lt;li&gt;Get started watching and receiving website change notifications straight away.&lt;/li&gt; 
 &lt;li&gt;See our &lt;a href="https://changedetection.io/tutorials"&gt;tutorials and how-to page for more inspiration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Target specific parts of the webpage using the Visual Selector tool.&lt;/h3&gt; 
&lt;p&gt;Available when connected to a &lt;a href="https://github.com/dgtlmoon/changedetection.io/wiki/Playwright-content-fetcher"&gt;playwright content fetcher&lt;/a&gt; (included as part of our subscription service)&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://changedetection.io?src=github"&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/visualselector-anim.gif" style="max-width:100%;" alt="Select parts and elements of a web page to monitor for changes" title="Select parts and elements of a web page to monitor for changes" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Easily see what changed, examine by word, line, or individual character.&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://changedetection.io?src=github"&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/screenshot-diff.png" style="max-width:100%;" alt="Self-hosted web page change monitoring context difference " title="Self-hosted web page change monitoring context difference " /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Perform interactive browser steps&lt;/h3&gt; 
&lt;p&gt;Fill in text boxes, click buttons and more, setup your changedetection scenario.&lt;/p&gt; 
&lt;p&gt;Using the &lt;strong&gt;Browser Steps&lt;/strong&gt; configuration, add basic steps before performing change detection, such as logging into websites, adding a product to a cart, accept cookie logins, entering dates and refining searches.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://changedetection.io?src=github"&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/browsersteps-anim.gif" style="max-width:100%;" alt="Website change detection with interactive browser steps, detect changes behind login and password, search queries and more" title="Website change detection with interactive browser steps, detect changes behind login and password, search queries and more" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;After &lt;strong&gt;Browser Steps&lt;/strong&gt; have been run, then visit the &lt;strong&gt;Visual Selector&lt;/strong&gt; tab to refine the content you're interested in. Requires Playwright to be enabled.&lt;/p&gt; 
&lt;h3&gt;Awesome restock and price change notifications&lt;/h3&gt; 
&lt;p&gt;Enable the &lt;em&gt;"Re-stock &amp;amp; Price detection for single product pages"&lt;/em&gt; option to activate the best way to monitor product pricing, this will extract any meta-data in the HTML page and give you many options to follow the pricing of the product.&lt;/p&gt; 
&lt;p&gt;Easily organise and monitor prices for products from the dashboard, get alerts and notifications when the price of a product changes or comes back in stock again!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://changedetection.io?src=github"&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/restock-overview.png" style="max-width:100%;" alt="Easily keep an eye on product price changes directly from the UI" title="Easily keep an eye on product price changes directly from the UI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Set price change notification parameters, upper and lower price, price change percentage and more. Always know when a product for sale drops in price.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://changedetection.io?src=github"&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/restock-settings.png" style="max-width:100%;" alt="Set upper lower and percentage price change notification values" title="Set upper lower and percentage price change notification values" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Example use cases&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Products and services have a change in pricing&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Out of stock notification&lt;/em&gt; and &lt;em&gt;Back In stock notification&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Monitor and track PDF file changes, know when a PDF file has text changes.&lt;/li&gt; 
 &lt;li&gt;Governmental department updates (changes are often only on their websites)&lt;/li&gt; 
 &lt;li&gt;New software releases, security advisories when you're not on their mailing list.&lt;/li&gt; 
 &lt;li&gt;Festivals with changes&lt;/li&gt; 
 &lt;li&gt;Discogs restock alerts and monitoring&lt;/li&gt; 
 &lt;li&gt;Realestate listing changes&lt;/li&gt; 
 &lt;li&gt;Know when your favourite whiskey is on sale, or other special deals are announced before anyone else&lt;/li&gt; 
 &lt;li&gt;COVID related news from government websites&lt;/li&gt; 
 &lt;li&gt;University/organisation news from their website&lt;/li&gt; 
 &lt;li&gt;Detect and monitor changes in JSON API responses&lt;/li&gt; 
 &lt;li&gt;JSON API monitoring and alerting&lt;/li&gt; 
 &lt;li&gt;Changes in legal and other documents&lt;/li&gt; 
 &lt;li&gt;Trigger API calls via notifications when text appears on a website&lt;/li&gt; 
 &lt;li&gt;Glue together APIs using the JSON filter and JSON notifications&lt;/li&gt; 
 &lt;li&gt;Create RSS feeds based on changes in web content&lt;/li&gt; 
 &lt;li&gt;Monitor HTML source code for unexpected changes, strengthen your PCI compliance&lt;/li&gt; 
 &lt;li&gt;You have a very sensitive list of URLs to watch and you do &lt;em&gt;not&lt;/em&gt; want to use the paid alternatives. (Remember, &lt;em&gt;you&lt;/em&gt; are the product)&lt;/li&gt; 
 &lt;li&gt;Get notified when certain keywords appear in Twitter search results&lt;/li&gt; 
 &lt;li&gt;Proactively search for jobs, get notified when companies update their careers page, search job portals for keywords.&lt;/li&gt; 
 &lt;li&gt;Get alerts when new job positions are open on Bamboo HR and other job platforms&lt;/li&gt; 
 &lt;li&gt;Website defacement monitoring&lt;/li&gt; 
 &lt;li&gt;Pok√©mon Card Restock Tracker / Pok√©mon TCG Tracker&lt;/li&gt; 
 &lt;li&gt;RegTech - stay ahead of regulatory changes, regulatory compliance&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Need an actual Chrome runner with Javascript support? We support fetching via WebDriver and Playwright!&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Key Features&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lots of trigger filters, such as "Trigger on text", "Remove text by selector", "Ignore text", "Extract text", also using regular-expressions!&lt;/li&gt; 
 &lt;li&gt;Target elements with xPath 1 and xPath 2, CSS Selectors, Easily monitor complex JSON with JSONPath or jq&lt;/li&gt; 
 &lt;li&gt;Switch between fast non-JS and Chrome JS based "fetchers"&lt;/li&gt; 
 &lt;li&gt;Track changes in PDF files (Monitor text changed in the PDF, Also monitor PDF filesize and checksums)&lt;/li&gt; 
 &lt;li&gt;Easily specify how often a site should be checked&lt;/li&gt; 
 &lt;li&gt;Execute JS before extracting text (Good for logging in, see examples in the UI!)&lt;/li&gt; 
 &lt;li&gt;Override Request Headers, Specify &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;GET&lt;/code&gt; and other methods&lt;/li&gt; 
 &lt;li&gt;Use the "Visual Selector" to help target specific elements&lt;/li&gt; 
 &lt;li&gt;Configurable &lt;a href="https://github.com/dgtlmoon/changedetection.io/wiki/Proxy-configuration"&gt;proxy per watch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Send a screenshot with the notification when a change is detected in the web page&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We &lt;a href="https://brightdata.grsm.io/n0r16zf7eivq"&gt;recommend and use Bright Data&lt;/a&gt; global proxy services, Bright Data will match any first deposit up to $150 using our signup link.&lt;/p&gt; 
&lt;p&gt;Please &lt;span&gt;‚≠ê&lt;/span&gt; star &lt;span&gt;‚≠ê&lt;/span&gt; this project and help it grow! &lt;a href="https://github.com/dgtlmoon/changedetection.io/"&gt;https://github.com/dgtlmoon/changedetection.io/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Conditional web page changes&lt;/h3&gt; 
&lt;p&gt;Easily &lt;a href="https://changedetection.io/tutorial/conditional-actions-web-page-changes"&gt;configure conditional actions&lt;/a&gt;, for example, only trigger when a price is above or below a preset amount, or &lt;a href="https://changedetection.io/tutorial/how-monitor-keywords-any-website"&gt;when a web page includes (or does not include) a keyword&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/web-page-change-conditions.png" style="max-width:80%;" alt="Conditional web page changes" title="Conditional web page changes" /&gt; 
&lt;h3&gt;Schedule web page watches in any timezone, limit by day of week and time.&lt;/h3&gt; 
&lt;p&gt;Easily set a re-check schedule, for example you could limit the web page change detection to only operate during business hours. Or perhaps based on a foreign timezone (for example, you want to check for the latest news-headlines in a foreign country at 0900 AM),&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/scheduler.png" style="max-width:80%;" alt="How to monitor web page changes according to a schedule" title="How to monitor web page changes according to a schedule" /&gt; 
&lt;p&gt;Includes quick short-cut buttons to setup a schedule for &lt;strong&gt;business hours only&lt;/strong&gt;, or &lt;strong&gt;weekends&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;We have a Chrome extension!&lt;/h3&gt; 
&lt;p&gt;Easily add the current web page to your changedetection.io tool, simply install the extension and click "Sync" to connect it to your existing changedetection.io install.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://chromewebstore.google.com/detail/changedetectionio-website/kefcfmgmlhmankjmnbijimhofdjekbop"&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/chrome-extension-screenshot.png" style="max-width:80%;" alt="Chrome Extension to easily add the current web-page to detect a change." title="Chrome Extension to easily add the current web-page to detect a change." /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://chromewebstore.google.com/detail/changedetectionio-website/kefcfmgmlhmankjmnbijimhofdjekbop"&gt;Goto the Chrome Webstore to download the extension.&lt;/a&gt; ( Or check out the &lt;a href="https://github.com/dgtlmoon/changedetection.io-browser-extension"&gt;GitHub repo&lt;/a&gt; )&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;With Docker composer, just clone this repository and..&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Docker standalone&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ docker run -d --restart always -p "127.0.0.1:5000:5000" -v datastore-volume:/datastore --name changedetection.io dgtlmoon/changedetection.io
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;:latest&lt;/code&gt; tag is our latest stable release, &lt;code&gt;:dev&lt;/code&gt; tag is our bleeding edge &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; 
&lt;p&gt;Alternative docker repository over at ghcr - &lt;a href="https://ghcr.io/dgtlmoon/changedetection.io"&gt;ghcr.io/dgtlmoon/changedetection.io&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;See the install instructions at the wiki &lt;a href="https://github.com/dgtlmoon/changedetection.io/wiki/Microsoft-Windows"&gt;https://github.com/dgtlmoon/changedetection.io/wiki/Microsoft-Windows&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Python Pip&lt;/h3&gt; 
&lt;p&gt;Check out our pypi page &lt;a href="https://pypi.org/project/changedetection.io/"&gt;https://pypi.org/project/changedetection.io/&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ pip3 install changedetection.io
$ changedetection.io -d /path/to/empty/data/dir -p 5000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then visit &lt;a href="http://127.0.0.1:5000"&gt;http://127.0.0.1:5000&lt;/a&gt; , You should now be able to access the UI.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Now with per-site configurable support for using a fast built in HTTP fetcher or use a Chrome based fetcher for monitoring of JavaScript websites!&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Updating changedetection.io&lt;/h2&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;docker pull dgtlmoon/changedetection.io
docker kill $(docker ps -a -f name=changedetection.io -q)
docker rm $(docker ps -a -f name=changedetection.io -q)
docker run -d --restart always -p "127.0.0.1:5000:5000" -v datastore-volume:/datastore --name changedetection.io dgtlmoon/changedetection.io
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;docker compose&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker compose pull &amp;amp;&amp;amp; docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the wiki for more information &lt;a href="https://github.com/dgtlmoon/changedetection.io/wiki"&gt;https://github.com/dgtlmoon/changedetection.io/wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Filters&lt;/h2&gt; 
&lt;p&gt;XPath(1.0), JSONPath, jq, and CSS support comes baked in! You can be as specific as you need, use XPath exported from various XPath element query creation tools. (We support LXML &lt;code&gt;re:test&lt;/code&gt;, &lt;code&gt;re:match&lt;/code&gt; and &lt;code&gt;re:replace&lt;/code&gt;.)&lt;/p&gt; 
&lt;h2&gt;Notifications&lt;/h2&gt; 
&lt;p&gt;ChangeDetection.io supports a massive amount of notifications (including email, office365, custom APIs, etc) when a web-page has a change detected thanks to the &lt;a href="https://github.com/caronc/apprise"&gt;apprise&lt;/a&gt; library. Simply set one or more notification URL's in the &lt;em&gt;[edit]&lt;/em&gt; tab of that watch.&lt;/p&gt; 
&lt;p&gt;Just some examples&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;discord://webhook_id/webhook_token
flock://app_token/g:channel_id
gitter://token/room
gchat://workspace/key/token
msteams://TokenA/TokenB/TokenC/
o365://TenantID:AccountEmail/ClientID/ClientSecret/TargetEmail
rocket://user:password@hostname/#Channel
mailto://user:pass@example.com?to=receivingAddress@example.com
json://someserver.com/custom-api
syslog://
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/caronc/apprise#popular-notification-services"&gt;And everything else in this list!&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/screenshot-notifications.png" style="max-width:100%;" alt="Self-hosted web page change monitoring notifications" title="Self-hosted web page change monitoring notifications" /&gt; 
&lt;p&gt;Now you can also customise your notification content and use &lt;a target="_new" href="https://jinja.palletsprojects.com/en/3.0.x/templates/"&gt;Jinja2 templating&lt;/a&gt; for their title and body!&lt;/p&gt; 
&lt;h2&gt;JSON API Monitoring&lt;/h2&gt; 
&lt;p&gt;Detect changes and monitor data in JSON API's by using either JSONPath or jq to filter, parse, and restructure JSON as needed.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/json-filter-field-example.png" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;This will re-parse the JSON and apply formatting to the text, making it super easy to monitor and detect changes in JSON API results&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/json-diff-example.png" alt="image" /&gt;&lt;/p&gt; 
&lt;h3&gt;JSONPath or jq?&lt;/h3&gt; 
&lt;p&gt;For more complex parsing, filtering, and modifying of JSON data, jq is recommended due to the built-in operators and functions. Refer to the &lt;a href="https://stedolan.github.io/jq/manual/"&gt;documentation&lt;/a&gt; for more specific information on jq.&lt;/p&gt; 
&lt;p&gt;One big advantage of &lt;code&gt;jq&lt;/code&gt; is that you can use logic in your JSON filter, such as filters to only show items that have a value greater than/less than etc.&lt;/p&gt; 
&lt;p&gt;See the wiki &lt;a href="https://github.com/dgtlmoon/changedetection.io/wiki/JSON-Selector-Filter-help"&gt;https://github.com/dgtlmoon/changedetection.io/wiki/JSON-Selector-Filter-help&lt;/a&gt; for more information and examples&lt;/p&gt; 
&lt;h3&gt;Parse JSON embedded in HTML!&lt;/h3&gt; 
&lt;p&gt;When you enable a &lt;code&gt;json:&lt;/code&gt; or &lt;code&gt;jq:&lt;/code&gt; filter, you can even automatically extract and parse embedded JSON inside a HTML page! Amazingly handy for sites that build content based on JSON, such as many e-commerce websites.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
...
&amp;lt;script type="application/ld+json"&amp;gt;

{
   "@context":"http://schema.org/",
   "@type":"Product",
   "offers":{
      "@type":"Offer",
      "availability":"http://schema.org/InStock",
      "price":"3949.99",
      "priceCurrency":"USD",
      "url":"https://www.newegg.com/p/3D5-000D-001T1"
   },
   "description":"Cobratype King Cobra Hero Desktop Gaming PC",
   "name":"Cobratype King Cobra Hero Desktop Gaming PC",
   "sku":"3D5-000D-001T1",
   "itemCondition":"NewCondition"
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;json:$..price&lt;/code&gt; or &lt;code&gt;jq:..price&lt;/code&gt; would give &lt;code&gt;3949.99&lt;/code&gt;, or you can extract the whole structure (use a JSONpath test website to validate with)&lt;/p&gt; 
&lt;p&gt;The application also supports notifying you that it can follow this information automatically&lt;/p&gt; 
&lt;h2&gt;Proxy Configuration&lt;/h2&gt; 
&lt;p&gt;See the wiki &lt;a href="https://github.com/dgtlmoon/changedetection.io/wiki/Proxy-configuration"&gt;https://github.com/dgtlmoon/changedetection.io/wiki/Proxy-configuration&lt;/a&gt; , we also support using &lt;a href="https://github.com/dgtlmoon/changedetection.io/wiki/Proxy-configuration#brightdata-proxy-support"&gt;Bright Data proxy services where possible&lt;/a&gt; and &lt;a href="https://oxylabs.go2cloud.org/SH2d"&gt;Oxylabs&lt;/a&gt; proxy services.&lt;/p&gt; 
&lt;h2&gt;Raspberry Pi support?&lt;/h2&gt; 
&lt;p&gt;Raspberry Pi and linux/arm/v6 linux/arm/v7 arm64 devices are supported! See the wiki for &lt;a href="https://github.com/dgtlmoon/changedetection.io/wiki/Fetching-pages-with-WebDriver"&gt;details&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Import support&lt;/h2&gt; 
&lt;p&gt;Easily &lt;a href="https://changedetection.io/tutorial/how-import-your-website-change-detection-lists-excel"&gt;import your list of websites to watch for changes in Excel .xslx file format&lt;/a&gt;, or paste in lists of website URLs as plaintext.&lt;/p&gt; 
&lt;p&gt;Excel import is recommended - that way you can better organise tags/groups of websites and other features.&lt;/p&gt; 
&lt;h2&gt;API Support&lt;/h2&gt; 
&lt;p&gt;Full REST API for programmatic management of watches, tags, notifications and more.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://changedetection.io/docs/api_v1/index.html"&gt;Interactive API Documentation&lt;/a&gt;&lt;/strong&gt; - Complete API reference with live testing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/dgtlmoon/changedetection.io/master/docs/api-spec.yaml"&gt;OpenAPI Specification&lt;/a&gt;&lt;/strong&gt; - Generate SDKs for any programming language&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support us&lt;/h2&gt; 
&lt;p&gt;Do you use changedetection.io to make money? does it save you time or money? Does it make your life easier? less stressful? Remember, we write this software when we should be doing actual paid work, we have to buy food and pay rent just like you.&lt;/p&gt; 
&lt;p&gt;Consider taking out an officially supported &lt;a href="https://changedetection.io?src=github"&gt;website change detection subscription&lt;/a&gt; , even if you don't use it, you still get the warm fuzzy feeling of helping out the project. (And who knows, you might just use it!)&lt;/p&gt; 
&lt;h2&gt;Commercial Support&lt;/h2&gt; 
&lt;p&gt;I offer commercial support, this software is depended on by network security, aerospace , data-science and data-journalist professionals just to name a few, please reach out at &lt;a href="mailto:dgtlmoon@gmail.com"&gt;dgtlmoon@gmail.com&lt;/a&gt; for any enquiries, I am more than glad to work with your organisation to further the possibilities of what can be done with changedetection.io&lt;/p&gt; 
&lt;h2&gt;Commercial Licencing&lt;/h2&gt; 
&lt;p&gt;If you are reselling this software either in part or full as part of any commercial arrangement, you must abide by our COMMERCIAL_LICENCE.md found in our code repository, please contact &lt;a href="mailto:dgtlmoon@gmail.com"&gt;dgtlmoon@gmail.com&lt;/a&gt; and &lt;a href="mailto:contact@changedetection.io"&gt;contact@changedetection.io&lt;/a&gt; .&lt;/p&gt; 
&lt;h2&gt;Third-party licenses&lt;/h2&gt; 
&lt;p&gt;changedetectionio.html_tools.elementpath_tostring: Copyright (c), 2018-2021, SISSA (Scuola Internazionale Superiore di Studi Avanzati), Licensed under &lt;a href="https://github.com/sissaschool/elementpath/raw/master/LICENSE"&gt;MIT license&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Recognition of fantastic contributors to the project&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Constantin Hong &lt;a href="https://github.com/Constantin1489"&gt;https://github.com/Constantin1489&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>pathwaycom/pathway</title>
      <link>https://github.com/pathwaycom/pathway</link>
      <description>&lt;p&gt;Python ETL framework for stream processing, real-time analytics, LLM pipelines, and RAG.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://pathway.com/"&gt; &lt;img src="https://pathway.com/logo-light.svg?sanitize=true" /&gt; &lt;/a&gt; 
 &lt;br /&gt;
 &lt;br /&gt; 
 &lt;a href="https://trendshift.io/repositories/10388" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/10388" alt="pathwaycom%2Fpathway | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt; 
 &lt;br /&gt;
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/pathwaycom/pathway/actions/workflows/ubuntu_test.yml"&gt; &lt;img src="https://github.com/pathwaycom/pathway/actions/workflows/ubuntu_test.yml/badge.svg?sanitize=true" alt="ubuntu" /&gt; &lt;br /&gt; &lt;/a&gt;&lt;a href="https://github.com/pathwaycom/pathway/actions/workflows/release.yml"&gt; &lt;img src="https://github.com/pathwaycom/pathway/actions/workflows/release.yml/badge.svg?sanitize=true" alt="Last release" /&gt;&lt;/a&gt; &lt;a href="https://badge.fury.io/py/pathway"&gt;&lt;img src="https://badge.fury.io/py/pathway.svg?sanitize=true" alt="PyPI version" height="18" /&gt;&lt;/a&gt; &lt;a href="https://badge.fury.io/py/pathway"&gt;&lt;img src="https://static.pepy.tech/badge/pathway" alt="PyPI downloads" height="18" /&gt;&lt;/a&gt; &lt;a href="https://github.com/pathwaycom/pathway/raw/main/LICENSE.txt"&gt; &lt;img src="https://img.shields.io/badge/license-BSL-green" alt="License: BSL" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://discord.gg/pathway"&gt; &lt;img src="https://img.shields.io/discord/1042405378304004156?logo=discord" alt="chat on Discord" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=pathway_com"&gt; &lt;img src="https://img.shields.io/twitter/follow/pathwaycom" alt="follow on Twitter" /&gt;&lt;/a&gt; &lt;a href="https://linkedin.com/company/pathway"&gt; &lt;img src="https://img.shields.io/badge/pathway-0077B5?style=social&amp;amp;logo=linkedin" alt="follow on LinkedIn" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dylanhogg/awesome-python/raw/main/README.md"&gt; &lt;img src="https://awesome.re/badge.svg?sanitize=true" alt="Awesome Python" /&gt;&lt;/a&gt; &lt;a href="https://gurubase.io/g/pathway"&gt; &lt;img src="https://img.shields.io/badge/Gurubase-Ask%20Pathway%20Guru-006BFF" alt="Pathway Guru" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/pathwaycom/pathway/main/#getting-started"&gt;Getting Started&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/pathwaycom/pathway/main/#deployment"&gt;Deployment&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/pathwaycom/pathway/main/#resources"&gt;Documentation and Support&lt;/a&gt; | &lt;a href="https://pathway.com/blog/"&gt;Blog&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/pathwaycom/pathway/main/#license"&gt;License&lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Pathway&lt;a id="pathway"&gt; Live Data Framework&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pathway.com"&gt;Pathway&lt;/a&gt; is a Python ETL framework for stream processing, real-time analytics, LLM pipelines, and RAG.&lt;/p&gt; 
&lt;p&gt;Pathway comes with an &lt;strong&gt;easy-to-use Python API&lt;/strong&gt;, allowing you to seamlessly integrate your favorite Python ML libraries. Pathway code is versatile and robust: &lt;strong&gt;you can use it in both development and production environments, handling both batch and streaming data effectively&lt;/strong&gt;. The same code can be used for local development, CI/CD tests, running batch jobs, handling stream replays, and processing data streams.&lt;/p&gt; 
&lt;p&gt;Pathway is powered by a &lt;strong&gt;scalable Rust engine&lt;/strong&gt; based on Differential Dataflow and performs incremental computation. Your Pathway code, despite being written in Python, is run by the Rust engine, enabling multithreading, multiprocessing, and distributed computations. All the pipeline is kept in memory and can be easily deployed with &lt;strong&gt;Docker and Kubernetes&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;You can install Pathway with pip:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip install -U pathway
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For any questions, you will find the community and team behind the project &lt;a href="https://discord.com/invite/pathway"&gt;on Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Use-cases and templates&lt;/h2&gt; 
&lt;p&gt;Ready to see what Pathway can do?&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://pathway.com/developers/templates"&gt;Try one of our easy-to-run examples&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;Available in both notebook and docker formats, these ready-to-launch examples can be launched in just a few clicks. Pick one and start your hands-on experience with Pathway today!&lt;/p&gt; 
&lt;h3&gt;Event processing and real-time analytics pipelines&lt;/h3&gt; 
&lt;p&gt;With its unified engine for batch and streaming and its full Python compatibility, Pathway makes data processing as easy as possible. It's the ideal solution for a wide range of data processing pipelines, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pathway.com/developers/templates/kafka-etl"&gt;Showcase: Real-time ETL.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pathway.com/developers/templates/realtime-log-monitoring"&gt;Showcase: Event-driven pipelines with alerting.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pathway.com/developers/templates/linear_regression_with_kafka"&gt;Showcase: Realtime analytics.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pathway.com/developers/user-guide/connecting-to-data/switch-from-batch-to-streaming"&gt;Docs: Switch from batch to streaming.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;AI Pipelines&lt;/h3&gt; 
&lt;p&gt;Pathway provides dedicated LLM tooling to build live LLM and RAG pipelines. Wrappers for most common LLM services and utilities are included, making working with LLMs and RAGs pipelines incredibly easy. Check out our &lt;a href="https://pathway.com/developers/user-guide/llm-xpack/overview"&gt;LLM xpack documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Don't hesitate to try one of our runnable examples featuring LLM tooling. You can find such examples &lt;a href="https://pathway.com/developers/user-guide/llm-xpack/llm-examples"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pathway.com/developers/templates/unstructured-to-structured"&gt;Template: Unstructured data to SQL on-the-fly.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pathway.com/developers/templates/private-rag-ollama-mistral"&gt;Template: Private RAG with Ollama and Mistral AI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pathway.com/developers/templates/adaptive-rag"&gt;Template: Adaptive RAG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pathway.com/developers/templates/multimodal-rag"&gt;Template: Multimodal RAG with gpt-4o&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;A wide range of connectors&lt;/strong&gt;: Pathway comes with connectors that connect to external data sources such as Kafka, GDrive, PostgreSQL, or SharePoint. Its Airbyte connector allows you to connect to more than 300 different data sources. If the connector you want is not available, you can build your own custom connector using Pathway Python connector.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stateless and stateful transformations&lt;/strong&gt;: Pathway supports stateful transformations such as joins, windowing, and sorting. It provides many transformations directly implemented in Rust. In addition to the provided transformation, you can use any Python function. You can implement your own or you can use any Python library to process your data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Persistence&lt;/strong&gt;: Pathway provides persistence to save the state of the computation. This allows you to restart your pipeline after an update or a crash. Your pipelines are in good hands with Pathway!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Pathway handles the time for you, making sure all your computations are consistent. In particular, Pathway manages late and out-of-order points by updating its results whenever new (or late, in this case) data points come into the system. The free version of Pathway gives the "at least once" consistency while the enterprise version provides the "exactly once" consistency.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scalable Rust engine&lt;/strong&gt;: with Pathway Rust engine, you are free from the usual limits imposed by Python. You can easily do multithreading, multiprocessing, and distributed computations.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLM helpers&lt;/strong&gt;: Pathway provides an LLM extension with all the utilities to integrate LLMs with your data pipelines (LLM wrappers, parsers, embedders, splitters), including an in-memory real-time Vector Index, and integrations with LLamaIndex and LangChain. You can quickly build and deploy RAG applications with your live documents.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting started&lt;a id="getting-started"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;a id="installation"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Pathway requires Python 3.10 or above.&lt;/p&gt; 
&lt;p&gt;You can install the current release of Pathway using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pip install -U pathway
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚ö†Ô∏è Pathway is available on MacOS and Linux. Users of other systems should run Pathway on a Virtual Machine.&lt;/p&gt; 
&lt;h3&gt;Example: computing the sum of positive values in real time.&lt;a id="example"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import pathway as pw

# Define the schema of your data (Optional)
class InputSchema(pw.Schema):
  value: int

# Connect to your data using connectors
input_table = pw.io.csv.read(
  "./input/",
  schema=InputSchema
)

#Define your operations on the data
filtered_table = input_table.filter(input_table.value&amp;gt;=0)
result_table = filtered_table.reduce(
  sum_value = pw.reducers.sum(filtered_table.value)
)

# Load your results to external systems
pw.io.jsonlines.write(result_table, "output.jsonl")

# Run the computation
pw.run()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run Pathway &lt;a href="https://colab.research.google.com/drive/1aBIJ2HCng-YEUOMrr0qtj0NeZMEyRz55?usp=sharing"&gt;in Google Colab&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can find more examples &lt;a href="https://github.com/pathwaycom/pathway/tree/main/examples"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;a id="deployment"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Locally&lt;a id="running-pathway-locally"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;To use Pathway, you only need to import it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import pathway as pw
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, you can easily create your processing pipeline, and let Pathway handle the updates. Once your pipeline is created, you can launch the computation on streaming data with a one-line command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;pw.run()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can then run your Pathway project (say, &lt;code&gt;main.py&lt;/code&gt;) just like a normal Python script: &lt;code&gt;$ python main.py&lt;/code&gt;. Pathway comes with a monitoring dashboard that allows you to keep track of the number of messages sent by each connector and the latency of the system. The dashboard also includes log messages.&lt;/p&gt; 
&lt;img src="https://d14l3brkh44201.cloudfront.net/pathway-dashboard.png" width="1326" alt="Pathway dashboard" /&gt; 
&lt;p&gt;Alternatively, you can use the pathway'ish version:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pathway spawn python main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Pathway natively supports multithreading. To launch your application with 3 threads, you can do as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ pathway spawn --threads 3 python main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To jumpstart a Pathway project, you can use our &lt;a href="https://github.com/pathwaycom/cookiecutter-pathway"&gt;cookiecutter template&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;a id="docker"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can easily run Pathway using docker.&lt;/p&gt; 
&lt;h4&gt;Pathway image&lt;/h4&gt; 
&lt;p&gt;You can use the &lt;a href="https://hub.docker.com/r/pathwaycom/pathway"&gt;Pathway docker image&lt;/a&gt;, using a Dockerfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-dockerfile"&gt;FROM pathwaycom/pathway:latest

WORKDIR /app

COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD [ "python", "./your-script.py" ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can then build and run the Docker image:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;docker build -t my-pathway-app .
docker run -it --rm --name my-pathway-app my-pathway-app
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Run a single Python script&lt;/h4&gt; 
&lt;p&gt;When dealing with single-file projects, creating a full-fledged &lt;code&gt;Dockerfile&lt;/code&gt; might seem unnecessary. In such scenarios, you can execute a Python script directly using the Pathway Docker image. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;docker run -it --rm --name my-pathway-app -v "$PWD":/app pathwaycom/pathway:latest python my-pathway-app.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Python docker image&lt;/h4&gt; 
&lt;p&gt;You can also use a standard Python image and install Pathway using pip with a Dockerfile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-dockerfile"&gt;FROM --platform=linux/x86_64 python:3.10

RUN pip install -U pathway
COPY ./pathway-script.py pathway-script.py

CMD ["python", "-u", "pathway-script.py"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Kubernetes and cloud&lt;a id="k8s"&gt;&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Docker containers are ideally suited for deployment on the cloud with Kubernetes. If you want to scale your Pathway application, you may be interested in our Pathway for Enterprise. Pathway for Enterprise is specially tailored towards end-to-end data processing and real time intelligent analytics. It scales using distributed computing on the cloud and supports distributed Kubernetes deployment, with external persistence setup.&lt;/p&gt; 
&lt;p&gt;You can easily deploy Pathway using services like Render: see &lt;a href="https://pathway.com/developers/user-guide/deployment/render-deploy/"&gt;how to deploy Pathway in a few clicks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are interested, don't hesitate to &lt;a href="mailto:contact@pathway.com"&gt;contact us&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;a id="performance"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Pathway is made to outperform state-of-the-art technologies designed for streaming and batch data processing tasks, including: Flink, Spark, and Kafka Streaming. It also makes it possible to implement a lot of algorithms/UDF's in streaming mode which are not readily supported by other streaming frameworks (especially: temporal joins, iterative graph algorithms, machine learning routines).&lt;/p&gt; 
&lt;p&gt;If you are curious, here are &lt;a href="https://github.com/pathwaycom/pathway-benchmarks"&gt;some benchmarks to play with&lt;/a&gt;.&lt;/p&gt; 
&lt;img src="https://github.com/pathwaycom/pathway-benchmarks/raw/main/images/bm-wordcount-lineplot.png" width="1326" alt="WordCount Graph" /&gt; 
&lt;h2&gt;Documentation and Support&lt;a id="resources"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;The entire documentation of Pathway is available at &lt;a href="https://pathway.com/developers/user-guide/introduction/welcome"&gt;pathway.com/developers/&lt;/a&gt;, including the &lt;a href="https://pathway.com/developers/api-docs/pathway"&gt;API Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have any question, don't hesitate to &lt;a href="https://github.com/pathwaycom/pathway/issues"&gt;open an issue on GitHub&lt;/a&gt;, join us on &lt;a href="https://discord.com/invite/pathway"&gt;Discord&lt;/a&gt;, or send us an email at &lt;a href="mailto:contact@pathway.com"&gt;contact@pathway.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;a id="license"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Pathway is distributed on a &lt;a href="https://github.com/pathwaycom/pathway/raw/main/LICENSE.txt"&gt;BSL 1.1 License&lt;/a&gt; which allows for unlimited non-commercial use, as well as use of the Pathway package &lt;a href="https://pathway.com/license/"&gt;for most commercial purposes&lt;/a&gt;, free of charge. Code in this repository automatically converts to Open Source (Apache 2.0 License) after 4 years. Some &lt;a href="https://github.com/pathwaycom"&gt;public repos&lt;/a&gt; which are complementary to this one (examples, libraries, connectors, etc.) are licensed as Open Source, under the MIT license.&lt;/p&gt; 
&lt;h2&gt;Contribution guidelines&lt;a id="contribution-guidelines"&gt;&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;If you develop a library or connector which you would like to integrate with this repo, we suggest releasing it first as a separate repo on a MIT/Apache 2.0 license.&lt;/p&gt; 
&lt;p&gt;For all concerns regarding core Pathway functionalities, Issues are encouraged. For further information, don't hesitate to engage with Pathway's &lt;a href="https://discord.gg/pathway"&gt;Discord community&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openai/openai-agents-python</title>
      <link>https://github.com/openai/openai-agents-python</link>
      <description>&lt;p&gt;A lightweight, powerful framework for multi-agent workflows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Agents SDK&lt;/h1&gt; 
&lt;p&gt;The OpenAI Agents SDK is a lightweight yet powerful framework for building multi-agent workflows. It is provider-agnostic, supporting the OpenAI Responses and Chat Completions APIs, as well as 100+ other LLMs.&lt;/p&gt; 
&lt;img src="https://cdn.openai.com/API/docs/images/orchestration.png" alt="Image of the Agents Tracing UI" style="max-height: 803px;" /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Looking for the JavaScript/TypeScript version? Check out &lt;a href="https://github.com/openai/openai-agents-js"&gt;Agents SDK JS/TS&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Core concepts:&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://openai.github.io/openai-agents-python/agents"&gt;&lt;strong&gt;Agents&lt;/strong&gt;&lt;/a&gt;: LLMs configured with instructions, tools, guardrails, and handoffs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://openai.github.io/openai-agents-python/handoffs/"&gt;&lt;strong&gt;Handoffs&lt;/strong&gt;&lt;/a&gt;: A specialized tool call used by the Agents SDK for transferring control between agents&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://openai.github.io/openai-agents-python/guardrails/"&gt;&lt;strong&gt;Guardrails&lt;/strong&gt;&lt;/a&gt;: Configurable safety checks for input and output validation&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/openai-agents-python/main/#sessions"&gt;&lt;strong&gt;Sessions&lt;/strong&gt;&lt;/a&gt;: Automatic conversation history management across agent runs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://openai.github.io/openai-agents-python/tracing/"&gt;&lt;strong&gt;Tracing&lt;/strong&gt;&lt;/a&gt;: Built-in tracking of agent runs, allowing you to view, debug and optimize your workflows&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Explore the &lt;a href="https://raw.githubusercontent.com/openai/openai-agents-python/main/examples"&gt;examples&lt;/a&gt; directory to see the SDK in action, and read our &lt;a href="https://openai.github.io/openai-agents-python/"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Get started&lt;/h2&gt; 
&lt;p&gt;To get started, set up your Python environment (Python 3.9 or newer required), and then install OpenAI Agents SDK package.&lt;/p&gt; 
&lt;h3&gt;venv&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
pip install openai-agents
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For voice support, install with the optional &lt;code&gt;voice&lt;/code&gt; group: &lt;code&gt;pip install 'openai-agents[voice]'&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For Redis session support, install with the optional &lt;code&gt;redis&lt;/code&gt; group: &lt;code&gt;pip install 'openai-agents[redis]'&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;uv&lt;/h3&gt; 
&lt;p&gt;If you're familiar with &lt;a href="https://docs.astral.sh/uv/"&gt;uv&lt;/a&gt;, using the tool would be even similar:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv init
uv add openai-agents
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For voice support, install with the optional &lt;code&gt;voice&lt;/code&gt; group: &lt;code&gt;uv add 'openai-agents[voice]'&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For Redis session support, install with the optional &lt;code&gt;redis&lt;/code&gt; group: &lt;code&gt;uv add 'openai-agents[redis]'&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Hello world example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from agents import Agent, Runner

agent = Agent(name="Assistant", instructions="You are a helpful assistant")

result = Runner.run_sync(agent, "Write a haiku about recursion in programming.")
print(result.final_output)

# Code within the code,
# Functions calling themselves,
# Infinite loop's dance.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(&lt;em&gt;If running this, ensure you set the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable&lt;/em&gt;)&lt;/p&gt; 
&lt;p&gt;(&lt;em&gt;For Jupyter notebook users, see &lt;a href="https://raw.githubusercontent.com/openai/openai-agents-python/main/examples/basic/hello_world_jupyter.ipynb"&gt;hello_world_jupyter.ipynb&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; 
&lt;h2&gt;Handoffs example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from agents import Agent, Runner
import asyncio

spanish_agent = Agent(
    name="Spanish agent",
    instructions="You only speak Spanish.",
)

english_agent = Agent(
    name="English agent",
    instructions="You only speak English",
)

triage_agent = Agent(
    name="Triage agent",
    instructions="Handoff to the appropriate agent based on the language of the request.",
    handoffs=[spanish_agent, english_agent],
)


async def main():
    result = await Runner.run(triage_agent, input="Hola, ¬øc√≥mo est√°s?")
    print(result.final_output)
    # ¬°Hola! Estoy bien, gracias por preguntar. ¬øY t√∫, c√≥mo est√°s?


if __name__ == "__main__":
    asyncio.run(main())
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Functions example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import asyncio

from agents import Agent, Runner, function_tool


@function_tool
def get_weather(city: str) -&amp;gt; str:
    return f"The weather in {city} is sunny."


agent = Agent(
    name="Hello world",
    instructions="You are a helpful agent.",
    tools=[get_weather],
)


async def main():
    result = await Runner.run(agent, input="What's the weather in Tokyo?")
    print(result.final_output)
    # The weather in Tokyo is sunny.


if __name__ == "__main__":
    asyncio.run(main())
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;The agent loop&lt;/h2&gt; 
&lt;p&gt;When you call &lt;code&gt;Runner.run()&lt;/code&gt;, we run a loop until we get a final output.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;We call the LLM, using the model and settings on the agent, and the message history.&lt;/li&gt; 
 &lt;li&gt;The LLM returns a response, which may include tool calls.&lt;/li&gt; 
 &lt;li&gt;If the response has a final output (see below for more on this), we return it and end the loop.&lt;/li&gt; 
 &lt;li&gt;If the response has a handoff, we set the agent to the new agent and go back to step 1.&lt;/li&gt; 
 &lt;li&gt;We process the tool calls (if any) and append the tool responses messages. Then we go to step 1.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;There is a &lt;code&gt;max_turns&lt;/code&gt; parameter that you can use to limit the number of times the loop executes.&lt;/p&gt; 
&lt;h3&gt;Final output&lt;/h3&gt; 
&lt;p&gt;Final output is the last thing the agent produces in the loop.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;If you set an &lt;code&gt;output_type&lt;/code&gt; on the agent, the final output is when the LLM returns something of that type. We use &lt;a href="https://platform.openai.com/docs/guides/structured-outputs"&gt;structured outputs&lt;/a&gt; for this.&lt;/li&gt; 
 &lt;li&gt;If there's no &lt;code&gt;output_type&lt;/code&gt; (i.e. plain text responses), then the first LLM response without any tool calls or handoffs is considered as the final output.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;As a result, the mental model for the agent loop is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;If the current agent has an &lt;code&gt;output_type&lt;/code&gt;, the loop runs until the agent produces structured output matching that type.&lt;/li&gt; 
 &lt;li&gt;If the current agent does not have an &lt;code&gt;output_type&lt;/code&gt;, the loop runs until the current agent produces a message without any tool calls/handoffs.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Common agent patterns&lt;/h2&gt; 
&lt;p&gt;The Agents SDK is designed to be highly flexible, allowing you to model a wide range of LLM workflows including deterministic flows, iterative loops, and more. See examples in &lt;a href="https://raw.githubusercontent.com/openai/openai-agents-python/main/examples/agent_patterns"&gt;&lt;code&gt;examples/agent_patterns&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Tracing&lt;/h2&gt; 
&lt;p&gt;The Agents SDK automatically traces your agent runs, making it easy to track and debug the behavior of your agents. Tracing is extensible by design, supporting custom spans and a wide variety of external destinations, including &lt;a href="https://logfire.pydantic.dev/docs/integrations/llms/openai/#openai-agents"&gt;Logfire&lt;/a&gt;, &lt;a href="https://docs.agentops.ai/v1/integrations/agentssdk"&gt;AgentOps&lt;/a&gt;, &lt;a href="https://braintrust.dev/docs/guides/traces/integrations#openai-agents-sdk"&gt;Braintrust&lt;/a&gt;, &lt;a href="https://docs.scorecard.io/docs/documentation/features/tracing#openai-agents-sdk-integration"&gt;Scorecard&lt;/a&gt;, and &lt;a href="https://docs.keywordsai.co/integration/development-frameworks/openai-agent"&gt;Keywords AI&lt;/a&gt;. For more details about how to customize or disable tracing, see &lt;a href="http://openai.github.io/openai-agents-python/tracing"&gt;Tracing&lt;/a&gt;, which also includes a larger list of &lt;a href="http://openai.github.io/openai-agents-python/tracing/#external-tracing-processors-list"&gt;external tracing processors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Long running agents &amp;amp; human-in-the-loop&lt;/h2&gt; 
&lt;p&gt;You can use the Agents SDK &lt;a href="https://temporal.io/"&gt;Temporal&lt;/a&gt; integration to run durable, long-running workflows, including human-in-the-loop tasks. View a demo of Temporal and the Agents SDK working in action to complete long-running tasks &lt;a href="https://www.youtube.com/watch?v=fFBZqzT4DD8"&gt;in this video&lt;/a&gt;, and &lt;a href="https://github.com/temporalio/sdk-python/tree/main/temporalio/contrib/openai_agents"&gt;view docs here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sessions&lt;/h2&gt; 
&lt;p&gt;The Agents SDK provides built-in session memory to automatically maintain conversation history across multiple agent runs, eliminating the need to manually handle &lt;code&gt;.to_input_list()&lt;/code&gt; between turns.&lt;/p&gt; 
&lt;h3&gt;Quick start&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from agents import Agent, Runner, SQLiteSession

# Create agent
agent = Agent(
    name="Assistant",
    instructions="Reply very concisely.",
)

# Create a session instance
session = SQLiteSession("conversation_123")

# First turn
result = await Runner.run(
    agent,
    "What city is the Golden Gate Bridge in?",
    session=session
)
print(result.final_output)  # "San Francisco"

# Second turn - agent automatically remembers previous context
result = await Runner.run(
    agent,
    "What state is it in?",
    session=session
)
print(result.final_output)  # "California"

# Also works with synchronous runner
result = Runner.run_sync(
    agent,
    "What's the population?",
    session=session
)
print(result.final_output)  # "Approximately 39 million"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Session options&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;No memory&lt;/strong&gt; (default): No session memory when session parameter is omitted&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;session: Session = DatabaseSession(...)&lt;/code&gt;&lt;/strong&gt;: Use a Session instance to manage conversation history&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from agents import Agent, Runner, SQLiteSession

# SQLite - file-based or in-memory database
session = SQLiteSession("user_123", "conversations.db")

# Redis - for scalable, distributed deployments
# from agents.extensions.memory import RedisSession
# session = RedisSession.from_url("user_123", url="redis://localhost:6379/0")

agent = Agent(name="Assistant")

# Different session IDs maintain separate conversation histories
result1 = await Runner.run(
    agent,
    "Hello",
    session=session
)
result2 = await Runner.run(
    agent,
    "Hello",
    session=SQLiteSession("user_456", "conversations.db")
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom session implementations&lt;/h3&gt; 
&lt;p&gt;You can implement your own session memory by creating a class that follows the &lt;code&gt;Session&lt;/code&gt; protocol:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from agents.memory import Session
from typing import List

class MyCustomSession:
    """Custom session implementation following the Session protocol."""

    def __init__(self, session_id: str):
        self.session_id = session_id
        # Your initialization here

    async def get_items(self, limit: int | None = None) -&amp;gt; List[dict]:
        # Retrieve conversation history for the session
        pass

    async def add_items(self, items: List[dict]) -&amp;gt; None:
        # Store new items for the session
        pass

    async def pop_item(self) -&amp;gt; dict | None:
        # Remove and return the most recent item from the session
        pass

    async def clear_session(self) -&amp;gt; None:
        # Clear all items for the session
        pass

# Use your custom session
agent = Agent(name="Assistant")
result = await Runner.run(
    agent,
    "Hello",
    session=MyCustomSession("my_session")
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Development (only needed if you need to edit the SDK/examples)&lt;/h2&gt; 
&lt;ol start="0"&gt; 
 &lt;li&gt;Ensure you have &lt;a href="https://docs.astral.sh/uv/"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; installed.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;uv --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install dependencies&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make sync
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;(After making changes) lint/test&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;make check # run tests linter and typechecker
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or to run them individually:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make tests  # run tests
make mypy   # run typechecker
make lint   # run linter
make format-check # run style checker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;We'd like to acknowledge the excellent work of the open-source community, especially:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.pydantic.dev/latest/"&gt;Pydantic&lt;/a&gt; (data validation) and &lt;a href="https://ai.pydantic.dev/"&gt;PydanticAI&lt;/a&gt; (advanced agent framework)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BerriAI/litellm"&gt;LiteLLM&lt;/a&gt; (unified interface for 100+ LLMs)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/squidfunk/mkdocs-material"&gt;MkDocs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mkdocstrings/griffe"&gt;Griffe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt; and &lt;a href="https://github.com/astral-sh/ruff"&gt;ruff&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We're committed to continuing to build the Agents SDK as an open source framework so others in the community can expand on our approach.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mlflow/mlflow</title>
      <link>https://github.com/mlflow/mlflow</link>
      <description>&lt;p&gt;The open source developer platform to build AI/LLM applications and models with confidence. Enhance your AI applications with end-to-end tracking, observability, and evaluations, all in one integrated platform.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center" style="border-bottom: none"&gt; &lt;a href="https://mlflow.org/"&gt; &lt;img alt="MLflow logo" src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/logo.svg?sanitize=true" width="200" /&gt; &lt;/a&gt; &lt;/h1&gt; 
&lt;h2 align="center" style="border-bottom: none"&gt;Open-Source Platform for Productionizing AI&lt;/h2&gt; 
&lt;p&gt;MLflow is an open-source developer platform to build AI/LLM applications and models with confidence. Enhance your AI applications with end-to-end &lt;strong&gt;experiment tracking&lt;/strong&gt;, &lt;strong&gt;observability&lt;/strong&gt;, and &lt;strong&gt;evaluations&lt;/strong&gt;, all in one integrated platform.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://pypi.org/project/mlflow/"&gt;&lt;img src="https://img.shields.io/pypi/v/mlflow" alt="Python SDK" /&gt;&lt;/a&gt; &lt;a href="https://pepy.tech/projects/mlflow"&gt;&lt;img src="https://img.shields.io/pypi/dm/mlflow" alt="PyPI Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mlflow/mlflow/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/mlflow/mlflow" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=mlflow" target="_blank"&gt; &lt;img src="https://img.shields.io/twitter/follow/mlflow?logo=X&amp;amp;color=%20%23f5f5f5" alt="follow on X(Twitter)" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/mlflow-org/" target="_blank"&gt; &lt;img src="https://custom-icon-badges.demolab.com/badge/LinkedIn-0A66C2?logo=linkedin-white&amp;amp;logoColor=fff" alt="follow on LinkedIn" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/mlflow/mlflow"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;div&gt; 
  &lt;a href="https://mlflow.org/"&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/a&gt; ¬∑ 
  &lt;a href="https://mlflow.org/docs/latest/index.html"&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt; ¬∑ 
  &lt;a href="https://github.com/mlflow/mlflow/issues/new/choose"&gt;&lt;strong&gt;Feature Request&lt;/strong&gt;&lt;/a&gt; ¬∑ 
  &lt;a href="https://mlflow.org/blog"&gt;&lt;strong&gt;News&lt;/strong&gt;&lt;/a&gt; ¬∑ 
  &lt;a href="https://www.youtube.com/@mlflowoss"&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/a&gt; ¬∑ 
  &lt;a href="https://lu.ma/mlflow?k=c"&gt;&lt;strong&gt;Events&lt;/strong&gt;&lt;/a&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;üöÄ Installation&lt;/h2&gt; 
&lt;p&gt;To install the MLflow Python package, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;pip install mlflow
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üì¶ Core Components&lt;/h2&gt; 
&lt;p&gt;MLflow is &lt;strong&gt;the only platform that provides a unified solution for all your AI/ML needs&lt;/strong&gt;, including LLMs, Agents, Deep Learning, and traditional machine learning.&lt;/p&gt; 
&lt;h3&gt;üí° For LLM / GenAI Developers&lt;/h3&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-tracing.png" alt="Tracing" width="100%" /&gt; 
    &lt;div align="center"&gt; 
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/llms/tracing/index.html"&gt;&lt;strong&gt;üîç Tracing / Observability&lt;/strong&gt;&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
     &lt;div&gt;
      Trace the internal states of your LLM/agentic applications for debugging quality issues and monitoring performance with ease.
     &lt;/div&gt;
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/genai/tracing/quickstart/python-openai/"&gt;Getting Started ‚Üí&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-llm-eval.png" alt="LLM Evaluation" width="100%" /&gt; 
    &lt;div align="center"&gt; 
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/genai/eval-monitor/"&gt;&lt;strong&gt;üìä LLM Evaluation&lt;/strong&gt;&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
     &lt;div&gt;
      A suite of automated model evaluation tools, seamlessly integrated with experiment tracking to compare across multiple versions.
     &lt;/div&gt;
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/genai/eval-monitor/"&gt;Getting Started ‚Üí&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-prompt.png" alt="Prompt Management" /&gt; 
    &lt;div align="center"&gt; 
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/genai/prompt-version-mgmt/prompt-registry/"&gt;&lt;strong&gt;ü§ñ Prompt Management&lt;/strong&gt;&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
     &lt;div&gt;
      Version, track, and reuse prompts across your organization, helping maintain consistency and improve collaboration in prompt development.
     &lt;/div&gt;
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/genai/prompt-registry/create-and-edit-prompts/"&gt;Getting Started ‚Üí&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-logged-model.png" alt="MLflow Hero" /&gt; 
    &lt;div align="center"&gt; 
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/genai/prompt-version-mgmt/version-tracking/"&gt;&lt;strong&gt;üì¶ App Version Tracking&lt;/strong&gt;&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
     &lt;div&gt;
      MLflow keeps track of many moving parts in your AI applications, such as models, prompts, tools, and code, with end-to-end lineage.
     &lt;/div&gt;
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/genai/version-tracking/quickstart/"&gt;Getting Started ‚Üí&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;üéì For Data Scientists&lt;/h3&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td colspan="2" align="center"&gt; &lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-experiment.png" alt="Tracking" width="50%" /&gt; 
    &lt;div align="center"&gt; 
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/ml/tracking/"&gt;&lt;strong&gt;üìù Experiment Tracking&lt;/strong&gt;&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
     &lt;div&gt;
      Track your models, parameters, metrics, and evaluation results in ML experiments and compare them using an interactive UI.
     &lt;/div&gt;
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/ml/tracking/quickstart/"&gt;Getting Started ‚Üí&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-model-registry.png" alt="Model Registry" width="100%" /&gt; 
    &lt;div align="center"&gt; 
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/ml/model-registry/"&gt;&lt;strong&gt;üíæ Model Registry&lt;/strong&gt;&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
     &lt;div&gt;
       A centralized model store designed to collaboratively manage the full lifecycle and deployment of machine learning models.
     &lt;/div&gt;
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/ml/model-registry/tutorial/"&gt;Getting Started ‚Üí&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
    &lt;/div&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-deployment.png" alt="Deployment" width="100%" /&gt; 
    &lt;div align="center"&gt; 
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/ml/deployment/"&gt;&lt;strong&gt;üöÄ Deployment&lt;/strong&gt;&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
     &lt;div&gt;
       Tools for seamless model deployment to batch and real-time scoring on platforms like Docker, Kubernetes, Azure ML, and AWS SageMaker.
     &lt;/div&gt;
     &lt;br /&gt; 
     &lt;a href="https://mlflow.org/docs/latest/ml/deployment/"&gt;Getting Started ‚Üí&lt;/a&gt; 
     &lt;br /&gt;
     &lt;br /&gt; 
    &lt;/div&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;üåê Hosting MLflow Anywhere&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-providers.png" alt="Providers" width="100%" /&gt; 
&lt;/div&gt; 
&lt;p&gt;You can run MLflow in many different environments, including local machines, on-premise servers, and cloud infrastructure.&lt;/p&gt; 
&lt;p&gt;Trusted by thousands of organizations, MLflow is now offered as a managed service by most major cloud providers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://aws.amazon.com/sagemaker-ai/experiments/"&gt;Amazon SageMaker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/machine-learning/concept-mlflow?view=azureml-api-2"&gt;Azure ML&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.databricks.com/product/managed-mlflow"&gt;Databricks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nebius.com/services/managed-mlflow"&gt;Nebius&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For hosting MLflow on your own infrastructure, please refer to &lt;a href="https://mlflow.org/docs/latest/ml/tracking/#tracking-setup"&gt;this guidance&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üó£Ô∏è Supported Programming Languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/mlflow/"&gt;Python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.npmjs.com/package/mlflow-tracing"&gt;TypeScript / JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mvnrepository.com/artifact/org.mlflow/mlflow-client"&gt;Java&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cran.r-project.org/web/packages/mlflow/readme/README.html"&gt;R&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üîó Integrations&lt;/h2&gt; 
&lt;p&gt;MLflow is natively integrated with many popular machine learning frameworks and GenAI libraries.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/mlflow/mlflow/refs/heads/master/assets/readme-integrations.png" alt="Integrations" /&gt;&lt;/p&gt; 
&lt;h2&gt;Usage Examples&lt;/h2&gt; 
&lt;h3&gt;Experiment Tracking (&lt;a href="https://mlflow.org/docs/latest/ml/tracking/"&gt;Doc&lt;/a&gt;)&lt;/h3&gt; 
&lt;p&gt;The following examples trains a simple regression model with scikit-learn, while enabling MLflow's &lt;a href="https://mlflow.org/docs/latest/tracking/autolog.html"&gt;autologging&lt;/a&gt; feature for experiment tracking.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import mlflow

from sklearn.model_selection import train_test_split
from sklearn.datasets import load_diabetes
from sklearn.ensemble import RandomForestRegressor

# Enable MLflow's automatic experiment tracking for scikit-learn
mlflow.sklearn.autolog()

# Load the training dataset
db = load_diabetes()
X_train, X_test, y_train, y_test = train_test_split(db.data, db.target)

rf = RandomForestRegressor(n_estimators=100, max_depth=6, max_features=3)
# MLflow triggers logging automatically upon model fitting
rf.fit(X_train, y_train)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the above code finishes, run the following command in a separate terminal and access the MLflow UI via the printed URL. An MLflow &lt;strong&gt;Run&lt;/strong&gt; should be automatically created, which tracks the training dataset, hyper parameters, performance metrics, the trained model, dependencies, and even more.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;mlflow ui
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Evaluating Models (&lt;a href="https://mlflow.org/docs/latest/model-evaluation/index.html"&gt;Doc&lt;/a&gt;)&lt;/h3&gt; 
&lt;p&gt;The following example runs automatic evaluation for question-answering tasks with several built-in metrics.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import mlflow
import pandas as pd

# Evaluation set contains (1) input question (2) model outputs (3) ground truth
df = pd.DataFrame(
    {
        "inputs": ["What is MLflow?", "What is Spark?"],
        "outputs": [
            "MLflow is an innovative fully self-driving airship powered by AI.",
            "Sparks is an American pop and rock duo formed in Los Angeles.",
        ],
        "ground_truth": [
            "MLflow is an open-source platform for productionizing AI.",
            "Apache Spark is an open-source, distributed computing system.",
        ],
    }
)
eval_dataset = mlflow.data.from_pandas(
    df, predictions="outputs", targets="ground_truth"
)

# Start an MLflow Run to record the evaluation results to
with mlflow.start_run(run_name="evaluate_qa"):
    # Run automatic evaluation with a set of built-in metrics for question-answering models
    results = mlflow.evaluate(
        data=eval_dataset,
        model_type="question-answering",
    )

print(results.tables["eval_results_table"])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Observability (&lt;a href="https://mlflow.org/docs/latest/llms/tracing/index.html"&gt;Doc&lt;/a&gt;)&lt;/h3&gt; 
&lt;p&gt;MLflow Tracing provides LLM observability for various GenAI libraries such as OpenAI, LangChain, LlamaIndex, DSPy, AutoGen, and more. To enable auto-tracing, call &lt;code&gt;mlflow.xyz.autolog()&lt;/code&gt; before running your models. Refer to the documentation for customization and manual instrumentation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import mlflow
from openai import OpenAI

# Enable tracing for OpenAI
mlflow.openai.autolog()

# Query OpenAI LLM normally
response = OpenAI().chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": "Hi!"}],
    temperature=0.1,
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then navigate to the "Traces" tab in the MLflow UI to find the trace records OpenAI query.&lt;/p&gt; 
&lt;h2&gt;üí≠ Support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;For help or questions about MLflow usage (e.g. "how do I do X?") visit the &lt;a href="https://mlflow.org/docs/latest/index.html"&gt;documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;In the documentation, you can ask the question to our AI-powered chat bot. Click on the &lt;strong&gt;"Ask AI"&lt;/strong&gt; button at the right bottom.&lt;/li&gt; 
 &lt;li&gt;Join the &lt;a href="https://lu.ma/mlflow?k=c"&gt;virtual events&lt;/a&gt; like office hours and meetups.&lt;/li&gt; 
 &lt;li&gt;To report a bug, file a documentation issue, or submit a feature request, please &lt;a href="https://github.com/mlflow/mlflow/issues/new/choose"&gt;open a GitHub issue&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;For release announcements and other discussions, please subscribe to our mailing list (&lt;a href="mailto:mlflow-users@googlegroups.com"&gt;mlflow-users@googlegroups.com&lt;/a&gt;) or join us on &lt;a href="https://mlflow.org/slack"&gt;Slack&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; 
&lt;p&gt;We happily welcome contributions to MLflow!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Submit &lt;a href="https://github.com/mlflow/mlflow/issues/new?template=bug_report_template.yaml"&gt;bug reports&lt;/a&gt; and &lt;a href="https://github.com/mlflow/mlflow/issues/new?template=feature_request_template.yaml"&gt;feature requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Contribute for &lt;a href="https://github.com/mlflow/mlflow/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;good-first-issues&lt;/a&gt; and &lt;a href="https://github.com/mlflow/mlflow/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;help-wanted&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Writing about MLflow and sharing your experience&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see our &lt;a href="https://raw.githubusercontent.com/mlflow/mlflow/master/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt; to learn more about contributing to MLflow.&lt;/p&gt; 
&lt;h2&gt;‚≠êÔ∏è Star History&lt;/h2&gt; 
&lt;a href="https://star-history.com/#mlflow/mlflow&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=mlflow/mlflow&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=mlflow/mlflow&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=mlflow/mlflow&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;‚úèÔ∏è Citation&lt;/h2&gt; 
&lt;p&gt;If you use MLflow in your research, please cite it using the "Cite this repository" button at the top of the &lt;a href="https://github.com/mlflow/mlflow"&gt;GitHub repository page&lt;/a&gt;, which will provide you with citation formats including APA and BibTeX.&lt;/p&gt; 
&lt;h2&gt;üë• Core Members&lt;/h2&gt; 
&lt;p&gt;MLflow is currently maintained by the following core members with significant contributions from hundreds of exceptionally talented community members.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BenWilson2"&gt;Ben Wilson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dbczumar"&gt;Corey Zumar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/daniellok-db"&gt;Daniel Lok&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gabrielfu"&gt;Gabriel Fu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/harupy"&gt;Harutaka Kawamura&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/serena-ruan"&gt;Serena Ruan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TomeHirata"&gt;Tomu Hirata&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/WeichenXu123"&gt;Weichen Xu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/B-Step62"&gt;Yuki Watanabe&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Fannovel16/comfyui_controlnet_aux</title>
      <link>https://github.com/Fannovel16/comfyui_controlnet_aux</link>
      <description>&lt;p&gt;ComfyUI's ControlNet Auxiliary Preprocessors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ComfyUI's ControlNet Auxiliary Preprocessors&lt;/h1&gt; 
&lt;p&gt;Plug-and-play &lt;a href="https://github.com/comfyanonymous/ComfyUI"&gt;ComfyUI&lt;/a&gt; node sets for making &lt;a href="https://github.com/lllyasviel/ControlNet/"&gt;ControlNet&lt;/a&gt; hint images&lt;/p&gt; 
&lt;p&gt;"anime style, a protest in the street, cyberpunk city, a woman with pink hair and golden eyes (looking at the viewer) is holding a sign with the text "ComfyUI ControlNet Aux" in bold, neon pink" on Flux.1 Dev&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Fannovel16/comfyui_controlnet_aux/main/examples/CNAuxBanner.jpg" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;The code is copy-pasted from the respective folders in &lt;a href="https://github.com/lllyasviel/ControlNet/tree/main/annotator"&gt;https://github.com/lllyasviel/ControlNet/tree/main/annotator&lt;/a&gt; and connected to &lt;a href="https://huggingface.co/lllyasviel/Annotators"&gt;the ü§ó Hub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All credit &amp;amp; copyright goes to &lt;a href="https://github.com/lllyasviel"&gt;https://github.com/lllyasviel&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Updates&lt;/h1&gt; 
&lt;p&gt;Go to &lt;a href="https://raw.githubusercontent.com/Fannovel16/comfyui_controlnet_aux/main/UPDATES.md"&gt;Update page&lt;/a&gt; to follow updates&lt;/p&gt; 
&lt;h1&gt;Installation:&lt;/h1&gt; 
&lt;h2&gt;Using ComfyUI Manager (recommended):&lt;/h2&gt; 
&lt;p&gt;Install &lt;a href="https://github.com/ltdrdata/ComfyUI-Manager"&gt;ComfyUI Manager&lt;/a&gt; and do steps introduced there to install this repo.&lt;/p&gt; 
&lt;h2&gt;Alternative:&lt;/h2&gt; 
&lt;p&gt;If you're running on Linux, or non-admin account on windows you'll want to ensure &lt;code&gt;/ComfyUI/custom_nodes&lt;/code&gt; and &lt;code&gt;comfyui_controlnet_aux&lt;/code&gt; has write permissions.&lt;/p&gt; 
&lt;p&gt;There is now a &lt;strong&gt;install.bat&lt;/strong&gt; you can run to install to portable if detected. Otherwise it will default to system and assume you followed ConfyUI's manual installation steps.&lt;/p&gt; 
&lt;p&gt;If you can't run &lt;strong&gt;install.bat&lt;/strong&gt; (e.g. you are a Linux user). Open the CMD/Shell and do the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Navigate to your &lt;code&gt;/ComfyUI/custom_nodes/&lt;/code&gt; folder&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;git clone https://github.com/Fannovel16/comfyui_controlnet_aux/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Navigate to your &lt;code&gt;comfyui_controlnet_aux&lt;/code&gt; folder 
  &lt;ul&gt; 
   &lt;li&gt;Portable/venv: 
    &lt;ul&gt; 
     &lt;li&gt;Run &lt;code&gt;path/to/ComfUI/python_embeded/python.exe -s -m pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;With system python 
    &lt;ul&gt; 
     &lt;li&gt;Run &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Start ComfyUI&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Nodes&lt;/h1&gt; 
&lt;p&gt;Please note that this repo only supports preprocessors making hint images (e.g. stickman, canny edge, etc). All preprocessors except Inpaint are intergrated into &lt;code&gt;AIO Aux Preprocessor&lt;/code&gt; node. This node allow you to quickly get the preprocessor but a preprocessor's own threshold parameters won't be able to set. You need to use its node directly to set thresholds.&lt;/p&gt; 
&lt;h1&gt;Nodes (sections are categories in Comfy menu)&lt;/h1&gt; 
&lt;h2&gt;Line Extractors&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Preprocessor Node&lt;/th&gt; 
   &lt;th&gt;sd-webui-controlnet/other&lt;/th&gt; 
   &lt;th&gt;ControlNet/T2I-Adapter&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Binary Lines&lt;/td&gt; 
   &lt;td&gt;binary&lt;/td&gt; 
   &lt;td&gt;control_scribble&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Canny Edge&lt;/td&gt; 
   &lt;td&gt;canny&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_canny &lt;br /&gt; control_canny &lt;br /&gt; t2iadapter_canny&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;HED Soft-Edge Lines&lt;/td&gt; 
   &lt;td&gt;hed&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_softedge &lt;br /&gt; control_hed&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Standard Lineart&lt;/td&gt; 
   &lt;td&gt;standard_lineart&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_lineart&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Realistic Lineart&lt;/td&gt; 
   &lt;td&gt;lineart (or &lt;code&gt;lineart_coarse&lt;/code&gt; if &lt;code&gt;coarse&lt;/code&gt; is enabled)&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_lineart&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Anime Lineart&lt;/td&gt; 
   &lt;td&gt;lineart_anime&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15s2_lineart_anime&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Manga Lineart&lt;/td&gt; 
   &lt;td&gt;lineart_anime_denoise&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15s2_lineart_anime&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;M-LSD Lines&lt;/td&gt; 
   &lt;td&gt;mlsd&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_mlsd &lt;br /&gt; control_mlsd&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PiDiNet Soft-Edge Lines&lt;/td&gt; 
   &lt;td&gt;pidinet&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_softedge &lt;br /&gt; control_scribble&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Scribble Lines&lt;/td&gt; 
   &lt;td&gt;scribble&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_scribble &lt;br /&gt; control_scribble&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Scribble XDoG Lines&lt;/td&gt; 
   &lt;td&gt;scribble_xdog&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_scribble &lt;br /&gt; control_scribble&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fake Scribble Lines&lt;/td&gt; 
   &lt;td&gt;scribble_hed&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_scribble &lt;br /&gt; control_scribble&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;TEED Soft-Edge Lines&lt;/td&gt; 
   &lt;td&gt;teed&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://huggingface.co/SargeZT/controlnet-sd-xl-1.0-softedge-dexined/blob/main/controlnet-sd-xl-1.0-softedge-dexined.safetensors"&gt;controlnet-sd-xl-1.0-softedge-dexined&lt;/a&gt; &lt;br /&gt; control_v11p_sd15_softedge (Theoretically)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Scribble PiDiNet Lines&lt;/td&gt; 
   &lt;td&gt;scribble_pidinet&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_scribble &lt;br /&gt; control_scribble&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AnyLine Lineart&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;mistoLine_fp16.safetensors &lt;br /&gt; mistoLine_rank256 &lt;br /&gt; control_v11p_sd15s2_lineart_anime &lt;br /&gt; control_v11p_sd15_lineart&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Normal and Depth Estimators&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Preprocessor Node&lt;/th&gt; 
   &lt;th&gt;sd-webui-controlnet/other&lt;/th&gt; 
   &lt;th&gt;ControlNet/T2I-Adapter&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MiDaS Depth Map&lt;/td&gt; 
   &lt;td&gt;(normal) depth&lt;/td&gt; 
   &lt;td&gt;control_v11f1p_sd15_depth &lt;br /&gt; control_depth &lt;br /&gt; t2iadapter_depth&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;LeReS Depth Map&lt;/td&gt; 
   &lt;td&gt;depth_leres&lt;/td&gt; 
   &lt;td&gt;control_v11f1p_sd15_depth &lt;br /&gt; control_depth &lt;br /&gt; t2iadapter_depth&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Zoe Depth Map&lt;/td&gt; 
   &lt;td&gt;depth_zoe&lt;/td&gt; 
   &lt;td&gt;control_v11f1p_sd15_depth &lt;br /&gt; control_depth &lt;br /&gt; t2iadapter_depth&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MiDaS Normal Map&lt;/td&gt; 
   &lt;td&gt;normal_map&lt;/td&gt; 
   &lt;td&gt;control_normal&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;BAE Normal Map&lt;/td&gt; 
   &lt;td&gt;normal_bae&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_normalbae&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MeshGraphormer Hand Refiner (&lt;a href="https://github.com/wenquanlu/HandRefiner"&gt;HandRefinder&lt;/a&gt;)&lt;/td&gt; 
   &lt;td&gt;depth_hand_refiner&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://huggingface.co/hr16/ControlNet-HandRefiner-pruned/blob/main/control_sd15_inpaint_depth_hand_fp16.safetensors"&gt;control_sd15_inpaint_depth_hand_fp16&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Depth Anything&lt;/td&gt; 
   &lt;td&gt;depth_anything&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://huggingface.co/spaces/LiheYoung/Depth-Anything/blob/main/checkpoints_controlnet/diffusion_pytorch_model.safetensors"&gt;Depth-Anything&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Zoe Depth Anything &lt;br /&gt; (Basically Zoe but the encoder is replaced with DepthAnything)&lt;/td&gt; 
   &lt;td&gt;depth_anything&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://huggingface.co/spaces/LiheYoung/Depth-Anything/blob/main/checkpoints_controlnet/diffusion_pytorch_model.safetensors"&gt;Depth-Anything&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Normal DSINE&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;control_normal/control_v11p_sd15_normalbae&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Metric3D Depth&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;control_v11f1p_sd15_depth &lt;br /&gt; control_depth &lt;br /&gt; t2iadapter_depth&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Metric3D Normal&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_normalbae&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Depth Anything V2&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://huggingface.co/spaces/LiheYoung/Depth-Anything/blob/main/checkpoints_controlnet/diffusion_pytorch_model.safetensors"&gt;Depth-Anything&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Faces and Poses Estimators&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Preprocessor Node&lt;/th&gt; 
   &lt;th&gt;sd-webui-controlnet/other&lt;/th&gt; 
   &lt;th&gt;ControlNet/T2I-Adapter&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;DWPose Estimator&lt;/td&gt; 
   &lt;td&gt;dw_openpose_full&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_openpose &lt;br /&gt; control_openpose &lt;br /&gt; t2iadapter_openpose&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OpenPose Estimator&lt;/td&gt; 
   &lt;td&gt;openpose (detect_body) &lt;br /&gt; openpose_hand (detect_body + detect_hand) &lt;br /&gt; openpose_faceonly (detect_face) &lt;br /&gt; openpose_full (detect_hand + detect_body + detect_face)&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_openpose &lt;br /&gt; control_openpose &lt;br /&gt; t2iadapter_openpose&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;MediaPipe Face Mesh&lt;/td&gt; 
   &lt;td&gt;mediapipe_face&lt;/td&gt; 
   &lt;td&gt;controlnet_sd21_laion_face_v2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Animal Estimator&lt;/td&gt; 
   &lt;td&gt;animal_openpose&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://huggingface.co/huchenlei/animal_openpose/blob/main/control_sd15_animal_openpose_fp16.pth"&gt;control_sd15_animal_openpose_fp16&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Optical Flow Estimators&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Preprocessor Node&lt;/th&gt; 
   &lt;th&gt;sd-webui-controlnet/other&lt;/th&gt; 
   &lt;th&gt;ControlNet/T2I-Adapter&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Unimatch Optical Flow&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ProjectNUWA/DragNUWA"&gt;DragNUWA&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;How to get OpenPose-format JSON?&lt;/h3&gt; 
&lt;h4&gt;User-side&lt;/h4&gt; 
&lt;p&gt;This workflow will save images to ComfyUI's output folder (the same location as output images). If you haven't found &lt;code&gt;Save Pose Keypoints&lt;/code&gt; node, update this extension &lt;img src="https://raw.githubusercontent.com/Fannovel16/comfyui_controlnet_aux/main/examples/example_save_kps.png" alt="" /&gt;&lt;/p&gt; 
&lt;h4&gt;Dev-side&lt;/h4&gt; 
&lt;p&gt;An array of &lt;a href="https://github.com/CMU-Perceptual-Computing-Lab/openpose/raw/master/doc/02_output.md#json-output-format"&gt;OpenPose-format JSON&lt;/a&gt; corresponsding to each frame in an IMAGE batch can be gotten from DWPose and OpenPose using &lt;code&gt;app.nodeOutputs&lt;/code&gt; on the UI or &lt;code&gt;/history&lt;/code&gt; API endpoint. JSON output from AnimalPose uses a kinda similar format to OpenPose JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[
    {
        "version": "ap10k",
        "animals": [
            [[x1, y1, 1], [x2, y2, 1],..., [x17, y17, 1]],
            [[x1, y1, 1], [x2, y2, 1],..., [x17, y17, 1]],
            ...
        ],
        "canvas_height": 512,
        "canvas_width": 768
    },
    ...
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For extension developers (e.g. Openpose editor):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;const poseNodes = app.graph._nodes.filter(node =&amp;gt; ["OpenposePreprocessor", "DWPreprocessor", "AnimalPosePreprocessor"].includes(node.type))
for (const poseNode of poseNodes) {
    const openposeResults = JSON.parse(app.nodeOutputs[poseNode.id].openpose_json[0])
    console.log(openposeResults) //An array containing Openpose JSON for each frame
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For API users: Javascript&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-js"&gt;import fetch from "node-fetch" //Remember to add "type": "module" to "package.json"
async function main() {
    const promptId = '792c1905-ecfe-41f4-8114-83e6a4a09a9f' //Too lazy to POST /queue
    let history = await fetch(`http://127.0.0.1:8188/history/${promptId}`).then(re =&amp;gt; re.json())
    history = history[promptId]
    const nodeOutputs = Object.values(history.outputs).filter(output =&amp;gt; output.openpose_json)
    for (const nodeOutput of nodeOutputs) {
        const openposeResults = JSON.parse(nodeOutput.openpose_json[0])
        console.log(openposeResults) //An array containing Openpose JSON for each frame
    }
}
main()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Python&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-py"&gt;import json, urllib.request

server_address = "127.0.0.1:8188"
prompt_id = '' #Too lazy to POST /queue

def get_history(prompt_id):
    with urllib.request.urlopen("http://{}/history/{}".format(server_address, prompt_id)) as response:
        return json.loads(response.read())

history = get_history(prompt_id)[prompt_id]
for o in history['outputs']:
    for node_id in history['outputs']:
        node_output = history['outputs'][node_id]
        if 'openpose_json' in node_output:
            print(json.loads(node_output['openpose_json'][0])) #An list containing Openpose JSON for each frame
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Semantic Segmentation&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Preprocessor Node&lt;/th&gt; 
   &lt;th&gt;sd-webui-controlnet/other&lt;/th&gt; 
   &lt;th&gt;ControlNet/T2I-Adapter&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OneFormer ADE20K Segmentor&lt;/td&gt; 
   &lt;td&gt;oneformer_ade20k&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_seg&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OneFormer COCO Segmentor&lt;/td&gt; 
   &lt;td&gt;oneformer_coco&lt;/td&gt; 
   &lt;td&gt;control_v11p_sd15_seg&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;UniFormer Segmentor&lt;/td&gt; 
   &lt;td&gt;segmentation&lt;/td&gt; 
   &lt;td&gt;control_sd15_seg &lt;br /&gt; control_v11p_sd15_seg&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;T2IAdapter-only&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Preprocessor Node&lt;/th&gt; 
   &lt;th&gt;sd-webui-controlnet/other&lt;/th&gt; 
   &lt;th&gt;ControlNet/T2I-Adapter&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Color Pallete&lt;/td&gt; 
   &lt;td&gt;color&lt;/td&gt; 
   &lt;td&gt;t2iadapter_color&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Content Shuffle&lt;/td&gt; 
   &lt;td&gt;shuffle&lt;/td&gt; 
   &lt;td&gt;t2iadapter_style&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Recolor&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Preprocessor Node&lt;/th&gt; 
   &lt;th&gt;sd-webui-controlnet/other&lt;/th&gt; 
   &lt;th&gt;ControlNet/T2I-Adapter&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Image Luminance&lt;/td&gt; 
   &lt;td&gt;recolor_luminance&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://huggingface.co/lllyasviel/sd_control_collection/resolve/main/ioclab_sd15_recolor.safetensors"&gt;ioclab_sd15_recolor&lt;/a&gt; &lt;br /&gt; &lt;a href="https://huggingface.co/lllyasviel/sd_control_collection/resolve/main/sai_xl_recolor_256lora.safetensors"&gt;sai_xl_recolor_256lora&lt;/a&gt; &lt;br /&gt; &lt;a href="https://huggingface.co/bdsqlsz/qinglong_controlnet-lllite/resolve/main/bdsqlsz_controlllite_xl_recolor_luminance.safetensors"&gt;bdsqlsz_controlllite_xl_recolor_luminance&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Image Intensity&lt;/td&gt; 
   &lt;td&gt;recolor_intensity&lt;/td&gt; 
   &lt;td&gt;Idk. Maybe same as above?&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Examples&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A picture is worth a thousand words&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Fannovel16/comfyui_controlnet_aux/main/examples/ExecuteAll1.jpg" alt="" /&gt; &lt;img src="https://raw.githubusercontent.com/Fannovel16/comfyui_controlnet_aux/main/examples/ExecuteAll2.jpg" alt="" /&gt;&lt;/p&gt; 
&lt;h1&gt;Testing workflow&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/Fannovel16/comfyui_controlnet_aux/raw/main/examples/ExecuteAll.png"&gt;https://github.com/Fannovel16/comfyui_controlnet_aux/blob/main/examples/ExecuteAll.png&lt;/a&gt; Input image: &lt;a href="https://github.com/Fannovel16/comfyui_controlnet_aux/raw/main/examples/comfyui-controlnet-aux-logo.png"&gt;https://github.com/Fannovel16/comfyui_controlnet_aux/blob/main/examples/comfyui-controlnet-aux-logo.png&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Q&amp;amp;A:&lt;/h1&gt; 
&lt;h2&gt;Why some nodes doesn't appear after I installed this repo?&lt;/h2&gt; 
&lt;p&gt;This repo has a new mechanism which will skip any custom node can't be imported. If you meet this case, please create a issue on &lt;a href="https://github.com/Fannovel16/comfyui_controlnet_aux/issues"&gt;Issues tab&lt;/a&gt; with the log from the command line.&lt;/p&gt; 
&lt;h2&gt;DWPose/AnimalPose only uses CPU so it's so slow. How can I make it use GPU?&lt;/h2&gt; 
&lt;p&gt;There are two ways to speed-up DWPose: using TorchScript checkpoints (.torchscript.pt) checkpoints or ONNXRuntime (.onnx). TorchScript way is little bit slower than ONNXRuntime but doesn't require any additional library and still way way faster than CPU.&lt;/p&gt; 
&lt;p&gt;A torchscript bbox detector is compatiable with an onnx pose estimator and vice versa.&lt;/p&gt; 
&lt;h3&gt;TorchScript&lt;/h3&gt; 
&lt;p&gt;Set &lt;code&gt;bbox_detector&lt;/code&gt; and &lt;code&gt;pose_estimator&lt;/code&gt; according to this picture. You can try other bbox detector endings with &lt;code&gt;.torchscript.pt&lt;/code&gt; to reduce bbox detection time if input images are ideal. &lt;img src="https://raw.githubusercontent.com/Fannovel16/comfyui_controlnet_aux/main/examples/example_torchscript.png" alt="" /&gt;&lt;/p&gt; 
&lt;h3&gt;ONNXRuntime&lt;/h3&gt; 
&lt;p&gt;If onnxruntime is installed successfully and the checkpoint used endings with &lt;code&gt;.onnx&lt;/code&gt;, it will replace default cv2 backend to take advantage of GPU. Note that if you are using NVidia card, this method currently can only works on CUDA 11.8 (ComfyUI_windows_portable_nvidia_cu118_or_cpu.7z) unless you compile onnxruntime yourself.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Know your onnxruntime build:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;NVidia CUDA 11.x or bellow/AMD GPU: &lt;code&gt;onnxruntime-gpu&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;NVidia CUDA 12.x: &lt;code&gt;onnxruntime-gpu --extra-index-url https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/onnxruntime-cuda-12/pypi/simple/&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;DirectML: &lt;code&gt;onnxruntime-directml&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;OpenVINO: &lt;code&gt;onnxruntime-openvino&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that if this is your first time using ComfyUI, please test if it can run on your device before doing next steps.&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt; &lt;p&gt;Add it into &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;install.bat&lt;/code&gt; or pip command mentioned in Installation&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Fannovel16/comfyui_controlnet_aux/main/examples/example_onnx.png" alt="" /&gt;&lt;/p&gt; 
&lt;h1&gt;Assets files of preprocessors&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;anime_face_segment: &lt;a href="https://huggingface.co/bdsqlsz/qinglong_controlnet-lllite/blob/main/Annotators/UNet.pth"&gt;bdsqlsz/qinglong_controlnet-lllite/Annotators/UNet.pth&lt;/a&gt;, &lt;a href="https://huggingface.co/skytnt/anime-seg/blob/main/isnetis.ckpt"&gt;anime-seg/isnetis.ckpt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;densepose: &lt;a href="https://huggingface.co/LayerNorm/DensePose-TorchScript-with-hint-image/blob/main/densepose_r50_fpn_dl.torchscript"&gt;LayerNorm/DensePose-TorchScript-with-hint-image/densepose_r50_fpn_dl.torchscript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;dwpose:&lt;/li&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;bbox_detector: Either &lt;a href="https://huggingface.co/yzd-v/DWPose/blob/main/yolox_l.onnx"&gt;yzd-v/DWPose/yolox_l.onnx&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/yolox-onnx/blob/main/yolox_l.torchscript.pt"&gt;hr16/yolox-onnx/yolox_l.torchscript.pt&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/yolo-nas-fp16/blob/main/yolo_nas_l_fp16.onnx"&gt;hr16/yolo-nas-fp16/yolo_nas_l_fp16.onnx&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/yolo-nas-fp16/blob/main/yolo_nas_m_fp16.onnx"&gt;hr16/yolo-nas-fp16/yolo_nas_m_fp16.onnx&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/yolo-nas-fp16/blob/main/yolo_nas_s_fp16.onnx"&gt;hr16/yolo-nas-fp16/yolo_nas_s_fp16.onnx&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;pose_estimator: Either &lt;a href="https://huggingface.co/hr16/DWPose-TorchScript-BatchSize5/blob/main/dw-ll_ucoco_384_bs5.torchscript.pt"&gt;hr16/DWPose-TorchScript-BatchSize5/dw-ll_ucoco_384_bs5.torchscript.pt&lt;/a&gt;, &lt;a href="https://huggingface.co/yzd-v/DWPose/blob/main/dw-ll_ucoco_384.onnx"&gt;yzd-v/DWPose/dw-ll_ucoco_384.onnx&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;animal_pose (ap10k):&lt;/li&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;bbox_detector: Either &lt;a href="https://huggingface.co/yzd-v/DWPose/blob/main/yolox_l.onnx"&gt;yzd-v/DWPose/yolox_l.onnx&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/yolox-onnx/blob/main/yolox_l.torchscript.pt"&gt;hr16/yolox-onnx/yolox_l.torchscript.pt&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/yolo-nas-fp16/blob/main/yolo_nas_l_fp16.onnx"&gt;hr16/yolo-nas-fp16/yolo_nas_l_fp16.onnx&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/yolo-nas-fp16/blob/main/yolo_nas_m_fp16.onnx"&gt;hr16/yolo-nas-fp16/yolo_nas_m_fp16.onnx&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/yolo-nas-fp16/blob/main/yolo_nas_s_fp16.onnx"&gt;hr16/yolo-nas-fp16/yolo_nas_s_fp16.onnx&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;pose_estimator: Either &lt;a href="https://huggingface.co/hr16/DWPose-TorchScript-BatchSize5/blob/main/rtmpose-m_ap10k_256_bs5.torchscript.pt"&gt;hr16/DWPose-TorchScript-BatchSize5/rtmpose-m_ap10k_256_bs5.torchscript.pt&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/UnJIT-DWPose/blob/main/rtmpose-m_ap10k_256.onnx"&gt;hr16/UnJIT-DWPose/rtmpose-m_ap10k_256.onnx&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;hed: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/ControlNetHED.pth"&gt;lllyasviel/Annotators/ControlNetHED.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;leres: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/res101.pth"&gt;lllyasviel/Annotators/res101.pth&lt;/a&gt;, &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/latest_net_G.pth"&gt;lllyasviel/Annotators/latest_net_G.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;lineart: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/sk_model.pth"&gt;lllyasviel/Annotators/sk_model.pth&lt;/a&gt;, &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/sk_model2.pth"&gt;lllyasviel/Annotators/sk_model2.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;lineart_anime: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/netG.pth"&gt;lllyasviel/Annotators/netG.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;manga_line: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/erika.pth"&gt;lllyasviel/Annotators/erika.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;mesh_graphormer: &lt;a href="https://huggingface.co/hr16/ControlNet-HandRefiner-pruned/blob/main/graphormer_hand_state_dict.bin"&gt;hr16/ControlNet-HandRefiner-pruned/graphormer_hand_state_dict.bin&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/ControlNet-HandRefiner-pruned/blob/main/hrnetv2_w64_imagenet_pretrained.pth"&gt;hr16/ControlNet-HandRefiner-pruned/hrnetv2_w64_imagenet_pretrained.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;midas: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/dpt_hybrid-midas-501f0c75.pt"&gt;lllyasviel/Annotators/dpt_hybrid-midas-501f0c75.pt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;mlsd: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/mlsd_large_512_fp32.pth"&gt;lllyasviel/Annotators/mlsd_large_512_fp32.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;normalbae: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/scannet.pt"&gt;lllyasviel/Annotators/scannet.pt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;oneformer: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/250_16_swin_l_oneformer_ade20k_160k.pth"&gt;lllyasviel/Annotators/250_16_swin_l_oneformer_ade20k_160k.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;open_pose: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/body_pose_model.pth"&gt;lllyasviel/Annotators/body_pose_model.pth&lt;/a&gt;, &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/hand_pose_model.pth"&gt;lllyasviel/Annotators/hand_pose_model.pth&lt;/a&gt;, &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/facenet.pth"&gt;lllyasviel/Annotators/facenet.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;pidi: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/table5_pidinet.pth"&gt;lllyasviel/Annotators/table5_pidinet.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;sam: &lt;a href="https://huggingface.co/dhkim2810/MobileSAM/blob/main/mobile_sam.pt"&gt;dhkim2810/MobileSAM/mobile_sam.pt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;uniformer: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/upernet_global_small.pth"&gt;lllyasviel/Annotators/upernet_global_small.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;zoe: &lt;a href="https://huggingface.co/lllyasviel/Annotators/blob/main/ZoeD_M12_N.pt"&gt;lllyasviel/Annotators/ZoeD_M12_N.pt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;teed: &lt;a href="https://huggingface.co/bdsqlsz/qinglong_controlnet-lllite/blob/main/Annotators/7_model.pth"&gt;bdsqlsz/qinglong_controlnet-lllite/7_model.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;depth_anything: Either &lt;a href="https://huggingface.co/spaces/LiheYoung/Depth-Anything/blob/main/checkpoints/depth_anything_vitl14.pth"&gt;LiheYoung/Depth-Anything/checkpoints/depth_anything_vitl14.pth&lt;/a&gt;, &lt;a href="https://huggingface.co/spaces/LiheYoung/Depth-Anything/blob/main/checkpoints/depth_anything_vitb14.pth"&gt;LiheYoung/Depth-Anything/checkpoints/depth_anything_vitb14.pth&lt;/a&gt; or &lt;a href="https://huggingface.co/spaces/LiheYoung/Depth-Anything/blob/main/checkpoints/depth_anything_vits14.pth"&gt;LiheYoung/Depth-Anything/checkpoints/depth_anything_vits14.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;diffusion_edge: Either &lt;a href="https://huggingface.co/hr16/Diffusion-Edge/blob/main/diffusion_edge_indoor.pt"&gt;hr16/Diffusion-Edge/diffusion_edge_indoor.pt&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/Diffusion-Edge/blob/main/diffusion_edge_urban.pt"&gt;hr16/Diffusion-Edge/diffusion_edge_urban.pt&lt;/a&gt; or &lt;a href="https://huggingface.co/hr16/Diffusion-Edge/blob/main/diffusion_edge_natrual.pt"&gt;hr16/Diffusion-Edge/diffusion_edge_natrual.pt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;unimatch: Either &lt;a href="https://huggingface.co/hr16/Unimatch/blob/main/gmflow-scale2-regrefine6-mixdata.pth"&gt;hr16/Unimatch/gmflow-scale2-regrefine6-mixdata.pth&lt;/a&gt;, &lt;a href="https://huggingface.co/hr16/Unimatch/blob/main/gmflow-scale2-mixdata.pth"&gt;hr16/Unimatch/gmflow-scale2-mixdata.pth&lt;/a&gt; or &lt;a href="https://huggingface.co/hr16/Unimatch/blob/main/gmflow-scale1-mixdata.pth"&gt;hr16/Unimatch/gmflow-scale1-mixdata.pth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;zoe_depth_anything: Either &lt;a href="https://huggingface.co/spaces/LiheYoung/Depth-Anything/blob/main/checkpoints_metric_depth/depth_anything_metric_depth_indoor.pt"&gt;LiheYoung/Depth-Anything/checkpoints_metric_depth/depth_anything_metric_depth_indoor.pt&lt;/a&gt; or &lt;a href="https://huggingface.co/spaces/LiheYoung/Depth-Anything/blob/main/checkpoints_metric_depth/depth_anything_metric_depth_outdoor.pt"&gt;LiheYoung/Depth-Anything/checkpoints_metric_depth/depth_anything_metric_depth_outdoor.pt&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;2000 Stars üòÑ&lt;/h1&gt; 
&lt;a href="https://star-history.com/#Fannovel16/comfyui_controlnet_aux&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=Fannovel16/comfyui_controlnet_aux&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=Fannovel16/comfyui_controlnet_aux&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=Fannovel16/comfyui_controlnet_aux&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;p&gt;Thanks for yalls supports. I never thought the graph for stars would be linear lol.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>alexta69/metube</title>
      <link>https://github.com/alexta69/metube</link>
      <description>&lt;p&gt;Self-hosted YouTube downloader (web UI for youtube-dl / yt-dlp)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MeTube&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/alexta69/metube/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Build Status" /&gt; &lt;img src="https://img.shields.io/docker/pulls/alexta69/metube.svg?sanitize=true" alt="Docker Pulls" /&gt;&lt;/p&gt; 
&lt;p&gt;Web GUI for youtube-dl (using the &lt;a href="https://github.com/yt-dlp/yt-dlp"&gt;yt-dlp&lt;/a&gt; fork) with playlist support. Allows you to download videos from YouTube and &lt;a href="https://github.com/yt-dlp/yt-dlp/raw/master/supportedsites.md"&gt;dozens of other sites&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/alexta69/metube/raw/master/screenshot.gif" alt="screenshot1" /&gt;&lt;/p&gt; 
&lt;h2&gt;üê≥ Run using Docker&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d -p 8081:8081 -v /path/to/downloads:/downloads ghcr.io/alexta69/metube
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üê≥ Run using docker-compose&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  metube:
    image: ghcr.io/alexta69/metube
    container_name: metube
    restart: unless-stopped
    ports:
      - "8081:8081"
    volumes:
      - /path/to/downloads:/downloads
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;‚öôÔ∏è Configuration via environment variables&lt;/h2&gt; 
&lt;p&gt;Certain values can be set via environment variables, using the &lt;code&gt;-e&lt;/code&gt; parameter on the docker command line, or the &lt;code&gt;environment:&lt;/code&gt; section in docker-compose.&lt;/p&gt; 
&lt;h3&gt;‚¨áÔ∏è Download Behavior&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;DOWNLOAD_MODE&lt;/strong&gt;: This flag controls how downloads are scheduled and executed. Options are &lt;code&gt;sequential&lt;/code&gt;, &lt;code&gt;concurrent&lt;/code&gt;, and &lt;code&gt;limited&lt;/code&gt;. Defaults to &lt;code&gt;limited&lt;/code&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;sequential&lt;/code&gt;: Downloads are processed one at a time. A new download won't start until the previous one has finished. This mode is useful for conserving system resources or ensuring downloads occur in strict order.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;concurrent&lt;/code&gt;: Downloads are started immediately as they are added, with no built-in limit on how many run simultaneously. This mode may overwhelm your system if too many downloads start at once.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limited&lt;/code&gt;: Downloads are started concurrently but are capped by a concurrency limit. In this mode, a semaphore is used so that at most a fixed number of downloads run at any given time.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MAX_CONCURRENT_DOWNLOADS&lt;/strong&gt;: This flag is used only when &lt;code&gt;DOWNLOAD_MODE&lt;/code&gt; is set to &lt;code&gt;limited&lt;/code&gt;.&lt;br /&gt; It specifies the maximum number of simultaneous downloads allowed. For example, if set to &lt;code&gt;5&lt;/code&gt;, then at most five downloads will run concurrently, and any additional downloads will wait until one of the active downloads completes. Defaults to &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DELETE_FILE_ON_TRASHCAN&lt;/strong&gt;: if &lt;code&gt;true&lt;/code&gt;, downloaded files are deleted on the server, when they are trashed from the "Completed" section of the UI. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DEFAULT_OPTION_PLAYLIST_STRICT_MODE&lt;/strong&gt;: if &lt;code&gt;true&lt;/code&gt;, the "Strict Playlist mode" switch will be enabled by default. In this mode the playlists will be downloaded only if the URL strictly points to a playlist. URLs to videos inside a playlist will be treated same as direct video URL. Defaults to &lt;code&gt;false&lt;/code&gt; .&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DEFAULT_OPTION_PLAYLIST_ITEM_LIMIT&lt;/strong&gt;: Maximum number of playlist items that can be downloaded. Defaults to &lt;code&gt;0&lt;/code&gt; (no limit).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üìÅ Storage &amp;amp; Directories&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;DOWNLOAD_DIR&lt;/strong&gt;: Path to where the downloads will be saved. Defaults to &lt;code&gt;/downloads&lt;/code&gt; in the Docker image, and &lt;code&gt;.&lt;/code&gt; otherwise.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AUDIO_DOWNLOAD_DIR&lt;/strong&gt;: Path to where audio-only downloads will be saved, if you wish to separate them from the video downloads. Defaults to the value of &lt;code&gt;DOWNLOAD_DIR&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CUSTOM_DIRS&lt;/strong&gt;: Whether to enable downloading videos into custom directories within the &lt;strong&gt;DOWNLOAD_DIR&lt;/strong&gt; (or &lt;strong&gt;AUDIO_DOWNLOAD_DIR&lt;/strong&gt;). When enabled, a dropdown appears next to the Add button to specify the download directory. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CREATE_CUSTOM_DIRS&lt;/strong&gt;: Whether to support automatically creating directories within the &lt;strong&gt;DOWNLOAD_DIR&lt;/strong&gt; (or &lt;strong&gt;AUDIO_DOWNLOAD_DIR&lt;/strong&gt;) if they do not exist. When enabled, the download directory selector supports free-text input, and the specified directory will be created recursively. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CUSTOM_DIRS_EXCLUDE_REGEX&lt;/strong&gt;: Regular expression to exclude some custom directories from the dropdown. Empty regex disables exclusion. Defaults to &lt;code&gt;(^|/)[.@].*$&lt;/code&gt;, which means directories starting with &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;@&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DOWNLOAD_DIRS_INDEXABLE&lt;/strong&gt;: If &lt;code&gt;true&lt;/code&gt;, the download directories (&lt;strong&gt;DOWNLOAD_DIR&lt;/strong&gt; and &lt;strong&gt;AUDIO_DOWNLOAD_DIR&lt;/strong&gt;) are indexable on the web server. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;STATE_DIR&lt;/strong&gt;: Path to where the queue persistence files will be saved. Defaults to &lt;code&gt;/downloads/.metube&lt;/code&gt; in the Docker image, and &lt;code&gt;.&lt;/code&gt; otherwise.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;TEMP_DIR&lt;/strong&gt;: Path where intermediary download files will be saved. Defaults to &lt;code&gt;/downloads&lt;/code&gt; in the Docker image, and &lt;code&gt;.&lt;/code&gt; otherwise. 
  &lt;ul&gt; 
   &lt;li&gt;Set this to an SSD or RAM filesystem (e.g., &lt;code&gt;tmpfs&lt;/code&gt;) for better performance.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: Using a RAM filesystem may prevent downloads from being resumed.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üìù File Naming &amp;amp; yt-dlp&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;OUTPUT_TEMPLATE&lt;/strong&gt;: The template for the filenames of the downloaded videos, formatted according to &lt;a href="https://github.com/yt-dlp/yt-dlp/raw/master/README.md#output-template"&gt;this spec&lt;/a&gt;. Defaults to &lt;code&gt;%(title)s.%(ext)s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OUTPUT_TEMPLATE_CHAPTER&lt;/strong&gt;: The template for the filenames of the downloaded videos when split into chapters via postprocessors. Defaults to &lt;code&gt;%(title)s - %(section_number)s %(section_title)s.%(ext)s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OUTPUT_TEMPLATE_PLAYLIST&lt;/strong&gt;: The template for the filenames of the downloaded videos when downloaded as a playlist. Defaults to &lt;code&gt;%(playlist_title)s/%(title)s.%(ext)s&lt;/code&gt;. When empty, then &lt;code&gt;OUTPUT_TEMPLATE&lt;/code&gt; is used.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;YTDL_OPTIONS&lt;/strong&gt;: Additional options to pass to yt-dlp in JSON format. &lt;a href="https://github.com/yt-dlp/yt-dlp/raw/master/yt_dlp/YoutubeDL.py#L222"&gt;See available options here&lt;/a&gt;. They roughly correspond to command-line options, though some do not have exact equivalents here. For example, &lt;code&gt;--recode-video&lt;/code&gt; has to be specified via &lt;code&gt;postprocessors&lt;/code&gt;. Also note that dashes are replaced with underscores. You may find &lt;a href="https://github.com/yt-dlp/yt-dlp/raw/master/devscripts/cli_to_api.py"&gt;this script&lt;/a&gt; helpful for converting from command-line options to &lt;code&gt;YTDL_OPTIONS&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;YTDL_OPTIONS_FILE&lt;/strong&gt;: A path to a JSON file that will be loaded and used for populating &lt;code&gt;YTDL_OPTIONS&lt;/code&gt; above. Please note that if both &lt;code&gt;YTDL_OPTIONS_FILE&lt;/code&gt; and &lt;code&gt;YTDL_OPTIONS&lt;/code&gt; are specified, the options in &lt;code&gt;YTDL_OPTIONS&lt;/code&gt; take precedence. The file will be monitored for changes and reloaded automatically when changes are detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üåê Web Server &amp;amp; URLs&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;URL_PREFIX&lt;/strong&gt;: Base path for the web server (for use when hosting behind a reverse proxy). Defaults to &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PUBLIC_HOST_URL&lt;/strong&gt;: Base URL for the download links shown in the UI for completed files. By default, MeTube serves them under its own URL. If your download directory is accessible on another URL and you want the download links to be based there, use this variable to set it.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PUBLIC_HOST_AUDIO_URL&lt;/strong&gt;: Same as PUBLIC_HOST_URL but for audio downloads.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;HTTPS&lt;/strong&gt;: Use &lt;code&gt;https&lt;/code&gt; instead of &lt;code&gt;http&lt;/code&gt; (&lt;strong&gt;CERTFILE&lt;/strong&gt; and &lt;strong&gt;KEYFILE&lt;/strong&gt; required). Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;CERTFILE&lt;/strong&gt;: HTTPS certificate file path.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;KEYFILE&lt;/strong&gt;: HTTPS key file path.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ROBOTS_TXT&lt;/strong&gt;: A path to a &lt;code&gt;robots.txt&lt;/code&gt; file mounted in the container.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üè† Basic Setup&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;UID&lt;/strong&gt;: User under which MeTube will run. Defaults to &lt;code&gt;1000&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GID&lt;/strong&gt;: Group under which MeTube will run. Defaults to &lt;code&gt;1000&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;UMASK&lt;/strong&gt;: Umask value used by MeTube. Defaults to &lt;code&gt;022&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DEFAULT_THEME&lt;/strong&gt;: Default theme to use for the UI, can be set to &lt;code&gt;light&lt;/code&gt;, &lt;code&gt;dark&lt;/code&gt;, or &lt;code&gt;auto&lt;/code&gt;. Defaults to &lt;code&gt;auto&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LOGLEVEL&lt;/strong&gt;: Log level, can be set to &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;CRITICAL&lt;/code&gt;, or &lt;code&gt;NONE&lt;/code&gt;. Defaults to &lt;code&gt;INFO&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ENABLE_ACCESSLOG&lt;/strong&gt;: Whether to enable access log. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The project's Wiki contains examples of useful configurations contributed by users of MeTube:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexta69/metube/wiki/YTDL_OPTIONS-Cookbook"&gt;YTDL_OPTIONS Cookbook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alexta69/metube/wiki/OUTPUT_TEMPLATE-Cookbook"&gt;OUTPUT_TEMPLATE Cookbook&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üç™ Using browser cookies&lt;/h2&gt; 
&lt;p&gt;In case you need to use your browser's cookies with MeTube, for example to download restricted or private videos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Add the following to your docker-compose.yml:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;    volumes:
      - /path/to/cookies:/cookies
    environment:
      - YTDL_OPTIONS={"cookiefile":"/cookies/cookies.txt"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install in your browser an extension to extract cookies: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/export-cookies-txt/"&gt;Firefox&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/get-cookiestxt-locally/cclelndahbckbenkjhflpdbgdldlbecc"&gt;Chrome&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Extract the cookies you need with the extension and rename the file &lt;code&gt;cookies.txt&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Drop the file in the folder you configured in the docker-compose.yml above&lt;/li&gt; 
 &lt;li&gt;Restart the container&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üîå Browser extensions&lt;/h2&gt; 
&lt;p&gt;Browser extensions allow right-clicking videos and sending them directly to MeTube. Please note that if you're on an HTTPS page, your MeTube instance must be behind an HTTPS reverse proxy (see below) for the extensions to work.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Chrome:&lt;/strong&gt; contributed by &lt;a href="https://github.com/rpsl"&gt;Rpsl&lt;/a&gt;. You can install it from &lt;a href="https://chrome.google.com/webstore/detail/metube-downloader/fbmkmdnlhacefjljljlbhkodfmfkijdh"&gt;Google Chrome Webstore&lt;/a&gt; or use developer mode and install &lt;a href="https://github.com/Rpsl/metube-browser-extension"&gt;from sources&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Firefox:&lt;/strong&gt; contributed by &lt;a href="https://github.com/nanocortex"&gt;nanocortex&lt;/a&gt;. You can install it from &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/metube-downloader"&gt;Firefox Addons&lt;/a&gt; or get sources from &lt;a href="https://github.com/nanocortex/metube-firefox-addon"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üì± iOS Shortcut&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/rithask"&gt;rithask&lt;/a&gt; created an iOS shortcut to send URLs to MeTube from Safari. Enter the MeTube instance address when prompted which will be saved for later use. You can run the shortcut from Safari‚Äôs share menu. The shortcut can be downloaded from &lt;a href="https://www.icloud.com/shortcuts/66627a9f334c467baabdb2769763a1a6"&gt;this iCloud link&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üì± iOS Compatibility&lt;/h2&gt; 
&lt;p&gt;iOS has strict requirements for video files, requiring h264 or h265 video codec and aac audio codec in MP4 container. This can sometimes be a lower quality than the best quality available. To accommodate iOS requirements, when downloading a MP4 format you can choose "Best (iOS)" to get the best quality formats as compatible as possible with iOS requirements.&lt;/p&gt; 
&lt;p&gt;To force all downloads to be converted to an iOS-compatible codec, insert this as an environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;  environment:
    - 'YTDL_OPTIONS={"format": "best", "exec": "ffmpeg -i %(filepath)q -c:v libx264 -c:a aac %(filepath)q.h264.mp4"}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üîñ Bookmarklet&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/kushfest"&gt;kushfest&lt;/a&gt; has created a Chrome bookmarklet for sending the currently open webpage to MeTube. Please note that if you're on an HTTPS page, your MeTube instance must be configured with &lt;code&gt;HTTPS&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt; in the environment, or be behind an HTTPS reverse proxy (see below) for the bookmarklet to work.&lt;/p&gt; 
&lt;p&gt;GitHub doesn't allow embedding JavaScript as a link, so the bookmarklet has to be created manually by copying the following code to a new bookmark you create on your bookmarks bar. Change the hostname in the URL below to point to your MeTube instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;javascript:!function(){xhr=new XMLHttpRequest();xhr.open("POST","https://metube.domain.com/add");xhr.withCredentials=true;xhr.send(JSON.stringify({"url":document.location.href,"quality":"best"}));xhr.onload=function(){if(xhr.status==200){alert("Sent to metube!")}else{alert("Send to metube failed. Check the javascript console for clues.")}}}();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://github.com/shoonya75"&gt;shoonya75&lt;/a&gt; has contributed a Firefox version:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;javascript:(function(){xhr=new XMLHttpRequest();xhr.open("POST","https://metube.domain.com/add");xhr.send(JSON.stringify({"url":document.location.href,"quality":"best"}));xhr.onload=function(){if(xhr.status==200){alert("Sent to metube!")}else{alert("Send to metube failed. Check the javascript console for clues.")}}})();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above bookmarklets use &lt;code&gt;alert()&lt;/code&gt; as a success/failure notification. The following will show a toast message instead:&lt;/p&gt; 
&lt;p&gt;Chrome:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;javascript:!function(){function notify(msg) {var sc = document.scrollingElement.scrollTop; var text = document.createElement('span');text.innerHTML=msg;var ts = text.style;ts.all = 'revert';ts.color = '#000';ts.fontFamily = 'Verdana, sans-serif';ts.fontSize = '15px';ts.backgroundColor = 'white';ts.padding = '15px';ts.border = '1px solid gainsboro';ts.boxShadow = '3px 3px 10px';ts.zIndex = '100';document.body.appendChild(text);ts.position = 'absolute'; ts.top = 50 + sc + 'px'; ts.left = (window.innerWidth / 2)-(text.offsetWidth / 2) + 'px'; setTimeout(function () { text.style.visibility = "hidden"; }, 1500);}xhr=new XMLHttpRequest();xhr.open("POST","https://metube.domain.com/add");xhr.send(JSON.stringify({"url":document.location.href,"quality":"best"}));xhr.onload=function() { if(xhr.status==200){notify("Sent to metube!")}else {notify("Send to metube failed. Check the javascript console for clues.")}}}();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Firefox:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-javascript"&gt;javascript:(function(){function notify(msg) {var sc = document.scrollingElement.scrollTop; var text = document.createElement('span');text.innerHTML=msg;var ts = text.style;ts.all = 'revert';ts.color = '#000';ts.fontFamily = 'Verdana, sans-serif';ts.fontSize = '15px';ts.backgroundColor = 'white';ts.padding = '15px';ts.border = '1px solid gainsboro';ts.boxShadow = '3px 3px 10px';ts.zIndex = '100';document.body.appendChild(text);ts.position = 'absolute'; ts.top = 50 + sc + 'px'; ts.left = (window.innerWidth / 2)-(text.offsetWidth / 2) + 'px'; setTimeout(function () { text.style.visibility = "hidden"; }, 1500);}xhr=new XMLHttpRequest();xhr.open("POST","https://metube.domain.com/add");xhr.send(JSON.stringify({"url":document.location.href,"quality":"best"}));xhr.onload=function() { if(xhr.status==200){notify("Sent to metube!")}else {notify("Send to metube failed. Check the javascript console for clues.")}}})();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;‚ö° Raycast extension&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/dotvhs"&gt;dotvhs&lt;/a&gt; has created an &lt;a href="https://www.raycast.com/dot/metube"&gt;extension for Raycast&lt;/a&gt; that allows adding videos to MeTube directly from Raycast.&lt;/p&gt; 
&lt;h2&gt;üîí HTTPS support, and running behind a reverse proxy&lt;/h2&gt; 
&lt;p&gt;It's possible to configure MeTube to listen in HTTPS mode. &lt;code&gt;docker-compose&lt;/code&gt; example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  metube:
    image: ghcr.io/alexta69/metube
    container_name: metube
    restart: unless-stopped
    ports:
      - "8081:8081"
    volumes:
      - /path/to/downloads:/downloads
      - /path/to/ssl/crt:/ssl/crt.pem
      - /path/to/ssl/key:/ssl/key.pem
    environment:
      - HTTPS=true
      - CERTFILE=/ssl/crt.pem
      - KEYFILE=/ssl/key.pem
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It's also possible to run MeTube behind a reverse proxy, in order to support authentication. HTTPS support can also be added in this way.&lt;/p&gt; 
&lt;p&gt;When running behind a reverse proxy which remaps the URL (i.e. serves MeTube under a subdirectory and not under root), don't forget to set the URL_PREFIX environment variable to the correct value.&lt;/p&gt; 
&lt;p&gt;If you're using the &lt;a href="https://docs.linuxserver.io/general/swag"&gt;linuxserver/swag&lt;/a&gt; image for your reverse proxying needs (which I can heartily recommend), it already includes ready snippets for proxying MeTube both in &lt;a href="https://github.com/linuxserver/reverse-proxy-confs/raw/master/metube.subfolder.conf.sample"&gt;subfolder&lt;/a&gt; and &lt;a href="https://github.com/linuxserver/reverse-proxy-confs/raw/master/metube.subdomain.conf.sample"&gt;subdomain&lt;/a&gt; modes under the &lt;code&gt;nginx/proxy-confs&lt;/code&gt; directory in the configuration volume. It also includes Authelia which can be used for authentication.&lt;/p&gt; 
&lt;h3&gt;üåê NGINX&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-nginx"&gt;location /metube/ {
        proxy_pass http://metube:8081;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: the extra &lt;code&gt;proxy_set_header&lt;/code&gt; directives are there to make WebSocket work.&lt;/p&gt; 
&lt;h3&gt;üåê Apache&lt;/h3&gt; 
&lt;p&gt;Contributed by &lt;a href="https://github.com/PIE-yt"&gt;PIE-yt&lt;/a&gt;. Source &lt;a href="https://gist.github.com/PIE-yt/29e7116588379032427f5bd446b2cac4"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-apache"&gt;# For putting in your Apache sites site.conf
# Serves MeTube under a /metube/ subdir (http://yourdomain.com/metube/)
&amp;lt;Location /metube/&amp;gt;
    ProxyPass http://localhost:8081/ retry=0 timeout=30
    ProxyPassReverse http://localhost:8081/
&amp;lt;/Location&amp;gt;

&amp;lt;Location /metube/socket.io&amp;gt;
    RewriteEngine On
    RewriteCond %{QUERY_STRING} transport=websocket    [NC]
    RewriteRule /(.*) ws://localhost:8081/socket.io/$1 [P,L]
    ProxyPass http://localhost:8081/socket.io retry=0 timeout=30
    ProxyPassReverse http://localhost:8081/socket.io
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;üåê Caddy&lt;/h3&gt; 
&lt;p&gt;The following example Caddyfile gets a reverse proxy going behind &lt;a href="https://caddyserver.com"&gt;caddy&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-caddyfile"&gt;example.com {
  route /metube/* {
    uri strip_prefix metube
    reverse_proxy metube:8081
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;üîÑ Updating yt-dlp&lt;/h2&gt; 
&lt;p&gt;The engine which powers the actual video downloads in MeTube is &lt;a href="https://github.com/yt-dlp/yt-dlp"&gt;yt-dlp&lt;/a&gt;. Since video sites regularly change their layouts, frequent updates of yt-dlp are required to keep up.&lt;/p&gt; 
&lt;p&gt;There's an automatic nightly build of MeTube which looks for a new version of yt-dlp, and if one exists, the build pulls it and publishes an updated docker image. Therefore, in order to keep up with the changes, it's recommended that you update your MeTube container regularly with the latest image.&lt;/p&gt; 
&lt;p&gt;I recommend installing and setting up &lt;a href="https://github.com/containrrr/watchtower"&gt;watchtower&lt;/a&gt; for this purpose.&lt;/p&gt; 
&lt;h2&gt;üîß Troubleshooting and submitting issues&lt;/h2&gt; 
&lt;p&gt;Before asking a question or submitting an issue for MeTube, please remember that MeTube is only a UI for &lt;a href="https://github.com/yt-dlp/yt-dlp"&gt;yt-dlp&lt;/a&gt;. Any issues you might be experiencing with authentication to video websites, postprocessing, permissions, other &lt;code&gt;YTDL_OPTIONS&lt;/code&gt; configurations which seem not to work, or anything else that concerns the workings of the underlying yt-dlp library, need not be opened on the MeTube project. In order to debug and troubleshoot them, it's advised to try using the yt-dlp binary directly first, bypassing the UI, and once that is working, importing the options that worked for you into &lt;code&gt;YTDL_OPTIONS&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In order to test with the yt-dlp command directly, you can either download it and run it locally, or for a better simulation of its actual conditions, you can run it within the MeTube container itself. Assuming your MeTube container is called &lt;code&gt;metube&lt;/code&gt;, run the following on your Docker host to get a shell inside the container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker exec -ti metube sh
cd /downloads
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once there, you can use the yt-dlp command freely.&lt;/p&gt; 
&lt;h2&gt;üí° Submitting feature requests&lt;/h2&gt; 
&lt;p&gt;MeTube development relies on code contributions by the community. The program as it currently stands fits my own use cases, and is therefore feature-complete as far as I'm concerned. If your use cases are different and require additional features, please feel free to submit PRs that implement those features. It's advisable to create an issue first to discuss the planned implementation, because in an effort to reduce bloat, some PRs may not be accepted. However, note that opening a feature request when you don't intend to implement the feature will rarely result in the request being fulfilled.&lt;/p&gt; 
&lt;h2&gt;üõ†Ô∏è Building and running locally&lt;/h2&gt; 
&lt;p&gt;Make sure you have Node.js and Python 3.13 installed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd metube/ui
# install Angular and build the UI
npm install
node_modules/.bin/ng build
# install python dependencies
cd ..
curl -LsSf https://astral.sh/uv/install.sh | sh
uv sync
# run
uv run python3 app/main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A Docker image can be built locally (it will build the UI too):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker build -t metube .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that if you're running the server in VSCode, your downloads will go to your user's Downloads folder (this is configured via the environment in &lt;code&gt;.vscode/launch.json&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>