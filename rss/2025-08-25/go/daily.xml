<rss version="2.0">
  <channel>
    <title>GitHub Go Daily Trending</title>
    <description>Daily Trending of Go in GitHub</description>
    <pubDate>Sun, 24 Aug 2025 01:35:26 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>aquasecurity/trivy</title>
      <link>https://github.com/aquasecurity/trivy</link>
      <description>&lt;p&gt;Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/logo.png" width="200" /&gt; 
 &lt;p&gt;&lt;a href="https://github.com/aquasecurity/trivy/releases"&gt;&lt;img src="https://img.shields.io/github/release/aquasecurity/trivy.svg?logo=github" alt="GitHub Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/actions/workflows/test.yaml"&gt;&lt;img src="https://github.com/aquasecurity/trivy/actions/workflows/test.yaml/badge.svg?sanitize=true" alt="Test" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/aquasecurity/trivy"&gt;&lt;img src="https://goreportcard.com/badge/github.com/aquasecurity/trivy" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" alt="License: Apache-2.0" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/aquasecurity/trivy/total?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/docker/pulls/aquasec/trivy?logo=docker&amp;amp;label=docker%20pulls%20%2F%20trivy" alt="Docker Pulls" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://trivy.dev/latest/docs/"&gt;📖 Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Trivy (&lt;a href="https://raw.githubusercontent.com/aquasecurity/trivy/main/#how-to-pronounce-the-name-trivy"&gt;pronunciation&lt;/a&gt;) is a comprehensive and versatile security scanner. Trivy has &lt;em&gt;scanners&lt;/em&gt; that look for security issues, and &lt;em&gt;targets&lt;/em&gt; where it can find those issues.&lt;/p&gt; 
&lt;p&gt;Targets (what Trivy can scan):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Container Image&lt;/li&gt; 
 &lt;li&gt;Filesystem&lt;/li&gt; 
 &lt;li&gt;Git Repository (remote)&lt;/li&gt; 
 &lt;li&gt;Virtual Machine Image&lt;/li&gt; 
 &lt;li&gt;Kubernetes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Scanners (what Trivy can find there):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OS packages and software dependencies in use (SBOM)&lt;/li&gt; 
 &lt;li&gt;Known vulnerabilities (CVEs)&lt;/li&gt; 
 &lt;li&gt;IaC issues and misconfigurations&lt;/li&gt; 
 &lt;li&gt;Sensitive information and secrets&lt;/li&gt; 
 &lt;li&gt;Software licenses&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Trivy supports most popular programming languages, operating systems, and platforms. For a complete list, see the &lt;a href="https://trivy.dev/latest/docs/coverage/"&gt;Scanning Coverage&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;To learn more, go to the &lt;a href="https://trivy.dev"&gt;Trivy homepage&lt;/a&gt; for feature highlights, or to the &lt;a href="https://trivy.dev/latest/docs/"&gt;Documentation site&lt;/a&gt; for detailed information.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Get Trivy&lt;/h3&gt; 
&lt;p&gt;Trivy is available in most common distribution channels. The full list of installation options is available in the &lt;a href="https://trivy.dev/latest/getting-started/installation/"&gt;Installation&lt;/a&gt; page. Here are a few popular examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;brew install trivy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;docker run aquasec/trivy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Download binary from &lt;a href="https://github.com/aquasecurity/trivy/releases/latest/"&gt;https://github.com/aquasecurity/trivy/releases/latest/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://trivy.dev/latest/getting-started/installation/"&gt;Installation&lt;/a&gt; for more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Trivy is integrated with many popular platforms and applications. The complete list of integrations is available in the &lt;a href="https://trivy.dev/latest/ecosystem/"&gt;Ecosystem&lt;/a&gt; page. Here are a few popular examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-action"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-operator"&gt;Kubernetes operator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-vscode-extension"&gt;VS Code plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://trivy.dev/latest/ecosystem/"&gt;Ecosystem&lt;/a&gt; for more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Canary builds&lt;/h3&gt; 
&lt;p&gt;There are canary builds (&lt;a href="https://hub.docker.com/r/aquasec/trivy/tags?page=1&amp;amp;name=canary"&gt;Docker Hub&lt;/a&gt;, &lt;a href="https://github.com/aquasecurity/trivy/pkgs/container/trivy/75776514?tag=canary"&gt;GitHub&lt;/a&gt;, &lt;a href="https://gallery.ecr.aws/aquasecurity/trivy#canary"&gt;ECR&lt;/a&gt; images and &lt;a href="https://github.com/aquasecurity/trivy/actions/workflows/canary.yaml"&gt;binaries&lt;/a&gt;) as generated every push to main branch.&lt;/p&gt; 
&lt;p&gt;Please be aware: canary builds might have critical bugs, it's not recommended for use in production.&lt;/p&gt; 
&lt;h3&gt;General usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy &amp;lt;target&amp;gt; [--scanners &amp;lt;scanner1,scanner2&amp;gt;] &amp;lt;subject&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy image python:3.4-alpine
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/1161307/171013513-95f18734-233d-45d3-aaf5-d6aec687db0e.mov"&gt;https://user-images.githubusercontent.com/1161307/171013513-95f18734-233d-45d3-aaf5-d6aec687db0e.mov&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy fs --scanners vuln,secret,misconfig myproject/
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/1161307/171013917-b1f37810-f434-465c-b01a-22de036bd9b3.mov"&gt;https://user-images.githubusercontent.com/1161307/171013917-b1f37810-f434-465c-b01a-22de036bd9b3.mov&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy k8s --report summary cluster
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/trivy-k8s.png" alt="k8s summary" /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How to pronounce the name "Trivy"?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;tri&lt;/code&gt; is pronounced like &lt;strong&gt;tri&lt;/strong&gt;gger, &lt;code&gt;vy&lt;/code&gt; is pronounced like en&lt;strong&gt;vy&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Want more? Check out Aqua&lt;/h2&gt; 
&lt;p&gt;If you liked Trivy, you will love Aqua which builds on top of Trivy to provide even more enhanced capabilities for a complete security management offering.&lt;br /&gt; You can find a high level comparison table specific to Trivy users &lt;a href="https://trivy.dev/latest/commercial/compare/"&gt;here&lt;/a&gt;. In addition check out the &lt;a href="https://aquasec.com"&gt;https://aquasec.com&lt;/a&gt; website for more information about our products and services. If you'd like to contact Aqua or request a demo, please use this form: &lt;a href="https://www.aquasec.com/demo"&gt;https://www.aquasec.com/demo&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Trivy is an &lt;a href="https://aquasec.com"&gt;Aqua Security&lt;/a&gt; open source project.&lt;br /&gt; Learn about our open source work and portfolio &lt;a href="https://www.aquasec.com/products/open-source-projects/"&gt;here&lt;/a&gt;.&lt;br /&gt; Contact us about any matter by opening a GitHub Discussion &lt;a href="https://github.com/aquasecurity/trivy/discussions"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please ensure to abide by our &lt;a href="https://github.com/aquasecurity/community/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; during all interactions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golangci/golangci-lint</title>
      <link>https://github.com/golangci/golangci-lint</link>
      <description>&lt;p&gt;Fast linters runner for Go&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="golangci-lint logo" src="https://raw.githubusercontent.com/golangci/golangci-lint/main/assets/go.png" height="150" /&gt; &lt;/p&gt;
&lt;h3 align="center"&gt;golangci-lint&lt;/h3&gt; 
&lt;p align="center"&gt;Fast linters runner for Go&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;code&gt;golangci-lint&lt;/code&gt; is a fast Go linters runner.&lt;/p&gt; 
&lt;p&gt;It runs linters in parallel, uses caching, supports YAML configuration, integrates with all major IDEs, and includes over a hundred linters.&lt;/p&gt; 
&lt;h2&gt;Install &lt;code&gt;golangci-lint&lt;/code&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://golangci-lint.run/docs/welcome/install/#local-installation"&gt;On my machine&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://golangci-lint.run/docs/welcome/install/#ci-installation"&gt;On CI/CD systems&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Documentation is hosted at &lt;a href="https://golangci-lint.run"&gt;https://golangci-lint.run&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Social Networks&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://gophers.slack.com/archives/CS0TBRKPC"&gt;&lt;img src="https://img.shields.io/badge/Slack-4285F4?logo=slack&amp;amp;logoColor=white" alt="Join Slack" /&gt;&lt;/a&gt; &lt;a href="https://fosstodon.org/@golangcilint"&gt;&lt;img src="https://img.shields.io/badge/Mastodon-6364FF?logo=mastodon&amp;amp;logoColor=white" alt="Follow on Mastodon" /&gt;&lt;/a&gt; &lt;a href="https://bsky.app/profile/golangci-lint.run"&gt;&lt;img src="https://img.shields.io/badge/Bluesky-0a7aff?logo=bluesky&amp;amp;logoColor=white" alt="Follow on Bluesky" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/golangci"&gt;&lt;img src="https://img.shields.io/badge/Twitter-1DA1F2?logo=x&amp;amp;logoColor=white" alt="Follow on Twitter" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support Us&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;golangci-lint&lt;/code&gt; is a free and open-source project built by volunteers.&lt;/p&gt; 
&lt;p&gt;If you value it, consider supporting us, we appreciate it! &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://donate.golangci.org"&gt;&lt;img src="https://img.shields.io/badge/Support-golangci_lint-blue?style=for-the-badge" alt="Golangci-lint" /&gt;&lt;/a&gt; &lt;a href="https://golangci-lint.run/docs/product/thanks/"&gt;&lt;img src="https://img.shields.io/badge/Support-Linter_Authors-blue?style=for-the-badge" alt="Linter Authors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/golangci/golangci-lint/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt; &lt;a href="https://raw.githubusercontent.com/golangci/golangci-lint/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/golangci/golangci-lint" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/golangci/golangci-lint/releases/latest"&gt;&lt;img src="https://img.shields.io/github/release/golangci/golangci-lint.svg?sanitize=true" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/golangci/golangci-lint"&gt;&lt;img src="https://img.shields.io/docker/pulls/golangci/golangci-lint" alt="Docker" /&gt;&lt;/a&gt; &lt;a href="https://somsubhra.github.io/github-release-stats/?username=golangci&amp;amp;repository=golangci-lint"&gt;&lt;img src="https://img.shields.io/github/downloads/golangci/golangci-lint/total.svg?logo=github" alt="GitHub Releases Stats of golangci-lint" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href="https://golangci-lint.run/docs/contributing/"&gt;How to contribute&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://github.com/golangci/golangci-lint/graphs/contributors"&gt; &lt;img src="https://opencollective.com/golangci-lint/contributors.svg?width=890&amp;amp;button=false&amp;amp;skip=golangcidev,CLAassistant,renovate,fossabot,golangcibot,kortschak,golangci-releaser,dependabot%5Bbot%5D" /&gt; &lt;/a&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p float="left"&gt; &lt;a href="https://www.jetbrains.com/go/?utm_source=OSS&amp;amp;utm_medium=referral&amp;amp;utm_campaign=golangci" target="_blank"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="assets/goland-white.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="assets/goland.svg" /&gt; 
   &lt;img alt="The complete IDE crafted for professional Go developers." src="https://raw.githubusercontent.com/golangci/golangci-lint/main/assets/goland.svg?sanitize=true" width="150" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://starchart.cc/golangci/golangci-lint"&gt;&lt;img src="https://starchart.cc/golangci/golangci-lint.svg?variant=adaptive" alt="Stargazers over time" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>databus23/helm-diff</title>
      <link>https://github.com/databus23/helm-diff</link>
      <description>&lt;p&gt;A helm plugin that shows a diff explaining what a helm upgrade would change&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Helm Diff Plugin&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/databus23/helm-diff"&gt;&lt;img src="https://goreportcard.com/badge/github.com/databus23/helm-diff" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/databus23/helm-diff"&gt;&lt;img src="https://godoc.org/github.com/databus23/helm-diff?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://github.com/databus23/helm-diff/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This is a Helm plugin giving you a preview of what a &lt;code&gt;helm upgrade&lt;/code&gt; would change. It basically generates a diff between the latest deployed version of a release and a &lt;code&gt;helm upgrade --debug --dry-run&lt;/code&gt;. This can also be used to compare two revisions/versions of your helm release.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://asciinema.org/a/105326" target="_blank"&gt;&lt;img src="https://asciinema.org/a/105326.png" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;h3&gt;Using Helm plugin manager (&amp;gt; 2.3.x)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;helm plugin install https://github.com/databus23/helm-diff
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pre Helm 2.3.0 Installation&lt;/h3&gt; 
&lt;p&gt;Pick a release tarball from the &lt;a href="https://github.com/databus23/helm-diff/releases"&gt;releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;Unpack the tarball in your helm plugins directory (&lt;code&gt;$(helm home)/plugins&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;E.g.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl -L $TARBALL_URL | tar -C $(helm home)/plugins -xzv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From Source&lt;/h3&gt; 
&lt;h4&gt;Prerequisites&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;GoLang &lt;code&gt;&amp;gt;= 1.21&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Make sure you do not have a version of &lt;code&gt;helm-diff&lt;/code&gt; installed. You can remove it by running &lt;code&gt;helm plugin uninstall diff&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Installation Steps&lt;/h4&gt; 
&lt;p&gt;The first step is to download the repository and enter the directory. You can do this via &lt;code&gt;git clone&lt;/code&gt; or downloading and extracting the release. If you clone via git, remember to checkout the latest tag for the latest release.&lt;/p&gt; 
&lt;p&gt;Next, install the plugin into helm.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make install/helm3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;The Helm Diff Plugin

* Shows a diff explaining what a helm upgrade would change:
    This fetches the currently deployed version of a release
  and compares it to a local chart plus values. This can be
  used to visualize what changes a helm upgrade will perform.

* Shows a diff explaining what had changed between two revisions:
    This fetches previously deployed versions of a release
  and compares them. This can be used to visualize what changes
  were made during revision change.

* Shows a diff explaining what a helm rollback would change:
    This fetches the currently deployed version of a release
  and compares it to the previously deployed version of the release, that you
  want to rollback. This can be used to visualize what changes a
  helm rollback will perform.

Usage:
  diff [flags]
  diff [command]

Available Commands:
  completion  Generate the autocompletion script for the specified shell
  release     Shows diff between release's manifests
  revision    Shows diff between revision's manifests
  rollback    Show a diff explaining what a helm rollback could perform
  upgrade     Show a diff explaining what a helm upgrade would change.
  version     Show version of the helm diff plugin

Flags:
      --allow-unreleased                         enables diffing of releases that are not yet deployed via Helm
  -a, --api-versions stringArray                 Kubernetes api versions used for Capabilities.APIVersions
      --color                                    color output. You can control the value for this flag via HELM_DIFF_COLOR=[true|false]. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
  -C, --context int                              output NUM lines of context around changes (default -1)
      --detailed-exitcode                        return a non-zero exit code when there are changes
      --devel                                    use development versions, too. Equivalent to version '&amp;gt;0.0.0-0'. If --version is set, this is ignored.
      --disable-openapi-validation               disables rendered templates validation against the Kubernetes OpenAPI Schema
      --disable-validation                       disables rendered templates validation against the Kubernetes cluster you are currently pointing to. This is the same validation performed on an install
      --dry-run string[="client"]                --dry-run, --dry-run=client, or --dry-run=true disables cluster access and show diff as if it was install. Implies --install, --reset-values, and --disable-validation. --dry-run=server enables the cluster access with helm-get and the lookup template function.
      --enable-dns                               enable DNS lookups when rendering templates
  -D, --find-renames float32                     Enable rename detection if set to any value greater than 0. If specified, the value denotes the maximum fraction of changed content as lines added + removed compared to total lines in a diff for considering it a rename. Only objects of the same Kind are attempted to be matched
  -h, --help                                     help for diff
      --include-crds                             include CRDs in the diffing
      --include-tests                            enable the diffing of the helm test hooks
      --insecure-skip-tls-verify                 skip tls certificate checks for the chart download
      --install                                  enables diffing of releases that are not yet deployed via Helm (equivalent to --allow-unreleased, added to match "helm upgrade --install" command
      --kube-version string                      Kubernetes version used for Capabilities.KubeVersion
      --kubeconfig string                        This flag is ignored, to allow passing of this top level flag to helm
      --no-color                                 remove colors from the output. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
      --no-hooks                                 disable diffing of hooks
      --normalize-manifests                      normalize manifests before running diff to exclude style differences from the output
      --output string                            Possible values: diff, simple, template, dyff. When set to "template", use the env var HELM_DIFF_TPL to specify the template. (default "diff")
      --post-renderer string                     the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path
      --post-renderer-args stringArray           an argument to the post-renderer (can specify multiple)
      --repo string                              specify the chart repository url to locate the requested chart
      --reset-then-reuse-values                  reset the values to the ones built into the chart, apply the last release's values and merge in any new values. If '--reset-values' or '--reuse-values' is specified, this is ignored
      --reset-values                             reset the values to the ones built into the chart and merge in any new values
      --reuse-values                             reuse the last release's values and merge in any new values. If '--reset-values' is specified, this is ignored
      --set stringArray                          set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --set-file stringArray                     set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)
      --set-json stringArray                     set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)
      --set-literal stringArray                  set STRING literal values on the command line
      --set-string stringArray                   set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --show-secrets                             do not redact secret values in the output
      --show-secrets-decoded                     decode secret values in the output
      --skip-schema-validation                   skip validation of the rendered manifests against the Kubernetes OpenAPI schema
      --strip-trailing-cr                        strip trailing carriage return on input
      --suppress stringArray                     allows suppression of the kinds listed in the diff output (can specify multiple, like '--suppress Deployment --suppress Service')
      --suppress-output-line-regex stringArray   a regex to suppress diff output lines that match
  -q, --suppress-secrets                         suppress secrets in the output
      --take-ownership                           if set, upgrade will ignore the check for helm annotations and take ownership of the existing resources
      --three-way-merge                          use three-way-merge to compute patch and generate diff output
  -f, --values valueFiles                        specify values in a YAML file (can specify multiple) (default [])
      --version string                           specify the exact chart version to use. If this is not specified, the latest version is used

Additional help topcis:
  diff            

Use "diff [command] --help" for more information about a command.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commands:&lt;/h2&gt; 
&lt;h3&gt;upgrade:&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;$ helm diff upgrade -h
Show a diff explaining what a helm upgrade would change.

This fetches the currently deployed version of a release
and compares it to a chart plus values.
This can be used to visualize what changes a helm upgrade will
perform.

Usage:
  diff upgrade [flags] [RELEASE] [CHART]

Examples:
  helm diff upgrade my-release stable/postgresql --values values.yaml

  # Set HELM_DIFF_IGNORE_UNKNOWN_FLAGS=true to ignore unknown flags
  # It's useful when you're using `helm-diff` in a `helm upgrade` wrapper.
  # See https://github.com/databus23/helm-diff/issues/278 for more information.
  HELM_DIFF_IGNORE_UNKNOWN_FLAGS=true helm diff upgrade my-release stable/postgres --wait

  # Set HELM_DIFF_USE_UPGRADE_DRY_RUN=true to
  # use `helm upgrade --dry-run` instead of `helm template` to render manifests from the chart.
  # See https://github.com/databus23/helm-diff/issues/253 for more information.
  HELM_DIFF_USE_UPGRADE_DRY_RUN=true helm diff upgrade my-release datadog/datadog

  # Set HELM_DIFF_THREE_WAY_MERGE=true to
  # enable the three-way-merge on diff.
  # This is equivalent to specifying the --three-way-merge flag.
  # Read the flag usage below for more information on --three-way-merge.
  HELM_DIFF_THREE_WAY_MERGE=true helm diff upgrade my-release datadog/datadog

  # Set HELM_DIFF_NORMALIZE_MANIFESTS=true to
  # normalize the yaml file content when using helm diff.
  # This is equivalent to specifying the --normalize-manifests flag.
  # Read the flag usage below for more information on --normalize-manifests.
  HELM_DIFF_NORMALIZE_MANIFESTS=true helm diff upgrade my-release datadog/datadog

# Set HELM_DIFF_OUTPUT_CONTEXT=n to configure the output context to n lines.
# This is equivalent to specifying the --context flag.
# Read the flag usage below for more information on --context.
HELM_DIFF_OUTPUT_CONTEXT=5 helm diff upgrade my-release datadog/datadog

Flags:
      --allow-unreleased                         enables diffing of releases that are not yet deployed via Helm
  -a, --api-versions stringArray                 Kubernetes api versions used for Capabilities.APIVersions
  -C, --context int                              output NUM lines of context around changes (default -1)
      --detailed-exitcode                        return a non-zero exit code when there are changes
      --devel                                    use development versions, too. Equivalent to version '&amp;gt;0.0.0-0'. If --version is set, this is ignored.
      --disable-openapi-validation               disables rendered templates validation against the Kubernetes OpenAPI Schema
      --disable-validation                       disables rendered templates validation against the Kubernetes cluster you are currently pointing to. This is the same validation performed on an install
      --dry-run string[="client"]                --dry-run, --dry-run=client, or --dry-run=true disables cluster access and show diff as if it was install. Implies --install, --reset-values, and --disable-validation. --dry-run=server enables the cluster access with helm-get and the lookup template function.
      --enable-dns                               enable DNS lookups when rendering templates
  -D, --find-renames float32                     Enable rename detection if set to any value greater than 0. If specified, the value denotes the maximum fraction of changed content as lines added + removed compared to total lines in a diff for considering it a rename. Only objects of the same Kind are attempted to be matched
  -h, --help                                     help for upgrade
      --include-crds                             include CRDs in the diffing
      --include-tests                            enable the diffing of the helm test hooks
      --insecure-skip-tls-verify                 skip tls certificate checks for the chart download
      --install                                  enables diffing of releases that are not yet deployed via Helm (equivalent to --allow-unreleased, added to match "helm upgrade --install" command
      --kube-version string                      Kubernetes version used for Capabilities.KubeVersion
      --kubeconfig string                        This flag is ignored, to allow passing of this top level flag to helm
      --no-hooks                                 disable diffing of hooks
      --normalize-manifests                      normalize manifests before running diff to exclude style differences from the output
      --output string                            Possible values: diff, simple, template, dyff. When set to "template", use the env var HELM_DIFF_TPL to specify the template. (default "diff")
      --post-renderer string                     the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path
      --post-renderer-args stringArray           an argument to the post-renderer (can specify multiple)
      --repo string                              specify the chart repository url to locate the requested chart
      --reset-then-reuse-values                  reset the values to the ones built into the chart, apply the last release's values and merge in any new values. If '--reset-values' or '--reuse-values' is specified, this is ignored
      --reset-values                             reset the values to the ones built into the chart and merge in any new values
      --reuse-values                             reuse the last release's values and merge in any new values. If '--reset-values' is specified, this is ignored
      --set stringArray                          set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --set-file stringArray                     set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)
      --set-json stringArray                     set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)
      --set-literal stringArray                  set STRING literal values on the command line
      --set-string stringArray                   set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --show-secrets                             do not redact secret values in the output
      --show-secrets-decoded                     decode secret values in the output
      --skip-schema-validation                   skip validation of the rendered manifests against the Kubernetes OpenAPI schema
      --strip-trailing-cr                        strip trailing carriage return on input
      --suppress stringArray                     allows suppression of the kinds listed in the diff output (can specify multiple, like '--suppress Deployment --suppress Service')
      --suppress-output-line-regex stringArray   a regex to suppress diff output lines that match
  -q, --suppress-secrets                         suppress secrets in the output
      --take-ownership                           if set, upgrade will ignore the check for helm annotations and take ownership of the existing resources
      --three-way-merge                          use three-way-merge to compute patch and generate diff output
  -f, --values valueFiles                        specify values in a YAML file (can specify multiple) (default [])
      --version string                           specify the exact chart version to use. If this is not specified, the latest version is used

Global Flags:
      --color      color output. You can control the value for this flag via HELM_DIFF_COLOR=[true|false]. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
      --no-color   remove colors from the output. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;release:&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;$ helm diff release -h

This command compares the manifests details of a different releases created from the same chart.
The release name may be specified using namespace/release syntax.

It can be used to compare the manifests of

 - release1 with release2
        $ helm diff release [flags] release1 release2
   Example:
        $ helm diff release my-prod my-stage
        $ helm diff release prod/my-prod stage/my-stage

Usage:
  diff release [flags] RELEASE release1 [release2]

Flags:
  -C, --context int                              output NUM lines of context around changes (default -1)
      --detailed-exitcode                        return a non-zero exit code when there are changes
  -D, --find-renames float32                     Enable rename detection if set to any value greater than 0. If specified, the value denotes the maximum fraction of changed content as lines added + removed compared to total lines in a diff for considering it a rename. Only objects of the same Kind are attempted to be matched
  -h, --help                                     help for release
      --include-tests                            enable the diffing of the helm test hooks
      --normalize-manifests                      normalize manifests before running diff to exclude style differences from the output
      --output string                            Possible values: diff, simple, template, dyff. When set to "template", use the env var HELM_DIFF_TPL to specify the template. (default "diff")
      --show-secrets                             do not redact secret values in the output
      --strip-trailing-cr                        strip trailing carriage return on input
      --suppress stringArray                     allows suppression of the kinds listed in the diff output (can specify multiple, like '--suppress Deployment --suppress Service')
      --suppress-output-line-regex stringArray   a regex to suppress diff output lines that match
  -q, --suppress-secrets                         suppress secrets in the output

Global Flags:
      --color      color output. You can control the value for this flag via HELM_DIFF_COLOR=[true|false]. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
      --no-color   remove colors from the output. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;revision:&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;$ helm diff revision -h

This command compares the manifests details of a named release.

It can be used to compare the manifests of

 - latest REVISION with specified REVISION
        $ helm diff revision [flags] RELEASE REVISION1
   Example:
        $ helm diff revision my-release 2

 - REVISION1 with REVISION2
        $ helm diff revision [flags] RELEASE REVISION1 REVISION2
   Example:
        $ helm diff revision my-release 2 3

Usage:
  diff revision [flags] RELEASE REVISION1 [REVISION2]

Flags:
  -C, --context int                              output NUM lines of context around changes (default -1)
      --show-secrets-decoded                     decode secret values in the output
      --detailed-exitcode                        return a non-zero exit code when there are changes
  -D, --find-renames float32                     Enable rename detection if set to any value greater than 0. If specified, the value denotes the maximum fraction of changed content as lines added + removed compared to total lines in a diff for considering it a rename. Only objects of the same Kind are attempted to be matched
  -h, --help                                     help for revision
      --include-tests                            enable the diffing of the helm test hooks
      --normalize-manifests                      normalize manifests before running diff to exclude style differences from the output
      --output string                            Possible values: diff, simple, template, dyff. When set to "template", use the env var HELM_DIFF_TPL to specify the template. (default "diff")
      --show-secrets                             do not redact secret values in the output
      --show-secrets-decoded                     decode secret values in the output
      --strip-trailing-cr                        strip trailing carriage return on input
      --suppress stringArray                     allows suppression of the kinds listed in the diff output (can specify multiple, like '--suppress Deployment --suppress Service')
      --suppress-output-line-regex stringArray   a regex to suppress diff output lines that match
  -q, --suppress-secrets                         suppress secrets in the output

Global Flags:
      --color      color output. You can control the value for this flag via HELM_DIFF_COLOR=[true|false]. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
      --no-color   remove colors from the output. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;rollback:&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;$ helm diff rollback -h

This command compares the latest manifest details of a named release
with specific revision values to rollback.

It forecasts/visualizes changes, that a helm rollback could perform.

Usage:
  diff rollback [flags] [RELEASE] [REVISION]

Examples:
  helm diff rollback my-release 2

Flags:
  -C, --context int                              output NUM lines of context around changes (default -1)
      --detailed-exitcode                        return a non-zero exit code when there are changes
  -D, --find-renames float32                     Enable rename detection if set to any value greater than 0. If specified, the value denotes the maximum fraction of changed content as lines added + removed compared to total lines in a diff for considering it a rename. Only objects of the same Kind are attempted to be matched
  -h, --help                                     help for rollback
      --include-tests                            enable the diffing of the helm test hooks
      --normalize-manifests                      normalize manifests before running diff to exclude style differences from the output
      --output string                            Possible values: diff, simple, template, dyff. When set to "template", use the env var HELM_DIFF_TPL to specify the template. (default "diff")
      --show-secrets                             do not redact secret values in the output
      --show-secrets-decoded                     decode secret values in the output
      --strip-trailing-cr                        strip trailing carriage return on input
      --suppress stringArray                     allows suppression of the kinds listed in the diff output (can specify multiple, like '--suppress Deployment --suppress Service')
      --suppress-output-line-regex stringArray   a regex to suppress diff output lines that match
  -q, --suppress-secrets                         suppress secrets in the output

Global Flags:
      --color      color output. You can control the value for this flag via HELM_DIFF_COLOR=[true|false]. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
      --no-color   remove colors from the output. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not "dumb"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;Clone the repository into your &lt;code&gt;$GOPATH&lt;/code&gt; and then build it.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ mkdir -p $GOPATH/src/github.com/databus23/
$ cd $GOPATH/src/github.com/databus23/
$ git clone https://github.com/databus23/helm-diff.git
$ cd helm-diff
$ make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above will install this plugin into your &lt;code&gt;$HELM_HOME/plugins&lt;/code&gt; directory.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;You need to have &lt;a href="http://golang.org"&gt;Go&lt;/a&gt; installed. Make sure to set &lt;code&gt;$GOPATH&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Running Tests&lt;/h3&gt; 
&lt;p&gt;Automated tests are implemented with &lt;a href="https://golang.org/pkg/testing/"&gt;&lt;em&gt;testing&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To run all tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go test -v ./...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Release&lt;/h2&gt; 
&lt;p&gt;Bump &lt;code&gt;version&lt;/code&gt; in &lt;code&gt;plugin.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ code plugin.yaml
$ git commit -s -m 'Bump helm-diff version to 3.x.y'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Set &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ make docker-run-release
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA/gpu-operator</title>
      <link>https://github.com/NVIDIA/gpu-operator</link>
      <description>&lt;p&gt;NVIDIA GPU Operator creates, configures, and manages GPUs in Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/NVIDIA/gpu-operator/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/NVIDIA/gpu-operator?style=flat-square" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://gitlab.com/nvidia/kubernetes/gpu-operator/-/pipelines"&gt;&lt;img src="https://gitlab.com/nvidia/kubernetes/gpu-operator/badges/master/pipeline.svg?sanitize=true" alt="pipeline status" /&gt;&lt;/a&gt; &lt;a href="https://gitlab.com/nvidia/kubernetes/gpu-operator/-/pipelines"&gt;&lt;img src="https://gitlab.com/nvidia/kubernetes/gpu-operator/badges/master/coverage.svg?sanitize=true" alt="coverage report" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;NVIDIA GPU Operator&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/egx/nvidia-egx-platform-gold-image-full-2c50-d@2x.jpg" alt="nvidia-gpu-operator" /&gt;&lt;/p&gt; 
&lt;p&gt;Kubernetes provides access to special hardware resources such as NVIDIA GPUs, NICs, Infiniband adapters and other devices through the &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/"&gt;device plugin framework&lt;/a&gt;. However, configuring and managing nodes with these hardware resources requires configuration of multiple software components such as drivers, container runtimes or other libraries which are difficult and prone to errors. The NVIDIA GPU Operator uses the &lt;a href="https://cloud.redhat.com/blog/introducing-the-operator-framework"&gt;operator framework&lt;/a&gt; within Kubernetes to automate the management of all NVIDIA software components needed to provision GPU. These components include the NVIDIA drivers (to enable CUDA), Kubernetes device plugin for GPUs, the NVIDIA Container Runtime, automatic node labelling, &lt;a href="https://developer.nvidia.com/dcgm"&gt;DCGM&lt;/a&gt; based monitoring and others.&lt;/p&gt; 
&lt;h2&gt;Audience and Use-Cases&lt;/h2&gt; 
&lt;p&gt;The GPU Operator allows administrators of Kubernetes clusters to manage GPU nodes just like CPU nodes in the cluster. Instead of provisioning a special OS image for GPU nodes, administrators can rely on a standard OS image for both CPU and GPU nodes and then rely on the GPU Operator to provision the required software components for GPUs.&lt;/p&gt; 
&lt;p&gt;Note that the GPU Operator is specifically useful for scenarios where the Kubernetes cluster needs to scale quickly - for example provisioning additional GPU nodes on the cloud or on-prem and managing the lifecycle of the underlying software components. Since the GPU Operator runs everything as containers including NVIDIA drivers, the administrators can easily swap various components - simply by starting or stopping containers.&lt;/p&gt; 
&lt;h2&gt;Product Documentation&lt;/h2&gt; 
&lt;p&gt;For information on platform support and getting started, visit the official documentation &lt;a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/overview.html"&gt;repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Webinar&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://info.nvidia.com/how-to-use-gpus-on-kubernetes-webinar.html"&gt;How to easily use GPUs on Kubernetes&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/NVIDIA/gpu-operator/raw/master/CONTRIBUTING.md"&gt;Read the document on contributions&lt;/a&gt;. You can contribute by opening a &lt;a href="https://help.github.com/en/articles/about-pull-requests"&gt;pull request&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support and Getting Help&lt;/h2&gt; 
&lt;p&gt;Please open &lt;a href="https://github.com/NVIDIA/gpu-operator/issues/new"&gt;an issue on the GitHub project&lt;/a&gt; for any questions. Your feedback is appreciated.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>oauth2-proxy/oauth2-proxy</title>
      <link>https://github.com/oauth2-proxy/oauth2-proxy</link>
      <description>&lt;p&gt;A reverse proxy that provides authentication with Google, Azure, OpenID Connect and many more identity providers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/oauth2-proxy/oauth2-proxy/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/oauth2-proxy/oauth2-proxy/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="Continuous Integration" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/oauth2-proxy/oauth2-proxy"&gt;&lt;img src="https://goreportcard.com/badge/github.com/oauth2-proxy/oauth2-proxy" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/oauth2-proxy/oauth2-proxy"&gt;&lt;img src="https://godoc.org/github.com/oauth2-proxy/oauth2-proxy?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/oauth2-proxy/oauth2-proxy/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://codeclimate.com/github/oauth2-proxy/oauth2-proxy/maintainability"&gt;&lt;img src="https://api.codeclimate.com/v1/badges/a58ff79407212e2beacb/maintainability" alt="Maintainability" /&gt;&lt;/a&gt; &lt;a href="https://codeclimate.com/github/oauth2-proxy/oauth2-proxy/test_coverage"&gt;&lt;img src="https://api.codeclimate.com/v1/badges/a58ff79407212e2beacb/test_coverage" alt="Test Coverage" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/oauth2-proxy/oauth2-proxy/master/docs/static/img/logos/OAuth2_Proxy_horizontal.svg?sanitize=true" alt="OAuth2 Proxy" /&gt;&lt;/p&gt; 
&lt;p&gt;OAuth2-Proxy is a flexible, open-source tool that can act as either a standalone reverse proxy or a middleware component integrated into existing reverse proxy or load balancer setups. It provides a simple and secure way to protect your web applications with OAuth2 / OIDC authentication. As a reverse proxy, it intercepts requests to your application and redirects users to an OAuth2 provider for authentication. As a middleware, it can be seamlessly integrated into your existing infrastructure to handle authentication for multiple applications.&lt;/p&gt; 
&lt;p&gt;OAuth2-Proxy supports a lot of OAuth2 as well as OIDC providers. Either through a generic OIDC client or a specific implementation for Google, Microsoft Entra ID, GitHub, login.gov and others. Through specialised provider implementations oauth2-proxy can extract more details about the user like preferred usernames and groups. Those details can then be forwarded as HTTP headers to your upstream applications.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/oauth2-proxy/oauth2-proxy/master/docs/static/img/simplified-architecture.svg?sanitize=true" alt="Simplified Architecture" /&gt;&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;OAuth2-Proxy's &lt;a href="https://oauth2-proxy.github.io/oauth2-proxy/installation"&gt;Installation Docs&lt;/a&gt; cover how to install and configure your setup. Additionally you can take a further look at the &lt;a href="https://github.com/oauth2-proxy/oauth2-proxy/tree/master/contrib/local-environment"&gt;example setup files&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;h3&gt;Binaries&lt;/h3&gt; 
&lt;p&gt;We publish oauth2-proxy as compiled binaries on GitHub for all major architectures as well as more exotic ones like &lt;code&gt;ppc64le&lt;/code&gt; as well as &lt;code&gt;s390x&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://github.com/oauth2-proxy/oauth2-proxy/releases/latest"&gt;latest release&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Images&lt;/h3&gt; 
&lt;p&gt;From &lt;code&gt;v7.6.0&lt;/code&gt; and up the base image has been changed from Alpine to &lt;a href="https://github.com/GoogleContainerTools/distroless"&gt;GoogleContainerTools/distroless&lt;/a&gt;. This image comes with even fewer installed dependencies and thus should improve security. The image therefore is also slightly smaller than Alpine. For debugging purposes (and those who really need it. e.g. &lt;code&gt;armv6&lt;/code&gt;) we still provide images based on Alpine. The tags of these images are suffixed with &lt;code&gt;-alpine&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Since 2023-11-18 we build nightly images directly from the &lt;code&gt;master&lt;/code&gt; branch and provide them at &lt;code&gt;quay.io/oauth2-proxy/oauth2-proxy-nightly&lt;/code&gt;. These images are considered unstable and therefore should &lt;strong&gt;NOT&lt;/strong&gt; be used for production purposes unless you know what you're doing.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg?sanitize=true" alt="Microsoft" /&gt; Microsoft Azure credits for open source projects&lt;/p&gt; 
&lt;p&gt;Would you like to sponsor the project then please contact us at &lt;a href="mailto:sponsors@oauth2-proxy.dev"&gt;sponsors@oauth2-proxy.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Involved&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://gophers.slack.com/archives/CM2RSS25N"&gt;&lt;img src="https://img.shields.io/badge/slack-Gopher_%23oauth2--proxy-red?logo=slack" alt="Slack" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Join the #oauth2-proxy &lt;a href="https://gophers.slack.com/archives/CM2RSS25N"&gt;Slack channel&lt;/a&gt; to chat with other users of oauth2-proxy or reach out to the maintainers directly. Use the &lt;a href="https://invite.slack.golangbridge.org/"&gt;public invite link&lt;/a&gt; to get an invite for the Gopher Slack space.&lt;/p&gt; 
&lt;p&gt;OAuth2-Proxy is a community-driven project. We rely on the contribut️ions of our users to continually improve it. While review times can vary, we appreciate your patience and understanding. As a volunteer-driven project, we strive to keep this project stable and might take longer to merge changes.&lt;/p&gt; 
&lt;p&gt;If you want to contribute to the project. Please see our &lt;a href="https://oauth2-proxy.github.io/oauth2-proxy/community/contribution"&gt;Contributing&lt;/a&gt; guide.&lt;/p&gt; 
&lt;p&gt;Who uses OAuth2-Proxy? Have a look at our new &lt;a href="https://raw.githubusercontent.com/oauth2-proxy/oauth2-proxy/master/ADOPTERS.md"&gt;ADOPTERS&lt;/a&gt; file and feel free to open a PR to add your organisation.&lt;/p&gt; 
&lt;p&gt;Thanks to all the people who already contributed ❤&lt;/p&gt; 
&lt;a href="https://github.com/oauth2-proxy/oauth2-proxy/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=oauth2-proxy/oauth2-proxy&amp;amp;columns=15&amp;amp;max=75" /&gt; &lt;img src="https://img.shields.io/github/contributors/oauth2-proxy/oauth2-proxy" /&gt; &lt;/a&gt; 
&lt;p&gt;Made with &lt;a href="https://contrib.rocks"&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you believe you have found a vulnerability within OAuth2 Proxy or any of its dependencies, please do &lt;strong&gt;NOT&lt;/strong&gt; open an issue or PR on GitHub, please do &lt;strong&gt;NOT&lt;/strong&gt; post any details publicly.&lt;/p&gt; 
&lt;p&gt;Security disclosures &lt;strong&gt;MUST&lt;/strong&gt; be done in private. If you have found an issue that you would like to bring to the attention of the maintainers, please compose an email and send it to the list of people listed in our &lt;a href="https://raw.githubusercontent.com/oauth2-proxy/oauth2-proxy/master/MAINTAINERS"&gt;MAINTAINERS&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;For more details read our full &lt;a href="https://oauth2-proxy.github.io/oauth2-proxy/community/security#security-disclosures"&gt;Security Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Security Notice for v6.0.0 and older&lt;/h3&gt; 
&lt;p&gt;If you are running a version older than v6.0.0 we &lt;strong&gt;strongly recommend&lt;/strong&gt; to the current version.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/oauth2-proxy/oauth2-proxy/security/advisories/GHSA-5m6c-jp6f-2vcv"&gt;open redirect vulnerability&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Repository History&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;2018-11-27:&lt;/strong&gt; This repository was forked from &lt;a href="https://github.com/bitly/oauth2_proxy"&gt;bitly/OAuth2_Proxy&lt;/a&gt;. Versions v3.0.0 and up are from this fork and will have diverged from any changes in the original fork. A list of changes can be seen in the &lt;a href="https://raw.githubusercontent.com/oauth2-proxy/oauth2-proxy/master/CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2020-03-29:&lt;/strong&gt; This project was formerly hosted as &lt;code&gt;pusher/oauth2_proxy&lt;/code&gt; but has been renamed to &lt;code&gt;oauth2-proxy/oauth2-proxy&lt;/code&gt;. Going forward, all images shall be available at &lt;code&gt;quay.io/oauth2-proxy/oauth2-proxy&lt;/code&gt; and binaries will be named &lt;code&gt;oauth2-proxy&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;OAuth2-Proxy is distributed under &lt;a href="https://raw.githubusercontent.com/oauth2-proxy/oauth2-proxy/master/LICENSE"&gt;The MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>influxdata/telegraf</title>
      <link>https://github.com/influxdata/telegraf</link>
      <description>&lt;p&gt;Agent for collecting, processing, aggregating, and writing metrics, logs, and other arbitrary data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://raw.githubusercontent.com/influxdata/telegraf/master/assets/TelegrafTigerSmall.png" alt="tiger" title="tiger" /&gt; Telegraf&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://godoc.org/github.com/influxdata/telegraf"&gt;&lt;img src="https://img.shields.io/badge/doc-reference-00ADD8.svg?logo=go" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/_/telegraf/"&gt;&lt;img src="https://img.shields.io/docker/pulls/library/telegraf.svg?sanitize=true" alt="Docker pulls" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/influxdata/telegraf"&gt;&lt;img src="https://goreportcard.com/badge/github.com/influxdata/telegraf" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://circleci.com/gh/influxdata/telegraf"&gt;&lt;img src="https://circleci.com/gh/influxdata/telegraf.svg?style=svg" alt="Circle CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Telegraf is an agent for collecting, processing, aggregating, and writing metrics, logs, and other arbitrary data.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Offers a comprehensive suite of over 300 plugins, covering a wide range of functionalities including system monitoring, cloud services, and message passing&lt;/li&gt; 
 &lt;li&gt;Enables the integration of user-defined code to collect, transform, and transmit data efficiently&lt;/li&gt; 
 &lt;li&gt;Compiles into a standalone static binary without any external dependencies, ensuring a streamlined deployment process&lt;/li&gt; 
 &lt;li&gt;Utilizes TOML for configuration, providing a user-friendly and unambiguous setup experience&lt;/li&gt; 
 &lt;li&gt;Developed with contributions from a diverse community of over 1,200 contributors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Users can choose plugins from a wide range of topics, including but not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Devices: &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/opcua"&gt;OPC UA&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/modbus"&gt;Modbus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Logs: &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/file"&gt;File&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/tail"&gt;Tail&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/directory_monitor"&gt;Directory Monitor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Messaging: &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/amqp_consumer"&gt;AMQP&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/kafka_consumer"&gt;Kafka&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/mqtt_consumer"&gt;MQTT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Monitoring: &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/opentelemetry"&gt;OpenTelemetry&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/prometheus"&gt;Prometheus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Networking: &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/cisco_telemetry_mdt"&gt;Cisco TelemetryMDT&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/gnmi"&gt;gNMI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;System monitoring: &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/cpu"&gt;CPU&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/mem"&gt;Memory&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/disk"&gt;Disk&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/net"&gt;Network&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/smartctl"&gt;SMART&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/docker"&gt;Docker&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/nvidia_smi"&gt;Nvidia SMI&lt;/a&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;Universal: &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/exec"&gt;Exec&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/http"&gt;HTTP&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/http_listener_v2"&gt;HTTP Listener&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/snmp"&gt;SNMP&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/sql"&gt;SQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Windows: &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_eventlog"&gt;Event Log&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_wmi"&gt;Management Instrumentation&lt;/a&gt;, &lt;a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters"&gt;Performance Counters&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔨 Installation&lt;/h2&gt; 
&lt;p&gt;For binary builds, Docker images, RPM &amp;amp; DEB packages, and other builds of Telegraf, please see the &lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/docs/INSTALL_GUIDE.md"&gt;install guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/docs/RELEASES.md"&gt;releases documentation&lt;/a&gt; for details on versioning and when releases are made.&lt;/p&gt; 
&lt;h2&gt;💻 Usage&lt;/h2&gt; 
&lt;p&gt;Users define a TOML configuration with the plugins and settings they wish to use, then pass that configuration to Telegraf. The Telegraf agent then collects data from inputs at each interval and sends data to outputs at each flush interval.&lt;/p&gt; 
&lt;p&gt;For a basic walkthrough see &lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/docs/QUICK_START.md"&gt;quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;For a full list of documentation including tutorials, reference and other material, start with the &lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/docs/README.md"&gt;/docs directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additionally, each plugin has its own README that includes details about how to configure, use, and sometimes debug or troubleshoot. Look under the &lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/plugins/"&gt;/plugins directory&lt;/a&gt; for specific plugins.&lt;/p&gt; 
&lt;p&gt;Here are some commonly used documents:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/CHANGELOG.md"&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/docs/CONFIGURATION.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/docs/FAQ.md"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/influxdata/telegraf/releases"&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/SECURITY.md"&gt;Security&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;❤️ Contribute&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/influxdata/telegraf/raw/master/CONTRIBUTING.md"&gt;&lt;img src="https://img.shields.io/badge/contribute-to_telegraf-blue.svg?logo=influxdb" alt="Contribute" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We love our community of over 1,200 contributors! Many of the plugins included in Telegraf were originally contributed by community members. Check out our &lt;a href="https://raw.githubusercontent.com/influxdata/telegraf/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; if you are interested in helping out. Also, join us on our &lt;a href="https://influxdata.com/slack"&gt;Community Slack&lt;/a&gt; or &lt;a href="https://community.influxdata.com/"&gt;Community Forums&lt;/a&gt; if you have questions or comments for our engineering teams.&lt;/p&gt; 
&lt;p&gt;If you are completely new to Telegraf and InfluxDB, you can also enroll for free at &lt;a href="https://www.influxdata.com/university/"&gt;InfluxDB university&lt;/a&gt; to take courses to learn more.&lt;/p&gt; 
&lt;h2&gt;ℹ️ Support&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.influxdata.com/slack"&gt;&lt;img src="https://img.shields.io/badge/slack-join_chat-blue.svg?logo=slack" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://community.influxdata.com/"&gt;&lt;img src="https://img.shields.io/badge/discourse-join_forums-blue.svg?logo=discourse" alt="Forums" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please use the &lt;a href="https://influxdata.com/slack"&gt;Community Slack&lt;/a&gt; or &lt;a href="https://community.influxdata.com/"&gt;Community Forums&lt;/a&gt; if you have questions or comments for our engineering teams. GitHub issues are limited to actual issues and feature requests only.&lt;/p&gt; 
&lt;h2&gt;📜 License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/influxdata/telegraf/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue" alt="MIT" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grafana/tempo</title>
      <link>https://github.com/grafana/tempo</link>
      <description>&lt;p&gt;Grafana Tempo is a high volume, minimal dependency distributed tracing backend.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt;&lt;img src="https://raw.githubusercontent.com/grafana/tempo/main/docs/sources/tempo/logo_and_name.png" alt="Tempo Logo" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/grafana/tempo/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/grafana/tempo?display_name=tag&amp;amp;sort=semver" alt="Latest Release" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/license/grafana/tempo" alt="License" /&gt; &lt;a href="https://hub.docker.com/r/grafana/tempo/tags"&gt;&lt;img src="https://img.shields.io/docker/pulls/grafana/tempo" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://grafana.slack.com/archives/C01D981PEE5"&gt;&lt;img src="https://img.shields.io/badge/join%20slack-%23tempo-brightgreen.svg?sanitize=true" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://community.grafana.com/c/grafana-tempo/40"&gt;&lt;img src="https://img.shields.io/badge/discuss-tempo%20forum-orange.svg?sanitize=true" alt="Community Forum" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/grafana/tempo"&gt;&lt;img src="https://goreportcard.com/badge/github.com/grafana/tempo" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Grafana Tempo is an open source, easy-to-use, and high-scale distributed tracing backend. Tempo is cost-efficient, requiring only object storage to operate, and is deeply integrated with Grafana, Prometheus, and Loki.&lt;/p&gt; 
&lt;h2&gt;Business value of distributed tracing&lt;/h2&gt; 
&lt;p&gt;Distributed tracing helps teams quickly pinpoint performance issues and understand the flow of requests across services. The Traces Drilldown UI simplifies this process by offering a user-friendly interface to view and analyze trace data, making it easier to identify and resolve issues without needing to write complex queries.&lt;/p&gt; 
&lt;p&gt;Refer to &lt;a href="https://grafana.com/docs/tempo/latest/introduction/solutions-with-traces/"&gt;Use traces to find solutions&lt;/a&gt; to learn more about how you can use distributed tracing to investigate and solve issues.&lt;/p&gt; 
&lt;h2&gt;Traces Drilldown UI: A better way to get value from your tracing data&lt;/h2&gt; 
&lt;p&gt;We are excited to introduce the &lt;a href="https://github.com/grafana/traces-drilldown"&gt;Traces Drilldown&lt;/a&gt; (formerly Explore Traces) app as part of the Grafana Explore suite. This app provides a queryless and intuitive experience for analyzing tracing data, allowing teams to quickly identify performance issues, latency bottlenecks, and errors without needing to write complex queries or use TraceQL.&lt;/p&gt; 
&lt;p&gt;Key Features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Intuitive Trace Analysis&lt;/strong&gt;: Spot slow or error-prone traces with easy, point-and-click interactions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;RED Metrics Overview&lt;/strong&gt;: Use Rate, Errors, and Duration metrics to highlight performance issues.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automated Comparison&lt;/strong&gt;: Identify problematic attributes with automatic trace comparison.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Simplified Visualizations&lt;/strong&gt;: Access rich visual data without needing to construct TraceQL queries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/991205df-1b27-489f-8ef0-1a05ee158996" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;To learn more see the following links:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grafana/traces-drilldown"&gt;Traces Drilldown repo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/grafana/latest/explore/simplified-exploration/traces/"&gt;Traces Drilldown documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a3uB1C2oHA4"&gt;Demo video&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;TraceQL&lt;/h2&gt; 
&lt;p&gt;Tempo implements &lt;a href="https://grafana.com/docs/tempo/latest/traceql/"&gt;TraceQL&lt;/a&gt;, a traces-first query language inspired by LogQL and PromQL, which enables targeted queries or rich UI-driven analyses.&lt;/p&gt; 
&lt;h3&gt;TraceQL metrics&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://grafana.com/docs/tempo/latest/traceql/metrics-queries/"&gt;TraceQL metrics&lt;/a&gt; is an experimental feature in Grafana Tempo that creates metrics from traces. Metric queries extend trace queries by applying a function to trace query results. This powerful feature allows for ad hoc aggregation of any existing TraceQL query by any dimension available in your traces, much in the same way that LogQL metric queries create metrics from logs.&lt;/p&gt; 
&lt;p&gt;Tempo is Jaeger, Zipkin, Kafka, OpenCensus, and OpenTelemetry compatible. It ingests batches in any of the mentioned formats, buffers them, and then writes them to Azure, GCS, S3, or local disk. As such, it's robust, cheap, and easy to operate.&lt;/p&gt; 
&lt;h2&gt;Getting started with Tempo&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/docs/tempo/latest/getting-started/"&gt;Get started documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grafana/tempo/main/example"&gt;Deployment Examples&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grafana/tempo/main/example/docker-compose"&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grafana/tempo/main/example/helm"&gt;Helm&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grafana/tempo/main/example/tk"&gt;Jsonnet&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Further reading&lt;/h2&gt; 
&lt;p&gt;To learn more about Tempo, consult the following documents &amp;amp; talks:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=zDrA7Ly3ovU"&gt;How to get started with Tempo with Joe Elliott (video)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/tags/tempo/"&gt;Grafana blog posts about Tempo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/blog/2023/02/01/new-in-grafana-tempo-2.0-apache-parquet-as-the-default-storage-format-support-for-traceql/"&gt;New in Grafana Tempo 2.0: Apache Parquet as the default storage format, support for TraceQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://grafana.com/blog/2023/02/07/get-to-know-traceql-a-powerful-new-query-language-for-distributed-tracing/"&gt;Get to know TraceQL: A powerful new query language for distributed tracing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;If you have any questions or feedback regarding Tempo:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Grafana Labs hosts a &lt;a href="https://community.grafana.com/c/grafana-tempo/40"&gt;forum&lt;/a&gt; for Tempo. This is a great place to post questions and search for answers.&lt;/li&gt; 
 &lt;li&gt;Ask a question on the &lt;a href="https://grafana.slack.com/archives/C01D981PEE5"&gt;Tempo Slack channel&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grafana/tempo/issues/new/choose"&gt;File an issue&lt;/a&gt; for bugs, issues and feature suggestions.&lt;/li&gt; 
 &lt;li&gt;UI issues should be filed with &lt;a href="https://github.com/grafana/grafana/issues/new/choose"&gt;Grafana&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;OpenTelemetry&lt;/h2&gt; 
&lt;p&gt;Tempo's receiver layer, wire format and storage format are all based directly on &lt;a href="https://github.com/open-telemetry/opentelemetry-proto"&gt;standards&lt;/a&gt; and &lt;a href="https://github.com/open-telemetry/opentelemetry-collector"&gt;code&lt;/a&gt; established by &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;. We support open standards at Grafana!&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://grafana.com/docs/tempo/latest/guides/instrumentation/"&gt;Integration Guides&lt;/a&gt; to see examples of OpenTelemetry instrumentation with Tempo.&lt;/p&gt; 
&lt;h2&gt;Other components&lt;/h2&gt; 
&lt;h3&gt;tempo-vulture&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/grafana/tempo/tree/main/cmd/tempo-vulture"&gt;tempo-vulture&lt;/a&gt; is Tempo's bird themed consistency checking tool. It writes traces to Tempo and then queries them back in a variety of ways.&lt;/p&gt; 
&lt;h3&gt;tempo-cli&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/grafana/tempo/tree/main/cmd/tempo-cli"&gt;tempo-cli&lt;/a&gt; is the place to put any utility functionality related to Tempo. See &lt;a href="https://grafana.com/docs/tempo/latest/operations/tempo_cli/"&gt;Documentation&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Grafana Tempo is distributed under &lt;a href="https://raw.githubusercontent.com/grafana/tempo/main/LICENSE"&gt;AGPL-3.0-only&lt;/a&gt;. For Apache-2.0 exceptions, see &lt;a href="https://raw.githubusercontent.com/grafana/tempo/main/LICENSING.md"&gt;LICENSING.md&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vmware-tanzu/velero</title>
      <link>https://github.com/vmware-tanzu/velero</link>
      <description>&lt;p&gt;Backup and migrate Kubernetes applications and their persistent volumes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://velero.io/docs/main/img/velero.png" alt="100" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/vmware-tanzu/velero/actions?query=workflow%3A%22Main+CI%22"&gt;&lt;img src="https://github.com/vmware-tanzu/velero/workflows/Main%20CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/3811"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/3811/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/v/release/vmware-tanzu/velero" alt="GitHub release (latest SemVer)" /&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Velero (formerly Heptio Ark) gives you tools to back up and restore your Kubernetes cluster resources and persistent volumes. You can run Velero with a public cloud platform or on-premises.&lt;/p&gt; 
&lt;p&gt;Velero lets you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Take backups of your cluster and restore in case of loss.&lt;/li&gt; 
 &lt;li&gt;Migrate cluster resources to other clusters.&lt;/li&gt; 
 &lt;li&gt;Replicate your production cluster to development and testing clusters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Velero consists of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A server that runs on your cluster&lt;/li&gt; 
 &lt;li&gt;A command-line client that runs locally&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://velero.io/docs/"&gt;The documentation&lt;/a&gt; provides a getting started guide and information about building from source, architecture, extending Velero and more.&lt;/p&gt; 
&lt;p&gt;Please use the version selector at the top of the site to ensure you are using the appropriate documentation for your version of Velero.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;If you encounter issues, review the &lt;a href="https://velero.io/docs/troubleshooting"&gt;troubleshooting docs&lt;/a&gt;, &lt;a href="https://github.com/vmware-tanzu/velero/issues"&gt;file an issue&lt;/a&gt;, or talk to us on the &lt;a href="https://kubernetes.slack.com/messages/velero"&gt;#velero channel&lt;/a&gt; on the Kubernetes Slack server.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are ready to jump in and test, add code, or help with documentation, follow the instructions on our &lt;a href="https://velero.io/docs/start-contributing"&gt;Start contributing&lt;/a&gt; documentation for guidance on how to setup Velero for development.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/vmware-tanzu/velero/releases"&gt;the list of releases&lt;/a&gt; to find out about feature changes.&lt;/p&gt; 
&lt;h3&gt;Velero compatibility matrix&lt;/h3&gt; 
&lt;p&gt;The following is a list of the supported Kubernetes versions for each Velero version.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Velero version&lt;/th&gt; 
   &lt;th&gt;Expected Kubernetes version compatibility&lt;/th&gt; 
   &lt;th&gt;Tested on Kubernetes version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.16&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.31.4, 1.32.3, and 1.33.0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.15&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.28.8, 1.29.8, 1.30.4 and 1.31.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.14&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.27.9, 1.28.9, and 1.29.4&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.13&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.26.5, 1.27.3, 1.27.8, and 1.28.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.12&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.25.7, 1.26.5, 1.26.7, and 1.27.3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1.11&lt;/td&gt; 
   &lt;td&gt;1.18-latest&lt;/td&gt; 
   &lt;td&gt;1.23.10, 1.24.9, 1.25.5, and 1.26.1&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Velero supports IPv4, IPv6, and dual stack environments. Support for this was tested against Velero v1.8.&lt;/p&gt; 
&lt;p&gt;The Velero maintainers are continuously working to expand testing coverage, but are not able to test every combination of Velero and supported Kubernetes versions for each Velero release. The table above is meant to track the current testing coverage and the expected supported Kubernetes versions for each Velero version.&lt;/p&gt; 
&lt;p&gt;If you are interested in using a different version of Kubernetes with a given Velero version, we'd recommend that you perform testing before installing or upgrading your environment. For full information around capabilities within a release, also see the Velero &lt;a href="https://github.com/vmware-tanzu/velero/releases"&gt;release notes&lt;/a&gt; or Kubernetes &lt;a href="https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG"&gt;release notes&lt;/a&gt;. See the Velero &lt;a href="https://velero.io/docs/latest/support-process/"&gt;support page&lt;/a&gt; for information about supported versions of Velero.&lt;/p&gt; 
&lt;p&gt;For each release, Velero maintainers run the test to ensure the upgrade path from n-2 minor release. For example, before the release of v1.10.x, the test will verify that the backup created by v1.9.x and v1.8.x can be restored using the build to be tagged as v1.10.x.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>korotovsky/slack-mcp-server</title>
      <link>https://github.com/korotovsky/slack-mcp-server</link>
      <description>&lt;p&gt;The most powerful MCP Slack Server with no permission requirements, Apps support, multiple transports Stdio and SSE, DMs, Group DMs and smart history fetch logic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Slack MCP Server&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://archestra.ai/mcp-catalog/korotovsky__slack-mcp-server"&gt;&lt;img src="https://archestra.ai/mcp-catalog/api/badge/quality/korotovsky/slack-mcp-server" alt="Trust Score" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Model Context Protocol (MCP) server for Slack Workspaces. The most powerful MCP Slack server — supports Stdio and SSE transports, proxy settings, DMs, Group DMs, Smart History fetch (by date or count), may work via OAuth or in complete stealth mode with no permissions and scopes in Workspace 😏.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;br /&gt; We need your support! Each month, over 30,000 engineers visit this repository, and more than 9,000 are already using it.&lt;/p&gt; 
 &lt;p&gt;If you appreciate the work our &lt;a href="https://github.com/korotovsky/slack-mcp-server/graphs/contributors"&gt;contributors&lt;/a&gt; have put into this project, please consider giving the repository a star.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This feature-rich Slack MCP Server has:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Stealth and OAuth Modes&lt;/strong&gt;: Run the server without requiring additional permissions or bot installations (stealth mode), or use secure OAuth tokens for access without needing to refresh or extract tokens from the browser (OAuth mode).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise Workspaces Support&lt;/strong&gt;: Possibility to integrate with Enterprise Slack setups.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Channel and Thread Support with &lt;code&gt;#Name&lt;/code&gt; &lt;code&gt;@Lookup&lt;/code&gt;&lt;/strong&gt;: Fetch messages from channels and threads, including activity messages, and retrieve channels using their names (e.g., #general) as well as their IDs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Smart History&lt;/strong&gt;: Fetch messages with pagination by date (d1, 7d, 1m) or message count.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search Messages&lt;/strong&gt;: Search messages in channels, threads, and DMs using various filters like date, user, and content.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Safe Message Posting&lt;/strong&gt;: The &lt;code&gt;conversations_add_message&lt;/code&gt; tool is disabled by default for safety. Enable it via an environment variable, with optional channel restrictions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DM and Group DM support&lt;/strong&gt;: Retrieve direct messages and group direct messages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Embedded user information&lt;/strong&gt;: Embed user information in messages, for better context.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cache support&lt;/strong&gt;: Cache users and channels for faster access.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stdio/SSE Transports &amp;amp; Proxy Support&lt;/strong&gt;: Use the server with any MCP client that supports Stdio or SSE transports, and configure it to route outgoing requests through a proxy if needed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Analytics Demo&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/images/feature-1.gif" alt="Analytics" /&gt;&lt;/p&gt; 
&lt;h3&gt;Add Message Demo&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/images/feature-2.gif" alt="Add Message" /&gt;&lt;/p&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;h3&gt;1. conversations_history:&lt;/h3&gt; 
&lt;p&gt;Get messages from the channel (or DM) by channel_id, the last row/column in the response is used as 'cursor' parameter for pagination if not empty&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): - &lt;code&gt;channel_id&lt;/code&gt; (string): ID of the channel in format Cxxxxxxxxxx or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;include_activity_messages&lt;/code&gt; (boolean, default: false): If true, the response will include activity messages such as &lt;code&gt;channel_join&lt;/code&gt; or &lt;code&gt;channel_leave&lt;/code&gt;. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (string, default: "1d"): Limit of messages to fetch in format of maximum ranges of time (e.g. 1d - 1 day, 1w - 1 week, 30d - 30 days, 90d - 90 days which is a default limit for free tier history) or number of messages (e.g. 50). Must be empty when 'cursor' is provided.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. conversations_replies:&lt;/h3&gt; 
&lt;p&gt;Get a thread of messages posted to a conversation by channelID and &lt;code&gt;thread_ts&lt;/code&gt;, the last row/column in the response is used as &lt;code&gt;cursor&lt;/code&gt; parameter for pagination if not empty.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): ID of the channel in format &lt;code&gt;Cxxxxxxxxxx&lt;/code&gt; or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;thread_ts&lt;/code&gt; (string, required): Unique identifier of either a thread’s parent message or a message in the thread. ts must be the timestamp in format &lt;code&gt;1234567890.123456&lt;/code&gt; of an existing message with 0 or more replies.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;include_activity_messages&lt;/code&gt; (boolean, default: false): If true, the response will include activity messages such as 'channel_join' or 'channel_leave'. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (string, default: "1d"): Limit of messages to fetch in format of maximum ranges of time (e.g. 1d - 1 day, 1w - 1 week, 30d - 30 days, 90d - 90 days which is a default limit for free tier history) or number of messages (e.g. 50). Must be empty when 'cursor' is provided.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. conversations_add_message&lt;/h3&gt; 
&lt;p&gt;Add a message to a public channel, private channel, or direct message (DM, or IM) conversation by channel_id and thread_ts.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Posting messages is disabled by default for safety. To enable, set the &lt;code&gt;SLACK_MCP_ADD_MESSAGE_TOOL&lt;/code&gt; environment variable. If set to a comma-separated list of channel IDs, posting is enabled only for those specific channels. See the Environment Variables section below for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): ID of the channel in format &lt;code&gt;Cxxxxxxxxxx&lt;/code&gt; or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;thread_ts&lt;/code&gt; (string, optional): Unique identifier of either a thread’s parent message or a message in the thread_ts must be the timestamp in format &lt;code&gt;1234567890.123456&lt;/code&gt; of an existing message with 0 or more replies. Optional, if not provided the message will be added to the channel itself, otherwise it will be added to the thread.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;payload&lt;/code&gt; (string, required): Message payload in specified content_type format. Example: 'Hello, world!' for text/plain or '# Hello, world!' for text/markdown.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;content_type&lt;/code&gt; (string, default: "text/markdown"): Content type of the message. Default is 'text/markdown'. Allowed values: 'text/markdown', 'text/plain'.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. conversations_search_messages&lt;/h3&gt; 
&lt;p&gt;Search messages in a public channel, private channel, or direct message (DM, or IM) conversation using filters. All filters are optional, if not provided then search_query is required.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;search_query&lt;/code&gt; (string, optional): Search query to filter messages. Example: 'marketing report' or full URL of Slack message e.g. '&lt;a href="https://slack.com/archives/C1234567890/p1234567890123456"&gt;https://slack.com/archives/C1234567890/p1234567890123456&lt;/a&gt;', then the tool will return a single message matching given URL, herewith all other parameters will be ignored.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_in_channel&lt;/code&gt; (string, optional): Filter messages in a specific channel by its ID or name. Example: &lt;code&gt;C1234567890&lt;/code&gt; or &lt;code&gt;#general&lt;/code&gt;. If not provided, all channels will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_in_im_or_mpim&lt;/code&gt; (string, optional): Filter messages in a direct message (DM) or multi-person direct message (MPIM) conversation by its ID or name. Example: &lt;code&gt;D1234567890&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;. If not provided, all DMs and MPIMs will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_users_with&lt;/code&gt; (string, optional): Filter messages with a specific user by their ID or display name in threads and DMs. Example: &lt;code&gt;U1234567890&lt;/code&gt; or &lt;code&gt;@username&lt;/code&gt;. If not provided, all threads and DMs will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_users_from&lt;/code&gt; (string, optional): Filter messages from a specific user by their ID or display name. Example: &lt;code&gt;U1234567890&lt;/code&gt; or &lt;code&gt;@username&lt;/code&gt;. If not provided, all users will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_before&lt;/code&gt; (string, optional): Filter messages sent before a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_after&lt;/code&gt; (string, optional): Filter messages sent after a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_on&lt;/code&gt; (string, optional): Filter messages sent on a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_during&lt;/code&gt; (string, optional): Filter messages sent during a specific period in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_threads_only&lt;/code&gt; (boolean, default: false): If true, the response will include only messages from threads. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, default: ""): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (number, default: 20): The maximum number of items to return. Must be an integer between 1 and 100.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. channels_list:&lt;/h3&gt; 
&lt;p&gt;Get list of channels&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_types&lt;/code&gt; (string, required): Comma-separated channel types. Allowed values: &lt;code&gt;mpim&lt;/code&gt;, &lt;code&gt;im&lt;/code&gt;, &lt;code&gt;public_channel&lt;/code&gt;, &lt;code&gt;private_channel&lt;/code&gt;. Example: &lt;code&gt;public_channel,private_channel,im&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt; (string, optional): Type of sorting. Allowed values: &lt;code&gt;popularity&lt;/code&gt; - sort by number of members/participants in each channel.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (number, default: 100): The maximum number of items to return. Must be an integer between 1 and 1000 (maximum 999).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;p&gt;The Slack MCP Server exposes two special directory resources for easy access to workspace metadata:&lt;/p&gt; 
&lt;h3&gt;1. &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/channels&lt;/code&gt; — Directory of Channels&lt;/h3&gt; 
&lt;p&gt;Fetches a CSV directory of all channels in the workspace, including public channels, private channels, DMs, and group DMs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;URI:&lt;/strong&gt; &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/channels&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Format:&lt;/strong&gt; &lt;code&gt;text/csv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fields:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;id&lt;/code&gt;: Channel ID (e.g., &lt;code&gt;C1234567890&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Channel name (e.g., &lt;code&gt;#general&lt;/code&gt;, &lt;code&gt;@username_dm&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;topic&lt;/code&gt;: Channel topic (if any)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;purpose&lt;/code&gt;: Channel purpose/description&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;memberCount&lt;/code&gt;: Number of members in the channel&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/users&lt;/code&gt; — Directory of Users&lt;/h3&gt; 
&lt;p&gt;Fetches a CSV directory of all users in the workspace.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;URI:&lt;/strong&gt; &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/users&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Format:&lt;/strong&gt; &lt;code&gt;text/csv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fields:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;userID&lt;/code&gt;: User ID (e.g., &lt;code&gt;U1234567890&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;userName&lt;/code&gt;: Slack username (e.g., &lt;code&gt;john&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;realName&lt;/code&gt;: User’s real name (e.g., &lt;code&gt;John Doe&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Setup Guide&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/01-authentication-setup.md"&gt;Authentication Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/02-installation.md"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/03-configuration-and-usage.md"&gt;Configuration and Usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Environment Variables (Quick Reference)&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Required?&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXC_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Slack browser token (&lt;code&gt;xoxc-...&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXD_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Slack browser cookie &lt;code&gt;d&lt;/code&gt; (&lt;code&gt;xoxd-...&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXP_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;User OAuth token (&lt;code&gt;xoxp-...&lt;/code&gt;) — alternative to xoxc/xoxd&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_PORT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;13080&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Port for the MCP server to listen on&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_HOST&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Host for the MCP server to listen on&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SSE_API_KEY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bearer token for SSE transport&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_PROXY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Proxy URL for outgoing requests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_USER_AGENT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Custom User-Agent (for Enterprise Slack environments)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_CUSTOM_TLS&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send custom TLS-handshake to Slack servers based on &lt;code&gt;SLACK_MCP_USER_AGENT&lt;/code&gt; or default User-Agent. (for Enterprise Slack environments)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to CA certificate&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA_TOOLKIT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Inject HTTPToolkit CA certificate to root trust-store for MitM debugging&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA_INSECURE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Trust all insecure requests (NOT RECOMMENDED)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_TOOL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable message posting via &lt;code&gt;conversations_add_message&lt;/code&gt; by setting it to true for all channels, a comma-separated list of channel IDs to whitelist specific channels, or use &lt;code&gt;!&lt;/code&gt; before a channel ID to allow all except specified ones, while an empty value disables posting by default.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_MARK&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When the &lt;code&gt;conversations_add_message&lt;/code&gt; tool is enabled, any new message sent will automatically be marked as read.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_UNFURLING&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable to let Slack unfurl posted links or set comma-separated list of domains e.g. &lt;code&gt;github.com,slack.com&lt;/code&gt; to whitelist unfurling only for them. If text contains whitelisted and unknown domain unfurling will be disabled for security reasons.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_USERS_CACHE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.users_cache.json&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to the users cache file. Used to cache Slack user information to avoid repeated API calls on startup.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_CHANNELS_CACHE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.channels_cache_v2.json&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to the channels cache file. Used to cache Slack channel information to avoid repeated API calls on startup.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_LOG_LEVEL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;info&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Log-level for stdout or stderr. Valid values are: &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;panic&lt;/code&gt; and &lt;code&gt;fatal&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;*You need either &lt;code&gt;xoxp&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; both &lt;code&gt;xoxc&lt;/code&gt;/&lt;code&gt;xoxd&lt;/code&gt; tokens for authentication.&lt;/p&gt; 
&lt;h3&gt;Limitations matrix &amp;amp; Cache&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Users Cache&lt;/th&gt; 
   &lt;th&gt;Channels Cache&lt;/th&gt; 
   &lt;th&gt;Limitations&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No cache, No LLM context enhancement with user data, tool &lt;code&gt;channels_list&lt;/code&gt; will be fully not functional. Tools &lt;code&gt;conversations_*&lt;/code&gt; will have limited capabilities and you won't be able to search messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt;, getting messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt; won't be available either.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No channels cache, tool &lt;code&gt;channels_list&lt;/code&gt; will be fully not functional. Tools &lt;code&gt;conversations_*&lt;/code&gt; will have limited capabilities and you won't be able to search messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt;, getting messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt; won't be available either.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No limitations, fully functional Slack MCP Server.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Debugging Tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run the inspector with stdio transport
npx @modelcontextprotocol/inspector go run mcp/mcp-server.go --transport stdio

# View logs
tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Never share API tokens&lt;/li&gt; 
 &lt;li&gt;Keep .env files secure and private&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under MIT - see &lt;a href="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/LICENSE"&gt;LICENSE&lt;/a&gt; file. This is not an official Slack product.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GoogleCloudPlatform/kubectl-ai</title>
      <link>https://github.com/GoogleCloudPlatform/kubectl-ai</link>
      <description>&lt;p&gt;AI powered Kubernetes Assistant&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kubectl-ai&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/GoogleCloudPlatform/kubectl-ai"&gt;&lt;img src="https://goreportcard.com/badge/github.com/GoogleCloudPlatform/kubectl-ai" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/license/GoogleCloudPlatform/kubectl-ai" alt="GitHub License" /&gt; &lt;a href="https://github.com/GoogleCloudPlatform/kubectl-ai/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/GoogleCloudPlatform/kubectl-ai.svg?sanitize=true" alt="GitHub stars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;kubectl-ai&lt;/code&gt; acts as an intelligent interface, translating user intent into precise Kubernetes operations, making Kubernetes management more accessible and efficient.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/.github/kubectl-ai.gif" alt="kubectl-ai demo GIF using: kubectl-ai &amp;quot;how's nginx app doing in my cluster&amp;quot;" /&gt;&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;First, ensure that kubectl is installed and configured.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;h4&gt;Quick Install (Linux &amp;amp; MacOS only)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl -sSL https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/install.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Other Installation Methods&lt;/summary&gt; 
 &lt;h4&gt;Manual Installation (Linux, MacOS and Windows)&lt;/h4&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;Download the latest release from the &lt;a href="https://github.com/GoogleCloudPlatform/kubectl-ai/releases/latest"&gt;releases page&lt;/a&gt; for your target machine.&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Untar the release, make the binary executable and move it to a directory in your $PATH (as shown below).&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;tar -zxvf kubectl-ai_Darwin_arm64.tar.gz
chmod a+x kubectl-ai
sudo mv kubectl-ai /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Install with Krew (Linux/macOS/Windows)&lt;/h4&gt; 
 &lt;p&gt;First of all, you need to have krew insatlled, refer to &lt;a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/"&gt;krew document&lt;/a&gt; for more details Then you can install with krew&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;kubectl krew install ai
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Now you can invoke &lt;code&gt;kubectl-ai&lt;/code&gt; as a kubectl plugin like this: &lt;code&gt;kubectl ai&lt;/code&gt;.&lt;/p&gt; 
 &lt;h4&gt;Install on NixOS&lt;/h4&gt; 
 &lt;p&gt;There are multiple ways to install &lt;code&gt;kubectl-ai&lt;/code&gt; on NixOS. For a permantent installation add the following to your NixOS-Configuration:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-nix"&gt;  environment.systemPackages = with pkgs; [
    kubectl-ai
  ];
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For a temporary installation, you can use the following command:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;nix-shell -p kubectl-ai
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;kubectl-ai&lt;/code&gt; supports AI models from &lt;code&gt;gemini&lt;/code&gt;, &lt;code&gt;vertexai&lt;/code&gt;, &lt;code&gt;azopenai&lt;/code&gt;, &lt;code&gt;openai&lt;/code&gt;, &lt;code&gt;grok&lt;/code&gt;, &lt;code&gt;bedrock&lt;/code&gt; and local LLM providers such as &lt;code&gt;ollama&lt;/code&gt; and &lt;code&gt;llama.cpp&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Using Gemini (Default)&lt;/h4&gt; 
&lt;p&gt;Set your Gemini API key as an environment variable. If you don't have a key, get one from &lt;a href="https://aistudio.google.com"&gt;Google AI Studio&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;export GEMINI_API_KEY=your_api_key_here
kubectl-ai

# Use different gemini model
kubectl-ai --model gemini-2.5-pro-exp-03-25

# Use 2.5 flash (faster) model
kubectl-ai --quiet --model gemini-2.5-flash-preview-04-17 "check logs for nginx app in hello namespace"
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Use other AI models&lt;/summary&gt; 
 &lt;h4&gt;Using AI models running locally (ollama or llama.cpp)&lt;/h4&gt; 
 &lt;p&gt;You can use &lt;code&gt;kubectl-ai&lt;/code&gt; with AI models running locally. &lt;code&gt;kubectl-ai&lt;/code&gt; supports &lt;a href="https://ollama.com/"&gt;ollama&lt;/a&gt; and &lt;a href="https://github.com/ggml-org/llama.cpp"&gt;llama.cpp&lt;/a&gt; to use the AI models running locally.&lt;/p&gt; 
 &lt;p&gt;Additionally, the &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/modelserving/"&gt;&lt;code&gt;modelserving&lt;/code&gt;&lt;/a&gt; directory provides tools and instructions for deploying your own &lt;code&gt;llama.cpp&lt;/code&gt;-based LLM serving endpoints locally or on a Kubernetes cluster. This allows you to host models like Gemma directly in your environment.&lt;/p&gt; 
 &lt;p&gt;An example of using Google's &lt;code&gt;gemma3&lt;/code&gt; model with &lt;code&gt;ollama&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# assuming ollama is already running and you have pulled one of the gemma models
# ollama pull gemma3:12b-it-qat

# if your ollama server is at remote, use OLLAMA_HOST variable to specify the host
# export OLLAMA_HOST=http://192.168.1.3:11434/

# enable-tool-use-shim because models require special prompting to enable tool calling
kubectl-ai --llm-provider ollama --model gemma3:12b-it-qat --enable-tool-use-shim

# you can use `models` command to discover the locally available models
&amp;gt;&amp;gt; models
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Using Grok&lt;/h4&gt; 
 &lt;p&gt;You can use X.AI's Grok model by setting your X.AI API key:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;export GROK_API_KEY=your_xai_api_key_here
kubectl-ai --llm-provider=grok --model=grok-3-beta
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Using AWS Bedrock&lt;/h4&gt; 
 &lt;p&gt;You can use AWS Bedrock Claude models with your AWS credentials:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Configure AWS credentials using AWS SSO
aws sso login --profile your-profile-name
# Or use other AWS credential methods (IAM roles, environment variables, etc.)

# Use Claude 4 Sonnet (default)
kubectl-ai --llm-provider=bedrock --model=us.anthropic.claude-sonnet-4-20250514-v1:0

# Use Claude 3.7 Sonnet
kubectl-ai --llm-provider=bedrock --model=us.anthropic.claude-3-7-sonnet-20250219-v1:0

# Override model via environment variable
export BEDROCK_MODEL=us.anthropic.claude-sonnet-4-20250514-v1:0
kubectl-ai --llm-provider=bedrock
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;AWS Bedrock uses the standard AWS SDK credential chain, supporting:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;AWS SSO profiles&lt;/li&gt; 
  &lt;li&gt;IAM roles (for EC2/ECS/Lambda)&lt;/li&gt; 
  &lt;li&gt;Environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)&lt;/li&gt; 
  &lt;li&gt;AWS CLI configuration files&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Using Azure OpenAI&lt;/h4&gt; 
 &lt;p&gt;You can also use Azure OpenAI deployment by setting your OpenAI API key and specifying the provider:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;export AZURE_OPENAI_API_KEY=your_azure_openai_api_key_here
export AZURE_OPENAI_ENDPOINT=https://your_azure_openai_endpoint_here
kubectl-ai --llm-provider=azopenai --model=your_azure_openai_deployment_name_here
# or
az login
kubectl-ai --llm-provider=openai://your_azure_openai_endpoint_here --model=your_azure_openai_deployment_name_here
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Using OpenAI&lt;/h4&gt; 
 &lt;p&gt;You can also use OpenAI models by setting your OpenAI API key and specifying the provider:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;export OPENAI_API_KEY=your_openai_api_key_here
kubectl-ai --llm-provider=openai --model=gpt-4.1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Using OpenAI Compatible API&lt;/h4&gt; 
 &lt;p&gt;For example, you can use aliyun qwen-xxx models as follows&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;export OPENAI_API_KEY=your_openai_api_key_here
export OPENAI_ENDPOINT=https://dashscope.aliyuncs.com/compatible-mode/v1
kubectl-ai --llm-provider=openai --model=qwen-plus
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Run interactively:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;kubectl-ai
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The interactive mode allows you to have a chat with &lt;code&gt;kubectl-ai&lt;/code&gt;, asking multiple questions in sequence while maintaining context from previous interactions. Simply type your queries and press Enter to receive responses. To exit the interactive shell, type &lt;code&gt;exit&lt;/code&gt; or press Ctrl+C.&lt;/p&gt; 
&lt;p&gt;Or, run with a task as input:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;kubectl-ai --quiet "fetch logs for nginx app in hello namespace"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Combine it with other unix commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;kubectl-ai &amp;lt; query.txt
# OR
echo "list pods in the default namespace" | kubectl-ai
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can even combine a positional argument with stdin input. The positional argument will be used as a prefix to the stdin content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cat error.log | kubectl-ai "explain the error"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We also support persistence between runs with an opt-in. This lets you save a session to the local filesystem, and resume it to maintain previous context. It even works between different interfaces!&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;kubectl-ai --new-session # start a new session
kubectl-ai --list-sessions # list all saved sessions
kubectl-ai --resume-session 20250807-510872 # resume session 20250807-510872
kubectl-ai --delete-session 20250807-510872 # delete session 20250807-510872
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;You can also configure &lt;code&gt;kubectl-ai&lt;/code&gt; using a YAML configuration file at &lt;code&gt;~/.config/kubectl-ai/config.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;mkdir -p ~/.config/kubectl-ai/
cat &amp;lt;&amp;lt;EOF &amp;gt; ~/.config/kubectl-ai/config.yaml
model: gemini-2.5-flash-preview-04-17
llmProvider: gemini
toolConfigPaths: ~/.config/kubectl-ai/tools.yaml
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Verify your configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;kubectl-ai --quiet model
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;More configuration Options&lt;/summary&gt; 
 &lt;p&gt;Here's a complete configuration file with all available options and their default values:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# LLM provider configuration
llmProvider: "gemini"               # Default LLM provider
model: "gemini-2.5-pro-preview-06-05" # Default model
skipVerifySSL: false              # Skip SSL verification for LLM API calls

# Tool and permission settings
toolConfigPaths: ["~/.config/kubectl-ai/tools.yaml"]  # Custom tools configuration paths
skipPermissions: false             # Skip confirmation for resource-modifying commands
enableToolUseShim: false        # Enable tool use shim for certain models

# MCP configuration
mcpServer: false                  # Run in MCP server mode
mcpClient: false                  # Enable MCP client mode
externalTools: false             # Discover external MCP tools (requires mcp-server)

# Runtime settings
maxIterations: 20                 # Maximum iterations for the agent
quiet: false                       # Run in non-interactive mode
removeWorkdir: false             # Remove temporary working directory after execution

# Kubernetes configuration
kubeconfig: "~/.kube/config"      # Path to kubeconfig file

# UI configuration
uiType: "terminal"                # UI mode: "terminal" or "web"
uiListenAddress: "localhost:8888" # Address for HTML UI server

# Prompt configuration
promptTemplateFilePath: ""      # Custom prompt template file
extraPromptPaths: []            # Additional prompt template paths

# Debug and trace settings
tracePath: "/tmp/kubectl-ai-trace.txt" # Path to trace file
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;All these settings can be configured through either:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Command line flags (e.g., &lt;code&gt;--model=gemini-2.5-pro&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Configuration file (&lt;code&gt;~/.config/kubectl-ai/config.yaml&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Environment variables (e.g., &lt;code&gt;GEMINI_API_KEY&lt;/code&gt;)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Command line flags take precedence over configuration file settings.&lt;/p&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;kubectl-ai&lt;/code&gt; leverages LLMs to suggest and execute Kubernetes operations using a set of powerful tools. It comes with built-in tools like &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also extend its capabilities by defining your own custom tools. By default, &lt;code&gt;kubectl-ai&lt;/code&gt; looks for your tool configurations in &lt;code&gt;~/.config/kubectl-ai/tools.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To specify tools configuration files or directories containing tools configuration files, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;./kubectl-ai --custom-tools-config=&amp;lt;path-to-tools-directory&amp;gt; "your prompt here"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For further details on how to configure your own tools, &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/docs/tools.md"&gt;go here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Docker Quick Start&lt;/h2&gt; 
&lt;p&gt;This project provides a Docker image that gives you a standalone environment for running kubectl-ai, including against a GKE cluster.&lt;/p&gt; 
&lt;h3&gt;Running the container against GKE&lt;/h3&gt; 
&lt;h4&gt;Step 1: Build the Image&lt;/h4&gt; 
&lt;p&gt;Clone the repository and build the image with the following command&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/GoogleCloudPlatform/kubectl-ai.git
cd kubectl-ai
docker build -t kubectl-ai:latest -f images/kubectl-ai/Dockerfile .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Step 2: Connect to Your GKE Cluster&lt;/h4&gt; 
&lt;p&gt;Set up application default credentials and connect to your GKE cluster.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;gcloud auth application-default login # If in a gcloud shell this is not necessary
gcloud container clusters get-credentials &amp;lt;cluster-name&amp;gt; --zone &amp;lt;zone&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Step 3: Run the kubectl-ai container&lt;/h4&gt; 
&lt;p&gt;Below is a sample command that can be used to launch the container with a locally hosted web-ui. Be sure to replace the placeholder values with your specific Google Cloud project ID and location. Note you do not need to mount the gcloud config directory if you're on a cloudshell machine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -p 8080:8080 -v ~/.kube:/root/.kube -v ~/.config/gcloud:/root/.config/gcloud -e GOOGLE_CLOUD_LOCATION=us-central1 -e GOOGLE_CLOUD_PROJECT=my-gcp-project kubectl-ai:latest --llm-provider vertexai --ui-listen-address 0.0.0.0:8080 --ui-type web
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more info about running from the container image see &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/CONTAINER.md"&gt;CONTAINER.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;MCP Client Mode&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; MCP Client Mode is available in &lt;code&gt;kubectl-ai&lt;/code&gt; version v0.0.12 and onwards.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;kubectl-ai&lt;/code&gt; can connect to external &lt;a href="https://modelcontextprotocol.io/examples"&gt;MCP&lt;/a&gt; Servers to access additional tools in addition to built-in tools.&lt;/p&gt; 
&lt;h3&gt;Quick Start&lt;/h3&gt; 
&lt;p&gt;Enable MCP client mode:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;kubectl-ai --mcp-client
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Create or edit &lt;code&gt;~/.config/kubectl-ai/mcp.yaml&lt;/code&gt; to customize MCP servers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;servers:
  # Local MCP server (stdio-based)
  # sequential-thinking: Advanced reasoning and step-by-step analysis
  - name: sequential-thinking
    command: npx
    args:
      - -y
      - "@modelcontextprotocol/server-sequential-thinking"
  
  # Remote MCP server (HTTP-based)
  - name: cloudflare-documentation
    url: https://docs.mcp.cloudflare.com/mcp
    
  # Optional: Remote MCP server with authentication
  - name: custom-api
    url: https://api.example.com/mcp
    auth:
      type: "bearer"
      token: "${MCP_TOKEN}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The system automatically:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Converts parameter names (snake_case → camelCase)&lt;/li&gt; 
 &lt;li&gt;Handles type conversion (strings → numbers/booleans when appropriate)&lt;/li&gt; 
 &lt;li&gt;Provides fallback behavior for unknown servers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;No additional setup required - just use the &lt;code&gt;--mcp-client&lt;/code&gt; flag and the AI will have access to all configured MCP tools.&lt;/p&gt; 
&lt;p&gt;📖 &lt;strong&gt;For detailed configuration options, troubleshooting, and advanced features for MCP Client mode, see the &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/pkg/mcp/README.md"&gt;MCP Client Documentation&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;📖 &lt;strong&gt;For multi-server orchestration and security automation examples, see the &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/docs/mcp-client.md"&gt;MCP Client Integration Guide&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Extras&lt;/h2&gt; 
&lt;p&gt;You can use the following special keywords for specific actions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: Display the currently selected model.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;models&lt;/code&gt;: List all available models.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;tools&lt;/code&gt;: List all available tools.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: Display the &lt;code&gt;kubectl-ai&lt;/code&gt; version.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;reset&lt;/code&gt;: Clear the conversational context.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;clear&lt;/code&gt;: Clear the terminal screen.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;exit&lt;/code&gt; or &lt;code&gt;quit&lt;/code&gt;: Terminate the interactive shell (Ctrl+C also works).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Invoking as kubectl plugin&lt;/h3&gt; 
&lt;p&gt;You can also run &lt;code&gt;kubectl ai&lt;/code&gt;. &lt;code&gt;kubectl&lt;/code&gt; finds any executable file in your &lt;code&gt;PATH&lt;/code&gt; whose name begins with &lt;code&gt;kubectl-&lt;/code&gt; as a &lt;a href="https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/"&gt;plugin&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;MCP Server Mode&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;kubectl-ai&lt;/code&gt; can act as an MCP server that exposes kubectl tools to other MCP clients (like Claude, Cursor, or VS Code). The server can run in two modes:&lt;/p&gt; 
&lt;h3&gt;Basic MCP Server (Built-in tools only)&lt;/h3&gt; 
&lt;p&gt;Expose only kubectl-ai's native Kubernetes tools:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;kubectl-ai --mcp-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Enhanced MCP Server (With external tool discovery)&lt;/h3&gt; 
&lt;p&gt;Additionally discover and expose tools from other MCP servers as a unified interface:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;kubectl-ai --mcp-server --external-tools
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This creates a powerful &lt;strong&gt;tool aggregation hub&lt;/strong&gt; where kubectl-ai acts as both:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;MCP Server&lt;/strong&gt;: Exposing kubectl tools to clients&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MCP Client&lt;/strong&gt;: Consuming tools from other MCP servers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The enhanced mode provides AI clients with access to both Kubernetes operations and general-purpose tools (filesystem, web search, databases, etc.) through a single MCP endpoint.&lt;/p&gt; 
&lt;p&gt;📖 &lt;strong&gt;For detailed configuration, examples, and troubleshooting, see the &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/docs/mcp-server.md"&gt;MCP Server Documentation&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;k8s-bench&lt;/h2&gt; 
&lt;p&gt;kubectl-ai project includes &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/k8s-bench/README.md"&gt;k8s-bench&lt;/a&gt; - a benchmark to evaluate performance of different LLM models on kubernetes related tasks.&lt;/p&gt; 
&lt;h3&gt;Latest Benchmark Results (August 2025)&lt;/h3&gt; 
&lt;p&gt;Comprehensive evaluation on identical 10-task Kubernetes benchmark with proper CNI environment:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Model&lt;/th&gt; 
   &lt;th&gt;Success&lt;/th&gt; 
   &lt;th&gt;Fail&lt;/th&gt; 
   &lt;th&gt;Success Rate&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gemini-2.5-flash-preview-04-17&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;0&lt;/td&gt; 
   &lt;td&gt;100%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gemini-2.5-pro-preview-03-25&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;0&lt;/td&gt; 
   &lt;td&gt;100%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;gemma-3-27b-it&lt;/td&gt; 
   &lt;td&gt;8&lt;/td&gt; 
   &lt;td&gt;2&lt;/td&gt; 
   &lt;td&gt;80%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AWS Bedrock Claude 3.7 Sonnet&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;0&lt;/td&gt; 
   &lt;td&gt;100%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;AWS Bedrock Claude Sonnet 4&lt;/td&gt; 
   &lt;td&gt;9&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;90%&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Test Environment&lt;/strong&gt;: Kind cluster v1.27.3 with Calico CNI (full NetworkPolicy support)&lt;br /&gt; &lt;strong&gt;Tasks&lt;/strong&gt;: create-pod, create-pod-mount-configmaps, create-pod-resources-limits, create-network-policy, fix-crashloop, fix-image-pull, fix-service-routing, list-images-for-pods, scale-deployment, scale-down-deployment&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/k8s-bench.md"&gt;full report&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Start Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions to &lt;code&gt;kubectl-ai&lt;/code&gt; from the community. Take a look at our &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/kubectl-ai/main/contributing.md"&gt;contribution guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;em&gt;Note: This is not an officially supported Google product. This project is not eligible for the &lt;a href="https://bughunters.google.com/open-source-security"&gt;Google Open Source Software Vulnerability Rewards Program&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flexprice/flexprice</title>
      <link>https://github.com/flexprice/flexprice</link>
      <description>&lt;p&gt;Usage-based pricing and billing for developers 🔓 Cloud or self-hosted ⚙️ No-code UI 💰 Realtime usage metering 🎟 Credits &amp; top-ups 🔑 Control feature access&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img align="center" src="https://raw.githubusercontent.com/flexprice/flexprice/main/assets/flexprice_logo.png" height="30%" width="30%" alt="fleprice logo" /&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt; &lt;b&gt; ⚡️ Usage based metering &amp;amp; billing for developers ⚡️ &lt;/b&gt; &lt;/h3&gt; 
&lt;p align="center"&gt; Build usage-based, credit-based, or hybrid pricing models with full control. Flexprice handles metering, pricing, and invoicing so you can focus on building, not billing. &lt;/p&gt; 
&lt;h5 align="center"&gt; &lt;p&gt;&lt;a href="https://docs.flexprice.io"&gt;Documentation&lt;/a&gt; • &lt;a href="https://www.loom.com/share/60d8308781254fe0bc5be341501f9fd5"&gt;Demo&lt;/a&gt; • &lt;a href="https://flexprice.io/"&gt;Website&lt;/a&gt; • &lt;a href="https://www.linkedin.com/company/flexpriceio"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/flexprice/go-sdk"&gt;&lt;img src="https://img.shields.io/badge/go-%2300ADD8.svg?style=for-the-badge&amp;amp;logo=go&amp;amp;logoColor=white" alt="Go" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/flexprice"&gt;&lt;img src="https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=ffdd54" alt="Python" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@flexprice/sdk"&gt;&lt;img src="https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&amp;amp;logo=javascript&amp;amp;logoColor=%23F7DF1E" alt="JavaScript" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h5&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Open architecture&lt;/h2&gt; 
&lt;p&gt;The Flexprice core (metering, credits, pricing, billing) has an open and composable design.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img align="center" src="https://raw.githubusercontent.com/flexprice/flexprice/main/assets/open-arch.jpg" alt="open architechture" /&gt; &lt;/p&gt; 
&lt;p&gt;Your application, whether it's running backend APIs, AI agents, or custom workflows, can send usage data to Flexprice. You can directly stream data from data warehouses or analytics pipelines as well.&lt;/p&gt; 
&lt;p&gt;At the core, Flexprice processes this data in real time. We handle everything that usually ends up as custom logic built by developers. Our platform calculates pricing based on the customer’s plan, applies any prepaid or promotional credits, enforces feature limits, and generates accurate invoices automatically. Whether you're using seat-based subscriptions, usage-based pricing, or prepaid credit bundles, you can set up and iterate on your pricing model without writing billing infrastructure from scratch.&lt;/p&gt; 
&lt;p&gt;After billing is computed, our platform connects to your existing tools for payments, CPQ, CRM, and accounting, ensuring billing information flows into the systems your business already uses. It can sync invoices to your payment processor, update customer data in your CRM, and push revenue numbers to your accounting tools.&lt;/p&gt; 
&lt;p&gt;With this architecture, you get full control over how billing works inside your product, while saving your team from the complexity of maintaining it all.&lt;/p&gt; 
&lt;h2&gt;Why billing is a developer problem?&lt;/h2&gt; 
&lt;h5&gt;TL;DR&lt;/h5&gt; 
&lt;p&gt;&lt;em&gt;When existing billing tools don’t flex to your product’s needs, developers shoulder the burden eating up valuable development time and causing ongoing maintenance headaches.&lt;/em&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img align="center" src="https://raw.githubusercontent.com/flexprice/flexprice/main/assets/struggle.png" alt="struggle is real" /&gt; &lt;/p&gt; 
&lt;p&gt;Modern app developers often find themselves wrestling with billing systems. Here are some of the biggest pain points that turn billing into a “developer problem”:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rigid billing tools (lack of flexibility):&lt;/strong&gt; Traditional billing services handle simple subscriptions or payments, but anything beyond that – usage metering, credit systems, feature gating, custom invoice logic – usually isn’t supported out of the box. Developers end up writing countless workarounds or custom code to accommodate these needs. In other words, if your pricing model doesn’t fit the tool, you’re stuck bending your product or building logic from scratch.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Complex usage metering at scale:&lt;/strong&gt; Implementing accurate usage tracking is hard. It involves capturing high-volume events, aggregating them in real time, handling edge cases (prorations, time zones, etc.), and ensuring it all works reliably at scale. Few teams anticipate how many moving parts this requires until they’re deep in the weeds of building it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vendor lock-in and black boxes:&lt;/strong&gt; Relying on third-party billing platforms can mean surrendering flexibility. Many SaaS billing providers are closed systems or charge a percentage fee on revenue, which frustrates engineers who want full control over their pricing logic and data. Changing providers later can be a massive undertaking, so teams feel “stuck” with a less-than-ideal solution.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Delayed monetization &amp;amp; opportunity cost:&lt;/strong&gt; Every week spent building or patching a billing system is a week not spent on core product features. If it takes months to implement a new pricing model or usage-based feature, that’s delayed revenue and lost agility for the business. What might be scoped as a “quick two-month project” can quickly spiral into a multi-year maintenance headache, tying up engineering resources and slowing time-to-market for new offerings.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How Flexprice solves this&lt;/h2&gt; 
&lt;p&gt;Flexprice’s approach is to abstract away the hard parts of billing while preserving maximum flexibility and transparency for developers. It addresses the above pain points in several key ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Developer-first design:&lt;/strong&gt; Flexprice is built API-first with easy integrations. You can instrument your app by simply sending usage events via SDKs, and Flexprice handles the aggregation, metering, and billing logic in real time. This means minimal code to write on your end and no need to reinvent metering or invoice calculations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Open-source and self-hostable:&lt;/strong&gt; Flexprice is open-source, so you can run it on your own infrastructure for full transparency and control. There’s no black-box dependency or surprise fees and you’re free from vendor lock-in. You can inspect the code, extend functionality, and trust that your billing logic is fully in your hands.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Composable with your stack:&lt;/strong&gt; Rather than replacing your existing billing or payment provider, Flexprice augments it. You can build it from scratch or build on top of your existing billing providers like Stripe or Chargebee to manage usage data, pricing rules, credits, and entitlements. You can easily integrate with your existing payment gateways, CRM, CPQ, etc. This layered approach preserves your current workflows and customer touchpoints.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible pricing models out-of-the-box:&lt;/strong&gt; Whether you need pure usage-based billing, tiered plans, seat-based subscriptions, prepaid credits, free tiers with overage, or any hybrid model, Flexprice’s data model and rules engine can support it. Flexprice is designed to accommodate changing pricing strategies in minutues that would normally require schema updates and migration scripts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Transparency and visibility:&lt;/strong&gt; Because Flexprice meters every event and ties it to billing, you (and your customers) get clear visibility into usage and charges. It can provide real-time usage summaries and cost reports, helping both engineering and finance teams ensure everything lines up correctly. Customers get detailed invoices that show exactly what they’re paying for, reducing billing disputes or confusion.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By handling the heavy lifting from real-time usage tracking to invoice generation, Flexprice lets your team focus on building your actual product, not the billing system around it&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Flexprice provides a rich set of features to power usage-based and hybrid billing models. Key features include:&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img align="center" src="https://raw.githubusercontent.com/flexprice/flexprice/main/assets/features.jpg" alt="features" /&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.flexprice.io/api-reference/events/get-raw-events"&gt;&lt;strong&gt;Usage Metering:&lt;/strong&gt;&lt;/a&gt; Define custom usage events (API calls, compute time, database queries, etc.) at a granular level and track them in real time. Flexprice’s metering system can handle millions of events and aggregates usage data reliably, even at peak load. This ensures your billing is always up-to-date with actual customer usage.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.flexprice.io/docs/Wallet/Creating%20a%20wallet"&gt;&lt;strong&gt;Credit Grants (Prepaid &amp;amp; Promotional Credits):&lt;/strong&gt;&lt;/a&gt; Support credit-based workflows with full control. You can grant prepaid credits or promotional credits to customers, set up automatic top-ups at thresholds, and expire unused credits as needed. Flexprice’s credit system is built-in, so you don’t need extra custom logic to handle one-time credits or wallets.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.flexprice.io/docs/Product%20catalogue/Plans/Overview"&gt;&lt;strong&gt;Pricing Plans:&lt;/strong&gt;&lt;/a&gt; Design and iterate on pricing models with total flexibility – whether seat-based subscriptions, pure pay-as-you-go, volume-tiered pricing, or hybrids. You can launch new plans or modify existing ones (e.g. special pricing for a particular customer) without additional engineering effort. Flexprice lets you override plan settings per customer and manage plan versioning over time, making it easy to evolve pricing as your product and market strategy change.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.flexprice.io/docs/Product%20catalogue/Features/Overview"&gt;&lt;strong&gt;Feature Management:&lt;/strong&gt;&lt;/a&gt; Manage feature entitlements and usage limits per plan or per customer. Flexprice lets you define feature toggles (on/off), metered feature limits, or configuration values tied to plans. You can enforce usage limits in your application by checking with Flexprice (for example, limit API calls per month or enable/disable certain features based on plan) without building complex entitlement logic yourself. This ensures that your product’s feature access is always in sync with what the customer has paid for.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.flexprice.io/docs/Invoices/Overview"&gt;&lt;strong&gt;Subscriptions &amp;amp; Invoicing:&lt;/strong&gt;&lt;/a&gt; Flexprice generates clear, accurate invoices based on real-time usage data, subscriptions, and credits. It automates billing cycles – handling proration, overages, and credit application – and produces invoice line items that give customers full visibility into their charges. Finance teams can easily reconcile billing because every charge is linked to tracked usage or a defined price. You can also integrate this with your payment processor to automate charging customers once an invoice is finalized.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each of these features is accessible via Flexprice’s APIs and dashboard, allowing you to mix and match to build the exact billing experience you need.&lt;/p&gt; 
&lt;h3&gt;🚀 Setting up Flexprice from source for development and contributions&lt;/h3&gt; 
&lt;p&gt;To run Flexprice for local development or running from source, you will need&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="https://go.dev/"&gt;Golang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Any of the below supported platform environments: 
  &lt;ol&gt; 
   &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_Linux_distributions"&gt;Linux based environment&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/MacOS"&gt;OSX (Darwin) based environment&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;WSL under Windows&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Quick Setup with Docker Compose&lt;/h4&gt; 
&lt;p&gt;The easiest way to get started is using our Docker Compose setup:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Clone the repository
git clone https://github.com/flexprice/flexprice
cd flexprice

# Set up the complete development environment
make dev-setup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start all required infrastructure (PostgreSQL, Kafka, ClickHouse, Temporal)&lt;/li&gt; 
 &lt;li&gt;Build the FlexPrice application image&lt;/li&gt; 
 &lt;li&gt;Run database migrations and initialize Kafka&lt;/li&gt; 
 &lt;li&gt;Start all FlexPrice services (API, Consumer, Worker)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Once complete, you can access:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;FlexPrice API: &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Temporal UI: &lt;a href="http://localhost:8088"&gt;http://localhost:8088&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Kafka UI: &lt;a href="http://localhost:8084"&gt;http://localhost:8084&lt;/a&gt; (with profile 'dev')&lt;/li&gt; 
 &lt;li&gt;ClickHouse UI: &lt;a href="http://localhost:8123"&gt;http://localhost:8123&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Useful Commands&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Restart only the FlexPrice services
make restart-flexprice

# Stop all services
make down

# Clean everything and start fresh
make clean-start

# Build the FlexPrice image separately
make build-image

# Start only the FlexPrice services
make start-flexprice
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Without Docker&lt;/h4&gt; 
&lt;p&gt;If you prefer to run the application directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start the required infrastructure
docker compose up -d postgres kafka clickhouse temporal temporal-ui

# Run the application locally
go run cmd/server/main.go
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;👨🏻‍💻 Let's Build Together! 👩🏻‍💻&lt;/h2&gt; 
&lt;p&gt;Whether you're a newbie coder or a wizard 🧙‍♀️, your perspective is golden. Take a peek at our:&lt;/p&gt; 
&lt;p&gt;📜 &lt;a href="https://raw.githubusercontent.com/flexprice/flexprice/main/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🏗️ &lt;a href="https://raw.githubusercontent.com/flexprice/flexprice/main/SETUP.md"&gt;Local Development Setup&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;❤️ &lt;a href="https://raw.githubusercontent.com/flexprice/flexprice/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://deepwiki.com/flexprice/flexprice"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;a href="https://github.com/flexprice/flexprice/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=flexprice/flexprice" /&gt; &lt;/a&gt; 
&lt;h2&gt;Repo Activity&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/4d6e208eab20ff0615787615c4fa022591adfa6b.svg?sanitize=true" alt="Alt" title="Repobeats analytics image" /&gt;&lt;/p&gt; 
&lt;!-- LICENSE --&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Flexprice is a commercial open source company, which means some parts of this open source repository require a commercial license. The concept is called "Open Core" where the core technology (99%) is fully open source, licensed under &lt;a href="https://opensource.org/license/agpl-v3"&gt;AGPLv3&lt;/a&gt; and the last 1% is covered under a commercial license (["/ee" Enterprise Edition"]).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] We work closely with the community and always invite feedback about what should be open and what is fine to be commercial. This list is not set and stone and we have moved things from commercial to open in the past. Please open a &lt;a href="https://github.com/flexprice/flexprice/discussions"&gt;discussion&lt;/a&gt; if you feel like something is wrong.&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>casdoor/casdoor</title>
      <link>https://github.com/casdoor/casdoor</link>
      <description>&lt;p&gt;An open-source UI-first Identity and Access Management (IAM) / Single-Sign-On (SSO) platform with web UI supporting OAuth 2.0, OIDC, SAML, CAS, LDAP, SCIM, WebAuthn, TOTP, MFA, Face ID, RADIUS, Google Workspace, Active Directory and Kerberos&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center" style="border-bottom: none;"&gt;📦⚡️ Casdoor&lt;/h1&gt; 
&lt;h3 align="center"&gt;An open-source UI-first Identity and Access Management (IAM) / Single-Sign-On (SSO) platform with web UI supporting OAuth 2.0, OIDC, SAML, CAS, LDAP, SCIM, WebAuthn, TOTP, MFA and RADIUS&lt;/h3&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/casdoor/casdoor/master/#badge"&gt; &lt;img alt="semantic-release" src="https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/r/casbin/casdoor"&gt; &lt;img alt="docker pull casbin/casdoor" src="https://img.shields.io/docker/pulls/casbin/casdoor.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/casdoor/casdoor/actions/workflows/build.yml"&gt; &lt;img alt="GitHub Workflow Status (branch)" src="https://github.com/casdoor/casdoor/workflows/Build/badge.svg?style=flat-square" /&gt; &lt;/a&gt; &lt;a href="https://github.com/casdoor/casdoor/releases/latest"&gt; &lt;img alt="GitHub Release" src="https://img.shields.io/github/v/release/casdoor/casdoor.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://hub.docker.com/r/casbin/casdoor"&gt; &lt;img alt="Docker Image Version (latest semver)" src="https://img.shields.io/badge/Docker%20Hub-latest-brightgreen" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://goreportcard.com/report/github.com/casdoor/casdoor"&gt; &lt;img alt="Go Report Card" src="https://goreportcard.com/badge/github.com/casdoor/casdoor?style=flat-square" /&gt; &lt;/a&gt; &lt;a href="https://github.com/casdoor/casdoor/raw/master/LICENSE"&gt; &lt;img src="https://img.shields.io/github/license/casdoor/casdoor?style=flat-square" alt="license" /&gt; &lt;/a&gt; &lt;a href="https://github.com/casdoor/casdoor/issues"&gt; &lt;img alt="GitHub issues" src="https://img.shields.io/github/issues/casdoor/casdoor?style=flat-square" /&gt; &lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/casdoor/casdoor/master/#"&gt; &lt;img alt="GitHub stars" src="https://img.shields.io/github/stars/casdoor/casdoor?style=flat-square" /&gt; &lt;/a&gt; &lt;a href="https://github.com/casdoor/casdoor/network"&gt; &lt;img alt="GitHub forks" src="https://img.shields.io/github/forks/casdoor/casdoor?style=flat-square" /&gt; &lt;/a&gt; &lt;a href="https://crowdin.com/project/casdoor-site"&gt; &lt;img alt="Crowdin" src="https://badges.crowdin.net/casdoor-site/localized.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/5rPsrAzK7S"&gt; &lt;img alt="Discord" src="https://img.shields.io/discord/1022748306096537660?style=flat-square&amp;amp;logo=discord&amp;amp;label=discord&amp;amp;color=5865F2" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;sup&gt;Sponsored by&lt;/sup&gt; &lt;br /&gt; &lt;a href="https://stytch.com/docs?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_campaign=casbin"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="https://cdn.casbin.org/img/stytch-white.png" /&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="https://cdn.casbin.org/img/stytch-charcoal.png" /&gt; 
   &lt;img src="https://cdn.casbin.org/img/stytch-charcoal.png" width="275" /&gt; 
  &lt;/picture&gt; &lt;/a&gt;&lt;br /&gt; &lt;a href="https://stytch.com/docs?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_campaign=casbin"&gt;&lt;b&gt;Build auth with fraud prevention, faster.&lt;/b&gt;&lt;br /&gt; Try Stytch for API-first authentication, user &amp;amp; org management, multi-tenant SSO, MFA, device fingerprinting, and more.&lt;/a&gt; &lt;br /&gt; &lt;/p&gt; 
&lt;h2&gt;Online demo&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read-only site: &lt;a href="https://door.casdoor.com"&gt;https://door.casdoor.com&lt;/a&gt; (any modification operation will fail)&lt;/li&gt; 
 &lt;li&gt;Writable site: &lt;a href="https://demo.casdoor.com"&gt;https://demo.casdoor.com&lt;/a&gt; (original data will be restored for every 5 minutes)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://casdoor.org"&gt;https://casdoor.org&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;By source code: &lt;a href="https://casdoor.org/docs/basic/server-installation"&gt;https://casdoor.org/docs/basic/server-installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;By Docker: &lt;a href="https://casdoor.org/docs/basic/try-with-docker"&gt;https://casdoor.org/docs/basic/try-with-docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;By Kubernetes Helm: &lt;a href="https://casdoor.org/docs/basic/try-with-helm"&gt;https://casdoor.org/docs/basic/try-with-helm&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to connect to Casdoor?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://casdoor.org/docs/how-to-connect/overview"&gt;https://casdoor.org/docs/how-to-connect/overview&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Casdoor Public API&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docs: &lt;a href="https://casdoor.org/docs/basic/public-api"&gt;https://casdoor.org/docs/basic/public-api&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Swagger: &lt;a href="https://door.casdoor.com/swagger"&gt;https://door.casdoor.com/swagger&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://casdoor.org/docs/category/integrations"&gt;https://casdoor.org/docs/category/integrations&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;How to contact?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Discord: &lt;a href="https://discord.gg/5rPsrAzK7S"&gt;https://discord.gg/5rPsrAzK7S&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Contact: &lt;a href="https://casdoor.org/help"&gt;https://casdoor.org/help&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;For casdoor, if you have any questions, you can give Issues, or you can also directly start Pull Requests(but we recommend giving issues first to communicate with the community).&lt;/p&gt; 
&lt;h3&gt;I18n translation&lt;/h3&gt; 
&lt;p&gt;If you are contributing to casdoor, please note that we use &lt;a href="https://crowdin.com/project/casdoor-site"&gt;Crowdin&lt;/a&gt; as translating platform and i18next as translating tool. When you add some words using i18next in the &lt;code&gt;web/&lt;/code&gt; directory, please remember to add what you have added to the &lt;code&gt;web/src/locales/en/data.json&lt;/code&gt; file.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/casdoor/casdoor/raw/master/LICENSE"&gt;Apache-2.0&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>edoardottt/cariddi</title>
      <link>https://github.com/edoardottt/cariddi</link>
      <description>&lt;p&gt;Take a list of domains, crawl urls and scan for endpoints, secrets, api keys, file extensions, tokens and more&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://github.com/edoardottt/images/raw/main/cariddi/logo.png" /&gt;&lt;br /&gt; &lt;b&gt;Take a list of domains, crawl urls and scan for endpoints, secrets, api keys, file extensions, tokens and more&lt;/b&gt;&lt;br /&gt; &lt;br /&gt; 
 &lt;!-- go-report-card --&gt; &lt;a href="https://goreportcard.com/report/github.com/edoardottt/cariddi"&gt; &lt;img src="https://goreportcard.com/badge/github.com/edoardottt/cariddi" alt="go-report-card" /&gt; &lt;/a&gt; 
 &lt;!-- workflows --&gt; &lt;a href="https://github.com/edoardottt/cariddi/actions"&gt; &lt;img src="https://github.com/edoardottt/cariddi/actions/workflows/go.yml/badge.svg?branch=main" alt="workflows" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;sub&gt; Coded with 💙 by edoardottt &lt;/sub&gt; &lt;br /&gt; 
 &lt;!--Tweet button--&gt; &lt;a href="https://twitter.com/intent/tweet?url=https://github.com/edoardottt/cariddi&amp;amp;text=Take%20a%20list%20of%20domains,%20crawl%20urls%20and%20scan%20for%20endpoints,%20secrets,%20api%20keys,%20file%20extensions,%20tokens%20and%20more...%20%23network%20%23security%20%23infosec%20%23oss%20%23github%20%23bugbounty%20%23linux" target="_blank"&gt;Share on Twitter! &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#installation-"&gt;Install&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#usage-"&gt;Usage&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#get-started-"&gt;Get Started&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#changelog-"&gt;Changelog&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#contributing-"&gt;Contributing&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#license-"&gt;License&lt;/a&gt; &lt;/p&gt; 
&lt;!--[![asciicast](https://asciinema.org/a/415989.svg)](https://asciinema.org/a/415989)--&gt; 
&lt;p align="center"&gt; &lt;img src="https://github.com/edoardottt/images/raw/main/cariddi/cariddi.gif" /&gt; &lt;/p&gt; 
&lt;h2&gt;Installation 📡&lt;/h2&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;brew install cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Snap&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;sudo snap install cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Golang&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;go install -v github.com/edoardottt/cariddi/cmd/cariddi@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pacman&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;pacman -Syu cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building from source&lt;/h3&gt; 
&lt;p&gt;You need &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; (&amp;gt;=1.23)&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Building from source for Linux and Windows&lt;/summary&gt; 
 &lt;h4&gt;Linux&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;git clone https://github.com/edoardottt/cariddi.git
cd cariddi
go get ./...
make linux # (to install)
make unlinux # (to uninstall)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;One-liner: &lt;code&gt;git clone https://github.com/edoardottt/cariddi.git &amp;amp;&amp;amp; cd cariddi &amp;amp;&amp;amp; go get ./... &amp;amp;&amp;amp; make linux&lt;/code&gt;&lt;/p&gt; 
 &lt;h4&gt;Windows&lt;/h4&gt; 
 &lt;p&gt;Note that the executable works only in cariddi folder.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;git clone https://github.com/edoardottt/cariddi.git
cd cariddi
go get ./...
.\make.bat windows # (to install)
.\make.bat unwindows # (to uninstall)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage 💡&lt;/h2&gt; 
&lt;p&gt;If you want to scan only a single target you can use&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;echo https://edoardottt.com/ | cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With multiple targets you can use a file instead, e.g. urls.txt containing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;https://edoardottt.com/
http://testphp.vulnweb.com/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Windows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;use &lt;code&gt;powershell.exe -Command "cat urls.txt | .\cariddi.exe"&lt;/code&gt; inside the Command prompt&lt;/li&gt; 
 &lt;li&gt;or just &lt;code&gt;cat urls.txt | cariddi.exe&lt;/code&gt; using PowerShell&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Basics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cariddi -version&lt;/code&gt; (Print the version)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cariddi -h&lt;/code&gt; (Print the help)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cariddi -examples&lt;/code&gt; (Print the examples)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scan options&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -intensive&lt;/code&gt; (Crawl searching also subdomains, same as &lt;code&gt;*.target.com&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -s&lt;/code&gt; (Hunt for secrets)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -err&lt;/code&gt; (Hunt for errors in websites)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -e&lt;/code&gt; (Hunt for juicy endpoints)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -info&lt;/code&gt; (Hunt for useful informations in websites)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -ext 2&lt;/code&gt; (Hunt for juicy (level 2 out of 7) files)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -e -ef endpoints_file&lt;/code&gt; (Hunt for custom endpoints)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -s -sf secrets_file&lt;/code&gt; (Hunt for custom secrets)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -ie pdf,png,jpg&lt;/code&gt; (Ignore these extensions while scanning)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Default: png, svg, jpg, jpeg, bmp, jfif, gif, webp, woff, woff2, ttf, tiff, tif are ignored while scanning for secrets, info and errors.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -proxy http://127.0.0.1:8080&lt;/code&gt; (Set a Proxy, http and socks5 supported)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -d 2&lt;/code&gt; (2 seconds between a page crawled and another)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -c 200&lt;/code&gt; (Set the concurrency level to 200)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -i forum,blog,community,open&lt;/code&gt; (Ignore urls containing these words)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -it ignore_file&lt;/code&gt; (Ignore urls containing at least one line in the input file)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -cache&lt;/code&gt; (Use the .cariddi_cache folder as cache)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -t 5&lt;/code&gt; (Set the timeout for the requests)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -headers "Cookie: auth=admin;type=2;; X-Custom: customHeader"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -headersfile headers.txt&lt;/code&gt; (Read from an external file custom headers)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -ua "Custom User Agent"&lt;/code&gt; (Use a custom User Agent)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -rua&lt;/code&gt; (Use a random browser user agent on every request)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Output&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -plain&lt;/code&gt; (Print only results)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -ot target_name&lt;/code&gt; (Results in txt file)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -oh target_name&lt;/code&gt; (Results in html file)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -json&lt;/code&gt; (Print the output as JSON in stdout)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -sr&lt;/code&gt; (Store HTTP responses)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -debug&lt;/code&gt; (Print debug information while crawling)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -md 3&lt;/code&gt; (Max 3 depth levels)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started 🎉&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;cariddi -h&lt;/code&gt; prints the help.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;Usage of cariddi:
  -c int
     Concurrency level. (default 20)
  -cache
     Use the .cariddi_cache folder as cache.
  -d int
     Delay between a page crawled and another.
  -debug
     Print debug information while crawling.
  -e Hunt for juicy endpoints.
  -ef string
     Use an external file (txt, one per line) to use custom parameters for endpoints hunting.
  -err
     Hunt for errors in websites.
  -examples
     Print the examples.
  -ext int
     Hunt for juicy file extensions. Integer from 1(juicy) to 7(not juicy).
  -h Print the help.
  -headers string
     Use custom headers for each request E.g. -headers "Cookie: auth=yes;;Client: type=2".
  -headersfile string
     Read from an external file custom headers (same format of headers flag).
  -json
     Print the output as JSON in stdout.
  -md
     Maximum depth level the crawler will follow from the initial target URL.
  -i string
     Ignore the URL containing at least one of the elements of this array.
  -ie value
     Comma-separated list of extensions to ignore while scanning.
  -info
     Hunt for useful informations in websites.
  -intensive
     Crawl searching for resources matching 2nd level domain.
  -it string
     Ignore the URL containing at least one of the lines of this file.
  -oh string
     Write the output into an HTML file.
  -ot string
     Write the output into a TXT file.
  -plain
     Print only the results.
  -proxy string
     Set a Proxy to be used (http and socks5 supported).
  -rua
     Use a random browser user agent on every request.
  -s Hunt for secrets.
  -sf string
     Use an external file (txt, one per line) to use custom regexes for secrets hunting.
  -sr
     Store HTTP responses.
  -t int
     Set timeout for the requests. (default 10)
  -ua string
     Use a custom User Agent.
  -version
     Print the version.
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to understand &lt;strong&gt;How to integrate cariddi with Burpsuite&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Normally you use Burpsuite within your browser, so you just have to trust the burpsuite's certificate in the browser and you're done.&lt;br /&gt; In order to use cariddi with the BurpSuite proxy you should do some steps further.&lt;/p&gt; 
 &lt;p&gt;If you try to use cariddi with the option &lt;code&gt;-proxy http://127.0.0.1:8080&lt;/code&gt; you will find this error in the burpsuite error log section:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;Received fatal alert: bad_certificate (or something similar related to the certificate).
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To make cariddi working fine with Burpsuite you have also to trust the certificate within your entire pc, not just only the browser. These are the steps you have to follow:&lt;/p&gt; 
 &lt;p&gt;Go to Proxy tab in Bupsuite, then Options. Click on the CA Certificate button and export Certificate in DER format&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;openssl x509 -in burp.der -inform DER -out burp.pem -outform PEM
sudo chown root:root burp.pem
sudo chmod 644 burp.pem
sudo cp burp.pem /usr/local/share/ca-certificates/
sudo c_rehash
cd /etc/ssl/certs/
sudo ln -s /usr/local/share/ca-certificates/burp.pem
sudo c_rehash .
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Source: Trust Burp Proxy certificate in Debian/Ubuntu&lt;/p&gt; 
 &lt;p&gt;After these steps, in order to use cariddi with Burpsuite you have to:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Open Burpsuite, making sure that the proxy is listening.&lt;/li&gt; 
  &lt;li&gt;Use cariddi with the flag &lt;code&gt;-proxy http://127.0.0.1:8080&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;You will see that requests and responses will be logged in Burpsuite.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h2&gt;Changelog 📌&lt;/h2&gt; 
&lt;p&gt;Detailed changes for each release are documented in the &lt;a href="https://github.com/edoardottt/cariddi/releases"&gt;release notes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing 🛠&lt;/h2&gt; 
&lt;p&gt;Just open an &lt;a href="https://github.com/edoardottt/cariddi/issues"&gt;issue&lt;/a&gt;/&lt;a href="https://github.com/edoardottt/cariddi/pulls"&gt;pull request&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before opening a pull request, download &lt;a href="https://golangci-lint.run/usage/install/"&gt;golangci-lint&lt;/a&gt; and run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;golangci-lint run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If there aren't errors, go ahead :)&lt;/p&gt; 
&lt;p&gt;Test using &lt;a href="https://edoardottt.github.io/cariddi-test/"&gt;https://edoardottt.github.io/cariddi-test/&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;echo "https://edoardottt.github.io/cariddi-test/" | cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Help me build this!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Special thanks to: &lt;a href="http://go-colly.org/"&gt;go-colly&lt;/a&gt;, &lt;a href="https://github.com/ocervell"&gt;ocervell&lt;/a&gt;, &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/config/gitleaks.toml"&gt;zricethezav&lt;/a&gt;, &lt;a href="https://github.com/projectdiscovery/nuclei-templates/tree/master/file/keys"&gt;projectdiscovery&lt;/a&gt;, &lt;a href="https://github.com/tomnomnom/gf/tree/master/examples"&gt;tomnomnom&lt;/a&gt;, &lt;a href="https://github.com/hahwul/RegexPassive"&gt;RegexPassive&lt;/a&gt; and &lt;a href="https://github.com/edoardottt/cariddi/graphs/contributors"&gt;all the contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License 📝&lt;/h2&gt; 
&lt;p&gt;This repository is under &lt;a href="https://github.com/edoardottt/cariddi/raw/main/LICENSE"&gt;GNU General Public License v3.0&lt;/a&gt;.&lt;br /&gt; &lt;a href="https://edoardottt.com/"&gt;edoardottt.com&lt;/a&gt; to contact me.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ory/kratos</title>
      <link>https://github.com/ory/kratos</link>
      <description>&lt;p&gt;Headless cloud-native authentication and identity management written in Go. Scales to a billion+ users. Replace Homegrown, Auth0, Okta, Firebase with better UX and DX. Passkeys, Social Sign In, OIDC, Magic Link, Multi-Factor Auth, SMS, SAML, TOTP, and more. Runs everywhere, runs best on Ory Network.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;&lt;img src="https://raw.githubusercontent.com/ory/meta/master/static/banners/kratos.svg?sanitize=true" alt="Ory Kratos - Cloud native Identity and User Management" /&gt;&lt;/h1&gt; 
&lt;h4 align="center"&gt; &lt;a href="https://www.ory.sh/chat"&gt;Chat&lt;/a&gt; | &lt;a href="https://github.com/ory/kratos/discussions"&gt;Discussions&lt;/a&gt; | &lt;a href="https://www.ory.sh/l/sign-up-newsletter"&gt;Newsletter&lt;/a&gt;&lt;br /&gt;&lt;br /&gt; &lt;a href="https://www.ory.sh/kratos/docs/"&gt;Guide&lt;/a&gt; | &lt;a href="https://www.ory.sh/kratos/docs/sdk/api"&gt;API Docs&lt;/a&gt; | &lt;a href="https://godoc.org/github.com/ory/kratos"&gt;Code Docs&lt;/a&gt;&lt;br /&gt;&lt;br /&gt; &lt;a href="https://console.ory.sh/"&gt;Support this project!&lt;/a&gt;&lt;br /&gt;&lt;br /&gt; &lt;a href="https://www.ory.sh/jobs/"&gt;Work in Open Source, Ory is hiring!&lt;/a&gt; &lt;/h4&gt; 
&lt;hr /&gt; 
&lt;p align="left"&gt; &lt;a href="https://github.com/ory/kratos/actions/workflows/ci.yaml"&gt;&lt;img src="https://github.com/ory/kratos/actions/workflows/ci.yaml/badge.svg?branch=master&amp;amp;event=push" alt="CI Tasks for Ory Kratos" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/ory/kratos"&gt;&lt;img src="https://codecov.io/gh/ory/kratos/branch/master/graph/badge.svg?token=6t0QqOdurR" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/4979"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/4979/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/ory" alt="sponsors on Open Collective"&gt;&lt;img src="https://opencollective.com/ory/backers/badge.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/ory" alt="Sponsors on Open Collective"&gt;&lt;img src="https://opencollective.com/ory/sponsors/badge.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ory/kratos/raw/master/CODE_OF_CONDUCT.md" alt="Ory Code of Conduct"&gt;&lt;img src="https://img.shields.io/badge/ory-code%20of%20conduct-green" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Ory Kratos is &lt;em&gt;the&lt;/em&gt; developer-friendly, security-hardened and battle-tested Identity, User Management and Authentication system for the Cloud. Finally, it is no longer necessary to implement User Login for the umpteenth time!&lt;/p&gt; 
&lt;h2&gt;Ory Kratos on the Ory Network&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://www.ory.sh/cloud"&gt;Ory Network&lt;/a&gt; is the fastest, most secure and worry-free way to use Ory's Services. &lt;strong&gt;Ory Identities&lt;/strong&gt; is powered by the Ory Kratos open source identity server, and it's fully API-compatible.&lt;/p&gt; 
&lt;p&gt;The Ory Network provides the infrastructure for modern end-to-end security:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Identity &amp;amp; credential management scaling to billions of users and devices&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Registration, Login and Account management flows for passkey, biometric, social, SSO and multi-factor authentication&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Pre-built login, registration and account management pages and components&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;OAuth2 and OpenID provider for single sign on, API access and machine-to-machine authorization&lt;/li&gt; 
 &lt;li&gt;Low-latency permission checks based on Google's Zanzibar model and with built-in support for the Ory Permission Language&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It's fully managed, highly available, developer &amp;amp; compliance-friendly!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GDPR-friendly secure storage with data locality&lt;/li&gt; 
 &lt;li&gt;Cloud-native APIs, compatible with Ory's Open Source servers&lt;/li&gt; 
 &lt;li&gt;Comprehensive admin tools with the web-based Ory Console and the Ory Command Line Interface (CLI)&lt;/li&gt; 
 &lt;li&gt;Extensive documentation, straightforward examples and easy-to-follow guides&lt;/li&gt; 
 &lt;li&gt;Fair, usage-based &lt;a href="https://www.ory.sh/pricing"&gt;pricing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sign up for a &lt;a href="https://console.ory.sh/registration?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=kratos-readme"&gt;&lt;strong&gt;free developer account&lt;/strong&gt;&lt;/a&gt; today!&lt;/p&gt; 
&lt;h2&gt;Ory Kratos On-premise support&lt;/h2&gt; 
&lt;p&gt;Are you running Ory Kratos in a mission-critical, commercial environment? The Ory Enterprise License (OEL) provides enhanced features, security, and expert support directly from the Ory core maintainers.&lt;/p&gt; 
&lt;p&gt;Organizations that require advanced features, enhanced security, and enterprise-grade support for Ory's identity and access management solutions benefit from the Ory Enterprise License (OEL) as a self-hosted, premium offering including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Additional features not available in the open-source version.&lt;/li&gt; 
 &lt;li&gt;Regular releases that address CVEs and security vulnerabilities, with strict SLAs for patching based on severity.&lt;/li&gt; 
 &lt;li&gt;Support for advanced scaling and multi-tenancy features.&lt;/li&gt; 
 &lt;li&gt;Premium support options, including SLAs, direct engineer access, and concierge onboarding.&lt;/li&gt; 
 &lt;li&gt;Access to private Docker registry for a faster, more reliable access to vetted enterprise builds.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A valid Ory Enterprise License and access to the Ory Enterprise Docker Registry are required to use these features. OEL is designed for mission-critical, production, and global applications where organizations need maximum control and flexibility over their identity infrastructure. Ory's offering is the only official program for qualified support from the maintainers. For more information book a meeting with the Ory team to &lt;strong&gt;&lt;a href="https://www.ory.sh/contact/"&gt;discuss your needs&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;p&gt;Install the &lt;a href="https://www.ory.sh/docs/guides/cli/installation"&gt;Ory CLI&lt;/a&gt; and create a new project to get started with Ory Identities right away:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# If you don't have Ory CLI installed yet:
bash &amp;lt;(curl https://raw.githubusercontent.com/ory/meta/master/install.sh) -b . ory
sudo mv ./ory /usr/local/bin/

# Sign up
ory auth

# Create project
ory create project
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; 
&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; 
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#ory-kratos-on-the-ory-network"&gt;Ory Kratos on the Ory Network&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#what-is-ory-kratos"&gt;What is Ory Kratos?&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#who-is-using-it"&gt;Who is using it?&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#getting-started"&gt;Getting Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#ecosystem"&gt;Ecosystem&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#ory-kratos-identity-and-user-infrastructure-and-management"&gt;Ory Kratos: Identity and User Infrastructure and Management&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#ory-hydra-oauth2--openid-connect-server"&gt;Ory Hydra: OAuth2 &amp;amp; OpenID Connect Server&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#ory-oathkeeper-identity--access-proxy"&gt;Ory Oathkeeper: Identity &amp;amp; Access Proxy&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#ory-keto-access-control-policies-as-a-server"&gt;Ory Keto: Access Control Policies as a Server&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#security"&gt;Security&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#disclosing-vulnerabilities"&gt;Disclosing vulnerabilities&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#telemetry"&gt;Telemetry&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#documentation"&gt;Documentation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#guide"&gt;Guide&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#http-api-documentation"&gt;HTTP API documentation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#upgrading-and-changelog"&gt;Upgrading and Changelog&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#command-line-documentation"&gt;Command line documentation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#develop"&gt;Develop&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#install-from-source"&gt;Install from source&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#formatting-code"&gt;Formatting Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#running-tests"&gt;Running Tests&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#short-tests"&gt;Short Tests&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#regular-tests"&gt;Regular Tests&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#updating-test-fixtures"&gt;Updating Test Fixtures&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#end-to-end-tests"&gt;End-to-End Tests&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#build-docker"&gt;Build Docker&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#documentation-tests"&gt;Documentation Tests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/ory/kratos/master/#preview-api-documentation"&gt;Preview API documentation&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; 
&lt;h2&gt;What is Ory Kratos?&lt;/h2&gt; 
&lt;p&gt;Ory Kratos is an API-first Identity and User Management system that is built according to &lt;a href="https://www.ory.sh/docs/ecosystem/software-architecture-philosophy"&gt;cloud architecture best practices&lt;/a&gt;. It implements core use cases that almost every software application needs to deal with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Self-service Login and Registration&lt;/strong&gt;: Allow end-users to create and sign into accounts (we call them &lt;strong&gt;identities&lt;/strong&gt;) using Username / Email and password combinations, Social Sign In ("Sign in with Google, GitHub"), Passwordless flows, and others.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-Factor Authentication (MFA/2FA)&lt;/strong&gt;: Support protocols such as TOTP (&lt;a href="https://tools.ietf.org/html/rfc6238"&gt;RFC 6238&lt;/a&gt; and &lt;a href="https://tools.ietf.org/html/rfc4226"&gt;IETF RFC 4226&lt;/a&gt; - better known as &lt;a href="https://en.wikipedia.org/wiki/Google_Authenticator"&gt;Google Authenticator&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Account Verification&lt;/strong&gt;: Verify that an E-Mail address, phone number, or physical address actually belong to that identity.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Account Recovery&lt;/strong&gt;: Recover access using "Forgot Password" flows, Security Codes (in case of MFA device loss), and others.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Profile and Account Management&lt;/strong&gt;: Update passwords, personal details, email addresses, linked social profiles using secure flows.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Admin APIs&lt;/strong&gt;: Import, update, delete identities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We highly recommend reading the &lt;a href="https://www.ory.sh/kratos/docs/"&gt;Ory Kratos introduction docs&lt;/a&gt; to learn more about Ory Krato's background, feature set, and differentiation from other products.&lt;/p&gt; 
&lt;h3&gt;Who is using it?&lt;/h3&gt; 
&lt;!--BEGIN ADOPTERS--&gt; 
&lt;p&gt;The Ory community stands on the shoulders of individuals, companies, and maintainers. The Ory team thanks everyone involved - from submitting bug reports and feature requests, to contributing patches and documentation. The Ory community counts more than 50.000 members and is growing. The Ory stack protects 7.000.000.000+ API requests every day across thousands of companies. None of this would have been possible without each and everyone of you!&lt;/p&gt; 
&lt;p&gt;The following list represents companies that have accompanied us along the way and that have made outstanding contributions to our ecosystem. &lt;em&gt;If you think that your company deserves a spot here, reach out to &lt;a href="mailto:office@ory.sh"&gt;&lt;/a&gt;&lt;a href="mailto:office@ory.sh"&gt;office@ory.sh&lt;/a&gt; now&lt;/em&gt;!&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Logo&lt;/th&gt; 
   &lt;th&gt;Website&lt;/th&gt; 
   &lt;th&gt;Case Study&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OpenAI&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/openai.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/openai.svg?sanitize=true" alt="OpenAI" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://openai.com/"&gt;openai.com&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ory.sh/case-studies/openai"&gt;OpenAI Case Study&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Fandom&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/fandom.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/fandom.svg?sanitize=true" alt="Fandom" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.fandom.com/"&gt;fandom.com&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ory.sh/case-studies/fandom"&gt;Fandom Case Study&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Lumin&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/lumin.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/lumin.svg?sanitize=true" alt="Lumin" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.luminpdf.com/"&gt;luminpdf.com&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ory.sh/case-studies/lumin"&gt;Lumin Case Study&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sencrop&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/sencrop.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/sencrop.svg?sanitize=true" alt="Sencrop" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://sencrop.com/"&gt;sencrop.com&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ory.sh/case-studies/sencrop"&gt;Sencrop Case Study&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;OSINT Industries&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/osint.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/osint.svg?sanitize=true" alt="OSINT Industries" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.osint.industries/"&gt;osint.industries&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ory.sh/case-studies/osint"&gt;OSINT Industries Case Study&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;HGV&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/hgv.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/hgv.svg?sanitize=true" alt="HGV" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.hgv.it/"&gt;hgv.it&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ory.sh/case-studies/hgv"&gt;HGV Case Study&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Maxroll&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/maxroll.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/maxroll.svg?sanitize=true" alt="Maxroll" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://maxroll.gg/"&gt;maxroll.gg&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ory.sh/case-studies/maxroll"&gt;Maxroll Case Study&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Zezam&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/zezam.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/zezam.svg?sanitize=true" alt="Zezam" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.zezam.io/"&gt;zezam.io&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.ory.sh/case-studies/zezam"&gt;Zezam Case Study&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;T.RowePrice&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/troweprice.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/troweprice.svg?sanitize=true" alt="T.RowePrice" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.troweprice.com/"&gt;troweprice.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mistral&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/mistral.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/mistral.svg?sanitize=true" alt="Mistral" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.mistral.ai/"&gt;mistral.ai&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Axel Springer&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/axelspringer.svg" /&gt; 
     &lt;img height="22px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/axelspringer.svg?sanitize=true" alt="Axel Springer" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.axelspringer.com/"&gt;axelspringer.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hemnet&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/hemnet.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/hemnet.svg?sanitize=true" alt="Hemnet" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.hemnet.se/"&gt;hemnet.se&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Cisco&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/cisco.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/cisco.svg?sanitize=true" alt="Cisco" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.cisco.com/"&gt;cisco.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Presidencia de la República Dominicana&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/republica-dominicana.svg" /&gt; 
     &lt;img height="42px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/republica-dominicana.svg?sanitize=true" alt="Presidencia de la República Dominicana" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.presidencia.gob.do/"&gt;presidencia.gob.do&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Moonpig&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/moonpig.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/moonpig.svg?sanitize=true" alt="Moonpig" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.moonpig.com/"&gt;moonpig.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Booster&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/booster.svg" /&gt; 
     &lt;img height="18px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/booster.svg?sanitize=true" alt="Booster" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.choosebooster.com/"&gt;choosebooster.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Zaptec&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/zaptec.svg" /&gt; 
     &lt;img height="24px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/zaptec.svg?sanitize=true" alt="Zaptec" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.zaptec.com/"&gt;zaptec.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Klarna&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/klarna.svg" /&gt; 
     &lt;img height="24px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/klarna.svg?sanitize=true" alt="Klarna" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.klarna.com/"&gt;klarna.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Raspberry PI Foundation&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/raspi.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/raspi.svg?sanitize=true" alt="Raspberry PI Foundation" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.raspberrypi.org/"&gt;raspberrypi.org&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Tulip&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/tulip.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/tulip.svg?sanitize=true" alt="Tulip Retail" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://tulip.com/"&gt;tulip.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Hootsuite&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/hootsuite.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/hootsuite.svg?sanitize=true" alt="Hootsuite" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://hootsuite.com/"&gt;hootsuite.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Segment&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/segment.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/segment.svg?sanitize=true" alt="Segment" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://segment.com/"&gt;segment.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Arduino&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/arduino.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/arduino.svg?sanitize=true" alt="Arduino" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.arduino.cc/"&gt;arduino.cc&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Sainsbury's&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/sainsburys.svg" /&gt; 
     &lt;img height="24px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/sainsburys.svg?sanitize=true" alt="Sainsbury's" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.sainsburys.co.uk/"&gt;sainsburys.co.uk&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Contraste&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/contraste.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/contraste.svg?sanitize=true" alt="Contraste" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.contraste.com/en"&gt;contraste.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;inMusic&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/inmusic.svg" /&gt; 
     &lt;img height="24px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/inmusic.svg?sanitize=true" alt="InMusic" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://inmusicbrands.com/"&gt;inmusicbrands.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Buhta&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/buhta.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/buhta.svg?sanitize=true" alt="Buhta" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://buhta.com/"&gt;buhta.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt;  
  &lt;tr&gt; 
   &lt;td&gt;Amplitude&lt;/td&gt; 
   &lt;td align="center"&gt; 
    &lt;picture&gt; 
     &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/amplitude.svg" /&gt; 
     &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/amplitude.svg?sanitize=true" alt="amplitude.com" /&gt; 
    &lt;/picture&gt; &lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://amplitude.com/"&gt;amplitude.com&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://tier4.jp/en/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/tieriv.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/tieriv.svg?sanitize=true" alt="TIER IV" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://kyma-project.io"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/kyma.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/kyma.svg?sanitize=true" alt="Kyma Project" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://serlo.org/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/serlo.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/serlo.svg?sanitize=true" alt="Serlo" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://padis.io/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/padis.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/padis.svg?sanitize=true" alt="Padis" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://cloudbear.eu/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/cloudbear.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/cloudbear.svg?sanitize=true" alt="Cloudbear" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://securityonionsolutions.com/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/securityonion.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/securityonion.svg?sanitize=true" alt="Security Onion Solutions" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://factlylabs.com/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/factly.svg" /&gt;
      &lt;img height="24px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/factly.svg?sanitize=true" alt="Factly" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://cashdeck.com.au/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/allmyfunds.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/allmyfunds.svg?sanitize=true" alt="All My Funds" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://nortal.com/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/nortal.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/nortal.svg?sanitize=true" alt="Nortal" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://www.ordermygear.com/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/ordermygear.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/ordermygear.svg?sanitize=true" alt="OrderMyGear" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://r2devops.io/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/r2devops.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/r2devops.svg?sanitize=true" alt="R2Devops" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://www.paralus.io/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/paralus.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/paralus.svg?sanitize=true" alt="Paralus" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&lt;a href="https://dyrector.io/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/dyrector_io.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/dyrector_io.svg?sanitize=true" alt="dyrector.io" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://pinniped.dev/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/pinniped.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/pinniped.svg?sanitize=true" alt="pinniped.dev" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://pvotal.tech/"&gt;
     &lt;picture&gt;
      &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/pvotal.svg" /&gt;
      &lt;img height="32px" src="https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/pvotal.svg?sanitize=true" alt="pvotal.tech" /&gt;
     &lt;/picture&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Many thanks to all individual contributors&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://opencollective.com/ory" target="_blank"&gt;&lt;img src="https://opencollective.com/ory/contributors.svg?width=890&amp;amp;limit=714&amp;amp;button=false" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!--END ADOPTERS--&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;To get started with some easy examples, head over to the &lt;a href="https://www.ory.sh/docs/guides/protect-page-login/"&gt;Get Started Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;Head over to the &lt;a href="https://www.ory.sh/kratos/docs/install"&gt;Ory Developer Documentation&lt;/a&gt; to learn how to install Ory Kratos on Linux, macOS, Windows, and Docker and how to build Ory Kratos from source.&lt;/p&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;!--BEGIN ECOSYSTEM--&gt; 
&lt;p&gt;We build Ory on several guiding principles when it comes to our architecture design:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimal dependencies&lt;/li&gt; 
 &lt;li&gt;Runs everywhere&lt;/li&gt; 
 &lt;li&gt;Scales without effort&lt;/li&gt; 
 &lt;li&gt;Minimize room for human and network errors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Ory's architecture is designed to run best on a Container Orchestration system such as Kubernetes, CloudFoundry, OpenShift, and similar projects. Binaries are small (5-15MB) and available for all popular processor types (ARM, AMD64, i386) and operating systems (FreeBSD, Linux, macOS, Windows) without system dependencies (Java, Node, Ruby, libxml, ...).&lt;/p&gt; 
&lt;h3&gt;Ory Kratos: Identity and User Infrastructure and Management&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/ory/kratos"&gt;Ory Kratos&lt;/a&gt; is an API-first Identity and User Management system that is built according to &lt;a href="https://www.ory.sh/docs/next/ecosystem/software-architecture-philosophy"&gt;cloud architecture best practices&lt;/a&gt;. It implements core use cases that almost every software application needs to deal with: Self-service Login and Registration, Multi-Factor Authentication (MFA/2FA), Account Recovery and Verification, Profile, and Account Management.&lt;/p&gt; 
&lt;h3&gt;Ory Hydra: OAuth2 &amp;amp; OpenID Connect Server&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/ory/hydra"&gt;Ory Hydra&lt;/a&gt; is an OpenID Certified™ OAuth2 and OpenID Connect Provider which easily connects to any existing identity system by writing a tiny "bridge" application. It gives absolute control over the user interface and user experience flows.&lt;/p&gt; 
&lt;h3&gt;Ory Oathkeeper: Identity &amp;amp; Access Proxy&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/ory/oathkeeper"&gt;Ory Oathkeeper&lt;/a&gt; is a BeyondCorp/Zero Trust Identity &amp;amp; Access Proxy (IAP) with configurable authentication, authorization, and request mutation rules for your web services: Authenticate JWT, Access Tokens, API Keys, mTLS; Check if the contained subject is allowed to perform the request; Encode resulting content into custom headers (&lt;code&gt;X-User-ID&lt;/code&gt;), JSON Web Tokens and more!&lt;/p&gt; 
&lt;h3&gt;Ory Keto: Access Control Policies as a Server&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/ory/keto"&gt;Ory Keto&lt;/a&gt; is a policy decision point. It uses a set of access control policies, similar to AWS IAM Policies, in order to determine whether a subject (user, application, service, car, ...) is authorized to perform a certain action on a resource.&lt;/p&gt; 
&lt;!--END ECOSYSTEM--&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;Running identity infrastructure requires &lt;a href="https://www.ory.sh/kratos/docs/concepts/security"&gt;attention and knowledge of threat models&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Disclosing vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you think you found a security vulnerability, please refrain from posting it publicly on the forums, the chat, or GitHub. You can find all info for responsible disclosure in our &lt;a href="https://www.ory.sh/.well-known/security.txt"&gt;security.txt&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Telemetry&lt;/h2&gt; 
&lt;p&gt;Ory's services collect summarized, anonymized data that can optionally be turned off. Click &lt;a href="https://www.ory.sh/docs/ecosystem/sqa"&gt;here&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;h3&gt;Guide&lt;/h3&gt; 
&lt;p&gt;The Guide is available &lt;a href="https://www.ory.sh/kratos/docs"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;HTTP API documentation&lt;/h3&gt; 
&lt;p&gt;The HTTP API is documented &lt;a href="https://www.ory.sh/kratos/docs/sdk/api"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Upgrading and Changelog&lt;/h3&gt; 
&lt;p&gt;New releases might introduce breaking changes. To help you identify and incorporate those changes, we document these changes in the &lt;a href="https://raw.githubusercontent.com/ory/kratos/master/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;. For upgrading, please visit the &lt;a href="https://www.ory.sh/kratos/docs/guides/upgrade"&gt;upgrade guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Command line documentation&lt;/h3&gt; 
&lt;p&gt;Run &lt;code type="shell/command"&gt;kratos -h&lt;/code&gt; or &lt;code type="shell/command"&gt;kratos help&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Develop&lt;/h3&gt; 
&lt;p&gt;We encourage all contributions and encourage you to read our &lt;a href="https://raw.githubusercontent.com/ory/kratos/master/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Dependencies&lt;/h4&gt; 
&lt;p&gt;You need Go 1.16+ and (for the test suites):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker and Docker Compose&lt;/li&gt; 
 &lt;li&gt;Makefile&lt;/li&gt; 
 &lt;li&gt;NodeJS / npm&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is possible to develop Ory Kratos on Windows, but please be aware that all guides assume a Unix shell like bash or zsh.&lt;/p&gt; 
&lt;h4&gt;Install from source&lt;/h4&gt; 
&lt;pre type="make/command"&gt;
make install
&lt;/pre&gt; 
&lt;h4&gt;Formatting Code&lt;/h4&gt; 
&lt;p&gt;You can format all code using &lt;code type="make/command"&gt;make format&lt;/code&gt;. Our CI checks if your code is properly formatted.&lt;/p&gt; 
&lt;h4&gt;Running Tests&lt;/h4&gt; 
&lt;p&gt;There are three types of tests you can run:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Short tests (do not require a SQL database like PostgreSQL)&lt;/li&gt; 
 &lt;li&gt;Regular tests (do require PostgreSQL, MySQL, CockroachDB)&lt;/li&gt; 
 &lt;li&gt;End to end tests (do require databases and will use a test browser)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Short Tests&lt;/h5&gt; 
&lt;p&gt;Short tests run fairly quickly. You can either test all of the code at once&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;go test -short -tags sqlite ./...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or test just a specific module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cd client; go test -tags sqlite -short .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Regular Tests&lt;/h5&gt; 
&lt;p&gt;Regular tests require a database set up. Our test suite is able to work with docker directly (using &lt;a href="https://github.com/ory/dockertest"&gt;ory/dockertest&lt;/a&gt;) but we encourage to use the Makefile instead. Using dockertest can bloat the number of Docker Images on your system and are quite slow. Instead we recommend doing:&lt;/p&gt; 
&lt;pre type="make/command"&gt;
make test
&lt;/pre&gt; 
&lt;p&gt;Please be aware that &lt;code type="make/command"&gt;make test&lt;/code&gt; recreates the databases every time you run &lt;code type="make/command"&gt;make test&lt;/code&gt;. This can be annoying if you are trying to fix something very specific and need the database tests all the time. In that case we suggest that you initialize the databases with:&lt;/p&gt; 
&lt;a type="make/command"&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;make test-resetdb
export TEST_DATABASE_MYSQL='mysql://root:secret@(127.0.0.1:3444)/mysql?parseTime=true'
export TEST_DATABASE_POSTGRESQL='postgres://postgres:secret@127.0.0.1:3445/kratos?sslmode=disable'
export TEST_DATABASE_COCKROACHDB='cockroach://root@127.0.0.1:3446/defaultdb?sslmode=disable'
&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt; 
&lt;p&gt;Then you can run &lt;code&gt;go test&lt;/code&gt; as often as you'd like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;go test -tags sqlite ./...

# or in a module:
cd client; go test  -tags sqlite  .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Updating Test Fixtures&lt;/h5&gt; 
&lt;p&gt;Some tests use fixtures. If payloads change, you can update them with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;make test-update-snapshots
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will only update the snapshots of the short tests. To update all snapshots, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;UPDATE_SNAPSHOTS=true go test -p 4 -tags sqlite ./...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also run this command from a sub folder.&lt;/p&gt; 
&lt;h5&gt;End-to-End Tests&lt;/h5&gt; 
&lt;p&gt;We use &lt;a href="https://www.cypress.io"&gt;Cypress&lt;/a&gt; to run our e2e tests.&lt;/p&gt; 
&lt;p&gt;⚠️ To run Cypress on ARM based Mac's, at the moment it is &lt;a href="https://www.cypress.io/blog/2021/01/20/running-cypress-on-the-apple-m1-silicon-arm-architecture-using-rosetta-2/"&gt;necessary to install Rosetta 2&lt;/a&gt;. To install, use the command - &lt;code&gt;softwareupdate --install-rosetta --agree-to-license&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The simplest way to develop e2e tests is:&lt;/p&gt; 
&lt;pre type="repo/executable"&gt;
./test/e2e/run.sh --dev sqlite
&lt;/pre&gt; 
&lt;p&gt;You can run all tests (with databases) using:&lt;/p&gt; 
&lt;pre type="make/command"&gt;
make test-e2e
&lt;/pre&gt; 
&lt;p&gt;For more details, run:&lt;/p&gt; 
&lt;pre type="repo/executable"&gt;
./test/e2e/run.sh
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run only a singular test&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Add &lt;code&gt;.only&lt;/code&gt; to the test you would like to run.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-ts"&gt;it.only('invalid remote recovery email template', () =&amp;gt; {
    ...
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run a subset of tests&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This will require editing the &lt;code&gt;cypress.json&lt;/code&gt; file located in the &lt;code&gt;test/e2e/&lt;/code&gt; folder.&lt;/p&gt; 
&lt;p&gt;Add the &lt;code&gt;testFiles&lt;/code&gt; option and specify the test to run inside the &lt;code&gt;cypress/integration&lt;/code&gt; folder. As an example we will add only the &lt;code&gt;network&lt;/code&gt; tests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;"testFiles": ["profiles/network/*"],
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now start the tests again using the run script or makefile.&lt;/p&gt; 
&lt;h4&gt;Build Docker&lt;/h4&gt; 
&lt;p&gt;You can build a development Docker Image using:&lt;/p&gt; 
&lt;pre type="make/command"&gt;
make docker
&lt;/pre&gt; 
&lt;h4&gt;Preview API documentation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;update the SDK including the OpenAPI specification: &lt;code type="make/command"&gt;make sdk&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;run preview server for API documentation: &lt;code type="make/command"&gt;make docs/api&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;run preview server for swagger documentation: &lt;code type="make/command"&gt;make docs/swagger&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>anchore/grype</title>
      <link>https://github.com/anchore/grype</link>
      <description>&lt;p&gt;A vulnerability scanner for container images and filesystems&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="Grype logo" src="https://user-images.githubusercontent.com/5199289/136855393-d0a9eef9-ccf1-4e2b-9d7c-7aad16a567e5.png" width="234" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &amp;nbsp;&lt;a href="https://github.com/anchore/grype/actions?query=workflow%3A%22Static+Analysis+%2B+Unit+%2B+Integration%22"&gt;&lt;img src="https://github.com/anchore/grype/workflows/Static%20Analysis%20+%20Unit%20+%20Integration/badge.svg?sanitize=true" alt="Static Analysis + Unit + Integration" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://github.com/anchore/grype/actions/workflows/validations.yaml"&gt;&lt;img src="https://github.com/anchore/grype/workflows/Validations/badge.svg?sanitize=true" alt="Validations" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://goreportcard.com/report/github.com/anchore/grype"&gt;&lt;img src="https://goreportcard.com/badge/github.com/anchore/grype" alt="Go Report Card" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://github.com/anchore/grype/releases/latest"&gt;&lt;img src="https://img.shields.io/github/release/anchore/grype.svg?sanitize=true" alt="GitHub release" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://github.com/anchore/grype"&gt;&lt;img src="https://img.shields.io/github/go-mod/go-version/anchore/grype.svg?sanitize=true" alt="GitHub go.mod Go version" /&gt;&lt;/a&gt;&amp;nbsp; &lt;br /&gt; &amp;nbsp;&lt;a href="https://github.com/anchore/grype/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" alt="License: Apache-2.0" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://anchore.com/discourse"&gt;&lt;img src="https://img.shields.io/badge/Discourse-Join-blue?logo=discourse" alt="Join our Discourse" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a rel="me" href="https://fosstodon.org/@grype"&gt;&lt;img src="https://img.shields.io/badge/Mastodon-Follow-blue?logoColor=white&amp;amp;logo=mastodon" alt="Follow on Mastodon" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://scorecard.dev/viewer/?uri=github.com/anchore/grype"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/anchore/grype/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://www.bestpractices.dev/projects/6708"&gt;&lt;img src="https://www.bestpractices.dev/projects/6708/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt;&amp;nbsp; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;A vulnerability scanner for container images and filesystems. Easily &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#installation"&gt;install the binary&lt;/a&gt; to try it out. Works with &lt;a href="https://github.com/anchore/syft"&gt;Syft&lt;/a&gt;, the powerful SBOM (software bill of materials) tool for container images and filesystems.&lt;/p&gt; 
&lt;h3&gt;Join our community meetings!&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Calendar: &lt;a href="https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t"&gt;https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Agenda: &lt;a href="https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing"&gt;https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing&lt;/a&gt; (join &lt;a href="https://groups.google.com/g/anchore-oss-community"&gt;this group&lt;/a&gt; for write access)&lt;/li&gt; 
 &lt;li&gt;All are welcome!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For commercial support options with Syft or Grype, please &lt;a href="https://get.anchore.com/contact/"&gt;contact Anchore&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/590471/90276236-9868f300-de31-11ea-8068-4268b6b68529.gif" alt="grype-demo" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Scan the contents of a container image or filesystem to find known vulnerabilities.&lt;/li&gt; 
 &lt;li&gt;Find vulnerabilities for major operating system packages: 
  &lt;ul&gt; 
   &lt;li&gt;Alpine&lt;/li&gt; 
   &lt;li&gt;Amazon Linux&lt;/li&gt; 
   &lt;li&gt;Azure Linux (previously CBL-Mariner)&lt;/li&gt; 
   &lt;li&gt;BusyBox&lt;/li&gt; 
   &lt;li&gt;CentOS&lt;/li&gt; 
   &lt;li&gt;Debian&lt;/li&gt; 
   &lt;li&gt;Echo&lt;/li&gt; 
   &lt;li&gt;Distroless&lt;/li&gt; 
   &lt;li&gt;MinimOS&lt;/li&gt; 
   &lt;li&gt;Oracle Linux&lt;/li&gt; 
   &lt;li&gt;Red Hat (RHEL)&lt;/li&gt; 
   &lt;li&gt;Ubuntu&lt;/li&gt; 
   &lt;li&gt;Wolfi&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Find vulnerabilities for language-specific packages: 
  &lt;ul&gt; 
   &lt;li&gt;Ruby (Gems)&lt;/li&gt; 
   &lt;li&gt;Java (JAR, WAR, EAR, JPI, HPI)&lt;/li&gt; 
   &lt;li&gt;JavaScript (NPM, Yarn)&lt;/li&gt; 
   &lt;li&gt;Python (Egg, Wheel, Poetry, requirements.txt/setup.py files)&lt;/li&gt; 
   &lt;li&gt;Dotnet (deps.json)&lt;/li&gt; 
   &lt;li&gt;Golang (go.mod)&lt;/li&gt; 
   &lt;li&gt;PHP (Composer)&lt;/li&gt; 
   &lt;li&gt;Rust (Cargo)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Supports Docker, OCI and &lt;a href="https://github.com/sylabs/singularity"&gt;Singularity&lt;/a&gt; image formats.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openvex"&gt;OpenVEX&lt;/a&gt; support for filtering and augmenting scanning results.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you encounter an issue, please &lt;a href="https://github.com/anchore/grype/issues"&gt;let us know using the issue tracker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Recommended&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://get.anchore.io/grype | sudo sh -s -- -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install script options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-b&lt;/code&gt;: Specify a custom installation directory (defaults to &lt;code&gt;./bin&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: More verbose logging levels (&lt;code&gt;-d&lt;/code&gt; for debug, &lt;code&gt;-dd&lt;/code&gt; for trace)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: Verify the signature of the downloaded artifact before installation (requires &lt;a href="https://github.com/sigstore/cosign"&gt;&lt;code&gt;cosign&lt;/code&gt;&lt;/a&gt; to be installed)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Chocolatey&lt;/h3&gt; 
&lt;p&gt;The chocolatey distribution of grype is community-maintained and not distributed by the anchore team.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;choco install grype -y
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew tap anchore/grype
brew install grype
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MacPorts&lt;/h3&gt; 
&lt;p&gt;On macOS, Grype can additionally be installed from the &lt;a href="https://ports.macports.org/port/grype/"&gt;community-maintained port&lt;/a&gt; via MacPorts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo port install grype
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently, Grype is built only for macOS and Linux.&lt;/p&gt; 
&lt;h3&gt;From source&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/DEVELOPING.md#native-development"&gt;DEVELOPING.md&lt;/a&gt; for instructions to build and run from source.&lt;/p&gt; 
&lt;h3&gt;GitHub Actions&lt;/h3&gt; 
&lt;p&gt;If you're using GitHub Actions, you can use our &lt;a href="https://github.com/marketplace/actions/anchore-container-scan"&gt;Grype-based action&lt;/a&gt; to run vulnerability scans on your code or container images during your CI workflows.&lt;/p&gt; 
&lt;h2&gt;Verifying the artifacts&lt;/h2&gt; 
&lt;p&gt;Checksums are applied to all artifacts, and the resulting checksum file is signed using cosign.&lt;/p&gt; 
&lt;p&gt;You need the following tool to verify signature:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.sigstore.dev/cosign/system_config/installation/"&gt;Cosign&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Verification steps are as follow:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the files you want, and the checksums.txt, checksums.txt.pem and checksums.txt.sig files from the &lt;a href="https://github.com/anchore/grype/releases"&gt;releases&lt;/a&gt; page:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Verify the signature:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cosign verify-blob &amp;lt;path to checksum.txt&amp;gt; \
--certificate &amp;lt;path to checksums.txt.pem&amp;gt; \
--signature &amp;lt;path to checksums.txt.sig&amp;gt; \
--certificate-identity-regexp 'https://github\.com/anchore/grype/\.github/workflows/.+' \
--certificate-oidc-issuer "https://token.actions.githubusercontent.com"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Once the signature is confirmed as valid, you can proceed to validate that the SHA256 sums align with the downloaded artifact:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sha256sum --ignore-missing -c checksums.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#installation"&gt;Install the binary&lt;/a&gt;, and make sure that &lt;code&gt;grype&lt;/code&gt; is available in your path. To scan for vulnerabilities in an image:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command scans for vulnerabilities visible in the container (i.e., the squashed representation of the image). To include software from all image layers in the vulnerability scan, regardless of its presence in the final image, provide &lt;code&gt;--scope all-layers&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt; --scope all-layers
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run grype from a Docker container so it can scan a running container, use the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;docker run --rm \
--volume /var/run/docker.sock:/var/run/docker.sock \
--name Grype anchore/grype:latest \
$(ImageName):$(ImageTag)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Supported sources&lt;/h2&gt; 
&lt;p&gt;Grype can scan a variety of sources beyond those found in Docker.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# scan a container image archive (from the result of `docker image save ...`, `podman save ...`, or `skopeo copy` commands)
grype path/to/image.tar

# scan a Singularity Image Format (SIF) container
grype path/to/image.sif

# scan a directory
grype dir:path/to/dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Sources can be explicitly provided with a scheme:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;podman:yourrepo/yourimage:tag          use images from the Podman daemon
docker:yourrepo/yourimage:tag          use images from the Docker daemon
docker-archive:path/to/yourimage.tar   use a tarball from disk for archives created from "docker save"
oci-archive:path/to/yourimage.tar      use a tarball from disk for OCI archives (from Skopeo or otherwise)
oci-dir:path/to/yourimage              read directly from a path on disk for OCI layout directories (from Skopeo or otherwise)
singularity:path/to/yourimage.sif      read directly from a Singularity Image Format (SIF) container on disk
dir:path/to/yourproject                read directly from a path on disk (any directory)
file:path/to/yourfile                  read directly from a file on disk
sbom:path/to/syft.json                 read Syft JSON from path on disk
registry:yourrepo/yourimage:tag        pull image directly from a registry (no container runtime required)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If an image source is not provided and cannot be detected from the given reference it is assumed the image should be pulled from the Docker daemon. If docker is not present, then the Podman daemon is attempted next, followed by reaching out directly to the image registry last.&lt;/p&gt; 
&lt;p&gt;This default behavior can be overridden with the &lt;code&gt;default-image-pull-source&lt;/code&gt; configuration option (See &lt;a href="https://github.com/anchore/grype#configuration"&gt;Configuration&lt;/a&gt; for more details).&lt;/p&gt; 
&lt;p&gt;Use SBOMs for even faster vulnerability scanning in Grype:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Then scan for new vulnerabilities as frequently as needed
grype sbom:./sbom.json

# (You can also pipe the SBOM into Grype)
cat ./sbom.json | grype
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Grype supports input of &lt;a href="https://github.com/anchore/syft"&gt;Syft&lt;/a&gt;, &lt;a href="https://spdx.dev/"&gt;SPDX&lt;/a&gt;, and &lt;a href="https://cyclonedx.org/"&gt;CycloneDX&lt;/a&gt; SBOM formats. If Syft has generated any of these file types, they should have the appropriate information to work properly with Grype. It is also possible to use SBOMs generated by other tools with varying degrees of success. Two things that make Grype matching more successful are the inclusion of CPE and Linux distribution information. If an SBOM does not include any CPE information, it is possible to generate these based on package information using the &lt;code&gt;--add-cpes-if-none&lt;/code&gt; flag. To specify a distribution, use the &lt;code&gt;--distro &amp;lt;distro&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt; flag. A full example is:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype --add-cpes-if-none --distro alpine:3.10 sbom:some-alpine-3.10.spdx.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Threat &amp;amp; Risk Prioritization&lt;/h2&gt; 
&lt;p&gt;This section explains the columns and UI cues that help prioritize remediation efforts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Severity&lt;/strong&gt;: String severity based on CVSS scores and indicate the significance of a vulnerability in levels. This balances concerns such as ease of exploitability, and the potential to affect confidentiality, integrity, and availability of software and services.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;EPSS&lt;/strong&gt;: &lt;a href="https://www.first.org/epss/model"&gt;Exploit Prediction Scoring System&lt;/a&gt; is a metric expressing the likelihood that a vulnerability will be exploited in the wild over the next 30 days (on a 0–1 scale); higher values signal a greater likelihood of exploitation. The table output shows the EPSS percentile, a one-way transform of the EPSS score showing the proportion of all scored vulnerabilities with an equal or lower probability. Percentiles linearize a heavily skewed distribution, making threshold choice (e.g. “only CVEs above the 90th percentile”) straightforward.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;KEV Indicator&lt;/strong&gt;: Flags entries from CISA’s &lt;a href="https://www.cisa.gov/known-exploited-vulnerabilities-catalog"&gt;Known Exploited Vulnerabilities Catalog&lt;/a&gt; --an authoritative list of flaws observed being exploited in the wild.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Risk Score&lt;/strong&gt;: A composite 0–100 metric calculated as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-markdown"&gt;risk = min(1, threat * average(severity)) * 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;severity&lt;/code&gt; is the average of all CVSS scores and string severity for a vulnerability (scaled between 0–1).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;threat&lt;/code&gt; is the EPSS score (between 0–1). If the vulnerability is on the KEV list then &lt;code&gt;threat&lt;/code&gt; is &lt;code&gt;1.05&lt;/code&gt;, or &lt;code&gt;1.1&lt;/code&gt; if the vulnerability is associated with a ransomware campaign. This metric is one way to combine EPSS and CVSS suggested in the &lt;a href="https://www.first.org/epss/user-guide"&gt;EPSS user guide&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Suggested Fixes&lt;/strong&gt;: All possible fixes for a package are listed, however, when multiple fixes are available, we de-emphasize all upgrade paths except for the minimal upgrade path (which highlights the smallest, safest version bump).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Results default to sorting by Risk Score and can be overridden with &lt;code&gt;--sort-by &amp;lt;value&amp;gt;&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: sort by severity&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;epss&lt;/code&gt;: sort by EPSS percentile (aka, "threat")&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;risk&lt;/code&gt;: sort by risk score&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;kev&lt;/code&gt;: just like risk, except that KEV entries are always above non-KEV entries&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;package&lt;/code&gt;: sort by package name, version, type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vulnerability&lt;/code&gt;: sort by vulnerability ID&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported versions&lt;/h3&gt; 
&lt;p&gt;Software updates are always applied to the latest version of Grype; fixes are not backported to any previous versions of Grype.&lt;/p&gt; 
&lt;p&gt;In terms of database updates, any version of Grype before v0.51.0 (Oct 2022, before schema v5) will not receive vulnerability database updates. You can still build vulnerability databases for unsupported Grype releases by using previous releases of &lt;a href="https://github.com/anchore/vunnel"&gt;vunnel&lt;/a&gt; to gather the upstream data and &lt;a href="https://github.com/anchore/grype-db"&gt;grype-db&lt;/a&gt; to build databases for unsupported schemas.&lt;/p&gt; 
&lt;p&gt;Only the latest database schema is considered to be supported. When a new database schema is introduced then the one it replaces is marked as deprecated. Deprecated schemas will continue to receive updates for at least one year after they are marked as deprecated at which point they will no longer be supported.&lt;/p&gt; 
&lt;h3&gt;Working with attestations&lt;/h3&gt; 
&lt;p&gt;Grype supports scanning SBOMs as input via stdin. Users can use &lt;a href="https://github.com/sigstore/cosign"&gt;cosign&lt;/a&gt; to verify attestations with an SBOM as its content to scan an image for vulnerabilities:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;COSIGN_EXPERIMENTAL=1 cosign verify-attestation caphill4/java-spdx-tools:latest \
| jq -r .payload \
| base64 --decode \
| jq -r .predicate.Data \
| grype
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Vulnerability Summary&lt;/h3&gt; 
&lt;h4&gt;Basic Grype Vulnerability Data Shape&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt; {
  "vulnerability": {
    ...
  },
  "relatedVulnerabilities": [
    ...
  ],
  "matchDetails": [
    ...
  ],
  "artifact": {
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Vulnerability&lt;/strong&gt;: All information on the specific vulnerability that was directly matched on (e.g. ID, severity, CVSS score, fix information, links for more information)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;RelatedVulnerabilities&lt;/strong&gt;: Information pertaining to vulnerabilities found to be related to the main reported vulnerability. Maybe the vulnerability we matched on was a GitHub Security Advisory, which has an upstream CVE (in the authoritative national vulnerability database). In these cases we list the upstream vulnerabilities here.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MatchDetails&lt;/strong&gt;: This section tries to explain what we searched for while looking for a match and exactly what details on the package and vulnerability that lead to a match.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Artifact&lt;/strong&gt;: This is a subset of the information that we know about the package (when compared to the &lt;a href="https://github.com/anchore/syft"&gt;Syft&lt;/a&gt; json output, we summarize the metadata section). This has information about where within the container image or directory we found the package, what kind of package it is, licensing info, pURLs, CPEs, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Excluding file paths&lt;/h3&gt; 
&lt;p&gt;Grype can exclude files and paths from being scanned within a source by using glob expressions with one or more &lt;code&gt;--exclude&lt;/code&gt; parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype &amp;lt;source&amp;gt; --exclude './out/**/*.json' --exclude /etc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in the case of &lt;em&gt;image scanning&lt;/em&gt;, since the entire filesystem is scanned it is possible to use absolute paths like &lt;code&gt;/etc&lt;/code&gt; or &lt;code&gt;/usr/**/*.txt&lt;/code&gt; whereas &lt;em&gt;directory scans&lt;/em&gt; exclude files &lt;em&gt;relative to the specified directory&lt;/em&gt;. For example: scanning &lt;code&gt;/usr/foo&lt;/code&gt; with &lt;code&gt;--exclude ./package.json&lt;/code&gt; would exclude &lt;code&gt;/usr/foo/package.json&lt;/code&gt; and &lt;code&gt;--exclude '**/package.json'&lt;/code&gt; would exclude all &lt;code&gt;package.json&lt;/code&gt; files under &lt;code&gt;/usr/foo&lt;/code&gt;. For &lt;em&gt;directory scans&lt;/em&gt;, it is required to begin path expressions with &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;*/&lt;/code&gt;, or &lt;code&gt;**/&lt;/code&gt;, all of which will be resolved &lt;em&gt;relative to the specified scan directory&lt;/em&gt;. Keep in mind, your shell may attempt to expand wildcards, so put those parameters in single quotes, like: &lt;code&gt;'**/*.json'&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;External Sources&lt;/h3&gt; 
&lt;p&gt;Grype can be configured to incorporate external data sources for added fidelity in vulnerability matching. This feature is currently disabled by default. To enable this feature add the following to the grype config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;external-sources:
  enable: true
  maven:
    search-upstream-by-sha1: true
    base-url: https://search.maven.org/solrsearch/select
    rate-limit: 300ms # Time between Maven API requests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also configure the base-url if you're using another registry as your maven endpoint.&lt;/p&gt; 
&lt;p&gt;The rate at which Maven API requests are made can be configured to match your environment's requirements. The default is 300ms between requests.&lt;/p&gt; 
&lt;h3&gt;Output formats&lt;/h3&gt; 
&lt;p&gt;The output format for Grype is configurable as well:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt; -o &amp;lt;format&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where the formats available are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;table&lt;/code&gt;: A columnar summary (default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cyclonedx&lt;/code&gt;: An XML report conforming to the &lt;a href="https://cyclonedx.org/specification/overview/"&gt;CycloneDX 1.6 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cyclonedx-json&lt;/code&gt;: A JSON report conforming to the &lt;a href="https://cyclonedx.org/specification/overview/"&gt;CycloneDX 1.6 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: Use this to get as much information out of Grype as possible!&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sarif&lt;/code&gt;: Use this option to get a &lt;a href="https://docs.oasis-open.org/sarif/sarif/v2.1.0/sarif-v2.1.0.html"&gt;SARIF&lt;/a&gt; report (Static Analysis Results Interchange Format)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;template&lt;/code&gt;: Lets the user specify the output format. See &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#using-templates"&gt;"Using templates"&lt;/a&gt; below.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Using templates&lt;/h3&gt; 
&lt;p&gt;Grype lets you define custom output formats, using &lt;a href="https://golang.org/pkg/text/template/"&gt;Go templates&lt;/a&gt;. Here's how it works:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Define your format as a Go template, and save this template as a file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set the output format to "template" (&lt;code&gt;-o template&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Specify the path to the template file (&lt;code&gt;-t ./path/to/custom.template&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Grype's template processing uses the same data models as the &lt;code&gt;json&lt;/code&gt; output format — so if you're wondering what data is available as you author a template, you can use the output from &lt;code&gt;grype &amp;lt;image&amp;gt; -o json&lt;/code&gt; as a reference.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; Templates can access information about the system they are running on, such as environment variables. You should never run untrusted templates.&lt;/p&gt; 
&lt;p&gt;There are several example templates in the &lt;a href="https://github.com/anchore/grype/tree/main/templates"&gt;templates&lt;/a&gt; directory in the Grype source which can serve as a starting point for a custom output format. For example, &lt;a href="https://github.com/anchore/grype/raw/main/templates/csv.tmpl"&gt;csv.tmpl&lt;/a&gt; produces a vulnerability report in CSV (comma separated value) format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;"Package","Version Installed","Vulnerability ID","Severity"
"coreutils","8.30-3ubuntu2","CVE-2016-2781","Low"
"libc-bin","2.31-0ubuntu9","CVE-2016-10228","Negligible"
"libc-bin","2.31-0ubuntu9","CVE-2020-6096","Low"
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also find the template for the default "table" output format in the same place.&lt;/p&gt; 
&lt;p&gt;Grype also includes a vast array of utility templating functions from &lt;a href="http://masterminds.github.io/sprig/"&gt;sprig&lt;/a&gt; apart from the default golang &lt;a href="https://pkg.go.dev/text/template#hdr-Functions"&gt;text/template&lt;/a&gt; to allow users to customize the output from Grype.&lt;/p&gt; 
&lt;h3&gt;Gating on severity of vulnerabilities&lt;/h3&gt; 
&lt;p&gt;You can have Grype exit with an error if any vulnerabilities are reported at or above the specified severity level. This comes in handy when using Grype within a script or CI pipeline. To do this, use the &lt;code&gt;--fail-on &amp;lt;severity&amp;gt;&lt;/code&gt; CLI flag.&lt;/p&gt; 
&lt;p&gt;For example, here's how you could trigger a CI pipeline failure if any vulnerabilities are found in the &lt;code&gt;ubuntu:latest&lt;/code&gt; image with a severity of "medium" or higher:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype ubuntu:latest --fail-on medium
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Grype returns exit code &lt;code&gt;2&lt;/code&gt; on vulnerability errors.&lt;/p&gt; 
&lt;h3&gt;Specifying matches to ignore&lt;/h3&gt; 
&lt;p&gt;If you're seeing Grype report &lt;strong&gt;false positives&lt;/strong&gt; or any other vulnerability matches that you just don't want to see, you can tell Grype to &lt;strong&gt;ignore&lt;/strong&gt; matches by specifying one or more &lt;em&gt;"ignore rules"&lt;/em&gt; in your Grype configuration file (e.g. &lt;code&gt;~/.grype.yaml&lt;/code&gt;). This causes Grype not to report any vulnerability matches that meet the criteria specified by any of your ignore rules.&lt;/p&gt; 
&lt;p&gt;Each rule can specify any combination of the following criteria:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;vulnerability ID (e.g. &lt;code&gt;"CVE-2008-4318"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;namespace (e.g. &lt;code&gt;"nvd"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;fix state (allowed values: &lt;code&gt;"fixed"&lt;/code&gt;, &lt;code&gt;"not-fixed"&lt;/code&gt;, &lt;code&gt;"wont-fix"&lt;/code&gt;, or &lt;code&gt;"unknown"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;package name (e.g. &lt;code&gt;"libcurl"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;package version (e.g. &lt;code&gt;"1.5.1"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;package language (e.g. &lt;code&gt;"python"&lt;/code&gt;; these values are defined &lt;a href="https://github.com/anchore/syft/raw/main/syft/pkg/language.go#L14-L23"&gt;here&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;package type (e.g. &lt;code&gt;"npm"&lt;/code&gt;; these values are defined &lt;a href="https://github.com/anchore/syft/raw/main/syft/pkg/type.go#L10-L24"&gt;here&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;package location (e.g. &lt;code&gt;"/usr/local/lib/node_modules/**"&lt;/code&gt;; supports glob patterns)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here's an example &lt;code&gt;~/.grype.yaml&lt;/code&gt; that demonstrates the expected format for ignore rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ignore:
  # This is the full set of supported rule fields:
  - vulnerability: CVE-2008-4318
    fix-state: unknown
    # VEX fields apply when Grype reads vex data:
    vex-status: not_affected
    vex-justification: vulnerable_code_not_present
    package:
      name: libcurl
      version: 1.5.1
      type: npm
      location: "/usr/local/lib/node_modules/**"

  # We can make rules to match just by vulnerability ID:
  - vulnerability: CVE-2014-54321

  # ...or just by a single package field:
  - package:
      type: gem
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Vulnerability matches will be ignored if &lt;strong&gt;any&lt;/strong&gt; rules apply to the match. A rule is considered to apply to a given vulnerability match only if &lt;strong&gt;all&lt;/strong&gt; fields specified in the rule apply to the vulnerability match.&lt;/p&gt; 
&lt;p&gt;When you run Grype while specifying ignore rules, the following happens to the vulnerability matches that are "ignored":&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Ignored matches are &lt;strong&gt;completely hidden&lt;/strong&gt; from Grype's output, except for when using the &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;template&lt;/code&gt; output formats; however, in these two formats, the ignored matches are &lt;strong&gt;removed&lt;/strong&gt; from the existing &lt;code&gt;matches&lt;/code&gt; array field, and they are placed in a new &lt;code&gt;ignoredMatches&lt;/code&gt; array field. Each listed ignored match also has an additional field, &lt;code&gt;appliedIgnoreRules&lt;/code&gt;, which is an array of any rules that caused Grype to ignore this vulnerability match.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ignored matches &lt;strong&gt;do not&lt;/strong&gt; factor into Grype's exit status decision when using &lt;code&gt;--fail-on &amp;lt;severity&amp;gt;&lt;/code&gt;. For instance, if a user specifies &lt;code&gt;--fail-on critical&lt;/code&gt;, and all of the vulnerability matches found with a "critical" severity have been &lt;em&gt;ignored&lt;/em&gt;, Grype will exit zero.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please continue to &lt;strong&gt;&lt;a href="https://github.com/anchore/grype/issues/new/choose"&gt;report&lt;/a&gt;&lt;/strong&gt; any false positives you see! Even if you can reliably filter out false positives using ignore rules, it's very helpful to the Grype community if we have as much knowledge about Grype's false positives as possible. This helps us continuously improve Grype!&lt;/p&gt; 
&lt;h3&gt;Showing only "fixed" vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you only want Grype to report vulnerabilities &lt;strong&gt;that have a confirmed fix&lt;/strong&gt;, you can use the &lt;code&gt;--only-fixed&lt;/code&gt; flag. (This automatically adds &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#specifying-matches-to-ignore"&gt;ignore rules&lt;/a&gt; into Grype's configuration, such that vulnerabilities that aren't fixed will be ignored.)&lt;/p&gt; 
&lt;p&gt;For example, here's a scan of Alpine 3.10:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NAME          INSTALLED  FIXED-IN   VULNERABILITY   SEVERITY
apk-tools     2.10.6-r0  2.10.7-r0  CVE-2021-36159  Critical
libcrypto1.1  1.1.1k-r0             CVE-2021-3711   Critical
libcrypto1.1  1.1.1k-r0             CVE-2021-3712   High
libssl1.1     1.1.1k-r0             CVE-2021-3712   High
libssl1.1     1.1.1k-r0             CVE-2021-3711   Critical
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;...and here's the same scan, but adding the flag &lt;code&gt;--only-fixed&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NAME       INSTALLED  FIXED-IN   VULNERABILITY   SEVERITY
apk-tools  2.10.6-r0  2.10.7-r0  CVE-2021-36159  Critical
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want Grype to only report vulnerabilities &lt;strong&gt;that do not have a confirmed fix&lt;/strong&gt;, you can use the &lt;code&gt;--only-notfixed&lt;/code&gt; flag. Alternatively, you can use the &lt;code&gt;--ignore-states&lt;/code&gt; flag to filter results for vulnerabilities with specific states such as &lt;code&gt;wont-fix&lt;/code&gt; (see &lt;code&gt;--help&lt;/code&gt; for a list of valid fix states). These flags automatically add &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#specifying-matches-to-ignore"&gt;ignore rules&lt;/a&gt; into Grype's configuration, such that vulnerabilities which are fixed, or will not be fixed, will be ignored.&lt;/p&gt; 
&lt;h2&gt;VEX Support&lt;/h2&gt; 
&lt;p&gt;Grype can use VEX (Vulnerability Exploitability Exchange) data to filter false positives or provide additional context, augmenting matches. When scanning a container image, you can use the &lt;code&gt;--vex&lt;/code&gt; flag to point to one or more &lt;a href="https://github.com/openvex"&gt;OpenVEX&lt;/a&gt; documents.&lt;/p&gt; 
&lt;p&gt;VEX statements relate a product (a container image), a vulnerability, and a VEX status to express an assertion of the vulnerability's impact. There are four &lt;a href="https://github.com/openvex/spec/raw/main/OPENVEX-SPEC.md#status-labels"&gt;VEX statuses&lt;/a&gt;: &lt;code&gt;not_affected&lt;/code&gt;, &lt;code&gt;affected&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; and &lt;code&gt;under_investigation&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Here is an example of a simple OpenVEX document. (tip: use &lt;a href="https://github.com/openvex/vexctl"&gt;&lt;code&gt;vexctl&lt;/code&gt;&lt;/a&gt; to generate your own documents).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "@context": "https://openvex.dev/ns/v0.2.0",
  "@id": "https://openvex.dev/docs/public/vex-d4e9020b6d0d26f131d535e055902dd6ccf3e2088bce3079a8cd3588a4b14c78",
  "author": "A Grype User &amp;lt;jdoe@example.com&amp;gt;",
  "timestamp": "2023-07-17T18:28:47.696004345-06:00",
  "version": 1,
  "statements": [
    {
      "vulnerability": {
        "name": "CVE-2023-1255"
      },
      "products": [
        {
          "@id": "pkg:oci/alpine@sha256%3A124c7d2707904eea7431fffe91522a01e5a861a624ee31d03372cc1d138a3126",
          "subcomponents": [
            { "@id": "pkg:apk/alpine/libssl3@3.0.8-r3" },
            { "@id": "pkg:apk/alpine/libcrypto3@3.0.8-r3" }
          ]
        }
      ],
      "status": "fixed"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, Grype will use any statements in specified VEX documents with a status of &lt;code&gt;not_affected&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt; to move matches to the ignore set.&lt;/p&gt; 
&lt;p&gt;Any matches ignored as a result of VEX statements are flagged when using &lt;code&gt;--show-suppressed&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;libcrypto3  3.0.8-r3   3.0.8-r4   apk   CVE-2023-1255  Medium (suppressed by VEX)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Statements with an &lt;code&gt;affected&lt;/code&gt; or &lt;code&gt;under_investigation&lt;/code&gt; status will only be considered to augment the result set when specifically requested using the &lt;code&gt;GRYPE_VEX_ADD&lt;/code&gt; environment variable or in a configuration file.&lt;/p&gt; 
&lt;h3&gt;VEX Ignore Rules&lt;/h3&gt; 
&lt;p&gt;Ignore rules can be written to control how Grype honors VEX statements. For example, to configure Grype to only act on VEX statements when the justification is &lt;code&gt;vulnerable_code_not_present&lt;/code&gt;, you can write a rule like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;---
ignore:
  - vex-status: not_affected
    vex-justification: vulnerable_code_not_present
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/openvex/spec/raw/main/OPENVEX-SPEC.md#status-justifications"&gt;list of justifications&lt;/a&gt; for details. You can mix &lt;code&gt;vex-status&lt;/code&gt; and &lt;code&gt;vex-justification&lt;/code&gt; with other ignore rule parameters.&lt;/p&gt; 
&lt;h2&gt;Grype's database&lt;/h2&gt; 
&lt;p&gt;When Grype performs a scan for vulnerabilities, it does so using a vulnerability database that's stored on your local filesystem, which is constructed by pulling data from a variety of publicly available vulnerability data sources. These sources include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Alpine Linux SecDB: &lt;a href="https://secdb.alpinelinux.org/"&gt;https://secdb.alpinelinux.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Amazon Linux ALAS: &lt;a href="https://alas.aws.amazon.com/AL2/alas.rss"&gt;https://alas.aws.amazon.com/AL2/alas.rss&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chainguard SecDB: &lt;a href="https://packages.cgr.dev/chainguard/security.json"&gt;https://packages.cgr.dev/chainguard/security.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Debian Linux CVE Tracker: &lt;a href="https://security-tracker.debian.org/tracker/data/json"&gt;https://security-tracker.debian.org/tracker/data/json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Echo Security Advisories: &lt;a href="https://advisory.echohq.com/data.json"&gt;https://advisory.echohq.com/data.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GitHub Security Advisories (GHSAs): &lt;a href="https://github.com/advisories"&gt;https://github.com/advisories&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MinimOS SecDB: &lt;a href="https://packages.mini.dev/advisories/secdb/security.json"&gt;https://packages.mini.dev/advisories/secdb/security.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;National Vulnerability Database (NVD): &lt;a href="https://nvd.nist.gov/vuln/data-feeds"&gt;https://nvd.nist.gov/vuln/data-feeds&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Oracle Linux OVAL: &lt;a href="https://linux.oracle.com/security/oval/"&gt;https://linux.oracle.com/security/oval/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RedHat Linux Security Data: &lt;a href="https://access.redhat.com/hydra/rest/securitydata/"&gt;https://access.redhat.com/hydra/rest/securitydata/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RedHat RHSAs: &lt;a href="https://www.redhat.com/security/data/oval/"&gt;https://www.redhat.com/security/data/oval/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SUSE Linux OVAL: &lt;a href="https://ftp.suse.com/pub/projects/security/oval/"&gt;https://ftp.suse.com/pub/projects/security/oval/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ubuntu Linux Security: &lt;a href="https://people.canonical.com/~ubuntu-security/"&gt;https://people.canonical.com/~ubuntu-security/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wolfi SecDB: &lt;a href="https://packages.wolfi.dev/os/security.json"&gt;https://packages.wolfi.dev/os/security.json&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, Grype automatically manages this database for you. Grype checks for new updates to the vulnerability database to make sure that every scan uses up-to-date vulnerability information. This behavior is configurable. For more information, see the &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#managing-grypes-database"&gt;Managing Grype's database&lt;/a&gt; section.&lt;/p&gt; 
&lt;h3&gt;How database updates work&lt;/h3&gt; 
&lt;p&gt;Grype's vulnerability database is a SQLite file, named &lt;code&gt;vulnerability.db&lt;/code&gt;. Updates to the database are atomic: the entire database is replaced and then treated as "readonly" by Grype.&lt;/p&gt; 
&lt;p&gt;Grype's first step in a database update is discovering databases that are available for retrieval. Grype does this by requesting a "latest database file" from a public endpoint:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://grype.anchore.io/databases/v6/latest.json"&gt;https://grype.anchore.io/databases/v6/latest.json&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The latest database file contains an entry for the most recent database available for download.&lt;/p&gt; 
&lt;p&gt;Here's an example of an entry in the latest database file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "status": "active",
  "schemaVersion": "6.0.0",
  "built": "2025-02-11T04:06:41Z",
  "path": "vulnerability-db_v6.0.0_2025-02-11T01:30:51Z_1739246801.tar.zst",
  "checksum": "sha256:79bfa04265c5a32d21773ad0da1bda13c31e932fa1e1422db635c8d714038868"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With this information, Grype can find the most recently built database with the current schema version, download the database, and verify the database's integrity using the &lt;code&gt;checksum&lt;/code&gt; value.&lt;/p&gt; 
&lt;h3&gt;Managing Grype's database&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; During normal usage, &lt;em&gt;there is no need for users to manage Grype's database!&lt;/em&gt; Grype manages its database behind the scenes. However, for users that need more control, Grype provides options to manage the database more explicitly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Local database cache directory&lt;/h4&gt; 
&lt;p&gt;By default, the database is cached on the local filesystem in the directory &lt;code&gt;$XDG_CACHE_HOME/grype/db/&amp;lt;SCHEMA-VERSION&amp;gt;/&lt;/code&gt;. For example, on macOS, the database would be stored in &lt;code&gt;~/Library/Caches/grype/db/6/&lt;/code&gt;. (For more information on XDG paths, refer to the &lt;a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;XDG Base Directory Specification&lt;/a&gt;.)&lt;/p&gt; 
&lt;p&gt;You can set the cache directory path using the environment variable &lt;code&gt;GRYPE_DB_CACHE_DIR&lt;/code&gt;. If setting that variable alone does not work, then the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable might also need to be set.&lt;/p&gt; 
&lt;h4&gt;Data staleness&lt;/h4&gt; 
&lt;p&gt;Grype needs up-to-date vulnerability information to provide accurate matches. By default, it will fail execution if the local database was not built in the last 5 days. The data staleness check is configurable via the environment variable &lt;code&gt;GRYPE_DB_MAX_ALLOWED_BUILT_AGE&lt;/code&gt; and &lt;code&gt;GRYPE_DB_VALIDATE_AGE&lt;/code&gt; or the field &lt;code&gt;max-allowed-built-age&lt;/code&gt; and &lt;code&gt;validate-age&lt;/code&gt;, under &lt;code&gt;db&lt;/code&gt;. It uses &lt;a href="https://pkg.go.dev/time#ParseDuration"&gt;golang's time duration syntax&lt;/a&gt;. Set &lt;code&gt;GRYPE_DB_VALIDATE_AGE&lt;/code&gt; or &lt;code&gt;validate-age&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to disable staleness check.&lt;/p&gt; 
&lt;h4&gt;Offline and air-gapped environments&lt;/h4&gt; 
&lt;p&gt;By default, Grype checks for a new database on every run, by making a network request over the internet. You can tell Grype not to perform this check by setting the environment variable &lt;code&gt;GRYPE_DB_AUTO_UPDATE&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;As long as you place Grype's &lt;code&gt;vulnerability.db&lt;/code&gt; and &lt;code&gt;import.json&lt;/code&gt; files in the cache directory for the expected schema version, Grype has no need to access the network. Additionally, you can get a reference to the latest database archive for download from the &lt;code&gt;grype db list&lt;/code&gt; command in an online environment, download the database archive, transfer it to your offline environment, and use &lt;code&gt;grype db import &amp;lt;db-archive-path&amp;gt;&lt;/code&gt; to use the given database in an offline capacity.&lt;/p&gt; 
&lt;p&gt;If you would like to distribute your own Grype databases internally without needing to use &lt;code&gt;db import&lt;/code&gt; manually you can leverage Grype's DB update mechanism. To do this you can craft your own &lt;code&gt;latest.json&lt;/code&gt; file similar to the public "latest database file" and change the download URL to point to an internal endpoint (e.g. a private S3 bucket, an internal file server, etc.). Any internal installation of Grype can receive database updates automatically by configuring the &lt;code&gt;db.update-url&lt;/code&gt; (same as the &lt;code&gt;GRYPE_DB_UPDATE_URL&lt;/code&gt; environment variable) to point to the hosted &lt;code&gt;latest.json&lt;/code&gt; file you've crafted.&lt;/p&gt; 
&lt;h4&gt;CLI commands for database management&lt;/h4&gt; 
&lt;p&gt;Grype provides database-specific CLI commands for users that want to control the database from the command line. Here are some of the useful commands provided:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db status&lt;/code&gt; — report the current status of Grype's database (such as its location, build date, and checksum)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db check&lt;/code&gt; — see if updates are available for the database&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db update&lt;/code&gt; — ensure the latest database has been downloaded to the cache directory (Grype performs this operation at the beginning of every scan by default)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db list&lt;/code&gt; — download the latest database file configured at &lt;code&gt;db.update-url&lt;/code&gt; and show the database available for download&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db import&lt;/code&gt; — provide grype with a database archive to explicitly use (useful for offline DB updates)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db providers&lt;/code&gt; - provides a detailed list of database providers&lt;/p&gt; 
&lt;p&gt;Find complete information on Grype's database commands by running &lt;code&gt;grype db --help&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Shell completion&lt;/h2&gt; 
&lt;p&gt;Grype supplies shell completion through its CLI implementation (&lt;a href="https://github.com/spf13/cobra/raw/master/shell_completions.md"&gt;cobra&lt;/a&gt;). Generate the completion code for your shell by running one of the following commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;grype completion &amp;lt;bash|zsh|fish&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go run ./cmd/grype completion &amp;lt;bash|zsh|fish&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This will output a shell script to STDOUT, which can then be used as a completion script for Grype. Running one of the above commands with the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; flags will provide instructions on how to do that for your chosen shell.&lt;/p&gt; 
&lt;h2&gt;Private Registry Authentication&lt;/h2&gt; 
&lt;h3&gt;Local Docker Credentials&lt;/h3&gt; 
&lt;p&gt;When a container runtime is not present, grype can still utilize credentials configured in common credential sources (such as &lt;code&gt;~/.docker/config.json&lt;/code&gt;). It will pull images from private registries using these credentials. The config file is where your credentials are stored when authenticating with private registries via some command like &lt;code&gt;docker login&lt;/code&gt;. For more information see the &lt;code&gt;go-containerregistry&lt;/code&gt; &lt;a href="https://github.com/google/go-containerregistry/tree/main/pkg/authn"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;An example &lt;code&gt;config.json&lt;/code&gt; looks something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// config.json
{
  "auths": {
    "registry.example.com": {
      "username": "AzureDiamond",
      "password": "hunter2"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run the following command as an example. It details the mount/environment configuration a container needs to access a private registry:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;docker run -v ./config.json:/config/config.json -e "DOCKER_CONFIG=/config" anchore/grype:latest &amp;lt;private_image&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Docker Credentials in Kubernetes&lt;/h3&gt; 
&lt;p&gt;The below section shows a simple workflow on how to mount this config file as a secret into a container on kubernetes.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a secret. The value of &lt;code&gt;config.json&lt;/code&gt; is important. It refers to the specification detailed &lt;a href="https://github.com/google/go-containerregistry/tree/main/pkg/authn#the-config-file"&gt;here&lt;/a&gt;. Below this section is the &lt;code&gt;secret.yaml&lt;/code&gt; file that the pod configuration will consume as a volume. The key &lt;code&gt;config.json&lt;/code&gt; is important. It will end up being the name of the file when mounted into the pod. &lt;pre&gt;&lt;code class="language-#"&gt;
    apiVersion: v1
    kind: Secret
    metadata:
      name: registry-config
      namespace: grype
    data:
      config.json: &amp;lt;base64 encoded config.json&amp;gt;
    ```

    `kubectl apply -f secret.yaml`

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Create your pod running grype. The env &lt;code&gt;DOCKER_CONFIG&lt;/code&gt; is important because it advertises where to look for the credential file. In the below example, setting &lt;code&gt;DOCKER_CONFIG=/config&lt;/code&gt; informs grype that credentials can be found at &lt;code&gt;/config/config.json&lt;/code&gt;. This is why we used &lt;code&gt;config.json&lt;/code&gt; as the key for our secret. When mounted into containers the secrets' key is used as the filename. The &lt;code&gt;volumeMounts&lt;/code&gt; section mounts our secret to &lt;code&gt;/config&lt;/code&gt;. The &lt;code&gt;volumes&lt;/code&gt; section names our volume and leverages the secret we created in step one. &lt;pre&gt;&lt;code class="language-#"&gt;
    apiVersion: v1
    kind: Pod
    spec:
      containers:
        - image: anchore/grype:latest
          name: grype-private-registry-demo
          env:
            - name: DOCKER_CONFIG
              value: /config
          volumeMounts:
          - mountPath: /config
            name: registry-config
            readOnly: true
          args:
            - &amp;lt;private_image&amp;gt;
      volumes:
      - name: registry-config
        secret:
          secretName: registry-config
    ```

    `kubectl apply -f pod.yaml`

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;The user can now run &lt;code&gt;kubectl logs grype-private-registry-demo&lt;/code&gt;. The logs should show the grype analysis for the &lt;code&gt;&amp;lt;private_image&amp;gt;&lt;/code&gt; provided in the pod configuration.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Using the above information, users should be able to configure private registry access without having to do so in the &lt;code&gt;grype&lt;/code&gt; or &lt;code&gt;syft&lt;/code&gt; configuration files. They will also not be dependent on a docker daemon, (or some other runtime software) for registry configuration and access.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Default configuration search paths (see all with &lt;code&gt;grype config locations&lt;/code&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;.grype.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.grype/config.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;~/.grype.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;XDG_CONFIG_HOME&amp;gt;/grype/config.yaml&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use &lt;code&gt;grype config&lt;/code&gt; to print a sample config file to stdout. Use &lt;code&gt;grype config --load&lt;/code&gt; to print the current config after loading all values to stdout.&lt;/p&gt; 
&lt;p&gt;You can specify files directly using the &lt;code&gt;--config&lt;/code&gt; / &lt;code&gt;-c&lt;/code&gt; flags (or environment variable &lt;code&gt;GRYPE_CONFIG&lt;/code&gt;) to provide your own configuration files/paths:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Using the flag
grype &amp;lt;image&amp;gt; -c /path/to/config.yaml
# Or using the environment variable
GRYPE_CONFIG=/path/to/config.yaml grype &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Configuration options (example values are the default):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# the output format of the vulnerability report (options: table, template, json, cyclonedx)
# when using template as the output type, you must also provide a value for 'output-template-file' (env: GRYPE_OUTPUT)
output: 'table'

# if using template output, you must provide a path to a Go template file
# see https://github.com/anchore/grype#using-templates for more information on template output
# the default path to the template file is the current working directory
# output-template-file: .grype/html.tmpl
#
# write output report to a file (default is to write to stdout) (env: GRYPE_FILE)
file: ''

# pretty-print JSON output (env: GRYPE_PRETTY)
pretty: false

# distro to match against in the format: &amp;lt;distro&amp;gt;:&amp;lt;version&amp;gt; (env: GRYPE_DISTRO)
distro: ''

# generate CPEs for packages with no CPE data (env: GRYPE_ADD_CPES_IF_NONE)
add-cpes-if-none: false

# specify the path to a Go template file (requires 'template' output to be selected) (env: GRYPE_OUTPUT_TEMPLATE_FILE)
output-template-file: ''

# enable/disable checking for application updates on startup (env: GRYPE_CHECK_FOR_APP_UPDATE)
check-for-app-update: true

# ignore matches for vulnerabilities that are not fixed (env: GRYPE_ONLY_FIXED)
only-fixed: false

# ignore matches for vulnerabilities that are fixed (env: GRYPE_ONLY_NOTFIXED)
only-notfixed: false

# ignore matches for vulnerabilities with specified comma separated fix states, options=[fixed not-fixed unknown wont-fix] (env: GRYPE_IGNORE_WONTFIX)
ignore-wontfix: ''

# an optional platform specifier for container image sources (e.g. 'linux/arm64', 'linux/arm64/v8', 'arm64', 'linux') (env: GRYPE_PLATFORM)
platform: ''

# upon scanning, if a severity is found at or above the given severity then the return code will be 1
# default is unset which will skip this validation (options: negligible, low, medium, high, critical) (env: GRYPE_FAIL_ON_SEVERITY)
fail-on-severity: ''

# show suppressed/ignored vulnerabilities in the output (only supported with table output format) (env: GRYPE_SHOW_SUPPRESSED)
show-suppressed: false

# orient results by CVE instead of the original vulnerability ID when possible (env: GRYPE_BY_CVE)
by-cve: false

# sort the match results with the given strategy, options=[package severity epss risk kev vulnerability] (env: GRYPE_SORT_BY)
sort-by: 'risk'

# same as --name; set the name of the target being analyzed (env: GRYPE_NAME)
name: ''

# allows users to specify which image source should be used to generate the sbom
# valid values are: registry, docker, podman (env: GRYPE_DEFAULT_IMAGE_PULL_SOURCE)
default-image-pull-source: ''

search:
  # selection of layers to analyze, options=[squashed all-layers] (env: GRYPE_SEARCH_SCOPE)
  scope: 'squashed'

  # search within archives that do not contain a file index to search against (tar, tar.gz, tar.bz2, etc)
  # note: enabling this may result in a performance impact since all discovered compressed tars will be decompressed
  # note: for now this only applies to the java package cataloger (env: GRYPE_SEARCH_UNINDEXED_ARCHIVES)
  unindexed-archives: false

  # search within archives that do contain a file index to search against (zip)
  # note: for now this only applies to the java package cataloger (env: GRYPE_SEARCH_INDEXED_ARCHIVES)
  indexed-archives: true

# A list of vulnerability ignore rules, one or more property may be specified and all matching vulnerabilities will be ignored.
# This is the full set of supported rule fields:
#   - vulnerability: CVE-2008-4318
#     fix-state: unknown
#     package:
#       name: libcurl
#       version: 1.5.1
#       type: npm
#       location: "/usr/local/lib/node_modules/**"
#
# VEX fields apply when Grype reads vex data:
#   - vex-status: not_affected
#     vex-justification: vulnerable_code_not_present
ignore: []

# a list of globs to exclude from scanning, for example:
#   - '/etc/**'
#   - './out/**/*.json'
# same as --exclude (env: GRYPE_EXCLUDE)
exclude: []

external-sources:
  # enable Grype searching network source for additional information (env: GRYPE_EXTERNAL_SOURCES_ENABLE)
  enable: false

  maven:
    # search for Maven artifacts by SHA1 (env: GRYPE_EXTERNAL_SOURCES_MAVEN_SEARCH_MAVEN_UPSTREAM)
    search-maven-upstream: true

    # base URL of the Maven repository to search (env: GRYPE_EXTERNAL_SOURCES_MAVEN_BASE_URL)
    base-url: 'https://search.maven.org/solrsearch/select'

    # (env: GRYPE_EXTERNAL_SOURCES_MAVEN_RATE_LIMIT)
    rate-limit: 300ms

match:
  java:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_JAVA_USING_CPES)
    using-cpes: false

  jvm:
    # (env: GRYPE_MATCH_JVM_USING_CPES)
    using-cpes: true

  dotnet:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_DOTNET_USING_CPES)
    using-cpes: false

  golang:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_GOLANG_USING_CPES)
    using-cpes: false

    # use CPE matching to find vulnerabilities for the Go standard library (env: GRYPE_MATCH_GOLANG_ALWAYS_USE_CPE_FOR_STDLIB)
    always-use-cpe-for-stdlib: true

    # allow comparison between main module pseudo-versions (e.g. v0.0.0-20240413-2b432cf643...) (env: GRYPE_MATCH_GOLANG_ALLOW_MAIN_MODULE_PSEUDO_VERSION_COMPARISON)
    allow-main-module-pseudo-version-comparison: false

  javascript:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_JAVASCRIPT_USING_CPES)
    using-cpes: false

  python:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_PYTHON_USING_CPES)
    using-cpes: false

  ruby:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_RUBY_USING_CPES)
    using-cpes: false

  rust:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_RUST_USING_CPES)
    using-cpes: false

  stock:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_STOCK_USING_CPES)
    using-cpes: true


registry:
  # skip TLS verification when communicating with the registry (env: GRYPE_REGISTRY_INSECURE_SKIP_TLS_VERIFY)
  insecure-skip-tls-verify: false

  # use http instead of https when connecting to the registry (env: GRYPE_REGISTRY_INSECURE_USE_HTTP)
  insecure-use-http: false

  # Authentication credentials for specific registries. Each entry describes authentication for a specific authority:
  # -   authority: the registry authority URL the URL to the registry (e.g. "docker.io", "localhost:5000", etc.) (env: SYFT_REGISTRY_AUTH_AUTHORITY)
  #     username: a username if using basic credentials (env: SYFT_REGISTRY_AUTH_USERNAME)
  #     password: a corresponding password (env: SYFT_REGISTRY_AUTH_PASSWORD)
  #     token: a token if using token-based authentication, mutually exclusive with username/password (env: SYFT_REGISTRY_AUTH_TOKEN)
  #     tls-cert: filepath to the client certificate used for TLS authentication to the registry (env: SYFT_REGISTRY_AUTH_TLS_CERT)
  #     tls-key: filepath to the client key used for TLS authentication to the registry (env: SYFT_REGISTRY_AUTH_TLS_KEY)
  auth: []

  # filepath to a CA certificate (or directory containing *.crt, *.cert, *.pem) used to generate the client certificate (env: GRYPE_REGISTRY_CA_CERT)
  ca-cert: ''

# a list of VEX documents to consider when producing scanning results (env: GRYPE_VEX_DOCUMENTS)
vex-documents: []

# VEX statuses to consider as ignored rules (env: GRYPE_VEX_ADD)
vex-add: []

# match kernel-header packages with upstream kernel as kernel vulnerabilities (env: GRYPE_MATCH_UPSTREAM_KERNEL_HEADERS)
match-upstream-kernel-headers: false

db:
  # location to write the vulnerability database cache (env: GRYPE_DB_CACHE_DIR)
  cache-dir: '~/Library/Caches/grype/db'

  # URL of the vulnerability database (env: GRYPE_DB_UPDATE_URL)
  update-url: 'https://grype.anchore.io/databases'

  # certificate to trust download the database and listing file (env: GRYPE_DB_CA_CERT)
  ca-cert: ''

  # check for database updates on execution (env: GRYPE_DB_AUTO_UPDATE)
  auto-update: true

  # validate the database matches the known hash each execution (env: GRYPE_DB_VALIDATE_BY_HASH_ON_START)
  validate-by-hash-on-start: true

  # ensure db build is no older than the max-allowed-built-age (env: GRYPE_DB_VALIDATE_AGE)
  validate-age: true

  # Max allowed age for vulnerability database,
  # age being the time since it was built
  # Default max age is 120h (or five days) (env: GRYPE_DB_MAX_ALLOWED_BUILT_AGE)
  max-allowed-built-age: 120h0m0s

  # fail the scan if unable to check for database updates (env: GRYPE_DB_REQUIRE_UPDATE_CHECK)
  require-update-check: false

  # Timeout for downloading GRYPE_DB_UPDATE_URL to see if the database needs to be downloaded
  # This file is ~156KiB as of 2024-04-17 so the download should be quick; adjust as needed (env: GRYPE_DB_UPDATE_AVAILABLE_TIMEOUT)
  update-available-timeout: 30s

  # Timeout for downloading actual vulnerability DB
  # The DB is ~156MB as of 2024-04-17 so slower connections may exceed the default timeout; adjust as needed (env: GRYPE_DB_UPDATE_DOWNLOAD_TIMEOUT)
  update-download-timeout: 5m0s

  # Maximum frequency to check for vulnerability database updates (env: GRYPE_DB_MAX_UPDATE_CHECK_FREQUENCY)
  max-update-check-frequency: 2h0m0s

log:
  # suppress all logging output (env: GRYPE_LOG_QUIET)
  quiet: false

  # explicitly set the logging level (available: [error warn info debug trace]) (env: GRYPE_LOG_LEVEL)
  level: 'warn'

  # file path to write logs to (env: GRYPE_LOG_FILE)
  file: ''

dev:
  # capture resource profiling data (available: [cpu, mem]) (env: GRYPE_DEV_PROFILE)
  profile: ''

  db:
    # show sql queries in trace logging (requires -vv) (env: GRYPE_DEV_DB_DEBUG)
    debug: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Future plans&lt;/h2&gt; 
&lt;p&gt;The following areas of potential development are currently being investigated:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for allowlist, package mapping&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Grype Logo&lt;/h2&gt; 
&lt;p xmlns:cc="http://creativecommons.org/ns#" xmlns:dct="http://purl.org/dc/terms/"&gt;&lt;a property="dct:title" rel="cc:attributionURL" href="https://anchore.com/wp-content/uploads/2024/11/grype-logo.svg"&gt;Grype Logo&lt;/a&gt; by &lt;a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://anchore.com/"&gt;Anchore&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="license noopener noreferrer" style="display:inline-block;"&gt;CC BY 4.0&lt;img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?sanitize=true" alt="" /&gt;&lt;img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?sanitize=true" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yorukot/superfile</title>
      <link>https://github.com/yorukot/superfile</link>
      <description>&lt;p&gt;Pretty fancy and modern terminal file manager&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;h4&gt; &lt;a href="https://ko-fi.com/yorukot"&gt;superfile is supported by the community.&lt;/a&gt; &lt;/h4&gt; 
 &lt;div align="center" markdown="1"&gt; 
  &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
  &lt;br /&gt; 
  &lt;br /&gt; 
  &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=superfile"&gt; &lt;img alt="Warp sponsorship" width="300" src="https://raw.githubusercontent.com/yorukot/superfile/main/asset/warp.png" /&gt; &lt;/a&gt; 
  &lt;h3&gt;&lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=superfile"&gt;Warp, the AI terminal for developers&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;&lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=superfile"&gt;Available for MacOS, Linux, &amp;amp; Windows&lt;/a&gt;&lt;br /&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="/asset/superfilelogowhite.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="/asset/superfilelogoblack.png" /&gt; 
  &lt;img alt="superfile LOGO" src="https://raw.githubusercontent.com/yorukot/superfile/main/asset/superfilelogowhite.png" /&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/yorukot/superfile"&gt;&lt;img src="https://goreportcard.com/badge/github.com/yorukot/superfile" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/yorukot/superfile/refs/heads/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="License MIT" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/YYtJ23Du7B"&gt;&lt;img src="https://img.shields.io/discord/1338415256875307110?label=discord&amp;amp;logo=discord&amp;amp;logoColor=white" alt="Discord Link" /&gt;&lt;/a&gt; &lt;a href="https://github.com/yorukot/superfile/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/yorukot/superfile.svg?style=flat-square" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://www.coderabbit.ai/"&gt;&lt;img src="https://img.shields.io/coderabbit/prs/github/yorukot/superfile?utm_source=oss&amp;amp;utm_medium=github&amp;amp;utm_campaign=yorukot%2Fsuperfile&amp;amp;labelColor=171717&amp;amp;color=FF570A&amp;amp;&amp;amp;label=CodeRabbit+Reviews" alt="CodeRabbit Pull Request Reviews" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/yorukot/superfile/main/asset/demo.png" alt="" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Perform common operations&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/yorukot/superfile/main/asset/demo.gif" alt="" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Content&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#build"&gt;Build&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#supported-systems"&gt;Supported Systems&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#tutorial"&gt;Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#themes"&gt;Themes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#hotkeys"&gt;Hotkeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#thanks"&gt;Thanks&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#Support"&gt;Support&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/#star-history"&gt;Star History&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;MacOS and Linux&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;bash -c "$(curl -sLo- https://superfile.netlify.app/install.sh)"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to inspect the script, see : &lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/website/public/install.sh"&gt;install.sh&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;h4&gt;Powershell&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;powershell -ExecutionPolicy Bypass -Command "Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://superfile.netlify.app/install.ps1'))"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to inspect the script, see : &lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/website/public/install.ps1"&gt;install.ps1&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a href="https://winget.run/"&gt;Winget&lt;/a&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;winget install --id yorukot.superfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a href="https://scoop.sh/"&gt;Scoop&lt;/a&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;scoop install superfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;More installation methods&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://superfile.netlify.app/getting-started/installation/"&gt;Click me to check on how to install&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Build&lt;/h2&gt; 
&lt;p&gt;You can build the source code yourself by using these steps:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://go.dev/doc/install"&gt;golang&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Build Steps&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Clone this repository using the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/yorukot/superfile.git --depth=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Enter the downloaded directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cd superfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;For MacOS/Linux&lt;/h3&gt; 
&lt;p&gt;Run the &lt;code&gt;build.sh&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;./build.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add the binary file to your $PATH, e.g., in &lt;code&gt;/usr/local/bin&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo mv ./bin/spf /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;For Windows&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go build -o bin/spf.exe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Edit System Environment Variables and add superfile repo's &lt;code&gt;bin&lt;/code&gt; directory to your PATH&lt;/p&gt; 
&lt;h2&gt;Start superfile&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;spf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Supported Systems&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;[x] Linux&lt;/li&gt; 
 &lt;li&gt;[x] MacOS&lt;/li&gt; 
 &lt;li&gt;[x] Windows (Not fully supported yet)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tutorial&lt;/h2&gt; 
&lt;p&gt;After you install superfile, you can go &lt;a href="https://superfile.netlify.app/getting-started/tutorial/"&gt;here&lt;/a&gt; to briefly understand how to use superfile!&lt;/p&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://superfile.netlify.app/list/plugin-list/"&gt;Click me to the plugins wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Themes&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://superfile.netlify.app/configure/custom-theme/"&gt;Click me to the theme wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Hotkeys&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] If you are vim/nvim user please change your default hotkeys config to vim version!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://superfile.netlify.app/configure/custom-hotkeys/"&gt;&lt;strong&gt;Click me to see the hotkey wiki&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;p&gt;We have an auto update functionality, that fetches superfile's latest released version from github (if last timestamp of last version check was less than 24 hours) and prints a prompt to user, if there is a newer version available.&lt;/p&gt; 
&lt;p&gt;You can turn this off, by setting &lt;code&gt;auto_check_update&lt;/code&gt; to false in superfile config. &lt;a href="https://superfile.netlify.app/configure/superfile-config/"&gt;&lt;strong&gt;Click me to see the config wiki&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://superfile.netlify.app/troubleshooting/"&gt;&lt;strong&gt;Click me to see common problem fix&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Uninstalling&lt;/h2&gt; 
&lt;h3&gt;MacOS and Linux&lt;/h3&gt; 
&lt;p&gt;On MacOS and Linux, you can uninstall superfile by simply removing the binary. If you installed superfile with sudo, runw&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo rm /usr/local/bin/spf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you installed superfile without sudo, run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;rm ~/.local/bin/spf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you don't rember, just try removing both.&lt;/p&gt; 
&lt;h3&gt;Window&lt;/h3&gt; 
&lt;p&gt;To uninstall superfile on Windows, use this powershell script.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-powershell"&gt;powershell -ExecutionPolicy Bypass -Command "Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://superfile.netlify.app/uninstall.ps1'))"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you want to contribute please follow the &lt;a href="https://raw.githubusercontent.com/yorukot/superfile/main/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://superfile.netlify.app/changelog"&gt;&lt;strong&gt;Click me to see changelog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;h3&gt;Support&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;a Star on my GitHub repository would be nice 🌟&lt;/li&gt; 
 &lt;li&gt;You can buy a coffee for me 💖&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://ko-fi.com/G2G1JEGGC"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" alt="ko-fi" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Thanks to all the contributors for making this project even greater!&lt;/strong&gt;&lt;/p&gt; 
&lt;a href="https://github.com/yorukot/superfile/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=yorukot/superfile" /&gt; &lt;/a&gt; 
&lt;h3&gt;Star History&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;THANKS FOR All OF YOUR STARS!&lt;/strong&gt; Your stars are my motivation to keep updating!&lt;/p&gt; 
&lt;a href="https://star-history.com/#yorukot/superfile&amp;amp;Timeline"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=yorukot/superfile&amp;amp;type=Timeline&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=yorukot/superfile&amp;amp;type=Timeline" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=yorukot/superfile&amp;amp;type=Timeline" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;div align="center"&gt; 
 &lt;h2&gt;༼ つ ◕_◕ ༽つ Please share.&lt;/h2&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>open-telemetry/opentelemetry-go</title>
      <link>https://github.com/open-telemetry/opentelemetry-go</link>
      <description>&lt;p&gt;OpenTelemetry Go API and SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTelemetry-Go&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/open-telemetry/opentelemetry-go/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/open-telemetry/opentelemetry-go/actions/workflows/ci.yml/badge.svg?branch=main" alt="ci" /&gt;&lt;/a&gt; &lt;a href="https://app.codecov.io/gh/open-telemetry/opentelemetry-go?branch=main"&gt;&lt;img src="https://codecov.io/gh/open-telemetry/opentelemetry-go/coverage.svg?branch=main" alt="codecov.io" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/go.opentelemetry.io/otel"&gt;&lt;img src="https://pkg.go.dev/badge/go.opentelemetry.io/otel" alt="PkgGoDev" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/go.opentelemetry.io/otel"&gt;&lt;img src="https://goreportcard.com/badge/go.opentelemetry.io/otel" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/open-telemetry/opentelemetry-go"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/open-telemetry/opentelemetry-go/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/9996"&gt;&lt;img src="https://www.bestpractices.dev/projects/9996/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://issues.oss-fuzz.com/issues?q=project:opentelemetry-go"&gt;&lt;img src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/opentelemetry-go.svg?sanitize=true" alt="Fuzzing Status" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/custom%2B162%2Fgithub.com%2Fopen-telemetry%2Fopentelemetry-go?ref=badge_shield&amp;amp;issueType=license"&gt;&lt;img src="https://app.fossa.com/api/projects/custom%2B162%2Fgithub.com%2Fopen-telemetry%2Fopentelemetry-go.svg?type=shield&amp;amp;issueType=license" alt="FOSSA Status" /&gt;&lt;/a&gt; &lt;a href="https://cloud-native.slack.com/archives/C01NPAXACKT"&gt;&lt;img src="https://img.shields.io/badge/slack-@cncf/otel--go-brightgreen.svg?logo=slack" alt="Slack" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;OpenTelemetry-Go is the &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt; implementation of &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;. It provides a set of APIs to directly measure performance and behavior of your software and send this data to observability platforms.&lt;/p&gt; 
&lt;h2&gt;Project Status&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Signal&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Traces&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Metrics&lt;/td&gt; 
   &lt;td&gt;Stable&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Logs&lt;/td&gt; 
   &lt;td&gt;Beta&lt;a href="https://github.com/orgs/open-telemetry/projects/43"&gt;^1&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Progress and status specific to this repository is tracked in our &lt;a href="https://github.com/open-telemetry/opentelemetry-go/projects"&gt;project boards&lt;/a&gt; and &lt;a href="https://github.com/open-telemetry/opentelemetry-go/milestones"&gt;milestones&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Project versioning information and stability guarantees can be found in the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/VERSIONING.md"&gt;versioning documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Compatibility&lt;/h3&gt; 
&lt;p&gt;OpenTelemetry-Go ensures compatibility with the current supported versions of the &lt;a href="https://golang.org/doc/devel/release#policy"&gt;Go language&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Each major Go release is supported until there are two newer major releases. For example, Go 1.5 was supported until the Go 1.7 release, and Go 1.6 was supported until the Go 1.8 release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For versions of Go that are no longer supported upstream, opentelemetry-go will stop ensuring compatibility with these versions in the following manner:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A minor release of opentelemetry-go will be made to add support for the new supported release of Go.&lt;/li&gt; 
 &lt;li&gt;The following minor release of opentelemetry-go will remove compatibility testing for the oldest (now archived upstream) version of Go. This, and future, releases of opentelemetry-go may include features only supported by the currently supported versions of Go.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Currently, this project supports the following environments.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;OS&lt;/th&gt; 
   &lt;th&gt;Go Version&lt;/th&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.25&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.25&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.25&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Ubuntu&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 13&lt;/td&gt; 
   &lt;td&gt;1.25&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 13&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS 13&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;1.25&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;arm64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.25&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;amd64&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.25&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.24&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;1.23&lt;/td&gt; 
   &lt;td&gt;386&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;While this project should work for other systems, no compatibility guarantees are made for those systems currently.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can find a getting started guide on &lt;a href="https://opentelemetry.io/docs/languages/go/getting-started/"&gt;opentelemetry.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;OpenTelemetry's goal is to provide a single set of APIs to capture distributed traces and metrics from your application and send them to an observability platform. This project allows you to do just that for applications written in Go. There are two steps to this process: instrument your application, and configure an exporter.&lt;/p&gt; 
&lt;h3&gt;Instrumentation&lt;/h3&gt; 
&lt;p&gt;To start capturing distributed traces and metric events from your application it first needs to be instrumented. The easiest way to do this is by using an instrumentation library for your code. Be sure to check out &lt;a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation"&gt;the officially supported instrumentation libraries&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you need to extend the telemetry an instrumentation library provides or want to build your own instrumentation for your application directly you will need to use the &lt;a href="https://pkg.go.dev/go.opentelemetry.io/otel"&gt;Go otel&lt;/a&gt; package. The &lt;a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/examples"&gt;examples&lt;/a&gt; are a good way to see some practical uses of this process.&lt;/p&gt; 
&lt;h3&gt;Export&lt;/h3&gt; 
&lt;p&gt;Now that your application is instrumented to collect telemetry, it needs an export pipeline to send that telemetry to an observability platform.&lt;/p&gt; 
&lt;p&gt;All officially supported exporters for the OpenTelemetry project are contained in the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters"&gt;exporters directory&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Exporter&lt;/th&gt; 
   &lt;th align="center"&gt;Logs&lt;/th&gt; 
   &lt;th align="center"&gt;Metrics&lt;/th&gt; 
   &lt;th align="center"&gt;Traces&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/otlp/"&gt;OTLP&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/prometheus/"&gt;Prometheus&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/stdout/"&gt;stdout&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/zipkin/"&gt;Zipkin&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/CONTRIBUTING.md"&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grpc-ecosystem/grpc-gateway</title>
      <link>https://github.com/grpc-ecosystem/grpc-gateway</link>
      <description>&lt;p&gt;gRPC to JSON proxy generator following the gRPC HTTP spec&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;gRPC-Gateway&lt;/h1&gt; 
 &lt;p&gt; gRPC to JSON proxy generator following the gRPC HTTP spec &lt;/p&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/grpc-ecosystem/grpc-gateway/ci.yml?color=379c9c&amp;amp;label=build&amp;amp;logo=github&amp;amp;logoColor=ffffff&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://app.slack.com/client/T029RQSE6/CBATURP1D"&gt;&lt;img src="https://img.shields.io/badge/slack-grpc--gateway-379c9c?logo=slack&amp;amp;logoColor=ffffff&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;logoColor=ffffff&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://slsa.dev/images/gh-badge-level3.svg"&gt;&lt;img src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;The gRPC-Gateway is a plugin of the Google protocol buffers compiler &lt;a href="https://github.com/protocolbuffers/protobuf"&gt;protoc&lt;/a&gt;. It reads protobuf service definitions and generates a reverse-proxy server which translates a RESTful HTTP API into gRPC. This server is generated according to the &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46"&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotations in your service definitions.&lt;/p&gt; 
&lt;p&gt;This helps you provide your APIs in both gRPC and RESTful style at the same time.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/docs/assets/images/architecture_introduction_diagram.svg?sanitize=true" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;p&gt;You can read our docs at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/"&gt;https://grpc-ecosystem.github.io/grpc-gateway/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Testimonials&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We use the gRPC-Gateway to serve millions of API requests per day, and have been since 2018 and through all of that, we have never had any issues with it.&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;- William Mill, &lt;a href="http://adhocteam.us/"&gt;Ad Hoc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;gRPC is great -- it generates API clients and server stubs in many programming languages, it is fast, easy-to-use, bandwidth-efficient and its design is combat-proven by Google. However, you might still want to provide a traditional RESTful JSON API as well. Reasons can range from maintaining backward-compatibility, supporting languages or clients that are not well supported by gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful JSON architecture.&lt;/p&gt; 
&lt;p&gt;This project aims to provide that HTTP+JSON interface to your gRPC service. A small amount of configuration in your service to attach HTTP semantics is all that's needed to generate a reverse-proxy with this library.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Compile from source&lt;/h3&gt; 
&lt;p&gt;The following instructions assume you are using &lt;a href="https://go.dev/wiki/Modules"&gt;Go Modules&lt;/a&gt; for dependency management. Use a &lt;a href="https://go.dev/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module"&gt;tool dependency&lt;/a&gt; to track the versions of the following executable packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// +build tools

package tools

import (
    _ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway"
    _ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2"
    _ "google.golang.org/grpc/cmd/protoc-gen-go-grpc"
    _ "google.golang.org/protobuf/cmd/protoc-gen-go"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run &lt;code&gt;go mod tidy&lt;/code&gt; to resolve the versions. Install by running&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install \
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \
    google.golang.org/protobuf/cmd/protoc-gen-go \
    google.golang.org/grpc/cmd/protoc-gen-go-grpc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Using the &lt;code&gt;tool&lt;/code&gt; Directive in Go 1.24&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Starting from Go 1.24, the &lt;code&gt;tool&lt;/code&gt; directive in &lt;code&gt;go.mod&lt;/code&gt; provides a structured way to track and manage executable dependencies. This replaces the previous workaround of using a separate &lt;code&gt;tools.go&lt;/code&gt; file with blank imports.&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Tracking Tools in &lt;code&gt;go.mod&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Instead of manually importing tool dependencies in a Go source file, you can now use the &lt;code&gt;tool&lt;/code&gt; directive in &lt;code&gt;go.mod&lt;/code&gt; to declare the tools your project depends on. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;module tools

go 1.24

tool (
	github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
	github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
	google.golang.org/grpc/cmd/protoc-gen-go-grpc
	google.golang.org/protobuf/cmd/protoc-gen-go
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;Managing Tool Dependencies&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;To add tools to your module, use the &lt;code&gt;-tool&lt;/code&gt; flag with &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
go get -tool google.golang.org/protobuf/cmd/protoc-gen-go
go get -tool google.golang.org/grpc/cmd/protoc-gen-go-grpc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This automatically updates &lt;code&gt;go.mod&lt;/code&gt;, adding the tools under the &lt;code&gt;tool&lt;/code&gt; directive along with &lt;code&gt;require&lt;/code&gt; statements to ensure version tracking.&lt;/p&gt; 
&lt;h3&gt;Install Tools&lt;/h3&gt; 
&lt;p&gt;Once the tool dependencies are properly recorded in the &lt;code&gt;go.mod&lt;/code&gt; file, simply execute the following command in the root directory of your project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install tool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Download the binaries&lt;/h3&gt; 
&lt;p&gt;You may alternatively download the binaries from the &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases/latest"&gt;GitHub releases page&lt;/a&gt;. We generate &lt;a href="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/slsa.dev"&gt;SLSA3 signatures&lt;/a&gt; using the OpenSSF's &lt;a href="https://github.com/slsa-framework/slsa-github-generator"&gt;slsa-framework/slsa-github-generator&lt;/a&gt; during the release process. To verify a release binary:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the verification tool from &lt;a href="https://github.com/slsa-framework/slsa-verifier#installation"&gt;slsa-framework/slsa-verifier#installation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Download the provenance file &lt;code&gt;attestation.intoto.jsonl&lt;/code&gt; from the &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases/latest"&gt;GitHub releases page&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Run the verifier:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;slsa-verifier -artifact-path &amp;lt;the-binary&amp;gt; -provenance attestation.intoto.jsonl -source github.com/grpc-ecosystem/grpc-gateway -tag &amp;lt;the-tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, see the section on remotely managed plugin versions below.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;1.Define your &lt;a href="https://grpc.io/docs/"&gt;gRPC&lt;/a&gt; service using protocol buffers&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-protobuf"&gt; syntax = "proto3";
 package your.service.v1;
 option go_package = "github.com/yourorg/yourprotos/gen/go/your/service/v1";

 message StringMessage {
   string value = 1;
 }

 service YourService {
   rpc Echo(StringMessage) returns (StringMessage) {}
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Generate gRPC stubs&lt;/h3&gt; 
&lt;p&gt;This step generates the gRPC stubs that you can use to implement the service and consume from clients:&lt;/p&gt; 
&lt;p&gt;Here's an example &lt;code&gt;buf.gen.yaml&lt;/code&gt; you can use to generate the stubs with &lt;a href="https://github.com/bufbuild/buf"&gt;buf&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With this file in place, you can generate your files using &lt;code&gt;buf generate&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For a complete example of using &lt;code&gt;buf generate&lt;/code&gt; to generate protobuf stubs, see &lt;a href="https://github.com/johanbrandhorst/grpc-gateway-boilerplate"&gt;the boilerplate repo&lt;/a&gt;. For more information on generating the stubs with buf, see &lt;a href="https://docs.buf.build/generate-usage"&gt;the official documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, here's an example of what a command might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . \
    --go_out ./gen/go/ --go_opt paths=source_relative \
    --go-grpc_out ./gen/go/ --go-grpc_opt paths=source_relative \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. Implement your service in gRPC as usual.&lt;/h3&gt; 
&lt;h3&gt;4. Generate reverse-proxy using &lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;At this point, you have 3 options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;no further modifications, use the default mapping to HTTP semantics (method, path, etc.) 
  &lt;ul&gt; 
   &lt;li&gt;this will work on any &lt;code&gt;.proto&lt;/code&gt; file, but will not allow setting HTTP paths, request parameters or similar&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;additional &lt;code&gt;.proto&lt;/code&gt; modifications to use a custom mapping 
  &lt;ul&gt; 
   &lt;li&gt;relies on parameters in the &lt;code&gt;.proto&lt;/code&gt; file to set custom HTTP mappings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;no &lt;code&gt;.proto&lt;/code&gt; modifications, but use an external configuration file 
  &lt;ul&gt; 
   &lt;li&gt;relies on an external configuration file to set custom HTTP mappings&lt;/li&gt; 
   &lt;li&gt;mostly useful when the source proto file isn't under your control&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1. Using the default mapping&lt;/h4&gt; 
&lt;p&gt;This requires no additional modification to the &lt;code&gt;.proto&lt;/code&gt; file but does require enabling a specific option when executing the plugin. The &lt;code&gt;generate_unbound_methods&lt;/code&gt; should be enabled.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - generate_unbound_methods=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    --grpc-gateway_opt generate_unbound_methods=true \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. With custom annotations&lt;/h4&gt; 
&lt;p&gt;Add a &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46"&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotation to your .proto file&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt; syntax = "proto3";
 package your.service.v1;
 option go_package = "github.com/yourorg/yourprotos/gen/go/your/service/v1";
+
+import "google/api/annotations.proto";
+
 message StringMessage {
   string value = 1;
 }

 service YourService {
-  rpc Echo(StringMessage) returns (StringMessage) {}
+  rpc Echo(StringMessage) returns (StringMessage) {
+    option (google.api.http) = {
+      post: "/v1/example/echo"
+      body: "*"
+    };
+  }
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You will need to provide the required third party protobuf files to the protobuf compiler. If you are using &lt;a href="https://github.com/bufbuild/buf"&gt;buf&lt;/a&gt;, this dependency can be added to the &lt;code&gt;deps&lt;/code&gt; array in your &lt;code&gt;buf.yaml&lt;/code&gt; under the name &lt;code&gt;buf.build/googleapis/googleapis&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
name: buf.build/yourorg/myprotos
deps:
  - buf.build/googleapis/googleapis
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Always run &lt;code&gt;buf dep update&lt;/code&gt; after adding a dependency to your &lt;code&gt;buf.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/examples/internal/proto/examplepb/a_bit_of_everything.proto"&gt;a_bit_of_everything.proto&lt;/a&gt; for examples of more annotations you can add to customize gateway behavior and generated OpenAPI output.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you need to ensure the required dependencies are available to the compiler at compile time. These can be found by manually cloning and copying the relevant files from the &lt;a href="https://github.com/googleapis/googleapis"&gt;googleapis repository&lt;/a&gt;, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running. The files you will need are:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;google/api/annotations.proto
google/api/field_behavior.proto
google/api/http.proto
google/api/httpbody.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here's what a &lt;code&gt;protoc&lt;/code&gt; execution might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. External configuration&lt;/h4&gt; 
&lt;p&gt;If you do not want to (or cannot) modify the proto file for use with gRPC-Gateway you can alternatively use an external &lt;a href="https://cloud.google.com/endpoints/docs/grpc/grpc-service-config"&gt;gRPC Service Configuration&lt;/a&gt; file. &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/"&gt;Check our documentation&lt;/a&gt; for more information. This is best combined with the &lt;code&gt;standalone=true&lt;/code&gt; option to generate a file that can live in its own package, separate from the files generated by the source protobuf file.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - grpc_api_configuration=path/to/config.yaml
      - standalone=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    --grpc-gateway_opt grpc_api_configuration=path/to/config.yaml \
    --grpc-gateway_opt standalone=true \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;5. Write an entrypoint for the HTTP reverse-proxy server&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
  "context"
  "flag"
  "net/http"

  "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
  "google.golang.org/grpc"
  "google.golang.org/grpc/credentials/insecure"
  "google.golang.org/grpc/grpclog"

  gw "github.com/yourorg/yourrepo/proto/gen/go/your/service/v1/your_service"  // Update
)

var (
  // command-line options:
  // gRPC server endpoint
  grpcServerEndpoint = flag.String("grpc-server-endpoint",  "localhost:9090", "gRPC server endpoint")
)

func run() error {
  ctx := context.Background()
  ctx, cancel := context.WithCancel(ctx)
  defer cancel()

  // Register gRPC server endpoint
  // Note: Make sure the gRPC server is running properly and accessible
  mux := runtime.NewServeMux()
  opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
  err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)
  if err != nil {
    return err
  }

  // Start HTTP server (and proxy calls to gRPC server endpoint)
  return http.ListenAndServe(":8081", mux)
}

func main() {
  flag.Parse()

  if err := run(); err != nil {
    grpclog.Fatal(err)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6. (Optional) Generate OpenAPI definitions using &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - generate_unbound_methods=true
  - local: protoc-gen-openapiv2
    out: gen/go
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use the custom protobuf annotations supported by &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;, we need another dependency added to our protobuf generation step. If you are using &lt;code&gt;buf&lt;/code&gt;, you can add the &lt;code&gt;buf.build/grpc-ecosystem/grpc-gateway&lt;/code&gt; dependency to your &lt;code&gt;deps&lt;/code&gt; array:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
name: buf.build/yourorg/myprotos
deps:
  - buf.build/googleapis/googleapis
  - buf.build/grpc-ecosystem/grpc-gateway
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the swagger file):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --openapiv2_out ./gen/openapiv2 \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you will need to copy the protobuf files from the &lt;code&gt;protoc-gen-openapiv2/options&lt;/code&gt; directory of this repository, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running.&lt;/p&gt; 
&lt;p&gt;Note that this plugin also supports generating OpenAPI definitions for unannotated methods; use the &lt;code&gt;generate_unbound_methods&lt;/code&gt; option to enable this.&lt;/p&gt; 
&lt;p&gt;It is possible with the HTTP mapping for a gRPC service method to create duplicate mappings with the only difference being constraints on the path parameter.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;/v1/{name=projects/*}&lt;/code&gt; and &lt;code&gt;/v1/{name=organizations/*}&lt;/code&gt; both become &lt;code&gt;/v1/{name}&lt;/code&gt;. When this occurs the plugin will rename the path parameter with a "_1" (or "_2" etc) suffix to differentiate the different operations. So in the above example, the 2nd path would become &lt;code&gt;/v1/{name_1=organizations/*}&lt;/code&gt;. This can also cause OpenAPI clients to URL encode the "/" that is part of the path parameter as that is what OpenAPI defines in the specification. To allow gRPC gateway to accept the URL encoded slash and still route the request, use the UnescapingModeAllCharacters or UnescapingModeLegacy (which is the default currently though may change in future versions). See &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/customizing_your_gateway/"&gt;Customizing Your Gateway&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Usage with remote plugins&lt;/h2&gt; 
&lt;p&gt;As an alternative to all of the above, you can use &lt;code&gt;buf&lt;/code&gt; with &lt;a href="https://buf.build/docs/bsr/remote-plugins/usage"&gt;remote plugins&lt;/a&gt; to manage plugin versions and generation. An example &lt;code&gt;buf.gen.yaml&lt;/code&gt; using remote plugin generation looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - remote: buf.build/protocolbuffers/go:v1.31.0
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc/go:v1.3.0
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc-ecosystem/gateway:v2.16.2
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc-ecosystem/openapiv2:v2.16.2
    out: gen/openapiv2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This requires no local installation of any plugins. Be careful to use the same version of the generator as the runtime library, i.e. if using &lt;code&gt;v2.16.2&lt;/code&gt;, run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go get github.com/grpc-ecosystem/grpc-gateway/v2@v2.16.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get the same version of the runtime in your &lt;code&gt;go.mod&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note that usage of remote plugins is incompatible with usage of external configuration files like &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/#using-an-external-configuration-file"&gt;grpc_api_configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Video intro&lt;/h2&gt; 
&lt;p&gt;This GopherCon UK 2019 presentation from our maintainer &lt;a href="https://github.com/johanbrandhorst"&gt;@JohanBrandhorst&lt;/a&gt; provides a good intro to using the gRPC-Gateway. It uses the following boilerplate repo as a base: &lt;a href="https://github.com/johanbrandhorst/grpc-gateway-boilerplate"&gt;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&lt;/a&gt;.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.youtube.com/watch?v=Pq1paKC-fXk"&gt; &lt;img src="https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Parameters and flags&lt;/h2&gt; 
&lt;p&gt;When using &lt;code&gt;buf&lt;/code&gt; to generate stubs, flags and parameters are passed through the &lt;code&gt;opt&lt;/code&gt; field in your &lt;code&gt;buf.gen.yaml&lt;/code&gt; file, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - grpc_api_configuration=path/to/config.yaml
      - standalone=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;During code generation with &lt;code&gt;protoc&lt;/code&gt;, flags to gRPC-Gateway tools must be passed through &lt;code&gt;protoc&lt;/code&gt; using one of 2 patterns:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;as part of the &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out&lt;/code&gt; &lt;code&gt;protoc&lt;/code&gt; parameter: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out=&amp;lt;flags&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;--grpc-gateway_out=repeated_path_param_separator=ssv:.
--openapiv2_out=repeated_path_param_separator=ssv:.
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;using additional &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt&lt;/code&gt; parameters: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt=&amp;lt;flag&amp;gt;[,&amp;lt;flag&amp;gt;]*&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;--grpc-gateway_opt repeated_path_param_separator=ssv
--openapiv2_opt repeated_path_param_separator=ssv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;More examples&lt;/h2&gt; 
&lt;p&gt;More examples are available under the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.proto&lt;/code&gt;: service definition 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.pb.go&lt;/code&gt;: [generated] stub of the service&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/uannotated_echo_service.pb.gw.go&lt;/code&gt;: [generated] reverse proxy for the service&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/unannotated_echo_service.yaml&lt;/code&gt;: gRPC API Configuration for &lt;code&gt;unannotated_echo_service.proto&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server/main.go&lt;/code&gt;: service implementation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;main.go&lt;/code&gt;: entrypoint of the generated reverse proxy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To use the same port for custom HTTP handlers (e.g. serving &lt;code&gt;swagger.json&lt;/code&gt;), gRPC-Gateway, and a gRPC server, see &lt;a href="https://github.com/philips/grpc-gateway-example/raw/master/cmd/serve.go"&gt;this example by CoreOS&lt;/a&gt; (and its accompanying &lt;a href="https://web.archive.org/web/20201112010739/https://coreos.com/blog/grpc-protobufs-swagger.html"&gt;blog post&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/mynalabsai/grpc_gateway_media_example"&gt;This example by neiro.ai&lt;/a&gt; (and its accompanying &lt;a href="https://medium.com/neiro-ai/grpc-gateway-for-media-api-by-neiro-9033caab12c8"&gt;blog post&lt;/a&gt;) shows how mediafiles using &lt;code&gt;multipart/form-data&lt;/code&gt; can be integrated into rpc messages using a middleware.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Supported&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generating JSON API handlers.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the request body.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the request path.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the query string.&lt;/li&gt; 
 &lt;li&gt;Enum fields in the path parameter (including repeated enum fields).&lt;/li&gt; 
 &lt;li&gt;Mapping streaming APIs to newline-delimited JSON streams.&lt;/li&gt; 
 &lt;li&gt;Mapping HTTP headers with &lt;code&gt;Grpc-Metadata-&lt;/code&gt; prefix to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Optionally emitting API definitions for &lt;a href="https://swagger.io/docs/specification/2-0/basic-structure/"&gt;OpenAPI (Swagger) v2&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Setting &lt;a href="https://github.com/grpc/grpc/raw/master/doc/PROTOCOL-HTTP2.md#requests"&gt;gRPC timeouts&lt;/a&gt; through inbound HTTP &lt;code&gt;Grpc-Timeout&lt;/code&gt; header.&lt;/li&gt; 
 &lt;li&gt;Partial support for &lt;a href="https://cloud.google.com/endpoints/docs/grpc/grpc-service-config"&gt;gRPC API Configuration&lt;/a&gt; files as an alternative to annotation.&lt;/li&gt; 
 &lt;li&gt;Automatically translating PATCH requests into Field Mask gRPC requests. See &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/"&gt;the docs&lt;/a&gt; for more information.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;No plan to support&lt;/h3&gt; 
&lt;p&gt;But patches are welcome.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Method parameters in HTTP headers.&lt;/li&gt; 
 &lt;li&gt;Handling trailer metadata.&lt;/li&gt; 
 &lt;li&gt;Encoding request/response body in XML.&lt;/li&gt; 
 &lt;li&gt;True bi-directional streaming.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Mapping gRPC to HTTP&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/runtime/errors.go#L15"&gt;How gRPC error codes map to HTTP status codes in the response&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;HTTP request source IP is added as &lt;code&gt;X-Forwarded-For&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP request host is added as &lt;code&gt;X-Forwarded-Host&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP &lt;code&gt;Authorization&lt;/code&gt; header is added as &lt;code&gt;authorization&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;Remaining Permanent HTTP header keys (as specified by the IANA &lt;a href="http://www.iana.org/assignments/message-headers/message-headers.xhtml"&gt;here&lt;/a&gt;) are prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt; and added with their values to gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP headers that start with 'Grpc-Metadata-' are mapped to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;While configurable, the default {un,}marshaling uses &lt;a href="https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson"&gt;protojson&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The path template used to map gRPC service methods to HTTP endpoints supports the &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto"&gt;google.api.http&lt;/a&gt; path template syntax. For example, &lt;code&gt;/api/v1/{name=projects/*/topics/*}&lt;/code&gt; or &lt;code&gt;/prefix/{path=organizations/**}&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="http://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;gRPC-Gateway is licensed under the BSD 3-Clause License. See &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE"&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dapr/dapr</title>
      <link>https://github.com/dapr/dapr</link>
      <description>&lt;p&gt;Dapr is a portable runtime for building distributed applications across cloud and edge, combining event-driven architecture with workflow orchestration.&lt;/p&gt;&lt;hr&gt;&lt;div style="text-align: center"&gt;
 &lt;img src="https://raw.githubusercontent.com/dapr/dapr/master/img/dapr_logo.svg?sanitize=true" height="120px" /&gt; 
 &lt;h2&gt;APIs for Building Secure and Reliable Microservices&lt;/h2&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/dapr/dapr"&gt;&lt;img src="https://goreportcard.com/badge/github.com/dapr/dapr" alt="Go Report" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/5044"&gt;&lt;img src="https://www.bestpractices.dev/projects/5044/badge" alt="OpenSSF" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/daprio/dapr"&gt;&lt;img src="https://img.shields.io/docker/pulls/daprio/daprd?style=flat&amp;amp;logo=docker" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dapr/dapr/actions?workflow=dapr"&gt;&lt;img src="https://github.com/dapr/dapr/workflows/dapr/badge.svg?event=push&amp;amp;branch=master" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dapr/dapr/actions?workflow=dapr-test&amp;amp;event=schedule"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/dapr-bot/14e974e8fd6c6eab03a2475beb1d547a/raw/dapr-test-badge.json" alt="Test Status" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/dapr/dapr"&gt;&lt;img src="https://codecov.io/gh/dapr/dapr/branch/master/graph/badge.svg?sanitize=true" alt="Code Coverage" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dapr/dapr/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/dapr/dapr?style=flat&amp;amp;label=License&amp;amp;logo=github" alt="License: Apache 2.0" /&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/custom%2B162%2Fgithub.com%2Fdapr%2Fdapr?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/custom%2B162%2Fgithub.com%2Fdapr%2Fdapr.svg?type=shield" alt="FOSSA Status" /&gt;&lt;/a&gt; &lt;a href="https://www.tickgit.com/browse?repo=github.com/dapr/dapr"&gt;&lt;img src="https://badgen.net/https/api.tickgit.com/badgen/github.com/dapr/dapr" alt="TODOs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/dapr/dapr/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;&lt;img src="https://img.shields.io/github/issues-search/dapr/dapr?query=type%3Aissue%20is%3Aopen%20label%3A%22good%20first%20issue%22&amp;amp;label=Good%20first%20issues&amp;amp;style=flat&amp;amp;logo=github" alt="Good First Issues" /&gt;&lt;/a&gt; &lt;a href="http://bit.ly/dapr-discord"&gt;&lt;img src="https://img.shields.io/discord/778680217417809931?label=Discord&amp;amp;style=flat&amp;amp;logo=discord" alt="discord" /&gt;&lt;/a&gt; &lt;a href="https://youtube.com/@daprdev"&gt;&lt;img src="https://img.shields.io/youtube/channel/views/UCtpSQ9BLB_3EXdWAUQYwnRA?style=flat&amp;amp;label=YouTube%20views&amp;amp;logo=youtube" alt="YouTube" /&gt;&lt;/a&gt; &lt;a href="https://bsky.app/profile/daprdev.bsky.social"&gt;&lt;img src="https://img.shields.io/badge/Follow-%40daprdev.bsky.social-0056A1?logo=bluesky" alt="Bluesky" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/daprdev"&gt;&lt;img src="https://img.shields.io/twitter/follow/daprdev?logo=x&amp;amp;style=flat" alt="X/Twitter" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Dapr is a set of integrated APIs with built-in best practices and patterns to build distributed applications. Dapr increases your developer productivity by 20-40% with out-of-the-box features such as workflow, pub/sub, state management, secret stores, external configuration, bindings, actors, distributed lock, and cryptography. You benefit from the built-in security, reliability, and observability capabilities, so you don't need to write boilerplate code to achieve production-ready applications.&lt;/p&gt; 
&lt;p&gt;With Dapr, a graduated CNCF project, platform teams can configure complex setups while exposing simple interfaces to application development teams, making it easier for them to build highly scalable distributed applications. Many platform teams have adopted Dapr to provide governance and golden paths for API-based infrastructure interaction.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/dapr/dapr/master/img/overview.png" alt="Dapr overview" /&gt;&lt;/p&gt; 
&lt;p&gt;We are a Cloud Native Computing Foundation (CNCF) graduated project.&lt;/p&gt; 
&lt;p align="center"&gt;&lt;img src="https://raw.githubusercontent.com/kedacore/keda/main/images/logo-cncf.svg?sanitize=true" height="75px" /&gt;&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Enable developers using &lt;em&gt;any&lt;/em&gt; language or framework to write distributed applications&lt;/li&gt; 
 &lt;li&gt;Solve the hard problems developers face building microservice applications by providing best practice building blocks&lt;/li&gt; 
 &lt;li&gt;Be community driven, open and vendor neutral&lt;/li&gt; 
 &lt;li&gt;Gain new contributors&lt;/li&gt; 
 &lt;li&gt;Provide consistency and portability through open APIs&lt;/li&gt; 
 &lt;li&gt;Be platform agnostic across cloud and edge&lt;/li&gt; 
 &lt;li&gt;Embrace extensibility and provide pluggable components without vendor lock-in&lt;/li&gt; 
 &lt;li&gt;Enable IoT and edge scenarios by being highly performant and lightweight&lt;/li&gt; 
 &lt;li&gt;Be incrementally adoptable from existing code, with no runtime dependency&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How it works&lt;/h2&gt; 
&lt;p&gt;Dapr injects a side-car (container or process) to each compute unit. The side-car interacts with event triggers and communicates with the compute unit via standard HTTP or gRPC protocols. This enables Dapr to support all existing and future programming languages without requiring you to import frameworks or libraries.&lt;/p&gt; 
&lt;p&gt;Dapr offers built-in state management, reliable messaging (at least once delivery), triggers and bindings through standard HTTP verbs or gRPC interfaces. This allows you to write stateless, stateful and actor-like services following the same programming paradigm. You can freely choose consistency model, threading model and message delivery patterns.&lt;/p&gt; 
&lt;p&gt;Dapr runs natively on Kubernetes, as a self hosted binary on your machine, on an IoT device, or as a container that can be injected into any system, in the cloud or on-premises.&lt;/p&gt; 
&lt;p&gt;Dapr uses pluggable component state stores and message buses such as Redis as well as gRPC to offer a wide range of communication methods, including direct dapr-to-dapr using gRPC and async Pub-Sub with guaranteed delivery and at-least-once semantics.&lt;/p&gt; 
&lt;h2&gt;Why Dapr?&lt;/h2&gt; 
&lt;p&gt;Writing highly performant, scalable and reliable distributed application is hard. Dapr brings proven patterns and practices to you. It unifies event-driven and actors semantics into a simple, consistent programming model. It supports all programming languages without framework lock-in. You are not exposed to low-level primitives such as threading, concurrency control, partitioning and scaling. Instead, you can write your code by implementing a simple web server using familiar web frameworks of your choice.&lt;/p&gt; 
&lt;p&gt;Dapr is flexible in threading and state consistency models. You can leverage multi-threading if you choose to, and you can choose among different consistency models. This flexibility enables you to implement advanced scenarios without artificial constraints. Dapr is unique because you can transition seamlessly between platforms and underlying implementations without rewriting your code.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Event-driven Pub-Sub system with pluggable providers and at-least-once semantics&lt;/li&gt; 
 &lt;li&gt;Input and output bindings with pluggable providers&lt;/li&gt; 
 &lt;li&gt;State management with pluggable data stores&lt;/li&gt; 
 &lt;li&gt;Consistent service-to-service discovery and invocation&lt;/li&gt; 
 &lt;li&gt;Opt-in stateful models: Strong/Eventual consistency, First-write/Last-write wins&lt;/li&gt; 
 &lt;li&gt;Cross platform virtual actors&lt;/li&gt; 
 &lt;li&gt;Secret management to retrieve secrets from secure key vaults&lt;/li&gt; 
 &lt;li&gt;Rate limiting&lt;/li&gt; 
 &lt;li&gt;Built-in &lt;a href="https://docs.dapr.io/concepts/observability-concept/"&gt;Observability&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;Runs natively on Kubernetes using a dedicated Operator and CRDs&lt;/li&gt; 
 &lt;li&gt;Supports all programming languages via HTTP and gRPC&lt;/li&gt; 
 &lt;li&gt;Multi-Cloud, open components (bindings, pub-sub, state) from Azure, AWS, GCP&lt;/li&gt; 
 &lt;li&gt;Runs anywhere, as a process or containerized&lt;/li&gt; 
 &lt;li&gt;Lightweight (58MB binary, 4MB physical memory)&lt;/li&gt; 
 &lt;li&gt;Runs as a sidecar - removes the need for special SDKs or libraries&lt;/li&gt; 
 &lt;li&gt;Dedicated CLI - developer friendly experience with easy debugging&lt;/li&gt; 
 &lt;li&gt;Clients for Java, .NET Core, Go, Javascript, Python, Rust and C++&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started using Dapr&lt;/h2&gt; 
&lt;p&gt;See our &lt;a href="https://docs.dapr.io/getting-started/"&gt;Getting Started&lt;/a&gt; guide over in our docs.&lt;/p&gt; 
&lt;h2&gt;Quickstarts and Samples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See the &lt;a href="https://github.com/dapr/quickstarts"&gt;quickstarts repository&lt;/a&gt; for code examples that can help you get started with Dapr.&lt;/li&gt; 
 &lt;li&gt;Explore additional samples in the Dapr &lt;a href="https://github.com/dapr/samples"&gt;samples repository&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;We want your contributions and suggestions! One of the easiest ways to contribute is to participate in discussions on the mailing list, chat on IM or the bi-weekly community calls. For more information on the community engagement, developer and contributing guidelines and more, head over to the &lt;a href="https://github.com/dapr/community#dapr-community"&gt;Dapr community repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contact Us&lt;/h3&gt; 
&lt;p&gt;Reach out with any questions you may have and we'll make sure to answer them as soon as possible!&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Link&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;💬 Discord (preferred)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://aka.ms/dapr-discord"&gt;&lt;img src="https://discord.com/api/guilds/778680217417809931/widget.png?style=banner2" alt="Discord Banner" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;💭 LinkedIn&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.linkedin.com/company/daprdev"&gt;@daprdev&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;🦋 BlueSky&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://bsky.app/profile/daprdev.bsky.social"&gt;@daprdev.bsky.social&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;🐤 Twitter&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://twitter.com/daprdev"&gt;@daprdev&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Community Call&lt;/h3&gt; 
&lt;p&gt;Every two weeks we host a community call to showcase new features, review upcoming milestones, and engage in a Q&amp;amp;A. All are welcome!&lt;/p&gt; 
&lt;p&gt;📞 Visit &lt;a href="https://github.com/dapr/community/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22community%20call%22"&gt;Upcoming Dapr Community Calls&lt;/a&gt; for upcoming dates and the meeting link.&lt;/p&gt; 
&lt;p&gt;📺 Visit &lt;a href="https://www.youtube.com/@DaprDev/streams"&gt;https://www.youtube.com/@DaprDev/streams&lt;/a&gt; for previous community call live streams.&lt;/p&gt; 
&lt;h3&gt;Videos and Podcasts&lt;/h3&gt; 
&lt;p&gt;We have a variety of keynotes, podcasts, and presentations available to reference and learn from.&lt;/p&gt; 
&lt;p&gt;📺 Visit &lt;a href="https://docs.dapr.io/contributing/presentations/"&gt;https://docs.dapr.io/contributing/presentations/&lt;/a&gt; for previous talks and slide decks or our YouTube channel &lt;a href="https://www.youtube.com/@DaprDev/videos"&gt;https://www.youtube.com/@DaprDev/videos&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing to Dapr&lt;/h3&gt; 
&lt;p&gt;See the &lt;a href="https://docs.dapr.io/contributing/"&gt;Development Guide&lt;/a&gt; to get started with building and developing.&lt;/p&gt; 
&lt;h2&gt;Repositories&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Repo&lt;/th&gt; 
   &lt;th align="left"&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/dapr"&gt;Dapr&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;The main repository that you are currently in. Contains the Dapr runtime code and overview documentation.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/cli"&gt;CLI&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;The Dapr CLI allows you to setup Dapr on your local dev machine or on a Kubernetes cluster, provides debugging support, launches and manages Dapr instances.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.dapr.io"&gt;Docs&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;The documentation for Dapr.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/quickstarts"&gt;Quickstarts&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;This repository contains a series of simple code samples that highlight the main Dapr capabilities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/samples"&gt;Samples&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;This repository holds community maintained samples for various Dapr use cases.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/components-contrib"&gt;Components-contrib &lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;The purpose of components contrib is to provide open, community driven reusable components for building distributed applications.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/dashboard"&gt;Dashboard &lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;General purpose dashboard for Dapr&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/go-sdk"&gt;Go-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Dapr SDK for Go&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/java-sdk"&gt;Java-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Dapr SDK for Java&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/js-sdk"&gt;JS-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Dapr SDK for JavaScript&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/python-sdk"&gt;Python-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Dapr SDK for Python&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/dotnet-sdk"&gt;Dotnet-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Dapr SDK for .NET&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/rust-sdk"&gt;Rust-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Dapr SDK for Rust&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/cpp-sdk"&gt;Cpp-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Dapr SDK for C++&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/dapr/php-sdk"&gt;PHP-sdk&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Dapr SDK for PHP&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Please refer to our &lt;a href="https://github.com/dapr/community/raw/master/CODE-OF-CONDUCT.md"&gt;Dapr Community Code of Conduct&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SpecterOps/BloodHound</title>
      <link>https://github.com/SpecterOps/BloodHound</link>
      <description>&lt;p&gt;Six Degrees of Domain Admin&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;img src="https://raw.githubusercontent.com/SpecterOps/BloodHound/main/cmd/ui/public/img/BHCE_Vertical_RedField.svg?sanitize=true" alt="BloodHound Community Edition" width="400" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;BloodHound is a monolithic web application composed of an embedded React frontend with &lt;a href="https://www.sigmajs.org/"&gt;Sigma.js&lt;/a&gt; and a &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; based REST API backend. It is deployed with a &lt;a href="https://www.postgresql.org/"&gt;Postgresql&lt;/a&gt; application database and a &lt;a href="https://neo4j.com/"&gt;Neo4j&lt;/a&gt; graph database, and is fed by the &lt;a href="https://github.com/SpecterOps/SharpHound"&gt;SharpHound&lt;/a&gt; and &lt;a href="https://github.com/SpecterOps/AzureHound"&gt;AzureHound&lt;/a&gt; data collectors.&lt;/p&gt; 
&lt;p&gt;BloodHound leverages graph theory to reveal hidden and often unintended relationships across identity and access management systems. Powered by &lt;a href="https://specterops.io/opengraph/"&gt;OpenGraph&lt;/a&gt;, BloodHound now supports comprehensive analysis beyond Active Directory and Azure environments, enabling users to map complex privilege relationships across &lt;a href="https://bloodhound.specterops.io/opengraph/library"&gt;diverse identity platforms&lt;/a&gt;. Attackers can utilize BloodHound to rapidly discover sophisticated attack paths otherwise impossible to identify manually, while defenders can proactively identify and mitigate these risks. Both red and blue teams benefit from BloodHound's expanded capabilities, gaining deeper insights into identity and privilege structures across their entire security landscape.&lt;/p&gt; 
&lt;p&gt;BloodHound CE is created and maintained by the &lt;a href="https://specterops.io/"&gt;SpecterOps&lt;/a&gt; team who also brought you &lt;a href="https://specterops.io/bloodhound-overview/"&gt;BloodHound Enterprise&lt;/a&gt;. The original BloodHound was created by &lt;a href="https://www.twitter.com/_wald0"&gt;@_wald0&lt;/a&gt;, &lt;a href="https://twitter.com/CptJesus"&gt;@CptJesus&lt;/a&gt;, and &lt;a href="https://twitter.com/harmj0y"&gt;@harmj0y&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Running BloodHound Community Edition&lt;/h2&gt; 
&lt;p&gt;Please refer to the &lt;a href="https://bloodhound.specterops.io/get-started/quickstart/community-edition-quickstart"&gt;Quickstart Guide for BloodHound Community Edition&lt;/a&gt;, which is part of the &lt;a href="https://bloodhound.specterops.io"&gt;BloodHound documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Useful Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://bloodhound.specterops.io/"&gt;BloodHound Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bloodhound.specterops.io/get-started/quickstart/community-edition-quickstart"&gt;BloodHound Community Edition Quickstart Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://slack.specterops.io"&gt;BloodHound Slack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bloodhound.specterops.io/opengraph/overview"&gt;OpenGraph Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SpecterOps/BloodHound/wiki"&gt;Wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/README.md"&gt;Docker Compose Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SpecterOps/BloodHound/wiki/Development"&gt;Developer Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SpecterOps/BloodHound/wiki/Contributing"&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SpecterOps/BloodHound/main/CONTRIBUTORS.md"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Please check out the &lt;a href="https://github.com/SpecterOps/BloodHound/wiki/Contact"&gt;Contact page&lt;/a&gt; in our wiki for details on how to reach out with questions and suggestions.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Copyright 2025 Specter Ops, Inc.

Licensed under the Apache License, Version 2.0
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unless otherwise annotated by a lower-level LICENSE file or license header, all files in this repository are released under the &lt;code&gt;Apache-2.0&lt;/code&gt; license. A full copy of the license may be found in the top-level &lt;a href="https://raw.githubusercontent.com/SpecterOps/BloodHound/main/LICENSE"&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>charmbracelet/bubbletea</title>
      <link>https://github.com/charmbracelet/bubbletea</link>
      <description>&lt;p&gt;A powerful little TUI framework 🏗&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bubble Tea&lt;/h1&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png" width="308" /&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://stuff.charm.sh/bubbletea/bubble-tea-v2-dark.png" width="312" /&gt; 
  &lt;img src="https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png" width="308" /&gt; 
 &lt;/picture&gt; &lt;br /&gt; &lt;a href="https://github.com/charmbracelet/bubbletea/releases"&gt;&lt;img src="https://img.shields.io/github/release/charmbracelet/bubbletea.svg?sanitize=true" alt="Latest Release" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;&lt;img src="https://godoc.org/github.com/charmbracelet/bubbletea?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://github.com/charmbracelet/bubbletea/actions"&gt;&lt;img src="https://github.com/charmbracelet/bubbletea/actions/workflows/build.yml/badge.svg?branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;The fun, functional and stateful way to build terminal apps. A Go framework based on &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;. Bubble Tea is well-suited for simple and complex terminal applications, either inline, full-window, or a mix of both.&lt;/p&gt; 
&lt;p&gt; &lt;img src="https://stuff.charm.sh/bubbletea/bubbletea-example.gif" width="100%" alt="Bubble Tea Example" /&gt; &lt;/p&gt; 
&lt;p&gt;Bubble Tea is in use in production and includes a number of features and performance optimizations we’ve added along the way. Among those is a framerate-based renderer, mouse support, focus reporting and more.&lt;/p&gt; 
&lt;p&gt;To get started, see the tutorial below, the &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/examples"&gt;examples&lt;/a&gt;, the &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;docs&lt;/a&gt;, the &lt;a href="https://charm.sh/yt"&gt;video tutorials&lt;/a&gt; and some common &lt;a href="https://raw.githubusercontent.com/charmbracelet/bubbletea/main/#libraries-we-use-with-bubble-tea"&gt;resources&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;By the way&lt;/h2&gt; 
&lt;p&gt;Be sure to check out &lt;a href="https://github.com/charmbracelet/bubbles"&gt;Bubbles&lt;/a&gt;, a library of common UI components for Bubble Tea.&lt;/p&gt; 
&lt;p&gt; &lt;a href="https://github.com/charmbracelet/bubbles"&gt;&lt;img src="https://stuff.charm.sh/bubbles/bubbles-badge.png" width="174" alt="Bubbles Badge" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/charmbracelet/bubbles"&gt;&lt;img src="https://stuff.charm.sh/bubbles-examples/textinput.gif" width="400" alt="Text Input Example from Bubbles" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Tutorial&lt;/h2&gt; 
&lt;p&gt;Bubble Tea is based on the functional design paradigms of &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;, which happens to work nicely with Go. It's a delightful way to build applications.&lt;/p&gt; 
&lt;p&gt;This tutorial assumes you have a working knowledge of Go.&lt;/p&gt; 
&lt;p&gt;By the way, the non-annotated source code for this program is available &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/tutorials/basics"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Enough! Let's get to it.&lt;/h3&gt; 
&lt;p&gt;For this tutorial, we're making a shopping list.&lt;/p&gt; 
&lt;p&gt;To start we'll define our package and import some libraries. Our only external import will be the Bubble Tea library, which we'll call &lt;code&gt;tea&lt;/code&gt; for short.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

// These imports will be used later on the tutorial. If you save the file
// now, Go might complain they are unused, but that's fine.
// You may also need to run `go mod tidy` to download bubbletea and its
// dependencies.
import (
    "fmt"
    "os"

    tea "github.com/charmbracelet/bubbletea"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Bubble Tea programs are comprised of a &lt;strong&gt;model&lt;/strong&gt; that describes the application state and three simple methods on that model:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Init&lt;/strong&gt;, a function that returns an initial command for the application to run.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;, a function that handles incoming events and updates the model accordingly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;, a function that renders the UI based on the data in the model.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The Model&lt;/h3&gt; 
&lt;p&gt;So let's start by defining our model which will store our application's state. It can be any type, but a &lt;code&gt;struct&lt;/code&gt; usually makes the most sense.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type model struct {
    choices  []string           // items on the to-do list
    cursor   int                // which to-do list item our cursor is pointing at
    selected map[int]struct{}   // which to-do items are selected
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Initialization&lt;/h3&gt; 
&lt;p&gt;Next, we’ll define our application’s initial state. In this case, we’re defining a function to return our initial model, however, we could just as easily define the initial model as a variable elsewhere, too.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func initialModel() model {
	return model{
		// Our to-do list is a grocery list
		choices:  []string{"Buy carrots", "Buy celery", "Buy kohlrabi"},

		// A map which indicates which choices are selected. We're using
		// the  map like a mathematical set. The keys refer to the indexes
		// of the `choices` slice, above.
		selected: make(map[int]struct{}),
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we define the &lt;code&gt;Init&lt;/code&gt; method. &lt;code&gt;Init&lt;/code&gt; can return a &lt;code&gt;Cmd&lt;/code&gt; that could perform some initial I/O. For now, we don't need to do any I/O, so for the command, we'll just return &lt;code&gt;nil&lt;/code&gt;, which translates to "no command."&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) Init() tea.Cmd {
    // Just return `nil`, which means "no I/O right now, please."
    return nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The Update Method&lt;/h3&gt; 
&lt;p&gt;Next up is the update method. The update function is called when ”things happen.” Its job is to look at what has happened and return an updated model in response. It can also return a &lt;code&gt;Cmd&lt;/code&gt; to make more things happen, but for now don't worry about that part.&lt;/p&gt; 
&lt;p&gt;In our case, when a user presses the down arrow, &lt;code&gt;Update&lt;/code&gt;’s job is to notice that the down arrow was pressed and move the cursor accordingly (or not).&lt;/p&gt; 
&lt;p&gt;The “something happened” comes in the form of a &lt;code&gt;Msg&lt;/code&gt;, which can be any type. Messages are the result of some I/O that took place, such as a keypress, timer tick, or a response from a server.&lt;/p&gt; 
&lt;p&gt;We usually figure out which type of &lt;code&gt;Msg&lt;/code&gt; we received with a type switch, but you could also use a type assertion.&lt;/p&gt; 
&lt;p&gt;For now, we'll just deal with &lt;code&gt;tea.KeyMsg&lt;/code&gt; messages, which are automatically sent to the update function when keys are pressed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
    switch msg := msg.(type) {

    // Is it a key press?
    case tea.KeyMsg:

        // Cool, what was the actual key pressed?
        switch msg.String() {

        // These keys should exit the program.
        case "ctrl+c", "q":
            return m, tea.Quit

        // The "up" and "k" keys move the cursor up
        case "up", "k":
            if m.cursor &amp;gt; 0 {
                m.cursor--
            }

        // The "down" and "j" keys move the cursor down
        case "down", "j":
            if m.cursor &amp;lt; len(m.choices)-1 {
                m.cursor++
            }

        // The "enter" key and the spacebar (a literal space) toggle
        // the selected state for the item that the cursor is pointing at.
        case "enter", " ":
            _, ok := m.selected[m.cursor]
            if ok {
                delete(m.selected, m.cursor)
            } else {
                m.selected[m.cursor] = struct{}{}
            }
        }
    }

    // Return the updated model to the Bubble Tea runtime for processing.
    // Note that we're not returning a command.
    return m, nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may have noticed that &lt;kbd&gt;ctrl+c&lt;/kbd&gt; and &lt;kbd&gt;q&lt;/kbd&gt; above return a &lt;code&gt;tea.Quit&lt;/code&gt; command with the model. That’s a special command which instructs the Bubble Tea runtime to quit, exiting the program.&lt;/p&gt; 
&lt;h3&gt;The View Method&lt;/h3&gt; 
&lt;p&gt;At last, it’s time to render our UI. Of all the methods, the view is the simplest. We look at the model in its current state and use it to return a &lt;code&gt;string&lt;/code&gt;. That string is our UI!&lt;/p&gt; 
&lt;p&gt;Because the view describes the entire UI of your application, you don’t have to worry about redrawing logic and stuff like that. Bubble Tea takes care of it for you.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) View() string {
    // The header
    s := "What should we buy at the market?\n\n"

    // Iterate over our choices
    for i, choice := range m.choices {

        // Is the cursor pointing at this choice?
        cursor := " " // no cursor
        if m.cursor == i {
            cursor = "&amp;gt;" // cursor!
        }

        // Is this choice selected?
        checked := " " // not selected
        if _, ok := m.selected[i]; ok {
            checked = "x" // selected!
        }

        // Render the row
        s += fmt.Sprintf("%s [%s] %s\n", cursor, checked, choice)
    }

    // The footer
    s += "\nPress q to quit.\n"

    // Send the UI for rendering
    return s
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;All Together Now&lt;/h3&gt; 
&lt;p&gt;The last step is to simply run our program. We pass our initial model to &lt;code&gt;tea.NewProgram&lt;/code&gt; and let it rip:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func main() {
    p := tea.NewProgram(initialModel())
    if _, err := p.Run(); err != nil {
        fmt.Printf("Alas, there's been an error: %v", err)
        os.Exit(1)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;What’s Next?&lt;/h2&gt; 
&lt;p&gt;This tutorial covers the basics of building an interactive terminal UI, but in the real world you'll also need to perform I/O. To learn about that have a look at the &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/tutorials/commands/"&gt;Command Tutorial&lt;/a&gt;. It's pretty simple.&lt;/p&gt; 
&lt;p&gt;There are also several &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/examples"&gt;Bubble Tea examples&lt;/a&gt; available and, of course, there are &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;Go Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;h3&gt;Debugging with Delve&lt;/h3&gt; 
&lt;p&gt;Since Bubble Tea apps assume control of stdin and stdout, you’ll need to run delve in headless mode and then connect to it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start the debugger
$ dlv debug --headless --api-version=2 --listen=127.0.0.1:43000 .
API server listening at: 127.0.0.1:43000

# Connect to it from another terminal
$ dlv connect 127.0.0.1:43000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not explicitly supply the &lt;code&gt;--listen&lt;/code&gt; flag, the port used will vary per run, so passing this in makes the debugger easier to use from a script or your IDE of choice.&lt;/p&gt; 
&lt;p&gt;Additionally, we pass in &lt;code&gt;--api-version=2&lt;/code&gt; because delve defaults to version 1 for backwards compatibility reasons. However, delve recommends using version 2 for all new development and some clients may no longer work with version 1. For more information, see the &lt;a href="https://github.com/go-delve/delve/tree/master/Documentation/api"&gt;Delve documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Logging Stuff&lt;/h3&gt; 
&lt;p&gt;You can’t really log to stdout with Bubble Tea because your TUI is busy occupying that! You can, however, log to a file by including something like the following prior to starting your Bubble Tea program:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;if len(os.Getenv("DEBUG")) &amp;gt; 0 {
	f, err := tea.LogToFile("debug.log", "debug")
	if err != nil {
		fmt.Println("fatal:", err)
		os.Exit(1)
	}
	defer f.Close()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see what’s being logged in real time, run &lt;code&gt;tail -f debug.log&lt;/code&gt; while you run your program in another window.&lt;/p&gt; 
&lt;h2&gt;Libraries we use with Bubble Tea&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/bubbles"&gt;Bubbles&lt;/a&gt;: Common Bubble Tea components such as text inputs, viewports, spinners and so on&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/lipgloss"&gt;Lip Gloss&lt;/a&gt;: Style, format and layout tools for terminal applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/harmonica"&gt;Harmonica&lt;/a&gt;: A spring animation library for smooth, natural motion&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lrstanley/bubblezone"&gt;BubbleZone&lt;/a&gt;: Easy mouse event tracking for Bubble Tea components&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NimbleMarkets/ntcharts"&gt;ntcharts&lt;/a&gt;: A terminal charting library built for Bubble Tea and &lt;a href="https://github.com/charmbracelet/lipgloss"&gt;Lip Gloss&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Bubble Tea in the Wild&lt;/h2&gt; 
&lt;p&gt;There are over &lt;a href="https://github.com/charmbracelet/bubbletea/network/dependents"&gt;10,000 applications&lt;/a&gt; built with Bubble Tea! Here are a handful of ’em.&lt;/p&gt; 
&lt;h3&gt;Staff favourites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/twpayne/chezmoi"&gt;chezmoi&lt;/a&gt;: securely manage your dotfiles across multiple machines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bensadeh/circumflex"&gt;circumflex&lt;/a&gt;: read Hacker News in the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.github.com/dlvhdr/gh-dash"&gt;gh-dash&lt;/a&gt;: a GitHub CLI extension for PRs and issues&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Broderick-Westrope/tetrigo"&gt;Tetrigo&lt;/a&gt;: Tetris in the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emprcl/signls"&gt;Signls&lt;/a&gt;: a generative midi sequencer designed for composition and live performance&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yorukot/superfile"&gt;Superfile&lt;/a&gt;: a super file manager&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;In Industry&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Microsoft Azure –&amp;nbsp;&lt;a href="https://github.com/Azure/aztfy"&gt;Aztify&lt;/a&gt;: bring Microsoft Azure resources under Terraform&lt;/li&gt; 
 &lt;li&gt;Daytona –&amp;nbsp;&lt;a href="https://github.com/daytonaio/daytona"&gt;Daytona&lt;/a&gt;: open source dev environment manager&lt;/li&gt; 
 &lt;li&gt;Cockroach Labs – &lt;a href="https://github.com/cockroachdb/cockroach"&gt;CockroachDB&lt;/a&gt;: a cloud-native, high-availability distributed SQL database&lt;/li&gt; 
 &lt;li&gt;Truffle Security Co. –&amp;nbsp;&lt;a href="https://github.com/trufflesecurity/trufflehog"&gt;Trufflehog&lt;/a&gt;: find leaked credentials&lt;/li&gt; 
 &lt;li&gt;NVIDIA –&amp;nbsp;&lt;a href="https://github.com/NVIDIA/container-canary"&gt;container-canary&lt;/a&gt;: a container validator&lt;/li&gt; 
 &lt;li&gt;AWS –&amp;nbsp;&lt;a href="https://github.com/awslabs/eks-node-viewer"&gt;eks-node-viewer&lt;/a&gt;: a tool for visualizing dynamic node usage within an EKS cluster&lt;/li&gt; 
 &lt;li&gt;MinIO –&amp;nbsp;&lt;a href="https://github.com/minio/mc"&gt;mc&lt;/a&gt;: the official &lt;a href="https://min.io"&gt;MinIO&lt;/a&gt; client&lt;/li&gt; 
 &lt;li&gt;Ubuntu –&amp;nbsp;&lt;a href="https://github.com/ubuntu/authd"&gt;Authd&lt;/a&gt;: an authentication daemon for cloud-based identity providers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Charm stuff&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/glow"&gt;Glow&lt;/a&gt;: a markdown reader, browser, and online markdown stash&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/huh"&gt;Huh?&lt;/a&gt;: an interactive prompt and form toolkit&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/mods"&gt;Mods&lt;/a&gt;: AI on the CLI, built for pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/wishlist"&gt;Wishlist&lt;/a&gt;: an SSH directory (and bastion!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;There’s so much more where that came from&lt;/h3&gt; 
&lt;p&gt;For more applications built with Bubble Tea see &lt;a href="https://github.com/charm-and-friends/charm-in-the-wild"&gt;Charm &amp;amp; Friends&lt;/a&gt;. Is there something cool you made with Bubble Tea you want to share? &lt;a href="https://github.com/charm-and-friends/charm-in-the-wild"&gt;PRs&lt;/a&gt; are welcome!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/charmbracelet/bubbletea/contribute"&gt;contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;We’d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/charmcli"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mastodon.social/@charmcli"&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://charm.sh/chat"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Bubble Tea is based on the paradigms of &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt; by Evan Czaplicki et alia and the excellent &lt;a href="https://github.com/tj/go-tea"&gt;go-tea&lt;/a&gt; by TJ Holowaychuk. It’s inspired by the many great &lt;a href="https://de.wikipedia.org/wiki/Zeichenorientierte_Benutzerschnittstelle"&gt;&lt;em&gt;Zeichenorientierte Benutzerschnittstellen&lt;/em&gt;&lt;/a&gt; of days past.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/charmbracelet/bubbletea/raw/main/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Part of &lt;a href="https://charm.sh"&gt;Charm&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://charm.sh/"&gt;&lt;img alt="The Charm logo" src="https://stuff.charm.sh/charm-banner-next.jpg" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Charm热爱开源 • Charm loves open source • نحنُ نحب المصادر المفتوحة&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grpc/grpc-go</title>
      <link>https://github.com/grpc/grpc-go</link>
      <description>&lt;p&gt;The Go language implementation of gRPC. HTTP/2 based RPC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC-Go&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/google.golang.org/grpc"&gt;&lt;img src="https://pkg.go.dev/badge/google.golang.org/grpc" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/grpc/grpc-go"&gt;&lt;img src="https://goreportcard.com/badge/grpc/grpc-go" alt="GoReportCard" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/grpc/grpc-go"&gt;&lt;img src="https://codecov.io/gh/grpc/grpc-go/graph/badge.svg?sanitize=true" alt="codecov" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://golang.org"&gt;Go&lt;/a&gt; implementation of &lt;a href="https://grpc.io"&gt;gRPC&lt;/a&gt;: A high performance, open source, general RPC framework that puts mobile and HTTP/2 first. For more information see the &lt;a href="https://grpc.io/docs/languages/go"&gt;Go gRPC docs&lt;/a&gt;, or jump directly into the &lt;a href="https://grpc.io/docs/languages/go/quickstart"&gt;quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://golang.org"&gt;Go&lt;/a&gt;&lt;/strong&gt;: any one of the &lt;strong&gt;two latest major&lt;/strong&gt; &lt;a href="https://golang.org/doc/devel/release.html"&gt;releases&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Simply add the following import to your code, and then &lt;code&gt;go [build|run|test]&lt;/code&gt; will automatically fetch the necessary dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "google.golang.org/grpc"
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are trying to access &lt;code&gt;grpc-go&lt;/code&gt; from &lt;strong&gt;China&lt;/strong&gt;, see the &lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/#FAQ"&gt;FAQ&lt;/a&gt; below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Learn more&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grpc.io/docs/languages/go"&gt;Go gRPC docs&lt;/a&gt;, which include a &lt;a href="https://grpc.io/docs/languages/go/quickstart"&gt;quick start&lt;/a&gt; and &lt;a href="https://pkg.go.dev/google.golang.org/grpc"&gt;API reference&lt;/a&gt; among other resources&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/Documentation"&gt;Low-level technical docs&lt;/a&gt; from this repository&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5180705743044608"&gt;Performance benchmark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/grpc/grpc-go/master/CONTRIBUTING.md"&gt;Contribution guidelines&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;I/O Timeout Errors&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;golang.org&lt;/code&gt; domain may be blocked from some countries. &lt;code&gt;go get&lt;/code&gt; usually produces an error like the following when this happens:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ go get -u google.golang.org/grpc
package google.golang.org/grpc: unrecognized import path "google.golang.org/grpc" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build Go code, there are several options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Set up a VPN and access google.golang.org through that.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;With Go module support: it is possible to use the &lt;code&gt;replace&lt;/code&gt; feature of &lt;code&gt;go mod&lt;/code&gt; to create aliases for golang.org packages. In your project's directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;go mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest
go mod tidy
go mod vendor
go build -mod=vendor
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, this will need to be done for all transitive dependencies hosted on golang.org as well. For details, refer to &lt;a href="https://github.com/golang/go/issues/28652"&gt;golang/go issue #28652&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Compiling error, undefined: grpc.SupportPackageIsVersion&lt;/h3&gt; 
&lt;p&gt;Please update to the latest version of gRPC-Go using &lt;code&gt;go get google.golang.org/grpc&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;How to turn on logging&lt;/h3&gt; 
&lt;p&gt;The default logger is controlled by environment variables. Turn everything on like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99
$ export GRPC_GO_LOG_SEVERITY_LEVEL=info
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The RPC failed with error &lt;code&gt;"code = Unavailable desc = transport is closing"&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;This error means the connection the RPC is using was closed, and there are many possible reasons, including:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;mis-configured transport credentials, connection failed on handshaking&lt;/li&gt; 
 &lt;li&gt;bytes disrupted, possibly by a proxy in between&lt;/li&gt; 
 &lt;li&gt;server shutdown&lt;/li&gt; 
 &lt;li&gt;Keepalive parameters caused connection shutdown, for example if you have configured your server to terminate connections regularly to &lt;a href="https://github.com/grpc/grpc-go/issues/3170#issuecomment-552517779"&gt;trigger DNS lookups&lt;/a&gt;. If this is the case, you may want to increase your &lt;a href="https://pkg.go.dev/google.golang.org/grpc/keepalive?tab=doc#ServerParameters"&gt;MaxConnectionAgeGrace&lt;/a&gt;, to allow longer RPC calls to finish.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;It can be tricky to debug this because the error happens on the client side but the root cause of the connection being closed is on the server side. Turn on logging on &lt;strong&gt;both client and server&lt;/strong&gt;, and see if there are any transport errors.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>