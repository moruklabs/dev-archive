<rss version="2.0">
  <channel>
    <title>GitHub Rust Weekly Trending</title>
    <description>Weekly Trending of Rust in GitHub</description>
    <pubDate>Tue, 09 Sep 2025 01:51:12 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>louis-e/arnis</title>
      <link>https://github.com/louis-e/arnis</link>
      <description>&lt;p&gt;Generate any location from the real world in Minecraft Java Edition with a high level of detail.&lt;/p&gt;&lt;hr&gt;&lt;img src="https://github.com/louis-e/arnis/raw/main/gitassets/banner.png?raw=true" width="100%" alt="Banner" /&gt; 
&lt;h1&gt;Arnis &lt;a href="https://github.com/louis-e/arnis/actions"&gt;&lt;img src="https://github.com/louis-e/arnis/actions/workflows/ci-build.yml/badge.svg?sanitize=true" alt="CI Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/louis-e/arnis/releases"&gt;&lt;img alt="GitHub Release" src="https://img.shields.io/github/v/release/louis-e/arnis" /&gt;&lt;/a&gt; &lt;a href="https://github.com/louis-e/arnis/releases"&gt;&lt;img alt="GitHub Downloads (all assets, all releases" src="https://img.shields.io/github/downloads/louis-e/arnis/total" /&gt;&lt;/a&gt; &lt;a href="https://github.com/louis-e/arnis/releases"&gt;&lt;img src="https://img.shields.io/badge/Download-here-green" alt="Download here" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/mA2g69Fhxq"&gt;&lt;img src="https://img.shields.io/discord/1326192999738249267?label=Discord&amp;amp;color=%237289da" alt="Discord" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Arnis creates complex and accurate Minecraft Java Edition worlds that reflect real-world geography, topography, and architecture.&lt;/p&gt; 
&lt;p&gt;This free and open source project is designed to handle large-scale geographic data from the real world and generate detailed Minecraft worlds. The algorithm processes geospatial data from OpenStreetMap as well as elevation data to create an accurate Minecraft representation of terrain and architecture. Generate your hometown, big cities, and natural landscapes with ease!&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/louis-e/arnis/refs/heads/main/gitassets/preview.jpg" alt="Minecraft Preview" /&gt; &lt;i&gt;This Github page is the official project website. Do not download Arnis from any other website.&lt;/i&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;‚å®&lt;/span&gt; Usage&lt;/h2&gt; 
&lt;p&gt;&lt;img width="60%" src="https://github.com/louis-e/arnis/raw/main/gitassets/gui.png?raw=true" /&gt;&lt;br /&gt; Download the &lt;a href="https://github.com/louis-e/arnis/releases/"&gt;latest release&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/louis-e/arnis/main/#trophy-open-source"&gt;compile&lt;/a&gt; the project on your own.&lt;/p&gt; 
&lt;p&gt;Choose your area on the map using the rectangle tool and select your Minecraft world - then simply click on &lt;i&gt;Start Generation&lt;/i&gt;! Additionally, you can customize various generation settings, such as world scale, spawn point, or building interior generation.&lt;/p&gt; 
&lt;h2&gt;üìö Documentation&lt;/h2&gt; 
&lt;img src="https://github.com/louis-e/arnis/raw/main/gitassets/documentation.png?raw=true" width="100%" alt="Banner" /&gt; 
&lt;p&gt;Full documentation is available in the &lt;a href="https://github.com/louis-e/arnis/wiki/"&gt;GitHub Wiki&lt;/a&gt;, covering topics such as technical explanations, FAQs, contribution guidelines and roadmaps.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;üèÜ&lt;/span&gt; Open Source&lt;/h2&gt; 
&lt;h4&gt;Key objectives of this project&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Ensure that all components (e.g., data fetching, processing, and world generation) are cleanly separated into distinct modules for better maintainability and scalability.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance Optimization&lt;/strong&gt;: We aim to keep a good performance and speed of the world generation process.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive Documentation&lt;/strong&gt;: Detailed in-code documentation for a clear structure and logic.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User-Friendly Experience&lt;/strong&gt;: Focus on making the project easy to use for end users.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cross-Platform Support&lt;/strong&gt;: We want this project to run smoothly on Windows, macOS, and Linux.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;How to contribute&lt;/h4&gt; 
&lt;p&gt;This project is open source and welcomes contributions from everyone! Whether you're interested in fixing bugs, improving performance, adding new features, or enhancing documentation, your input is valuable. Simply fork the repository, make your changes, and submit a pull request. Please respect the above mentioned key objectives. Contributions of all levels are appreciated, and your efforts help improve this tool for everyone.&lt;/p&gt; 
&lt;p&gt;Command line Build: &lt;code&gt;cargo run --no-default-features -- --terrain --path="C:/YOUR_PATH/.minecraft/saves/worldname" --bbox="min_lat,min_lng,max_lat,max_lng"&lt;/code&gt;&lt;br /&gt; GUI Build: &lt;code&gt;cargo run&lt;/code&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;After your pull request was merged, I will take care of regularly creating update releases which will include your changes.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;‚≠ê&lt;/span&gt; Star History&lt;/h2&gt; 
&lt;a href="https://star-history.com/#louis-e/arnis&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=louis-e/arnis&amp;amp;Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=louis-e/arnis&amp;amp;Date&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=louis-e/arnis&amp;amp;Date&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;&lt;span&gt;üì∞&lt;/span&gt; Academic &amp;amp; Press Recognition&lt;/h2&gt; 
&lt;img src="https://github.com/louis-e/arnis/raw/main/gitassets/recognition.png?raw=true" width="100%" alt="Banner" /&gt; 
&lt;p&gt;Arnis has been recognized in various academic and press publications after gaining a lot of attention in December 2024.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.researchgate.net/publication/384644535_Floodcraft_Game-based_Interactive_Learning_Environment_using_Minecraft_for_Flood_Mitigation_and_Preparedness_for_K-12_Education"&gt;Floodcraft: Game-based Interactive Learning Environment using Minecraft for Flood Mitigation and Preparedness for K-12 Education&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hackaday.com/2024/12/30/bringing-openstreetmap-data-into-minecraft/"&gt;Hackaday: Bringing OpenStreetMap Data into Minecraft&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.tomshardware.com/video-games/pc-gaming/minecraft-tool-lets-you-create-scale-replicas-of-real-world-locations-arnis-uses-geospatial-data-from-openstreetmap-to-generate-minecraft-maps"&gt;TomsHardware: Minecraft Tool Lets You Create Scale Replicas of Real-World Locations&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.xda-developers.com/hometown-minecraft-map-arnis/"&gt;XDA Developers: Hometown Minecraft Map: Arnis&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;¬©&lt;/span&gt; License Information&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2022-2025 Louis Erbkamm (louis-e)&lt;/p&gt; 
&lt;p&gt;Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;a href="https://github.com/louis-e/arnis/raw/main/LICENSE"&gt;^3&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Download Arnis only from the official source (&lt;a href="https://github.com/louis-e/arnis/"&gt;https://github.com/louis-e/arnis/&lt;/a&gt;). Every other website providing a download and claiming to be affiliated with the project is unofficial and may be malicious.&lt;/p&gt; 
&lt;p&gt;The logo was made by @nxfx21.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Eventual-Inc/Daft</title>
      <link>https://github.com/Eventual-Inc/Daft</link>
      <description>&lt;p&gt;Distributed query engine providing simple and reliable data processing for any modality and scale&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|Banner|&lt;/p&gt; 
&lt;p&gt;|CI| |PyPI| |Latest Tag| |Coverage| |Slack|&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Website &amp;lt;https://www.daft.ai&amp;gt;&lt;/code&gt;_ ‚Ä¢ &lt;code&gt;Docs &amp;lt;https://docs.daft.ai&amp;gt;&lt;/code&gt;_ ‚Ä¢ &lt;code&gt;Installation &amp;lt;https://docs.daft.ai/en/stable/install/&amp;gt;&lt;/code&gt;_ ‚Ä¢ &lt;code&gt;Daft Quickstart &amp;lt;https://docs.daft.ai/en/stable/quickstart/&amp;gt;&lt;/code&gt;_ ‚Ä¢ &lt;code&gt;Community and Support &amp;lt;https://github.com/Eventual-Inc/Daft/discussions&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;h1&gt;Daft: Unified Engine for Data Analytics, Engineering &amp;amp; ML/AI&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;Daft &amp;lt;https://www.daft.ai&amp;gt;&lt;/code&gt;_ is a distributed query engine for large-scale data processing using Python or SQL, implemented in Rust.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Familiar interactive API:&lt;/strong&gt; Lazy Python Dataframe for rapid and interactive iteration, or SQL for analytical queries&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Focus on the what:&lt;/strong&gt; Powerful Query Optimizer that rewrites queries to be as efficient as possible&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Catalog integrations:&lt;/strong&gt; Full integration with data catalogs such as Apache Iceberg&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rich multimodal type-system:&lt;/strong&gt; Supports multimodal types such as Images, URLs, Tensors and more&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Seamless Interchange&lt;/strong&gt;: Built on the &lt;code&gt;Apache Arrow &amp;lt;https://arrow.apache.org/docs/index.html&amp;gt;&lt;/code&gt;_ In-Memory Format&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Built for the cloud:&lt;/strong&gt; &lt;code&gt;Record-setting &amp;lt;https://www.daft.ai/blog/announcing-daft-02&amp;gt;&lt;/code&gt;_ I/O performance for integrations with S3 cloud storage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;About Daft&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Benchmarks&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Contributing&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Telemetry&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Related Projects&lt;/code&gt;_&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;License&lt;/code&gt;_&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About Daft&lt;/h2&gt; 
&lt;p&gt;Daft was designed with the following principles in mind:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Any Data&lt;/strong&gt;: Beyond the usual strings/numbers/dates, Daft columns can also hold complex or nested multimodal data such as Images, Embeddings and Python objects efficiently with its Arrow based memory representation. Ingestion and basic transformations of multimodal data is extremely easy and performant in Daft.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interactive Computing&lt;/strong&gt;: Daft is built for the interactive developer experience through notebooks or REPLs - intelligent caching/query optimizations accelerates your experimentation and data exploration.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Distributed Computing&lt;/strong&gt;: Some workloads can quickly outgrow your local laptop's computational resources - Daft integrates natively with &lt;code&gt;Ray &amp;lt;https://www.ray.io&amp;gt;&lt;/code&gt;_ for running dataframes on large clusters of machines with thousands of CPUs/GPUs.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Installation ^^^^^^^^^^^^&lt;/p&gt; 
&lt;p&gt;Install Daft with &lt;code&gt;pip install daft&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For more advanced installations (e.g. installing from source or with extra dependencies such as Ray and AWS utilities), please see our &lt;code&gt;Installation Guide &amp;lt;https://docs.daft.ai/en/stable/install/&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;p&gt;Quickstart ^^^^^^^^^^&lt;/p&gt; 
&lt;p&gt;Check out our &lt;code&gt;quickstart &amp;lt;https://docs.daft.ai/en/stable/quickstart/&amp;gt;&lt;/code&gt;_!&lt;/p&gt; 
&lt;p&gt;In this example, we load images from an AWS S3 bucket's URLs and resize each image in the dataframe:&lt;/p&gt; 
&lt;p&gt;.. code:: python&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import daft

# Load a dataframe from filepaths in an S3 bucket
df = daft.from_glob_path("s3://daft-public-data/laion-sample-images/*")

# 1. Download column of image URLs as a column of bytes
# 2. Decode the column of bytes into a column of images
df = df.with_column("image", df["path"].url.download().image.decode())

# Resize each image into 32x32
df = df.with_column("resized", df["image"].image.resize(32, 32))

df.show(3)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;|Quickstart Image|&lt;/p&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;|Benchmark Image|&lt;/p&gt; 
&lt;p&gt;To see the full benchmarks, detailed setup, and logs, check out our &lt;code&gt;benchmarking page. &amp;lt;https://docs.daft.ai/en/stable/resources/benchmarks/tpch/&amp;gt;&lt;/code&gt;_&lt;/p&gt; 
&lt;p&gt;More Resources ^^^^^^^^^^^^^^&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Daft Quickstart &amp;lt;https://docs.daft.ai/en/stable/quickstart/&amp;gt;&lt;/code&gt;_ - learn more about Daft's full range of capabilities including dataloading from URLs, joins, user-defined functions (UDF), groupby, aggregations and more.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;User Guide &amp;lt;https://docs.daft.ai/en/stable/&amp;gt;&lt;/code&gt;_ - take a deep-dive into each topic within Daft&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;API Reference &amp;lt;https://docs.daft.ai/en/stable/api/&amp;gt;&lt;/code&gt;_ - API reference for public classes/functions of Daft&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;SQL Reference &amp;lt;https://docs.daft.ai/en/stable/sql/&amp;gt;&lt;/code&gt;_ - Daft SQL reference&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We &amp;lt;3 developers! To start contributing to Daft, please read &lt;code&gt;CONTRIBUTING.md &amp;lt;https://github.com/Eventual-Inc/Daft/blob/main/CONTRIBUTING.md&amp;gt;&lt;/code&gt;_. This document describes the development lifecycle and toolchain for working on Daft. It also details how to add new functionality to the core engine and expose it through a Python API.&lt;/p&gt; 
&lt;p&gt;Here's a list of &lt;code&gt;good first issues &amp;lt;https://github.com/Eventual-Inc/Daft/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&amp;gt;&lt;/code&gt;_ to get yourself warmed up with Daft. Comment in the issue to pick it up, and feel free to ask any questions!&lt;/p&gt; 
&lt;h2&gt;Telemetry&lt;/h2&gt; 
&lt;p&gt;To help improve Daft, we collect non-identifiable data via Scarf (&lt;a href="https://scarf.sh"&gt;https://scarf.sh&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;To disable this behavior, set the environment variable &lt;code&gt;DO_NOT_TRACK=true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The data that we collect is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Non-identifiable:&lt;/strong&gt; Events are keyed by a session ID which is generated on import of Daft&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Metadata-only:&lt;/strong&gt; We do not collect any of our users‚Äô proprietary code or data&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;For development only:&lt;/strong&gt; We do not buy or sell any user data&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Please see our &lt;code&gt;documentation &amp;lt;https://docs.daft.ai/en/stable/resources/telemetry/&amp;gt;&lt;/code&gt;_ for more details.&lt;/p&gt; 
&lt;p&gt;.. image:: &lt;a href="https://static.scarf.sh/a.png?x-pxid=31f8d5ba-7e09-4d75-8895-5252bbf06cf6"&gt;https://static.scarf.sh/a.png?x-pxid=31f8d5ba-7e09-4d75-8895-5252bbf06cf6&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;+---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | Engine | Query Optimizer | Multimodal | Distributed | Arrow Backed | Vectorized Execution Engine | Out-of-core | +===================================================+=================+===============+=============+=================+=============================+=============+ | Daft | Yes | Yes | Yes | Yes | Yes | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Pandas &amp;lt;https://github.com/pandas-dev/pandas&amp;gt;&lt;/code&gt;_ | No | Python object | No | optional &amp;gt;= 2.0 | Some(Numpy) | No | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Polars &amp;lt;https://github.com/pola-rs/polars&amp;gt;&lt;/code&gt;_ | Yes | Python object | No | Yes | Yes | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Modin &amp;lt;https://github.com/modin-project/modin&amp;gt;&lt;/code&gt;_ | Yes | Python object | Yes | No | Some(Pandas) | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Pyspark &amp;lt;https://github.com/apache/spark&amp;gt;&lt;/code&gt;_ | Yes | No | Yes | Pandas UDF/IO | Pandas UDF | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+ | &lt;code&gt;Dask DF &amp;lt;https://github.com/dask/dask&amp;gt;&lt;/code&gt;_ | No | Python object | Yes | No | Some(Pandas) | Yes | +---------------------------------------------------+-----------------+---------------+-------------+-----------------+-----------------------------+-------------+&lt;/p&gt; 
&lt;p&gt;Check out our &lt;code&gt;engine comparison page &amp;lt;https://docs.daft.ai/en/stable/resources/engine_comparison/&amp;gt;&lt;/code&gt;_ for more details!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Daft has an Apache 2.0 license - please see the LICENSE file.&lt;/p&gt; 
&lt;p&gt;.. |Quickstart Image| image:: &lt;a href="https://github.com/Eventual-Inc/Daft/assets/17691182/dea2f515-9739-4f3e-ac58-cd96d51e44a8"&gt;https://github.com/Eventual-Inc/Daft/assets/17691182/dea2f515-9739-4f3e-ac58-cd96d51e44a8&lt;/a&gt; :alt: Dataframe code to load a folder of images from AWS S3 and create thumbnails :height: 256&lt;/p&gt; 
&lt;p&gt;.. |Benchmark Image| image:: &lt;a href="https://github-production-user-asset-6210df.s3.amazonaws.com/2550285/243524430-338e427d-f049-40b3-b555-4059d6be7bfd.png"&gt;https://github-production-user-asset-6210df.s3.amazonaws.com/2550285/243524430-338e427d-f049-40b3-b555-4059d6be7bfd.png&lt;/a&gt; :alt: Benchmarks for SF100 TPCH&lt;/p&gt; 
&lt;p&gt;.. |Banner| image:: &lt;a href="https://daft.ai/images/diagram.png"&gt;https://daft.ai/images/diagram.png&lt;/a&gt; :target: &lt;a href="https://www.daft.ai"&gt;https://www.daft.ai&lt;/a&gt; :alt: Daft dataframes can load any data such as PDF documents, images, protobufs, csv, parquet and audio files into a table dataframe structure for easy querying&lt;/p&gt; 
&lt;p&gt;.. |CI| image:: &lt;a href="https://github.com/Eventual-Inc/Daft/actions/workflows/pr-test-suite.yml/badge.svg"&gt;https://github.com/Eventual-Inc/Daft/actions/workflows/pr-test-suite.yml/badge.svg&lt;/a&gt; :target: &lt;a href="https://github.com/Eventual-Inc/Daft/actions/workflows/pr-test-suite.yml?query=branch:main"&gt;https://github.com/Eventual-Inc/Daft/actions/workflows/pr-test-suite.yml?query=branch:main&lt;/a&gt; :alt: GitHub Actions tests&lt;/p&gt; 
&lt;p&gt;.. |PyPI| image:: &lt;a href="https://img.shields.io/pypi/v/daft.svg?label=pip&amp;amp;logo=PyPI&amp;amp;logoColor=white"&gt;https://img.shields.io/pypi/v/daft.svg?label=pip&amp;amp;logo=PyPI&amp;amp;logoColor=white&lt;/a&gt; :target: &lt;a href="https://pypi.org/project/daft"&gt;https://pypi.org/project/daft&lt;/a&gt; :alt: PyPI&lt;/p&gt; 
&lt;p&gt;.. |Latest Tag| image:: &lt;a href="https://img.shields.io/github/v/tag/Eventual-Inc/Daft?label=latest&amp;amp;logo=GitHub"&gt;https://img.shields.io/github/v/tag/Eventual-Inc/Daft?label=latest&amp;amp;logo=GitHub&lt;/a&gt; :target: &lt;a href="https://github.com/Eventual-Inc/Daft/tags"&gt;https://github.com/Eventual-Inc/Daft/tags&lt;/a&gt; :alt: latest tag&lt;/p&gt; 
&lt;p&gt;.. |Coverage| image:: &lt;a href="https://codecov.io/gh/Eventual-Inc/Daft/branch/main/graph/badge.svg?token=J430QVFE89"&gt;https://codecov.io/gh/Eventual-Inc/Daft/branch/main/graph/badge.svg?token=J430QVFE89&lt;/a&gt; :target: &lt;a href="https://codecov.io/gh/Eventual-Inc/Daft"&gt;https://codecov.io/gh/Eventual-Inc/Daft&lt;/a&gt; :alt: Coverage&lt;/p&gt; 
&lt;p&gt;.. |Slack| image:: &lt;a href="https://img.shields.io/badge/slack-@distdata-purple.svg?logo=slack"&gt;https://img.shields.io/badge/slack-@distdata-purple.svg?logo=slack&lt;/a&gt; :target: &lt;a href="https://join.slack.com/t/dist-data/shared_invite/zt-2e77olvxw-uyZcPPV1SRchhi8ah6ZCtg"&gt;https://join.slack.com/t/dist-data/shared_invite/zt-2e77olvxw-uyZcPPV1SRchhi8ah6ZCtg&lt;/a&gt; :alt: slack community&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BoundaryML/baml</title>
      <link>https://github.com/BoundaryML/baml</link>
      <description>&lt;p&gt;The AI framework that adds the engineering to prompt engineering (Python/TS/Ruby/Java/C#/Rust/Go compatible)&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://boundaryml.com?utm_source=github" target="_blank" rel="noopener noreferrer"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="fern/assets/baml-lamb-white.png" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/BoundaryML/baml/canary/fern/assets/baml-lamb-white.png" height="64" id="top" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://pypi.org/project/baml-py/"&gt;&lt;img src="https://img.shields.io/pypi/v/baml-py?color=006dad&amp;amp;label=BAML%20Version" alt="BAML Version" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h2&gt;BAML: Basically a Made-up Language&lt;/h2&gt; 
 &lt;h4&gt; &lt;p&gt;&lt;a href="https://www.boundaryml.com/"&gt;Homepage&lt;/a&gt; | &lt;a href="https://docs.boundaryml.com"&gt;Docs&lt;/a&gt; | &lt;a href="https://www.boundaryml.com/chat"&gt;BAML AI Chat&lt;/a&gt; | &lt;a href="https://discord.gg/BTNBeXGuaS"&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;p&gt;BAML is a simple prompting language for building reliable &lt;strong&gt;AI workflows and agents&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;BAML makes prompt engineering easy by turning it into &lt;em&gt;schema engineering&lt;/em&gt; -- where you mostly focus on the models of your prompt -- to get more reliable outputs. You don't need to write your whole app in BAML, only the prompts! You can wire-up your LLM Functions in any language of your choice! See our quickstarts for &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;Go, and more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;BAML comes with all batteries included -- with full typesafety, streaming, retries, wide model support, even when they don't support native &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#enable-reliable-tool-calling-with-any-model-even-when-they-dont-support-it"&gt;tool-calling APIs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try BAML&lt;/strong&gt;: &lt;a href="https://www.promptfiddle.com"&gt;Prompt Fiddle&lt;/a&gt; ‚Ä¢ &lt;a href="https://baml-examples.vercel.app/"&gt;Interactive App Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;The core BAML principle: LLM Prompts are functions&lt;/h2&gt; 
&lt;p&gt;The fundamental building block in BAML is a function. Every prompt is a function that takes in parameters and returns a type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every function additionally defines which models it uses and what its prompt is.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; StopTool | ReplyTool {
    client "openai/gpt-4o-mini"

    prompt #"
        Be a {{ tone }} bot.

        {{ ctx.output_format }}

        {% for m in message %}
        {{ _.role(m.role) }}
        {{ m.content }}
        {% endfor %}
    "#
}

class Message {
    role string
    content string
}

class ReplyTool {
  response string
}

class StopTool {
  action "stop" @description(#"
    when it might be a good time to end the conversation
  "#)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;BAML Functions can be called from any language&lt;/h2&gt; 
&lt;p&gt;Below we call the ChatAgent function we defined in BAML through Python. BAML's Rust compiler generates a "baml_client" to access and call them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from baml_client import b
from baml_client.types import Message, StopTool

messages = [Message(role="assistant", content="How can I help?")]

while True:
  print(messages[-1].content)
  user_reply = input()
  messages.append(Message(role="user", content=user_reply))
  tool = b.ChatAgent(messages, "happy")
  if isinstance(tool, StopTool):
    print("Goodbye!")
    break
  else:
    messages.append(Message(role="assistant", content=tool.response))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can write any kind of agent or workflow using chained BAML functions. An agent is a while loop that calls a Chat BAML Function with some state.&lt;/p&gt; 
&lt;p&gt;And if you need to stream, add a couple more lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;stream = b.stream.ChatAgent(messages, "happy")
# partial is a Partial type with all Optional fields
for tool in stream:
    if isinstance(tool, StopTool):
      ...
    
final = stream.get_final_response()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And get fully type-safe outputs for each chunk in the stream.&lt;/p&gt; 
&lt;h2&gt;Test prompts 10x faster, right in your IDE&lt;/h2&gt; 
&lt;p&gt;BAML comes with native tooling for VSCode (jetbrains + neovim coming soon).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Visualize full prompt (including any multi-modal assets), and the API request&lt;/strong&gt;. BAML gives you full transparency and control of the prompt.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/c0b34db9-80cd-45a7-a356-6b5ab4a9c5b7" alt="raw-curl" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using AI is all about iteration speed.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If testing your pipeline takes 2 minutes, you can only test 10 ideas in 20 minutes.&lt;/p&gt; 
&lt;p&gt;If you reduce it to 5 seconds, you can test 240 ideas in the same amount of time. &lt;img src="https://github.com/user-attachments/assets/6fc6b8a6-ffed-4cfc-80b8-78bc8a3d66a6" alt="resume-attempt2-smaller2" /&gt;&lt;/p&gt; 
&lt;p&gt;The playground also allows you to run tests in parallel -- for even faster iteration speeds üöÄ.&lt;/p&gt; 
&lt;p&gt;No need to login to websites, and no need to manually define json schemas.&lt;/p&gt; 
&lt;h2&gt;Enable reliable tool-calling with any model&lt;/h2&gt; 
&lt;p&gt;BAML works even when the models don't support native tool-calling APIs. We created the SAP (schema-aligned parsing) algorithm to support the flexible outputs LLMs can provide, like markdown within a JSON blob or chain-of-thought prior to answering. &lt;a href="https://www.boundaryml.com/blog/schema-aligned-parsing"&gt;Read more about SAP&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With BAML, your structured outputs work in Day-1 of a model release. No need to figure out whether a model supports parallel tool calls, or whether it supports recursive schemas, or &lt;code&gt;anyOf&lt;/code&gt; or &lt;code&gt;oneOf&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;See it in action with: &lt;strong&gt;&lt;a href="https://www.boundaryml.com/blog/deepseek-r1-function-calling"&gt;Deepseek-R1&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://www.boundaryml.com/blog/openai-o1"&gt;OpenAI O1&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Switch from 100s of models in a couple lines&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;function Extract() -&amp;gt; Resume {
+  client openai/o3-mini
  prompt #"
    ....
  "#
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/retry-policy"&gt;Retry policies&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/fallback"&gt;fallbacks&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/round-robin"&gt;model rotations&lt;/a&gt;. All statically defined. &lt;img src="https://www.boundaryml.com/blog/2025-01-24-ai-agents-need-a-new-syntax/06-fallback-retry.gif" alt="Fallback Retry" /&gt; Want to do pick models at runtime? Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-advanced/llm-client-registry"&gt;Client Registry&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We support: &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai"&gt;OpenAI&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/anthropic"&gt;Anthropic&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-ai-gemini"&gt;Gemini&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-vertex"&gt;Vertex&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/aws-bedrock"&gt;Bedrock&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai-from-azure"&gt;Azure OpenAI&lt;/a&gt; ‚Ä¢ &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic"&gt;Anything OpenAI Compatible&lt;/a&gt; (&lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-ollama"&gt;Ollama&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-open-router"&gt;OpenRouter&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-v-llm"&gt;VLLM&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-lm-studio"&gt;LMStudio&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-together-ai"&gt;TogetherAI&lt;/a&gt;, and more)&lt;/p&gt; 
&lt;h2&gt;Build beautiful streaming UIs&lt;/h2&gt; 
&lt;p&gt;BAML generates a ton of utilities for NextJS, Python (and any language) to make streaming UIs easy. &lt;img src="https://github.com/user-attachments/assets/cf82495b-21fc-40bf-ae98-93eef923d620" alt="recipe-generator" /&gt;&lt;/p&gt; 
&lt;p&gt;BAML's streaming interfaces are fully type-safe. Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-basics/streaming"&gt;Streaming Docs&lt;/a&gt;, and our &lt;a href="https://docs.boundaryml.com/guide/framework-integration/react-next-js/quick-start"&gt;React hooks&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Fully Open-Source, and offline&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open-source (Apache 2)&lt;/li&gt; 
 &lt;li&gt;100% private. AGI will not require an internet connection, neither will BAML 
  &lt;ul&gt; 
   &lt;li&gt;No network requests beyond model calls you explicitly set&lt;/li&gt; 
   &lt;li&gt;Not stored or used for any training data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;BAML files can be saved locally on your machine and checked into Github for easy diffs.&lt;/li&gt; 
 &lt;li&gt;Built in Rust. So fast, you can't even tell it's there.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;BAML's Design Philosophy&lt;/h2&gt; 
&lt;p&gt;Everything is fair game when making new syntax. If you can code it, it can be yours. This is our design philosophy to help restrict ideas:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;1:&lt;/strong&gt; Avoid invention when possible 
  &lt;ul&gt; 
   &lt;li&gt;Yes, prompts need versioning ‚Äî we have a great versioning tool: git&lt;/li&gt; 
   &lt;li&gt;Yes, you need to save prompts ‚Äî we have a great storage tool: filesystems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2:&lt;/strong&gt; Any file editor and any terminal should be enough to use it&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;3:&lt;/strong&gt; Be fast&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;4:&lt;/strong&gt; A first year university student should be able to understand it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why a new programming language&lt;/h2&gt; 
&lt;p&gt;We used to write websites like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;def home():
    return "&amp;lt;button onclick=\"() =&amp;gt; alert(\\\"hello!\\\")\"&amp;gt;Click&amp;lt;/button&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now we do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;function Home() {
  return &amp;lt;button onClick={() =&amp;gt; setCount(prev =&amp;gt; prev + 1)}&amp;gt;
          {count} clicks!
         &amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;New syntax can be incredible at expressing new ideas. Plus the idea of maintaining hundreds of f-strings for prompts kind of disgusts us ü§Æ. Strings are bad for maintainable codebases. We prefer structured strings.&lt;/p&gt; 
&lt;p&gt;The goal of BAML is to give you the expressiveness of English, but the structure of code.&lt;/p&gt; 
&lt;p&gt;Full &lt;a href="https://www.boundaryml.com/blog/ai-agents-need-new-syntax"&gt;blog post&lt;/a&gt; by us.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;As models get better, we'll continue expecting even more out of them. But what will never change is that we'll want a way to write maintainable code that uses those models. The current way we all just assemble strings is very reminiscent of the early days PHP/HTML soup in web development. We hope some of the ideas we shared today can make a tiny dent in helping us all shape the way we all code tomorrow.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Do I need to write my whole app in BAML?&lt;/td&gt; 
   &lt;td&gt;Nope, only the prompts! BAML translates definitions into the language of your choice! &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;more&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Is BAML stable?&lt;/td&gt; 
   &lt;td&gt;Yes, many companies use it in production! We ship updates weekly!&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Why a new language?&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#why-a-new-programming-language"&gt;Jump to section&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Checkout our &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/CONTRIBUTING.md"&gt;guide on getting started&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;You can cite the BAML repo as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{baml,
  author = {Vaibhav Gupta, Aaron Villalpando and Boundary ML team},
  title = {BAML},
  url = {https://github.com/boundaryml/baml},
  year = {2024}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ‚ù§Ô∏è by Boundary&lt;/p&gt; 
&lt;p&gt;HQ in Seattle, WA&lt;/p&gt; 
&lt;p&gt;P.S. We're hiring for software engineers that love rust. &lt;a href="mailto:founders@boundaryml.com"&gt;Email us&lt;/a&gt; or reach out on &lt;a href="https://discord.gg/ENtBB6kkXH"&gt;discord&lt;/a&gt;!&lt;/p&gt; 
&lt;div align="left" style="align-items: left;"&gt; 
 &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#top"&gt; &lt;img src="https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white" alt="Back to Top" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;img src="https://imgs.xkcd.com/comics/standards.png" alt_text="hi" /&gt;</description>
    </item>
    
    <item>
      <title>zama-ai/fhevm</title>
      <link>https://github.com/zama-ai/fhevm</link>
      <description>&lt;p&gt;FHEVM, a full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/fhevm-header-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/fhevm-header-light.png" /&gt; 
  &lt;img width="500" alt="fhevm" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt; üìÉ Read white paper&lt;/a&gt; |&lt;a href="https://docs.zama.ai/protocol"&gt; üìí Documentation&lt;/a&gt; | &lt;a href="https://zama.ai/community"&gt; üíõ Community support&lt;/a&gt; | &lt;a href="https://github.com/zama-ai/awesome-zama"&gt; üìö FHE resources by Zama&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/zama-ai/fhevm/releases"&gt; &lt;img src="https://img.shields.io/github/v/release/zama-ai/fhevm?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/fhevm/raw/main/LICENSE"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/License-BSD--3--Clause--Clear-%23ffb243?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zama-ai/bounty-program"&gt; 
  &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;img src="https://img.shields.io/badge/Contribute-Zama%20Bounty%20Program-%23ffd208?style=flat-square" /&gt;&lt;/a&gt; &lt;a href="https://slsa.dev"&gt;&lt;img alt="SLSA 3" src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;h3&gt;What is FHEVM?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;FHEVM&lt;/strong&gt; is the core framework of the &lt;em&gt;Zama Confidential Blockchain Protocol&lt;/em&gt;. It enables confidential smart contracts on EVM-compatible blockchains by leveraging Fully Homomorphic Encryption (FHE), allowing encrypted data to be processed directly onchain.&lt;/p&gt; 
&lt;p&gt;FHEVM ensures both confidentiality and composability, with the following guarantees:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;End-to-end encryption of transactions and state:&lt;/strong&gt; Data included in transactions is encrypted and never visible to anyone.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Composability and data availability on-chain:&lt;/strong&gt; States are updated while remaining encrypted at all times.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No impact on existing dApps and state:&lt;/strong&gt; Encrypted state co-exists alongside public one, and doesn't impact existing dApps. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Table of contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt;About&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#what-is-fhevm"&gt;What is FHEVM?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#project-structure"&gt;Project structure&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#main-features"&gt;Main features&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#use-cases"&gt;Use cases&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#working-with-fhevm"&gt;Working with FHEVM&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#citations"&gt;Citations&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#support"&gt;Support&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Project structure&lt;/h3&gt; 
&lt;p&gt;The directories of this repository are organized in the following way:&lt;/p&gt; 
&lt;h6&gt;FHEVM Contracts&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;gateway-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart contracts managing the gateway between on-chain and off-chain components.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;host-contracts/&lt;/code&gt;&lt;/strong&gt;: Smart Contracts deployed on the host chain for orchestrating FHE workflows.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Compute Engines&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;coprocessor/&lt;/code&gt;&lt;/strong&gt;: Rust-based coprocessor implementation for FHE operations.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;kms-connector/&lt;/code&gt;&lt;/strong&gt;: Interface for integrating with Key Management Services (KMS) to handle encryption keys securely.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h6&gt;FHEVM Utilities&lt;/h6&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;charts/&lt;/code&gt;&lt;/strong&gt;: Helm charts and deployment configurations for the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;golden-container-images/&lt;/code&gt;&lt;/strong&gt;: Docker golden images for Node.js and Rust environments used as base images by the stack.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;test-suite/&lt;/code&gt;&lt;/strong&gt;: Integration with docker-compose and tests covering end-to-end FHEVM stack behavior.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Main features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Privacy by design:&lt;/strong&gt; Building decentralized apps with full privacy and confidentiality on Ethereum, leveraging FHE.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Solidity integration:&lt;/strong&gt; Write FHEVM contracts like any standard Solidity contract using Solidity. Compatible with existing toolchains ‚Äî such as Hardhat and Foundry (&lt;em&gt;coming soon&lt;/em&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Programmable privacy:&lt;/strong&gt; Define exactly what data is encrypted and write the access control logic directly in your smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High precision encrypted integers :&lt;/strong&gt; Up to 256 bits of precision for integers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full range of operators:&lt;/strong&gt; All typical operators are available: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, ternary-if, boolean operations‚Ä¶. Consecutive FHE operations are not limited.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; The underlying FHE crypto-scheme of FHEVM is quantum-resistant. Decryption is managed via a key management system (KMS) using multi-party computation (MPC), ensuring security even if some parties are compromised or misbehaving.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Symbolic execution of FHE computations:&lt;/strong&gt; All FHE operations are executed symbolically on the host chain, significantly reducing execution time. The actual computations on encrypted data are offloaded asynchronously to our coprocessor, allowing for faster, efficient, and scalable processing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more about FHEVM features in the &lt;a href="https://docs.zama.ai/protocol"&gt;documentation&lt;/a&gt; and in our &lt;a href="https://github.com/zama-ai/fhevm/raw/main/fhevm-whitepaper.pdf"&gt;whitepaper&lt;/a&gt;.&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;Use cases&lt;/h3&gt; 
&lt;p&gt;FHEVM is built for developers to write confidential smart contracts without the need to learn cryptography. Leveraging FHEVM, you can unlock a myriad of new use cases such as DeFi, gaming, and more. For instance:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential transfers&lt;/strong&gt;: Keep balances and amounts private, without using mixers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tokenization&lt;/strong&gt;: Swap tokens and RWAs on-chain without others seeing the amounts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blind auctions&lt;/strong&gt;: Bid on items without revealing the amount or the winner.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;On-chain games&lt;/strong&gt;: Keep moves, selections, cards, or items hidden until ready to reveal.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Confidential voting&lt;/strong&gt;: Prevents bribery and blackmailing by keeping votes private.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Encrypted DIDs&lt;/strong&gt;: Store identities on-chain and generate attestations without ZK.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Learn more use cases in the &lt;a href="https://docs.zama.ai/protocol/examples"&gt;list of examples&lt;/a&gt;.&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol"&gt;Documentation&lt;/a&gt; ‚Äî Official documentation of FHEVM.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/fhevm-whitepaper.pdf"&gt;Whitepaper&lt;/a&gt; ‚Äî Technical overview of FHEVM's cryptographic design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.zama.ai/protocol/examples"&gt;Examples&lt;/a&gt; ‚Äî Examples of building confidential smart contracts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/awesome-zama?tab=readme-ov-file#fhevm"&gt;Awesome Zama ‚Äì FHEVM&lt;/a&gt; ‚Äî Curated articles, talks, and ecosystem projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ‚Üë Back to top &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Working with FHEVM&lt;/h2&gt; 
&lt;h3&gt;Citations&lt;/h3&gt; 
&lt;p&gt;To cite FHEVM or the whitepaper in academic papers, please use the following entries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;@Misc{FHEVM,
title={{FHEVM: A full-stack framework for integrating Fully Homomorphic Encryption (FHE) with blockchain applications},
author={Zama},
year={2025},
note={\url{https://github.com/zama-ai/fhevm}},
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;There are two ways to contribute to FHEVM:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/zama-ai/fhevm/issues/new/choose"&gt;Open issues&lt;/a&gt; to report bugs and typos, or to suggest new ideas&lt;/li&gt; 
 &lt;li&gt;Request to become an official contributor by emailing &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Becoming an approved contributor involves signing our Contributor License Agreement (CLA). Only approved contributors can send pull requests, so please make sure to get in touch before you do! &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;This software is distributed under the &lt;strong&gt;BSD-3-Clause-Clear&lt;/strong&gt; license. Read &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/LICENSE"&gt;this&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;FAQ&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Is Zama‚Äôs technology free to use?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Zama‚Äôs libraries are free to use under the BSD 3-Clause Clear license only for development, research, prototyping, and experimentation purposes. However, for any commercial use of Zama's open source code, companies must purchase Zama‚Äôs commercial patent license.&lt;/p&gt; 
 &lt;p&gt;Everything we do is open source, and we are very transparent on what it means for our users, you can read more about how we monetize our open source products at Zama in &lt;a href="https://www.zama.ai/post/open-source"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;What do I need to do if I want to use Zama‚Äôs technology for commercial purposes?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;To commercially use Zama‚Äôs technology you need to be granted Zama‚Äôs patent license. Please contact us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Do you file IP on your technology?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Yes, all Zama‚Äôs technologies are patented.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Can you customize a solution for my specific use case?&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We are open to collaborating and advancing the FHE space with our partners. If you have specific needs, please email us at &lt;a href="mailto:hello@zama.ai"&gt;hello@zama.ai&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;a target="_blank" href="https://community.zama.ai"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="docs/.gitbook/assets/support-banner-dark.png" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="docs/.gitbook/assets/support-banner-light.png" /&gt; 
  &lt;img alt="Support" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;p&gt;üåü If you find this project helpful or interesting, please consider giving it a star on GitHub! Your support helps to grow the community and motivates further development.&lt;/p&gt; 
&lt;p align="right"&gt; &lt;a href="https://raw.githubusercontent.com/zama-ai/fhevm/main/#about"&gt; ‚Üë Back to top &lt;/a&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>paradigmxyz/reth</title>
      <link>https://github.com/paradigmxyz/reth</link>
      <description>&lt;p&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reth&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/bench.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/actions/workflows/bench.yml/badge.svg?sanitize=true" alt="bench status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/unit.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/workflows/unit/badge.svg?sanitize=true" alt="CI status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/actions/workflows/lint.yml"&gt;&lt;img src="https://github.com/paradigmxyz/reth/actions/workflows/lint.yml/badge.svg?sanitize=true" alt="cargo-lint status" /&gt;&lt;/a&gt; &lt;a href="https://t.me/paradigm_reth"&gt;&lt;img src="https://img.shields.io/endpoint?color=neon&amp;amp;logo=telegram&amp;amp;label=chat&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth" alt="Telegram Chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-prod.png" alt="" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://paradigmxyz.github.io/reth/installation/installation.html"&gt;Install&lt;/a&gt;&lt;/strong&gt; | &lt;a href="https://reth.rs"&gt;User Docs&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs"&gt;Developer Docs&lt;/a&gt; | &lt;a href="https://reth.rs/docs"&gt;Crate Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Reth?&lt;/h2&gt; 
&lt;p&gt;Reth (short for Rust Ethereum, &lt;a href="https://twitter.com/kelvinfichter/status/1597653609411268608"&gt;pronunciation&lt;/a&gt;) is a new Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient. Reth is an Execution Layer (EL) and is compatible with all Ethereum Consensus Layer (CL) implementations that support the &lt;a href="https://github.com/ethereum/execution-apis/tree/a0d03086564ab1838b462befbc083f873dcf0c0f/src/engine"&gt;Engine API&lt;/a&gt;. It is originally built and driven forward by &lt;a href="https://paradigm.xyz/"&gt;Paradigm&lt;/a&gt;, and is licensed under the Apache and MIT licenses.&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;As a full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain. This includes sending and receiving transactions/logs/traces, as well as accessing and interacting with smart contracts. Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.&lt;/p&gt; 
&lt;p&gt;More concretely, our goals are:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Every component of Reth is built to be used as a library: well-tested, heavily documented and benchmarked. We envision that developers will import the node's crates, mix and match, and innovate on top of them. Examples of such usage include but are not limited to spinning up standalone P2P networks, talking directly to a node's database, or "unbundling" the node into the components you need. To achieve that, we are licensing Reth under the Apache/MIT permissive license. You can learn more about the project's components &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Reth aims to be fast, so we use Rust and the &lt;a href="https://erigon.substack.com/p/erigon-stage-sync-and-control-flows"&gt;Erigon staged-sync&lt;/a&gt; node architecture. We also use our Ethereum libraries (including &lt;a href="https://github.com/alloy-rs/alloy/"&gt;Alloy&lt;/a&gt; and &lt;a href="https://github.com/bluealloy/revm/"&gt;revm&lt;/a&gt;) which we've battle-tested and optimized via &lt;a href="https://github.com/foundry-rs/foundry/"&gt;Foundry&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free for anyone to use any way they want&lt;/strong&gt;: Reth is free open source software, built for the community, by the community. By licensing the software under the Apache/MIT license, we want developers to use it without being bound by business licenses, or having to think about the implications of GPL-like licenses.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Client Diversity&lt;/strong&gt;: The Ethereum protocol becomes more antifragile when no node implementation dominates. This ensures that if there's a software bug, the network does not finalize a bad block. By building a new client, we hope to contribute to Ethereum's antifragility.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support as many EVM chains as possible&lt;/strong&gt;: We aspire that Reth can full-sync not only Ethereum, but also other chains like Optimism, Polygon, BNB Smart Chain, and more. If you're working on any of these projects, please reach out.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configurability&lt;/strong&gt;: We want to solve for node operators that care about fast historical queries, but also for hobbyists who cannot operate on large hardware. We also want to support teams and individuals who want both sync from genesis and via "fast sync". We envision that Reth will be configurable enough and provide configurable "profiles" for the tradeoffs that each team faces.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities.&lt;/p&gt; 
&lt;p&gt;More historical context below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We released 1.0 "production-ready" stable Reth in June 2024. 
  &lt;ul&gt; 
   &lt;li&gt;Reth completed an audit with &lt;a href="https://sigmaprime.io/"&gt;Sigma Prime&lt;/a&gt;, the developers of &lt;a href="https://github.com/sigp/lighthouse"&gt;Lighthouse&lt;/a&gt;, the Rust Consensus Layer implementation. Find it &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/audit/sigma_prime_audit_v2.pdf"&gt;here&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Revm (the EVM used in Reth) underwent an audit with &lt;a href="https://twitter.com/guidovranken"&gt;Guido Vranken&lt;/a&gt; (#1 &lt;a href="https://ethereum.org/en/bug-bounty"&gt;Ethereum Bug Bounty&lt;/a&gt;). We will publish the results soon.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;We released multiple iterative beta versions, up to &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.9"&gt;beta.9&lt;/a&gt; on Monday June 3, 2024,the last beta release.&lt;/li&gt; 
 &lt;li&gt;We released &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1"&gt;beta&lt;/a&gt; on Monday March 4, 2024, our first breaking change to the database model, providing faster query speed, smaller database footprint, and allowing "history" to be mounted on separate drives.&lt;/li&gt; 
 &lt;li&gt;We shipped iterative improvements until the last alpha release on February 28, 2024, &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.21"&gt;0.1.0-alpha.21&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We &lt;a href="https://www.paradigm.xyz/2023/06/reth-alpha"&gt;initially announced&lt;/a&gt; &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.1"&gt;0.1.0-alpha.1&lt;/a&gt; on June 20, 2023.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Database compatibility&lt;/h3&gt; 
&lt;p&gt;We do not have any breaking database changes since beta.1, and we do not plan any in the near future.&lt;/p&gt; 
&lt;p&gt;Reth &lt;a href="https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1"&gt;v0.2.0-beta.1&lt;/a&gt; includes a &lt;a href="https://github.com/paradigmxyz/reth/pull/5191"&gt;set of breaking database changes&lt;/a&gt; that makes it impossible to use database files produced by earlier versions.&lt;/p&gt; 
&lt;p&gt;If you had a database produced by alpha versions of Reth, you need to drop it with &lt;code&gt;reth db drop&lt;/code&gt; (using the same arguments such as &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;--datadir&lt;/code&gt; that you passed to &lt;code&gt;reth node&lt;/code&gt;), and resync using the same &lt;code&gt;reth node&lt;/code&gt; command you've used before.&lt;/p&gt; 
&lt;h2&gt;For Users&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://paradigmxyz.github.io/reth"&gt;Reth documentation&lt;/a&gt; for instructions on how to install and run Reth.&lt;/p&gt; 
&lt;h2&gt;For Developers&lt;/h2&gt; 
&lt;h3&gt;Using reth as a library&lt;/h3&gt; 
&lt;p&gt;You can use individual crates of reth in your project.&lt;/p&gt; 
&lt;p&gt;The crate docs can be found &lt;a href="https://paradigmxyz.github.io/reth/docs"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For a general overview of the crates, see &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;Project Layout&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you want to contribute, or follow along with contributor discussion, you can use our &lt;a href="https://t.me/paradigm_reth"&gt;main telegram&lt;/a&gt; to chat with us about the development of Reth!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Our contributor guidelines can be found in &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;See our &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs"&gt;contributor docs&lt;/a&gt; for more information on the project. A good starting point is &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md"&gt;Project Layout&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building and testing&lt;/h3&gt; 
&lt;!--
When updating this, also update:
- Cargo.toml
- .github/workflows/lint.yml
--&gt; 
&lt;p&gt;The Minimum Supported Rust Version (MSRV) of this project is &lt;a href="https://blog.rust-lang.org/2025/06/26/Rust-1.88.0/"&gt;1.88.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the docs for detailed instructions on how to &lt;a href="https://paradigmxyz.github.io/reth/installation/source"&gt;build from source&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To fully test Reth, you will need to have &lt;a href="https://geth.ethereum.org/docs/getting-started/installing-geth"&gt;Geth installed&lt;/a&gt;, but it is possible to run a subset of tests without Geth.&lt;/p&gt; 
&lt;p&gt;First, clone the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/paradigmxyz/reth
cd reth
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, run the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo nextest run --workspace

# Run the Ethereum Foundation tests
make ef-tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We highly recommend using &lt;a href="https://nexte.st/"&gt;&lt;code&gt;cargo nextest&lt;/code&gt;&lt;/a&gt; to speed up testing. Using &lt;code&gt;cargo test&lt;/code&gt; to run tests may work fine, but this is not tested and does not support more advanced features like retries for spurious failures.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Some tests use random number generators to generate test data. If you want to use a deterministic seed, you can set the &lt;code&gt;SEED&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;If you have any questions, first see if the answer to your question can be found in the &lt;a href="https://paradigmxyz.github.io/reth/"&gt;docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If the answer is not there:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join the &lt;a href="https://t.me/paradigm_reth"&gt;Telegram&lt;/a&gt; to get help, or&lt;/li&gt; 
 &lt;li&gt;Open a &lt;a href="https://github.com/paradigmxyz/reth/discussions/new"&gt;discussion&lt;/a&gt; with your question, or&lt;/li&gt; 
 &lt;li&gt;Open an issue with &lt;a href="https://github.com/paradigmxyz/reth/issues/new?assignees=&amp;amp;labels=C-bug%2CS-needs-triage&amp;amp;projects=&amp;amp;template=bug.yml"&gt;the bug&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/paradigmxyz/reth/main/SECURITY.md"&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Reth is a new implementation of the Ethereum protocol. In the process of developing the node we investigated the design decisions other nodes have made to understand what is done well, what is not, and where we can improve the status quo.&lt;/p&gt; 
&lt;p&gt;None of this would have been possible without them, so big shoutout to the teams below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ethereum/go-ethereum/"&gt;Geth&lt;/a&gt;: We would like to express our heartfelt gratitude to the go-ethereum team for their outstanding contributions to Ethereum over the years. Their tireless efforts and dedication have helped to shape the Ethereum ecosystem and make it the vibrant and innovative community it is today. Thank you for your hard work and commitment to the project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ledgerwatch/erigon"&gt;Erigon&lt;/a&gt; (fka Turbo-Geth): Erigon pioneered the &lt;a href="https://erigon.substack.com/p/erigon-stage-sync-and-control-flows"&gt;"Staged Sync" architecture&lt;/a&gt; that Reth is using, as well as &lt;a href="https://github.com/ledgerwatch/erigon/wiki/Choice-of-storage-engine"&gt;introduced MDBX&lt;/a&gt; as the database of choice. We thank Erigon for pushing the state of the art research on the performance limits of Ethereum nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/akula-bft/akula/"&gt;Akula&lt;/a&gt;: Reth uses forks of the Apache versions of Akula's &lt;a href="https://github.com/paradigmxyz/reth/pull/132"&gt;MDBX Bindings&lt;/a&gt;, &lt;a href="https://github.com/paradigmxyz/reth/pull/63"&gt;FastRLP&lt;/a&gt; and &lt;a href="https://github.com/paradigmxyz/reth/pull/80"&gt;ECIES&lt;/a&gt;. Given that these packages were already released under the Apache License, and they implement standardized solutions, we decided not to reimplement them to iterate faster. We thank the Akula team for their contributions to the Rust Ethereum ecosystem and for publishing these packages.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Warning&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;NippyJar&lt;/code&gt; and &lt;code&gt;Compact&lt;/code&gt; encoding formats and their implementations are designed for storing and retrieving data internally. They are not hardened to safely read potentially malicious data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true" alt="RustDesk - Your remote desktop" /&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build"&gt;Build&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker"&gt;Docker&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure"&gt;Structure&lt;/a&gt; ‚Ä¢ &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot"&gt;Snapshot&lt;/a&gt;&lt;br /&gt; [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md"&gt;–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md"&gt;ƒçesky&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md"&gt;‰∏≠Êñá&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md"&gt;Magyar&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md"&gt;Espa√±ol&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md"&gt;ŸÅÿßÿ±ÿ≥€å&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md"&gt;Fran√ßais&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md"&gt;Deutsch&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md"&gt;Polski&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md"&gt;Indonesian&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md"&gt;Suomi&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md"&gt;‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md"&gt;Êó•Êú¨Ë™û&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md"&gt;Nederlands&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md"&gt;Italiano&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md"&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md"&gt;Portugu√™s (Brasil)&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md"&gt;Esperanto&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md"&gt;ÿßŸÑÿπÿ±ÿ®Ÿä&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md"&gt;Ti·∫øng Vi·ªát&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md"&gt;Dansk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md"&gt;ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md"&gt;T√ºrk√ße&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md"&gt;Norsk&lt;/a&gt;]&lt;br /&gt; &lt;b&gt;We need your help to translate this README, &lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/lang"&gt;RustDesk UI&lt;/a&gt; and &lt;a href="https://github.com/rustdesk/doc.rustdesk.com"&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br /&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Chat with us: &lt;a href="https://discord.gg/nDceKgxnkV"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/rustdesk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/rustdesk"&gt;Reddit&lt;/a&gt; | &lt;a href="https://www.youtube.com/@rustdesk"&gt;YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rustdesk.com/pricing.html"&gt;&lt;img src="https://img.shields.io/badge/RustDesk%20Server%20Pro-Advanced%20Features-blue" alt="RustDesk Server Pro" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop solution, written in Rust. Works out of the box with no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href="https://rustdesk.com/server"&gt;set up your own&lt;/a&gt;, or &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases"&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases/tag/nightly"&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://f-droid.org/en/packages/com.carriez.flutter_hbb"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" height="80" /&gt;&lt;/a&gt; &lt;a href="https://flathub.org/apps/com.rustdesk.RustDesk"&gt;&lt;img src="https://flathub.org/api/badge?svg&amp;amp;locale=en" alt="Get it on Flathub" height="80" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href="https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml"&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"&gt;Windows&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so"&gt;Linux&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib"&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw Steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://rustdesk.com/docs/en/dev/build/"&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to Build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i 's/CFLAGS+=-I/CFLAGS+=-fPIC -I/g' Makefile
sed -i 's/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g' Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone --recurse-submodules https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t "rustdesk-builder" .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID="$(id -u)" -e PGID="$(id -g)" rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you're running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you run these commands from the root of the RustDesk repository, or the application may not find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common"&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/scrap"&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/enigo"&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard"&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/ui"&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/server"&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/client.rs"&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs"&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href="https://github.com/rustdesk/rustdesk-server"&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/platform"&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter"&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js"&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651" alt="Connection Manager" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea" alt="Connected to a Windows PC" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad" alt="File Transfer" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5" alt="TCP Tunneling" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>alvr-org/ALVR</title>
      <link>https://github.com/alvr-org/ALVR</link>
      <description>&lt;p&gt;Stream VR games from your PC to your headset via Wi-Fi&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img width="500" src="https://raw.githubusercontent.com/alvr-org/ALVR/master/resources/ALVR-Grey.svg?sanitize=true" /&gt; &lt;/p&gt; 
&lt;h1&gt;ALVR - Air Light VR&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/ALVR"&gt;&lt;img src="https://img.shields.io/discord/720612397580025886?style=for-the-badge&amp;amp;logo=discord&amp;amp;color=5865F2" alt="badge-discord" title="Join us on Discord" /&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/#alvr:ckie.dev?via=ckie.dev"&gt;&lt;img src="https://img.shields.io/static/v1?label=chat&amp;amp;message=%23alvr&amp;amp;style=for-the-badge&amp;amp;logo=matrix&amp;amp;color=blueviolet" alt="badge-matrix" title="Join us on Matrix" /&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/alvr"&gt;&lt;img src="https://img.shields.io/opencollective/all/alvr?style=for-the-badge&amp;amp;logo=opencollective&amp;amp;color=79a3e6" alt="badge-opencollective" title="Donate" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Stream VR games from your PC to your headset over Wi-Fi.&lt;br /&gt; This is a fork of &lt;a href="https://github.com/polygraphene/ALVR"&gt;ALVR&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Direct download (latest version):&lt;/h3&gt; 
&lt;h3&gt;&lt;a href="https://github.com/alvr-org/ALVR/releases/latest/download/alvr_launcher_windows.zip"&gt;Windows Launcher&lt;/a&gt; | &lt;a href="https://github.com/alvr-org/ALVR/releases/latest/download/alvr_launcher_linux.tar.gz"&gt;Linux Launcher&lt;/a&gt;&lt;/h3&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;VR Headset&lt;/th&gt; 
   &lt;th align="center"&gt;Support&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Apple Vision Pro&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt; (&lt;a href="https://apps.apple.com/app/alvr/id6479728026"&gt;store link&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Quest 1/2/3/3S/Pro&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt; (&lt;a href="https://www.meta.com/experiences/7674846229245715"&gt;store link&lt;/a&gt; *)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Pico Neo 3/4/4 Ultra&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Play For Dream YVR 1/2/MR&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Vive Focus 3/Vision/XR Elite&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Lynx R1&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;PhoneVR (smartphone)&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt; ** (&lt;a href="https://github.com/PhoneVR-Developers/PhoneVR"&gt;repo&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Android/Monado&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚ö†&lt;/span&gt; **&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Oculus Go&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚ùå&lt;/span&gt; (&lt;a href="https://github.com/polygraphene/ALVR"&gt;old repo&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;* ALVR for Quest 1 is not available through the Meta store.&lt;br /&gt; ** Works on some smartphones, but has not been extensively tested.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;PC OS&lt;/th&gt; 
   &lt;th align="center"&gt;Support&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Windows 10/11&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt; (&lt;a href="https://store.steampowered.com/app/3312710"&gt;store link&lt;/a&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Windows XP/7/8&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚ùå&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Linux&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚úî&lt;/span&gt;***&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;macOS&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;‚ùå&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;*** Please check the wiki for detailed compatibility information.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;A supported standalone VR headset (see compatibility table above).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;SteamVR.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A high-end gaming PC:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;See the OS compatibility table above.&lt;/li&gt; 
   &lt;li&gt;NVIDIA GPU with NVENC support (GTX 1000 series or newer), or an AMD GPU with AMF VCE support, with the latest drivers.&lt;/li&gt; 
   &lt;li&gt;On laptops with both an integrated GPU (Intel HD, AMD iGPU) and a dedicated GPU (NVIDIA GTX/RTX, AMD HD/R5/R7), make sure to assign the dedicated GPU (or "high performance graphics adapter") to ALVR and SteamVR for the best performance and compatibility.&lt;br /&gt; (NVIDIA: Nvidia Control Panel ‚Üí 3D Settings ‚Üí Application Settings; AMD: similar method)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Network:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;802.11ac 5 GHz Wi-Fi for the headset, and wired Ethernet for the PC is recommended.&lt;/li&gt; 
   &lt;li&gt;The PC and the headset must be connected to the same router (or use a routed connection as described &lt;a href="https://github.com/alvr-org/ALVR/wiki/ALVR-v14-and-Above"&gt;here&lt;/a&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Follow the &lt;a href="https://github.com/alvr-org/ALVR/wiki/Installation-guide"&gt;installation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See the &lt;a href="https://github.com/alvr-org/ALVR/wiki/Troubleshooting"&gt;Troubleshooting&lt;/a&gt; page, and &lt;a href="https://github.com/alvr-org/ALVR/wiki/Linux-Troubleshooting"&gt;Linux Troubleshooting&lt;/a&gt; if applicable.&lt;/li&gt; 
 &lt;li&gt;Configuration recommendations and additional information can be found &lt;a href="https://github.com/alvr-org/ALVR/wiki/Information-and-Recommendations"&gt;here&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Uninstallation&lt;/h2&gt; 
&lt;p&gt;Open &lt;code&gt;ALVR Dashboard.exe&lt;/code&gt;, go to the &lt;code&gt;Installation&lt;/code&gt; tab, then press &lt;code&gt;Remove firewall rules&lt;/code&gt;.&lt;br /&gt; Close the ALVR window and delete the ALVR folder.&lt;/p&gt; 
&lt;h2&gt;Build from Source&lt;/h2&gt; 
&lt;p&gt;Follow the &lt;a href="https://github.com/alvr-org/ALVR/wiki/Building-From-Source"&gt;build guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;ALVR is licensed under the &lt;a href="https://raw.githubusercontent.com/alvr-org/ALVR/master/LICENSE"&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Privacy Policy&lt;/h2&gt; 
&lt;p&gt;ALVR apps do not directly collect any personal data.&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you would like to support this project, you can donate through our &lt;a href="https://opencollective.com/alvr"&gt;Open Source Collective account&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>juspay/hyperswitch</title>
      <link>https://github.com/juspay/hyperswitch</link>
      <description>&lt;p&gt;An open source payments switch written in Rust to make payments fast, reliable and affordable&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-dark.svg#gh-dark-mode-only" alt="Hyperswitch-Logo" width="40%" /&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-light.svg#gh-light-mode-only" alt="Hyperswitch-Logo" width="40%" /&gt; &lt;/p&gt; 
&lt;h1 align="center"&gt;Composable Open-Source Payments Infrastructure&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/gifs/quickstart.gif" alt="Quickstart demo" /&gt; &lt;/p&gt; 
&lt;!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/juspay/hyperswitch/actions?query=workflow%3ACI+branch%3Amain"&gt; &lt;img src="https://github.com/juspay/hyperswitch/workflows/CI-push/badge.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/juspay/hyperswitch/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/github/license/juspay/hyperswitch" /&gt; &lt;/a&gt; &lt;a href="https://github.com/juspay/hyperswitch/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/badge/Made_in-Rust-orange" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.linkedin.com/company/hyperswitch/"&gt; &lt;img src="https://img.shields.io/badge/follow-hyperswitch-blue?logo=linkedin&amp;amp;labelColor=grey" /&gt; &lt;/a&gt; &lt;a href="https://x.com/hyperswitchio"&gt; &lt;img src="https://img.shields.io/badge/follow-%40hyperswitchio-white?logo=x&amp;amp;labelColor=grey" /&gt; &lt;/a&gt; &lt;a href="https://inviter.co/hyperswitch-slack"&gt; &lt;img src="https://img.shields.io/badge/chat-on_slack-blue?logo=slack&amp;amp;labelColor=grey&amp;amp;color=%233f0e40" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;üìÅ Table of Contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-what-can-i-do-with-hyperswitch"&gt;What Can I Do with Hyperswitch?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-quickstart-local-setup"&gt;Quickstart (Local Setup)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#cloud-deployment"&gt;Cloud Deployment&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#hosted-sandbox-no-setup-required"&gt;Hosted Sandbox (No Setup Required)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-why-hyperswitch"&gt;Why Hyperswitch?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview"&gt;Architectural Overview&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#our-vision"&gt;Our Vision&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#community--contributions"&gt;Community &amp;amp; Contributions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#feature-requests--bugs"&gt;Feature Requests &amp;amp; Bugs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning"&gt;Versioning&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license"&gt;License&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#team-behind-hyperswitch"&gt;Team Behind Hyperswitch&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;summary&gt;&lt;h2&gt; What Can I Do with Hyperswitch?&lt;/h2&gt;&lt;/summary&gt; 
&lt;p&gt;Hyperswitch offers a modular, open-source payments infrastructure designed for flexibility and control. Apart from our Payment Suite offering, this solution allows businesses to pick and integrate only the modules they need on top of their existing payment stack ‚Äî without unnecessary complexity or vendor lock-in.&lt;/p&gt; 
&lt;p&gt;Each module is independent and purpose-built to optimize different aspects of payment processing.&lt;/p&gt; 
&lt;h3&gt; Learn More About The Payment Modules &lt;/h3&gt; 
&lt;details&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cost Observability&lt;/strong&gt;&lt;br /&gt; Advanced observability tools to audit, monitor, and optimize your payment costs. Detect hidden fees, downgrades, and penalties with self-serve dashboards and actionable insights.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/ai-powered-cost-observability"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Revenue Recovery&lt;/strong&gt;&lt;br /&gt; Combat passive churn with intelligent retry strategies tuned by card bin, region, method, and more. Offers fine-grained control over retry algorithms, penalty budgets, and recovery transparency.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/revenue-recovery"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vault&lt;/strong&gt;&lt;br /&gt; A PCI-compliant vault service to store cards, tokens, wallets, and bank credentials. Provides a unified, secure, and reusable store of customer-linked payment methods.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/vault"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intelligent Routing&lt;/strong&gt;&lt;br /&gt; Route each transaction to the PSP with the highest predicted auth rate. Reduce retries, avoid downtime, and minimize latency while maximizing first attempt success.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/intelligent-routing"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reconciliation&lt;/strong&gt;&lt;br /&gt; Automate 2-way and 3-way reconciliation with backdated support, staggered scheduling, and customizable outputs. Reduces manual ops effort and increases audit confidence.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/reconciliation"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Alternate Payment Methods&lt;/strong&gt;&lt;br /&gt; Drop-in widgets for PayPal, Apple Pay, Google Pay, Samsung Pay, Pay by Bank, and BNPL providers like Klarna. Maximizes conversions with seamless one-click checkout.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/enable-alternate-payment-method-widgets"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt; Local Setup via Docker &lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# One-click local setup

git clone --depth 1 --branch latest https://github.com/juspay/hyperswitch

cd hyperswitch

scripts/setup.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;This script: &lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Detects Docker/Podman&lt;/li&gt; 
  &lt;li&gt;Offers multiple deployment profiles: 
   &lt;ul&gt; 
    &lt;li&gt;&lt;strong&gt;Standard&lt;/strong&gt;: App server + Control Center&lt;/li&gt; 
    &lt;li&gt;&lt;strong&gt;Full&lt;/strong&gt;: Includes monitoring + schedulers&lt;/li&gt; 
    &lt;li&gt;&lt;strong&gt;Minimal&lt;/strong&gt;: Standalone App server&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Provides access links when done&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;If you need further help, check out our &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/overview/unified-local-setup-using-docker"&gt;video tutorial&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;üëâ After setup, &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/account-setup/using-hyperswitch-control-center#add-a-payment-processor"&gt;configure a connector&lt;/a&gt; and &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/account-setup/test-a-payment"&gt;test a payment&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Hosted Sandbox (No Setup Required)&lt;/h3&gt; 
&lt;p&gt;Hyperswitch offers a fully hosted sandbox environment that requires no setup. You can explore the Control Center, configure payment connectors, and test payments directly from the UI.&lt;/p&gt; 
&lt;a href="https://app.hyperswitch.io"&gt; &lt;img src="https://github.com/juspay/hyperswitch/raw/main/docs/imgs/try-the-sandbox.png?raw=true" height="35" /&gt; &lt;/a&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt; What you can do in the Hosted Sandbox&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Access the full Control Center&lt;/li&gt; 
  &lt;li&gt;Configure payment connectors&lt;/li&gt; 
  &lt;li&gt;View logs, routing rules, and retry strategies&lt;/li&gt; 
  &lt;li&gt;Try payments directly from the UI&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;strong&gt;Cloud Deployment&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;You can deploy to AWS, GCP, or Azure using Helm or CDK scripts. Fastest path:&lt;/p&gt; 
&lt;p&gt;Click to deploy via AWS:&lt;/p&gt; 
&lt;a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=HyperswitchBootstarp&amp;amp;templateURL=https://hyperswitch-synth.s3.eu-central-1.amazonaws.com/hs-starter-config.yaml"&gt; &lt;img src="https://github.com/juspay/hyperswitch/raw/main/docs/imgs/aws_button.png?raw=true" height="35" /&gt; &lt;/a&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Cloud Deployment Instructions&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Click the AWS deployment button above to launch the stack.&lt;/li&gt; 
  &lt;li&gt;Follow the guided steps in the AWS Console (approx. 30‚Äì45 mins).&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;‚úÖ This setup provisions Hyperswitch on your cloud account using CloudFormation.&lt;/p&gt; 
 &lt;p&gt;üìò For full instructions and Helm-based deployments, check out the&lt;br /&gt; &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/deploy-on-kubernetes-using-helm"&gt;Cloud Install Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview"&gt; &lt;h2 id="architectural-overview"&gt;Architectural Overview&lt;/h2&gt; &lt;/a&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/features.png" /&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/non-functional-features.png" /&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-architecture-v1.png" /&gt; 
&lt;h2&gt;Why Hyperswitch?&lt;/h2&gt; 
&lt;p&gt;Hyperswitch is a commercial open-source payments stack purpose-built for scale, flexibility, and developer experience. Designed with a modular architecture, Hyperswitch lets you pick only the components you need‚Äîwhether it‚Äôs routing, retries, vaulting, or observability‚Äîwithout vendor lock-in or bloated integrations.&lt;/p&gt; 
&lt;p&gt;Built in Rust for performance and reliability, Hyperswitch supports global payment methods (cards, wallets, BNPL, UPI, Pay by Bank), exposes smart routing and retry logic, and provides a visual workflow builder in the Control Center. Whether you're integrating a full payment suite or augmenting an existing stack with a single module, Hyperswitch meets you where you are.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;‚ÄúLinux for Payments‚Äù&lt;/strong&gt; ‚Äî Hyperswitch is a well-architected reference for teams who want to own their payments stack.&lt;/p&gt; 
&lt;p&gt;We believe in:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Embracing Payment Diversity:&lt;/strong&gt; Innovation comes from enabling choice‚Äîacross payment methods, processors, and flows.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Open Source by Default:&lt;/strong&gt; Transparency drives trust and builds better, reusable software.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Community-Driven Development:&lt;/strong&gt; Our roadmap is shaped by real-world use cases and contributors.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Systems-Level Engineering:&lt;/strong&gt; We hold ourselves to a high bar for reliability, security, and performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Maximizing Value Creation:&lt;/strong&gt; For developers, customers, and partners alike.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Community-Driven, Enterprise-Tested:&lt;/strong&gt; Hyperswitch is built in the open with real-world feedback from developers and contributors, and maintained by Juspay, the team powering payment infrastructure for 400+ leading enterprises worldwide.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributors from around the world to help build Hyperswitch. Whether you're fixing bugs, improving documentation, or adding new features, your help is appreciated.&lt;/p&gt; 
&lt;p&gt;Please read our &lt;a href="https://github.com/juspay/hyperswitch/raw/main/docs/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;Join the conversation on &lt;a href="https://inviter.co/hyperswitch-slack"&gt;Slack&lt;/a&gt; or explore open issues on &lt;a href="https://github.com/juspay/hyperswitch/issues"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#feature-requests"&gt; &lt;h2 id="feature-requests"&gt;Feature requests &amp;amp; Bugs&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;For new product features, enhancements, roadmap discussions, or to share queries and ideas, visit our &lt;a href="https://github.com/juspay/hyperswitch/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For reporting a bug, please read the issue guidelines and search for &lt;a href="https://github.com/juspay/hyperswitch/issues"&gt;existing and closed issues&lt;/a&gt;. If your problem or idea is not addressed yet, please &lt;a href="https://github.com/juspay/hyperswitch/issues/new/choose"&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning"&gt; &lt;h2 id="versioning"&gt;Versioning&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;Check the &lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license"&gt; &lt;h2 id="copyright-and-license"&gt;Copyright and License&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;This product is licensed under the &lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/LICENSE"&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#team-behind-hyperswitch"&gt; &lt;h2 id="team-behind-hyperswitch"&gt;Team behind Hyperswitch&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;The core team of 150+ engineers building Hyperswitch. Keep up the great work! ü•Ç&lt;/p&gt; 
&lt;a href="https://github.com/juspay/hyperswitch/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=juspay/hyperswitch" alt="Contributors" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>tursodatabase/turso</title>
      <link>https://github.com/tursodatabase/turso</link>
      <description>&lt;p&gt;Turso Database is a project to build the next evolution of SQLite.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/turso.png" alt="Turso Database" width="800" /&gt; &lt;/p&gt;
&lt;h1 align="center"&gt;Turso Database&lt;/h1&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; An in-process SQL database, compatible with SQLite. &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Build Status" target="_blank" href="https://github.com/tursodatabase/turso/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tursodatabase/turso/rust.yml?style=flat-square" /&gt;&lt;/a&gt; &lt;a title="Releases" target="_blank" href="https://github.com/tursodatabase/turso/releases"&gt;&lt;img src="https://img.shields.io/github/release/tursodatabase/turso?style=flat-square&amp;amp;color=9CF" /&gt;&lt;/a&gt; &lt;a title="Rust" target="_blank" href="https://crates.io/crates/turso"&gt;&lt;img alt="PyPI" src="https://img.shields.io/crates/v/turso" /&gt;&lt;/a&gt; &lt;a title="JavaScript" target="_blank" href="https://www.npmjs.com/package/@tursodatabase/database"&gt;&lt;img alt="PyPI" src="https://img.shields.io/npm/v/@tursodatabase/database" /&gt;&lt;/a&gt; &lt;a title="Python" target="_blank" href="https://pypi.org/project/pyturso/"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/v/pyturso" /&gt;&lt;/a&gt; &lt;a title="MIT" target="_blank" href="https://github.com/tursodatabase/turso/raw/main/LICENSE.md"&gt;&lt;img src="http://img.shields.io/badge/license-MIT-orange.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;br /&gt; &lt;a title="GitHub Pull Requests" target="_blank" href="https://github.com/tursodatabase/turso/pulls"&gt;&lt;img src="https://img.shields.io/github/issues-pr-closed/tursodatabase/turso.svg?style=flat-square&amp;amp;color=FF9966" /&gt;&lt;/a&gt; &lt;a title="GitHub Commits" target="_blank" href="https://github.com/tursodatabase/turso/commits/main"&gt;&lt;img src="https://img.shields.io/github/commit-activity/m/tursodatabase/turso.svg?style=flat-square" /&gt;&lt;/a&gt; &lt;a title="Last Commit" target="_blank" href="https://github.com/tursodatabase/turso/commits/main"&gt;&lt;img src="https://img.shields.io/github/last-commit/tursodatabase/turso.svg?style=flat-square&amp;amp;color=FF9900" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Developer's Discord" target="_blank" href="https://discord.gg/jgjmyYgHwB"&gt;&lt;img alt="Chat with the Core Developers on Discord" src="https://img.shields.io/discord/1258658826257961020?label=Discord&amp;amp;logo=Discord&amp;amp;style=social&amp;amp;label=Core%20Developers" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Users's Discord" target="_blank" href="https://tur.so/discord"&gt;&lt;img alt="Chat with other users of Turso (and Turso Cloud) on Discord" src="https://img.shields.io/discord/933071162680958986?label=Discord&amp;amp;logo=Discord&amp;amp;style=social&amp;amp;label=Users" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Turso Database is an in-process SQL database written in Rust, compatible with SQLite.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Warning:&lt;/strong&gt; This software is ALPHA, only use for development, testing, and experimentation. We are working to make it production ready, but do not use it for critical data right now.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features and Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SQLite compatibility&lt;/strong&gt; for SQL dialect, file formats, and the C API [see &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/COMPAT.md"&gt;document&lt;/a&gt; for details]&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Change data capture (CDC)&lt;/strong&gt; for real-time tracking of database changes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Language support&lt;/strong&gt; for 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/tursodatabase/turso-go"&gt;Go&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/java"&gt;Java&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/python"&gt;Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/rust"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/javascript"&gt;WebAssembly&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous I/O&lt;/strong&gt; support on Linux with &lt;code&gt;io_uring&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt; support for Linux, macOS, Windows and browsers (through WebAssembly)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Vector support&lt;/strong&gt; support including exact search and vector manipulation&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Improved schema management&lt;/strong&gt; including extended &lt;code&gt;ALTER&lt;/code&gt; support and faster schema changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The database has the following experimental features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;BEGIN CONCURRENT&lt;/code&gt;&lt;/strong&gt; for improved write throughput using multi-version concurrency control (MVCC).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Incremental computation&lt;/strong&gt; using DBSP for incremental view mainatenance and query subscriptions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The following features are on our current roadmap:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Vector indexing&lt;/strong&gt; for fast approximate vector search, similar to &lt;a href="https://turso.tech/vector"&gt;libSQL vector search&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/docs/manual.md"&gt;Turso Database Manual&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;üíª Command Line&lt;/summary&gt; 
 &lt;br /&gt; You can install the latest `turso` release with: 
 &lt;pre&gt;&lt;code class="language-shell"&gt;curl --proto '=https' --tlsv1.2 -LsSf \
  https://github.com/tursodatabase/turso/releases/latest/download/turso_cli-installer.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Then launch the interactive shell:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;$ tursodb
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This will start the Turso interactive shell where you can execute SQL statements:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;Turso
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database
turso&amp;gt; CREATE TABLE users (id INT, username TEXT);
turso&amp;gt; INSERT INTO users VALUES (1, 'alice');
turso&amp;gt; INSERT INTO users VALUES (2, 'bob');
turso&amp;gt; SELECT * FROM users;
1|alice
2|bob
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can also build and run the latest development version with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you like docker, we got you covered. Simply run this in the root folder:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;make docker-cli-build &amp;amp;&amp;amp; \
make docker-cli-run
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ü¶Ä Rust&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;cargo add turso
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-rust"&gt;let db = Builder::new_local("sqlite.db").build().await?;
let conn = db.connect()?;

let res = conn.query("SELECT * FROM users", ()).await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;‚ú® JavaScript&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;npm i @tursodatabase/database
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-js"&gt;import { connect } from '@tursodatabase/database';

const db = await connect('sqlite.db');
const stmt = db.prepare('SELECT * FROM users');
const users = stmt.all();
console.log(users);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;üêç Python&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;uv pip install pyturso
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import turso

con = turso.connect("sqlite.db")
cur = con.cursor()
res = cur.execute("SELECT * FROM users")
print(res.fetchone())
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ü¶´ Go&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;go get github.com/tursodatabase/turso-go
go install github.com/tursodatabase/turso-go
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;import (
    "database/sql"
    _ "github.com/tursodatabase/turso-go"
)

conn, _ = sql.Open("turso", "sqlite.db")
defer conn.Close()

stmt, _ := conn.Prepare("select * from users")
defer stmt.Close()

rows, _ = stmt.Query()
for rows.Next() {
    var id int
    var username string
    _ := rows.Scan(&amp;amp;id, &amp;amp;username)
    fmt.Printf("User: ID: %d, Username: %s\n", id, username)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;‚òïÔ∏è Java&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;We integrated Turso Database into JDBC. For detailed instructions on how to use Turso Database with java, please refer to the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/java/README.md"&gt;README.md under bindings/java&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ü§ñ MCP Server Mode&lt;/summary&gt; 
 &lt;br /&gt; 
 &lt;p&gt;The Turso CLI includes a built-in &lt;a href="https://modelcontextprotocol.io/"&gt;Model Context Protocol (MCP)&lt;/a&gt; server that allows AI assistants to interact with your databases.&lt;/p&gt; 
 &lt;p&gt;Start the MCP server with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;tursodb your_database.db --mcp
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The MCP server provides seven tools for database interaction:&lt;/p&gt; 
 &lt;h4&gt;Available Tools&lt;/h4&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;open_database&lt;/code&gt;&lt;/strong&gt; - Open a new database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;current_database&lt;/code&gt;&lt;/strong&gt; - Describe the current database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;list_tables&lt;/code&gt;&lt;/strong&gt; - List all tables in the database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;describe_table&lt;/code&gt;&lt;/strong&gt; - Describe the structure of a specific table&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;execute_query&lt;/code&gt;&lt;/strong&gt; - Execute read-only SELECT queries&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;insert_data&lt;/code&gt;&lt;/strong&gt; - Insert new data into tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;update_data&lt;/code&gt;&lt;/strong&gt; - Update existing data in tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;delete_data&lt;/code&gt;&lt;/strong&gt; - Delete data from tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;schema_change&lt;/code&gt;&lt;/strong&gt; - Execute schema modification statements (CREATE TABLE, ALTER TABLE, DROP TABLE)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h4&gt;Example Usage&lt;/h4&gt; 
 &lt;p&gt;The MCP server runs as a single process that handles multiple JSON-RPC requests over stdin/stdout. Here's how to interact with it:&lt;/p&gt; 
 &lt;h4&gt;Example with In-Memory Database&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cat &amp;lt;&amp;lt; 'EOF' | tursodb --mcp
{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "client", "version": "1.0"}}}
{"jsonrpc": "2.0", "id": 2, "method": "tools/call", "params": {"name": "schema_change", "arguments": {"query": "CREATE TABLE users (id INTEGER, name TEXT, email TEXT)"}}}
{"jsonrpc": "2.0", "id": 3, "method": "tools/call", "params": {"name": "list_tables", "arguments": {}}}
{"jsonrpc": "2.0", "id": 4, "method": "tools/call", "params": {"name": "insert_data", "arguments": {"query": "INSERT INTO users VALUES (1, 'Alice', 'alice@example.com')"}}}
{"jsonrpc": "2.0", "id": 5, "method": "tools/call", "params": {"name": "execute_query", "arguments": {"query": "SELECT * FROM users"}}}
EOF
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Example with Existing Database&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Working with an existing database file
cat &amp;lt;&amp;lt; 'EOF' | tursodb mydb.db --mcp
{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "client", "version": "1.0"}}}
{"jsonrpc": "2.0", "id": 2, "method": "tools/call", "params": {"name": "list_tables", "arguments": {}}}
EOF
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Using with Claude Code&lt;/h4&gt; 
 &lt;p&gt;If you're using &lt;a href="https://claude.ai/code"&gt;Claude Code&lt;/a&gt;, you can easily connect to your Turso MCP server using the built-in MCP management commands:&lt;/p&gt; 
 &lt;h5&gt;Quick Setup&lt;/h5&gt; 
 &lt;ol&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add the MCP server&lt;/strong&gt; to Claude Code:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;claude mcp add my-database -- tursodb ./path/to/your/database.db --mcp
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Restart Claude Code&lt;/strong&gt; to activate the connection&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start querying&lt;/strong&gt; your database through natural language!&lt;/p&gt; &lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h5&gt;Command Breakdown&lt;/h5&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;claude mcp add my-database -- tursodb ./path/to/your/database.db --mcp
#              ‚Üë            ‚Üë       ‚Üë                           ‚Üë
#              |            |       |                           |
#              Name         |       Database path               MCP flag
#                          Separator
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;my-database&lt;/code&gt;&lt;/strong&gt; - Choose any name for your MCP server&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--&lt;/code&gt;&lt;/strong&gt; - Required separator between Claude options and your command&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;tursodb&lt;/code&gt;&lt;/strong&gt; - The Turso database CLI&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;./path/to/your/database.db&lt;/code&gt;&lt;/strong&gt; - Path to your SQLite database file&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;--mcp&lt;/code&gt;&lt;/strong&gt; - Enables MCP server mode&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h5&gt;Example Usage&lt;/h5&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# For a local project database
cd /your/project
claude mcp add my-project-db -- tursodb ./data/app.db --mcp

# For an absolute path
claude mcp add analytics-db -- tursodb /Users/you/databases/analytics.db --mcp

# For a specific project (local scope)
claude mcp add project-db --local -- tursodb ./database.db --mcp
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h5&gt;Managing MCP Servers&lt;/h5&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# List all configured MCP servers
claude mcp list

# Get details about a specific server
claude mcp get my-database

# Remove an MCP server
claude mcp remove my-database
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Once configured, you can ask Claude Code to:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;"Show me all tables in the database"&lt;/li&gt; 
  &lt;li&gt;"What's the schema for the users table?"&lt;/li&gt; 
  &lt;li&gt;"Find all posts with more than 100 upvotes"&lt;/li&gt; 
  &lt;li&gt;"Insert a new user with name 'Alice' and email '&lt;a href="mailto:alice@example.com"&gt;alice@example.com&lt;/a&gt;'"&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We'd love to have you contribute to Turso Database! Please check out the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Found a data corruption bug? Get up to $1,000.00&lt;/h3&gt; 
&lt;p&gt;SQLite is loved because it is the most reliable database in the world. The next evolution of SQLite has to match or surpass this level of reliability. Turso is built with &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/simulator/"&gt;Deterministic Simulation Testing&lt;/a&gt; from the ground up, and is also tested by &lt;a href="https://antithesis.com"&gt;Antithesis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Even during Alpha, if you find a bug that leads to a data corruption and demonstrate how our simulator failed to catch it, you can get up to $1,000.00. As the project matures we will increase the size of the prize, and the scope of the bugs.&lt;/p&gt; 
&lt;p&gt;More details &lt;a href="https://turso.algora.io"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can see an example of an awarded case on &lt;a href="https://github.com/tursodatabase/turso/issues/2049"&gt;#2049&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Turso core staff are not eligible.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Is Turso Database ready for production use?&lt;/h3&gt; 
&lt;p&gt;Turso Database is currently under heavy development and is &lt;strong&gt;not&lt;/strong&gt; ready for production use.&lt;/p&gt; 
&lt;h3&gt;How is Turso Database different from Turso's libSQL?&lt;/h3&gt; 
&lt;p&gt;Turso Database is a project to build the next evolution of SQLite in Rust, with a strong open contribution focus and features like native async support, vector search, and more. The libSQL project is also an attempt to evolve SQLite in a similar direction, but through a fork rather than a rewrite.&lt;/p&gt; 
&lt;p&gt;Rewriting SQLite in Rust started as an unassuming experiment, and due to its incredible success, replaces libSQL as our intended direction. At this point, libSQL is production ready, Turso Database is not - although it is evolving rapidly. More details &lt;a href="https://turso.tech/blog/we-will-rewrite-sqlite-and-we-are-going-all-in"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Publications&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pekka Enberg, Sasu Tarkoma, Jon Crowcroft Ashwin Rao (2024). Serverless Runtime / Database Co-Design With Asynchronous I/O. In &lt;em&gt;EdgeSys ‚Äò24&lt;/em&gt;. &lt;a href="https://penberg.org/papers/penberg-edgesys24.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pekka Enberg, Sasu Tarkoma, and Ashwin Rao (2023). Towards Database and Serverless Runtime Co-Design. In &lt;em&gt;CoNEXT-SW ‚Äô23&lt;/em&gt;. [&lt;a href="https://penberg.org/papers/penberg-conext-sw-23.pdf"&gt;PDF&lt;/a&gt;] [&lt;a href="https://penberg.org/papers/penberg-conext-sw-23-slides.pdf"&gt;Slides&lt;/a&gt;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/LICENSE.md"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Turso Database by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;p&gt;Thanks to all the partners of Turso!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://antithesis.com/"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/antithesis.jpg" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://blacksmith.sh"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/blacksmith.svg?sanitize=true" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://nyrkio.com/"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/turso-nyrkio.png" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thanks to all the contributors to Turso Database!&lt;/p&gt; 
&lt;a href="https://github.com/tursodatabase/turso/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=tursodatabase/turso" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>jdx/mise</title>
      <link>https://github.com/jdx/mise</link>
      <description>&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;&lt;a href="https://mise.jdx.dev"&gt; &lt;img src="https://github.com/jdx/mise/assets/216188/27a8ea18-9383-4d86-a445-305b9a6248c1" alt="mise-logo" width="400" /&gt;&lt;br /&gt; mise-en-place &lt;/a&gt;&lt;/h1&gt; 
 &lt;!-- &lt;a href="https://mise.jdx.dev"&gt;&lt;picture&gt; --&gt; 
 &lt;!--   &lt;source media="(prefers-color-scheme: dark)" width="617" srcset="./docs/logo-dark@2x.png"&gt; --&gt; 
 &lt;!--   &lt;img alt="mise logo" width="617" src="./docs/logo-light@2x.png"&gt; --&gt; 
 &lt;!-- &lt;/picture&gt;&lt;/a&gt; --&gt; 
 &lt;a href="https://crates.io/crates/mise"&gt;&lt;img alt="Crates.io" src="https://img.shields.io/crates/v/mise?style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/raw/main/LICENSE"&gt;&lt;img alt="GitHub" src="https://img.shields.io/github/license/jdx/mise?color=%2344CC11&amp;amp;style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/actions/workflows/test.yml"&gt;&lt;img alt="GitHub Workflow Status" src="https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/mABnUDvP57"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;p&gt;&lt;em&gt;The front-end to your dev env.&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is it?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Like &lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt; (or &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; or &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; but for any language) it manages &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; like node, python, cmake, terraform, and &lt;a href="https://mise.jdx.dev/registry.html"&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/environments/"&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://www.gnu.org/software/make/manual/make.html"&gt;make&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;The following demo shows how to install and use &lt;code&gt;mise&lt;/code&gt; to manage multiple versions of &lt;code&gt;node&lt;/code&gt; on the same system. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; 
&lt;p&gt;It also shows that you can use &lt;code&gt;mise&lt;/code&gt; to install and many other tools such as &lt;code&gt;jq&lt;/code&gt;, &lt;code&gt;terraform&lt;/code&gt;, or &lt;code&gt;go&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://mise.jdx.dev/demo.html"&gt;&lt;img src="https://raw.githubusercontent.com/jdx/mise/main/docs/tapes/demo.gif" alt="demo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/demo.html"&gt;demo transcript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Install mise&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/getting-started.html"&gt;Getting started&lt;/a&gt; for more options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ curl https://mise.run | sh
$ ~/.local/bin/mise --version
2025.9.6 macos-arm64 (a1b2d3e 2025-09-08)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;# note this assumes mise is located at ~/.local/bin/mise
# which is what https://mise.run does by default
echo 'eval "$(~/.local/bin/mise activate bash)"' &amp;gt;&amp;gt; ~/.bashrc
echo 'eval "$(~/.local/bin/mise activate zsh)"' &amp;gt;&amp;gt; ~/.zshrc
echo '~/.local/bin/mise activate fish | source' &amp;gt;&amp;gt; ~/.config/fish/config.fish
echo '~/.local/bin/mise activate pwsh | Out-String | Invoke-Expression' &amp;gt;&amp;gt; ~/.config/powershell/Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Execute commands with specific tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise exec node@22 -- node -v
mise node@22.x.x ‚úì installed
v22.x.x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise use --global node@22 go@1
$ node -v
v22.x.x
$ go version
go version go1.x.x macos/arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h3&gt;Manage environment variables&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[env]
SOME_VAR = "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise set SOME_VAR=bar
$ echo $SOME_VAR
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;mise&lt;/code&gt; can also &lt;a href="https://mise.jdx.dev/environments/#env-directives"&gt;load &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Run tasks&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tasks.build]
description = "build the project"
run = "echo building..."
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise run build
building...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Example mise project&lt;/h3&gt; 
&lt;p&gt;Here is a combined example to give you an idea of how you can use mise to manage your a project's tools, environment, and tasks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tools]
terraform = "1"
aws-cli = "2"

[env]
TF_WORKSPACE = "development"
AWS_REGION = "us-west-2"
AWS_PROFILE = "dev"

[tasks.plan]
description = "Run terraform plan with configured workspace"
run = """
terraform init
terraform workspace select $TF_WORKSPACE
terraform plan
"""

[tasks.validate]
description = "Validate AWS credentials and terraform config"
run = """
aws sts get-caller-identity
terraform validate
"""

[tasks.deploy]
description = "Deploy infrastructure after validation"
depends = ["validate", "plan"]
run = "terraform apply -auto-approve"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;mise install # install tools specified in mise.toml
mise run deploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Find more examples in the &lt;a href="https://mise.jdx.dev/mise-cookbook/"&gt;mise cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Full Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev"&gt;mise.jdx.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;We're grateful for Cloudflare's support through &lt;a href="https://www.cloudflare.com/lp/project-alexandria/"&gt;Project Alexandria&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/jdx/mise/graphs/contributors"&gt;&lt;img src="https://contrib.rocks/image?repo=jdx/mise" alt="Contributors" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>uutils/coreutils</title>
      <link>https://github.com/uutils/coreutils</link>
      <description>&lt;p&gt;Cross-platform Rust rewrite of the GNU coreutils&lt;/p&gt;&lt;hr&gt;&lt;div class="oranda-hide"&gt; 
 &lt;div align="center"&gt; 
  &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/logo.svg?sanitize=true" alt="uutils logo" /&gt;&lt;/p&gt; 
  &lt;h1&gt;uutils coreutils&lt;/h1&gt; 
  &lt;p&gt;&lt;a href="https://crates.io/crates/coreutils"&gt;&lt;img src="https://img.shields.io/crates/v/coreutils.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/wQVJbvJ"&gt;&lt;img src="https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat" alt="Discord" /&gt;&lt;/a&gt; &lt;a href="https://github.com/uutils/coreutils/raw/main/LICENSE"&gt;&lt;img src="http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://deps.rs/repo/github/uutils/coreutils"&gt;&lt;img src="https://deps.rs/repo/github/uutils/coreutils/status.svg?sanitize=true" alt="dependency status" /&gt;&lt;/a&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;a href="https://codecov.io/gh/uutils/coreutils"&gt;&lt;img src="https://codecov.io/gh/uutils/coreutils/branch/master/graph/badge.svg?sanitize=true" alt="CodeCov" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/MSRV-1.85.0-brightgreen" alt="MSRV" /&gt; &lt;a href="https://hosted.weblate.org/projects/rust-coreutils/"&gt;&lt;img src="https://hosted.weblate.org/widget/rust-coreutils/svg-badge.svg?sanitize=true" alt="Weblate" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p&gt;uutils coreutils is a cross-platform reimplementation of the GNU coreutils in &lt;a href="http://www.rust-lang.org"&gt;Rust&lt;/a&gt;. While all programs have been implemented, some options might be missing or different behavior might be experienced.&lt;/p&gt; 
&lt;div class="oranda-hide"&gt; 
 &lt;p&gt;To install it:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install coreutils
~/.cargo/bin/coreutils
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;!-- markdownlint-disable-next-line MD026 --&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;p&gt;uutils coreutils aims to be a drop-in replacement for the GNU utils. Differences with GNU are treated as bugs.&lt;/p&gt; 
&lt;p&gt;Our key objectives include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Matching GNU's output (stdout and error code) exactly&lt;/li&gt; 
 &lt;li&gt;Better error messages&lt;/li&gt; 
 &lt;li&gt;Providing comprehensive internationalization support (UTF-8)&lt;/li&gt; 
 &lt;li&gt;Improved performances&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/uutils/coreutils/main/docs/src/extensions.md"&gt;Extensions&lt;/a&gt; when relevant (example: --progress)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, macOS, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms.&lt;/p&gt; 
&lt;div class="oranda-hide"&gt; 
 &lt;h2&gt;Documentation&lt;/h2&gt; 
 &lt;p&gt;uutils has both user and developer documentation available:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://uutils.github.io/coreutils/docs/"&gt;User Manual&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://docs.rs/crate/coreutils/"&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Both can also be generated locally, the instructions for that can be found in the &lt;a href="https://github.com/uutils/uutils.github.io"&gt;coreutils docs&lt;/a&gt; repository.&lt;/p&gt; 
 &lt;p&gt;Use &lt;a href="https://hosted.weblate.org/projects/rust-coreutils/"&gt;weblate/rust-coreutils&lt;/a&gt; to translate the Rust coreutils into your language.&lt;/p&gt; 
 &lt;!-- ANCHOR: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;Requirements&lt;/h2&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;GNU Make (optional)&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Rust Version&lt;/h3&gt; 
 &lt;p&gt;uutils follows Rust's release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version (MSRV) is &lt;code&gt;1.85.0&lt;/code&gt;.&lt;/p&gt; 
 &lt;h2&gt;Building&lt;/h2&gt; 
 &lt;p&gt;There are currently two methods to build the uutils binaries: either Cargo or GNU Make.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Building the full package, including all documentation, requires both Cargo and GNU Make on a Unix platform.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;For either method, we first need to fetch the repository:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/uutils/coreutils
cd coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Cargo&lt;/h3&gt; 
 &lt;p&gt;Building uutils using Cargo is easy because the process is the same as for every other Rust program:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command builds the most portable common core set of uutils into a multicall (BusyBox-type) binary, named 'coreutils', on most Rust-supported platforms.&lt;/p&gt; 
 &lt;p&gt;Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform (on that platform) is as simple as specifying it as a feature:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release --features macos
# or ...
cargo build --release --features windows
# or ...
cargo build --release --features unix
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don't want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --features "base32 cat echo rm" --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you don't want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named "uu_UTILNAME". To build individual utilities, use cargo to build just the specific packages (using the &lt;code&gt;--package&lt;/code&gt; [aka &lt;code&gt;-p&lt;/code&gt;] option). For example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo build -p uu_base32 -p uu_cat -p uu_echo -p uu_rm
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;GNU Make&lt;/h3&gt; 
 &lt;p&gt;Building using &lt;code&gt;make&lt;/code&gt; is a simple process as well.&lt;/p&gt; 
 &lt;p&gt;To simply build all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;In release mode:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROFILE=release
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make SKIP_UTILS='UTILITY_1 UTILITY_2'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To build only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make UTILS='UTILITY_1 UTILITY_2'
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Installation&lt;/h2&gt; 
 &lt;h3&gt;Install with Cargo&lt;/h3&gt; 
 &lt;p&gt;Likewise, installing can simply be done using:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo install --path . --locked
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This command will install uutils into Cargo's &lt;em&gt;bin&lt;/em&gt; folder (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;$HOME/.cargo/bin&lt;/code&gt;).&lt;/p&gt; 
 &lt;p&gt;This does not install files necessary for shell completion or manpages. For manpages or shell completion to work, use &lt;code&gt;GNU Make&lt;/code&gt; or see &lt;code&gt;Manually install shell completions&lt;/code&gt;/&lt;code&gt;Manually install manpages&lt;/code&gt;.&lt;/p&gt; 
 &lt;h3&gt;Install with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To install all available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install using &lt;code&gt;sudo&lt;/code&gt; switch &lt;code&gt;-E&lt;/code&gt; must be used:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;sudo -E make install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install all but a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make SKIP_UTILS='UTILITY_1 UTILITY_2' install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install only a few of the available utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make UTILS='UTILITY_1 UTILITY_2' install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install every program with a prefix (e.g. uu-echo uu-cat):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROG_PREFIX=PREFIX_GOES_HERE install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To install the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make MULTICALL=y install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Set install parent directory (default value is /usr/local):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# DESTDIR is also supported
make PREFIX=/my/path install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Installing with &lt;code&gt;make&lt;/code&gt; installs shell completions for all installed utilities for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. Completions for &lt;code&gt;elvish&lt;/code&gt; and &lt;code&gt;powershell&lt;/code&gt; can also be generated; See &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;To skip installation of completions and manpages:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make COMPLETIONS=n MANPAGES=n install
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install shell completions&lt;/h3&gt; 
 &lt;p&gt;The &lt;code&gt;coreutils&lt;/code&gt; binary can generate completions for the &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; shells. It prints the result to stdout.&lt;/p&gt; 
 &lt;p&gt;The syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run completion &amp;lt;utility&amp;gt; &amp;lt;shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install completions for &lt;code&gt;ls&lt;/code&gt; on &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;/usr/local/share/bash-completion/completions/ls&lt;/code&gt;, run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run completion ls bash &amp;gt; /usr/local/share/bash-completion/completions/ls
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Manually install manpages&lt;/h3&gt; 
 &lt;p&gt;To generate manpages, the syntax is:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo run manpage &amp;lt;utility&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;So, to install the manpage for &lt;code&gt;ls&lt;/code&gt; to &lt;code&gt;/usr/local/share/man/man1/ls.1&lt;/code&gt; run:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo run manpage ls &amp;gt; /usr/local/share/man/man1/ls.1
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h2&gt;Un-installation&lt;/h2&gt; 
 &lt;p&gt;Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall.&lt;/p&gt; 
 &lt;h3&gt;Uninstall with Cargo&lt;/h3&gt; 
 &lt;p&gt;To uninstall uutils:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo uninstall coreutils
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Uninstall with GNU Make&lt;/h3&gt; 
 &lt;p&gt;To uninstall all utilities:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall every program with a set prefix:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make PROG_PREFIX=PREFIX_GOES_HERE uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall the multicall binary:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;make MULTICALL=y uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To uninstall from a custom parent directory:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# DESTDIR is also supported
make PREFIX=/my/path uninstall
&lt;/code&gt;&lt;/pre&gt; 
 &lt;!-- ANCHOR_END: build (this mark is needed for mdbook) --&gt; 
 &lt;h2&gt;GNU test suite compatibility&lt;/h2&gt; 
 &lt;p&gt;Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found &lt;a href="https://uutils.github.io/coreutils/docs/test_coverage.html"&gt;in the user manual&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;See &lt;a href="https://github.com/orgs/uutils/projects/1"&gt;https://github.com/orgs/uutils/projects/1&lt;/a&gt; for the main meta bugs (many are missing).&lt;/p&gt; 
 &lt;p&gt;&lt;img src="https://github.com/uutils/coreutils-tracking/raw/main/gnu-results.svg?raw=true" alt="Evolution over time" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;!-- close oranda-hide div --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To contribute to uutils, please see &lt;a href="https://raw.githubusercontent.com/uutils/coreutils/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;uutils is licensed under the MIT License - see the &lt;code&gt;LICENSE&lt;/code&gt; file for details&lt;/p&gt; 
&lt;p&gt;GNU Coreutils is licensed under the GPL 3.0 or later.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automattic/harper</title>
      <link>https://github.com/Automattic/harper</link>
      <description>&lt;p&gt;Offline, privacy-first grammar checker. Fast, open-source, Rust-powered&lt;/p&gt;&lt;hr&gt;&lt;div id="header" align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/Automattic/harper/master/logo.svg?sanitize=true" width="400px" /&gt; 
 &lt;h1&gt;Harper&lt;/h1&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://github.com/automattic/harper/actions/workflows/build_harper_binaries.yml"&gt;&lt;img src="https://github.com/automattic/harper/actions/workflows/build_harper_binaries.yml/badge.svg?sanitize=true" alt="Harper Binaries" /&gt;&lt;/a&gt; &lt;a href="https://github.com/automattic/harper/actions/workflows/build_web.yml"&gt;&lt;img src="https://github.com/automattic/harper/actions/workflows/build_web.yml/badge.svg?sanitize=true" alt="Website" /&gt;&lt;/a&gt; &lt;a href="https://github.com/automattic/harper/actions/workflows/precommit.yml"&gt;&lt;img src="https://github.com/automattic/harper/actions/workflows/precommit.yml/badge.svg?sanitize=true" alt="Precommit" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/harper-ls"&gt;&lt;img src="https://img.shields.io/crates/v/harper-ls" alt="Crates.io" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/npm/v/harper.js" alt="NPM Version" /&gt;&lt;/p&gt; 
&lt;p&gt;Harper is an English grammar checker designed to be &lt;em&gt;just right.&lt;/em&gt; I created it after years of dealing with the shortcomings of the competition.&lt;/p&gt; 
&lt;p&gt;Grammarly was too expensive and too overbearing. Its suggestions lacked context, and were often just plain &lt;em&gt;wrong&lt;/em&gt;. Not to mention: it's a privacy nightmare. Everything you write with Grammarly is sent to their servers. Their privacy policy claims they don't sell the data, but that doesn't mean they don't use it to train large language models and god knows what else. Not only that, but the round-trip-time of the network request makes revising your work all the more tedious.&lt;/p&gt; 
&lt;p&gt;LanguageTool is great, if you have gigabytes of RAM to spare and are willing to download the ~16GB n-gram dataset. Besides the memory requirements, I found LanguageTool too slow: it would take several seconds to lint even a moderate-size document.&lt;/p&gt; 
&lt;p&gt;That's why I created Harper: it is the grammar checker that fits my needs. Not only does it take milliseconds to lint a document, take less than 1/50th of LanguageTool's memory footprint, but it is also completely private.&lt;/p&gt; 
&lt;p&gt;Harper is even small enough to load via &lt;a href="https://writewithharper.com"&gt;WebAssembly.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Language Support&lt;/h2&gt; 
&lt;p&gt;Harper currently only supports English, but the core is extensible to support other languages, so we welcome contributions that allow for other language support.&lt;/p&gt; 
&lt;h2&gt;Performance Issues&lt;/h2&gt; 
&lt;p&gt;We consider long lint times bugs. If you encounter any significant performance issues, please create an issue on the topic.&lt;/p&gt; 
&lt;p&gt;If you find a fix to any performance issue, we would appreciate the contribution. Just please make sure to read &lt;a href="https://github.com/automattic/harper/raw/master/CONTRIBUTING.md"&gt;our contribution guidelines first.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://writewithharper.com/docs/faq"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/obsidian"&gt;Obsidian Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/language-server"&gt;&lt;code&gt;harper-ls&lt;/code&gt; Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Supported Editors' Documentation 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/visual-studio-code"&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/neovim"&gt;Neovim&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/helix"&gt;Helix&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/emacs"&gt;Emacs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://writewithharper.com/docs/integrations/zed"&gt;Zed&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://writewithharper.com/docs/harperjs/introduction"&gt;&lt;code&gt;harper.js&lt;/code&gt; Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.com/invite/JBqcAaKrzQ"&gt;Official Discord Server&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Huge Thanks&lt;/h2&gt; 
&lt;p&gt;This project would not be possible without the hard work from those who &lt;a href="https://writewithharper.com/docs/contributors/introduction"&gt;contribute&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://github.com/automattic/harper/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=automattic/harper" /&gt; &lt;/a&gt; 
&lt;p&gt;Harper's logo was designed by &lt;a href="https://lukaswerner.com/"&gt;Lukas Werner&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/comprehensive-rust</title>
      <link>https://github.com/google/comprehensive-rust</link>
      <description>&lt;p&gt;This is the Rust course used by the Android team at Google. It provides you the material to quickly teach Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Comprehensive Rust ü¶Ä&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/google/comprehensive-rust/actions/workflows/build.yml?query=branch%3Amain"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/google/comprehensive-rust/build.yml?style=flat-square" alt="Build workflow" /&gt;&lt;/a&gt; &lt;a href="https://github.com/google/comprehensive-rust/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/google/comprehensive-rust?style=flat-square" alt="GitHub contributors" /&gt;&lt;/a&gt; &lt;a href="https://github.com/google/comprehensive-rust/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/google/comprehensive-rust?style=flat-square" alt="GitHub stars" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository has the source code for Comprehensive Rust ü¶Ä, a multi-day Rust course developed by the Android team. The course covers all aspects of Rust, from basic syntax to generics and error handling. It also includes deep dives on &lt;a href="https://google.github.io/comprehensive-rust/android.html"&gt;Android&lt;/a&gt;, &lt;a href="https://google.github.io/comprehensive-rust/chromium.html"&gt;Chromium&lt;/a&gt;, &lt;a href="https://google.github.io/comprehensive-rust/bare-metal.html"&gt;bare-metal&lt;/a&gt;, and &lt;a href="https://google.github.io/comprehensive-rust/concurrency.html"&gt;concurrency&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Read the course at &lt;strong&gt;&lt;a href="https://google.github.io/comprehensive-rust/"&gt;https://google.github.io/comprehensive-rust/&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Course Format and Target Audience&lt;/h2&gt; 
&lt;p&gt;The course is used internally at Google to teach Rust to experienced software engineers, typically with a background in C++ or Java.&lt;/p&gt; 
&lt;p&gt;The course is taught in a classroom setting, and we hope it will be useful for others who want to teach Rust to their team. The course is less ideal for self-study, since you would miss out on classroom discussions. You would not see the questions and answers, nor the compiler errors we trigger when going through the code samples. We hope to improve the self-study experience via &lt;a href="https://github.com/google/comprehensive-rust/issues/53"&gt;speaker notes&lt;/a&gt; and by &lt;a href="https://github.com/google/comprehensive-rust/issues/52"&gt;publishing videos&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Press&lt;/h2&gt; 
&lt;p&gt;Articles and blog posts from around the web which cover Comprehensive Rust:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;2023-09-08: &lt;em&gt;&lt;a href="https://mo8it.com/blog/teaching-rust/"&gt;Teaching Rust in 5 days&lt;/a&gt;&lt;/em&gt;. Comprehensive Rust was used as a base for a 5-day university class on Rust.&lt;/li&gt; 
 &lt;li&gt;2023-09-21: &lt;em&gt;&lt;a href="https://security.googleblog.com/2023/09/scaling-rust-adoption-through-training.html"&gt;Scaling Rust Adoption Through Training&lt;/a&gt;&lt;/em&gt;. We published a blog post with details on the development of the course.&lt;/li&gt; 
 &lt;li&gt;2023-10-02: &lt;em&gt;&lt;a href="https://www.darkreading.com/application-security/seeking-rust-developers-in-house-training"&gt;In Search of Rust Developers, Companies Turn to In-House Training&lt;/a&gt;&lt;/em&gt;. About how Microsoft, Google, and others are training people in Rust.&lt;/li&gt; 
 &lt;li&gt;2024-10-18: &lt;em&gt;&lt;a href="https://youtu.be/7h5KyMqt2-Q?si=4M99HdWWxMaqN8Zr"&gt;Rust Training at Scale | Rust Global @ RustConf 2024&lt;/a&gt;&lt;/em&gt;. What Google learned from teaching Comprehensive Rust for more than two years.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;The course is built using a few tools:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/mdBook"&gt;mdbook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/boozook/mdbook-svgbob"&gt;mdbook-svgbob&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/google/mdbook-i18n-helpers"&gt;mdbook-i18n-helpers and i18n-report&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/google/comprehensive-rust/main/mdbook-exerciser/"&gt;mdbook-exerciser&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/google/comprehensive-rust/main/mdbook-course/"&gt;mdbook-course&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marxin/mdbook-linkcheck2"&gt;mdbook-linkcheck2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;First, install Rust by following the instructions on &lt;a href="https://rustup.rs/"&gt;https://rustup.rs/&lt;/a&gt;. Then clone this repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/google/comprehensive-rust/
cd comprehensive-rust
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then install these tools with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo xtask install-tools
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; We use &lt;code&gt;xtask&lt;/code&gt; for task automation within the project (e.g. installing required tools). Xtask is not a package that you should install. Visit &lt;a href="https://github.com/matklad/cargo-xtask"&gt;https://github.com/matklad/cargo-xtask&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;Here are some of the commonly used commands you can run in the project. Run &lt;code&gt;cargo xtask&lt;/code&gt; to view all available commands.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;cargo xtask install-tools&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Install all the tools the project depends on.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;cargo xtask serve&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Start a web server with the course. You'll find the content on &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. To serve any of the translated versions of the course, add the language flag (--language or -l) followed by xx, where xx is the ISO 639 language code (e.g. cargo xtask serve -l da for the Danish translation).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;cargo xtask rust-tests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Test the included Rust snippets.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;cargo xtask web-tests&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Run the web driver tests in the tests directory.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;cargo xtask build&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Create a static version of the course in the &lt;code&gt;book/&lt;/code&gt; directory. Note that you have to separately build and zip exercises and add them to book/html. To build any of the translated versions of the course, add the language flag (--language or -l) followed by xx, where xx is the ISO 639 language code (e.g. cargo xtask build -l da for the Danish translation). &lt;a href="https://raw.githubusercontent.com/google/comprehensive-rust/main/TRANSLATIONS.md"&gt;TRANSLATIONS.md&lt;/a&gt; contains further instructions.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; On Windows, you need to enable symlinks (&lt;code&gt;git config --global core.symlinks true&lt;/code&gt;) and Developer Mode.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions. Please see &lt;a href="https://raw.githubusercontent.com/google/comprehensive-rust/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;For questions or comments, please contact &lt;a href="mailto:mgeisler@google.com"&gt;Martin Geisler&lt;/a&gt; or start a &lt;a href="https://github.com/google/comprehensive-rust/discussions"&gt;discussion on GitHub&lt;/a&gt;. We would love to hear from you.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ast-grep/ast-grep</title>
      <link>https://github.com/ast-grep/ast-grep</link>
      <description>&lt;p&gt;‚ö°A CLI tool for code structural search, lint and rewriting. Written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://ast-grep.github.io/logo.svg?sanitize=true" alt="ast-grep" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://github.com/ast-grep/ast-grep/actions/workflows/coverage.yaml/badge.svg?sanitize=true" alt="coverage badge" /&gt; &lt;a href="https://app.codecov.io/gh/ast-grep/ast-grep"&gt;&lt;img src="https://codecov.io/gh/ast-grep/ast-grep/branch/main/graph/badge.svg?token=37VX8H2EWV" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/4YZjf6htSQ" target="_blank"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1107749847722889217?label=Discord" /&gt;&lt;/a&gt; &lt;a href="https://repology.org/project/ast-grep/versions" target="_blank"&gt;&lt;img alt="Repology" src="https://repology.org/badge/tiny-repos/ast-grep.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/stars/ast-grep/ast-grep?style=social" alt="Badge" /&gt; &lt;img src="https://img.shields.io/github/forks/ast-grep/ast-grep?style=social" alt="Badge" /&gt; &lt;img alt="GitHub Sponsors" src="https://img.shields.io/github/sponsors/HerringtonDarkholme?style=social" /&gt; &lt;a href="https://gurubase.io/g/ast-grep"&gt;&lt;img alt="Gurubase" src="https://img.shields.io/badge/Gurubase-Ask%20ast--grep%20Guru-006BFF" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;ast-grep(sg)&lt;/h2&gt; 
&lt;p&gt;ast-grep(sg) is a CLI tool for code structural search, lint, and rewriting.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;ast-grep is an &lt;a href="https://dev.to/balapriya/abstract-syntax-tree-ast-explained-in-plain-english-1h38"&gt;abstract syntax tree&lt;/a&gt; based tool to search code by pattern code. Think of it as your old-friend &lt;a href="https://en.wikipedia.org/wiki/Grep#:~:text=grep%20is%20a%20command%2Dline,which%20has%20the%20same%20effect."&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/a&gt;, but matching AST nodes instead of text. You can write patterns as if you are writing ordinary code. It will match all code that has the same syntactical structure. You can use &lt;code&gt;$&lt;/code&gt; sign + upper case letters as a &lt;a href="https://en.wikipedia.org/wiki/Wildcard_character"&gt;wildcard&lt;/a&gt;, e.g. &lt;code&gt;$MATCH&lt;/code&gt;, to match any single AST node. Think of it as &lt;a href="https://regexone.com/lesson/wildcards_dot"&gt;regular expression dot&lt;/a&gt; &lt;code&gt;.&lt;/code&gt;, except it is not textual.&lt;/p&gt; 
&lt;p&gt;Try the &lt;a href="https://ast-grep.github.io/playground.html"&gt;online playground&lt;/a&gt; for a taste!&lt;/p&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://ast-grep.github.io/image/search-replace.png" alt="demo" /&gt;&lt;/p&gt; 
&lt;p&gt;See more screenshots on the &lt;a href="https://ast-grep.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can install it from &lt;a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"&gt;npm&lt;/a&gt;, &lt;a href="https://pypi.org/"&gt;pip&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/cargo/getting-started/installation.html"&gt;cargo&lt;/a&gt;, &lt;a href="https://github.com/cargo-bins/cargo-binstall"&gt;cargo-binstall&lt;/a&gt;, &lt;a href="https://brew.sh/"&gt;homebrew&lt;/a&gt;, &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt; or &lt;a href="https://www.macports.org"&gt;MacPorts&lt;/a&gt;!&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install --global @ast-grep/cli
pip install ast-grep-cli
brew install ast-grep
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for more installation methods&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cargo install ast-grep --locked
cargo binstall ast-grep

# install via scoop, thank @brian6932
scoop install main/ast-grep

# install via MacPorts
sudo port install ast-grep

# try ast-grep in nix-shell
nix-shell -p ast-grep
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Or you can build ast-grep from source. You need to install rustup, clone the repository and then&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install --path ./crates/cli --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/ast-grep/versions"&gt;Packages&lt;/a&gt; are available on other platforms too.&lt;/p&gt; 
&lt;h2&gt;Command line usage example&lt;/h2&gt; 
&lt;p&gt;ast-grep has following form.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ast-grep --pattern 'var code = $PATTERN' --rewrite 'let code = new $PATTERN' --lang ts
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/Hchan_mgn/status/1547061516993699841?s=20&amp;amp;t=ldDoj4U2nq-FRKQkU5GWXA"&gt;Rewrite code in null coalescing operator&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ast-grep -p '$A &amp;amp;&amp;amp; $A()' -l ts -r '$A?.()'
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/Hchan_mgn/status/1561802312846278657"&gt;Rewrite&lt;/a&gt; &lt;a href="https://github.com/ecyrbe/zodios#migrate-to-v8"&gt;Zodios&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ast-grep -p 'new Zodios($URL,  $CONF as const,)' -l ts -r 'new Zodios($URL, $CONF)' -i
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/Hchan_mgn/status/1560108625460355073"&gt;Implement eslint rule using YAML.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/HerringtonDarkholme/sponsors/main/sponsorkit/sponsors.svg?sanitize=true" alt="Sponsors" /&gt;&lt;/p&gt; 
&lt;p&gt;If you find ast-grep interesting and useful for your work, please &lt;a href="https://github.com/sponsors/HerringtonDarkholme"&gt;buy me a coffee&lt;/a&gt; so I can spend more time on the project!&lt;/p&gt; 
&lt;h2&gt;Feature Highlight&lt;/h2&gt; 
&lt;p&gt;ast-grep's core is an algorithm to search and replace code based on abstract syntax tree produced by tree-sitter. It can help you to do lightweight static analysis and massive scale code manipulation in an intuitive way.&lt;/p&gt; 
&lt;p&gt;Key highlights:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;An intuitive pattern to find and replace AST. ast-grep's pattern looks like ordinary code you would write every day (you could say the pattern is isomorphic to code).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;jQuery like API for AST traversal and manipulation.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;YAML configuration to write new linting rules or code modification.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Written in compiled language, with tree-sitter based parsing and utilizing multiple cores.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Beautiful command line interface :)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ast-grep's vision is to democratize abstract syntax tree magic and to liberate one from cumbersome AST programming!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are an open-source library author, ast-grep can help your library users adopt breaking changes more easily.&lt;/li&gt; 
 &lt;li&gt;if you are a tech lead in your team, ast-grep can help you enforce code best practice tailored to your business need.&lt;/li&gt; 
 &lt;li&gt;If you are a security researcher, ast-grep can help you write rules much faster.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>bevyengine/bevy</title>
      <link>https://github.com/bevyengine/bevy</link>
      <description>&lt;p&gt;A refreshingly simple data-driven game engine built in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://bevy.org"&gt;&lt;img src="https://raw.githubusercontent.com/bevyengine/bevy/main/assets/branding/bevy_logo_light_dark_and_dimmed.svg?sanitize=true" alt="Bevy" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/bevyengine/bevy#license"&gt;&lt;img src="https://img.shields.io/badge/license-MIT%2FApache-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/v/bevy.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/d/bevy.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/bevy/latest/bevy/"&gt;&lt;img src="https://docs.rs/bevy/badge.svg?sanitize=true" alt="Docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bevyengine/bevy/actions"&gt;&lt;img src="https://github.com/bevyengine/bevy/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/bevy"&gt;&lt;img src="https://img.shields.io/discord/691052431525675048.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Bevy?&lt;/h2&gt; 
&lt;p&gt;Bevy is a refreshingly simple data-driven game engine built in Rust. It is free and open-source forever!&lt;/p&gt; 
&lt;h2&gt;WARNING&lt;/h2&gt; 
&lt;p&gt;Bevy is still in the early stages of development. Important features are missing. Documentation is sparse. A new version of Bevy containing breaking changes to the API is released &lt;a href="https://bevy.org/news/bevy-0-6/#the-train-release-schedule"&gt;approximately once every 3 months&lt;/a&gt;. We provide &lt;a href="https://bevy.org/learn/migration-guides/"&gt;migration guides&lt;/a&gt;, but we can't guarantee migrations will always be easy. Use only if you are willing to work in this environment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally close to "the latest stable release" of Rust.&lt;/p&gt; 
&lt;h2&gt;Design Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Capable&lt;/strong&gt;: Offer a complete 2D and 3D feature set&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Easy for newbies to pick up, but infinitely flexible for power users&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Focused&lt;/strong&gt;: Data-oriented architecture using the Entity Component System paradigm&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modular&lt;/strong&gt;: Use only what you need. Replace what you don't like&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: App logic should run quickly, and when possible, in parallel&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Productive&lt;/strong&gt;: Changes should compile quickly ... waiting isn't fun&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org"&gt;Features&lt;/a&gt;:&lt;/strong&gt; A quick overview of Bevy's features.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/news/"&gt;News&lt;/a&gt;&lt;/strong&gt;: A development blog that covers our progress, plans and shiny new features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt;:&lt;/strong&gt; Bevy's official Quick Start Guide. The best place to start learning Bevy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.rs/bevy"&gt;Bevy Rust API Docs&lt;/a&gt;:&lt;/strong&gt; Bevy's Rust API docs, which are automatically generated from the doc comments in this repo.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;Official Examples&lt;/a&gt;:&lt;/strong&gt; Bevy's dedicated, runnable examples, which are great for digging into specific concepts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/#learning"&gt;Community-Made Learning Resources&lt;/a&gt;&lt;/strong&gt;: More tutorials, documentation, and examples made by the Bevy community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Before contributing or participating in discussions with the community, you should familiarize yourself with our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CODE_OF_CONDUCT.md"&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://discord.gg/bevy"&gt;Discord&lt;/a&gt;:&lt;/strong&gt; Bevy's official discord server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://reddit.com/r/bevy"&gt;Reddit&lt;/a&gt;:&lt;/strong&gt; Bevy's official subreddit.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/discussions"&gt;GitHub Discussions&lt;/a&gt;:&lt;/strong&gt; The best place for questions about Bevy, answered right here!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/"&gt;Bevy Assets&lt;/a&gt;:&lt;/strong&gt; A collection of awesome Bevy projects, tools, plugins and learning materials.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you'd like to help build Bevy, check out the &lt;strong&gt;&lt;a href="https://bevy.org/learn/contribute/introduction"&gt;Contributor's Guide&lt;/a&gt;&lt;/strong&gt;. For simple problems, feel free to &lt;a href="https://github.com/bevyengine/bevy/issues"&gt;open an issue&lt;/a&gt; or &lt;a href="https://github.com/bevyengine/bevy/pulls"&gt;PR&lt;/a&gt; and tackle it yourself!&lt;/p&gt; 
&lt;p&gt;For more complex architecture decisions and experimental mad science, please open an &lt;a href="https://github.com/bevyengine/rfcs"&gt;RFC&lt;/a&gt; (Request For Comments) so we can brainstorm together effectively!&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We recommend checking out the &lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt; for a brief introduction.&lt;/p&gt; 
&lt;p&gt;Follow the &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;Setup guide&lt;/a&gt; to ensure your development environment is set up correctly. Once set up, you can quickly try out the &lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;examples&lt;/a&gt; by cloning this repo and running the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Switch to the correct version (latest release, default is main development branch)
git checkout latest
# Runs the "breakout" example
cargo run --example breakout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To draw a window with standard functionality enabled, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use bevy::prelude::*;

fn main() {
    App::new()
        .add_plugins(DefaultPlugins)
        .run();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fast Compiles&lt;/h3&gt; 
&lt;p&gt;Bevy can be built just fine using default configuration on stable Rust. However for really fast iterative compiles, you should enable the "fast compiles" setup by &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;following the instructions here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;Bevy Cargo Features&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;This &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;list&lt;/a&gt; outlines the different cargo features supported by Bevy. These allow you to customize the Bevy feature set for your use-case.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Bevy is the result of the hard work of many people. A huge thanks to all Bevy contributors, the many open source projects that have come before us, the &lt;a href="https://arewegameyet.rs/"&gt;Rust gamedev ecosystem&lt;/a&gt;, and the many libraries we build on.&lt;/p&gt; 
&lt;p&gt;A huge thanks to Bevy's &lt;a href="https://bevy.org"&gt;generous sponsors&lt;/a&gt;. Bevy will always be free and open source, but it isn't free to make. Please consider &lt;a href="https://bevy.org/donate/"&gt;sponsoring our work&lt;/a&gt; if you like what we're building.&lt;/p&gt; 
&lt;!-- This next line need to stay exactly as is. It is required for BrowserStack sponsorship. --&gt; 
&lt;p&gt;This project is tested with BrowserStack.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Bevy is free, open source and permissively licensed! Except where noted (below and/or in individual files), all code in this repository is dual-licensed under either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MIT License (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option. This means you can select the license you prefer! This dual-licensing approach is the de-facto standard in the Rust ecosystem and there are &lt;a href="https://github.com/bevyengine/bevy/issues/2373"&gt;very good reasons&lt;/a&gt; to include both.&lt;/p&gt; 
&lt;p&gt;Some of the engine's code carries additional copyright notices and license terms due to their external origins. These are generally BSD-like, but exact details vary by crate: If the README of a crate contains a 'License' header (or similar), the additional copyright notices and license terms applicable to that crate will be listed. The above licensing requirement still applies to contributions to those crates, and sections of those crates will carry those license terms. The &lt;a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields"&gt;license&lt;/a&gt; field of each crate will also reflect this.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/assets"&gt;assets&lt;/a&gt; included in this repository (for our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/examples/README.md"&gt;examples&lt;/a&gt;) typically fall under different open licenses. These will not be included in your game (unless copied in by you), and they are not distributed in the published bevy crates. See &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CREDITS.md"&gt;CREDITS.md&lt;/a&gt; for the details of the licenses of those files.&lt;/p&gt; 
&lt;h3&gt;Your contributions&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitbutlerapp/gitbutler</title>
      <link>https://github.com/gitbutlerapp/gitbutler</link>
      <description>&lt;p&gt;The GitButler version control client, backed by Git, powered by Tauri/Rust/Svelte&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img align="center" width="128px" src="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/crates/gitbutler-tauri/icons/128x128@2x.png" /&gt; 
 &lt;h1 align="center"&gt;&lt;b&gt;GitButler&lt;/b&gt;&lt;/h1&gt; 
 &lt;p align="center"&gt; Git branch management tool, built from the ground up for modern workflows &lt;br /&gt; &lt;a href="https://gitbutler.com"&gt;&lt;strong&gt;gitbutler.com ¬ª&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;b&gt;Download for &lt;/b&gt; macOS (&lt;a href="https://app.gitbutler.com/downloads/release/darwin/aarch64/dmg"&gt;Apple Silicon&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/darwin/x86_64/dmg"&gt;Intel&lt;/a&gt;) ¬∑ Linux (&lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/gz"&gt;AppImage&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/deb"&gt;deb&lt;/a&gt;) ¬∑ Windows (&lt;a href="https://app.gitbutler.com/downloads/release/windows/x86_64/msi"&gt;msi&lt;/a&gt;) &lt;br /&gt; &lt;br /&gt; (Unstable Nightly releases can be found &lt;a href="https://app.gitbutler.com/downloads"&gt;here&lt;/a&gt;) &lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/bf9bdb33-a979-47a0-b2b2-8fff5ea53afb" alt="gitbutler_client" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml"&gt;&lt;img src="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=gitbutler"&gt;&lt;img src="https://img.shields.io/badge/Twitter-black?logo=x&amp;amp;logoColor=white" alt="TWEET" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;&lt;img src="https://img.shields.io/discord/1060193121130000425?label=Discord&amp;amp;color=5865F2" alt="DISCORD" /&gt;&lt;/a&gt; &lt;a href="https://www.instagram.com/gitbutler/"&gt;&lt;img src="https://img.shields.io/badge/Instagram-E4405F?logo=instagram&amp;amp;logoColor=white" alt="INSTA" /&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@gitbutlerapp"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UCEwkZIHGqsTGYvX8wgD0LoQ" alt="YOUTUBE" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/gitbutlerapp/gitbutler"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="DEEPWIKI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/fb23382bcf57c609832661874d3019a43555d6ae.svg?sanitize=true" alt="Alt" title="Repobeats analytics for GitButler" /&gt;&lt;/p&gt; 
&lt;p&gt;GitButler is a git client that lets you work on multiple branches at the same time. It allows you to quickly organize file changes into separate branches while still having them applied to your working directory. You can then push branches individually to your remote, or directly create pull requests.&lt;/p&gt; 
&lt;p&gt;In a nutshell, it's a more flexible version of &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git rebase -i&lt;/code&gt;, allowing you to efficiently multitask across branches.&lt;/p&gt; 
&lt;h2&gt;How Does It Work?&lt;/h2&gt; 
&lt;p&gt;GitButler keeps track of uncommitted changes in a layer on top of Git. Changes to files or parts of files can be grouped into what we call virtual branches. Whenever you are happy with the contents of a virtual branch, you can push it to a remote. GitButler makes sure that the state of other virtual branches is kept separate.&lt;/p&gt; 
&lt;h2&gt;How Do GB's Virtual Branches Differ From Git Branches?&lt;/h2&gt; 
&lt;p&gt;The branches that we know and love in Git are separate universes, and switching between them is a full context switch. GitButler allows you to work with multiple branches in parallel in the same working directory. This effectively means having the content of multiple branches available at the same time.&lt;/p&gt; 
&lt;p&gt;GitButler is aware of changes before they are committed. This allows it to keep a record of which virtual branch each individual diff belongs to. Effectively, this means that you can separate out individual branches with their content at any time to push them to a remote or to unapply them from your working directory.&lt;/p&gt; 
&lt;p&gt;And finally, while in Git it is preferable that you create your desired branch ahead of time, using GitButler you can move changes between virtual branches at any point during development.&lt;/p&gt; 
&lt;h2&gt;Why GitButler?&lt;/h2&gt; 
&lt;p&gt;We love Git. Our own &lt;a href="https://github.com/schacon"&gt;@schacon&lt;/a&gt; has even published the &lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git&lt;/a&gt; book. At the same time, Git's user interface hasn't been fundamentally changed for 15 years. While it was written for Linux kernel devs sending patches to each other over mailing lists, most developers today have different workflows and needs.&lt;/p&gt; 
&lt;p&gt;Instead of trying to fit the semantics of the Git CLI into a graphical interface, we are starting with the developer workflow and mapping it back to Git.&lt;/p&gt; 
&lt;h2&gt;Tech&lt;/h2&gt; 
&lt;p&gt;GitButler is a &lt;a href="https://tauri.app/"&gt;Tauri&lt;/a&gt;-based application. Its UI is written in &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; using &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; and its backend is written in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Main Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Virtual Branches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Organize work on multiple branches simultaneously, rather than constantly switching branches&lt;/li&gt; 
   &lt;li&gt;Automatically create new branches when needed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy Commit Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Undo, Amend and Squash commits by dragging and dropping&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Undo Timeline&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Logs all operations and changes and allows you to easily undo or revert any operation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Integration&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Authenticate to GitHub to open Pull Requests, list branches and statuses and more&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy SSH Key Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;GitButler can generate an SSH key to upload to GitHub automatically&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Tooling&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically write commit messages based on your work in progress&lt;/li&gt; 
   &lt;li&gt;Automatically create descriptive branch names&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Commit Signing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Easy commit signing with GPG or SSH&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Uses&lt;/h2&gt; 
&lt;h3&gt;Fixing a Bug While Working on a Feature&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say that while developing a feature, you encounter a bug that you wish to fix. It's often desirable that you ship the fix as a separate contribution (Pull request).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git you can stash your changes and switch to another branch, where you can commit, and push your fix.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;With GitButler&lt;/em&gt; you simply assign your fix to a separate virtual branch, which you can individually push (or directly create a PR). An additional benefit is that you can retain the fix in your working directory while waiting for CI and/or code review.&lt;/p&gt; 
&lt;h3&gt;Trying Someone Else's Branch Together With My Work in Progress&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say you want to test a branch from someone else for the purpose of code review.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git trying out someone else's branch is a full context switch away from your own work. &lt;em&gt;With GitButler&lt;/em&gt; you can apply and unapply (add / remove) any remote branch directly into your working directory.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find our end user documentation at: &lt;a href="https://docs.gitbutler.com"&gt;https://docs.gitbutler.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Bugs and Feature Requests&lt;/h2&gt; 
&lt;p&gt;If you have a bug or feature request, feel free to open an &lt;a href="https://github.com/gitbutlerapp/gitbutler/issues/new"&gt;issue&lt;/a&gt;, or &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;join our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AI Commit Message Generation&lt;/h2&gt; 
&lt;p&gt;Commit message generation is an opt-in feature. You can enable it while adding your repository for the first time or later in the project settings.&lt;/p&gt; 
&lt;p&gt;Currently, GitButler uses OpenAI's API for diff summarization, which means that if enabled, code diffs would be sent to OpenAI's servers.&lt;/p&gt; 
&lt;p&gt;Our goal is to make this feature more modular such that in the future you can modify the prompt as well as plug a different LLM endpoints (including local ones).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;So you want to help out? Please check out the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;p&gt;If you want to skip right to getting the code to actually compile, take a look at the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/DEVELOPMENT.md"&gt;DEVELOPMENT.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Want to show your support? Add a GitButler badge to your project's README:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-md"&gt;[![GitButler](https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D)](https://gitbutler.com/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rustdesk/rustdesk-server</title>
      <link>https://github.com/rustdesk/rustdesk-server</link>
      <description>&lt;p&gt;RustDesk Server Program&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RustDesk Server Program&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk-server/actions/workflows/build.yaml"&gt;&lt;img src="https://github.com/rustdesk/rustdesk-server/actions/workflows/build.yaml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk-server/releases"&gt;&lt;strong&gt;Download&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rustdesk.com/docs/en/self-host/"&gt;&lt;strong&gt;Manual&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rustdesk.com/docs/en/self-host/rustdesk-server-pro/installscript/#convert-from-open-source"&gt;&lt;strong&gt;How to migrate OSS to Pro&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Self-host your own RustDesk server, it is free and open source.&lt;/p&gt; 
&lt;h2&gt;How to build manually&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Three executables will be generated in target/release.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;hbbs - RustDesk ID/Rendezvous server&lt;/li&gt; 
 &lt;li&gt;hbbr - RustDesk relay server&lt;/li&gt; 
 &lt;li&gt;rustdesk-utils - RustDesk CLI utilities&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can find updated binaries on the &lt;a href="https://github.com/rustdesk/rustdesk-server/releases"&gt;Releases&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;If you want extra features, &lt;a href="https://rustdesk.com/pricing.html"&gt;RustDesk Server Pro&lt;/a&gt; might suit you better.&lt;/p&gt; 
&lt;p&gt;If you want to develop your own server, &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;rustdesk-server-demo&lt;/a&gt; might be a better and simpler start for you than this repo.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Please follow this &lt;a href="https://rustdesk.com/docs/en/self-host/rustdesk-server-oss/"&gt;doc&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>slint-ui/slint</title>
      <link>https://github.com/slint-ui/slint</link>
      <description>&lt;p&gt;Slint is an open-source declarative GUI toolkit to build native user interfaces for Rust, C++, JavaScript, or Python apps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/slint-ui/slint/master/logo/slint-logo-full-light.svg#gh-light-mode-only" alt="Slint" /&gt; &lt;img src="https://raw.githubusercontent.com/slint-ui/slint/master/logo/slint-logo-full-dark.svg#gh-dark-mode-only" alt="Slint" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/slint-ui/slint/actions"&gt;&lt;img src="https://github.com/slint-ui/slint/workflows/CI/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://api.reuse.software/info/github.com/slint-ui/slint"&gt;&lt;img src="https://api.reuse.software/badge/github.com/slint-ui/slint" alt="REUSE status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/slint-ui/slint/discussions"&gt;&lt;img src="https://img.shields.io/github/discussions/slint-ui/slint" alt="Discussions" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Slint&lt;/strong&gt; is an open-source declarative GUI toolkit for building native user interfaces for embedded systems, desktops, and mobile platforms.&lt;/p&gt; 
&lt;p&gt;Write your UI once in &lt;code&gt;.slint&lt;/code&gt;, a simple markup language. Connect it to business logic written in Rust, C++, JavaScript, or Python.&lt;/p&gt; 
&lt;h2&gt;Why Slint?&lt;/h2&gt; 
&lt;p&gt;The name &lt;em&gt;Slint&lt;/em&gt; is derived from our design goals:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Slint should support responsive UI design, allow cross-platform usage across operating systems and processor architectures and support multiple programming languages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: Slint should require minimal resources, in terms of memory and processing power, and yet deliver a smooth, smartphone-like user experience on any device.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Intuitive&lt;/strong&gt;: Designers and developers should feel productive while enjoying the GUI design and development process. The design creation tools should be intuitive to use for the designers. Similarly for the developers, the APIs should be consistent and easy to use, no matter which programming language they choose.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Native&lt;/strong&gt;: GUI built with Slint should match the end users' expectations of a native application irrespective of the platform - desktop, mobile, web or embedded system. The UI design should be compiled to machine code and provide flexibility that only a native application can offer: Access full operating system APIs, utilize all CPU and GPU cores, connect to any peripheral.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Beyond the design goals, here‚Äôs what makes Slint stand out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Independent UI Design&lt;/strong&gt;: Use a declarative language similar to separate your UI from business logic. Designers can work in parallel with developers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tooling&lt;/strong&gt;: Iterate quickly with our Live Preview &amp;amp; editor integrations. Integrate from Figma with the &lt;a href="https://www.figma.com/community/plugin/1474418299182276871/figma-to-slint"&gt;Slint To Figma plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stable APIs&lt;/strong&gt;: Slint follows a stable 1.x API. We evolve carefully without breaking your code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See what others have built: &lt;a href="https://madewithslint.com"&gt;#MadeWithSlint&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;Embedded&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;RaspberryPi&lt;/th&gt; 
   &lt;th&gt;STM32&lt;/th&gt; 
   &lt;th&gt;RP2040&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=_BDbNHrjK7g"&gt;Video of Slint on Raspberry Pi&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=NNNOJJsOAis"&gt;Video of Slint on STM32&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.youtube.com/watch?v=dkBwNocItGs"&gt;Video of Slint on RP2040&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Desktop&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Windows&lt;/th&gt; 
   &lt;th&gt;macOS&lt;/th&gt; 
   &lt;th&gt;Linux&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://slint.dev/resources/gallery_win_screenshot.png" alt="Screenshot of the Gallery on Windows" title="Gallery" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://slint.dev/resources/gallery_mac_screenshot.png" alt="Screenshot of the Gallery on macOS" title="Gallery" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://slint.dev/resources/gallery_linux_screenshot.png" alt="Screenshot of the Gallery on Linux" title="Gallery" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Web using WebAssembly&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Printer Demo&lt;/th&gt; 
   &lt;th&gt;Slide Puzzle&lt;/th&gt; 
   &lt;th&gt;Energy Monitor&lt;/th&gt; 
   &lt;th&gt;Widget Gallery&lt;/th&gt; 
   &lt;th&gt;Weather demo&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/printerdemo/"&gt;&lt;img src="https://slint.dev/resources/printerdemo_screenshot.png" alt="Screenshot of the Printer Demo" title="Printer Demo" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/slide_puzzle/"&gt;&lt;img src="https://slint.dev/resources/puzzle_screenshot.png" alt="Screenshot of the Slide Puzzle" title="Slide Puzzle" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/energy-monitor/"&gt;&lt;img src="https://slint.dev/resources/energy-monitor-screenshot.png" alt="Screenshot of the Energy Monitor Demo" title="Energy Monitor Demo" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/gallery/"&gt;&lt;img src="https://slint.dev/resources/gallery_screenshot.png" alt="Screenshot of the Gallery Demo" title="Gallery Demo" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://slint.dev/demos/weather-demo/"&gt;&lt;img src="https://raw.githubusercontent.com/slint-ui/slint/master/demos/weather-demo/docs/img/desktop-preview.png" alt="Screenshot of the weather Demo" title="Weather Demo" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;More examples and demos in the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/examples#examples"&gt;examples folder&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;h3&gt;Hello World&lt;/h3&gt; 
&lt;p&gt;The UI is defined in a Domain Specific Language that is declarative, easy to use, intuitive, and provides a powerful way to describe graphical elements, their placement, their hierarchy, property bindings, and the flow of data through the different states.&lt;/p&gt; 
&lt;p&gt;Here's the obligatory "Hello World":&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-slint"&gt;export component HelloWorld inherits Window {
    width: 400px;
    height: 400px;

    Text {
       y: parent.width / 2;
       x: parent.x + 200px;
       text: "Hello, world";
       color: blue;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For more details, check out the &lt;a href="https://slint.dev/docs/slint"&gt;Slint Language Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/examples"&gt;examples&lt;/a&gt; folder contains examples and demos, showing how to use the Slint markup language and how to interact with a Slint user interface from supported programming languages.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;docs&lt;/code&gt; folder contains a lot more information, including &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/docs/building.md"&gt;build instructions&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/docs/development.md"&gt;internal developer docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Refer to the README of each language directory in the &lt;code&gt;api&lt;/code&gt; folder:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/api/cpp"&gt;C++&lt;/a&gt; (&lt;a href="https://slint.dev/latest/docs/cpp"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/slint-ui/slint-cpp-template"&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/api/rs/slint"&gt;Rust&lt;/a&gt; &lt;a href="https://crates.io/crates/slint"&gt;&lt;img src="https://img.shields.io/crates/v/slint" alt="Crates.io" /&gt;&lt;/a&gt; (&lt;a href="https://slint.dev/latest/docs/rust/slint/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://youtu.be/WBcv4V-whHk"&gt;Tutorial Video&lt;/a&gt; | &lt;a href="https://github.com/slint-ui/slint-rust-template"&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/api/node"&gt;JavaScript/NodeJS (Beta)&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/slint-ui"&gt;&lt;img src="https://img.shields.io/npm/v/slint-ui" alt="npm" /&gt;&lt;/a&gt; (&lt;a href="https://slint.dev/latest/docs/node"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/slint-ui/slint-nodejs-template"&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/api/python/slint"&gt;Python (Beta)&lt;/a&gt; &lt;a href="https://pypi.org/project/slint/"&gt;&lt;img src="https://img.shields.io/pypi/v/slint" alt="pypi" /&gt;&lt;/a&gt; (&lt;a href="http://snapshots.slint.dev/master/docs/python/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/slint-ui/slint-python-template"&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;An application is composed of the business logic written in Rust, C++, or JavaScript and the &lt;code&gt;.slint&lt;/code&gt; user interface design markup, which is compiled to native code.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://slint.dev/resources/architecture.drawio.svg?sanitize=true" alt="Architecture Overview" /&gt;&lt;/p&gt; 
&lt;h3&gt;Compiler&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;.slint&lt;/code&gt; files are compiled ahead of time. The expressions in the &lt;code&gt;.slint&lt;/code&gt; are pure functions that the compiler can optimize. For example, the compiler could choose to "inline" properties and remove those that are constant or unchanged.&lt;/p&gt; 
&lt;p&gt;The compiler uses the typical compiler phases of lexing, parsing, optimization, and finally code generation. It provides different back-ends for code generation in the target language. The C++ code generator produces a C++ header file, the Rust generator produces Rust code, and so on. An interpreter for dynamic languages is also included.&lt;/p&gt; 
&lt;h3&gt;Runtime&lt;/h3&gt; 
&lt;p&gt;The runtime library consists of an engine that supports properties declared in the &lt;code&gt;.slint&lt;/code&gt; language. Components with their elements, items, and properties are laid out in a single memory region, to reduce memory allocations.&lt;/p&gt; 
&lt;p&gt;Rendering backends and styles are configurable at compile time:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;femtovg&lt;/code&gt; renderer uses OpenGL ES 2.0 for rendering.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;skia&lt;/code&gt; renderer uses &lt;a href="https://skia.org"&gt;Skia&lt;/a&gt; for rendering.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;software&lt;/code&gt; renderer uses the CPU with no additional dependencies.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;NOTE: When Qt is installed on the system, the &lt;code&gt;qt&lt;/code&gt; style becomes available, using Qt's QStyle to achieve native looking widgets.&lt;/p&gt; 
&lt;h3&gt;Tooling&lt;/h3&gt; 
&lt;p&gt;We have a few tools to help with the development of .slint files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/tools/lsp"&gt;&lt;strong&gt;LSP Server&lt;/strong&gt;&lt;/a&gt; that adds features like auto-complete and live preview of the .slint files to many editors.&lt;/li&gt; 
 &lt;li&gt;It is bundled in a &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/editors/vscode"&gt;&lt;strong&gt;Visual Studio Code Extension&lt;/strong&gt;&lt;/a&gt; available from the market place.&lt;/li&gt; 
 &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/tools/viewer"&gt;&lt;strong&gt;slint-viewer&lt;/strong&gt;&lt;/a&gt; tool which displays the .slint files. The &lt;code&gt;--auto-reload&lt;/code&gt; argument makes it easy to preview your UI while you are working on it (when using the LSP preview is not possible).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://slintpad.com/"&gt;&lt;strong&gt;SlintPad&lt;/strong&gt;&lt;/a&gt;, an online editor to try out .slint syntax without installing anything (&lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/tools/slintpad"&gt;sources&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;A &lt;a href="https://www.figma.com/community/plugin/1474418299182276871/figma-to-slint"&gt;&lt;strong&gt;Figma to Slint&lt;/strong&gt;&lt;/a&gt; plugin.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please check our &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/editors/README.md"&gt;Editors README&lt;/a&gt; for tips on how to configure your favorite editor to work well with Slint.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;You can use Slint under &lt;em&gt;&lt;strong&gt;any&lt;/strong&gt;&lt;/em&gt; of the following licenses, at your choice:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Build proprietary desktop, mobile, or web applications for free with the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/LICENSES/LicenseRef-Slint-Royalty-free-2.0.md"&gt;Royalty-free License&lt;/a&gt;,&lt;/li&gt; 
 &lt;li&gt;Build open source embedded, desktop, mobile, or web applications for free with the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/LICENSES/GPL-3.0-only.txt"&gt;GNU GPLv3&lt;/a&gt;,&lt;/li&gt; 
 &lt;li&gt;Build proprietary embedded, desktop, mobile, or web applications with the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/LICENSES/LicenseRef-Slint-Software-3.0.md"&gt;Paid license&lt;/a&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See the &lt;a href="https://slint.dev/pricing.html"&gt;Slint licensing options on the website&lt;/a&gt; and the &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/FAQ.md#licensing"&gt;Licensing FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;We welcome your contributions: in the form of code, bug reports or feedback. For contribution guidelines see &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;p&gt;Please see our separate &lt;a href="https://raw.githubusercontent.com/slint-ui/slint/master/FAQ.md"&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;About us (SixtyFPS GmbH)&lt;/h2&gt; 
&lt;p&gt;We are passionate about software - API design, cross-platform software development and user interface components. Our aim is to make developing user interfaces fun for everyone: from Python, JavaScript, C++, or Rust developers all the way to UI/UX designers. We believe that software grows organically and keeping it open source is the best way to sustain that growth. Our team members are located remotely in Germany, Finland, and US.&lt;/p&gt; 
&lt;h3&gt;Stay up to date&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow &lt;a href="https://twitter.com/slint_ui"&gt;@slint_ui&lt;/a&gt; on X/Twitter.&lt;/li&gt; 
 &lt;li&gt;Follow &lt;a href="https://mastodon.social/@slint@fosstodon.org"&gt;@slint@fosstodon.org&lt;/a&gt; on Mastodon.&lt;/li&gt; 
 &lt;li&gt;Follow &lt;a href="https://www.linkedin.com/company/slint-ui/"&gt;@slint-ui&lt;/a&gt; on LinkedIn.&lt;/li&gt; 
 &lt;li&gt;Follow &lt;a href="https://bsky.app/profile/slint.dev"&gt;@slint.dev&lt;/a&gt; on Bluesky&lt;/li&gt; 
 &lt;li&gt;Subscribe to our &lt;a href="https://www.youtube.com/@Slint-UI"&gt;YouTube channel&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contact us&lt;/h3&gt; 
&lt;p&gt;Feel free to join &lt;a href="https://github.com/slint-ui/slint/discussions"&gt;Github discussions&lt;/a&gt; for general chat or questions. Use &lt;a href="https://github.com/slint-ui/slint/issues"&gt;Github issues&lt;/a&gt; to report public suggestions or bugs.&lt;/p&gt; 
&lt;p&gt;We chat in &lt;a href="https://chat.slint.dev"&gt;our Mattermost instance&lt;/a&gt; where you are welcome to listen in or ask your questions.&lt;/p&gt; 
&lt;p&gt;You can of course also contact us privately via email to &lt;a href="mailto://info@slint.dev"&gt;info@slint.dev&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openai/codex</title>
      <link>https://github.com/openai/codex</link>
      <description>&lt;p&gt;Lightweight coding agent that runs in your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;OpenAI Codex CLI&lt;/h1&gt; 
&lt;p align="center"&gt;&lt;code&gt;npm i -g @openai/codex&lt;/code&gt;&lt;br /&gt;or &lt;code&gt;brew install codex&lt;/code&gt;&lt;/p&gt; 
&lt;p align="center"&gt;&lt;strong&gt;Codex CLI&lt;/strong&gt; is a coding agent from OpenAI that runs locally on your computer.&lt;br /&gt;If you are looking for the &lt;em&gt;cloud-based agent&lt;/em&gt; from OpenAI, &lt;strong&gt;Codex Web&lt;/strong&gt;, see &lt;a href="https://chatgpt.com/codex"&gt;chatgpt.com/codex&lt;/a&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-splash.png" alt="Codex CLI splash" width="80%" /&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Installing and running Codex CLI&lt;/h3&gt; 
&lt;p&gt;Install globally with your preferred package manager. If you use npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;npm install -g @openai/codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if you use Homebrew:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;brew install codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then simply run &lt;code&gt;codex&lt;/code&gt; to get started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;You can also go to the &lt;a href="https://github.com/openai/codex/releases/latest"&gt;latest GitHub Release&lt;/a&gt; and download the appropriate binary for your platform.&lt;/summary&gt; 
 &lt;p&gt;Each GitHub Release contains many executables, but in practice, you likely want one of these:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;macOS 
   &lt;ul&gt; 
    &lt;li&gt;Apple Silicon/arm64: &lt;code&gt;codex-aarch64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;x86_64 (older Mac hardware): &lt;code&gt;codex-x86_64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Linux 
   &lt;ul&gt; 
    &lt;li&gt;x86_64: &lt;code&gt;codex-x86_64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;arm64: &lt;code&gt;codex-aarch64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Each archive contains a single entry with the platform baked into the name (e.g., &lt;code&gt;codex-x86_64-unknown-linux-musl&lt;/code&gt;), so you likely want to rename it to &lt;code&gt;codex&lt;/code&gt; after extracting it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Codex with your ChatGPT plan&lt;/h3&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-login.png" alt="Codex CLI login" width="80%" /&gt; &lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;codex&lt;/code&gt; and select &lt;strong&gt;Sign in with ChatGPT&lt;/strong&gt;. We recommend signing into your ChatGPT account to use Codex as part of your Plus, Pro, Team, Edu, or Enterprise plan. &lt;a href="https://help.openai.com/en/articles/11369540-codex-in-chatgpt"&gt;Learn more about what's included in your ChatGPT plan&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also use Codex with an API key, but this requires &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#usage-based-billing-alternative-use-an-openai-api-key"&gt;additional setup&lt;/a&gt;. If you previously used an API key for usage-based billing, see the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#migrating-from-usage-based-billing-api-key"&gt;migration steps&lt;/a&gt;. If you're having trouble with login, please comment on &lt;a href="https://github.com/openai/codex/issues/1243"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Model Context Protocol (MCP)&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;MCP servers&lt;/a&gt;. Enable by adding an &lt;code&gt;mcp_servers&lt;/code&gt; section to your &lt;code&gt;~/.codex/config.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports a rich set of configuration options, with preferences stored in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. For full configuration options, see &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Docs &amp;amp; FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md"&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#cli-usage"&gt;CLI usage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#running-with-a-prompt-as-input"&gt;Running with a prompt as input&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#example-prompts"&gt;Example prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#memory-with-agentsmd"&gt;Memory with AGENTS.md&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/sandbox.md"&gt;&lt;strong&gt;Sandbox &amp;amp; approvals&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md"&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#forcing-a-specific-auth-method-advanced"&gt;Auth methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#connecting-on-a-headless-machine"&gt;Login on a "Headless" machine&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md"&gt;&lt;strong&gt;Advanced&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#non-interactive--ci-mode"&gt;Non-interactive / CI mode&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#tracing--verbose-logging"&gt;Tracing / verbose logging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/zdr.md"&gt;&lt;strong&gt;Zero data retention (ZDR)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/contributing.md"&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md"&gt;&lt;strong&gt;Install &amp;amp; build&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#system-requirements"&gt;System Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#dotslash"&gt;DotSlash&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#build-from-source"&gt;Build from source&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/faq.md"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/open-source-fund.md"&gt;&lt;strong&gt;Open source fund&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/LICENSE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ankitects/anki</title>
      <link>https://github.com/ankitects/anki</link>
      <description>&lt;p&gt;Anki is a smart spaced repetition flashcard program&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anki¬Æ&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://buildkite.com/ankitects/anki-ci"&gt;&lt;img src="https://badge.buildkite.com/c9edf020a4aec976f9835e54751cc5409d843adbb66d043bd3.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo contains the source code for the computer version of &lt;a href="https://apps.ankiweb.net"&gt;Anki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;About&lt;/h1&gt; 
&lt;p&gt;Anki is a spaced repetition program. Please see the &lt;a href="https://apps.ankiweb.net"&gt;website&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;h3&gt;Anki Betas&lt;/h3&gt; 
&lt;p&gt;If you'd like to try development builds of Anki but don't feel comfortable building the code, please see &lt;a href="https://betas.ankiweb.net/"&gt;Anki betas&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Developing&lt;/h3&gt; 
&lt;p&gt;For more information on building and developing, please see &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/development.md"&gt;Development&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Want to contribute to Anki? Check out the &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/contributing.md"&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Anki Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/CONTRIBUTORS"&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Anki's license: &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>idootop/open-xiaoai</title>
      <link>https://github.com/idootop/open-xiaoai</link>
      <description>&lt;p&gt;ËÆ©Â∞èÁà±Èü≥ÁÆ±„ÄåÂê¨ËßÅ‰Ω†ÁöÑÂ£∞Èü≥„ÄçÔºåËß£ÈîÅÊó†ÈôêÂèØËÉΩ„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open-XiaoAI&lt;/h1&gt; 
&lt;p&gt;ËÆ©Â∞èÁà±Èü≥ÁÆ±„ÄåÂê¨ËßÅ‰Ω†ÁöÑÂ£∞Èü≥„ÄçÔºåËß£ÈîÅÊó†ÈôêÂèØËÉΩ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/cover.jpg" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;ÁÆÄ‰ªã&lt;/h2&gt; 
&lt;p&gt;2017 Âπ¥ÔºåÂΩìÂÖ®ÁêÉÈ¶ñÊ¨æÂçÉ‰∏áÁ∫ßÈîÄÈáèÁöÑÊô∫ËÉΩÈü≥ÁÆ±ËØûÁîüÊó∂ÔºåÊàë‰ª¨‰ª•‰∏∫Ëß¶Êë∏Âà∞‰∫ÜÊú™Êù•„ÄÇ‰ΩÜÂæàÂø´ÂèëÁé∞ÔºåËøô‰∫õËÆæÂ§áË¢´Âõ∞Âú®„ÄåÊåá‰ª§-ÂìçÂ∫î„ÄçÁöÑÁâ¢Á¨ºÈáåÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÂÆÉÂê¨ÂæóËßÅÂàÜË¥ùÔºåÂç¥Âê¨‰∏çÊáÇÊÉÖÊÑü&lt;/li&gt; 
 &lt;li&gt;ÂÆÉËÉΩÊâßË°åÂëΩ‰ª§ÔºåÂç¥‰∏ç‰ºö‰∏ªÂä®ÊÄùËÄÉ&lt;/li&gt; 
 &lt;li&gt;ÂÆÉÊúâÂçÉ‰∏áÁî®Êà∑ÔºåÂç¥Âè™Êúâ‰∏ÄÂ•óÊÄùÁª¥&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Êàë‰ª¨ÊõæÂπªÊÉ≥‰∏≠ÁöÑ"Ë¥æÁª¥ÊñØ"Á∫ß‰∫∫Â∑•Êô∫ËÉΩÔºåÂú®Áé∞ÂÆûÂú∫ÊôØ‰∏≠Ê≤¶‰∏∫"Â§©Ê∞îÈ¢ÑÊä•+Èü≥‰πêÊí≠ÊîæÂô®"„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ÁúüÊ≠£ÁöÑÊô∫ËÉΩ‰∏çÂ∫îË¢´È¢ÑËÆæÁöÑ‰ª£Á†ÅÈÄªËæëÊâÄÊùüÁºöÔºåËÄåÂ∫îÂÉèÁîüÂëΩ‰ΩìËà¨Âú®‰∫§‰∫í‰∏≠ËøõÂåñ„ÄÇ&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Âú®‰∏ä‰∏Ä‰∏™ &lt;a href="https://github.com/idootop/mi-gpt"&gt;MiGPT&lt;/a&gt; È°πÁõÆ‰∏≠ÔºåÊàë‰ª¨Â∑≤ÁªèÂÆûÁé∞Â∞Ü ChatGPT Êé•ÂÖ•Âà∞Â∞èÁà±Èü≥ÁÆ±„ÄÇ&lt;/p&gt; 
&lt;p&gt;Ëøô‰∏ÄÊ¨° &lt;a href="https://github.com/idootop/open-xiaoai"&gt;Open-XiaoAI&lt;/a&gt; ÂÜçÊ¨°ËøõÂåñÔºåÁõ¥Êé•Êé•ÁÆ°Â∞èÁà±Èü≥ÁÆ±ÁöÑ‚ÄúËÄ≥Êúµ‚ÄùÂíå‚ÄúÂò¥Â∑¥‚ÄùÔºå&lt;/p&gt; 
&lt;p&gt;ÈÄöËøáÂ§öÊ®°ÊÄÅÂ§ßÊ®°ÂûãÂíå AI AgentÔºåÂ∞ÜÂ∞èÁà±Èü≥ÁÆ±ÁöÑÊΩúÂäõÂÆåÂÖ®ÈáäÊîæÔºåËß£ÈîÅÊó†ÈôêÂèØËÉΩ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Êú™Êù•Áî±‰Ω†ÂÆö‰πâ!&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;‰Ω†ÁöÑÂ£∞Èü≥ + Â∞èÁà±Èü≥ÁÆ± = Êó†ÈôêÂèØËÉΩ&lt;/h2&gt; 
&lt;p&gt;üëâ &lt;a href="https://www.bilibili.com/video/BV1TxJhzvEhz"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ•Â∞èÊô∫ AI ÊºîÁ§∫ËßÜÈ¢ë&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/BV1TxJhzvEhz"&gt;&lt;img src="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/xiaozhi.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üëâ &lt;a href="https://www.bilibili.com/video/BV1YfVUz5EMj"&gt;Â∞èÁà±Èü≥ÁÆ±Ëá™ÂÆö‰πâÂî§ÈÜíËØçÊºîÁ§∫ËßÜÈ¢ë&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/BV1YfVUz5EMj"&gt;&lt;img src="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/kws.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;üëâ &lt;a href="https://www.bilibili.com/video/BV1N1421y7qn"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ• MiGPT ÊºîÁ§∫ËßÜÈ¢ë&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/BV1N1421y7qn"&gt;&lt;img src="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/images/migpt.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Âø´ÈÄüÂºÄÂßã&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Êú¨ÊïôÁ®ã‰ªÖÈÄÇÁî®‰∫é &lt;strong&gt;Â∞èÁà±Èü≥ÁÆ± ProÔºàLX06Ôºâ&lt;/strong&gt; Âíå &lt;strong&gt;Xiaomi Êô∫ËÉΩÈü≥ÁÆ± ProÔºàOH2PÔºâ&lt;/strong&gt; Ëøô‰∏§Ê¨æÊú∫ÂûãÔºå&lt;strong&gt;ÂÖ∂‰ªñÂûãÂè∑&lt;/strong&gt;ÁöÑÂ∞èÁà±Èü≥ÁÆ±ËØ∑ÂãøÁõ¥Êé•‰ΩøÁî®ÔºÅüö®&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Êú¨È°πÁõÆÁî± Client Á´Ø + Server Á´Ø‰∏§ÈÉ®ÂàÜÁªÑÊàêÔºå‰Ω†ÂèØ‰ª•ÊåâÁÖß‰ª•‰∏ãÈ°∫Â∫èËøêË°åËØ•È°πÁõÆÔºö&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Âà∑Êú∫Êõ¥Êñ∞Â∞èÁà±Èü≥ÁÆ±Ë°•‰∏ÅÂõ∫‰ª∂ÔºåÂºÄÂêØÂπ∂ SSH ËøûÊé•Âà∞Â∞èÁà±Èü≥ÁÆ± üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/docs/flash.md"&gt;ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Âú®Â∞èÁà±Èü≥ÁÆ±‰∏äÂÆâË£ÖËøêË°å Client Á´ØË°•‰∏ÅÁ®ãÂ∫è üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/packages/client-rust/README.md"&gt;ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ËøêË°å‰ª•‰∏ãÊºîÁ§∫Á®ãÂ∫èÔºå‰ΩìÈ™åÂ∞èÁà±Èü≥ÁÆ±ÁöÑÂÖ®Êñ∞ËÉΩÂäõ ‚ú® 
  &lt;ul&gt; 
   &lt;li&gt;üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/xiaozhi/README.md"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ•Â∞èÊô∫ AI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/kws/README.md"&gt;Â∞èÁà±Èü≥ÁÆ±Ëá™ÂÆö‰πâÂî§ÈÜíËØç&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/migpt/README.md"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ• MiGPTÔºàÂÆåÁæéÁâàÔºâ&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;üëâ &lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/examples/gemini/README.md"&gt;Â∞èÁà±Èü≥ÁÆ±Êé•ÂÖ• Gemini Live API&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;‰ª•‰∏äÁöÜ‰∏∫ÊäõÁ†ñÂºïÁéâÔºå‰Ω†‰πüÂèØ‰ª•‰∫≤ÊâãÁºñÂÜôËá™Â∑±ÊÉ≥Ë¶ÅÁöÑÂäüËÉΩÔºå‰∏ÄÂàáÁî±‰Ω†ÂÆö‰πâÔºÅ&lt;/p&gt; 
&lt;h2&gt;Áõ∏ÂÖ≥È°πÁõÆ&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] ÊäÄÊúØÁöÑÊÑè‰πâÂú®‰∫éÂàÜ‰∫´‰∏éÂÖ±Âàõ„ÄÇÂ¶ÇÊûú‰Ω†ÊâìÁÆóÊàñÊ≠£Âú®‰ΩøÁî®Êú¨È°πÁõÆÂÅö‰∫õÊúâË∂£ÁöÑ‰∫ãÊÉÖÔºå Ê¨¢ËøéÊèê‰∫§ PR Êàñ issue ÂàÜ‰∫´‰Ω†ÁöÑÈ°πÁõÆÂíåÂàõÊÑè„ÄÇ‚ú®&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Â¶ÇÊûú‰Ω†‰∏çÊÉ≥Âà∑Êú∫ÔºåÊàñËÄÖ‰∏çÊòØÂ∞èÁà±Èü≥ÁÆ± ProÔºå‰∏ãÈù¢ÁöÑÈ°πÁõÆÊàñËÆ∏ÂØπ‰Ω†ÊúâÁî®Ôºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/idootop/mi-gpt"&gt;https://github.com/idootop/mi-gpt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/idootop/migpt-next"&gt;https://github.com/idootop/migpt-next&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yihong0618/xiaogpt"&gt;https://github.com/yihong0618/xiaogpt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hanxi/xiaomusic"&gt;https://github.com/hanxi/xiaomusic&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ÂèÇËÄÉÈìæÊé•&lt;/h2&gt; 
&lt;p&gt;Â¶ÇÊûú‰Ω†ÊÉ≥Ë¶Å‰∫ÜËß£Êõ¥Â§öÊäÄÊúØÁªÜËäÇÔºå‰∏ãÈù¢ÁöÑÈìæÊé•ÂèØËÉΩÂØπ‰Ω†ÊúâÁî®Ôºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yihong0618/gitblog/issues/258"&gt;https://github.com/yihong0618/gitblog/issues/258&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jialeicui/open-lx01"&gt;https://github.com/jialeicui/open-lx01&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/duhow/xiaoai-patch"&gt;https://github.com/duhow/xiaoai-patch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://javabin.cn/2021/xiaoai_fm.html"&gt;https://javabin.cn/2021/xiaoai_fm.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://xuanxuanblingbling.github.io/iot/2022/09/16/mi/"&gt;https://xuanxuanblingbling.github.io/iot/2022/09/16/mi/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ÂÖçË¥£Â£∞Êòé&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;ÈÄÇÁî®ËåÉÂõ¥&lt;/strong&gt; Êú¨È°πÁõÆ‰∏∫ÂºÄÊ∫êÈùûËê•Âà©È°πÁõÆÔºå‰ªÖ‰æõÂ≠¶ÊúØÁ†îÁ©∂Êàñ‰∏™‰∫∫ÊµãËØïÁî®ÈÄî„ÄÇ‰∏•Á¶ÅÁî®‰∫éÂïÜ‰∏öÊúçÂä°„ÄÅÁΩëÁªúÊîªÂáª„ÄÅÊï∞ÊçÆÁ™ÉÂèñ„ÄÅÁ≥ªÁªüÁ†¥ÂùèÁ≠âËøùÂèç„ÄäÁΩëÁªúÂÆâÂÖ®Ê≥ï„ÄãÂèä‰ΩøÁî®ËÄÖÊâÄÂú®Âú∞Âè∏Ê≥ïÁÆ°ËæñÂå∫ÁöÑÊ≥ïÂæãËßÑÂÆöÁöÑÂú∫ÊôØ„ÄÇ&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ÈùûÂÆòÊñπÂ£∞Êòé&lt;/strong&gt; Êú¨È°πÁõÆÁî±Á¨¨‰∏âÊñπÂºÄÂèëËÄÖÁã¨Á´ãÂºÄÂèëÔºå‰∏éÂ∞èÁ±≥ÈõÜÂõ¢ÂèäÂÖ∂ÂÖ≥ËÅîÊñπÔºà‰∏ãÁß∞"ÊùÉÂà©Êñπ"ÔºâÊó†‰ªª‰ΩïÈö∂Â±û/Âêà‰ΩúÂÖ≥Á≥ªÔºå‰∫¶Êú™Ëé∑ÂÖ∂ÂÆòÊñπÊéàÊùÉ/ËÆ§ÂèØÊàñÊäÄÊúØÊîØÊåÅ„ÄÇÈ°πÁõÆ‰∏≠Ê∂âÂèäÁöÑÂïÜÊ†á„ÄÅÂõ∫‰ª∂„ÄÅ‰∫ëÊúçÂä°ÁöÑÊâÄÊúâÊùÉÂà©ÂΩíÂ±ûÂ∞èÁ±≥ÈõÜÂõ¢„ÄÇËã•ÊùÉÂà©Êñπ‰∏ªÂº†ÊùÉÁõäÔºå‰ΩøÁî®ËÄÖÂ∫îÁ´ãÂç≥‰∏ªÂä®ÂÅúÊ≠¢‰ΩøÁî®Âπ∂Âà†Èô§Êú¨È°πÁõÆ„ÄÇ&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;ÁªßÁª≠‰∏ãËΩΩÊàñËøêË°åÊú¨È°πÁõÆÔºåÂç≥Ë°®Á§∫ÊÇ®Â∑≤ÂÆåÊï¥ÈòÖËØªÂπ∂ÂêåÊÑè&lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/agreement.md"&gt;Áî®Êà∑ÂçèËÆÆ&lt;/a&gt;ÔºåÂê¶ÂàôËØ∑Á´ãÂç≥ÁªàÊ≠¢‰ΩøÁî®Âπ∂ÂΩªÂ∫ïÂà†Èô§Êú¨È°πÁõÆ„ÄÇ&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/idootop/open-xiaoai/main/LICENSE"&gt;MIT&lt;/a&gt; License ¬© 2024-PRESENT Del Wang&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Orange-OpenSource/hurl</title>
      <link>https://github.com/Orange-OpenSource/hurl</link>
      <description>&lt;p&gt;Hurl, run and test HTTP requests with plain text.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="/docs/assets/img/logo-light.svg?sanitize=true" /&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="/docs/assets/img/logo-dark.svg?sanitize=true" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/logo-light.svg?sanitize=true" width="264px" alt="Hurl Logo" /&gt; 
&lt;/picture&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl/actions"&gt;&lt;img src="https://github.com/Orange-OpenSource/hurl/workflows/test/badge.svg?sanitize=true" alt="deploy status" /&gt;&lt;/a&gt; &lt;a href="https://Orange-OpenSource.github.io/hurl/coverage"&gt;&lt;img src="https://Orange-OpenSource.github.io/hurl/coverage/badges/flat.svg?sanitize=true" alt="coverage" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/hurl"&gt;&lt;img src="https://img.shields.io/crates/v/hurl.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://hurl.dev"&gt;&lt;img src="https://img.shields.io/badge/-documentation-ff0288" alt="documentation" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;What's Hurl?&lt;/h1&gt; 
&lt;p&gt;Hurl is a command line tool that runs &lt;b&gt;HTTP requests&lt;/b&gt; defined in a simple &lt;b&gt;plain text format&lt;/b&gt;.&lt;/p&gt; 
&lt;p&gt;It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile: it can be used for both &lt;b&gt;fetching data&lt;/b&gt; and &lt;b&gt;testing HTTP&lt;/b&gt; sessions.&lt;/p&gt; 
&lt;p&gt;Hurl makes it easy to work with &lt;b&gt;HTML&lt;/b&gt; content, &lt;b&gt;REST / SOAP / GraphQL&lt;/b&gt; APIs, or any other &lt;b&gt;XML / JSON&lt;/b&gt; based APIs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Go home and capture token
GET https://example.org
HTTP 200
[Captures]
csrf_token: xpath "string(//meta[@name='_csrf_token']/@content)"


# Do login!
POST https://example.org/login
X-CSRF-TOKEN: {{csrf_token}}
[Form]
user: toto
password: 1234
HTTP 302
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Chaining multiple requests is easy:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/health
GET https://example.org/api/step1
GET https://example.org/api/step2
GET https://example.org/api/step3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Also an HTTP Test Tool&lt;/h1&gt; 
&lt;p&gt;Hurl can run HTTP requests but can also be used to &lt;b&gt;test HTTP responses&lt;/b&gt;. Different types of queries and predicates are supported, from &lt;a href="https://en.wikipedia.org/wiki/XPath"&gt;XPath&lt;/a&gt; and &lt;a href="https://goessner.net/articles/JsonPath/"&gt;JSONPath&lt;/a&gt; on body response, to assert on status code and response headers.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/player.html?id=starwars&amp;amp;speed=3"&gt;&lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/poster-starwars.png" width="100%" alt="Hurl Demo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It is well adapted for &lt;b&gt;REST / JSON APIs&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
{
    "id": "4568",
    "evaluate": true
}
HTTP 200
[Asserts]
header "X-Frame-Options" == "SAMEORIGIN"
jsonpath "$.status" == "RUNNING"    # Check the status code
jsonpath "$.tests" count == 25      # Check the number of items
jsonpath "$.id" matches /\d{4}/     # Check the format of the id
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;b&gt;HTML content&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Asserts]
xpath "normalize-space(//head/title)" == "Hello world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;b&gt;GraphQL&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/graphql
```graphql
{
  human(id: "1000") {
    name
    height(unit: FOOT)
  }
}
```
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and even &lt;b&gt;SOAP APIs&lt;/b&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/InStock
Content-Type: application/soap+xml; charset=utf-8
SOAPAction: "http://www.w3.org/2003/05/soap-envelope"
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:m="https://example.org"&amp;gt;
  &amp;lt;soap:Header&amp;gt;&amp;lt;/soap:Header&amp;gt;
  &amp;lt;soap:Body&amp;gt;
    &amp;lt;m:GetStockPrice&amp;gt;
      &amp;lt;m:StockName&amp;gt;GOOG&amp;lt;/m:StockName&amp;gt;
    &amp;lt;/m:GetStockPrice&amp;gt;
  &amp;lt;/soap:Body&amp;gt;
&amp;lt;/soap:Envelope&amp;gt;
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can also be used to test the &lt;b&gt;performance&lt;/b&gt; of HTTP endpoints&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/v1/pets
HTTP 200
[Asserts]
duration &amp;lt; 1000  # Duration in ms
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And check response bytes&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.tar.gz
HTTP 200
[Asserts]
sha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, Hurl is easy to &lt;b&gt;integrate in CI/CD&lt;/b&gt;, with text, JUnit, TAP and HTML reports&lt;/p&gt; 
&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="/docs/assets/img/home-waterfall-light.png" /&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="/docs/assets/img/home-waterfall-dark.png" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/home-waterfall-light.png" width="480" alt="HTML report" /&gt; 
&lt;/picture&gt; 
&lt;h1&gt;Why Hurl?&lt;/h1&gt; 
&lt;ul class="showcase-container"&gt; 
 &lt;li&gt;&lt;b&gt;Text Format:&lt;/b&gt; for both devops and developers&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Fast CLI:&lt;/b&gt; a command line for local dev and continuous integration&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Single Binary:&lt;/b&gt; easy to install, with no runtime required&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Powered by curl&lt;/h1&gt; 
&lt;p&gt;Hurl is a lightweight binary written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;. Under the hood, Hurl HTTP engine is powered by &lt;a href="https://curl.se/libcurl/"&gt;libcurl&lt;/a&gt;, one of the most powerful and reliable file transfer libraries. With its text file format, Hurl adds syntactic sugar to run and test HTTP requests, but it's still the &lt;a href="https://curl.se"&gt;curl&lt;/a&gt; that we love: &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;efficient&lt;/strong&gt; and &lt;strong&gt;IPv6 / HTTP/3 ready&lt;/strong&gt;.&lt;/p&gt; 
&lt;h1&gt;Feedbacks&lt;/h1&gt; 
&lt;p&gt;To support its development, &lt;a href="https://github.com/Orange-OpenSource/hurl/stargazers"&gt;star Hurl on GitHub&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl/issues"&gt;Feedback, suggestion, bugs or improvements&lt;/a&gt; are welcome.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://hurl.dev/api/feedback
{
  "name": "John Doe",
  "feedback": "Hurl is awesome!"
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/license.html"&gt;License&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/blog/"&gt;Blog&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/tutorial/your-first-hurl-file.html"&gt;Tutorial&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/installation.html"&gt;Documentation&lt;/a&gt; (download &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/standalone/hurl-7.0.0.html"&gt;HTML&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/standalone/hurl-7.0.0.pdf"&gt;PDF&lt;/a&gt;, &lt;a href="https://hurl.dev/docs/standalone/hurl-7.0.0.html"&gt;Markdown&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/Orange-OpenSource/hurl"&gt;GitHub&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#samples"&gt;Samples&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#getting-data"&gt;Getting Data&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http-headers"&gt;HTTP Headers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#query-params"&gt;Query Params&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#basic-authentication"&gt;Basic Authentication&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#passing-data-between-requests"&gt;Passing Data between Requests &lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-data"&gt;Sending Data&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-html-form-data"&gt;Sending HTML Form Data&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-multipart-form-data"&gt;Sending Multipart Form Data&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#posting-a-json-body"&gt;Posting a JSON Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#templating-a-json-body"&gt;Templating a JSON Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#templating-a-xml-body"&gt;Templating a XML Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-graphql-query"&gt;Using GraphQL Query&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-dynamic-datas"&gt;Using Dynamic Datas&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-response"&gt;Testing Response&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-status-code"&gt;Testing Status Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-response-headers"&gt;Testing Response Headers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-rest-apis"&gt;Testing REST APIs&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-html-response"&gt;Testing HTML Response&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-set-cookie-attributes"&gt;Testing Set-Cookie Attributes&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-bytes-content"&gt;Testing Bytes Content&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ssl-certificate"&gt;SSL Certificate&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#checking-full-body"&gt;Checking Full Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-redirections"&gt;Testing Redirections&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debug-tips"&gt;Debug Tips&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose-mode"&gt;Verbose Mode&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#error-format"&gt;Error Format&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output-response-body"&gt;Output Response Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#export-curl-commands"&gt;Export curl Commands&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-proxy"&gt;Using Proxy&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#reports"&gt;Reports&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#html-report"&gt;HTML Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json-report"&gt;JSON Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#junit-report"&gt;JUnit Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#tap-report"&gt;TAP Report&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json-output"&gt;JSON Output&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#others"&gt;Others&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http-version"&gt;HTTP Version&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ip-address"&gt;IP Address&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#polling-and-retry"&gt;Polling and Retry&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#delaying-requests"&gt;Delaying Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#skipping-requests"&gt;Skipping Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-endpoint-performance"&gt;Testing Endpoint Performance&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-soap-apis"&gt;Using SOAP APIs&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#capturing-and-using-a-csrf-token"&gt;Capturing and Using a CSRF Token&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#redacting-secrets"&gt;Redacting Secrets&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#checking-byte-order-mark-bom-in-response-body"&gt;Checking Byte Order Mark (BOM) in Response Body&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#aws-signature-version-4-requests"&gt;AWS Signature Version 4 Requests&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-curl-options"&gt;Using curl Options&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#manual"&gt;Manual&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#name"&gt;Name&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#synopsis"&gt;Synopsis&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#description"&gt;Description&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#hurl-file-format"&gt;Hurl File Format&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#capturing-values"&gt;Capturing values&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#asserts"&gt;Asserts&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#options"&gt;Options&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#environment"&gt;Environment&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#exit-codes"&gt;Exit Codes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#www"&gt;WWW&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#see-also"&gt;See Also&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#installation"&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#binaries-installation"&gt;Binaries Installation&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#linux"&gt;Linux&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debian--ubuntu"&gt;Debian / Ubuntu&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#alpine"&gt;Alpine&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#arch-linux--manjaro"&gt;Arch Linux / Manjaro&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#nixos--nix"&gt;NixOS / Nix&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#macos"&gt;macOS&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#homebrew"&gt;Homebrew&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#macports"&gt;MacPorts&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#freebsd"&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#windows"&gt;Windows&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#zip-file"&gt;Zip File&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#installer"&gt;Installer&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#chocolatey"&gt;Chocolatey&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#scoop"&gt;Scoop&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#windows-package-manager"&gt;Windows Package Manager&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cargo"&gt;Cargo&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#conda-forge"&gt;conda-forge&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#npm"&gt;npm&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#building-from-sources"&gt;Building From Sources&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-linux"&gt;Build on Linux&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debian-based-distributions"&gt;Debian based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#fedora-based-distributions"&gt;Fedora based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#red-hat-based-distributions"&gt;Red Hat based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#arch-based-distributions"&gt;Arch based distributions&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#alpine-based-distributions"&gt;Alpine based distributions&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-macos"&gt;Build on macOS&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-windows"&gt;Build on Windows&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Samples&lt;/h1&gt; 
&lt;p&gt;To run a sample, edit a file with the sample content, and run Hurl:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ vi sample.hurl

GET https://example.org

$ hurl sample.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, Hurl behaves like &lt;a href="https://curl.se"&gt;curl&lt;/a&gt; and outputs the last HTTP response's &lt;a href="https://hurl.dev/docs/entry.html"&gt;entry&lt;/a&gt;. To have a test oriented output, you can use &lt;a href="https://hurl.dev/docs/manual.html#test"&gt;&lt;code&gt;--test&lt;/code&gt; option&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test sample.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A particular response can be saved with &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options] section&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.ord/cats/123
[Options]
output: cat123.txt    # use - to output to stdout
HTTP 200

GET https://example.ord/dogs/567
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, Hurl can take files as input, or directories. In the latter case, Hurl will search files with &lt;code&gt;.hurl&lt;/code&gt; extension recursively.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test integration/*.hurl
$ hurl --test .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can check &lt;a href="https://github.com/Orange-OpenSource/hurl/tree/master/integration/hurl/tests_ok"&gt;Hurl tests suite&lt;/a&gt; for more samples.&lt;/p&gt; 
&lt;h2&gt;Getting Data&lt;/h2&gt; 
&lt;p&gt;A simple GET:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Requests can be chained:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/a
GET https://example.org/b
HEAD https://example.org/c
GET https://example.org/c
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#method"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;HTTP Headers&lt;/h3&gt; 
&lt;p&gt;A simple GET with headers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news
User-Agent: Mozilla/5.0 
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#headers"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Query Params&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news
[Query]
order: newest
search: something to search
count: 100
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/news?order=newest&amp;amp;search=something%20to%20search&amp;amp;count=100
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;With &lt;code&gt;[Query]&lt;/code&gt; section, params don't need to be URL escaped.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#query-parameters"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Basic Authentication&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/protected
[BasicAuth]
bob: secret
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#basic-authentication"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This is equivalent to construct the request with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Authorization&lt;/a&gt; header:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Authorization header value can be computed with `echo -n 'bob:secret' | base64`
GET https://example.org/protected
Authorization: Basic Ym9iOnNlY3JldA== 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Basic authentication section allows per request authentication. If you want to add basic authentication to all the requests of a Hurl file you could use &lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;-u/--user&lt;/code&gt; option&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --user bob:secret login.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;--user&lt;/code&gt;&lt;/a&gt; option can also be set per request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/login
[Options]
user: bob:secret
HTTP 200

GET https://example.org/login
[Options]
user: alice:secret
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Passing Data between Requests&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;Captures&lt;/a&gt; can be used to pass data from one request to another:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sample.org/orders
HTTP 201
[Captures]
order_id: jsonpath "$.order.id"

GET https://sample.org/orders/{{order_id}}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sending Data&lt;/h2&gt; 
&lt;h3&gt;Sending HTML Form Data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/contact
[Form]
default: false
token: {{token}}
email: john.doe@rookie.org
number: 33611223344
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#form-parameters"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Sending Multipart Form Data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/upload
[Multipart]
field1: value1
field2: file,example.txt;
# One can specify the file content type:
field3: file,example.zip; application/zip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multipart-form-data"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Multipart forms can also be sent with a &lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;multiline string body&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/upload
Content-Type: multipart/form-data; boundary="boundary"
```
--boundary
Content-Disposition: form-data; name="key1"

value1
--boundary
Content-Disposition: form-data; name="upload1"; filename="data.txt"
Content-Type: text/plain

Hello World!
--boundary
Content-Disposition: form-data; name="upload2"; filename="data.html"
Content-Type: text/html

&amp;lt;div&amp;gt;Hello &amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt;!&amp;lt;/div&amp;gt;
--boundary--
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In that case, files have to be inlined in the Hurl file.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Posting a JSON Body&lt;/h3&gt; 
&lt;p&gt;With an inline JSON:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
{
    "id": "456",
    "evaluate": true
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#json-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With a local file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/tests
Content-Type: application/json
file,data.json;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#file-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Templating a JSON Body&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;PUT https://example.org/api/hits
Content-Type: application/json
{
    "key0": "{{a_string}}",
    "key1": {{a_bool}},
    "key2": {{a_null}},
    "key3": {{a_number}}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variables can be initialized via command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --variable a_string=apple \
       --variable a_bool=true \
       --variable a_null=null \
       --variable a_number=42 \
       test.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Resulting in a PUT request with the following JSON body:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
    "key0": "apple",
    "key1": true,
    "key2": null,
    "key3": 42
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Templating a XML Body&lt;/h3&gt; 
&lt;p&gt;Using templates with &lt;a href="https://hurl.dev/docs/request.html#xml-body"&gt;XML body&lt;/a&gt; is not currently supported in Hurl. You can use templates in &lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;XML multiline string body&lt;/a&gt; with variables to send a variable XML body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/echo/post/xml
```xml
&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;Request&amp;gt;
    &amp;lt;Login&amp;gt;{{login}}&amp;lt;/Login&amp;gt;
    &amp;lt;Password&amp;gt;{{password}}&amp;lt;/Password&amp;gt;
&amp;lt;/Request&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using GraphQL Query&lt;/h3&gt; 
&lt;p&gt;A simple GraphQL query:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/starwars/graphql
```graphql
{
  human(id: "1000") {
    name
    height(unit: FOOT)
  }
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A GraphQL query with variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/starwars/graphql
```graphql
query Hero($episode: Episode, $withFriends: Boolean!) {
  hero(episode: $episode) {
    name
    friends @include(if: $withFriends) {
      name
    }
  }
}

variables {
  "episode": "JEDI",
  "withFriends": false
}
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GraphQL queries can also use &lt;a href="https://hurl.dev/docs/templates.html"&gt;Hurl templates&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#graphql-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using Dynamic Datas&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#functions"&gt;Functions&lt;/a&gt; like &lt;code&gt;newUuid&lt;/code&gt; and &lt;code&gt;newDate&lt;/code&gt; can be used in templates to create dynamic datas:&lt;/p&gt; 
&lt;p&gt;A file that creates a dynamic email (i.e &lt;code&gt;0531f78f-7f87-44be-a7f2-969a1c4e6d97@test.com&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/api/foo
{
  "name": "foo",
  "email": "{{newUuid}}@test.com"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A file that creates a dynamic query parameter (i.e &lt;code&gt;2024-12-02T10:35:44.461731Z&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/foo
[Query]
date: {{newDate}}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#functions"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Testing Response&lt;/h2&gt; 
&lt;p&gt;Responses are optional, everything after &lt;code&gt;HTTP&lt;/code&gt; is part of the response asserts.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# A request with (almost) no check:
GET https://foo.com

# A status code check:
GET https://foo.com
HTTP 200

# A test on response body
GET https://foo.com
HTTP 200
[Asserts]
jsonpath "$.state" == "running"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing Status Code&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order/435
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-status"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order/435
# Testing status code is in a 200-300 range
HTTP *
[Asserts]
status &amp;gt;= 200
status &amp;lt; 300
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#status-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Response Headers&lt;/h3&gt; 
&lt;p&gt;Use implicit response asserts to test header values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
Set-Cookie: theme=light
Set-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#headers"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or use explicit response asserts with &lt;a href="https://hurl.dev/docs/asserting-response.html#predicates"&gt;predicates&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 302
[Asserts]
header "Location" contains "www.example.net"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#header-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Implicit and explicit asserts can be combined:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
Set-Cookie: theme=light
Set-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT
[Asserts]
header "Location" contains "www.example.net"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing REST APIs&lt;/h3&gt; 
&lt;p&gt;Asserting JSON body response (node values, collection count etc...) with &lt;a href="https://goessner.net/articles/JsonPath/"&gt;JSONPath&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/order
screencapability: low
HTTP 200
[Asserts]
jsonpath "$.validated" == true
jsonpath "$.userInfo.firstName" == "Franck"
jsonpath "$.userInfo.lastName" == "Herbert"
jsonpath "$.hasDevice" == false
jsonpath "$.links" count == 12
jsonpath "$.state" != null
jsonpath "$.order" matches "^order-\\d{8}$"
jsonpath "$.order" matches /^order-\d{8}$/  # Alternative syntax with regex literal
jsonpath "$.id" matches /(?i)[a-z]*/        # See syntax for flags &amp;lt;https://docs.rs/regex/latest/regex/#grouping-and-flags&amp;gt;
jsonpath "$.created" isIsoDate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#jsonpath-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing HTML Response&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
Content-Type: text/html; charset=UTF-8
[Asserts]
xpath "string(/html/head/title)" contains "Example" # Check title
xpath "count(//p)" == 2  # Check the number of p
xpath "//p" count == 2  # Similar assert for p
xpath "boolean(count(//h2))" == false  # Check there is no h2  
xpath "//h2" not exists  # Similar assert for h2
xpath "string(//div[1])" matches /Hello.*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#xpath-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Set-Cookie Attributes&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/home
HTTP 200
[Asserts]
cookie "JSESSIONID" == "8400BAFE2F66443613DC38AE3D9D6239"
cookie "JSESSIONID[Value]" == "8400BAFE2F66443613DC38AE3D9D6239"
cookie "JSESSIONID[Expires]" contains "Wed, 13 Jan 2021"
cookie "JSESSIONID[Secure]" exists
cookie "JSESSIONID[HttpOnly]" exists
cookie "JSESSIONID[SameSite]" == "Lax"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#cookie-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Bytes Content&lt;/h3&gt; 
&lt;p&gt;Check the SHA-256 response body hash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.tar.gz
HTTP 200
[Asserts]
sha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#sha-256-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;SSL Certificate&lt;/h3&gt; 
&lt;p&gt;Check the properties of a SSL certificate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Asserts]
certificate "Subject" == "CN=example.org"
certificate "Issuer" == "C=US, O=Let's Encrypt, CN=R3"
certificate "Expire-Date" daysAfterNow &amp;gt; 15
certificate "Serial-Number" matches /[\da-f]+/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#ssl-certificate-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Checking Full Body&lt;/h3&gt; 
&lt;p&gt;Use implicit body to test an exact JSON body match:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/cats/123
HTTP 200
{
  "name" : "Purrsloud",
  "species" : "Cat",
  "favFoods" : ["wet food", "dry food", "&amp;lt;strong&amp;gt;any&amp;lt;/strong&amp;gt; food"],
  "birthYear" : 2016,
  "photo" : "https://learnwebcode.github.io/json-example/images/cat-2.jpg"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#json-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or an explicit assert file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/index.html
HTTP 200
[Asserts]
body == file,cat.json;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#body-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Implicit asserts supports XML body:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/api/catalog
HTTP 200
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;catalog&amp;gt;
   &amp;lt;book id="bk101"&amp;gt;
      &amp;lt;author&amp;gt;Gambardella, Matthew&amp;lt;/author&amp;gt;
      &amp;lt;title&amp;gt;XML Developer's Guide&amp;lt;/title&amp;gt;
      &amp;lt;genre&amp;gt;Computer&amp;lt;/genre&amp;gt;
      &amp;lt;price&amp;gt;44.95&amp;lt;/price&amp;gt;
      &amp;lt;publish_date&amp;gt;2000-10-01&amp;lt;/publish_date&amp;gt;
      &amp;lt;description&amp;gt;An in-depth look at creating applications with XML.&amp;lt;/description&amp;gt;
   &amp;lt;/book&amp;gt;
&amp;lt;/catalog&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#xml-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Plain text:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/models
HTTP 200
```
Year,Make,Model,Description,Price
1997,Ford,E350,"ac, abs, moon",3000.00
1999,Chevy,"Venture ""Extended Edition""","",4900.00
1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00
1996,Jeep,Grand Cherokee,"MUST SELL! air, moon roof, loaded",4799.00
```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#multiline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;One line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/helloworld
HTTP 200
`Hello world!`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#oneline-string-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;File:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
file,data.bin;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#file-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Redirections&lt;/h3&gt; 
&lt;p&gt;By default, Hurl doesn't follow redirection so each step of a redirect must be run manually and can be analysed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
HTTP 301
[Asserts]
header "Location" == "https://example.org/step2"


GET https://example.org/step2
HTTP 301
[Asserts]
header "Location" == "https://example.org/step3"


GET https://example.org/step3
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;a href="https://hurl.dev/docs/manual.html#location"&gt;&lt;code&gt;--location&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://hurl.dev/docs/manual.html#location-trusted"&gt;&lt;code&gt;--location-trusted&lt;/code&gt;&lt;/a&gt; (either with command line option or per request), Hurl follows redirection and each step of the redirection can be checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
[Options]
location: true
HTTP 200
[Asserts]
redirects count == 2
redirects nth 0 location == "https://example.org/step2"
redirects nth 1 location == "https://example.org/step3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/step1
[Options]
location-trusted: true
HTTP 200
[Asserts]
redirects last location == "https://example.org/step2"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#redirects-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Debug Tips&lt;/h2&gt; 
&lt;h3&gt;Verbose Mode&lt;/h3&gt; 
&lt;p&gt;To get more info on a given request/response, use &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt; section&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200

GET https://example.org/api/cats/123
[Options]
very-verbose: true
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;--verbose&lt;/code&gt; and &lt;code&gt;--very-verbose&lt;/code&gt; can be also used globally as command line options.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#very-verbose"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Error Format&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --error-format long *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#error-format"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Output Response Body&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;--output&lt;/code&gt; on a specific request to get the response body (&lt;code&gt;-&lt;/code&gt; can be used as standard output):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com/failure
[Options]
# use - to output on standard output, foo.bin to save on disk 
output: -
HTTP 200

GET https://foo.com/success
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#output"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Export curl Commands&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl ---curl /tmp/curl.txt *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#curl"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using Proxy&lt;/h3&gt; 
&lt;p&gt;Use &lt;code&gt;--proxy&lt;/code&gt; on a specific request or globally as command line option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com/a
HTTP 200

GET https://foo.com/b
[Options]
proxy: localhost:8888
HTTP 200

GET https://foo.com/c
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Reports&lt;/h2&gt; 
&lt;h3&gt;HTML Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-html build/report/ *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JSON Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-json build/report/ *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JUnit Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-junit build/report.xml *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;TAP Report&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test --report-tap build/report.txt *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/running-tests.html#generating-report"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;JSON Output&lt;/h3&gt; 
&lt;p&gt;A structured output of running Hurl files can be obtained with &lt;a href="https://hurl.dev/docs/manual.html#json"&gt;&lt;code&gt;--json&lt;/code&gt; option&lt;/a&gt;. Each file will produce a JSON export of the run.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --json *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Others&lt;/h2&gt; 
&lt;h3&gt;HTTP Version&lt;/h3&gt; 
&lt;p&gt;Testing HTTP version (HTTP/1.0, HTTP/1.1, HTTP/2 or HTTP/3) can be done using implicit asserts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP/3 200

GET https://bar.com
HTTP/2 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-status"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or explicit:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP 200
[Asserts]
version == "3"

GET https://bar.com
HTTP 200
[Asserts]
version == "2"
version toFloat &amp;gt; 1.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#version-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;IP Address&lt;/h3&gt; 
&lt;p&gt;Testing the IP address of the response, as a string. This string may be IPv6 address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://foo.com
HTTP 200
[Asserts]
ip == "2001:0db8:85a3:0000:0000:8a2e:0370:733"
ip startsWith "2001"
ip isIpv6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Polling and Retry&lt;/h3&gt; 
&lt;p&gt;Retry request on any errors (asserts, captures, status code, runtime etc...):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Create a new job
POST https://api.example.org/jobs
HTTP 201
[Captures]
job_id: jsonpath "$.id"
[Asserts]
jsonpath "$.state" == "RUNNING"


# Pull job status until it is completed
GET https://api.example.org/jobs/{{job_id}}
[Options]
retry: 10   # maximum number of retry, -1 for unlimited
retry-interval: 500ms
HTTP 200
[Asserts]
jsonpath "$.state" == "COMPLETED"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/entry.html#retry"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Delaying Requests&lt;/h3&gt; 
&lt;p&gt;Add delay for every request, or a particular request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Delaying this request by 5 seconds (aka sleep)
GET https://example.org/turtle
[Options]
delay: 5s
HTTP 200

# No delay!
GET https://example.org/turtle
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#delay"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Skipping Requests&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# a, c, d are run, b is skipped
GET https://example.org/a

GET https://example.org/b
[Options]
skip: true

GET https://example.org/c

GET https://example.org/d
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#skip"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Testing Endpoint Performance&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://sample.org/helloworld
HTTP *
[Asserts]
duration &amp;lt; 1000   # Check that response time is less than one second
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#duration-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using SOAP APIs&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org/InStock
Content-Type: application/soap+xml; charset=utf-8
SOAPAction: "http://www.w3.org/2003/05/soap-envelope"
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:m="https://example.org"&amp;gt;
  &amp;lt;soap:Header&amp;gt;&amp;lt;/soap:Header&amp;gt;
  &amp;lt;soap:Body&amp;gt;
    &amp;lt;m:GetStockPrice&amp;gt;
      &amp;lt;m:StockName&amp;gt;GOOG&amp;lt;/m:StockName&amp;gt;
    &amp;lt;/m:GetStockPrice&amp;gt;
  &amp;lt;/soap:Body&amp;gt;
&amp;lt;/soap:Envelope&amp;gt;
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#xml-body"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Capturing and Using a CSRF Token&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
[Captures]
csrf_token: xpath "string(//meta[@name='_csrf_token']/@content)"


POST https://example.org/login?user=toto&amp;amp;password=1234
X-CSRF-TOKEN: {{csrf_token}}
HTTP 302
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html#xpath-capture"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Redacting Secrets&lt;/h3&gt; 
&lt;p&gt;Using command-line for known values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --secret token=1234 file.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://example.org
X-Token: {{token}}
{
  "name": "Alice",
  "value": 100
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/templates.html#secrets"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Using &lt;code&gt;redact&lt;/code&gt; for dynamic values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;# Get an authorization token:
GET https://example.org/token
HTTP 200
[Captures]
token: header "X-Token" redact

# Send an authorized request:
POST https://example.org
X-Token: {{token}}
{
  "name": "Alice",
  "value": 100
}
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/capturing-response.html#redacting-secrets"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Checking Byte Order Mark (BOM) in Response Body&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org/data.bin
HTTP 200
[Asserts]
bytes startsWith hex,efbbbf;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/asserting-response.html#bytes-assert"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;AWS Signature Version 4 Requests&lt;/h3&gt; 
&lt;p&gt;Generate signed API requests with &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html"&gt;AWS Signature Version 4&lt;/a&gt;, as used by several cloud providers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sts.eu-central-1.amazonaws.com/
[Options]
aws-sigv4: aws:amz:eu-central-1:sts
[Form]
Action: GetCallerIdentity
Version: 2011-06-15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Access Key is given per &lt;a href="https://hurl.dev/docs/manual.html#user"&gt;&lt;code&gt;--user&lt;/code&gt;&lt;/a&gt;, either with command line option or within the &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt;&lt;/a&gt; section:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;POST https://sts.eu-central-1.amazonaws.com/
[Options]
aws-sigv4: aws:amz:eu-central-1:sts
user: bob=secret
[Form]
Action: GetCallerIdentity
Version: 2011-06-15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/manual.html#aws-sigv4"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using curl Options&lt;/h3&gt; 
&lt;p&gt;curl options (for instance &lt;a href="https://hurl.dev/docs/manual.html#resolve"&gt;&lt;code&gt;--resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://hurl.dev/docs/manual.html#connect-to"&gt;&lt;code&gt;--connect-to&lt;/code&gt;&lt;/a&gt;) can be used as CLI argument. In this case, they're applicable to each request of an Hurl file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --resolve foo.com:8000:127.0.0.1 foo.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;a href="https://hurl.dev/docs/request.html#options"&gt;&lt;code&gt;[Options]&lt;/code&gt; section&lt;/a&gt; to configure a specific request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://bar.com
HTTP 200


GET http://foo.com:8000/resolve
[Options]
resolve: foo.com:8000:127.0.0.1
HTTP 200
`Hello World!`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev/docs/request.html#options"&gt;Doc&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Manual&lt;/h1&gt; 
&lt;h2&gt;Name&lt;/h2&gt; 
&lt;p&gt;hurl - run and test HTTP requests.&lt;/p&gt; 
&lt;h2&gt;Synopsis&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;hurl&lt;/strong&gt; [options] [FILE...]&lt;/p&gt; 
&lt;h2&gt;Description&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Hurl&lt;/strong&gt; is a command line tool that runs HTTP requests defined in a simple plain text format.&lt;/p&gt; 
&lt;p&gt;It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile, it can be used for fetching data and testing HTTP sessions: HTML content, REST / SOAP / GraphQL APIs, or any other XML / JSON based APIs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl session.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If no input files are specified, input is read from stdin.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ echo GET http://httpbin.org/get | hurl
    {
      "args": {},
      "headers": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip",
        "Content-Length": "0",
        "Host": "httpbin.org",
        "User-Agent": "hurl/0.99.10",
        "X-Amzn-Trace-Id": "Root=1-5eedf4c7-520814d64e2f9249ea44e0"
      },
      "origin": "1.2.3.4",
      "url": "http://httpbin.org/get"
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can take files as input, or directories. In the latter case, Hurl will search files with &lt;code&gt;.hurl&lt;/code&gt; extension recursively.&lt;/p&gt; 
&lt;p&gt;Output goes to stdout by default. To have output go to a file, use the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output"&gt;&lt;code&gt;-o, --output&lt;/code&gt;&lt;/a&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl -o output input.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, Hurl executes all HTTP requests and outputs the response body of the last HTTP call.&lt;/p&gt; 
&lt;p&gt;To have a test oriented output, you can use &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --test *.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Hurl File Format&lt;/h2&gt; 
&lt;p&gt;The Hurl file format is fully documented in &lt;a href="https://hurl.dev/docs/hurl-file.html"&gt;https://hurl.dev/docs/hurl-file.html&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It consists of one or several HTTP requests&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org/endpoint1
GET http://example.org/endpoint2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Capturing values&lt;/h3&gt; 
&lt;p&gt;A value from an HTTP response can be-reused for successive HTTP requests.&lt;/p&gt; 
&lt;p&gt;A typical example occurs with CSRF tokens.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 200
# Capture the CSRF token value from html body.
[Captures]
csrf_token: xpath "normalize-space(//meta[@name='_csrf_token']/@content)"

# Do the login !
POST https://example.org/login?user=toto&amp;amp;password=1234
X-CSRF-TOKEN: {{csrf_token}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;More information on captures can be found here &lt;a href="https://hurl.dev/docs/capturing-response.html"&gt;https://hurl.dev/docs/capturing-response.html&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Asserts&lt;/h3&gt; 
&lt;p&gt;The HTTP response defined in the Hurl file are used to make asserts. Responses are optional.&lt;/p&gt; 
&lt;p&gt;At the minimum, response includes assert on the HTTP status code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It can also include asserts on the response headers&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
Location: http://www.example.org
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Explicit asserts can be included by combining a query and a predicate&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET http://example.org
HTTP 301
[Asserts]
xpath "string(//title)" == "301 Moved"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the addition of asserts, Hurl can be used as a testing tool to run scenarios.&lt;/p&gt; 
&lt;p&gt;More information on asserts can be found here &lt;a href="https://hurl.dev/docs/asserting-response.html"&gt;https://hurl.dev/docs/asserting-response.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;p&gt;Options that exist in curl have exactly the same semantics.&lt;/p&gt; 
&lt;p&gt;Options specified on the command line are defined for every Hurl file's entry, except if they are tagged as cli-only (can not be defined in the Hurl request [Options] entry)&lt;/p&gt; 
&lt;p&gt;For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ hurl --location foo.hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will follow redirection for each entry in &lt;code&gt;foo.hurl&lt;/code&gt;. You can also define an option only for a particular entry with an &lt;code&gt;[Options]&lt;/code&gt; section. For instance, this Hurl file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-hurl"&gt;GET https://example.org
HTTP 301

GET https://example.org
[Options]
location: true
HTTP 200
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will follow a redirection only for the second entry.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Option&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#aws-sigv4" id="aws-sigv4"&gt;&lt;code&gt;--aws-sigv4 &amp;lt;PROVIDER1[:PROVIDER2[:REGION[:SERVICE]]]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate an &lt;code&gt;Authorization&lt;/code&gt; header with an AWS SigV4 signature.&lt;br /&gt;&lt;br /&gt;Use &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user"&gt;&lt;code&gt;-u, --user&lt;/code&gt;&lt;/a&gt; to specify Access Key Id (username) and Secret Key (password).&lt;br /&gt;&lt;br /&gt;To use temporary session credentials (e.g. for an AWS IAM Role), add the &lt;code&gt;X-Amz-Security-Token&lt;/code&gt; header containing the session token.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cacert" id="cacert"&gt;&lt;code&gt;--cacert &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specifies the certificate file for peer verification. The file may contain multiple CA certificates and must be in PEM format.&lt;br /&gt;Normally Hurl is built to use a default file for this, so this option is typically used to alter that default file.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cert" id="cert"&gt;&lt;code&gt;-E, --cert &amp;lt;CERTIFICATE[:PASSWORD]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Client certificate file and password.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#key"&gt;&lt;code&gt;--key&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#color" id="color"&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Colorize debug output (the HTTP response output is not colorized).&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#compressed" id="compressed"&gt;&lt;code&gt;--compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Request a compressed response using one of the algorithms br, gzip, deflate and automatically decompress the content.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-timeout" id="connect-timeout"&gt;&lt;code&gt;--connect-timeout &amp;lt;SECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum time in seconds that you allow Hurl's connection to take.&lt;br /&gt;&lt;br /&gt;You can specify time units in the connect timeout expression. Set Hurl to use a connect timeout of 20 seconds with &lt;code&gt;--connect-timeout 20s&lt;/code&gt; or set it to 35,000 milliseconds with &lt;code&gt;--connect-timeout 35000ms&lt;/code&gt;. No spaces allowed.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-time"&gt;&lt;code&gt;-m, --max-time&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-to" id="connect-to"&gt;&lt;code&gt;--connect-to &amp;lt;HOST1:PORT1:HOST2:PORT2&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead. This option can be used several times in a command line.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#resolve"&gt;&lt;code&gt;--resolve&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#continue-on-error" id="continue-on-error"&gt;&lt;code&gt;--continue-on-error&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Continue executing requests to the end of the Hurl file even when an assert error occurs.&lt;br /&gt;By default, Hurl exits after an assert error in the HTTP response.&lt;br /&gt;&lt;br /&gt;Note that this option does not affect the behavior with multiple input Hurl files.&lt;br /&gt;&lt;br /&gt;All the input files are executed independently. The result of one file does not affect the execution of the other Hurl files.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie" id="cookie"&gt;&lt;code&gt;-b, --cookie &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Read cookies from FILE (using the Netscape cookie file format).&lt;br /&gt;&lt;br /&gt;Combined with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie-jar"&gt;&lt;code&gt;-c, --cookie-jar&lt;/code&gt;&lt;/a&gt;, you can simulate a cookie storage between successive Hurl runs.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie-jar" id="cookie-jar"&gt;&lt;code&gt;-c, --cookie-jar &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write cookies to FILE after running the session.&lt;br /&gt;The file will be written using the Netscape cookie file format.&lt;br /&gt;&lt;br /&gt;Combined with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie"&gt;&lt;code&gt;-b, --cookie&lt;/code&gt;&lt;/a&gt;, you can simulate a cookie storage between successive Hurl runs.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#curl" id="curl"&gt;&lt;code&gt;--curl &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Export each request to a list of curl commands.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#delay" id="delay"&gt;&lt;code&gt;--delay &amp;lt;MILLISECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Sets delay before each request (aka sleep). The delay is not applied to requests that have been retried because of &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry"&gt;&lt;code&gt;--retry&lt;/code&gt;&lt;/a&gt;. See &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry-interval"&gt;&lt;code&gt;--retry-interval&lt;/code&gt;&lt;/a&gt; to space retried requests.&lt;br /&gt;&lt;br /&gt;You can specify time units in the delay expression. Set Hurl to use a delay of 2 seconds with &lt;code&gt;--delay 2s&lt;/code&gt; or set it to 500 milliseconds with &lt;code&gt;--delay 500ms&lt;/code&gt;. No spaces allowed.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#error-format" id="error-format"&gt;&lt;code&gt;--error-format &amp;lt;FORMAT&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Control the format of error message (short by default or long)&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#file-root" id="file-root"&gt;&lt;code&gt;--file-root &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set root directory to import files in Hurl. This is used for files in multipart form data, request body and response output.&lt;br /&gt;When it is not explicitly defined, files are relative to the Hurl file's directory.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#from-entry" id="from-entry"&gt;&lt;code&gt;--from-entry &amp;lt;ENTRY_NUMBER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Execute Hurl file from ENTRY_NUMBER (starting at 1).&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#glob" id="glob"&gt;&lt;code&gt;--glob &amp;lt;GLOB&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify input files that match the given glob pattern.&lt;br /&gt;&lt;br /&gt;Multiple glob flags may be used. This flag supports common Unix glob patterns like *, ? and [].&lt;br /&gt;However, to avoid your shell accidentally expanding glob patterns before Hurl handles them, you must use single quotes or double quotes around each pattern.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#header" id="header"&gt;&lt;code&gt;-H, --header &amp;lt;HEADER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add an extra header to include in information sent. Can be used several times in a command&lt;br /&gt;&lt;br /&gt;Do not add newlines or carriage returns&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http10" id="http10"&gt;&lt;code&gt;-0, --http1.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 1.0 instead of using its internally preferred HTTP version.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http11" id="http11"&gt;&lt;code&gt;--http1.1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 1.1.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http2" id="http2"&gt;&lt;code&gt;--http2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to use HTTP version 2.&lt;br /&gt;For HTTPS, this means Hurl negotiates HTTP/2 in the TLS handshake. Hurl does this by default.&lt;br /&gt;For HTTP, this means Hurl attempts to upgrade the request to HTTP/2 using the Upgrade: request header.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http3" id="http3"&gt;&lt;code&gt;--http3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tells Hurl to try HTTP/3 to the host in the URL, but fallback to earlier HTTP versions if the HTTP/3 connection establishment fails. HTTP/3 is only available for HTTPS and not for HTTP URLs.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ignore-asserts" id="ignore-asserts"&gt;&lt;code&gt;--ignore-asserts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Ignore all asserts defined in the Hurl file.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#include" id="include"&gt;&lt;code&gt;-i, --include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Include the HTTP headers in the output&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#insecure" id="insecure"&gt;&lt;code&gt;-k, --insecure&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option explicitly allows Hurl to perform "insecure" SSL connections and transfers.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ipv4" id="ipv4"&gt;&lt;code&gt;-4, --ipv4&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option tells Hurl to use IPv4 addresses only when resolving host names, and not for example try IPv6.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ipv6" id="ipv6"&gt;&lt;code&gt;-6, --ipv6&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;This option tells Hurl to use IPv6 addresses only when resolving host names, and not for example try IPv4.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs" id="jobs"&gt;&lt;code&gt;--jobs &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum number of parallel jobs in parallel mode. Default value corresponds (in most cases) to the&lt;br /&gt;current amount of CPUs.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#parallel"&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json" id="json"&gt;&lt;code&gt;--json&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Output each Hurl file result to JSON. The format is very closed to HAR format.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#key" id="key"&gt;&lt;code&gt;--key &amp;lt;KEY&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Private key file name.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#limit-rate" id="limit-rate"&gt;&lt;code&gt;--limit-rate &amp;lt;SPEED&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the maximum transfer rate you want Hurl to use, for both downloads and uploads. This feature is useful if you have a limited pipe and you would like your transfer not to use your entire bandwidth. To make it slower than it otherwise would be.&lt;br /&gt;The given speed is measured in bytes/second.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location" id="location"&gt;&lt;code&gt;-L, --location&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Follow redirect. To limit the amount of redirects to follow use the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-redirs"&gt;&lt;code&gt;--max-redirs&lt;/code&gt;&lt;/a&gt; option&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location-trusted" id="location-trusted"&gt;&lt;code&gt;--location-trusted&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location"&gt;&lt;code&gt;-L, --location&lt;/code&gt;&lt;/a&gt;, but allows sending the name + password to all hosts that the site may redirect to.&lt;br /&gt;This may or may not introduce a security breach if the site redirects you to a site to which you send your authentication info (which is plaintext in the case of HTTP Basic authentication).&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-filesize" id="max-filesize"&gt;&lt;code&gt;--max-filesize &amp;lt;BYTES&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the maximum size in bytes of a file to download. If the file requested is larger than this value, the transfer does not start.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-redirs" id="max-redirs"&gt;&lt;code&gt;--max-redirs &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set maximum number of redirection-followings allowed&lt;br /&gt;&lt;br /&gt;By default, the limit is set to 50 redirections. Set this option to -1 to make it unlimited.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-time" id="max-time"&gt;&lt;code&gt;-m, --max-time &amp;lt;SECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum time in seconds that you allow a request/response to take. This is the standard timeout.&lt;br /&gt;&lt;br /&gt;You can specify time units in the maximum time expression. Set Hurl to use a maximum time of 20 seconds with &lt;code&gt;--max-time 20s&lt;/code&gt; or set it to 35,000 milliseconds with &lt;code&gt;--max-time 35000ms&lt;/code&gt;. No spaces allowed.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-timeout"&gt;&lt;code&gt;--connect-timeout&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#negotiate" id="negotiate"&gt;&lt;code&gt;--negotiate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to use Negotiate (SPNEGO) authentication.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc" id="netrc"&gt;&lt;code&gt;-n, --netrc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Scan the .netrc file in the user's home directory for the username and password.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file"&gt;&lt;code&gt;--netrc-file&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file" id="netrc-file"&gt;&lt;code&gt;--netrc-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Like &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc"&gt;&lt;code&gt;--netrc&lt;/code&gt;&lt;/a&gt;, but provide the path to the netrc file.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-optional" id="netrc-optional"&gt;&lt;code&gt;--netrc-optional&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Similar to &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc"&gt;&lt;code&gt;--netrc&lt;/code&gt;&lt;/a&gt;, but make the .netrc usage optional.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#netrc-file"&gt;&lt;code&gt;--netrc-file&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color" id="no-color"&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Do not colorize output.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-output" id="no-output"&gt;&lt;code&gt;--no-output&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Suppress output. By default, Hurl outputs the body of the last response.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-pretty" id="no-pretty"&gt;&lt;code&gt;--no-pretty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Do not prettify response output for supported content type (JSON only for the moment). By default, output is prettified if&lt;br /&gt;standard output is a terminal.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#noproxy" id="noproxy"&gt;&lt;code&gt;--noproxy &amp;lt;HOST(S)&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Comma-separated list of hosts which do not use a proxy.&lt;br /&gt;&lt;br /&gt;Override value from Environment variable no_proxy.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ntlm" id="ntlm"&gt;&lt;code&gt;--ntlm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to use NTLM authentication&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output" id="output"&gt;&lt;code&gt;-o, --output &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write output to FILE instead of stdout. Use '-' for stdout in [Options] sections.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#parallel" id="parallel"&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run files in parallel.&lt;br /&gt;&lt;br /&gt;Each Hurl file is executed in its own worker thread, without sharing anything with the other workers. The default run mode is sequential. Parallel execution is by default in &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt; mode.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs"&gt;&lt;code&gt;--jobs&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#path-as-is" id="path-as-is"&gt;&lt;code&gt;--path-as-is&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Tell Hurl to not handle sequences of /../ or /./ in the given URL path. Normally Hurl will squash or merge them according to standards but with this option set you tell it not to do that.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#pinnedpubkey" id="pinnedpubkey"&gt;&lt;code&gt;--pinnedpubkey &amp;lt;HASHES&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does not exactly match the public key provided to this option, Hurl aborts the connection before sending or receiving any data.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#pretty" id="pretty"&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Prettify response output for supported content type (JSON only for the moment). By default, JSON response is prettified if standard output is a terminal, and colorized, see&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color"&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; to format without color.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#progress-bar" id="progress-bar"&gt;&lt;code&gt;--progress-bar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Display a progress bar in test mode. The progress bar is displayed only in interactive TTYs. This option forces the progress bar to be displayed even in non-interactive TTYs.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#proxy" id="proxy"&gt;&lt;code&gt;-x, --proxy &amp;lt;[PROTOCOL://]HOST[:PORT]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use the specified proxy.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#repeat" id="repeat"&gt;&lt;code&gt;--repeat &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Repeat the input files sequence NUM times, -1 for infinite loop. Given a.hurl, b.hurl, c.hurl as input, repeat two&lt;br /&gt;times will run a.hurl, b.hurl, c.hurl, a.hurl, b.hurl, c.hurl.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-html" id="report-html"&gt;&lt;code&gt;--report-html &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate HTML report in DIR.&lt;br /&gt;&lt;br /&gt;If the HTML report already exists, it will be updated with the new test results.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-json" id="report-json"&gt;&lt;code&gt;--report-json &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate JSON report in DIR.&lt;br /&gt;&lt;br /&gt;If the JSON report already exists, it will be updated with the new test results.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-junit" id="report-junit"&gt;&lt;code&gt;--report-junit &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate JUnit File.&lt;br /&gt;&lt;br /&gt;If the FILE report already exists, it will be updated with the new test results.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-tap" id="report-tap"&gt;&lt;code&gt;--report-tap &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Generate TAP report.&lt;br /&gt;&lt;br /&gt;If the FILE report already exists, it will be updated with the new test results.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#resolve" id="resolve"&gt;&lt;code&gt;--resolve &amp;lt;HOST:PORT:ADDR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Provide a custom address for a specific host and port pair. Using this, you can make the Hurl requests(s) use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry" id="retry"&gt;&lt;code&gt;--retry &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Maximum number of retries, 0 for no retries, -1 for unlimited retries. Retry happens if any error occurs (asserts, captures, runtimes etc...).&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry-interval" id="retry-interval"&gt;&lt;code&gt;--retry-interval &amp;lt;MILLISECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Duration in milliseconds between each retry. Default is 1000 ms.&lt;br /&gt;&lt;br /&gt;You can specify time units in the retry interval expression. Set Hurl to use a retry interval of 2 seconds with &lt;code&gt;--retry-interval 2s&lt;/code&gt; or set it to 500 milliseconds with &lt;code&gt;--retry-interval 500ms&lt;/code&gt;. No spaces allowed.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secret" id="secret"&gt;&lt;code&gt;--secret &amp;lt;NAME=VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define secret value to be redacted from logs and report. When defined, secrets can be used as variable everywhere variables are used.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secrets-file" id="secrets-file"&gt;&lt;code&gt;--secrets-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define a secrets file in which you define your secrets&lt;br /&gt;&lt;br /&gt;Each secret is defined as name=value exactly as with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#secret"&gt;&lt;code&gt;--secret&lt;/code&gt;&lt;/a&gt; option.&lt;br /&gt;&lt;br /&gt;Note that defining a secret twice produces an error.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ssl-no-revoke" id="ssl-no-revoke"&gt;&lt;code&gt;--ssl-no-revoke&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;(Windows) This option tells Hurl to disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test" id="test"&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Activate test mode: with this, the HTTP response is not outputted anymore, progress is reported for each Hurl file tested, and a text summary is displayed when all files have been run.&lt;br /&gt;&lt;br /&gt;In test mode, files are executed in parallel. To run test in a sequential way use &lt;code&gt;--job 1&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;See also &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#jobs"&gt;&lt;code&gt;--jobs&lt;/code&gt;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#to-entry" id="to-entry"&gt;&lt;code&gt;--to-entry &amp;lt;ENTRY_NUMBER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Execute Hurl file to ENTRY_NUMBER (starting at 1).&lt;br /&gt;Ignore the remaining of the file. It is useful for debugging a session.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#unix-socket" id="unix-socket"&gt;&lt;code&gt;--unix-socket &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;(HTTP) Connect through this Unix domain socket, instead of using the network.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user" id="user"&gt;&lt;code&gt;-u, --user &amp;lt;USER:PASSWORD&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add basic Authentication header to each request.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user-agent" id="user-agent"&gt;&lt;code&gt;-A, --user-agent &amp;lt;NAME&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Specify the User-Agent string to send to the HTTP server.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable" id="variable"&gt;&lt;code&gt;--variable &amp;lt;NAME=VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Define variable (name/value) to be used in Hurl templates.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variables-file" id="variables-file"&gt;&lt;code&gt;--variables-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Set properties file in which your define your variables.&lt;br /&gt;&lt;br /&gt;Each variable is defined as name=value exactly as with &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable"&gt;&lt;code&gt;--variable&lt;/code&gt;&lt;/a&gt; option.&lt;br /&gt;&lt;br /&gt;Note that defining a variable twice produces an error.&lt;br /&gt;&lt;br /&gt;This is a cli-only option.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose" id="verbose"&gt;&lt;code&gt;-v, --verbose&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Turn on verbose output on standard error stream.&lt;br /&gt;Useful for debugging.&lt;br /&gt;&lt;br /&gt;A line starting with '&amp;gt;' means data sent by Hurl.&lt;br /&gt;A line staring with '&amp;lt;' means data received by Hurl.&lt;br /&gt;A line starting with '*' means additional info provided by Hurl.&lt;br /&gt;&lt;br /&gt;If you only want HTTP headers in the output, &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#include"&gt;&lt;code&gt;-i, --include&lt;/code&gt;&lt;/a&gt; might be the option you're looking for.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#very-verbose" id="very-verbose"&gt;&lt;code&gt;--very-verbose&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Turn on more verbose output on standard error stream.&lt;br /&gt;&lt;br /&gt;In contrast to &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose"&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt; option, this option outputs the full HTTP body request and response on standard error. In addition, lines starting with '**' are libcurl debug logs.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#help" id="help"&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Usage help. This lists all current command line options with a short description.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#version" id="version"&gt;&lt;code&gt;-V, --version&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Prints version information&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Environment&lt;/h2&gt; 
&lt;p&gt;Environment variables can only be specified in lowercase.&lt;/p&gt; 
&lt;p&gt;Using an environment variable to set the proxy has the same effect as using the &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#proxy"&gt;&lt;code&gt;-x, --proxy&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;http_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use for HTTP.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;https_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use for HTTPS.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;all_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Sets the proxy server to use if no protocol-specific proxy is set.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;no_proxy &amp;lt;comma-separated list of hosts&amp;gt;&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;List of host names that shouldn't go through any proxy.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HURL_name value&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Define variable (name/value) to be used in Hurl templates. This is similar than &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable"&gt;&lt;code&gt;--variable&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variables-file"&gt;&lt;code&gt;--variables-file&lt;/code&gt;&lt;/a&gt; options.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When set to a non-empty string, do not colorize output (see &lt;a href="https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color"&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; option).&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Exit Codes&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Success.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Failed to parse command-line options.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Input File Parsing Error.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Runtime error (such as failure to connect to host).&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Assert Error.&lt;br /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;WWW&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://hurl.dev"&gt;https://hurl.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;See Also&lt;/h2&gt; 
&lt;p&gt;curl(1) hurlfmt(1)&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Binaries Installation&lt;/h2&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;Precompiled binary (depending on libc &amp;gt;=2.35) is available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ INSTALL_DIR=/tmp
$ VERSION=7.0.0
$ curl --silent --location https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl-$VERSION-x86_64-unknown-linux-gnu.tar.gz | tar xvz -C $INSTALL_DIR
$ export PATH=$INSTALL_DIR/hurl-$VERSION-x86_64-unknown-linux-gnu/bin:$PATH
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Debian / Ubuntu&lt;/h4&gt; 
&lt;p&gt;For Debian &amp;gt;=12 / Ubuntu &amp;gt;=22.04, Hurl can be installed using a binary .deb file provided in each Hurl release.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ VERSION=7.0.0
$ curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl_${VERSION}_amd64.deb
$ sudo apt update &amp;amp;&amp;amp; sudo apt install ./hurl_${VERSION}_amd64.deb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Ubuntu &amp;gt;=18.04, Hurl can be installed from &lt;code&gt;ppa:lepapareil/hurl&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ VERSION=7.0.0
$ sudo apt-add-repository -y ppa:lepapareil/hurl
$ sudo apt install hurl="${VERSION}"*
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Alpine&lt;/h4&gt; 
&lt;p&gt;Hurl is available on &lt;code&gt;testing&lt;/code&gt; channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arch Linux / Manjaro&lt;/h4&gt; 
&lt;p&gt;Hurl is available on &lt;a href="https://archlinux.org/packages/extra/x86_64/hurl/"&gt;extra&lt;/a&gt; channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ pacman -Sy hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;NixOS / Nix&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://search.nixos.org/packages?from=0&amp;amp;size=1&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=hurl"&gt;NixOS / Nix package&lt;/a&gt; is available on stable channel.&lt;/p&gt; 
&lt;h3&gt;macOS&lt;/h3&gt; 
&lt;p&gt;Precompiled binaries for Intel and ARM CPUs are available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Homebrew&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ brew install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;MacPorts&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo port install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FreeBSD&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ sudo pkg install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Windows requires the &lt;a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#latest-microsoft-visual-c-redistributable-version"&gt;Visual C++ Redistributable Package&lt;/a&gt; to be installed manually, as this is not included in the installer.&lt;/p&gt; 
&lt;h4&gt;Zip File&lt;/h4&gt; 
&lt;p&gt;Hurl can be installed from a standalone zip file at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;. You will need to update your &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt; 
&lt;h4&gt;Installer&lt;/h4&gt; 
&lt;p&gt;An executable installer is also available at &lt;a href="https://github.com/Orange-OpenSource/hurl/releases/latest"&gt;Hurl latest GitHub release&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Chocolatey&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ choco install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Scoop&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ scoop install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Windows Package Manager&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ winget install hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cargo&lt;/h3&gt; 
&lt;p&gt;If you're a Rust programmer, Hurl can be installed with cargo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cargo install --locked hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;conda-forge&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ conda install -c conda-forge hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl can also be installed with &lt;a href="https://conda-forge.org"&gt;&lt;code&gt;conda-forge&lt;/code&gt;&lt;/a&gt; powered package manager like &lt;a href="https://prefix.dev"&gt;&lt;code&gt;pixi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ docker pull ghcr.io/orange-opensource/hurl:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;npm&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ npm install --save-dev @orangeopensource/hurl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building From Sources&lt;/h2&gt; 
&lt;p&gt;Hurl sources are available in &lt;a href="https://github.com/Orange-OpenSource/hurl"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Build on Linux&lt;/h3&gt; 
&lt;p&gt;Hurl depends on libssl, libcurl and libxml2 native libraries. You will need their development files in your platform.&lt;/p&gt; 
&lt;h4&gt;Debian based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apt install -y build-essential pkg-config libssl-dev libcurl4-openssl-dev libxml2-dev libclang-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Fedora based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ dnf install -y pkgconf-pkg-config gcc openssl-devel libxml2-devel clang-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Red Hat based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ yum install -y pkg-config gcc openssl-devel libxml2-devel clang-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arch based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ pacman -S --noconfirm pkgconf gcc glibc openssl libxml2 clang
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Alpine based distributions&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apk add curl-dev gcc libxml2-dev musl-dev openssl-dev clang-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build on macOS&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ xcode-select --install
$ brew install pkg-config
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hurl is written in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;. You should &lt;a href="https://www.rust-lang.org/tools/install"&gt;install&lt;/a&gt; the latest stable release.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ curl https://sh.rustup.rs -sSf | sh -s -- -y
$ source $HOME/.cargo/env
$ rustc --version
$ cargo --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then build hurl:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ git clone https://github.com/Orange-OpenSource/hurl
$ cd hurl
$ cargo build --release
$ ./target/release/hurl --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build on Windows&lt;/h3&gt; 
&lt;p&gt;Please follow the &lt;a href="https://github.com/Orange-OpenSource/hurl/raw/master/contrib/windows/README.md"&gt;contrib on Windows section&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hatoo/oha</title>
      <link>https://github.com/hatoo/oha</link>
      <description>&lt;p&gt;Ohayou(„Åä„ÅØ„Çà„ÅÜ), HTTP load generator, inspired by rakyll/hey with tui animation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oha („Åä„ÅØ„Çà„ÅÜ)&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/hatoo/oha/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/hatoo/oha/workflows/CI/badge.svg?sanitize=true" alt="GitHub Actions" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/oha"&gt;&lt;img src="https://img.shields.io/crates/v/oha.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://archlinux.org/packages/extra/x86_64/oha/"&gt;&lt;img src="https://img.shields.io/archlinux/v/extra/x86_64/oha" alt="Arch Linux" /&gt;&lt;/a&gt; &lt;a href="https://formulae.brew.sh/formula/oha"&gt;&lt;img src="https://img.shields.io/homebrew/v/oha" alt="Homebrew" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://ko-fi.com/hatoo"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" alt="ko-fi" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;oha is a tiny program that sends some load to a web application and show realtime tui inspired by &lt;a href="https://github.com/rakyll/hey"&gt;rakyll/hey&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This program is written in Rust and powered by &lt;a href="https://github.com/tokio-rs/tokio"&gt;tokio&lt;/a&gt; and beautiful tui by &lt;a href="https://github.com/ratatui-org/ratatui"&gt;ratatui&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/hatoo/oha/master/demo.gif" alt="demo" /&gt;&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;This program is built on stable Rust, with both &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;cmake&lt;/code&gt; prerequisites to install via cargo.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo install oha
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can optionally build oha against &lt;a href="https://github.com/sfackler/rust-native-tls"&gt;native-tls&lt;/a&gt; instead of &lt;a href="https://github.com/rustls/rustls"&gt;rustls&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo install --no-default-features --features native-tls oha
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can enable VSOCK support by enabling &lt;code&gt;vsock&lt;/code&gt; feature.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cargo install --features vsock oha
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can enable experimental HTTP3 support by enabling the &lt;code&gt;http3&lt;/code&gt; feature. This uses the &lt;a href="https://github.com/hyperium/h3/r"&gt;H3&lt;/a&gt; library by the developers of Hyper. It will remain experimental as long as H3 is experimental. It currently depends on using &lt;code&gt;rustls&lt;/code&gt; for TLS.&lt;/p&gt; 
&lt;h2&gt;Download pre-built binary&lt;/h2&gt; 
&lt;p&gt;You can download pre-built binary from &lt;a href="https://github.com/hatoo/oha/releases"&gt;Release page&lt;/a&gt; for each version and from &lt;a href="https://github.com/hatoo/oha/actions/workflows/release.yml"&gt;Publish workflow&lt;/a&gt; and &lt;a href="https://github.com/hatoo/oha/actions/workflows/release-pgo.yml"&gt;Publish PGO workflow&lt;/a&gt; for each commit.&lt;/p&gt; 
&lt;h2&gt;On Arch Linux&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;pacman -S oha
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;On macOS (Homebrew)&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;brew install oha
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;On Windows (winget)&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;winget install hatoo.oha
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;On Debian (&lt;a href="http://packages.azlux.fr/"&gt;Azlux's repository&lt;/a&gt;)&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;echo "deb [signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian/ stable main" | sudo tee /etc/apt/sources.list.d/azlux.list
sudo wget -O /usr/share/keyrings/azlux-archive-keyring.gpg https://azlux.fr/repo.gpg
apt update
apt install oha
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;X-CMD (Linux, macOS, Windows WSL/GitBash)&lt;/h2&gt; 
&lt;p&gt;You can install with &lt;a href="https://www.x-cmd.com"&gt;x-cmd&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;x env use oha
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Containerized&lt;/h2&gt; 
&lt;p&gt;You can also build and create a container image including oha&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t hatoo/oha:latest .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can use oha directly through the container&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it --network=host hatoo/oha:latest https://example.com:3000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Profile-Guided Optimization (PGO)&lt;/h2&gt; 
&lt;p&gt;You can build &lt;code&gt;oha&lt;/code&gt; with PGO by using the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;bun run pgo.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the binary will be available at &lt;code&gt;target/[target-triple]/pgo/oha&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Platform&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Linux - Tested on Ubuntu 18.04 gnome-terminal&lt;/li&gt; 
 &lt;li&gt;Windows 10 - Tested on Windows Powershell&lt;/li&gt; 
 &lt;li&gt;MacOS - Tested on iTerm2&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;-q&lt;/code&gt; option works different from &lt;a href="https://github.com/rakyll/hey"&gt;rakyll/hey&lt;/a&gt;. It's set overall query per second instead of for each workers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;Ohayou(„Åä„ÅØ„Çà„ÅÜ), HTTP load generator, inspired by rakyll/hey with tui animation.

Usage: oha [OPTIONS] &amp;lt;URL&amp;gt;

Arguments:
  &amp;lt;URL&amp;gt;  Target URL or file with multiple URLs.

Options:
  -n &amp;lt;N_REQUESTS&amp;gt;
          Number of requests to run. [default: 200]
  -c &amp;lt;N_CONNECTIONS&amp;gt;
          Number of connections to run concurrently. You may should increase limit to number of open files for larger `-c`. [default: 50]
  -p &amp;lt;N_HTTP2_PARALLEL&amp;gt;
          Number of parallel requests to send on HTTP/2. `oha` will run c * p concurrent workers in total. [default: 1]
  -z &amp;lt;DURATION&amp;gt;
          Duration of application to send requests. If duration is specified, n is ignored.
          On HTTP/1, When the duration is reached, ongoing requests are aborted and counted as "aborted due to deadline"
          You can change this behavior with `-w` option.
          Currently, on HTTP/2, When the duration is reached, ongoing requests are waited. `-w` option is ignored.
          Examples: -z 10s -z 3m.
  -w, --wait-ongoing-requests-after-deadline
          When the duration is reached, ongoing requests are waited
  -q &amp;lt;QUERY_PER_SECOND&amp;gt;
          Rate limit for all, in queries per second (QPS)
      --burst-delay &amp;lt;BURST_DURATION&amp;gt;
          Introduce delay between a predefined number of requests.
          Note: If qps is specified, burst will be ignored
      --burst-rate &amp;lt;BURST_REQUESTS&amp;gt;
          Rates of requests for burst. Default is 1
          Note: If qps is specified, burst will be ignored
      --rand-regex-url
          Generate URL by rand_regex crate but dot is disabled for each query e.g. http://127.0.0.1/[a-z][a-z][0-9]. Currently dynamic scheme, host and port with keep-alive do not work well. See https://docs.rs/rand_regex/latest/rand_regex/struct.Regex.html for details of syntax.
      --urls-from-file
          Read the URLs to query from a file
      --max-repeat &amp;lt;MAX_REPEAT&amp;gt;
          A parameter for the '--rand-regex-url'. The max_repeat parameter gives the maximum extra repeat counts the x*, x+ and x{n,} operators will become. [default: 4]
      --dump-urls &amp;lt;DUMP_URLS&amp;gt;
          Dump target Urls &amp;lt;DUMP_URLS&amp;gt; times to debug --rand-regex-url
      --latency-correction
          Correct latency to avoid coordinated omission problem. It's ignored if -q is not set.
      --no-tui
          No realtime tui
      --fps &amp;lt;FPS&amp;gt;
          Frame per second for tui. [default: 16]
  -m, --method &amp;lt;METHOD&amp;gt;
          HTTP method [default: GET]
  -H &amp;lt;HEADERS&amp;gt;
          Custom HTTP header. Examples: -H "foo: bar"
      --proxy-header &amp;lt;PROXY_HEADERS&amp;gt;
          Custom Proxy HTTP header. Examples: --proxy-header "foo: bar"
  -t &amp;lt;TIMEOUT&amp;gt;
          Timeout for each request. Default to infinite.
  -A &amp;lt;ACCEPT_HEADER&amp;gt;
          HTTP Accept Header.
  -d &amp;lt;BODY_STRING&amp;gt;
          HTTP request body.
  -D &amp;lt;BODY_PATH&amp;gt;
          HTTP request body from file.
  -T &amp;lt;CONTENT_TYPE&amp;gt;
          Content-Type.
  -a &amp;lt;BASIC_AUTH&amp;gt;
          Basic authentication (username:password), or AWS credentials (access_key:secret_key)
  -F, --form &amp;lt;FORM&amp;gt;
          Specify HTTP multipart POST data (curl compatible). Examples: -F 'name=value' -F 'file=@path/to/file'
      --aws-session &amp;lt;AWS_SESSION&amp;gt;
          AWS session token
      --aws-sigv4 &amp;lt;AWS_SIGV4&amp;gt;
          AWS SigV4 signing params (format: aws:amz:region:service)
  -x &amp;lt;PROXY&amp;gt;
          HTTP proxy
      --proxy-http-version &amp;lt;PROXY_HTTP_VERSION&amp;gt;
          HTTP version to connect to proxy. Available values 0.9, 1.0, 1.1, 2.
      --proxy-http2
          Use HTTP/2 to connect to proxy. Shorthand for --proxy-http-version=2
      --http-version &amp;lt;HTTP_VERSION&amp;gt;
          HTTP version. Available values 0.9, 1.0, 1.1, 2, 3
      --http2
          Use HTTP/2. Shorthand for --http-version=2
      --host &amp;lt;HOST&amp;gt;
          HTTP Host header
      --disable-compression
          Disable compression.
  -r, --redirect &amp;lt;REDIRECT&amp;gt;
          Limit for number of Redirect. Set 0 for no redirection. Redirection isn't supported for HTTP/2. [default: 10]
      --disable-keepalive
          Disable keep-alive, prevents re-use of TCP connections between different HTTP requests. This isn't supported for HTTP/2.
      --no-pre-lookup
          *Not* perform a DNS lookup at beginning to cache it
      --ipv6
          Lookup only ipv6.
      --ipv4
          Lookup only ipv4.
      --cacert &amp;lt;CACERT&amp;gt;
          (TLS) Use the specified certificate file to verify the peer. Native certificate store is used even if this argument is specified.
      --cert &amp;lt;CERT&amp;gt;
          (TLS) Use the specified client certificate file. --key must be also specified
      --key &amp;lt;KEY&amp;gt;
          (TLS) Use the specified client key file. --cert must be also specified
      --insecure
          Accept invalid certs.
      --connect-to &amp;lt;CONNECT_TO&amp;gt;
          Override DNS resolution and default port numbers with strings like 'example.org:443:localhost:8443'
          Note: if used several times for the same host:port:target_host:target_port, a random choice is made
      --disable-color
          Disable the color scheme.
      --unix-socket &amp;lt;UNIX_SOCKET&amp;gt;
          Connect to a unix socket instead of the domain in the URL. Only for non-HTTPS URLs.
      --stats-success-breakdown
          Include a response status code successful or not successful breakdown for the time histogram and distribution statistics
      --db-url &amp;lt;DB_URL&amp;gt;
          Write succeeded requests to sqlite database url E.G test.db
      --debug
          Perform a single request and dump the request and response
  -o, --output &amp;lt;OUTPUT&amp;gt;
          Output file to write the results to. If not specified, results are written to stdout.
      --output-format &amp;lt;OUTPUT_FORMAT&amp;gt;
          Output format [default: text] [possible values: text, json, csv]
  -u, --time-unit &amp;lt;TIME_UNIT&amp;gt;
          Time unit to be used. If not specified, the time unit is determined automatically. This option affects only text format. [possible values: ns, us, ms, s, m, h]
  -h, --help
          Print help
  -V, --version
          Print version
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Performance&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;oha&lt;/code&gt; uses faster implementation when &lt;code&gt;--no-tui&lt;/code&gt; option is set and both &lt;code&gt;-q&lt;/code&gt; and &lt;code&gt;--burst-delay&lt;/code&gt; are not set because it can avoid overhead to gather data realtime.&lt;/p&gt; 
&lt;h1&gt;Output&lt;/h1&gt; 
&lt;p&gt;By default &lt;code&gt;oha&lt;/code&gt; outputs a text summary of the results.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;oha&lt;/code&gt; prints JSON summary output when &lt;code&gt;--output-format json&lt;/code&gt; option is set. The schema of JSON output is defined in &lt;a href="https://raw.githubusercontent.com/hatoo/oha/master/schema.json"&gt;schema.json&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When &lt;code&gt;--output-format csv&lt;/code&gt; is used result of each request is printed as a line of comma separated values.&lt;/p&gt; 
&lt;h1&gt;Tips&lt;/h1&gt; 
&lt;h2&gt;Stress test in more realistic condition&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;oha&lt;/code&gt; uses default options inherited from &lt;a href="https://github.com/rakyll/hey"&gt;rakyll/hey&lt;/a&gt; but you may need to change options to stress test in more realistic condition.&lt;/p&gt; 
&lt;p&gt;I suggest to run &lt;code&gt;oha&lt;/code&gt; with following options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;oha &amp;lt;-z or -n&amp;gt; -c &amp;lt;number of concurrent connections&amp;gt; -q &amp;lt;query per seconds&amp;gt; --latency-correction --disable-keepalive &amp;lt;target-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;--disable-keepalive&lt;/p&gt; &lt;p&gt;In real, user doesn't query same URL using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive"&gt;Keep-Alive&lt;/a&gt;. You may want to run without &lt;code&gt;Keep-Alive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;--latency-correction&lt;/p&gt; &lt;p&gt;You can avoid &lt;code&gt;Coordinated Omission Problem&lt;/code&gt; by using &lt;code&gt;--latency-correction&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Burst feature&lt;/h2&gt; 
&lt;p&gt;You can use &lt;code&gt;--burst-delay&lt;/code&gt; along with &lt;code&gt;--burst-rate&lt;/code&gt; option to introduce delay between a defined number of requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;oha -n 10 --burst-delay 2s --burst-rate 4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this particular scenario, every 2 seconds, 4 requests will be processed, and after 6s the total of 10 requests will be processed. &lt;em&gt;NOTE: If you don't set &lt;code&gt;--burst-rate&lt;/code&gt; option, the amount is default to 1&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Dynamic url feature&lt;/h2&gt; 
&lt;p&gt;You can use &lt;code&gt;--rand-regex-url&lt;/code&gt; option to generate random url for each connection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;oha --rand-regex-url http://127.0.0.1/[a-z][a-z][0-9]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Each Urls are generated by &lt;a href="https://github.com/kennytm/rand_regex"&gt;rand_regex&lt;/a&gt; crate but regex's dot is disabled since it's not useful for this purpose and it's very inconvenient if url's dots are interpreted as regex's dot.&lt;/p&gt; 
&lt;p&gt;Optionally you can set &lt;code&gt;--max-repeat&lt;/code&gt; option to limit max repeat count for each regex. e.g &lt;a href="http://127.0.0.1/%5Ba-z%5D"&gt;http://127.0.0.1/[a-z]&lt;/a&gt;* with &lt;code&gt;--max-repeat 4&lt;/code&gt; will generate url like &lt;a href="http://127.0.0.1/%5Ba-z%5D%7B0,4%7D"&gt;http://127.0.0.1/[a-z]{0,4}&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Currently dynamic scheme, host and port with keep-alive are not works well.&lt;/p&gt; 
&lt;h2&gt;URLs from file feature&lt;/h2&gt; 
&lt;p&gt;You can use &lt;code&gt;--urls-from-file&lt;/code&gt; to read the target URLs from a file. Each line of this file needs to contain one valid URL as in the example below.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http://domain.tld/foo/bar
http://domain.tld/assets/vendors-node_modules_highlight_js_lib_index_js-node_modules_tanstack_react-query_build_modern-3fdf40-591fb51c8a6e.js
http://domain.tld/images/test.png
http://domain.tld/foo/bar?q=test
http://domain.tld/foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Such a file can for example be created from an access log to generate a more realistic load distribution over the different pages of a server.&lt;/p&gt; 
&lt;p&gt;When this type of URL specification is used, every request goes to a random URL given in the file.&lt;/p&gt; 
&lt;h1&gt;Contribution&lt;/h1&gt; 
&lt;p&gt;Feel free to help us!&lt;/p&gt; 
&lt;p&gt;Here are some areas which need improving.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Write tests&lt;/li&gt; 
 &lt;li&gt;Improve tui design. 
  &lt;ul&gt; 
   &lt;li&gt;Show more information?&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Improve speed 
  &lt;ul&gt; 
   &lt;li&gt;I'm new to tokio. I think there are some space to optimize query scheduling.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>