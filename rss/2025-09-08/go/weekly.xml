<rss version="2.0">
  <channel>
    <title>GitHub Go Weekly Trending</title>
    <description>Weekly Trending of Go in GitHub</description>
    <pubDate>Sun, 07 Sep 2025 01:41:14 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>jesseduffield/lazydocker</title>
      <link>https://github.com/jesseduffield/lazydocker</link>
      <description>&lt;p&gt;The lazier way to manage everything docker&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=lazydocker_20231023"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/assets/warp2.png" width="400" alt="Warp" /&gt; 
  &lt;/div&gt; &lt;b&gt;Warp, the intelligent terminal&lt;/b&gt; &lt;br /&gt; &lt;b&gt;Available for MacOS and Linux&lt;/b&gt; &lt;br /&gt; 
  &lt;div&gt; 
   &lt;sup&gt;Visit&amp;nbsp;warp.dev&amp;nbsp;to learn more.&lt;/sup&gt; 
  &lt;/div&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;a href="https://tuple.app/lazydocker"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/assets/tuple.png" width="400" alt="Tuple" /&gt; 
  &lt;/div&gt; &lt;b&gt;Tuple, the premier screen sharing app for developers on macOS and Windows.&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.subble.com"&gt; 
  &lt;div&gt; 
   &lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/assets/subble.webp" width="400" alt="Subble" /&gt; 
  &lt;/div&gt; &lt;b&gt;I (Jesse) co-founded Subble to save your company time and money by finding unused and over-provisioned SaaS licences. Check it out!&lt;/b&gt; &lt;/a&gt; 
 &lt;br /&gt; 
 &lt;hr /&gt; 
&lt;/div&gt; 
&lt;p align="center"&gt; &lt;img src="https://user-images.githubusercontent.com/8456633/59972109-8e9c8480-95cc-11e9-8350-38f7f86ba76d.png" /&gt; &lt;/p&gt; 
&lt;p&gt;A simple terminal UI for both docker and docker-compose, written in Go with the &lt;a href="https://github.com/jroimartin/gocui" title="gocui"&gt;gocui&lt;/a&gt; library.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/jesseduffield/lazygit/workflows/Continuous%20Integration/badge.svg?sanitize=true" alt="CI" /&gt; &lt;a href="https://goreportcard.com/report/github.com/jesseduffield/lazydocker"&gt;&lt;img src="https://goreportcard.com/badge/github.com/jesseduffield/lazydocker" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://golangci.com"&gt;&lt;img src="https://golangci.com/badges/github.com/jesseduffield/lazydocker.svg?sanitize=true" alt="GolangCI" /&gt;&lt;/a&gt; &lt;a href="http://godoc.org/github.com/jesseduffield/lazydocker"&gt;&lt;img src="https://godoc.org/github.com/jesseduffield/lazydocker?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/repo-size/jesseduffield/lazydocker" alt="GitHub repo size" /&gt; &lt;a href="https://github.com/jesseduffield/lazydocker/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/jesseduffield/lazydocker/total" alt="GitHub Releases" /&gt;&lt;/a&gt; &lt;a href="https://github.com/jesseduffield/lazydocker/releases/latest"&gt;&lt;img src="https://img.shields.io/github/tag/jesseduffield/lazydocker.svg?sanitize=true" alt="GitHub tag" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Homebrew/homebrew-core/raw/master/Formula/lazydocker.rb"&gt;&lt;img src="https://img.shields.io/homebrew/v/lazydocker" alt="homebrew" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/demo3.gif" alt="Gif" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/NICqQPxwJWw"&gt;Demo&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p align="center"&gt; Maintenance of this project is made possible by all the &lt;a href="https://github.com/jesseduffield/lazydocker/graphs/contributors"&gt;contributors&lt;/a&gt; and &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsors&lt;/a&gt;. If you'd like to sponsor this project and have your avatar or company logo appear below &lt;a href="https://github.com/sponsors/jesseduffield"&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; 
&lt;p align="center"&gt; 
 &lt;!-- sponsors --&gt;&lt;a href="https://github.com/intabulas"&gt;&lt;img src="https://github.com/intabulas.png" width="60px" alt="Mark Lussier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/peppy"&gt;&lt;img src="https://github.com/peppy.png" width="60px" alt="Dean Herbert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/piot"&gt;&lt;img src="https://github.com/piot.png" width="60px" alt="Peter Bjorklund" /&gt;&lt;/a&gt;&lt;a href="https://github.com/rgwood"&gt;&lt;img src="https://github.com/rgwood.png" width="60px" alt="Reilly Wood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/oliverguenther"&gt;&lt;img src="https://github.com/oliverguenther.png" width="60px" alt="Oliver Günther" /&gt;&lt;/a&gt;&lt;a href="https://github.com/pawanjay176"&gt;&lt;img src="https://github.com/pawanjay176.png" width="60px" alt="Pawan Dhananjay" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bdach"&gt;&lt;img src="https://github.com/bdach.png" width="60px" alt="Bartłomiej Dach" /&gt;&lt;/a&gt;&lt;a href="https://github.com/davidklsn"&gt;&lt;img src="https://github.com/davidklsn.png" width="60px" alt="David Karlsson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/carstengehling"&gt;&lt;img src="https://github.com/carstengehling.png" width="60px" alt="Carsten Gehling" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ceuk"&gt;&lt;img src="https://github.com/ceuk.png" width="60px" alt="CEUK" /&gt;&lt;/a&gt;&lt;a href="https://github.com/akospwc"&gt;&lt;img src="https://github.com/akospwc.png" width="60px" alt="Akos Putz" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Xetera"&gt;&lt;img src="https://github.com/Xetera.png" width="60px" alt="Xetera" /&gt;&lt;/a&gt;&lt;a href="https://github.com/HoldenLucas"&gt;&lt;img src="https://github.com/HoldenLucas.png" width="60px" alt="Holden Lucas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nartc"&gt;&lt;img src="https://github.com/nartc.png" width="60px" alt="Chau Tran" /&gt;&lt;/a&gt;&lt;a href="https://github.com/matejcik"&gt;&lt;img src="https://github.com/matejcik.png" width="60px" alt="matejcik" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lucatume"&gt;&lt;img src="https://github.com/lucatume.png" width="60px" alt="theAverageDev (Luca Tumedei)" /&gt;&lt;/a&gt;&lt;a href="https://github.com/IvanZuy"&gt;&lt;img src="https://github.com/IvanZuy.png" width="60px" alt="Ivan Zaitsev" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nicholascloud"&gt;&lt;img src="https://github.com/nicholascloud.png" width="60px" alt="Nicholas Cloud" /&gt;&lt;/a&gt;&lt;a href="https://github.com/PhotonQuantum"&gt;&lt;img src="https://github.com/PhotonQuantum.png" width="60px" alt="LightQuantum" /&gt;&lt;/a&gt;&lt;a href="https://github.com/GitSquared"&gt;&lt;img src="https://github.com/GitSquared.png" width="60px" alt="Gabriel Saillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ava1ar"&gt;&lt;img src="https://github.com/ava1ar.png" width="60px" alt="Aliaksandr Stelmachonak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/minidfx"&gt;&lt;img src="https://github.com/minidfx.png" width="60px" alt="Burgy Benjamin" /&gt;&lt;/a&gt;&lt;a href="https://github.com/JoeKlemmer"&gt;&lt;img src="https://github.com/JoeKlemmer.png" width="60px" alt="Joe Klemmer" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tobi"&gt;&lt;img src="https://github.com/tobi.png" width="60px" alt="Tobias Lütke" /&gt;&lt;/a&gt;&lt;a href="https://github.com/benbfortis"&gt;&lt;img src="https://github.com/benbfortis.png" width="60px" alt="Ben Beaumont" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jakewarren"&gt;&lt;img src="https://github.com/jakewarren.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tgpholly"&gt;&lt;img src="https://github.com/tgpholly.png" width="60px" alt="Holly" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jisantuc"&gt;&lt;img src="https://github.com/jisantuc.png" width="60px" alt="James Santucci" /&gt;&lt;/a&gt;&lt;a href="https://github.com/bitprophet"&gt;&lt;img src="https://github.com/bitprophet.png" width="60px" alt="Jeff Forcier" /&gt;&lt;/a&gt;&lt;a href="https://github.com/tayleighr"&gt;&lt;img src="https://github.com/tayleighr.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Novakov"&gt;&lt;img src="https://github.com/Novakov.png" width="60px" alt="Maciej T. Nowak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/farzadmf"&gt;&lt;img src="https://github.com/farzadmf.png" width="60px" alt="Farzad Majidfayyaz" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nekhaevskiy"&gt;&lt;img src="https://github.com/nekhaevskiy.png" width="60px" alt="Yury" /&gt;&lt;/a&gt;&lt;a href="https://github.com/reivilibre"&gt;&lt;img src="https://github.com/reivilibre.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/andreaskurth"&gt;&lt;img src="https://github.com/andreaskurth.png" width="60px" alt="Andreas Kurth" /&gt;&lt;/a&gt;&lt;a href="https://github.com/BSteffaniak"&gt;&lt;img src="https://github.com/BSteffaniak.png" width="60px" alt="Braden Steffaniak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jordan-gillard"&gt;&lt;img src="https://github.com/jordan-gillard.png" width="60px" alt="Jordan Gillard" /&gt;&lt;/a&gt;&lt;a href="https://github.com/smangels"&gt;&lt;img src="https://github.com/smangels.png" width="60px" alt="Sebastian" /&gt;&lt;/a&gt;&lt;a href="https://github.com/George-Spanos"&gt;&lt;img src="https://github.com/George-Spanos.png" width="60px" alt="George Spanos" /&gt;&lt;/a&gt;&lt;a href="https://github.com/frantisekstanko"&gt;&lt;img src="https://github.com/frantisekstanko.png" width="60px" alt="Frantisek Stanko" /&gt;&lt;/a&gt;&lt;a href="https://github.com/amslezak"&gt;&lt;img src="https://github.com/amslezak.png" width="60px" alt="Andy Slezak" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mkock"&gt;&lt;img src="https://github.com/mkock.png" width="60px" alt="Martin Kock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/illarionvk"&gt;&lt;img src="https://github.com/illarionvk.png" width="60px" alt="Illarion Koperski" /&gt;&lt;/a&gt;&lt;a href="https://github.com/WhiteBlackGoose"&gt;&lt;img src="https://github.com/WhiteBlackGoose.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/jessealama"&gt;&lt;img src="https://github.com/jessealama.png" width="60px" alt="Jesse Alama" /&gt;&lt;/a&gt;&lt;a href="https://github.com/codacy"&gt;&lt;img src="https://github.com/codacy.png" width="60px" alt="Codacy" /&gt;&lt;/a&gt;&lt;a href="https://github.com/colbr"&gt;&lt;img src="https://github.com/colbr.png" width="60px" alt="Brett" /&gt;&lt;/a&gt;&lt;a href="https://github.com/heijmans"&gt;&lt;img src="https://github.com/heijmans.png" width="60px" alt="Jan Heijmans" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Vesther"&gt;&lt;img src="https://github.com/Vesther.png" width="60px" alt="Kevin Nowald" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sempruijs"&gt;&lt;img src="https://github.com/sempruijs.png" width="60px" alt="sem pruijs" /&gt;&lt;/a&gt;&lt;a href="https://github.com/omarluq"&gt;&lt;img src="https://github.com/omarluq.png" width="60px" alt="Omar Luq " /&gt;&lt;/a&gt;&lt;a href="https://github.com/ethanjli"&gt;&lt;img src="https://github.com/ethanjli.png" width="60px" alt="Ethan Li" /&gt;&lt;/a&gt;&lt;a href="https://github.com/phubaba"&gt;&lt;img src="https://github.com/phubaba.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/fomrat"&gt;&lt;img src="https://github.com/fomrat.png" width="60px" alt="Brian MacAskill" /&gt;&lt;/a&gt;&lt;a href="https://github.com/canhazcodez"&gt;&lt;img src="https://github.com/canhazcodez.png" width="60px" alt="Maxi" /&gt;&lt;/a&gt;&lt;a href="https://github.com/nikbrunner"&gt;&lt;img src="https://github.com/nikbrunner.png" width="60px" alt="nbr" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neunkasulle"&gt;&lt;img src="https://github.com/neunkasulle.png" width="60px" alt="Jan Zenkner" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ahkohd"&gt;&lt;img src="https://github.com/ahkohd.png" width="60px" alt="Victor Aremu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/RVxLab"&gt;&lt;img src="https://github.com/RVxLab.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/igor-ramazanov"&gt;&lt;img src="https://github.com/igor-ramazanov.png" width="60px" alt="Igor Ramazanov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/glotchimo"&gt;&lt;img src="https://github.com/glotchimo.png" width="60px" alt="Elliott Maguire" /&gt;&lt;/a&gt;&lt;a href="https://github.com/n8nio"&gt;&lt;img src="https://github.com/n8nio.png" width="60px" alt="n8n - Workflow Automation" /&gt;&lt;/a&gt;&lt;a href="https://github.com/kaleballmon"&gt;&lt;img src="https://github.com/kaleballmon.png" width="60px" alt="kaleb allmon" /&gt;&lt;/a&gt;&lt;a href="https://github.com/joshuadavidthomas"&gt;&lt;img src="https://github.com/joshuadavidthomas.png" width="60px" alt="Josh Thomas" /&gt;&lt;/a&gt;&lt;a href="https://github.com/josephjacks"&gt;&lt;img src="https://github.com/josephjacks.png" width="60px" alt="JJ" /&gt;&lt;/a&gt;&lt;a href="https://github.com/FrederickGeek8"&gt;&lt;img src="https://github.com/FrederickGeek8.png" width="60px" alt="Frederick Morlock" /&gt;&lt;/a&gt;&lt;a href="https://github.com/agrippanux"&gt;&lt;img src="https://github.com/agrippanux.png" width="60px" alt="Darren Craine" /&gt;&lt;/a&gt;&lt;a href="https://github.com/ezdac"&gt;&lt;img src="https://github.com/ezdac.png" width="60px" alt="Maximilian Langenfeld" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sarzhann"&gt;&lt;img src="https://github.com/sarzhann.png" width="60px" alt="Nurzhan" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dbuls"&gt;&lt;img src="https://github.com/dbuls.png" width="60px" alt="Davis Buls" /&gt;&lt;/a&gt;&lt;a href="https://github.com/MGreek"&gt;&lt;img src="https://github.com/MGreek.png" width="60px" alt="Grec Marc" /&gt;&lt;/a&gt;&lt;a href="https://github.com/sainu"&gt;&lt;img src="https://github.com/sainu.png" width="60px" alt="sainu" /&gt;&lt;/a&gt;&lt;a href="https://github.com/mguellsegarra"&gt;&lt;img src="https://github.com/mguellsegarra.png" width="60px" alt="Marc Güell Segarra" /&gt;&lt;/a&gt;&lt;a href="https://github.com/lppassos"&gt;&lt;img src="https://github.com/lppassos.png" width="60px" alt="" /&gt;&lt;/a&gt;&lt;a href="https://github.com/chrisolsen"&gt;&lt;img src="https://github.com/chrisolsen.png" width="60px" alt="Chris Olsen" /&gt;&lt;/a&gt;&lt;a href="https://github.com/vladimir-popov"&gt;&lt;img src="https://github.com/vladimir-popov.png" width="60px" alt="Vladimir Popov" /&gt;&lt;/a&gt;&lt;a href="https://github.com/neilcode"&gt;&lt;img src="https://github.com/neilcode.png" width="60px" alt="Neil Lambert" /&gt;&lt;/a&gt;&lt;a href="https://github.com/shaungarwood"&gt;&lt;img src="https://github.com/shaungarwood.png" width="60px" alt="Shaun Garwood" /&gt;&lt;/a&gt;&lt;a href="https://github.com/dhh"&gt;&lt;img src="https://github.com/dhh.png" width="60px" alt="David Heinemeier Hansson" /&gt;&lt;/a&gt;&lt;a href="https://github.com/wayanjimmy"&gt;&lt;img src="https://github.com/wayanjimmy.png" width="60px" alt="Wayan jimmy" /&gt;&lt;/a&gt;
 &lt;!-- sponsors --&gt; &lt;/p&gt; 
&lt;h2&gt;Elevator Pitch&lt;/h2&gt; 
&lt;p&gt;Minor rant incoming: Something's not working? Maybe a service is down. &lt;code&gt;docker-compose ps&lt;/code&gt;. Yep, it's that microservice that's still buggy. No issue, I'll just restart it: &lt;code&gt;docker-compose restart&lt;/code&gt;. Okay now let's try again. Oh wait the issue is still there. Hmm. &lt;code&gt;docker-compose ps&lt;/code&gt;. Right so the service must have just stopped immediately after starting. I probably would have known that if I was reading the log stream, but there is a lot of clutter in there from other services. I could get the logs for just that one service with &lt;code&gt;docker compose logs --follow myservice&lt;/code&gt; but that dies everytime the service dies so I'd need to run that command every time I restart the service. I could alternatively run &lt;code&gt;docker-compose up myservice&lt;/code&gt; and in that terminal window if the service is down I could just &lt;code&gt;up&lt;/code&gt; it again, but now I've got one service hogging a terminal window even after I no longer care about its logs. I guess when I want to reclaim the terminal realestate I can do &lt;code&gt;ctrl+P,Q&lt;/code&gt;, but... wait, that's not working for some reason. Should I use ctrl+C instead? I can't remember if that closes the foreground process or kills the actual service.&lt;/p&gt; 
&lt;p&gt;What a headache!&lt;/p&gt; 
&lt;p&gt;Memorising docker commands is hard. Memorising aliases is slightly less hard. Keeping track of your containers across multiple terminal windows is near impossible. What if you had all the information you needed in one terminal window with every common command living one keypress away (and the ability to add custom commands as well). Lazydocker's goal is to make that dream a reality.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings"&gt;Keybindings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#cool-features"&gt;Cool Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/NICqQPxwJWw"&gt;Video Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md"&gt;Config Docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.twitch.tv/jesseduffield"&gt;Twitch Stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jesseduffield/lazydocker#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker &amp;gt;= &lt;strong&gt;1.13&lt;/strong&gt; (API &amp;gt;= &lt;strong&gt;1.25&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;Docker-Compose &amp;gt;= &lt;strong&gt;1.23.2&lt;/strong&gt; (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;p&gt;Normally &lt;code&gt;lazydocker&lt;/code&gt; formula can be found in the Homebrew core but we suggest you to tap our formula to get frequently updated one. It works with Linux, too.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Tap&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install jesseduffield/lazydocker/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Core&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;brew install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href="https://scoop.sh/"&gt;scoop&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;scoop install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; 
&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;choco install lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;asdf-vm&lt;/h3&gt; 
&lt;p&gt;You can install &lt;a href="https://github.com/comdotlinux/asdf-lazydocker"&gt;asdf-lazydocker plugin&lt;/a&gt; using &lt;a href="https://asdf-vm.com/"&gt;asdf-vm&lt;/a&gt;:&lt;/p&gt; 
&lt;h4&gt;Setup (Once)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;asdf plugin add lazydocker https://github.com/comdotlinux/asdf-lazydocker.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;For Install / Upgrade&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;asdf list all lazydocker
asdf install lazydocker latest
asdf global lazydocker latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Binary Release (Linux/OSX/Windows)&lt;/h3&gt; 
&lt;p&gt;You can manually download a binary release from &lt;a href="https://github.com/jesseduffield/lazydocker/releases"&gt;the release page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Automated install/update, don't forget to always verify what you're piping into bash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The script installs downloaded binary to &lt;code&gt;$HOME/.local/bin&lt;/code&gt; directory by default, but it can be changed by setting &lt;code&gt;DIR&lt;/code&gt; environment variable.&lt;/p&gt; 
&lt;h3&gt;Go&lt;/h3&gt; 
&lt;p&gt;Required Go Version &amp;gt;= &lt;strong&gt;1.19&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install github.com/jesseduffield/lazydocker@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Required Go version &amp;gt;= &lt;strong&gt;1.8&lt;/strong&gt;, &amp;lt;= &lt;strong&gt;1.17&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get github.com/jesseduffield/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch Linux AUR&lt;/h3&gt; 
&lt;p&gt;You can install lazydocker using the &lt;a href="https://aur.archlinux.org/packages/lazydocker"&gt;AUR&lt;/a&gt; by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;yay -S lazydocker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/pulls/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/stars/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Stars" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/lazyteam/lazydocker"&gt;&lt;img src="https://img.shields.io/docker/cloud/automated/lazyteam/lazydocker.svg?sanitize=true" alt="Docker Automated" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;details&gt;
   &lt;summary&gt;Click if you have an ARM device&lt;/summary&gt;
   &lt;p&gt; &lt;/p&gt;
   &lt;ul&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v6 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm32v6/golang \
--build-arg GOARCH=arm \
--build-arg GOARM=6 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v7 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm32v7/golang \
--build-arg GOARCH=arm \
--build-arg GOARM=7 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;If you have a ARM 64 bit v8 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker build -t lazyteam/lazydocker \
--build-arg BASE_IMAGE_BUILDER=arm64v8/golang \
--build-arg GOARCH=arm64 \
https://github.com/jesseduffield/lazydocker.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;p&gt;&lt;/p&gt;
  &lt;/details&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run the container&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v \
/var/run/docker.sock:/var/run/docker.sock \
-v /yourpath:/.config/jesseduffield/lazydocker \
lazyteam/lazydocker
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Don't forget to change &lt;code&gt;/yourpath&lt;/code&gt; to an actual path you created to store lazydocker's config&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use this &lt;a href="https://github.com/jesseduffield/lazydocker/raw/master/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You might want to create an alias, for example:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;echo "alias lzd='docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v /yourpath/config:/.config/jesseduffield/lazydocker lazyteam/lazydocker'" &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For development, you can build the image using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/jesseduffield/lazydocker.git
cd lazydocker
docker build -t lazyteam/lazydocker \
    --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
    --build-arg VCS_REF=`git rev-parse --short HEAD` \
    --build-arg VERSION=`git describe --abbrev=0 --tag` \
    .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you encounter a compatibility issue with Docker bundled binary, try rebuilding the image with the build argument &lt;code&gt;--build-arg DOCKER_VERSION="v$(docker -v | cut -d" " -f3 | rev | cut -c 2- | rev)"&lt;/code&gt; so that the bundled docker binary matches your host docker binary version.&lt;/p&gt; 
&lt;h3&gt;Manual&lt;/h3&gt; 
&lt;p&gt;You'll need to &lt;a href="https://golang.org/doc/install"&gt;install Go&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesseduffield/lazydocker.git
cd lazydocker
go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;go run main.go&lt;/code&gt; to compile and run in one go (pun definitely intended)&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Call &lt;code&gt;lazydocker&lt;/code&gt; in your terminal. I personally use this a lot so I've made an alias for it like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;echo "alias lzd='lazydocker'" &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(you can substitute .zshrc for whatever rc file you're using)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Basic video tutorial &lt;a href="https://youtu.be/NICqQPxwJWw"&gt;here&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;List of keybindings &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings"&gt;here&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Cool features&lt;/h2&gt; 
&lt;p&gt;everything is one keypress away (or one click away! Mouse support FTW):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;viewing the state of your docker or docker-compose container environment at a glance&lt;/li&gt; 
 &lt;li&gt;viewing logs for a container/service&lt;/li&gt; 
 &lt;li&gt;viewing ascii graphs of your containers' metrics so that you can not only feel but also look like a developer&lt;/li&gt; 
 &lt;li&gt;customising those graphs to measure nearly any metric you want&lt;/li&gt; 
 &lt;li&gt;attaching to a container/service&lt;/li&gt; 
 &lt;li&gt;restarting/removing/rebuilding containers/services&lt;/li&gt; 
 &lt;li&gt;viewing the ancestor layers of a given image&lt;/li&gt; 
 &lt;li&gt;pruning containers, images, or volumes that are hogging up disk space&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;There is still a lot of work to go! Please check out the &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the discord channel&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://discord.gg/ehwFt2t4wt"&gt;&lt;img src="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/discord.png" width="75" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Donate&lt;/h2&gt; 
&lt;p&gt;If you would like to support the development of lazydocker, consider &lt;a href="https://github.com/sponsors/jesseduffield"&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; 
&lt;h2&gt;Social&lt;/h2&gt; 
&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href="https://twitter.com/DuffieldJesse"&gt;twitter&lt;/a&gt; or watch me program on &lt;a href="https://www.twitch.tv/jesseduffield"&gt;twitch&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How do I edit my config?&lt;/h3&gt; 
&lt;p&gt;By opening lazydocker, clicking on the 'project' panel in the top left, and pressing 'o' (or 'e' if your editor is vim). See &lt;a href="https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md"&gt;Config Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do I get text to wrap in my main panel?&lt;/h3&gt; 
&lt;p&gt;In the future I want to make this the default, but for now there are some CPU issues that arise with wrapping. If you want to enable wrapping, use &lt;code&gt;gui.wrapMainPanel: true&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;How do you select text?&lt;/h3&gt; 
&lt;p&gt;Because we support mouse events, you will need to hold option while dragging the mouse to indicate you're trying to select text rather than click on something. Alternatively you can disable mouse events via the &lt;code&gt;gui.ignoreMouseEvents&lt;/code&gt; config value.&lt;/p&gt; 
&lt;p&gt;Mac Users: See &lt;a href="https://github.com/jesseduffield/lazydocker/issues/190"&gt;Issue #190&lt;/a&gt; for other options.&lt;/p&gt; 
&lt;h3&gt;Why can't I see my container's logs?&lt;/h3&gt; 
&lt;p&gt;By default we only show logs from the last hour, so that we're not putting too much strain on the machine. This may be why you can't see logs when you first start lazydocker. This can be overwritten in the config's &lt;code&gt;commandTemplates&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;If you are running lazydocker in Docker container, it is a know bug, that you can't see logs or CPU usage.&lt;/p&gt; 
&lt;h2&gt;Alternatives&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/skanehira/docui"&gt;docui&lt;/a&gt; - Skanehira beat me to the punch on making a docker terminal UI, so definitely check out that repo as well! I think the two repos can live in harmony though: lazydocker is more about managing existing containers/services, and docui is more about creating and configuring them.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/portainer/portainer"&gt;Portainer&lt;/a&gt; - Portainer tries to solve the same problem but it's accessed via your browser rather than your terminal. It also supports docker swarm.&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://github.com/veggiemonk/awesome-docker/raw/master/README.md#terminal"&gt;Awesome Docker list&lt;/a&gt; for similar tools to work with Docker.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>coreybutler/nvm-windows</title>
      <link>https://github.com/coreybutler/nvm-windows</link>
      <description>&lt;p&gt;A node.js version management utility for Windows. Ironically written in Go.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt;
 &lt;h2&gt;Notice: We are working full time work on &lt;a href="https://github.com/coreybutler/nvm-windows/wiki/Runtime"&gt;Runtime&lt;/a&gt;, the successor to NVM for Windows.&lt;/h2&gt;Complete 
 &lt;a href="https://t.co/oGqQCM9FPx"&gt;this form&lt;/a&gt; to provide your thoughts and sign up for progress updates.
 &lt;br /&gt;
 &lt;br /&gt;Updates will also be posted on the 
 &lt;a href="https://linkedin.com/company/authorsoftware"&gt;Author Software LinkedIn Page&lt;/a&gt;.
&lt;/div&gt; 
&lt;br /&gt;
&lt;br /&gt; 
&lt;h1 align="center"&gt;NVM for Windows&lt;/h1&gt; 
&lt;div align="center"&gt;
  The 
 &lt;a href="https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows"&gt;Microsoft&lt;/a&gt;/
 &lt;a href="https://docs.npmjs.com/cli/v9/configuring-npm/install#windows-node-version-managers"&gt;npm&lt;/a&gt;/
 &lt;a href="https://cloud.google.com/nodejs/docs/setup#installing_nvm"&gt;Google&lt;/a&gt; recommended Node.js version manager for 
 &lt;em&gt;Windows&lt;/em&gt;.
 &lt;br /&gt; 
 &lt;details&gt; 
  &lt;summary&gt;&lt;b&gt;This is not the same thing as nvm!&lt;/b&gt; (expand for details)&lt;/summary&gt; 
  &lt;p&gt;&lt;em&gt;The original &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; is a completely separate project for Mac/Linux only.&lt;/em&gt; This project uses an entirely different philosophy and is not just a clone of nvm. Details are listed in &lt;a href="https://raw.githubusercontent.com/coreybutler/nvm-windows/master/#bulb-why-another-version-manager"&gt;Why another version manager?&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/coreybutler/nvm-windows/master/#bulb-whats-the-big-difference"&gt;what's the big difference?&lt;/a&gt;.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;p&gt;&lt;a href="https://github.com/coreybutler/nvm-windows/releases"&gt;&lt;img src="https://img.shields.io/badge/-Download%20Now!-%2322A6F2" alt="Download Now" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/coreybutler/nvm-windows/master/(https://github.com/coreybutler/nvm-windows/releases)"&gt;&lt;img src="https://img.shields.io/github/v/tag/coreybutler/nvm-windows?label=Latest%20Release&amp;amp;style=social&amp;amp;x=1" alt="GitHub tag (latest SemVer)" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/release-date/coreybutler/nvm-windows?label=Released&amp;amp;style=social" alt="GitHub Release Date" /&gt; &lt;img src="https://img.shields.io/github/downloads/coreybutler/nvm-windows/total?label=Downloads&amp;amp;style=social" alt="GitHub all releases" /&gt; &lt;a href="https://github.com/coreybutler/nvm-windows/discussions"&gt;&lt;img src="https://img.shields.io/badge/-Discuss-blue" alt="Discuss" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/tweet?hashtags=nodejs&amp;amp;original_referer=http%3A%2F%2F127.0.0.1%3A91%2F&amp;amp;text=Check%20out%20NVM%20for%20Windows!&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fgithub.com%2Fcoreybutler%2Fnvm-windows&amp;amp;via=goldglovecb"&gt;&lt;img src="https://img.shields.io/twitter/url?style=social&amp;amp;url=https%3A%2F%2Ftwitter.com%2Fintent%2Ftweet%3Fhashtags%3Dnodejs%26original_referer%3Dhttp%253A%252F%252F127.0.0.1%253A91%252F%26text%3DCheck%2520out%2520NVM%2520for%2520Windows%21%26tw_p%3Dtweetbutton%26url%3Dhttp%253A%252F%252Fgithub.com%252Fcoreybutler%252Fnvm-windows%26via%3Dgoldglovecb" alt="Twitter URL" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h5 align="center"&gt;Sponsors&lt;/h5&gt; 
&lt;div align="center"&gt; 
 &lt;table cellpadding="5" cellspacing="0" border="0" align="center"&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt;&lt;a href="https://linkedin.com/company/authorsoftware"&gt;&lt;img src="https://github.com/coreybutler/staticassets/raw/master/sponsors/logo_author_software_flat.png" width="200px" /&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td width="33%" align="center"&gt;&lt;a href="https://ecorventures.com"&gt;&lt;img src="https://avatars.githubusercontent.com/u/8259581?s=200&amp;amp;v=4" height="30px" /&gt;&lt;/a&gt;&lt;/td&gt; 
    &lt;td width="33%" align="center"&gt;&lt;a href="https://github.com/microsoft"&gt;&lt;img src="https://user-images.githubusercontent.com/770982/195955265-5c3dca78-7140-4ec6-b05a-f308518643ee.png" height="30px" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td colspan="4" align="center"&gt; &lt;a href="https://github.com/sponsors/coreybutler"&gt;&lt;img src="https://img.shields.io/github/sponsors/coreybutler?label=Individual%20Sponsors&amp;amp;logo=github&amp;amp;style=social" /&gt;&lt;/a&gt; &amp;nbsp;&lt;a href="https://github.com/sponsors/coreybutler"&gt;&lt;img src="https://img.shields.io/badge/-Become%20a%20Sponsor-yellow" /&gt;&lt;/a&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td colspan="4" align="center"&gt; &lt;img src="https://github.blog/wp-content/uploads/2020/09/github-stars-logo_Color.png" width="50" /&gt;&lt;br /&gt; &lt;b&gt;Can't sponsor?&lt;/b&gt;&lt;br /&gt;Consider &lt;a href="https://stars.github.com/nominate/" target="_blank"&gt;nominating @coreybutler for a Github star&lt;/a&gt;. &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div align="center"&gt;
 &lt;b&gt;Running into issues?&lt;/b&gt; See the 
 &lt;a href="https://github.com/coreybutler/nvm-windows/wiki/Common-Issues"&gt;common issues wiki&lt;/a&gt;.
&lt;/div&gt; 
&lt;br /&gt; 
&lt;table style="background-color:red;padding:6px;border-radius:3px;"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt; &lt;h3&gt;Seeking Feedback:&lt;/h3&gt; We're working on &lt;a href="https://github.com/coreybutler/nvm-windows/wiki/Runtime"&gt;Runtime (rt)&lt;/a&gt;, the successor to NVM For Windows. Please contribute by taking a minute to complete &lt;a href="https://t.co/oGqQCM9FPx"&gt;this form&lt;/a&gt;. Thank you! &lt;h3&gt;&lt;/h3&gt; &lt;/td&gt;
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Manage multiple installations of node.js on a Windows computer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; Similar (not identical) to &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt;, but for Windows. Has an installer. &lt;a href="https://github.com/coreybutler/nvm-windows/releases"&gt;Download Now&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;This has always been a node version manager, not an io.js manager, so there is no back-support for io.js. Node 4+ is supported. Remember when running &lt;code&gt;nvm install&lt;/code&gt; or &lt;code&gt;nvm use&lt;/code&gt;, Windows usually requires administrative rights (to create symlinks). To install the latest version of Node.js, run &lt;code&gt;nvm install latest&lt;/code&gt;. To install the latest stable version, run &lt;code&gt;nvm install lts&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/coreybutler/staticassets/raw/master/images/nvm-1.1.8-screenshot.jpg" alt="NVM for Windows" /&gt;&lt;/p&gt; 
&lt;p&gt;There are situations where the ability to switch between different versions of Node.js can be very useful. For example, if you want to test a module you're developing with the latest bleeding edge version without uninstalling the stable version of node, this utility can help.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/coreybutler/staticassets/raw/master/images/nvm-usage-highlighted.jpg" alt="Switch between stable and unstable versions." /&gt;&lt;/p&gt; 
&lt;h3&gt;Installation &amp;amp; Upgrades&lt;/h3&gt; 
&lt;h4&gt;&lt;span&gt;⭐&lt;/span&gt; &lt;span&gt;⭐&lt;/span&gt; Uninstall any pre-existing Node installations!! &lt;span&gt;⭐&lt;/span&gt; &lt;span&gt;⭐&lt;/span&gt;&lt;/h4&gt; 
&lt;p&gt;The simplest (recommended) way to get NVM for Windows running properly is to uninstall any prior Node installation &lt;em&gt;before&lt;/em&gt; installing NVM for Windows. It avoids all of the pitfalls listed below. However; you may not wish to nuke your Node installation if you've highly customized it. NVM for Windows &lt;em&gt;can&lt;/em&gt; assume management of an existing installation, but there are nuances to this (dependent entirely on the permissions of the user running the installation). If you have an administrative account, it's relatively safe to install NVM for Windows before uninstalling the original Node version. If you are working in a closed environment, such as a corporate Active Directory environment where installations/uninstallations are controlled by group policy, you should really consider removing the original version of Node before installing NVM4W.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Permission Problems&lt;/em&gt; For security reasons, Windows will not allow an application from one vendor to "uninstall" an application from a different vendor. The official NVM4W installer will attempt assume management of an existing installation of Node., but it cannot actually uninstall the original Node.js version. To work around this, NVM for Windows installer attempts to copy the original Node.js installation files to the NVM root. This includes global npm modules and configurations. Once this process is complete, the original Node.js installation can be uninstalled without losing data.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;PATH Installation Problems&lt;/em&gt; If you attempt to configure the &lt;code&gt;NVM_SYMLINK&lt;/code&gt; to use an existing directory (like &lt;code&gt;C:\Program Files\nodejs&lt;/code&gt;), it will fail because a symlink cannot overwrite a physical directory. This is not a problem if you choose a different symlink path (such as &lt;code&gt;C:\nvm\node&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;PATH Conflicts&lt;/em&gt; If you do not uninstall the original version, running &lt;code&gt;nvm use&lt;/code&gt; may appear to do nothing at all. Running &lt;code&gt;node -v&lt;/code&gt; will always show the original installation version. This is due to a &lt;a href="https://github.com/coreybutler/nvm-windows/wiki/Common-Issues#why-do-i-need-to-uninstall-nodejs-before-installing-nvm-for-windows"&gt;&lt;code&gt;PATH&lt;/code&gt; conflict&lt;/a&gt; that presents when the same application is installed multiple times. In NVM4W 1.1.11+, run &lt;code&gt;nvm debug&lt;/code&gt; to determine if you have a &lt;code&gt;PATH&lt;/code&gt; conflict.&lt;/p&gt; 
&lt;p&gt;For simpliciy, we recommend uninstalling any existing versions of Node.js before using NVM for Windows. Delete any existing Node.js installation directories (e.g., &lt;code&gt;%ProgramFiles%\nodejs&lt;/code&gt;) that might remain. NVM's generated symlink will not overwrite an existing (even empty) installation directory.&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;👀&lt;/span&gt; &lt;strong&gt;Backup any global &lt;code&gt;npmrc&lt;/code&gt; config&lt;/strong&gt; &lt;span&gt;👀&lt;/span&gt; (e.g. &lt;code&gt;%AppData%\npm\etc\npmrc&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;Alternatively, copy the settings to the user config &lt;code&gt;%UserProfile%\.npmrc&lt;/code&gt;. Delete the existing npm install location (e.g. &lt;code&gt;%AppData%\npm&lt;/code&gt;) to prevent global module conflicts.&lt;/p&gt; 
&lt;h4&gt;Install nvm-windows&lt;/h4&gt; 
&lt;p&gt;Use the &lt;a href="https://github.com/coreybutler/nvm/releases"&gt;latest installer&lt;/a&gt; (comes with an uninstaller). Alternatively, follow the &lt;a href="https://github.com/coreybutler/nvm-windows/wiki#manual-installation"&gt;manual installation&lt;/a&gt; guide.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;If NVM4W doesn't appear to work immediately after installation, restart the terminal/powershell (not the whole computer).&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/coreybutler/staticassets/raw/master/images/nvm-installer.jpg" alt="NVM for Windows Installer" /&gt;&lt;/p&gt; 
&lt;h4&gt;Reinstall any global utilities&lt;/h4&gt; 
&lt;p&gt;After install, reinstalling global utilities (e.g. yarn) will have to be done for each installed version of node:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nvm use 14.0.0
npm install -g yarn
nvm use 12.0.1
npm install -g yarn
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Upgrading nvm-windows&lt;/h3&gt; 
&lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;em&gt;As of v1.1.8, there is an upgrade utility that will automate the upgrade process.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To upgrade nvm-windows&lt;/strong&gt;, run the new installer. It will safely overwrite the files it needs to update without touching your node.js installations. Make sure you use the same installation and symlink folder. If you originally installed to the default locations, you just need to click "next" on each window until it finishes.&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;nvm-windows runs in an Admin shell&lt;/strong&gt;. You'll need to start &lt;code&gt;powershell&lt;/code&gt; or Command Prompt as Administrator to use nvm-windows&lt;/p&gt; 
&lt;p&gt;NVM for Windows is a command line tool. Simply type &lt;code&gt;nvm&lt;/code&gt; in the console for help. The basic commands are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm arch [32|64]&lt;/code&gt;&lt;/strong&gt;: Show if node is running in 32 or 64 bit mode. Specify 32 or 64 to override the default architecture.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm debug&lt;/code&gt;&lt;/strong&gt;: Check the NVM4W process for known problems.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm current&lt;/code&gt;&lt;/strong&gt;: Display active version.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm install &amp;lt;version&amp;gt; [arch]&lt;/code&gt;&lt;/strong&gt;: The version can be a specific version, "latest" for the latest current version, or "lts" for the most recent LTS version. Optionally specify whether to install the 32 or 64 bit version (defaults to system arch). Set [arch] to "all" to install 32 AND 64 bit versions. Add &lt;code&gt;--insecure&lt;/code&gt; to the end of this command to bypass SSL validation of the remote download server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm list [available]&lt;/code&gt;&lt;/strong&gt;: List the node.js installations. Type &lt;code&gt;available&lt;/code&gt; at the end to show a list of versions available for download.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm on&lt;/code&gt;&lt;/strong&gt;: Enable node.js version management.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm off&lt;/code&gt;&lt;/strong&gt;: Disable node.js version management (does not uninstall anything).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm proxy [url]&lt;/code&gt;&lt;/strong&gt;: Set a proxy to use for downloads. Leave &lt;code&gt;[url]&lt;/code&gt; blank to see the current proxy. Set &lt;code&gt;[url]&lt;/code&gt; to "none" to remove the proxy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm uninstall &amp;lt;version&amp;gt;&lt;/code&gt;&lt;/strong&gt;: Uninstall a specific version.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm use &amp;lt;version&amp;gt; [arch]&lt;/code&gt;&lt;/strong&gt;: Switch to use the specified version. Optionally use &lt;code&gt;latest&lt;/code&gt;, &lt;code&gt;lts&lt;/code&gt;, or &lt;code&gt;newest&lt;/code&gt;. &lt;code&gt;newest&lt;/code&gt; is the latest &lt;em&gt;installed&lt;/em&gt; version. Optionally specify 32/64bit architecture. &lt;code&gt;nvm use &amp;lt;arch&amp;gt;&lt;/code&gt; will continue using the selected version, but switch to 32/64 bit mode. For information about using &lt;code&gt;use&lt;/code&gt; in a specific directory (or using &lt;code&gt;.nvmrc&lt;/code&gt;), please refer to &lt;a href="https://github.com/coreybutler/nvm-windows/issues/16"&gt;issue #16&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm root &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/strong&gt;: Set the directory where nvm should store different versions of node.js. If &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; is not set, the current root will be displayed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm version&lt;/code&gt;&lt;/strong&gt;: Displays the current running version of NVM for Windows.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm node_mirror &amp;lt;node_mirror_url&amp;gt;&lt;/code&gt;&lt;/strong&gt;: Set the node mirror.People in China can use &lt;em&gt;&lt;a href="https://npmmirror.com/mirrors/node/"&gt;https://npmmirror.com/mirrors/node/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;nvm npm_mirror &amp;lt;npm_mirror_url&amp;gt;&lt;/code&gt;&lt;/strong&gt;: Set the npm mirror.People in China can use &lt;em&gt;&lt;a href="https://npmmirror.com/mirrors/npm/"&gt;https://npmmirror.com/mirrors/npm/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;span&gt;⚠&lt;/span&gt; Gotcha!&lt;/h3&gt; 
&lt;p&gt;Please note that any global npm modules you may have installed are &lt;strong&gt;not&lt;/strong&gt; shared between the various versions of node.js you have installed. Additionally, some npm modules may not be supported in the version of node you're using, so be aware of your environment as you work.&lt;/p&gt; 
&lt;h3&gt;&lt;span&gt;📛&lt;/span&gt; Antivirus&lt;/h3&gt; 
&lt;p&gt;Users have reported some problems using antivirus, specifically McAfee. It appears the antivirus software is manipulating access to the VBScript engine. See &lt;a href="https://github.com/coreybutler/nvm-windows/issues/133"&gt;issue #133&lt;/a&gt; for details and resolution.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.8 is not code signed&lt;/strong&gt;, but all other versions are signed by &lt;a href="https://ecorventures.com"&gt;Ecor Ventures LLC&lt;/a&gt;/&lt;a href="https://author.io"&gt;Author.io&lt;/a&gt;. This should help prevent false positives with most antivirus software.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;v1.1.8+ was not code signed due to an expired certificate (see the &lt;a href="https://github.com/coreybutler/nvm-windows/releases/tag/1.1.8"&gt;release notes&lt;/a&gt; for reasons). &lt;strong&gt;v1.1.9 &lt;em&gt;is&lt;/em&gt; code signed&lt;/strong&gt; thanks to &lt;a href="https://github.com/ajyong"&gt;ajyong&lt;/a&gt;, who sponsored the new certificate.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Using Yarn&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt; &lt;code&gt;npm i -g yarn&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/coreybutler/nvm-windows/wiki/Common-Issues#how-do-i-use-yarn-with-nvm-windows"&gt;wiki&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Build from source&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install go from &lt;a href="http://golang.org"&gt;http://golang.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Download source / Git Clone the repo&lt;/li&gt; 
 &lt;li&gt;Change GOARCH to amd64 in build.bat if you feel like building a 64-bit executable&lt;/li&gt; 
 &lt;li&gt;Fire up a Windows command prompt and change directory to project dir&lt;/li&gt; 
 &lt;li&gt;Execute &lt;code&gt;go get github.com/blang/semver&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Execute &lt;code&gt;go get github.com/olekukonko/tablewriter&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Execute &lt;code&gt;build.bat&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Check the &lt;code&gt;dist&lt;/code&gt;directory for generated setup program.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;&lt;span&gt;💡&lt;/span&gt; Why another version manager?&lt;/h2&gt; 
&lt;p&gt;There are several version managers for node.js. Tools like &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt; and &lt;a href="https://github.com/tj/n"&gt;n&lt;/a&gt; only run on Mac OSX and Linux. Windows users are left in the cold? No. &lt;a href="https://github.com/hakobera/nvmw"&gt;nvmw&lt;/a&gt; and &lt;a href="https://github.com/marcelklehr/nodist"&gt;nodist&lt;/a&gt; are both designed for Windows. So, why another version manager for Windows?&lt;/p&gt; 
&lt;p&gt;The architecture of most node version managers for Windows rely on &lt;code&gt;.bat&lt;/code&gt; files, which do some clever tricks to set or mimic environment variables. Some of them use node itself (once it's downloaded), which is admirable, but prone to problems. Right around node 0.10.30, the installation structure changed a little, causing some of these to just stop working with anything new.&lt;/p&gt; 
&lt;p&gt;Additionally, some users struggle to install these modules since it requires a little more knowledge of node's installation structure. I believe if it were easier for people to switch between versions, people might take the time to test their code on back and future versions... which is just good practice.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;💡&lt;/span&gt; What's the big difference?&lt;/h2&gt; 
&lt;p&gt;First and foremost, this version of nvm has no dependency on node. It's written in &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt;, which is a much more structured approach than hacking around a limited &lt;code&gt;.bat&lt;/code&gt; file. It does not rely on having an existing node installation. Go offers the ability to create a Mac/Linux version on the same code base. In fact, this is already underway.&lt;/p&gt; 
&lt;p&gt;The control mechanism is also quite different. There are two general ways to support multiple node installations with hot switching capabilities. The first is to modify the system &lt;code&gt;PATH&lt;/code&gt; any time you switch versions, or bypass it by using a &lt;code&gt;.bat&lt;/code&gt; file to mimic the node executable and redirect accordingly. This always seemed a little hackish to me, and there are some quirks as a result of this implementation.&lt;/p&gt; 
&lt;p&gt;The second option is to use a symlink. This concept requires putting the symlink in the system &lt;code&gt;PATH&lt;/code&gt;, then updating its target to the node installation directory you want to use. This is a straightforward approach, and seems to be what people recommend.... until they realize just how much of a pain symlinks are on Windows. This is why it hasn't happened before.&lt;/p&gt; 
&lt;p&gt;In order to create/modify a symlink, you must be running as an admin, and you must get around Windows UAC (that annoying prompt). Luckily, this is a challenge I already solved with some helper scripts in &lt;a href="https://github.com/coreybutler/node-windows"&gt;node-windows&lt;/a&gt;. As a result, NVM for Windows maintains a single symlink that is put in the system &lt;code&gt;PATH&lt;/code&gt; during installation only. Switching to different versions of node is a matter of switching the symlink target. As a result, this utility does &lt;strong&gt;not&lt;/strong&gt; require you to run &lt;code&gt;nvm use x.x.x&lt;/code&gt; every time you open a console window. When you &lt;em&gt;do&lt;/em&gt; run &lt;code&gt;nvm use x.x.x&lt;/code&gt;, the active version of node is automatically updated across all open console windows. It also persists between system reboots, so you only need to use nvm when you want to make a change.&lt;/p&gt; 
&lt;p&gt;NVM for Windows comes with an installer, courtesy of a byproduct of my work on &lt;a href="https://preview.fenixwebserver.com"&gt;Fenix Web Server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Overall, this project brings together some ideas, a few battle-hardened pieces of other modules, and support for newer versions of node.&lt;/p&gt; 
&lt;p&gt;NVM for Windows recognizes the "latest" versions using a &lt;a href="https://nodejs.org/download/release/index.json"&gt;list&lt;/a&gt; provided by the Node project. Version 1.1.1+ use this list. Before this list existed, I was scraping releases and serving it as a standalone &lt;a href="https://github.com/coreybutler/nodedistro"&gt;data feed&lt;/a&gt;. This list was used in versions 1.1.0 and prior, but is now deprecated.&lt;/p&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;I needed it, plain and simple. Additionally, it's apparent that &lt;a href="https://github.com/nodejs/node-v0.x-archive/issues/8075"&gt;support for multiple versions&lt;/a&gt; is not coming to node core. It was also an excuse to play with Go.&lt;/p&gt; 
&lt;h2&gt;Why Go? Why not Node?&lt;/h2&gt; 
&lt;p&gt;I chose Go because it is cross-platform, felt like less overhead than Java, has been around longer than most people think. Plus, I wanted to experiment with it. I've been asked why I didn't write it with Node. Trying to write a tool with the tool you're trying to install doesn't make sense to me. As a result, my project requirements for this were simple... something that's not Node. Node will continue to evolve and change. If you need a reminder of that, remember io.js, Ayo, all the breaking changes between 4.x.x and 6.x.x, and the shift to ES Modules in 12+. Change is inevitable in the world of software. JavaScript is extremely dynamic.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🙏&lt;/span&gt; Thanks&lt;/h2&gt; 
&lt;p&gt;Thanks to everyone who has submitted issues on and off Github, made suggestions, and generally helped make this a better project. Special thanks to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vkbansal"&gt;@vkbansal&lt;/a&gt;, who provided significant early feedback throughout the early releases.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rainabba"&gt;@rainabba&lt;/a&gt; and &lt;a href="https://github.com/sullivanpt"&gt;@sullivanpt&lt;/a&gt; for getting Node v4 support integrated.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/s-h-a-d-o-w"&gt;@s-h-a-d-o-w&lt;/a&gt; who resolved the longstanding space escaping issue in path names (&lt;a href="https://github.com/coreybutler/nvm-windows/pull/355"&gt;#355&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ajyong"&gt;ajyong&lt;/a&gt; who sponsored the code signing certificate in late 2021.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src="https://contrib.rocks/image?repo=coreybutler/nvm-windows" alt="Contributors" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hashicorp/consul</title>
      <link>https://github.com/hashicorp/consul</link>
      <description>&lt;p&gt;Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;img src="https://raw.githubusercontent.com/hashicorp/consul/main/website/public/img/logo.svg?sanitize=true" align="left" height="46px" alt="Consul logo" /&gt; &lt;span&gt;Consul&lt;/span&gt; &lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/hashicorp/consul/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-BUSL--1.1-yellow.svg?sanitize=true" alt="License: BUSL-1.1" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/hashicorp/consul"&gt;&lt;img src="https://img.shields.io/docker/pulls/hashicorp/consul.svg?sanitize=true" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/hashicorp/consul"&gt;&lt;img src="https://goreportcard.com/badge/github.com/hashicorp/consul" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation and Tutorials: [https://developer.hashicorp.com/consul]&lt;/li&gt; 
 &lt;li&gt;Forum: &lt;a href="https://discuss.hashicorp.com/c/consul"&gt;Discuss&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Consul provides several key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Datacenter&lt;/strong&gt; - Consul is built to be datacenter aware, and can support any number of regions without complex configuration.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Service Mesh&lt;/strong&gt; - Consul Service Mesh enables secure service-to-service communication with automatic TLS encryption and identity-based authorization. Applications can use sidecar proxies in a service mesh configuration to establish TLS connections for inbound and outbound connections with Transparent Proxy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;API Gateway&lt;/strong&gt; - Consul API Gateway manages access to services within Consul Service Mesh, allow users to define traffic and authorization policies to services deployed within the mesh.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Service Discovery&lt;/strong&gt; - Consul makes it simple for services to register themselves and to discover other services via a DNS or HTTP interface. External services such as SaaS providers can be registered as well.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Health Checking&lt;/strong&gt; - Health Checking enables Consul to quickly alert operators about any issues in a cluster. The integration with service discovery prevents routing traffic to unhealthy hosts and enables service level circuit breakers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dynamic App Configuration&lt;/strong&gt; - An HTTP API that allows users to store indexed objects within Consul, for storing configuration parameters and application metadata.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Consul runs on Linux, macOS, FreeBSD, Solaris, and Windows and includes an optional &lt;a href="https://demo.consul.io"&gt;browser based UI&lt;/a&gt;. A commercial version called &lt;a href="https://developer.hashicorp.com/docs/enterprise"&gt;Consul Enterprise&lt;/a&gt; is also available.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;: We take Consul's security and our users' trust very seriously. If you believe you have found a security issue in Consul, please &lt;a href="https://www.hashicorp.com/security#vulnerability-reporting"&gt;responsibly disclose&lt;/a&gt; by contacting us at &lt;a href="mailto:security@hashicorp.com"&gt;security@hashicorp.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;A few quick start guides are available on the Consul website:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Standalone binary install:&lt;/strong&gt; &lt;a href="https://learn.hashicorp.com/collections/consul/get-started-vms"&gt;https://learn.hashicorp.com/collections/consul/get-started-vms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Minikube install:&lt;/strong&gt; &lt;a href="https://learn.hashicorp.com/tutorials/consul/kubernetes-minikube"&gt;https://learn.hashicorp.com/tutorials/consul/kubernetes-minikube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kind install:&lt;/strong&gt; &lt;a href="https://learn.hashicorp.com/tutorials/consul/kubernetes-kind"&gt;https://learn.hashicorp.com/tutorials/consul/kubernetes-kind&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kubernetes install:&lt;/strong&gt; &lt;a href="https://learn.hashicorp.com/tutorials/consul/kubernetes-deployment-guide"&gt;https://learn.hashicorp.com/tutorials/consul/kubernetes-deployment-guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Deploy HCP Consul:&lt;/strong&gt; &lt;a href="https://learn.hashicorp.com/tutorials/consul/hcp-gs-deploy"&gt;https://learn.hashicorp.com/tutorials/consul/hcp-gs-deploy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Full, comprehensive documentation is available on the Consul website: &lt;a href="https://developer.hashicorp.com/consul/docs"&gt;https://developer.hashicorp.com/consul/docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you for your interest in contributing! Please refer to &lt;a href="https://github.com/hashicorp/consul/raw/main/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for guidance. For contributions specifically to the browser based UI, please refer to the UI's &lt;a href="https://github.com/hashicorp/consul/raw/main/ui/packages/consul-ui/README.md"&gt;README.md&lt;/a&gt; for guidance.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VictoriaMetrics/VictoriaMetrics</title>
      <link>https://github.com/VictoriaMetrics/VictoriaMetrics</link>
      <description>&lt;p&gt;VictoriaMetrics: fast, cost-effective monitoring solution and time series database&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VictoriaMetrics&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/VictoriaMetrics/VictoriaMetrics?sort=semver&amp;amp;label=&amp;amp;filter=!*-victorialogs&amp;amp;logo=github&amp;amp;labelColor=gray&amp;amp;color=gray&amp;amp;link=https%3A%2F%2Fgithub.com%2FVictoriaMetrics%2FVictoriaMetrics%2Freleases%2Flatest" alt="Latest Release" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/docker/pulls/victoriametrics/victoria-metrics?label=&amp;amp;logo=docker&amp;amp;logoColor=white&amp;amp;labelColor=2496ED&amp;amp;color=2496ED&amp;amp;link=https%3A%2F%2Fhub.docker.com%2Fr%2Fvictoriametrics%2Fvictoria-metrics" alt="Docker Pulls" /&gt; &lt;a href="https://goreportcard.com/report/github.com/VictoriaMetrics/VictoriaMetrics"&gt;&lt;img src="https://goreportcard.com/badge/github.com/VictoriaMetrics/VictoriaMetrics?link=https%3A%2F%2Fgoreportcard.com%2Freport%2Fgithub.com%2FVictoriaMetrics%2FVictoriaMetrics" alt="Go Report" /&gt;&lt;/a&gt; &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics/actions/workflows/main.yml"&gt;&lt;img src="https://github.com/VictoriaMetrics/VictoriaMetrics/actions/workflows/main.yml/badge.svg?branch=master&amp;amp;link=https%3A%2F%2Fgithub.com%2FVictoriaMetrics%2FVictoriaMetrics%2Factions" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://app.codecov.io/gh/VictoriaMetrics/VictoriaMetrics"&gt;&lt;img src="https://codecov.io/gh/VictoriaMetrics/VictoriaMetrics/branch/master/graph/badge.svg?link=https%3A%2F%2Fcodecov.io%2Fgh%2FVictoriaMetrics%2FVictoriaMetrics" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/VictoriaMetrics/VictoriaMetrics?labelColor=green&amp;amp;label=&amp;amp;link=https%3A%2F%2Fgithub.com%2FVictoriaMetrics%2FVictoriaMetrics%2Fblob%2Fmaster%2FLICENSE" alt="License" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/Join-4A154B?logo=slack&amp;amp;link=https%3A%2F%2Fslack.victoriametrics.com" alt="Slack" /&gt; &lt;a href="https://x.com/VictoriaMetrics/"&gt;&lt;img src="https://img.shields.io/twitter/follow/VictoriaMetrics?style=flat&amp;amp;label=Follow&amp;amp;color=black&amp;amp;logo=x&amp;amp;labelColor=black&amp;amp;link=https%3A%2F%2Fx.com%2FVictoriaMetrics" alt="X" /&gt;&lt;/a&gt; &lt;a href="https://www.reddit.com/r/VictoriaMetrics/"&gt;&lt;img src="https://img.shields.io/reddit/subreddit-subscribers/VictoriaMetrics?style=flat&amp;amp;label=Join&amp;amp;labelColor=red&amp;amp;logoColor=white&amp;amp;logo=reddit&amp;amp;link=https%3A%2F%2Fwww.reddit.com%2Fr%2FVictoriaMetrics" alt="Reddit" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;picture&gt; 
 &lt;source srcset="docs/victoriametrics/logo_white.webp" media="(prefers-color-scheme: dark)" /&gt; 
 &lt;source srcset="docs/victoriametrics/logo.webp" media="(prefers-color-scheme: light)" /&gt; 
 &lt;img src="https://raw.githubusercontent.com/VictoriaMetrics/VictoriaMetrics/master/docs/victoriametrics/logo.webp" width="300" alt="VictoriaMetrics logo" /&gt; 
&lt;/picture&gt; 
&lt;p&gt;VictoriaMetrics is a fast, cost-saving, and scalable solution for monitoring and managing time series data. It delivers high performance and reliability, making it an ideal choice for businesses of all sizes.&lt;/p&gt; 
&lt;p&gt;Here are some resources and information about VictoriaMetrics:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation: &lt;a href="https://docs.victoriametrics.com"&gt;docs.victoriametrics.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Case studies: &lt;a href="https://docs.victoriametrics.com/victoriametrics/casestudies/"&gt;Grammarly, Roblox, Wix,...&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Available: &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics/releases/latest"&gt;Binary releases&lt;/a&gt;, docker images &lt;a href="https://hub.docker.com/r/victoriametrics/victoria-metrics/"&gt;Docker Hub&lt;/a&gt; and &lt;a href="https://quay.io/repository/victoriametrics/victoria-metrics"&gt;Quay&lt;/a&gt;, &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics"&gt;Source code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Deployment types: &lt;a href="https://docs.victoriametrics.com/"&gt;Single-node version&lt;/a&gt;, &lt;a href="https://docs.victoriametrics.com/victoriametrics/cluster-victoriametrics/"&gt;Cluster version&lt;/a&gt;, and &lt;a href="https://docs.victoriametrics.com/victoriametrics/enterprise/"&gt;Enterprise version&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Changelog: &lt;a href="https://docs.victoriametrics.com/victoriametrics/changelog/"&gt;CHANGELOG&lt;/a&gt;, and &lt;a href="https://docs.victoriametrics.com/victoriametrics/single-server-victoriametrics/#how-to-upgrade-victoriametrics"&gt;How to upgrade&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Community: &lt;a href="https://slack.victoriametrics.com/"&gt;Slack&lt;/a&gt;, &lt;a href="https://x.com/VictoriaMetrics"&gt;X (Twitter)&lt;/a&gt;, &lt;a href="https://www.linkedin.com/company/victoriametrics/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://www.youtube.com/@VictoriaMetrics"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Yes, we open-source both the single-node VictoriaMetrics and the cluster version.&lt;/p&gt; 
&lt;h2&gt;Prominent features&lt;/h2&gt; 
&lt;p&gt;VictoriaMetrics is optimized for timeseries data, even when old time series are constantly replaced by new ones at a high rate, it offers a lot of features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Long-term storage for Prometheus&lt;/strong&gt; or as a drop-in replacement for Prometheus and Graphite in Grafana.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful stream aggregation&lt;/strong&gt;: Can be used as a StatsD alternative.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ideal for big data&lt;/strong&gt;: Works well with large amounts of time series data from APM, Kubernetes, IoT sensors, connected cars, industrial telemetry, financial data and various &lt;a href="https://docs.victoriametrics.com/victoriametrics/enterprise/"&gt;Enterprise workloads&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Query language&lt;/strong&gt;: Supports both PromQL and the more performant MetricsQL.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy to setup&lt;/strong&gt;: No dependencies, single &lt;a href="https://medium.com/@valyala/stripping-dependency-bloat-in-victoriametrics-docker-image-983fb5912b0d"&gt;small binary&lt;/a&gt;, configuration through command-line flags, but the default is also fine-tuned; backup and restore with &lt;a href="https://medium.com/@valyala/how-victoriametrics-makes-instant-snapshots-for-multi-terabyte-time-series-data-e1f3fb0e0282"&gt;instant snapshots&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Global query view&lt;/strong&gt;: Multiple Prometheus instances or any other data sources may ingest data into VictoriaMetrics and queried via a single query.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Various Protocols&lt;/strong&gt;: Support metric scraping, ingestion and backfilling in various protocol. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/single-server-victoriametrics/#how-to-scrape-prometheus-exporters-such-as-node-exporter"&gt;Prometheus exporters&lt;/a&gt;, &lt;a href="https://docs.victoriametrics.com/victoriametrics/integrations/prometheus/"&gt;Prometheus remote write API&lt;/a&gt;, &lt;a href="https://docs.victoriametrics.com/victoriametrics/single-server-victoriametrics/#how-to-import-data-in-prometheus-exposition-format"&gt;Prometheus exposition format&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/integrations/influxdb/"&gt;InfluxDB line protocol&lt;/a&gt; over HTTP, TCP and UDP.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/integrations/graphite/#ingesting"&gt;Graphite plaintext protocol&lt;/a&gt; with &lt;a href="https://graphite.readthedocs.io/en/latest/tags.html#carbon"&gt;tags&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/integrations/opentsdb/#sending-data-via-telnet"&gt;OpenTSDB put message&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/integrations/opentsdb/#sending-data-via-http"&gt;HTTP OpenTSDB /api/put requests&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/single-server-victoriametrics/#how-to-import-data-in-json-line-format"&gt;JSON line format&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/single-server-victoriametrics/#how-to-import-csv-data"&gt;Arbitrary CSV data&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/single-server-victoriametrics/#how-to-import-data-in-native-format"&gt;Native binary format&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/integrations/datadog/"&gt;DataDog agent or DogStatsD&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/integrations/newrelic/#sending-data-from-agent"&gt;NewRelic infrastructure agent&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.victoriametrics.com/victoriametrics/single-server-victoriametrics/#sending-data-via-opentelemetry"&gt;OpenTelemetry metrics format&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NFS-based storages&lt;/strong&gt;: Supports storing data on NFS-based storages such as Amazon EFS, Google Filestore.&lt;/li&gt; 
 &lt;li&gt;And many other features such as metrics relabeling, cardinality limiter, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Enterprise version&lt;/h2&gt; 
&lt;p&gt;In addition, the Enterprise version includes extra features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Anomaly detection&lt;/strong&gt;: Automation and simplification of your alerting rules, covering complex anomalies found in metrics data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backup automation&lt;/strong&gt;: Automates regular backup procedures.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple retentions&lt;/strong&gt;: Reducing storage costs by specifying different retentions for different datasets.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Downsampling&lt;/strong&gt;: Reducing storage costs and increasing performance for queries over historical data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stable releases&lt;/strong&gt; with long-term support lines (&lt;a href="https://docs.victoriametrics.com/victoriametrics/lts-releases/"&gt;LTS&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Comprehensive support&lt;/strong&gt;: First-class consulting, feature requests and technical support provided by the core VictoriaMetrics dev team.&lt;/li&gt; 
 &lt;li&gt;Many other features, which you can read about on &lt;a href="https://docs.victoriametrics.com/victoriametrics/enterprise/"&gt;the Enterprise page&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="mailto:info@victoriametrics.com"&gt;Contact us&lt;/a&gt; if you need enterprise support for VictoriaMetrics. Or you can request a free trial license &lt;a href="https://victoriametrics.com/products/enterprise/trial/"&gt;here&lt;/a&gt;, downloaded Enterprise binaries are available at &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics/releases/latest"&gt;Github Releases&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We strictly apply security measures in everything we do. VictoriaMetrics has achieved security certifications for Database Software Development and Software-Based Monitoring Services. See &lt;a href="https://victoriametrics.com/security/"&gt;Security page&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;Some good benchmarks VictoriaMetrics achieved:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Minimal memory footprint&lt;/strong&gt;: handling millions of unique timeseries with &lt;a href="https://medium.com/@valyala/insert-benchmarks-with-inch-influxdb-vs-victoriametrics-e31a41ae2893"&gt;10x less RAM&lt;/a&gt; than InfluxDB, up to &lt;a href="https://valyala.medium.com/prometheus-vs-victoriametrics-benchmark-on-node-exporter-metrics-4ca29c75590f"&gt;7x less RAM&lt;/a&gt; than Prometheus, Thanos or Cortex.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly scalable and performance&lt;/strong&gt; for &lt;a href="https://medium.com/@valyala/high-cardinality-tsdb-benchmarks-victoriametrics-vs-timescaledb-vs-influxdb-13e6ee64dd6b"&gt;data ingestion&lt;/a&gt; and &lt;a href="https://medium.com/@valyala/when-size-matters-benchmarking-victoriametrics-vs-timescale-and-influxdb-6035811952d4"&gt;querying&lt;/a&gt;, &lt;a href="https://medium.com/@valyala/insert-benchmarks-with-inch-influxdb-vs-victoriametrics-e31a41ae2893"&gt;20x outperforms&lt;/a&gt; InfluxDB and TimescaleDB.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;High data compression&lt;/strong&gt;: &lt;a href="https://medium.com/@valyala/when-size-matters-benchmarking-victoriametrics-vs-timescale-and-influxdb-6035811952d4"&gt;70x more data points&lt;/a&gt; may be stored into limited storage than TimescaleDB, &lt;a href="https://valyala.medium.com/prometheus-vs-victoriametrics-benchmark-on-node-exporter-metrics-4ca29c75590f"&gt;7x less storage&lt;/a&gt; space is required than Prometheus, Thanos or Cortex.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reducing storage costs&lt;/strong&gt;: &lt;a href="https://docs.victoriametrics.com/victoriametrics/casestudies/#grammarly"&gt;10x more effective&lt;/a&gt; than Graphite according to the Grammarly case study.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;A single-node VictoriaMetrics&lt;/strong&gt; can replace medium-sized clusters built with competing solutions such as Thanos, M3DB, Cortex, InfluxDB or TimescaleDB. See &lt;a href="https://medium.com/@valyala/comparing-thanos-to-victoriametrics-cluster-b193bea1683"&gt;VictoriaMetrics vs Thanos&lt;/a&gt;, &lt;a href="https://medium.com/@valyala/measuring-vertical-scalability-for-time-series-databases-in-google-cloud-92550d78d8ae"&gt;Measuring vertical scalability&lt;/a&gt;, &lt;a href="https://promcon.io/2019-munich/talks/remote-write-storage-wars/"&gt;Remote write storage wars - PromCon 2019&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optimized for storage&lt;/strong&gt;: &lt;a href="https://medium.com/@valyala/high-cardinality-tsdb-benchmarks-victoriametrics-vs-timescaledb-vs-influxdb-13e6ee64dd6b"&gt;Works well with high-latency IO&lt;/a&gt; and low IOPS (HDD and network storage in AWS, Google Cloud, Microsoft Azure, etc.).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community and contributions&lt;/h2&gt; 
&lt;p&gt;Feel free asking any questions regarding VictoriaMetrics:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://slack.victoriametrics.com/"&gt;Slack Inviter&lt;/a&gt; and &lt;a href="https://victoriametrics.slack.com/"&gt;Slack channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/VictoriaMetrics/"&gt;X (Twitter)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/victoriametrics/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.reddit.com/r/VictoriaMetrics/"&gt;Reddit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://t.me/VictoriaMetrics_en"&gt;Telegram-en&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://t.me/VictoriaMetrics_ru1"&gt;Telegram-ru&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mastodon.social/@victoriametrics/"&gt;Mastodon&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you like VictoriaMetrics and want to contribute, then please &lt;a href="https://docs.victoriametrics.com/victoriametrics/contributing/"&gt;read these docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;VictoriaMetrics Logo&lt;/h2&gt; 
&lt;p&gt;The provided &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics/raw/master/VM_logo.zip"&gt;ZIP file&lt;/a&gt; contains three folders with different logo orientations. Each folder includes the following file types:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;JPEG: Preview files&lt;/li&gt; 
 &lt;li&gt;PNG: Preview files with transparent background&lt;/li&gt; 
 &lt;li&gt;AI: Adobe Illustrator files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;VictoriaMetrics Logo Usage Guidelines&lt;/h3&gt; 
&lt;h4&gt;Font&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Font Used: Lato Black&lt;/li&gt; 
 &lt;li&gt;Download here: &lt;a href="https://fonts.google.com/specimen/Lato"&gt;Lato Font&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Color Palette&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Black &lt;a href="https://www.color-hex.com/color/000000"&gt;#000000&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Purple &lt;a href="https://www.color-hex.com/color/4d0e82"&gt;#4d0e82&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Orange &lt;a href="https://www.color-hex.com/color/ff2e00"&gt;#ff2e00&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;White &lt;a href="https://www.color-hex.com/color/ffffff"&gt;#ffffff&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Logo Usage Rules&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Only use the Lato Black font as specified.&lt;/li&gt; 
 &lt;li&gt;Maintain sufficient clear space around the logo for visibility.&lt;/li&gt; 
 &lt;li&gt;Do not modify the spacing, alignment, or positioning of design elements.&lt;/li&gt; 
 &lt;li&gt;You may resize the logo as needed, but ensure all proportions remain intact.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thank you for your cooperation!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spf13/cobra</title>
      <link>https://github.com/spf13/cobra</link>
      <description>&lt;p&gt;A Commander for modern Go CLI interactions&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://cobra.dev"&gt; &lt;img width="512" height="535" alt="cobra-logo" src="https://github.com/user-attachments/assets/c8bf9aad-b5ae-41d3-8899-d83baec10af8" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Cobra is a library for creating powerful modern CLI applications.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://cobra.dev"&gt;Visit Cobra.dev for extensive documentation&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Cobra is used in many Go projects such as &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://gohugo.io"&gt;Hugo&lt;/a&gt;, and &lt;a href="https://github.com/cli/cli"&gt;GitHub CLI&lt;/a&gt; to name a few. &lt;a href="https://raw.githubusercontent.com/spf13/cobra/main/site/content/projects_using_cobra.md"&gt;This list&lt;/a&gt; contains a more extensive list of projects using Cobra.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/spf13/cobra/actions?query=workflow%3ATest"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/spf13/cobra/test.yml?branch=main&amp;amp;longCache=true&amp;amp;label=Test&amp;amp;logo=github%20actions&amp;amp;logoColor=fff" alt="" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/spf13/cobra"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/spf13/cobra.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/spf13/cobra"&gt;&lt;img src="https://goreportcard.com/badge/github.com/spf13/cobra" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://gophers.slack.com/archives/CD3LP1199"&gt;&lt;img src="https://img.shields.io/badge/Slack-cobra-brightgreen" alt="Slack" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center" markdown="1"&gt; 
 &lt;sup&gt;Supported by:&lt;/sup&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;a href="https://www.warp.dev/cobra"&gt; &lt;img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae" /&gt; &lt;/a&gt; 
 &lt;h3&gt;&lt;a href="https://www.warp.dev/cobra"&gt;Warp, the AI terminal for devs&lt;/a&gt;&lt;/h3&gt; 
 &lt;p&gt;&lt;a href="https://www.warp.dev/cobra"&gt;Try Cobra in Warp today&lt;/a&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;Cobra is a library providing a simple interface to create powerful modern CLI interfaces similar to git &amp;amp; go tools.&lt;/p&gt; 
&lt;p&gt;Cobra provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Easy subcommand-based CLIs: &lt;code&gt;app server&lt;/code&gt;, &lt;code&gt;app fetch&lt;/code&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;Fully POSIX-compliant flags (including short &amp;amp; long versions)&lt;/li&gt; 
 &lt;li&gt;Nested subcommands&lt;/li&gt; 
 &lt;li&gt;Global, local and cascading flags&lt;/li&gt; 
 &lt;li&gt;Intelligent suggestions (&lt;code&gt;app srver&lt;/code&gt;... did you mean &lt;code&gt;app server&lt;/code&gt;?)&lt;/li&gt; 
 &lt;li&gt;Automatic help generation for commands and flags&lt;/li&gt; 
 &lt;li&gt;Grouping help for subcommands&lt;/li&gt; 
 &lt;li&gt;Automatic help flag recognition of &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, etc.&lt;/li&gt; 
 &lt;li&gt;Automatically generated shell autocomplete for your application (bash, zsh, fish, powershell)&lt;/li&gt; 
 &lt;li&gt;Automatically generated man pages for your application&lt;/li&gt; 
 &lt;li&gt;Command aliases so you can change things without breaking them&lt;/li&gt; 
 &lt;li&gt;The flexibility to define your own help, usage, etc.&lt;/li&gt; 
 &lt;li&gt;Optional seamless integration with &lt;a href="https://github.com/spf13/viper"&gt;viper&lt;/a&gt; for 12-factor apps&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Concepts&lt;/h1&gt; 
&lt;p&gt;Cobra is built on a structure of commands, arguments &amp;amp; flags.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Commands&lt;/strong&gt; represent actions, &lt;strong&gt;Args&lt;/strong&gt; are things and &lt;strong&gt;Flags&lt;/strong&gt; are modifiers for those actions.&lt;/p&gt; 
&lt;p&gt;The best applications read like sentences when used, and as a result, users intuitively know how to interact with them.&lt;/p&gt; 
&lt;p&gt;The pattern to follow is &lt;code&gt;APPNAME VERB NOUN --ADJECTIVE&lt;/code&gt; or &lt;code&gt;APPNAME COMMAND ARG --FLAG&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;A few good real world examples may better illustrate this point.&lt;/p&gt; 
&lt;p&gt;In the following example, 'server' is a command, and 'port' is a flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;hugo server --port=1313
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this command we are telling Git to clone the url bare.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone URL --bare
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commands&lt;/h2&gt; 
&lt;p&gt;Command is the central point of the application. Each interaction that the application supports will be contained in a Command. A command can have children commands and optionally run an action.&lt;/p&gt; 
&lt;p&gt;In the example above, 'server' is the command.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/spf13/cobra#Command"&gt;More about cobra.Command&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Flags&lt;/h2&gt; 
&lt;p&gt;A flag is a way to modify the behavior of a command. Cobra supports fully POSIX-compliant flags as well as the Go &lt;a href="https://golang.org/pkg/flag/"&gt;flag package&lt;/a&gt;. A Cobra command can define flags that persist through to children commands and flags that are only available to that command.&lt;/p&gt; 
&lt;p&gt;In the example above, 'port' is the flag.&lt;/p&gt; 
&lt;p&gt;Flag functionality is provided by the &lt;a href="https://github.com/spf13/pflag"&gt;pflag library&lt;/a&gt;, a fork of the flag standard library which maintains the same interface while adding POSIX compliance.&lt;/p&gt; 
&lt;h1&gt;Installing&lt;/h1&gt; 
&lt;p&gt;Using Cobra is easy. First, use &lt;code&gt;go get&lt;/code&gt; to install the latest version of the library.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go get -u github.com/spf13/cobra@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, include Cobra in your application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/spf13/cobra"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;cobra-cli&lt;/code&gt; is a command line program to generate cobra applications and command files. It will bootstrap your application scaffolding to rapidly develop a Cobra-based application. It is the easiest way to incorporate Cobra into your application.&lt;/p&gt; 
&lt;p&gt;It can be installed by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go install github.com/spf13/cobra-cli@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For complete details on using the Cobra-CLI generator, please read &lt;a href="https://github.com/spf13/cobra-cli/raw/main/README.md"&gt;The Cobra Generator README&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For complete details on using the Cobra library, please read &lt;a href="https://raw.githubusercontent.com/spf13/cobra/main/site/content/user_guide.md"&gt;The Cobra User Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Cobra is released under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/spf13/cobra/main/LICENSE.txt"&gt;LICENSE.txt&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trufflesecurity/trufflehog</title>
      <link>https://github.com/trufflesecurity/trufflehog</link>
      <description>&lt;p&gt;Find, verify, and analyze leaked credentials&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="GoReleaser Logo" src="https://storage.googleapis.com/trufflehog-static-sources/pixel_pig.png" height="140" /&gt; &lt;/p&gt;
&lt;h2 align="center"&gt;TruffleHog&lt;/h2&gt; 
&lt;p align="center"&gt;Find leaked credentials.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/trufflesecurity/trufflehog/v3"&gt;&lt;img src="https://goreportcard.com/badge/github.com/trufflesecurity/trufflehog/v3" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-AGPL--3.0-brightgreen" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors"&gt;&lt;img src="https://img.shields.io/github/directory-file-count/trufflesecurity/truffleHog/pkg/detectors?label=Total%20Detectors&amp;amp;type=dir" alt="Total Detectors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;h1&gt;&lt;span&gt;🔎&lt;/span&gt; &lt;em&gt;Now Scanning&lt;/em&gt;&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/assets/scanning_logos.svg?sanitize=true" /&gt; 
 &lt;p&gt;&lt;strong&gt;...and more&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;To learn more about TruffleHog and its features and capabilities, visit our &lt;a href="https://trufflesecurity.com/trufflehog?gclid=CjwKCAjwouexBhAuEiwAtW_Zx5IW87JNj97Ci7heFnA5ar6-DuNzT2Y5nIl9DuZ-FOUqx0Qg3vb9nxoClcEQAvD_BwE"&gt;product page&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;&lt;span&gt;🌐&lt;/span&gt; TruffleHog Enterprise&lt;/h1&gt; 
&lt;p&gt;Are you interested in continuously monitoring &lt;strong&gt;Git, Jira, Slack, Confluence, Microsoft Teams, Sharepoint, and more..&lt;/strong&gt; for credentials? We have an enterprise product that can help! Learn more at &lt;a href="https://trufflesecurity.com/trufflehog-enterprise"&gt;https://trufflesecurity.com/trufflehog-enterprise&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We take the revenue from the enterprise product to fund more awesome open source projects that the whole community can benefit from.&lt;/p&gt;  
&lt;h1&gt;What is TruffleHog 🐽&lt;/h1&gt; 
&lt;p&gt;TruffleHog is the most powerful secrets &lt;strong&gt;Discovery, Classification, Validation,&lt;/strong&gt; and &lt;strong&gt;Analysis&lt;/strong&gt; tool. In this context, secret refers to a credential a machine uses to authenticate itself to another machine. This includes API keys, database passwords, private encryption keys, and more...&lt;/p&gt; 
&lt;h2&gt;Discovery 🔍&lt;/h2&gt; 
&lt;p&gt;TruffleHog can look for secrets in many places including Git, chats, wikis, logs, API testing platforms, object stores, filesystems and more&lt;/p&gt; 
&lt;h2&gt;Classification 📁&lt;/h2&gt; 
&lt;p&gt;TruffleHog classifies over 800 secret types, mapping them back to the specific identity they belong to. Is it an AWS secret? Stripe secret? Cloudflare secret? Postgres password? SSL Private key? Sometimes it's hard to tell looking at it, so TruffleHog classifies everything it finds.&lt;/p&gt; 
&lt;h2&gt;Validation ✅&lt;/h2&gt; 
&lt;p&gt;For every secret TruffleHog can classify, it can also log in to confirm if that secret is live or not. This step is critical to know if there’s an active present danger or not.&lt;/p&gt; 
&lt;h2&gt;Analysis 🔬&lt;/h2&gt; 
&lt;p&gt;For the 20 some of the most commonly leaked out credential types, instead of sending one request to check if the secret can log in, TruffleHog can send many requests to learn everything there is to know about the secret. Who created it? What resources can it access? What permissions does it have on those resources?&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;📢&lt;/span&gt; Join Our Community&lt;/h1&gt; 
&lt;p&gt;Have questions? Feedback? Jump into Slack or Discord and hang out with us.&lt;/p&gt; 
&lt;p&gt;Join our &lt;a href="https://join.slack.com/t/trufflehog-community/shared_invite/zt-pw2qbi43-Aa86hkiimstfdKH9UCpPzQ"&gt;Slack Community&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Join the &lt;a href="https://discord.gg/8Hzbrnkr7E"&gt;Secret Scanning Discord&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;📺&lt;/span&gt; Demo&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://storage.googleapis.com/truffle-demos/non-interactive.svg?sanitize=true" alt="GitHub scanning demo" /&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --org=trufflesecurity
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;&lt;span&gt;💾&lt;/span&gt; Installation&lt;/h1&gt; 
&lt;p&gt;Several options are available for you:&lt;/p&gt; 
&lt;h3&gt;MacOS users&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew install trufflehog
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker:&lt;/h3&gt; 
&lt;p&gt;&lt;sub&gt;&lt;i&gt;&lt;em&gt;Ensure Docker engine is running before executing the following commands:&lt;/em&gt;&lt;/i&gt;&lt;/sub&gt;&lt;/p&gt; 
&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Unix&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Windows Command Prompt&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -v "%cd:/=\%:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Windows PowerShell&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -it -v "${PWD}:/pwd" trufflesecurity/trufflehog github --repo https://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 and M2 Mac&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --platform linux/arm64 --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Binary releases&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;Download and unpack from https://github.com/trufflesecurity/trufflehog/releases
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Compile from source&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/trufflesecurity/trufflehog.git
cd trufflehog; go install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using installation script&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using installation script, verify checksum signature (requires cosign to be installed)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -v -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using installation script to install a specific version&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin &amp;lt;ReleaseTag like v3.56.0&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;&lt;span&gt;🔐&lt;/span&gt; Verifying the artifacts&lt;/h1&gt; 
&lt;p&gt;Checksums are applied to all artifacts, and the resulting checksum file is signed using cosign.&lt;/p&gt; 
&lt;p&gt;You need the following tool to verify signature:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.sigstore.dev/cosign/system_config/installation/"&gt;Cosign&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Verification steps are as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the artifact files you want, and the following files from the &lt;a href="https://github.com/trufflesecurity/trufflehog/releases"&gt;releases&lt;/a&gt; page.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;trufflehog_{version}_checksums.txt&lt;/li&gt; 
   &lt;li&gt;trufflehog_{version}_checksums.txt.pem&lt;/li&gt; 
   &lt;li&gt;trufflehog_{version}_checksums.txt.sig&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Verify the signature:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;cosign verify-blob &amp;lt;path to trufflehog_{version}_checksums.txt&amp;gt; \
--certificate &amp;lt;path to trufflehog_{version}_checksums.txt.pem&amp;gt; \
--signature &amp;lt;path to trufflehog_{version}_checksums.txt.sig&amp;gt; \
--certificate-identity-regexp 'https://github\.com/trufflesecurity/trufflehog/\.github/workflows/.+' \
--certificate-oidc-issuer "https://token.actions.githubusercontent.com"
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once the signature is confirmed as valid, you can proceed to validate that the SHA256 sums align with the downloaded artifact:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-shell"&gt;sha256sum --ignore-missing -c trufflehog_{version}_checksums.txt
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Replace &lt;code&gt;{version}&lt;/code&gt; with the downloaded files version&lt;/p&gt; 
&lt;p&gt;Alternatively, if you are using the installation script, pass &lt;code&gt;-v&lt;/code&gt; option to perform signature verification. This requires Cosign binary to be installed prior to running the installation script.&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;🚀&lt;/span&gt; Quick Start&lt;/h1&gt; 
&lt;h2&gt;1: Scan a repo for only verified secrets&lt;/h2&gt; 
&lt;p&gt;Command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog git https://github.com/trufflesecurity/test_keys --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Expected output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;🐷🔑🐷  TruffleHog. Unearth your secrets. 🐷🔑🐷

Found verified result 🐷🔑
Detector Type: AWS
Decoder Type: PLAIN
Raw result: AKIAYVP4CIPPERUVIFXG
Line: 4
Commit: fbc14303ffbf8fb1c2c1914e8dda7d0121633aca
File: keys
Email: counter &amp;lt;counter@counters-MacBook-Air.local&amp;gt;
Repository: https://github.com/trufflesecurity/test_keys
Timestamp: 2022-06-16 10:17:40 -0700 PDT
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;2: Scan a GitHub Org for only verified secrets&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog github --org=trufflesecurity --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3: Scan a GitHub Repo for only verified keys and get JSON output&lt;/h2&gt; 
&lt;p&gt;Command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog git https://github.com/trufflesecurity/test_keys --results=verified,unknown --json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Expected output:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{"SourceMetadata":{"Data":{"Git":{"commit":"fbc14303ffbf8fb1c2c1914e8dda7d0121633aca","file":"keys","email":"counter \u003ccounter@counters-MacBook-Air.local\u003e","repository":"https://github.com/trufflesecurity/test_keys","timestamp":"2022-06-16 10:17:40 -0700 PDT","line":4}}},"SourceID":0,"SourceType":16,"SourceName":"trufflehog - git","DetectorType":2,"DetectorName":"AWS","DecoderName":"PLAIN","Verified":true,"Raw":"AKIAYVP4CIPPERUVIFXG","Redacted":"AKIAYVP4CIPPERUVIFXG","ExtraData":{"account":"595918472158","arn":"arn:aws:iam::595918472158:user/canarytokens.com@@mirux23ppyky6hx3l6vclmhnj","user_id":"AIDAYVP4CIPPJ5M54LRCY"},"StructuredData":null}
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;4: Scan a GitHub Repo + its Issues and Pull Requests&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog github --repo=https://github.com/trufflesecurity/test_keys --issue-comments --pr-comments
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;5: Scan an S3 bucket for verified keys&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --bucket=&amp;lt;bucket name&amp;gt; --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;6: Scan S3 buckets using IAM Roles&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --role-arn=&amp;lt;iam role arn&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;7: Scan a Github Repo using SSH authentication in Docker&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run --rm -v "$HOME/.ssh:/root/.ssh:ro" trufflesecurity/trufflehog:latest git ssh://github.com/trufflesecurity/test_keys
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;8: Scan individual files or directories&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog filesystem path/to/file1.txt path/to/file2.txt path/to/dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;9: Scan a local git repo&lt;/h2&gt; 
&lt;p&gt;Clone the git repo. For example &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/git@github.com:trufflesecurity/test_keys.git"&gt;test keys&lt;/a&gt; repo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ git clone git@github.com:trufflesecurity/test_keys.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run trufflehog from the parent directory (outside the git repo).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;$ trufflehog git file://test_keys --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;10: Scan GCS buckets for verified secrets&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog gcs --project-id=&amp;lt;project-ID&amp;gt; --cloud-environment --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;11: Scan a Docker image for verified secrets&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;--image&lt;/code&gt; flag multiple times to scan multiple images.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# to scan from a remote registry
trufflehog docker --image trufflesecurity/secrets --results=verified,unknown

# to scan from the local docker daemon
trufflehog docker --image docker://new_image:tag --results=verified,unknown

# to scan from an image saved as a tarball
trufflehog docker --image file://path_to_image.tar --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;12: Scan in CI&lt;/h2&gt; 
&lt;p&gt;Set the &lt;code&gt;--since-commit&lt;/code&gt; flag to your default branch that people merge into (ex: "main"). Set the &lt;code&gt;--branch&lt;/code&gt; flag to your PR's branch name (ex: "feature-1"). Depending on the CI/CD platform you use, this value can be pulled in dynamically (ex: &lt;a href="https://circleci.com/docs/variables/"&gt;CIRCLE_BRANCH in Circle CI&lt;/a&gt; and &lt;a href="https://docs.travis-ci.com/user/environment-variables/"&gt;TRAVIS_PULL_REQUEST_BRANCH in Travis CI&lt;/a&gt;). If the repo is cloned and the target branch is already checked out during the CI/CD workflow, then &lt;code&gt;--branch HEAD&lt;/code&gt; should be sufficient. The &lt;code&gt;--fail&lt;/code&gt; flag will return an 183 error code if valid credentials are found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog git file://. --since-commit main --branch feature-1 --results=verified,unknown --fail
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;13: Scan a Postman workspace&lt;/h2&gt; 
&lt;p&gt;Use the &lt;code&gt;--workspace-id&lt;/code&gt;, &lt;code&gt;--collection-id&lt;/code&gt;, &lt;code&gt;--environment&lt;/code&gt; flags multiple times to scan multiple targets.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog postman --token=&amp;lt;postman api token&amp;gt; --workspace-id=&amp;lt;workspace id&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;14: Scan a Jenkins server&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog jenkins --url https://jenkins.example.com --username admin --password admin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;15: Scan an Elasticsearch server&lt;/h2&gt; 
&lt;h3&gt;Scan a Local Cluster&lt;/h3&gt; 
&lt;p&gt;There are two ways to authenticate to a local cluster with TruffleHog: (1) username and password, (2) service token.&lt;/p&gt; 
&lt;h4&gt;Connect to a local cluster with username and password&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog elasticsearch --nodes 192.168.14.3 192.168.14.4 --username truffle --password hog
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Connect to a local cluster with a service token&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog elasticsearch --nodes 192.168.14.3 192.168.14.4 --service-token ‘AAEWVaWM...Rva2VuaSDZ’
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scan an Elastic Cloud Cluster&lt;/h3&gt; 
&lt;p&gt;To scan a cluster on Elastic Cloud, you’ll need a Cloud ID and API key.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog elasticsearch \
  --cloud-id 'search-prod:dXMtY2Vx...YjM1ODNlOWFiZGRlNjI0NA==' \
  --api-key 'MlVtVjBZ...ZSYlduYnF1djh3NG5FQQ=='
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;16. Scan a GitHub Repository for Cross Fork Object References and Deleted Commits&lt;/h2&gt; 
&lt;p&gt;The following command will enumerate deleted and hidden commits on a GitHub repository and then scan them for secrets. This is an alpha release feature.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog github-experimental --repo https://github.com/&amp;lt;USER&amp;gt;/&amp;lt;REPO&amp;gt;.git --object-discovery
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition to the normal TruffleHog output, the &lt;code&gt;--object-discovery&lt;/code&gt; flag creates two files in a new &lt;code&gt;$HOME/.trufflehog&lt;/code&gt; directory: &lt;code&gt;valid_hidden.txt&lt;/code&gt; and &lt;code&gt;invalid.txt&lt;/code&gt;. These are used to track state during commit enumeration, as well as to provide users with a complete list of all hidden and deleted commits (&lt;code&gt;valid_hidden.txt&lt;/code&gt;). If you'd like to automatically remove these files after scanning, please add the flag &lt;code&gt;--delete-cached-data&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Enumerating all valid commits on a repository using this method takes between 20 minutes and a few hours, depending on the size of your repository. We added a progress bar to keep you updated on how long the enumeration will take. The actual secret scanning runs extremely fast.&lt;/p&gt; 
&lt;p&gt;For more information on Cross Fork Object References, please &lt;a href="https://trufflesecurity.com/blog/anyone-can-access-deleted-and-private-repo-data-github"&gt;read our blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;17. Scan Hugging Face&lt;/h2&gt; 
&lt;h3&gt;Scan a Hugging Face Model, Dataset or Space&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog huggingface --model &amp;lt;model_id&amp;gt; --space &amp;lt;space_id&amp;gt; --dataset &amp;lt;dataset_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Scan all Models, Datasets and Spaces belonging to a Hugging Face Organization or User&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog huggingface --org &amp;lt;orgname&amp;gt; --user &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(Optionally) When scanning an organization or user, you can skip an entire class of resources with &lt;code&gt;--skip-models&lt;/code&gt;, &lt;code&gt;--skip-datasets&lt;/code&gt;, &lt;code&gt;--skip-spaces&lt;/code&gt; OR a particular resource with &lt;code&gt;--ignore-models &amp;lt;model_id&amp;gt;&lt;/code&gt;, &lt;code&gt;--ignore-datasets &amp;lt;dataset_id&amp;gt;&lt;/code&gt;, &lt;code&gt;--ignore-spaces &amp;lt;space_id&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Scan Discussion and PR Comments&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog huggingface --model &amp;lt;model_id&amp;gt; --include-discussions --include-prs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;18. Scan stdin Input&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;aws s3 cp s3://example/gzipped/data.gz - | gunzip -c | trufflehog stdin
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;&lt;span&gt;❓&lt;/span&gt; FAQ&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;All I see is &lt;code&gt;🐷🔑🐷 TruffleHog. Unearth your secrets. 🐷🔑🐷&lt;/code&gt; and the program exits, what gives? 
  &lt;ul&gt; 
   &lt;li&gt;That means no secrets were detected&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Why is the scan taking a long time when I scan a GitHub org 
  &lt;ul&gt; 
   &lt;li&gt;Unauthenticated GitHub scans have rate limits. To improve your rate limits, include the &lt;code&gt;--token&lt;/code&gt; flag with a personal access token&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;It says a private key was verified, what does that mean? 
  &lt;ul&gt; 
   &lt;li&gt;Check out our Driftwood blog post to learn how to do this, in short we've confirmed the key can be used live for SSH or SSL &lt;a href="https://trufflesecurity.com/blog/driftwood-know-if-private-keys-are-sensitive/"&gt;Blog post&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Is there an easy way to ignore specific secrets? 
  &lt;ul&gt; 
   &lt;li&gt;If the scanned source &lt;a href="https://github.com/trufflesecurity/trufflehog/raw/d6375ba92172fd830abb4247cca15e3176448c5d/pkg/engine/engine.go#L358-L365"&gt;supports line numbers&lt;/a&gt;, then you can add a &lt;code&gt;trufflehog:ignore&lt;/code&gt; comment on the line containing the secret to ignore that secrets.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;&lt;span&gt;📰&lt;/span&gt; What's new in v3?&lt;/h1&gt; 
&lt;p&gt;TruffleHog v3 is a complete rewrite in Go with many new powerful features.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;We've &lt;strong&gt;added over 700 credential detectors that support active verification against their respective APIs&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;We've also added native &lt;strong&gt;support for scanning GitHub, GitLab, Docker, filesystems, S3, GCS, Circle CI and Travis CI&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Instantly verify private keys&lt;/strong&gt; against millions of github users and &lt;strong&gt;billions&lt;/strong&gt; of TLS certificates using our &lt;a href="https://trufflesecurity.com/blog/driftwood"&gt;Driftwood&lt;/a&gt; technology.&lt;/li&gt; 
 &lt;li&gt;Scan binaries, documents, and other file formats&lt;/li&gt; 
 &lt;li&gt;Available as a GitHub Action and a pre-commit hook&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is credential verification?&lt;/h2&gt; 
&lt;p&gt;For every potential credential that is detected, we've painstakingly implemented programmatic verification against the API that we think it belongs to. Verification eliminates false positives. For example, the &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors/aws/aws.go"&gt;AWS credential detector&lt;/a&gt; performs a &lt;code&gt;GetCallerIdentity&lt;/code&gt; API call against the AWS API to verify if an AWS credential is active.&lt;/p&gt; 
&lt;h1&gt;&lt;span&gt;📝&lt;/span&gt; Usage&lt;/h1&gt; 
&lt;p&gt;TruffleHog has a sub-command for each source of data that you may want to scan:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;git&lt;/li&gt; 
 &lt;li&gt;github&lt;/li&gt; 
 &lt;li&gt;gitlab&lt;/li&gt; 
 &lt;li&gt;docker&lt;/li&gt; 
 &lt;li&gt;s3&lt;/li&gt; 
 &lt;li&gt;filesystem (files and directories)&lt;/li&gt; 
 &lt;li&gt;syslog&lt;/li&gt; 
 &lt;li&gt;circleci&lt;/li&gt; 
 &lt;li&gt;travisci&lt;/li&gt; 
 &lt;li&gt;gcs (Google Cloud Storage)&lt;/li&gt; 
 &lt;li&gt;postman&lt;/li&gt; 
 &lt;li&gt;jenkins&lt;/li&gt; 
 &lt;li&gt;elasticsearch&lt;/li&gt; 
 &lt;li&gt;stdin&lt;/li&gt; 
 &lt;li&gt;multi-scan&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each subcommand can have options that you can see with the &lt;code&gt;--help&lt;/code&gt; flag provided to the sub command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ trufflehog git --help
usage: TruffleHog git [&amp;lt;flags&amp;gt;] &amp;lt;uri&amp;gt;

Find credentials in git repositories.

Flags:
  -h, --help                Show context-sensitive help (also try --help-long and --help-man).
      --log-level=0         Logging verbosity on a scale of 0 (info) to 5 (trace). Can be disabled with "-1".
      --profile             Enables profiling and sets a pprof and fgprof server on :18066.
  -j, --json                Output in JSON format.
      --json-legacy         Use the pre-v3.0 JSON format. Only works with git, gitlab, and github sources.
      --github-actions      Output in GitHub Actions format.
      --concurrency=20           Number of concurrent workers.
      --no-verification     Don't verify the results.
      --results=RESULTS          Specifies which type(s) of results to output: verified, unknown, unverified, filtered_unverified. Defaults to all types.
      --allow-verification-overlap
                                 Allow verification of similar credentials across detectors
      --filter-unverified   Only output first unverified result per chunk per detector if there are more than one results.
      --filter-entropy=FILTER-ENTROPY
                                 Filter unverified results with Shannon entropy. Start with 3.0.
      --config=CONFIG            Path to configuration file.
      --print-avg-detector-time
                                 Print the average time spent on each detector.
      --no-update           Don't check for updates.
      --fail                Exit with code 183 if results are found.
      --verifier=VERIFIER ...    Set custom verification endpoints.
      --custom-verifiers-only   Only use custom verification endpoints.
      --archive-max-size=ARCHIVE-MAX-SIZE
                                 Maximum size of archive to scan. (Byte units eg. 512B, 2KB, 4MB)
      --archive-max-depth=ARCHIVE-MAX-DEPTH
                                 Maximum depth of archive to scan.
      --archive-timeout=ARCHIVE-TIMEOUT
                                 Maximum time to spend extracting an archive.
      --include-detectors="all"  Comma separated list of detector types to include. Protobuf name or IDs may be used, as well as ranges.
      --exclude-detectors=EXCLUDE-DETECTORS
                                 Comma separated list of detector types to exclude. Protobuf name or IDs may be used, as well as ranges. IDs defined here take precedence over the include list.
      --version             Show application version.
  -i, --include-paths=INCLUDE-PATHS
                                 Path to file with newline separated regexes for files to include in scan.
  -x, --exclude-paths=EXCLUDE-PATHS
                                 Path to file with newline separated regexes for files to exclude in scan.
      --exclude-globs=EXCLUDE-GLOBS
                                 Comma separated list of globs to exclude in scan. This option filters at the `git log` level, resulting in faster scans.
      --since-commit=SINCE-COMMIT
                                 Commit to start scan from.
      --branch=BRANCH            Branch to scan.
      --max-depth=MAX-DEPTH      Maximum depth of commits to scan.
      --bare                Scan bare repository (e.g. useful while using in pre-receive hooks)

Args:
  &amp;lt;uri&amp;gt;  Git repository URL. https://, file://, or ssh:// schema expected.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, to scan a &lt;code&gt;git&lt;/code&gt; repository, start with&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;trufflehog git https://github.com/trufflesecurity/trufflehog.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;TruffleHog supports defining &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/#regex-detector-alpha"&gt;custom regex detectors&lt;/a&gt; and multiple sources in a configuration file provided via the &lt;code&gt;--config&lt;/code&gt; flag. The regex detectors can be used with any subcommand, while the sources defined in configuration are only for the &lt;code&gt;multi-scan&lt;/code&gt; subcommand.&lt;/p&gt; 
&lt;p&gt;The configuration format for sources can be found on Truffle Security's &lt;a href="https://docs.trufflesecurity.com/scan-data-for-secrets"&gt;source configuration documentation page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Example GitHub source configuration and &lt;a href="https://docs.trufflesecurity.com/github#Fvm1I"&gt;options reference&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;sources:
- connection:
    '@type': type.googleapis.com/sources.GitHub
    repositories:
    - https://github.com/trufflesecurity/test_keys.git
    unauthenticated: {}
  name: example config scan
  type: SOURCE_TYPE_GITHUB
  verify: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may define multiple connections under the &lt;code&gt;sources&lt;/code&gt; key (see above), and TruffleHog will scan all of the sources concurrently.&lt;/p&gt; 
&lt;h2&gt;S3&lt;/h2&gt; 
&lt;p&gt;The S3 source supports assuming IAM roles for scanning in addition to IAM users. This makes it easier for users to scan multiple AWS accounts without needing to rely on hardcoded credentials for each account.&lt;/p&gt; 
&lt;p&gt;The IAM identity that TruffleHog uses initially will need to have &lt;code&gt;AssumeRole&lt;/code&gt; privileges as a principal in the &lt;a href="https://aws.amazon.com/blogs/security/how-to-use-trust-policies-with-iam-roles/"&gt;trust policy&lt;/a&gt; of each IAM role to assume.&lt;/p&gt; 
&lt;p&gt;To scan a specific bucket using locally set credentials or instance metadata if on an EC2 instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --bucket=&amp;lt;bucket-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To scan a specific bucket using an assumed role:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --bucket=&amp;lt;bucket-name&amp;gt; --role-arn=&amp;lt;iam-role-arn&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Multiple roles can be passed as separate arguments. The following command will attempt to scan every bucket each role has permissions to list in the S3 API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog s3 --role-arn=&amp;lt;iam-role-arn-1&amp;gt; --role-arn=&amp;lt;iam-role-arn-2&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Exit Codes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;0: No errors and no results were found.&lt;/li&gt; 
 &lt;li&gt;1: An error was encountered. Sources may not have completed scans.&lt;/li&gt; 
 &lt;li&gt;183: No errors were encountered, but results were found. Will only be returned if &lt;code&gt;--fail&lt;/code&gt; flag is used.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;img alt="octocat" src="https://github.githubassets.com/images/icons/emoji/octocat.png?v8" /&gt;) TruffleHog Github Action&lt;/h2&gt; 
&lt;h3&gt;General Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        extra_args: --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the example config above, we're scanning for live secrets in all PRs and Pushes to &lt;code&gt;main&lt;/code&gt;. Only code changes in the referenced commits are scanned. If you'd like to scan an entire branch, please see the "Advanced Usage" section below.&lt;/p&gt; 
&lt;h3&gt;Shallow Cloning&lt;/h3&gt; 
&lt;p&gt;If you're incorporating TruffleHog into a standalone workflow and aren't running any other CI/CD tooling alongside TruffleHog, then we recommend using &lt;a href="https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthltdepthgt"&gt;Shallow Cloning&lt;/a&gt; to speed up your workflow. Here's an example of how to do it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;...
      - shell: bash
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "depth=$(($(jq length &amp;lt;&amp;lt;&amp;lt; '${{ toJson(github.event.commits) }}') + 2))" &amp;gt;&amp;gt; $GITHUB_ENV
            echo "branch=${{ github.ref_name }}" &amp;gt;&amp;gt; $GITHUB_ENV
          fi
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "depth=$((${{ github.event.pull_request.commits }}+2))" &amp;gt;&amp;gt; $GITHUB_ENV
            echo "branch=${{ github.event.pull_request.head.ref }}" &amp;gt;&amp;gt; $GITHUB_ENV
          fi
      - uses: actions/checkout@v3
        with:
          ref: ${{env.branch}}
          fetch-depth: ${{env.depth}}
      - uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Depending on the event type (push or PR), we calculate the number of commits present. Then we add 2, so that we can reference a base commit before our code changes. We pass that integer value to the &lt;code&gt;fetch-depth&lt;/code&gt; flag in the checkout action in addition to the relevant branch. Now our checkout process should be much shorter.&lt;/p&gt; 
&lt;h3&gt;Canary detection&lt;/h3&gt; 
&lt;p&gt;TruffleHog statically detects &lt;a href="https://canarytokens.org/"&gt;https://canarytokens.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/trufflesecurity/trufflehog/assets/52866392/74ace530-08c5-4eaf-a169-84a73e328f6f" alt="image" /&gt;&lt;/p&gt; 
&lt;h3&gt;Advanced Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- name: TruffleHog
  uses: trufflesecurity/trufflehog@main
  with:
    # Repository path
    path:
    # Start scanning from here (usually main branch).
    base:
    # Scan commits until here (usually dev branch).
    head: # optional
    # Extra args to be passed to the trufflehog cli.
    extra_args: --log-level=2 --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you'd like to specify specific &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt; refs, you can use the &lt;code&gt;base&lt;/code&gt; argument (&lt;code&gt;--since-commit&lt;/code&gt; flag in TruffleHog CLI) and the &lt;code&gt;head&lt;/code&gt; argument (&lt;code&gt;--branch&lt;/code&gt; flag in the TruffleHog CLI). We only recommend using these arguments for very specific use cases, where the default behavior does not work.&lt;/p&gt; 
&lt;h4&gt;Advanced Usage: Scan entire branch&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;- name: scan-push
        uses: trufflesecurity/trufflehog@main
        with:
          base: ""
          head: ${{ github.ref_name }}
          extra_args: --results=verified,unknown
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;TruffleHog GitLab CI&lt;/h2&gt; 
&lt;h3&gt;Example Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;stages:
  - security

security-secrets:
  stage: security
  allow_failure: false
  image: alpine:latest
  variables:
    SCAN_PATH: "." # Set the relative path in the repo to scan
  before_script:
    - apk add --no-cache git curl jq
    - curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
  script:
    - trufflehog filesystem "$SCAN_PATH" --results=verified,unknown --fail --json | jq
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the example pipeline above, we're scanning for live secrets in all repository directories and files. This job runs only when the pipeline source is a merge request event, meaning it's triggered when a new merge request is created.&lt;/p&gt; 
&lt;h2&gt;Pre-commit Hook&lt;/h2&gt; 
&lt;p&gt;TruffleHog can be used in a pre-commit hook to prevent credentials from leaking before they ever leave your computer.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/PreCommit.md"&gt;pre-commit hook documentation&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Regex Detector (alpha)&lt;/h2&gt; 
&lt;p&gt;TruffleHog supports detection and verification of custom regular expressions. For detection, at least one &lt;strong&gt;regular expression&lt;/strong&gt; and &lt;strong&gt;keyword&lt;/strong&gt; is required. A &lt;strong&gt;keyword&lt;/strong&gt; is a fixed literal string identifier that appears in or around the regex to be detected. To allow maximum flexibility for verification, a webhook is used containing the regular expression matches.&lt;/p&gt; 
&lt;p&gt;TruffleHog will send a JSON POST request containing the regex matches to a configured webhook endpoint. If the endpoint responds with a &lt;code&gt;200 OK&lt;/code&gt; response status code, the secret is considered verified.&lt;/p&gt; 
&lt;p&gt;Custom Detectors support a few different filtering mechanisms: entropy, regex targeting the entire match, regex targeting the captured secret, and excluded word lists checked against the secret (captured group if present, entire match if capture group is not present). Note that if your custom detector has multiple &lt;code&gt;regex&lt;/code&gt; set (in this example &lt;code&gt;hogID&lt;/code&gt;, and &lt;code&gt;hogToken&lt;/code&gt;), then the filters get applied to each regex. &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/examples/generic_with_filters.yml"&gt;Here&lt;/a&gt; is an example of a custom detector using these filters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; This feature is alpha and subject to change.&lt;/p&gt; 
&lt;h3&gt;Regex Detector Example&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/custom_detectors/CUSTOM_DETECTORS.md"&gt;Here&lt;/a&gt; is how to setup a custom regex detector with verification server.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;🔍&lt;/span&gt; Analyze&lt;/h2&gt; 
&lt;p&gt;TruffleHog supports running a deeper analysis of a credential to view its permissions and the resources it has access to.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trufflehog analyze
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;&lt;span&gt;❤️&lt;/span&gt; Contributors&lt;/h1&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md"&gt;Contribute&lt;/a&gt;].&lt;/p&gt; 
&lt;a href="https://github.com/trufflesecurity/trufflehog/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=trufflesecurity/trufflehog" /&gt; &lt;/a&gt; 
&lt;h1&gt;&lt;span&gt;💻&lt;/span&gt; Contributing&lt;/h1&gt; 
&lt;p&gt;Contributions are very welcome! Please see our &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md"&gt;contribution guidelines first&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We no longer accept contributions to TruffleHog v2, but that code is available in the &lt;code&gt;v2&lt;/code&gt; branch.&lt;/p&gt; 
&lt;h2&gt;Adding new secret detectors&lt;/h2&gt; 
&lt;p&gt;We have published some &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/hack/docs/Adding_Detectors_external.md"&gt;documentation and tooling to get started on adding new secret detectors&lt;/a&gt;. Let's improve detection together!&lt;/p&gt; 
&lt;h1&gt;Use as a library&lt;/h1&gt; 
&lt;p&gt;Currently, trufflehog is in heavy development and no guarantees can be made on the stability of the public APIs at this time.&lt;/p&gt; 
&lt;h1&gt;License Change&lt;/h1&gt; 
&lt;p&gt;Since v3.0, TruffleHog is released under a AGPL 3 license, included in &lt;a href="https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;. TruffleHog v3.0 uses none of the previous codebase, but care was taken to preserve backwards compatibility on the command line interface. The work previous to this release is still available licensed under GPL 2.0 in the history of this repository and the previous package releases and tags. A completed CLA is required for us to accept contributions going forward.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aquasecurity/trivy</title>
      <link>https://github.com/aquasecurity/trivy</link>
      <description>&lt;p&gt;Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/logo.png" width="200" /&gt; 
 &lt;p&gt;&lt;a href="https://github.com/aquasecurity/trivy/releases"&gt;&lt;img src="https://img.shields.io/github/release/aquasecurity/trivy.svg?logo=github" alt="GitHub Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/actions/workflows/test.yaml"&gt;&lt;img src="https://github.com/aquasecurity/trivy/actions/workflows/test.yaml/badge.svg?sanitize=true" alt="Test" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/aquasecurity/trivy"&gt;&lt;img src="https://goreportcard.com/badge/github.com/aquasecurity/trivy" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" alt="License: Apache-2.0" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/aquasecurity/trivy/total?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/docker/pulls/aquasec/trivy?logo=docker&amp;amp;label=docker%20pulls%20%2F%20trivy" alt="Docker Pulls" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://trivy.dev/latest/docs/"&gt;📖 Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Trivy (&lt;a href="https://raw.githubusercontent.com/aquasecurity/trivy/main/#how-to-pronounce-the-name-trivy"&gt;pronunciation&lt;/a&gt;) is a comprehensive and versatile security scanner. Trivy has &lt;em&gt;scanners&lt;/em&gt; that look for security issues, and &lt;em&gt;targets&lt;/em&gt; where it can find those issues.&lt;/p&gt; 
&lt;p&gt;Targets (what Trivy can scan):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Container Image&lt;/li&gt; 
 &lt;li&gt;Filesystem&lt;/li&gt; 
 &lt;li&gt;Git Repository (remote)&lt;/li&gt; 
 &lt;li&gt;Virtual Machine Image&lt;/li&gt; 
 &lt;li&gt;Kubernetes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Scanners (what Trivy can find there):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OS packages and software dependencies in use (SBOM)&lt;/li&gt; 
 &lt;li&gt;Known vulnerabilities (CVEs)&lt;/li&gt; 
 &lt;li&gt;IaC issues and misconfigurations&lt;/li&gt; 
 &lt;li&gt;Sensitive information and secrets&lt;/li&gt; 
 &lt;li&gt;Software licenses&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Trivy supports most popular programming languages, operating systems, and platforms. For a complete list, see the &lt;a href="https://trivy.dev/latest/docs/coverage/"&gt;Scanning Coverage&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;To learn more, go to the &lt;a href="https://trivy.dev"&gt;Trivy homepage&lt;/a&gt; for feature highlights, or to the &lt;a href="https://trivy.dev/latest/docs/"&gt;Documentation site&lt;/a&gt; for detailed information.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Get Trivy&lt;/h3&gt; 
&lt;p&gt;Trivy is available in most common distribution channels. The full list of installation options is available in the &lt;a href="https://trivy.dev/latest/getting-started/installation/"&gt;Installation&lt;/a&gt; page. Here are a few popular examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;brew install trivy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;docker run aquasec/trivy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Download binary from &lt;a href="https://github.com/aquasecurity/trivy/releases/latest/"&gt;https://github.com/aquasecurity/trivy/releases/latest/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://trivy.dev/latest/getting-started/installation/"&gt;Installation&lt;/a&gt; for more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Trivy is integrated with many popular platforms and applications. The complete list of integrations is available in the &lt;a href="https://trivy.dev/latest/ecosystem/"&gt;Ecosystem&lt;/a&gt; page. Here are a few popular examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-action"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-operator"&gt;Kubernetes operator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-vscode-extension"&gt;VS Code plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://trivy.dev/latest/ecosystem/"&gt;Ecosystem&lt;/a&gt; for more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Canary builds&lt;/h3&gt; 
&lt;p&gt;There are canary builds (&lt;a href="https://hub.docker.com/r/aquasec/trivy/tags?page=1&amp;amp;name=canary"&gt;Docker Hub&lt;/a&gt;, &lt;a href="https://github.com/aquasecurity/trivy/pkgs/container/trivy/75776514?tag=canary"&gt;GitHub&lt;/a&gt;, &lt;a href="https://gallery.ecr.aws/aquasecurity/trivy#canary"&gt;ECR&lt;/a&gt; images and &lt;a href="https://github.com/aquasecurity/trivy/actions/workflows/canary.yaml"&gt;binaries&lt;/a&gt;) as generated every push to main branch.&lt;/p&gt; 
&lt;p&gt;Please be aware: canary builds might have critical bugs, it's not recommended for use in production.&lt;/p&gt; 
&lt;h3&gt;General usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy &amp;lt;target&amp;gt; [--scanners &amp;lt;scanner1,scanner2&amp;gt;] &amp;lt;subject&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy image python:3.4-alpine
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/1161307/171013513-95f18734-233d-45d3-aaf5-d6aec687db0e.mov"&gt;https://user-images.githubusercontent.com/1161307/171013513-95f18734-233d-45d3-aaf5-d6aec687db0e.mov&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy fs --scanners vuln,secret,misconfig myproject/
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/1161307/171013917-b1f37810-f434-465c-b01a-22de036bd9b3.mov"&gt;https://user-images.githubusercontent.com/1161307/171013917-b1f37810-f434-465c-b01a-22de036bd9b3.mov&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy k8s --report summary cluster
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/trivy-k8s.png" alt="k8s summary" /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How to pronounce the name "Trivy"?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;tri&lt;/code&gt; is pronounced like &lt;strong&gt;tri&lt;/strong&gt;gger, &lt;code&gt;vy&lt;/code&gt; is pronounced like en&lt;strong&gt;vy&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Want more? Check out Aqua&lt;/h2&gt; 
&lt;p&gt;If you liked Trivy, you will love Aqua which builds on top of Trivy to provide even more enhanced capabilities for a complete security management offering.&lt;br /&gt; You can find a high level comparison table specific to Trivy users &lt;a href="https://trivy.dev/latest/commercial/compare/"&gt;here&lt;/a&gt;. In addition check out the &lt;a href="https://aquasec.com"&gt;https://aquasec.com&lt;/a&gt; website for more information about our products and services. If you'd like to contact Aqua or request a demo, please use this form: &lt;a href="https://www.aquasec.com/demo"&gt;https://www.aquasec.com/demo&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Trivy is an &lt;a href="https://aquasec.com"&gt;Aqua Security&lt;/a&gt; open source project.&lt;br /&gt; Learn about our open source work and portfolio &lt;a href="https://www.aquasec.com/products/open-source-projects/"&gt;here&lt;/a&gt;.&lt;br /&gt; Contact us about any matter by opening a GitHub Discussion &lt;a href="https://github.com/aquasecurity/trivy/discussions"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please ensure to abide by our &lt;a href="https://github.com/aquasecurity/community/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; during all interactions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google/mangle</title>
      <link>https://github.com/google/mangle</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mangle&lt;/h1&gt; 
&lt;p&gt;Mangle is a programming language for deductive database programming. It is an extension of Datalog, with various extensions like aggregation, function calls and optional type-checking.&lt;/p&gt; 
&lt;p&gt;Deductive database programming is useful for bringing data from multiple data sources together since it enables us to represent and query that data in a uniform way. It can also be used to model domain knowledge, similar to machine-readable ontology but without being restricted to binary predicates.&lt;/p&gt; 
&lt;p&gt;Datalog is an expressive declarative language similar to relational calculus (think SQL and relational views). Unlike relational calculus, it also supports recursive rules and program structuring in a straightforward way.&lt;/p&gt; 
&lt;p&gt;Mangle contains Datalog as a fragment and adds extensions that make its use more practical. Some of the good properties like guaranteed termination are lost when such extensions are used.&lt;/p&gt; 
&lt;p&gt;The goal of Mangle as an open source project is to convey the concepts in a way that is accessible to developers and lends itself to easy experimentation. This repository contains an implementation of Mangle as a go library that can be easily embedded into applications.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://raw.githubusercontent.com/google/mangle/main/docs/README.md"&gt;docs&lt;/a&gt; and the &lt;a href="https://github.com/google/mangle/discussions"&gt;GitHub discussions&lt;/a&gt; for more information. There is also a Q&amp;amp;A section.&lt;/p&gt; 
&lt;p&gt;For an example how to use Mangle library in a database-like grpc service, see the separate &lt;a href="https://github.com/burakemir/mangle-service"&gt;Mangle demo service repo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/google/mangle/main/#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/google/mangle/main/#building"&gt;Building&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;Simple Queries&lt;/h3&gt; 
&lt;p&gt;Imagine you were asked to spot software affected by the &lt;a href="https://www.cisa.gov/uscert/apache-log4j-vulnerability-guidance"&gt;log4j vulnerability discovered in late 2021&lt;/a&gt;. We want to look for projects that contain a Java archive (jar file) of log4j that is not updated to the patched version.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-prolog"&gt;projects_with_vulnerable_log4j(P) :-
  projects(P),
  contains_jar(P, "log4j", Version),
  Version != "2.17.1",
  Version != "2.12.4",
  Version != "2.3.2".
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a Mangle &lt;em&gt;rule&lt;/em&gt;: conceptually, the implementation retrieve all possible values for variables &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Version&lt;/code&gt; that make all the subgoals true.&lt;/p&gt; 
&lt;p&gt;Simple Mangle rules like this correspond to select-project-join relational queries. The same query in SQL would look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sql"&gt;SELECT projects.id as P
FROM projects JOIN contains_jar ON projects.id = contains_jar.project_id
WHERE contains_jar.version NOT IN ("2.17.1", "2.12.4", "2.3.2")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unlike SQL, our Mangle rule &lt;code&gt;projects_with_vulnerable_log4j&lt;/code&gt; has a name and can be referenced in other queries.&lt;/p&gt; 
&lt;p&gt;(If translating non-recursive Datalog into SQL queries sounds interesting, you should check out the &lt;a href="https://logica.dev/"&gt;Logica&lt;/a&gt; open source project.)&lt;/p&gt; 
&lt;h3&gt;Aggregation&lt;/h3&gt; 
&lt;p&gt;In practice, querying is rarely enough and we also need grouping and aggregation.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;count_projects_with_vulnerable_log4j(Num) :-
  projects_with_vulnerable_log4j(P) |&amp;gt; do fn:group_by(), let Num = fn:Count().
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Recursive Queries&lt;/h3&gt; 
&lt;p&gt;The example does not specify what &lt;code&gt;contains_jar&lt;/code&gt; does. Here is a possible implementation for &lt;code&gt;contains_jar&lt;/code&gt; that walks a dependency graph. This shows that Mangle rules can be recursive.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;contains_jar(P, Name, Version) :-
  contains_jar_directly(P, Name, Version).

contains_jar(P, Name, Version) :-
  project_depends(P, Q),
  contains_jar(Q, Name, Version).
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The two rules correspond to two cases in which a project may "contain" a jar: either directly, or through some dependency.&lt;/p&gt; 
&lt;h3&gt;Knowledge Graphs, Property Graphs&lt;/h3&gt; 
&lt;p&gt;In requirements engineering, one needs to captures real world concepts in a domain model and controlled vocabulary. Description logics use roles to describe how concepts interact, but these relationships are always binary. Mangle can represent binary predicates, but also arbitrary n-ary relations. Moreover it also has support for structured data.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;one_or_two_leg_trip(Codes, Start, Destination, Price) :-
  direct_conn(Code, Start, Destination, Price)
  |&amp;gt; let Codes = [Code].

one_or_two_leg_trip(Codes, Start, Destination, Price) :-
  direct_conn(FirstCode, Start, Connecting, FirstLegPrice).
  direct_conn(SecondCode, Connecting, Destination, SecondLegPrice)
  |&amp;gt; let Code = [FirstCode, SecondCode],
     let Price = fn:plus(FirstLegPrice, SecondLegPrice).

&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;graph LR
    /zurich --&amp;gt;|/code/ZL &amp;lt;br /&amp;gt; 60 CHF| /lausanne
    /zurich --&amp;gt;|/code/ZB &amp;lt;br /&amp;gt; 30 CHF| /bern
    /bern --&amp;gt;|/code/BL &amp;lt;br /&amp;gt; 30 CHF| /lausanne
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building &amp;amp; Testing&lt;/h2&gt; 
&lt;p&gt;Get the dependencies (see &lt;a href="https://raw.githubusercontent.com/google/mangle/main/go.mod"&gt;go.mod&lt;/a&gt;), build the library, run tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go get -t ./...
go build ./...
go test ./...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Regenerating the parser sources&lt;/h3&gt; 
&lt;p&gt;If you want to regenerate the parser sources, you need to set up ANTLR first. This requires a Java runtime environment.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;wget http://www.antlr.org/download/antlr-4.13.2-complete.jar
alias antlr='java -jar $PWD/antlr-4.13.2-complete.jar'
antlr -Dlanguage=Go -package gen -o ./ parse/gen/Mangle.g4 -visitor
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The Mangle maintainers welcome external contributions to spec, documentation and this implementation (see &lt;a href="https://raw.githubusercontent.com/google/mangle/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;) and also other implementations. Pull requests will be handled &lt;a href="https://github.com/tensorflow/tensorflow/raw/master/CONTRIBUTING.md"&gt;like for tensorflow&lt;/a&gt;, to ensure our internal usage and tests will pass.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>asternic/wuzapi</title>
      <link>https://github.com/asternic/wuzapi</link>
      <description>&lt;p&gt;Simple RESTful API for WhatsApp in Golang (using the Whatsmeow multi device library)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WUZAPI&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/asternic/wuzapi/main/static/favicon.ico" width="30" /&gt; WuzAPI is an implementation of the &lt;a href="https://github.com/tulir/whatsmeow"&gt;@tulir/whatsmeow&lt;/a&gt; library as a simple RESTful API service with multiple device support and concurrent sessions.&lt;/p&gt; 
&lt;p&gt;Whatsmeow does not use Puppeteer on headless Chrome, nor an Android emulator. It communicates directly with WhatsApp’s WebSocket servers, making it significantly faster and much less demanding on memory and CPU than those solutions. The drawback is that any changes to the WhatsApp protocol could break connections, requiring a library update.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;⚠&lt;/span&gt; Warning&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Using this software in violation of WhatsApp’s Terms of Service can get your number banned&lt;/strong&gt;:&lt;br /&gt; Be very careful—do not use this to send SPAM or anything similar. Use at your own risk. If you need to develop something for commercial purposes, contact a WhatsApp global solution provider and sign up for the WhatsApp Business API service instead.&lt;/p&gt; 
&lt;h2&gt;Available endpoints&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Session:&lt;/strong&gt; Connect, disconnect, and log out from WhatsApp. Retrieve connection status and QR codes for scanning.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Messages:&lt;/strong&gt; Send text, image, audio, document, template, video, sticker, location, contact, and poll messages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Users:&lt;/strong&gt; Check if phone numbers have WhatsApp, get user information and avatars, and retrieve the full contact list.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Chat:&lt;/strong&gt; Set presence (typing/paused, recording media), mark messages as read, download images from messages, send reactions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Groups:&lt;/strong&gt; Create, delete and list groups, get info, get invite links, set participants, change group photos and names.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Webhooks:&lt;/strong&gt; Set and get webhooks that will be called whenever events or messages are received.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Required:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go (Go Programming Language)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Docker (for containerization)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Updating dependencies&lt;/h2&gt; 
&lt;p&gt;This project uses the whatsmeow library to communicate with WhatsApp. To update the library to the latest version, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get -u go.mau.fi/whatsmeow@latest
go mod tidy
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;go build .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Run&lt;/h2&gt; 
&lt;p&gt;By default it will start a REST service in port 8080. These are the parameters you can use to alter behaviour&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;-admintoken : sets authentication token for admin endpoints. If not specified it will be read from .env&lt;/li&gt; 
 &lt;li&gt;-address : sets the IP address to bind the server to (default 0.0.0.0)&lt;/li&gt; 
 &lt;li&gt;-port : sets the port number (default 8080)&lt;/li&gt; 
 &lt;li&gt;-logtype : format for logs, either console (default) or json&lt;/li&gt; 
 &lt;li&gt;-color : enable colored output for console logs&lt;/li&gt; 
 &lt;li&gt;-osname : Connection OS Name in Whatsapp&lt;/li&gt; 
 &lt;li&gt;-skipmedia : Skip downloading media from messages&lt;/li&gt; 
 &lt;li&gt;-wadebug : enable whatsmeow debug, either INFO or DEBUG levels are suported&lt;/li&gt; 
 &lt;li&gt;-sslcertificate : SSL Certificate File&lt;/li&gt; 
 &lt;li&gt;-sslprivatekey : SSL Private Key File&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;p&gt;To have colored logs:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./wuzapi -logtype=console -color=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For JSON logs:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;./wuzapi -logtype json 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With time zone:&lt;/p&gt; 
&lt;p&gt;Set &lt;code&gt;TZ=America/New_York ./wuzapi ...&lt;/code&gt; in your shell or in your .env file or Docker Compose environment: &lt;code&gt;TZ=America/New_York&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;WuzAPI uses a &lt;code&gt;.env&lt;/code&gt; file for configuration. You can use the provided &lt;code&gt;.env.sample&lt;/code&gt; as a template:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cp .env.sample .env
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Environment Variables&lt;/h3&gt; 
&lt;h4&gt;Required Settings&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;WUZAPI_ADMIN_TOKEN=your_admin_token_here
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Database Configuration&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;For PostgreSQL:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DB_USER=wuzapi
DB_PASSWORD=wuzapi
DB_NAME=wuzapi
DB_HOST=db  # Use 'db' when running with Docker Compose, or 'localhost' for native execution
DB_PORT=5432
DB_SSLMODE=false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;For SQLite (default):&lt;/strong&gt; No database configuration needed - SQLite is used by default if no PostgreSQL settings are provided.&lt;/p&gt; 
&lt;h4&gt;Optional Settings&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;TZ=America/New_York
WEBHOOK_FORMAT=json  # or "form" for the default
SESSION_DEVICE_NAME=WuzAPI
WUZAPI_PORT=8080     # Port for the WuzAPI server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RabbitMQ Integration&lt;/h3&gt; 
&lt;p&gt;WuzAPI supports sending WhatsApp events to a RabbitMQ queue for global event distribution. When enabled, all WhatsApp events will be published to the specified queue regardless of individual user webhook configurations.&lt;/p&gt; 
&lt;p&gt;Set these environment variables to enable RabbitMQ integration:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;RABBITMQ_URL=amqp://guest:guest@localhost:5672
RABBITMQ_QUEUE=whatsapp  # Optional (default: whatsapp_events)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When enabled:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All WhatsApp events (messages, presence updates, etc.) will be published to the configured queue regardless of event subscritions for regular webhooks&lt;/li&gt; 
 &lt;li&gt;Events will include the userId and instanceName&lt;/li&gt; 
 &lt;li&gt;This works alongside webhook configurations - events will be sent to both RabbitMQ and any configured webhooks&lt;/li&gt; 
 &lt;li&gt;The integration is global and affects all instances&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Key configuration options:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;WUZAPI_ADMIN_TOKEN: Required - Authentication token for admin endpoints&lt;/li&gt; 
 &lt;li&gt;TZ: Optional - Timezone for server operations (default: UTC)&lt;/li&gt; 
 &lt;li&gt;PostgreSQL-specific options: Only required when using PostgreSQL backend&lt;/li&gt; 
 &lt;li&gt;RabbitMQ options: Optional, only required if you want to publish events to RabbitMQ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Docker Configuration&lt;/h3&gt; 
&lt;p&gt;When using Docker Compose, &lt;code&gt;docker-compose.yml&lt;/code&gt; automatically loads environment variables from a &lt;code&gt;.env&lt;/code&gt; file when available. However, &lt;code&gt;docker-compose-swarm.yaml&lt;/code&gt; uses &lt;code&gt;docker stack deploy&lt;/code&gt;, which does not automatically load from &lt;code&gt;.env&lt;/code&gt; files. Variables in the swarm file will only be substituted if they are exported in the shell environment where the deploy command is run. For managing secrets in Swarm, consider using Docker secrets.&lt;/p&gt; 
&lt;p&gt;The Docker configuration will:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;First load variables from the &lt;code&gt;.env&lt;/code&gt; file (if present and supported)&lt;/li&gt; 
 &lt;li&gt;Use default values as fallback if variables are not defined&lt;/li&gt; 
 &lt;li&gt;Override with any variables explicitly set in the &lt;code&gt;environment&lt;/code&gt; section of the compose file&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Key differences for Docker deployment:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set &lt;code&gt;DB_HOST=db&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt; to connect to the PostgreSQL container&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;WUZAPI_PORT&lt;/code&gt; variable controls the external port mapping in &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;In swarm mode, &lt;code&gt;WUZAPI_PORT&lt;/code&gt; configures the Traefik load balancer port&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;.env&lt;/code&gt; file is already included in &lt;code&gt;.gitignore&lt;/code&gt; to avoid committing sensitive information to your repository.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To interact with the API, you must include the &lt;code&gt;Authorization&lt;/code&gt; header in HTTP requests, containing the user's authentication token. You can have multiple users (different WhatsApp numbers) on the same server.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A Swagger API reference at &lt;a href="https://raw.githubusercontent.com/asternic/wuzapi/main/api"&gt;/api&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;A sample web page to connect and scan QR codes at &lt;a href="https://raw.githubusercontent.com/asternic/wuzapi/main/login"&gt;/login&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;A fully featured Dashboard to create, manage and test instances at &lt;a href="https://raw.githubusercontent.com/asternic/wuzapi/main/dashboard"&gt;/dashboard&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ADMIN Actions&lt;/h2&gt; 
&lt;p&gt;You can list, add and remove users using the admin endpoints. For that you must use the WUZAPI_ADMIN_TOKEN in the Authorization header&lt;/p&gt; 
&lt;p&gt;Then you can use the /admin/users endpoint with the Authorization header containing the token to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET /admin/users&lt;/code&gt; - List all users&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST /admin/users&lt;/code&gt; - Create a new user&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DELETE /admin/users/{id}&lt;/code&gt; - Remove a user&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The JSON body for creating a new user must contain:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; [string] : User's name&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;token&lt;/code&gt; [string] : Security token to authorize/authenticate this user&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;webhook&lt;/code&gt; [string] : URL to send events via POST (optional)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;events&lt;/code&gt; [string] : Comma-separated list of events to receive (required) - Valid events are: "Message", "ReadReceipt", "Presence", "HistorySync", "ChatPresence", "All"&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;expiration&lt;/code&gt; [int] : Expiration timestamp (optional, not enforced by the system)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;User Creation with Optional Proxy and S3 Configuration&lt;/h2&gt; 
&lt;p&gt;You can create a user with optional proxy and S3 storage configuration. All fields are optional and backward compatible. If you do not provide these fields, the user will be created with default settings.&lt;/p&gt; 
&lt;h3&gt;Example Payload&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "name": "test_user",
  "token": "user_token",
  "proxyConfig": {
    "enabled": true,
    "proxyURL": "socks5://user:pass@host:port"
  },
  "s3Config": {
    "enabled": true,
    "endpoint": "https://s3.amazonaws.com",
    "region": "us-east-1",
    "bucket": "my-bucket",
    "accessKey": "AKIAIOSFODNN7EXAMPLE",
    "secretKey": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
    "pathStyle": false,
    "publicURL": "https://cdn.yoursite.com",
    "mediaDelivery": "both",
    "retentionDays": 30
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;proxyConfig&lt;/code&gt; (object, optional): 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt; (boolean): Enable proxy for this user.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;proxyURL&lt;/code&gt; (string): Proxy URL (e.g., &lt;code&gt;socks5://user:pass@host:port&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;s3Config&lt;/code&gt; (object, optional): 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt; (boolean): Enable S3 storage for this user.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt; (string): S3 endpoint URL.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;region&lt;/code&gt; (string): S3 region.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;bucket&lt;/code&gt; (string): S3 bucket name.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;accessKey&lt;/code&gt; (string): S3 access key.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;secretKey&lt;/code&gt; (string): S3 secret key.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;pathStyle&lt;/code&gt; (boolean): Use path style addressing.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;publicURL&lt;/code&gt; (string): Public URL for accessing files.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mediaDelivery&lt;/code&gt; (string): Media delivery type (&lt;code&gt;base64&lt;/code&gt;, &lt;code&gt;s3&lt;/code&gt;, or &lt;code&gt;both&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;retentionDays&lt;/code&gt; (integer): Number of days to retain files.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you omit &lt;code&gt;proxyConfig&lt;/code&gt; or &lt;code&gt;s3Config&lt;/code&gt;, the user will be created without proxy or S3 integration, maintaining full backward compatibility.&lt;/p&gt; 
&lt;h2&gt;API reference&lt;/h2&gt; 
&lt;p&gt;API calls should be made with content type json, and parameters sent into the request body, always passing the Token header for authenticating the request.&lt;/p&gt; 
&lt;p&gt;Check the &lt;a href="https://github.com/asternic/wuzapi/raw/main/API.md"&gt;API Reference&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/asternic"&gt; &lt;img src="https://avatars.githubusercontent.com/u/25182694?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Nicolas/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Nicolas&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/guilhermejansen"&gt; &lt;img src="https://avatars.githubusercontent.com/u/52773109?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Guilherme" Jansen /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Guilherme Jansen&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/netrixken"&gt; &lt;img src="https://avatars.githubusercontent.com/u/9066682?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Netrix" Ken /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Netrix Ken&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/pedroafonso18"&gt; &lt;img src="https://avatars.githubusercontent.com/u/157052926?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Pedro" Afonso /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Pedro Afonso&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/RuanAyram"&gt; &lt;img src="https://avatars.githubusercontent.com/u/16547662?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Ruan" Kaylo /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Ruan Kaylo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/luizrgf2"&gt; &lt;img src="https://avatars.githubusercontent.com/u/71092163?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Luiz" Ricardo Gonçalves Felipe /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Luiz Ricardo Gonçalves Felipe&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/chrsmendes"&gt; &lt;img src="https://avatars.githubusercontent.com/u/77082167?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Christopher" Mendes /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Christopher Mendes&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/andreydruz"&gt; &lt;img src="https://avatars.githubusercontent.com/u/976438?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="andreydruz/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;andreydruz&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/joaosouz4dev"&gt; &lt;img src="https://avatars.githubusercontent.com/u/47183663?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="João" Victor Souza /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;João Victor Souza&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/gusnips"&gt; &lt;img src="https://avatars.githubusercontent.com/u/981265?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Gustavo" Salomé /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Gustavo Salomé &lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/DwiRizqiH"&gt; &lt;img src="https://avatars.githubusercontent.com/u/69355492?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Ahmad" Dwi Rizqi Hidayatulloh /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Ahmad Dwi Rizqi Hidayatulloh&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/elohmeier"&gt; &lt;img src="https://avatars.githubusercontent.com/u/2536303?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="elohmeier/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;elohmeier&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/fadlee"&gt; &lt;img src="https://avatars.githubusercontent.com/u/334797?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Fadlul" Alim /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Fadlul Alim&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/JobasFernandes"&gt; &lt;img src="https://avatars.githubusercontent.com/u/26033148?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Joseph" Fernandes /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Joseph Fernandes&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/ruben18salazar3"&gt; &lt;img src="https://avatars.githubusercontent.com/u/86245508?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Rubén" Salazar /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Rubén Salazar&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/ryanachdiadsyah"&gt; &lt;img src="https://avatars.githubusercontent.com/u/165612793?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Ryan" Achdiadsyah /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Ryan Achdiadsyah&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/ViFigueiredo"&gt; &lt;img src="https://avatars.githubusercontent.com/u/67883343?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="ViFigueiredo/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;ViFigueiredo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/cadao7"&gt; &lt;img src="https://avatars.githubusercontent.com/u/306330?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="Ricardo" Maminhak /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;Ricardo Maminhak&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center" style="word-wrap: break-word; width: 150.0; height: 150.0"&gt; &lt;a href="https://github.com/zennnez"&gt; &lt;img src="https://avatars.githubusercontent.com/u/3524740?v=4" width="100;" style="border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px" alt="zen/" /&gt; &lt;br /&gt; &lt;sub style="font-size:14px"&gt;&lt;b&gt;zen&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Clients&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/gusnips/wuzapi-node"&gt;wuzapi TypeScript / Node Client&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Star History&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.star-history.com/#asternic/wuzapi&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=asternic/wuzapi&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright © 2025 Nicolás Gudiño and contributors&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://choosealicense.com/licenses/mit/"&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;h2&gt;Icon Attribution&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.flaticon.com/free-icons/communication"&gt;Communication icons created by Vectors Market - Flaticon&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Legal&lt;/h2&gt; 
&lt;p&gt;This code is in no way affiliated with, authorized, maintained, sponsored or endorsed by WhatsApp or any of its affiliates or subsidiaries. This is an independent and unofficial software. Use at your own risk.&lt;/p&gt; 
&lt;h2&gt;Cryptography Notice&lt;/h2&gt; 
&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href="http://www.wassenaar.org/"&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>keploy/keploy</title>
      <link>https://github.com/keploy/keploy</link>
      <description>&lt;p&gt;Unit, API &amp; Integration Testing Agent for Developers. Generate tests, mocks/stubs for your APIs that actually work!&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img align="center" src="https://docs.keploy.io/img/keploy-logo-dark.svg?s=200&amp;amp;v=4" height="40%" width="40%" alt="keploy logo" /&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt; &lt;b&gt; ⚡️ API tests faster than unit tests, from user traffic ⚡️ &lt;/b&gt; &lt;/h3&gt; 
&lt;p align="center"&gt; 🌟 The must-have tool for developers in the AI-Gen era 🌟 &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h4 align="center"&gt; &lt;a href="https://x.com/Keployio"&gt; &lt;img src="https://img.shields.io/badge/follow-%40keployio-1DA1F2?logo=X&amp;amp;style=social" alt="Keploy X!" /&gt; &lt;/a&gt; &lt;a href="https://github.com/Keploy/Keploy/"&gt; &lt;img src="https://img.shields.io/github/stars/keploy/keploy?color=%23EAC54F&amp;amp;logo=github&amp;amp;label=Help%20us%20reach%2020K%20stars!%20Now%20at:" alt="Help us reach 20k stars!" /&gt; &lt;/a&gt; &lt;a href="https://landscape.cncf.io/?item=app-definition-and-development--continuous-integration-delivery--keploy"&gt; &lt;img src="https://img.shields.io/badge/CNCF%20Landscape-5699C6?logo=cncf&amp;amp;style=social" alt="Keploy CNCF Landscape" /&gt; &lt;/a&gt; &lt;p&gt;&lt;a href="https://join.slack.com/t/keploy/shared_invite/zt-357qqm9b5-PbZRVu3Yt2rJIa6ofrwWNg"&gt;&lt;img src="https://img.shields.io/badge/Slack-4A154B?style=for-the-badge&amp;amp;logo=slack&amp;amp;logoColor=white" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/keploy/"&gt;&lt;img src="https://img.shields.io/badge/linkedin-%230077B5.svg?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white" alt="LinkedIn" /&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UC6OTg7F4o0WkmNtSoob34lg"&gt;&lt;img src="https://img.shields.io/badge/YouTube-%23FF0000.svg?style=for-the-badge&amp;amp;logo=YouTube&amp;amp;logoColor=white" alt="YouTube" /&gt;&lt;/a&gt; &lt;a href="https://x.com/Keployio"&gt;&lt;img src="https://img.shields.io/badge/X-%231DA1F2.svg?style=for-the-badge&amp;amp;logo=X&amp;amp;logoColor=white" alt="X" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://trendshift.io/repositories/3262" target="_blank"&gt;&lt;img src="https://trendshift.io/api/badge/repositories/3262" alt="keploy%2Fkeploy | Trendshift" style="width: 250px; height: 55px;" width="250" height="55" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://keploy.io"&gt;Keploy&lt;/a&gt; is &lt;strong&gt;developer-centric&lt;/strong&gt; API testing tool that creates &lt;strong&gt;tests along with built-in-mocks&lt;/strong&gt;, faster than unit tests.&lt;/p&gt; 
&lt;p&gt;Keploy not only records API calls, but also records database calls and replays them during testing, making it &lt;strong&gt;easy to use, powerful, and extensible&lt;/strong&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/keploy/docs/main/static/gif/record-tc.gif" width="60%" alt="Convert API calls to test cases" /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;🐰 &lt;strong&gt;Fun fact:&lt;/strong&gt; Keploy uses itself for testing! Check out our swanky coverage badge: &lt;a href="https://coveralls.io/github/keploy/keploy?branch=main&amp;amp;kill_cache=1"&gt;&lt;img src="https://coveralls.io/repos/github/keploy/keploy/badge.svg?branch=main&amp;amp;kill_cache=1" alt="Coverage Status" /&gt;&lt;/a&gt; &amp;nbsp;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🚨 Here for &lt;a href="https://raw.githubusercontent.com/keploy/keploy/main/README-UnitGen.md"&gt;Unit Test Generator&lt;/a&gt; (ut-gen)?&lt;/h2&gt; 
&lt;p&gt;Keploy has newly launched the world's first unit test generator(ut-gen) implementation of &lt;a href="https://arxiv.org/pdf/2402.09171"&gt;Meta LLM research paper&lt;/a&gt;, it understands code semantics and generates meaningful unit tests, aiming to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automate unit test generation (UTG)&lt;/strong&gt;: Quickly generate comprehensive unit tests and reduce redundant manual effort.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Improve edge cases&lt;/strong&gt;: Extend and improve the scope of automated tests to cover more complex scenarios, often missed manually.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Boost test coverage&lt;/strong&gt;: As codebases grow, ensuring exhaustive coverage should become feasible, aligning with our mission.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;📜 Follow &lt;a href="https://raw.githubusercontent.com/keploy/keploy/main/README-UnitGen.md"&gt;Unit Test Generator README&lt;/a&gt;! ✅&lt;/h3&gt; 
&lt;h2&gt;📘 Documentation!&lt;/h2&gt; 
&lt;p&gt;Become a Keploy pro with &lt;strong&gt;&lt;a href="https://keploy.io/docs/"&gt;Keploy Documentation&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/keploy/docs/main/static/gif/record-replay.gif" width="100%" alt="Record Replay Testing" /&gt; 
&lt;h1&gt;🚀 Quick Installation (API test generator)&lt;/h1&gt; 
&lt;p&gt;Integrate Keploy by installing the agent locally. No code-changes required.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl --silent -O -L https://keploy.io/install.sh &amp;amp;&amp;amp; source install.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🎬 Recording Testcases&lt;/h2&gt; 
&lt;p&gt;Start your app with Keploy to convert API calls as Tests and Mocks/Stubs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;keploy record -c "CMD_TO_RUN_APP" 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, if you're using a simple Python app the &lt;code&gt;CMD_TO_RUN_APP&lt;/code&gt; would resemble to &lt;code&gt;python main.py&lt;/code&gt;, for Golang &lt;code&gt;go run main.go&lt;/code&gt;, for java &lt;code&gt;java -jar xyz.jar&lt;/code&gt;, for node &lt;code&gt;npm start&lt;/code&gt;..&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;keploy record -c "python main.py"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🧪 Running Tests&lt;/h2&gt; 
&lt;p&gt;Shut down the databases, redis, kafka or any other services your application uses. Keploy doesn't need those during test.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;keploy test -c "CMD_TO_RUN_APP" --delay 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;✅ Test Coverage Integration&lt;/h2&gt; 
&lt;p&gt;To integrate with your unit-testing library and see combine test coverage, follow this &lt;a href="https://keploy.io/docs/server/sdk-installation/go/"&gt;test-coverage guide&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;h4&gt;&lt;strong&gt;If You Had Fun:&lt;/strong&gt; Please leave a 🌟 star on this repo! It's free and will bring a smile. 😄 👏&lt;/h4&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;One-Click Setup 🚀&lt;/h2&gt; 
&lt;p&gt;Setup and run keploy quickly, with no local machine installation required:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/keploy/keploy/main/%5Bhttps://github.dev/Sonichigo/mux-sql%5D(https://github.dev/Sonichigo/mux-sql)"&gt;&lt;img src="https://img.shields.io/badge/GH%20codespace-3670A0?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=fff" alt="GitHub Codescape" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🤔 Questions?&lt;/h2&gt; 
&lt;p&gt;Reach out to us. We're here to help!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://join.slack.com/t/keploy/shared_invite/zt-357qqm9b5-PbZRVu3Yt2rJIa6ofrwWNg"&gt;&lt;img src="https://img.shields.io/badge/Slack-4A154B?style=for-the-badge&amp;amp;logo=slack&amp;amp;logoColor=white" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/keploy/"&gt;&lt;img src="https://img.shields.io/badge/linkedin-%230077B5.svg?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white" alt="LinkedIn" /&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UC6OTg7F4o0WkmNtSoob34lg"&gt;&lt;img src="https://img.shields.io/badge/YouTube-%23FF0000.svg?style=for-the-badge&amp;amp;logo=YouTube&amp;amp;logoColor=white" alt="YouTube" /&gt;&lt;/a&gt; &lt;a href="https://x.com/Keployio"&gt;&lt;img src="https://img.shields.io/badge/X-%231DA1F2.svg?style=for-the-badge&amp;amp;logo=X&amp;amp;logoColor=white" alt="X" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🌐 Language Support&lt;/h2&gt; 
&lt;p&gt;From Go's gopher 🐹 to Python's snake 🐍, we support:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/badge/go-%2300ADD8.svg?style=for-the-badge&amp;amp;logo=go&amp;amp;logoColor=white" alt="Go" /&gt; &lt;img src="https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&amp;amp;logo=java&amp;amp;logoColor=white" alt="Java" /&gt; &lt;img src="https://img.shields.io/badge/node.js-6DA55F?style=for-the-badge&amp;amp;logo=node.js&amp;amp;logoColor=white" alt="NodeJS" /&gt; &lt;img src="https://img.shields.io/badge/Rust-darkred?style=for-the-badge&amp;amp;logo=rust&amp;amp;logoColor=white" alt="Rust" /&gt; &lt;img src="https://img.shields.io/badge/csharp-purple?style=for-the-badge&amp;amp;logo=csharp&amp;amp;logoColor=white" alt="C#" /&gt; &lt;img src="https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=ffdd54" alt="Python" /&gt;&lt;/p&gt; 
&lt;h2&gt;🫰 Keploy Adopters 🧡&lt;/h2&gt; 
&lt;p&gt;So you and your organisation are using Keploy? That’s great. Please add yourselves to &lt;a href="https://github.com/orgs/keploy/discussions/1765"&gt;&lt;strong&gt;this list,&lt;/strong&gt;&lt;/a&gt; and we'll send you goodies! 💖&lt;/p&gt; 
&lt;p&gt;We are happy and proud to have you all as part of our community! 💖&lt;/p&gt; 
&lt;h2&gt;🎩 How's the Magic Happen?&lt;/h2&gt; 
&lt;p&gt;Keploy proxy captures and replays &lt;strong&gt;ALL&lt;/strong&gt; (CRUD operations, including non-idempotent APIs) of your app's network interactions.&lt;/p&gt; 
&lt;p&gt;Take a journey to &lt;strong&gt;&lt;a href="https://keploy.io/docs/keploy-explained/how-keploy-works/"&gt;How Keploy Works?&lt;/a&gt;&lt;/strong&gt; to discover the tricks behind the curtain!&lt;/p&gt; 
&lt;h2&gt;🔧 Core Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;♻️ &lt;strong&gt;Combined Test Coverage:&lt;/strong&gt; Merge your Keploy Tests with your fave testing libraries(JUnit, go-test, py-test, jest) to see a combined test coverage.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🤖 &lt;strong&gt;EBPF Instrumentation:&lt;/strong&gt; Keploy uses EBPF like a secret sauce to make integration code-less, language-agnostic, and oh-so-lightweight.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🌐 &lt;strong&gt;CI/CD Integration:&lt;/strong&gt; Run tests with mocks anywhere you like—locally on the CLI, in your CI pipeline (Jenkins, Github Actions..) , or even across a Kubernetes cluster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;📽️ &lt;strong&gt;Record-Replay Complex Flows:&lt;/strong&gt; Keploy can record and replay complex, distributed API flows as mocks and stubs. It's like having a time machine for your tests—saving you tons of time!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🎭 &lt;strong&gt;Multi-Purpose Mocks:&lt;/strong&gt; You can also use Keploy-generated Mocks, as server Tests!&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;👉 &lt;strong&gt;Explore the code on GitHub&lt;/strong&gt;: &lt;a href="https://github.com/keploy/keploy"&gt;github.com/keploy/keploy&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;👨🏻‍💻 Let's Build Together! 👩🏻‍💻&lt;/h2&gt; 
&lt;p&gt;Whether you're a newbie coder or a wizard 🧙‍♀️, your perspective is golden. Take a peek at our:&lt;/p&gt; 
&lt;p&gt;📜 &lt;a href="https://github.com/keploy/keploy/raw/main/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;❤️ &lt;a href="https://github.com/keploy/keploy/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🐲 Current Limitations!&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Unit Testing:&lt;/strong&gt; While Keploy is designed to run alongside unit testing frameworks (Go test, JUnit..) and can add to the overall code coverage, it still generates integration tests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Production Lands&lt;/strong&gt;: Keploy is currently focused on generating tests for developers. These tests can be captured from any environment, but we have not tested it on high volume production environments. This would need robust deduplication to avoid too many redundant tests being captured. We do have ideas on building a robust deduplication system &lt;a href="https://github.com/keploy/keploy/issues/27"&gt;#27&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;✨ Resources!&lt;/h2&gt; 
&lt;p&gt;🤔 &lt;a href="https://keploy.io/docs/keploy-explained/faq/"&gt;FAQs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🕵️‍️ &lt;a href="https://keploy.io/docs/keploy-explained/why-keploy/"&gt;Why Keploy&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;⚙️ &lt;a href="https://keploy.io/docs/application-development/"&gt;Installation Guide&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;📖 &lt;a href="https://keploy.io/docs/keploy-explained/contribution-guide/"&gt;Contribution Guide&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rcourtman/Pulse</title>
      <link>https://github.com/rcourtman/Pulse</link>
      <description>&lt;p&gt;A responsive monitoring application for Proxmox VE that displays real-time metrics across multiple nodes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pulse&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/rcourtman/Pulse/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/rcourtman/Pulse" alt="GitHub release" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/rcourtman/pulse"&gt;&lt;img src="https://img.shields.io/docker/pulls/rcourtman/pulse" alt="Docker Pulls" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/rcourtman/Pulse" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Real-time monitoring for Proxmox VE and PBS with alerts and webhooks.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Monitor your entire Proxmox infrastructure from a single dashboard. Get instant alerts when VMs go down, backups fail, or storage fills up. Supports email, Discord, Slack, Telegram, and more.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/images/01-dashboard.png" alt="Dashboard" /&gt;&lt;/p&gt; 
&lt;h2&gt;Support Pulse Development&lt;/h2&gt; 
&lt;p&gt;Pulse is built by a solo developer in evenings and weekends. Your support helps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Keep me motivated to add new features&lt;/li&gt; 
 &lt;li&gt;Prioritize bug fixes and user requests&lt;/li&gt; 
 &lt;li&gt;Ensure Pulse stays 100% free and open-source forever&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://github.com/sponsors/rcourtman"&gt;&lt;img src="https://img.shields.io/github/sponsors/rcourtman?style=social&amp;amp;label=Sponsor" alt="GitHub Sponsors" /&gt;&lt;/a&gt; &lt;a href="https://ko-fi.com/rcourtman"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" alt="ko-fi" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Not ready to sponsor?&lt;/strong&gt; Star the project or share it with your homelab community!&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Auto-Discovery&lt;/strong&gt;: Finds Proxmox nodes on your network, one-liner setup via generated scripts&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cluster Support&lt;/strong&gt;: Configure one node, monitor entire cluster&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise Security&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Credentials encrypted at rest, masked in logs, never sent to frontend&lt;/li&gt; 
   &lt;li&gt;CSRF protection for all state-changing operations&lt;/li&gt; 
   &lt;li&gt;Rate limiting (500 req/min general, 10 attempts/min for auth)&lt;/li&gt; 
   &lt;li&gt;Account lockout after failed login attempts&lt;/li&gt; 
   &lt;li&gt;Secure session management with HttpOnly cookies&lt;/li&gt; 
   &lt;li&gt;bcrypt password hashing (cost 12) - passwords NEVER stored in plain text&lt;/li&gt; 
   &lt;li&gt;API tokens stored securely with restricted file permissions&lt;/li&gt; 
   &lt;li&gt;Security headers (CSP, X-Frame-Options, etc.)&lt;/li&gt; 
   &lt;li&gt;Comprehensive audit logging&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Live monitoring of VMs, containers, nodes, storage&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Smart Alerts&lt;/strong&gt;: Email and webhooks (Discord, Slack, Telegram, Teams, ntfy.sh, Gotify) 
  &lt;ul&gt; 
   &lt;li&gt;Example: "VM 'webserver' is down on node 'pve1'"&lt;/li&gt; 
   &lt;li&gt;Example: "Storage 'local-lvm' at 85% capacity"&lt;/li&gt; 
   &lt;li&gt;Example: "VM 'database' is back online"&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Unified view of PBS backups, PVE backups, and snapshots&lt;/li&gt; 
 &lt;li&gt;Config export/import with encryption and authentication&lt;/li&gt; 
 &lt;li&gt;Automatic stable updates with safe rollback (opt-in)&lt;/li&gt; 
 &lt;li&gt;Dark/light themes, responsive design&lt;/li&gt; 
 &lt;li&gt;Built with Go for minimal resource usage&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/SCREENSHOTS.md"&gt;Screenshots →&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Privacy&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Pulse respects your privacy:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;No telemetry or analytics collection&lt;/li&gt; 
 &lt;li&gt;No phone-home functionality&lt;/li&gt; 
 &lt;li&gt;No external API calls (except for configured webhooks)&lt;/li&gt; 
 &lt;li&gt;All data stays on your server&lt;/li&gt; 
 &lt;li&gt;Open source - verify it yourself&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Your infrastructure data is yours alone.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Recommended: Official installer (auto-detects Proxmox and creates container)
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash

# Alternative: Docker
docker run -d -p 7655:7655 -v pulse_data:/data rcourtman/pulse:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Proxmox users&lt;/strong&gt;: The installer detects PVE hosts and automatically creates an optimized LXC container. Choose Quick mode for one-minute setup.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/INSTALL.md"&gt;Advanced installation options →&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Updating&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Automatic Updates (New!):&lt;/strong&gt; Enable during installation or via Settings UI to stay current automatically&lt;br /&gt; &lt;strong&gt;Standard Install:&lt;/strong&gt; Re-run the installer&lt;br /&gt; &lt;strong&gt;Docker:&lt;/strong&gt; &lt;code&gt;docker pull rcourtman/pulse:latest&lt;/code&gt; then recreate container&lt;/p&gt; 
&lt;h3&gt;Initial Setup&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Option A: Interactive Setup (UI)&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open &lt;code&gt;http://&amp;lt;your-server&amp;gt;:7655&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Complete the mandatory security setup&lt;/strong&gt; (first-time only)&lt;/li&gt; 
 &lt;li&gt;Create your admin username and password&lt;/li&gt; 
 &lt;li&gt;Save the generated API token for automation&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Option B: Automated Setup (No UI)&lt;/strong&gt; For automated deployments, configure authentication via environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start Pulse with auth pre-configured - skips setup screen
API_TOKEN=your-api-token ./pulse

# Or use basic auth
PULSE_AUTH_USER=admin PULSE_AUTH_PASS=password ./pulse

# Plain text credentials are automatically hashed for security
# You can also provide pre-hashed values if preferred
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/CONFIGURATION.md#automated-setup-skip-ui"&gt;Configuration Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Configure Nodes&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Two authentication methods available:&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;Method 1: Manual Setup (Recommended for interactive use)&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;After login, go to Settings → Nodes&lt;/li&gt; 
 &lt;li&gt;Discovered nodes appear automatically&lt;/li&gt; 
 &lt;li&gt;Click "Setup Script" next to any node&lt;/li&gt; 
 &lt;li&gt;Click "Generate Setup Code" button (creates a 6-character code valid for 5 minutes)&lt;/li&gt; 
 &lt;li&gt;Copy and run the provided one-liner on your Proxmox/PBS host&lt;/li&gt; 
 &lt;li&gt;Node is configured and monitoring starts automatically&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSL "http://pulse:7655/api/setup-script?type=pve&amp;amp;host=https://pve:8006&amp;amp;auth_token=ABC123" | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Method 2: Automated Setup (For scripts/automation)&lt;/h4&gt; 
&lt;p&gt;Use your permanent API token directly in the URL for automation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# For Proxmox VE
curl -sSL "http://pulse:7655/api/setup-script?type=pve&amp;amp;host=https://pve:8006&amp;amp;auth_token=YOUR_API_TOKEN" | bash

# For Proxmox Backup Server
curl -sSL "http://pulse:7655/api/setup-script?type=pbs&amp;amp;host=https://pbs:8007&amp;amp;auth_token=YOUR_API_TOKEN" | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: &lt;code&gt;pve&lt;/code&gt; for Proxmox VE, &lt;code&gt;pbs&lt;/code&gt; for Proxmox Backup Server&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;host&lt;/code&gt;: Full URL of your Proxmox/PBS server (e.g., &lt;a href="https://192.168.1.100:8006"&gt;https://192.168.1.100:8006&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;auth_token&lt;/code&gt;: Either a 6-character setup code (expires in 5 min) or your permanent API token&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;backup_perms=true&lt;/code&gt; (optional): Add backup management permissions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pulse_url&lt;/code&gt; (optional): Pulse server URL if different from where script is downloaded&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The script handles user creation, permissions, token generation, and registration automatically.&lt;/p&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;h3&gt;Basic&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d \
  --name pulse \
  -p 7655:7655 \
  -v pulse_data:/data \
  --restart unless-stopped \
  rcourtman/pulse:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Network Discovery&lt;/h3&gt; 
&lt;p&gt;Pulse automatically discovers Proxmox nodes on your network! By default, it scans:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;192.168.0.0/16 (home networks)&lt;/li&gt; 
 &lt;li&gt;10.0.0.0/8 (private networks)&lt;/li&gt; 
 &lt;li&gt;172.16.0.0/12 (Docker/internal networks)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To scan a custom subnet instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d \
  --name pulse \
  -p 7655:7655 \
  -v pulse_data:/data \
  -e DISCOVERY_SUBNET="192.168.50.0/24" \
  --restart unless-stopped \
  rcourtman/pulse:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Automated Deployment&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Deploy with authentication pre-configured
docker run -d \
  --name pulse \
  -p 7655:7655 \
  -v pulse_data:/data \
  -e API_TOKEN="your-secure-token" \
  -e PULSE_AUTH_USER="admin" \
  -e PULSE_AUTH_PASS="your-password" \
  --restart unless-stopped \
  rcourtman/pulse:latest

# Plain text credentials are automatically hashed for security
# No setup required - API works immediately
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker Compose&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  pulse:
    image: rcourtman/pulse:latest
    container_name: pulse
    ports:
      - "7655:7655"
    volumes:
      - pulse_data:/data
    environment:
      # NOTE: Env vars override UI settings. Remove env var to allow UI configuration.
      
      # Network discovery (usually not needed - auto-scans common networks)
      # - DISCOVERY_SUBNET=192.168.50.0/24  # Only for non-standard networks
      
      # Ports
      # - PORT=7655                         # Backend port (default: 7655)
      # - FRONTEND_PORT=7655                # Frontend port (default: 7655)
      
      # Security (all optional - runs open by default)
      # - PULSE_AUTH_USER=admin             # Username for web UI login
      # - PULSE_AUTH_PASS=your-password     # Plain text or bcrypt hash (auto-hashed if plain)
      # - API_TOKEN=your-token              # Plain text or SHA3-256 hash (auto-hashed if plain)
      # - ALLOW_UNPROTECTED_EXPORT=false    # Allow export without auth (default: false)
      
      # Security: Plain text credentials are automatically hashed
      # You can provide either:
      # 1. Plain text (auto-hashed): PULSE_AUTH_PASS=mypassword
      # 2. Pre-hashed (advanced): PULSE_AUTH_PASS='$$2a$$12$$...'
      #    Note: Escape $ as $$ in docker-compose.yml for pre-hashed values
      
      # Performance
      # - CONNECTION_TIMEOUT=10             # Connection timeout in seconds (default: 10)
      
      # CORS &amp;amp; logging
      # - ALLOWED_ORIGINS=https://app.example.com  # CORS origins (default: none, same-origin only)
      # - LOG_LEVEL=info                    # Log level: debug/info/warn/error (default: info)
    restart: unless-stopped

volumes:
  pulse_data:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Authentication required&lt;/strong&gt; - Protects your Proxmox infrastructure credentials&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Quick setup wizard&lt;/strong&gt; - Secure your installation in under a minute&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multiple auth methods&lt;/strong&gt;: Password authentication, API tokens, proxy auth (SSO), or combinations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Proxy/SSO support&lt;/strong&gt; - Integrate with Authentik, Authelia, and other authentication proxies (&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/PROXY_AUTH.md"&gt;docs&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise-grade protection&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Credentials encrypted at rest (AES-256-GCM)&lt;/li&gt; 
   &lt;li&gt;CSRF tokens for state-changing operations&lt;/li&gt; 
   &lt;li&gt;Rate limiting and account lockout protection&lt;/li&gt; 
   &lt;li&gt;Secure session management with HttpOnly cookies&lt;/li&gt; 
   &lt;li&gt;bcrypt password hashing (cost 12) - passwords NEVER stored in plain text&lt;/li&gt; 
   &lt;li&gt;API tokens stored securely with restricted file permissions&lt;/li&gt; 
   &lt;li&gt;Security headers (CSP, X-Frame-Options, etc.)&lt;/li&gt; 
   &lt;li&gt;Comprehensive audit logging&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security by design&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Frontend never receives node credentials&lt;/li&gt; 
   &lt;li&gt;API tokens visible only to authenticated users&lt;/li&gt; 
   &lt;li&gt;Export/import requires authentication when configured&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/SECURITY.md"&gt;Security Documentation&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Updating&lt;/h2&gt; 
&lt;h3&gt;Update Notifications&lt;/h3&gt; 
&lt;p&gt;Pulse checks for updates and displays notifications in the UI when new versions are available. For security reasons, updates must be installed manually using the appropriate method for your deployment.&lt;/p&gt; 
&lt;h3&gt;Manual Installation (systemd)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Update to latest stable
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash

# Update to latest RC/pre-release  
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash -s -- --rc

# Install specific version
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash -s -- --version v4.8.0-rc.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker Updates&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Latest stable
docker pull rcourtman/pulse:latest

# Latest RC
docker pull rcourtman/pulse:rc

# Specific version
docker pull rcourtman/pulse:v4.8.0-rc.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Quick start - most settings are in the web UI:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Settings → Nodes&lt;/strong&gt;: Add/remove Proxmox instances&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Settings → System&lt;/strong&gt;: Polling intervals, timeouts, update settings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Settings → Security&lt;/strong&gt;: Authentication and API tokens&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Alerts&lt;/strong&gt;: Thresholds and notifications&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Configuration Files&lt;/h3&gt; 
&lt;p&gt;Pulse uses three separate configuration files with clear separation of concerns:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;.env&lt;/code&gt; - Authentication credentials only&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;system.json&lt;/code&gt; - Application settings&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nodes.enc&lt;/code&gt; - Encrypted node credentials&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/CONFIGURATION.md"&gt;docs/CONFIGURATION.md&lt;/a&gt; for detailed documentation on configuration structure and management.&lt;/p&gt; 
&lt;h3&gt;Email Alerts Configuration&lt;/h3&gt; 
&lt;p&gt;Configure email notifications in &lt;strong&gt;Settings → Alerts → Email Destinations&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;Supported Providers&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Gmail/Google Workspace&lt;/strong&gt;: Requires app-specific password&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Outlook/Office 365&lt;/strong&gt;: Requires app-specific password&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Custom SMTP&lt;/strong&gt;: Any SMTP server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Recommended Settings&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Port 587 with STARTTLS&lt;/strong&gt; (recommended for most providers)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Port 465&lt;/strong&gt; for SSL/TLS&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Port 25&lt;/strong&gt; for unencrypted (not recommended)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Gmail Setup&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Enable 2-factor authentication&lt;/li&gt; 
 &lt;li&gt;Generate app-specific password at &lt;a href="https://myaccount.google.com/apppasswords"&gt;https://myaccount.google.com/apppasswords&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Use your email as username and app password as password&lt;/li&gt; 
 &lt;li&gt;Server: smtp.gmail.com, Port: 587, Enable STARTTLS&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Outlook Setup&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Generate app password at &lt;a href="https://account.microsoft.com/security"&gt;https://account.microsoft.com/security&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Use your email as username and app password as password&lt;/li&gt; 
 &lt;li&gt;Server: smtp-mail.outlook.com, Port: 587, Enable STARTTLS&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Alert Configuration&lt;/h3&gt; 
&lt;p&gt;Pulse provides two complementary approaches for managing alerts:&lt;/p&gt; 
&lt;h4&gt;Custom Alert Rules (Permanent Policy)&lt;/h4&gt; 
&lt;p&gt;Configure persistent alert policies in &lt;strong&gt;Settings → Alerts → Custom Rules&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Define thresholds for specific VMs/containers based on name patterns&lt;/li&gt; 
 &lt;li&gt;Set different thresholds for production vs development environments&lt;/li&gt; 
 &lt;li&gt;Create complex rules with AND/OR logic&lt;/li&gt; 
 &lt;li&gt;Manage all rules through the UI with priority ordering&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Use for:&lt;/strong&gt; Long-term alert policies like "all database VMs should alert at 90%"&lt;/p&gt; 
&lt;h3&gt;HTTPS/TLS Configuration&lt;/h3&gt; 
&lt;p&gt;Enable HTTPS by setting these environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Systemd: sudo systemctl edit pulse-backend
Environment="HTTPS_ENABLED=true"
Environment="TLS_CERT_FILE=/etc/pulse/cert.pem"
Environment="TLS_KEY_FILE=/etc/pulse/key.pem"

# Docker
docker run -d -p 7655:7655 \
  -e HTTPS_ENABLED=true \
  -e TLS_CERT_FILE=/data/cert.pem \
  -e TLS_KEY_FILE=/data/key.pem \
  -v pulse_data:/data \
  -v /path/to/certs:/data/certs:ro \
  rcourtman/pulse:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For deployment overrides (ports, etc), use environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Systemd: sudo systemctl edit pulse-backend
Environment="FRONTEND_PORT=8080"

# Docker: -e FRONTEND_PORT=8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/CONFIGURATION.md"&gt;Full Configuration Guide →&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Backup/Restore&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Via UI (recommended):&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Settings → Security → Backup &amp;amp; Restore&lt;/li&gt; 
 &lt;li&gt;Export: Choose login password or custom passphrase for encryption&lt;/li&gt; 
 &lt;li&gt;Import: Upload backup file with passphrase&lt;/li&gt; 
 &lt;li&gt;Includes all settings, nodes, and custom console URLs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Via CLI:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Export (v4.0.3+)
pulse config export -o backup.enc

# Import
pulse config import -i backup.enc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Updates&lt;/h2&gt; 
&lt;p&gt;Pulse shows when updates are available and provides deployment-specific instructions:&lt;/p&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull rcourtman/pulse:latest
docker stop pulse
docker rm pulse
# Run docker run command again with your settings
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual Install&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The UI will detect your deployment type and show the appropriate update method when a new version is available.&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Status
curl http://localhost:7655/api/health

# Metrics (default time range: 1h)
curl http://localhost:7655/api/charts

# With authentication (if configured)
curl -H "X-API-Token: your-token" http://localhost:7655/api/health
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/API.md"&gt;Full API Documentation →&lt;/a&gt;&lt;/strong&gt; - Complete endpoint reference with examples&lt;/p&gt; 
&lt;h2&gt;Reverse Proxy &amp;amp; SSO&lt;/h2&gt; 
&lt;p&gt;Using Pulse behind a reverse proxy? &lt;strong&gt;WebSocket support is required for real-time updates.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NEW: Proxy Authentication Support&lt;/strong&gt; - Integrate with Authentik, Authelia, and other SSO providers. See &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/PROXY_AUTH.md"&gt;Proxy Authentication Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/REVERSE_PROXY.md"&gt;Reverse Proxy Configuration Guide&lt;/a&gt; for nginx, Caddy, Apache, Traefik, HAProxy, and Cloudflare Tunnel configurations.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;h3&gt;Authentication Issues&lt;/h3&gt; 
&lt;h4&gt;Cannot login after setting up security&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;: Ensure bcrypt hash is exactly 60 characters and wrapped in single quotes&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt;: MUST escape $ characters as $$ (e.g., &lt;code&gt;$$2a$$12$$...&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Example (docker run)&lt;/strong&gt;: &lt;code&gt;PULSE_AUTH_PASS='$2a$12$YTZXOCEylj4TaevZ0DCeI.notayQZ..b0OZ97lUZ.Q24fljLiMQHK'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Example (docker-compose.yml)&lt;/strong&gt;: &lt;code&gt;PULSE_AUTH_PASS='$$2a$$12$$YTZXOCEylj4TaevZ0DCeI.notayQZ..b0OZ97lUZ.Q24fljLiMQHK'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;If hash is truncated or mangled, authentication will fail&lt;/li&gt; 
 &lt;li&gt;Use Quick Security Setup in the UI to avoid manual configuration errors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;.env file not created (Docker)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;: When using environment variables, no .env file is created in /data&lt;/li&gt; 
 &lt;li&gt;The .env file is only created when using Quick Security Setup or password changes&lt;/li&gt; 
 &lt;li&gt;If you provide credentials via environment variables, they take precedence&lt;/li&gt; 
 &lt;li&gt;To use Quick Security Setup: Start container WITHOUT auth environment variables&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;VM Disk Stats Show 0% or Dash&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Known Proxmox 9 limitation&lt;/strong&gt;: API tokens cannot access guest agent data&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/VM_DISK_STATS_TROUBLESHOOTING.md"&gt;VM Disk Stats Troubleshooting Guide&lt;/a&gt; for details&lt;/li&gt; 
 &lt;li&gt;Container (LXC) disk stats work normally&lt;/li&gt; 
 &lt;li&gt;This is a Proxmox API limitation, not a Pulse bug&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Connection Issues&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check Proxmox API is accessible (port 8006/8007)&lt;/li&gt; 
 &lt;li&gt;Verify credentials have PVEAuditor role minimum&lt;/li&gt; 
 &lt;li&gt;For PBS: ensure API token has Datastore.Audit permission&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;High CPU/Memory&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Reduce polling interval in Settings&lt;/li&gt; 
 &lt;li&gt;Check number of monitored nodes&lt;/li&gt; 
 &lt;li&gt;Disable unused features (backups, snapshots)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Logs&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Docker
docker logs pulse

# Manual
journalctl -u pulse -f
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/DOCKER.md"&gt;Docker Guide&lt;/a&gt; - Complete Docker deployment guide&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/CONFIGURATION.md"&gt;Configuration Guide&lt;/a&gt; - Complete setup and configuration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/VM_DISK_MONITORING.md"&gt;VM Disk Monitoring&lt;/a&gt; - Set up QEMU Guest Agent for accurate VM disk usage&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/PORT_CONFIGURATION.md"&gt;Port Configuration&lt;/a&gt; - How to change the default port&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/TROUBLESHOOTING.md"&gt;Troubleshooting&lt;/a&gt; - Common issues and solutions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/API.md"&gt;API Reference&lt;/a&gt; - REST API endpoints and examples&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/WEBHOOKS.md"&gt;Webhook Guide&lt;/a&gt; - Setting up webhooks and custom payloads&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/PROXY_AUTH.md"&gt;Proxy Authentication&lt;/a&gt; - SSO integration with Authentik, Authelia, etc.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/REVERSE_PROXY.md"&gt;Reverse Proxy Setup&lt;/a&gt; - nginx, Caddy, Apache, Traefik configs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/SECURITY.md"&gt;Security&lt;/a&gt; - Security features and best practices&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/FAQ.md"&gt;FAQ&lt;/a&gt; - Common questions and troubleshooting&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/MIGRATION.md"&gt;Migration Guide&lt;/a&gt; - Backup and migration procedures&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mandatory authentication&lt;/strong&gt; protects your infrastructure&lt;/li&gt; 
 &lt;li&gt;Credentials stored encrypted (AES-256-GCM)&lt;/li&gt; 
 &lt;li&gt;API token support for automation&lt;/li&gt; 
 &lt;li&gt;Export/import requires authentication&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Setup script authentication&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;Setup codes&lt;/strong&gt;: Temporary 6-character codes for manual setup (expire in 5 minutes)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;API tokens&lt;/strong&gt;: Permanent tokens for automation and scripting&lt;/li&gt; 
   &lt;li&gt;Use setup codes when giving access to others without sharing your API token&lt;/li&gt; 
   &lt;li&gt;Use API tokens for your own automation or trusted environments&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/SECURITY.md"&gt;Security Details →&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Quick Start - Hot Reload (Recommended)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Best development experience with instant frontend updates
./scripts/hot-dev.sh
# Frontend: http://localhost:5173 (hot reload)
# Backend: http://localhost:7655
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Production-like Development&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Watches files and rebuilds/embeds frontend into Go binary
./dev.sh
# Access at: http://localhost:7655
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Manual Development&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Frontend only
cd frontend-modern
npm install
npm run dev

# Backend only
go build -o pulse ./cmd/pulse
./pulse

# Or use make for full rebuild
make dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Visual Tour&lt;/h2&gt; 
&lt;p&gt;See Pulse in action with our &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/SCREENSHOTS.md"&gt;complete screenshot gallery →&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Core Features&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Dashboard&lt;/th&gt; 
   &lt;th&gt;Storage&lt;/th&gt; 
   &lt;th&gt;Backups&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/images/01-dashboard.png" alt="Dashboard" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/images/02-storage.png" alt="Storage" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/images/03-backups.png" alt="Backups" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;Real-time monitoring of nodes, VMs &amp;amp; containers&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;Storage pool usage across all nodes&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;Unified backup management &amp;amp; PBS integration&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Alerts &amp;amp; Configuration&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Alert Configuration&lt;/th&gt; 
   &lt;th&gt;Alert History&lt;/th&gt; 
   &lt;th&gt;Settings&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/images/04-alerts.png" alt="Alerts" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/images/05-alert-history.png" alt="Alert History" /&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/images/06-settings.png" alt="Settings" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;Configure thresholds &amp;amp; notifications&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;Track patterns with visual timeline&lt;/em&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;em&gt;Manage nodes &amp;amp; authentication&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Mobile Experience&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Mobile Dashboard&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;img src="https://raw.githubusercontent.com/rcourtman/Pulse/main/docs/images/08-mobile.png" alt="Mobile" /&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;em&gt;Fully responsive interface for monitoring on the go&lt;/em&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rcourtman/Pulse/releases"&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/r/rcourtman/pulse"&gt;Docker Hub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rcourtman/Pulse/issues"&gt;Issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT - See &lt;a href="https://raw.githubusercontent.com/rcourtman/Pulse/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ccfos/nightingale</title>
      <link>https://github.com/ccfos/nightingale</link>
      <description>&lt;p&gt;Nightingale for monitoring and alerting, just as Grafana for visualization.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://github.com/ccfos/nightingale"&gt; &lt;img src="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/img/Nightingale_L_V.png" alt="nightingale - cloud native monitoring" width="100" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;Open-Source Alerting Expert&lt;/b&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://flashcat.cloud/docs/"&gt; &lt;img alt="Docs" src="https://img.shields.io/badge/docs-get%20started-brightgreen" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/u/flashcatcloud"&gt; &lt;img alt="Docker pulls" src="https://img.shields.io/docker/pulls/flashcatcloud/nightingale" /&gt;&lt;/a&gt; &lt;a href="https://github.com/ccfos/nightingale/graphs/contributors"&gt; &lt;img alt="GitHub contributors" src="https://img.shields.io/github/contributors-anon/ccfos/nightingale" /&gt;&lt;/a&gt; &lt;img alt="GitHub Repo stars" src="https://img.shields.io/github/stars/ccfos/nightingale" /&gt; &lt;img alt="GitHub forks" src="https://img.shields.io/github/forks/ccfos/nightingale" /&gt; &lt;br /&gt;&lt;img alt="GitHub Repo issues" src="https://img.shields.io/github/issues/ccfos/nightingale" /&gt; &lt;img alt="GitHub Repo issues closed" src="https://img.shields.io/github/issues-closed/ccfos/nightingale" /&gt; &lt;img alt="GitHub latest release" src="https://img.shields.io/github/v/release/ccfos/nightingale" /&gt; &lt;img alt="License" src="https://img.shields.io/badge/license-Apache--2.0-blue" /&gt; &lt;a href="https://n9e-talk.slack.com/"&gt; &lt;img alt="GitHub contributors" src="https://img.shields.io/badge/join%20slack-%23n9e-brightgreen.svg?sanitize=true" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/ccfos/nightingale/main/README.md"&gt;English&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/ccfos/nightingale/main/README_zh.md"&gt;中文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🎯 What is Nightingale&lt;/h2&gt; 
&lt;p&gt;Nightingale is an open-source monitoring project that focuses on alerting. Similar to Grafana, Nightingale also connects with various existing data sources. However, while Grafana emphasizes visualization, Nightingale places greater emphasis on the alerting engine, as well as the processing and distribution of alarms.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The Nightingale project was initially developed and open-sourced by DiDi.inc. On May 11, 2022, it was donated to the Open Source Development Committee of the China Computer Federation (CCF ODC).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src="https://n9e.github.io/img/global/arch-bg.png" alt="" /&gt;&lt;/p&gt; 
&lt;h2&gt;💡 How Nightingale Works&lt;/h2&gt; 
&lt;p&gt;Many users have already collected metrics and log data. In this case, you can connect your storage repositories (such as VictoriaMetrics, ElasticSearch, etc.) as data sources in Nightingale. This allows you to configure alerting rules and notification rules within Nightingale, enabling the generation and distribution of alarms.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/img/readme/20240221152601.png" alt="Nightingale Product Architecture" /&gt;&lt;/p&gt; 
&lt;p&gt;Nightingale itself does not provide monitoring data collection capabilities. We recommend using &lt;a href="https://github.com/flashcatcloud/categraf"&gt;Categraf&lt;/a&gt; as the collector, which integrates seamlessly with Nightingale.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/flashcatcloud/categraf"&gt;Categraf&lt;/a&gt; can collect monitoring data from operating systems, network devices, various middleware, and databases. It pushes this data to Nightingale via the &lt;code&gt;Prometheus Remote Write&lt;/code&gt; protocol. Nightingale then stores the monitoring data in a time-series database (such as Prometheus, VictoriaMetrics, etc.) and provides alerting and visualization capabilities.&lt;/p&gt; 
&lt;p&gt;For certain edge data centers with poor network connectivity to the central Nightingale server, we offer a distributed deployment mode for the alerting engine. In this mode, even if the network is disconnected, the alerting functionality remains unaffected.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/img/readme/20240222102119.png" alt="Edge Deployment Mode" /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;In the above diagram, Data Center A has a good network with the central data center, so it uses the Nightingale process in the central data center as the alerting engine. Data Center B has a poor network with the central data center, so it deploys &lt;code&gt;n9e-edge&lt;/code&gt; as the alerting engine to handle alerting for its own data sources.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;🔕 Alert Noise Reduction, Escalation, and Collaboration&lt;/h2&gt; 
&lt;p&gt;Nightingale focuses on being an alerting engine, responsible for generating alarms and flexibly distributing them based on rules. It supports 20 built-in notification medias (such as phone calls, SMS, email, DingTalk, Slack, etc.).&lt;/p&gt; 
&lt;p&gt;If you have more advanced requirements, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Want to consolidate events from multiple monitoring systems into one platform for unified noise reduction, response handling, and data analysis.&lt;/li&gt; 
 &lt;li&gt;Want to support personnel scheduling, practice on-call culture, and support alert escalation (to avoid missing alerts) and collaborative handling.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then Nightingale is not suitable. It is recommended that you choose on-call products such as PagerDuty and FlashDuty. These products are simple and easy to use.&lt;/p&gt; 
&lt;h2&gt;🗨️ Communication Channels&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Report Bugs:&lt;/strong&gt; It is highly recommended to submit issues via the &lt;a href="https://github.com/ccfos/nightingale/issues/new?assignees=&amp;amp;labels=kind%2Fbug&amp;amp;projects=&amp;amp;template=bug_report.yml"&gt;Nightingale GitHub Issue tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; For more information, we recommend thoroughly browsing the &lt;a href="https://n9e.github.io/"&gt;Nightingale Documentation Site&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🔑 Key Features&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/img/readme/2025-05-23_18-43-37.png" alt="Nightingale Alerting rules" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nightingale supports alerting rules, mute rules, subscription rules, and notification rules. It natively supports 20 types of notification media and allows customization of message templates.&lt;/li&gt; 
 &lt;li&gt;It supports event pipelines for Pipeline processing of alarms, facilitating automated integration with in-house systems. For example, it can append metadata to alarms or perform relabeling on events.&lt;/li&gt; 
 &lt;li&gt;It introduces the concept of business groups and a permission system to manage various rules in a categorized manner.&lt;/li&gt; 
 &lt;li&gt;Many databases and middleware come with built-in alert rules that can be directly imported and used. It also supports direct import of Prometheus alerting rules.&lt;/li&gt; 
 &lt;li&gt;It supports alerting self-healing, which automatically triggers a script to execute predefined logic after an alarm is generated—such as cleaning up disk space or capturing the current system state.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/img/readme/2025-05-30_08-49-28.png" alt="Nightingale Alarm Dashboard" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nightingale archives historical alarms and supports multi-dimensional query and statistics.&lt;/li&gt; 
 &lt;li&gt;It supports flexible aggregation grouping, allowing a clear view of the distribution of alarms across the company.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/img/readme/2025-05-23_18-46-06.png" alt="Nightingale Integration Center" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nightingale has built-in metric descriptions, dashboards, and alerting rules for common operating systems, middleware, and databases, which are contributed by the community with varying quality.&lt;/li&gt; 
 &lt;li&gt;It directly receives data via multiple protocols such as Remote Write, OpenTSDB, Datadog, and Falcon, integrates with various Agents.&lt;/li&gt; 
 &lt;li&gt;It supports data sources like Prometheus, ElasticSearch, Loki, ClickHouse, MySQL, Postgres, allowing alerting based on data from these sources.&lt;/li&gt; 
 &lt;li&gt;Nightingale can be easily embedded into internal enterprise systems (e.g. Grafana, CMDB), and even supports configuring menu visibility for these embedded systems.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/img/readme/2025-05-23_18-49-02.png" alt="Nightingale dashboards" /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nightingale supports dashboard functionality, including common chart types, and comes with pre-built dashboards. The image above is a screenshot of one of these dashboards.&lt;/li&gt; 
 &lt;li&gt;If you are already accustomed to Grafana, it is recommended to continue using Grafana for visualization, as Grafana has deeper expertise in this area.&lt;/li&gt; 
 &lt;li&gt;For machine-related monitoring data collected by Categraf, it is advisable to use Nightingale's built-in dashboards for viewing. This is because Categraf's metric naming follows Telegraf's convention, which differs from that of Node Exporter.&lt;/li&gt; 
 &lt;li&gt;Due to Nightingale's concept of business groups (where machines can belong to different groups), there may be scenarios where you only want to view machines within the current business group on the dashboard. Thus, Nightingale's dashboards can be linked with business groups for interactive filtering.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🌟 Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#ccfos/nightingale&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=ccfos/nightingale&amp;amp;type=Date" alt="Stargazers over time" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🔥 Users&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/img/readme/logos.png" alt="User Logos" /&gt;&lt;/p&gt; 
&lt;h2&gt;🤝 Community Co-Building&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;❇️ Please read the &lt;a href="https://raw.githubusercontent.com/ccfos/nightingale/main/doc/community-governance.md"&gt;Nightingale Open Source Project and Community Governance Draft&lt;/a&gt;. We sincerely welcome every user, developer, company, and organization to use Nightingale, actively report bugs, submit feature requests, share best practices, and help build a professional and active open-source community.&lt;/li&gt; 
 &lt;li&gt;❤️ Nightingale Contributors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;a href="https://github.com/ccfos/nightingale/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=ccfos/nightingale" /&gt; &lt;/a&gt; 
&lt;h2&gt;📜 License&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/didi/nightingale/raw/main/LICENSE"&gt;Apache License V2.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>pocketbase/pocketbase</title>
      <link>https://github.com/pocketbase/pocketbase</link>
      <description>&lt;p&gt;Open Source realtime backend in 1 file&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://pocketbase.io" target="_blank" rel="noopener"&gt; &lt;img src="https://i.imgur.com/5qimnm5.png" alt="PocketBase - open source backend in 1 file" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/pocketbase/pocketbase/actions/workflows/release.yaml" target="_blank" rel="noopener"&gt;&lt;img src="https://github.com/pocketbase/pocketbase/actions/workflows/release.yaml/badge.svg?sanitize=true" alt="build" /&gt;&lt;/a&gt; &lt;a href="https://github.com/pocketbase/pocketbase/releases" target="_blank" rel="noopener"&gt;&lt;img src="https://img.shields.io/github/release/pocketbase/pocketbase.svg?sanitize=true" alt="Latest releases" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/pocketbase/pocketbase" target="_blank" rel="noopener"&gt;&lt;img src="https://godoc.org/github.com/pocketbase/pocketbase?status.svg?sanitize=true" alt="Go package documentation" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://pocketbase.io"&gt;PocketBase&lt;/a&gt; is an open source Go backend that includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;embedded database (&lt;em&gt;SQLite&lt;/em&gt;) with &lt;strong&gt;realtime subscriptions&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;built-in &lt;strong&gt;files and users management&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;convenient &lt;strong&gt;Admin dashboard UI&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;and simple &lt;strong&gt;REST-ish API&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;For documentation and examples, please visit &lt;a href="https://pocketbase.io/docs"&gt;https://pocketbase.io/docs&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Please keep in mind that PocketBase is still under active development and therefore full backward compatibility is not guaranteed before reaching v1.0.0.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;API SDK clients&lt;/h2&gt; 
&lt;p&gt;The easiest way to interact with the PocketBase Web APIs is to use one of the official SDK clients:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;JavaScript - &lt;a href="https://github.com/pocketbase/js-sdk"&gt;pocketbase/js-sdk&lt;/a&gt;&lt;/strong&gt; (&lt;em&gt;Browser, Node.js, React Native&lt;/em&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dart - &lt;a href="https://github.com/pocketbase/dart-sdk"&gt;pocketbase/dart-sdk&lt;/a&gt;&lt;/strong&gt; (&lt;em&gt;Web, Mobile, Desktop, CLI&lt;/em&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You could also check the recommendations in &lt;a href="https://pocketbase.io/docs/how-to-use/"&gt;https://pocketbase.io/docs/how-to-use/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;h3&gt;Use as standalone app&lt;/h3&gt; 
&lt;p&gt;You could download the prebuilt executable for your platform from the &lt;a href="https://github.com/pocketbase/pocketbase/releases"&gt;Releases page&lt;/a&gt;. Once downloaded, extract the archive and run &lt;code&gt;./pocketbase serve&lt;/code&gt; in the extracted directory.&lt;/p&gt; 
&lt;p&gt;The prebuilt executables are based on the &lt;a href="https://github.com/pocketbase/pocketbase/raw/master/examples/base/main.go"&gt;&lt;code&gt;examples/base/main.go&lt;/code&gt; file&lt;/a&gt; and comes with the JS VM plugin enabled by default which allows to extend PocketBase with JavaScript (&lt;em&gt;for more details please refer to &lt;a href="https://pocketbase.io/docs/js-overview/"&gt;Extend with JavaScript&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt; 
&lt;h3&gt;Use as a Go framework/toolkit&lt;/h3&gt; 
&lt;p&gt;PocketBase is distributed as a regular Go library package which allows you to build your own custom app specific business logic and still have a single portable executable at the end.&lt;/p&gt; 
&lt;p&gt;Here is a minimal example:&lt;/p&gt; 
&lt;ol start="0"&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://go.dev/doc/install"&gt;Install Go 1.23+&lt;/a&gt; (&lt;em&gt;if you haven't already&lt;/em&gt;)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a new project directory with the following &lt;code&gt;main.go&lt;/code&gt; file inside it:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
    "log"

    "github.com/pocketbase/pocketbase"
    "github.com/pocketbase/pocketbase/core"
)

func main() {
    app := pocketbase.New()

    app.OnServe().BindFunc(func(se *core.ServeEvent) error {
        // registers new "GET /hello" route
        se.Router.GET("/hello", func(re *core.RequestEvent) error {
            return re.String(200, "Hello world!")
        })

        return se.Next()
    })

    if err := app.Start(); err != nil {
        log.Fatal(err)
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To init the dependencies, run &lt;code&gt;go mod init myapp &amp;amp;&amp;amp; go mod tidy&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To start the application, run &lt;code&gt;go run main.go serve&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;To build a statically linked executable, you can run &lt;code&gt;CGO_ENABLED=0 go build&lt;/code&gt; and then start the created executable with &lt;code&gt;./myapp serve&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;For more details please refer to &lt;a href="https://pocketbase.io/docs/go-overview/"&gt;Extend with Go&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Building and running the repo main.go example&lt;/h3&gt; 
&lt;p&gt;To build the minimal standalone executable, like the prebuilt ones in the releases page, you can simply run &lt;code&gt;go build&lt;/code&gt; inside the &lt;code&gt;examples/base&lt;/code&gt; directory:&lt;/p&gt; 
&lt;ol start="0"&gt; 
 &lt;li&gt;&lt;a href="https://go.dev/doc/install"&gt;Install Go 1.23+&lt;/a&gt; (&lt;em&gt;if you haven't already&lt;/em&gt;)&lt;/li&gt; 
 &lt;li&gt;Clone/download the repo&lt;/li&gt; 
 &lt;li&gt;Navigate to &lt;code&gt;examples/base&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build&lt;/code&gt; (&lt;em&gt;&lt;a href="https://go.dev/doc/install/source#environment"&gt;https://go.dev/doc/install/source#environment&lt;/a&gt;&lt;/em&gt;)&lt;/li&gt; 
 &lt;li&gt;Start the created executable by running &lt;code&gt;./base serve&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note that the supported build targets by the pure Go SQLite driver at the moment are:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;darwin  amd64
darwin  arm64
freebsd amd64
freebsd arm64
linux   386
linux   amd64
linux   arm
linux   arm64
linux   ppc64le
linux   riscv64
linux   s390x
windows amd64
windows arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Testing&lt;/h3&gt; 
&lt;p&gt;PocketBase comes with mixed bag of unit and integration tests. To run them, use the standard &lt;code&gt;go test&lt;/code&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go test ./...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check also the &lt;a href="http://pocketbase.io/docs/testing"&gt;Testing guide&lt;/a&gt; to learn how to write your own custom application tests.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a security vulnerability within PocketBase, please send an e-mail to &lt;strong&gt;support at pocketbase.io&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;All reports will be promptly addressed and you'll be credited in the fix release notes.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;PocketBase is free and open source project licensed under the &lt;a href="https://raw.githubusercontent.com/pocketbase/pocketbase/master/LICENSE.md"&gt;MIT License&lt;/a&gt;. You are free to do whatever you want with it, even offering it as a paid service.&lt;/p&gt; 
&lt;p&gt;You could help continuing its development by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/pocketbase/pocketbase/master/CONTRIBUTING.md"&gt;Contribute to the source code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pocketbase/pocketbase/issues"&gt;Suggest new features and report issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;PRs for new OAuth2 providers, bug fixes, code optimizations and documentation improvements are more than welcome.&lt;/p&gt; 
&lt;p&gt;But please refrain creating PRs for &lt;em&gt;new features&lt;/em&gt; without previously discussing the implementation details. PocketBase has a &lt;a href="https://github.com/orgs/pocketbase/projects/2"&gt;roadmap&lt;/a&gt; and I try to work on issues in specific order and such PRs often come in out of nowhere and skew all initial planning with tedious back-and-forth communication.&lt;/p&gt; 
&lt;p&gt;Don't get upset if I close your PR, even if it is well executed and tested. This doesn't mean that it will never be merged. Later we can always refer to it and/or take pieces of your implementation when the time comes to work on the issue (don't worry you'll be credited in the release notes).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tulir/whatsmeow</title>
      <link>https://github.com/tulir/whatsmeow</link>
      <description>&lt;p&gt;Go library for the WhatsApp web multidevice API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whatsmeow&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow"&gt;&lt;img src="https://pkg.go.dev/badge/go.mau.fi/whatsmeow.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;whatsmeow is a Go library for the WhatsApp web multidevice API.&lt;/p&gt; 
&lt;h2&gt;Discussion&lt;/h2&gt; 
&lt;p&gt;Matrix room: &lt;a href="https://matrix.to/#/#whatsmeow:maunium.net"&gt;#whatsmeow:maunium.net&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For questions about the WhatsApp protocol (like how to send a specific type of message), you can also use the &lt;a href="https://github.com/tulir/whatsmeow/discussions/categories/whatsapp-protocol-q-a"&gt;WhatsApp protocol Q&amp;amp;A&lt;/a&gt; section on GitHub discussions.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow"&gt;godoc&lt;/a&gt; includes docs for all methods and event types. There's also a &lt;a href="https://pkg.go.dev/go.mau.fi/whatsmeow#example-package"&gt;simple example&lt;/a&gt; at the top.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Most core features are already present:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending messages to private chats and groups (both text and media)&lt;/li&gt; 
 &lt;li&gt;Receiving all messages&lt;/li&gt; 
 &lt;li&gt;Managing groups and receiving group change events&lt;/li&gt; 
 &lt;li&gt;Joining via invite messages, using and creating invite links&lt;/li&gt; 
 &lt;li&gt;Sending and receiving typing notifications&lt;/li&gt; 
 &lt;li&gt;Sending and receiving delivery and read receipts&lt;/li&gt; 
 &lt;li&gt;Reading and writing app state (contact list, chat pin/mute status, etc)&lt;/li&gt; 
 &lt;li&gt;Sending and handling retry receipts if message decryption fails&lt;/li&gt; 
 &lt;li&gt;Sending status messages (experimental, may not work for large contact lists)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Things that are not yet implemented:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Sending broadcast list messages (this is not supported on WhatsApp web either)&lt;/li&gt; 
 &lt;li&gt;Calls&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>lightningnetwork/lnd</title>
      <link>https://github.com/lightningnetwork/lnd</link>
      <description>&lt;p&gt;Lightning Network Daemon ⚡️&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Lightning Network Daemon&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/lightningnetwork/lnd/actions/workflows/release.yaml"&gt;&lt;img src="https://github.com/lightningnetwork/lnd/actions/workflows/release.yaml/badge.svg?sanitize=true" alt="Release build" /&gt;&lt;/a&gt; &lt;a href="https://github.com/lightningnetwork/lnd/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://web.libera.chat/#lnd"&gt;&lt;img src="https://img.shields.io/badge/chat-on%20libera-brightgreen.svg?sanitize=true" alt="Irc" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/github.com/lightningnetwork/lnd"&gt;&lt;img src="https://godoc.org/github.com/lightningnetwork/lnd?status.svg?sanitize=true" alt="Godoc" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/lightningnetwork/lnd"&gt;&lt;img src="https://goreportcard.com/badge/github.com/lightningnetwork/lnd" alt="Go Report Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/lightningnetwork/lnd/master/logo.png" /&gt; 
&lt;p&gt;The Lightning Network Daemon (&lt;code&gt;lnd&lt;/code&gt;) - is a complete implementation of a &lt;a href="https://lightning.network"&gt;Lightning Network&lt;/a&gt; node. &lt;code&gt;lnd&lt;/code&gt; has several pluggable back-end chain services including &lt;a href="https://github.com/btcsuite/btcd"&gt;&lt;code&gt;btcd&lt;/code&gt;&lt;/a&gt; (a full-node), &lt;a href="https://github.com/bitcoin/bitcoin"&gt;&lt;code&gt;bitcoind&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/lightninglabs/neutrino"&gt;&lt;code&gt;neutrino&lt;/code&gt;&lt;/a&gt; (a new experimental light client). The project's codebase uses the &lt;a href="https://github.com/btcsuite/"&gt;btcsuite&lt;/a&gt; set of Bitcoin libraries, and also exports a large set of isolated re-usable Lightning Network related libraries within it. In the current state &lt;code&gt;lnd&lt;/code&gt; is capable of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Creating channels.&lt;/li&gt; 
 &lt;li&gt;Closing channels.&lt;/li&gt; 
 &lt;li&gt;Completely managing all channel states (including the exceptional ones!).&lt;/li&gt; 
 &lt;li&gt;Maintaining a fully authenticated+validated channel graph.&lt;/li&gt; 
 &lt;li&gt;Performing path finding within the network, passively forwarding incoming payments.&lt;/li&gt; 
 &lt;li&gt;Sending outgoing &lt;a href="https://github.com/lightningnetwork/lightning-onion"&gt;onion-encrypted payments&lt;/a&gt; through the network.&lt;/li&gt; 
 &lt;li&gt;Updating advertised fee schedules.&lt;/li&gt; 
 &lt;li&gt;Automatic channel management (&lt;a href="https://github.com/lightningnetwork/lnd/tree/master/autopilot"&gt;&lt;code&gt;autopilot&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Lightning Network Specification Compliance&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;lnd&lt;/code&gt; &lt;em&gt;fully&lt;/em&gt; conforms to the &lt;a href="https://github.com/lightningnetwork/lightning-rfc"&gt;Lightning Network specification (BOLTs)&lt;/a&gt;. BOLT stands for: Basis of Lightning Technology. The specifications are currently being drafted by several groups of implementers based around the world including the developers of &lt;code&gt;lnd&lt;/code&gt;. The set of specification documents as well as our implementation of the specification are still a work-in-progress. With that said, the current status of &lt;code&gt;lnd&lt;/code&gt;'s BOLT compliance is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 1: Base Protocol&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 2: Peer Protocol for Channel Management&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 3: Bitcoin Transaction and Script Formats&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 4: Onion Routing Protocol&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 5: Recommendations for On-chain Transaction Handling&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 7: P2P Node and Channel Discovery&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 8: Encrypted and Authenticated Transport&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 9: Assigned Feature Flags&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 10: DNS Bootstrap and Assisted Node Location&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; BOLT 11: Invoice Protocol for Lightning Payments&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Developer Resources&lt;/h2&gt; 
&lt;p&gt;The daemon has been designed to be as developer friendly as possible in order to facilitate application development on top of &lt;code&gt;lnd&lt;/code&gt;. Two primary RPC interfaces are exported: an HTTP REST API, and a &lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt; service. The exported APIs are not yet stable, so be warned: they may change drastically in the near future.&lt;/p&gt; 
&lt;p&gt;An automatically generated set of documentation for the RPC APIs can be found at &lt;a href="https://api.lightning.community"&gt;api.lightning.community&lt;/a&gt;. A set of developer resources including guides, articles, example applications and community resources can be found at: &lt;a href="https://docs.lightning.engineering"&gt;docs.lightning.engineering&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, we also have an active &lt;a href="https://lightning.engineering/slack.html"&gt;Slack&lt;/a&gt; where protocol developers, application developers, testers and users gather to discuss various aspects of &lt;code&gt;lnd&lt;/code&gt; and also Lightning in general.&lt;/p&gt; 
&lt;p&gt;First-time contributors are &lt;a href="https://raw.githubusercontent.com/lightningnetwork/lnd/master/docs/review.md"&gt;highly encouraged to start with code review first&lt;/a&gt;, before creating their own Pull Requests.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;In order to build from source, please see &lt;a href="https://raw.githubusercontent.com/lightningnetwork/lnd/master/docs/INSTALL.md"&gt;the installation instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;p&gt;To run lnd from Docker, please see the main &lt;a href="https://raw.githubusercontent.com/lightningnetwork/lnd/master/docs/DOCKER.md"&gt;Docker instructions&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;IRC&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;irc.libera.chat&lt;/li&gt; 
 &lt;li&gt;channel #lnd&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://web.libera.chat/#lnd"&gt;webchat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Safety&lt;/h2&gt; 
&lt;p&gt;When operating a mainnet &lt;code&gt;lnd&lt;/code&gt; node, please refer to our &lt;a href="https://raw.githubusercontent.com/lightningnetwork/lnd/master/docs/safety.md"&gt;operational safety guidelines&lt;/a&gt;. It is important to note that &lt;code&gt;lnd&lt;/code&gt; is still &lt;strong&gt;beta&lt;/strong&gt; software and that ignoring these operational guidelines can lead to loss of funds.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;The developers of &lt;code&gt;lnd&lt;/code&gt; take security &lt;em&gt;very&lt;/em&gt; seriously. The disclosure of security vulnerabilities helps us secure the health of &lt;code&gt;lnd&lt;/code&gt;, privacy of our users, and also the health of the Lightning Network as a whole. If you find any issues regarding security or privacy, please disclose the information responsibly by sending an email to security at lightning dot engineering, preferably encrypted using our designated PGP key (&lt;code&gt;91FE464CD75101DA6B6BAB60555C6465E5BCB3AF&lt;/code&gt;) which can be found &lt;a href="https://gist.githubusercontent.com/Roasbeef/6fb5b52886183239e4aa558f83d085d3/raw/5fa96010af201628bcfa61e9309d9b13d23d220f/security@lightning.engineering"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Further reading&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lightningnetwork/lnd/tree/master/docker"&gt;Step-by-step send payment guide with docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lightningnetwork/lnd/raw/master/docs/code_contribution_guidelines.md"&gt;Contribution guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>wailsapp/wails</title>
      <link>https://github.com/wailsapp/wails</link>
      <description>&lt;p&gt;Create beautiful applications using Go&lt;/p&gt;&lt;hr&gt;&lt;p align="center" style="text-align: center"&gt; &lt;img src="https://raw.githubusercontent.com/wailsapp/wails/master/assets/images/logo-universal.png" width="55%" /&gt;&lt;br /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; Build desktop applications using Go &amp;amp; Web Technologies. &lt;br /&gt; &lt;br /&gt; &lt;a href="https://github.com/wailsapp/wails/raw/master/LICENSE"&gt; &lt;img alt="GitHub" src="https://img.shields.io/github/license/wailsapp/wails" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/wailsapp/wails"&gt; &lt;img src="https://goreportcard.com/badge/github.com/wailsapp/wails" /&gt; &lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/wailsapp/wails"&gt; &lt;img src="https://pkg.go.dev/badge/github.com/wailsapp/wails.svg?sanitize=true" alt="Go Reference" /&gt; &lt;/a&gt; &lt;a href="https://github.com/wailsapp/wails/issues"&gt; &lt;img src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" alt="CodeFactor" /&gt; &lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fwailsapp%2Fwails?ref=badge_shield" alt="FOSSA Status"&gt; &lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwailsapp%2Fwails.svg?type=shield" /&gt; &lt;/a&gt; &lt;a href="https://github.com/avelino/awesome-go" rel="nofollow"&gt; &lt;img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true" alt="Awesome" /&gt; &lt;/a&gt; &lt;a href="https://discord.gg/BrRSWTaxVK"&gt; &lt;img alt="Discord" src="https://dcbadge.vercel.app/api/server/BrRSWTaxVK?style=flat" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://github.com/wailsapp/wails/actions/workflows/build-and-test.yml" rel="nofollow"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/wailsapp/wails/build-and-test.yml?branch=master&amp;amp;logo=Github" alt="Build" /&gt; &lt;/a&gt; &lt;a href="https://github.com/wailsapp/wails/tags" rel="nofollow"&gt; &lt;img alt="GitHub tag (latest SemVer pre-release)" src="https://img.shields.io/github/v/tag/wailsapp/wails?include_prereleases&amp;amp;label=version" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;strong&gt; &lt;samp&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.md"&gt;English&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.zh-Hans.md"&gt;简体中文&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ja.md"&gt;日本語&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ko.md"&gt;한국어&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.es.md"&gt;Español&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.pt-br.md"&gt;Português&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.ru.md"&gt;Русский&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.fr.md"&gt;Francais&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.uz.md"&gt;Uzbek&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.de.md"&gt;Deutsch&lt;/a&gt; · &lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/README.tr.md"&gt;Türkçe&lt;/a&gt;&lt;/p&gt; &lt;/samp&gt; &lt;/strong&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#features"&gt;Features&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#sponsors"&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#stargazers-over-time"&gt;Stargazers over time&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/wailsapp/wails/master/#inspiration"&gt;Inspiration&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;The traditional method of providing web interfaces to Go programs is via a built-in web server. Wails offers a different approach: it provides the ability to wrap both Go code and a web frontend into a single binary. Tools are provided to make this easy for you by handling project creation, compilation and bundling. All you have to do is get creative!&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use standard Go for the backend&lt;/li&gt; 
 &lt;li&gt;Use any frontend technology you are already familiar with to build your UI&lt;/li&gt; 
 &lt;li&gt;Quickly create rich frontends for your Go programs using pre-built templates&lt;/li&gt; 
 &lt;li&gt;Easily call Go methods from Javascript&lt;/li&gt; 
 &lt;li&gt;Auto-generated Typescript definitions for your Go structs and methods&lt;/li&gt; 
 &lt;li&gt;Native Dialogs &amp;amp; Menus&lt;/li&gt; 
 &lt;li&gt;Native Dark / Light mode support&lt;/li&gt; 
 &lt;li&gt;Supports modern translucency and "frosted window" effects&lt;/li&gt; 
 &lt;li&gt;Unified eventing system between Go and Javascript&lt;/li&gt; 
 &lt;li&gt;Powerful cli tool to quickly generate and build your projects&lt;/li&gt; 
 &lt;li&gt;Multiplatform&lt;/li&gt; 
 &lt;li&gt;Uses native rendering engines - &lt;em&gt;no embedded browser&lt;/em&gt;!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Roadmap&lt;/h3&gt; 
&lt;p&gt;The project roadmap may be found &lt;a href="https://github.com/wailsapp/wails/discussions/1484"&gt;here&lt;/a&gt;. Please consult it before creating an enhancement request.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The installation instructions are on the &lt;a href="https://wails.io/docs/gettingstarted/installation"&gt;official website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;This project is supported by these kind people / companies: &lt;img src="https://raw.githubusercontent.com/wailsapp/wails/master/website/static/img/sponsors.svg?sanitize=true" style="width:100%;max-width:800px;" /&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://wails.io/img/sponsor/jetbrains-grayscale.webp" style="width: 100px" /&gt; &lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Is this an alternative to Electron?&lt;/p&gt; &lt;p&gt;Depends on your requirements. It's designed to make it easy for Go programmers to make lightweight desktop applications or add a frontend to their existing applications. Wails does offer native elements such as menus and dialogs, so it could be considered a lightweight electron alternative.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Who is this project aimed at?&lt;/p&gt; &lt;p&gt;Go programmers who want to bundle an HTML/JS/CSS frontend with their applications, without resorting to creating a server and opening a browser to view it.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;What's with the name?&lt;/p&gt; &lt;p&gt;When I saw WebView, I thought "What I really want is tooling around building a WebView app, a bit like Rails is to Ruby". So initially it was a play on words (Webview on Rails). It just so happened to also be a homophone of the English name for the &lt;a href="https://en.wikipedia.org/wiki/Wales"&gt;Country&lt;/a&gt; I am from. So it stuck.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;a href="https://star-history.com/#wailsapp/wails&amp;amp;Date"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date&amp;amp;theme=dark" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date" /&gt; 
  &lt;img alt="Star History Chart" src="https://api.star-history.com/svg?repos=wailsapp/wails&amp;amp;type=Date" /&gt; 
 &lt;/picture&gt; &lt;/a&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;The contributors list is getting too big for the readme! All the amazing people who have contributed to this project have their own page &lt;a href="https://wails.io/credits#contributors"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Fwailsapp%2Fwails?ref=badge_large"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwailsapp%2Fwails.svg?type=large" alt="FOSSA Status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;This project was mainly coded to the following albums:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/1R2rsEUqXjIvAbzM0yHrxA"&gt;Manic Street Preachers - Resistance Is Futile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/4VzCL9kjhgGQeKCiojK1YN"&gt;Manic Street Preachers - This Is My Truth, Tell Me Yours&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/4Krg8zvprquh7TVn9OxZn8"&gt;The Midnight - Endless Summer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3kMfsD07Q32HRWKRrpcexr"&gt;Gary Newman - Savage (Songs from a Broken World)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/0oL0OhrE2rYVns4IGj8h2m"&gt;Steve Vai - Passion &amp;amp; Warfare&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/1nJsbWm3Yy2DW1KIc1OKle"&gt;Ben Howard - Every Kingdom&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/6astw05cTiXEc2OvyByaPs"&gt;Ben Howard - Noonday Dream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/2vBE40Rp60tl7rNqIZjaXM"&gt;Adwaith - Melyn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3v2hrfNGINPLuDP0YDTOjm"&gt;Gwidaith Hen Fran - Cedors Hen Wrach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/2Kh43m04B1UkVcpcRa1Zug"&gt;Metallica - Metallica&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/6SsIdN05HQg2GwYLfXuzLB"&gt;Bloc Party - Silent Alarm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/3tklE2Fgw1hCIUstIwPBJF"&gt;Maxthor - Another World&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://open.spotify.com/album/0c32OywcLpdJCWWMC6vB8v"&gt;Alun Tan Lan - Y Distawrwydd&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>mayswind/ezbookkeeping</title>
      <link>https://github.com/mayswind/ezbookkeeping</link>
      <description>&lt;p&gt;A lightweight, self-hosted personal finance app with a user-friendly interface and powerful bookkeeping features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ezBookkeeping&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/mayswind/ezbookkeeping/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-green.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mayswind/ezbookkeeping/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/mayswind/ezbookkeeping/docker-snapshot.yml?branch=main" alt="Latest Build" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/mayswind/ezbookkeeping"&gt;&lt;img src="https://goreportcard.com/badge/github.com/mayswind/ezbookkeeping" alt="Go Report" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/mayswind/ezbookkeeping"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/mayswind/ezbookkeeping"&gt;&lt;img src="https://img.shields.io/docker/image-size/mayswind/ezbookkeeping.svg?style=flat" alt="Latest Docker Image Size" /&gt;&lt;/a&gt; &lt;a href="https://github.com/mayswind/ezbookkeeping/releases"&gt;&lt;img src="https://img.shields.io/github/release/mayswind/ezbookkeeping.svg?style=flat" alt="Latest Release" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://hellogithub.com/en/repository/mayswind/ezbookkeeping"&gt;&lt;img src="https://api.hellogithub.com/v1/widgets/recommend.svg?rid=ded5af09da574ec1811ddb154f1b2093&amp;amp;claim_uid=LT7EZxeBukCnh0K" alt="Recommend By HelloGitHub" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;ezBookkeeping is a lightweight, self-hosted personal finance app with a user-friendly interface and powerful bookkeeping features. It's easy to deploy, and you can start it with just one single Docker command. Designed to be resource-efficient and highly scalable, it can run smoothly on devices as small as a Raspberry Pi, or scale up to NAS, MicroServers, and even large cluster environments.&lt;/p&gt; 
&lt;p&gt;ezBookkeeping offers tailored interfaces for both mobile and desktop devices. With support for PWA (Progressive Web Apps), you can even &lt;a href="https://raw.githubusercontent.com/wiki/mayswind/ezbookkeeping/img/mobile/add_to_home_screen.gif"&gt;add it to your mobile home screen&lt;/a&gt; and use it like a native app.&lt;/p&gt; 
&lt;p&gt;Live Demo: &lt;a href="https://ezbookkeeping-demo.mayswind.net"&gt;https://ezbookkeeping-demo.mayswind.net&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Open Source &amp;amp; Self-Hosted&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Built for privacy and control&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lightweight &amp;amp; Fast&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Optimized for performance, runs smoothly even on low-resource environments&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy Installation&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Docker-ready&lt;/li&gt; 
   &lt;li&gt;Supports SQLite, MySQL, PostgreSQL&lt;/li&gt; 
   &lt;li&gt;Cross-platform (Windows, macOS, Linux)&lt;/li&gt; 
   &lt;li&gt;Works on x86, amd64, ARM architectures&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User-Friendly Interface&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;UI optimized for both mobile and desktop&lt;/li&gt; 
   &lt;li&gt;PWA support for native-like mobile experience&lt;/li&gt; 
   &lt;li&gt;Dark mode&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI-Powered Features&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Supports MCP (Model Context Protocol) for AI integration&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful Bookkeeping&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Two-level accounts and categories&lt;/li&gt; 
   &lt;li&gt;Attach images to transactions&lt;/li&gt; 
   &lt;li&gt;Location tracking with maps&lt;/li&gt; 
   &lt;li&gt;Recurring transactions&lt;/li&gt; 
   &lt;li&gt;Advanced filtering, search, visualization, and analysis&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Localization &amp;amp; Globalization&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Multi-language and multi-currency support&lt;/li&gt; 
   &lt;li&gt;Automatic exchange rates&lt;/li&gt; 
   &lt;li&gt;Multi-timezone awareness&lt;/li&gt; 
   &lt;li&gt;Custom formats for dates, numbers, and currencies&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Two-factor authentication (2FA)&lt;/li&gt; 
   &lt;li&gt;Login rate limiting&lt;/li&gt; 
   &lt;li&gt;Application lock (PIN code / WebAuthn)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Import/Export&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Supports CSV, OFX, QFX, QIF, IIF, Camt.053, MT940, GnuCash, Firefly III, Beancount, and more&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;h3&gt;Desktop Version&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/wiki/mayswind/ezbookkeeping/img/desktop/en.png"&gt;&lt;img src="https://raw.githubusercontent.com/wiki/mayswind/ezbookkeeping/img/desktop/en.png" alt="ezBookkeeping" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Mobile Version&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/wiki/mayswind/ezbookkeeping/img/mobile/en.png"&gt;&lt;img src="https://raw.githubusercontent.com/wiki/mayswind/ezbookkeeping/img/mobile/en.png" alt="ezBookkeeping" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Run with Docker&lt;/h3&gt; 
&lt;p&gt;Visit &lt;a href="https://hub.docker.com/r/mayswind/ezbookkeeping"&gt;Docker Hub&lt;/a&gt; to see all images and tags.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Latest Release:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ docker run -p8080:8080 mayswind/ezbookkeeping
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Latest Daily Build:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ docker run -p8080:8080 mayswind/ezbookkeeping:latest-snapshot
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install from Binary&lt;/h3&gt; 
&lt;p&gt;Download the latest release: &lt;a href="https://github.com/mayswind/ezbookkeeping/releases"&gt;https://github.com/mayswind/ezbookkeeping/releases&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Linux / macOS&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./ezbookkeeping server run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; .\ezbookkeeping.exe server run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, ezBookkeeping listens on port 8080. You can then visit &lt;code&gt;http://{YOUR_HOST_ADDRESS}:8080/&lt;/code&gt; .&lt;/p&gt; 
&lt;h3&gt;Build from Source&lt;/h3&gt; 
&lt;p&gt;Make sure you have &lt;a href="https://golang.org/"&gt;Golang&lt;/a&gt;, &lt;a href="http://gcc.gnu.org/"&gt;GCC&lt;/a&gt;, &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt; installed. Then download the source code, and follow these steps:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Linux / macOS&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./build.sh package -o ezbookkeeping.tar.gz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All the files will be packaged in &lt;code&gt;ezbookkeeping.tar.gz&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;gt; .\build.bat package -o ezbookkeeping.zip
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All the files will be packaged in &lt;code&gt;ezbookkeeping.zip&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can also build a Docker image. Make sure you have &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; installed, then follow these steps:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./build.sh docker
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions of all kinds.&lt;/p&gt; 
&lt;p&gt;Found a bug? &lt;a href="https://github.com/mayswind/ezbookkeeping/issues"&gt;Submit an issue&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Want to contribute code? Feel free to fork and send a pull request.&lt;/p&gt; 
&lt;p&gt;Contributions of all kinds — bug reports, feature suggestions, documentation improvements, or code — are highly appreciated.&lt;/p&gt; 
&lt;p&gt;Check out our &lt;a href="https://github.com/mayswind/ezbookkeeping/graphs/contributors"&gt;Contributor Graph&lt;/a&gt; to see the amazing people who’ve already helped.&lt;/p&gt; 
&lt;h2&gt;Translating&lt;/h2&gt; 
&lt;p&gt;Help make ezBookkeeping accessible to users around the world. If you want to contribute a translation, please refer to our &lt;a href="https://ezbookkeeping.mayswind.net/translating"&gt;translation guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Currently available translations:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Tag&lt;/th&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Contributors&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;de&lt;/td&gt; 
   &lt;td&gt;Deutsch&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/chrgm"&gt;@chrgm&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;en&lt;/td&gt; 
   &lt;td&gt;English&lt;/td&gt; 
   &lt;td&gt;/&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;es&lt;/td&gt; 
   &lt;td&gt;Español&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/Miguelonlonlon"&gt;@Miguelonlonlon&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;it&lt;/td&gt; 
   &lt;td&gt;Italiano&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/waron97"&gt;@waron97&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ja&lt;/td&gt; 
   &lt;td&gt;日本語&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/tkymmm"&gt;@tkymmm&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;nl&lt;/td&gt; 
   &lt;td&gt;Nederlands&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/automagics"&gt;@automagic&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;pt-BR&lt;/td&gt; 
   &lt;td&gt;Português (Brasil)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/thecodergus"&gt;@thecodergus&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;ru&lt;/td&gt; 
   &lt;td&gt;Русский&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/artegoser"&gt;@artegoser&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;uk&lt;/td&gt; 
   &lt;td&gt;Українська&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/nktlitvinenko"&gt;@nktlitvinenko&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;vi&lt;/td&gt; 
   &lt;td&gt;Tiếng Việt&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/f97"&gt;@f97&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;zh-Hans&lt;/td&gt; 
   &lt;td&gt;中文 (简体)&lt;/td&gt; 
   &lt;td&gt;/&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;zh-Hant&lt;/td&gt; 
   &lt;td&gt;中文 (繁體)&lt;/td&gt; 
   &lt;td&gt;/&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Don't see your language? Help us add it.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href="http://ezbookkeeping.mayswind.net"&gt;English&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://ezbookkeeping.mayswind.net/zh_Hans"&gt;中文 (简体)&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/mayswind/ezbookkeeping/raw/master/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vllm-project/aibrix</title>
      <link>https://github.com/vllm-project/aibrix</link>
      <description>&lt;p&gt;Cost-efficient and pluggable Infrastructure components for GenAI inference&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AIBrix&lt;/h1&gt; 
&lt;p&gt;Welcome to AIBrix, an open-source initiative designed to provide essential building blocks to construct scalable GenAI inference infrastructure. AIBrix delivers a cloud-native solution optimized for deploying, managing, and scaling large language model (LLM) inference, tailored specifically to enterprise needs.&lt;/p&gt; 
&lt;p align="center"&gt; | &lt;a href="https://aibrix.readthedocs.io/latest/"&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://aibrix.github.io/"&gt;&lt;b&gt;Blog&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://arxiv.org/abs/2504.03648"&gt;&lt;b&gt;White Paper&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://x.com/vllm_project"&gt;&lt;b&gt;Twitter/X&lt;/b&gt;&lt;/a&gt; | &lt;a href="https://vllm-dev.slack.com/archives/C08EQ883CSV"&gt;&lt;b&gt;Developer Slack&lt;/b&gt;&lt;/a&gt; | &lt;/p&gt; 
&lt;h2&gt;Latest News&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[2025-08-05]&lt;/strong&gt; AIBrix v0.4.0 is released. Check out the &lt;a href="https://github.com/vllm-project/aibrix/releases/tag/v0.4.0"&gt;release notes&lt;/a&gt; and &lt;a href="https://aibrix.github.io/posts/2025-08-04-v0.4.0-release/"&gt;Blog Post&lt;/a&gt; for more details&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2025-06-10]&lt;/strong&gt; The AIBrix team delivered a talk at KubeCon China 2025 titled &lt;a href="https://kccncchn2025.sched.com/event/1x5im/introducing-aibrix-cost-effective-and-scalable-kubernetes-control-plane-for-vllm-jiaxin-shan-liguang-xie-bytedance"&gt;AIBrix: Cost-Effective and Scalable Kubernetes Control Plane for vLLM&lt;/a&gt;, discussing how the framework optimizes vLLM deployment via Kubernetes for cost efficiency and scalability.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2025-05-21]&lt;/strong&gt; AIBrix v0.3.0 is released. Check out the &lt;a href="https://github.com/vllm-project/aibrix/releases/tag/v0.3.0"&gt;release notes&lt;/a&gt; and &lt;a href="https://aibrix.github.io/posts/2025-05-21-v0.3.0-release/"&gt;Blog Post&lt;/a&gt; for more details&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2025-04-04]&lt;/strong&gt; AIBrix co-delivered a KubeCon EU 2025 keynote with Google on &lt;a href="https://kccnceu2025.sched.com/event/1txC7/keynote-llm-aware-load-balancing-in-kubernetes-a-new-era-of-efficiency-clayton-coleman-distinguished-engineer-google-jiaxin-shan-software-engineer-bytedance"&gt;LLM-Aware Load Balancing in Kubernetes: A New Era of Efficiency&lt;/a&gt;, focusing on LLM specific routing solutions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2025-03-30]&lt;/strong&gt; AIBrix was featured at the &lt;a href="http://asplos-conference.org/asplos2025/"&gt;ASPLOS'25&lt;/a&gt; workshop with the presentation &lt;a href="https://docs.google.com/presentation/d/1YDVsPFTIgGXnROGaJ1VKuDDAB4T5fzpE/edit"&gt;AIBrix: An Open-Source, Large-Scale LLM Inference Infrastructure for System Research&lt;/a&gt;, showcasing its architecture for efficient LLM inference in system research scenarios.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2025-03-09]&lt;/strong&gt; AIBrix v0.2.1 is released. DeepSeek-R1 full weights deployment is supported and gateway stability has been improved! Check &lt;a href="https://aibrix.github.io/posts/2025-03-10-deepseek-r1/"&gt;Blog Post&lt;/a&gt; for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2025-02-19]&lt;/strong&gt; AIBrix v0.2.0 is released. Check out the &lt;a href="https://github.com/vllm-project/aibrix/releases/tag/v0.2.0"&gt;release notes&lt;/a&gt; and &lt;a href="https://aibrix.github.io/posts/2025-02-05-v0.2.0-release/"&gt;Blog Post&lt;/a&gt; for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2024-11-13]&lt;/strong&gt; AIBrix v0.1.0 is released. Check out the &lt;a href="https://github.com/vllm-project/aibrix/releases/tag/v0.1.0"&gt;release notes&lt;/a&gt; and &lt;a href="https://aibrix.github.io/posts/2024-11-12-v0.1.0-release/"&gt;Blog Post&lt;/a&gt; for more details.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;p&gt;The initial release includes the following key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High-Density LoRA Management&lt;/strong&gt;: Streamlined support for lightweight, low-rank adaptations of models.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLM Gateway and Routing&lt;/strong&gt;: Efficiently manage and direct traffic across multiple models and replicas.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;LLM App-Tailored Autoscaler&lt;/strong&gt;: Dynamically scale inference resources based on real-time demand.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Unified AI Runtime&lt;/strong&gt;: A versatile sidecar enabling metric standardization, model downloading, and management.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Distributed Inference&lt;/strong&gt;: Scalable architecture to handle large workloads across multiple nodes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Distributed KV Cache&lt;/strong&gt;: Enables high-capacity, cross-engine KV reuse.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cost-efficient Heterogeneous Serving&lt;/strong&gt;: Enables mixed GPU inference to reduce costs with SLO guarantees.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GPU Hardware Failure Detection&lt;/strong&gt;: Proactive detection of GPU hardware issues.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/vllm-project/aibrix/main/docs/source/assets/images/aibrix-architecture-v1.jpeg" alt="aibrix-architecture-v1" /&gt;&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;To get started with AIBrix, clone this repository and follow the setup instructions in the documentation. Our comprehensive guide will help you configure and deploy your first LLM infrastructure seamlessly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Local Testing
git clone https://github.com/vllm-project/aibrix.git
cd aibrix

# Install nightly aibrix dependencies
kubectl apply -k config/dependency --server-side

# Install nightly aibrix components
kubectl apply -k config/default
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install stable distribution&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Install component dependencies
kubectl apply -f "https://github.com/vllm-project/aibrix/releases/download/v0.4.0/aibrix-dependency-v0.4.0.yaml" --server-side

# Install aibrix components
kubectl apply -f "https://github.com/vllm-project/aibrix/releases/download/v0.4.0/aibrix-core-v0.4.0.yaml"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For detailed documentation on installation, configuration, and usage, please visit our &lt;a href="https://aibrix.readthedocs.io/latest/"&gt;documentation page&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions from the community! Check out our &lt;a href="https://raw.githubusercontent.com/vllm-project/aibrix/main/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; to see how you can make a difference.&lt;/p&gt; 
&lt;p&gt;Slack Channel: &lt;a href="https://vllm-dev.slack.com/archives/C08EQ883CSV"&gt;#aibrix&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;AIBrix is licensed under the &lt;a href="https://raw.githubusercontent.com/vllm-project/aibrix/main/LICENSE"&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you have any questions or encounter any issues, please submit an issue on our &lt;a href="https://github.com/vllm-project/aibrix/issues"&gt;GitHub issues page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Thank you for choosing AIBrix for your GenAI infrastructure needs!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nats-io/nats-server</title>
      <link>https://github.com/nats-io/nats-server</link>
      <description>&lt;p&gt;High-Performance server for NATS.io, the cloud and edge native messaging system.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/nats-io/nats-server/main/logos/nats-horizontal-color.png" width="300" alt="NATS Logo" /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://nats.io"&gt;NATS&lt;/a&gt; is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (&lt;a href="https://cncf.io"&gt;CNCF&lt;/a&gt;). NATS has over &lt;a href="https://nats.io/download/"&gt;40 client language implementations&lt;/a&gt;, and its server can run on-premise, in the cloud, at the edge, and even on a Raspberry Pi. NATS can secure and simplify design and operation of modern distributed systems.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;&lt;img src="https://img.shields.io/badge/License-Apache2-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nats-io/nats-server/actions/workflows/tests.yaml"&gt;&lt;img src="https://github.com/nats-io/nats-server/actions/workflows/tests.yaml/badge.svg?branch=main" alt="Build" /&gt;&lt;/a&gt; &lt;a href="https://github.com/nats-io/nats-server/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/nats-io/nats-server" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://slack.nats.io"&gt;&lt;img src="https://img.shields.io/badge/chat-on%20slack-green" alt="Slack" /&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/nats-io/nats-server?branch=main"&gt;&lt;img src="https://coveralls.io/repos/github/nats-io/nats-server/badge.svg?branch=main" alt="Coverage" /&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/_/nats"&gt;&lt;img src="https://img.shields.io/docker/pulls/_/nats.svg?sanitize=true" alt="Docker Downloads" /&gt;&lt;/a&gt; &lt;a href="https://somsubhra.github.io/github-release-stats/?username=nats-io&amp;amp;repository=nats-server"&gt;&lt;img src="https://img.shields.io/github/downloads/nats-io/nats-server/total.svg?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/1895"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/1895/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/nats/nats"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/nats" alt="Artifact Hub" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nats.io"&gt;Official Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nats.io"&gt;Official Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.nats.io/reference/faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href="https://rethink.synadia.com/episodes/1/"&gt;a video overview&lt;/a&gt; of NATS.&lt;/li&gt; 
 &lt;li&gt;Watch &lt;a href="https://www.youtube.com/watch?v=sm63oAVPqAM"&gt;this video from SCALE 13x&lt;/a&gt; to learn more about its origin story and design philosophy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/nats_io"&gt;Twitter&lt;/a&gt;: Follow us on Twitter!&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/natsio"&gt;Google Groups&lt;/a&gt;: Where you can ask questions&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://natsio.slack.com"&gt;Slack&lt;/a&gt;: Click &lt;a href="https://slack.nats.io"&gt;here&lt;/a&gt; to join. You can ask questions to our maintainers and to the rich and active community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are interested in contributing to NATS, read about our...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nats-io/nats-server/main/CONTRIBUTING.md"&gt;Contributing guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nats-io"&gt;Report issues or propose Pull Requests&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The NATS product roadmap can be found &lt;a href="https://nats.io/about/#roadmap"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Adopters&lt;/h2&gt; 
&lt;p&gt;Who uses NATS? See our &lt;a href="https://nats.io/#who-uses-nats"&gt;list of users&lt;/a&gt; on &lt;a href="https://nats.io"&gt;https://nats.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;h3&gt;Security Audit&lt;/h3&gt; 
&lt;p&gt;A third party security audit was performed by Trail of Bits following engagement by the Open Source Technology Improvement Fund (OSTIF). You can see the &lt;a href="https://github.com/trailofbits/publications/raw/master/reviews/2025-04-ostif-nats-securityreview.pdf"&gt;full report from April 2025 here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Reporting Security Vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you've found a vulnerability or a potential vulnerability in the NATS server, please let us know at &lt;a href="mailto:security@nats.io"&gt;nats-security&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Unless otherwise noted, the NATS source files are distributed under the Apache Version 2.0 license found in the LICENSE file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gogf/gf</title>
      <link>https://github.com/gogf/gf</link>
      <description>&lt;p&gt;A powerful framework for faster, easier, and more efficient project development.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://goframe.org/img/logo_full.png" width="300" alt="goframe gf logo" /&gt; 
 &lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/gogf/gf/v2"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/gogf/gf/v2.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gogf/gf/actions/workflows/ci-main.yml"&gt;&lt;img src="https://github.com/gogf/gf/actions/workflows/ci-main.yml/badge.svg?sanitize=true" alt="GoFrame CI" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/gogf/gf"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/gogf/gf/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/9233"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/9233/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/gogf/gf/v2"&gt;&lt;img src="https://goreportcard.com/badge/github.com/gogf/gf/v2" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/gogf/gf"&gt;&lt;img src="https://codecov.io/gh/gogf/gf/branch/master/graph/badge.svg?sanitize=true" alt="Code Coverage" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gogf/gf"&gt;&lt;img src="https://img.shields.io/badge/production-ready-blue.svg?style=flat" alt="Production Ready" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gogf/gf"&gt;&lt;img src="https://img.shields.io/github/license/gogf/gf.svg?style=flat" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/gogf/gf/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/gogf/gf?style=flat" alt="Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gogf/gf/pulls"&gt;&lt;img src="https://img.shields.io/github/issues-pr/gogf/gf?style=flat" alt="GitHub pull requests" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gogf/gf/pulls?q=is%3Apr+is%3Aclosed"&gt;&lt;img src="https://img.shields.io/github/issues-pr-closed/gogf/gf?style=flat" alt="GitHub closed pull requests" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gogf/gf/issues"&gt;&lt;img src="https://img.shields.io/github/issues/gogf/gf?style=flat" alt="GitHub issues" /&gt;&lt;/a&gt; &lt;a href="https://github.com/gogf/gf/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;img src="https://img.shields.io/github/issues-closed/gogf/gf?style=flat" alt="GitHub closed issues" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/stars/gogf/gf?style=flat" alt="Stars" /&gt; &lt;img src="https://img.shields.io/github/forks/gogf/gf?style=flat" alt="Forks" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;A powerful framework for faster, easier, and more efficient project development.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;GoFrame Official Site: &lt;a href="https://goframe.org"&gt;https://goframe.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GoFrame Official Site(en): &lt;a href="https://goframe.org/en"&gt;https://goframe.org/en&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GoFrame Mirror Site(中文): &lt;a href="https://goframe.org.cn"&gt;https://goframe.org.cn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GoFrame Mirror Site(github pages): &lt;a href="https://pages.goframe.org"&gt;https://pages.goframe.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GoDoc API: &lt;a href="https://pkg.go.dev/github.com/gogf/gf/v2"&gt;https://pkg.go.dev/github.com/gogf/gf/v2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;p&gt;💖 &lt;a href="https://github.com/gogf/gf/graphs/contributors"&gt;Thanks to all the contributors who made GoFrame possible&lt;/a&gt; 💖&lt;/p&gt; 
&lt;a href="https://github.com/gogf/gf/graphs/contributors"&gt; &lt;img src="https://goframe.org/img/contributors.svg?version=v2.9.3" alt="goframe contributors" /&gt; &lt;/a&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;GoFrame&lt;/code&gt; is licensed under the &lt;a href="https://raw.githubusercontent.com/gogf/gf/master/LICENSE"&gt;MIT License&lt;/a&gt;, 100% free and open-source, forever.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>oapi-codegen/oapi-codegen</title>
      <link>https://github.com/oapi-codegen/oapi-codegen</link>
      <description>&lt;p&gt;Generate Go client and server boilerplate from OpenAPI 3 specifications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;oapi-codegen&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://www.bestpractices.dev/projects/9450"&gt;&lt;img src="https://www.bestpractices.dev/projects/9450/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;oapi-codegen&lt;/code&gt; is a command-line tool and library to convert OpenAPI specifications to Go code, be it &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#generating-server-side-boilerplate"&gt;server-side implementations&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#generating-api-clients"&gt;API clients&lt;/a&gt;, or simply &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#generating-api-models"&gt;HTTP models&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Using &lt;code&gt;oapi-codegen&lt;/code&gt; allows you to reduce the boilerplate required to create or integrate with services based on &lt;a href="https://github.com/OAI/OpenAPI-Specification/raw/main/versions/3.0.0.md"&gt;OpenAPI 3.0&lt;/a&gt;, and instead focus on writing your business logic, and working on the real value-add for your organisation.&lt;/p&gt; 
&lt;p&gt;With &lt;code&gt;oapi-codegen&lt;/code&gt;, there are a few &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#key-design-decisions"&gt;Key Design Decisions&lt;/a&gt; we've made, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;idiomatic Go, where possible&lt;/li&gt; 
 &lt;li&gt;fairly simple generated code, erring on the side of duplicate code over nicely refactored code&lt;/li&gt; 
 &lt;li&gt;supporting as much of OpenAPI 3.x as is possible, alongside Go's type system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;oapi-codegen&lt;/code&gt; is one part of a wider ecosystem, which can be found described in further detail in the &lt;a href="https://github.com/oapi-codegen"&gt;oapi-codegen organisation on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;⚠️ This README may be for the latest development version, which may contain unreleased changes. Please ensure you're looking at the README for the latest release version.&lt;/p&gt; 
&lt;h2&gt;Action Required: The repository for this project has changed&lt;/h2&gt; 
&lt;p&gt;As announced in &lt;a href="https://github.com/oapi-codegen/oapi-codegen/discussions/1605"&gt;May 2024&lt;/a&gt;, we have moved the project from the deepmap organization to our own organization, and you will need to update your import paths to pull updates past this point. You need to do a recursive search/replace from &lt;code&gt;github.com/deepmap/oapi-codegen/v2&lt;/code&gt; to &lt;code&gt;github.com/oapi-codegen/oapi-codegen/v2&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] &lt;code&gt;oapi-codegen&lt;/code&gt; moved to its new home with the version tag &lt;code&gt;v2.3.0&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you are using &lt;code&gt;v2.2.0&lt;/code&gt; or below, please install like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# for the binary install
go install github.com/deepmap/oapi-codegen/v2/cmd/oapi-codegen@v2.2.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using &lt;code&gt;v2.3.0&lt;/code&gt; or above, please install like so, using the new module import path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# for the binary install
go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;h2&gt;For Go 1.24+&lt;/h2&gt; 
&lt;p&gt;It is recommended to follow &lt;a href="https://www.jvt.me/posts/2025/01/27/go-tools-124/"&gt;the &lt;code&gt;go tool&lt;/code&gt; support available from Go 1.24+&lt;/a&gt; for managing the dependency of &lt;code&gt;oapi-codegen&lt;/code&gt; alongside your core application.&lt;/p&gt; 
&lt;p&gt;To do this, you run &lt;code&gt;go get -tool&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ go get -tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest
# this will then modify your `go.mod`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From there, each invocation of &lt;code&gt;oapi-codegen&lt;/code&gt; would be used like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;//go:generate go tool oapi-codegen -config cfg.yaml ../../api.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Prior to Go 1.24&lt;/h2&gt; 
&lt;p&gt;It is recommended to follow &lt;a href="https://www.jvt.me/posts/2022/06/15/go-tools-dependency-management/"&gt;the &lt;code&gt;tools.go&lt;/code&gt; pattern&lt;/a&gt; for managing the dependency of &lt;code&gt;oapi-codegen&lt;/code&gt; alongside your core application.&lt;/p&gt; 
&lt;p&gt;This would give you a &lt;code&gt;tools/tools.go&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;//go:build tools
// +build tools

package main

import (
	_ "github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each invocation of &lt;code&gt;oapi-codegen&lt;/code&gt; would be used like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;//go:generate go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config=config.yaml ../../api.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can install it as a binary with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest
$ oapi-codegen -version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which then means you can invoke it like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;//go:generate oapi-codegen --config=config.yaml ../../api.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you can also &lt;a href="https://www.jvt.me/posts/2024/09/30/go-tools-module/"&gt;move your &lt;code&gt;tools.go&lt;/code&gt; into its own sub-module&lt;/a&gt; to reduce the impact on your top-level &lt;code&gt;go.mod&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Pinning to commits&lt;/h3&gt; 
&lt;p&gt;While the project does not (&lt;a href="https://github.com/oapi-codegen/oapi-codegen/issues/1519"&gt;yet&lt;/a&gt;) have a defined release cadence, there may be cases where you want to pull in yet-unreleased changes to your codebase.&lt;/p&gt; 
&lt;p&gt;Therefore, you may want to pin your dependency on &lt;code&gt;oapi-codegen&lt;/code&gt; to a given commit hash, rather than a tag.&lt;/p&gt; 
&lt;p&gt;This is &lt;strong&gt;officially recommended&lt;/strong&gt; for consumers of &lt;code&gt;oapi-codegen&lt;/code&gt;, who want features/bug fixes that haven't yet been released.&lt;/p&gt; 
&lt;p&gt;We aim to keep the default branch ready-to-release so you should be able to safely pin.&lt;/p&gt; 
&lt;p&gt;To do so, you can run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# pin to the latest version on the default branch
$ go get github.com/oapi-codegen/oapi-codegen/v2@main
# alternatively, to a commit hash i.e. https://github.com/oapi-codegen/oapi-codegen/commit/71e916c59688a6379b5774dfe5904ec222b9a537
$ go get github.com/oapi-codegen/oapi-codegen/v2@71e916c59688a6379b5774dfe5904ec222b9a537
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will then make a change such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;diff --git go.mod go.mod
index 44f29a4..436a780 100644
--- go.mod
+++ go.mod
@@ -2,21 +2,20 @@
-require github.com/oapi-codegen/oapi-codegen/v2 v2.1.0
+require github.com/oapi-codegen/oapi-codegen/v2 v2.1.1-0.20240331212514-80f0b978ef16
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;oapi-codegen&lt;/code&gt; is largely configured using a YAML configuration file, to simplify the number of flags that users need to remember, and to make reading the &lt;code&gt;go:generate&lt;/code&gt; command less daunting.&lt;/p&gt; 
&lt;p&gt;For full details of what is supported, it's worth checking out &lt;a href="https://pkg.go.dev/github.com/oapi-codegen/oapi-codegen/v2/pkg/codegen#Configuration"&gt;the GoDoc for &lt;code&gt;codegen.Configuration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We also have &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/configuration-schema.json"&gt;a JSON Schema&lt;/a&gt; that can be used by IDEs/editors with the Language Server Protocol (LSP) to perform intelligent suggestions, i.e.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: api
# ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Backwards compatibility&lt;/h3&gt; 
&lt;p&gt;Although we strive to retain backwards compatibility - as a project that's using a stable API per SemVer - there are sometimes opportunities we must take to fix a bug that could cause a breaking change for &lt;a href="https://xkcd.com/1172/"&gt;people relying upon the behaviour&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In this case, we will expose a &lt;a href="https://pkg.go.dev/github.com/oapi-codegen/oapi-codegen/v2/pkg/codegen#CompatibilityOptions"&gt;compatibility option&lt;/a&gt; to restore old behaviour.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;At a high level, &lt;code&gt;oapi-codegen&lt;/code&gt; supports:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generating server-side boilerplate for &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#supported-servers"&gt;a number of servers&lt;/a&gt; (&lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#generating-server-side-boilerplate"&gt;docs&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Generating client API boilerplate (&lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#generating-api-clients"&gt;docs&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Generating the types (&lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#generating-api-models"&gt;docs&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Splitting large OpenAPI specs across multiple packages(&lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#import-mapping"&gt;docs&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;This is also known as "Import Mapping" or "external references" across our documentation / discussion in GitHub issues&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What does it look like?&lt;/h2&gt; 
&lt;p&gt;Below we can see a trimmed down example taken from the OpenAPI Petstore &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/petstore-expanded/stdhttp/api/petstore.gen.go"&gt;example&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// generated code

type ServerInterface interface {
	// ...
	// Returns all pets
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// ...
}

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &amp;amp;params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &amp;amp;InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &amp;amp;params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &amp;amp;InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/pets", wrapper.FindPets)

	return m
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, in your own code, you implement the underlying logic for the &lt;code&gt;FindPets&lt;/code&gt; implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type PetStore struct {
	Pets   map[int64]Pet
	NextId int64
	Lock   sync.Mutex
}

// Make sure we conform to ServerInterface

var _ ServerInterface = (*PetStore)(nil)

func NewPetStore() *PetStore {
	return &amp;amp;PetStore{
		Pets:   make(map[int64]Pet),
		NextId: 1000,
	}
}

// FindPets implements all the handlers in the ServerInterface
func (p *PetStore) FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams) {
	p.Lock.Lock()
	defer p.Lock.Unlock()

	var result []Pet

	for _, pet := range p.Pets {
		if params.Tags != nil {
			// If we have tags,  filter pets by tag
			for _, t := range *params.Tags {
				if pet.Tag != nil &amp;amp;&amp;amp; (*pet.Tag == t) {
					result = append(result, pet)
				}
			}
		} else {
			// Add all pets if we're not filtering
			result = append(result, pet)
		}

		if params.Limit != nil {
			l := int(*params.Limit)
			if len(result) &amp;gt;= l {
				// We're at the limit
				break
			}
		}
	}

	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(result)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As we can see, &lt;code&gt;oapi-codegen&lt;/code&gt; simplifies some of the boilerplate by taking parameters out of the request and instead allows us to focus on the implementation.&lt;/p&gt; 
&lt;p&gt;You'll note that there's still a bit more marshaling of request/response data, which is further reduced by using the &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#strict-server"&gt;Strict server&lt;/a&gt; functionality.&lt;/p&gt; 
&lt;p&gt;&lt;a name="what-does-it-look-like-strict"&gt;&lt;/a&gt; When using the strict server, you'll have the following generated code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// ...
	// Returns all pets
	// (GET /pets)
	FindPets(ctx context.Context, request FindPetsRequestObject) (FindPetsResponseObject, error)
	// ...
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &amp;amp;strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

// FindPets operation middleware
func (sh *strictHandler) FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams) {
	var request FindPetsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindPets(ctx, request.(FindPetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindPetsResponseObject); ok {
		if err := validResponse.VisitFindPetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, in your own code, you implement the underlying logic for the &lt;code&gt;FindPets&lt;/code&gt; implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Make sure we conform to StrictServerInterface

var _ StrictServerInterface = (*PetStore)(nil)

func NewPetStore() *PetStore {
	return &amp;amp;PetStore{
		Pets:   make(map[int64]Pet),
		NextId: 1000,
	}
}

// FindPets implements all the handlers in the ServerInterface
func (p *PetStore) FindPets(ctx context.Context, request FindPetsRequestObject) (FindPetsResponseObject, error) {
	p.Lock.Lock()
	defer p.Lock.Unlock()

	var result []Pet

	for _, pet := range p.Pets {
		if request.Params.Tags != nil {
			// If we have tags,  filter pets by tag
			for _, t := range *request.Params.Tags {
				if pet.Tag != nil &amp;amp;&amp;amp; (*pet.Tag == t) {
					result = append(result, pet)
				}
			}
		} else {
			// Add all pets if we're not filtering
			result = append(result, pet)
		}

		if request.Params.Limit != nil {
			l := int(*request.Params.Limit)
			if len(result) &amp;gt;= l {
				// We're at the limit
				break
			}
		}
	}

	return FindPets200JSONResponse(result), nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can see that this provides the best means to focus on the implementation of the business logic within the endpoint, rather than (un)marshalling types to and from JSON, or wrangling cookies or headers.&lt;/p&gt; 
&lt;h2&gt;Key design decisions&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Produce an interface that can be satisfied by your implementation, with reduced boilerplate&lt;/li&gt; 
 &lt;li&gt;Bulk processing and parsing of OpenAPI document in Go&lt;/li&gt; 
 &lt;li&gt;Resulting output is using Go's &lt;code&gt;text/template&lt;/code&gt;s, which are user-overridable&lt;/li&gt; 
 &lt;li&gt;Attempts to produce Idiomatic Go&lt;/li&gt; 
 &lt;li&gt;Single-file output&lt;/li&gt; 
 &lt;li&gt;Support multiple OpenAPI files by having a package-per-OpenAPI file&lt;/li&gt; 
 &lt;li&gt;Support of OpenAPI 3.0 
  &lt;ul&gt; 
   &lt;li&gt;OpenAPI 3.1 support is &lt;a href="https://github.com/oapi-codegen/oapi-codegen/issues/373"&gt;awaiting upstream support&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Note that this does not include OpenAPI 2.0 (aka Swagger)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Extract parameters from requests, to reduce work required by your implementation&lt;/li&gt; 
 &lt;li&gt;Implicit &lt;code&gt;additionalProperties&lt;/code&gt; are ignored by default (&lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#additional-properties-additionalproperties"&gt;more details&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prune unused types by default&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Generating server-side boilerplate&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;oapi-codegen&lt;/code&gt; shines by making it fairly straightforward (note that this is a purposeful choice of wording here - we want to avoid words like "easy") to generate the server-side boilerplate for a backend API.&lt;/p&gt; 
&lt;p&gt;Below you can find the supported servers, and more information about how to implement a server using them.&lt;/p&gt; 
&lt;p&gt;To provide you a fully Test Driven Development style test harness to confirm you are following the specification, you could use a tool such as &lt;a href="https://openapi.tanna.dev/go/validator/"&gt;openapi.tanna.dev/go/validator&lt;/a&gt;, or craft your own.&lt;/p&gt; 
&lt;h3&gt;Supported Servers&lt;/h3&gt; 
&lt;p&gt;Right now, we support the following servers, and are supportive of adding new servers, too!&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt; Server &lt;/th&gt; 
   &lt;th&gt; &lt;code&gt;generate&lt;/code&gt; flag to enable code generation &lt;/th&gt; 
   &lt;th&gt; Example usage &lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/go-chi/chi"&gt;Chi&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;chi-server&lt;/code&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;For a Chi server, you will want a configuration file such as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: ...
package: api
generate:
  chi-server: true
  models: true
output: gen.go
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To implement this, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#impl-chi"&gt;the Chi docs&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/labstack/echo"&gt;Echo&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;echo-server&lt;/code&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;For an Echo server, you will want a configuration file such as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: ...
package: api
generate:
  echo-server: true
  models: true
output: gen.go
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To implement this, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#impl-echo"&gt;the Echo docs&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;fiber-server&lt;/code&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;For a Fiber server, you will want a configuration file such as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: ...
package: api
generate:
  fiber-server: true
  models: true
output: gen.go
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To implement this, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#impl-fiber"&gt;the Fiber docs&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/gin-gonic/gin"&gt;Gin&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;gin-server&lt;/code&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;For a Gin server, you will want a configuration file such as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: ...
package: api
generate:
  gin-server: true
  models: true
output: gen.go
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To implement this, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#impl-gin"&gt;the Gin docs&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/gorilla/mux"&gt;gorilla/mux&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;gorilla-server&lt;/code&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;For a gorilla/mux server, you will want a configuration file such as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: ...
package: api
generate:
  gorilla-server: true
  models: true
output: gen.go
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To implement this, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#impl-gorillamux"&gt;the gorilla/mux docs&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/kataras/iris"&gt;Iris&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;iris-server&lt;/code&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;For a Iris server, you will want a configuration file such as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: ...
package: api
generate:
  iris-server: true
  models: true
output: gen.go
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To implement this, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#impl-iris"&gt;the Iris docs&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://pkg.go.dev/net/http"&gt;1.22+ &lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;std-http-server&lt;/code&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;To use purely &lt;code&gt;net/http&lt;/code&gt; (for Go 1.22+), you will want a configuration file such as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: ...
package: api
generate:
  std-http-server: true
  models: true
output: gen.go
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To implement this, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#impl-stdhttp"&gt;the Go 1.22+ &lt;code&gt;net/http&lt;/code&gt; docs&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Go 1.22+ &lt;code&gt;net/http&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a name="impl-stdhttp"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;As of Go 1.22, enhancements have been made to the routing of the &lt;code&gt;net/http&lt;/code&gt; package in the standard library, which makes it a great starting point for implementing a server with, before needing to reach for another router or a full framework.&lt;/p&gt; 
&lt;p&gt;For instance, let's take this straightforward specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Minimal ping API server
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
components:
  schemas:
    # base types
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This then generates code such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	GetPing(w http.ResponseWriter, r *http.Request)
}

func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	// ... omitted for brevity

	m.HandleFunc("GET "+options.BaseURL+"/ping", wrapper.GetPing)

	return m
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To implement this HTTP server, we need to write the following code in our &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/minimal-server/stdhttp/api/impl.go"&gt;&lt;code&gt;api/impl.go&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"encoding/json"
	"net/http"
)

// optional code omitted

type Server struct{}

func NewServer() Server {
	return Server{}
}

// (GET /ping)
func (Server) GetPing(w http.ResponseWriter, r *http.Request) {
	resp := Pong{
		Ping: "pong",
	}

	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(resp)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we've got our implementation, we can then write the following code to wire it up and get a running server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"log"
	"net/http"

	"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/stdhttp/api"
)

func main() {
	// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code
	server := api.NewServer()

	r := http.NewServeMux()

	// get an `http.Handler` that we can use
	h := api.HandlerFromMux(server, r)

	s := &amp;amp;http.Server{
		Handler: h,
		Addr:    "0.0.0.0:8080",
	}

	// And we serve HTTP until the world ends.
	log.Fatal(s.ListenAndServe())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This doesn't include &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation of incoming requests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you feel like you've done everything right, but are still receiving &lt;code&gt;404 page not found&lt;/code&gt; errors, make sure that you've got the &lt;code&gt;go&lt;/code&gt; directive in your &lt;code&gt;go.mod&lt;/code&gt; updated to:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-go.mod"&gt;go 1.22
&lt;/code&gt;&lt;/pre&gt;  
&lt;h3&gt;Chi&lt;/h3&gt; 
&lt;p&gt;&lt;a name="impl-chi"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For instance, let's take this straightforward specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Minimal ping API server
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
components:
  schemas:
    # base types
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This then generates code such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	GetPing(w http.ResponseWriter, r *http.Request)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	// ...

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.GetPing)
	})

	return r
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To implement this HTTP server, we need to write the following code in our &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/minimal-server/chi/api/impl.go"&gt;&lt;code&gt;api/impl.go&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"encoding/json"
	"net/http"
)

// optional code omitted

type Server struct{}

func NewServer() Server {
	return Server{}
}

// (GET /ping)
func (Server) GetPing(w http.ResponseWriter, r *http.Request) {
	resp := Pong{
		Ping: "pong",
	}

	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(resp)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we've got our implementation, we can then write the following code to wire it up and get a running server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"log"
	"net/http"

	"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/chi/api"
	"github.com/go-chi/chi/v5"
)

func main() {
	// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code
	server := api.NewServer()

	r := chi.NewMux()

	// get an `http.Handler` that we can use
	h := api.HandlerFromMux(server, r)

	s := &amp;amp;http.Server{
		Handler: h,
		Addr:    "0.0.0.0:8080",
	}

	// And we serve HTTP until the world ends.
	log.Fatal(s.ListenAndServe())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This doesn't include &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation of incoming requests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;gorilla/mux&lt;/h3&gt; 
&lt;p&gt;&lt;a name="impl-gorillamux"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For instance, let's take this straightforward specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Minimal ping API server
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
components:
  schemas:
    # base types
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This then generates code such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	GetPing(w http.ResponseWriter, r *http.Request)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	// ...

	r.HandleFunc(options.BaseURL+"/ping", wrapper.GetPing).Methods("GET")

	return r
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To implement this HTTP server, we need to write the following code in our &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/minimal-server/gorillamux/api/impl.go"&gt;&lt;code&gt;api/impl.go&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"encoding/json"
	"net/http"
)

// optional code omitted

type Server struct{}

func NewServer() Server {
	return Server{}
}

// (GET /ping)
func (Server) GetPing(w http.ResponseWriter, r *http.Request) {
	resp := Pong{
		Ping: "pong",
	}

	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(resp)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we've got our implementation, we can then write the following code to wire it up and get a running server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"log"
	"net/http"

	"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/gorillamux/api"
	"github.com/gorilla/mux"
)

func main() {
	// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code
	server := api.NewServer()

	r := mux.NewRouter()

	// get an `http.Handler` that we can use
	h := api.HandlerFromMux(server, r)

	s := &amp;amp;http.Server{
		Handler: h,
		Addr:    "0.0.0.0:8080",
	}

	// And we serve HTTP until the world ends.
	log.Fatal(s.ListenAndServe())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This doesn't include &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation of incoming requests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Echo server&lt;/h3&gt; 
&lt;p&gt;&lt;a name="impl-echo"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For instance, let's take this straightforward specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Minimal ping API server
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
components:
  schemas:
    # base types
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This then generates code such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	GetPing(ctx echo.Context) error
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	// ...
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	// ...
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	// ...

	router.GET(baseURL+"/ping", wrapper.GetPing)

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To implement this HTTP server, we need to write the following code in our &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/minimal-server/echo/api/impl.go"&gt;&lt;code&gt;api/impl.go&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"net/http"

	"github.com/labstack/echo/v4"
)

// optional code omitted

type Server struct{}

func NewServer() Server {
	return Server{}
}

// (GET /ping)
func (Server) GetPing(ctx echo.Context) error {
	resp := Pong{
		Ping: "pong",
	}

	return ctx.JSON(http.StatusOK, resp)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we've got our implementation, we can then write the following code to wire it up and get a running server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"log"

	"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/echo/api"
	"github.com/labstack/echo/v4"
)

func main() {
	// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code
	server := api.NewServer()

	e := echo.New()

	api.RegisterHandlers(e, server)

	// And we serve HTTP until the world ends.
	log.Fatal(e.Start("0.0.0.0:8080"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This doesn't include &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation of incoming requests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Fiber server&lt;/h3&gt; 
&lt;p&gt;&lt;a name="impl-fiber"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For instance, let's take this straightforward specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Minimal ping API server
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
components:
  schemas:
    # base types
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This then generates code such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	GetPing(c *fiber.Ctx) error
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	// ...

	router.Get(options.BaseURL+"/ping", wrapper.GetPing)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To implement this HTTP server, we need to write the following code in our &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/minimal-server/fiber/api/impl.go"&gt;&lt;code&gt;api/impl.go&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"net/http"

	"github.com/gofiber/fiber/v2"
)

// ensure that we've conformed to the `ServerInterface` with a compile-time check
var _ ServerInterface = (*Server)(nil)

type Server struct{}

func NewServer() Server {
	return Server{}
}

// (GET /ping)
func (Server) GetPing(ctx *fiber.Ctx) error {
	resp := Pong{
		Ping: "pong",
	}

	return ctx.
		Status(http.StatusOK).
		JSON(resp)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we've got our implementation, we can then write the following code to wire it up and get a running server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"log"

	"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/fiber/api"
	"github.com/gofiber/fiber/v2"
)

func main() {
	// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code
	server := api.NewServer()

	app := fiber.New()

	api.RegisterHandlers(app, server)

	// And we serve HTTP until the world ends.
	log.Fatal(app.Listen("0.0.0.0:8080"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This doesn't include &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation of incoming requests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Gin server&lt;/h3&gt; 
&lt;p&gt;&lt;a name="impl-gin"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For instance, let's take this straightforward specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Minimal ping API server
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
components:
  schemas:
    # base types
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This then generates code such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	GetPing(c *gin.Context)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	// ...

	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To implement this HTTP server, we need to write the following code in our &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/minimal-server/gorillamux/api/impl.go"&gt;&lt;code&gt;api/impl.go&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// optional code omitted

type Server struct{}

func NewServer() Server {
	return Server{}
}

// (GET /ping)
func (Server) GetPing(ctx *gin.Context) {
	resp := Pong{
		Ping: "pong",
	}

	ctx.JSON(http.StatusOK, resp)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we've got our implementation, we can then write the following code to wire it up and get a running server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"log"
	"net/http"

	"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/gin/api"
	"github.com/gin-gonic/gin"
)

func main() {
	// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code
	server := api.NewServer()

	r := gin.Default()

	api.RegisterHandlers(r, server)

	// And we serve HTTP until the world ends.

	s := &amp;amp;http.Server{
		Handler: r,
		Addr:    "0.0.0.0:8080",
	}

	// And we serve HTTP until the world ends.
	log.Fatal(s.ListenAndServe())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This doesn't include &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation of incoming requests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Iris server&lt;/h3&gt; 
&lt;p&gt;&lt;a name="impl-iris"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For instance, let's take this straightforward specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Minimal ping API server
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
components:
  schemas:
    # base types
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This then generates code such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	GetPing(ctx iris.Context)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *iris.Application, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, IrisServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *iris.Application, si ServerInterface, options IrisServerOptions) {
	// ...

	router.Get(options.BaseURL+"/ping", wrapper.GetPing)

	router.Build()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To implement this HTTP server, we need to write the following code in our &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/minimal-server/gorillamux/api/impl.go"&gt;&lt;code&gt;api/impl.go&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"net/http"

	"github.com/kataras/iris/v12"
)

// optional code omitted

type Server struct{}

func NewServer() Server {
	return Server{}
}

// (GET /ping)
func (Server) GetPing(ctx iris.Context) {
	resp := Pong{
		Ping: "pong",
	}

	ctx.StatusCode(http.StatusOK)
	_ = ctx.JSON(resp)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we've got our implementation, we can then write the following code to wire it up and get a running server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"log"

	"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/iris/api"
	"github.com/kataras/iris/v12"
)

func main() {
	// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code
	server := api.NewServer()

	i := iris.Default()

	api.RegisterHandlers(i, server)

	// And we serve HTTP until the world ends.
	log.Fatal(i.Listen("0.0.0.0:8080"))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This doesn't include &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation of incoming requests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Strict server&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;oapi-codegen&lt;/code&gt; also supports generating a server that is much more strict with the contract that the implementer requires, and takes inspiration from server-side code generation for RPC servers.&lt;/p&gt; 
&lt;p&gt;This takes the boilerplate reduction from the non-strict servers and adds additional boilerplate reduction, allowing you to make the following changes to your function signatures:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;-FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
+FindPets(ctx context.Context, request FindPetsRequestObject) (FindPetsResponseObject, error)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is the highest level of strictness that &lt;code&gt;oapi-codegen&lt;/code&gt; supports right now, and it's a good idea to start with this if you want the most guardrails to simplify developing your APIs.&lt;/p&gt; 
&lt;p&gt;The strict server has support for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;multiple request/response media types and status codes on a given operation&lt;/li&gt; 
 &lt;li&gt;first-class support for &lt;code&gt;multipart/form-data&lt;/code&gt; and &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; requests&lt;/li&gt; 
 &lt;li&gt;returning an &lt;a href="https://http.cat/500"&gt;HTTP 500 Internal Server Error&lt;/a&gt;, when an &lt;code&gt;error&lt;/code&gt; is returned from a function&lt;/li&gt; 
 &lt;li&gt;automagic (un)marshalling of request/responses, and setting &lt;code&gt;content-type&lt;/code&gt; and HTTP status codes on responses&lt;/li&gt; 
 &lt;li&gt;binding request values to a struct, a &lt;code&gt;multipart.Reader&lt;/code&gt; or providing a &lt;code&gt;io.Reader&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can see a little more detail of the generated code in the &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#what-does-it-look-like-strict"&gt;"What does it look like"&lt;/a&gt; section.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] To configure the strict server generation, you must specify another server to be generated. For instance:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: api
generate:
  # NOTE another server must be added!
  chi-server: true
  strict-server: true
output: server.gen.go
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This doesn't include &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation of incoming requests&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Generating API clients&lt;/h2&gt; 
&lt;p&gt;As well as generating the server-side boilerplate, &lt;code&gt;oapi-codegen&lt;/code&gt; can also generate API clients.&lt;/p&gt; 
&lt;p&gt;This aims to be an API client that can be used to interact with the methods of the API, and is perfectly suited for production usage.&lt;/p&gt; 
&lt;p&gt;However, if you were looking for a slightly more SDK-style approach, or a mix of generated tests and/or documentation, this API client may not be for you, and you may want to look at alternate tooling.&lt;/p&gt; 
&lt;p&gt;For instance, given an &lt;code&gt;api.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Generate models
paths:
  /client:
    get:
      operationId: getClient
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientType"
    put:
      operationId: updateClient
      responses:
        400:
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                required:
                - code
components:
  schemas:
    ClientType:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    # NOTE that this is not generated by default because it's not referenced. If you want it, you need to use the following YAML configuration:
    #
    # output-options:
    #   skip-prune: true
    Unreferenced:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And a &lt;code&gt;cfg.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: client
output: client.gen.go
generate:
  models: true
  client: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And a &lt;code&gt;generate.go&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package client

//go:generate go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config cfg.yaml api.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This would then generate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package client

// ...

// ClientType defines model for ClientType.
type ClientType struct {
	Name string `json:"name"`
}

// ...

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ...

// The interface specification for the client above.
type ClientInterface interface {
	// GetClient request
	GetClient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateClient request
	UpdateClient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

// ...

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetClientWithResponse request
	GetClientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClientResponse, error)

	// UpdateClientWithResponse request
	UpdateClientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UpdateClientResponse, error)
}

type GetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientType
}

// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With this generated client, it is then possible to construct and utilise the client, for instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package client_test

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"github.com/oapi-codegen/oapi-codegen/v2/examples/client"
)

func TestClient_canCall() {
	// custom HTTP client
	hc := http.Client{}

	// with a raw http.Response
	{
		c, err := client.NewClient("http://localhost:1234", client.WithHTTPClient(&amp;amp;hc))
		if err != nil {
			log.Fatal(err)
		}

		resp, err := c.GetClient(context.TODO())
		if err != nil {
			log.Fatal(err)
		}
		if resp.StatusCode != http.StatusOK {
			log.Fatalf("Expected HTTP 200 but received %d", resp.StatusCode)
		}
	}

	// or to get a struct with the parsed response body
	{
		c, err := client.NewClientWithResponses("http://localhost:1234", client.WithHTTPClient(&amp;amp;hc))
		if err != nil {
			log.Fatal(err)
		}

		resp, err := c.GetClientWithResponse(context.TODO())
		if err != nil {
			log.Fatal(err)
		}
		if resp.StatusCode() != http.StatusOK {
			log.Fatalf("Expected HTTP 200 but received %d", resp.StatusCode())
		}

		fmt.Printf("resp.JSON200: %v\n", resp.JSON200)
	}

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;With Server URLs&lt;/h3&gt; 
&lt;p&gt;An OpenAPI specification makes it possible to denote Servers that a client can interact with, such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
- url: https://{username}.gigantic-server.com:{port}/{basePath}
  description: The production API server
  variables:
    username:
      # note! no enum here means it is an open value
      default: demo
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - '8443'
        - '443'
      default: '8443'
    basePath:
      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
      default: v2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to opt-in to the generation of these Server URLs with the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: serverurls
output: gen.go
generate:
  # NOTE that this uses default settings - if you want to use initialisms to generate i.e. `ServerURLDevelopmentServer`, you should look up the `output-options.name-normalizer` configuration
  server-urls: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will then generate the following boilerplate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// (the below does not include comments that are generated)

const ServerUrlDevelopmentServer = "https://development.gigantic-server.com/v1"

type ServerUrlTheProductionAPIServerBasePathVariable string
const ServerUrlTheProductionAPIServerBasePathVariableDefault = "v2"

type ServerUrlTheProductionAPIServerPortVariable string
const ServerUrlTheProductionAPIServerPortVariable8443 ServerUrlTheProductionAPIServerPortVariable = "8443"
const ServerUrlTheProductionAPIServerPortVariable443 ServerUrlTheProductionAPIServerPortVariable = "443"
const ServerUrlTheProductionAPIServerPortVariableDefault ServerUrlTheProductionAPIServerPortVariable = ServerUrlTheProductionAPIServerPortVariable8443

type ServerUrlTheProductionAPIServerUsernameVariable string
const ServerUrlTheProductionAPIServerUsernameVariableDefault = "demo"

func ServerUrlTheProductionAPIServer(basePath ServerUrlTheProductionAPIServerBasePathVariable, port ServerUrlTheProductionAPIServerPortVariable, username ServerUrlTheProductionAPIServerUsernameVariable) (string, error) {
    // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that for URLs that are not templated, a simple &lt;code&gt;const&lt;/code&gt; definition is created.&lt;/p&gt; 
&lt;p&gt;However, for more complex URLs that defined &lt;code&gt;variables&lt;/code&gt; in them, we generate the types (and any &lt;code&gt;enum&lt;/code&gt; values or &lt;code&gt;default&lt;/code&gt; values), and instead use a function to create the URL.&lt;/p&gt; 
&lt;p&gt;For a complete example see &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/generate/serverurls"&gt;&lt;code&gt;examples/generate/serverurls&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Duplicate types generated for clients's response object types&lt;/h3&gt; 
&lt;p&gt;When generating the types for interacting with the generated client, &lt;code&gt;oapi-codegen&lt;/code&gt; will use the &lt;code&gt;operationId&lt;/code&gt; and add on a &lt;code&gt;Request&lt;/code&gt; or &lt;code&gt;Response&lt;/code&gt; suffix.&lt;/p&gt; 
&lt;p&gt;However, this can clash if you have named your component schemas in a similar way.&lt;/p&gt; 
&lt;p&gt;For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: "Show that generated client boilerplate can clash if schemas are well named i.e. `*Request` and `*Response`"
paths:
  /client:
    put:
      operationId: updateClient
      requestBodies:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateClientRequest'
      responses:
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateClientResponse'
components:
  schemas:
    UpdateClientRequest:
      type: object
      properties:
        code:
          type: string
      required:
      - code
    UpdateClientResponse:
      type: object
      required:
        - name
      properties:
        name:
          type: string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you were to generate with this configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: client
output: client.gen.go
generate:
  models: true
  client: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This would then result in &lt;code&gt;go build&lt;/code&gt; failures:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# github.com/oapi-codegen/oapi-codegen/v2/examples/clienttypenameclash
./client.gen.go:184:6: UpdateClientResponse redeclared in this block
        ./client.gen.go:17:6: other declaration of UpdateClientResponse
./client.gen.go:192:7: r.HTTPResponse undefined (type UpdateClientResponse has no field or method HTTPResponse)
./client.gen.go:193:12: r.HTTPResponse undefined (type UpdateClientResponse has no field or method HTTPResponse)
./client.gen.go:200:7: r.HTTPResponse undefined (type UpdateClientResponse has no field or method HTTPResponse)
./client.gen.go:201:12: r.HTTPResponse undefined (type UpdateClientResponse has no field or method HTTPResponse)
./client.gen.go:224:3: unknown field Body in struct literal of type UpdateClientResponse
./client.gen.go:225:3: unknown field HTTPResponse in struct literal of type UpdateClientResponse
./client.gen.go:234:12: response.JSON400 undefined (type *UpdateClientResponse has no field or method JSON400)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To fix this, use the &lt;code&gt;response-type-suffix&lt;/code&gt; Output Option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt; # yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
 package: client
 output: client.gen.go
 generate:
   models: true
   client: true
+output-options:
+  response-type-suffix: Resp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will then rename the generated types from the default to use the new suffix:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;-type UpdateClientResponse struct {
+type UpdateClientResp struct {
        Body         []byte
        HTTPResponse *http.Response
        JSON400      *UpdateClientResponse
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is no currently planned work to change this behaviour.&lt;/p&gt; 
&lt;h2&gt;Generating API models&lt;/h2&gt; 
&lt;p&gt;If you're looking to only generate the models for interacting with a remote service, for instance if you need to hand-roll the API client for whatever reason, you can do this as-is.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Try to define as much as possible within the &lt;code&gt;#/components/schemas&lt;/code&gt; object, as &lt;code&gt;oapi-codegen&lt;/code&gt; will generate all the types here.&lt;/p&gt; 
 &lt;p&gt;Although we can generate some types based on inline definitions in i.e. a path's response type, it isn't always possible to do this, or if it is generated, can be a little awkward to work with as it may be defined as an anonymous struct.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For instance, given an &lt;code&gt;api.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Generate models
paths:
  /client:
    get:
      operationId: getClient
      responses:
        200:
          content:
            application/json:
              schema:
                # NOTE that Client is generated here, because it's within #/components/schemas
                $ref: "#/components/schemas/Client"
    put:
      operationId: updateClient
      responses:
        400:
          content:
            application/json:
              # NOTE that this anonymous object is /not/ generated because it's an anonymous, but would be generated if using `generate: client`
              # See https://github.com/oapi-codegen/oapi-codegen/issues/1512
              schema:
                type: object
                properties:
                  code:
                    type: string
                required:
                - code
components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    # NOTE that this is not generated by default because it's not referenced. If you want it, you need to use the following YAML configuration:
    #
    # output-options:
    #   skip-prune: true
    Unreferenced:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And a &lt;code&gt;cfg.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: onlymodels
output: only-models.gen.go
generate:
  models: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And a &lt;code&gt;generate.go&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package onlymodels

//go:generate go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config cfg.yaml api.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This would then generate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package onlymodels

// Client defines model for Client.
type Client struct {
	Name string `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you wish to also generate the &lt;code&gt;Unreferenced&lt;/code&gt; type, you would need the following &lt;code&gt;cfg.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: onlymodels
output: only-models.gen.go
generate:
  models: true
output-options:
  # NOTE that this is only required for the `Unreferenced` type
  skip-prune: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a complete example see &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/only-models"&gt;&lt;code&gt;examples/only-models&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Splitting large OpenAPI specs across multiple packages (aka "Import Mapping" or "external references")&lt;/h2&gt; 
&lt;p&gt;&lt;a name="import-mapping"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;When you've got a large OpenAPI specification, you may find it useful to split the contents of the spec across multiple files, using external references, such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is supported by &lt;code&gt;oapi-codegen&lt;/code&gt;, through the ability to perform "Import Mapping".&lt;/p&gt; 
&lt;p&gt;For instance, let's say that we have a large API, which has a user-facing API and an admin API, both of which use a common set of API models.&lt;/p&gt; 
&lt;p&gt;In this case, we may have an Admin API that looks like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# admin/api.yaml
openapi: "3.0.0"
info:
  version: 1.0.0
  title: Admin API
  description: The admin-only portion of the API, which has its own separate OpenAPI spec
tags:
  - name: admin
    description: Admin API endpoints
  - name: user
    description: API endpoint that pertains to user data
paths:
  /admin/user/{id}:
    get:
      tags:
        - admin
        - user
      summary: Get a user's details
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '../common/api.yaml#/components/schemas/User'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This references the common spec:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# common/api.yaml
components:
  schemas:
    User:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
      required:
        - name
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So how do we get &lt;code&gt;oapi-codegen&lt;/code&gt; to generate our code?&lt;/p&gt; 
&lt;h3&gt;Using a single package with multiple OpenAPI specs&lt;/h3&gt; 
&lt;p&gt;&lt;a name="import-mapping-self"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] Since &lt;code&gt;oapi-codegen&lt;/code&gt; v2.4.0, it is now possible to split large OpenAPI specifications into the same Go package, using the "self" mapping (denoted by a &lt;code&gt;-&lt;/code&gt;) when using Import Mapping.&lt;/p&gt; 
 &lt;p&gt;This is an improvement on the previous model, which would require splitting files across multiple packages.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] You still need to have multiple &lt;code&gt;go generate&lt;/code&gt;s, and any other configuration files.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To get &lt;code&gt;oapi-codegen&lt;/code&gt;'s single-package support working, we need multiple calls to &lt;code&gt;oapi-codegen&lt;/code&gt;, one call per OpenAPI spec file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;$ go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config cfg-api.yaml ../admin/api.yaml
$ go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config cfg-user.yaml ../common/api.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This therefore means that we need multiple configuration files, such as &lt;code&gt;cfg-api.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: samepackage
output: server.gen.go
generate:
  models: true
  chi-server: true
  strict-server: true
output-options:
  # to make sure that all types are generated
  skip-prune: true
import-mapping:
  user.yaml: "-"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then our &lt;code&gt;cfg-user.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: samepackage
output: user.gen.go
generate:
  models: true
output-options:
  # to make sure that all types are generated
  skip-prune: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, &lt;code&gt;oapi-codegen&lt;/code&gt; will generate multiple Go files, all within the same package, which can be used to break down your large OpenAPI specifications, and generate only the subsets of code needed for each part of the spec.&lt;/p&gt; 
&lt;p&gt;Check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/import-mapping/samepackage"&gt;the import-mapping/samepackage example&lt;/a&gt; for the full code.&lt;/p&gt; 
&lt;h3&gt;Using multiple packages, with one OpenAPI spec per package&lt;/h3&gt; 
&lt;p&gt;To get &lt;code&gt;oapi-codegen&lt;/code&gt;'s multi-package support working, we need to set up our directory structure:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;├── admin
│&amp;nbsp;&amp;nbsp; ├── cfg.yaml
│&amp;nbsp;&amp;nbsp; └── generate.go
└── common
    ├── cfg.yaml
 &amp;nbsp;&amp;nbsp; └── generate.go
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We could start with our configuration file for our admin API spec:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
# admin/cfg.yaml
package: admin
output: server.gen.go
generate:
  models: true
  chi-server: true
output-options:
  # to make sure that all types are generated
  skip-prune: true
# NOTE that this won't work, as it's missing `import-mapping`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If we were to run &lt;code&gt;oapi-codegen&lt;/code&gt;, this will fail with the following error&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;error generating code: error creating operation definitions: error generating response definitions: error generating request body definition: error turning reference (../common/api.yaml#/components/schemas/User) into a Go type: unrecognized external reference '../common/api.yaml'; please provide the known import for this reference using option --import-mapping
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is because &lt;code&gt;oapi-codegen&lt;/code&gt; requires the &lt;code&gt;import-mapping&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: admin
output: server.gen.go
generate:
  models: true
  chi-server: true
output-options:
  # to make sure that all types are generated
  skip-prune: true
import-mapping:
  # for a given file/URL that is $ref'd, point `oapi-codegen` to the Go package that this spec is generated into, to perform Go package imports
  ../common/api.yaml: github.com/oapi-codegen/oapi-codegen/v2/examples/import-mapping/common
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will then generate the following code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package admin

import (
	// ...
	externalRef0 "github.com/oapi-codegen/oapi-codegen/v2/examples/import-mapping/common"
)

// User defines model for User.
type User = externalRef0.User
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you don't want to do this, an alternate option is to &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#import-mapping-self"&gt;use a single package, with multiple OpenAPI spec files for that given package&lt;/a&gt; or to &lt;a href="https://www.jvt.me/posts/2022/02/10/bundle-openapi/"&gt;bundle your multiple OpenAPI files&lt;/a&gt; into a single spec.&lt;/p&gt; 
&lt;p&gt;Check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/import-mapping/multiplepackages/"&gt;the import-mapping/multiplepackages example&lt;/a&gt; for the full code.&lt;/p&gt; 
&lt;h2&gt;Modifying the input OpenAPI Specification (with OpenAPI Overlay)&lt;/h2&gt; 
&lt;p&gt;Prior to &lt;code&gt;oapi-codegen&lt;/code&gt; v2.4.0, users wishing to override specific configuration, for instance taking advantage of extensions such as &lt;code&gt;x-go-type&lt;/code&gt; would need to modify the OpenAPI specification they are using.&lt;/p&gt; 
&lt;p&gt;In a lot of cases, this OpenAPI specification would be produced by a different team to the consumers (or even a different company) and so asking them to make changes like this were unreasonable.&lt;/p&gt; 
&lt;p&gt;This would lead to the API consumers needing to vendor the specification from the producer (which is &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#https-paths"&gt;our recommendation anyway&lt;/a&gt;) and then make any number of local changes to the specification to make it generate code that looks reasonable.&lt;/p&gt; 
&lt;p&gt;However, in the case that a consumer would update their specification, they would likely end up with a number of merge conflicts.&lt;/p&gt; 
&lt;p&gt;Now, as of &lt;code&gt;oapi-codegen&lt;/code&gt; v2.4.0, it is now possible to make changes to the input OpenAPI specification &lt;em&gt;without needing to modify it directly&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;This takes advantage of the &lt;a href="https://github.com/OAI/Overlay-Specification"&gt;OpenAPI Overlay specification&lt;/a&gt;, which is a stable specification.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] Beware! Here (may) be dragons.&lt;/p&gt; 
 &lt;p&gt;The Overlay specification requires the use of JSON Path, which some users may find difficult to write and/or maintain.&lt;/p&gt; 
 &lt;p&gt;We still heavily recommend using Overlay functionality, but would like users to be aware of this.&lt;/p&gt; 
 &lt;p&gt;There is a &lt;a href="https://github.com/OAI/Overlay-Specification/pull/32"&gt;proposed modification to the specification&lt;/a&gt; which would relax the need for JSON Path as the targeting mechanism.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For instance, let's say that we have the following OpenAPI specification, which provides insight into an internal endpoint that we should not be generating any code for (denoted by &lt;code&gt;x-internal&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: "Example to indicate how to use the OpenAPI Overlay specification (https://github.com/OAI/Overlay-Specification)"
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
    delete:
      x-internal: true
      responses:
        '202':
          content: {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If we were to run &lt;code&gt;oapi-codegen&lt;/code&gt; with out-of-the-box functionality, this would then lead to the DELETE endpoint being generated, which we don't want.&lt;/p&gt; 
&lt;p&gt;Instead, we can define the following &lt;code&gt;overlay.yaml&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;overlay: 1.0.0
info:
  title: Overlay
  version: 0.0.0
actions:
- target: "$"
  description: Perform a structural overlay, which can be more readable, as it's clear what the shape of the document is
  update:
    info:
      x-overlay-applied: structured-overlay
    paths:
      /ping:
        get:
          responses:
            '200':
              description: Perform a ping request
- target: $.paths.*[?(@.x-internal)]
  description: Remove internal endpoints (noted by x-internal)
  remove: true
- target: $.paths.*.*[?(@.x-internal)]
  description: Remove internal endpoints (noted by x-internal)
  remove: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And our configuration file for &lt;code&gt;oapi-codegen&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: api
output: ping.gen.go
generate:
  models: true
  gorilla-server: true
  embedded-spec: true
output-options:
  overlay:
    path: overlay.yaml
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This then completely removes the DELETE endpoint &lt;em&gt;before&lt;/em&gt; we even start to parse the specification in &lt;code&gt;oapi-codegen&lt;/code&gt;, so it's as if your specification was provided without that endpoint.&lt;/p&gt; 
&lt;p&gt;Additionally, we can override other pieces of metadata, such as the description for operations.&lt;/p&gt; 
&lt;p&gt;Check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/overlay/"&gt;the overlay example&lt;/a&gt; for the full code, and some more complex examples.&lt;/p&gt; 
&lt;h2&gt;Generating Nullable types&lt;/h2&gt; 
&lt;p&gt;It's possible that you want to be able to determine whether a field isn't sent, is sent as &lt;code&gt;null&lt;/code&gt; or has a value.&lt;/p&gt; 
&lt;p&gt;For instance, if you had the following OpenAPI property:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;S:
  type: object
  properties:
    Field:
      type: string
      nullable: true
    required: []
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The default behaviour in &lt;code&gt;oapi-codegen&lt;/code&gt; is to generate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type S struct {
	Field *string `json:"field,omitempty"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, you lose the ability to understand the three cases, as there's no way to distinguish two of the types from each other:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;is this field not sent? (Can be checked with &lt;code&gt;S.Field == nil&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;is this field &lt;code&gt;null&lt;/code&gt;? (Can be checked with &lt;code&gt;S.Field == nil&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;does this field have a value? (&lt;code&gt;S.Field != nil &amp;amp;&amp;amp; *S.Field == "123"&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As of &lt;code&gt;oapi-codegen&lt;/code&gt; &lt;a href="https://github.com/oapi-codegen/oapi-codegen/releases/tag/v2.1.0"&gt;v2.1.0&lt;/a&gt; it is now possible to represent this with the &lt;code&gt;nullable.Nullable&lt;/code&gt; type from &lt;a href="https://github.com/oapi-codegen/nullable"&gt;our new library, oapi-codegen/nullable&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you configure your generator's Output Options to opt-in to this behaviour, as so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;output-options:
  nullable-type: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You will now receive the following output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type S struct {
    // note that there's no pointer here, just `omitempty`
    Field nullable.Nullable[string] `json:"field,omitempty"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;OpenAPI extensions&lt;/h2&gt; 
&lt;p&gt;As well as the core OpenAPI support, we also support the following OpenAPI extensions, as denoted by the &lt;a href="https://spec.openapis.org/oas/v3.0.3#specification-extensions"&gt;OpenAPI Specification Extensions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The following extensions are supported:&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt; Extension &lt;/th&gt; 
   &lt;th&gt; Description &lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-go-type&lt;/code&gt; &lt;br /&gt; &lt;code&gt;x-go-type-import&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Override the generated type definition (and optionally, add an import from another package) &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-go-type-skip-optional-pointer&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Do not add a pointer type for optional fields in structs &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-go-name&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Override the generated name of a field or a type &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-go-type-name&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Override the generated name of a type &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-omitempty&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Force the presence of the JSON tag `omitempty` on a field &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-omitzero&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Force the presence of the JSON tag `omitzero` on a field &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-go-json-ignore&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; When (un)marshaling JSON, ignore field(s) &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-oapi-codegen-extra-tags&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Generate arbitrary struct tags to fields &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-enum-varnames&lt;/code&gt; / &lt;code&gt;x-enumNames&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Override generated variable names for enum constants &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-deprecated-reason&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Add a GoDoc deprecation warning to a type &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-order&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Explicitly order struct fields &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;code&gt;x-oapi-codegen-only-honour-go-name&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; Only honour the `x-go-name` when generating field names &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;&lt;code&gt;x-go-type&lt;/code&gt; / &lt;code&gt;x-go-type-import&lt;/code&gt; - override the generated type definition (and optionally, add an import from another package)&lt;/h3&gt; 
&lt;p&gt;Using the &lt;code&gt;x-go-type&lt;/code&gt; (and optionally, &lt;code&gt;x-go-type-import&lt;/code&gt; when you need to import another package) allows overriding the type that &lt;code&gt;oapi-codegen&lt;/code&gt; determined the generated type should be.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          # this is a bit of a contrived example, as you could instead use
          # `format: uuid` but it explains how you'd do this when there may be
          # a clash, for instance if you already had a `uuid` package that was
          # being imported, or ...
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
        id:
          type: number
          # ... this is also a bit of a contrived example, as you could use
          # `type: integer` but in the case that you know better than what
          # oapi-codegen is generating, like so:
          x-go-type: int64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different models:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	Id   *int64          `json:"id,omitempty"`
	Name googleuuid.UUID `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xgotype/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-go-type-skip-optional-pointer&lt;/code&gt; - do not add a pointer type for optional fields in structs&lt;/h3&gt; 
&lt;p&gt;&lt;a name="ext-x-go-type-skip-optional-pointer"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] If you prefer this behaviour, and prefer to not have to annotate your whole OpenAPI spec for this behaviour, you can use &lt;code&gt;output-options.prefer-skip-optional-pointer=true&lt;/code&gt; to default this behaviour for all fields.&lt;/p&gt; 
 &lt;p&gt;It is then possible to override this on a per-type/per-field basis where necessary.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;By default, &lt;code&gt;oapi-codegen&lt;/code&gt; will generate a pointer for optional fields.&lt;/p&gt; 
&lt;p&gt;Using the &lt;code&gt;x-go-type-skip-optional-pointer&lt;/code&gt; extension allows omitting that pointer.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
          x-go-type-skip-optional-pointer: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different models:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	Id   float32 `json:"id,omitempty"`
	Name string  `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xgotypeskipoptionalpointer/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-go-name&lt;/code&gt; - override the generated name of a field or a type&lt;/h3&gt; 
&lt;p&gt;By default, &lt;code&gt;oapi-codegen&lt;/code&gt; will attempt to generate the name of fields and types in as best a way it can.&lt;/p&gt; 
&lt;p&gt;However, sometimes, the name doesn't quite fit what your codebase standards are, or the intent of the field, so you can override it with &lt;code&gt;x-go-name&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-go-name
components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      # can be used on a type
      x-go-name: ClientRenamedByExtension
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
          # or on a field
          x-go-name: AccountIdentifier
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different models:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name"`
}

// ClientRenamedByExtension defines model for ClientWithExtension.
type ClientRenamedByExtension struct {
	AccountIdentifier *float32 `json:"id,omitempty"`
	Name              string   `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xgoname/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-go-type-name&lt;/code&gt; - Override the generated name of a type&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Notice that this is subtly different to the &lt;code&gt;x-go-name&lt;/code&gt;, which also applies to &lt;em&gt;fields&lt;/em&gt; within &lt;code&gt;struct&lt;/code&gt;s.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;By default, &lt;code&gt;oapi-codegen&lt;/code&gt; will attempt to generate the name of types in as best a way it can.&lt;/p&gt; 
&lt;p&gt;However, sometimes, the name doesn't quite fit what your codebase standards are, or the intent of the field, so you can override it with &lt;code&gt;x-go-name&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-go-type-name
components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      x-go-type-name: ClientRenamedByExtension
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
          # NOTE attempting a `x-go-type-name` here is a no-op, as we're not producing a _type_ only a _field_
          x-go-type-name: ThisWillNotBeUsed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different models and a type alias:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension = ClientRenamedByExtension

// ClientRenamedByExtension defines model for .
type ClientRenamedByExtension struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xgotypename/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-omitempty&lt;/code&gt; - force the presence of the JSON tag &lt;code&gt;omitempty&lt;/code&gt; on a field&lt;/h3&gt; 
&lt;p&gt;In a case that you may want to add the JSON struct tag &lt;code&gt;omitempty&lt;/code&gt; to types that don't have one generated by default - for instance a required field - you can use the &lt;code&gt;x-omitempty&lt;/code&gt; extension.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-omitempty
components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          # for some reason, you may want this behaviour, even though it's a required field
          x-omitempty: true
        id:
          type: number
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different models:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name,omitempty"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xomitempty/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-omitzero&lt;/code&gt; - force the presence of the JSON tag &lt;code&gt;omitzero&lt;/code&gt; on a field&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;code&gt;omitzero&lt;/code&gt; was added in Go 1.24. If you're not using Go 1.24 in your project, this won't work.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In a case that you may want to add the JSON struct tag &lt;code&gt;omitzero&lt;/code&gt; to types, you can use the &lt;code&gt;x-omitempty&lt;/code&gt; extension.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-omitempty
components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
          x-omitzero: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different models:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	Id   *float32 `json:"id,omitempty,omitzero"`
	Name string   `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xomitzero/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-go-json-ignore&lt;/code&gt; - when (un)marshaling JSON, ignore field(s)&lt;/h3&gt; 
&lt;p&gt;By default, &lt;code&gt;oapi-codegen&lt;/code&gt; will generate &lt;code&gt;json:"..."&lt;/code&gt; struct tags for all fields in a struct, so JSON (un)marshaling works.&lt;/p&gt; 
&lt;p&gt;However, sometimes, you want to omit fields, which can be done with the &lt;code&gt;x-go-json-ignore&lt;/code&gt; extension.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-go-json-ignore
components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        complexField:
          type: object
          properties:
            name:
              type: string
            accountName:
              type: string
          # ...
    ClientWithExtension:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        complexField:
          type: object
          properties:
            name:
              type: string
            accountName:
              type: string
          # ...
          x-go-json-ignore: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different models:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	ComplexField *struct {
		AccountName *string `json:"accountName,omitempty"`
		Name        *string `json:"name,omitempty"`
	} `json:"complexField,omitempty"`
	Name string `json:"name"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	ComplexField *struct {
		AccountName *string `json:"accountName,omitempty"`
		Name        *string `json:"name,omitempty"`
	} `json:"-"`
	Name string `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that the &lt;code&gt;ComplexField&lt;/code&gt; is still generated in full, but the type will then be ignored with JSON marshalling.&lt;/p&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xgojsonignore/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-oapi-codegen-extra-tags&lt;/code&gt; - generate arbitrary struct tags to fields&lt;/h3&gt; 
&lt;p&gt;If you're making use of a field's struct tags to i.e. apply validation, decide whether something should be logged, etc, you can use &lt;code&gt;x-oapi-codegen-extra-tags&lt;/code&gt; to set additional tags for your generated types.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-oapi-codegen-extra-tags
components:
  schemas:
    Client:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
        id:
          type: number
          x-oapi-codegen-extra-tags:
            validate: "required,min=1,max=256"
            safe-to-log: "true"
            gorm: primarykey
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different models:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Id   float32 `json:"id"`
	Name string  `json:"name"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	Id   float32 `gorm:"primarykey" json:"id" safe-to-log:"true" validate:"required,min=1,max=256"`
	Name string  `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xoapicodegenextratags/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-enum-varnames&lt;/code&gt; / &lt;code&gt;x-enumNames&lt;/code&gt; - override generated variable names for enum constants&lt;/h3&gt; 
&lt;p&gt;When consuming an enum value from an external system, the name may not produce a nice variable name. Using the &lt;code&gt;x-enum-varnames&lt;/code&gt; extension allows overriding the name of the generated variable names.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-enumNames and x-enum-varnames
components:
  schemas:
    ClientType:
      type: string
      enum:
        - ACT
        - EXP
    ClientTypeWithNamesExtension:
      type: string
      enum:
        - ACT
        - EXP
      x-enumNames:
        - Active
        - Expired
    ClientTypeWithVarNamesExtension:
      type: string
      enum:
        - ACT
        - EXP
      x-enum-varnames:
        - Active
        - Expired
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different forms of the same enum definition.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Defines values for ClientType.
const (
	ACT ClientType = "ACT"
	EXP ClientType = "EXP"
)

// Defines values for ClientTypeWithNamesExtension.
const (
	ClientTypeWithNamesExtensionActive  ClientTypeWithNamesExtension = "ACT"
	ClientTypeWithNamesExtensionExpired ClientTypeWithNamesExtension = "EXP"
)

// Defines values for ClientTypeWithVarNamesExtension.
const (
	ClientTypeWithVarNamesExtensionActive  ClientTypeWithVarNamesExtension = "ACT"
	ClientTypeWithVarNamesExtensionExpired ClientTypeWithVarNamesExtension = "EXP"
)

// ClientType defines model for ClientType.
type ClientType string

// ClientTypeWithNamesExtension defines model for ClientTypeWithNamesExtension.
type ClientTypeWithNamesExtension string

// ClientTypeWithVarNamesExtension defines model for ClientTypeWithVarNamesExtension.
type ClientTypeWithVarNamesExtension string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xenumnames/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-deprecated-reason&lt;/code&gt; - add a GoDoc deprecation warning to a type&lt;/h3&gt; 
&lt;p&gt;When an OpenAPI type is deprecated, a deprecation warning can be added in the GoDoc using &lt;code&gt;x-deprecated-reason&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-deprecated-reason
components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          deprecated: true
          x-deprecated-reason: Don't use because reasons
        id:
          type: number
          # NOTE that this doesn't generate, as no `deprecated: true` is set
          x-deprecated-reason: NOTE you shouldn't see this, as you've not deprecated this field
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different forms of the same enum definition.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Id   *float32 `json:"id,omitempty"`
	Name string   `json:"name"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	Id *float32 `json:"id,omitempty"`
	// Deprecated: Don't use because reasons
	Name string `json:"name"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that because we've not set &lt;code&gt;deprecated: true&lt;/code&gt; to the &lt;code&gt;name&lt;/code&gt; field, it doesn't generate a deprecation warning.&lt;/p&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xdeprecatedreason/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-order&lt;/code&gt; - explicitly order struct fields&lt;/h3&gt; 
&lt;p&gt;Whether you like certain fields being ordered before others, or you want to perform more efficient packing of your structs, the &lt;code&gt;x-order&lt;/code&gt; extension is here for you.&lt;/p&gt; 
&lt;p&gt;Note that &lt;code&gt;x-order&lt;/code&gt; is 1-indexed - &lt;code&gt;x-order: 0&lt;/code&gt; is not a valid value.&lt;/p&gt; 
&lt;p&gt;We can see this at play with the following schemas:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-order
components:
  schemas:
    Client:
      type: object
      required:
        - name
      properties:
        a_name:
          type: string
        id:
          type: number
    ClientWithExtension:
      type: object
      required:
        - name
      properties:
        a_name:
          type: string
          x-order: 2
        id:
          type: number
          x-order: 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;From here, we now get two different forms of the same type definition.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	AName *string  `json:"a_name,omitempty"`
	Id    *float32 `json:"id,omitempty"`
}

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	Id    *float32 `json:"id,omitempty"`
	AName *string  `json:"a_name,omitempty"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xorder/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;x-oapi-codegen-only-honour-go-name&lt;/code&gt; - only honour the &lt;code&gt;x-go-name&lt;/code&gt; when generating field names&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Using this option may lead to cases where &lt;code&gt;oapi-codegen&lt;/code&gt;'s rewriting of field names to prevent clashes with other types, or to prevent including characters that may not be valid Go field names.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In some cases, you may not want use the inbuilt options for converting an OpenAPI field name to a Go field name, such as the &lt;code&gt;name-normalizer: "ToCamelCaseWithInitialisms"&lt;/code&gt;, and instead trust the name that you've defined for the type better.&lt;/p&gt; 
&lt;p&gt;In this case, you can use &lt;code&gt;x-oapi-codegen-only-honour-go-name&lt;/code&gt; to enforce this, alongside specifying the &lt;code&gt;allow-unexported-struct-field-names&lt;/code&gt; compatibility option.&lt;/p&gt; 
&lt;p&gt;This allows you to take a spec such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: x-oapi-codegen-only-honour-go-name
components:
  schemas:
    TypeWithUnexportedField:
      description: A struct will be output where one of the fields is not exported
      properties:
        name:
          type: string
        id:
          type: string
          # NOTE that there is an explicit usage of a lowercase character
          x-go-name: accountIdentifier
          x-oapi-codegen-extra-tags:
            json: "-"
          x-oapi-codegen-only-honour-go-name: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And we'll generate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// TypeWithUnexportedField A struct will be output where one of the fields is not exported
type TypeWithUnexportedField struct {
	accountIdentifier *string `json:"-"`
	Name              *string `json:"name,omitempty"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/extensions/xoapicodegenonlyhonourgoname"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Request/response validation middleware&lt;/h2&gt; 
&lt;p&gt;The generated code that &lt;code&gt;oapi-codegen&lt;/code&gt; produces has some validation for some incoming data, such as checking for required headers, and when using the &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#strict-server"&gt;strict server&lt;/a&gt; you get some more validation around the correct usage of the response types.&lt;/p&gt; 
&lt;p&gt;However, this leaves a lot of validation that needs to be done, which can be tedious to hand-write this logic, especially for large or complex OpenAPI specifications.&lt;/p&gt; 
&lt;p&gt;To simplify this, we use a middleware, which provides the request validation. The middleware you want to use depends on the server you're using:&lt;/p&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;th&gt; Server &lt;/th&gt; 
   &lt;th&gt; Middleware library &lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/go-chi/chi"&gt;Chi&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/oapi-codegen/nethttp-middleware"&gt;nethttp-middleware&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/labstack/echo"&gt;Echo&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/oapi-codegen/echo-middleware"&gt;echo-middleware&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/oapi-codegen/fiber-middleware"&gt;fiber-middleware&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/gin-gonic/gin"&gt;Gin&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/oapi-codegen/gin-middleware"&gt;gin-middleware&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/gorilla/mux"&gt;gorilla/mux&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/oapi-codegen/nethttp-middleware"&gt;nethttp-middleware&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/kataras/iris"&gt;Iris&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/oapi-codegen/iris-middleware"&gt;iris-middleware&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://pkg.go.dev/net/http"&gt;1.22+ &lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/oapi-codegen/nethttp-middleware"&gt;nethttp-middleware&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;p&gt;Any other server (which conforms to &lt;code&gt;net/http&lt;/code&gt;)&lt;/p&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;p&gt;&lt;a href="https://github.com/oapi-codegen/nethttp-middleware"&gt;nethttp-middleware&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] It is &lt;a href="https://github.com/oapi-codegen/oapi-codegen/issues/1038"&gt;not currently possible&lt;/a&gt; to validate the HTTP response with a middleware.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] We're also &lt;a href="https://github.com/oapi-codegen/exp/issues/1"&gt;exploring&lt;/a&gt; the use of &lt;a href="https://github.com/pb33f/libopenapi-validator/"&gt;libopenapi-validator&lt;/a&gt; for request/response validation middleware&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Implementing security&lt;/h2&gt; 
&lt;p&gt;If you're using a specification with &lt;a href="https://spec.openapis.org/oas/v3.0.3#security-scheme-object"&gt;Security Schemes&lt;/a&gt; and &lt;a href="https://spec.openapis.org/oas/v3.0.3#security-requirement-object"&gt;Security Requirements&lt;/a&gt;, you'll want to authenticate and authorize requests.&lt;/p&gt; 
&lt;h3&gt;On the server&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Out-of-the-box, the server-side code generated by &lt;code&gt;oapi-codegen&lt;/code&gt; does not provide security validation.&lt;/p&gt; 
 &lt;p&gt;To perform authentication, you will need to use the &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#requestresponse-validation-middleware"&gt;validation middleware&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;In the future, we plan to &lt;a href="https://github.com/oapi-codegen/oapi-codegen/issues/1524"&gt;implement server-side validation in the generated code&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To see how this can work, check out the &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/authenticated-api/echo"&gt;authenticated API example&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;On the client&lt;/h3&gt; 
&lt;p&gt;With a generated client, you'll want to use the client's generated &lt;code&gt;WithRequestEditorFn&lt;/code&gt; function to pass in a given request editor &lt;code&gt;RequestEditorFn&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For instance:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
	"context"
	"fmt"
	"log"

	"github.com/oapi-codegen/oapi-codegen/v2/pkg/securityprovider"
)

func main() {
	basicAuth, err := securityprovider.NewSecurityProviderBasicAuth("my_user", "my_pass")
	if err != nil {
		log.Fatal(err)
	}

	client, err := NewClient("https://....", WithRequestEditorFn(basicAuth.Intercept))
	if err != nil {
		log.Fatal(err)
	}

	resp, err := client.GetClient(context.TODO())
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("resp.StatusCode: %v\n", resp.StatusCode)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice that we're using a pre-built provider from the &lt;a href="https://pkg.go.dev/github.com/oapi-codegen/oapi-codegen/v2/pkg/securityprovider"&gt;&lt;code&gt;pkg/securityprovider&lt;/code&gt; package&lt;/a&gt;, which has some inbuilt support for other types of authentication, too.&lt;/p&gt; 
&lt;h2&gt;Custom code generation&lt;/h2&gt; 
&lt;p&gt;It is possible to extend the inbuilt code generation from &lt;code&gt;oapi-codegen&lt;/code&gt; using Go's &lt;code&gt;text/template&lt;/code&gt;s.&lt;/p&gt; 
&lt;p&gt;You can specify, through your configuration file, the &lt;code&gt;output-options.user-templates&lt;/code&gt; setting to override the inbuilt templates and use a user-defined template.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Filenames given to the &lt;code&gt;user-templates&lt;/code&gt; configuration must &lt;strong&gt;exactly&lt;/strong&gt; match the filename that &lt;code&gt;oapi-codegen&lt;/code&gt; is looking for&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Local paths&lt;/h3&gt; 
&lt;p&gt;Within your configuration file, you can specify relative or absolute paths to a file to reference for the template, such as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
# ...
output-options:
  user-templates:
    client-with-responses.tmpl: ./custom-template.tmpl
    additional-properties.tmpl: /tmp/foo.bar
    typedef.tmpl: no-prefix.tmpl
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] We do not interpolate &lt;code&gt;~&lt;/code&gt; or &lt;code&gt;$HOME&lt;/code&gt; (or other environment variables) in paths given&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;HTTPS paths&lt;/h3&gt; 
&lt;p&gt;It is also possible to use HTTPS URLs.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] Although possible, this does lead to &lt;code&gt;oapi-codegen&lt;/code&gt; executions not necessarily being reproducible. It's recommended to vendor (copy) the OpenAPI spec into your codebase and reference it locally&lt;/p&gt; 
 &lt;p&gt;See &lt;a href="https://www.jvt.me/posts/2024/04/27/github-actions-update-file/"&gt;this blog post&lt;/a&gt; for an example of how to use GitHub Actions to manage the updates of files across repos&lt;/p&gt; 
 &lt;p&gt;This will be disabled by default (but possible to turn back on via configuration) &lt;a href="https://github.com/oapi-codegen/oapi-codegen/issues/1564"&gt;in the future&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To use it, you can use the following configuration:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
# ...
output-options:
  user-templates:
    # The following are referencing a version of the default client-with-responses.tmpl file, but loaded in through GitHub's raw.githubusercontent.com. The general form to use raw.githubusercontent.com is as follows https://raw.githubusercontent.com/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;/&amp;lt;commitish&amp;gt;/path/to/template/template.tmpl

    # Alternatively using raw.githubusercontent.com with a hash
    client-with-responses.tmpl: https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/ad5eada4f3ccc28a88477cef62ea21c17fc8aa01/pkg/codegen/templates/client-with-responses.tmpl
    # Alternatively using raw.githubusercontent.com with a tag
    client-with-responses.tmpl: https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/v2.1.0/pkg/codegen/templates/client-with-responses.tmpl
    # Alternatively using raw.githubusercontent.com with a branch
    client-with-responses.tmpl: https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/master/pkg/codegen/templates/client-with-responses.tmpl
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] If using URLs that pull locations from a Git repo, such as &lt;code&gt;raw.githubusercontent.com&lt;/code&gt;, it is strongly encouraged to use a tag or a raw commit hash instead of a branch like &lt;code&gt;main&lt;/code&gt;. Tracking a branch can lead to unexpected API drift, and loss of the ability to reproduce a build.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Inline template&lt;/h3&gt; 
&lt;p&gt;It's also possible to set the templates inline in the configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
# ...
output-options:
  user-templates:
    # NOTE the use of the `|` (pipe symbol) here to denote that this is a
    # multi-line statement that should preserve newlines. More reading:
    # https://stackoverflow.com/a/18708156/2257038 and
    # https://stackoverflow.com/a/15365296/2257038
    client-with-responses.tmpl: |
        // ClientWithResponses builds on ClientInterface to offer response payloads
        type ClientWithResponses struct {
            ClientInterface
        }
        ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using the Go package&lt;/h3&gt; 
&lt;p&gt;Alternatively, you are able to use the underlying code generation as a package, which &lt;a href="https://github.com/oapi-codegen/oapi-codegen/issues/1487"&gt;will be documented in the future&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Additional Properties (&lt;code&gt;additionalProperties&lt;/code&gt;)&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://spec.openapis.org/oas/v3.0.3.html#schema-object"&gt;OpenAPI Schemas&lt;/a&gt; implicitly accept &lt;code&gt;additionalProperties&lt;/code&gt;, meaning that any fields provided, but not explicitly defined via properties on the schema are accepted as input, and propagated. When unspecified, OpenAPI defines that the &lt;code&gt;additionalProperties&lt;/code&gt; field is assumed to be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For simplicity, and to remove a fair bit of duplication and boilerplate, &lt;code&gt;oapi-codegen&lt;/code&gt; decides to ignore the implicit &lt;code&gt;additionalProperties: true&lt;/code&gt;, and instead requires you to specify the &lt;code&gt;additionalProperties&lt;/code&gt; key to generate the boilerplate.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] In the future &lt;a href="https://github.com/oapi-codegen/oapi-codegen/issues/1514"&gt;this will be possible&lt;/a&gt; to disable this functionality, and honour the implicit &lt;code&gt;additionalProperties: true&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Below you can see some examples of how &lt;code&gt;additionalProperties&lt;/code&gt; affects the generated code.&lt;/p&gt; 
&lt;h3&gt;Implicit &lt;code&gt;additionalProperties: true&lt;/code&gt; / no &lt;code&gt;additionalProperties&lt;/code&gt; set&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;components:
  schemas:
    Thing:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
      # implicit additionalProperties: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will generate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Thing defines model for Thing.
type Thing struct {
	Id int `json:"id"`
}

// with no generated boilerplate nor the `AdditionalProperties` field
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Explicit &lt;code&gt;additionalProperties: true&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;components:
  schemas:
    Thing:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
      # explicit true
      additionalProperties: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will generate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Thing defines model for Thing.
type Thing struct {
	Id                   int                    `json:"id"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// with generated boilerplate below
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Boilerplate&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;
// Getter for additional properties for Thing. Returns the specified
// element and whether it was found
func (a Thing) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Thing
func (a *Thing) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Thing to handle AdditionalProperties
func (a *Thing) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &amp;amp;object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &amp;amp;a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &amp;amp;fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Thing to handle AdditionalProperties
func (a Thing) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;code&gt;additionalProperties&lt;/code&gt; as &lt;code&gt;integer&lt;/code&gt;s&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;components:
  schemas:
    Thing:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
      # simple type
      additionalProperties:
        type: integer
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will generate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Thing defines model for Thing.
type Thing struct {
	Id                   int            `json:"id"`
	AdditionalProperties map[string]int `json:"-"`
}

// with generated boilerplate below
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Boilerplate&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;// Getter for additional properties for Thing. Returns the specified
// element and whether it was found
func (a Thing) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Thing
func (a *Thing) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Thing to handle AdditionalProperties
func (a *Thing) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &amp;amp;object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &amp;amp;a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &amp;amp;fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Thing to handle AdditionalProperties
func (a Thing) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;code&gt;additionalProperties&lt;/code&gt; with an object&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;components:
  schemas:
    Thing:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
      # object
      additionalProperties:
        type: object
        properties:
          foo:
            type: string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will generate:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// Thing defines model for Thing.
type Thing struct {
	Id                   int `json:"id"`
	AdditionalProperties map[string]struct {
		Foo *string `json:"foo,omitempty"`
	} `json:"-"`
}

// with generated boilerplate below
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Boilerplate&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;// Getter for additional properties for Thing. Returns the specified
// element and whether it was found
func (a Thing) Get(fieldName string) (value struct {
	Foo *string `json:"foo,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Thing
func (a *Thing) Set(fieldName string, value struct {
	Foo *string `json:"foo,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Foo *string `json:"foo,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Thing to handle AdditionalProperties
func (a *Thing) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &amp;amp;object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &amp;amp;a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Foo *string `json:"foo,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Foo *string `json:"foo,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &amp;amp;fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Thing to handle AdditionalProperties
func (a Thing) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Globally skipping the "optional pointer"&lt;/h2&gt; 
&lt;p&gt;One of the key things &lt;code&gt;oapi-codegen&lt;/code&gt; does is to use an "optional pointer", following idiomatic Go practices, to indicate that a field/type is optional.&lt;/p&gt; 
&lt;p&gt;This can be tuned on a per-field basis, using the &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#ext-x-go-type-skip-optional-pointer"&gt;&lt;code&gt;x-go-type-skip-optional-pointer&lt;/code&gt; extension&lt;/a&gt;, but it can be a bit repetitive, or can be more complex when using an OpenAPI Overlay.&lt;/p&gt; 
&lt;p&gt;As of &lt;code&gt;oapi-codegen&lt;/code&gt; v2.5.0, this can be tuned in two specific ways, via the following &lt;code&gt;output-options:&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;prefer-skip-optional-pointer&lt;/code&gt;: a global default that you do &lt;em&gt;not&lt;/em&gt; want the "optional pointer" generated. Optional fields will not have an "optional pointer", and will have an &lt;code&gt;omitempty&lt;/code&gt; JSON tag&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prefer-skip-optional-pointer-with-omitzero&lt;/code&gt;: when used in conjunction with &lt;code&gt;prefer-skip-optional-pointer&lt;/code&gt;, any optional fields are generated with an &lt;code&gt;omitzero&lt;/code&gt; JSON tag. &lt;strong&gt;Requires Go 1.24+&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In both cases, there is control on a per-field level to set &lt;code&gt;x-go-type-skip-optional-pointer: false&lt;/code&gt; or &lt;code&gt;x-omitzero: false&lt;/code&gt; to undo these to field(s).&lt;/p&gt; 
&lt;p&gt;For example, when combining both options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: preferskipoptionalpointerwithomitzero
output: gen.go
generate:
  # ...
output-options:
  # ...
  prefer-skip-optional-pointer: true
  prefer-skip-optional-pointer-with-omitzero: true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When we have the following spec:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: prefer-skip-optional-pointer-with-omitzero
components:
  schemas:
    ClientWithExtension:
      type: object
      required:
        - name
      properties:
        name:
          description: This field is required, so will never have an optional pointer, nor `omitzero`.
          type: string
        id:
          description: This field is optional, but the `prefer-skip-optional-pointer` Output Option ensures that this should not have an optional pointer. However, it will receive `omitzero`.
          type: number
        pointer_id:
          type: number
          description: This field should have an optional pointer, as the field-level definition of `x-go-type-skip-optional-pointer` overrides the `prefer-skip-optional-pointer` Output Option. This will also not receive an `omitzero`.
          # NOTE that this overrides the global preference
          x-go-type-skip-optional-pointer: false
        no_omit:
          type: number
          description: This field is optional, but the `prefer-skip-optional-pointer` Output Option ensures that this should not have an optional pointer. This will not receive `omitzero`, as the field-level definition of `x-omitzero` overrides the `prefer-skip-optional-pointer-with-omitzero` Output Option.
          # NOTE that this overrides the global preference
          x-omitzero: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We then generate the following Go code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// ...

// ClientWithExtension defines model for ClientWithExtension.
type ClientWithExtension struct {
	// Id This field is optional, but the `prefer-skip-optional-pointer` Output Option ensures that this should not have an optional pointer. However, it will receive `omitzero`.
	Id float32 `json:"id,omitempty,omitzero"`

	// Name This field is required, so will never have an optional pointer, nor `omitzero`.
	Name string `json:"name"`

	// NoOmit This field is optional, but the `prefer-skip-optional-pointer` Output Option ensures that this should not have an optional pointer. This will not receive `omitzero`, as the field-level definition of `x-omitzero` overrides the `prefer-skip-optional-pointer-with-omitzero` Output Option.
	NoOmit float32 `json:"no_omit,omitempty"`

	// PointerId This field should have an optional pointer, as the field-level definition of `x-go-type-skip-optional-pointer` overrides the `prefer-skip-optional-pointer` Output Option. This will also not receive an `omitzero`.
	PointerId *float32 `json:"pointer_id,omitempty"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see this in more detail in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/output-options/preferskipoptionalpointer/"&gt;the example code for &lt;code&gt;prefer-skip-optional-pointer&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/output-options/preferskipoptionalpointerwithomitzero/"&gt;example code for &lt;code&gt;prefer-skip-optional-pointer-with-omitzero&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Changing the names of generated types&lt;/h2&gt; 
&lt;p&gt;As of &lt;code&gt;oapi-codegen&lt;/code&gt; v2.2.0, it is now possible to use the &lt;code&gt;output-options&lt;/code&gt; configuration's &lt;code&gt;name-normalizer&lt;/code&gt; to define the logic for how to convert an OpenAPI name (i.e. an Operation ID or a Schema name) and construct a Go type name.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example, using default configuration&lt;/summary&gt; 
 &lt;p&gt;By default, &lt;code&gt;oapi-codegen&lt;/code&gt; will perform camel-case conversion, so for a spec such as:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Example code for the `name-normalizer` output option
paths:
  /api/pets/{petId}:
    get:
      summary: Get pet given identifier.
      operationId: getHttpPet
      parameters:
      - name: petId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: valid pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    Pet:
      type: object
      required:
        - uuid
        - name
      properties:
        uuid:
          type: string
          description: The pet uuid.
        name:
          type: string
          description: The name of the pet.
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
    OneOf2things:
      description: "Notice that the `things` is not capitalised"
      oneOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This will produce:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;// OneOf2things Notice that the `things` is not capitalised
type OneOf2things struct {
	union json.RawMessage
}

// Pet defines model for Pet.
type Pet struct {
	// Name The name of the pet.
	Name string `json:"name"`

	// Uuid The pet uuid.
	Uuid string `json:"uuid"`
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHttpPet request
	GetHttpPet(ctx context.Context, petId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Example, using &lt;code&gt;ToCamelCaseWithInitialisms&lt;/code&gt;&lt;/summary&gt; 
 &lt;p&gt;By default, &lt;code&gt;oapi-codegen&lt;/code&gt; will perform camel-case conversion, so for a spec such as:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Example code for the `name-normalizer` output option
paths:
  /api/pets/{petId}:
    get:
      summary: Get pet given identifier.
      operationId: getHttpPet
      parameters:
      - name: petId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: valid pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
components:
  schemas:
    Pet:
      type: object
      required:
        - uuid
        - name
      properties:
        uuid:
          type: string
          description: The pet uuid.
        name:
          type: string
          description: The name of the pet.
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
    OneOf2things:
      description: "Notice that the `things` is not capitalised"
      oneOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This will produce:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;// OneOf2things Notice that the `things` is not capitalised
type OneOf2things struct {
	union json.RawMessage
}

// Pet defines model for Pet.
type Pet struct {
	// Name The name of the pet.
	Name string `json:"name"`

	// UUID The pet uuid.
	UUID string `json:"uuid"`
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHTTPPet request
	GetHTTPPet(ctx context.Context, petID string, reqEditors ...RequestEditorFn) (*http.Response, error)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;For more details of what the resulting code looks like, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/internal/test/outputoptions/name-normalizer/"&gt;the test cases&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples"&gt;examples directory&lt;/a&gt; contains some additional cases which are useful examples for how to use &lt;code&gt;oapi-codegen&lt;/code&gt;, including how you'd take the Petstore API and implement it with &lt;code&gt;oapi-codegen&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You could also find some cases of how the project can be used by checking out our &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/internal/test"&gt;internal test cases&lt;/a&gt; which are real-world usages that make up our regression tests.&lt;/p&gt; 
&lt;h3&gt;Blog posts&lt;/h3&gt; 
&lt;p&gt;We love reading posts by the community about how to use the project.&lt;/p&gt; 
&lt;p&gt;Here are a few we've found around the Web:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.jvt.me/posts/2022/07/12/go-openapi-server/"&gt;Building a Go RESTful API with design-first OpenAPI contracts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/@fikihalan/a-practical-guide-to-using-oapi-codegen-in-golang-api-development-with-the-fiber-framework-bce2a59380ae"&gt;A Practical Guide to Using oapi-codegen in Golang API Development with the Fiber Framework&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ldej.nl/post/generating-go-from-openapi-3/"&gt;Generating Go server code from OpenAPI 3 definitions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/@kyodo-tech/go-client-code-generation-from-swagger-and-openapi-a0576831836c"&gt;Go Client Code Generation from Swagger and OpenAPI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://blog.commitsmart.com/go-oapi-codegen-request-validation-285398b37dc8"&gt;Go oapi-codegen + request validation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://i4o.dev/blog/oapi-codegen-with-chi-router"&gt;Streamlining Go + Chi Development: Generating Code from an OpenAPI Spec&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Got one to add? Please raise a PR!&lt;/p&gt; 
&lt;h2&gt;Frequently Asked Questions (FAQs)&lt;/h2&gt; 
&lt;h3&gt;Does &lt;code&gt;oapi-codegen&lt;/code&gt; support OpenAPI 3.1?&lt;/h3&gt; 
&lt;p&gt;No, we don't currently.&lt;/p&gt; 
&lt;p&gt;OpenAPI 3.1 support is &lt;a href="https://github.com/oapi-codegen/oapi-codegen/issues/373"&gt;awaiting upstream support&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In the meantime, you could follow &lt;a href="https://www.jvt.me/posts/2025/05/04/oapi-codegen-trick-openapi-3-1/"&gt;steps from this blog post&lt;/a&gt; to &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#modifying-the-input-openapi-specification-with-openapi-overlay"&gt;use OpenAPI Overlay&lt;/a&gt; to "downgrade" the OpenAPI 3.1 spec to OpenAPI 3.0.&lt;/p&gt; 
&lt;h3&gt;How does &lt;code&gt;oapi-codegen&lt;/code&gt; handle &lt;code&gt;anyOf&lt;/code&gt;, &lt;code&gt;allOf&lt;/code&gt; and &lt;code&gt;oneOf&lt;/code&gt;?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;oapi-codegen&lt;/code&gt; supports &lt;code&gt;anyOf&lt;/code&gt;, &lt;code&gt;allOf&lt;/code&gt; and &lt;code&gt;oneOf&lt;/code&gt; for generated code.&lt;/p&gt; 
&lt;p&gt;For instance, through the following OpenAPI spec:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;openapi: "3.0.0"
info:
  version: 1.0.0
  title: Using complex schemas
  description: An example of `anyOf`, `allOf` and `oneOf`
components:
  schemas:
    # base types
    Client:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    Identity:
      type: object
      required:
        - issuer
      properties:
        issuer:
          type: string

    # allOf performs a union of all types defined
    ClientWithId:
      allOf:
        - $ref: '#/components/schemas/Client'
        - properties:
            id:
              type: integer
          required:
            - id

    # allOf performs a union of all types defined, but if there's a duplicate field defined, it'll be overwritten by the last schema
    # https://github.com/oapi-codegen/oapi-codegen/issues/1569
    IdentityWithDuplicateField:
      allOf:
        # `issuer` will be ignored
        - $ref: '#/components/schemas/Identity'
        # `issuer` will be ignored
        - properties:
            issuer:
              type: integer
        # `issuer` will take precedence
        - properties:
            issuer:
              type: object
              properties:
                name:
                  type: string
              required:
                - name

    # anyOf results in a type that has an `AsClient`/`MergeClient`/`FromClient` and an `AsIdentity`/`MergeIdentity`/`FromIdentity` method so you can choose which of them you want to retrieve
    ClientAndMaybeIdentity:
      anyOf:
        - $ref: '#/components/schemas/Client'
        - $ref: '#/components/schemas/Identity'

    # oneOf results in a type that has an `AsClient`/`MergeClient`/`FromClient` and an `AsIdentity`/`MergeIdentity`/`FromIdentity` method so you can choose which of them you want to retrieve
    ClientOrIdentity:
      oneOf:
        - $ref: '#/components/schemas/Client'
        - $ref: '#/components/schemas/Identity'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This results in the following types:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Base types&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;// Client defines model for Client.
type Client struct {
	Name string `json:"name"`
}

// Identity defines model for Identity.
type Identity struct {
	Issuer string `json:"issuer"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;allOf&lt;/code&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;// ClientWithId defines model for ClientWithId.
type ClientWithId struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// IdentityWithDuplicateField defines model for IdentityWithDuplicateField.
type IdentityWithDuplicateField struct {
	Issuer struct {
		Name string `json:"name"`
	} `json:"issuer"`
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;anyOf&lt;/code&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// ClientAndMaybeIdentity defines model for ClientAndMaybeIdentity.
type ClientAndMaybeIdentity struct {
	union json.RawMessage
}

// AsClient returns the union data inside the ClientAndMaybeIdentity as a Client
func (t ClientAndMaybeIdentity) AsClient() (Client, error) {
	var body Client
	err := json.Unmarshal(t.union, &amp;amp;body)
	return body, err
}

// FromClient overwrites any union data inside the ClientAndMaybeIdentity as the provided Client
func (t *ClientAndMaybeIdentity) FromClient(v Client) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClient performs a merge with any union data inside the ClientAndMaybeIdentity, using the provided Client
func (t *ClientAndMaybeIdentity) MergeClient(v Client) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentity returns the union data inside the ClientAndMaybeIdentity as a Identity
func (t ClientAndMaybeIdentity) AsIdentity() (Identity, error) {
	var body Identity
	err := json.Unmarshal(t.union, &amp;amp;body)
	return body, err
}

// FromIdentity overwrites any union data inside the ClientAndMaybeIdentity as the provided Identity
func (t *ClientAndMaybeIdentity) FromIdentity(v Identity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentity performs a merge with any union data inside the ClientAndMaybeIdentity, using the provided Identity
func (t *ClientAndMaybeIdentity) MergeIdentity(v Identity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ClientAndMaybeIdentity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ClientAndMaybeIdentity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}


&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;oneOf&lt;/code&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;// AsClient returns the union data inside the ClientOrIdentity as a Client
func (t ClientOrIdentity) AsClient() (Client, error) {
	var body Client
	err := json.Unmarshal(t.union, &amp;amp;body)
	return body, err
}

// FromClient overwrites any union data inside the ClientOrIdentity as the provided Client
func (t *ClientOrIdentity) FromClient(v Client) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClient performs a merge with any union data inside the ClientOrIdentity, using the provided Client
func (t *ClientOrIdentity) MergeClient(v Client) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentity returns the union data inside the ClientOrIdentity as a Identity
func (t ClientOrIdentity) AsIdentity() (Identity, error) {
	var body Identity
	err := json.Unmarshal(t.union, &amp;amp;body)
	return body, err
}

// FromIdentity overwrites any union data inside the ClientOrIdentity as the provided Identity
func (t *ClientOrIdentity) FromIdentity(v Identity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentity performs a merge with any union data inside the ClientOrIdentity, using the provided Identity
func (t *ClientOrIdentity) MergeIdentity(v Identity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ClientOrIdentity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ClientOrIdentity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;For more info, check out &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/examples/anyof-allof-oneof/"&gt;the example code&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;How can I ignore parts of the spec I don't care about?&lt;/h3&gt; 
&lt;p&gt;By default, &lt;code&gt;oapi-codegen&lt;/code&gt; will generate everything from the specification.&lt;/p&gt; 
&lt;p&gt;If you'd like to reduce what's generated, you can use one of a few options in &lt;a href="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/#usage"&gt;the configuration file&lt;/a&gt; to tune the generation of the resulting output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
output-options:
  include-tags: []
  exclude-tags: []
  include-operation-ids: []
  exclude-operation-ids: []
  exclude-schemas: []
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Check &lt;a href="https://pkg.go.dev/github.com/oapi-codegen/oapi-codegen/v2/pkg/codegen#OutputOptions"&gt;the docs&lt;/a&gt; for more details of usage.&lt;/p&gt; 
&lt;h3&gt;Should I commit the generated code?&lt;/h3&gt; 
&lt;p&gt;We recommend doing so, yes, for the following reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It means it's easier to view the impact of a change - be it due to an upgrade of &lt;code&gt;oapi-codegen&lt;/code&gt;, or a change to your spec - and has helped catch (possibly) breaking changes in the past more easily&lt;/li&gt; 
 &lt;li&gt;It then allows your codebase to be consumed as a library, as all the files are committed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This means you'll need to have your CI/CD pipeline validate that generated files are all up-to-date, but that's a fairly straightforward piece of work.&lt;/p&gt; 
&lt;h3&gt;Should I lint the generated code?&lt;/h3&gt; 
&lt;p&gt;We really ask that you don't. Although it intends to be idiomatic Go code, it's not expected to pass all the various linting rules that your project may apply.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] We will, on occasion, improve the generated code to fix some linting warnings, such as those from &lt;code&gt;go vet&lt;/code&gt;, but this should not be an expected change.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;I've just updated my version of &lt;code&gt;kin-openapi&lt;/code&gt;, and now I can't build my code 😠&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://github.com/getkin/kin-openapi"&gt;kin-openapi&lt;/a&gt; project - which we 💜 for providing a great library and set of tooling for interacting with OpenAPI - is a pre-v1 release, which means that they're within their rights to push breaking changes.&lt;/p&gt; 
&lt;p&gt;This may lead to breakage in your consuming code, and if so, sorry that's happened!&lt;/p&gt; 
&lt;p&gt;We'll be aware of the issue, and will work to update both the core &lt;code&gt;oapi-codegen&lt;/code&gt; and the middlewares accordingly.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;We're very appreciative of &lt;a href="https://github.com/oapi-codegen/oapi-codegen/graphs/contributors"&gt;the many contributors over the years&lt;/a&gt; and the ongoing use of the project 💜&lt;/p&gt; 
&lt;a href="https://github.com/oapi-codegen/oapi-codegen/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=oapi-codegen/oapi-codegen" /&gt; &lt;/a&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;For the most part, &lt;code&gt;oapi-codegen&lt;/code&gt; is maintained in two busy peoples' free time. As noted in &lt;a href="https://github.com/oapi-codegen/oapi-codegen/discussions/1606"&gt;Creating a more sustainable model for &lt;code&gt;oapi-codegen&lt;/code&gt; in the future&lt;/a&gt;, we're looking to make this a more sustainable project in the future.&lt;/p&gt; 
&lt;p&gt;Please consider sponsoring us through GitHub Sponsors either &lt;a href="https://github.com/sponsors/oapi-codegen/"&gt;on the organisation&lt;/a&gt; or &lt;a href="https://github.com/sponsors/jamietanna/"&gt;directly for Jamie&lt;/a&gt;, which helps work towards us being able to maintain the project long term.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://blog.tidelift.com/paying-maintainers-the-howto"&gt;this blog post from Tidelift&lt;/a&gt; for more details on how to talk to your company about sponsoring maintainers of (Open Source) projects you depend on.&lt;/p&gt; 
&lt;p&gt;We are currently sponsored for 4 hours of work a month by Elastic:&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://elastic.co?utm_source=oapi-codegen+repo&amp;amp;utm_medium=github+sponsorship"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset=".github/sponsors/elastic-light.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset=".github/sponsors/elastic-dark.svg" /&gt; 
   &lt;img alt="Elastic logo" src="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/.github/sponsors/elastic-dark.svg?sanitize=true" height="100px" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;In addition, we are also generously sponsored by the following folks, each of whom provide sponsorship for 1 hour of work a month:&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.devzero.io/lp/dev-environment?utm_campaign=github&amp;amp;utm_source=oapi-codegen%20repo&amp;amp;utm_medium=github%20sponsorship"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset=".github/sponsors/devzero-light.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset=".github/sponsors/devzero-dark.svg" /&gt; 
   &lt;img alt="DevZero logo" src="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/.github/sponsors/devzero-dark.svg?sanitize=true" height="100px" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://sandbox.speakeasy.com/?s=iQ5hEdrjLCii&amp;amp;utm_source=oapi-codegen+repo&amp;amp;utm_medium=github+sponsorship"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset=".github/sponsors/speakeasy-light.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset=".github/sponsors/speakeasy-dark.svg" /&gt; 
   &lt;img alt="Speakeasy logo" src="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/.github/sponsors/speakeasy-dark.svg?sanitize=true" height="60px" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://cybozu.co.jp/?utm_source=oapi-codegen+repo&amp;amp;utm_medium=github+sponsorship"&gt; &lt;img alt="Cybozu logo" src="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/.github/sponsors/cybozu.svg?sanitize=true" height="100px" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://livepeer.org/?utm_source=oapi-codegen+repo&amp;amp;utm_medium=github+sponsorship"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset=".github/sponsors/livepeer-light.svg" /&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset=".github/sponsors/livepeer-dark.svg" /&gt; 
   &lt;img alt="Livepeer logo" src="https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/main/.github/sponsors/livepeer-dark.svg?sanitize=true" height="50px" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;(Note that the order of appearance the order in which sponsorship was received)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>XIU2/CloudflareSpeedTest</title>
      <link>https://github.com/XIU2/CloudflareSpeedTest</link>
      <description>&lt;p&gt;🌩「自选优选 IP」测试 Cloudflare CDN 延迟和速度，获取最快 IP ！当然也支持其他 CDN / 多个解析 IP 的网站 ~&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XIU2/CloudflareSpeedTest&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/XIU2/CloudflareSpeedTest/"&gt;&lt;img src="https://img.shields.io/github/go-mod/go-version/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=Go&amp;amp;color=00ADD8&amp;amp;logo=go" alt="Go Version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=Release&amp;amp;color=00ADD8&amp;amp;logo=github" alt="Release Version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/"&gt;&lt;img src="https://img.shields.io/github/license/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=License&amp;amp;color=00ADD8&amp;amp;logo=github" alt="GitHub license" /&gt;&lt;/a&gt; &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/"&gt;&lt;img src="https://img.shields.io/github/stars/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=Star&amp;amp;color=00ADD8&amp;amp;logo=github" alt="GitHub Star" /&gt;&lt;/a&gt; &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/"&gt;&lt;img src="https://img.shields.io/github/forks/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=Fork&amp;amp;color=00ADD8&amp;amp;logo=github" alt="GitHub Fork" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;国外很多网站都在使用 Cloudflare CDN，但分配给中国内地访客的 IP 并不友好（延迟高、丢包多、速度慢）。&lt;br /&gt; 虽然 Cloudflare 公开了所有 &lt;a href="https://www.cloudflare.com/zh-cn/ips/"&gt;IP 段&lt;/a&gt; ，但想要在这么多 IP 中找到适合自己的，怕是要累死，于是就有了这个软件。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;「自选优选 IP」测试 Cloudflare CDN 延迟和速度，获取最快 IP (IPv4+IPv6)&lt;/strong&gt;！好用的话&lt;strong&gt;点个&lt;code&gt;⭐&lt;/code&gt;鼓励一下叭~&lt;/strong&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;分享我其他开源项目：&lt;a href="https://github.com/XIU2/TrackersListCollection"&gt;&lt;strong&gt;TrackersList.com&lt;/strong&gt; - 全网热门 BT Tracker 列表！有效提高 BT 下载速度~&lt;/a&gt; &lt;img src="https://img.shields.io/github/stars/XIU2/TrackersListCollection.svg?style=flat-square&amp;amp;label=Star&amp;amp;color=4285dd&amp;amp;logo=github" height="16px" /&gt;&lt;/em&gt;&lt;br /&gt; &lt;em&gt;&lt;a href="https://github.com/XIU2/UserScript"&gt;&lt;strong&gt;UserScript&lt;/strong&gt; - 🐵 Github 高速下载、知乎增强、自动无缝翻页、护眼模式 等十几个&lt;strong&gt;油猴脚本&lt;/strong&gt;~&lt;/a&gt; &lt;img src="https://img.shields.io/github/stars/XIU2/UserScript.svg?style=flat-square&amp;amp;label=Star&amp;amp;color=4285dd&amp;amp;logo=github" height="16px" /&gt;&lt;/em&gt;&lt;br /&gt; &lt;em&gt;&lt;a href="https://github.com/XIU2/SNIProxy"&gt;&lt;strong&gt;SNIProxy&lt;/strong&gt; - 🧷 自用的简单 SNI Proxy（支持全平台、全系统、前置代理、配置简单等~&lt;/a&gt; &lt;img src="https://img.shields.io/github/stars/XIU2/SNIProxy.svg?style=flat-square&amp;amp;label=Star&amp;amp;color=4285dd&amp;amp;logo=github" height="16px" /&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;当然了，本项目也支持对 &lt;strong&gt;&lt;code&gt;其他 CDN / 多个解析 IP 的网站&lt;/code&gt;&lt;/strong&gt; 延迟测速，但相对应的下载测速地址需自行寻找。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Cloudflare CDN 已&lt;strong&gt;明文禁止代理&lt;/strong&gt;方式使用，对于&lt;strong&gt;代理套 CDN&lt;/strong&gt; 的自行承担风险，请勿过度依赖 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/382"&gt;#382&lt;/a&gt; &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/383"&gt;#383&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;# 快速使用&lt;/h2&gt; 
&lt;h3&gt;下载运行&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;下载编译好的可执行文件（ &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/releases"&gt;Github Releases&lt;/a&gt; / &lt;a href="https://xiu.lanzoub.com/b0742hkxe"&gt;蓝奏云&lt;/a&gt; ）并解压。&lt;/li&gt; 
 &lt;li&gt;双击运行 &lt;code&gt;cfst.exe&lt;/code&gt; 文件（Windows 系统），等待测速完成...&lt;/li&gt; 
&lt;/ol&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击查看 Windows 系统下其他安装方式」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;如果你有 scoop(Windows 下的命令行安装程序)，则可以这样安装:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;# 添加最多人使用的中文软件包仓库：dorado
scoop bucket add dorado https://github.com/chawyehsu/dorado
# 安装cloudflare-speedtest
scoop install dorado/cloudflare-speedtest
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击查看 Linux 系统下的使用示例 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;以下命令仅为示例，版本号和文件名请前往 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/releases"&gt;&lt;strong&gt;Releases&lt;/strong&gt;&lt;/a&gt; 查看。&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;# 如果是第一次使用，则建议创建新文件夹（后续更新时，跳过该步骤）
mkdir cfst

# 进入文件夹（后续更新，只需要从这里重复下面的下载、解压命令即可）
cd cfst

# 下载 CFST 压缩包（自行根据需求替换 URL 中 [版本号] 和 [文件名]）
wget -N https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.3.4/cfst_linux_amd64.tar.gz
# 如果你是在国内网络环境中下载，那么请使用下面这几个镜像加速之一：
# wget -N https://ghfast.top/https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.3.4/cfst_linux_arm64.tar.gz
# wget -N https://wget.la/https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.3.4/cfst_linux_arm64.tar.gz
# wget -N https://ghproxy.net/https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.3.4/cfst_linux_arm64.tar.gz
# wget -N https://gh-proxy.com/https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.3.4/cfst_linux_arm64.tar.gz
# wget -N https://hk.gh-proxy.com/https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.3.4/cfst_linux_arm64.tar.gz
# 如果下载失败的话，尝试删除 -N 参数（如果是为了更新，则记得提前删除旧压缩包 rm cfst_linux_amd64.tar.gz ）

# 解压（不需要删除旧文件，会直接覆盖，自行根据需求替换 文件名）
tar -zxf cfst_linux_amd64.tar.gz

# 赋予执行权限
chmod +x cfst

# 运行（不带参数）
./cfst

# 运行（带参数示例）
./cfst -tl 200 -dn 20
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;如果平&lt;strong&gt;均延迟非常低&lt;/strong&gt;（如 0.xx），则说明 CFST &lt;strong&gt;测速时走了代理&lt;/strong&gt;，请先关闭代理软件后再测速。&lt;br /&gt; 如果在&lt;strong&gt;路由器&lt;/strong&gt;上运行，建议先关闭路由器内的代理（或将其排除），否则测速结果可能会&lt;strong&gt;不准确/无法使用&lt;/strong&gt;。&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;在&lt;strong&gt;手机&lt;/strong&gt;上独立运行 CFST 测速的简单教程：&lt;strong&gt;&lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/61"&gt;Android&lt;/a&gt;、&lt;a href="https://github.com/xianshenglu/cloudflare-ip-tester-app"&gt;Android APP&lt;/a&gt;、&lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/321"&gt;IOS&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] 注意！本软件仅适用于网站，&lt;strong&gt;不支持给使用 UDP 协议的 Cloudflare WARP 优选 IP&lt;/strong&gt;，具体见：&lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/392"&gt;#392&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;结果示例&lt;/h3&gt; 
&lt;p&gt;测速完毕后，默认会显示&lt;strong&gt;最快的 10 个 IP&lt;/strong&gt;，示例（仅为输出内容示例）：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;IP 地址           已发送  已接收  丢包率  平均延迟  下载速度(MB/s)  地区码
104.27.200.69     4      4       0.00   146.23    28.64          LAX
172.67.60.78      4      4       0.00   139.82    15.02          SEA
104.25.140.153    4      4       0.00   146.49    14.90          SJC
104.27.192.65     4      4       0.00   140.28    14.07          LAX
172.67.62.214     4      4       0.00   139.29    12.71          LAX
104.27.207.5      4      4       0.00   145.92    11.95          LAX
172.67.54.193     4      4       0.00   146.71    11.55          LAX
104.22.66.8       4      4       0.00   147.42    11.11          SEA
104.27.197.63     4      4       0.00   131.29    10.26          FRA
172.67.58.91      4      4       0.00   140.19    9.14           SJC
...

# 如果平均延迟非常低（如 0.xx），则说明 CFST 测速时走了代理，请先关闭代理软件后再测速。
# 如果在路由器上运行，请先关闭路由器内的代理（或将其排除），否则测速结果可能会不准确/无法使用。

# 因为每次测速都是在每个 IP 段中随机 IP，所以每次的测速结果都不可能相同，这是正常的！

# 注意！我发现电脑开机后第一次测速延迟会明显偏高（手动 TCPing 也一样），后续测速都正常
# 因此建议大家开机后第一次正式测速前，先随便测几个 IP（无需等待延迟测速完成，只要进度条动了就可以直接关了）

# 软件在 默认参数 下的整个流程大概步骤：
# 1. 延迟测速（默认 TCPing 模式，HTTPing 模式需要手动加上参数）
# 2. 延迟排序（延迟 从低到高 排序并按条件过滤，不同丢包率会分开排序，因此可能会有一些延迟低但丢包的 IP 排到后面）
# 3. 下载测速（从延迟最低的 IP 开始依次下载测速，默认测够 10 个就会停止）
# 4. 速度排序（速度从高到低排序）
# 5. 输出结果（通过参数控制是否输出到命令行(-p 0)或输出到文件(-o "")）

# 注意：输出的结果文件 result.csv 通过微软 Excel 表格打开会中文乱码，这是正常的，其他表格软件/记事本都显示正常
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;测速结果第一行就是&lt;strong&gt;既下载速度最快、又平均延迟最低的最快 IP&lt;/strong&gt;！&lt;/p&gt; 
&lt;p&gt;完整结果保存在当前目录下的 &lt;code&gt;result.csv&lt;/code&gt; 文件中，用&lt;strong&gt;记事本/表格软件&lt;/strong&gt;打开，格式如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;IP 地址,已发送,已接收,丢包率,平均延迟,下载速度(MB/s),地区码
104.27.200.69,4,4,0.00,146.23,28.64,LAX
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;em&gt;如果你发现&lt;strong&gt;下载速度为 0.00&lt;/strong&gt;，那么可以用&lt;strong&gt;调试模式 &lt;code&gt;-debug&lt;/code&gt;&lt;/strong&gt; 排查一下，详见：&lt;a href="https://github.com/XIU2/CloudflareSpeedTest#-%E4%B8%8B%E8%BD%BD%E6%B5%8B%E9%80%9F%E9%83%BD%E6%98%AF-000-"&gt;&lt;strong&gt;# 下载测速都是 0.00 ？&lt;/strong&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;大家可以按自己需求，对完整结果&lt;strong&gt;进一步筛选处理&lt;/strong&gt;，或者去看一看进阶使用&lt;strong&gt;指定过滤条件&lt;/strong&gt;！&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;# 进阶使用&lt;/h2&gt; 
&lt;p&gt;直接运行使用的是默认参数，如果想要测速结果更全面、更符合自己的要求，可以自定义参数。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-Dart"&gt;C:\&amp;gt;cfst.exe -h

CloudflareSpeedTest vX.X.X
测试各个 CDN 或网站所有 IP 的延迟和速度，获取最快 IP (IPv4+IPv6)！
https://github.com/XIU2/CloudflareSpeedTest

参数：
    -n 200
        延迟测速线程；越多延迟测速越快，性能弱的设备 (如路由器) 请勿太高；(默认 200 最多 1000)
    -t 4
        延迟测速次数；单个 IP 延迟测速的次数；(默认 4 次)
    -dn 10
        下载测速数量；延迟测速并排序后，从最低延迟起下载测速的数量；(默认 10 个)
    -dt 10
        下载测速时间；单个 IP 下载测速最长时间，不能太短；(默认 10 秒)
    -tp 443
        指定测速端口；延迟测速/下载测速时使用的端口；(默认 443 端口)
    -url https://cf.xiu2.xyz/url
        指定测速地址；延迟测速(HTTPing)/下载测速时使用的地址，默认地址不保证可用性，建议自建；
        当下载测速时，软件会从 HTTP 响应头中获取该 IP 当前地区码（支持 Cloudflare、AWS CloudFront、Fastly、Gcore、CDN77、Bunny 等 CDN）并显示出来。

    -httping
        切换测速模式；延迟测速模式改为 HTTP 协议，所用测试地址为 [-url] 参数；(默认 TCPing)
        当使用 HTTP 测速模式时，软件会从 HTTP 响应头中获取该 IP 当前地区码（支持 Cloudflare、AWS CloudFront、Fastly、Gcore、CDN77、Bunny 等 CDN）并显示出来。
        注意：HTTPing 本质上也算一种 网络扫描 行为，因此如果你在服务器上面运行，需要降低并发(-n)，否则可能会被一些严格的商家暂停服务。
        如果你遇到 HTTPing 首次测速可用 IP 数量正常，后续测速越来越少甚至直接为 0，但停一段时间后又恢复了的情况，那么也可能是被 运营商、Cloudflare CDN 认为你在网络扫描而 触发临时限制机制，因此才会过一会儿就恢复了，建议降低并发(-n)减少这种情况的发生。
    -httping-code 200
        有效状态代码；HTTPing 延迟测速时网页返回的有效 HTTP 状态码，仅限一个；(默认 200 301 302)
    -cfcolo HKG,KHH,NRT,LAX,SEA,SJC,FRA,MAD
        匹配指定地区；IATA 机场地区码或国家/城市码，英文逗号分隔，大小写均可，仅 HTTPing 模式可用；(默认 所有地区)
        支持 Cloudflare、AWS CloudFront、Fastly、Gcore、CDN77、Bunny 等 CDN
        其中 Cloudflare、AWS CloudFront、Fastly 使用的是 IATA 三字机场地区码，如：HKG,LAX
        其中 CDN77、Bunny 使用的是 二字国家/区域码，如：US,CN
        其中 Gcore 使用的是 二字城市码，如：FR,AM
        因此大家使用 -cfcolo 指定地区码时要根据不同的 CDN 来指定不同类型的地区码。

    -tl 200
        平均延迟上限；只输出低于指定平均延迟的 IP，各上下限条件可搭配使用；(默认 9999 ms)
    -tll 40
        平均延迟下限；只输出高于指定平均延迟的 IP；(默认 0 ms)
    -tlr 0.2
        丢包几率上限；只输出低于/等于指定丢包率的 IP，范围 0.00~1.00，0 过滤掉任何丢包的 IP；(默认 1.00)
    -sl 5
        下载速度下限；只输出高于指定下载速度的 IP，凑够指定数量 [-dn] 才会停止测速；(默认 0.00 MB/s)

    -p 10
        显示结果数量；测速后直接显示指定数量的结果，为 0 时不显示结果直接退出；(默认 10 个)
    -f ip.txt
        IP段数据文件；如路径含有空格请加上引号；支持其他 CDN IP段；(默认 ip.txt)
    -ip 1.1.1.1,2.2.2.2/24,2606:4700::/32
        指定IP段数据；直接通过参数指定要测速的 IP 段数据，英文逗号分隔；(默认 空)
    -o result.csv
        写入结果文件；如路径含有空格请加上引号；值为空时不写入文件 [-o ""]；(默认 result.csv)

    -dd
        禁用下载测速；禁用后测速结果会按延迟排序 (默认按下载速度排序)；(默认 启用)
    -allip
        测速全部的IP；对 IP 段中的每个 IP (仅支持 IPv4) 进行测速；(默认 每个 /24 段随机测速一个 IP)

    -debug
        调试输出模式；会在一些非预期情况下输出更多日志以便判断原因；(默认 关闭)
        目前该功能仅针对 HTTPing 延迟测速过程 及 下载测速过程，当过程中因为各种原因导致当前 IP 测速中断都会输出错误原因
        例如：HTTPing 延迟测速过程中，因为 HTTP 状态码不符合或测速地址有问题或超时等原因而终止测速
        例如：下载测速过程中，因为下载测速地址有问题（被阻断、403状态码、超时）等原因而终止测速（导致显示 0.00）

    -v
        打印程序版本 + 检查版本更新
    -h
        打印帮助说明
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;界面解释&lt;/h3&gt; 
&lt;p&gt;为了避免大家对测速过程中的&lt;strong&gt;输出内容产生误解（可用、队列等数字，下载测速一半就"中断"？下载测速"卡住"不动？）&lt;/strong&gt;，我特意解释下。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;该示例把常用参数都给加上了，即为：&lt;code&gt;-tll 40 -tl 150 -sl 1 -dn 5&lt;/code&gt;，最后输出结果如下：&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;# XIU2/CloudflareSpeedTest vX.X.X

开始延迟测速（模式：TCP, 端口：443, 范围：40 ~ 150 ms, 丢包：1.00)
321 / 321 [-----------------------------------------------------------] 可用: 30
开始下载测速（下限：1.00 MB/s, 数量：5, 队列：10）
3 / 5 [-----------------------------------------↗--------------------]
IP 地址           已发送  已接收  丢包率  平均延迟  下载速度(MB/s)  地区码
XXX.XXX.XXX.XXX   4      4       0.00   83.32     3.66           LAX
XXX.XXX.XXX.XXX   4      4       0.00   107.81    2.49           LAX
XXX.XXX.XXX.XXX   4      3       0.25   149.59    1.04           N/A

完整测速结果已写入 result.csv 文件，可使用记事本/表格软件查看。
按下 回车键 或 Ctrl+C 退出。
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr /&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;刚接触 CFST 的人，可能会迷惑&lt;strong&gt;明明延迟测速可用 IP 有 30 个，怎么最后只剩下 3 个了呢？&lt;/strong&gt;&lt;br /&gt; 下载测速里的队列又是什么意思？难道我下载测速还要排队？&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;CFST 会先延迟测速，在这过程中进度条右侧会实时显示可用 IP 数量（&lt;code&gt;可用: 30&lt;/code&gt;），但注意该可用数量指的是&lt;strong&gt;测试通过没有超时的 IP 数量&lt;/strong&gt;，和延迟上下限、丢包条件无关。当延迟测速完成后，因为还指定了&lt;strong&gt;延迟上下限、丢包&lt;/strong&gt;的条件，所以按照条件过滤后只剩下 &lt;code&gt;10&lt;/code&gt; 个了（也就是等待下载测速的 &lt;code&gt;队列：10&lt;/code&gt;）。&lt;/p&gt; 
 &lt;p&gt;即以上示例中，&lt;code&gt;321&lt;/code&gt; 个 IP 延迟测速完成后，只有 &lt;code&gt;30&lt;/code&gt; 个 IP 测试通过没有超时，然后根据延迟上下限范围：&lt;code&gt;40 ~ 150 ms&lt;/code&gt; 及丢包上限条件过滤后，只剩下 &lt;code&gt;10&lt;/code&gt; 个满足要求的 IP 了。如果你 &lt;code&gt;-dd&lt;/code&gt; 禁用了下载测速，那么就会直接输出这 &lt;code&gt;10&lt;/code&gt; 个 IP 了。当然该示例并未禁用，因此接下来软件会继续对这 &lt;code&gt;10&lt;/code&gt; 个 IP 进行下载测速（&lt;code&gt;队列：10&lt;/code&gt;）。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;因为下载测速是单线程一个个 IP 挨着排队测速的，因此等待下载测速的 IP 数量才会叫做 &lt;code&gt;队列&lt;/code&gt;。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;hr /&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;你可能注意到了，&lt;strong&gt;明明指定了要找到 5 个满足下载速度条件的 IP，怎么才 3 个就 “中断” 了呢？&lt;/strong&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;下载测速进度条中的 &lt;code&gt;3 / 5&lt;/code&gt;，前者指的是找到了 &lt;code&gt;3&lt;/code&gt; 个满足下载速度下限条件的 IP（即下载速度高于 &lt;code&gt;1 MB/s&lt;/code&gt; ），后者 &lt;code&gt;5&lt;/code&gt; 指的是你要求找到 &lt;code&gt;5&lt;/code&gt; 个满足下载速度下限条件的 IP（&lt;code&gt;-dn 5&lt;/code&gt;）。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;另外，提醒一下，如果你指定的 &lt;code&gt;-dn&lt;/code&gt; 大于下载测速队列，比如你延迟测速后只剩下 &lt;code&gt;4&lt;/code&gt; 个 IP 了，那么下载测速进度条中后面的数字就会和下载测速队列一样都是 &lt;code&gt;4&lt;/code&gt; 个，而非你 &lt;code&gt;-dn&lt;/code&gt; 指定的 &lt;code&gt;5&lt;/code&gt; 个了。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;软件在测速完这 &lt;code&gt;10&lt;/code&gt; 个 IP 后，只找到了 &lt;code&gt;3&lt;/code&gt; 个下载速度高于 &lt;code&gt;1 MB/s&lt;/code&gt; 的 IP，剩下的 &lt;code&gt;7&lt;/code&gt; 个 IP 都是 “不及格” 的。&lt;/p&gt; 
 &lt;p&gt;因此，这不是 &lt;code&gt;“每次测速都不到 5 就中断了”&lt;/code&gt;，而是所有 IP 都下载测速完了，但却只找到了 &lt;code&gt;3&lt;/code&gt; 个满足条件的。&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;还有一种情况，那就是当可用 IP 很多时（几百几千），你还设置了下载速度条件，那么可能就会遇到：&lt;strong&gt;怎么下载测速进度条老是卡在 &lt;code&gt;X / 5&lt;/code&gt; 了呢？&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;这其实并不是卡住了，而是只有当找到一个满足条件的 IP 时，进度条才会 +1，因此如果一直找不到，那么 CFST 就会一直下载测速下去，因此在表现为进度条卡住不动，但这也是在提醒你：你设置的下载速度条件对你来说已经高于实际了，你需要适当调低预期。&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;如果不想遇到这种全部测速一遍都没几个满足条件的情况，那么就要&lt;strong&gt;调低下载速度上限参数 &lt;code&gt;-sl&lt;/code&gt;&lt;/strong&gt;，或者移除。&lt;/p&gt; 
 &lt;p&gt;因为只要指定了 &lt;code&gt;-sl&lt;/code&gt; 参数，那么只要没有凑够 &lt;code&gt;-dn&lt;/code&gt; 的数量（默认 10 个），就会一直测速下去，直到凑够或全部测速完。移除 &lt;code&gt;-sl&lt;/code&gt; 并添加 &lt;code&gt;-dn 20&lt;/code&gt; 参数，这样就是只测速延迟最低的前 20 个 IP，测速完就停止，节省时间。&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;另外，如果全部队列 IP 都测速完了，但一个满足下载速度条件的 IP 都没有，你可能需要调低预期的下载测速下限条件，但你需要知道当前的大概测速速度都在什么范围，那么你就可以加上 &lt;code&gt;-debug&lt;/code&gt; 参数开启调试模式，这样再遇到这种情况时，就会&lt;strong&gt;忽略条件返回所有测速结果&lt;/strong&gt;，你就能看到这些 IP 的下载速度都有多少，心里也就有数了，然后&lt;strong&gt;适当调低 &lt;code&gt;-sl&lt;/code&gt; 再试试&lt;/strong&gt;。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;注意，如果你&lt;strong&gt;没有指定&lt;/strong&gt;下载测速下限 &lt;code&gt;-sl&lt;/code&gt; 条件，那么无论什么情况下 CFST 都会&lt;strong&gt;输出所有测速结果&lt;/strong&gt;。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;同样，延迟测速方面，&lt;code&gt;可用: 30&lt;/code&gt;、&lt;code&gt;队列：10&lt;/code&gt; 这两个数值也可以让你清楚，你设置的延迟条件对你来说是否过于苛刻。如果可用 IP 一大堆，但条件过滤后只剩下 2、3 个，那不用说就知道需要&lt;strong&gt;调低预期的延迟/丢包条件&lt;/strong&gt;了。&lt;/p&gt; 
 &lt;p&gt;这两个机制，一个是告诉你&lt;strong&gt;延迟丢包条件&lt;/strong&gt;是否合适的，一个是告诉你&lt;strong&gt;下载速度条件&lt;/strong&gt;是否合适的。&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h3&gt;使用示例&lt;/h3&gt; 
&lt;p&gt;Windows 要指定参数需要在 CMD 中运行，或者把参数添加到快捷方式目标中。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;各参数均有&lt;strong&gt;默认值&lt;/strong&gt;，当使用默认值时参数可以省略（&lt;strong&gt;按需选择&lt;/strong&gt;），参数&lt;strong&gt;不分前后顺序&lt;/strong&gt;。&lt;/li&gt; 
  &lt;li&gt;Windows &lt;strong&gt;PowerShell&lt;/strong&gt; 只需把下面命令中的 &lt;code&gt;cfst.exe&lt;/code&gt; 改为 &lt;code&gt;.\cfst.exe&lt;/code&gt; 即可。&lt;/li&gt; 
  &lt;li&gt;Linux / macOS 系统只需要把下面命令中的 &lt;code&gt;cfst.exe&lt;/code&gt; 改为 &lt;code&gt;./cfst&lt;/code&gt; 即可。&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# CMD 带参数运行&lt;/h4&gt; 
&lt;p&gt;对命令行程序不熟悉的人，可能不知道该如何带参数运行，我就简单说一下。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;很多人打开 CMD 直接就以&lt;strong&gt;绝对路径&lt;/strong&gt;运行 CFST 会报错，这是因为默认的 &lt;code&gt;-f ip.txt&lt;/code&gt; 参数是相对路径，需要指定绝对路径的 ip.txt 才行，但这样毕竟太麻烦了，因此还是建议进入 CFST 程序目录下，以&lt;strong&gt;相对路径&lt;/strong&gt;方式运行：&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;方式 一&lt;/strong&gt;：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;打开 CFST 程序所在目录&lt;/li&gt; 
  &lt;li&gt;空白处按下 &lt;kbd&gt;Shift + 鼠标右键&lt;/kbd&gt; 显示右键菜单&lt;/li&gt; 
  &lt;li&gt;选择 &lt;strong&gt;[在此处打开命令窗口]&lt;/strong&gt; 来打开 CMD 窗口，此时默认就位于当前目录下&lt;/li&gt; 
  &lt;li&gt;输入带参数的命令，如：&lt;code&gt;cfst.exe -tl 200 -dn 20&lt;/code&gt; 即可运行&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;&lt;strong&gt;方式 二&lt;/strong&gt;：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;打开 CFST 程序所在目录&lt;/li&gt; 
  &lt;li&gt;直接在文件夹地址栏中全选(或清空)并输入 &lt;code&gt;cmd&lt;/code&gt; 回车就能打开 CMD 窗口，此时默认就位于当前目录下&lt;/li&gt; 
  &lt;li&gt;输入带参数的命令，如：&lt;code&gt;cfst.exe -tl 200 -dn 20&lt;/code&gt; 即可运行&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;当然你也可以随便打开一个 CMD 窗口，然后输入如 &lt;code&gt;cd /d "D:\Program Files\cfst"&lt;/code&gt; 来进入程序目录&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：如果用的是 &lt;strong&gt;PowerShell&lt;/strong&gt; 只需把命令中的 &lt;code&gt;cfst.exe&lt;/code&gt; 改为 &lt;code&gt;.\cfst.exe&lt;/code&gt; 即可。&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# Windows 快捷方式带参数运行&lt;/h4&gt; 
&lt;p&gt;如果不经常修改运行参数（比如平时都是直接双击运行）的人，建议使用快捷方式，更方便点。&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;右键 &lt;code&gt;cfst.exe&lt;/code&gt; 文件 - &lt;strong&gt;[创建快捷方式]&lt;/strong&gt;，然后右键该快捷方式 - &lt;strong&gt;[属性]&lt;/strong&gt;，修改其&lt;strong&gt;目标&lt;/strong&gt;：&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 如果要不输出结果文件，那么请加上 -o " "，引号里的是空格（没有空格会导致该参数被省略）。
D:\ABC\cfst\cfst.exe -tl 200 -dn 20 -o " "

# 如果文件路径包含引号，则需要把启动参数放在引号外面，记得引号和 - 之间有空格。
"D:\Program Files\cfst\cfst.exe" -tl 200 -dn 20 -o " "

# 注意！快捷方式 - 起始位置 不能是空的，否则就会因为绝对路径而找不到 ip.txt 文件
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# IPv4/IPv6&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 指定自带的 IPv4 数据文件可测速这些 IPv4 地址（-f 默认值就是 ip.txt，所以该参数可省略）
cfst.exe -f ip.txt

# 指定自带的 IPv6 数据文件可测速这些 IPv6 地址
# 另外，v2.1.0 版本后支持 IPv4+IPv6 混合测速并移除了 -ipv6 参数，因此一个文件内可以同时包含 IPv4+IPv6 地址
cfst.exe -f ipv6.txt

# 也可以直接通过参数指定要测速的 IP
cfst.exe -ip 1.1.1.1,2606:4700::/32
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;测速 IPv6 时，可能会注意到每次测速数量都不一样，了解原因： &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/issues/120"&gt;#120&lt;/a&gt;&lt;br /&gt; 因为 IPv6 太多（以亿为单位），且绝大部分 IP 段压根未启用，所以我只扫了一部分可用的 IPv6 段写到 &lt;code&gt;ipv6.txt&lt;/code&gt; 文件中，有兴趣的可以自行扫描增删，ASN 数据源来自：&lt;a href="https://bgp.he.net/AS13335#_prefixes6"&gt;bgp.he.net&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# HTTPing&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;目前有两种延迟测速模式，分别为 &lt;strong&gt;TCP 协议、HTTP 协议&lt;/strong&gt;。&lt;br /&gt; TCP 协议耗时更短、消耗资源更少，超时时间为 1 秒，该协议为默认模式。&lt;br /&gt; HTTP 协议适用于快速测试某域名指向某 IP 时是否可以访问，超时时间为 2 秒。&lt;br /&gt; 同一个 IP，各协议去 Ping 得到的延迟一般为：&lt;strong&gt;ICMP &amp;lt; TCP &amp;lt; HTTP&lt;/strong&gt;，越靠右对丢包等网络波动越敏感。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;注意：HTTPing 本质上也算一种&lt;strong&gt;网络扫描&lt;/strong&gt;行为，因此如果你在服务器上面运行，需要&lt;strong&gt;降低并发&lt;/strong&gt;(&lt;code&gt;-n&lt;/code&gt;)，否则可能会被一些严格的商家暂停服务。如果你遇到 HTTPing 首次测速可用 IP 数量正常，后续测速越来越少甚至直接为 0，但停一段时间后又恢复了的情况，那么也可能是被 运营商、Cloudflare CDN 认为你在网络扫描而&lt;strong&gt;触发临时限制机制&lt;/strong&gt;，因此才会过一会儿就恢复了，建议&lt;strong&gt;降低并发&lt;/strong&gt;(&lt;code&gt;-n&lt;/code&gt;)减少这种情况的发生。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;另外，本软件 HTTPing 仅获取&lt;strong&gt;响应头(response headers)&lt;/strong&gt;，并不获取正文内容（即 URL 文件大小不影响 HTTPing 测试，但如果你还要下载测速的话，那么还是需要一个大文件的），类似于 curl -i 功能。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;另外，HTTPing 过程中，软件会从 HTTP 响应头中获取该 IP 当前地区码（支持 Cloudflare、AWS CloudFront、Fastly、Gcore、CDN77、Bunny 等 CDN）并显示出来，而 TCPing 过程中无法这样做（但 下载测速 时也会这样做来获取地区码，毕竟下载测速也是个 HTTP 链接）&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 只需加上 -httping 参数即可切换到 HTTP 协议延迟测速模式
cfst.exe -httping

# 软件会根据访问时网页返回的有效 HTTP 状态码来判断可用性（当然超时也算），默认对返回 200 301 302 这三个 HTTP 状态码的视为有效，可以手动指定认为有效的 HTTP 状态码，但只能指定一个（你需要提前确定测试地址正常情况下会返回哪个状态码）
cfst.exe -httping -httping-code 200

# 通过 -url 参数来指定 HTTPing 测试地址（可以是任意网页 URL，不局限于具体文件地址）
cfst.exe -httping -url https://cf.xiu2.xyz/url
# 如果你要 HTTPing 测试其他网站/CDN，那么指定一个该网站/使用该 CDN 的地址（因为软件默认地址是 Cloudflare 的，只能用于测试 Cloudflare 的 IP）

# 注意：如果测速地址为 HTTP 协议，记得加上 -tp 80（这个参数会影响 延迟测速/下载测速 时使用的端口）
# 同理，如果要测速 80 端口，那么也需要加上 -url 参数来指定一个 http:// 协议的地址才行（且该地址不会强制重定向至 HTTPS），如果是非 80 443 端口，那么需要确定该下载测速地址是否支持通过该端口访问。
cfst.exe -httping -tp 80 -url http://cdn.cloudflare.steamstatic.com/steam/apps/5952/movie_max.webm
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 匹配指定地区&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;Cloudflare CDN 的节点 IP 是 Anycast IP，即每个 IP 对应的服务器节点及地区不是固定的，而是动态变化的，&lt;strong&gt;不同地区、不同运营商、不同时间段&lt;/strong&gt;访问&lt;strong&gt;同一个 IP&lt;/strong&gt; 分配到的服务器节点地区和路线也都是不一样的（比如同一个 IP，美国人访问就是分配到就近的美国节点服务器，日本人访问则就又变成了就近的日本节点服务器了，国内内地就比较特殊了，只能给你分配到其他国家，当然不同的 IP 段路由变化/分配逻辑也是不同的，有的 IP 段会较为固定）。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;！虽然 Cloudflare CDN 有很多亚洲节点，但&lt;strong&gt;不代表你就能用上&lt;/strong&gt;，新加坡人测速可能随便一抓一大把的新加坡节点，但你全部扫一遍可能都遇不到一个，因为这是由 CDN 控制的。Anycast IP 的路由是经常变的，同一个 IP 今天可能是美国，明天你再访问可能就又分配到欧洲节点了（当然这只是个例子，一般没有那么频繁，这也和很多因素有关，比如线路拥塞程度，成本变动等），因此&lt;strong&gt;不要对该功能有过高期待&lt;/strong&gt;~&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;或者你随便找个 Cloudflare CDN 的 IP（比如官网域名的解析 IP &lt;code&gt;104.16.123.96&lt;/code&gt;），然后去那些有全球节点的&lt;a href="https://ping.sx/ping?t=104.16.123.96"&gt;在线 Ping 测试&lt;/a&gt;网站，你就会发现这个 IP 在全球大部分地区的延迟都是个位数（而且很多都是 0.X ms），就算一些地方延迟高一些但也基本都控制在 几十ms，只有在国内才会发现突然变成了 上百ms 了。&lt;/p&gt; 
 &lt;p&gt;这就是 Anycast 技术，也就只有国内大陆这种特殊的网络情况，才需要对 Anycast 的 CDN IP 进行优选。&lt;/p&gt; 
 &lt;p&gt;因此，对于这种 Anycast IP 的实际服务器位置，就不能靠那些在线 IP 地址位置查询网站来判断了。&lt;/p&gt; 
 &lt;p&gt;除了通过 &lt;strong&gt;HTTP 响应头&lt;/strong&gt;获取地区码外（该功能的实现方式），还可以手动访问 &lt;code&gt;http://CloudflareIP/cdn-cgi/trace&lt;/code&gt; 来获知 CDN 分配给你的实际节点地区码。&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;该功能支持 &lt;strong&gt;Cloudflare、AWS CloudFront、Fastly、Gcore、CDN77、Bunny&lt;/strong&gt; 等 CDN。&lt;br /&gt; 但注意，不是所有 CDN 都支持 Anycast 技术的，很多 CDN 会限制一个网站能使用的 IP 范围。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;其中 &lt;strong&gt;Cloudflare、AWS CloudFront、Fastly&lt;/strong&gt; 都使用的是 &lt;strong&gt;&lt;code&gt;IATA 三字机场地区码&lt;/code&gt;&lt;/strong&gt;，如：HKG,LAX&lt;br /&gt; 而 &lt;strong&gt;CDN77、Bunny&lt;/strong&gt; 使用的是 &lt;strong&gt;&lt;code&gt;二字国家/区域码&lt;/code&gt;&lt;/strong&gt;，如：US,CN&lt;br /&gt; &lt;strong&gt;Gcore&lt;/strong&gt; 则使用的是 &lt;strong&gt;&lt;code&gt;二字城市码&lt;/code&gt;&lt;/strong&gt;，如：FR,AM&lt;br /&gt; 因此大家使用 &lt;code&gt;-cfcolo&lt;/code&gt; 指定地区码时要根据不同的 CDN 来指定不同类型的地区码。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你要用于筛选 AWS CloudFront CDN 地区，那么要通过 &lt;code&gt;-url&lt;/code&gt; 参数指定一个使用 AWS CloudFront CDN 的下载测速地址（因为软件默认下载测速地址是 Cloudflare CDN 的），另外有时候 HTTPing 模式测速一些 AWS CloudFront 地址会返回 403 错误，这种情况下需要加上 &lt;code&gt;-httping-code 403&lt;/code&gt; 才能正确获取地区码。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 指定地区名后，延迟测速后得到的结果就都是指定地区的 IP 了（如果没有指定 -dd 的话则会继续进行下载测速）
# 如果延迟测速后结果为 0，则说明没有找到任何一个（未超时可用的）指定地区的 IP。
# 节点地区名为当地 IATA 机场地区码或国家/城市码，指定多个时用英文逗号分隔，v2.2.3 版本后支持小写

cfst.exe -httping -cfcolo HKG,KHH,NRT,LAX,SEA,SJC,FRA,MAD

# 注意，该参数只有在 HTTPing 延迟测速模式下才可用（因为软件是通过 HTTP 链接中的响应头来获得该 IP 的实际地区码）

# 另外，HTTPing 过程中，软件会从 HTTP 响应头中获取该 IP 当前地区码（支持 Cloudflare、AWS CloudFront、Fastly、Gcore、CDN77、Bunny 等 CDN）并显示出来，而 TCPing 过程中无法这样做（但 下载测速 时也会这样做来获取地区码，毕竟下载测速也是个 HTTP 链接）
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;&lt;code&gt;IATA 三字机场地区码&lt;/code&gt;&lt;/strong&gt;，可见：&lt;a href="https://www.cloudflarestatus.com/"&gt;https://www.cloudflarestatus.com/&lt;/a&gt;&lt;br /&gt; &lt;strong&gt;&lt;code&gt;二字国家码&lt;/code&gt;&lt;/strong&gt;，可见：&lt;a href="https://zh.wikipedia.org/wiki/ISO_3166-1%E4%BA%8C%E4%BD%8D%E5%AD%97%E6%AF%8D%E4%BB%A3%E7%A0%81#%E6%AD%A3%E5%BC%8F%E5%88%86%E9%85%8D%E4%BB%A3%E7%A0%81"&gt;https://zh.wikipedia.org/wiki/ISO_3166-1二位字母代码#正式分配代码&lt;/a&gt;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 文件相对/绝对路径&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 指定 IPv4 数据文件，不显示结果直接退出，输出结果到文件（-p 值为 0）
cfst.exe -f 1.txt -p 0 -dd

# 指定 IPv4 数据文件，不输出结果到文件，直接显示结果（-p 值为 10 条，-o 值为空但引号不能少）
cfst.exe -f 2.txt -o "" -p 10 -dd

# 指定 IPv4 数据文件 及 输出结果到文件（相对路径，即当前目录下，如含空格请加上引号）
cfst.exe -f 3.txt -o result.txt -dd


# 指定 IPv4 数据文件 及 输出结果到文件（相对路径，即当前目录内的 abc 文件夹下，如含空格请加上引号）
# Linux（CFST 程序所在目录内的 abc 文件夹下）
./cfst -f abc/3.txt -o abc/result.txt -dd

# Windows（注意是反斜杠）
cfst.exe -f abc\3.txt -o abc\result.txt -dd


# 指定 IPv4 数据文件 及 输出结果到文件（绝对路径，即 C:\abc\ 目录下，如含空格请加上引号）
# Linux（/abc/ 目录下）
./cfst -f /abc/4.txt -o /abc/result.csv -dd

# Windows（注意是反斜杠）
cfst.exe -f C:\abc\4.txt -o C:\abc\result.csv -dd


# 如果要以【绝对路径】运行 CFST，那么 -f / -o 参数中的文件名也必须是【绝对路径】，否则会报错找不到文件！
# Linux（/abc/ 目录下）
/abc/cfst -f /abc/4.txt -o /abc/result.csv -dd

# Windows（注意是反斜杠）
C:\abc\cfst.exe -f C:\abc\4.txt -o C:\abc\result.csv -dd
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 测速其他端口&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 如果你想要测速非默认 443 的其他端口，则需要通过 -tp 参数指定（该参数会影响 延迟测速/下载测速 时使用的端口）

# 如果要延迟测速 80 端口+下载测速（如果 -dd 禁用了下载测速则不需要），那么还需要指定 http:// 协议的下载测速地址才行（且该地址不会强制重定向至 HTTPS，因为那样就变成 443 端口了）
cfst.exe -tp 80 -url http://cdn.cloudflare.steamstatic.com/steam/apps/5952/movie_max.webm

# 如果是非 80 443 的其他端口，那么需要确定你使用的下载测速地址是否支持通过该非标端口访问。
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 自定义测速地址&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 该参数适用于下载测速 及 HTTP 协议的延迟测速，对于后者该地址可以是任意网页 URL（不局限于具体文件地址）

# 地址要求：可以直接下载、文件大小超过 200MB、用的是 Cloudflare CDN
cfst.exe -url https://cf.xiu2.xyz/url

# 注意：如果测速地址为 HTTP 协议（该地址不能强制重定向至 HTTPS），记得加上 -tp 80（这个参数会影响 延迟测速/下载测速 时使用的端口），如果是非 80 443 端口，那么需要确定下载测速地址是否支持通过该端口访问。
cfst.exe -tp 80 -url http://cdn.cloudflare.steamstatic.com/steam/apps/5952/movie_max.webm
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 自定义测速条件（指定 延迟/丢包/下载速度 的目标范围）&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;注意：延迟测速进度条右边的&lt;strong&gt;可用数量&lt;/strong&gt;，仅指延迟测速过程中&lt;strong&gt;未超时的 IP 数量&lt;/strong&gt;，和延迟上下限条件无关。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;仅指定 &lt;strong&gt;[平均延迟上限]&lt;/strong&gt; 条件&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 平均延迟上限：200 ms，下载速度下限：0 MB/s
# 即找到平均延迟低于 200 ms 的 IP，然后再按延迟从低到高进行 10 次下载测速
cfst.exe -tl 200
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;如果&lt;strong&gt;没有找到一个满足延迟&lt;/strong&gt;条件的 IP，那么不会输出任何内容。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;hr /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;仅指定 &lt;strong&gt;[平均延迟上限]&lt;/strong&gt; 条件，且&lt;strong&gt;只延迟测速，不下载测速&lt;/strong&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 平均延迟上限：200 ms，下载速度下限：0 MB/s，数量：不知道多少 个
# 即只输出低于 200ms 的 IP，且不再下载测速（因为不再下载测速，所以 -dn 参数就无效了）
cfst.exe -tl 200 -dd
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ul&gt; 
  &lt;li&gt;仅指定 &lt;strong&gt;[丢包几率上限]&lt;/strong&gt; 条件&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 丢包几率上限：0.25
# 即找到丢包率低于等于 0.25 的 IP，范围 0.00~1.00，如果 -tlr 0 则代表过滤掉任何丢包的 IP
cfst.exe -tlr 0.25
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;仅指定 &lt;strong&gt;[下载速度下限]&lt;/strong&gt; 条件&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 平均延迟上限：9999 ms，下载速度下限：5 MB/s，数量：10 个（可选）
# 即需要找到 10 个平均延迟低于 9999 ms 且下载速度高于 5 MB/s 的 IP 才会停止测速
cfst.exe -sl 5 -dn 10
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;如果&lt;strong&gt;没有找到一个满足速度&lt;/strong&gt;条件的 IP，那么不会输出任何内容，你可能需要调低预期的下载测速下限条件，但你需要知道当前的大概测速速度都在什么范围，那么你就可以加上 &lt;code&gt;-debug&lt;/code&gt; 参数开启调试模式，这样再遇到这种情况时，就会&lt;strong&gt;忽略条件返回所有测速结果&lt;/strong&gt;，你就能看到这些 IP 的下载速度都有多少，心里也就有数了，然后&lt;strong&gt;适当调低 &lt;code&gt;-sl&lt;/code&gt; 再试试&lt;/strong&gt;。&lt;br /&gt; 注意，如果你&lt;strong&gt;没有指定&lt;/strong&gt;下载测速下限 &lt;code&gt;-sl&lt;/code&gt; 条件，那么无论什么情况下 CFST 都会&lt;strong&gt;输出所有测速结果&lt;/strong&gt;。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;没有指定平均延迟上限时，如果一直&lt;strong&gt;凑不够&lt;/strong&gt;满足条件的 IP 数量，就会&lt;strong&gt;一直测速&lt;/strong&gt;下去。&lt;br /&gt; 建议&lt;strong&gt;同时指定 [下载速度下限] + [平均延迟上限]&lt;/strong&gt;，这样测速到指定延迟上限还没凑够数量，就会终止测速。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;hr /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;同时指定 &lt;strong&gt;[平均延迟上限] + [下载速度下限]&lt;/strong&gt; 条件&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 平均延迟上限、下载速度下限均支持小数（如 -sl 0.5）
# 平均延迟上限：200 ms，下载速度下限：5.6 MB/s，数量：10 个（可选）
# 即需要找到 10 个平均延迟低于 200 ms 且下载速度高于 5 .6MB/s 的 IP 才会停止测速
cfst.exe -tl 200 -sl 5.6 -dn 10
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;如果&lt;strong&gt;没有找到一个满足延迟&lt;/strong&gt;条件的 IP，那么不会输出任何内容。&lt;br /&gt; 如果&lt;strong&gt;没有找到一个满足速度&lt;/strong&gt;条件的 IP，那么不会输出任何内容，但可以通过加上 &lt;code&gt;-debug&lt;/code&gt; 参数开启调试模式，这时会忽略条件输出所有 IP 测速结果（方便你下次测速时调整条件）。&lt;br /&gt; 所以建议先不指定条件测速一遍，看看平均延迟和下载速度大概在什么范围，避免指定条件&lt;strong&gt;过低/过高&lt;/strong&gt;！&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;因为 Cloudflare 公开的 IP 段是&lt;strong&gt;回源 IP+任播 IP&lt;/strong&gt;，而&lt;strong&gt;回源 IP&lt;/strong&gt;是无法使用的，所以下载测速是 0.00。&lt;br /&gt; 运行时可以加上 &lt;code&gt;-sl 0.01&lt;/code&gt;（下载速度下限），过滤掉&lt;strong&gt;回源 IP&lt;/strong&gt;（下载测速低于 0.01MB/s 的结果）。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;为了避免大家迷糊，我列出了在各种条件组合下的预期输出结果都是什么样的。&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;没有指定任何 延迟/速度条件 (即都是默认值)：&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;无论如何，都直接输出 &lt;strong&gt;所有测速结果&lt;/strong&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;指定了任何 延迟条件（&lt;code&gt;-tl&lt;/code&gt; &lt;code&gt;-tll&lt;/code&gt;，且无论是否开启调试模式 &lt;code&gt;-debug&lt;/code&gt; 都一样）：&lt;/strong&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;如果找到最少 1 个满足条件的 IP，则只输出 &lt;strong&gt;这几个满足条件的 IP&lt;/strong&gt;（如没有禁用下载测速，则会继续下载测速）&lt;/li&gt; 
  &lt;li&gt;如果没找到任何满足条件的 IP，则会输出 &lt;strong&gt;空&lt;/strong&gt;（如没有禁用下载测速，也会因为数量为 0 而跳过下载测速）&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;指定了任何 下载速度条件 (&lt;code&gt;-sl&lt;/code&gt;)：&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;且当 &lt;strong&gt;关闭 调试模式&lt;/strong&gt; 时（即没加上 &lt;code&gt;-debug&lt;/code&gt; 参数，这种情况下和延迟测速的逻辑完全一致）：&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;如果找到最少 1 个满足条件的 IP，则只输出 &lt;strong&gt;这几个满足条件的 IP&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;如果没找到任何满足条件的 IP，则输出 &lt;strong&gt;空&lt;/strong&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;且当 &lt;strong&gt;开启 调试模式&lt;/strong&gt; 时（即加上了 &lt;code&gt;-debug&lt;/code&gt; 参数，延迟测速并没有加上下面第二条里的逻辑，所以依然输出 空）：&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;如果找到最少 1 个满足条件的 IP，则只输出 &lt;strong&gt;这几个满足条件的 IP&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;如果没找到任何满足条件的 IP，则直接输出 &lt;strong&gt;所有测速结果&lt;/strong&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 单独对一个或多个 IP 测速&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;方式 一&lt;/strong&gt;： 直接通过参数指定要测速的 IP 段数据。&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 先进入 CFST 所在目录，然后运行：
# Windows 系统（在 CMD 中运行）
cfst.exe -ip 1.1.1.1,2.2.2.2/24,2606:4700::/32

# Linux 系统
./cfst -ip 1.1.1.1,2.2.2.2/24,2606:4700::/32
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;方式 二&lt;/strong&gt;： 或者把这些 IP 按如下格式写入到任意文本文件中，例如：&lt;code&gt;1.txt&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;1.1.1.1
1.1.1.200
1.0.0.1/24
2606:4700::/32
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;单个 IP 的话可以省略 &lt;code&gt;/32&lt;/code&gt; 子网掩码了（即 &lt;code&gt;1.1.1.1&lt;/code&gt;等同于 &lt;code&gt;1.1.1.1/32&lt;/code&gt;）。&lt;br /&gt; 子网掩码 &lt;code&gt;/24&lt;/code&gt; 指的是这个 IP 最后一段，即 &lt;code&gt;1.0.0.1~1.0.0.255&lt;/code&gt;。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;然后运行 CFST 时加上启动参数 &lt;code&gt;-f 1.txt&lt;/code&gt; 来指定 IP 段数据文件。&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# 先进入 CFST 所在目录，然后运行：
# Windows 系统（在 CMD 中运行）
cfst.exe -f 1.txt

# Linux 系统
./cfst -f 1.txt

# 对于 1.0.0.1/24 这样的 IP 段只会随机最后一段（1.0.0.1~255），如果要测速该 IP 段中的所有 IP，请加上 -allip 参数。
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 下载测速都是 0.00 ？&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;## 原理简单解释：&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;首先要明白，CFST 下载测速过程，本质上和你将 &lt;code&gt;IP 下载测速地址域名&lt;/code&gt; 写入 hosts 文件，然后浏览器去访问下载测速地址是一样的，只不过软件将其自动化了（类似于 &lt;code&gt;curl -I --resolve 下载测速地址域名:443:IP https://下载测速地址&lt;/code&gt;）。&lt;/p&gt; 
 &lt;p&gt;因此如果下载测速结果全都是 0.00 MB/s，那么代表&lt;strong&gt;下载测速过程中出问题报错&lt;/strong&gt;，导致直接终止测速了（并最终显示为 0.00），就只有这几种可能性：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;下载测速地址有问题&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;测速的 IP 地址有问题&lt;/strong&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;你的网络有问题&lt;/strong&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;## 调试模式排查：&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;接下来&lt;strong&gt;请务必&lt;/strong&gt;先在你原先使用的 CFST 运行命令后&lt;strong&gt;追加一个 &lt;code&gt;-debug&lt;/code&gt; 参数来开启调试模式&lt;/strong&gt;，重新跑一遍测速，这样下载测速过程中出现任何报错都会显示具体原因方便你排查。&lt;/p&gt; 
 &lt;p&gt;常见的下载测速失败报错原因有（因为是 Go 语言的原生报错信息，因此基本都是英文）：&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;code&gt;... read: connection reset by peer ... &lt;/code&gt;&lt;br /&gt; &lt;strong&gt;链接被重置&lt;/strong&gt;，可能是下载测速地址被阻断了 或测速 IP 被针对性 HTTPS 阻断了，可能是蔷干的，也可能是运营商干的（比如移动或部分地区的白名单），当然也可能是测速 IP 服务器单纯的重置了你这个不合法的链接请求&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;... HTTP 状态码: 403 ...&lt;/code&gt;&lt;br /&gt; 像这种直接提示 &lt;strong&gt;HTTP 状态码&lt;/strong&gt;的，比较好判断，如 403 就是下载测速地址禁止你访问，404 就是下载测速地址路径对应的文件找不到（具体其他的可以搜索 HTTP 状态码含义）&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;... context deadline exceeded (Client.Timeout exceeded while awaiting headers) ...&lt;/code&gt;&lt;br /&gt; 这种一般是&lt;strong&gt;请求超时&lt;/strong&gt;引起的，可能是 IP 或网络问题，也可能是 &lt;code&gt;-dt&lt;/code&gt; 下载测速时间设置的太短了（当然默认的 10 秒肯定算不上短）&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;... tls: handshake failure ...&lt;/code&gt; 或 &lt;code&gt;... tls: failed to verify certificate ...&lt;/code&gt;&lt;br /&gt; 这种 &lt;strong&gt;TLS 握手失败/SSL 证书错误&lt;/strong&gt; 代表下载测速地址和测速 IP 服务器不匹配，也就是下载测速地址与测速 IP 其中一方有误（例如下载测速地址是托管在 Fastly CDN 的，但测速 IP 是 Cloudflare CDN 的，或者反过来，总之就是你访问下载测速地址时该测速的 IP 服务器告诉你这个网站域名它不认识并把你拒之门外）&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;... tls: failed to verify certificate: x509: certificate is valid for XXX.XX, not YYY.YY ...&lt;/code&gt;&lt;br /&gt; 这种是 &lt;strong&gt;SSL 证书里没有包含你下载测速地址的域名&lt;/strong&gt;，要么是下载测速地址证书配置有问题，要么就是该测速服务器 IP 上并没有该下载测速地址域名对应的 SSL 证书，也就意味着这个服务器 IP 是不能用于该下载测速地址域名的（比如你用谷歌的服务器 IP 去下载测速百度的域名就会这样，或像上面 4 的原因一样）&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;... tls: failed to verify certificate: x509: certificate has expired or is not yet valid: current time ...&lt;/code&gt;&lt;br /&gt; 这种是 &lt;strong&gt;SSL 证书过期了或者尚未到有效时间&lt;/strong&gt;，除了这个原因外，也可能是和上面 4、5 的原因一样（这 4、5、6 三种报错可能会同时出现在同一个服务器 IP 上）&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;... tls: failed to verify certificate: x509: certificate signed by unknown authority.&lt;/code&gt;&lt;br /&gt; 这种代表&lt;strong&gt;系统证书配置有问题&lt;/strong&gt;，导致 TLS 握手时无法验证证书，目前只在 Termux 内遇到过（解决方法见：&lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/61"&gt;https://github.com/XIU2/CloudflareSpeedTest/discussions/61&lt;/a&gt; 帖子末尾）&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;如果你遇到了其他报错原因，且翻译后还是不懂，可以发 Issues 或 Discussions 询问，我也会更新到这里。&lt;br /&gt; 但注意，发 Issues 或 Discussions 询问时，请记得带上&lt;strong&gt;调试模式下 CFST 输出的完整内容（或者完整截图）&lt;/strong&gt;。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;根据上面的报错原因排查一遍后，如果还是无法解决，那么可以尝试下面这些进一步排查：&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;一、下载测速地址有问题&lt;/strong&gt;：&lt;/p&gt; 
 &lt;p&gt;先去 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/490"&gt;#490&lt;/a&gt; 找几个其他的下载测速地址都试试。&lt;/p&gt; 
 &lt;p&gt;如果其中有能下载测速出结果的，则就代表你之前使用的下载测速地址有问题（注意，目前默认下载测速地址仅为一个带负载均衡轮询的重定向链接，会自动重定向到上面帖子里大家分享的公益下载测速地址，而这些地址在&lt;strong&gt;不同地区的可用性可能有差异&lt;/strong&gt;，因此可能出现之前不行现在又正常的情况，如果&lt;strong&gt;想要稳定，建议自建&lt;/strong&gt;，上面帖子写了几种自建方法）。&lt;/p&gt; 
 &lt;p&gt;如果找了很多，都是一样 0.00，那么就要考虑其他可能性了。&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;二、测速的 IP 地址有问题&lt;/strong&gt;：&lt;/p&gt; 
 &lt;p&gt;你用来测速的 IP 地址，可能一些 TCP 测试是通的，但实际上因为各种原因导致不能建立 HTTP 链接（比如是回源 IP，比如是企业用户专用 IP 等等），因此你可以多尝试一些其他的 IP 看是否可行。&lt;/p&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;&lt;strong&gt;三、你的网络有问题&lt;/strong&gt;：&lt;/p&gt; 
 &lt;p&gt;这个就比较麻烦了，如果你现在是用电脑+宽带来使用 CFST 测速的，那么可以尝试关闭手机 WIFI 并打开流量，然后数据线连接电脑，设置好 USB 网络共享（不同手机系统不太一样，具体自行搜索哈），并拔掉电脑的网线，这样你的电脑现在就是走的手机流量数据网络了（如果手机流量数据和宽带不是一个运营商会更好排查），然后再次运行 CFST 测速看看结果是否改变（也可以同时尝试上面的排查方法来交叉验证）。&lt;/p&gt; 
 &lt;p&gt;如果测速结果正常了，那么显然就是宽带网络的问题，如果还是一样的 0.00，那么就麻烦了。。。&lt;/p&gt; 
 &lt;hr /&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 一劳永逸加速所有使用 Cloudflare CDN 的网站（不需要再一个个添加域名到 Hosts 了）&lt;/h4&gt; 
&lt;p&gt;我以前说过，开发该软件项目的目的就是为了通过&lt;strong&gt;改 Hosts 的方式来加速访问使用 Cloudflare CDN 的网站&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;但就如 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/issues/8"&gt;&lt;strong&gt;#8&lt;/strong&gt;&lt;/a&gt; 所说，一个个添加域名到 Hosts 实在&lt;strong&gt;太麻烦&lt;/strong&gt;了，于是我就找到了个&lt;strong&gt;一劳永逸&lt;/strong&gt;的办法！可以看这个 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/71"&gt;&lt;strong&gt;还在一个个添加 Hosts？完美本地加速所有使用 Cloudflare CDN 的网站方法来了！&lt;/strong&gt;&lt;/a&gt; 和另一个&lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/317"&gt;依靠本地 DNS 服务来修改域名解析 IP 为自选 IP&lt;/a&gt; 的教程。&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h4&gt;# 自动更新 Hosts&lt;/h4&gt; 
&lt;p&gt;考虑到很多人获得最快 Cloudflare CDN IP 后，需要替换 Hosts 文件中的 IP。&lt;/p&gt; 
&lt;p&gt;可以看这个 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/312"&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/a&gt; 获取 &lt;strong&gt;Windows/Linux 自动更新 Hosts 脚本&lt;/strong&gt;！&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;问题反馈&lt;/h2&gt; 
&lt;p&gt;如果你遇到什么问题，可以先去 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/issues"&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/a&gt;、&lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions"&gt;Discussions&lt;/a&gt; 里看看是否有别人问过了（记得去看下 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;strong&gt;Closed&lt;/strong&gt;&lt;/a&gt; 的）。&lt;br /&gt; 如果没找到类似问题，请新开个 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/issues/new"&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/a&gt; 来告诉我！&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] &lt;strong&gt;注意&lt;/strong&gt;！&lt;em&gt;与 CFST 本身 &lt;code&gt;反馈问题、功能建议&lt;/code&gt; 无关的，请前往项目内部 论坛 讨论（顶部的 &lt;code&gt;💬 Discussions&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;如果帮到你的话就 "打赏" 一下吧~🎉✨&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/XIU2/XIU2/raw/master/img/zs-01.png" alt="微信赞赏" /&gt;&lt;img src="https://github.com/XIU2/XIU2/raw/master/img/zs-02.png" alt="支付宝赞赏" /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;衍生项目&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/xianshenglu/cloudflare-ip-tester-app"&gt;https://github.com/xianshenglu/cloudflare-ip-tester-app&lt;/a&gt;&lt;/em&gt;&lt;br /&gt; &lt;em&gt;&lt;strong&gt;CFST 安卓版 APP &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/320"&gt;#202&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/mingxiaoyu/luci-app-cloudflarespeedtest"&gt;https://github.com/mingxiaoyu/luci-app-cloudflarespeedtest&lt;/a&gt;&lt;/em&gt;&lt;br /&gt; &lt;em&gt;&lt;strong&gt;CFST OpenWrt 路由器插件版 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/319"&gt;#174&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/immortalwrt-collections/openwrt-cdnspeedtest"&gt;https://github.com/immortalwrt-collections/openwrt-cdnspeedtest&lt;/a&gt;&lt;/em&gt;&lt;br /&gt; &lt;em&gt;&lt;strong&gt;CFST OpenWrt 原生编译版本 &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/discussions/64"&gt;#64&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/hoseinnikkhah/CloudflareSpeedTest-English"&gt;https://github.com/hoseinnikkhah/CloudflareSpeedTest-English&lt;/a&gt;&lt;/em&gt;&lt;br /&gt; &lt;em&gt;&lt;strong&gt;English language version of CFST (Text language differences only) &lt;a href="https://github.com/XIU2/CloudflareSpeedTest/issues/68"&gt;#64&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;此处仅收集了在本项目中宣传过的部分 CFST 相关衍生项目，如果有遗漏可以告诉我~&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;感谢项目&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href="https://github.com/Spedoske/CloudflareScanner"&gt;https://github.com/Spedoske/CloudflareScanner&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;因为该项目已经很长时间没更新了，而我又产生了很多功能需求，所以我临时学了下 Go 语言就上手了（菜）...&lt;/em&gt;&lt;br /&gt; &lt;em&gt;本软件基于该项目制作，但&lt;strong&gt;已添加大量功能及修复 BUG&lt;/strong&gt;，并根据大家的使用反馈积极添加、优化功能（闲）...&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr /&gt; 
&lt;h2&gt;手动编译&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;为了方便，我是在编译的时候将版本号写入代码中的 version 变量，因此你手动编译时，需要像下面这样在 &lt;code&gt;go build&lt;/code&gt; 命令后面加上 &lt;code&gt;-ldflags&lt;/code&gt; 参数来指定版本号：&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;go build -ldflags "-s -w -X main.version=v1.0.0"
# 在 CloudflareSpeedTest 目录中通过命令行（例如 CMD、Bat 脚本）运行该命令，即可编译一个可在和当前设备同样系统、位数、架构的环境下运行的二进制程序（Go 会自动检测你的系统位数、架构）且版本号为 v1.0.0
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;如果想要在 Windows 64位系统下编译&lt;strong&gt;其他系统、架构、位数&lt;/strong&gt;，那么需要指定 &lt;strong&gt;GOOS&lt;/strong&gt; 和 &lt;strong&gt;GOARCH&lt;/strong&gt; 变量。&lt;/p&gt; 
 &lt;p&gt;例如在 Windows 系统下编译一个适用于 &lt;strong&gt;Linux 系统 amd 架构 64 位&lt;/strong&gt;的二进制程序：&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bat"&gt;SET GOOS=linux
SET GOARCH=amd64
go build -ldflags "-s -w -X main.version=v1.0.0"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;例如在 Linux 系统下编译一个适用于 &lt;strong&gt;Windows 系统 amd 架构 32 位&lt;/strong&gt;的二进制程序：&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;GOOS=windows
GOARCH=386
go build -ldflags "-s -w -X main.version=v1.0.0"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;可以运行 &lt;code&gt;go tool dist list&lt;/code&gt; 来查看当前 Go 版本支持编译哪些组合。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;hr /&gt; 
 &lt;p&gt;当然，为了方便批量编译，我会专门指定一个变量为版本号，后续编译直接调用该版本号变量即可。&lt;br /&gt; 同时，批量编译的话，还需要分开放到不同文件夹才行（或者文件名不同），需要加上 &lt;code&gt;-o&lt;/code&gt; 参数指定。&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bat"&gt;:: Windows 系统下是这样：
SET version=v1.0.0
SET GOOS=linux
SET GOARCH=amd64
go build -o Releases\cfst_linux_amd64\cfst -ldflags "-s -w -X main.version=%version%"
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Linux 系统下是这样：
version=v1.0.0
GOOS=windows
GOARCH=386
go build -o Releases/cfst_windows_386/cfst.exe -ldflags "-s -w -X main.version=${version}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The GPL-3.0 License.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>