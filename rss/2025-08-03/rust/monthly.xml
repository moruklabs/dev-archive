<rss version="2.0">
  <channel>
    <title>GitHub Rust Monthly Trending</title>
    <description>Monthly Trending of Rust in GitHub</description>
    <pubDate>Sat, 02 Aug 2025 01:50:29 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true" alt="RustDesk - Your remote desktop"&gt;&lt;br&gt; &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build"&gt;Build&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker"&gt;Docker&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure"&gt;Structure&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot"&gt;Snapshot&lt;/a&gt;&lt;br&gt; [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md"&gt;Українська&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md"&gt;česky&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md"&gt;中文&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md"&gt;Magyar&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md"&gt;Español&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md"&gt;فارسی&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md"&gt;Français&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md"&gt;Deutsch&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md"&gt;Polski&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md"&gt;Indonesian&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md"&gt;Suomi&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md"&gt;മലയാളം&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md"&gt;日本語&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md"&gt;Nederlands&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md"&gt;Italiano&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md"&gt;Русский&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md"&gt;Português (Brasil)&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md"&gt;Esperanto&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md"&gt;한국어&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md"&gt;العربي&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md"&gt;Tiếng Việt&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md"&gt;Dansk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md"&gt;Ελληνικά&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md"&gt;Türkçe&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md"&gt;Norsk&lt;/a&gt;]&lt;br&gt; &lt;b&gt;We need your help to translate this README, &lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/lang"&gt;RustDesk UI&lt;/a&gt; and &lt;a href="https://github.com/rustdesk/doc.rustdesk.com"&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Chat with us: &lt;a href="https://discord.gg/nDceKgxnkV"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/rustdesk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/rustdesk"&gt;Reddit&lt;/a&gt; | &lt;a href="https://www.youtube.com/@rustdesk"&gt;YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://ko-fi.com/I2I04VU09"&gt;&lt;img src="https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop solution, written in Rust. Works out of the box with no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href="https://rustdesk.com/server"&gt;set up your own&lt;/a&gt;, or &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png" alt="image"&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases"&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases/tag/nightly"&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://f-droid.org/en/packages/com.carriez.flutter_hbb"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" height="80"&gt;&lt;/a&gt; &lt;a href="https://flathub.org/apps/com.rustdesk.RustDesk"&gt;&lt;img src="https://flathub.org/api/badge?svg&amp;amp;locale=en" alt="Get it on Flathub" height="80"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href="https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml"&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"&gt;Windows&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so"&gt;Linux&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib"&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw Steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://rustdesk.com/docs/en/dev/build/"&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to Build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i 's/CFLAGS+=-I/CFLAGS+=-fPIC -I/g' Makefile
sed -i 's/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g' Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone --recurse-submodules https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t "rustdesk-builder" .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID="$(id -u)" -e PGID="$(id -g)" rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you're running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you run these commands from the root of the RustDesk repository, or the application may not find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common"&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/scrap"&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/enigo"&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard"&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/ui"&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/server"&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/client.rs"&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs"&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href="https://github.com/rustdesk/rustdesk-server"&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/platform"&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter"&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js"&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651" alt="Connection Manager"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea" alt="Connected to a Windows PC"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad" alt="File Transfer"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5" alt="TCP Tunneling"&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tauri-apps/tauri</title>
      <link>https://github.com/tauri-apps/tauri</link>
      <description>&lt;p&gt;Build smaller, faster, and more secure desktop and mobile applications with a web frontend.&lt;/p&gt;&lt;hr&gt;&lt;img src="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/splash.png" alt="Tauri"&gt; 
&lt;p&gt;&lt;a href="https://github.com/tauri-apps/tauri/tree/dev"&gt;&lt;img src="https://img.shields.io/badge/status-stable-blue.svg?sanitize=true" alt="status"&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tauri"&gt;&lt;img src="https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg?sanitize=true" alt="License"&gt;&lt;/a&gt; &lt;a href="https://github.com/tauri-apps/tauri/actions/workflows/test-core.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tauri-apps/tauri/test-core.yml?label=test%20core&amp;amp;logo=github" alt="test core"&gt;&lt;/a&gt; &lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_shield"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=shield" alt="FOSSA Status"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/tauri"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-7289da.svg?sanitize=true" alt="Chat Server"&gt;&lt;/a&gt; &lt;a href="https://tauri.app"&gt;&lt;img src="https://img.shields.io/badge/website-tauri.app-purple.svg?sanitize=true" alt="website"&gt;&lt;/a&gt; &lt;a href="https://good-labs.github.io/greater-good-affirmation"&gt;&lt;img src="https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg?sanitize=true" alt="https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg"&gt;&lt;/a&gt; &lt;a href="https://opencollective.com/tauri"&gt;&lt;img src="https://img.shields.io/badge/sponsor-Open%20Collective-blue.svg?sanitize=true" alt="support"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Tauri is a framework for building tiny, blazingly fast binaries for all major desktop platforms. Developers can integrate any front-end framework that compiles to HTML, JS and CSS for building their user interface. The backend of the application is a rust-sourced binary with an API that the front-end can interact with.&lt;/p&gt; 
&lt;p&gt;The user interface in Tauri apps currently leverages &lt;a href="https://docs.rs/tao"&gt;&lt;code&gt;tao&lt;/code&gt;&lt;/a&gt; as a window handling library on macOS, Windows, Linux, Android and iOS. To render your application, Tauri uses &lt;a href="https://github.com/tauri-apps/wry"&gt;WRY&lt;/a&gt;, a library which provides a unified interface to the system webview, leveraging WKWebView on macOS &amp;amp; iOS, WebView2 on Windows, WebKitGTK on Linux and Android System WebView on Android.&lt;/p&gt; 
&lt;p&gt;To learn more about the details of how all of these pieces fit together, please consult this &lt;a href="https://github.com/tauri-apps/tauri/raw/dev/ARCHITECTURE.md"&gt;ARCHITECTURE.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;If you are interested in making a tauri app, please visit the &lt;a href="https://tauri.app"&gt;documentation website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The quickest way to get started is to install the &lt;a href="https://v2.tauri.app/start/prerequisites/"&gt;prerequisites&lt;/a&gt; for your system and create a new project with &lt;a href="https://github.com/tauri-apps/create-tauri-app/#usage"&gt;&lt;code&gt;create-tauri-app&lt;/code&gt;&lt;/a&gt;. For example with &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;npm create tauri-app@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;The list of Tauri's features includes, but is not limited to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in app bundler to create app bundles in formats like &lt;code&gt;.app&lt;/code&gt;, &lt;code&gt;.dmg&lt;/code&gt;, &lt;code&gt;.deb&lt;/code&gt;, &lt;code&gt;.rpm&lt;/code&gt;, &lt;code&gt;.AppImage&lt;/code&gt; and Windows installers like &lt;code&gt;.exe&lt;/code&gt; (via NSIS) and &lt;code&gt;.msi&lt;/code&gt; (via WiX).&lt;/li&gt; 
 &lt;li&gt;Built-in self updater (desktop only)&lt;/li&gt; 
 &lt;li&gt;System tray icons&lt;/li&gt; 
 &lt;li&gt;Native notifications&lt;/li&gt; 
 &lt;li&gt;Native WebView Protocol (tauri doesn't create a localhost http(s) server to serve the WebView contents)&lt;/li&gt; 
 &lt;li&gt;GitHub action for streamlined CI&lt;/li&gt; 
 &lt;li&gt;VS Code extension&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Platforms&lt;/h3&gt; 
&lt;p&gt;Tauri currently supports development and distribution on the following platforms:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Versions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Windows&lt;/td&gt; 
   &lt;td align="left"&gt;7 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;macOS&lt;/td&gt; 
   &lt;td align="left"&gt;10.15 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Linux&lt;/td&gt; 
   &lt;td align="left"&gt;webkit2gtk 4.0 for Tauri v1 (for example Ubuntu 18.04). webkit2gtk 4.1 for Tauri v2 (for example Ubuntu 22.04).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;iOS/iPadOS&lt;/td&gt; 
   &lt;td align="left"&gt;9 and above&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;Android&lt;/td&gt; 
   &lt;td align="left"&gt;7 and above (currently 8 and above)&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before you start working on something, it's best to check if there is an existing issue first. It's also a good idea to stop by the Discord server and confirm with the team if it makes sense or if someone else is already working on it.&lt;/p&gt; 
&lt;p&gt;Please make sure to read the &lt;a href="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;p&gt;Thank you to everyone contributing to Tauri!&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;Documentation in a polyglot system is a tricky proposition. To this end, we prefer to use inline documentation in the Rust &amp;amp; JS source code as much as possible. Check out the hosting repository for the documentation site for further information: &lt;a href="https://github.com/tauri-apps/tauri-docs"&gt;https://github.com/tauri-apps/tauri-docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center" valign="middle"&gt; &lt;a href="https://crabnebula.dev" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/tauri-apps/tauri/dev/.github/sponsors/crabnebula.svg?sanitize=true" alt="CrabNebula" width="283"&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;For the complete list of sponsors please visit our &lt;a href="https://tauri.app#sponsors"&gt;website&lt;/a&gt; and &lt;a href="https://opencollective.com/tauri"&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Organization&lt;/h2&gt; 
&lt;p&gt;Tauri aims to be a sustainable collective based on principles that guide &lt;a href="https://sfosc.org"&gt;sustainable free and open software communities&lt;/a&gt;. To this end it has become a Programme within the &lt;a href="https://commonsconservancy.org/"&gt;Commons Conservancy&lt;/a&gt;, and you can contribute financially via &lt;a href="https://opencollective.com/tauri"&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;Code: (c) 2015 - Present - The Tauri Programme within The Commons Conservancy.&lt;/p&gt; 
&lt;p&gt;MIT or MIT/Apache 2.0 where applicable.&lt;/p&gt; 
&lt;p&gt;Logo: CC-BY-NC-ND&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Original Tauri Logo Designs by &lt;a href="https://alve.io/"&gt;Alve Larsson&lt;/a&gt;, &lt;a href="https://github.com/nothingismagick"&gt;Daniel Thompson-Yvetot&lt;/a&gt; and &lt;a href="https://github.com/akryum"&gt;Guillaume Chau&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_large"&gt;&lt;img src="https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=large" alt="FOSSA Status"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tursodatabase/turso</title>
      <link>https://github.com/tursodatabase/turso</link>
      <description>&lt;p&gt;Turso Database is a project to build the next evolution of SQLite.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/turso.png" alt="Turso Database" width="800"&gt; &lt;/p&gt;
&lt;h1 align="center"&gt;Turso Database&lt;/h1&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;i&gt;Turso Database&lt;/i&gt; is an in-process SQL database, compatible with SQLite. &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Build Status" target="_blank" href="https://github.com/tursodatabase/turso/actions/workflows/rust.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/tursodatabase/turso/rust.yml?style=flat-square"&gt;&lt;/a&gt; &lt;a title="Releases" target="_blank" href="https://github.com/tursodatabase/turso/releases"&gt;&lt;img src="https://img.shields.io/github/release/tursodatabase/turso?style=flat-square&amp;amp;color=9CF"&gt;&lt;/a&gt; &lt;a title="Rust" target="_blank" href="https://crates.io/crates/turso"&gt;&lt;img alt="PyPI" src="https://img.shields.io/crates/v/turso"&gt;&lt;/a&gt; &lt;a title="JavaScript" target="_blank" href="https://www.npmjs.com/package/@tursodatabase/turso"&gt;&lt;img alt="PyPI" src="https://img.shields.io/npm/v/@tursodatabase/turso"&gt;&lt;/a&gt; &lt;a title="Python" target="_blank" href="https://pypi.org/project/pyturso/"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/v/pyturso"&gt;&lt;/a&gt; &lt;a title="MIT" target="_blank" href="https://github.com/tursodatabase/turso/raw/main/LICENSE.md"&gt;&lt;img src="http://img.shields.io/badge/license-MIT-orange.svg?style=flat-square"&gt;&lt;/a&gt; &lt;br&gt; &lt;a title="GitHub Pull Requests" target="_blank" href="https://github.com/tursodatabase/turso/pulls"&gt;&lt;img src="https://img.shields.io/github/issues-pr-closed/tursodatabase/turso.svg?style=flat-square&amp;amp;color=FF9966"&gt;&lt;/a&gt; &lt;a title="GitHub Commits" target="_blank" href="https://github.com/tursodatabase/turso/commits/main"&gt;&lt;img src="https://img.shields.io/github/commit-activity/m/tursodatabase/turso.svg?style=flat-square"&gt;&lt;/a&gt; &lt;a title="Last Commit" target="_blank" href="https://github.com/tursodatabase/turso/commits/main"&gt;&lt;img src="https://img.shields.io/github/last-commit/tursodatabase/turso.svg?style=flat-square&amp;amp;color=FF9900"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Developer's Discord" target="_blank" href="https://discord.gg/jgjmyYgHwB"&gt;&lt;img alt="Chat with the Core Developers on Discord" src="https://img.shields.io/discord/1258658826257961020?label=Discord&amp;amp;logo=Discord&amp;amp;style=social&amp;amp;label=Core%20Developers"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a title="Users's Discord" target="_blank" href="https://tur.so/discord"&gt;&lt;img alt="Chat with other users of Turso (and Turso Cloud) on Discord" src="https://img.shields.io/discord/933071162680958986?label=Discord&amp;amp;logo=Discord&amp;amp;style=social&amp;amp;label=Users"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Turso Database is a &lt;em&gt;work-in-progress&lt;/em&gt;, in-process OLTP database engine library written in Rust that has:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;SQLite compatibility&lt;/strong&gt; for SQL dialect, file formats, and the C API [see &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/COMPAT.md"&gt;document&lt;/a&gt; for details]&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Change data capture (CDC)&lt;/strong&gt; for real-time tracking of database changes.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Language support&lt;/strong&gt; for 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/go"&gt;Go&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/java"&gt;Java&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/python"&gt;Python&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/rust"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/javascript"&gt;WebAssembly&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous I/O&lt;/strong&gt; support on Linux with &lt;code&gt;io_uring&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OS support&lt;/strong&gt; for Linux, macOS, and Windows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Roadmap&lt;/h3&gt; 
&lt;p&gt;The following features are on our current roadmap:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;BEGIN CONCURRENT&lt;/code&gt;&lt;/strong&gt; for improved write throughput using multi-version concurrency control (MVCC).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Better schema management&lt;/strong&gt;, including extended &lt;code&gt;ALTER&lt;/code&gt; support, faster schema changes, and strict column types by default.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Incremental computation&lt;/strong&gt; using DBSP to implement query subscriptions, incremental view maintenance, and triggers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Vector indexing&lt;/strong&gt; for fast approximate vector search, similar to &lt;a href="https://turso.tech/vector"&gt;libSQL vector search&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/docs/manual.md"&gt;Turso Database Manual&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;💻 Command Line&lt;/summary&gt; 
 &lt;br&gt; You can install the latest `turso` release with: 
 &lt;pre&gt;&lt;code class="language-shell"&gt;curl --proto '=https' --tlsv1.2 -LsSf \
  https://github.com/tursodatabase/turso/releases/latest/download/turso_cli-installer.sh | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Then launch the shell to execute SQL statements:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;Turso
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database
turso&amp;gt; CREATE TABLE users (id INT, username TEXT);
turso&amp;gt; INSERT INTO users VALUES (1, 'alice');
turso&amp;gt; INSERT INTO users VALUES (2, 'bob');
turso&amp;gt; SELECT * FROM users;
1|alice
2|bob
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;You can also build and run the latest development version with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;cargo run
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;If you like docker, we got you covered. Simply run this in the root folder:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;make docker-cli-build &amp;amp;&amp;amp; \
make docker-cli-run
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;MCP Server Mode&lt;/h3&gt; 
 &lt;p&gt;The Turso CLI includes a built-in &lt;a href="https://modelcontextprotocol.io/"&gt;Model Context Protocol (MCP)&lt;/a&gt; server that allows AI assistants to interact with your databases. Start the MCP server with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;tursodb your_database.db --mcp
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The MCP server provides seven tools for database interaction:&lt;/p&gt; 
 &lt;h4&gt;Available Tools&lt;/h4&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;list_tables&lt;/code&gt;&lt;/strong&gt; - List all tables in the database&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;describe_table&lt;/code&gt;&lt;/strong&gt; - Describe the structure of a specific table&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;execute_query&lt;/code&gt;&lt;/strong&gt; - Execute read-only SELECT queries&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;insert_data&lt;/code&gt;&lt;/strong&gt; - Insert new data into tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;update_data&lt;/code&gt;&lt;/strong&gt; - Update existing data in tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;delete_data&lt;/code&gt;&lt;/strong&gt; - Delete data from tables&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;schema_change&lt;/code&gt;&lt;/strong&gt; - Execute schema modification statements (CREATE TABLE, ALTER TABLE, DROP TABLE)&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;h4&gt;Example Usage&lt;/h4&gt; 
 &lt;p&gt;The MCP server runs as a single process that handles multiple JSON-RPC requests over stdin/stdout. Here's how to interact with it:&lt;/p&gt; 
 &lt;h4&gt;Example with In-Memory Database&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;cat &amp;lt;&amp;lt; 'EOF' | tursodb --mcp
{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "client", "version": "1.0"}}}
{"jsonrpc": "2.0", "id": 2, "method": "tools/call", "params": {"name": "schema_change", "arguments": {"query": "CREATE TABLE users (id INTEGER, name TEXT, email TEXT)"}}}
{"jsonrpc": "2.0", "id": 3, "method": "tools/call", "params": {"name": "list_tables", "arguments": {}}}
{"jsonrpc": "2.0", "id": 4, "method": "tools/call", "params": {"name": "insert_data", "arguments": {"query": "INSERT INTO users VALUES (1, 'Alice', 'alice@example.com')"}}}
{"jsonrpc": "2.0", "id": 5, "method": "tools/call", "params": {"name": "execute_query", "arguments": {"query": "SELECT * FROM users"}}}
EOF
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h4&gt;Example with Existing Database&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;# Working with an existing database file
cat &amp;lt;&amp;lt; 'EOF' | tursodb mydb.db --mcp
{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "client", "version": "1.0"}}}
{"jsonrpc": "2.0", "id": 2, "method": "tools/call", "params": {"name": "list_tables", "arguments": {}}}
EOF
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🦀 Rust&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;cargo add turso
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-rust"&gt;let db = Builder::new_local("sqlite.db").build().await?;
let conn = db.connect()?;

let res = conn.query("SELECT * FROM users", ()).await?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;✨ JavaScript&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;npm i @tursodatabase/turso
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-js"&gt;import { Database } from '@tursodatabase/turso';

const db = new Database('sqlite.db');
const stmt = db.prepare('SELECT * FROM users');
const users = stmt.all();
console.log(users);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🐍 Python&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;pip install pyturso
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-python"&gt;import turso

con = turso.connect("sqlite.db")
cur = con.cursor()
res = cur.execute("SELECT * FROM users")
print(res.fetchone())
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;🦫 Go&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Clone the repository&lt;/li&gt; 
  &lt;li&gt;Build the library and set your LD_LIBRARY_PATH to include turso's target directory&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;cargo build --package limbo-go
export LD_LIBRARY_PATH=/path/to/limbo/target/debug:$LD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt; 
 &lt;ol start="3"&gt; 
  &lt;li&gt;Use the driver&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;go get github.com/tursodatabase/turso
go install github.com/tursodatabase/turso
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example usage:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-go"&gt;import (
    "database/sql"
    _ "github.com/tursodatabase/turso"
)

conn, _ = sql.Open("sqlite3", "sqlite.db")
defer conn.Close()

stmt, _ := conn.Prepare("select * from users")
defer stmt.Close()

rows, _ = stmt.Query()
for rows.Next() {
    var id int
    var username string
    _ := rows.Scan(&amp;amp;id, &amp;amp;username)
    fmt.Printf("User: ID: %d, Username: %s\n", id, username)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;☕️ Java&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;p&gt;We integrated Turso Database into JDBC. For detailed instructions on how to use Turso Database with java, please refer to the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/bindings/java/README.md"&gt;README.md under bindings/java&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We'd love to have you contribute to Turso Database! Please check out the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/CONTRIBUTING.md"&gt;contribution guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h3&gt;Found a data corruption bug? Get up to $1,000.00&lt;/h3&gt; 
&lt;p&gt;SQLite is loved because it is the most reliable database in the world. The next evolution of SQLite has to match or surpass this level of reliability. Turso is built with &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/simulator/"&gt;Deterministic Simulation Testing&lt;/a&gt; from the ground up, and is also tested by &lt;a href="https://antithesis.com"&gt;Antithesis&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Even during Alpha, if you find a bug that leads to a data corruption and demonstrate how our simulator failed to catch it, you can get up to $1,000.00. As the project matures we will increase the size of the prize, and the scope of the bugs.&lt;/p&gt; 
&lt;p&gt;More details &lt;a href="https://turso.algora.io"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can see an example of an awarded case on &lt;a href="https://github.com/tursodatabase/turso/issues/2049"&gt;#2049&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Turso core staff are not eligible.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Is Turso Database ready for production use?&lt;/h3&gt; 
&lt;p&gt;Turso Database is currently under heavy development and is &lt;strong&gt;not&lt;/strong&gt; ready for production use.&lt;/p&gt; 
&lt;h3&gt;How is Turso Database different from Turso's libSQL?&lt;/h3&gt; 
&lt;p&gt;Turso Database is a project to build the next evolution of SQLite in Rust, with a strong open contribution focus and features like native async support, vector search, and more. The libSQL project is also an attempt to evolve SQLite in a similar direction, but through a fork rather than a rewrite.&lt;/p&gt; 
&lt;p&gt;Rewriting SQLite in Rust started as an unassuming experiment, and due to its incredible success, replaces libSQL as our intended direction. At this point, libSQL is production ready, Turso Database is not - although it is evolving rapidly. More details &lt;a href="https://turso.tech/blog/we-will-rewrite-sqlite-and-we-are-going-all-in"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Publications&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pekka Enberg, Sasu Tarkoma, Jon Crowcroft Ashwin Rao (2024). Serverless Runtime / Database Co-Design With Asynchronous I/O. In &lt;em&gt;EdgeSys ‘24&lt;/em&gt;. &lt;a href="https://penberg.org/papers/penberg-edgesys24.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Pekka Enberg, Sasu Tarkoma, and Ashwin Rao (2023). Towards Database and Serverless Runtime Co-Design. In &lt;em&gt;CoNEXT-SW ’23&lt;/em&gt;. [&lt;a href="https://penberg.org/papers/penberg-conext-sw-23.pdf"&gt;PDF&lt;/a&gt;] [&lt;a href="https://penberg.org/papers/penberg-conext-sw-23-slides.pdf"&gt;Slides&lt;/a&gt;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://raw.githubusercontent.com/tursodatabase/turso/main/LICENSE.md"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Turso Database by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt; 
&lt;h2&gt;Partners&lt;/h2&gt; 
&lt;p&gt;Thanks to all the partners of Turso!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://antithesis.com/"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/antithesis.jpg" width="400"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://blacksmith.sh"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/blacksmith.svg?sanitize=true" width="400"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://nyrkio.com/"&gt;&lt;img src="https://raw.githubusercontent.com/tursodatabase/turso/main/assets/turso-nyrkio.png" width="400"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thanks to all the contributors to Turso Database!&lt;/p&gt; 
&lt;a href="https://github.com/tursodatabase/turso/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=tursodatabase/turso"&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>EasyTier/EasyTier</title>
      <link>https://github.com/EasyTier/EasyTier</link>
      <description>&lt;p&gt;A simple, decentralized mesh VPN with WireGuard support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EasyTier&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/EasyTier/EasyTier/releases"&gt;&lt;img src="https://img.shields.io/github/v/tag/EasyTier/EasyTier" alt="Github release"&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/EasyTier/EasyTier" alt="GitHub"&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/commits/main"&gt;&lt;img src="https://img.shields.io/github/last-commit/EasyTier/EasyTier" alt="GitHub last commit"&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/issues"&gt;&lt;img src="https://img.shields.io/github/issues/EasyTier/EasyTier" alt="GitHub issues"&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/actions/workflows/core.yml"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/core.yml/badge.svg?sanitize=true" alt="GitHub Core Actions"&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/actions/workflows/gui.yml"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/gui.yml/badge.svg?sanitize=true" alt="GitHub GUI Actions"&gt;&lt;/a&gt; &lt;a href="https://github.com/EasyTier/EasyTier/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/EasyTier/EasyTier/actions/workflows/test.yml/badge.svg?sanitize=true" alt="GitHub Test Actions"&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/EasyTier/EasyTier"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/EasyTier/EasyTier/main/README_CN.md"&gt;简体中文&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/EasyTier/EasyTier/main/README.md"&gt;English&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;✨ A simple, secure, decentralized virtual private network solution powered by Rust and Tokio&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/config-page.png" width="300" alt="config page"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/running-page.png" width="300" alt="running page"&gt; &lt;/p&gt; 
&lt;p&gt;📚 &lt;strong&gt;&lt;a href="https://easytier.cn/en/"&gt;Full Documentation&lt;/a&gt;&lt;/strong&gt; | 🖥️ &lt;strong&gt;&lt;a href="https://easytier.cn/web"&gt;Web Console&lt;/a&gt;&lt;/strong&gt; | 📝 &lt;strong&gt;&lt;a href="https://github.com/EasyTier/EasyTier/releases"&gt;Download Releases&lt;/a&gt;&lt;/strong&gt; | 🧩 &lt;strong&gt;&lt;a href="https://easytier.cn/en/guide/installation_gui.html#third-party-graphical-interfaces"&gt;Third Party Tools&lt;/a&gt;&lt;/strong&gt; | ❤️ &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/EasyTier/EasyTier/main/#sponsor"&gt;Sponsor&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Core Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔒 &lt;strong&gt;Decentralized&lt;/strong&gt;: Nodes are equal and independent, no centralized services required&lt;/li&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Easy to Use&lt;/strong&gt;: Multiple operation methods via web, client, and command line&lt;/li&gt; 
 &lt;li&gt;🌍 &lt;strong&gt;Cross-Platform&lt;/strong&gt;: Supports Win/MacOS/Linux/FreeBSD/Android and X86/ARM/MIPS architectures&lt;/li&gt; 
 &lt;li&gt;🔐 &lt;strong&gt;Secure&lt;/strong&gt;: AES-GCM or WireGuard encryption, prevents man-in-the-middle attacks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Advanced Capabilities&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🔌 &lt;strong&gt;Efficient NAT Traversal&lt;/strong&gt;: Supports UDP and IPv6 traversal, works with NAT4-NAT4 networks&lt;/li&gt; 
 &lt;li&gt;🌐 &lt;strong&gt;Subnet Proxy&lt;/strong&gt;: Nodes can share subnets for other nodes to access&lt;/li&gt; 
 &lt;li&gt;🔄 &lt;strong&gt;Intelligent Routing&lt;/strong&gt;: Latency priority and automatic route selection for best network experience&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;High Performance&lt;/strong&gt;: Zero-copy throughout the entire link, supports TCP/UDP/WSS/WG protocols&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Network Optimization&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📊 &lt;strong&gt;UDP Loss Resistance&lt;/strong&gt;: KCP/QUIC proxy optimizes latency and bandwidth in high packet loss environments&lt;/li&gt; 
 &lt;li&gt;🔧 &lt;strong&gt;Web Management&lt;/strong&gt;: Easy configuration and monitoring through web interface&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Zero Config&lt;/strong&gt;: Simple deployment with statically linked executables&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;📥 Installation&lt;/h3&gt; 
&lt;p&gt;Choose the installation method that best suits your needs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# 1. Download pre-built binary (Recommended, All platforms supported)
# Visit https://github.com/EasyTier/EasyTier/releases

# 2. Install via cargo (Latest development version)
cargo install --git https://github.com/EasyTier/EasyTier.git easytier

# 3. Install via Docker
# See https://easytier.cn/en/guide/installation.html#installation-methods

# 4. Linux Quick Install
wget -O- https://raw.githubusercontent.com/EasyTier/EasyTier/main/script/install.sh | sudo bash

# 5. MacOS via Homebrew
brew tap brewforge/chinese
brew install --cask easytier-gui

# 6. OpenWrt Luci Web UI
# Visit https://github.com/EasyTier/luci-app-easytier

# 7. (Optional) Install shell completions:
easytier-core --gen-autocomplete fish &amp;gt; ~/.config/fish/completions/easytier-core.fish
easytier-cli gen-autocomplete fish &amp;gt; ~/.config/fish/completions/easytier-cli.fish

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;🚀 Basic Usage&lt;/h3&gt; 
&lt;h4&gt;Quick Networking with Shared Nodes&lt;/h4&gt; 
&lt;p&gt;EasyTier supports quick networking using shared public nodes. When you don't have a public IP, you can use the free shared nodes provided by the EasyTier community. Nodes will automatically attempt NAT traversal and establish P2P connections. When P2P fails, data will be relayed through shared nodes.&lt;/p&gt; 
&lt;p&gt;The currently deployed shared public node is &lt;code&gt;tcp://public.easytier.cn:11010&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When using shared nodes, each node entering the network needs to provide the same &lt;code&gt;--network-name&lt;/code&gt; and &lt;code&gt;--network-secret&lt;/code&gt; parameters as the unique identifier of the network.&lt;/p&gt; 
&lt;p&gt;Taking two nodes as an example (Please use more complex network name to avoid conflicts):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run on Node A:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run with administrator privileges
sudo easytier-core -d --network-name abc --network-secret abc -p tcp://public.easytier.cn:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Run on Node B:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run with administrator privileges
sudo easytier-core -d --network-name abc --network-secret abc -p tcp://public.easytier.cn:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After successful execution, you can check the network status using &lt;code&gt;easytier-cli&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;| ipv4         | hostname       | cost  | lat_ms | loss_rate | rx_bytes | tx_bytes | tunnel_proto | nat_type | id         | version         |
| ------------ | -------------- | ----- | ------ | --------- | -------- | -------- | ------------ | -------- | ---------- | --------------- |
| 10.126.126.1 | abc-1          | Local | *      | *         | *        | *        | udp          | FullCone | 439804259  | 2.4.0-70e69a38~ |
| 10.126.126.2 | abc-2          | p2p   | 3.452  | 0         | 17.33 kB | 20.42 kB | udp          | FullCone | 390879727  | 2.4.0-70e69a38~ |
|              | PublicServer_a | p2p   | 27.796 | 0.000     | 50.01 kB | 67.46 kB | tcp          | Unknown  | 3771642457 | 2.4.0-70e69a38~ |
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can test connectivity between nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Test connectivity
ping 10.126.126.1
ping 10.126.126.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: If you cannot ping through, it may be that the firewall is blocking incoming traffic. Please turn off the firewall or add allow rules.&lt;/p&gt; 
&lt;p&gt;To improve availability, you can connect to multiple shared nodes simultaneously:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Connect to multiple shared nodes
sudo easytier-core -d --network-name abc --network-secret abc -p tcp://public.easytier.cn:11010 -p udp://public.easytier.cn:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once your network is set up successfully, you can easily configure it to start automatically on system boot. Refer to the &lt;a href="https://easytier.cn/en/guide/network/oneclick-install-as-service.html"&gt;One-Click Register Service guide&lt;/a&gt; for step-by-step instructions on registering EasyTier as a system service.&lt;/p&gt; 
&lt;h4&gt;Decentralized Networking&lt;/h4&gt; 
&lt;p&gt;EasyTier is fundamentally decentralized, with no distinction between server and client. As long as one device can communicate with any node in the virtual network, it can join the virtual network. Here's how to set up a decentralized network:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start First Node (Node A):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start the first node
sudo easytier-core -i 10.144.144.1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After startup, this node will listen on the following ports by default:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;TCP: 11010&lt;/li&gt; 
 &lt;li&gt;UDP: 11010&lt;/li&gt; 
 &lt;li&gt;WebSocket: 11011&lt;/li&gt; 
 &lt;li&gt;WebSocket SSL: 11012&lt;/li&gt; 
 &lt;li&gt;WireGuard: 11013&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Connect Second Node (Node B):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Connect to the first node using its public IP
sudo easytier-core -i 10.144.144.2 -p udp://FIRST_NODE_PUBLIC_IP:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Verify Connection:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Test connectivity
ping 10.144.144.2

# View connected peers
easytier-cli peer

# View routing information
easytier-cli route

# View local node information
easytier-cli node
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more nodes to join the network, they can connect to any existing node in the network using the &lt;code&gt;-p&lt;/code&gt; parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Connect to any existing node using its public IP
sudo easytier-core -i 10.144.144.3 -p udp://ANY_EXISTING_NODE_PUBLIC_IP:11010
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;🔍 Advanced Features&lt;/h3&gt; 
&lt;h4&gt;Subnet Proxy&lt;/h4&gt; 
&lt;p&gt;Assuming the network topology is as follows, Node B wants to share its accessible subnet 10.1.1.0/24 with other nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR

subgraph Node A Public IP 22.1.1.1
nodea[EasyTier&amp;lt;br/&amp;gt;10.144.144.1]
end

subgraph Node B
nodeb[EasyTier&amp;lt;br/&amp;gt;10.144.144.2]
end

id1[[10.1.1.0/24]]

nodea &amp;lt;--&amp;gt; nodeb &amp;lt;-.-&amp;gt; id1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To share a subnet, add the &lt;code&gt;-n&lt;/code&gt; parameter when starting EasyTier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Share subnet 10.1.1.0/24 with other nodes
sudo easytier-core -i 10.144.144.2 -n 10.1.1.0/24
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Subnet proxy information will automatically sync to each node in the virtual network, and each node will automatically configure the corresponding route. You can verify the subnet proxy setup:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check if the routing information has been synchronized (the proxy_cidrs column shows the proxied subnets):&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# View routing information
easytier-cli route
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/image-3.png" alt="Routing Information"&gt;&lt;/p&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Test if you can access nodes in the proxied subnet:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Test connectivity to proxied subnet
ping 10.1.1.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;WireGuard Integration&lt;/h4&gt; 
&lt;p&gt;EasyTier can act as a WireGuard server, allowing any device with a WireGuard client (including iOS and Android) to access the EasyTier network. Here's an example setup:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR

ios[[iPhone&amp;lt;br/&amp;gt;WireGuard Installed]]

subgraph Node A Public IP 22.1.1.1
nodea[EasyTier&amp;lt;br/&amp;gt;10.144.144.1]
end

subgraph Node B
nodeb[EasyTier&amp;lt;br/&amp;gt;10.144.144.2]
end

id1[[10.1.1.0/24]]

ios &amp;lt;-.-&amp;gt; nodea &amp;lt;--&amp;gt; nodeb &amp;lt;-.-&amp;gt; id1
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start EasyTier with WireGuard portal enabled:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Listen on 0.0.0.0:11013 and use 10.14.14.0/24 subnet for WireGuard clients
sudo easytier-core -i 10.144.144.1 --vpn-portal wg://0.0.0.0:11013/10.14.14.0/24
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;Get WireGuard client configuration:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get WireGuard client configuration
easytier-cli vpn-portal
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;In the output configuration: 
  &lt;ul&gt; 
   &lt;li&gt;Set &lt;code&gt;Interface.Address&lt;/code&gt; to an available IP from the WireGuard subnet&lt;/li&gt; 
   &lt;li&gt;Set &lt;code&gt;Peer.Endpoint&lt;/code&gt; to the public IP/domain of your EasyTier node&lt;/li&gt; 
   &lt;li&gt;Import the modified configuration into your WireGuard client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;Self-Hosted Public Shared Node&lt;/h4&gt; 
&lt;p&gt;You can run your own public shared node to help other nodes discover each other. A public shared node is just a regular EasyTier network (with same network name and secret) that other networks can connect to.&lt;/p&gt; 
&lt;p&gt;To run a public shared node:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# No need to specify IPv4 address for public shared nodes
sudo easytier-core --network-name mysharednode --network-secret mysharednode
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.zerotier.com/"&gt;ZeroTier&lt;/a&gt;: A global virtual network for connecting devices.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://tailscale.com/"&gt;TailScale&lt;/a&gt;: A VPN solution aimed at simplifying network configuration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dswd/vpncloud"&gt;vpncloud&lt;/a&gt;: A P2P Mesh VPN&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lanthora/candy"&gt;Candy&lt;/a&gt;: A reliable, low-latency, and anti-censorship virtual private network&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contact Us&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;💬 &lt;strong&gt;&lt;a href="https://t.me/easytier"&gt;Telegram Group&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;👥 &lt;strong&gt;&lt;a href="https://qm.qq.com/cgi-bin/qm/qr?k=kC8YJ6Jb8vWJIDbZrZJB8pB5YZgPJA5-"&gt;QQ Group: 949700262&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;EasyTier is released under the &lt;a href="https://github.com/EasyTier/EasyTier/raw/main/LICENSE"&gt;LGPL-3.0&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;CDN acceleration and security protection for this project are sponsored by Tencent EdgeOne.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://edgeone.ai/?from=github" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/edgeone.png" width="200" alt="EdgeOne Logo"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Special thanks to &lt;a href="https://langlangy.cn/?i26c5a5"&gt;Langlang Cloud&lt;/a&gt; and &lt;a href="https://www.rainyun.com/NjM0NzQ1_"&gt;RainCloud&lt;/a&gt; for sponsoring our public servers.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://langlangy.cn/?i26c5a5" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/langlang.png" width="200"&gt; &lt;/a&gt; &lt;a href="https://langlangy.cn/?i26c5a5" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/raincloud.png" width="200"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;If you find EasyTier helpful, please consider sponsoring us. Software development and maintenance require a lot of time and effort, and your sponsorship will help us better maintain and improve EasyTier.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/wechat.png" width="200"&gt; &lt;img src="https://raw.githubusercontent.com/EasyTier/EasyTier/main/assets/alipay.png" width="200"&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GyulyVGC/sniffnet</title>
      <link>https://github.com/GyulyVGC/sniffnet</link>
      <description>&lt;p&gt;Comfortably monitor your Internet traffic 🕵️‍♂️&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;img alt="" title="Sniffnet" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/header_repository.png" width="95%"&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/#download"&gt;&lt;img alt="" title="Download" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/download.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/ROADMAP.md"&gt;&lt;img alt="" title="Roadmap" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/roadmap.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://sniffnet.net"&gt;&lt;img alt="" title="Website" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/website.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt;&lt;img alt="" title="Wiki" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/wiki.svg?sanitize=true"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;Application to comfortably monitor your Internet traffic.&lt;br&gt; Cross-platform. Intuitive. Reliable.&lt;/p&gt; 
 &lt;p&gt;Translated in:&lt;br&gt; 🇨🇳 🇩🇪 🇫🇷 🇷🇺 🇵🇹 🇪🇦 🇮🇹 🇵🇱 &lt;a href="https://github.com/GyulyVGC/sniffnet/issues/60"&gt;+&amp;nbsp;14&amp;nbsp;more&amp;nbsp;languages&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;img alt="" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/hr.png" width="100%"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img alt="" title="Overview page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/overview.png" width="95%"&gt; 
 &lt;img alt="" title="Inspect page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/inspect.png" width="47%"&gt; 
 &lt;img alt="" title="Notifications page" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/notifications.png" width="47%"&gt; 
 &lt;img alt="" title="Custom theme" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/deep_cosmos.png" width="47%"&gt; 
 &lt;img alt="" title="Thumbnail mode" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/pages/thumbnail.png" width="47%"&gt; 
&lt;/div&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;img alt="" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/hr.png" width="100%"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;h2&gt;&lt;em&gt;Support Sniffnet's development&lt;/em&gt; 💖&lt;/h2&gt; 
&lt;p&gt;&lt;i&gt;Sniffnet is completely free, open-source software which needs lots of effort and time to develop and maintain.&lt;/i&gt;&lt;/p&gt; 
&lt;p&gt;&lt;i&gt;If you appreciate Sniffnet, &lt;a href="https://github.com/sponsors/GyulyVGC"&gt;consider sponsoring&lt;/a&gt;: your support will enable a constant growth with &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/ROADMAP.md"&gt;new features and functionalities&lt;/a&gt;.&lt;br&gt; Do you want to help the project in an alternative way? You can also head to the &lt;a href="https://grindhouse.dev/collections/sniffnet"&gt;official store&lt;/a&gt; and put your hands on some cool merchandise!&lt;/i&gt;&lt;/p&gt; 
&lt;p&gt;&lt;i&gt;A special mention goes to these awesome organizations and folks who are sponsoring Sniffnet:&lt;/i&gt;&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/github" title="GitHub"&gt;&lt;img src="https://avatars.githubusercontent.com/github?v=4" width="60px" alt="GitHub"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://nlnet.nl" title="NLnet"&gt;&lt;img src="https://nlnet.nl/logo/logo.svg?sanitize=true" width="60px" alt="NLnet"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://ipinfo.io" title="IPinfo"&gt;&lt;img src="https://avatars.githubusercontent.com/ipinfo?v=4" width="60px" alt="IPinfo"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/Cthulu201" title="Cthulu201"&gt;&lt;img src="https://avatars.githubusercontent.com/Cthulu201?v=4" width="60px" alt="Cthulu201"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/0x0177b11f" title="Tiansheng Li"&gt;&lt;img src="https://avatars.githubusercontent.com/0x0177b11f?v=4" width="60px" alt="Tiansheng Li"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/ZEROF" title="ZEROF"&gt;&lt;img src="https://avatars.githubusercontent.com/ZEROF?v=4" width="60px" alt="ZEROF"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://www.janwalter.org/" title="Jan Walter"&gt;&lt;img src="https://avatars.githubusercontent.com/wahn?v=4" width="60px" alt="Jan Walter"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;&lt;a href="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/#download"&gt;&lt;img alt="Windows" title="Windows" height="35px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/windows.svg?sanitize=true"&gt;&lt;/a&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;a href="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/#download"&gt;&lt;img alt="macOS" title="macOS" height="35px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/macos.svg?sanitize=true"&gt;&lt;/a&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;a href="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/#download"&gt;&lt;img alt="Linux (.deb)" title="Linux (.deb)" height="35px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/linux_deb.svg?sanitize=true"&gt;&lt;/a&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;&lt;a href="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/#download"&gt;&lt;img alt="Linux (.rpm)" title="Linux (.rpm)" height="35px" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/linux_rpm.svg?sanitize=true"&gt;&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_Windows_64-bit.msi"&gt;64‑bit&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_Windows_32-bit.msi"&gt;32‑bit&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_macOS_Intel.dmg"&gt;Intel&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_macOS_AppleSilicon.dmg"&gt;Apple&amp;nbsp;silicon&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_amd64.deb"&gt;amd64&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_arm64.deb"&gt;arm64&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_i386.deb"&gt;i386&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxDEB_armhf.deb"&gt;armhf&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxRPM_x86_64.rpm"&gt;x86_64&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/latest/download/Sniffnet_LinuxRPM_aarch64.rpm"&gt;aarch64&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Links in the table above will download the latest version of Sniffnet directly from &lt;a href="https://github.com/GyulyVGC/sniffnet/releases"&gt;GitHub releases&lt;/a&gt;. &lt;br&gt; Not what you're looking for? Check out &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Alternative-installation-methods"&gt;alternative installation methods&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Remember to also install the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Required-dependencies"&gt;required dependencies&lt;/a&gt; for your operating system.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;💻 choose a &lt;strong&gt;network adapter&lt;/strong&gt; of your PC to inspect&lt;/li&gt; 
 &lt;li&gt;🏷️ select a set of &lt;strong&gt;filters&lt;/strong&gt; to apply to the observed traffic&lt;/li&gt; 
 &lt;li&gt;📖 view overall &lt;strong&gt;statistics&lt;/strong&gt; about your Internet traffic&lt;/li&gt; 
 &lt;li&gt;📈 view &lt;strong&gt;real-time charts&lt;/strong&gt; about traffic intensity&lt;/li&gt; 
 &lt;li&gt;📌 keep an eye on your network even when the application is &lt;strong&gt;minimized&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;📁 &lt;strong&gt;import&lt;/strong&gt; and &lt;strong&gt;export&lt;/strong&gt; comprehensive capture reports as &lt;strong&gt;PCAP files&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;🔎 identify &lt;strong&gt;6000+ upper layer services&lt;/strong&gt;, protocols, trojans, and worms&lt;/li&gt; 
 &lt;li&gt;🌐 find out &lt;strong&gt;domain name&lt;/strong&gt; and &lt;strong&gt;ASN&lt;/strong&gt; of the hosts you are exchanging traffic with&lt;/li&gt; 
 &lt;li&gt;🏠 identify connections in your &lt;strong&gt;local network&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;🌍 discover the &lt;strong&gt;geographical location&lt;/strong&gt; of remote hosts&lt;/li&gt; 
 &lt;li&gt;⭐ save your &lt;strong&gt;favorite&lt;/strong&gt; network hosts&lt;/li&gt; 
 &lt;li&gt;🕵️‍♂️ search and &lt;strong&gt;inspect&lt;/strong&gt; each of your network connections in real time&lt;/li&gt; 
 &lt;li&gt;🔉 set custom &lt;strong&gt;notifications&lt;/strong&gt; to inform you when defined network events occur&lt;/li&gt; 
 &lt;li&gt;🎨 choose the &lt;strong&gt;style&lt;/strong&gt; that fits you the most, including custom themes support&lt;/li&gt; 
 &lt;li&gt;...and more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;User manual&lt;/h2&gt; 
&lt;p&gt;Do you want to &lt;strong&gt;learn more&lt;/strong&gt;? &lt;br&gt; Check out the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt;&lt;strong&gt;Sniffnet Wiki&lt;/strong&gt;&lt;/a&gt;, a comprehensive manual to help you thoroughly master the application from a basic setup to the most advanced functionalities. &lt;br&gt; The Wiki includes step-by-step guides, tips, examples of usage, and answers to frequent questions.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki"&gt; &lt;img alt="" title="Sniffnet Wiki" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/logos/wiki/wikilogo.svg?sanitize=true" width="300px"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;See details&lt;/summary&gt; 
 &lt;h3&gt;Missing dependencies&lt;/h3&gt; 
 &lt;p&gt;Most of the errors that may arise are likely due to your system missing dependencies required to correctly analyze a network adapter. &lt;br&gt; Check the &lt;a href="https://github.com/GyulyVGC/sniffnet/wiki/Required-dependencies"&gt;required dependencies page&lt;/a&gt; for instructions on how to proceed depending on your operating system.&lt;/p&gt; 
 &lt;h3&gt;Rendering problems&lt;/h3&gt; 
 &lt;p&gt;In some circumstances, especially if you are running on an old architecture or your graphical drivers are not updated, the &lt;code&gt;wgpu&lt;/code&gt; default renderer used by &lt;a href="https://github.com/iced-rs/iced"&gt;iced&lt;/a&gt; may manifest bugs (the interface glitches, color gradients are unsupported, or some icons are completely black). &lt;br&gt; In these cases you can set an environment variable to switch to the &lt;code&gt;tiny-skia&lt;/code&gt; renderer, a CPU-only software renderer that should work properly on every environment:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-sh"&gt;ICED_BACKEND=tiny-skia
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;em&gt;&lt;strong&gt;In any case, don't hesitate to &lt;a href="https://github.com/GyulyVGC/sniffnet/issues/new/choose"&gt;open an issue&lt;/a&gt;, and I will do my best to help you!&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt; 
&lt;/details&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;A big shout-out to &lt;a href="https://github.com/GyulyVGC/sniffnet/raw/main/CONTRIBUTORS.md"&gt;all the contributors&lt;/a&gt; of Sniffnet!&lt;/li&gt; 
 &lt;li&gt;The graphical user interface has been realized with &lt;a href="https://github.com/iced-rs/iced"&gt;iced&lt;/a&gt;, a cross-platform GUI library for Rust focused on simplicity and type-safety&lt;/li&gt; 
 &lt;li&gt;IP geolocation and ASN data are provided by &lt;a href="https://www.maxmind.com"&gt;MaxMind&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Free code signing for Windows Installer is provided by &lt;a href="https://about.signpath.io/"&gt;SignPath.io&lt;/a&gt;, certificate by &lt;a href="https://signpath.org/"&gt;SignPath Foundation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://ads.fund/token/0xadfc251f8ef00ceaeca2b5c1882dabe5db0833df"&gt;Sniffnet&lt;/a&gt; project is supported by ADS.FUND&lt;/li&gt; 
 &lt;li&gt;Last but not least, thanks to &lt;a href="https://github.com/GyulyVGC/sniffnet/stargazers"&gt;every single stargazer&lt;/a&gt;: all forms of support made it possible to keep improving Sniffnet!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Stay in the loop&lt;/h2&gt; 
&lt;p&gt;Wait... there's more!&lt;br&gt;Sniffnet is rapidly evolving, and new features are added on a regular basis.&lt;br&gt; Follow the &lt;a href="https://sniffnet.net/news"&gt;&lt;b&gt;news&lt;/b&gt;&lt;/a&gt; and Sniffnet socials to never miss an update.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://bsky.app/profile/sniffnet.net"&gt;&lt;img width="48" height="48" alt="Bluesky" title="Bluesky" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/bluesky.svg?sanitize=true"&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://www.linkedin.com/company/sniffnet"&gt;&lt;img width="48" height="48" alt="LinkedIn" title="LinkedIn" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/linkedin.svg?sanitize=true"&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://mastodon.social/@sniffnet"&gt;&lt;img width="48" height="48" alt="Mastodon" title="Mastodon" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/mastodon.svg?sanitize=true"&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://t.me/sniffnet"&gt;&lt;img width="48" height="48" alt="Telegram" title="Telegram" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/telegram.svg?sanitize=true"&gt;&lt;/a&gt;&amp;nbsp; 
 &lt;a href="https://x.com/sniffnet"&gt;&lt;img width="48" height="48" alt="Twitter / X" title="Twitter / X" src="https://raw.githubusercontent.com/GyulyVGC/sniffnet/main/resources/repository/badges/x.svg?sanitize=true"&gt;&lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>smallcloudai/refact</title>
      <link>https://github.com/smallcloudai/refact</link>
      <description>&lt;p&gt;AI Agent that handles engineering tasks end-to-end: integrates with developers’ tools, plans, executes, and iterates until it achieves a successful result.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name="readme-top"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://docs.refact.ai/_astro/logo-dark.CCzD55EA.svg"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://docs.refact.ai/_astro/logo-light.CblxRz3x.svg"&gt; 
  &lt;!-- Fallback if neither preference is set --&gt; 
  &lt;img alt="Refact.ai logo" src="https://docs.refact.ai/_astro/logo-dark.CCzD55EA.svg?sanitize=true" width="200"&gt; 
 &lt;/picture&gt; 
 &lt;h1 align="center"&gt;Refact - Open Sourced AI Software Development Agent&lt;/h1&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://github.com/smallcloudai/refact/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/smallcloudai/refact?style=for-the-badge&amp;amp;color=blue" alt="Stargazers"&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/Kts7CYg99R"&gt;&lt;img src="https://img.shields.io/badge/Discord-Join%20Us-purple?logo=discord&amp;amp;logoColor=white&amp;amp;style=for-the-badge" alt="Join our Discord community"&gt;&lt;/a&gt; 
 &lt;a href="https://docs.refact.ai"&gt;&lt;img src="https://img.shields.io/badge/documentation-blue?logo=googledocs&amp;amp;logoColor=FFE165&amp;amp;style=for-the-badge" alt="Check out the documentation"&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Refact.ai is the #1 open-source AI Agent in SWE-bench verified that handles engineering tasks end-to-end. It deeply understands your codebases and integrates with your tools, databases, and browsers to automate complex, multi-step tasks.&lt;/p&gt; 
&lt;h2&gt;🚀 Seamless Integration with Your Workflow&lt;/h2&gt; 
&lt;p&gt;Refact Agent works effortlessly with the tools and databases you already use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;📁 Version Control:&lt;/strong&gt; GitHub, GitLab&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🗄️ Databases:&lt;/strong&gt; PostgreSQL, MySQL&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🛠️ Debugging:&lt;/strong&gt; Pdb&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;🐳 Containerization:&lt;/strong&gt; Docker&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;⚡ Why Choose Refact Agent?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;✅ &lt;strong&gt;Deploy On-Premise:&lt;/strong&gt; For maximum security, choose our self-hosted AI Agent version and run it on your own infrastructure.&lt;/li&gt; 
 &lt;li&gt;🧠 &lt;strong&gt;Access State-of-the-Art Models:&lt;/strong&gt; Use Claude 4, GPT-4o, or GPT-4o mini with AI Agent or for chat queries.&lt;/li&gt; 
 &lt;li&gt;🔑 &lt;strong&gt;Bring Your Own Key (BYOK):&lt;/strong&gt; Connect your API key and use any LLM: Gemini, Grok, OpenAI, Deepseek, and others.&lt;/li&gt; 
 &lt;li&gt;💬 &lt;strong&gt;Integrated IDE Chat:&lt;/strong&gt; Integrate with GitHub, PostgreSQL, Docker, and more. Refact.ai Agent accesses your resources and handles related operations autonomously, mimicking your workflow.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Free, Unlimited, Context-Aware Auto-Completion:&lt;/strong&gt; Code faster with smart AI suggestions.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Supports 25+ Programming Languages:&lt;/strong&gt; Python, JavaScript, Java, Rust, TypeScript, PHP, C++, C#, Go, and many more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🎉 Hear from our Community&lt;/h3&gt; 
&lt;p&gt;Our Ambassadors shared remarkable stories of how they transform weeks of coding into minutes with Refact.ai Agent!&lt;/p&gt; 
&lt;p&gt;1️. How Refact.ai built 99.9% of an IoT cloud app &lt;a href="https://www.linkedin.com/posts/refactai_refactai-agent-activity-7308103386451578881-FO23/"&gt;Read&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2️. How AI-coded prototypes help UX teams deliver real value &lt;a href="https://medium.com/@siarheimardovich/how-ai-coded-prototypes-help-ux-teams-deliver-real-value-b51eb2ea5167"&gt;Read&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;3️. 80 hours of building from scratch — instead done in 30 minutes &lt;a href="https://www.linkedin.com/posts/refactai_refactai-users-stories-activity-7310996174864289793-692-/"&gt;Read more&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;4️. 3 weeks of waiting for a functional GUI? Built in just 14 minutes &lt;a href="https://www.linkedin.com/posts/refactai_refactai-users-stories-activity-7310996174864289793-692-/"&gt;Read more&lt;/a&gt;&lt;/p&gt; 
&lt;ol start="5"&gt; 
 &lt;li&gt;Built an automated SEO Content Generator in 60 minutes with Refact.ai &lt;a href="https://refact.ai/blog/2025/automated-seo-content-generator-in-60-minutes/"&gt;Read more&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;📜 &lt;a href="https://docs.refact.ai/supported-models/"&gt;View Full List of Supported Models&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;📢 &lt;strong&gt;Using AI for work? Let’s bring it to your company!&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://refact.ai/contact/?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=enterprise"&gt;Fill out this form&lt;/a&gt; — Our AI Agent will be tailored to your company’s data, learning from feedback, and helping organize knowledge for &lt;strong&gt;better collaboration&lt;/strong&gt; with your team.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;📚 Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 &lt;a href="https://raw.githubusercontent.com/smallcloudai/refact/main/#-core-features-and-functionality"&gt;Core Features and Functionality&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🤖 &lt;a href="https://raw.githubusercontent.com/smallcloudai/refact/main/#-which-tasks-can-refact-help-you-with"&gt;Which Tasks Can Refact Help You With?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;⚙️ &lt;a href="https://raw.githubusercontent.com/smallcloudai/refact/main/#%EF%B8%8F-quickstart"&gt;QuickStart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🐳 &lt;a href="https://raw.githubusercontent.com/smallcloudai/refact/main/#-running-refact-self-hosted-in-a-docker-container"&gt;Running Refact Self-Hosted in a Docker Container&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🔌 &lt;a href="https://raw.githubusercontent.com/smallcloudai/refact/main/#-getting-started-with-plugins"&gt;Getting Started with Plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📖 &lt;a href="https://raw.githubusercontent.com/smallcloudai/refact/main/#-documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🥇 &lt;a href="https://raw.githubusercontent.com/smallcloudai/refact/main/#-contribution"&gt;Contribution&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎉 &lt;a href="https://raw.githubusercontent.com/smallcloudai/refact/main/#-join-the-community"&gt;Join the Community&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Core Features and Functionality&lt;/h2&gt; 
&lt;p&gt;✅ &lt;strong&gt;Unlimited accurate auto-completion&lt;/strong&gt; with context awareness – Powered by Qwen2.5-Coder-1.5B, utilizing Retrieval-Augmented Generation (RAG).&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXfClhl11Ul0YQjDTZJvrfhsj3bqK_VIz6bFfbTRc62dsMOz4LK4u72i9-gLTQDIgm0yChmFe57hvUxSoI2fQ5DSntna7_Ch0qbGx5zcB-othfwKnoYkbt3M3YgGFlrqFszuDEBhUw?key=zllGjEBckkx13bRZ6JIqX6qr" alt="auto-completion"&gt;&lt;/p&gt; 
&lt;p&gt;✅ &lt;strong&gt;Integrated in-IDE Chat&lt;/strong&gt; – AI deeply understands your code and provides relevant, intelligent answers.&lt;/p&gt; 
&lt;p&gt;✅ &lt;strong&gt;Integrated with Tools&lt;/strong&gt; – Works with GitHub, GitLab, PostgreSQL, MySQL, Pdb, Docker, and shell commands.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXc4DWYXF73AgPWAaFFGLTqEprWwA0im8R_A1QMo4QW4pTnSi1MCoP9L8udMZb5FPyN-CdgefaxJFGpX2ndn5nkjGBF2b_hZBNHogM7IM6SPvUIvUd9iE1lYIq7q-TB2qKzSGLk00A?key=zllGjEBckkx13bRZ6JIqX6qr" alt="integrations"&gt;&lt;/p&gt; 
&lt;p&gt;✅ &lt;strong&gt;State-of-the-Art Models&lt;/strong&gt; – Use Claude 4, GPT-4o, or GPT-4o mini with AI Agent or for chat queries.&lt;/p&gt; 
&lt;p&gt;✅ &lt;strong&gt;Bring Your Own Key (BYOK)&lt;/strong&gt; – Use your own API keys for external LLMs.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXe1UDsuaER6WMxAnKEwz15T3OPslkpSo2vNGMGaNoEiZOJvAptY8yEvND_rI23q_5Sof1DceexyrW5x6oUwcpVr5KQvWUByrN_TnLGVY2HG_0sg8uWnRb14jKAes2MBDPM37EQO?key=zllGjEBckkx13bRZ6JIqX6qr" alt="BYOK"&gt;&lt;/p&gt; 
&lt;h2&gt;🤖 Which Tasks Can Refact Help You With?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;🏗 &lt;strong&gt;Generate code&lt;/strong&gt; from natural language prompts (even with typos).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🔄 &lt;strong&gt;Refactor code&lt;/strong&gt; for better quality and readability.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;📖 &lt;strong&gt;Explain code&lt;/strong&gt; to quickly understand unfamiliar code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🐞 &lt;strong&gt;Debug code&lt;/strong&gt; to detect and fix errors faster.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🧪 &lt;strong&gt;Generate unit tests&lt;/strong&gt; for reliable code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;📌 &lt;strong&gt;Code Review&lt;/strong&gt; with AI-assisted suggestions.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;📜 &lt;strong&gt;Create Documentation&lt;/strong&gt; to keep knowledge up to date.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;🏷 &lt;strong&gt;Generate Docstrings&lt;/strong&gt; for structured documentation.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;⚙️ QuickStart&lt;/h2&gt; 
&lt;p&gt;You can install the Refact repository without Docker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For GPU with CUDA capability &amp;gt;= 8.0 and flash-attention v2 support:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;FLASH_ATTENTION_FORCE_BUILD=TRUE MAX_JOBS=4 INSTALL_OPTIONAL=TRUE pip install .
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;🐳 Running Refact Self-Hosted in a Docker Container&lt;/h2&gt; 
&lt;p&gt;The easiest way to run the self-hosted server is using a pre-built Docker image.&lt;br&gt; See &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; for installation without a Docker container.&lt;/p&gt; 
&lt;h3&gt;🔌 Getting Started with Plugins&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Download Refact&lt;/strong&gt; for VS Code or JetBrains.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Set up a custom inference URL:&lt;/strong&gt; &lt;pre&gt;&lt;code&gt;http://127.0.0.1:8008
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configure the plugin settings:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;JetBrains:&lt;/strong&gt; Settings &amp;gt; Tools &amp;gt; Refact.ai &amp;gt; Advanced &amp;gt; Inference URL&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;VSCode:&lt;/strong&gt; Extensions &amp;gt; Refact.ai Assistant &amp;gt; Settings &amp;gt; Address URL&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;For detailed guidance and best practices, check out our &lt;a href="https://docs.refact.ai/"&gt;documentation.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;🥇 Contribution&lt;/h2&gt; 
&lt;p&gt;Want to contribute to our project? We're always open to new ideas and features!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Check out GitHub Issues&lt;/strong&gt; – See what we're working on or suggest your own ideas.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Read our Contributing Guide&lt;/strong&gt; – Check out &lt;code&gt;Contributing.md&lt;/code&gt; to get started.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Your contributions help shape the future of Refact Agent! 🚀&lt;/p&gt; 
&lt;h3&gt;⭐ Star History&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/48440c6e-b0cd-4421-880e-44924bd21693" alt="image (4)"&gt;&lt;/p&gt; 
&lt;h3&gt;🎉 Join the Community&lt;/h3&gt; 
&lt;p&gt;We're all about open-source and empowering developers with AI tools. Our vision is to build the future of programming. Join us and be part of the journey!&lt;/p&gt; 
&lt;p&gt;📢 &lt;strong&gt;&lt;a href="https://refact.ai/community/"&gt;Join our Discord server&lt;/a&gt;&lt;/strong&gt; – A community-run space for discussion, questions, and feedback.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Made with ❤️ by developers who automate the boring, so you can focus on building the future.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>casey/just</title>
      <link>https://github.com/casey/just</link>
      <description>&lt;p&gt;🤖 Just a command runner&lt;/p&gt;&lt;hr&gt;&lt;div align="right"&gt;
 Table of Contents↗️
&lt;/div&gt; 
&lt;h1 align="center"&gt;&lt;code&gt;just&lt;/code&gt;&lt;/h1&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://crates.io/crates/just"&gt; &lt;img src="https://img.shields.io/crates/v/just.svg?sanitize=true" alt="crates.io version"&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/casey/just/actions/workflows/ci.yaml"&gt; &lt;img src="https://github.com/casey/just/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="build status"&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/casey/just/releases"&gt; &lt;img src="https://img.shields.io/github/downloads/casey/just/total.svg?sanitize=true" alt="downloads"&gt; &lt;/a&gt; 
 &lt;a href="https://discord.gg/ezYScXR"&gt; &lt;img src="https://img.shields.io/discord/695580069837406228?logo=discord" alt="chat on discord"&gt; &lt;/a&gt; 
 &lt;a href="mailto:casey@rodarmor.com?subject=Thanks%20for%20Just!"&gt; &lt;img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg?sanitize=true" alt="say thanks"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a handy way to save and run project-specific commands.&lt;/p&gt; 
&lt;p&gt;This readme is also available as a &lt;a href="https://just.systems/man/en/"&gt;book&lt;/a&gt;. The book reflects the latest release, whereas the &lt;a href="https://github.com/casey/just/raw/master/README.md"&gt;readme on GitHub&lt;/a&gt; reflects latest master.&lt;/p&gt; 
&lt;p&gt;(中文文档在 &lt;a href="https://github.com/casey/just/raw/master/README.%E4%B8%AD%E6%96%87.md"&gt;这里&lt;/a&gt;, 快看过来!)&lt;/p&gt; 
&lt;p&gt;Commands, called recipes, are stored in a file called &lt;code&gt;justfile&lt;/code&gt; with syntax inspired by &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/casey/just/master/screenshot.png" alt="screenshot"&gt;&lt;/p&gt; 
&lt;p&gt;You can then run them with &lt;code&gt;just RECIPE&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test-all
cc *.c -o main
./test --all
Yay, all your tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; has a ton of useful features, and many improvements over &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a command runner, not a build system, so it avoids much of &lt;a href="https://raw.githubusercontent.com/casey/just/master/#what-are-the-idiosyncrasies-of-make-that-just-avoids"&gt;&lt;code&gt;make&lt;/code&gt;'s complexity and idiosyncrasies&lt;/a&gt;. No need for &lt;code&gt;.PHONY&lt;/code&gt; recipes!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Linux, MacOS, Windows, and other reasonable unices are supported with no additional dependencies. (Although if your system doesn't have an &lt;code&gt;sh&lt;/code&gt;, you'll need to &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shell"&gt;choose a different shell&lt;/a&gt;.)&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Errors are specific and informative, and syntax errors are reported along with their source context.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can accept &lt;a href="https://raw.githubusercontent.com/casey/just/master/#recipe-parameters"&gt;command line arguments&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wherever possible, errors are resolved statically. Unknown recipes and circular dependencies are reported before anything runs.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/casey/just/master/#dotenv-settings"&gt;loads &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;, making it easy to populate environment variables.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can be &lt;a href="https://raw.githubusercontent.com/casey/just/master/#listing-available-recipes"&gt;listed from the command line&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Command line completion scripts are &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shell-completion-scripts"&gt;available for most popular shells&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Recipes can be written in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#shebang-recipes"&gt;arbitrary languages&lt;/a&gt;, like Python or NodeJS.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; can be invoked from any subdirectory, not just the directory that contains the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;And &lt;a href="https://just.systems/man/en/"&gt;much more&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you need help with &lt;code&gt;just&lt;/code&gt; please feel free to open an issue or ping me on &lt;a href="https://discord.gg/ezYScXR"&gt;Discord&lt;/a&gt;. Feature requests and bug reports are always welcome!&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; should run on any system with a reasonable &lt;code&gt;sh&lt;/code&gt;, including Linux, MacOS, and the BSDs.&lt;/p&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, &lt;code&gt;just&lt;/code&gt; works with the &lt;code&gt;sh&lt;/code&gt; provided by &lt;a href="https://git-scm.com"&gt;Git for Windows&lt;/a&gt;, &lt;a href="https://desktop.github.com"&gt;GitHub Desktop&lt;/a&gt;, or &lt;a href="http://www.cygwin.com"&gt;Cygwin&lt;/a&gt;. After installation, &lt;code&gt;sh&lt;/code&gt; must be available in the &lt;code&gt;PATH&lt;/code&gt; of the shell you want to to invoke &lt;code&gt;just&lt;/code&gt; from.&lt;/p&gt; 
&lt;p&gt;If you'd rather not install &lt;code&gt;sh&lt;/code&gt;, you can use the &lt;code&gt;shell&lt;/code&gt; setting to use the shell of your choice.&lt;/p&gt; 
&lt;p&gt;Like PowerShell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use PowerShell instead of sh:
set shell := ["powershell.exe", "-c"]

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;…or &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use cmd.exe instead of sh:
set shell := ["cmd.exe", "/c"]

list:
  dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also set the shell using command-line arguments. For example, to use PowerShell, launch &lt;code&gt;just&lt;/code&gt; with &lt;code&gt;--shell powershell.exe --shell-arg -c&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;(PowerShell is installed by default on Windows 7 SP1 and Windows Server 2008 R2 S1 and later, and &lt;code&gt;cmd.exe&lt;/code&gt; is quite fiddly, so PowerShell is recommended for most Windows users.)&lt;/p&gt; 
&lt;h3&gt;Packages&lt;/h3&gt; 
&lt;h4&gt;Cross-platform&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/alexellis/arkade"&gt;arkade&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;just&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;arkade get just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/olofvndrhr/asdf-just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;asdf plugin add just&lt;/code&gt;&lt;br&gt; &lt;code&gt;asdf install just &amp;lt;version&amp;gt;&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.rust-lang.org"&gt;Cargo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;cargo install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://docs.conda.io/projects/conda/en/latest/index.html"&gt;Conda&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://anaconda.org/conda-forge/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;conda install -c conda-forge just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://formulae.brew.sh/formula/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;brew install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nix/"&gt;Nix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/ju/just/package.nix"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.npmjs.com/package/rust-just"&gt;rust-just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;npm install -g rust-just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://pipx.pypa.io/stable/"&gt;pipx&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://pypi.org/project/rust-just/"&gt;rust-just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pipx install rust-just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://snapcraft.io"&gt;Snap&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://snapcraft.io/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;snap install --edge --classic just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;BSD&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operating System&lt;/th&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.freebsd.org"&gt;FreeBSD&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.freebsd.org/doc/handbook/pkgng-intro.html"&gt;pkg&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://www.freshports.org/deskutils/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pkg install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Operating System&lt;/th&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://alpinelinux.org"&gt;Alpine&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management"&gt;apk-tools&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://pkgs.alpinelinux.org/package/edge/community/x86_64/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;apk add just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.archlinux.org"&gt;Arch&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.archlinux.org/title/Pacman"&gt;pacman&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://archlinux.org/packages/extra/x86_64/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;pacman -S just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;a href="https://debian.org"&gt;Debian 13 (unreleased)&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu 24.04&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/APT_(software)"&gt;apt&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://packages.debian.org/trixie/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;apt install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://debian.org"&gt;Debian&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org"&gt;MPR&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org/packages/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;git clone https://mpr.makedeb.org/just&lt;/code&gt;&lt;br&gt; &lt;code&gt;cd just&lt;/code&gt;&lt;br&gt; &lt;code&gt;makedeb -si&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://debian.org"&gt;Debian&lt;/a&gt; and &lt;a href="https://ubuntu.com"&gt;Ubuntu&lt;/a&gt; derivatives&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.makedeb.org/prebuilt-mpr"&gt;Prebuilt-MPR&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://mpr.makedeb.org/packages/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;sup&gt;&lt;b&gt;You must have the &lt;a href="https://docs.makedeb.org/prebuilt-mpr/getting-started/#setting-up-the-repository"&gt;Prebuilt-MPR set up&lt;/a&gt; on your system in order to run this command.&lt;/b&gt;&lt;/sup&gt;&lt;br&gt; &lt;code&gt;apt install just&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://getfedora.org"&gt;Fedora&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://dnf.readthedocs.io/en/latest/"&gt;DNF&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://src.fedoraproject.org/rpms/rust-just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;dnf install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.gentoo.org"&gt;Gentoo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.gentoo.org/wiki/Portage"&gt;Portage&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/gentoo-mirror/guru/tree/master/dev-build/just"&gt;guru/dev-build/just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;eselect repository enable guru&lt;/code&gt;&lt;br&gt; &lt;code&gt;emerge --sync guru&lt;/code&gt;&lt;br&gt; &lt;code&gt;emerge dev-build/just&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nixos/"&gt;NixOS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://nixos.org/nix/"&gt;Nix&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/NixOS/nixpkgs/raw/master/pkgs/by-name/ju/just/package.nix"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nix-env -iA nixos.just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://opensuse.org"&gt;openSUSE&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://en.opensuse.org/Portal:Zypper"&gt;Zypper&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://build.opensuse.org/package/show/Base:System/just"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;zypper in just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://getsol.us"&gt;Solus&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://getsol.us/articles/package-management/basics/en"&gt;eopkg&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://dev.getsol.us/source/just/"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;eopkg install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://voidlinux.org"&gt;Void&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://wiki.voidlinux.org/XBPS"&gt;XBPS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/void-linux/void-packages/raw/master/srcpkgs/just/template"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;xbps-install -S just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/michidk/just-choco"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;choco install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://scoop.sh"&gt;Scoop&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ScoopInstaller/Main/raw/master/bucket/just.json"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;scoop install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/"&gt;Windows Package Manager&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/microsoft/winget-pkgs/tree/master/manifests/c/Casey/Just"&gt;Casey/Just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;winget install --id Casey.Just --exact&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Package Manager&lt;/th&gt; 
   &lt;th&gt;Package&lt;/th&gt; 
   &lt;th&gt;Command&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://www.macports.org"&gt;MacPorts&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://ports.macports.org/port/just/summary"&gt;just&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;port install just&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/just.svg?sanitize=true" alt="just package version table"&gt;&lt;/p&gt; 
&lt;h3&gt;Pre-Built Binaries&lt;/h3&gt; 
&lt;p&gt;Pre-built binaries for Linux, MacOS, and Windows can be found on &lt;a href="https://github.com/casey/just/releases"&gt;the releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can use the following command on Linux, MacOS, or Windows to download the latest release, just replace &lt;code&gt;DEST&lt;/code&gt; with the directory where you'd like to put &lt;code&gt;just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to DEST
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, to install &lt;code&gt;just&lt;/code&gt; to &lt;code&gt;~/bin&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# create ~/bin
mkdir -p ~/bin

# download and extract just to ~/bin/just
curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin

# add `~/bin` to the paths that your shell searches for executables
# this line should be added to your shells initialization file,
# e.g. `~/.bashrc` or `~/.zshrc`
export PATH="$PATH:$HOME/bin"

# just should now be executable
just --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;install.sh&lt;/code&gt; may fail on GitHub Actions, or in other environments where many machines share IP addresses. &lt;code&gt;install.sh&lt;/code&gt; calls GitHub APIs in order to determine the latest version of &lt;code&gt;just&lt;/code&gt; to install, and those API calls are rate-limited on a per-IP basis. To make &lt;code&gt;install.sh&lt;/code&gt; more reliable in such circumstances, pass a specific tag to install with &lt;code&gt;--tag&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Another way to avoid rate-limiting is to pass a GitHub authentication token to &lt;code&gt;install.sh&lt;/code&gt; as an environment variable named &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;, allowing it to authenticate its requests.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/casey/just/releases"&gt;Releases&lt;/a&gt; include a &lt;code&gt;SHA256SUM&lt;/code&gt; file which can be used to verify the integrity of pre-built binary archives.&lt;/p&gt; 
&lt;p&gt;To verify a release, download the pre-built binary archive along with the &lt;code&gt;SHA256SUM&lt;/code&gt; file and run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;shasum --algorithm 256 --ignore-missing --check SHA256SUMS
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GitHub Actions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can be installed on GitHub Actions in a few ways.&lt;/p&gt; 
&lt;p&gt;Using package managers pre-installed on GitHub Actions runners on MacOS with &lt;code&gt;brew install just&lt;/code&gt;, and on Windows with &lt;code&gt;choco install just&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;With &lt;a href="https://github.com/extractions/setup-just"&gt;extractions/setup-just&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- uses: extractions/setup-just@v3
  with:
    just-version: 1.5.0  # optional semver specification, otherwise latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with &lt;a href="https://github.com/taiki-e/install-action"&gt;taiki-e/install-action&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;- uses: taiki-e/install-action@just
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Release RSS Feed&lt;/h3&gt; 
&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS feed&lt;/a&gt; of &lt;code&gt;just&lt;/code&gt; releases is available &lt;a href="https://github.com/casey/just/releases.atom"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Node.js Installation&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://npmjs.com/package/just-install"&gt;just-install&lt;/a&gt; can be used to automate installation of &lt;code&gt;just&lt;/code&gt; in Node.js applications.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a great, more robust alternative to npm scripts. If you want to include &lt;code&gt;just&lt;/code&gt; in the dependencies of a Node.js application, &lt;code&gt;just-install&lt;/code&gt; will install a local, platform-specific binary as part of the &lt;code&gt;npm install&lt;/code&gt; command. This removes the need for every developer to install &lt;code&gt;just&lt;/code&gt; independently using one of the processes mentioned above. After installation, the &lt;code&gt;just&lt;/code&gt; command will work in npm scripts or with npx. It's great for teams who want to make the set up process for their project as easy as possible.&lt;/p&gt; 
&lt;p&gt;For more information, see the &lt;a href="https://github.com/brombal/just-install#readme"&gt;just-install README file&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Backwards Compatibility&lt;/h2&gt; 
&lt;p&gt;With the release of version 1.0, &lt;code&gt;just&lt;/code&gt; features a strong commitment to backwards compatibility and stability.&lt;/p&gt; 
&lt;p&gt;Future releases will not introduce backwards incompatible changes that make existing &lt;code&gt;justfile&lt;/code&gt;s stop working, or break working invocations of the command-line interface.&lt;/p&gt; 
&lt;p&gt;This does not, however, preclude fixing outright bugs, even if doing so might break &lt;code&gt;justfiles&lt;/code&gt; that rely on their behavior.&lt;/p&gt; 
&lt;p&gt;There will never be a &lt;code&gt;just&lt;/code&gt; 2.0. Any desirable backwards-incompatible changes will be opt-in on a per-&lt;code&gt;justfile&lt;/code&gt; basis, so users may migrate at their leisure.&lt;/p&gt; 
&lt;p&gt;Features that aren't yet ready for stabilization are marked as unstable and may be changed or removed at any time. Using unstable features produces an error by default, which can be suppressed with by passing the &lt;code&gt;--unstable&lt;/code&gt; flag, &lt;code&gt;set unstable&lt;/code&gt;, or setting the environment variable &lt;code&gt;JUST_UNSTABLE&lt;/code&gt;, to any value other than &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or the empty string.&lt;/p&gt; 
&lt;h2&gt;Editor Support&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;justfile&lt;/code&gt; syntax is close enough to &lt;code&gt;make&lt;/code&gt; that you may want to tell your editor to use &lt;code&gt;make&lt;/code&gt; syntax highlighting for &lt;code&gt;just&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Vim and Neovim&lt;/h3&gt; 
&lt;p&gt;Vim version 9.1.1042 or better and Neovim version 0.11 or better support Justfile syntax highlighting out of the box, thanks to &lt;a href="https://github.com/pbnj"&gt;pbnj&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;vim-just&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;The &lt;a href="https://github.com/NoahTheDuke/vim-just"&gt;vim-just&lt;/a&gt; plugin provides syntax highlighting for &lt;code&gt;justfile&lt;/code&gt;s.&lt;/p&gt; 
&lt;p&gt;Install it with your favorite package manager, like &lt;a href="https://github.com/junegunn/vim-plug"&gt;Plug&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-vim"&gt;call plug#begin()

Plug 'NoahTheDuke/vim-just'

call plug#end()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with Vim's built-in package support:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;mkdir -p ~/.vim/pack/vendor/start
cd ~/.vim/pack/vendor/start
git clone https://github.com/NoahTheDuke/vim-just.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;tree-sitter-just&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;a href="https://github.com/IndianBoy42/tree-sitter-just"&gt;tree-sitter-just&lt;/a&gt; is an &lt;a href="https://github.com/nvim-treesitter/nvim-treesitter"&gt;Nvim Treesitter&lt;/a&gt; plugin for Neovim.&lt;/p&gt; 
&lt;h4&gt;Makefile Syntax Highlighting&lt;/h4&gt; 
&lt;p&gt;Vim's built-in makefile syntax highlighting isn't perfect for &lt;code&gt;justfile&lt;/code&gt;s, but it's better than nothing. You can put the following in &lt;code&gt;~/.vim/filetype.vim&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-vimscript"&gt;if exists("did_load_filetypes")
  finish
endif

augroup filetypedetect
  au BufNewFile,BufRead justfile setf make
augroup END
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or add the following to an individual &lt;code&gt;justfile&lt;/code&gt; to enable &lt;code&gt;make&lt;/code&gt; mode on a per-file basis:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;# vim: set ft=make :
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Emacs&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/leon-barrett/just-mode.el"&gt;just-mode&lt;/a&gt; provides syntax highlighting and automatic indentation of &lt;code&gt;justfile&lt;/code&gt;s. It is available on &lt;a href="https://melpa.org/"&gt;MELPA&lt;/a&gt; as &lt;a href="https://melpa.org/#/just-mode"&gt;just-mode&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/psibi/justl.el"&gt;justl&lt;/a&gt; provides commands for executing and listing recipes.&lt;/p&gt; 
&lt;p&gt;You can add the following to an individual &lt;code&gt;justfile&lt;/code&gt; to enable &lt;code&gt;make&lt;/code&gt; mode on a per-file basis:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;# Local Variables:
# mode: makefile
# End:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Visual Studio Code&lt;/h3&gt; 
&lt;p&gt;An extension for VS Code is &lt;a href="https://github.com/nefrob/vscode-just"&gt;available here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unmaintained VS Code extensions include &lt;a href="https://github.com/skellock/vscode-just"&gt;skellock/vscode-just&lt;/a&gt; and &lt;a href="https://github.com/sclu1034/vscode-just"&gt;sclu1034/vscode-just&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;JetBrains IDEs&lt;/h3&gt; 
&lt;p&gt;A plugin for JetBrains IDEs by &lt;a href="https://github.com/linux-china"&gt;linux_china&lt;/a&gt; is &lt;a href="https://plugins.jetbrains.com/plugin/18658-just"&gt;available here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Kakoune&lt;/h3&gt; 
&lt;p&gt;Kakoune supports &lt;code&gt;justfile&lt;/code&gt; syntax highlighting out of the box, thanks to TeddyDD.&lt;/p&gt; 
&lt;h3&gt;Helix&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://helix-editor.com/"&gt;Helix&lt;/a&gt; supports &lt;code&gt;justfile&lt;/code&gt; syntax highlighting out-of-the-box since version 23.05.&lt;/p&gt; 
&lt;h3&gt;Sublime Text&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://github.com/nk9/just_sublime"&gt;Just package&lt;/a&gt; by &lt;a href="https://github.com/nk9"&gt;nk9&lt;/a&gt; with &lt;code&gt;just&lt;/code&gt; syntax and some other tools is available on &lt;a href="https://packagecontrol.io/packages/Just"&gt;PackageControl&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Micro&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://micro-editor.github.io/"&gt;Micro&lt;/a&gt; supports Justfile syntax highlighting out of the box, thanks to &lt;a href="https://github.com/tomodachi94"&gt;tomodachi94&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Zed&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="https://github.com/jackTabsCode/zed-just/"&gt;zed-just&lt;/a&gt; extension by &lt;a href="https://github.com/jackTabsCode"&gt;jackTabsCode&lt;/a&gt; is avilable on the &lt;a href="https://zed.dev/extensions?query=just"&gt;Zed extensions page&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Other Editors&lt;/h3&gt; 
&lt;p&gt;Feel free to send me the commands necessary to get syntax highlighting working in your editor of choice so that I may include them here.&lt;/p&gt; 
&lt;h3&gt;Model Context Protocol&lt;/h3&gt; 
&lt;p&gt;&lt;a href="http://github.com/promptexecution/just-mcp"&gt;just-mcp&lt;/a&gt; provides a &lt;a href="https://en.wikipedia.org/wiki/Model_Context_Protocol"&gt;model context protocol&lt;/a&gt; adapter to allow LLMs to query the contents of &lt;code&gt;justfiles&lt;/code&gt; and run recipes.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;See the installation section for how to install &lt;code&gt;just&lt;/code&gt; on your computer. Try running &lt;code&gt;just --version&lt;/code&gt; to make sure that it's installed correctly.&lt;/p&gt; 
&lt;p&gt;For an overview of the syntax, check out &lt;a href="https://cheatography.com/linux-china/cheat-sheets/justfile/"&gt;this cheatsheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once &lt;code&gt;just&lt;/code&gt; is installed and working, create a file named &lt;code&gt;justfile&lt;/code&gt; in the root of your project with the following contents:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe-name:
  echo 'This is a recipe!'

# this is a comment
another-recipe:
  @echo 'This is another recipe.'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you invoke &lt;code&gt;just&lt;/code&gt; it looks for file &lt;code&gt;justfile&lt;/code&gt; in the current directory and upwards, so you can invoke it from any subdirectory of your project.&lt;/p&gt; 
&lt;p&gt;The search for a &lt;code&gt;justfile&lt;/code&gt; is case insensitive, so any case, like &lt;code&gt;Justfile&lt;/code&gt;, &lt;code&gt;JUSTFILE&lt;/code&gt;, or &lt;code&gt;JuStFiLe&lt;/code&gt;, will work. &lt;code&gt;just&lt;/code&gt; will also look for files with the name &lt;code&gt;.justfile&lt;/code&gt;, in case you'd like to hide a &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Running &lt;code&gt;just&lt;/code&gt; with no arguments runs the first recipe in the &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
echo 'This is a recipe!'
This is a recipe!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One or more arguments specify the recipe(s) to run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just another-recipe
This is another recipe.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; prints each command to standard error before running it, which is why &lt;code&gt;echo 'This is a recipe!'&lt;/code&gt; was printed. This is suppressed for lines starting with &lt;code&gt;@&lt;/code&gt;, which is why &lt;code&gt;echo 'This is another recipe.'&lt;/code&gt; was not printed.&lt;/p&gt; 
&lt;p&gt;Recipes stop running if a command fails. Here &lt;code&gt;cargo publish&lt;/code&gt; will only run if &lt;code&gt;cargo test&lt;/code&gt; succeeds:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;publish:
  cargo test
  # tests passed, time to publish!
  cargo publish
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes can depend on other recipes. Here the &lt;code&gt;test&lt;/code&gt; recipe depends on the &lt;code&gt;build&lt;/code&gt; recipe, so &lt;code&gt;build&lt;/code&gt; will run before &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c foo.c bar.c -o main

test: build
  ./test

sloc:
  @echo "`wc -l *.c` lines of code"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test
cc main.c foo.c bar.c -o main
./test
testing… all tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes without dependencies will run in the order they're given on the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build sloc
cc main.c foo.c bar.c -o main
1337 lines of code
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Dependencies will always run first, even if they are passed after a recipe that depends on them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test build
cc main.c foo.c bar.c -o main
./test
testing… all tests passed!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes may depend on recipes in submodules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo

baz: foo::bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;A variety of &lt;code&gt;justfile&lt;/code&gt;s can be found in the &lt;a href="https://github.com/casey/just/tree/master/examples"&gt;examples directory&lt;/a&gt; and on &lt;a href="https://github.com/search?q=path%3A**%2Fjustfile&amp;amp;type=code"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;The Default Recipe&lt;/h3&gt; 
&lt;p&gt;When &lt;code&gt;just&lt;/code&gt; is invoked without a recipe, it runs the first recipe in the &lt;code&gt;justfile&lt;/code&gt;. This recipe might be the most frequently run command in the project, like running the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use dependencies to run multiple recipes by default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default: lint build test

build:
  echo Building…

test:
  echo Testing…

lint:
  echo Linting…
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If no recipe makes sense as the default recipe, you can add a recipe to the beginning of your &lt;code&gt;justfile&lt;/code&gt; that lists the available recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  just --list
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Listing Available Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes can be listed in alphabetical order with &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build
    test
    deploy
    lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#modules1190"&gt;submodules&lt;/a&gt; can be listed with &lt;code&gt;just --list PATH&lt;/code&gt;, where &lt;code&gt;PATH&lt;/code&gt; is a space- or &lt;code&gt;::&lt;/code&gt;-separated module path:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ cat justfile
mod foo
$ cat foo.just
mod bar
$ cat bar.just
baz:
$ just foo bar
Available recipes:
    baz
$ just foo::bar
Available recipes:
    baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just --summary&lt;/code&gt; is more concise:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary
build test deploy lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Pass &lt;code&gt;--unsorted&lt;/code&gt; to print recipes in the order they appear in the &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  echo 'Testing!'

build:
  echo 'Building!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --unsorted
Available recipes:
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary --unsorted
test build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you'd like &lt;code&gt;just&lt;/code&gt; to default to listing the recipes in the &lt;code&gt;justfile&lt;/code&gt;, you can use this as your default recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  @just --list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that you may need to add &lt;code&gt;--justfile {{justfile()}}&lt;/code&gt; to the line above. Without it, if you executed &lt;code&gt;just -f /some/distant/justfile -d .&lt;/code&gt; or &lt;code&gt;just -f ./non-standard-justfile&lt;/code&gt;, the plain &lt;code&gt;just --list&lt;/code&gt; inside the recipe would not necessarily use the file you provided. It would try to find a justfile in your current path, maybe even resulting in a &lt;code&gt;No justfile found&lt;/code&gt; error.&lt;/p&gt; 
&lt;p&gt;The heading text can be customized with &lt;code&gt;--list-heading&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-heading $'Cool stuff…\n'
Cool stuff…
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the indentation can be customized with &lt;code&gt;--list-prefix&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-prefix ····
Available recipes:
····test
····build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to &lt;code&gt;--list-heading&lt;/code&gt; replaces both the heading and the newline following it, so it should contain a newline if non-empty. It works this way so you can suppress the heading line entirely by passing the empty string:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list --list-heading ''
    test
    build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Invoking Multiple Recipes&lt;/h3&gt; 
&lt;p&gt;Multiple recipes may be invoked on the command line at once:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  make web

serve:
  python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build serve
make web
python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Keep in mind that recipes with parameters will swallow arguments, even if they match the names of other recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build project:
  make {{project}}

serve:
  python3 -m http.server -d out 8000
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build serve
make: *** No rule to make target `serve'.  Stop.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--one&lt;/code&gt; flag can be used to restrict command-line invocations to a single recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --one build serve
error: Expected 1 command-line recipe invocation but found 2.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Working Directory&lt;/h3&gt; 
&lt;p&gt;By default, recipes run with the working directory set to the directory that contains the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;[no-cd]&lt;/code&gt; attribute can be used to make recipes run with the working directory set to directory in which &lt;code&gt;just&lt;/code&gt; was invoked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  pwd

[no-cd]
@bar:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cd subdir
$ just foo
/
$ just bar
/subdir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can override the working directory for all recipes with &lt;code&gt;set working-directory := '…'&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set working-directory := 'bar'

@foo:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ pwd
/home/bob
$ just foo
/home/bob/bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can override the working directory for a specific recipe with the &lt;code&gt;working-directory&lt;/code&gt; attribute&lt;sup&gt;1.38.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[working-directory: 'bar']
@foo:
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ pwd
/home/bob
$ just foo
/home/bob/bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to the &lt;code&gt;working-directory&lt;/code&gt; setting or &lt;code&gt;working-directory&lt;/code&gt; attribute may be absolute or relative. If it is relative it is interpreted relative to the default working directory.&lt;/p&gt; 
&lt;h3&gt;Aliases&lt;/h3&gt; 
&lt;p&gt;Aliases allow recipes to be invoked on the command line with alternative names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;alias b := build

build:
  echo 'Building!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'Building!'
Building!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The target of an alias may be a recipe in a submodule:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo

alias baz := foo::bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Settings&lt;/h3&gt; 
&lt;p&gt;Settings control interpretation and execution. Each setting may be specified at most once, anywhere in the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["zsh", "-cu"]

foo:
  # this line will be run as `zsh -cu 'ls **/*.txt'`
  ls **/*.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Table of Settings&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;allow-duplicate-recipes&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Allow recipes appearing later in a &lt;code&gt;justfile&lt;/code&gt; to override earlier recipes with the same name.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;allow-duplicate-variables&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Allow variables appearing later in a &lt;code&gt;justfile&lt;/code&gt; to override earlier variables with the same name.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-filename&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file with a custom name, if present.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-load&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file, if present.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-override&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Override existing environment variables with values from the &lt;code&gt;.env&lt;/code&gt; file.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-path&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file from a custom path and error if not present. Overrides &lt;code&gt;dotenv-filename&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;dotenv-required&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Error if a &lt;code&gt;.env&lt;/code&gt; file isn't found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;export&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Export all variables as environment variables.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;fallback&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Search &lt;code&gt;justfile&lt;/code&gt; in parent directory if the first recipe on the command line is not found.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ignore-comments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Ignore recipe lines beginning with &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;positional-arguments&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Pass positional arguments.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;quiet&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Disable echoing recipe lines before executing.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;script-interpreter&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;['sh', '-eu']&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set command used to invoke recipes with empty &lt;code&gt;[script]&lt;/code&gt; attribute.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set command used to invoke recipes and evaluate backticks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;tempdir&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Create temporary directories in &lt;code&gt;tempdir&lt;/code&gt; instead of the system default temporary directory.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;unstable&lt;/code&gt;&lt;sup&gt;1.31.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable unstable features.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;windows-powershell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;boolean&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Use PowerShell on Windows as default shell. (Deprecated. Use &lt;code&gt;windows-shell&lt;/code&gt; instead.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;windows-shell&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set the command used to invoke recipes and evaluate backticks.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;working-directory&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;string&lt;/td&gt; 
   &lt;td&gt;-&lt;/td&gt; 
   &lt;td&gt;Set the working directory for recipes and backticks, relative to the default working directory.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Boolean settings can be written as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set NAME
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which is equivalent to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set NAME := true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Allow Duplicate Recipes&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;allow-duplicate-recipes&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, defining multiple recipes with the same name is not an error and the last definition is used. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-recipes

@foo:
  echo foo

@foo:
  echo bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Allow Duplicate Variables&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;allow-duplicate-variables&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, defining multiple variables with the same name is not an error and the last definition is used. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-variables

a := "foo"
a := "bar"

@foo:
  echo {{a}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Dotenv Settings&lt;/h4&gt; 
&lt;p&gt;If any of &lt;code&gt;dotenv-load&lt;/code&gt;, &lt;code&gt;dotenv-filename&lt;/code&gt;, &lt;code&gt;dotenv-override&lt;/code&gt;, &lt;code&gt;dotenv-path&lt;/code&gt;, or &lt;code&gt;dotenv-required&lt;/code&gt; are set, &lt;code&gt;just&lt;/code&gt; will try to load environment variables from a file.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-path&lt;/code&gt; is set, &lt;code&gt;just&lt;/code&gt; will look for a file at the given path, which may be absolute, or relative to the working directory.&lt;/p&gt; 
&lt;p&gt;The command-line option &lt;code&gt;--dotenv-path&lt;/code&gt;, short form &lt;code&gt;-E&lt;/code&gt;, can be used to set or override &lt;code&gt;dotenv-path&lt;/code&gt; at runtime.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-filename&lt;/code&gt; is set &lt;code&gt;just&lt;/code&gt; will look for a file at the given path, relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-filename&lt;/code&gt; is not set, but &lt;code&gt;dotenv-load&lt;/code&gt; or &lt;code&gt;dotenv-required&lt;/code&gt; are set, just will look for a file named &lt;code&gt;.env&lt;/code&gt;, relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;dotenv-filename&lt;/code&gt; and &lt;code&gt;dotenv-path&lt;/code&gt; are similar, but &lt;code&gt;dotenv-path&lt;/code&gt; is only checked relative to the working directory, whereas &lt;code&gt;dotenv-filename&lt;/code&gt; is checked relative to the working directory and each of its ancestors.&lt;/p&gt; 
&lt;p&gt;It is not an error if an environment file is not found, unless &lt;code&gt;dotenv-required&lt;/code&gt; is set.&lt;/p&gt; 
&lt;p&gt;The loaded variables are environment variables, not &lt;code&gt;just&lt;/code&gt; variables, and so must be accessed using &lt;code&gt;$VARIABLE_NAME&lt;/code&gt; in recipes and backticks.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;dotenv-override&lt;/code&gt; is set, variables from the environment file will override existing environment variables.&lt;/p&gt; 
&lt;p&gt;For example, if your &lt;code&gt;.env&lt;/code&gt; file contains:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;# a comment, will be ignored
DATABASE_ADDRESS=localhost:6379
SERVER_PORT=1337
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And your &lt;code&gt;justfile&lt;/code&gt; contains:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set dotenv-load

serve:
  @echo "Starting server with database $DATABASE_ADDRESS on port $SERVER_PORT…"
  ./server --database $DATABASE_ADDRESS --port $SERVER_PORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just serve&lt;/code&gt; will output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just serve
Starting server with database localhost:6379 on port 1337…
./server --database $DATABASE_ADDRESS --port $SERVER_PORT
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Export&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;export&lt;/code&gt; setting causes all &lt;code&gt;just&lt;/code&gt; variables to be exported as environment variables. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set export

a := "hello"

@foo b:
  echo $a
  echo $b
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo goodbye
hello
goodbye
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Positional Arguments&lt;/h4&gt; 
&lt;p&gt;If &lt;code&gt;positional-arguments&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, recipe arguments will be passed as positional arguments to commands. For linewise recipes, argument &lt;code&gt;$0&lt;/code&gt; will be the name of the recipe.&lt;/p&gt; 
&lt;p&gt;For example, running this recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

@foo bar:
  echo $0
  echo $1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Will produce the following output:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo hello
foo
hello
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using an &lt;code&gt;sh&lt;/code&gt;-compatible shell, such as &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;$@&lt;/code&gt; expands to the positional arguments given to the recipe, starting from one. When used within double quotes as &lt;code&gt;"$@"&lt;/code&gt;, arguments including whitespace will be passed on as if they were double-quoted. That is, &lt;code&gt;"$@"&lt;/code&gt; is equivalent to &lt;code&gt;"$1" "$2"&lt;/code&gt;… When there are no positional parameters, &lt;code&gt;"$@"&lt;/code&gt; and &lt;code&gt;$@&lt;/code&gt; expand to nothing (i.e., they are removed).&lt;/p&gt; 
&lt;p&gt;This example recipe will print arguments one by one on separate lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

@test *args='':
  bash -c 'while (( "$#" )); do echo - $1; shift; done' -- "$@"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Running it with &lt;em&gt;two&lt;/em&gt; arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test foo "bar baz"
- foo
- bar baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Positional arguments may also be turned on on a per-recipe basis with the &lt;code&gt;[positional-arguments]&lt;/code&gt; attribute&lt;sup&gt;1.29.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[positional-arguments]
@foo bar:
  echo $0
  echo $1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that PowerShell does not handle positional arguments in the same way as other shells, so turning on positional arguments will likely break recipes that use PowerShell.&lt;/p&gt; 
&lt;p&gt;If using PowerShell 7.4 or better, the &lt;code&gt;-CommandWithArgs&lt;/code&gt; flag will make positional arguments work as expected:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ['pwsh.exe', '-CommandWithArgs']
set positional-arguments

print-args a b c:
  Write-Output @($args[1..($args.Count - 1)])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Shell&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;shell&lt;/code&gt; setting controls the command used to invoke recipe lines and backticks. Shebang recipes are unaffected. The default shell is &lt;code&gt;sh -cu&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# use python3 to execute recipe lines and backticks
set shell := ["python3", "-c"]

# use print to capture result of evaluation
foos := `print("foo" * 4)`

foo:
  print("Snake snake snake snake.")
  print("{{foos}}")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; passes the command to be executed as an argument. Many shells will need an additional flag, often &lt;code&gt;-c&lt;/code&gt;, to make them evaluate the first argument.&lt;/p&gt; 
&lt;h5&gt;Windows Shell&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;sh&lt;/code&gt; on Windows by default. To use a different shell on Windows, use &lt;code&gt;windows-shell&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://github.com/casey/just/raw/master/examples/powershell.just"&gt;powershell.just&lt;/a&gt; for a justfile that uses PowerShell on all platforms.&lt;/p&gt; 
&lt;h5&gt;Windows PowerShell&lt;/h5&gt; 
&lt;p&gt;&lt;em&gt;&lt;code&gt;set windows-powershell&lt;/code&gt; uses the legacy &lt;code&gt;powershell.exe&lt;/code&gt; binary, and is no longer recommended. See the &lt;code&gt;windows-shell&lt;/code&gt; setting above for a more flexible way to control which shell is used on Windows.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;sh&lt;/code&gt; on Windows by default. To use &lt;code&gt;powershell.exe&lt;/code&gt; instead, set &lt;code&gt;windows-powershell&lt;/code&gt; to true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set windows-powershell := true

hello:
  Write-Host "Hello, world!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Python 3&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["python3", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Bash&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["bash", "-uc"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Z Shell&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["zsh", "-uc"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Fish&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["fish", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Nushell&lt;/h5&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ["nu", "-c"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change the default table mode to &lt;code&gt;light&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set shell := ['nu', '-m', 'light', '-c']
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/nushell/nushell"&gt;Nushell&lt;/a&gt; was written in Rust, and &lt;strong&gt;has cross-platform support for Windows / macOS and Linux&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Documentation Comments&lt;/h3&gt; 
&lt;p&gt;Comments immediately preceding a recipe will appear in &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# build stuff
build:
  ./bin/build

# test stuff
test:
  ./bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build # build stuff
    test # test stuff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[doc]&lt;/code&gt; attribute can be used to set or suppress a recipe's doc comment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# This comment won't appear
[doc('Build stuff')]
build:
  ./bin/build

# This one won't either
[doc]
test:
  ./bin/test
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    build # Build stuff
    test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Expressions and Substitutions&lt;/h3&gt; 
&lt;p&gt;Various operators and function calls are supported in expressions, which may be used in assignments, default recipe arguments, and inside recipe body &lt;code&gt;{{…}}&lt;/code&gt; substitutions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;tmpdir  := `mktemp -d`
version := "0.2.7"
tardir  := tmpdir / "awesomesauce-" + version
tarball := tardir + ".tar.gz"
config  := quote(config_dir() / ".project-config")

publish:
  rm -f {{tarball}}
  mkdir {{tardir}}
  cp README.md *.c {{ config }} {{tardir}}
  tar zcvf {{tarball}} {{tardir}}
  scp {{tarball}} me@server.com:release/
  rm -rf {{tarball}} {{tardir}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Concatenation&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator returns the left-hand argument concatenated with the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foobar := 'foo' + 'bar'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Logical Operators&lt;/h4&gt; 
&lt;p&gt;The logical operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; can be used to coalesce string values&lt;sup&gt;1.37.0&lt;/sup&gt;, similar to Python's &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;. These operators consider the empty string &lt;code&gt;''&lt;/code&gt; to be false, and all other strings to be true.&lt;/p&gt; 
&lt;p&gt;These operators are currently unstable.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator returns the empty string if the left-hand argument is the empty string, otherwise it returns the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo := '' &amp;amp;&amp;amp; 'goodbye'      # ''
bar := 'hello' &amp;amp;&amp;amp; 'goodbye' # 'goodbye'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;||&lt;/code&gt; operator returns the left-hand argument if it is non-empty, otherwise it returns the right-hand argument:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo := '' || 'goodbye'      # 'goodbye'
bar := 'hello' || 'goodbye' # 'hello'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Joining Paths&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; operator can be used to join two strings with a slash:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := "a" / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate foo
a/b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that a &lt;code&gt;/&lt;/code&gt; is added even if one is already present:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := "a/"
bar := foo / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate bar
a//b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Absolute paths can also be constructed&lt;sup&gt;1.5.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := / "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --evaluate foo
/b
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; operator uses the &lt;code&gt;/&lt;/code&gt; character, even on Windows. Thus, using the &lt;code&gt;/&lt;/code&gt; operator should be avoided with paths that use universal naming convention (UNC), i.e., those that start with &lt;code&gt;\?&lt;/code&gt;, since forward slashes are not supported with UNC paths.&lt;/p&gt; 
&lt;h4&gt;Escaping &lt;code&gt;{{&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;To write a recipe containing &lt;code&gt;{{&lt;/code&gt;, use &lt;code&gt;{{{{&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo 'I {{{{LOVE}} curly braces!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(An unmatched &lt;code&gt;}}&lt;/code&gt; is ignored, so it doesn't need to be escaped.)&lt;/p&gt; 
&lt;p&gt;Another option is to put all the text you'd like to escape inside of an interpolation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo '{{'I {{LOVE}} curly braces!'}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yet another option is to use &lt;code&gt;{{ "{{" }}&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;braces:
  echo 'I {{ "{{" }}LOVE}} curly braces!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Strings&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;'single'&lt;/code&gt;, &lt;code&gt;"double"&lt;/code&gt;, and &lt;code&gt;'''triple'''&lt;/code&gt; quoted string literals are supported. Unlike in recipe bodies, &lt;code&gt;{{…}}&lt;/code&gt; interpolations are not supported inside strings.&lt;/p&gt; 
&lt;p&gt;Double-quoted strings support escape sequences:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;carriage-return   := "\r"
double-quote      := "\""
newline           := "\n"
no-newline        := "\
"
slash             := "\\"
tab               := "\t"
unicode-codepoint := "\u{1F916}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --evaluate
"arriage-return   := "
double-quote      := """
newline           := "
"
no-newline        := ""
slash             := "\"
tab               := "     "
unicode-codepoint := "🤖"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The unicode character escape sequence &lt;code&gt;\u{…}&lt;/code&gt;&lt;sup&gt;1.36.0&lt;/sup&gt; accepts up to six hex digits.&lt;/p&gt; 
&lt;p&gt;Strings may contain line breaks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;single := '
hello
'

double := "
goodbye
"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Single-quoted strings do not recognize escape sequences:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;escapes := '\t\n\r\"\\'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --evaluate
escapes := "\t\n\r\"\\"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Indented versions of both single- and double-quoted strings, delimited by triple single- or double-quotes, are supported. Indented string lines are stripped of a leading line break, and leading whitespace common to all non-blank lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# this string will evaluate to `foo\nbar\n`
x := '''
  foo
  bar
'''

# this string will evaluate to `abc\n  wuv\nxyz\n`
y := """
  abc
    wuv
  xyz
"""
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similar to unindented strings, indented double-quoted strings process escape sequences, and indented single-quoted strings ignore escape sequences. Escape sequence processing takes place after unindentation. The unindentation algorithm does not take escape-sequence produced whitespace or newlines into account.&lt;/p&gt; 
&lt;p&gt;Strings prefixed with &lt;code&gt;x&lt;/code&gt; are shell expanded&lt;sup&gt;1.27.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foobar := x'~/$FOO/${BAR}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Replacement&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;$VAR&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;${VAR}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;${VAR:-DEFAULT}&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;, or &lt;code&gt;DEFAULT&lt;/code&gt; if &lt;code&gt;VAR&lt;/code&gt; is not set&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Leading &lt;code&gt;~&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;path to current user's home directory&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Leading &lt;code&gt;~USER&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;path to &lt;code&gt;USER&lt;/code&gt;'s home directory&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;This expansion is performed at compile time, so variables from &lt;code&gt;.env&lt;/code&gt; files and exported &lt;code&gt;just&lt;/code&gt; variables cannot be used. However, this allows shell expanded strings to be used in places like settings and import paths, which cannot depend on &lt;code&gt;just&lt;/code&gt; variables and &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt; 
&lt;h3&gt;Ignoring Errors&lt;/h3&gt; 
&lt;p&gt;Normally, if a command returns a non-zero exit status, execution will stop. To continue execution after a command, even if it fails, prefix the command with &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  -cat foo
  echo 'Done!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
cat foo
cat: foo: No such file or directory
echo 'Done!'
Done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Functions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; provides many built-in functions for use in expressions, including recipe body &lt;code&gt;{{…}}&lt;/code&gt; substitutions, assignments, and default parameter values.&lt;/p&gt; 
&lt;p&gt;All functions ending in &lt;code&gt;_directory&lt;/code&gt; can be abbreviated to &lt;code&gt;_dir&lt;/code&gt;. So &lt;code&gt;home_directory()&lt;/code&gt; can also be written as &lt;code&gt;home_dir()&lt;/code&gt;. In addition, &lt;code&gt;invocation_directory_native()&lt;/code&gt; can be abbreviated to &lt;code&gt;invocation_dir_native()&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;System Information&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;arch()&lt;/code&gt; — Instruction set architecture. Possible values are: &lt;code&gt;"aarch64"&lt;/code&gt;, &lt;code&gt;"arm"&lt;/code&gt;, &lt;code&gt;"asmjs"&lt;/code&gt;, &lt;code&gt;"hexagon"&lt;/code&gt;, &lt;code&gt;"mips"&lt;/code&gt;, &lt;code&gt;"msp430"&lt;/code&gt;, &lt;code&gt;"powerpc"&lt;/code&gt;, &lt;code&gt;"powerpc64"&lt;/code&gt;, &lt;code&gt;"s390x"&lt;/code&gt;, &lt;code&gt;"sparc"&lt;/code&gt;, &lt;code&gt;"wasm32"&lt;/code&gt;, &lt;code&gt;"x86"&lt;/code&gt;, &lt;code&gt;"x86_64"&lt;/code&gt;, and &lt;code&gt;"xcore"&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;num_cpus()&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; - Number of logical CPUs.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;os()&lt;/code&gt; — Operating system. Possible values are: &lt;code&gt;"android"&lt;/code&gt;, &lt;code&gt;"bitrig"&lt;/code&gt;, &lt;code&gt;"dragonfly"&lt;/code&gt;, &lt;code&gt;"emscripten"&lt;/code&gt;, &lt;code&gt;"freebsd"&lt;/code&gt;, &lt;code&gt;"haiku"&lt;/code&gt;, &lt;code&gt;"ios"&lt;/code&gt;, &lt;code&gt;"linux"&lt;/code&gt;, &lt;code&gt;"macos"&lt;/code&gt;, &lt;code&gt;"netbsd"&lt;/code&gt;, &lt;code&gt;"openbsd"&lt;/code&gt;, &lt;code&gt;"solaris"&lt;/code&gt;, and &lt;code&gt;"windows"&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;os_family()&lt;/code&gt; — Operating system family; possible values are: &lt;code&gt;"unix"&lt;/code&gt; and &lt;code&gt;"windows"&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;system-info:
  @echo "This is an {{arch()}} machine".
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just system-info
This is an x86_64 machine
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;os_family()&lt;/code&gt; function can be used to create cross-platform &lt;code&gt;justfile&lt;/code&gt;s that work on various operating systems. For an example, see &lt;a href="https://github.com/casey/just/raw/master/examples/cross-platform.just"&gt;cross-platform.just&lt;/a&gt; file.&lt;/p&gt; 
&lt;h4&gt;External Commands&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;shell(command, args...)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; returns the standard output of shell script &lt;code&gt;command&lt;/code&gt; with zero or more positional arguments &lt;code&gt;args&lt;/code&gt;. The shell used to interpret &lt;code&gt;command&lt;/code&gt; is the same shell that is used to evaluate recipe lines, and can be changed with &lt;code&gt;set shell := […]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;command&lt;/code&gt; is passed as the first argument, so if the command is &lt;code&gt;'echo $@'&lt;/code&gt;, the full command line, with the default shell command &lt;code&gt;sh -cu&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; &lt;code&gt;'foo'&lt;/code&gt; and &lt;code&gt;'bar'&lt;/code&gt; will be:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;'sh' '-cu' 'echo $@' 'echo $@' 'foo' 'bar'
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is so that &lt;code&gt;$@&lt;/code&gt; works as expected, and &lt;code&gt;$1&lt;/code&gt; refers to the first argument. &lt;code&gt;$@&lt;/code&gt; does not include the first positional argument, which is expected to be the name of the program being run.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# arguments can be variables or expressions
file := '/sys/class/power_supply/BAT0/status'
bat0stat := shell('cat $1', file)

# commands can be variables or expressions
command := 'wc -l'
output := shell(command + ' "$1"', 'main.c')

# arguments referenced by the shell command must be used
empty := shell('echo', 'foo')
full := shell('echo $1', 'foo')
error := shell('echo $1')
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# Using python as the shell. Since `python -c` sets `sys.argv[0]` to `'-c'`,
# the first "real" positional argument will be `sys.argv[2]`.
set shell := ["python3", "-c"]
olleh := shell('import sys; print(sys.argv[2][::-1])', 'hello')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Environment Variables&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;env(key)&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; — Retrieves the environment variable with name &lt;code&gt;key&lt;/code&gt;, aborting if it is not present.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;home_dir := env('HOME')

test:
  echo "{{home_dir}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
/home/user1
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;env(key, default)&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; — Retrieves the environment variable with name &lt;code&gt;key&lt;/code&gt;, returning &lt;code&gt;default&lt;/code&gt; if it is not present.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;env_var(key)&lt;/code&gt; — Deprecated alias for &lt;code&gt;env(key)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;env_var_or_default(key, default)&lt;/code&gt; — Deprecated alias for &lt;code&gt;env(key, default)&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A default can be substituted for an empty environment variable value with the &lt;code&gt;||&lt;/code&gt; operator, currently unstable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set unstable

foo := env('FOO') || 'DEFAULT_VALUE'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Executables&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;require(name)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; — Search directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable for the executable &lt;code&gt;name&lt;/code&gt; and return its full path, or halt with an error if no executable with &lt;code&gt;name&lt;/code&gt; exists.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;bash := require("bash")

@test:
    echo "bash: '{{bash}}'"
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ just
bash: '/bin/bash'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;which(name)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; — Search directories in the &lt;code&gt;PATH&lt;/code&gt; environment variable for the executable &lt;code&gt;name&lt;/code&gt; and return its full path, or the empty string if no executable with &lt;code&gt;name&lt;/code&gt; exists. Currently unstable.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;set unstable

bosh := which("bosh")

@test:
    echo "bosh: '{{bosh}}'"
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class="language-console"&gt;$ just
bosh: ''
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Invocation Information&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;is_dependency()&lt;/code&gt; - Returns the string &lt;code&gt;true&lt;/code&gt; if the current recipe is being run as a dependency of another recipe, rather than being run directly, otherwise returns the string &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Invocation Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;invocation_directory()&lt;/code&gt; - Retrieves the absolute path to the current directory when &lt;code&gt;just&lt;/code&gt; was invoked, before &lt;code&gt;just&lt;/code&gt; changed it (chdir'd) prior to executing commands. On Windows, &lt;code&gt;invocation_directory()&lt;/code&gt; uses &lt;code&gt;cygpath&lt;/code&gt; to convert the invocation directory to a Cygwin-compatible &lt;code&gt;/&lt;/code&gt;-separated path. Use &lt;code&gt;invocation_directory_native()&lt;/code&gt; to return the verbatim invocation directory on all platforms.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to call &lt;code&gt;rustfmt&lt;/code&gt; on files just under the "current directory" (from the user/invoker's perspective), use the following rule:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;rustfmt:
  find {{invocation_directory()}} -name \*.rs -exec rustfmt {} \;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, if your command needs to be run from the current directory, you could use (e.g.):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cd {{invocation_directory()}}; ./some_script_that_needs_to_be_run_from_here
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;invocation_directory_native()&lt;/code&gt; - Retrieves the absolute path to the current directory when &lt;code&gt;just&lt;/code&gt; was invoked, before &lt;code&gt;just&lt;/code&gt; changed it (chdir'd) prior to executing commands.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Justfile and Justfile Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;justfile()&lt;/code&gt; - Retrieves the path of the current &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;justfile_directory()&lt;/code&gt; - Retrieves the path of the parent directory of the current &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example, to run a command relative to the location of the current &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;script:
  {{justfile_directory()}}/scripts/some_script
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Source and Source Directory&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;source_file()&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Retrieves the path of the current source file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;source_directory()&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Retrieves the path of the parent directory of the current source file.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;source_file()&lt;/code&gt; and &lt;code&gt;source_directory()&lt;/code&gt; behave the same as &lt;code&gt;justfile()&lt;/code&gt; and &lt;code&gt;justfile_directory()&lt;/code&gt; in the root &lt;code&gt;justfile&lt;/code&gt;, but will return the path and directory, respectively, of the current &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;mod&lt;/code&gt; source file when called from within an import or submodule.&lt;/p&gt; 
&lt;h4&gt;Just Executable&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;just_executable()&lt;/code&gt; - Absolute path to the &lt;code&gt;just&lt;/code&gt; executable.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;executable:
  @echo The executable is at: {{just_executable()}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
The executable is at: /bin/just
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Just Process ID&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;just_pid()&lt;/code&gt; - Process ID of the &lt;code&gt;just&lt;/code&gt; executable.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;pid:
  @echo The process ID is: {{ just_pid() }}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
The process ID is: 420
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;String Manipulation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;append(suffix, s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; Append &lt;code&gt;suffix&lt;/code&gt; to whitespace-separated strings in &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;append('/src', 'foo bar baz')&lt;/code&gt; → &lt;code&gt;'foo/src bar/src baz/src'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prepend(prefix, s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; Prepend &lt;code&gt;prefix&lt;/code&gt; to whitespace-separated strings in &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;prepend('src/', 'foo bar baz')&lt;/code&gt; → &lt;code&gt;'src/foo src/bar src/baz'&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encode_uri_component(s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Percent-encode characters in &lt;code&gt;s&lt;/code&gt; except &lt;code&gt;[A-Za-z0-9_.!~*'()-]&lt;/code&gt;, matching the behavior of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"&gt;JavaScript &lt;code&gt;encodeURIComponent&lt;/code&gt; function&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;quote(s)&lt;/code&gt; - Replace all single quotes with &lt;code&gt;'\''&lt;/code&gt; and prepend and append single quotes to &lt;code&gt;s&lt;/code&gt;. This is sufficient to escape special characters for many shells, including most Bourne shell descendants.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace(s, from, to)&lt;/code&gt; - Replace all occurrences of &lt;code&gt;from&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;replace_regex(s, regex, replacement)&lt;/code&gt; - Replace all occurrences of &lt;code&gt;regex&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;replacement&lt;/code&gt;. Regular expressions are provided by the &lt;a href="https://docs.rs/regex/latest/regex/"&gt;Rust &lt;code&gt;regex&lt;/code&gt; crate&lt;/a&gt;. See the &lt;a href="https://docs.rs/regex/latest/regex/#syntax"&gt;syntax documentation&lt;/a&gt; for usage examples. Capture groups are supported. The &lt;code&gt;replacement&lt;/code&gt; string uses &lt;a href="https://docs.rs/regex/latest/regex/struct.Regex.html#replacement-string-syntax"&gt;Replacement string syntax&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim(s)&lt;/code&gt; - Remove leading and trailing whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end(s)&lt;/code&gt; - Remove trailing whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end_match(s, substring)&lt;/code&gt; - Remove suffix of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_end_matches(s, substring)&lt;/code&gt; - Repeatedly remove suffixes of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start(s)&lt;/code&gt; - Remove leading whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start_match(s, substring)&lt;/code&gt; - Remove prefix of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;trim_start_matches(s, substring)&lt;/code&gt; - Repeatedly remove prefixes of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;substring&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Case Conversion&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;capitalize(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert first character of &lt;code&gt;s&lt;/code&gt; to uppercase and the rest to lowercase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;kebabcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;kebab-case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lowercamelcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;lowerCamelCase&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lowercase(s)&lt;/code&gt; - Convert &lt;code&gt;s&lt;/code&gt; to lowercase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;shoutykebabcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;SHOUTY-KEBAB-CASE&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;shoutysnakecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;SHOUTY_SNAKE_CASE&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;snakecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;snake_case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;titlecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;Title Case&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uppercamelcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;UpperCamelCase&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uppercase(s)&lt;/code&gt; - Convert &lt;code&gt;s&lt;/code&gt; to uppercase.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Path Manipulation&lt;/h4&gt; 
&lt;h5&gt;Fallible&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;absolute_path(path)&lt;/code&gt; - Absolute path to relative &lt;code&gt;path&lt;/code&gt; in the working directory. &lt;code&gt;absolute_path("./bar.txt")&lt;/code&gt; in directory &lt;code&gt;/foo&lt;/code&gt; is &lt;code&gt;/foo/bar.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;canonicalize(path)&lt;/code&gt;&lt;sup&gt;1.24.0&lt;/sup&gt; - Canonicalize &lt;code&gt;path&lt;/code&gt; by resolving symlinks and removing &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, and extra &lt;code&gt;/&lt;/code&gt;s where possible.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;extension(path)&lt;/code&gt; - Extension of &lt;code&gt;path&lt;/code&gt;. &lt;code&gt;extension("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;file_name(path)&lt;/code&gt; - File name of &lt;code&gt;path&lt;/code&gt; with any leading directory components removed. &lt;code&gt;file_name("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;bar.txt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;file_stem(path)&lt;/code&gt; - File name of &lt;code&gt;path&lt;/code&gt; without extension. &lt;code&gt;file_stem("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;bar&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parent_directory(path)&lt;/code&gt; - Parent directory of &lt;code&gt;path&lt;/code&gt;. &lt;code&gt;parent_directory("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;/foo&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;without_extension(path)&lt;/code&gt; - &lt;code&gt;path&lt;/code&gt; without extension. &lt;code&gt;without_extension("/foo/bar.txt")&lt;/code&gt; is &lt;code&gt;/foo/bar&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These functions can fail, for example if a path does not have an extension, which will halt execution.&lt;/p&gt; 
&lt;h5&gt;Infallible&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;clean(path)&lt;/code&gt; - Simplify &lt;code&gt;path&lt;/code&gt; by removing extra path separators, intermediate &lt;code&gt;.&lt;/code&gt; components, and &lt;code&gt;..&lt;/code&gt; where possible. &lt;code&gt;clean("foo//bar")&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;, &lt;code&gt;clean("foo/..")&lt;/code&gt; is &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;clean("foo/./bar")&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;join(a, b…)&lt;/code&gt; - &lt;em&gt;This function uses &lt;code&gt;/&lt;/code&gt; on Unix and &lt;code&gt;\&lt;/code&gt; on Windows, which can be lead to unwanted behavior. The &lt;code&gt;/&lt;/code&gt; operator, e.g., &lt;code&gt;a / b&lt;/code&gt;, which always uses &lt;code&gt;/&lt;/code&gt;, should be considered as a replacement unless &lt;code&gt;\&lt;/code&gt;s are specifically desired on Windows.&lt;/em&gt; Join path &lt;code&gt;a&lt;/code&gt; with path &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;join("foo/bar", "baz")&lt;/code&gt; is &lt;code&gt;foo/bar/baz&lt;/code&gt;. Accepts two or more arguments.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Filesystem Access&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;path_exists(path)&lt;/code&gt; - Returns &lt;code&gt;true&lt;/code&gt; if the path points at an existing entity and &lt;code&gt;false&lt;/code&gt; otherwise. Traverses symbolic links, and returns &lt;code&gt;false&lt;/code&gt; if the path is inaccessible or points to a broken symlink.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;read(path)&lt;/code&gt;&lt;sup&gt;1.39.0&lt;/sup&gt; - Returns the content of file at &lt;code&gt;path&lt;/code&gt; as string.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Error Reporting&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;error(message)&lt;/code&gt; - Abort execution and report error &lt;code&gt;message&lt;/code&gt; to user.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;UUID and Hash Generation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;blake3(string)&lt;/code&gt;&lt;sup&gt;1.25.0&lt;/sup&gt; - Return &lt;a href="https://github.com/BLAKE3-team/BLAKE3/"&gt;BLAKE3&lt;/a&gt; hash of &lt;code&gt;string&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;blake3_file(path)&lt;/code&gt;&lt;sup&gt;1.25.0&lt;/sup&gt; - Return &lt;a href="https://github.com/BLAKE3-team/BLAKE3/"&gt;BLAKE3&lt;/a&gt; hash of file at &lt;code&gt;path&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sha256(string)&lt;/code&gt; - Return the SHA-256 hash of &lt;code&gt;string&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sha256_file(path)&lt;/code&gt; - Return SHA-256 hash of file at &lt;code&gt;path&lt;/code&gt; as hexadecimal string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;uuid()&lt;/code&gt; - Generate a random version 4 UUID.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Random&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;choose(n, alphabet)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Generate a string of &lt;code&gt;n&lt;/code&gt; randomly selected characters from &lt;code&gt;alphabet&lt;/code&gt;, which may not contain repeated characters. For example, &lt;code&gt;choose('64', HEX)&lt;/code&gt; will generate a random 64-character lowercase hex string.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Datetime&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;datetime(format)&lt;/code&gt;&lt;sup&gt;1.30.0&lt;/sup&gt; - Return local time with &lt;code&gt;format&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datetime_utc(format)&lt;/code&gt;&lt;sup&gt;1.30.0&lt;/sup&gt; - Return UTC time with &lt;code&gt;format&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The arguments to &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;datetime_utc&lt;/code&gt; are &lt;code&gt;strftime&lt;/code&gt;-style format strings, see the &lt;a href="https://docs.rs/chrono/latest/chrono/format/strftime/index.html"&gt;&lt;code&gt;chrono&lt;/code&gt; library docs&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h4&gt;Semantic Versions&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;semver_matches(version, requirement)&lt;/code&gt;&lt;sup&gt;1.16.0&lt;/sup&gt; - Check whether a &lt;a href="https://semver.org"&gt;semantic &lt;code&gt;version&lt;/code&gt;&lt;/a&gt;, e.g., &lt;code&gt;"0.1.0"&lt;/code&gt; matches a &lt;code&gt;requirement&lt;/code&gt;, e.g., &lt;code&gt;"&amp;gt;=0.1.0"&lt;/code&gt;, returning &lt;code&gt;"true"&lt;/code&gt; if so and &lt;code&gt;"false"&lt;/code&gt; otherwise.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Style&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;style(name)&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt; - Return a named terminal display attribute escape sequence used by &lt;code&gt;just&lt;/code&gt;. Unlike terminal display attribute escape sequence constants, which contain standard colors and styles, &lt;code&gt;style(name)&lt;/code&gt; returns an escape sequence used by &lt;code&gt;just&lt;/code&gt; itself, and can be used to make recipe output match &lt;code&gt;just&lt;/code&gt;'s own output.&lt;/p&gt; &lt;p&gt;Recognized values for &lt;code&gt;name&lt;/code&gt; are &lt;code&gt;'command'&lt;/code&gt;, for echoed recipe lines, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;warning&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, to style an error message:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-just"&gt;scary:
  @echo '{{ style("error") }}OH NO{{ NORMAL }}'
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;User Directories&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/h5&gt; 
&lt;p&gt;These functions return paths to user-specific directories for things like configuration, data, caches, executables, and the user's home directory.&lt;/p&gt; 
&lt;p&gt;On Unix, these functions follow the &lt;a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;XDG Base Directory Specification&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;On MacOS and Windows, these functions return the system-specified user-specific directories. For example, &lt;code&gt;cache_directory()&lt;/code&gt; returns &lt;code&gt;~/Library/Caches&lt;/code&gt; on MacOS and &lt;code&gt;{FOLDERID_LocalAppData}&lt;/code&gt; on Windows.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://docs.rs/dirs/latest/dirs/index.html"&gt;&lt;code&gt;dirs&lt;/code&gt;&lt;/a&gt; crate for more details.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cache_directory()&lt;/code&gt; - The user-specific cache directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config_directory()&lt;/code&gt; - The user-specific configuration directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;config_local_directory()&lt;/code&gt; - The local user-specific configuration directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;data_directory()&lt;/code&gt; - The user-specific data directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;data_local_directory()&lt;/code&gt; - The local user-specific data directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;executable_directory()&lt;/code&gt; - The user-specific executable directory.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;home_directory()&lt;/code&gt; - The user's home directory.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you would like to use XDG base directories on all platforms you can use the &lt;code&gt;env(…)&lt;/code&gt; function with the appropriate environment variable and fallback, although note that the XDG specification requires ignoring non-absolute paths, so for full compatibility with spec-compliant applications, you would need to do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;xdg_config_dir := if env('XDG_CONFIG_HOME', '') =~ '^/' {
  env('XDG_CONFIG_HOME')
} else {
  home_directory() / '.config'
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Constants&lt;/h3&gt; 
&lt;p&gt;A number of constants are predefined:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Value&lt;/th&gt; 
   &lt;th&gt;Value on Windows&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEX&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789abcdef"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEXLOWER&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789abcdef"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HEXUPPER&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"0123456789ABCDEF"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PATH_SEP&lt;/code&gt;&lt;sup&gt;1.41.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"/"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;""&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;PATH_VAR_SEP&lt;/code&gt;&lt;sup&gt;1.41.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;":"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;";"&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CLEAR&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\ec"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;NORMAL&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[0m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BOLD&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[1m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;ITALIC&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[3m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;UNDERLINE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[4m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;INVERT&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[7m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;HIDE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[8m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;STRIKETHROUGH&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[9m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BLACK&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[30m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;RED&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[31m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;GREEN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[32m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;YELLOW&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[33m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BLUE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[34m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;MAGENTA&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[35m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;CYAN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[36m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;WHITE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[37m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_BLACK&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[40m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_RED&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[41m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_GREEN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[42m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_YELLOW&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[43m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_BLUE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[44m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_MAGENTA&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[45m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_CYAN&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[46m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;BG_WHITE&lt;/code&gt;&lt;sup&gt;1.37.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;"\e[47m"&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  echo {{HEX}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
0123456789abcdef
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Constants starting with &lt;code&gt;\e&lt;/code&gt; are &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code"&gt;ANSI escape sequences&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;CLEAR&lt;/code&gt; clears the screen, similar to the &lt;code&gt;clear&lt;/code&gt; command. The rest are of the form &lt;code&gt;\e[Nm&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer, and set terminal display attributes.&lt;/p&gt; 
&lt;p&gt;Terminal display attribute escape sequences can be combined, for example text weight &lt;code&gt;BOLD&lt;/code&gt;, text style &lt;code&gt;STRIKETHROUGH&lt;/code&gt;, foreground color &lt;code&gt;CYAN&lt;/code&gt;, and background color &lt;code&gt;BG_BLUE&lt;/code&gt;. They should be followed by &lt;code&gt;NORMAL&lt;/code&gt;, to reset the terminal back to normal.&lt;/p&gt; 
&lt;p&gt;Escape sequences should be quoted, since &lt;code&gt;[&lt;/code&gt; is treated as a special character by some shells.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@foo:
  echo '{{BOLD + STRIKETHROUGH + CYAN + BG_BLUE}}Hi!{{NORMAL}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Attributes&lt;/h3&gt; 
&lt;p&gt;Recipes, &lt;code&gt;mod&lt;/code&gt; statements, and aliases may be annotated with attributes that change their behavior.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Type&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[confirm]&lt;/code&gt;&lt;sup&gt;1.17.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Require confirmation prior to executing recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[confirm(PROMPT)]&lt;/code&gt;&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Require confirmation prior to executing recipe with a custom prompt.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[doc(DOC)]&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;module, recipe&lt;/td&gt; 
   &lt;td&gt;Set recipe or module's &lt;a href="https://raw.githubusercontent.com/casey/just/master/#documentation-comments"&gt;documentation comment&lt;/a&gt; to &lt;code&gt;DOC&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[extension(EXT)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Set shebang recipe script's file extension to &lt;code&gt;EXT&lt;/code&gt;. &lt;code&gt;EXT&lt;/code&gt; should include a period if one is desired.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[group(NAME)]&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;module, recipe&lt;/td&gt; 
   &lt;td&gt;Put recipe or module in in &lt;a href="https://raw.githubusercontent.com/casey/just/master/#groups"&gt;group&lt;/a&gt; &lt;code&gt;NAME&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[linux]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Linux.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[macos]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on MacOS.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[metadata(METADATA)]&lt;/code&gt;&lt;sup&gt;1.42.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Attach &lt;code&gt;METADATA&lt;/code&gt; to recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-cd]&lt;/code&gt;&lt;sup&gt;1.9.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Don't change directory before executing recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-exit-message]&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Don't print an error message if recipe fails.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[no-quiet]&lt;/code&gt;&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Override globally quiet recipes and always echo out the recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[openbsd]&lt;/code&gt;&lt;sup&gt;1.38.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on OpenBSD.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[parallel]&lt;/code&gt;&lt;sup&gt;1.42.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Run this recipe's dependencies in parallel.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[positional-arguments]&lt;/code&gt;&lt;sup&gt;1.29.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Turn on &lt;a href="https://raw.githubusercontent.com/casey/just/master/#positional-arguments"&gt;positional arguments&lt;/a&gt; for this recipe.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[private]&lt;/code&gt;&lt;sup&gt;1.10.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;alias, recipe&lt;/td&gt; 
   &lt;td&gt;Make recipe, alias, or variable private. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#private-recipes"&gt;Private Recipes&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[script]&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Execute recipe as script. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#script-recipes"&gt;script recipes&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[script(COMMAND)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Execute recipe as a script interpreted by &lt;code&gt;COMMAND&lt;/code&gt;. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#script-recipes"&gt;script recipes&lt;/a&gt; for more details.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[unix]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Unixes. (Includes MacOS).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[windows]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Enable recipe on Windows.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;[working-directory(PATH)]&lt;/code&gt;&lt;sup&gt;1.38.0&lt;/sup&gt;&lt;/td&gt; 
   &lt;td&gt;recipe&lt;/td&gt; 
   &lt;td&gt;Set recipe working directory. &lt;code&gt;PATH&lt;/code&gt; may be relative or absolute. If relative, it is interpreted relative to the default working directory.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;A recipe can have multiple attributes, either on multiple lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd]
[private]
foo:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or separated by commas on a single line&lt;sup&gt;1.14.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd, private]
foo:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Attributes with a single argument may be written with a colon:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[group: 'bar']
foo:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Enabling and Disabling Recipes&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;[linux]&lt;/code&gt;, &lt;code&gt;[macos]&lt;/code&gt;, &lt;code&gt;[unix]&lt;/code&gt;, and &lt;code&gt;[windows]&lt;/code&gt; attributes are configuration attributes. By default, recipes are always enabled. A recipe with one or more configuration attributes will only be enabled when one or more of those configurations is active.&lt;/p&gt; 
&lt;p&gt;This can be used to write &lt;code&gt;justfile&lt;/code&gt;s that behave differently depending on which operating system they run on. The &lt;code&gt;run&lt;/code&gt; recipe in this &lt;code&gt;justfile&lt;/code&gt; will compile and run &lt;code&gt;main.c&lt;/code&gt;, using a different C compiler and using the correct output binary name for that compiler depending on the operating system:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[unix]
run:
  cc main.c
  ./a.out

[windows]
run:
  cl main.c
  main.exe
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Disabling Changing Directory&lt;sup&gt;1.9.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally executes recipes with the current directory set to the directory that contains the &lt;code&gt;justfile&lt;/code&gt;. This can be disabled using the &lt;code&gt;[no-cd]&lt;/code&gt; attribute. This can be used to create recipes which use paths relative to the invocation directory, or which operate on the current directory.&lt;/p&gt; 
&lt;p&gt;For example, this &lt;code&gt;commit&lt;/code&gt; recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-cd]
commit file:
  git add {{file}}
  git commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Can be used with paths that are relative to the current directory, because &lt;code&gt;[no-cd]&lt;/code&gt; prevents &lt;code&gt;just&lt;/code&gt; from changing the current directory when executing &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Requiring Confirmation for Recipes&lt;sup&gt;1.17.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally executes all recipes unless there is an error. The &lt;code&gt;[confirm]&lt;/code&gt; attribute allows recipes require confirmation in the terminal prior to running. This can be overridden by passing &lt;code&gt;--yes&lt;/code&gt; to &lt;code&gt;just&lt;/code&gt;, which will automatically confirm any recipes marked by this attribute.&lt;/p&gt; 
&lt;p&gt;Recipes dependent on a recipe that requires confirmation will not be run if the relied upon recipe is not confirmed, as well as recipes passed after any recipe that requires confirmation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[confirm]
delete-all:
  rm -rf *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Custom Confirmation Prompt&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;The default confirmation prompt can be overridden with &lt;code&gt;[confirm(PROMPT)]&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[confirm("Are you sure you want to delete everything?")]
delete-everything:
  rm -rf *
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Groups&lt;/h3&gt; 
&lt;p&gt;Recipes and modules may be annotated with one or more group names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[group('lint')]
js-lint:
    echo 'Running JS linter…'

[group('rust recipes')]
[group('lint')]
rust-lint:
    echo 'Running Rust linter…'

[group('lint')]
cpp-lint:
  echo 'Running C++ linter…'

# not in any group
email-everyone:
    echo 'Sending mass email…'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes are listed by group:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --list
Available recipes:
    email-everyone # not in any group

    [lint]
    cpp-lint
    js-lint
    rust-lint

    [rust recipes]
    rust-lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just --list --unsorted&lt;/code&gt; prints recipes in their justfile order within each group:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --list --unsorted
Available recipes:
    (no group)
    email-everyone # not in any group

    [lint]
    js-lint
    rust-lint
    cpp-lint

    [rust recipes]
    rust-lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Groups can be listed with &lt;code&gt;--groups&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --groups
Recipe groups:
  lint
  rust recipes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use &lt;code&gt;just --groups --unsorted&lt;/code&gt; to print groups in their justfile order.&lt;/p&gt; 
&lt;h3&gt;Command Evaluation Using Backticks&lt;/h3&gt; 
&lt;p&gt;Backticks can be used to store the result of commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;localhost := `dumpinterfaces | cut -d: -f2 | sed 's/\/.*//' | sed 's/ //g'`

serve:
  ./serve {{localhost}} 8080
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Indented backticks, delimited by three backticks, are de-indented in the same manner as indented strings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# This backtick evaluates the command `echo foo\necho bar\n`, which produces the value `foo\nbar\n`.
stuff := ```
    echo foo
    echo bar
  ```
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/casey/just/master/#strings"&gt;Strings&lt;/a&gt; section for details on unindenting.&lt;/p&gt; 
&lt;p&gt;Backticks may not start with &lt;code&gt;#!&lt;/code&gt;. This syntax is reserved for a future upgrade.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/casey/just/master/#external-commands"&gt;&lt;code&gt;shell(…)&lt;/code&gt; function&lt;/a&gt; provides a more general mechanism to invoke external commands, including the ability to execute the contents of a variable as a command, and to pass arguments to a command.&lt;/p&gt; 
&lt;h3&gt;Conditional Expressions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; expressions evaluate different branches depending on if two expressions evaluate to the same value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "2" == "2" { "Good!" } else { "1984" }

bar:
  @echo "{{foo}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
Good!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also possible to test for inequality:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" != "goodbye" { "xyz" } else { "abc" }

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
xyz
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And match against regular expressions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" =~ 'hel+o' { "match" } else { "mismatch" }

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
match
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Regular expressions are provided by the &lt;a href="https://github.com/rust-lang/regex"&gt;regex crate&lt;/a&gt;, whose syntax is documented on &lt;a href="https://docs.rs/regex/1.5.4/regex/#syntax"&gt;docs.rs&lt;/a&gt;. Since regular expressions commonly use backslash escape sequences, consider using single-quoted string literals, which will pass slashes to the regex parser unmolested.&lt;/p&gt; 
&lt;p&gt;Conditional expressions short-circuit, which means they only evaluate one of their branches. This can be used to make sure that backtick expressions don't run when they shouldn't.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if env_var("RELEASE") == "true" { `get-something-from-release-database` } else { "dummy-value" }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Conditionals can be used inside of recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;bar foo:
  echo {{ if foo == "bar" { "hello" } else { "goodbye" } }}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note the space after the final &lt;code&gt;}&lt;/code&gt;! Without the space, the interpolation will be prematurely closed.&lt;/p&gt; 
&lt;p&gt;Multiple conditionals can be chained:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" == "goodbye" {
  "xyz"
} else if "a" == "a" {
  "abc"
} else {
  "123"
}

bar:
  @echo {{foo}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
abc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Stopping execution with error&lt;/h3&gt; 
&lt;p&gt;Execution can be halted with the &lt;code&gt;error&lt;/code&gt; function. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo := if "hello" == "goodbye" {
  "xyz"
} else if "a" == "b" {
  "abc"
} else {
  error("123")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which produce the following error when run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;error: Call to function `error` failed: 123
   |
16 |   error("123")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Setting Variables from the Command Line&lt;/h3&gt; 
&lt;p&gt;Variables can be overridden from the command line.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;os := "linux"

test: build
  ./test --test {{os}}

build:
  ./build {{os}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
./build linux
./test --test linux
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Any number of arguments of the form &lt;code&gt;NAME=VALUE&lt;/code&gt; can be passed before recipes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just os=plan9
./build plan9
./test --test plan9
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use the &lt;code&gt;--set&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --set os bsd
./build bsd
./test --test bsd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Getting and Setting Environment Variables&lt;/h3&gt; 
&lt;h4&gt;Exporting &lt;code&gt;just&lt;/code&gt; Variables&lt;/h4&gt; 
&lt;p&gt;Assignments prefixed with the &lt;code&gt;export&lt;/code&gt; keyword will be exported to recipes as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export RUST_BACKTRACE := "1"

test:
  # will print a stack trace if it crashes
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters prefixed with a &lt;code&gt;$&lt;/code&gt; will be exported as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test $RUST_BACKTRACE="1":
  # will print a stack trace if it crashes
  cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Exported variables and parameters are not exported to backticks in the same scope.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export WORLD := "world"
# This backtick will fail with "WORLD: unbound variable"
BAR := `echo hello $WORLD`
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# Running `just a foo` will fail with "A: unbound variable"
a $A $B=`echo $A`:
  echo $A $B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;a href="https://raw.githubusercontent.com/casey/just/master/#export"&gt;export&lt;/a&gt; is set, all &lt;code&gt;just&lt;/code&gt; variables are exported as environment variables.&lt;/p&gt; 
&lt;h4&gt;Unexporting Environment Variables&lt;sup&gt;1.29.0&lt;/sup&gt;&lt;/h4&gt; 
&lt;p&gt;Environment variables can be unexported with the &lt;code&gt;unexport keyword&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;unexport FOO

@foo:
  echo $FOO
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ export FOO=bar
$ just foo
sh: FOO: unbound variable
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Getting Environment Variables from the environment&lt;/h4&gt; 
&lt;p&gt;Environment variables from the environment are passed automatically to the recipes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;print_home_folder:
  echo "HOME is: '${HOME}'"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just
HOME is '/home/myuser'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Setting &lt;code&gt;just&lt;/code&gt; Variables from Environment Variables&lt;/h4&gt; 
&lt;p&gt;Environment variables can be propagated to &lt;code&gt;just&lt;/code&gt; variables using the &lt;code&gt;env()&lt;/code&gt; function. See &lt;a href="https://raw.githubusercontent.com/casey/just/master/#environment-variables"&gt;environment-variables&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Recipe Parameters&lt;/h3&gt; 
&lt;p&gt;Recipes may have parameters. Here recipe &lt;code&gt;build&lt;/code&gt; has a parameter called &lt;code&gt;target&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build target:
  @echo 'Building {{target}}…'
  cd {{target}} &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To pass arguments on the command line, put them after the recipe name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just build my-awesome-project
Building my-awesome-project…
cd my-awesome-project &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To pass arguments to a dependency, put the dependency in parentheses along with the arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default: (build "main")

build target:
  @echo 'Building {{target}}…'
  cd {{target}} &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variables can also be passed as arguments to dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;target := "main"

_build version:
  @echo 'Building {{version}}…'
  cd {{version}} &amp;amp;&amp;amp; make

build: (_build target)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A command's arguments can be passed to dependency by putting the dependency in parentheses along with the arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build target:
  @echo "Building {{target}}…"

push target: (build target)
  @echo 'Pushing {{target}}…'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters may have default values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default := 'all'

test target tests=default:
  @echo 'Testing {{target}}:{{tests}}…'
  ./test --tests {{tests}} {{target}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters with default values may be omitted:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test server
Testing server:all…
./test --tests all server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or supplied:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just test server unit
Testing server:unit…
./test --tests unit server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Default values may be arbitrary expressions, but expressions containing the &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, or &lt;code&gt;/&lt;/code&gt; operators must be parenthesized:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;arch := "wasm"

test triple=(arch + "-unknown-unknown") input=(arch / "input.dat"):
  ./test {{triple}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The last parameter of a recipe may be variadic, indicated with either a &lt;code&gt;+&lt;/code&gt; or a &lt;code&gt;*&lt;/code&gt; before the argument name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;backup +FILES:
  scp {{FILES}} me@server.com:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters prefixed with &lt;code&gt;+&lt;/code&gt; accept &lt;em&gt;one or more&lt;/em&gt; arguments and expand to a string containing those arguments separated by spaces:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just backup FAQ.md GRAMMAR.md
scp FAQ.md GRAMMAR.md me@server.com:
FAQ.md                  100% 1831     1.8KB/s   00:00
GRAMMAR.md              100% 1666     1.6KB/s   00:00
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters prefixed with &lt;code&gt;*&lt;/code&gt; accept &lt;em&gt;zero or more&lt;/em&gt; arguments and expand to a string containing those arguments separated by spaces, or an empty string if no arguments are present:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;commit MESSAGE *FLAGS:
  git commit {{FLAGS}} -m "{{MESSAGE}}"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Variadic parameters can be assigned default values. These are overridden by arguments passed on the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test +FLAGS='-q':
  cargo test {{FLAGS}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;{{…}}&lt;/code&gt; substitutions may need to be quoted if they contain spaces. For example, if you have the following recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;search QUERY:
  lynx https://www.google.com/?q={{QUERY}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And you type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just search "cat toupee"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; will run the command &lt;code&gt;lynx https://www.google.com/?q=cat toupee&lt;/code&gt;, which will get parsed by &lt;code&gt;sh&lt;/code&gt; as &lt;code&gt;lynx&lt;/code&gt;, &lt;code&gt;https://www.google.com/?q=cat&lt;/code&gt;, and &lt;code&gt;toupee&lt;/code&gt;, and not the intended &lt;code&gt;lynx&lt;/code&gt; and &lt;code&gt;https://www.google.com/?q=cat toupee&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can fix this by adding quotes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;search QUERY:
  lynx 'https://www.google.com/?q={{QUERY}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Parameters prefixed with a &lt;code&gt;$&lt;/code&gt; will be exported as environment variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo $bar:
  echo $bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;p&gt;Dependencies run before recipes that depend on them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a: b
  @echo A

b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just a
B
A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In a given invocation of &lt;code&gt;just&lt;/code&gt;, a recipe with the same arguments will only run once, regardless of how many times it appears in the command-line invocation, or how many times it appears as a dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  @echo A

b: a
  @echo B

c: a
  @echo C
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just a a a a a
A
$ just b c
A
B
C
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Multiple recipes may depend on a recipe that performs some kind of setup, and when those recipes run, that setup will only be performed once:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c

test-foo: build
  ./a.out --test foo

test-bar: build
  ./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just test-foo test-bar
cc main.c
./a.out --test foo
./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Recipes in a given run are only skipped when they receive the same arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;build:
  cc main.c

test TEST: build
  ./a.out --test {{TEST}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just test foo test bar
cc main.c
./a.out --test foo
./a.out --test bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Recipes at the End of a Recipe&lt;/h4&gt; 
&lt;p&gt;Normal dependencies of a recipes always run before a recipe starts. That is to say, the dependee always runs before the depender. These dependencies are called "prior dependencies".&lt;/p&gt; 
&lt;p&gt;A recipe can also have subsequent dependencies, which run immediately after the recipe and are introduced with an &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  echo 'A!'

b: a &amp;amp;&amp;amp; c d
  echo 'B!'

c:
  echo 'C!'

d:
  echo 'D!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;…running &lt;em&gt;b&lt;/em&gt; prints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'A!'
A!
echo 'B!'
B!
echo 'C!'
C!
echo 'D!'
D!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Running Recipes in the Middle of a Recipe&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; doesn't support running recipes in the middle of another recipe, but you can call &lt;code&gt;just&lt;/code&gt; recursively in the middle of a recipe. Given the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a:
  echo 'A!'

b: a
  echo 'B start!'
  just c
  echo 'B end!'

c:
  echo 'C!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;…running &lt;em&gt;b&lt;/em&gt; prints:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
echo 'A!'
A!
echo 'B start!'
B start!
echo 'C!'
C!
echo 'B end!'
B end!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This has limitations, since recipe &lt;code&gt;c&lt;/code&gt; is run with an entirely new invocation of &lt;code&gt;just&lt;/code&gt;: Assignments will be recalculated, dependencies might run twice, and command line arguments will not be propagated to the child &lt;code&gt;just&lt;/code&gt; process.&lt;/p&gt; 
&lt;h3&gt;Shebang Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes that start with &lt;code&gt;#!&lt;/code&gt; are called shebang recipes, and are executed by saving the recipe body to a file and running it. This lets you write recipes in different languages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;polyglot: python js perl sh ruby nu

python:
  #!/usr/bin/env python3
  print('Hello from python!')

js:
  #!/usr/bin/env node
  console.log('Greetings from JavaScript!')

perl:
  #!/usr/bin/env perl
  print "Larry Wall says Hi!\n";

sh:
  #!/usr/bin/env sh
  hello='Yo'
  echo "$hello from a shell script!"

nu:
  #!/usr/bin/env nu
  let hello = 'Hola'
  echo $"($hello) from a nushell script!"

ruby:
  #!/usr/bin/env ruby
  puts "Hello from ruby!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just polyglot
Hello from python!
Greetings from JavaScript!
Larry Wall says Hi!
Yo from a shell script!
Hola from a nushell script!
Hello from ruby!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Unix-like operating systems, including Linux and MacOS, shebang recipes are executed by saving the recipe body to a file in a temporary directory, marking the file as executable, and executing it. The OS then parses the shebang line into a command line and invokes it, including the path to the file. For example, if a recipe starts with &lt;code&gt;#!/usr/bin/env bash&lt;/code&gt;, the final command that the OS runs will be something like &lt;code&gt;/usr/bin/env bash /tmp/PATH_TO_SAVED_RECIPE_BODY&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Shebang line splitting is operating system dependent. When passing a command with arguments, you may need to tell &lt;code&gt;env&lt;/code&gt; to split them explicitly by using the &lt;code&gt;-S&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;run:
  #!/usr/bin/env -S bash -x
  ls
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Windows does not support shebang lines. On Windows, &lt;code&gt;just&lt;/code&gt; splits the shebang line into a command and arguments, saves the recipe body to a file, and invokes the split command and arguments, adding the path to the saved recipe body as the final argument. For example, on Windows, if a recipe starts with &lt;code&gt;#! py&lt;/code&gt;, the final command the OS runs will be something like &lt;code&gt;py C:\Temp\PATH_TO_SAVED_RECIPE_BODY&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Script Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes with a &lt;code&gt;[script(COMMAND)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt; attribute are run as scripts interpreted by &lt;code&gt;COMMAND&lt;/code&gt;. This avoids some of the issues with shebang recipes, such as the use of &lt;code&gt;cygpath&lt;/code&gt; on Windows, the need to use &lt;code&gt;/usr/bin/env&lt;/code&gt;, inconsistencies in shebang line splitting across Unix OSs, and requiring a temporary directory from which files can be executed.&lt;/p&gt; 
&lt;p&gt;Recipes with an empty &lt;code&gt;[script]&lt;/code&gt; attribute are executed with the value of &lt;code&gt;set script-interpreter := […]&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;, defaulting to &lt;code&gt;sh -eu&lt;/code&gt;, and &lt;em&gt;not&lt;/em&gt; the value of &lt;code&gt;set shell&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The body of the recipe is evaluated, written to disk in the temporary directory, and run by passing its path as an argument to &lt;code&gt;COMMAND&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;[script(…)]&lt;/code&gt; attribute is unstable, so you'll need to use &lt;code&gt;set unstable&lt;/code&gt;, set the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable, or pass &lt;code&gt;--unstable&lt;/code&gt; on the command line.&lt;/p&gt; 
&lt;h3&gt;Script and Shebang Recipe Temporary Files&lt;/h3&gt; 
&lt;p&gt;Both script and shebang recipes write the recipe body to a temporary file for execution. Script recipes execute that file by passing it to a command, while shebang recipes execute the file directly. Shebang recipe execution will fail if the filesystem containing the temporary file is mounted with &lt;code&gt;noexec&lt;/code&gt; or is otherwise non-executable.&lt;/p&gt; 
&lt;p&gt;The directory that &lt;code&gt;just&lt;/code&gt; writes temporary files to may be configured in a number of ways, from highest to lowest precedence:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Globally with the &lt;code&gt;--tempdir&lt;/code&gt; command-line option or the &lt;code&gt;JUST_TEMPDIR&lt;/code&gt; environment variable&lt;sup&gt;1.41.0&lt;/sup&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;On a per-module basis with the &lt;code&gt;tempdir&lt;/code&gt; setting.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Globally on Linux with the &lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt; environment variable.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Falling back to the directory returned by &lt;a href="https://doc.rust-lang.org/std/env/fn.temp_dir.html"&gt;std::env::temp_dir&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Python Recipes with &lt;code&gt;uv&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/astral-sh/uv"&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; is an excellent cross-platform python project manager, written in Rust.&lt;/p&gt; 
&lt;p&gt;Using the &lt;code&gt;[script]&lt;/code&gt; attribute and &lt;code&gt;script-interpreter&lt;/code&gt; setting, &lt;code&gt;just&lt;/code&gt; can easily be configured to run Python recipes with &lt;code&gt;uv&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set unstable

set script-interpreter := ['uv', 'run', '--script']

[script]
hello:
  print("Hello from Python!")

[script]
goodbye:
  # /// script
  # requires-python = "&amp;gt;=3.11"
  # dependencies=["sh"]
  # ///
  import sh
  print(sh.echo("Goodbye from Python!"), end='')
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, a shebang also works:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;hello:
  #!/usr/bin/env -S uv run --script
  print("Hello from Python!")
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Safer Bash Shebang Recipes&lt;/h3&gt; 
&lt;p&gt;If you're writing a &lt;code&gt;bash&lt;/code&gt; shebang recipe, consider adding &lt;code&gt;set -euxo pipefail&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  hello='Yo'
  echo "$hello from Bash!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It isn't strictly necessary, but &lt;code&gt;set -euxo pipefail&lt;/code&gt; turns on a few useful features that make &lt;code&gt;bash&lt;/code&gt; shebang recipes behave more like normal, linewise &lt;code&gt;just&lt;/code&gt; recipe:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -e&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a command fails.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -u&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a variable is undefined.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -x&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; print each script line before it's run.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;set -o pipefail&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a command in a pipeline fails. This is &lt;code&gt;bash&lt;/code&gt;-specific, so isn't turned on in normal linewise &lt;code&gt;just&lt;/code&gt; recipes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Together, these avoid a lot of shell scripting gotchas.&lt;/p&gt; 
&lt;h4&gt;Shebang Recipe Execution on Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, shebang interpreter paths containing a &lt;code&gt;/&lt;/code&gt; are translated from Unix-style paths to Windows-style paths using &lt;code&gt;cygpath&lt;/code&gt;, a utility that ships with &lt;a href="http://www.cygwin.com"&gt;Cygwin&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example, to execute this recipe on Windows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;echo:
  #!/bin/sh
  echo "Hello!"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The interpreter path &lt;code&gt;/bin/sh&lt;/code&gt; will be translated to a Windows-style path using &lt;code&gt;cygpath&lt;/code&gt; before being executed.&lt;/p&gt; 
&lt;p&gt;If the interpreter path does not contain a &lt;code&gt;/&lt;/code&gt; it will be executed without being translated. This is useful if &lt;code&gt;cygpath&lt;/code&gt; is not available, or you wish to pass a Windows-style path to the interpreter.&lt;/p&gt; 
&lt;h3&gt;Setting Variables in a Recipe&lt;/h3&gt; 
&lt;p&gt;Recipe lines are interpreted by the shell, not &lt;code&gt;just&lt;/code&gt;, so it's not possible to set &lt;code&gt;just&lt;/code&gt; variables in the middle of a recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;foo:
  x := "hello" # This doesn't work!
  echo {{x}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is possible to use shell variables, but there's another problem. Every recipe line is run by a new shell instance, so variables set in one line won't be set in the next:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  x=hello &amp;amp;&amp;amp; echo $x # This works!
  y=bye
  echo $y            # This doesn't, `y` is undefined here!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The best way to work around this is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  x=hello
  echo $x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sharing Environment Variables Between Recipes&lt;/h3&gt; 
&lt;p&gt;Each line of each recipe is executed by a fresh shell, so it is not possible to share environment variables between recipes.&lt;/p&gt; 
&lt;h4&gt;Using Python Virtual Environments&lt;/h4&gt; 
&lt;p&gt;Some tools, like &lt;a href="https://docs.python.org/3/library/venv.html"&gt;Python's venv&lt;/a&gt;, require loading environment variables in order to work, making them challenging to use with &lt;code&gt;just&lt;/code&gt;. As a workaround, you can execute the virtual environment binaries directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;venv:
  [ -d foo ] || python3 -m venv foo

run: venv
  ./foo/bin/python3 main.py
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Changing the Working Directory in a Recipe&lt;/h3&gt; 
&lt;p&gt;Each recipe line is executed by a new shell, so if you change the working directory on one line, it won't have an effect on later lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  pwd    # This `pwd` will print the same directory…
  cd bar
  pwd    # …as this `pwd`!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are a couple ways around this. One is to call &lt;code&gt;cd&lt;/code&gt; on the same line as the command you want to run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  cd bar &amp;amp;&amp;amp; pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The other is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing, and thus a &lt;code&gt;cd&lt;/code&gt; on one line will affect later lines, just like a shell script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  set -euxo pipefail
  cd bar
  pwd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Indentation&lt;/h3&gt; 
&lt;p&gt;Recipe lines can be indented with spaces or tabs, but not a mix of both. All of a recipe's lines must have the same type of indentation, but different recipes in the same &lt;code&gt;justfile&lt;/code&gt; may use different indentation.&lt;/p&gt; 
&lt;p&gt;Each recipe must be indented at least one level from the &lt;code&gt;recipe-name&lt;/code&gt; but after that may be further indented.&lt;/p&gt; 
&lt;p&gt;Here's a justfile with a recipe indented with spaces, represented as &lt;code&gt;·&lt;/code&gt;, and tabs, represented as &lt;code&gt;→&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;set windows-shell := ["pwsh", "-NoLogo", "-NoProfileLoadTime", "-Command"]

set ignore-comments

list-space directory:
··#!pwsh
··foreach ($item in $(Get-ChildItem {{directory}} )) {
····echo $item.Name
··}
··echo ""

# indentation nesting works even when newlines are escaped
list-tab directory:
→ @foreach ($item in $(Get-ChildItem {{directory}} )) { \
→ → echo $item.Name \
→ }
→ @echo ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-pwsh"&gt;PS &amp;gt; just list-space ~
Desktop
Documents
Downloads

PS &amp;gt; just list-tab ~
Desktop
Documents
Downloads
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Multi-Line Constructs&lt;/h3&gt; 
&lt;p&gt;Recipes without an initial shebang are evaluated and run line-by-line, which means that multi-line constructs probably won't do what you want.&lt;/p&gt; 
&lt;p&gt;For example, with the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;conditional:
  if true; then
    echo 'True!'
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The extra leading whitespace before the second line of the &lt;code&gt;conditional&lt;/code&gt; recipe will produce a parse error:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just conditional
error: Recipe line has extra leading whitespace
  |
3 |         echo 'True!'
  |     ^^^^^^^^^^^^^^^^
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To work around this, you can write conditionals on one line, escape newlines with slashes, or add a shebang to your recipe. Some examples of multi-line constructs are provided for reference.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;if&lt;/code&gt; statements&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  if true; then echo 'True!'; fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  if true; then \
    echo 'True!'; \
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;conditional:
  #!/usr/bin/env sh
  if true; then
    echo 'True!'
  fi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;for&lt;/code&gt; loops&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  for file in `ls .`; do echo $file; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  for file in `ls .`; do \
    echo $file; \
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;for:
  #!/usr/bin/env sh
  for file in `ls .`; do
    echo $file
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;while&lt;/code&gt; loops&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  while `server-is-dead`; do ping -c 1 server; done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  while `server-is-dead`; do \
    ping -c 1 server; \
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;while:
  #!/usr/bin/env sh
  while `server-is-dead`; do
    ping -c 1 server
  done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Outside Recipe Bodies&lt;/h4&gt; 
&lt;p&gt;Parenthesized expressions can span multiple lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;abc := ('a' +
        'b'
         + 'c')

abc2 := (
  'a' +
  'b' +
  'c'
)

foo param=('foo'
      + 'bar'
    ):
  echo {{param}}

bar: (foo
        'Foo'
     )
  echo 'Bar!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lines ending with a backslash continue on to the next line as if the lines were joined by whitespace&lt;sup&gt;1.15.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;a := 'foo' + \
     'bar'

foo param1 \
  param2='foo' \
  *varparam='': dep1 \
                (dep2 'foo')
  echo {{param1}} {{param2}} {{varparam}}

dep1: \
    # this comment is not part of the recipe body
  echo 'dep1'

dep2 \
  param:
    echo 'Dependency with parameter {{param}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Backslash line continuations can also be used in interpolations. The line following the backslash must be indented.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe:
  echo '{{ \
  "This interpolation " + \
    "has a lot of text." \
  }}'
  echo 'back to recipe body'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Command-line Options&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; supports a number of useful command-line options for listing, dumping, and debugging recipes and variables:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
  js
  perl
  polyglot
  python
  ruby
$ just --show perl
perl:
  #!/usr/bin/env perl
  print "Larry Wall says Hi!\n";
$ just --show polyglot
polyglot: python js perl sh ruby
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Setting Command-line Options with Environment Variables&lt;/h4&gt; 
&lt;p&gt;Some command-line options can be set with environment variables&lt;/p&gt; 
&lt;p&gt;For example, unstable features can be enabled either with the &lt;code&gt;--unstable&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --unstable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or by setting the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ export JUST_UNSTABLE=1
$ just
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since environment variables are inherited by child processes, command-line options set with environment variables are inherited by recursive invocations of &lt;code&gt;just&lt;/code&gt;, where as command line options set with arguments are not.&lt;/p&gt; 
&lt;p&gt;Consult &lt;code&gt;just --help&lt;/code&gt; for which options can be set with environment variables.&lt;/p&gt; 
&lt;h3&gt;Private Recipes&lt;/h3&gt; 
&lt;p&gt;Recipes and aliases whose name starts with a &lt;code&gt;_&lt;/code&gt; are omitted from &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test: _test-helper
  ./bin/test

_test-helper:
  ./bin/super-secret-test-helper-stuff
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And from &lt;code&gt;just --summary&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --summary
test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[private]&lt;/code&gt; attribute&lt;sup&gt;1.10.0&lt;/sup&gt; may also be used to hide recipes or aliases without needing to change the name:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[private]
foo:

[private]
alias b := bar

bar:
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is useful for helper recipes which are only meant to be used as dependencies of other recipes.&lt;/p&gt; 
&lt;h3&gt;Quiet Recipes&lt;/h3&gt; 
&lt;p&gt;A recipe name may be prefixed with &lt;code&gt;@&lt;/code&gt; to invert the meaning of &lt;code&gt;@&lt;/code&gt; before each line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@quiet:
  echo hello
  echo goodbye
  @# all done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now only the lines starting with &lt;code&gt;@&lt;/code&gt; will be echoed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just quiet
hello
goodbye
# all done!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All recipes in a Justfile can be made quiet with &lt;code&gt;set quiet&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set quiet

foo:
  echo "This is quiet"

@foo2:
  echo "This is also quiet"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;[no-quiet]&lt;/code&gt; attribute overrides this setting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set quiet

foo:
  echo "This is quiet"

[no-quiet]
foo2:
  echo "This is not quiet"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Shebang recipes are quiet by default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo:
  #!/usr/bin/env bash
  echo 'Foo!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo
Foo!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Adding &lt;code&gt;@&lt;/code&gt; to a shebang recipe name makes &lt;code&gt;just&lt;/code&gt; print the recipe before executing it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;@bar:
  #!/usr/bin/env bash
  echo 'Bar!'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
#!/usr/bin/env bash
echo 'Bar!'
Bar!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally prints error messages when a recipe line fails. These error messages can be suppressed using the &lt;code&gt;[no-exit-message]&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; attribute. You may find this especially useful with a recipe that wraps a tool:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;git *args:
    @git {{args}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just git status
fatal: not a git repository (or any of the parent directories): .git
error: Recipe `git` failed on line 2 with exit code 128
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add the attribute to suppress the exit error message when the tool exits with a non-zero code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[no-exit-message]
git *args:
    @git {{args}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just git status
fatal: not a git repository (or any of the parent directories): .git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Selecting Recipes to Run With an Interactive Chooser&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;--choose&lt;/code&gt; subcommand makes &lt;code&gt;just&lt;/code&gt; invoke a chooser to select which recipes to run. Choosers should read lines containing recipe names from standard input and print one or more of those names separated by spaces to standard output.&lt;/p&gt; 
&lt;p&gt;Because there is currently no way to run a recipe that requires arguments with &lt;code&gt;--choose&lt;/code&gt;, such recipes will not be given to the chooser. Private recipes and aliases are also skipped.&lt;/p&gt; 
&lt;p&gt;The chooser can be overridden with the &lt;code&gt;--chooser&lt;/code&gt; flag. If &lt;code&gt;--chooser&lt;/code&gt; is not given, then &lt;code&gt;just&lt;/code&gt; first checks if &lt;code&gt;$JUST_CHOOSER&lt;/code&gt; is set. If it isn't, then the chooser defaults to &lt;code&gt;fzf&lt;/code&gt;, a popular fuzzy finder.&lt;/p&gt; 
&lt;p&gt;Arguments can be included in the chooser, i.e. &lt;code&gt;fzf --exact&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The chooser is invoked in the same way as recipe lines. For example, if the chooser is &lt;code&gt;fzf&lt;/code&gt;, it will be invoked with &lt;code&gt;sh -cu 'fzf'&lt;/code&gt;, and if the shell, or the shell arguments are overridden, the chooser invocation will respect those overrides.&lt;/p&gt; 
&lt;p&gt;If you'd like &lt;code&gt;just&lt;/code&gt; to default to selecting recipes with a chooser, you can use this as your default recipe:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;default:
  @just --choose
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Invoking &lt;code&gt;justfile&lt;/code&gt;s in Other Directories&lt;/h3&gt; 
&lt;p&gt;If the first argument passed to &lt;code&gt;just&lt;/code&gt; contains a &lt;code&gt;/&lt;/code&gt;, then the following occurs:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;The argument is split at the last &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The part before the last &lt;code&gt;/&lt;/code&gt; is treated as a directory. &lt;code&gt;just&lt;/code&gt; will start its search for the &lt;code&gt;justfile&lt;/code&gt; there, instead of in the current directory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The part after the last slash is treated as a normal argument, or ignored if it is empty.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This may seem a little strange, but it's useful if you wish to run a command in a &lt;code&gt;justfile&lt;/code&gt; that is in a subdirectory.&lt;/p&gt; 
&lt;p&gt;For example, if you are in a directory which contains a subdirectory named &lt;code&gt;foo&lt;/code&gt;, which contains a &lt;code&gt;justfile&lt;/code&gt; with the recipe &lt;code&gt;build&lt;/code&gt;, which is also the default recipe, the following are all equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ (cd foo &amp;amp;&amp;amp; just build)
$ just foo/build
$ just foo/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additional recipes after the first are sought in the same &lt;code&gt;justfile&lt;/code&gt;. For example, the following are both equivalent:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo/a b
$ (cd foo &amp;amp;&amp;amp; just a b)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And will both invoke recipes &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;foo/justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Imports&lt;/h3&gt; 
&lt;p&gt;One &lt;code&gt;justfile&lt;/code&gt; can include the contents of another using &lt;code&gt;import&lt;/code&gt; statements.&lt;/p&gt; 
&lt;p&gt;If you have the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;import 'foo/bar.just'

a: b
  @echo A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the following text in &lt;code&gt;foo/bar.just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;foo/bar.just&lt;/code&gt; will be included in &lt;code&gt;justfile&lt;/code&gt; and recipe &lt;code&gt;b&lt;/code&gt; will be defined:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just b
B
$ just a
B
A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; path can be absolute or relative to the location of the justfile containing it. A leading &lt;code&gt;~/&lt;/code&gt; in the import path is replaced with the current users home directory.&lt;/p&gt; 
&lt;p&gt;Justfiles are insensitive to order, so included files can reference variables and recipes defined after the &lt;code&gt;import&lt;/code&gt; statement.&lt;/p&gt; 
&lt;p&gt;Imported files can themselves contain &lt;code&gt;import&lt;/code&gt;s, which are processed recursively.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;allow-duplicate-recipes&lt;/code&gt; and &lt;code&gt;allow-duplicate-variables&lt;/code&gt; allow duplicate recipes and variables, respectively, to override each other, instead of producing an error.&lt;/p&gt; 
&lt;p&gt;Within a module, later definitions override earlier definitions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set allow-duplicate-recipes

foo:

foo:
  echo 'yes'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When &lt;code&gt;import&lt;/code&gt;s are involved, things unfortunately get much more complicated and hard to explain.&lt;/p&gt; 
&lt;p&gt;Shallower definitions always override deeper definitions, so recipes at the top level will override recipes in imports, and recipes in an import will override recipes in an import which itself imports those recipes.&lt;/p&gt; 
&lt;p&gt;When two duplicate definitions are imported and are at the same depth, the one from the earlier import will override the one from the later import.&lt;/p&gt; 
&lt;p&gt;This is because &lt;code&gt;just&lt;/code&gt; uses a stack when processing imports, pushing imports onto the stack in source-order, and always processing the top of the stack next, so earlier imports are actually handled later by the compiler.&lt;/p&gt; 
&lt;p&gt;This is definitely a bug, but since &lt;code&gt;just&lt;/code&gt; has very strong backwards compatibility guarantees and we take enormous pains not to break anyone's &lt;code&gt;justfile&lt;/code&gt;, we have created issue #2540 to discuss whether or not we can actually fix it.&lt;/p&gt; 
&lt;p&gt;Imports may be made optional by putting a &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;import&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;import? 'foo/bar.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Importing the same source file multiple times is not an error&lt;sup&gt;1.37.0&lt;/sup&gt;. This allows importing multiple justfiles, for example &lt;code&gt;foo.just&lt;/code&gt; and &lt;code&gt;bar.just&lt;/code&gt;, which both import a third justfile containing shared recipes, for example &lt;code&gt;baz.just&lt;/code&gt;, without the duplicate import of &lt;code&gt;baz.just&lt;/code&gt; being an error:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# justfile
import 'foo.just'
import 'bar.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# foo.just
import 'baz.just'
foo: baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# bar.just
import 'baz.just'
bar: baz
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;# baz
baz:
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Modules&lt;sup&gt;1.19.0&lt;/sup&gt;&lt;/h3&gt; 
&lt;p&gt;A &lt;code&gt;justfile&lt;/code&gt; can declare modules using &lt;code&gt;mod&lt;/code&gt; statements.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;mod&lt;/code&gt; statements were stabilized in &lt;code&gt;just&lt;/code&gt;&lt;sup&gt;1.31.0&lt;/sup&gt;. In earlier versions, you'll need to use the &lt;code&gt;--unstable&lt;/code&gt; flag, &lt;code&gt;set unstable&lt;/code&gt;, or set the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable to use them.&lt;/p&gt; 
&lt;p&gt;If you have the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod bar

a:
  @echo A
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the following text in &lt;code&gt;bar.just&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;b:
  @echo B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;bar.just&lt;/code&gt; will be included in &lt;code&gt;justfile&lt;/code&gt; as a submodule. Recipes, aliases, and variables defined in one submodule cannot be used in another, and each module uses its own settings.&lt;/p&gt; 
&lt;p&gt;Recipes in submodules can be invoked as subcommands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar b
B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or with path syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar::b
B
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If a module is named &lt;code&gt;foo&lt;/code&gt;, just will search for the module file in &lt;code&gt;foo.just&lt;/code&gt;, &lt;code&gt;foo/mod.just&lt;/code&gt;, &lt;code&gt;foo/justfile&lt;/code&gt;, and &lt;code&gt;foo/.justfile&lt;/code&gt;. In the latter two cases, the module file may have any capitalization.&lt;/p&gt; 
&lt;p&gt;Module statements may be of the form:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;mod foo 'PATH'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Which loads the module's source file from &lt;code&gt;PATH&lt;/code&gt;, instead of from the usual locations. A leading &lt;code&gt;~/&lt;/code&gt; in &lt;code&gt;PATH&lt;/code&gt; is replaced with the current user's home directory. &lt;code&gt;PATH&lt;/code&gt; may point to the module source file itself, or to a directory containing the module source file with the name &lt;code&gt;mod.just&lt;/code&gt;, &lt;code&gt;justfile&lt;/code&gt;, or &lt;code&gt;.justfile&lt;/code&gt;. In the latter two cases, the module file may have any capitalization.&lt;/p&gt; 
&lt;p&gt;Environment files are only loaded for the root justfile, and loaded environment variables are available in submodules. Settings in submodules that affect environment file loading are ignored.&lt;/p&gt; 
&lt;p&gt;Recipes in submodules without the &lt;code&gt;[no-cd]&lt;/code&gt; attribute run with the working directory set to the directory containing the submodule source file.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;justfile()&lt;/code&gt; and &lt;code&gt;justfile_directory()&lt;/code&gt; always return the path to the root justfile and the directory that contains it, even when called from submodule recipes.&lt;/p&gt; 
&lt;p&gt;Modules may be made optional by putting a &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;mod&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;mod? foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Missing source files for optional modules do not produce an error.&lt;/p&gt; 
&lt;p&gt;Optional modules with no source file do not conflict, so you can have multiple mod statements with the same name, but with different source file paths, as long as at most one source file exists:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;mod? foo 'bar.just'
mod? foo 'baz.just'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Modules may be given doc comments which appear in &lt;code&gt;--list&lt;/code&gt; output&lt;sup&gt;1.30.0&lt;/sup&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-justfile"&gt;# foo is a great module!
mod foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --list
Available recipes:
    foo ... # foo is a great module!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Modules are still missing a lot of features, for example, the ability to refer to variables in other modules. See the &lt;a href="https://github.com/casey/just/issues/2252"&gt;module improvement tracking issue&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Hiding &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; looks for &lt;code&gt;justfile&lt;/code&gt;s named &lt;code&gt;justfile&lt;/code&gt; and &lt;code&gt;.justfile&lt;/code&gt;, which can be used to keep a &lt;code&gt;justfile&lt;/code&gt; hidden.&lt;/p&gt; 
&lt;h3&gt;Just Scripts&lt;/h3&gt; 
&lt;p&gt;By adding a shebang line to the top of a &lt;code&gt;justfile&lt;/code&gt; and making it executable, &lt;code&gt;just&lt;/code&gt; can be used as an interpreter for scripts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cat &amp;gt; script &amp;lt;&amp;lt;EOF
#!/usr/bin/env just --justfile

foo:
  echo foo
EOF
$ chmod +x script
$ ./script foo
echo foo
foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When a script with a shebang is executed, the system supplies the path to the script as an argument to the command in the shebang. So, with a shebang of &lt;code&gt;#!/usr/bin/env just --justfile&lt;/code&gt;, the command will be &lt;code&gt;/usr/bin/env just --justfile PATH_TO_SCRIPT&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;With the above shebang, &lt;code&gt;just&lt;/code&gt; will change its working directory to the location of the script. If you'd rather leave the working directory unchanged, use &lt;code&gt;#!/usr/bin/env just --working-directory . --justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note: Shebang line splitting is not consistent across operating systems. The previous examples have only been tested on macOS. On Linux, you may need to pass the &lt;code&gt;-S&lt;/code&gt; flag to &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;#!/usr/bin/env -S just --justfile

default:
  echo foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Formatting and dumping &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;Each &lt;code&gt;justfile&lt;/code&gt; has a canonical formatting with respect to whitespace and newlines.&lt;/p&gt; 
&lt;p&gt;You can overwrite the current justfile with a canonically-formatted version using the currently-unstable &lt;code&gt;--fmt&lt;/code&gt; flag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cat justfile
# A lot of blank lines





some-recipe:
  echo "foo"
$ just --fmt --unstable
$ cat justfile
# A lot of blank lines

some-recipe:
    echo "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Invoking &lt;code&gt;just --fmt --check --unstable&lt;/code&gt; runs &lt;code&gt;--fmt&lt;/code&gt; in check mode. Instead of overwriting the &lt;code&gt;justfile&lt;/code&gt;, &lt;code&gt;just&lt;/code&gt; will exit with an exit code of 0 if it is formatted correctly, and will exit with 1 and print a diff if it is not.&lt;/p&gt; 
&lt;p&gt;You can use the &lt;code&gt;--dump&lt;/code&gt; command to output a formatted version of the &lt;code&gt;justfile&lt;/code&gt; to stdout:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --dump &amp;gt; formatted-justfile
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;--dump&lt;/code&gt; command can be used with &lt;code&gt;--dump-format json&lt;/code&gt; to print a JSON representation of a &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Fallback to parent &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;If a recipe is not found in a &lt;code&gt;justfile&lt;/code&gt; and the &lt;code&gt;fallback&lt;/code&gt; setting is set, &lt;code&gt;just&lt;/code&gt; will look for &lt;code&gt;justfile&lt;/code&gt;s in the parent directory and up, until it reaches the root directory. &lt;code&gt;just&lt;/code&gt; will stop after it reaches a &lt;code&gt;justfile&lt;/code&gt; in which the &lt;code&gt;fallback&lt;/code&gt; setting is &lt;code&gt;false&lt;/code&gt; or unset.&lt;/p&gt; 
&lt;p&gt;As an example, suppose the current directory contains this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set fallback
foo:
  echo foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And the parent directory contains this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;bar:
  echo bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just bar
Trying ../justfile
echo bar
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Avoiding Argument Splitting&lt;/h3&gt; 
&lt;p&gt;Given this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo argument:
  touch {{argument}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following command will create two files, &lt;code&gt;some&lt;/code&gt; and &lt;code&gt;argument.txt&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just foo "some argument.txt"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The user's shell will parse &lt;code&gt;"some argument.txt"&lt;/code&gt; as a single argument, but when &lt;code&gt;just&lt;/code&gt; replaces &lt;code&gt;touch {{argument}}&lt;/code&gt; with &lt;code&gt;touch some argument.txt&lt;/code&gt;, the quotes are not preserved, and &lt;code&gt;touch&lt;/code&gt; will receive two arguments.&lt;/p&gt; 
&lt;p&gt;There are a few ways to avoid this: quoting, positional arguments, and exported arguments.&lt;/p&gt; 
&lt;h4&gt;Quoting&lt;/h4&gt; 
&lt;p&gt;Quotes can be added around the &lt;code&gt;{{argument}}&lt;/code&gt; interpolation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo argument:
  touch '{{argument}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This preserves &lt;code&gt;just&lt;/code&gt;'s ability to catch variable name typos before running, for example if you were to write &lt;code&gt;{{argument}}&lt;/code&gt;, but will not do what you want if the value of &lt;code&gt;argument&lt;/code&gt; contains single quotes.&lt;/p&gt; 
&lt;h4&gt;Positional Arguments&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;positional-arguments&lt;/code&gt; setting causes all arguments to be passed as positional arguments, allowing them to be accessed with &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, …, and &lt;code&gt;$@&lt;/code&gt;, which can be then double-quoted to avoid further splitting by the shell:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set positional-arguments

foo argument:
  touch "$1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This defeats &lt;code&gt;just&lt;/code&gt;'s ability to catch typos, for example if you type &lt;code&gt;$2&lt;/code&gt; instead of &lt;code&gt;$1&lt;/code&gt;, but works for all possible values of &lt;code&gt;argument&lt;/code&gt;, including those with double quotes.&lt;/p&gt; 
&lt;h4&gt;Exported Arguments&lt;/h4&gt; 
&lt;p&gt;All arguments are exported when the &lt;code&gt;export&lt;/code&gt; setting is set:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;set export

foo argument:
  touch "$argument"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or individual arguments may be exported by prefixing them with &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo $argument:
  touch "$argument"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This defeats &lt;code&gt;just&lt;/code&gt;'s ability to catch typos, for example if you type &lt;code&gt;$argument&lt;/code&gt;, but works for all possible values of &lt;code&gt;argument&lt;/code&gt;, including those with double quotes.&lt;/p&gt; 
&lt;h3&gt;Configuring the Shell&lt;/h3&gt; 
&lt;p&gt;There are a number of ways to configure the shell for linewise recipes, which are the default when a recipe does not start with a &lt;code&gt;#!&lt;/code&gt; shebang. Their precedence, from highest to lowest, is:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The &lt;code&gt;--shell&lt;/code&gt; and &lt;code&gt;--shell-arg&lt;/code&gt; command line options. Passing either of these will cause &lt;code&gt;just&lt;/code&gt; to ignore any settings in the current justfile.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set windows-shell := [...]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set windows-powershell&lt;/code&gt; (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;set shell := [...]&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Since &lt;code&gt;set windows-shell&lt;/code&gt; has higher precedence than &lt;code&gt;set shell&lt;/code&gt;, you can use &lt;code&gt;set windows-shell&lt;/code&gt; to pick a shell on Windows, and &lt;code&gt;set shell&lt;/code&gt; to pick a shell for all other platforms.&lt;/p&gt; 
&lt;h3&gt;Timestamps&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can print timestamps before each recipe commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;recipe:
  echo one
  sleep 2
  echo two
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;$ just --timestamp recipe
[07:28:46] echo one
one
[07:28:46] sleep 2
[07:28:48] echo two
two
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, timestamps are formatted as &lt;code&gt;HH:MM:SS&lt;/code&gt;. The format can be changed with &lt;code&gt;--timestamp-format&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ just --timestamp recipe --timestamp-format '%H:%M:%S%.3f %Z'
[07:32:11:.349 UTC] echo one
one
[07:32:11:.350 UTC] sleep 2
[07:32:13:.352 UTC] echo two
two
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The argument to &lt;code&gt;--timestamp-format&lt;/code&gt; is a &lt;code&gt;strftime&lt;/code&gt;-style format string, see the &lt;a href="https://docs.rs/chrono/latest/chrono/format/strftime/index.html"&gt;&lt;code&gt;chrono&lt;/code&gt; library docs&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;Signal Handling&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Signal_(IPC)"&gt;Signals&lt;/a&gt; are messsages sent to running programs to trigger specific behavior. For example, &lt;code&gt;SIGINT&lt;/code&gt; is sent to all processes in the terminal forground process group when &lt;code&gt;CTRL-C&lt;/code&gt; is pressed.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; tries to exit when requested by a signal, but it also tries to avoid leaving behind running child proccesses, two goals which are somewhat in conflict.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;just&lt;/code&gt; exits leaving behind child processes, the user will have no recourse but to &lt;code&gt;ps aux | grep&lt;/code&gt; for the children and manually &lt;code&gt;kill&lt;/code&gt; them, a tedious endevour.&lt;/p&gt; 
&lt;h4&gt;Fatal Signals&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;SIGHUP&lt;/code&gt;, &lt;code&gt;SIGINT&lt;/code&gt;, and &lt;code&gt;SIGQUIT&lt;/code&gt; are generated when the user closes the terminal, types &lt;code&gt;ctrl-c&lt;/code&gt;, or types &lt;code&gt;ctrl-\&lt;/code&gt;, respectively, and are sent to all processes in the foreground process group.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;SIGTERM&lt;/code&gt; is the default signal sent by the &lt;code&gt;kill&lt;/code&gt; command, and is delivered only to its intended victim.&lt;/p&gt; 
&lt;p&gt;When a child process is not running, &lt;code&gt;just&lt;/code&gt; will exit immediately on receipt of any of the above signals.&lt;/p&gt; 
&lt;p&gt;When a child process &lt;em&gt;is&lt;/em&gt; running, &lt;code&gt;just&lt;/code&gt; will wait until it terminates, to avoid leaving it behind.&lt;/p&gt; 
&lt;p&gt;Additionally, on receipt of &lt;code&gt;SIGTERM&lt;/code&gt;, &lt;code&gt;just&lt;/code&gt; will forward &lt;code&gt;SIGTERM&lt;/code&gt; to any running children&lt;sup&gt;1.41.0&lt;/sup&gt;, since unlike other fatal signals, &lt;code&gt;SIGTERM&lt;/code&gt;, was likely sent to &lt;code&gt;just&lt;/code&gt; alone.&lt;/p&gt; 
&lt;p&gt;Regardless of whether a child process terminates successfully after &lt;code&gt;just&lt;/code&gt; receives a fatal signal, &lt;code&gt;just&lt;/code&gt; halts execution.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;SIGINFO&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;SIGINFO&lt;/code&gt; is sent to all processes in the foreground process group when the user types &lt;code&gt;ctrl-t&lt;/code&gt; on &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;BSD&lt;/a&gt;-derived operating systems, including MacOS, but not Linux.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; responds by printing a list of all child process IDs and commands&lt;sup&gt;1.41.0&lt;/sup&gt;.&lt;/p&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;On Windows, &lt;code&gt;just&lt;/code&gt; behaves as if it had received &lt;code&gt;SIGINT&lt;/code&gt; when the user types &lt;code&gt;ctrl-c&lt;/code&gt;. Other signals are unsupported.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;A changelog for the latest release is available in &lt;a href="https://raw.githubusercontent.com/casey/just/master/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;. Changelogs for previous releases are available on &lt;a href="https://github.com/casey/just/releases"&gt;the releases page&lt;/a&gt;. &lt;code&gt;just --changelog&lt;/code&gt; can also be used to make a &lt;code&gt;just&lt;/code&gt; binary print its changelog.&lt;/p&gt; 
&lt;h2&gt;Miscellanea&lt;/h2&gt; 
&lt;h3&gt;Re-running recipes when files change&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/mattgreen/watchexec"&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; can re-run any command when files change.&lt;/p&gt; 
&lt;p&gt;To re-run the recipe &lt;code&gt;foo&lt;/code&gt; when any file changes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;watchexec just foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;code&gt;watchexec --help&lt;/code&gt; for more info, including how to specify which files should be watched for changes.&lt;/p&gt; 
&lt;h3&gt;Parallelism&lt;/h3&gt; 
&lt;p&gt;Dependencies may be run in parallel with the &lt;code&gt;[parallel]&lt;/code&gt; attribute.&lt;/p&gt; 
&lt;p&gt;In this &lt;code&gt;justfile&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt; will execute in parallel when &lt;code&gt;main&lt;/code&gt; is run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;[parallel]
main: foo bar baz

foo:
  sleep 1

bar:
  sleep 1

baz:
  sleep 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GNU &lt;code&gt;parallel&lt;/code&gt; may be used to run recipe lines concurrently:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;parallel:
  #!/usr/bin/env -S parallel --shebang --ungroup --jobs {{ num_cpus() }}
  echo task 1 start; sleep 3; echo task 1 done
  echo task 2 start; sleep 3; echo task 2 done
  echo task 3 start; sleep 3; echo task 3 done
  echo task 4 start; sleep 3; echo task 4 done
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shell Alias&lt;/h3&gt; 
&lt;p&gt;For lightning-fast command running, put &lt;code&gt;alias j=just&lt;/code&gt; in your shell's configuration file.&lt;/p&gt; 
&lt;p&gt;In &lt;code&gt;bash&lt;/code&gt;, the aliased command may not keep the shell completion functionality described in the next section. Add the following line to your &lt;code&gt;.bashrc&lt;/code&gt; to use the same completion function as &lt;code&gt;just&lt;/code&gt; for your aliased command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;complete -F _just -o bashdefault -o default j
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shell Completion Scripts&lt;/h3&gt; 
&lt;p&gt;Shell completion scripts for Bash, Elvish, Fish, Nushell, PowerShell, and Zsh are available &lt;a href="https://github.com/casey/just/releases"&gt;release archives&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;just&lt;/code&gt; binary can also generate the same completion scripts at runtime using &lt;code&gt;just --completions SHELL&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ just --completions zsh &amp;gt; just.zsh
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please refer to your shell's documentation for how to install them.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;macOS Note:&lt;/em&gt; Recent versions of macOS use zsh as the default shell. If you use Homebrew to install &lt;code&gt;just&lt;/code&gt;, it will automatically install the most recent copy of the zsh completion script in the Homebrew zsh directory, which the built-in version of zsh doesn't know about by default. It's best to use this copy of the script if possible, since it will be updated whenever you update &lt;code&gt;just&lt;/code&gt; via Homebrew. Also, many other Homebrew packages use the same location for completion scripts, and the built-in zsh doesn't know about those either. To take advantage of &lt;code&gt;just&lt;/code&gt; completion in zsh in this scenario, you can set &lt;code&gt;fpath&lt;/code&gt; to the Homebrew location before calling &lt;code&gt;compinit&lt;/code&gt;. Note also that Oh My Zsh runs &lt;code&gt;compinit&lt;/code&gt; by default. So your &lt;code&gt;.zshrc&lt;/code&gt; file could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-zsh"&gt;# Init Homebrew, which adds environment variables
eval "$(brew shellenv)"

fpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath)

# Then choose one of these options:
# 1. If you're using Oh My Zsh, you can initialize it here
# source $ZSH/oh-my-zsh.sh

# 2. Otherwise, run compinit yourself
# autoload -U compinit
# compinit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Man Page&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can print its own man page with &lt;code&gt;just --man&lt;/code&gt;. Man pages are written in &lt;a href="https://en.wikipedia.org/wiki/Roff_%28software%29"&gt;&lt;code&gt;roff&lt;/code&gt;&lt;/a&gt;, a venerable markup language and one of the first practical applications of Unix. If you have &lt;a href="https://www.gnu.org/software/groff/"&gt;&lt;code&gt;groff&lt;/code&gt;&lt;/a&gt; installed you can view the man page with &lt;code&gt;just --man | groff -mandoc -Tascii | less&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Grammar&lt;/h3&gt; 
&lt;p&gt;A non-normative grammar of &lt;code&gt;justfile&lt;/code&gt;s can be found in &lt;a href="https://github.com/casey/just/raw/master/GRAMMAR.md"&gt;GRAMMAR.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;just.sh&lt;/h3&gt; 
&lt;p&gt;Before &lt;code&gt;just&lt;/code&gt; was a fancy Rust program it was a tiny shell script that called &lt;code&gt;make&lt;/code&gt;. You can find the old version in &lt;a href="https://github.com/casey/just/raw/master/contrib/just.sh"&gt;contrib/just.sh&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Global and User &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; 
&lt;p&gt;If you want some recipes to be available everywhere, you have a few options.&lt;/p&gt; 
&lt;h4&gt;Global Justfile&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;just --global-justfile&lt;/code&gt;, or &lt;code&gt;just -g&lt;/code&gt; for short, searches the following paths, in-order, for a justfile:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/just/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.config/just/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/justfile&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$HOME/.justfile&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can put recipes that are used across many projects in a global justfile to easily invoke them from any directory.&lt;/p&gt; 
&lt;h4&gt;User justfile tips&lt;/h4&gt; 
&lt;p&gt;You can also adopt some of the following workflows. These tips assume you've created a &lt;code&gt;justfile&lt;/code&gt; at &lt;code&gt;~/.user.justfile&lt;/code&gt;, but you can put this &lt;code&gt;justfile&lt;/code&gt; at any convenient path on your system.&lt;/p&gt; 
&lt;h5&gt;Recipe Aliases&lt;/h5&gt; 
&lt;p&gt;If you want to call the recipes in &lt;code&gt;~/.user.justfile&lt;/code&gt; by name, and don't mind creating an alias for every recipe, add the following to your shell's initialization script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;for recipe in `just --justfile ~/.user.justfile --summary`; do
  alias $recipe="just --justfile ~/.user.justfile --working-directory . $recipe"
done
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, if you have a recipe called &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;~/.user.justfile&lt;/code&gt;, you can just type &lt;code&gt;foo&lt;/code&gt; at the command line to run it.&lt;/p&gt; 
&lt;p&gt;It took me way too long to realize that you could create recipe aliases like this. Notwithstanding my tardiness, I am very pleased to bring you this major advance in &lt;code&gt;justfile&lt;/code&gt; technology.&lt;/p&gt; 
&lt;h5&gt;Forwarding Alias&lt;/h5&gt; 
&lt;p&gt;If you'd rather not create aliases for every recipe, you can create a single alias:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;alias .j='just --justfile ~/.user.justfile --working-directory .'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, if you have a recipe called &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;~/.user.justfile&lt;/code&gt;, you can just type &lt;code&gt;.j foo&lt;/code&gt; at the command line to run it.&lt;/p&gt; 
&lt;p&gt;I'm pretty sure that nobody actually uses this feature, but it's there.&lt;/p&gt; 
&lt;p&gt;¯\_(ツ)_/¯&lt;/p&gt; 
&lt;h5&gt;Customization&lt;/h5&gt; 
&lt;p&gt;You can customize the above aliases with additional options. For example, if you'd prefer to have the recipes in your &lt;code&gt;justfile&lt;/code&gt; run in your home directory, instead of the current directory:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;alias .j='just --justfile ~/.user.justfile --working-directory ~'
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Node.js &lt;code&gt;package.json&lt;/code&gt; Script Compatibility&lt;/h3&gt; 
&lt;p&gt;The following export statement gives &lt;code&gt;just&lt;/code&gt; recipes access to local Node module binaries, and makes &lt;code&gt;just&lt;/code&gt; recipe commands behave more like &lt;code&gt;script&lt;/code&gt; entries in Node.js &lt;code&gt;package.json&lt;/code&gt; files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export PATH := "./node_modules/.bin:" + env_var('PATH')
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Paths on Windows&lt;/h3&gt; 
&lt;p&gt;On Windows, all functions that return paths, except &lt;code&gt;invocation_directory()&lt;/code&gt; will return &lt;code&gt;\&lt;/code&gt;-separated paths. When not using PowerShell or &lt;code&gt;cmd.exe&lt;/code&gt; these paths should be quoted to prevent the &lt;code&gt;\&lt;/code&gt;s from being interpreted as character escapes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;ls:
    echo '{{absolute_path(".")}}'
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;cygpath.exe&lt;/code&gt; is an executable included in some distributions of Unix userlands for Windows, including &lt;a href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; and &lt;a href="https://git-scm.com/downloads"&gt;Git&lt;/a&gt; for Windows.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;cygpath.exe&lt;/code&gt; in two places:&lt;/p&gt; 
&lt;p&gt;For backwards compatibility, &lt;code&gt;invocation_directory()&lt;/code&gt;, uses &lt;code&gt;cygpath.exe&lt;/code&gt; to convert the invocation directory into a unix-style &lt;code&gt;/&lt;/code&gt;-separated path. Use &lt;code&gt;invocation_directory_native()&lt;/code&gt; to get the native, Windows-style path. On unix, &lt;code&gt;invocation_directory()&lt;/code&gt; and &lt;code&gt;invocation_directory_native()&lt;/code&gt; both return the same unix-style path.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;cygpath.exe&lt;/code&gt; is used also used to convert Unix-style shebang lines into Windows paths. As an alternative, the &lt;code&gt;[script]&lt;/code&gt; attribute, currently unstable, can be used, which does not depend on &lt;code&gt;cygpath.exe&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If &lt;code&gt;cygpath.exe&lt;/code&gt; is available, you can use it to convert between path styles:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;foo_unix := '/hello/world'
foo_windows := shell('cygpath --windows $1', foo_unix)

bar_windows := 'C:\hello\world'
bar_unix := shell('cygpath --unix $1', bar_windows)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Remote Justfiles&lt;/h3&gt; 
&lt;p&gt;If you wish to include a &lt;code&gt;mod&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; source file in many &lt;code&gt;justfiles&lt;/code&gt; without needing to duplicate it, you can use an optional &lt;code&gt;mod&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;, along with a recipe to fetch the module source:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;import? 'foo.just'

fetch:
  curl https://raw.githubusercontent.com/casey/just/master/justfile &amp;gt; foo.just
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Given the above &lt;code&gt;justfile&lt;/code&gt;, after running &lt;code&gt;just fetch&lt;/code&gt;, the recipes in &lt;code&gt;foo.just&lt;/code&gt; will be available.&lt;/p&gt; 
&lt;h3&gt;Printing Complex Strings&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; can be used to print strings, but because it processes escape sequences, like &lt;code&gt;\n&lt;/code&gt;, and different implementations of &lt;code&gt;echo&lt;/code&gt; recognize different escape sequences, using &lt;code&gt;printf&lt;/code&gt; is often a better choice.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;printf&lt;/code&gt; takes a C-style format string and any number of arguments, which are interpolated into the format string.&lt;/p&gt; 
&lt;p&gt;This can be combined with indented, triple quoted strings to emulate shell heredocs.&lt;/p&gt; 
&lt;p&gt;Substitution complex strings into recipe bodies with &lt;code&gt;{…}&lt;/code&gt; can also lead to trouble as it may be split by the shell into multiple arguments depending on the presence of whitespace and quotes. Exporting complex strings as environment variables and referring to them with &lt;code&gt;"$NAME"&lt;/code&gt;, note the double quotes, can also help.&lt;/p&gt; 
&lt;p&gt;Putting all this together, to print a string verbatim to standard output, with all its various escape sequences and quotes undisturbed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;export FOO := '''
  a complicated string with
  some dis\tur\bi\ng escape sequences
  and "quotes" of 'different' kinds
'''

bar:
  printf %s "$FOO"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Alternatives and Prior Art&lt;/h3&gt; 
&lt;p&gt;There is no shortage of command runners! Some more or less similar alternatives to &lt;code&gt;just&lt;/code&gt; include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Make_(software)"&gt;make&lt;/a&gt;: The Unix build tool that inspired &lt;code&gt;just&lt;/code&gt;. There are a few different modern day descendents of the original &lt;code&gt;make&lt;/code&gt;, including &lt;a href="https://www.freebsd.org/cgi/man.cgi?make(1)"&gt;FreeBSD Make&lt;/a&gt; and &lt;a href="https://www.gnu.org/software/make/"&gt;GNU Make&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/go-task/task"&gt;task&lt;/a&gt;: A YAML-based command runner written in Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/egoist/maid"&gt;maid&lt;/a&gt;: A Markdown-based command runner written in JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/microsoft/just"&gt;microsoft/just&lt;/a&gt;: A JavaScript-based command runner written in JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sagiegurari/cargo-make"&gt;cargo-make&lt;/a&gt;: A command runner for Rust projects.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tj/mmake"&gt;mmake&lt;/a&gt;: A wrapper around &lt;code&gt;make&lt;/code&gt; with a number of improvements, including remote includes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tj/robo"&gt;robo&lt;/a&gt;: A YAML-based command runner written in Go.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jakedeichert/mask"&gt;mask&lt;/a&gt;: A Markdown-based command runner written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xonixx/makesure"&gt;makesure&lt;/a&gt;: A simple and portable command runner written in AWK and shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VladimirMarkelov/haku"&gt;haku&lt;/a&gt;: A make-like command runner written in Rust.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mise.jdx.dev/"&gt;mise&lt;/a&gt;: A development environment tool manager written in Rust supporing tasks in TOML files and standalone scripts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; welcomes your contributions! &lt;code&gt;just&lt;/code&gt; is released under the maximally permissive &lt;a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt"&gt;CC0&lt;/a&gt; public domain dedication and fallback license, so your changes must also be released under this license.&lt;/p&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is written in Rust. Use &lt;a href="https://www.rust-lang.org/tools/install"&gt;rustup&lt;/a&gt; to install a Rust toolchain.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is extensively tested. All new features must be covered by unit or integration tests. Unit tests are under &lt;a href="https://github.com/casey/just/raw/master/src"&gt;src&lt;/a&gt;, live alongside the code being tested, and test code in isolation. Integration tests are in the &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests directory&lt;/a&gt; and test the &lt;code&gt;just&lt;/code&gt; binary from the outside by invoking &lt;code&gt;just&lt;/code&gt; on a given &lt;code&gt;justfile&lt;/code&gt; and set of command-line arguments, and checking the output.&lt;/p&gt; 
&lt;p&gt;You should write whichever type of tests are easiest to write for your feature while still providing good test coverage.&lt;/p&gt; 
&lt;p&gt;Unit tests are useful for testing new Rust functions that are used internally and as an aid for development. A good example are the unit tests which cover the &lt;a href="https://github.com/casey/just/raw/master/src/unindent.rs"&gt;&lt;code&gt;unindent()&lt;/code&gt; function&lt;/a&gt;, used to unindent triple-quoted strings and backticks. &lt;code&gt;unindent()&lt;/code&gt; has a bunch of tricky edge cases which are easy to exercise with unit tests that call &lt;code&gt;unindent()&lt;/code&gt; directly.&lt;/p&gt; 
&lt;p&gt;Integration tests are useful for making sure that the final behavior of the &lt;code&gt;just&lt;/code&gt; binary is correct. &lt;code&gt;unindent()&lt;/code&gt; is also covered by integration tests which make sure that evaluating a triple-quoted string produces the correct unindented value. However, there are not integration tests for all possible cases. These are covered by faster, more concise unit tests that call &lt;code&gt;unindent()&lt;/code&gt; directly.&lt;/p&gt; 
&lt;p&gt;Integration tests use the &lt;code&gt;Test&lt;/code&gt; struct, a builder which allows for easily invoking &lt;code&gt;just&lt;/code&gt; with a given &lt;code&gt;justfile&lt;/code&gt;, arguments, and environment variables, and checking the program's stdout, stderr, and exit code .&lt;/p&gt; 
&lt;h3&gt;Contribution Workflow&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Make sure the feature is wanted. There should be an open issue about the feature with a comment from &lt;a href="https://github.com/casey"&gt;@casey&lt;/a&gt; saying that it's a good idea or seems reasonable. If there isn't, open a new issue and ask for feedback.&lt;/p&gt; &lt;p&gt;There are lots of good features which can't be merged, either because they aren't backwards compatible, have an implementation which would overcomplicate the codebase, or go against &lt;code&gt;just&lt;/code&gt;'s design philosophy.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Settle on the design of the feature. If the feature has multiple possible implementations or syntaxes, make sure to nail down the details in the issue.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone &lt;code&gt;just&lt;/code&gt; and start hacking. The best workflow is to have the code you're working on in an editor alongside a job that re-runs tests whenever a file changes. You can run such a job by installing &lt;a href="https://github.com/watchexec/cargo-watch"&gt;cargo-watch&lt;/a&gt; with &lt;code&gt;cargo install cargo-watch&lt;/code&gt; and running &lt;code&gt;just watch test&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a failing test for your feature. Most of the time this will be an integration test which exercises the feature end-to-end. Look for an appropriate file to put the test in in &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests&lt;/a&gt;, or add a new file in &lt;a href="https://github.com/casey/just/raw/master/tests"&gt;tests&lt;/a&gt; and add a &lt;code&gt;mod&lt;/code&gt; statement importing that file in &lt;a href="https://github.com/casey/just/raw/master/tests/lib.rs"&gt;tests/lib.rs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implement the feature.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;just ci&lt;/code&gt; to make sure that all tests, lints, and checks pass. Requires &lt;a href="https://github.com/rust-lang/mdBook"&gt;mdBook&lt;/a&gt; and &lt;a href="https://github.com/Michael-F-Bryan/mdbook-linkcheck"&gt;mdbook-linkcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Open a PR with the new code that is editable by maintainers. PRs often require rebasing and minor tweaks. If the PR is not editable by maintainers, each rebase and tweak will require a round trip of code review. Your PR may be summarily closed if it is not editable by maintainers.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Incorporate feedback.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enjoy the sweet feeling of your PR getting merged!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Feel free to open a draft PR at any time for discussion and feedback.&lt;/p&gt; 
&lt;h3&gt;Hints&lt;/h3&gt; 
&lt;p&gt;Here are some hints to get you started with specific kinds of new features, which you can use in addition to the contribution workflow above.&lt;/p&gt; 
&lt;h4&gt;Adding a New Attribute&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Write a new integration test in &lt;a href="https://github.com/casey/just/raw/master/tests/attributes.rs"&gt;tests/attributes.rs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add a new variant to the &lt;a href="https://github.com/casey/just/raw/master/src/attribute.rs"&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; enum.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Implement the functionality of the new attribute.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run &lt;code&gt;just ci&lt;/code&gt; to make sure that all tests pass.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Janus&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://github.com/casey/janus"&gt;Janus&lt;/a&gt; is a tool for checking whether a change to &lt;code&gt;just&lt;/code&gt; breaks or changes the interpretation of existing &lt;code&gt;justfile&lt;/code&gt;s. It collects and analyzes public &lt;code&gt;justfile&lt;/code&gt;s on GitHub.&lt;/p&gt; 
&lt;p&gt;Before merging a particularly large or gruesome change, Janus should be run to make sure that nothing breaks. Don't worry about running Janus yourself, Casey will happily run it for you on changes that need it.&lt;/p&gt; 
&lt;h3&gt;Minimum Supported Rust Version&lt;/h3&gt; 
&lt;p&gt;The minimum supported Rust version, or MSRV, is current stable Rust. It may build on older versions of Rust, but this is not guaranteed.&lt;/p&gt; 
&lt;h3&gt;New Releases&lt;/h3&gt; 
&lt;p&gt;New releases of &lt;code&gt;just&lt;/code&gt; are made frequently so that users quickly get access to new features.&lt;/p&gt; 
&lt;p&gt;Release commit messages use the following template:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Release x.y.z

- Bump version: x.y.z → x.y.z
- Update changelog
- Update changelog contributor credits
- Update dependencies
- Update version references in readme
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h3&gt;What are the idiosyncrasies of Make that Just avoids?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; has some behaviors which are confusing, complicated, or make it unsuitable for use as a general command runner.&lt;/p&gt; 
&lt;p&gt;One example is that under some circumstances, &lt;code&gt;make&lt;/code&gt; won't actually run the commands in a recipe. For example, if you have a file called &lt;code&gt;test&lt;/code&gt; and the following makefile:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-just"&gt;test:
  ./test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; will refuse to run your tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ make test
make: `test' is up to date.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; assumes that the &lt;code&gt;test&lt;/code&gt; recipe produces a file called &lt;code&gt;test&lt;/code&gt;. Since this file exists and the recipe has no other dependencies, &lt;code&gt;make&lt;/code&gt; thinks that it doesn't have anything to do and exits.&lt;/p&gt; 
&lt;p&gt;To be fair, this behavior is desirable when using &lt;code&gt;make&lt;/code&gt; as a build system, but not when using it as a command runner. You can disable this behavior for specific targets using &lt;code&gt;make&lt;/code&gt;'s built-in &lt;a href="https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html"&gt;&lt;code&gt;.PHONY&lt;/code&gt; target name&lt;/a&gt;, but the syntax is verbose and can be hard to remember. The explicit list of phony targets, written separately from the recipe definitions, also introduces the risk of accidentally defining a new non-phony target. In &lt;code&gt;just&lt;/code&gt;, all recipes are treated as if they were phony.&lt;/p&gt; 
&lt;p&gt;Other examples of &lt;code&gt;make&lt;/code&gt;'s idiosyncrasies include the difference between &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;:=&lt;/code&gt; in assignments, the confusing error messages that are produced if you mess up your makefile, needing &lt;code&gt;$$&lt;/code&gt; to use environment variables in recipes, and incompatibilities between different flavors of &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;What's the relationship between Just and Cargo build scripts?&lt;/h3&gt; 
&lt;p&gt;&lt;a href="http://doc.crates.io/build-script.html"&gt;&lt;code&gt;cargo&lt;/code&gt; build scripts&lt;/a&gt; have a pretty specific use, which is to control how &lt;code&gt;cargo&lt;/code&gt; builds your Rust project. This might include adding flags to &lt;code&gt;rustc&lt;/code&gt; invocations, building an external dependency, or running some kind of codegen step.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;just&lt;/code&gt;, on the other hand, is for all the other miscellaneous commands you might run as part of development. Things like running tests in different configurations, linting your code, pushing build artifacts to a server, removing temporary files, and the like.&lt;/p&gt; 
&lt;p&gt;Also, although &lt;code&gt;just&lt;/code&gt; is written in Rust, it can be used regardless of the language or build system your project uses.&lt;/p&gt; 
&lt;h2&gt;Further Ramblings&lt;/h2&gt; 
&lt;p&gt;I personally find it very useful to write a &lt;code&gt;justfile&lt;/code&gt; for almost every project, big or small.&lt;/p&gt; 
&lt;p&gt;On a big project with multiple contributors, it's very useful to have a file with all the commands needed to work on the project close at hand.&lt;/p&gt; 
&lt;p&gt;There are probably different commands to test, build, lint, deploy, and the like, and having them all in one place is useful and cuts down on the time you have to spend telling people which commands to run and how to type them.&lt;/p&gt; 
&lt;p&gt;And, with an easy place to put commands, it's likely that you'll come up with other useful things which are part of the project's collective wisdom, but which aren't written down anywhere, like the arcane commands needed for some part of your revision control workflow, to install all your project's dependencies, or all the random flags you might need to pass to the build system.&lt;/p&gt; 
&lt;p&gt;Some ideas for recipes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Deploying/publishing the project&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Building in release mode vs debug mode&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Running in debug mode or with logging enabled&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Complex git workflows&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Updating dependencies&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Running different sets of tests, for example fast tests vs slow tests, or running them with verbose output&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Any complex set of commands that you really should write down somewhere, if only to be able to remember them&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Even for small, personal projects it's nice to be able to remember commands by name instead of ^Reverse searching your shell history, and it's a huge boon to be able to go into an old project written in a random language with a mysterious build system and know that all the commands you need to do whatever you need to do are in the &lt;code&gt;justfile&lt;/code&gt;, and that if you type &lt;code&gt;just&lt;/code&gt; something useful (or at least interesting!) will probably happen.&lt;/p&gt; 
&lt;p&gt;For ideas for recipes, check out &lt;a href="https://github.com/casey/just/raw/master/justfile"&gt;this project's &lt;code&gt;justfile&lt;/code&gt;&lt;/a&gt;, or some of the &lt;code&gt;justfile&lt;/code&gt;s &lt;a href="https://github.com/search?q=path%3A**%2Fjustfile&amp;amp;type=code"&gt;out in the wild&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Anyways, I think that's about it for this incredibly long-winded README.&lt;/p&gt; 
&lt;p&gt;I hope you enjoy using &lt;code&gt;just&lt;/code&gt; and find great success and satisfaction in all your computational endeavors!&lt;/p&gt; 
&lt;p&gt;😸&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/casey/just/master/#just"&gt;🔼 Back to the top!&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solana-foundation/anchor</title>
      <link>https://github.com/solana-foundation/anchor</link>
      <description>&lt;p&gt;⚓ Solana Sealevel Framework&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img height="170x" src="https://pbs.twimg.com/media/FVUVaO9XEAAulvK?format=png&amp;amp;name=small"&gt; 
 &lt;h1&gt;Anchor&lt;/h1&gt; 
 &lt;p&gt; &lt;strong&gt;Solana Program Framework&lt;/strong&gt; &lt;/p&gt; 
 &lt;p&gt; &lt;a href="https://github.com/coral-xyz/anchor/actions"&gt;&lt;img alt="Build Status" src="https://github.com/coral-xyz/anchor/actions/workflows/tests.yaml/badge.svg?sanitize=true"&gt;&lt;/a&gt; &lt;a href="https://anchor-lang.com"&gt;&lt;img alt="Tutorials" src="https://img.shields.io/badge/docs-tutorials-blueviolet"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NHHGSXAnXk"&gt;&lt;img alt="Discord Chat" src="https://img.shields.io/discord/889577356681945098?color=blueviolet"&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt;&lt;img alt="License" src="https://img.shields.io/github/license/coral-xyz/anchor?color=blueviolet"&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://www.anchor-lang.com/"&gt;Anchor&lt;/a&gt; is a framework providing several convenient developer tools for writing Solana programs (sometimes called 'smart contracts').&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Rust eDSL for writing Solana programs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Interface_description_language"&gt;IDL&lt;/a&gt; specification&lt;/li&gt; 
 &lt;li&gt;TypeScript package for generating clients from IDL&lt;/li&gt; 
 &lt;li&gt;CLI and workspace management for developing complete applications&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Anchor is the most popular framework for Solana programs.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] If you're familiar with developing in Ethereum's &lt;a href="https://docs.soliditylang.org/en/"&gt;Solidity&lt;/a&gt;, &lt;a href="https://www.trufflesuite.com/"&gt;Truffle&lt;/a&gt;, &lt;a href="https://github.com/ethereum/web3.js"&gt;web3.js&lt;/a&gt;, then using Anchor be familiar. Although the DSL syntax and semantics are targeted at Solana, the high level flow of writing RPC request handlers, emitting an IDL, and generating clients from IDL is the same.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;For a quickstart guide and in depth tutorials, see the &lt;a href="https://book.anchor-lang.com"&gt;Anchor book&lt;/a&gt; and the &lt;a href="https://anchor-lang.com"&gt;Anchor documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To jump straight to examples, go &lt;a href="https://github.com/coral-xyz/anchor/tree/master/examples"&gt;here&lt;/a&gt;. For the latest Rust and TypeScript API documentation, see &lt;a href="https://docs.rs/anchor-lang"&gt;docs.rs&lt;/a&gt; and the &lt;a href="https://www.anchor-lang.com/docs/clients/typescript"&gt;typedoc&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Packages&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Package&lt;/th&gt; 
   &lt;th align="left"&gt;Description&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;anchor-lang&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Rust primitives for writing programs on Solana&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/anchor-lang"&gt;&lt;img src="https://img.shields.io/crates/v/anchor-lang?color=blue" alt="Crates.io"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/anchor-lang"&gt;&lt;img src="https://docs.rs/anchor-lang/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;anchor-spl&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;CPI clients for SPL programs on Solana&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/anchor-spl"&gt;&lt;img src="https://img.shields.io/crates/v/anchor-spl?color=blue" alt="crates"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/anchor-spl"&gt;&lt;img src="https://docs.rs/anchor-spl/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;anchor-client&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Rust client for Anchor programs&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://crates.io/crates/anchor-client"&gt;&lt;img src="https://img.shields.io/crates/v/anchor-client?color=blue" alt="crates"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://docs.rs/anchor-client"&gt;&lt;img src="https://docs.rs/anchor-client/badge.svg?sanitize=true" alt="Docs.rs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@coral-xyz/anchor&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;TypeScript client for Anchor programs&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@coral-xyz/anchor"&gt;&lt;img src="https://img.shields.io/npm/v/@coral-xyz/anchor.svg?color=blue" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://coral-xyz.github.io/anchor/ts/index.html"&gt;&lt;img src="https://img.shields.io/badge/docs-typedoc-blue" alt="Docs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;@coral-xyz/anchor-cli&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;CLI to support building and managing an Anchor workspace&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.npmjs.com/package/@coral-xyz/anchor-cli"&gt;&lt;img src="https://img.shields.io/npm/v/@coral-xyz/anchor-cli.svg?color=blue" alt="npm"&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://coral-xyz.github.io/anchor/cli/commands.html"&gt;&lt;img src="https://img.shields.io/badge/docs-typedoc-blue" alt="Docs"&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Note&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Anchor is in active development, so all APIs are subject to change.&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;This code is unaudited. Use at your own risk.&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Here's a counter program, where only the designated &lt;code&gt;authority&lt;/code&gt; can increment the count.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use anchor_lang::prelude::*;

declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");

#[program]
mod counter {
    use super::*;

    pub fn initialize(ctx: Context&amp;lt;Initialize&amp;gt;, start: u64) -&amp;gt; Result&amp;lt;()&amp;gt; {
        let counter = &amp;amp;mut ctx.accounts.counter;
        counter.authority = *ctx.accounts.authority.key;
        counter.count = start;
        Ok(())
    }

    pub fn increment(ctx: Context&amp;lt;Increment&amp;gt;) -&amp;gt; Result&amp;lt;()&amp;gt; {
        let counter = &amp;amp;mut ctx.accounts.counter;
        counter.count += 1;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize&amp;lt;'info&amp;gt; {
    #[account(init, payer = authority, space = 48)]
    pub counter: Account&amp;lt;'info, Counter&amp;gt;,
    pub authority: Signer&amp;lt;'info&amp;gt;,
    pub system_program: Program&amp;lt;'info, System&amp;gt;,
}

#[derive(Accounts)]
pub struct Increment&amp;lt;'info&amp;gt; {
    #[account(mut, has_one = authority)]
    pub counter: Account&amp;lt;'info, Counter&amp;gt;,
    pub authority: Signer&amp;lt;'info&amp;gt;,
}

#[account]
pub struct Counter {
    pub authority: Pubkey,
    pub count: u64,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more, see the &lt;a href="https://github.com/coral-xyz/anchor/tree/master/examples"&gt;examples&lt;/a&gt; and &lt;a href="https://github.com/coral-xyz/anchor/tree/master/tests"&gt;tests&lt;/a&gt; directories.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Anchor is licensed under &lt;a href="https://raw.githubusercontent.com/solana-foundation/anchor/master/LICENSE"&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Anchor by you, as defined in the Apache-2.0 license, shall be licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Thank you for your interest in contributing to Anchor! Please see the &lt;a href="https://raw.githubusercontent.com/solana-foundation/anchor/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; to learn how.&lt;/p&gt; 
&lt;h3&gt;Thanks ❤️&lt;/h3&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://github.com/coral-xyz/anchor/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=coral-xyz/anchor" width="100%"&gt; &lt;/a&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>helix-editor/helix</title>
      <link>https://github.com/helix-editor/helix</link>
      <description>&lt;p&gt;A post-modern modal text editor.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="logo_dark.svg"&gt; 
   &lt;source media="(prefers-color-scheme: light)" srcset="logo_light.svg"&gt; 
   &lt;img alt="Helix" height="128" src="https://raw.githubusercontent.com/helix-editor/helix/master/logo_light.svg?sanitize=true"&gt; 
  &lt;/picture&gt; &lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://github.com/helix-editor/helix/actions"&gt;&lt;img src="https://github.com/helix-editor/helix/actions/workflows/build.yml/badge.svg?sanitize=true" alt="Build status"&gt;&lt;/a&gt; &lt;a href="https://github.com/helix-editor/helix/releases/latest"&gt;&lt;img src="https://img.shields.io/github/v/release/helix-editor/helix" alt="GitHub Release"&gt;&lt;/a&gt; &lt;a href="https://docs.helix-editor.com/"&gt;&lt;img src="https://shields.io/badge/-documentation-452859" alt="Documentation"&gt;&lt;/a&gt; &lt;a href="https://github.com/helix-editor/helix/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/helix-editor/helix" alt="GitHub contributors"&gt;&lt;/a&gt; &lt;a href="https://matrix.to/#/%23helix-community:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/helix-community:matrix.org" alt="Matrix Space"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/helix-editor/helix/master/screenshot.png" alt="Screenshot"&gt;&lt;/p&gt; 
&lt;p&gt;A &lt;a href="https://github.com/mawww/kakoune"&gt;Kakoune&lt;/a&gt; / &lt;a href="https://github.com/neovim/neovim"&gt;Neovim&lt;/a&gt; inspired editor, written in Rust.&lt;/p&gt; 
&lt;p&gt;The editing model is very heavily based on Kakoune; during development I found myself agreeing with most of Kakoune's design decisions.&lt;/p&gt; 
&lt;p&gt;For more information, see the &lt;a href="https://helix-editor.com"&gt;website&lt;/a&gt; or &lt;a href="https://docs.helix-editor.com/"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All shortcuts/keymaps can be found &lt;a href="https://docs.helix-editor.com/keymap.html"&gt;in the documentation on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/helix-editor/helix/wiki/Troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vim-like modal editing&lt;/li&gt; 
 &lt;li&gt;Multiple selections&lt;/li&gt; 
 &lt;li&gt;Built-in language server support&lt;/li&gt; 
 &lt;li&gt;Smart, incremental syntax highlighting and code editing via tree-sitter&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Although it's primarily a terminal-based editor, I am interested in exploring a custom renderer (similar to Emacs) using wgpu or skulpin.&lt;/p&gt; 
&lt;p&gt;Note: Only certain languages have indentation definitions at the moment. Check &lt;code&gt;runtime/queries/&amp;lt;lang&amp;gt;/&lt;/code&gt; for &lt;code&gt;indents.scm&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://docs.helix-editor.com/install.html"&gt;Installation documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/helix-editor/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/helix-editor.svg?exclude_unsupported=1" alt="Packaging status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;Contributing guidelines can be found &lt;a href="https://raw.githubusercontent.com/helix-editor/helix/master/docs/CONTRIBUTING.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Getting help&lt;/h1&gt; 
&lt;p&gt;Your question might already be answered on the &lt;a href="https://github.com/helix-editor/helix/wiki/FAQ"&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Discuss the project on the community &lt;a href="https://matrix.to/#/%23helix-community:matrix.org"&gt;Matrix Space&lt;/a&gt; (make sure to join &lt;code&gt;#helix-editor:matrix.org&lt;/code&gt; if you're on a client that doesn't support Matrix Spaces yet).&lt;/p&gt; 
&lt;h1&gt;Credits&lt;/h1&gt; 
&lt;p&gt;Thanks to &lt;a href="https://github.com/jakenvac"&gt;@jakenvac&lt;/a&gt; for designing the logo!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tracel-ai/burn</title>
      <link>https://github.com/tracel-ai/burn</link>
      <description>&lt;p&gt;Burn is a next generation Deep Learning Framework that doesn't compromise on flexibility, efficiency and portability.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/logo-burn-neutral.webp" width="350px"&gt; 
 &lt;p&gt;&lt;a href="https://discord.gg/uPEBbYYDB6"&gt;&lt;img src="https://img.shields.io/discord/1038839012602941528.svg?color=7289da&amp;amp;&amp;amp;logo=discord" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/burn"&gt;&lt;img src="https://img.shields.io/crates/v/burn.svg?sanitize=true" alt="Current Crates.io Version"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/burn"&gt;&lt;img src="https://img.shields.io/crates/msrv/burn" alt="Minimum Supported Rust Version"&gt;&lt;/a&gt; &lt;a href="https://burn.dev/docs/burn"&gt;&lt;img src="https://img.shields.io/badge/docs-latest-blue" alt="Documentation"&gt;&lt;/a&gt; &lt;a href="https://github.com/tracel-ai/burn/actions/workflows/test.yml"&gt;&lt;img src="https://github.com/tracel-ai/burn/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Test Status"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/#license"&gt;&lt;img src="https://shields.io/badge/license-MIT%2FApache--2.0-blue" alt="license"&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/tracel-ai/burn"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://www.runblaze.dev"&gt;&lt;img src="https://www.runblaze.dev/ci-blaze-powered.png" width="125px"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;p&gt;&lt;strong&gt;Burn is a next generation Deep Learning Framework that doesn't compromise on &lt;br&gt; flexibility, efficiency and portability.&lt;/strong&gt;&lt;/p&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div align="left"&gt; 
 &lt;h2&gt;Performance&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-blazingly-fast.png" height="96px"&gt; 
  &lt;p&gt;Because we believe the goal of a deep learning framework is to convert computation into useful intelligence, we have made performance a core pillar of Burn. We strive to achieve top efficiency by leveraging multiple optimization techniques described below.&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;Click on each section for more details&lt;/strong&gt; 👇&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Automatic kernel fusion 💥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Using Burn means having your models optimized on any backend. When possible, we provide a way to automatically and dynamically create custom kernels that minimize data relocation between different memory spaces, extremely useful when moving memory is the bottleneck.&lt;/p&gt; 
  &lt;p&gt;As an example, you could write your own GELU activation function with the high level tensor api (see Rust code snippet below).&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;fn gelu_custom&amp;lt;B: Backend, const D: usize&amp;gt;(x: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {
    let x = x.clone() * ((x / SQRT_2).erf() + 1);
    x / 2
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Then, at runtime, a custom low-level kernel will be automatically created for your specific implementation and will rival a handcrafted GPU implementation. The kernel consists of about 60 lines of WGSL &lt;a href="%22https://www.w3.org/TR/WGSL/https://www.w3.org/TR/WGSL/%22"&gt;WebGPU Shading Language&lt;/a&gt;, an extremely verbose lower level shader language you probably don't want to program your deep learning models in!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Asynchronous execution ❤️‍🔥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;For &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/#backends"&gt;first-party backends&lt;/a&gt;, an asynchronous execution style is used, which allows to perform various optimizations, such as the previously mentioned automatic kernel fusion.&lt;/p&gt; 
  &lt;p&gt;Asynchronous execution also ensures that the normal execution of the framework does not block the model computations, which implies that the framework overhead won't impact the speed of execution significantly. Conversely, the intense computations in the model do not interfere with the responsiveness of the framework. For more information about our asynchronous backends, see &lt;a href="https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Thread-safe building blocks 🦞 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn emphasizes thread safety by leveraging the &lt;a href="https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html"&gt;ownership system of Rust&lt;/a&gt;. With Burn, each module is the owner of its weights. It is therefore possible to send a module to another thread for computing the gradients, then send the gradients to the main thread that can aggregate them, and &lt;em&gt;voilà&lt;/em&gt;, you get multi-device training.&lt;/p&gt; 
  &lt;p&gt;This is a very different approach from what PyTorch does, where backpropagation actually mutates the &lt;em&gt;grad&lt;/em&gt; attribute of each tensor parameter. This is not a thread-safe operation and therefore requires lower level synchronization primitives, see &lt;a href="https://pytorch.org/docs/stable/distributed.html"&gt;distributed training&lt;/a&gt; for reference. Note that this is still very fast, but not compatible across different backends and quite hard to implement.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Intelligent memory management 🦀 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;One of the main roles of a deep learning framework is to reduce the amount of memory necessary to run models. The naive way of handling memory is that each tensor has its own memory space, which is allocated when the tensor is created then deallocated as the tensor gets out of scope. However, allocating and deallocating data is very costly, so a memory pool is often required to achieve good throughput. Burn offers an infrastructure that allows for easily creating and selecting memory management strategies for backends. For more details on memory management in Burn, see &lt;a href="https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute"&gt;this blog post&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;Another very important memory optimization of Burn is that we keep track of when a tensor can be mutated in-place just by using the ownership system well. Even though it is a rather small memory optimization on its own, it adds up considerably when training or running inference with larger models and contributes to reduce the memory usage even more. For more information, see &lt;a href="https://burn.dev/blog/burn-rusty-approach-to-tensor-handling"&gt;this blog post about tensor handling&lt;/a&gt;.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Automatic kernel selection 🎯 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;A good deep learning framework should ensure that models run smoothly on all hardware. However, not all hardware share the same behavior in terms of execution speed. For instance, a matrix multiplication kernel can be launched with many different parameters, which are highly sensitive to the size of the matrices and the hardware. Using the wrong configuration could reduce the speed of execution by a large factor (10 times or even more in extreme cases), so choosing the right kernels becomes a priority.&lt;/p&gt; 
  &lt;p&gt;With our home-made backends, we run benchmarks automatically and choose the best configuration for the current hardware and matrix sizes with a reasonable caching strategy.&lt;/p&gt; 
  &lt;p&gt;This adds a small overhead by increasing the warmup execution time, but stabilizes quickly after a few forward and backward passes, saving lots of time in the long run. Note that this feature isn't mandatory, and can be disabled when cold starts are a priority over optimized throughput.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Hardware specific features 🔥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;It is no secret that deep learning is mostly relying on matrix multiplication as its core operation, since this is how fully-connected neural networks are modeled.&lt;/p&gt; 
  &lt;p&gt;More and more, hardware manufacturers optimize their chips specifically for matrix multiplication workloads. For instance, Nvidia has its &lt;em&gt;Tensor Cores&lt;/em&gt; and today most cellphones have AI specialized chips. As of this moment, we support Tensor Cores with our LibTorch, Candle, CUDA, Metal and WGPU/SPIR-V backends, but not other accelerators yet. We hope &lt;a href="https://github.com/gpuweb/gpuweb/issues/4195"&gt;this issue&lt;/a&gt; gets resolved at some point to bring support to our WGPU backend.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Custom Backend Extension 🎒 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn aims to be the most flexible deep learning framework. While it's crucial to maintain compatibility with a wide variety of backends, Burn also provides the ability to extend the functionalities of a backend implementation to suit your personal modeling requirements.&lt;/p&gt; 
  &lt;p&gt;This versatility is advantageous in numerous ways, such as supporting custom operations like flash attention or manually writing your own kernel for a specific backend to enhance performance. See &lt;a href="https://burn.dev/books/burn/advanced/backend-extension/index.html"&gt;this section&lt;/a&gt; in the Burn Book 🔥 for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h2&gt;Backend&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/backend-chip.png" height="96px"&gt; 
  &lt;p&gt;Burn strives to be as fast as possible on as many hardwares as possible, with robust implementations. We believe this flexibility is crucial for modern needs where you may train your models in the cloud, then deploy on customer hardwares, which vary from user to user.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;strong&gt;Supported Backends&lt;/strong&gt;&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Backend&lt;/th&gt; 
    &lt;th&gt;Devices&lt;/th&gt; 
    &lt;th&gt;Class&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;CUDA&lt;/td&gt; 
    &lt;td&gt;NVIDIA GPUs&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;ROCm&lt;/td&gt; 
    &lt;td&gt;AMD GPUs&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Metal&lt;/td&gt; 
    &lt;td&gt;Apple GPUs&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Vulkan&lt;/td&gt; 
    &lt;td&gt;Most GPUs on Linux &amp;amp; Windows&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Wgpu&lt;/td&gt; 
    &lt;td&gt;Most GPUs&lt;/td&gt; 
    &lt;td&gt;First-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;NdArray&lt;/td&gt; 
    &lt;td&gt;Most CPUs&lt;/td&gt; 
    &lt;td&gt;Third-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;LibTorch&lt;/td&gt; 
    &lt;td&gt;Most GPUs &amp;amp; CPUs&lt;/td&gt; 
    &lt;td&gt;Third-Party&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Candle&lt;/td&gt; 
    &lt;td&gt;Nvidia, Apple GPUs &amp;amp; CPUs&lt;/td&gt; 
    &lt;td&gt;Third-Party&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;br&gt; 
 &lt;p&gt;Compared to other frameworks, Burn has a very different approach to supporting many backends. By design, most code is generic over the Backend trait, which allows us to build Burn with swappable backends. This makes composing backend possible, augmenting them with additional functionalities such as autodifferentiation and automatic kernel fusion.&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Autodiff: Backend decorator that brings backpropagation to any backend 🔄 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Contrary to the aforementioned backends, Autodiff is actually a backend &lt;em&gt;decorator&lt;/em&gt;. This means that it cannot exist by itself; it must encapsulate another backend.&lt;/p&gt; 
  &lt;p&gt;The simple act of wrapping a base backend with Autodiff transparently equips it with autodifferentiation support, making it possible to call backward on your model.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::backend::{Autodiff, Wgpu};
use burn::tensor::{Distribution, Tensor};

fn main() {
    type Backend = Autodiff&amp;lt;Wgpu&amp;gt;;

    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default);
    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default).require_grad();

    let tmp = x.clone() + y.clone();
    let tmp = tmp.matmul(x);
    let tmp = tmp.exp();

    let grads = tmp.backward();
    let y_grad = y.grad(&amp;amp;grads).unwrap();
    println!("{y_grad}");
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, it is impossible to make the mistake of calling backward on a model that runs on a backend that does not support autodiff (for inference), as this method is only offered by an Autodiff backend.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-autodiff/README.md"&gt;Autodiff Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Fusion: Backend decorator that brings kernel fusion to all first-party backends &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;This backend decorator enhances a backend with kernel fusion, provided that the inner backend supports it. Note that you can compose this backend with other backend decorators such as Autodiff. For now, only the WGPU and CUDA backends have support for fused kernels.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::backend::{Autodiff, Fusion, Wgpu};
use burn::tensor::{Distribution, Tensor};

fn main() {
    type Backend = Autodiff&amp;lt;Fusion&amp;lt;Wgpu&amp;gt;&amp;gt;;

    let x: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default);
    let y: Tensor&amp;lt;Backend, 2&amp;gt; = Tensor::random([32, 32], Distribution::Default).require_grad();

    let tmp = x.clone() + y.clone();
    let tmp = tmp.matmul(x);
    let tmp = tmp.exp();

    let grads = tmp.backward();
    let y_grad = y.grad(&amp;amp;grads).unwrap();
    println!("{y_grad}");
}

&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Of note, we plan to implement automatic gradient checkpointing based on compute bound and memory bound operations, which will work gracefully with the fusion backend to make your code run even faster during training, see &lt;a href="https://github.com/tracel-ai/burn/issues/936"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
  &lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-fusion/README.md"&gt;Fusion Backend README&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Router (Beta): Backend decorator that composes multiple backends into a single one &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;That backend simplifies hardware operability, if for instance you want to execute some operations on the CPU and other operations on the GPU.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::tensor::{Distribution, Tensor};
use burn::backend::{
    NdArray, Router, Wgpu, ndarray::NdArrayDevice, router::duo::MultiDevice, wgpu::WgpuDevice,
};

fn main() {
    type Backend = Router&amp;lt;(Wgpu, NdArray)&amp;gt;;

    let device_0 = MultiDevice::B1(WgpuDevice::DiscreteGpu(0));
    let device_1 = MultiDevice::B2(NdArrayDevice::Cpu);

    let tensor_gpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], burn::tensor::Distribution::Default, &amp;amp;device_0);
    let tensor_cpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], burn::tensor::Distribution::Default, &amp;amp;device_1);
}

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Remote (Beta): Backend decorator for remote backend execution, useful for distributed computations &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;That backend has two parts, one client and one server. The client sends tensor operations over the network to a remote compute backend. You can use any first-party backend as server in a single line of code:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;fn main_server() {
    // Start a server on port 3000.
    burn::server::start::&amp;lt;burn::backend::Cuda&amp;gt;(Default::default(), 3000);
}

fn main_client() {
    // Create a client that communicate with the server on port 3000.
    use burn::backend::{Autodiff, RemoteBackend};

    type Backend = Autodiff&amp;lt;RemoteDevice&amp;gt;;

    let device = RemoteDevice::new("ws://localhost:3000");
    let tensor_gpu =
        Tensor::&amp;lt;Backend, 2&amp;gt;::random([3, 3], Distribution::Default, &amp;amp;device);
}

&lt;/code&gt;&lt;/pre&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h2&gt;Training &amp;amp; Inference&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-wall.png" height="96px"&gt; 
  &lt;p&gt;The whole deep learning workflow is made easy with Burn, as you can monitor your training progress with an ergonomic dashboard, and run inference everywhere from embedded devices to large GPU clusters.&lt;/p&gt; 
  &lt;p&gt;Burn was built from the ground up with training and inference in mind. It's also worth noting how Burn, in comparison to frameworks like PyTorch, simplifies the transition from training to deployment, eliminating the need for code changes.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div align="center"&gt; 
  &lt;br&gt; 
  &lt;a href="https://www.youtube.com/watch?v=N9RM5CQbNQc" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/burn-train-tui.png" alt="Burn Train TUI" width="75%"&gt; &lt;/a&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;strong&gt;Click on the following sections to expand 👇&lt;/strong&gt;&lt;/p&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Training Dashboard 📈 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;As you can see in the previous video (click on the picture!), a new terminal UI dashboard based on the &lt;a href="https://github.com/ratatui-org/ratatui"&gt;Ratatui&lt;/a&gt; crate allows users to follow their training with ease without having to connect to any external application.&lt;/p&gt; 
  &lt;p&gt;You can visualize your training and validation metrics updating in real-time and analyze the lifelong progression or recent history of any registered metrics using only the arrow keys. Break from the training loop without crashing, allowing potential checkpoints to be fully written or important pieces of code to complete without interruption 🛡&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; ONNX Support 🐫 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;ONNX (Open Neural Network Exchange) is an open-standard format that exports both the architecture and the weights of a deep learning model.&lt;/p&gt; 
  &lt;p&gt;Burn supports the importation of models that follow the ONNX standard so you can easily port a model you have written in another framework like TensorFlow or PyTorch to Burn to benefit from all the advantages our framework offers.&lt;/p&gt; 
  &lt;p&gt;Our ONNX support is further described in &lt;a href="https://burn.dev/books/burn/import/onnx-model.html"&gt;this section of the Burn Book 🔥&lt;/a&gt;.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This crate is in active development and currently supports a &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/crates/burn-import/SUPPORTED-ONNX-OPS.md"&gt;limited set of ONNX operators&lt;/a&gt;.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Importing PyTorch or Safetensors Models 🚚 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;You can load weights from PyTorch or Safetensors formats directly into your Burn-defined models. This makes it easy to reuse existing models while benefiting from Burn's performance and deployment features.&lt;/p&gt; 
  &lt;p&gt;Learn more:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://burn.dev/books/burn/import/pytorch-model.html"&gt;Import pre-trained PyTorch models into Burn&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://burn.dev/books/burn/import/safetensors-model.html"&gt;Load models from Safetensors format&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Inference in the Browser 🌐 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Several of our backends can compile to Web Assembly: Candle and NdArray for CPU, and WGPU for GPU. This means that you can run inference directly within a browser. We provide several examples of this:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web"&gt;MNIST&lt;/a&gt; where you can draw digits and a small convnet tries to find which one it is! 2️⃣ 7️⃣ 😰&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web"&gt;Image Classification&lt;/a&gt; where you can upload images and classify them! 🌄&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Embedded: &lt;i&gt;no_std&lt;/i&gt; support ⚙️ &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Burn's core components support &lt;a href="https://docs.rust-embedded.org/book/intro/no-std.html"&gt;no_std&lt;/a&gt;. This means it can run in bare metal environment such as embedded devices without an operating system.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;As of now, only the NdArray backend can be used in a &lt;em&gt;no_std&lt;/em&gt; environment.&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;h3&gt;Benchmarks&lt;/h3&gt; 
 &lt;p&gt;To evaluate performance across different backends and track improvements over time, we provide a dedicated benchmarking suite.&lt;/p&gt; 
 &lt;p&gt;Run and compare benchmarks using &lt;a href="https://github.com/tracel-ai/burn-bench"&gt;burn-bench&lt;/a&gt;.&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;⚠️ &lt;strong&gt;Warning&lt;/strong&gt; When using one of the &lt;code&gt;wgpu&lt;/code&gt; backends, you may encounter compilation errors related to recursive type evaluation. This is due to complex type nesting within the &lt;code&gt;wgpu&lt;/code&gt; dependency chain. To resolve this issue, add the following line at the top of your &lt;code&gt;main.rs&lt;/code&gt; or &lt;code&gt;lib.rs&lt;/code&gt; file:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;#![recursion_limit = "256"]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;The default recursion limit (128) is often just below the required depth (typically 130-150) due to deeply nested associated types and trait bounds.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;h2&gt;Getting Started&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-walking.png" height="96px"&gt; 
  &lt;p&gt;Just heard of Burn? You are at the right place! Just continue reading this section and we hope you can get on board really quickly.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;details&gt; 
  &lt;summary&gt; The Burn Book 🔥 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;To begin working effectively with Burn, it is crucial to understand its key components and philosophy. This is why we highly recommend new users to read the first sections of &lt;a href="https://burn.dev/books/burn/"&gt;The Burn Book 🔥&lt;/a&gt;. It provides detailed examples and explanations covering every facet of the framework, including building blocks like tensors, modules, and optimizers, all the way to advanced usage, like coding your own GPU kernels.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;The project is constantly evolving, and we try as much as possible to keep the book up to date with new additions. However, we might miss some details sometimes, so if you see something weird, let us know! We also gladly accept Pull Requests 😄&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Examples 🙏 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Let's start with a code snippet that shows how intuitive the framework is to use! In the following, we declare a neural network module with some parameters along with its forward pass.&lt;/p&gt; 
  &lt;pre&gt;&lt;code class="language-rust"&gt;use burn::nn;
use burn::module::Module;
use burn::tensor::backend::Backend;

#[derive(Module, Debug)]
pub struct PositionWiseFeedForward&amp;lt;B: Backend&amp;gt; {
    linear_inner: nn::Linear&amp;lt;B&amp;gt;,
    linear_outer: nn::Linear&amp;lt;B&amp;gt;,
    dropout: nn::Dropout,
    gelu: nn::Gelu,
}

impl&amp;lt;B: Backend&amp;gt; PositionWiseFeedForward&amp;lt;B&amp;gt; {
    pub fn forward&amp;lt;const D: usize&amp;gt;(&amp;amp;self, input: Tensor&amp;lt;B, D&amp;gt;) -&amp;gt; Tensor&amp;lt;B, D&amp;gt; {
        let x = self.linear_inner.forward(input);
        let x = self.gelu.forward(x);
        let x = self.dropout.forward(x);

        self.linear_outer.forward(x)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;We have a somewhat large amount of &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples"&gt;examples&lt;/a&gt; in the repository that shows how to use the framework in different scenarios.&lt;/p&gt; 
  &lt;p&gt;Following &lt;a href="https://burn.dev/books/burn/"&gt;the book&lt;/a&gt;:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/guide"&gt;Basic Workflow&lt;/a&gt; : Creates a custom CNN &lt;code&gt;Module&lt;/code&gt; to train on the MNIST dataset and use for inference.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-training-loop"&gt;Custom Training Loop&lt;/a&gt; : Implements a basic training loop instead of using the &lt;code&gt;Learner&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-wgpu-kernel"&gt;Custom WGPU Kernel&lt;/a&gt; : Learn how to create your own custom operation with the WGPU backend.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;Additional examples:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-csv-dataset"&gt;Custom CSV Dataset&lt;/a&gt; : Implements a dataset to parse CSV data for a regression task.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/simple-regression"&gt;Regression&lt;/a&gt; : Trains a simple MLP on the California Housing dataset to predict the median house value for a district.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-image-dataset"&gt;Custom Image Dataset&lt;/a&gt; : Trains a simple CNN on custom image dataset following a simple folder structure.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/custom-renderer"&gt;Custom Renderer&lt;/a&gt; : Implements a custom renderer to display the &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/building-blocks/learner.md"&gt;&lt;code&gt;Learner&lt;/code&gt;&lt;/a&gt; progress.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/image-classification-web"&gt;Image Classification Web&lt;/a&gt; : Image classification web browser demo using Burn, WGPU and WebAssembly.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist-inference-web"&gt;MNIST Inference on Web&lt;/a&gt; : An interactive MNIST inference demo in the browser. The demo is available &lt;a href="https://burn.dev/demo/"&gt;online&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/mnist"&gt;MNIST Training&lt;/a&gt; : Demonstrates how to train a custom &lt;code&gt;Module&lt;/code&gt; (MLP) with the &lt;code&gt;Learner&lt;/code&gt; configured to log metrics and keep training checkpoints.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/named-tensor"&gt;Named Tensor&lt;/a&gt; : Performs operations with the experimental &lt;code&gt;NamedTensor&lt;/code&gt; feature.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/onnx-inference"&gt;ONNX Import Inference&lt;/a&gt; : Imports an ONNX model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/pytorch-import"&gt;PyTorch Import Inference&lt;/a&gt; : Imports a PyTorch model pre-trained on MNIST to perform inference on a sample image with Burn.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-classification"&gt;Text Classification&lt;/a&gt; : Trains a text classification transformer model on the AG News or DbPedia dataset. The trained model can then be used to classify a text sample.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/text-generation"&gt;Text Generation&lt;/a&gt; : Trains a text generation transformer model on the DbPedia dataset.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/examples/wgan"&gt;Wasserstein GAN MNIST&lt;/a&gt; : Trains a WGAN model to generate new handwritten digits based on MNIST.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;For more practical insights, you can clone the repository and run any of them directly on your computer!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Pre-trained Models 🤖 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;We keep an updated and curated list of models and examples built with Burn, see the &lt;a href="https://github.com/tracel-ai/models"&gt;tracel-ai/models repository&lt;/a&gt; for more details.&lt;/p&gt; 
  &lt;p&gt;Don't see the model you want? Don't hesitate to open an issue, and we may prioritize it. Built a model using Burn and want to share it? You can also open a Pull Request and add your model under the community section!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;details&gt; 
  &lt;summary&gt; Why use Rust for Deep Learning? 🦀 &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;Deep Learning is a special form of software where you need very high level abstractions as well as extremely fast execution time. Rust is the perfect candidate for that use case since it provides zero-cost abstractions to easily create neural network modules, and fine-grained control over memory to optimize every detail.&lt;/p&gt; 
  &lt;p&gt;It's important that a framework be easy to use at a high level so that its users can focus on innovating in the AI field. However, since running models relies so heavily on computations, performance can't be neglected.&lt;/p&gt; 
  &lt;p&gt;To this day, the mainstream solution to this problem has been to offer APIs in Python, but rely on bindings to low-level languages such as C/C++. This reduces portability, increases complexity and creates frictions between researchers and engineers. We feel like Rust's approach to abstractions makes it versatile enough to tackle this two languages dichotomy.&lt;/p&gt; 
  &lt;p&gt;Rust also comes with the Cargo package manager, which makes it incredibly easy to build, test, and deploy from any environment, which is usually a pain in Python.&lt;/p&gt; 
  &lt;p&gt;Although Rust has the reputation of being a difficult language at first, we strongly believe it leads to more reliable, bug-free solutions built faster (after some practice 😅)!&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;br&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;&lt;strong&gt;Deprecation Note&lt;/strong&gt;&lt;br&gt;Since &lt;code&gt;0.14.0&lt;/code&gt;, the internal structure for tensor data has changed. The previous &lt;code&gt;Data&lt;/code&gt; struct was deprecated and officially removed since &lt;code&gt;0.17.0&lt;/code&gt; in favor of the new &lt;code&gt;TensorData&lt;/code&gt; struct, which allows for more flexibility by storing the underlying data as bytes and keeping the data type as a field. If you are using &lt;code&gt;Data&lt;/code&gt; in your code, make sure to switch to &lt;code&gt;TensorData&lt;/code&gt;.&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;!-- &gt;
&gt; In the event that you are trying to load a model record saved in a previous version, make sure to
&gt; enable the `record-backward-compat` feature using a previous version of burn (&lt;=0.16.0). Otherwise,
&gt; the record won't be deserialized correctly and you will get an error message (which will also point
&gt; you to the backward compatible feature flag). The backward compatibility was maintained for
&gt; deserialization (loading), so as soon as you have saved the record again it will be saved according
&gt; to the new structure and you will be able to upgrade to this version. Please note that binary formats
&gt; are not backward compatible. Thus, you will need to load your record in a previous version and save it
&gt; to another of the self-describing record formats before using a compatible version (as described) with the
&gt; `record-backward-compat` feature flag. --&gt; 
 &lt;details id="deprecation"&gt; 
  &lt;summary&gt; Loading Model Records From Previous Versions ⚠️ &lt;/summary&gt; 
  &lt;br&gt; 
  &lt;p&gt;In the event that you are trying to load a model record saved in a version older than &lt;code&gt;0.14.0&lt;/code&gt;, make sure to use a compatible version (&lt;code&gt;0.14&lt;/code&gt;, &lt;code&gt;0.15&lt;/code&gt; or &lt;code&gt;0.16&lt;/code&gt;) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
  &lt;pre&gt;&lt;code&gt;features = [..., "record-backward-compat"]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;p&gt;Otherwise, the record won't be deserialized correctly and you will get an error message. This error will also point you to the backward compatible feature flag.&lt;/p&gt; 
  &lt;p&gt;The backward compatibility was maintained for deserialization when loading records. Therefore, as soon as you have saved the record again it will be saved according to the new structure and you can upgrade back to the current version&lt;/p&gt; 
  &lt;p&gt;Please note that binary formats are not backward compatible. Thus, you will need to load your record in a previous version and save it in any of the other self-describing record format (e.g., using the &lt;code&gt;NamedMpkFileRecorder&lt;/code&gt;) before using a compatible version (as described) with the &lt;code&gt;record-backward-compat&lt;/code&gt; feature flag.&lt;/p&gt; 
 &lt;/details&gt; 
 &lt;h2&gt;Community&lt;/h2&gt; 
 &lt;div align="left"&gt; 
  &lt;img align="right" src="https://raw.githubusercontent.com/tracel-ai/burn/main/assets/ember-community.png" height="96px"&gt; 
  &lt;p&gt;If you are excited about the project, don't hesitate to join our &lt;a href="https://discord.gg/uPEBbYYDB6"&gt;Discord&lt;/a&gt;! We try to be as welcoming as possible to everybody from any background. You can ask your questions and share what you built with the community!&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Before contributing, please take a moment to review our &lt;a href="https://github.com/tracel-ai/burn/tree/main/CODE-OF-CONDUCT.md"&gt;code of conduct&lt;/a&gt;. It's also highly recommended to read the &lt;a href="https://github.com/tracel-ai/burn/tree/main/contributor-book/src/project-architecture"&gt;architecture overview&lt;/a&gt;, which explains some of our architectural decisions. Refer to our &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; 
 &lt;h2&gt;Status&lt;/h2&gt; 
 &lt;p&gt;Burn is currently in active development, and there will be breaking changes. While any resulting issues are likely to be easy to fix, there are no guarantees at this stage.&lt;/p&gt; 
 &lt;h2&gt;License&lt;/h2&gt; 
 &lt;p&gt;Burn is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/tracel-ai/burn/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; for details. Opening a pull request is assumed to signal agreement with these licensing terms.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>firecracker-microvm/firecracker</title>
      <link>https://github.com/firecracker-microvm/firecracker</link>
      <description>&lt;p&gt;Secure and fast microVMs for serverless computing.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="docs/images/fc_logo_full_transparent-bg_white-fg.png"&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="docs/images/fc_logo_full_transparent-bg.png"&gt; 
 &lt;img alt="Firecracker Logo Title" width="750" src="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/images/fc_logo_full_transparent-bg.png"&gt; 
&lt;/picture&gt; 
&lt;p&gt;Our mission is to enable secure, multi-tenant, minimal-overhead execution of container and function workloads.&lt;/p&gt; 
&lt;p&gt;Read more about the Firecracker Charter &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What is Firecracker?&lt;/h2&gt; 
&lt;p&gt;Firecracker is an open source virtualization technology that is purpose-built for creating and managing secure, multi-tenant container and function-based services that provide serverless operational models. Firecracker runs workloads in lightweight virtual machines, called microVMs, which combine the security and isolation properties provided by hardware virtualization technology with the speed and flexibility of containers.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;The main component of Firecracker is a virtual machine monitor (VMM) that uses the Linux Kernel Virtual Machine (KVM) to create and run microVMs. Firecracker has a minimalist design. It excludes unnecessary devices and guest-facing functionality to reduce the memory footprint and attack surface area of each microVM. This improves security, decreases the startup time, and increases hardware utilization. Firecracker has also been integrated in container runtimes, for example &lt;a href="https://github.com/kata-containers/kata-containers"&gt;Kata Containers&lt;/a&gt; and &lt;a href="https://github.com/liquidmetal-dev/flintlock"&gt;Flintlock&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Firecracker was developed at Amazon Web Services to accelerate the speed and efficiency of services like &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; and &lt;a href="https://aws.amazon.com/fargate/"&gt;AWS Fargate&lt;/a&gt;. Firecracker is open sourced under &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/LICENSE"&gt;Apache version 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To read more about Firecracker, check out &lt;a href="https://firecracker-microvm.github.io"&gt;firecracker-microvm.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;To get started with Firecracker, download the latest &lt;a href="https://github.com/firecracker-microvm/firecracker/releases"&gt;release&lt;/a&gt; binaries or build it from source.&lt;/p&gt; 
&lt;p&gt;You can build Firecracker on any Unix/Linux system that has Docker running (we use a development container) and &lt;code&gt;bash&lt;/code&gt; installed, as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/firecracker-microvm/firecracker
cd firecracker
tools/devtool build
toolchain="$(uname -m)-unknown-linux-musl"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Firecracker binary will be placed at &lt;code&gt;build/cargo_target/${toolchain}/debug/firecracker&lt;/code&gt;. For more information on building, testing, and running Firecracker, go to the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md"&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The overall security of Firecracker microVMs, including the ability to meet the criteria for safe multi-tenant computing, depends on a well configured Linux host operating system. A configuration that we believe meets this bar is included in &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/prod-host-setup.md"&gt;the production host setup document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Firecracker is already running production workloads within AWS, but it's still Day 1 on the journey guided by our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md"&gt;mission&lt;/a&gt;. There's a lot more to build and we welcome all contributions.&lt;/p&gt; 
&lt;p&gt;To contribute to Firecracker, check out the development setup section in the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md"&gt;getting started guide&lt;/a&gt; and then the Firecracker &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;New Firecracker versions are released via the GitHub repository &lt;a href="https://github.com/firecracker-microvm/firecracker/releases"&gt;releases&lt;/a&gt; page, typically every two or three months. A history of changes is recorded in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHANGELOG.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Firecracker release policy is detailed &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/RELEASE_POLICY.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;Firecracker's overall architecture is described in &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/design.md"&gt;the design document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features &amp;amp; Capabilities&lt;/h2&gt; 
&lt;p&gt;Firecracker consists of a single micro Virtual Machine Manager process that exposes an API endpoint to the host once started. The API is &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/src/firecracker/swagger/firecracker.yaml"&gt;specified in OpenAPI format&lt;/a&gt;. Read more about it in the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/api_requests"&gt;API docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;strong&gt;API endpoint&lt;/strong&gt; can be used to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configure the microvm by: 
  &lt;ul&gt; 
   &lt;li&gt;Setting the number of vCPUs (the default is 1).&lt;/li&gt; 
   &lt;li&gt;Setting the memory size (the default is 128 MiB).&lt;/li&gt; 
   &lt;li&gt;Configuring a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/cpu_templates/cpu-templates.md"&gt;CPU template&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Add one or more network interfaces to the microVM.&lt;/li&gt; 
 &lt;li&gt;Add one or more read-write or read-only disks to the microVM, each represented by a file-backed block device.&lt;/li&gt; 
 &lt;li&gt;Trigger a block device re-scan while the guest is running. This enables the guest OS to pick up size changes to the block device's backing file.&lt;/li&gt; 
 &lt;li&gt;Change the backing file for a block device, before or after the guest boots.&lt;/li&gt; 
 &lt;li&gt;Configure rate limiters for virtio devices which can limit the bandwidth, operations per second, or both.&lt;/li&gt; 
 &lt;li&gt;Configure the logging and metric system.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[BETA]&lt;/code&gt; Configure the data tree of the guest-facing metadata service. The service is only available to the guest if this resource is configured.&lt;/li&gt; 
 &lt;li&gt;Add a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/vsock.md"&gt;vsock socket&lt;/a&gt; to the microVM.&lt;/li&gt; 
 &lt;li&gt;Add a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/entropy.md"&gt;entropy device&lt;/a&gt; to the microVM.&lt;/li&gt; 
 &lt;li&gt;Start the microVM using a given kernel image, root file system, and boot arguments.&lt;/li&gt; 
 &lt;li&gt;[x86_64 only] Stop the microVM.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Built-in Capabilities&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Demand fault paging and CPU oversubscription enabled by default.&lt;/li&gt; 
 &lt;li&gt;Advanced, thread-specific seccomp filters for enhanced security.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/jailer.md"&gt;Jailer&lt;/a&gt; process for starting Firecracker in production scenarios; applies a cgroup/namespace isolation barrier and then drops privileges.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tested platforms&lt;/h2&gt; 
&lt;p&gt;We test all combinations of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Instance&lt;/th&gt; 
   &lt;th align="left"&gt;Host OS &amp;amp; Kernel&lt;/th&gt; 
   &lt;th align="left"&gt;Guest Rootfs&lt;/th&gt; 
   &lt;th align="left"&gt;Guest Kernel&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;c5n.metal&lt;/td&gt; 
   &lt;td align="left"&gt;al2 linux_5.10&lt;/td&gt; 
   &lt;td align="left"&gt;ubuntu 24.04&lt;/td&gt; 
   &lt;td align="left"&gt;linux_5.10&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m5n.metal&lt;/td&gt; 
   &lt;td align="left"&gt;al2023 linux_6.1&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;linux_6.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6i.metal&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7i.metal-24xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7i.metal-48xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6a.metal&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7a.metal-48xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6g.metal&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7g.metal&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m8g.metal-24xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m8g.metal-48xl&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Known issues and Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;pl031&lt;/code&gt; RTC device on aarch64 does not support interrupts, so guest programs which use an RTC alarm (e.g. &lt;code&gt;hwclock&lt;/code&gt;) will not work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;Firecracker's performance characteristics are listed as part of the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SPECIFICATION.md"&gt;specification documentation&lt;/a&gt;. All specifications are a part of our commitment to supporting container and function workloads in serverless operational models, and are therefore enforced via continuous integration testing.&lt;/p&gt; 
&lt;h2&gt;Policy for Security Disclosures&lt;/h2&gt; 
&lt;p&gt;The security of Firecracker is our top priority. If you suspect you have uncovered a vulnerability, contact us privately, as outlined in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md"&gt;security policy document&lt;/a&gt;; we will immediately prioritize your disclosure.&lt;/p&gt; 
&lt;h2&gt;FAQ &amp;amp; Contact&lt;/h2&gt; 
&lt;p&gt;Frequently asked questions are collected in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/FAQ.md"&gt;FAQ doc&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can get in touch with the Firecracker community in the following ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Security-related issues, see our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md"&gt;security policy document&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Chat with us on our &lt;a href="https://join.slack.com/t/firecracker-microvm/shared_invite/zt-2tc0mfxpc-tU~HYAYSzLDl5XGGJU3YIg"&gt;Slack workspace&lt;/a&gt; &lt;em&gt;Note: most of the maintainers are on a European time zone.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Open a GitHub issue in this repository.&lt;/li&gt; 
 &lt;li&gt;Email the maintainers at &lt;a href="mailto:firecracker-maintainers@amazon.com"&gt;firecracker-maintainers@amazon.com&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When communicating within the Firecracker community, please mind our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CODE_OF_CONDUCT.md"&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ankitects/anki</title>
      <link>https://github.com/ankitects/anki</link>
      <description>&lt;p&gt;Anki is a smart spaced repetition flashcard program&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anki®&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://buildkite.com/ankitects/anki-ci"&gt;&lt;img src="https://badge.buildkite.com/c9edf020a4aec976f9835e54751cc5409d843adbb66d043bd3.svg?branch=main" alt="Build status"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repo contains the source code for the computer version of &lt;a href="https://apps.ankiweb.net"&gt;Anki&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;About&lt;/h1&gt; 
&lt;p&gt;Anki is a spaced repetition program. Please see the &lt;a href="https://apps.ankiweb.net"&gt;website&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;h3&gt;Anki Betas&lt;/h3&gt; 
&lt;p&gt;If you'd like to try development builds of Anki but don't feel comfortable building the code, please see &lt;a href="https://betas.ankiweb.net/"&gt;Anki betas&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Developing&lt;/h3&gt; 
&lt;p&gt;For more information on building and developing, please see &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/development.md"&gt;Development&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Want to contribute to Anki? Check out the &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/docs/contributing.md"&gt;Contribution Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Anki Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/CONTRIBUTORS"&gt;CONTRIBUTORS&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Anki's license: &lt;a href="https://raw.githubusercontent.com/ankitects/anki/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dani-garcia/vaultwarden</title>
      <link>https://github.com/dani-garcia/vaultwarden</link>
      <description>&lt;p&gt;Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/dani-garcia/vaultwarden/main/resources/vaultwarden-logo-auto.svg?sanitize=true" alt="Vaultwarden Logo"&gt;&lt;/p&gt; 
&lt;p&gt;An alternative server implementation of the Bitwarden Client API, written in Rust and compatible with &lt;a href="https://bitwarden.com/download/"&gt;official Bitwarden clients&lt;/a&gt; [&lt;a href="https://raw.githubusercontent.com/dani-garcia/vaultwarden/main/#disclaimer"&gt;disclaimer&lt;/a&gt;], perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href="https://github.com/dani-garcia/vaultwarden/releases/latest"&gt;&lt;img src="https://img.shields.io/github/release/dani-garcia/vaultwarden.svg?style=for-the-badge&amp;amp;logo=vaultwarden&amp;amp;color=005AA4" alt="GitHub Release"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/pkgs/container/vaultwarden"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4&amp;amp;url=https%3A%2F%2Fipitio.github.io%2Fbackage%2Fdani-garcia%2Fvaultwarden%2Fvaultwarden.json&amp;amp;query=%24.downloads&amp;amp;label=ghcr.io%20pulls&amp;amp;cacheSeconds=14400" alt="ghcr.io Pulls"&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/vaultwarden/server"&gt;&lt;img src="https://img.shields.io/docker/pulls/vaultwarden/server.svg?style=for-the-badge&amp;amp;logo=docker&amp;amp;logoColor=fff&amp;amp;color=005AA4&amp;amp;label=docker.io%20pulls" alt="Docker Pulls"&gt;&lt;/a&gt; &lt;a href="https://quay.io/repository/vaultwarden/server"&gt;&lt;img src="https://img.shields.io/badge/quay.io-download-005AA4?style=for-the-badge&amp;amp;logo=redhat&amp;amp;cacheSeconds=14400" alt="Quay.io"&gt;&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors-anon/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=vaultwarden&amp;amp;color=005AA4" alt="Contributors"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/network/members"&gt;&lt;img src="https://img.shields.io/github/forks/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4" alt="Forks"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4" alt="Stars"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/issues"&gt;&lt;img src="https://img.shields.io/github/issues/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4&amp;amp;cacheSeconds=300" alt="Issues Open"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;img src="https://img.shields.io/github/issues-closed/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=005AA4&amp;amp;cacheSeconds=300" alt="Issues Closed"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/raw/main/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/github/license/dani-garcia/vaultwarden.svg?style=flat-square&amp;amp;logo=vaultwarden&amp;amp;color=944000&amp;amp;cacheSeconds=14400" alt="AGPL-3.0 Licensed"&gt;&lt;/a&gt; &lt;br&gt; &lt;a href="https://deps.rs/repo/github/dani-garcia/vaultwarden"&gt;&lt;img src="https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fdeps.rs%2Frepo%2Fgithub%2Fdani-garcia%2Fvaultwarden%2Fstatus.svg&amp;amp;query=%2F*%5Blocal-name()%3D'svg'%5D%2F*%5Blocal-name()%3D'g'%5D%5B2%5D%2F*%5Blocal-name()%3D'text'%5D%5B4%5D&amp;amp;style=flat-square&amp;amp;logo=rust&amp;amp;label=dependencies&amp;amp;color=005AA4" alt="Dependency Status"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/actions/workflows/release.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/dani-garcia/vaultwarden/release.yml?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;label=Release%20Workflow" alt="GHA Release"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/actions/workflows/build.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/dani-garcia/vaultwarden/build.yml?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;label=Build%20Workflow" alt="GHA Build"&gt;&lt;/a&gt; &lt;br&gt; &lt;a href="https://matrix.to/#/%23vaultwarden:matrix.org"&gt;&lt;img src="https://img.shields.io/matrix/vaultwarden:matrix.org.svg?style=flat-square&amp;amp;logo=matrix&amp;amp;logoColor=fff&amp;amp;color=953B00&amp;amp;cacheSeconds=14400" alt="Matrix Chat"&gt;&lt;/a&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/discussions"&gt;&lt;img src="https://img.shields.io/github/discussions/dani-garcia/vaultwarden?style=flat-square&amp;amp;logo=github&amp;amp;logoColor=fff&amp;amp;color=953B00&amp;amp;cacheSeconds=300" alt="GitHub Discussions"&gt;&lt;/a&gt; &lt;a href="https://vaultwarden.discourse.group/"&gt;&lt;img src="https://img.shields.io/discourse/topics?server=https%3A%2F%2Fvaultwarden.discourse.group%2F&amp;amp;style=flat-square&amp;amp;logo=discourse&amp;amp;color=953B00" alt="Discourse Discussions"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] &lt;strong&gt;When using this server, please report any bugs or suggestions directly to us (see &lt;a href="https://raw.githubusercontent.com/dani-garcia/vaultwarden/main/#get-in-touch"&gt;Get in touch&lt;/a&gt;), regardless of whatever clients you are using (mobile, desktop, browser...). DO NOT use the official Bitwarden support channels.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;br&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;A nearly complete implementation of the Bitwarden Client API is provided, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/managing-items/"&gt;Personal Vault&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/about-send/"&gt;Send&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/attachments/"&gt;Attachments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/website-icons/"&gt;Website icons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/personal-api-key/"&gt;Personal API Key&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/getting-started-organizations/"&gt;Organizations&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://bitwarden.com/help/about-collections/"&gt;Collections&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/sharing/"&gt;Password Sharing&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/user-types-access-control/"&gt;Member Roles&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/about-groups/"&gt;Groups&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/event-logs/"&gt;Event Logs&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/admin-reset/"&gt;Admin Password Reset&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/directory-sync/"&gt;Directory Connector&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/policies/"&gt;Policies&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/bitwarden-field-guide-two-step-login/"&gt;Multi/Two Factor Authentication&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://bitwarden.com/help/setup-two-step-login-authenticator/"&gt;Authenticator&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/setup-two-step-login-email/"&gt;Email&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/setup-two-step-login-fido/"&gt;FIDO2 WebAuthn&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/setup-two-step-login-yubikey/"&gt;YubiKey&lt;/a&gt;, &lt;a href="https://bitwarden.com/help/setup-two-step-login-duo/"&gt;Duo&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bitwarden.com/help/emergency-access/"&gt;Emergency Access&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Enabling-admin-page"&gt;Vaultwarden Admin Backend&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dani-garcia/bw_web_builds"&gt;Modified Web Vault client&lt;/a&gt; (Bundled within our containers)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] The web-vault requires the use a secure context for the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API"&gt;Web Crypto API&lt;/a&gt;. That means it will only work via &lt;code&gt;http://localhost:8000&lt;/code&gt; (using the port from the example below) or if you &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Enabling-HTTPS"&gt;enable HTTPS&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The recommended way to install and use Vaultwarden is via our container images which are published to &lt;a href="https://github.com/dani-garcia/vaultwarden/pkgs/container/vaultwarden"&gt;ghcr.io&lt;/a&gt;, &lt;a href="https://hub.docker.com/r/vaultwarden/server"&gt;docker.io&lt;/a&gt; and &lt;a href="https://quay.io/repository/vaultwarden/server"&gt;quay.io&lt;/a&gt;. See &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Which-container-image-to-use"&gt;which container image to use&lt;/a&gt; for an explanation of the provided tags.&lt;/p&gt; 
&lt;p&gt;There are also &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Third-party-packages"&gt;community driven packages&lt;/a&gt; which can be used, but those might be lagging behind the latest version or might deviate in the way Vaultwarden is configured, as described in our &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki"&gt;Wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can also &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Building-binary"&gt;build Vaultwarden&lt;/a&gt; yourself.&lt;/p&gt; 
&lt;p&gt;While Vaultwarden is based upon the &lt;a href="https://rocket.rs"&gt;Rocket web framework&lt;/a&gt; which has built-in support for TLS our recommendation would be that you setup a reverse proxy (see &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki/Proxy-examples"&gt;proxy examples&lt;/a&gt;).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] &lt;strong&gt;For more detailed examples on how to install, use and configure Vaultwarden you can check our &lt;a href="https://github.com/dani-garcia/vaultwarden/wiki"&gt;Wiki&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Docker/Podman CLI&lt;/h3&gt; 
&lt;p&gt;Pull the container image and mount a volume from the host for persistent storage.&lt;br&gt; You can replace &lt;code&gt;docker&lt;/code&gt; with &lt;code&gt;podman&lt;/code&gt; if you prefer to use podman.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;docker pull vaultwarden/server:latest
docker run --detach --name vaultwarden \
  --env DOMAIN="https://vw.domain.tld" \
  --volume /vw-data/:/data/ \
  --restart unless-stopped \
  --publish 127.0.0.1:8000:80 \
  vaultwarden/server:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will preserve any persistent data under &lt;code&gt;/vw-data/&lt;/code&gt;, you can adapt the path to whatever suits you.&lt;/p&gt; 
&lt;h3&gt;Docker Compose&lt;/h3&gt; 
&lt;p&gt;To use Docker compose you need to create a &lt;code&gt;compose.yaml&lt;/code&gt; which will hold the configuration to run the Vaultwarden container.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;services:
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    environment:
      DOMAIN: "https://vw.domain.tld"
    volumes:
      - ./vw-data/:/data/
    ports:
      - 127.0.0.1:8000:80
&lt;/code&gt;&lt;/pre&gt; 
&lt;br&gt; 
&lt;h2&gt;Get in touch&lt;/h2&gt; 
&lt;p&gt;Have a question, suggestion or need help? Join our community on &lt;a href="https://matrix.to/#/%23vaultwarden:matrix.org"&gt;Matrix&lt;/a&gt;, &lt;a href="https://github.com/dani-garcia/vaultwarden/discussions"&gt;GitHub Discussions&lt;/a&gt; or &lt;a href="https://vaultwarden.discourse.group/"&gt;Discourse Forums&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Encountered a bug or crash? Please search our issue tracker and discussions to see if it's already been reported. If not, please &lt;a href="https://github.com/dani-garcia/vaultwarden/discussions"&gt;start a new discussion&lt;/a&gt; or &lt;a href="https://github.com/dani-garcia/vaultwarden/issues/"&gt;create a new issue&lt;/a&gt;. Ensure you're using the latest version of Vaultwarden and there aren't any similar issues open or closed!&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thanks for your contribution to the project!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/dani-garcia/vaultwarden/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors-anon/dani-garcia/vaultwarden?style=for-the-badge&amp;amp;logo=vaultwarden&amp;amp;color=005AA4" alt="Contributors Count"&gt;&lt;/a&gt;&lt;br&gt; &lt;a href="https://github.com/dani-garcia/vaultwarden/graphs/contributors"&gt;&lt;img src="https://contributors-img.web.app/image?repo=dani-garcia/vaultwarden" alt="Contributors Avatars"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;This project is not associated with &lt;a href="https://bitwarden.com/"&gt;Bitwarden&lt;/a&gt; or Bitwarden, Inc.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;However, one of the active maintainers for Vaultwarden is employed by Bitwarden and is allowed to contribute to the project on their own time. These contributions are independent of Bitwarden and are reviewed by other maintainers.&lt;/p&gt; 
&lt;p&gt;The maintainers work together to set the direction for the project, focusing on serving the self-hosting community, including individuals, families, and small organizations, while ensuring the project's sustainability.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; We cannot be held liable for any data loss that may occur while using Vaultwarden. This includes passwords, attachments, and other information handled by the application. We highly recommend performing regular backups of your files and database. However, should you experience data loss, we encourage you to contact us immediately.&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Bitwarden_RS&lt;/h2&gt; 
&lt;p&gt;This project was known as Bitwarden_RS and has been renamed to separate itself from the official Bitwarden server in the hopes of avoiding confusion and trademark/branding issues.&lt;br&gt; Please see &lt;a href="https://github.com/dani-garcia/vaultwarden/discussions/1642"&gt;#1642 - v1.21.0 release and project rename to Vaultwarden&lt;/a&gt; for more explanation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vosen/ZLUDA</title>
      <link>https://github.com/vosen/ZLUDA</link>
      <description>&lt;p&gt;CUDA on non-NVIDIA GPUs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://discord.gg/sg6BNzXuc7"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;ZLUDA&lt;/h1&gt; 
&lt;p&gt;ZLUDA is a drop-in replacement for CUDA on non-NVIDIA GPUs. ZLUDA allows running unmodified CUDA applications using non-NVIDIA GPUs with near-native performance.&lt;/p&gt; 
&lt;p&gt;ZLUDA supports AMD Radeon RX 5000 series and newer GPUs (both desktop and integrated).&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/vosen/ZLUDA/master/geekbench.svg?sanitize=true" alt="GeekBench 5.5.1 chart"&gt;&lt;/p&gt; 
&lt;p&gt;ZLUDA is a work in progress. Follow development here and say hi on &lt;a href="https://discord.gg/sg6BNzXuc7"&gt;Discord&lt;/a&gt;. For more details, see the announcement: &lt;a href="https://vosen.github.io/ZLUDA/blog/zludas-third-life/"&gt;https://vosen.github.io/ZLUDA/blog/zludas-third-life/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: This version ZLUDA is under heavy development (more &lt;a href="https://vosen.github.io/ZLUDA/blog/zludas-third-life/"&gt;here&lt;/a&gt;) and right now only supports Geekbench. ZLUDA probably will not work with your application just yet.&lt;/p&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;You should have a recent AMD GPU driver ("AMD Software: Adrenalin Edition") installed.&lt;br&gt; To run your application, you should either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Recommended approach) Copy ZLUDA-provided &lt;code&gt;nvcuda.dll&lt;/code&gt; and &lt;code&gt;nvml.dll&lt;/code&gt; from &lt;code&gt;target\release&lt;/code&gt; (if built from sources) or &lt;code&gt;zluda&lt;/code&gt; (if downloaded a zip package) into a path which your application uses to load CUDA. Paths vary application to application, but usually it's the directory where the .exe file is located&lt;/li&gt; 
 &lt;li&gt;Use ZLUDA launcher like below. ZLUDA launcher is known to be buggy and incomplete: &lt;pre&gt;&lt;code&gt;&amp;lt;ZLUDA_DIRECTORY&amp;gt;\zluda_with.exe -- &amp;lt;APPLICATION&amp;gt; &amp;lt;APPLICATIONS_ARGUMENTS&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;Run your application like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;LD_LIBRARY_PATH=&amp;lt;ZLUDA_DIRECTORY&amp;gt; &amp;lt;APPLICATION&amp;gt; &amp;lt;APPLICATIONS_ARGUMENTS&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;&amp;lt;ZLUDA_DIRECTORY&amp;gt;&lt;/code&gt; is the directory which contains ZLUDA-provided &lt;code&gt;libcuda.so&lt;/code&gt;: &lt;code&gt;target/release&lt;/code&gt; if you built from sources or &lt;code&gt;zluda&lt;/code&gt; if you downloaded a prebuilt package.&lt;/p&gt; 
&lt;h3&gt;MacOS&lt;/h3&gt; 
&lt;p&gt;Not supported&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git&lt;/li&gt; 
 &lt;li&gt;CMake&lt;/li&gt; 
 &lt;li&gt;Python 3&lt;/li&gt; 
 &lt;li&gt;Rust compiler (recent version)&lt;/li&gt; 
 &lt;li&gt;C++ compiler&lt;/li&gt; 
 &lt;li&gt;(Optional, but recommended) &lt;a href="https://ninja-build.org/"&gt;Ninja build system&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build steps&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Git clone the repo (make sure to use &lt;code&gt;--recursive&lt;/code&gt; option to fetch submodules):&lt;br&gt; &lt;code&gt;git clone --recursive https://github.com/vosen/ZLUDA.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Enter freshly cloned &lt;code&gt;ZLUDA&lt;/code&gt; directory and build with cargo (this takes a while):&lt;br&gt; &lt;code&gt;cargo xtask --release&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;ZLUDA project has a commercial backing and &lt;em&gt;does not&lt;/em&gt; accept donations. ZLUDA project accepts pull requests and other non-monetary contributions.&lt;/p&gt; 
&lt;p&gt;If you want to contribute a code fix or documentation update, feel free to open a Pull Request.&lt;/p&gt; 
&lt;h3&gt;Getting started&lt;/h3&gt; 
&lt;p&gt;There's no architecture document (yet). The two most important crates in ZLUDA are &lt;code&gt;ptx&lt;/code&gt; (PTX compiler) and &lt;code&gt;zluda&lt;/code&gt; (AMD GPU runtime). A good starting point to tinkering with the project is to run one of the &lt;code&gt;ptx&lt;/code&gt; unit tests under a debugger and understand what it is doing. &lt;code&gt;cargo test -p ptx -- ::add_amdgpu&lt;/code&gt; is a simple test that adds two numbers.&lt;/p&gt; 
&lt;p&gt;Github issues tagged with &lt;a href="https://github.com/vosen/ZLUDA/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;"help wanted"&lt;/a&gt; are tasks that are self-contained. Their level of difficulty varies, and they are not always good beginner tasks, but they are defined unambiguously.&lt;/p&gt; 
&lt;p&gt;If you have questions, feel free to ask on &lt;a href="https://discord.com/channels/1273316903783497778/1303329281409159270"&gt;#devtalk channel on Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This software is dual-licensed under either the Apache 2.0 license or the MIT license. See &lt;a href="https://raw.githubusercontent.com/vosen/ZLUDA/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="https://raw.githubusercontent.com/vosen/ZLUDA/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; for details&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jj-vcs/jj</title>
      <link>https://github.com/jj-vcs/jj</link>
      <description>&lt;p&gt;A Git-compatible VCS that is both simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;div class="title-block" style="text-align: center;" align="center"&gt; 
 &lt;h1&gt;Jujutsu—a version control system&lt;/h1&gt; 
 &lt;p&gt;&lt;img title="jj logo" src="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/jj-logo.svg?sanitize=true" width="320" height="320"&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/martinvonz/jj" alt="Release"&gt;&lt;/a&gt; &lt;a href="https://github.com/jj-vcs/jj/releases"&gt;&lt;img src="https://img.shields.io/github/release-date/martinvonz/jj" alt="Release date"&gt;&lt;/a&gt; &lt;br&gt; &lt;a href="https://github.com/jj-vcs/jj/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/martinvonz/jj" alt="License"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;img src="https://img.shields.io/badge/irc-%23jujutsu-blue.svg?sanitize=true" alt="IRC"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj"&gt;Homepage&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://jj-vcs.github.io/jj/latest/roadmap"&gt;Development Roadmap&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Jujutsu is a powerful &lt;a href="https://en.wikipedia.org/wiki/Version_control"&gt;version control system&lt;/a&gt; for software projects. You use it to get a copy of your code, track changes to the code, and finally publish those changes for others to see and use. It is designed from the ground up to be easy to use—whether you're new or experienced, working on brand new projects alone, or large scale software projects with large histories and teams.&lt;/p&gt; 
&lt;p&gt;Jujutsu is unlike most other systems, because internally it abstracts the user interface and version control algorithms from the &lt;em&gt;storage systems&lt;/em&gt; used to serve your content. This allows it to serve as a VCS with many possible physical backends, that may have their own data or networking models—like &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; or &lt;a href="https://www.breezy-vcs.org/"&gt;Breezy&lt;/a&gt;, or hybrid systems like Google's cloud-based design, &lt;a href="https://youtu.be/W71BTkUbdqE?t=645"&gt;Piper/CitC&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Today, we use Git repositories as a storage layer to serve and track content, making it &lt;strong&gt;compatible with many of your favorite Git-based tools, right now!&lt;/strong&gt; All core developers use Jujutsu to develop Jujutsu, right here on GitHub. But it should hopefully work with your favorite Git forges, too.&lt;/p&gt; 
&lt;p&gt;We combine many distinct design choices and concepts from other version control systems into a single tool. Some of those sources of inspiration include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;: We make an effort to &lt;a href="https://github.com/jj-vcs/jj/discussions/49"&gt;be fast&lt;/a&gt;—with a snappy UX, efficient algorithms, correct data structures, and good-old-fashioned attention to detail. The default storage backend uses Git repositories for "physical storage", for wide interoperability and ease of onboarding.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mercurial &amp;amp; Sapling&lt;/strong&gt;: There are many Mercurial-inspired features, such as the &lt;a href="https://jj-vcs.github.io/jj/latest/revsets/"&gt;revset&lt;/a&gt; language to select commits. There is &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison/#the-index"&gt;no explicit index&lt;/a&gt; or staging area. Branches are "anonymous" like Mercurial, so you don't need to make up a name for each small change. Primitives for rewriting history are powerful and simple. Formatting output is done with a robust template language that can be configured by the user.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Darcs&lt;/strong&gt;: Jujutsu keeps track of conflicts as &lt;a href="https://jj-vcs.github.io/jj/latest/conflicts/"&gt;first-class objects&lt;/a&gt; in its model; they are first-class in the same way commits are, while alternatives like Git simply think of conflicts as textual diffs. While not as rigorous as systems like Darcs (which is based on a formalized theory of patches, as opposed to snapshots), the effect is that many forms of conflict resolution can be performed and propagated automatically.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And it adds several innovative, useful features of its own:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Working-copy-as-a-commit&lt;/strong&gt;: Changes to files are &lt;a href="https://jj-vcs.github.io/jj/latest/working-copy/"&gt;recorded automatically&lt;/a&gt; as normal commits, and amended on every subsequent change. This "snapshot" design simplifies the user-facing data model (commits are the only visible object), simplifies internal algorithms, and completely subsumes features like Git's stashes or the index/staging-area.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operation log &amp;amp; undo&lt;/strong&gt;: Jujutsu records every operation that is performed on the repository, from commits, to pulls, to pushes. This makes debugging problems like "what just happened?" or "how did I end up here?" easier, &lt;em&gt;especially&lt;/em&gt; when you're helping your coworker answer those questions about their repository! And because everything is recorded, you can undo that mistake you just made with ease. Version control has finally entered &lt;a href="https://en.wikipedia.org/wiki/Undo#History"&gt;the 1960s&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic rebase and conflict resolution&lt;/strong&gt;: When you modify a commit, every descendent is automatically rebased on top of the freshly-modified one. This makes "patch-based" workflows a breeze. If you resolve a conflict in a commit, the &lt;em&gt;resolution&lt;/em&gt; of that conflict is also propagated through descendants as well. In effect, this is a completely transparent version of &lt;code&gt;git rebase --update-refs&lt;/code&gt; combined with &lt;code&gt;git rerere&lt;/code&gt;, supported by design.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING] The following features are available for use, but experimental; they may have bugs, backwards incompatible storage changes, and user-interface changes!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Safe, concurrent replication&lt;/strong&gt;: Have you ever wanted to store your version controlled repositories inside a Dropbox folder? Or continuously backup repositories to S3? No? Well, now you can!&lt;/p&gt; &lt;p&gt;The fundamental problem with using filesystems like Dropbox and backup tools like &lt;code&gt;rsync&lt;/code&gt; on your typical Git/Mercurial repositories is that they rely on &lt;em&gt;local filesystem operations&lt;/em&gt; being atomic, serialized, and non-concurrent with respect to other reads and writes—which is &lt;em&gt;not&lt;/em&gt; true when operating on distributed file systems, or when operations like concurrent file copies (for backup) happen while lock files are being held.&lt;/p&gt; &lt;p&gt;Jujutsu is instead designed to be &lt;a href="https://jj-vcs.github.io/jj/latest/technical/concurrency/"&gt;safe under concurrent scenarios&lt;/a&gt;; simply using rsync or Dropbox and then using that resulting repository should never result in a repository in a &lt;em&gt;corrupt state&lt;/em&gt;. The worst that &lt;em&gt;should&lt;/em&gt; happen is that it will expose conflicts between the local and remote state, leaving you to resolve them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The command-line tool is called &lt;code&gt;jj&lt;/code&gt; for now because it's easy to type and easy to replace (rare in English). The project is called "Jujutsu" because it matches "jj".&lt;/p&gt; 
&lt;p&gt;Jujutsu is relatively young, with lots of work to still be done. If you have any questions, or want to talk about future plans, please join us on Discord &lt;a href="https://discord.gg/dkmfj3aGQN"&gt;&lt;img src="https://img.shields.io/discord/968932220549103686.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord"&gt;&lt;/a&gt;, start a &lt;a href="https://github.com/jj-vcs/jj/discussions"&gt;GitHub Discussion&lt;/a&gt;, or send an IRC message to &lt;a href="https://web.libera.chat/?channel=#jujutsu"&gt;&lt;code&gt;#jujutsu&lt;/code&gt; on Libera Chat&lt;/a&gt;. The developers monitor all of these channels[^bridge].&lt;/p&gt; 
&lt;p&gt;[^bridge]: To be more precise, the &lt;code&gt;#jujutsu&lt;/code&gt; Libera IRC channel is bridged to one of the channels on jj's Discord. Some of the developers stay on Discord and use the bridge to follow IRC.&lt;/p&gt; 
&lt;h3&gt;News and Updates 📣&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;December 2024&lt;/strong&gt;: The &lt;code&gt;jj&lt;/code&gt; Repository has moved to the &lt;code&gt;jj-vcs&lt;/code&gt; GitHub organisation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;November 2024&lt;/strong&gt;: Version 0.24 is released which adds &lt;code&gt;jj file annotate&lt;/code&gt;, which is equivalent to &lt;code&gt;git blame&lt;/code&gt; or &lt;code&gt;hg annotate&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;September 2024&lt;/strong&gt;: Martin gave a &lt;a href="https://www.youtube.com/watch?v=LV0JzI8IcCY"&gt;presentation about Jujutsu&lt;/a&gt; at Git Merge 2024.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Version 0.14 is released, which deprecates &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/CHANGELOG.md#0140---2024-02-07"&gt;"jj checkout" and "jj merge"&lt;/a&gt;, as well as &lt;code&gt;jj init --git&lt;/code&gt;, which is now just called &lt;code&gt;jj git init&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Oct 2023&lt;/strong&gt;: Version 0.10.0 is released! Now includes a bundled merge and diff editor for all platforms, "immutable revsets" to avoid accidentally &lt;code&gt;edit&lt;/code&gt;-ing the wrong revisions, and lots of polish.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin gave a presentation about Google's plans for Jujutsu at Git Merge 2022! See the &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt; or the &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;recording&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Related Media&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mar 2024&lt;/strong&gt;: Chris Krycho started &lt;a href="https://www.youtube.com/playlist?list=PLelyiwKWHHAq01Pvmpf6x7J0y-yQpmtxp"&gt;a YouTube series about Jujutsu&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feb 2024&lt;/strong&gt;: Chris Krycho published an article about Jujutsu called &lt;a href="https://v5.chriskrycho.com/essays/jj-init/"&gt;jj init&lt;/a&gt; and Steve Klabnik followed up with the &lt;a href="https://steveklabnik.github.io/jujutsu-tutorial/"&gt;Jujutsu Tutorial&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2024&lt;/strong&gt;: Jujutsu was featured in an LWN.net article called &lt;a href="https://lwn.net/Articles/958468/"&gt;Jujutsu: a new, Git-compatible version control system&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jan 2023&lt;/strong&gt;: Martin's Talk about Jujutsu at Git Merge 2022, &lt;a href="https://www.youtube.com/watch?v=bx_LGilOuE4"&gt;video&lt;/a&gt; and the associated &lt;a href="https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view"&gt;slides&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The wiki also contains a more extensive list of &lt;a href="https://github.com/jj-vcs/jj/wiki/Media"&gt;media references&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT] Jujutsu is an &lt;strong&gt;experimental version control system&lt;/strong&gt;. While Git compatibility is stable, and most developers use it daily for all their needs, there may still be work-in-progress features, suboptimal UX, and workflow gaps that make it unusable for your particular use.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Follow the &lt;a href="https://jj-vcs.github.io/jj/latest/install-and-setup"&gt;installation instructions&lt;/a&gt; to obtain and configure &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The best way to get started is probably to go through &lt;a href="https://jj-vcs.github.io/jj/latest/tutorial"&gt;the tutorial&lt;/a&gt;. Also see the &lt;a href="https://jj-vcs.github.io/jj/latest/git-comparison"&gt;Git comparison&lt;/a&gt;, which includes a table of &lt;code&gt;jj&lt;/code&gt; vs. &lt;code&gt;git&lt;/code&gt; commands.&lt;/p&gt; 
&lt;p&gt;As you become more familiar with Jujutsu, the following resources may be helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/FAQ"&gt;FAQ&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://jj-vcs.github.io/jj/latest/glossary"&gt;Glossary&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help&lt;/code&gt; command (e.g. &lt;code&gt;jj help rebase&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;jj help -k &amp;lt;keyword&amp;gt;&lt;/code&gt; command (e.g. &lt;code&gt;jj help -k config&lt;/code&gt;). Use &lt;code&gt;jj help --help&lt;/code&gt; to see what keywords are available.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are using a &lt;strong&gt;prerelease&lt;/strong&gt; version of &lt;code&gt;jj&lt;/code&gt;, you would want to consult &lt;a href="https://jj-vcs.github.io/jj/prerelease/"&gt;the docs for the prerelease (main branch) version&lt;/a&gt;. You can also get there from the docs for the latest release by using the website's version switcher. The version switcher is visible in the header of the website when you scroll to the top of any page.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Compatible with Git&lt;/h3&gt; 
&lt;p&gt;Jujutsu is designed so that the underlying data and storage model is abstract. Today, only the Git backend is production-ready. The Git backend uses the &lt;a href="https://github.com/Byron/gitoxide"&gt;gitoxide&lt;/a&gt; Rust library.&lt;/p&gt; 
&lt;p&gt;The Git backend is fully featured and maintained, and allows you to use Jujutsu with any Git remote. The commits you create will look like regular Git commits. You can fetch branches from a regular Git remote and push branches to the remote. You can always switch back to Git.&lt;/p&gt; 
&lt;p&gt;Here is how you can explore a GitHub repository with &lt;code&gt;jj&lt;/code&gt;.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/git_compat.png"&gt; 
&lt;p&gt;You can even have a &lt;a href="https://jj-vcs.github.io/jj/latest/git-compatibility#co-located-jujutsugit-repos"&gt;"co-located" local repository&lt;/a&gt; where you can use both &lt;code&gt;jj&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; commands interchangeably.&lt;/p&gt; 
&lt;h3&gt;The working copy is automatically committed&lt;/h3&gt; 
&lt;p&gt;Jujutsu uses a real commit to represent the working copy. Checking out a commit results a new working-copy commit on top of the target commit. Almost all commands automatically amend the working-copy commit.&lt;/p&gt; 
&lt;p&gt;The working-copy being a commit means that commands never fail because the working copy is dirty (no "error: Your local changes to the following files..."), and there is no need for &lt;code&gt;git stash&lt;/code&gt;. Also, because the working copy is a commit, commands work the same way on the working-copy commit as on any other commit, so you can set the commit message before you're done with the changes.&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/working_copy.png"&gt; 
&lt;h3&gt;The repo is the source of truth&lt;/h3&gt; 
&lt;p&gt;With Jujutsu, the working copy plays a smaller role than with Git. Commands snapshot the working copy before they start, then they update the repo, and then the working copy is updated (if the working-copy commit was modified). Almost all commands (even checkout!) operate on the commits in the repo, leaving the common functionality of snapshotting and updating of the working copy to centralized code. For example, &lt;code&gt;jj restore&lt;/code&gt; (similar to &lt;code&gt;git restore&lt;/code&gt;) can restore from any commit and into any commit, and &lt;code&gt;jj describe&lt;/code&gt; can set the commit message of any commit (defaults to the working-copy commit).&lt;/p&gt; 
&lt;h3&gt;Entire repo is under version control&lt;/h3&gt; 
&lt;p&gt;All operations you perform in the repo are recorded, along with a snapshot of the repo state after the operation. This means that you can easily revert to an earlier repo state, or to simply undo a particular operation (which does not necessarily have to be the most recent operation).&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/operation_log.png"&gt; 
&lt;h3&gt;Conflicts can be recorded in commits&lt;/h3&gt; 
&lt;p&gt;If an operation results in &lt;a href="https://jj-vcs.github.io/jj/latest/glossary#conflict"&gt;conflicts&lt;/a&gt;, information about those conflicts will be recorded in the commit(s). The operation will succeed. You can then resolve the conflicts later. One consequence of this design is that there's no need to continue interrupted operations. Instead, you get a single workflow for resolving conflicts, regardless of which command caused them. This design also lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).&lt;/p&gt; 
&lt;p&gt;Basic conflict resolution:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/resolve_conflicts.png"&gt; 
&lt;p&gt;Juggling conflicts:&lt;/p&gt; 
&lt;img src="https://raw.githubusercontent.com/jj-vcs/jj/main/demos/juggle_conflicts.png"&gt; 
&lt;h3&gt;Automatic rebase&lt;/h3&gt; 
&lt;p&gt;Whenever you modify a commit, any descendants of the old commit will be rebased onto the new commit. Thanks to the conflict design described above, that can be done even if there are conflicts. Bookmarks pointing to rebased commits will be updated. So will the working copy if it points to a rebased commit.&lt;/p&gt; 
&lt;h3&gt;Comprehensive support for rewriting history&lt;/h3&gt; 
&lt;p&gt;Besides the usual rebase command, there's &lt;code&gt;jj describe&lt;/code&gt; for editing the description (commit message) of an arbitrary commit. There's also &lt;code&gt;jj diffedit&lt;/code&gt;, which lets you edit the changes in a commit without checking it out. To split a commit into two, use &lt;code&gt;jj split&lt;/code&gt;. You can even move part of the changes in a commit to any other commit using &lt;code&gt;jj squash -i --from X --into Y&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;The tool is fairly feature-complete, but some important features like support for Git submodules are not yet completed. There are also several performance bugs. It's likely that workflows and setups different from what the core developers use are not well supported, e.g. there is no native support for email-based workflows.&lt;/p&gt; 
&lt;p&gt;Today, all core developers use &lt;code&gt;jj&lt;/code&gt; to work on &lt;code&gt;jj&lt;/code&gt;. I (Martin von Zweigbergk) have almost exclusively used &lt;code&gt;jj&lt;/code&gt; to develop the project itself since early January 2021. I haven't had to re-clone from source (I don't think I've even had to restore from backup).&lt;/p&gt; 
&lt;p&gt;There &lt;em&gt;will&lt;/em&gt; be changes to workflows and backward-incompatible changes to the on-disk formats before version 1.0.0. For any format changes, we'll try to implement transparent upgrades (as we've done with recent changes), or provide upgrade commands or scripts if requested.&lt;/p&gt; 
&lt;h2&gt;Related work&lt;/h2&gt; 
&lt;p&gt;There are several tools trying to solve similar problems as Jujutsu. See &lt;a href="https://jj-vcs.github.io/jj/latest/related-work"&gt;related work&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome outside contributions, and there's plenty of things to do, so don't be shy. Please ask if you want a pointer on something you can help with, and hopefully we can all figure something out.&lt;/p&gt; 
&lt;p&gt;We do have &lt;a href="https://jj-vcs.github.io/jj/prerelease/contributing/"&gt;a few policies and suggestions&lt;/a&gt; for contributors. The broad TL;DR:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bug reports are very welcome!&lt;/li&gt; 
 &lt;li&gt;Every commit that lands in the &lt;code&gt;main&lt;/code&gt; branch is code reviewed.&lt;/li&gt; 
 &lt;li&gt;Please behave yourself, and obey the Community Guidelines.&lt;/li&gt; 
 &lt;li&gt;There &lt;strong&gt;is&lt;/strong&gt; a mandatory CLA you must agree to. Importantly, it &lt;strong&gt;does not&lt;/strong&gt; transfer copyright ownership to Google or anyone else; it simply gives us the right to safely redistribute and use your changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mandatory Google Disclaimer&lt;/h3&gt; 
&lt;p&gt;I (Martin von Zweigbergk, &lt;a href="mailto:martinvonz@google.com"&gt;martinvonz@google.com&lt;/a&gt;) started Jujutsu as a hobby project in late 2019, and it has evolved into my full-time project at Google, with several other Googlers (now) assisting development in various capacities. That said, &lt;strong&gt;this is not a Google product&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Jujutsu is available as Open Source Software, under the Apache 2.0 license. See &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details about copyright and redistribution.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;jj&lt;/code&gt; logo was contributed by J. Jennings and is licensed under a Creative Commons License, see &lt;a href="https://raw.githubusercontent.com/jj-vcs/jj/main/docs/images/LICENSE"&gt;&lt;code&gt;docs/images/LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EFForg/rayhunter</title>
      <link>https://github.com/EFForg/rayhunter</link>
      <description>&lt;p&gt;Rust tool to detect cell site simulators on an orbic mobile hotspot&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://www.eff.org/files/styles/media_browser_preview/public/banner_library/rayhunter-banner.png" alt="Rayhunter Logo - An Orca taking a bite out of a cellular signal bar"&gt;&lt;/p&gt; 
&lt;h1&gt;Rayhunter&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/EFForg/rayhunter/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Tests"&gt;&lt;/p&gt; 
&lt;p&gt;Rayhunter is an IMSI Catcher Catcher for the Orbic mobile hotspot. To learn more, check out the &lt;a href="https://efforg.github.io/rayhunter/"&gt;Rayhunter Book&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>n0-computer/iroh</title>
      <link>https://github.com/n0-computer/iroh</link>
      <description>&lt;p&gt;peer-2-peer that just works&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;&lt;a href="https://iroh.computer"&gt;&lt;img alt="iroh" src="https://raw.githubusercontent.com/n0-computer/iroh/main/.img/iroh_wordmark.svg?sanitize=true" width="100"&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;h3 align="center"&gt; less net work for networks &lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://docs.rs/iroh/"&gt;&lt;img src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" alt="Documentation"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iroh"&gt;&lt;img src="https://img.shields.io/crates/v/iroh.svg?style=flat-square" alt="Crates.io"&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iroh"&gt;&lt;img src="https://img.shields.io/crates/d/iroh.svg?style=flat-square" alt="downloads"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/DpmJgtU7cW"&gt;&lt;img src="https://img.shields.io/discord/1161119546170687619?logo=discord&amp;amp;style=flat-square" alt="Chat"&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@n0computer"&gt;&lt;img src="https://img.shields.io/badge/YouTube-red?logo=youtube&amp;amp;logoColor=white&amp;amp;style=flat-square" alt="Youtube"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/n0-computer/iroh/main/LICENSE-MIT"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square" alt="License: MIT"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/n0-computer/iroh/main/LICENSE-APACHE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?style=flat-square" alt="License: Apache 2.0"&gt;&lt;/a&gt; &lt;a href="https://github.com/n0-computer/iroh/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/n0-computer/iroh/ci.yml?branch=main&amp;amp;style=flat-square&amp;amp;label=CI" alt="CI"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt; &lt;a href="https://iroh.computer/docs"&gt; Docs Site &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://docs.rs/iroh"&gt; Rust Docs &lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;h2&gt;What is iroh?&lt;/h2&gt; 
&lt;p&gt;Iroh gives you an API for dialing by public key. You say “connect to that phone”, iroh will find &amp;amp; maintain the fastest connection for you, regardless of where it is.&lt;/p&gt; 
&lt;h3&gt;Hole-punching&lt;/h3&gt; 
&lt;p&gt;The fastest route is a direct connection, so if necessary, iroh tries to hole-punch. Should this fail, it can fall back to an open ecosystem of public relay servers. To ensure these connections are as fast as possible, we &lt;a href="https://perf.iroh.computer"&gt;continuously measure iroh&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Built on &lt;a href="https://en.wikipedia.org/wiki/QUIC"&gt;QUIC&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Iroh uses &lt;a href="https://github.com/quinn-rs/quinn"&gt;Quinn&lt;/a&gt; to establish &lt;a href="https://en.wikipedia.org/wiki/QUIC"&gt;QUIC&lt;/a&gt; connections between nodes. This way you get authenticated encryption, concurrent streams with stream priorities, a datagram transport and avoid head-of-line-blocking out of the box.&lt;/p&gt; 
&lt;h2&gt;Compose Protocols&lt;/h2&gt; 
&lt;p&gt;Use pre-existing protocols built on iroh instead of writing your own:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n0-computer/iroh-blobs"&gt;iroh-blobs&lt;/a&gt; for &lt;a href="https://github.com/BLAKE3-team/BLAKE3"&gt;BLAKE3&lt;/a&gt;-based content-addressed blob transfer scaling from kilobytes to terabytes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n0-computer/iroh-gossip"&gt;iroh-gossip&lt;/a&gt; for establishing publish-subscribe overlay networks that scale, requiring only resources that your average phone can handle&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n0-computer/iroh-docs"&gt;iroh-docs&lt;/a&gt; for an eventually-consistent key-value store of &lt;a href="https://github.com/n0-computer/iroh-blobs"&gt;iroh-blobs&lt;/a&gt; blobs&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n0-computer/iroh-willow"&gt;iroh-willow&lt;/a&gt; for an (in-construction) implementation of the &lt;a href="https://willowprotocol.org"&gt;willow protocol&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Rust Library&lt;/h3&gt; 
&lt;p&gt;It's easiest to use iroh from rust. Install it using &lt;code&gt;cargo add iroh&lt;/code&gt;, then on the connecting side:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rs"&gt;const ALPN: &amp;amp;[u8] = b"iroh-example/echo/0";

let endpoint = Endpoint::builder().discovery_n0().bind().await?;

// Open a connection to the accepting node
let conn = endpoint.connect(addr, ALPN).await?;

// Open a bidirectional QUIC stream
let (mut send, mut recv) = conn.open_bi().await?;

// Send some data to be echoed
send.write_all(b"Hello, world!").await?;
send.finish()?;

// Receive the echo
let response = recv.read_to_end(1000).await?;
assert_eq!(&amp;amp;response, b"Hello, world!");

// As the side receiving the last application data - say goodbye
conn.close(0u32.into(), b"bye!");

// Close the endpoint and all its connections
endpoint.close().await;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And on the accepting side:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rs"&gt;let endpoint = Endpoint::builder().discovery_n0().bind().await?;

let router = Router::builder(endpoint)
    .accept(ALPN.to_vec(), Arc::new(Echo))
    .spawn()
    .await?;

// The protocol definition:
#[derive(Debug, Clone)]
struct Echo;

impl ProtocolHandler for Echo {
    async fn accept(&amp;amp;self, connection: Connection) -&amp;gt; Result&amp;lt;()&amp;gt; {
        let (mut send, mut recv) = connection.accept_bi().await?;

        // Echo any bytes received back directly.
        let bytes_sent = tokio::io::copy(&amp;amp;mut recv, &amp;amp;mut send).await?;

        send.finish()?;
        connection.closed().await;

        Ok(())
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The full example code with more comments can be found at &lt;a href="https://raw.githubusercontent.com/n0-computer/iroh/main/iroh/examples/echo.rs"&gt;&lt;code&gt;echo.rs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Or use one of the pre-existing protocols, e.g. &lt;a href="https://github.com/n0-computer/iroh-blobs"&gt;iroh-blobs&lt;/a&gt; or &lt;a href="https://github.com/n0-computer/iroh-gossip"&gt;iroh-gossip&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Other Languages&lt;/h3&gt; 
&lt;p&gt;If you want to use iroh from other languages, make sure to check out &lt;a href="https://github.com/n0-computer/iroh-ffi"&gt;iroh-ffi&lt;/a&gt;, the repository for FFI bindings.&lt;/p&gt; 
&lt;h3&gt;Links&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RwAt36Xe3UI_"&gt;Introducing Iroh (video)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://iroh.computer/docs"&gt;Iroh Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n0-computer/iroh-examples"&gt;Iroh Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n0-computer/iroh-experiments"&gt;Iroh Experiments&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Repository Structure&lt;/h2&gt; 
&lt;p&gt;This repository contains a workspace of crates:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;iroh&lt;/code&gt;: The core library for hole-punching &amp;amp; communicating with relays.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;iroh-relay&lt;/code&gt;: The relay server implementation. This is the code we run in production (and you can, too!).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;iroh-base&lt;/code&gt;: Common types like &lt;code&gt;Hash&lt;/code&gt;, key types or &lt;code&gt;RelayUrl&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;iroh-dns-server&lt;/code&gt;: DNS server implementation powering the &lt;code&gt;n0_discovery&lt;/code&gt; for NodeIds, running at dns.iroh.link.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;iroh-net-report&lt;/code&gt;: Analyzes your host's networking ability &amp;amp; NAT.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright 2024 N0, INC.&lt;/p&gt; 
&lt;p&gt;This project is licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/n0-computer/iroh/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/n0-computer/iroh/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this project by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>block/goose</title>
      <link>https://github.com/block/goose</link>
      <description>&lt;p&gt;an open source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLM&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;codename goose&lt;/h1&gt; 
 &lt;p&gt;&lt;em&gt;a local, extensible, open source AI agent that automates engineering tasks&lt;/em&gt;&lt;/p&gt; 
 &lt;p align="center"&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0"&gt; &lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true"&gt; &lt;/a&gt; &lt;a href="https://discord.gg/7GaTvbDwga"&gt; &lt;img src="https://img.shields.io/discord/1287729918100246654?logo=discord&amp;amp;logoColor=white&amp;amp;label=Join+Us&amp;amp;color=blueviolet" alt="Discord"&gt; &lt;/a&gt; &lt;a href="https://github.com/block/goose/actions/workflows/ci.yml"&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/block/goose/ci.yml?branch=main" alt="CI"&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;goose is your on-machine AI agent, capable of automating complex development tasks from start to finish. More than just code suggestions, goose can build entire projects from scratch, write and execute code, debug failures, orchestrate workflows, and interact with external APIs - &lt;em&gt;autonomously&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Whether you're prototyping an idea, refining existing code, or managing intricate engineering pipelines, goose adapts to your workflow and executes tasks with precision.&lt;/p&gt; 
&lt;p&gt;Designed for maximum flexibility, goose works with any LLM and supports multi-model configuration to optimize performance and cost, seamlessly integrates with MCP servers, and is available as both a desktop app as well as CLI - making it the ultimate AI assistant for developers who want to move faster and focus on innovation.&lt;/p&gt; 
&lt;h1&gt;Quick Links&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/getting-started/installation"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://block.github.io/goose/docs/category/getting-started"&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Goose Around with Us&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/block-opensource"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/@blockopensource"&gt;YouTube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.linkedin.com/company/block-opensource"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://x.com/blockopensource"&gt;Twitter/X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bsky.app/profile/opensource.block.xyz"&gt;Bluesky&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://njump.me/opensource@block.xyz"&gt;Nostr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>BoundaryML/baml</title>
      <link>https://github.com/BoundaryML/baml</link>
      <description>&lt;p&gt;The AI framework that adds the engineering to prompt engineering (Python/TS/Ruby/Java/C#/Rust/Go compatible)&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://boundaryml.com?utm_source=github" target="_blank" rel="noopener noreferrer"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="fern/assets/baml-lamb-white.png"&gt; 
   &lt;img src="https://raw.githubusercontent.com/BoundaryML/baml/canary/fern/assets/baml-lamb-white.png" height="64" id="top"&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://pypi.org/project/baml-py/"&gt;&lt;img src="https://img.shields.io/pypi/v/baml-py?color=006dad&amp;amp;label=BAML%20Version" alt="BAML Version"&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h2&gt;BAML: Basically a Made-up Language&lt;/h2&gt; 
 &lt;h4&gt; &lt;p&gt;&lt;a href="https://www.boundaryml.com/"&gt;Homepage&lt;/a&gt; | &lt;a href="https://docs.boundaryml.com"&gt;Docs&lt;/a&gt; | &lt;a href="https://www.boundaryml.com/chat"&gt;BAML AI Chat&lt;/a&gt; | &lt;a href="https://discord.gg/BTNBeXGuaS"&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;p&gt;BAML is a simple prompting language for building reliable &lt;strong&gt;AI workflows and agents&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;BAML makes prompt engineering easy by turning it into &lt;em&gt;schema engineering&lt;/em&gt; -- where you mostly focus on the models of your prompt -- to get more reliable outputs. You don't need to write your whole app in BAML, only the prompts! You can wire-up your LLM Functions in any language of your choice! See our quickstarts for &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;Go, and more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;BAML comes with all batteries included -- with full typesafety, streaming, retries, wide model support, even when they don't support native &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#enable-reliable-tool-calling-with-any-model-even-when-they-dont-support-it"&gt;tool-calling APIs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try BAML&lt;/strong&gt;: &lt;a href="https://www.promptfiddle.com"&gt;Prompt Fiddle&lt;/a&gt; • &lt;a href="https://baml-examples.vercel.app/"&gt;Interactive App Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;The core BAML principle: LLM Prompts are functions&lt;/h2&gt; 
&lt;p&gt;The fundamental building block in BAML is a function. Every prompt is a function that takes in parameters and returns a type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every function additionally defines which models it uses and what its prompt is.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; StopTool | ReplyTool {
    client "openai/gpt-4o-mini"

    prompt #"
        Be a {{ tone }} bot.

        {{ ctx.output_format }}

        {% for m in message %}
        {{ _.role(m.role) }}
        {{ m.content }}
        {% endfor %}
    "#
}

class Message {
    role string
    content string
}

class ReplyTool {
  response string
}

class StopTool {
  action "stop" @description(#"
    when it might be a good time to end the conversation
  "#)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;BAML Functions can be called from any language&lt;/h2&gt; 
&lt;p&gt;Below we call the ChatAgent function we defined in BAML through Python. BAML's Rust compiler generates a "baml_client" to access and call them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from baml_client import b
from baml_client.types import Message, StopTool

messages = [Message(role="assistant", content="How can I help?")]

while True:
  print(messages[-1].content)
  user_reply = input()
  messages.append(Message(role="user", content=user_reply))
  tool = b.ChatAgent(messages, "happy")
  if isinstance(tool, StopTool):
    print("Goodbye!")
    break
  else:
    messages.append(Message(role="assistant", content=tool.response))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can write any kind of agent or workflow using chained BAML functions. An agent is a while loop that calls a Chat BAML Function with some state.&lt;/p&gt; 
&lt;p&gt;And if you need to stream, add a couple more lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;stream = b.stream.ChatAgent(messages, "happy")
# partial is a Partial type with all Optional fields
for tool in stream:
    if isinstance(tool, StopTool):
      ...
    
final = stream.get_final_response()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And get fully type-safe outputs for each chunk in the stream.&lt;/p&gt; 
&lt;h2&gt;Test prompts 10x faster, right in your IDE&lt;/h2&gt; 
&lt;p&gt;BAML comes with native tooling for VSCode (jetbrains + neovim coming soon).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Visualize full prompt (including any multi-modal assets), and the API request&lt;/strong&gt;. BAML gives you full transparency and control of the prompt.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/c0b34db9-80cd-45a7-a356-6b5ab4a9c5b7" alt="raw-curl"&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using AI is all about iteration speed.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If testing your pipeline takes 2 minutes, you can only test 10 ideas in 20 minutes.&lt;/p&gt; 
&lt;p&gt;If you reduce it to 5 seconds, you can test 240 ideas in the same amount of time. &lt;img src="https://github.com/user-attachments/assets/6fc6b8a6-ffed-4cfc-80b8-78bc8a3d66a6" alt="resume-attempt2-smaller2"&gt;&lt;/p&gt; 
&lt;p&gt;The playground also allows you to run tests in parallel -- for even faster iteration speeds 🚀.&lt;/p&gt; 
&lt;p&gt;No need to login to websites, and no need to manually define json schemas.&lt;/p&gt; 
&lt;h2&gt;Enable reliable tool-calling with any model&lt;/h2&gt; 
&lt;p&gt;BAML works even when the models don't support native tool-calling APIs. We created the SAP (schema-aligned parsing) algorithm to support the flexible outputs LLMs can provide, like markdown within a JSON blob or chain-of-thought prior to answering. &lt;a href="https://www.boundaryml.com/blog/schema-aligned-parsing"&gt;Read more about SAP&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With BAML, your structured outputs work in Day-1 of a model release. No need to figure out whether a model supports parallel tool calls, or whether it supports recursive schemas, or &lt;code&gt;anyOf&lt;/code&gt; or &lt;code&gt;oneOf&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;See it in action with: &lt;strong&gt;&lt;a href="https://www.boundaryml.com/blog/deepseek-r1-function-calling"&gt;Deepseek-R1&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://www.boundaryml.com/blog/openai-o1"&gt;OpenAI O1&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Switch from 100s of models in a couple lines&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;function Extract() -&amp;gt; Resume {
+  client openai/o3-mini
  prompt #"
    ....
  "#
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/retry-policy"&gt;Retry policies&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/fallback"&gt;fallbacks&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/round-robin"&gt;model rotations&lt;/a&gt;. All statically defined. &lt;img src="https://www.boundaryml.com/blog/2025-01-24-ai-agents-need-a-new-syntax/06-fallback-retry.gif" alt="Fallback Retry"&gt; Want to do pick models at runtime? Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-advanced/llm-client-registry"&gt;Client Registry&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We support: &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai"&gt;OpenAI&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/anthropic"&gt;Anthropic&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-ai-gemini"&gt;Gemini&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-vertex"&gt;Vertex&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/aws-bedrock"&gt;Bedrock&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai-from-azure"&gt;Azure OpenAI&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic"&gt;Anything OpenAI Compatible&lt;/a&gt; (&lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-ollama"&gt;Ollama&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-open-router"&gt;OpenRouter&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-v-llm"&gt;VLLM&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-lm-studio"&gt;LMStudio&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-together-ai"&gt;TogetherAI&lt;/a&gt;, and more)&lt;/p&gt; 
&lt;h2&gt;Build beautiful streaming UIs&lt;/h2&gt; 
&lt;p&gt;BAML generates a ton of utilities for NextJS, Python (and any language) to make streaming UIs easy. &lt;img src="https://github.com/user-attachments/assets/cf82495b-21fc-40bf-ae98-93eef923d620" alt="recipe-generator"&gt;&lt;/p&gt; 
&lt;p&gt;BAML's streaming interfaces are fully type-safe. Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-basics/streaming"&gt;Streaming Docs&lt;/a&gt;, and our &lt;a href="https://docs.boundaryml.com/guide/framework-integration/react-next-js/quick-start"&gt;React hooks&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Fully Open-Source, and offline&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open-source (Apache 2)&lt;/li&gt; 
 &lt;li&gt;100% private. AGI will not require an internet connection, neither will BAML 
  &lt;ul&gt; 
   &lt;li&gt;No network requests beyond model calls you explicitly set&lt;/li&gt; 
   &lt;li&gt;Not stored or used for any training data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;BAML files can be saved locally on your machine and checked into Github for easy diffs.&lt;/li&gt; 
 &lt;li&gt;Built in Rust. So fast, you can't even tell it's there.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;BAML's Design Philosophy&lt;/h2&gt; 
&lt;p&gt;Everything is fair game when making new syntax. If you can code it, it can be yours. This is our design philosophy to help restrict ideas:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;1:&lt;/strong&gt; Avoid invention when possible 
  &lt;ul&gt; 
   &lt;li&gt;Yes, prompts need versioning — we have a great versioning tool: git&lt;/li&gt; 
   &lt;li&gt;Yes, you need to save prompts — we have a great storage tool: filesystems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2:&lt;/strong&gt; Any file editor and any terminal should be enough to use it&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;3:&lt;/strong&gt; Be fast&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;4:&lt;/strong&gt; A first year university student should be able to understand it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why a new programming language&lt;/h2&gt; 
&lt;p&gt;We used to write websites like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;def home():
    return "&amp;lt;button onclick=\"() =&amp;gt; alert(\\\"hello!\\\")\"&amp;gt;Click&amp;lt;/button&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now we do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;function Home() {
  return &amp;lt;button onClick={() =&amp;gt; setCount(prev =&amp;gt; prev + 1)}&amp;gt;
          {count} clicks!
         &amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;New syntax can be incredible at expressing new ideas. Plus the idea of maintaining hundreds of f-strings for prompts kind of disgusts us 🤮. Strings are bad for maintainable codebases. We prefer structured strings.&lt;/p&gt; 
&lt;p&gt;The goal of BAML is to give you the expressiveness of English, but the structure of code.&lt;/p&gt; 
&lt;p&gt;Full &lt;a href="https://www.boundaryml.com/blog/ai-agents-need-new-syntax"&gt;blog post&lt;/a&gt; by us.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;As models get better, we'll continue expecting even more out of them. But what will never change is that we'll want a way to write maintainable code that uses those models. The current way we all just assemble strings is very reminiscent of the early days PHP/HTML soup in web development. We hope some of the ideas we shared today can make a tiny dent in helping us all shape the way we all code tomorrow.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Do I need to write my whole app in BAML?&lt;/td&gt; 
   &lt;td&gt;Nope, only the prompts! BAML translates definitions into the language of your choice! &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;more&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Is BAML stable?&lt;/td&gt; 
   &lt;td&gt;Yes, many companies use it in production! We ship updates weekly!&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Why a new language?&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#why-a-new-programming-language"&gt;Jump to section&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Checkout our &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/CONTRIBUTING.md"&gt;guide on getting started&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;You can cite the BAML repo as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{baml,
  author = {Vaibhav Gupta, Aaron Villalpando and Boundary ML team},
  title = {BAML},
  url = {https://github.com/boundaryml/baml},
  year = {2024}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;p&gt;Made with ❤️ by Boundary&lt;/p&gt; 
&lt;p&gt;HQ in Seattle, WA&lt;/p&gt; 
&lt;p&gt;P.S. We're hiring for software engineers that love rust. &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/founders@boundaryml.com"&gt;Email us&lt;/a&gt; or reach out on &lt;a href="https://discord.gg/ENtBB6kkXH"&gt;discord&lt;/a&gt;!&lt;/p&gt; 
&lt;div align="left" style="align-items: left;"&gt; 
 &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#top"&gt; &lt;img src="https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white" alt="Back to Top"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;img src="https://imgs.xkcd.com/comics/standards.png" alt_text="hi"&gt;</description>
    </item>
    
    <item>
      <title>jdx/mise</title>
      <link>https://github.com/jdx/mise</link>
      <description>&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;&lt;a href="https://mise.jdx.dev"&gt; &lt;img src="https://github.com/jdx/mise/assets/216188/27a8ea18-9383-4d86-a445-305b9a6248c1" alt="mise-logo" width="400"&gt;&lt;br&gt; mise-en-place &lt;/a&gt;&lt;/h1&gt; 
 &lt;!-- &lt;a href="https://mise.jdx.dev"&gt;&lt;picture&gt; --&gt; 
 &lt;!--   &lt;source media="(prefers-color-scheme: dark)" width="617" srcset="./docs/logo-dark@2x.png"&gt; --&gt; 
 &lt;!--   &lt;img alt="mise logo" width="617" src="./docs/logo-light@2x.png"&gt; --&gt; 
 &lt;!-- &lt;/picture&gt;&lt;/a&gt; --&gt; 
 &lt;a href="https://crates.io/crates/mise"&gt;&lt;img alt="Crates.io" src="https://img.shields.io/crates/v/mise?style=for-the-badge"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/raw/main/LICENSE"&gt;&lt;img alt="GitHub" src="https://img.shields.io/github/license/jdx/mise?color=%2344CC11&amp;amp;style=for-the-badge"&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/actions/workflows/test.yml"&gt;&lt;img alt="GitHub Workflow Status" src="https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?style=for-the-badge"&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/mABnUDvP57"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge"&gt;&lt;/a&gt; 
 &lt;p&gt;&lt;em&gt;The front-end to your dev env.&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is it?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Like &lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt; (or &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; or &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; but for any language) it manages &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; like node, python, cmake, terraform, and &lt;a href="https://mise.jdx.dev/registry.html"&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/environments/"&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://www.gnu.org/software/make/manual/make.html"&gt;make&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;The following demo shows how to install and use &lt;code&gt;mise&lt;/code&gt; to manage multiple versions of &lt;code&gt;node&lt;/code&gt; on the same system. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; 
&lt;p&gt;It also shows that you can use &lt;code&gt;mise&lt;/code&gt; to install and many other tools such as &lt;code&gt;jq&lt;/code&gt;, &lt;code&gt;terraform&lt;/code&gt;, or &lt;code&gt;go&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://mise.jdx.dev/demo.html"&gt;&lt;img src="https://raw.githubusercontent.com/jdx/mise/main/docs/tapes/demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/demo.html"&gt;demo transcript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Install mise&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/getting-started.html"&gt;Getting started&lt;/a&gt; for more options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ curl https://mise.run | sh
$ ~/.local/bin/mise --version
2025.8.1 macos-arm64 (a1b2d3e 2025-08-01)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;# note this assumes mise is located at ~/.local/bin/mise
# which is what https://mise.run does by default
echo 'eval "$(~/.local/bin/mise activate bash)"' &amp;gt;&amp;gt; ~/.bashrc
echo 'eval "$(~/.local/bin/mise activate zsh)"' &amp;gt;&amp;gt; ~/.zshrc
echo '~/.local/bin/mise activate fish | source' &amp;gt;&amp;gt; ~/.config/fish/config.fish
echo '~/.local/bin/mise activate pwsh | Out-String | Invoke-Expression' &amp;gt;&amp;gt; ~/.config/powershell/Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Execute commands with specific tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise exec node@22 -- node -v
mise node@22.x.x ✓ installed
v22.x.x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise use --global node@22 go@1
$ node -v
v22.x.x
$ go version
go version go1.x.x macos/arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h3&gt;Manage environment variables&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[env]
SOME_VAR = "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise set SOME_VAR=bar
$ echo $SOME_VAR
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;mise&lt;/code&gt; can also &lt;a href="https://mise.jdx.dev/environments/#env-directives"&gt;load &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Run tasks&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tasks.build]
description = "build the project"
run = "echo building..."
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise run build
building...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Example mise project&lt;/h3&gt; 
&lt;p&gt;Here is a combined example to give you an idea of how you can use mise to manage your a project's tools, environment, and tasks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tools]
terraform = "1"
aws-cli = "2"

[env]
TF_WORKSPACE = "development"
AWS_REGION = "us-west-2"
AWS_PROFILE = "dev"

[tasks.plan]
description = "Run terraform plan with configured workspace"
run = """
terraform init
terraform workspace select $TF_WORKSPACE
terraform plan
"""

[tasks.validate]
description = "Validate AWS credentials and terraform config"
run = """
aws sts get-caller-identity
terraform validate
"""

[tasks.deploy]
description = "Deploy infrastructure after validation"
depends = ["validate", "plan"]
run = "terraform apply -auto-approve"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;mise install # install tools specified in mise.toml
mise run deploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Find more examples in the &lt;a href="https://mise.jdx.dev/mise-cookbook/"&gt;mise cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Full Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev"&gt;mise.jdx.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;We're grateful for Cloudflare's support us through &lt;a href="https://www.cloudflare.com/lp/project-alexandria/"&gt;Project Alexandria&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/jdx/mise/graphs/contributors"&gt;&lt;img src="https://contrib.rocks/image?repo=jdx/mise" alt="Contributors"&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lapce/lapce</title>
      <link>https://github.com/lapce/lapce</link>
      <description>&lt;p&gt;Lightning-fast and Powerful Code Editor written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;a href="https://lapce.dev" target="_blank"&gt; &lt;img src="https://raw.githubusercontent.com/lapce/lapce/master/extra/images/logo.png" width="200" height="200/"&gt;&lt;br&gt; Lapce &lt;/a&gt; &lt;/h1&gt; 
&lt;h4 align="center"&gt;Lightning-fast And Powerful Code Editor&lt;/h4&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://github.com/lapce/lapce/actions/workflows/ci.yml" target="_blank"&gt; &lt;img src="https://github.com/lapce/lapce/actions/workflows/ci.yml/badge.svg?sanitize=true"&gt; &lt;/a&gt; 
 &lt;a href="https://discord.gg/n8tGJ6Rn6D" target="_blank"&gt; &lt;img src="https://img.shields.io/discord/946858761413328946?logo=discord"&gt; &lt;/a&gt; 
 &lt;a href="https://docs.lapce.dev" target="_blank"&gt; &lt;img src="https://img.shields.io/static/v1?label=Docs&amp;amp;message=docs.lapce.dev&amp;amp;color=blue" alt="Lapce Docs"&gt; &lt;/a&gt; 
 &lt;a href="https://wiki.mutable.ai/lapce/lapce" target="_blank"&gt; &lt;img src="https://img.shields.io/static/v1?label=Code%20Wiki&amp;amp;message=Mutable.ai&amp;amp;color=blue" alt="Mutable.ai Auto Wiki"&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;Lapce (IPA: /læps/) is written in pure Rust, with a UI in &lt;a href="https://github.com/lapce/floem"&gt;Floem&lt;/a&gt;. It is designed with &lt;a href="https://xi-editor.io/docs/rope_science_00.html"&gt;Rope Science&lt;/a&gt; from the &lt;a href="https://github.com/xi-editor/xi-editor"&gt;Xi-Editor&lt;/a&gt;, enabling lightning-fast computation, and leverages &lt;a href="https://github.com/gfx-rs/wgpu"&gt;wgpu&lt;/a&gt; for rendering. More information about the features of Lapce can be found on the &lt;a href="https://lapce.dev"&gt;main website&lt;/a&gt; and user documentation can be found on &lt;a href="https://docs.lapce.dev/"&gt;GitBook&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/lapce/lapce/raw/master/extra/images/screenshot.png?raw=true" alt=""&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built-in LSP (&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol&lt;/a&gt;) support to give you intelligent code features such as: completion, diagnostics and code actions&lt;/li&gt; 
 &lt;li&gt;Modal editing support as first class citizen (Vim-like, and toggleable)&lt;/li&gt; 
 &lt;li&gt;Built-in remote development support inspired by &lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;VSCode Remote Development&lt;/a&gt;. Enjoy the benefits of a "local" experience, and seamlessly gain the full power of a remote system. We also have &lt;a href="https://lap.dev/"&gt;Lapdev&lt;/a&gt; which can help manage your remote dev environments.&lt;/li&gt; 
 &lt;li&gt;Plugins can be written in programming languages that can compile to the &lt;a href="https://wasi.dev/"&gt;WASI&lt;/a&gt; format (C, Rust, &lt;a href="https://www.assemblyscript.org/"&gt;AssemblyScript&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Built-in terminal, so you can execute commands in your workspace, without leaving Lapce.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;You can find pre-built releases for Windows, Linux and macOS &lt;a href="https://github.com/lapce/lapce/releases"&gt;here&lt;/a&gt;, or &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/docs/installing-with-package-manager.md"&gt;installing with a package manager&lt;/a&gt;. If you'd like to compile from source, you can find the &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/docs/building-from-source.md"&gt;guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;a href="https://ws.lap.dev/#https://github.com/lapce/lapce" target="_blank"&gt; &lt;img src="https://lap.dev/images/open-in-lapdev.svg?version=8" alt="Open in Lapdev"&gt; &lt;/a&gt; 
&lt;p&gt;&lt;a href="https://lap.dev/"&gt;Lapdev&lt;/a&gt;, developed by the Lapce team, is a cloud dev env service similar to GitHub Codespaces. By clicking the button above, you'll be taken to a fully set up Lapce dev env where you can browse the code and start developing. All dependencies are pre-installed, so you can get straight to code.&lt;/p&gt; 
&lt;p&gt;Guidelines for contributing to Lapce can be found in &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/CONTRIBUTING.md"&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback &amp;amp; Contact&lt;/h2&gt; 
&lt;p&gt;The most popular place for Lapce developers and users is on the &lt;a href="https://discord.gg/n8tGJ6Rn6D"&gt;Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Or, join the discussion on &lt;a href="https://www.reddit.com/r/lapce/"&gt;Reddit&lt;/a&gt; where we are just getting started.&lt;/p&gt; 
&lt;p&gt;There is also a &lt;a href="https://matrix.to/#/%23lapce-editor:matrix.org"&gt;Matrix Space&lt;/a&gt;, which is linked to the content from the Discord server.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Lapce is released under the Apache License Version 2, which is an open source license. You may contribute to this project, or use the code as you please as long as you adhere to its conditions. You can find a copy of the license text here: &lt;a href="https://raw.githubusercontent.com/lapce/lapce/master/LICENSE"&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>get-convex/convex-backend</title>
      <link>https://github.com/get-convex/convex-backend</link>
      <description>&lt;p&gt;The open-source reactive database for app developers&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://static.convex.dev/logo/convex-logo-light.svg" width="600"&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://static.convex.dev/logo/convex-logo.svg" width="600"&gt; 
  &lt;img alt="Convex logo" src="https://static.convex.dev/logo/convex-logo.svg?sanitize=true" width="600"&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://convex.dev"&gt;Convex&lt;/a&gt; is the open-source reactive database designed to make life easy for web app developers, whether human or LLM. Fetch data and perform business logic with strong consistency by writing pure TypeScript.&lt;/p&gt; 
&lt;p&gt;Convex provides a database, a place to write your server functions, and client libraries. It makes it easy to build and scale dynamic live-updating apps. &lt;a href="https://docs.convex.dev/understanding/"&gt;Read the docs to learn more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Development of the Convex backend is led by the Convex team. We &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/CONTRIBUTING.md"&gt;welcome bug fixes&lt;/a&gt; and &lt;a href="https://discord.gg/convex"&gt;love receiving feedback&lt;/a&gt;. We keep this repository synced with any internal development work within a handful of days.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit our &lt;a href="https://docs.convex.dev/"&gt;documentation&lt;/a&gt; to learn more about Convex and follow our getting started guides.&lt;/p&gt; 
&lt;p&gt;The easiest way to build with Convex is through our &lt;a href="https://www.convex.dev/plans"&gt;cloud platform&lt;/a&gt;, which includes a generous free tier and lets you focus on building your application without worrying about infrastructure. Many small applications and side-projects can operate entirely on the free tier with zero cost and zero maintenance.&lt;/p&gt; 
&lt;h2&gt;Self Hosting&lt;/h2&gt; 
&lt;p&gt;The self-hosted product includes most features of the cloud product, including the dashboard and CLI. Self-hosted Convex works well with a variety of tools including Neon, Fly.io, Vercel, Netlify, RDS, Sqlite, Postgres, and more.&lt;/p&gt; 
&lt;p&gt;You can either use Docker (recommended) or a prebuilt binary to self host Convex. Check out our &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/self-hosted/README.md"&gt;self-hosting guide&lt;/a&gt; for detailed instructions. Community support for self-hosting is available in the &lt;code&gt;#self-hosted&lt;/code&gt; channel on &lt;a href="https://discord.gg/convex"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community &amp;amp; Support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join our &lt;a href="https://discord.gg/convex"&gt;Discord community&lt;/a&gt; for help and discussions.&lt;/li&gt; 
 &lt;li&gt;Report issues when building and using the open source Convex backend through &lt;a href="https://github.com/get-convex/convex-backend/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building from source&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/BUILD.md"&gt;BUILD.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Disclaimers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you choose to self-host, we recommend following the self-hosting guide. If you are instead building from source, make sure to change your instance secret and admin key from the defaults in the repo.&lt;/li&gt; 
 &lt;li&gt;Convex is battle tested most thoroughly on Linux and Mac. On Windows, it has less experience. If you run into issues, please message us on &lt;a href="https://convex.dev/community"&gt;Discord&lt;/a&gt; in the &lt;code&gt;#self-hosted&lt;/code&gt; channel.&lt;/li&gt; 
 &lt;li&gt;Convex self-hosted builds contain a beacon to help Convex improve the product. The information is minimal and anonymous and helpful to Convex, but if you really want to disable it, you can set the &lt;code&gt;--disable-beacon&lt;/code&gt; flag on the backend binary. The beacon's messages print in the log and only include 
  &lt;ul&gt; 
   &lt;li&gt;A random identifier for your deployment (not used elsewhere)&lt;/li&gt; 
   &lt;li&gt;Migration version of your database&lt;/li&gt; 
   &lt;li&gt;Git rev of the backend&lt;/li&gt; 
   &lt;li&gt;Uptime of the backend&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Repository layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;crates/&lt;/code&gt; contains Rust code&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Main binary 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;local_backend/&lt;/code&gt; is an application server on top of the &lt;code&gt;Runtime&lt;/code&gt;. This is the serving edge for the Convex cloud.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;npm-packages/&lt;/code&gt; contains both our public and internal TypeScript packages.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Internal packages 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;udf-runtime/&lt;/code&gt; sets up the user-defined functions JS environment for queries and mutations&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;udf-tests/&lt;/code&gt; is a collection of functions used in testing the isolate layer&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;system-udfs/&lt;/code&gt; contains functions used by the Convex system e.g. the CLI&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>aws/amazon-q-developer-cli</title>
      <link>https://github.com/aws/amazon-q-developer-cli</link>
      <description>&lt;p&gt;✨ Agentic chat experience in your terminal. Build applications using natural language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amazon Q CLI&lt;/h1&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;DMG&lt;/strong&gt;: &lt;a href="https://desktop-release.q.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg"&gt;Download now&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-ubuntu"&gt;Ubuntu/Debian&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-appimage"&gt;AppImage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html#command-line-installing-alternative-linux"&gt;Alternative Linux builds&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you so much for considering to contribute to Amazon Q.&lt;/p&gt; 
&lt;p&gt;Before getting started, see our &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/CONTRIBUTING.md#security-issue-notifications"&gt;contributing docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Prerequisites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;MacOS 
  &lt;ul&gt; 
   &lt;li&gt;Xcode 13 or later&lt;/li&gt; 
   &lt;li&gt;Brew&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1. Clone repo&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/aws/amazon-q-developer-cli.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. Install the Rust toolchain using &lt;a href="https://rustup.rs"&gt;Rustup&lt;/a&gt;:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
rustup default stable
rustup toolchain install nightly
cargo install typos-cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. Develop locally&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;To compile and run: &lt;code&gt;cargo run --bin chat_cli&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run tests: &lt;code&gt;cargo test&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run lints: &lt;code&gt;cargo clippy&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To format rust files: &lt;code&gt;cargo +nightly fmt&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;To run subcommands: &lt;code&gt;cargo run --bin chat_cli -- {subcommand}&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Login would then be: &lt;code&gt;cargo run --bin chat_cli -- login&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/chat_cli/"&gt;&lt;code&gt;chat_cli&lt;/code&gt;&lt;/a&gt; - the &lt;code&gt;q&lt;/code&gt; CLI, allows users to interface with Amazon Q Developer from the command line&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/scripts/"&gt;&lt;code&gt;scripts/&lt;/code&gt;&lt;/a&gt; - Contains ops and build related scripts&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/crates/"&gt;&lt;code&gt;crates/&lt;/code&gt;&lt;/a&gt; - Contains all rust crates&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/docs/"&gt;&lt;code&gt;docs/&lt;/code&gt;&lt;/a&gt; - Contains technical documentation&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;For security related concerns, see &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/SECURITY.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;This repo is dual licensed under MIT and Apache 2.0 licenses.&lt;/p&gt; 
&lt;p&gt;Those licenses can be found &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/LICENSE.MIT"&gt;here&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/aws/amazon-q-developer-cli/main/LICENSE.APACHE"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;“Amazon Web Services” and all related marks, including logos, graphic designs, and service names, are trademarks or trade dress of AWS in the U.S. and other countries. AWS’s trademarks and trade dress may not be used in connection with any product or service that is not AWS’s, in any manner that is likely to cause confusion among customers, or in any manner that disparages or discredits AWS.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>