<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Fri, 29 Aug 2025 01:37:59 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>openai/codex</title>
      <link>https://github.com/openai/codex</link>
      <description>&lt;p&gt;Lightweight coding agent that runs in your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;OpenAI Codex CLI&lt;/h1&gt; 
&lt;p align="center"&gt;&lt;code&gt;npm i -g @openai/codex&lt;/code&gt;&lt;br /&gt;or &lt;code&gt;brew install codex&lt;/code&gt;&lt;/p&gt; 
&lt;p align="center"&gt;&lt;strong&gt;Codex CLI&lt;/strong&gt; is a coding agent from OpenAI that runs locally on your computer.&lt;br /&gt;If you are looking for the &lt;em&gt;cloud-based agent&lt;/em&gt; from OpenAI, &lt;strong&gt;Codex Web&lt;/strong&gt;, see &lt;a href="https://chatgpt.com/codex"&gt;chatgpt.com/codex&lt;/a&gt;.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-splash.png" alt="Codex CLI splash" width="80%" /&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Installing and running Codex CLI&lt;/h3&gt; 
&lt;p&gt;Install globally with your preferred package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;npm install -g @openai/codex  # Alternatively: `brew install codex`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then simply run &lt;code&gt;codex&lt;/code&gt; to get started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;codex
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;You can also go to the &lt;a href="https://github.com/openai/codex/releases/latest"&gt;latest GitHub Release&lt;/a&gt; and download the appropriate binary for your platform.&lt;/summary&gt; 
 &lt;p&gt;Each GitHub Release contains many executables, but in practice, you likely want one of these:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;macOS 
   &lt;ul&gt; 
    &lt;li&gt;Apple Silicon/arm64: &lt;code&gt;codex-aarch64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;x86_64 (older Mac hardware): &lt;code&gt;codex-x86_64-apple-darwin.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Linux 
   &lt;ul&gt; 
    &lt;li&gt;x86_64: &lt;code&gt;codex-x86_64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
    &lt;li&gt;arm64: &lt;code&gt;codex-aarch64-unknown-linux-musl.tar.gz&lt;/code&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Each archive contains a single entry with the platform baked into the name (e.g., &lt;code&gt;codex-x86_64-unknown-linux-musl&lt;/code&gt;), so you likely want to rename it to &lt;code&gt;codex&lt;/code&gt; after extracting it.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Using Codex with your ChatGPT plan&lt;/h3&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/openai/codex/main/.github/codex-cli-login.png" alt="Codex CLI login" width="80%" /&gt; &lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;codex&lt;/code&gt; and select &lt;strong&gt;Sign in with ChatGPT&lt;/strong&gt;. We recommend signing into your ChatGPT account to use Codex as part of your Plus, Pro, Team, Edu, or Enterprise plan. &lt;a href="https://help.openai.com/en/articles/11369540-codex-in-chatgpt"&gt;Learn more about what's included in your ChatGPT plan&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can also use Codex with an API key, but this requires &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#usage-based-billing-alternative-use-an-openai-api-key"&gt;additional setup&lt;/a&gt;. If you previously used an API key for usage-based billing, see the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#migrating-from-usage-based-billing-api-key"&gt;migration steps&lt;/a&gt;. If you're having trouble with login, please comment on &lt;a href="https://github.com/openai/codex/issues/1243"&gt;this issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Model Context Protocol (MCP)&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;MCP servers&lt;/a&gt;. Enable by adding an &lt;code&gt;mcp_servers&lt;/code&gt; section to your &lt;code&gt;~/.codex/config.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;Codex CLI supports a rich set of configuration options, with preferences stored in &lt;code&gt;~/.codex/config.toml&lt;/code&gt;. For full configuration options, see &lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Docs &amp;amp; FAQ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md"&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#cli-usage"&gt;CLI usage&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#running-with-a-prompt-as-input"&gt;Running with a prompt as input&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#example-prompts"&gt;Example prompts&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/getting-started.md#memory--project-docs"&gt;Memory with AGENTS.md&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/config.md"&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/sandbox.md"&gt;&lt;strong&gt;Sandbox &amp;amp; approvals&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md"&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#forcing-a-specific-auth-method-advanced"&gt;Auth methods&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/authentication.md#connecting-on-a-headless-machine"&gt;Login on a "Headless" machine&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md"&gt;&lt;strong&gt;Advanced&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#non-interactive--ci-mode"&gt;Non-interactive / CI mode&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#tracing--verbose-logging"&gt;Tracing / verbose logging&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/advanced.md#model-context-protocol-mcp"&gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/zdr.md"&gt;&lt;strong&gt;Zero data retention (ZDR)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/contributing.md"&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md"&gt;&lt;strong&gt;Install &amp;amp; build&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#system-requirements"&gt;System Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#dotslash"&gt;DotSlash&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/install.md#build-from-source"&gt;Build from source&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/faq.md"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/openai/codex/main/docs/open-source-fund.md"&gt;&lt;strong&gt;Open source fund&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This repository is licensed under the &lt;a href="https://raw.githubusercontent.com/openai/codex/main/LICENSE"&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hyperium/hyper</title>
      <link>https://github.com/hyperium/hyper</link>
      <description>&lt;p&gt;An HTTP library for Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://hyper.rs"&gt;hyper&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/hyper"&gt;&lt;img src="https://img.shields.io/crates/v/hyper.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/hyper"&gt;&lt;img src="https://docs.rs/hyper/badge.svg?sanitize=true" alt="Released API docs" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/hyperium/hyper/master/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/hyperium/hyper/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/hyperium/hyper/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/kkwpueZ"&gt;&lt;img src="https://img.shields.io/discord/500028886025895936.svg?logo=discord" alt="Discord chat" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A protective and efficient HTTP library for all.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;HTTP/1 and HTTP/2&lt;/li&gt; 
 &lt;li&gt;Asynchronous design&lt;/li&gt; 
 &lt;li&gt;Leading in performance&lt;/li&gt; 
 &lt;li&gt;Tested and &lt;strong&gt;correct&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Extensive production use&lt;/li&gt; 
 &lt;li&gt;Client and Server APIs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Get started&lt;/strong&gt; by looking over the &lt;a href="https://hyper.rs/guides/1/"&gt;guides&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;"Low-level"&lt;/h2&gt; 
&lt;p&gt;hyper is a relatively low-level library, meant to be a building block for libraries and applications.&lt;/p&gt; 
&lt;p&gt;If you are looking for a convenient HTTP client, then you may wish to consider &lt;a href="https://github.com/seanmonstar/reqwest"&gt;reqwest&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are not sure what HTTP server to choose, then you may want to consider &lt;a href="https://github.com/tokio-rs/axum"&gt;axum&lt;/a&gt; or &lt;a href="https://github.com/seanmonstar/warp"&gt;warp&lt;/a&gt;, the latter taking a more functional approach. Both are built on top of this library.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To get involved, take a look at &lt;a href="https://raw.githubusercontent.com/hyperium/hyper/master/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you prefer chatting, there is an active community in the &lt;a href="https://discord.gg/kkwpueZ"&gt;Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;hyper is provided under the MIT license. See &lt;a href="https://raw.githubusercontent.com/hyperium/hyper/master/LICENSE"&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>eythaann/Seelen-UI</title>
      <link>https://github.com/eythaann/Seelen-UI</link>
      <description>&lt;p&gt;The Fully Customizable Desktop Environment for Windows 10/11.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt; &lt;img src="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/images/logo.svg?sanitize=true" width="44" align="top" alt="Seelen UI Logo" /&gt; Seelen UI &lt;/h1&gt; 
&lt;h2 align="center"&gt; Fully Customizable Desktop Environment for Windows &lt;br /&gt; Available in 70+ Languages &lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://github.com/eythaann/seelen-ui/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/eythaann/seelen-ui.svg?sanitize=true" alt="Contributors" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eythaann/seelen-ui/commits/main"&gt;&lt;img src="https://img.shields.io/github/last-commit/eythaann/seelen-ui.svg?sanitize=true" alt="Last Commit" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eythaann/seelen-ui/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/eythaann/seelen-ui.svg?sanitize=true" alt="Version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/eythaann/seelen-ui/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/eythaann/seelen-ui/total.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;img src="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/images/preview.png" width="100%" alt="Screenshot of Seelen UI desktop showing a customized desktop environment" /&gt; 
&lt;table align="center"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align="center" width="33%"&gt; &lt;a href="https://apps.microsoft.com/detail/Seelen%20UI/9p67c2d4t9fb?mode=full" target="_blank" rel="noopener noreferrer" aria-label="Download Seelen UI from Microsoft Store"&gt; &lt;img src="https://get.microsoft.com/images/en-us%20dark.svg?sanitize=true" width="100%" alt="Download Seelen UI from Microsoft Store" /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" width="33%"&gt; &lt;a href="https://discord.gg/ABfASx5ZAJ" target="_blank" rel="noopener noreferrer" aria-label="Join the Seelen UI Discord community"&gt; &lt;img src="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/images/discord-alt.png" width="100%" alt="Join the Seelen UI Discord community" /&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align="center" width="33%"&gt; &lt;a href="https://www.digitalocean.com/?refcode=955c7335abf5&amp;amp;utm_campaign=Referral_Invite&amp;amp;utm_medium=Referral_Program&amp;amp;utm_source=badge" target="_blank" rel="noopener noreferrer" aria-label="DigitalOcean Referral Badge"&gt; &lt;img src="https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg?sanitize=true" width="100%" alt="DigitalOcean Referral Badge" /&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://seelen.io/apps/seelen-ui"&gt;Seelen UI&lt;/a&gt; is a tool designed to enhance your Windows desktop experience with a focus on customization and productivity. It integrates smoothly into your system, providing a range of features that allow you to personalize your desktop and optimize your workflow.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Be Creative&lt;/strong&gt;: Seelen UI lets you tailor your desktop to fit your style and needs. You can adjust menus, widgets, icons, and other elements to create a personalized and visually appealing desktop environment.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/images/theme_preview.png" alt="Seelen UI Custom Theme" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enhance Your Productivity&lt;/strong&gt;: Seelen UI helps you organize your desktop efficiently. With a Tiling Windows Manager, windows automatically arrange themselves to support multitasking, making your work more streamlined.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/images/twm_preview.png" alt="Seelen UI Tiling Window Manager" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enjoy your music&lt;/strong&gt;: With an integrated media module that's compatible with most music players, Seelen UI allows you to enjoy your music seamlessly. You can pause, resume, and skip tracks at any time without the need to open additional windows.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/images/media_module_preview.png" alt="Seelen UI Media Module" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Be faster!&lt;/strong&gt;: With an app launcher inspired by Rofi, Seelen UI provides a simple and intuitive way to quickly access your applications and execute commands.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/images/app_launcher_preview.png" alt="Seelen UI App Launcher" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;User-Friendly Configuration&lt;/strong&gt;: Seelen UI offers an intuitive interface for easy customization. Adjust settings such as themes, taskbar layouts, icons, etc. With just a few clicks.&lt;/p&gt; &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/images/settings_preview.png" alt="Seelen UI Settings" /&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!CAUTION] Seelen UI requires the WebView runtime to be installed. On Windows 11, it comes pre-installed with the system. However, on Windows 10, the WebView runtime is included with the &lt;code&gt;setup.exe&lt;/code&gt; installer. Additionally, Microsoft Edge is necessary to function correctly. Some users may have modified their system and removed Edge, so please ensure both Edge and the WebView runtime are installed on your system.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] On fresh installations of Windows, the app might show a white or dark screen. You only need to update your Windows through Windows Update and restart your PC.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can choose from different installation options based on your preference:&lt;/p&gt; 
&lt;h3&gt;Microsoft Store &lt;em&gt;(recommended)&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Download the latest version from the &lt;a href="https://www.microsoft.com/store/productId/9P67C2D4T9FB?ocid=pdpshare"&gt;Store&lt;/a&gt; page. This is the recommended option because you will receive updates and a secure version of the program.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt;: It may take around 1 to 3 business days for changes to be reflected in the Microsoft Store, as updates are approved by real people in the store.&lt;/p&gt; 
&lt;h3&gt;Winget&lt;/h3&gt; 
&lt;p&gt;Install the latest version using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-pwsh"&gt;winget install --id Seelen.SeelenUI
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This option also uses the signed &lt;code&gt;.msix&lt;/code&gt; package and ensures you have the latest secure version. Similar to the Microsoft Store, it may take around 1 to 3 business days for changes to be reflected in Winget, as updates are approved by real people in the &lt;code&gt;winget-pkg&lt;/code&gt; project.&lt;/p&gt; 
&lt;h3&gt;.msix Installer&lt;/h3&gt; 
&lt;p&gt;Download the &lt;code&gt;.msix&lt;/code&gt; installer from the &lt;a href="https://github.com/eythaann/seelen-ui/releases"&gt;Releases&lt;/a&gt; page. This package is signed, ensuring a secure installation. This is the same option as the Microsoft Store but is a portable installer.&lt;/p&gt; 
&lt;h3&gt;.exe Installer&lt;/h3&gt; 
&lt;p&gt;Download the latest version from the &lt;a href="https://github.com/eythaann/seelen-ui/releases"&gt;Releases&lt;/a&gt; page and run the &lt;code&gt;setup.exe&lt;/code&gt; installer. This option is less recommended as the installer is not signed, which may cause it to be flagged as a potential threat by some antivirus programs. The &lt;code&gt;setup.exe&lt;/code&gt; is updated more quickly than the Microsoft Store or Winget versions and also it receives notifications updates on new release.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Once installed or extracted, simply open the program. The easy-to-use and intuitive GUI will guide you through the configuration process. Customize your desktop environment effortlessly.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For in-depth details on various aspects of Seelen UI, explore the following documents:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/languages.md"&gt;Languages&lt;/a&gt; - Information regarding translations.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/toolbar.md"&gt;Toolbar&lt;/a&gt; - Details about customizing and using the toolbar.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://seelen.io/blog/seelen-ui-theme-tutorial"&gt;Themes&lt;/a&gt; - Guidance on creating and applying themes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/window_manager.md"&gt;Window Manager&lt;/a&gt; - Instructions on configuring the window manager.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/project.md"&gt;Project&lt;/a&gt; - General information about the project and its structure.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Upcoming Features&lt;/h2&gt; 
&lt;p&gt;I’m excited to share some upcoming features for Seelen UI! Here’s a glimpse of what’s planned for the future:&lt;/p&gt; 
&lt;h3&gt;&lt;del&gt;App Launcher&lt;/del&gt; ✅&lt;/h3&gt; 
&lt;p&gt;I’m planning to develop an app launcher inspired by &lt;a href="https://github.com/davatorium/rofi"&gt;Rofi&lt;/a&gt; on Linux. This feature will provide a sleek and highly customizable way to quickly access your applications.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/adi1090x/files/master/rofi/previews/colorful/main.gif" alt="App Launcher Preview" /&gt; &lt;em&gt;Image courtesy of &lt;a href="https://github.com/dctxmei/rofi-themes"&gt;rofi-themes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Customizable Popup Widgets&lt;/h3&gt; 
&lt;p&gt;I aim to introduce a set of fully customizable popup widgets, similar to the features available in &lt;a href="https://github.com/elkowar/eww"&gt;EWW&lt;/a&gt;. These widgets will be highly configurable and adaptable to your needs, providing an enhanced and interactive way to manage your desktop environment.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/adi1090x/widgets/main/previews/dashboard.png" alt="Customizable Widgets Preview" /&gt; &lt;em&gt;Image courtesy of &lt;a href="https://github.com/adi1090x/widgets"&gt;adi1090x&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Custom Alt + Tab (Task Switching)&lt;/h3&gt; 
&lt;p&gt;An upgraded Alt + Tab system for task switching is on the horizon. This will offer a more visually appealing and functional experience, allowing for smoother transitions between open applications and windows.&lt;/p&gt; 
&lt;h3&gt;Custom Virtual Desktops Viewer and Animations&lt;/h3&gt; 
&lt;p&gt;I’m also working on a custom virtual desktops viewer and dynamic animations to improve navigation between different workspaces. This will provide a more intuitive and immersive multitasking experience.&lt;/p&gt; 
&lt;p&gt;Stay tuned for more updates as I develop these features. I appreciate your support and enthusiasm!&lt;/p&gt; 
&lt;p&gt;Happy customizing!&lt;/p&gt; 
&lt;p&gt;The Seelen UI Team&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributions!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read the &lt;a href="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/CONTRIBUTING"&gt;Contribution Guidelines&lt;/a&gt; to get started with terms.&lt;/li&gt; 
 &lt;li&gt;Read the &lt;a href="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/documentation/project.md"&gt;Project Documentation&lt;/a&gt; to understand the project structure and how to use it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/eythaann/Seelen-UI/master/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;For inquiries and support, please contact me on &lt;a href="https://discord.gg/ABfASx5ZAJ"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;See you later&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;                   .      .&amp;amp;     _,x&amp;amp;"``
                    &amp;amp; .   &amp;amp;'  ;.&amp;amp;&amp;amp;'
              &amp;amp;.  . &amp;amp;.&amp;amp;     .0&amp;amp;&amp;amp;&amp;amp;;&amp;amp;""`
         .    '&amp;amp;  &amp;amp;.&amp;amp;&amp;amp;&amp;amp;  .&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;'
       .&amp;amp;         ;&amp;amp;&amp;amp;&amp;amp; &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;'
      &amp;amp;&amp;amp;          &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;     &amp;amp;&amp;amp;&amp;amp;
     0&amp;amp;    .     &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;""
    &amp;amp;&amp;amp;   .0     &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;
   0&amp;amp;&amp;amp; .&amp;amp;'     &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;
  :&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;    . &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp; 
  0&amp;amp;&amp;amp;&amp;amp;&amp;amp;    &amp;amp; &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;
  &amp;amp;&amp;amp;&amp;amp;&amp;amp;'   &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;               .&amp;amp;&amp;amp;&amp;amp;x&amp;amp;
  &amp;amp;&amp;amp;&amp;amp;&amp;amp;   :&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0.&amp;amp;'        , .&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;;.
  &amp;amp;&amp;amp;&amp;amp;&amp;amp;.  &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;        .&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;'               .
  0&amp;amp;&amp;amp;&amp;amp;&amp;amp;  &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;       ,&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;                &amp;amp;
  :&amp;amp;&amp;amp;&amp;amp;&amp;amp;; &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0       ,;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;             ;  .0
   0&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0     ,;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;             &amp;amp;  &amp;amp;;
    0&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0   :',;".&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;".&amp;amp;             &amp;amp;&amp;amp; &amp;amp;0
     0&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0  ',;',&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;" ,&amp;amp;'             &amp;amp;&amp;amp;&amp;amp;&amp;amp;0
      0&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0 ,x&amp;amp;&amp;amp;&amp;amp;&amp;amp;" .&amp;amp;&amp;amp;&amp;amp;              &amp;amp;&amp;amp;&amp;amp;&amp;amp;0
        0&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp; .&amp;amp;&amp;amp;&amp;amp;&amp;amp;"'''"&amp;amp;&amp;amp;"&amp;amp;&amp;amp;            &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0
         0&amp;amp;&amp;amp; .&amp;amp;&amp;amp;;``       `&amp;amp;: :&amp;amp;         &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0
            &amp;amp;"' &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;   &amp;amp;"&amp;amp; &amp;amp;"&amp;amp;   &amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0
              0&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0
                 0&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0         Seelen
                      0&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;0
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;p&gt;📌 &lt;strong&gt;Official Website&lt;/strong&gt;: &lt;a href="https://seelen.io"&gt;https://seelen.io&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Seelen Inc © 2025 - All rights reserved&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitbutlerapp/gitbutler</title>
      <link>https://github.com/gitbutlerapp/gitbutler</link>
      <description>&lt;p&gt;The GitButler version control client, backed by Git, powered by Tauri/Rust/Svelte&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img align="center" width="128px" src="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/crates/gitbutler-tauri/icons/128x128@2x.png" /&gt; 
 &lt;h1 align="center"&gt;&lt;b&gt;GitButler&lt;/b&gt;&lt;/h1&gt; 
 &lt;p align="center"&gt; Git branch management tool, built from the ground up for modern workflows &lt;br /&gt; &lt;a href="https://gitbutler.com"&gt;&lt;strong&gt;gitbutler.com »&lt;/strong&gt;&lt;/a&gt; &lt;br /&gt; &lt;br /&gt; &lt;b&gt;Download for &lt;/b&gt; macOS (&lt;a href="https://app.gitbutler.com/downloads/release/darwin/aarch64/dmg"&gt;Apple Silicon&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/darwin/x86_64/dmg"&gt;Intel&lt;/a&gt;) · Linux (&lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/gz"&gt;AppImage&lt;/a&gt; | &lt;a href="https://app.gitbutler.com/downloads/release/linux/x86_64/deb"&gt;deb&lt;/a&gt;) · Windows (&lt;a href="https://app.gitbutler.com/downloads/release/windows/x86_64/msi"&gt;msi&lt;/a&gt;) &lt;br /&gt; &lt;br /&gt; (Unstable Nightly releases can be found &lt;a href="https://app.gitbutler.com/downloads"&gt;here&lt;/a&gt;) &lt;/p&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/bf9bdb33-a979-47a0-b2b2-8fff5ea53afb" alt="gitbutler_client" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml"&gt;&lt;img src="https://github.com/gitbutlerapp/gitbutler/actions/workflows/push.yaml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=gitbutler"&gt;&lt;img src="https://img.shields.io/badge/Twitter-black?logo=x&amp;amp;logoColor=white" alt="TWEET" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;&lt;img src="https://img.shields.io/discord/1060193121130000425?label=Discord&amp;amp;color=5865F2" alt="DISCORD" /&gt;&lt;/a&gt; &lt;a href="https://www.instagram.com/gitbutler/"&gt;&lt;img src="https://img.shields.io/badge/Instagram-E4405F?logo=instagram&amp;amp;logoColor=white" alt="INSTA" /&gt;&lt;/a&gt; &lt;a href="https://www.youtube.com/@gitbutlerapp"&gt;&lt;img src="https://img.shields.io/youtube/channel/subscribers/UCEwkZIHGqsTGYvX8wgD0LoQ" alt="YOUTUBE" /&gt;&lt;/a&gt; &lt;a href="https://deepwiki.com/gitbutlerapp/gitbutler"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="DEEPWIKI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://repobeats.axiom.co/api/embed/fb23382bcf57c609832661874d3019a43555d6ae.svg?sanitize=true" alt="Alt" title="Repobeats analytics for GitButler" /&gt;&lt;/p&gt; 
&lt;p&gt;GitButler is a git client that lets you work on multiple branches at the same time. It allows you to quickly organize file changes into separate branches while still having them applied to your working directory. You can then push branches individually to your remote, or directly create pull requests.&lt;/p&gt; 
&lt;p&gt;In a nutshell, it's a more flexible version of &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git rebase -i&lt;/code&gt;, allowing you to efficiently multitask across branches.&lt;/p&gt; 
&lt;h2&gt;How Does It Work?&lt;/h2&gt; 
&lt;p&gt;GitButler keeps track of uncommitted changes in a layer on top of Git. Changes to files or parts of files can be grouped into what we call virtual branches. Whenever you are happy with the contents of a virtual branch, you can push it to a remote. GitButler makes sure that the state of other virtual branches is kept separate.&lt;/p&gt; 
&lt;h2&gt;How Do GB's Virtual Branches Differ From Git Branches?&lt;/h2&gt; 
&lt;p&gt;The branches that we know and love in Git are separate universes, and switching between them is a full context switch. GitButler allows you to work with multiple branches in parallel in the same working directory. This effectively means having the content of multiple branches available at the same time.&lt;/p&gt; 
&lt;p&gt;GitButler is aware of changes before they are committed. This allows it to keep a record of which virtual branch each individual diff belongs to. Effectively, this means that you can separate out individual branches with their content at any time to push them to a remote or to unapply them from your working directory.&lt;/p&gt; 
&lt;p&gt;And finally, while in Git it is preferable that you create your desired branch ahead of time, using GitButler you can move changes between virtual branches at any point during development.&lt;/p&gt; 
&lt;h2&gt;Why GitButler?&lt;/h2&gt; 
&lt;p&gt;We love Git. Our own &lt;a href="https://github.com/schacon"&gt;@schacon&lt;/a&gt; has even published the &lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git&lt;/a&gt; book. At the same time, Git's user interface hasn't been fundamentally changed for 15 years. While it was written for Linux kernel devs sending patches to each other over mailing lists, most developers today have different workflows and needs.&lt;/p&gt; 
&lt;p&gt;Instead of trying to fit the semantics of the Git CLI into a graphical interface, we are starting with the developer workflow and mapping it back to Git.&lt;/p&gt; 
&lt;h2&gt;Tech&lt;/h2&gt; 
&lt;p&gt;GitButler is a &lt;a href="https://tauri.app/"&gt;Tauri&lt;/a&gt;-based application. Its UI is written in &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; using &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; and its backend is written in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Main Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Virtual Branches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Organize work on multiple branches simultaneously, rather than constantly switching branches&lt;/li&gt; 
   &lt;li&gt;Automatically create new branches when needed&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy Commit Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Undo, Amend and Squash commits by dragging and dropping&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Undo Timeline&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Logs all operations and changes and allows you to easily undo or revert any operation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GitHub Integration&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Authenticate to GitHub to open Pull Requests, list branches and statuses and more&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Easy SSH Key Management&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;GitButler can generate an SSH key to upload to GitHub automatically&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Tooling&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically write commit messages based on your work in progress&lt;/li&gt; 
   &lt;li&gt;Automatically create descriptive branch names&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Commit Signing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Easy commit signing with GPG or SSH&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example Uses&lt;/h2&gt; 
&lt;h3&gt;Fixing a Bug While Working on a Feature&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say that while developing a feature, you encounter a bug that you wish to fix. It's often desirable that you ship the fix as a separate contribution (Pull request).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git you can stash your changes and switch to another branch, where you can commit, and push your fix.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;With GitButler&lt;/em&gt; you simply assign your fix to a separate virtual branch, which you can individually push (or directly create a PR). An additional benefit is that you can retain the fix in your working directory while waiting for CI and/or code review.&lt;/p&gt; 
&lt;h3&gt;Trying Someone Else's Branch Together With My Work in Progress&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Say you want to test a branch from someone else for the purpose of code review.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using Git trying out someone else's branch is a full context switch away from your own work. &lt;em&gt;With GitButler&lt;/em&gt; you can apply and unapply (add / remove) any remote branch directly into your working directory.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find our end user documentation at: &lt;a href="https://docs.gitbutler.com"&gt;https://docs.gitbutler.com&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Bugs and Feature Requests&lt;/h2&gt; 
&lt;p&gt;If you have a bug or feature request, feel free to open an &lt;a href="https://github.com/gitbutlerapp/gitbutler/issues/new"&gt;issue&lt;/a&gt;, or &lt;a href="https://discord.gg/MmFkmaJ42D"&gt;join our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;AI Commit Message Generation&lt;/h2&gt; 
&lt;p&gt;Commit message generation is an opt-in feature. You can enable it while adding your repository for the first time or later in the project settings.&lt;/p&gt; 
&lt;p&gt;Currently, GitButler uses OpenAI's API for diff summarization, which means that if enabled, code diffs would be sent to OpenAI's servers.&lt;/p&gt; 
&lt;p&gt;Our goal is to make this feature more modular such that in the future you can modify the prompt as well as plug a different LLM endpoints (including local ones).&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;So you want to help out? Please check out the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; document.&lt;/p&gt; 
&lt;p&gt;If you want to skip right to getting the code to actually compile, take a look at the &lt;a href="https://raw.githubusercontent.com/gitbutlerapp/gitbutler/master/DEVELOPMENT.md"&gt;DEVELOPMENT.md&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;Want to show your support? Add a GitButler badge to your project's README:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-md"&gt;[![GitButler](https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D)](https://gitbutler.com/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://gitbutler.com/"&gt;&lt;img src="https://img.shields.io/badge/GitButler-%23B9F4F2?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB3aWR0aD0iMzkiIGhlaWdodD0iMjgiIHZpZXdCb3g9IjAgMCAzOSAyOCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTI1LjIxNDUgMTIuMTk5N0wyLjg3MTA3IDEuMzg5MTJDMS41NDI5NSAwLjc0NjUzMiAwIDEuNzE0MDYgMCAzLjE4OTQ3VjI0LjgxMDVDMCAyNi4yODU5IDEuNTQyOTUgMjcuMjUzNSAyLjg3MTA3IDI2LjYxMDlMMjUuMjE0NSAxNS44MDAzQzI2LjcxOTcgMTUuMDcyMSAyNi43MTk3IDEyLjkyNzkgMjUuMjE0NSAxMi4xOTk3WiIgZmlsbD0iYmxhY2siLz4KPHBhdGggZD0iTTEzLjc4NTUgMTIuMTk5N0wzNi4xMjg5IDEuMzg5MTJDMzcuNDU3MSAwLjc0NjUzMiAzOSAxLjcxNDA2IDM5IDMuMTg5NDdWMjQuODEwNUMzOSAyNi4yODU5IDM3LjQ1NzEgMjcuMjUzNSAzNi4xMjg5IDI2LjYxMDlMMTMuNzg1NSAxNS44MDAzQzEyLjI4MDMgMTUuMDcyMSAxMi4yODAzIDEyLjkyNzkgMTMuNzg1NSAxMi4xOTk3WiIgZmlsbD0idXJsKCNwYWludDBfcmFkaWFsXzMxMF8xMjkpIi8%2BCjxkZWZzPgo8cmFkaWFsR3JhZGllbnQgaWQ9InBhaW50MF9yYWRpYWxfMzEwXzEyOSIgY3g9IjAiIGN5PSIwIiByPSIxIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgxNi41NzAxIDE0KSBzY2FsZSgxOS44NjQxIDE5LjgzODMpIj4KPHN0b3Agb2Zmc2V0PSIwLjMwMTA1NiIgc3RvcC1vcGFjaXR5PSIwIi8%2BCjxzdG9wIG9mZnNldD0iMSIvPgo8L3JhZGlhbEdyYWRpZW50Pgo8L2RlZnM%2BCjwvc3ZnPgo%3D" alt="BADGE" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BoundaryML/baml</title>
      <link>https://github.com/BoundaryML/baml</link>
      <description>&lt;p&gt;The AI framework that adds the engineering to prompt engineering (Python/TS/Ruby/Java/C#/Rust/Go compatible)&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;a href="https://boundaryml.com?utm_source=github" target="_blank" rel="noopener noreferrer"&gt; 
  &lt;picture&gt; 
   &lt;source media="(prefers-color-scheme: dark)" srcset="fern/assets/baml-lamb-white.png" /&gt; 
   &lt;img src="https://raw.githubusercontent.com/BoundaryML/baml/canary/fern/assets/baml-lamb-white.png" height="64" id="top" /&gt; 
  &lt;/picture&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;p&gt;&lt;a href="https://pypi.org/project/baml-py/"&gt;&lt;img src="https://img.shields.io/pypi/v/baml-py?color=006dad&amp;amp;label=BAML%20Version" alt="BAML Version" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;h2&gt;BAML: Basically a Made-up Language&lt;/h2&gt; 
 &lt;h4&gt; &lt;p&gt;&lt;a href="https://www.boundaryml.com/"&gt;Homepage&lt;/a&gt; | &lt;a href="https://docs.boundaryml.com"&gt;Docs&lt;/a&gt; | &lt;a href="https://www.boundaryml.com/chat"&gt;BAML AI Chat&lt;/a&gt; | &lt;a href="https://discord.gg/BTNBeXGuaS"&gt;Discord&lt;/a&gt;&lt;/p&gt; &lt;/h4&gt; 
&lt;/div&gt; 
&lt;p&gt;BAML is a simple prompting language for building reliable &lt;strong&gt;AI workflows and agents&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;BAML makes prompt engineering easy by turning it into &lt;em&gt;schema engineering&lt;/em&gt; -- where you mostly focus on the models of your prompt -- to get more reliable outputs. You don't need to write your whole app in BAML, only the prompts! You can wire-up your LLM Functions in any language of your choice! See our quickstarts for &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;Go, and more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;BAML comes with all batteries included -- with full typesafety, streaming, retries, wide model support, even when they don't support native &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#enable-reliable-tool-calling-with-any-model-even-when-they-dont-support-it"&gt;tool-calling APIs&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Try BAML&lt;/strong&gt;: &lt;a href="https://www.promptfiddle.com"&gt;Prompt Fiddle&lt;/a&gt; • &lt;a href="https://baml-examples.vercel.app/"&gt;Interactive App Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;The core BAML principle: LLM Prompts are functions&lt;/h2&gt; 
&lt;p&gt;The fundamental building block in BAML is a function. Every prompt is a function that takes in parameters and returns a type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; string
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every function additionally defines which models it uses and what its prompt is.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;function ChatAgent(message: Message[], tone: "happy" | "sad") -&amp;gt; StopTool | ReplyTool {
    client "openai/gpt-4o-mini"

    prompt #"
        Be a {{ tone }} bot.

        {{ ctx.output_format }}

        {% for m in message %}
        {{ _.role(m.role) }}
        {{ m.content }}
        {% endfor %}
    "#
}

class Message {
    role string
    content string
}

class ReplyTool {
  response string
}

class StopTool {
  action "stop" @description(#"
    when it might be a good time to end the conversation
  "#)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;BAML Functions can be called from any language&lt;/h2&gt; 
&lt;p&gt;Below we call the ChatAgent function we defined in BAML through Python. BAML's Rust compiler generates a "baml_client" to access and call them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;from baml_client import b
from baml_client.types import Message, StopTool

messages = [Message(role="assistant", content="How can I help?")]

while True:
  print(messages[-1].content)
  user_reply = input()
  messages.append(Message(role="user", content=user_reply))
  tool = b.ChatAgent(messages, "happy")
  if isinstance(tool, StopTool):
    print("Goodbye!")
    break
  else:
    messages.append(Message(role="assistant", content=tool.response))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can write any kind of agent or workflow using chained BAML functions. An agent is a while loop that calls a Chat BAML Function with some state.&lt;/p&gt; 
&lt;p&gt;And if you need to stream, add a couple more lines:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;stream = b.stream.ChatAgent(messages, "happy")
# partial is a Partial type with all Optional fields
for tool in stream:
    if isinstance(tool, StopTool):
      ...
    
final = stream.get_final_response()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And get fully type-safe outputs for each chunk in the stream.&lt;/p&gt; 
&lt;h2&gt;Test prompts 10x faster, right in your IDE&lt;/h2&gt; 
&lt;p&gt;BAML comes with native tooling for VSCode (jetbrains + neovim coming soon).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Visualize full prompt (including any multi-modal assets), and the API request&lt;/strong&gt;. BAML gives you full transparency and control of the prompt.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/c0b34db9-80cd-45a7-a356-6b5ab4a9c5b7" alt="raw-curl" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Using AI is all about iteration speed.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If testing your pipeline takes 2 minutes, you can only test 10 ideas in 20 minutes.&lt;/p&gt; 
&lt;p&gt;If you reduce it to 5 seconds, you can test 240 ideas in the same amount of time. &lt;img src="https://github.com/user-attachments/assets/6fc6b8a6-ffed-4cfc-80b8-78bc8a3d66a6" alt="resume-attempt2-smaller2" /&gt;&lt;/p&gt; 
&lt;p&gt;The playground also allows you to run tests in parallel -- for even faster iteration speeds 🚀.&lt;/p&gt; 
&lt;p&gt;No need to login to websites, and no need to manually define json schemas.&lt;/p&gt; 
&lt;h2&gt;Enable reliable tool-calling with any model&lt;/h2&gt; 
&lt;p&gt;BAML works even when the models don't support native tool-calling APIs. We created the SAP (schema-aligned parsing) algorithm to support the flexible outputs LLMs can provide, like markdown within a JSON blob or chain-of-thought prior to answering. &lt;a href="https://www.boundaryml.com/blog/schema-aligned-parsing"&gt;Read more about SAP&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;With BAML, your structured outputs work in Day-1 of a model release. No need to figure out whether a model supports parallel tool calls, or whether it supports recursive schemas, or &lt;code&gt;anyOf&lt;/code&gt; or &lt;code&gt;oneOf&lt;/code&gt; etc.&lt;/p&gt; 
&lt;p&gt;See it in action with: &lt;strong&gt;&lt;a href="https://www.boundaryml.com/blog/deepseek-r1-function-calling"&gt;Deepseek-R1&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://www.boundaryml.com/blog/openai-o1"&gt;OpenAI O1&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Switch from 100s of models in a couple lines&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt;function Extract() -&amp;gt; Resume {
+  client openai/o3-mini
  prompt #"
    ....
  "#
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/retry-policy"&gt;Retry policies&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/fallback"&gt;fallbacks&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-strategies/round-robin"&gt;model rotations&lt;/a&gt;. All statically defined. &lt;img src="https://www.boundaryml.com/blog/2025-01-24-ai-agents-need-a-new-syntax/06-fallback-retry.gif" alt="Fallback Retry" /&gt; Want to do pick models at runtime? Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-advanced/llm-client-registry"&gt;Client Registry&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We support: &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai"&gt;OpenAI&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/anthropic"&gt;Anthropic&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-ai-gemini"&gt;Gemini&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/google-vertex"&gt;Vertex&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/aws-bedrock"&gt;Bedrock&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/open-ai-from-azure"&gt;Azure OpenAI&lt;/a&gt; • &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic"&gt;Anything OpenAI Compatible&lt;/a&gt; (&lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-ollama"&gt;Ollama&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-open-router"&gt;OpenRouter&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-v-llm"&gt;VLLM&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-lm-studio"&gt;LMStudio&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/ref/llm-client-providers/openai-generic-together-ai"&gt;TogetherAI&lt;/a&gt;, and more)&lt;/p&gt; 
&lt;h2&gt;Build beautiful streaming UIs&lt;/h2&gt; 
&lt;p&gt;BAML generates a ton of utilities for NextJS, Python (and any language) to make streaming UIs easy. &lt;img src="https://github.com/user-attachments/assets/cf82495b-21fc-40bf-ae98-93eef923d620" alt="recipe-generator" /&gt;&lt;/p&gt; 
&lt;p&gt;BAML's streaming interfaces are fully type-safe. Check out the &lt;a href="https://docs.boundaryml.com/guide/baml-basics/streaming"&gt;Streaming Docs&lt;/a&gt;, and our &lt;a href="https://docs.boundaryml.com/guide/framework-integration/react-next-js/quick-start"&gt;React hooks&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Fully Open-Source, and offline&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;100% open-source (Apache 2)&lt;/li&gt; 
 &lt;li&gt;100% private. AGI will not require an internet connection, neither will BAML 
  &lt;ul&gt; 
   &lt;li&gt;No network requests beyond model calls you explicitly set&lt;/li&gt; 
   &lt;li&gt;Not stored or used for any training data&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;BAML files can be saved locally on your machine and checked into Github for easy diffs.&lt;/li&gt; 
 &lt;li&gt;Built in Rust. So fast, you can't even tell it's there.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;BAML's Design Philosophy&lt;/h2&gt; 
&lt;p&gt;Everything is fair game when making new syntax. If you can code it, it can be yours. This is our design philosophy to help restrict ideas:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;1:&lt;/strong&gt; Avoid invention when possible 
  &lt;ul&gt; 
   &lt;li&gt;Yes, prompts need versioning — we have a great versioning tool: git&lt;/li&gt; 
   &lt;li&gt;Yes, you need to save prompts — we have a great storage tool: filesystems&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2:&lt;/strong&gt; Any file editor and any terminal should be enough to use it&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;3:&lt;/strong&gt; Be fast&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;4:&lt;/strong&gt; A first year university student should be able to understand it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Why a new programming language&lt;/h2&gt; 
&lt;p&gt;We used to write websites like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;def home():
    return "&amp;lt;button onclick=\"() =&amp;gt; alert(\\\"hello!\\\")\"&amp;gt;Click&amp;lt;/button&amp;gt;"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And now we do this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-jsx"&gt;function Home() {
  return &amp;lt;button onClick={() =&amp;gt; setCount(prev =&amp;gt; prev + 1)}&amp;gt;
          {count} clicks!
         &amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;New syntax can be incredible at expressing new ideas. Plus the idea of maintaining hundreds of f-strings for prompts kind of disgusts us 🤮. Strings are bad for maintainable codebases. We prefer structured strings.&lt;/p&gt; 
&lt;p&gt;The goal of BAML is to give you the expressiveness of English, but the structure of code.&lt;/p&gt; 
&lt;p&gt;Full &lt;a href="https://www.boundaryml.com/blog/ai-agents-need-new-syntax"&gt;blog post&lt;/a&gt; by us.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;As models get better, we'll continue expecting even more out of them. But what will never change is that we'll want a way to write maintainable code that uses those models. The current way we all just assemble strings is very reminiscent of the early days PHP/HTML soup in web development. We hope some of the ideas we shared today can make a tiny dent in helping us all shape the way we all code tomorrow.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Do I need to write my whole app in BAML?&lt;/td&gt; 
   &lt;td&gt;Nope, only the prompts! BAML translates definitions into the language of your choice! &lt;a href="https://docs.boundaryml.com/guide/installation-language/python"&gt;Python&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/typescript"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://docs.boundaryml.com/guide/installation-language/ruby"&gt;Ruby&lt;/a&gt; and &lt;a href="https://docs.boundaryml.com/guide/installation-language/rest-api-other-languages"&gt;more&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Is BAML stable?&lt;/td&gt; 
   &lt;td&gt;Yes, many companies use it in production! We ship updates weekly!&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Why a new language?&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#why-a-new-programming-language"&gt;Jump to section&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Checkout our &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/CONTRIBUTING.md"&gt;guide on getting started&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Citation&lt;/h2&gt; 
&lt;p&gt;You can cite the BAML repo as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bibtex"&gt;@software{baml,
  author = {Vaibhav Gupta, Aaron Villalpando and Boundary ML team},
  title = {BAML},
  url = {https://github.com/boundaryml/baml},
  year = {2024}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;p&gt;Made with ❤️ by Boundary&lt;/p&gt; 
&lt;p&gt;HQ in Seattle, WA&lt;/p&gt; 
&lt;p&gt;P.S. We're hiring for software engineers that love rust. &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/founders@boundaryml.com"&gt;Email us&lt;/a&gt; or reach out on &lt;a href="https://discord.gg/ENtBB6kkXH"&gt;discord&lt;/a&gt;!&lt;/p&gt; 
&lt;div align="left" style="align-items: left;"&gt; 
 &lt;a href="https://raw.githubusercontent.com/BoundaryML/baml/canary/#top"&gt; &lt;img src="https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white" alt="Back to Top" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;img src="https://imgs.xkcd.com/comics/standards.png" alt_text="hi" /&gt;</description>
    </item>
    
    <item>
      <title>rustdesk/rustdesk</title>
      <link>https://github.com/rustdesk/rustdesk</link>
      <description>&lt;p&gt;An open-source remote desktop application designed for self-hosting, as an alternative to TeamViewer.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/rustdesk/rustdesk/master/res/logo-header.svg?sanitize=true" alt="RustDesk - Your remote desktop" /&gt;&lt;br /&gt; &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build"&gt;Build&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker"&gt;Docker&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure"&gt;Structure&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot"&gt;Snapshot&lt;/a&gt;&lt;br /&gt; [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-UA.md"&gt;Українська&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-CS.md"&gt;česky&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ZH.md"&gt;中文&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-HU.md"&gt;Magyar&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ES.md"&gt;Español&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FA.md"&gt;فارسی&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FR.md"&gt;Français&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DE.md"&gt;Deutsch&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PL.md"&gt;Polski&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ID.md"&gt;Indonesian&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-FI.md"&gt;Suomi&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-ML.md"&gt;മലയാളം&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-JP.md"&gt;日本語&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NL.md"&gt;Nederlands&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-IT.md"&gt;Italiano&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-RU.md"&gt;Русский&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-PTBR.md"&gt;Português (Brasil)&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-EO.md"&gt;Esperanto&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-KR.md"&gt;한국어&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-AR.md"&gt;العربي&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-VN.md"&gt;Tiếng Việt&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-DA.md"&gt;Dansk&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-GR.md"&gt;Ελληνικά&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-TR.md"&gt;Türkçe&lt;/a&gt;] | [&lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/README-NO.md"&gt;Norsk&lt;/a&gt;]&lt;br /&gt; &lt;b&gt;We need your help to translate this README, &lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/lang"&gt;RustDesk UI&lt;/a&gt; and &lt;a href="https://github.com/rustdesk/doc.rustdesk.com"&gt;RustDesk Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!Caution] &lt;strong&gt;Misuse Disclaimer:&lt;/strong&gt; &lt;br /&gt; The developers of RustDesk do not condone or support any unethical or illegal use of this software. Misuse, such as unauthorized access, control or invasion of privacy, is strictly against our guidelines. The authors are not responsible for any misuse of the application.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Chat with us: &lt;a href="https://discord.gg/nDceKgxnkV"&gt;Discord&lt;/a&gt; | &lt;a href="https://twitter.com/rustdesk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/rustdesk"&gt;Reddit&lt;/a&gt; | &lt;a href="https://www.youtube.com/@rustdesk"&gt;YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://rustdesk.com/pricing.html"&gt;&lt;img src="https://img.shields.io/badge/RustDesk%20Server%20Pro-Advanced%20Features-blue" alt="RustDesk Server Pro" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Yet another remote desktop solution, written in Rust. Works out of the box with no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href="https://rustdesk.com/server"&gt;set up your own&lt;/a&gt;, or &lt;a href="https://github.com/rustdesk/rustdesk-server-demo"&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png" alt="image" /&gt;&lt;/p&gt; 
&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href="https://raw.githubusercontent.com/rustdesk/rustdesk/master/docs/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for help getting started.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/wiki/FAQ"&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases"&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk/releases/tag/nightly"&gt;&lt;strong&gt;NIGHTLY BUILD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://f-droid.org/en/packages/com.carriez.flutter_hbb"&gt;&lt;img src="https://f-droid.org/badge/get-it-on.png" alt="Get it on F-Droid" height="80" /&gt;&lt;/a&gt; &lt;a href="https://flathub.org/apps/com.rustdesk.RustDesk"&gt;&lt;img src="https://flathub.org/api/badge?svg&amp;amp;locale=en" alt="Get it on Flathub" height="80" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;Desktop versions use Flutter or Sciter (deprecated) for GUI, this tutorial is for Sciter only, since it is easier and more friendly to start. Check out our &lt;a href="https://github.com/rustdesk/rustdesk/raw/master/.github/workflows/flutter-build.yml"&gt;CI&lt;/a&gt; for building Flutter version.&lt;/p&gt; 
&lt;p&gt;Please download Sciter dynamic library yourself.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll"&gt;Windows&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so"&gt;Linux&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib"&gt;macOS&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Raw Steps to build&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://github.com/microsoft/vcpkg"&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static&lt;/li&gt; 
   &lt;li&gt;Linux/macOS: vcpkg install libvpx libyuv opus aom&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href="https://rustdesk.com/docs/en/dev/build/"&gt;Build&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;How to Build on Linux&lt;/h2&gt; 
&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo apt install -y zip g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev \
        libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake make \
        libclang-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libpam0g-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;openSUSE Tumbleweed&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo zypper install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libXfixes-devel cmake alsa-lib-devel gstreamer-devel gstreamer-plugins-base-devel xdotool-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel gstreamer1-devel gstreamer1-plugins-base-devel pam-devel
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pipewire
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install vcpkg&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/microsoft/vcpkg
cd vcpkg
git checkout 2023.04.15
cd ..
vcpkg/bootstrap-vcpkg.sh
export VCPKG_ROOT=$HOME/vcpkg
vcpkg/vcpkg install libvpx libyuv opus aom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cd vcpkg/buildtrees/libvpx/src
cd *
./configure
sed -i 's/CFLAGS+=-I/CFLAGS+=-fPIC -I/g' Makefile
sed -i 's/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g' Makefile
make
cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/
cd
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
git clone --recurse-submodules https://github.com/rustdesk/rustdesk
cd rustdesk
mkdir -p target/debug
wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so
mv libsciter-gtk.so target/debug
VCPKG_ROOT=$HOME/vcpkg cargo run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to build with Docker&lt;/h2&gt; 
&lt;p&gt;Begin by cloning the repository and building the Docker container:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git clone https://github.com/rustdesk/rustdesk
cd rustdesk
git submodule update --init --recursive
docker build -t "rustdesk-builder" .
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID="$(id -u)" -e PGID="$(id -g)" rustdesk-builder
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/debug/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if you're running a release executable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;target/release/rustdesk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please ensure that you run these commands from the root of the RustDesk repository, or the application may not find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; 
&lt;h2&gt;File Structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common"&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/scrap"&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/enigo"&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/libs/clipboard"&gt;libs/clipboard&lt;/a&gt;&lt;/strong&gt;: file copy and paste implementation for Windows, Linux, macOS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/ui"&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: obsolete Sciter UI (deprecated)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/server"&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/client.rs"&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs"&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href="https://github.com/rustdesk/rustdesk-server"&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/src/platform"&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter"&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for desktop and mobile&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/rustdesk/rustdesk/tree/master/flutter/web/v1/js"&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: JavaScript for Flutter web client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/db82d4e7-c4bc-4823-8e6f-6af7eadf7651" alt="Connection Manager" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/9baa91e9-3362-4d06-aa1a-7518edcbd7ea" alt="Connected to a Windows PC" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/39511ad3-aa9a-4f8c-8947-1cce286a46ad" alt="File Transfer" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/rustdesk/rustdesk/assets/28412477/78e8708f-e87e-4570-8373-1360033ea6c5" alt="TCP Tunneling" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emilk/egui</title>
      <link>https://github.com/emilk/egui</link>
      <description>&lt;p&gt;egui: an easy-to-use immediate mode GUI in Rust that runs on both web and native&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🖌 egui: an easy-to-use GUI in pure Rust&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/emilk/egui"&gt;&lt;img alt="github" src="https://img.shields.io/badge/github-emilk/egui-8da0cb?logo=github" height="20" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/egui"&gt;&lt;img src="https://img.shields.io/crates/v/egui.svg?sanitize=true" alt="Latest version" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/egui"&gt;&lt;img src="https://docs.rs/egui/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://github.com/rust-secure-code/safety-dance/"&gt;&lt;img src="https://img.shields.io/badge/unsafe-forbidden-success.svg?sanitize=true" alt="unsafe forbidden" /&gt;&lt;/a&gt; &lt;a href="https://github.com/emilk/egui/actions/workflows/rust.yml"&gt;&lt;img src="https://github.com/emilk/egui/workflows/Rust/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/emilk/egui/raw/main/LICENSE-MIT"&gt;&lt;img src="https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true" alt="MIT" /&gt;&lt;/a&gt; &lt;a href="https://github.com/emilk/egui/raw/main/LICENSE-APACHE"&gt;&lt;img src="https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true" alt="Apache" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/JFcEma9bJq"&gt;&lt;img src="https://img.shields.io/discord/900275882684477440?label=egui%20discord" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.rerun.io/"&gt;&lt;img src="https://github.com/user-attachments/assets/78e79463-4357-461b-bbd1-31aa5ef5e1a2" width="250" /&gt;&lt;/a&gt; 
 &lt;p&gt;egui development is sponsored by &lt;a href="https://www.rerun.io/"&gt;Rerun&lt;/a&gt;, a startup building&lt;br /&gt; an SDK for visualizing streams of multimodal data.&lt;/p&gt; 
&lt;/div&gt; 
&lt;hr /&gt; 
&lt;p&gt;👉 &lt;a href="https://www.egui.rs/#demo"&gt;Click to run the web demo&lt;/a&gt; 👈&lt;/p&gt; 
&lt;p&gt;egui (pronounced "e-gooey") is a simple, fast, and highly portable immediate mode GUI library for Rust. egui runs on the web, natively, and &lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#integrations"&gt;in your favorite game engine&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;egui aims to be the easiest-to-use Rust GUI library, and the simplest way to make a web app in Rust.&lt;/p&gt; 
&lt;p&gt;egui can be used anywhere you can draw textured triangles, which means you can easily integrate it into your game engine of choice.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; is the official egui framework, which supports writing apps for Web, Linux, Mac, Windows, and Android.&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;ui.heading("My egui Application");
ui.horizontal(|ui| {
    ui.label("Your name: ");
    ui.text_edit_singleline(&amp;amp;mut name);
});
ui.add(egui::Slider::new(&amp;amp;mut age, 0..=120).text("age"));
if ui.button("Increment").clicked() {
    age += 1;
}
ui.label(format!("Hello '{name}', age {age}"));
ui.image(egui::include_image!("ferris.png"));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img alt="Dark mode" src="https://github.com/user-attachments/assets/3b446d29-99d8-4c82-86bb-4d8ef0516017" /&gt; &amp;nbsp; &amp;nbsp; &lt;img alt="Light mode" src="https://github.com/user-attachments/assets/a5e7da93-89a8-4ba0-86b8-0fa2228a4f62" height="278" /&gt;&lt;/p&gt; 
&lt;h2&gt;Sections:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#example"&gt;Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#quick-start"&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#demo"&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#goals"&gt;Goals&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#state"&gt;State / features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#who-is-egui-for"&gt;Who is egui for?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#integrations"&gt;Integrations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#why-immediate-mode"&gt;Why immediate mode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#faq"&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#other"&gt;Other&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(&lt;a href="https://github.com/Re-Ch-Love/egui-doc-cn/raw/main/README_zh-hans.md"&gt;egui 的中文翻译文档 / chinese translation&lt;/a&gt;)&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;There are simple examples in &lt;a href="https://github.com/emilk/egui/raw/main/examples/"&gt;the &lt;code&gt;examples/&lt;/code&gt; folder&lt;/a&gt;. If you want to write a web app, then go to &lt;a href="https://github.com/emilk/eframe_template/"&gt;https://github.com/emilk/eframe_template/&lt;/a&gt; and follow the instructions. The official docs are at &lt;a href="https://docs.rs/egui"&gt;https://docs.rs/egui&lt;/a&gt;. For inspiration and more examples, check out the &lt;a href="https://www.egui.rs/#demo"&gt;the egui web demo&lt;/a&gt; and follow the links in it to its source code.&lt;/p&gt; 
&lt;p&gt;If you want to integrate egui into an existing engine, go to the &lt;a href="https://raw.githubusercontent.com/emilk/egui/main/#integrations"&gt;Integrations&lt;/a&gt; section.&lt;/p&gt; 
&lt;p&gt;If you have questions, use &lt;a href="https://github.com/emilk/egui/discussions"&gt;GitHub Discussions&lt;/a&gt;. There is also &lt;a href="https://discord.gg/JFcEma9bJq"&gt;an egui discord server&lt;/a&gt;. If you want to contribute to egui, please read the &lt;a href="https://github.com/emilk/egui/raw/main/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.egui.rs/#demo"&gt;Click to run egui web demo&lt;/a&gt; (works in any browser with Wasm and WebGL support). Uses &lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To test the demo app locally, run &lt;code&gt;cargo run --release -p egui_demo_app&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The native backend is &lt;a href="https://github.com/emilk/egui/tree/main/crates/egui_glow"&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt; (using &lt;a href="https://crates.io/crates/glow"&gt;&lt;code&gt;glow&lt;/code&gt;&lt;/a&gt;) and should work out-of-the-box on Mac and Windows, but on Linux you need to first run:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;On Fedora Rawhide you need to run:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;dnf install clang clang-devel clang-tools-extra libxkbcommon-devel pkg-config openssl-devel libxcb-devel gtk3-devel atk fontconfig-devel&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is just for the demo app - egui itself is completely platform agnostic!&lt;/p&gt; 
&lt;h2&gt;Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The easiest to use GUI library&lt;/li&gt; 
 &lt;li&gt;Responsive: target 60 Hz in debug build&lt;/li&gt; 
 &lt;li&gt;Friendly: difficult to make mistakes, and shouldn't panic&lt;/li&gt; 
 &lt;li&gt;Portable: the same code works on the web and as a native app&lt;/li&gt; 
 &lt;li&gt;Easy to integrate into any environment&lt;/li&gt; 
 &lt;li&gt;A simple 2D graphics API for custom painting (&lt;a href="https://docs.rs/epaint"&gt;&lt;code&gt;epaint&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Pure immediate mode: no callbacks&lt;/li&gt; 
 &lt;li&gt;Extensible: &lt;a href="https://github.com/emilk/egui/raw/main/crates/egui_demo_lib/src/demo/toggle_switch.rs"&gt;easy to write your own widgets for egui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Modular: You should be able to use small parts of egui and combine them in new ways&lt;/li&gt; 
 &lt;li&gt;Safe: there is no &lt;code&gt;unsafe&lt;/code&gt; code in egui&lt;/li&gt; 
 &lt;li&gt;Minimal dependencies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;egui is &lt;em&gt;not&lt;/em&gt; a framework. egui is a library you call into, not an environment you program for.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: egui does not claim to have reached all these goals yet! egui is still work in progress.&lt;/p&gt; 
&lt;h3&gt;Non-goals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Become the most powerful GUI library&lt;/li&gt; 
 &lt;li&gt;Native looking interface&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;State&lt;/h2&gt; 
&lt;p&gt;egui is in active development. It works well for what it does, but it lacks many features and the interfaces are still in flux. New releases will have breaking changes.&lt;/p&gt; 
&lt;p&gt;Still, egui can be used to create professional looking applications, like &lt;a href="https://app.rerun.io/"&gt;the Rerun Viewer&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Widgets: label, text button, hyperlink, checkbox, radio button, slider, draggable value, text editing, color picker, spinner&lt;/li&gt; 
 &lt;li&gt;Images&lt;/li&gt; 
 &lt;li&gt;Layouts: horizontal, vertical, columns, automatic wrapping&lt;/li&gt; 
 &lt;li&gt;Text editing: multiline, copy/paste, undo, emoji supports&lt;/li&gt; 
 &lt;li&gt;Windows: move, resize, name, minimize and close. Automatically sized and positioned.&lt;/li&gt; 
 &lt;li&gt;Regions: resizing, vertical scrolling, collapsing headers (sections), panels&lt;/li&gt; 
 &lt;li&gt;Rendering: Anti-aliased rendering of lines, circles, text and convex polygons.&lt;/li&gt; 
 &lt;li&gt;Tooltips on hover&lt;/li&gt; 
 &lt;li&gt;Accessibility via &lt;a href="https://accesskit.dev/"&gt;AccessKit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Label text selection&lt;/li&gt; 
 &lt;li&gt;And more!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out the &lt;a href="https://github.com/emilk/egui/wiki/3rd-party-egui-crates"&gt;3rd party egui crates wiki&lt;/a&gt; for even more widgets and features, maintained by the community.&lt;/p&gt; 
&lt;img src="https://github.com/user-attachments/assets/13e73b76-e456-42bd-8ec9-220802834268" width="50%" /&gt; 
&lt;p&gt;Light Theme:&lt;/p&gt; 
&lt;img src="https://github.com/user-attachments/assets/2e38972c-a444-4894-b32f-47a2719cf369" width="50%" /&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; has a minimal set of default dependencies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/ab_glyph"&gt;&lt;code&gt;ab_glyph&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/ahash"&gt;&lt;code&gt;ahash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/bitflags"&gt;&lt;code&gt;bitflags&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/nohash-hasher"&gt;&lt;code&gt;nohash-hasher&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://crates.io/crates/parking_lot"&gt;&lt;code&gt;parking_lot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Heavier dependencies are kept out of &lt;code&gt;egui&lt;/code&gt;, even as opt-in. All code in &lt;code&gt;egui&lt;/code&gt; is Wasm-friendly (even outside a browser).&lt;/p&gt; 
&lt;p&gt;To load images into &lt;code&gt;egui&lt;/code&gt; you can use the official &lt;a href="https://github.com/emilk/egui/tree/main/crates/egui_extras"&gt;&lt;code&gt;egui_extras&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; on the other hand has a lot of dependencies, including &lt;a href="https://crates.io/crates/winit"&gt;&lt;code&gt;winit&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://crates.io/crates/image"&gt;&lt;code&gt;image&lt;/code&gt;&lt;/a&gt;, graphics crates, clipboard crates, etc,&lt;/p&gt; 
&lt;h2&gt;Who is egui for?&lt;/h2&gt; 
&lt;p&gt;egui aims to be the best choice when you want a simple way to create a GUI, or you want to add a GUI to a game engine.&lt;/p&gt; 
&lt;p&gt;If you are not using Rust, egui is not for you. If you want a GUI that looks native, egui is not for you. If you want something that doesn't break when you upgrade it, egui isn't for you (yet).&lt;/p&gt; 
&lt;p&gt;But if you are writing something interactive in Rust that needs a simple GUI, egui may be for you.&lt;/p&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;egui is built to be easy to integrate into any existing game engine or platform you are working on. egui itself doesn't know or care on what OS it is running or how to render things to the screen - that is the job of the egui integration.&lt;/p&gt; 
&lt;p&gt;An integration needs to do the following each frame:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Input&lt;/strong&gt;: Gather input (mouse, touches, keyboard, screen size, etc) and give it to egui&lt;/li&gt; 
 &lt;li&gt;Call into the application GUI code&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: Handle egui output (cursor changes, paste, texture allocations, …)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Painting&lt;/strong&gt;: Render the triangle mesh egui produces (see &lt;a href="https://github.com/emilk/egui/raw/main/crates/egui_glow/src/painter.rs"&gt;OpenGL example&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Official integrations&lt;/h3&gt; 
&lt;p&gt;These are the official egui integrations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; for compiling the same app to web/wasm and desktop/native. Uses &lt;code&gt;egui-winit&lt;/code&gt; and &lt;code&gt;egui_glow&lt;/code&gt; or &lt;code&gt;egui-wgpu&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/egui_glow"&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt; for rendering egui with &lt;a href="https://github.com/grovesNL/glow"&gt;glow&lt;/a&gt; on native and web, and for making native apps&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/egui-wgpu"&gt;&lt;code&gt;egui-wgpu&lt;/code&gt;&lt;/a&gt; for &lt;a href="https://crates.io/crates/wgpu"&gt;wgpu&lt;/a&gt; (WebGPU API)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/tree/main/crates/egui-winit"&gt;&lt;code&gt;egui-winit&lt;/code&gt;&lt;/a&gt; for integrating with &lt;a href="https://github.com/rust-windowing/winit"&gt;winit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3rd party integrations&lt;/h3&gt; 
&lt;p&gt;Check the wiki to find &lt;a href="https://github.com/emilk/egui/wiki/3rd-party-integrations"&gt;3rd party integrations&lt;/a&gt; and &lt;a href="https://github.com/emilk/egui/wiki/3rd-party-egui-crates"&gt;egui crates&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Writing your own egui integration&lt;/h3&gt; 
&lt;p&gt;Missing an integration for the thing you're working on? Create one, it's easy! See &lt;a href="https://docs.rs/egui/latest/egui/#integrating-with-egui"&gt;https://docs.rs/egui/latest/egui/#integrating-with-egui&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Why immediate mode&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; is an &lt;a href="https://en.wikipedia.org/wiki/Immediate_mode_GUI"&gt;immediate mode GUI library&lt;/a&gt;, as opposed to a &lt;em&gt;retained mode&lt;/em&gt; GUI library. The difference between retained mode and immediate mode is best illustrated with the example of a button: In a retained GUI you create a button, add it to some UI and install some on-click handler (callback). The button is retained in the UI, and to change the text on it you need to store some sort of reference to it. By contrast, in immediate mode you show the button and interact with it immediately, and you do so every frame (e.g. 60 times per second). This means there is no need for any on-click handler, nor to store any reference to it. In &lt;code&gt;egui&lt;/code&gt; this looks like this: &lt;code&gt;if ui.button("Save file").clicked() { save(file); }&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;A more detailed description of immediate mode can be found &lt;a href="https://docs.rs/egui/latest/egui/#understanding-immediate-mode"&gt;in the &lt;code&gt;egui&lt;/code&gt; docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are advantages and disadvantages to both systems.&lt;/p&gt; 
&lt;p&gt;The short of it is this: immediate mode GUI libraries are easier to use, but less powerful.&lt;/p&gt; 
&lt;h3&gt;Advantages of immediate mode&lt;/h3&gt; 
&lt;h4&gt;Usability&lt;/h4&gt; 
&lt;p&gt;The main advantage of immediate mode is that the application code becomes vastly simpler:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You never need to have any on-click handlers and callbacks that disrupts your code flow.&lt;/li&gt; 
 &lt;li&gt;You don't have to worry about a lingering callback calling something that is gone.&lt;/li&gt; 
 &lt;li&gt;Your GUI code can easily live in a simple function (no need for an object just for the UI).&lt;/li&gt; 
 &lt;li&gt;You don't have to worry about app state and GUI state being out-of-sync (i.e. the GUI showing something outdated), because the GUI isn't storing any state - it is showing the latest state &lt;em&gt;immediately&lt;/em&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In other words, a whole lot of code, complexity and bugs are gone, and you can focus your time on something more interesting than writing GUI code.&lt;/p&gt; 
&lt;h3&gt;Disadvantages of immediate mode&lt;/h3&gt; 
&lt;h4&gt;Layout&lt;/h4&gt; 
&lt;p&gt;The main disadvantage of immediate mode is it makes layout more difficult. Say you want to show a small dialog window in the center of the screen. To position the window correctly the GUI library must first know the size of it. To know the size of the window the GUI library must first layout the contents of the window. In retained mode this is easy: the GUI library does the window layout, positions the window, then checks for interaction ("was the OK button clicked?").&lt;/p&gt; 
&lt;p&gt;In immediate mode you run into a paradox: to know the size of the window, we must do the layout, but the layout code also checks for interaction ("was the OK button clicked?") and so it needs to know the window position &lt;em&gt;before&lt;/em&gt; showing the window contents. This means we must decide where to show the window &lt;em&gt;before&lt;/em&gt; we know its size!&lt;/p&gt; 
&lt;p&gt;This is a fundamental shortcoming of immediate mode GUIs, and any attempt to resolve it comes with its own downsides.&lt;/p&gt; 
&lt;p&gt;One workaround is to store the size and use it the next frame. This produces a frame-delay for the correct layout, producing occasional flickering the first frame something shows up. &lt;code&gt;egui&lt;/code&gt; does this for some things such as windows and grid layouts.&lt;/p&gt; 
&lt;p&gt;The "first-frame jitter" can be covered up with an extra &lt;em&gt;pass&lt;/em&gt;, which egui supports via &lt;code&gt;Context::request_discard&lt;/code&gt;. The downside of this is the added CPU cost of a second pass, so egui only does this in very rare circumstances (the majority of frames are single-pass).&lt;/p&gt; 
&lt;p&gt;For "atomic" widgets (e.g. a button) &lt;code&gt;egui&lt;/code&gt; knows the size before showing it, so centering buttons, labels etc is possible in &lt;code&gt;egui&lt;/code&gt; without any special workarounds.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/emilk/egui/issues/4378"&gt;this issue&lt;/a&gt; for more.&lt;/p&gt; 
&lt;h4&gt;CPU usage&lt;/h4&gt; 
&lt;p&gt;Since an immediate mode GUI does a full layout each frame, the layout code needs to be quick. If you have a very complex GUI this can tax the CPU. In particular, having a very large UI in a scroll area (with very long scrollback) can be slow, as the content needs to be laid out each frame.&lt;/p&gt; 
&lt;p&gt;If you design the GUI with this in mind and refrain from huge scroll areas (or only lay out the part that is in view) then the performance hit is generally pretty small. For most cases you can expect &lt;code&gt;egui&lt;/code&gt; to take up 1-2 ms per frame, but &lt;code&gt;egui&lt;/code&gt; still has a lot of room for optimization (it's not something I've focused on yet). &lt;code&gt;egui&lt;/code&gt; only repaints when there is interaction (e.g. mouse movement) or an animation, so if your app is idle, no CPU is wasted.&lt;/p&gt; 
&lt;p&gt;If your GUI is highly interactive, then immediate mode may actually be more performant compared to retained mode. Go to any web page and resize the browser window, and you'll notice that the browser is very slow to do the layout and eats a lot of CPU doing it. Resize a window in &lt;code&gt;egui&lt;/code&gt; by contrast, and you'll get smooth 60 FPS at no extra CPU cost.&lt;/p&gt; 
&lt;h4&gt;IDs&lt;/h4&gt; 
&lt;p&gt;There are some GUI state that you want the GUI library to retain, even in an immediate mode library such as &lt;code&gt;egui&lt;/code&gt;. This includes position and sizes of windows and how far the user has scrolled in some UI. In these cases you need to provide &lt;code&gt;egui&lt;/code&gt; with a seed of a unique identifier (unique within the parent UI). For instance: by default &lt;code&gt;egui&lt;/code&gt; uses the window titles as unique IDs to store window positions. If you want two windows with the same name (or one window with a dynamic name) you must provide some other ID source to &lt;code&gt;egui&lt;/code&gt; (some unique integer or string).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; also needs to track which widget is being interacted with (e.g. which slider is being dragged). &lt;code&gt;egui&lt;/code&gt; uses unique IDs for this as well, but in this case the IDs are automatically generated, so there is no need for the user to worry about it. In particular, having two buttons with the same name is no problem (this is in contrast with &lt;a href="https://github.com/ocornut/imgui"&gt;&lt;code&gt;Dear ImGui&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Overall, ID handling is a rare inconvenience, and not a big disadvantage.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;Also see &lt;a href="https://github.com/emilk/egui/discussions/categories/q-a"&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Can I use &lt;code&gt;egui&lt;/code&gt; with non-latin characters?&lt;/h3&gt; 
&lt;p&gt;Yes! But you need to install your own font (&lt;code&gt;.ttf&lt;/code&gt; or &lt;code&gt;.otf&lt;/code&gt;) using &lt;a href="https://docs.rs/egui/latest/egui/struct.Context.html#method.set_fonts"&gt;&lt;code&gt;Context::set_fonts&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Can I customize the look of egui?&lt;/h3&gt; 
&lt;p&gt;Yes! You can customize the colors, spacing, fonts and sizes of everything using &lt;code&gt;Context::set_style&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This is not yet as powerful as say CSS, &lt;a href="https://github.com/emilk/egui/issues/3284"&gt;but this is going to improve&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here is an example (from &lt;a href="https://github.com/a-liashenko/TinyPomodoro"&gt;https://github.com/a-liashenko/TinyPomodoro&lt;/a&gt;):&lt;/p&gt; 
&lt;img src="https://github.com/user-attachments/assets/e6107237-2547-41d6-996b-9a20ae0345ab" width="50%" /&gt; 
&lt;h3&gt;How do I use egui with &lt;code&gt;async&lt;/code&gt;?&lt;/h3&gt; 
&lt;p&gt;If you call &lt;code&gt;.await&lt;/code&gt; in your GUI code, the UI will freeze, which is very bad UX. Instead, keep the GUI thread non-blocking and communicate with any concurrent tasks (&lt;code&gt;async&lt;/code&gt; tasks or other threads) with something like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Channels (e.g. &lt;a href="https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html"&gt;&lt;code&gt;std::sync::mpsc::channel&lt;/code&gt;&lt;/a&gt;). Make sure to use &lt;a href="https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.try_recv"&gt;&lt;code&gt;try_recv&lt;/code&gt;&lt;/a&gt; so you don't block the gui thread!&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Arc&amp;lt;Mutex&amp;lt;Value&amp;gt;&amp;gt;&lt;/code&gt; (background thread sets a value; GUI thread reads it)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/poll-promise"&gt;&lt;code&gt;poll_promise::Promise&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/eventuals/latest/eventuals/struct.Eventual.html"&gt;&lt;code&gt;eventuals::Eventual&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/tokio/latest/tokio/sync/watch/fn.channel.html"&gt;&lt;code&gt;tokio::sync:&lt;span&gt;⌚&lt;/span&gt;:channel&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How do I create a file dialog?&lt;/h3&gt; 
&lt;p&gt;The async version of &lt;a href="https://docs.rs/rfd/latest/rfd/"&gt;rfd&lt;/a&gt; supports both native and Wasm. See example app here &lt;a href="https://github.com/woelper/egui_pick_file"&gt;https://github.com/woelper/egui_pick_file&lt;/a&gt; which also has a demo available via &lt;a href="https://woelper.github.io/egui_pick_file/"&gt;gitub pages&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;What about accessibility, such as screen readers?&lt;/h3&gt; 
&lt;p&gt;egui includes optional support for &lt;a href="https://accesskit.dev/"&gt;AccessKit&lt;/a&gt;, which currently implements the native accessibility APIs on Windows and macOS. This feature is enabled by default in eframe. For platforms that AccessKit doesn't yet support, including web, there is an experimental built-in screen reader; in &lt;a href="https://www.egui.rs/#demo"&gt;the web demo&lt;/a&gt; you can enable it in the "Backend" tab.&lt;/p&gt; 
&lt;p&gt;The original discussion of accessibility in egui is at &lt;a href="https://github.com/emilk/egui/issues/167"&gt;https://github.com/emilk/egui/issues/167&lt;/a&gt;. Now that AccessKit support is merged, providing a strong foundation for future accessibility work, please open new issues on specific accessibility problems.&lt;/p&gt; 
&lt;h3&gt;What is the difference between &lt;a href="https://docs.rs/egui"&gt;egui&lt;/a&gt; and &lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;eframe&lt;/a&gt;?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;egui&lt;/code&gt; is a 2D user interface library for laying out and interacting with buttons, sliders, etc. &lt;code&gt;egui&lt;/code&gt; has no idea if it is running on the web or natively, and does not know how to collect input or show things on screen. That is the job of &lt;em&gt;the integration&lt;/em&gt; or &lt;em&gt;backend&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;It is common to use &lt;code&gt;egui&lt;/code&gt; from a game engine (using e.g. &lt;a href="https://docs.rs/bevy_egui"&gt;&lt;code&gt;bevy_egui&lt;/code&gt;&lt;/a&gt;), but you can also use &lt;code&gt;egui&lt;/code&gt; stand-alone using &lt;code&gt;eframe&lt;/code&gt;. &lt;code&gt;eframe&lt;/code&gt; has integration for web and native, and handles input and rendering. The &lt;em&gt;frame&lt;/em&gt; in &lt;code&gt;eframe&lt;/code&gt; stands both for the frame in which your egui app resides and also for "framework" (&lt;code&gt;eframe&lt;/code&gt; is a framework, &lt;code&gt;egui&lt;/code&gt; is a library).&lt;/p&gt; 
&lt;h3&gt;How do I render 3D stuff in an egui area?&lt;/h3&gt; 
&lt;p&gt;There are multiple ways to combine egui with 3D. The simplest way is to use a 3D library and have egui sit on top of the 3D view. See for instance &lt;a href="https://github.com/mvlabat/bevy_egui"&gt;&lt;code&gt;bevy_egui&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://github.com/asny/three-d"&gt;&lt;code&gt;three-d&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to embed 3D into an egui view there are two options:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;Shape::Callback&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emilk/egui/raw/main/examples/custom_3d_glow/src/main.rs"&gt;https://github.com/emilk/egui/blob/main/examples/custom_3d_glow/src/main.rs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;Shape::Callback&lt;/code&gt; will call your code when egui gets painted, to show anything using whatever the background rendering context is. When using &lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; this will be &lt;a href="https://github.com/grovesNL/glow"&gt;&lt;code&gt;glow&lt;/code&gt;&lt;/a&gt;. Other integrations will give you other rendering contexts, if they support &lt;code&gt;Shape::Callback&lt;/code&gt; at all.&lt;/p&gt; 
&lt;h4&gt;Render-to-texture&lt;/h4&gt; 
&lt;p&gt;You can also render your 3D scene to a texture and display it using &lt;a href="https://docs.rs/egui/latest/egui/struct.Ui.html#method.image"&gt;&lt;code&gt;ui.image(…)&lt;/code&gt;&lt;/a&gt;. You first need to convert the native texture to an &lt;a href="https://docs.rs/egui/latest/egui/enum.TextureId.html"&gt;&lt;code&gt;egui::TextureId&lt;/code&gt;&lt;/a&gt;, and how to do this depends on the integration you use.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Using &lt;a href="https://github.com/not-fl3/egui-miniquad"&gt;&lt;code&gt;egui-miniquad&lt;/code&gt;&lt;/a&gt;: &lt;a href="https://github.com/not-fl3/egui-miniquad/raw/master/examples/render_to_egui_image.rs"&gt;https://github.com/not-fl3/egui-miniquad/blob/master/examples/render_to_egui_image.rs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Using &lt;a href="https://github.com/emilk/egui/tree/main/crates/eframe"&gt;&lt;code&gt;eframe&lt;/code&gt;&lt;/a&gt; + &lt;a href="https://vtk.org/"&gt;&lt;code&gt;VTK (C++)&lt;/code&gt;&lt;/a&gt;: &lt;a href="https://github.com/Gerharddc/vtk-egui-demo"&gt;https://github.com/Gerharddc/vtk-egui-demo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other&lt;/h2&gt; 
&lt;h3&gt;Conventions and design choices&lt;/h3&gt; 
&lt;p&gt;All coordinates are in screen space coordinates, with (0, 0) in the top left corner&lt;/p&gt; 
&lt;p&gt;All coordinates are in logical "points" which may consist of many physical pixels.&lt;/p&gt; 
&lt;p&gt;All colors have premultiplied alpha, unless otherwise stated.&lt;/p&gt; 
&lt;p&gt;egui uses the builder pattern for construction widgets. For instance: &lt;code&gt;ui.add(Label::new("Hello").text_color(RED));&lt;/code&gt; I am not a big fan of the builder pattern (it is quite verbose both in implementation and in use) but until Rust has named, default arguments it is the best we can do. To alleviate some of the verbosity there are common-case helper functions, like &lt;code&gt;ui.label("Hello");&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Instead of using matching &lt;code&gt;begin/end&lt;/code&gt; style function calls (which can be error prone) egui prefers to use &lt;code&gt;FnOnce&lt;/code&gt; closures passed to a wrapping function. Lambdas are a bit ugly though, so I'd like to find a nicer solution to this. More discussion of this at &lt;a href="https://github.com/emilk/egui/issues/1004#issuecomment-1001650754"&gt;https://github.com/emilk/egui/issues/1004#issuecomment-1001650754&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;egui uses a single &lt;code&gt;RwLock&lt;/code&gt; for short-time locks on each access of &lt;code&gt;Context&lt;/code&gt; data. This is to leave implementation simple and transactional and allow users to run their UI logic in parallel. Instead of creating mutex guards, egui uses closures passed to a wrapping function, e.g. &lt;code&gt;ctx.input(|i| i.key_down(Key::A))&lt;/code&gt;. This is to make it less likely that a user would accidentally double-lock the &lt;code&gt;Context&lt;/code&gt;, which would lead to a deadlock.&lt;/p&gt; 
&lt;h3&gt;Inspiration&lt;/h3&gt; 
&lt;p&gt;The one and only &lt;a href="https://github.com/ocornut/imgui"&gt;Dear ImGui&lt;/a&gt; is a great Immediate Mode GUI for C++ which works with many backends. That library revolutionized how I think about GUI code and turned GUI programming from something I hated to do to something I now enjoy.&lt;/p&gt; 
&lt;h3&gt;Name&lt;/h3&gt; 
&lt;p&gt;The name of the library and the project is "egui" and pronounced as "e-gooey". Please don't write it as "EGUI".&lt;/p&gt; 
&lt;p&gt;The library was originally called "Emigui", but was renamed to "egui" in 2020.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;egui author and maintainer: Emil Ernerfeldt (&lt;a href="https://github.com/emilk"&gt;@emilk&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Notable contributions by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/n2"&gt;@n2&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/253"&gt;Mobile web input and IME support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/optozorax"&gt;@optozorax&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/257"&gt;Arbitrary widget data storage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quadruple-output"&gt;@quadruple-output&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/306"&gt;Multitouch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/EmbersArc"&gt;@EmbersArc&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pulls?q=+is%3Apr+author%3AEmbersArc"&gt;Plots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AsmPrgmC3"&gt;@AsmPrgmC3&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/650"&gt;Proper sRGBA blending for web&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/AlexApps99"&gt;@AlexApps99&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/685"&gt;&lt;code&gt;egui_glow&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mankinskin"&gt;@mankinskin&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/543"&gt;Context menus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/KentaTheBugMaker"&gt;@KentaTheBugMaker&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/868"&gt;Port glow painter to web&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/danielkeller"&gt;@danielkeller&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/1050"&gt;&lt;code&gt;Context&lt;/code&gt; refactor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/MaximOsipenko"&gt;@MaximOsipenko&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/pull/2625"&gt;&lt;code&gt;Context&lt;/code&gt; lock refactor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mwcampbell"&gt;@mwcampbell&lt;/a&gt;: &lt;a href="https://github.com/AccessKit/accesskit"&gt;AccessKit&lt;/a&gt; &lt;a href="https://github.com/emilk/egui/pull/2294"&gt;integration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hasenbanck"&gt;@hasenbanck&lt;/a&gt;, &lt;a href="https://github.com/s-nie"&gt;@s-nie&lt;/a&gt;, &lt;a href="https://github.com/Wumpf"&gt;@Wumpf&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/tree/main/crates/egui-wgpu"&gt;&lt;code&gt;egui-wgpu&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jprochazk"&gt;@jprochazk&lt;/a&gt;: &lt;a href="https://github.com/emilk/egui/issues/3291"&gt;egui image API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;And &lt;a href="https://github.com/emilk/egui/graphs/contributors?type=a"&gt;many more&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;egui is licensed under &lt;a href="https://raw.githubusercontent.com/emilk/egui/main/LICENSE-MIT"&gt;MIT&lt;/a&gt; OR &lt;a href="https://raw.githubusercontent.com/emilk/egui/main/LICENSE-APACHE"&gt;Apache-2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The flattening algorithm for the cubic bezier curve and quadratic bezier curve is from &lt;a href="https://docs.rs/lyon_geom/latest/lyon_geom/"&gt;lyon_geom&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Default fonts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;emoji-icon-font.ttf&lt;/code&gt;: &lt;a href="https://github.com/jslegers/emoji-icon-font"&gt;Copyright (c) 2014 John Slegers&lt;/a&gt; , MIT License&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Hack-Regular.ttf&lt;/code&gt;: &lt;a href="https://github.com/source-foundry/Hack"&gt;https://github.com/source-foundry/Hack&lt;/a&gt;, &lt;a href="https://github.com/source-foundry/Hack/raw/master/LICENSE.md"&gt;MIT Licence&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NotoEmoji-Regular.ttf&lt;/code&gt;: &lt;a href="https://google.com/get/noto"&gt;google.com/get/noto&lt;/a&gt;, &lt;a href="https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;amp;id=OFL"&gt;SIL Open Font License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Ubuntu-Light.ttf&lt;/code&gt; by &lt;a href="http://www.daltonmaag.com/"&gt;Dalton Maag&lt;/a&gt;: &lt;a href="https://ubuntu.com/legal/font-licence"&gt;Ubuntu font licence&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.rerun.io/"&gt;&lt;img src="https://github.com/user-attachments/assets/78e79463-4357-461b-bbd1-31aa5ef5e1a2" width="440" /&gt;&lt;/a&gt; 
 &lt;p&gt;egui development is sponsored by &lt;a href="https://www.rerun.io/"&gt;Rerun&lt;/a&gt;, a startup building&lt;br /&gt; an SDK for visualizing streams of multimodal data.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>EFForg/rayhunter</title>
      <link>https://github.com/EFForg/rayhunter</link>
      <description>&lt;p&gt;Rust tool to detect cell site simulators on an orbic mobile hotspot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rayhunter&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/EFForg/rayhunter/actions/workflows/main.yml/badge.svg?sanitize=true" alt="Tests" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://www.eff.org/files/styles/media_browser_preview/public/banner_library/rayhunter-banner.png" alt="Rayhunter Logo - An Orca taking a bite out of a cellular signal bar" /&gt;&lt;/p&gt; 
&lt;p&gt;Rayhunter is a project for detecting IMSI catchers, also known as cell-site simulators or stingrays. It was first designed to run on a cheap mobile hotspot called the Orbic RC400L, but thanks to community efforts can &lt;a href="https://efforg.github.io/rayhunter/supported-devices.html"&gt;support some other devices as well&lt;/a&gt;. It's also designed to be as easy to install and use as possible, regardless of your level of technical skills, and to minimize false positives.&lt;/p&gt; 
&lt;p&gt;→ Check out the &lt;a href="https://efforg.github.io/rayhunter/installation.html"&gt;installation guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;→ To learn more about the aim of the project, and about IMSI catchers in general, please check out our &lt;a href="https://www.eff.org/deeplinks/2025/03/meet-rayhunter-new-open-source-tool-eff-detect-cellular-spying"&gt;introductory blog post&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;→ For discussion, help, or to join the mattermost channel and get involved with the project and community check out the &lt;a href="https://efforg.github.io/rayhunter/support-feedback-community.html"&gt;many ways listed here&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;→ To learn more about the project in general check out the &lt;a href="https://efforg.github.io/rayhunter/"&gt;Rayhunter Book&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;LEGAL DISCLAIMER:&lt;/strong&gt; Use this program at your own risk. We believe running this program does not currently violate any laws or regulations in the United States. However, we are not responsible for civil or criminal liability resulting from the use of this software. If you are located outside of the US please consult with an attorney in your country to help you assess the legal risks of running this program.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Good Hunting!&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tokio-rs/axum</title>
      <link>https://github.com/tokio-rs/axum</link>
      <description>&lt;p&gt;Ergonomic and modular web framework built with Tokio, Tower, and Hyper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;axum&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a web application framework that focuses on ergonomics and modularity.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/tokio-rs/axum/actions/workflows/CI.yml"&gt;&lt;img src="https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build status" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/axum"&gt;&lt;img src="https://img.shields.io/crates/v/axum" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/axum"&gt;&lt;img src="https://docs.rs/axum/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;More information about this crate can be found in the &lt;a href="https://docs.rs/axum"&gt;crate documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;High level features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Route requests to handlers with a macro free API.&lt;/li&gt; 
 &lt;li&gt;Declaratively parse requests using extractors.&lt;/li&gt; 
 &lt;li&gt;Simple and predictable error handling model.&lt;/li&gt; 
 &lt;li&gt;Generate responses with minimal boilerplate.&lt;/li&gt; 
 &lt;li&gt;Take full advantage of the &lt;a href="https://crates.io/crates/tower"&gt;&lt;code&gt;tower&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://crates.io/crates/tower-http"&gt;&lt;code&gt;tower-http&lt;/code&gt;&lt;/a&gt; ecosystem of middleware, services, and utilities.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In particular the last point is what sets &lt;code&gt;axum&lt;/code&gt; apart from other frameworks. &lt;code&gt;axum&lt;/code&gt; doesn't have its own middleware system but instead uses &lt;a href="https://docs.rs/tower/latest/tower/trait.Service.html"&gt;&lt;code&gt;tower::Service&lt;/code&gt;&lt;/a&gt;. This means &lt;code&gt;axum&lt;/code&gt; gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://crates.io/crates/tonic"&gt;&lt;code&gt;tonic&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;⚠ Breaking changes ⚠&lt;/h2&gt; 
&lt;p&gt;We are currently working towards axum 0.9 so the &lt;code&gt;main&lt;/code&gt; branch contains breaking changes. See the &lt;a href="https://github.com/tokio-rs/axum/tree/v0.8.x"&gt;&lt;code&gt;0.8.x&lt;/code&gt;&lt;/a&gt; branch for what's released to crates.io.&lt;/p&gt; 
&lt;h2&gt;Usage example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use axum::{
    routing::{get, post},
    http::StatusCode,
    Json, Router,
};
use serde::{Deserialize, Serialize};

#[tokio::main]
async fn main() {
    // initialize tracing
    tracing_subscriber::fmt::init();

    // build our application with a route
    let app = Router::new()
        // `GET /` goes to `root`
        .route("/", get(root))
        // `POST /users` goes to `create_user`
        .route("/users", post(create_user));

    // run our app with hyper, listening globally on port 3000
    let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();
    axum::serve(listener, app).await.unwrap();
}

// basic handler that responds with a static string
async fn root() -&amp;gt; &amp;amp;'static str {
    "Hello, World!"
}

async fn create_user(
    // this argument tells axum to parse the request body
    // as JSON into a `CreateUser` type
    Json(payload): Json&amp;lt;CreateUser&amp;gt;,
) -&amp;gt; (StatusCode, Json&amp;lt;User&amp;gt;) {
    // insert your application logic here
    let user = User {
        id: 1337,
        username: payload.username,
    };

    // this will be converted into a JSON response
    // with a status code of `201 Created`
    (StatusCode::CREATED, Json(user))
}

// the input to our `create_user` handler
#[derive(Deserialize)]
struct CreateUser {
    username: String,
}

// the output to our `create_user` handler
#[derive(Serialize)]
struct User {
    id: u64,
    username: String,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find this &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples/readme"&gt;example&lt;/a&gt; as well as other example projects in the &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;example directory&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See the &lt;a href="https://docs.rs/axum"&gt;crate documentation&lt;/a&gt; for way more examples.&lt;/p&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;axum&lt;/code&gt; is a relatively thin layer on top of &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt; and adds very little overhead. So &lt;code&gt;axum&lt;/code&gt;'s performance is comparable to &lt;a href="https://crates.io/crates/hyper"&gt;&lt;code&gt;hyper&lt;/code&gt;&lt;/a&gt;. You can find benchmarks &lt;a href="https://github.com/programatik29/rust-web-benchmarks"&gt;here&lt;/a&gt; and &lt;a href="https://web-frameworks-benchmark.netlify.app/result?l=rust"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Safety&lt;/h2&gt; 
&lt;p&gt;This crate uses &lt;code&gt;#![forbid(unsafe_code)]&lt;/code&gt; to ensure everything is implemented in 100% safe Rust.&lt;/p&gt; 
&lt;h2&gt;Minimum supported Rust version&lt;/h2&gt; 
&lt;p&gt;axum's MSRV is 1.78.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;examples&lt;/a&gt; folder contains various examples of how to use &lt;code&gt;axum&lt;/code&gt;. The &lt;a href="https://docs.rs/axum"&gt;docs&lt;/a&gt; also provide lots of code snippets and examples. For full-fledged examples, check out community-maintained &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase"&gt;showcases&lt;/a&gt; or &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials"&gt;tutorials&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;In the &lt;code&gt;axum&lt;/code&gt;'s repo we also have a &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples"&gt;number of examples&lt;/a&gt; showing how to put everything together. Community-maintained &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#project-showcase"&gt;showcases&lt;/a&gt; and &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md#tutorials"&gt;tutorials&lt;/a&gt; also demonstrate how to use &lt;code&gt;axum&lt;/code&gt; for real-world applications. You're also welcome to ask in the &lt;a href="https://discord.gg/tokio"&gt;Discord channel&lt;/a&gt; or open a &lt;a href="https://github.com/tokio-rs/axum/discussions/new?category=q-a"&gt;discussion&lt;/a&gt; with your question.&lt;/p&gt; 
&lt;h2&gt;Community projects&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/tokio-rs/axum/raw/main/ECOSYSTEM.md"&gt;here&lt;/a&gt; for a list of community maintained crates and projects built with &lt;code&gt;axum&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;🎈 Thanks for your help improving the project! We are so happy to have you! We have a &lt;a href="https://github.com/tokio-rs/axum/raw/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; to help you get involved in the &lt;code&gt;axum&lt;/code&gt; project.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the &lt;a href="https://github.com/tokio-rs/axum/raw/main/axum/LICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in &lt;code&gt;axum&lt;/code&gt; by you, shall be licensed as MIT, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rustup</title>
      <link>https://github.com/rust-lang/rustup</link>
      <description>&lt;p&gt;The Rust toolchain installer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rustup: the Rust toolchain installer&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/rust-lang/rustup/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Rustup&lt;/em&gt; installs &lt;a href="https://www.rust-lang.org"&gt;The Rust Programming Language&lt;/a&gt; from the official release channels, enabling you to easily switch between stable, beta, and nightly compilers and keep them updated. It makes cross-compiling simpler with binary builds of the standard library for common platforms. And it runs on all platforms Rust supports, including Windows.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://rust-lang.github.io/rustup/"&gt;&lt;strong&gt;The Rustup book&lt;/strong&gt;&lt;/a&gt; for documentation on installing and using Rustup.&lt;/p&gt; 
&lt;p&gt;The latest documentation for the master branch can be found under &lt;a href="https://rust-lang.github.io/rustup/devel/"&gt;devel&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://rust-lang.github.io/rustup/dev-guide"&gt;&lt;strong&gt;The Rustup dev guide&lt;/strong&gt;&lt;/a&gt; for information on contributing to Rustup.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright Diggory Blake, the Mozilla Corporation, and Rustup contributors.&lt;/p&gt; 
&lt;p&gt;Licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://raw.githubusercontent.com/rust-lang/rustup/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/rust-lang/rustup/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="https://opensource.org/licenses/MIT"&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt; 
&lt;!-- Badges --&gt;</description>
    </item>
    
    <item>
      <title>cloudflare/quiche</title>
      <link>https://github.com/cloudflare/quiche</link>
      <description>&lt;p&gt;🥧 Savoury implementation of the QUIC transport protocol and HTTP/3&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/cloudflare/quiche/master/quiche.svg?sanitize=true" alt="quiche" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/quiche"&gt;&lt;img src="https://img.shields.io/crates/v/quiche.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/quiche"&gt;&lt;img src="https://docs.rs/quiche/badge.svg?sanitize=true" alt="docs.rs" /&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/BSD-2-Clause"&gt;&lt;img src="https://img.shields.io/github/license/cloudflare/quiche.svg?sanitize=true" alt="license" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/actions/workflow/status/cloudflare/quiche/stable.yml?branch=master" alt="build" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.quic.tech/quiche/"&gt;quiche&lt;/a&gt; is an implementation of the QUIC transport protocol and HTTP/3 as specified by the &lt;a href="https://quicwg.org/"&gt;IETF&lt;/a&gt;. It provides a low level API for processing QUIC packets and handling connection state. The application is responsible for providing I/O (e.g. sockets handling) as well as an event loop with support for timers.&lt;/p&gt; 
&lt;p&gt;For more information on how quiche came about and some insights into its design you can read a &lt;a href="https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/"&gt;post&lt;/a&gt; on Cloudflare's blog that goes into some more detail.&lt;/p&gt; 
&lt;h2&gt;Who uses quiche?&lt;/h2&gt; 
&lt;h3&gt;Cloudflare&lt;/h3&gt; 
&lt;p&gt;quiche powers Cloudflare edge network's &lt;a href="https://blog.cloudflare.com/http3-the-past-present-and-future/"&gt;HTTP/3 support&lt;/a&gt;. The &lt;a href="https://cloudflare-quic.com"&gt;cloudflare-quic.com&lt;/a&gt; website can be used for testing and experimentation.&lt;/p&gt; 
&lt;h3&gt;Android&lt;/h3&gt; 
&lt;p&gt;Android's DNS resolver uses quiche to &lt;a href="https://security.googleblog.com/2022/07/dns-over-http3-in-android.html"&gt;implement DNS over HTTP/3&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;curl&lt;/h3&gt; 
&lt;p&gt;quiche can be &lt;a href="https://github.com/curl/curl/raw/master/docs/HTTP3.md#quiche-version"&gt;integrated into curl&lt;/a&gt; to provide support for HTTP/3.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Command-line apps&lt;/h3&gt; 
&lt;p&gt;Before diving into the quiche API, here are a few examples on how to use the quiche tools provided as part of the &lt;a href="https://raw.githubusercontent.com/cloudflare/quiche/master/apps/"&gt;quiche-apps&lt;/a&gt; crate.&lt;/p&gt; 
&lt;p&gt;After cloning the project according to the command mentioned in the &lt;a href="https://raw.githubusercontent.com/cloudflare/quiche/master/#building"&gt;building&lt;/a&gt; section, the client can be run as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo run --bin quiche-client -- https://cloudflare-quic.com/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;while the server can be run as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo run --bin quiche-server -- --cert apps/src/bin/cert.crt --key apps/src/bin/cert.key
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(note that the certificate provided is self-signed and should not be used in production)&lt;/p&gt; 
&lt;p&gt;Use the &lt;code&gt;--help&lt;/code&gt; command-line flag to get a more detailed description of each tool's options.&lt;/p&gt; 
&lt;h3&gt;Configuring connections&lt;/h3&gt; 
&lt;p&gt;The first step in establishing a QUIC connection using quiche is creating a &lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let mut config = quiche::Config::new(quiche::PROTOCOL_VERSION)?;
config.set_application_protos(&amp;amp;[b"example-proto"]);

// Additional configuration specific to application and use case...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; object controls important aspects of the QUIC connection such as QUIC version, ALPN IDs, flow control, congestion control, idle timeout and other properties or features.&lt;/p&gt; 
&lt;p&gt;QUIC is a general-purpose transport protocol and there are several configuration properties where there is no reasonable default value. For example, the permitted number of concurrent streams of any particular type is dependent on the application running over QUIC, and other use-case specific concerns.&lt;/p&gt; 
&lt;p&gt;quiche defaults several properties to zero, applications most likely need to set these to something else to satisfy their needs using the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_streams_bidi"&gt;&lt;code&gt;set_initial_max_streams_bidi()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_streams_uni"&gt;&lt;code&gt;set_initial_max_streams_uni()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_data"&gt;&lt;code&gt;set_initial_max_data()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_bidi_local"&gt;&lt;code&gt;set_initial_max_stream_data_bidi_local()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_bidi_remote"&gt;&lt;code&gt;set_initial_max_stream_data_bidi_remote()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/quiche/latest/quiche/struct.Config.html#method.set_initial_max_stream_data_uni"&gt;&lt;code&gt;set_initial_max_stream_data_uni()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://docs.quic.tech/quiche/struct.Config.html"&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; also holds TLS configuration. This can be changed by mutators on the an existing object, or by constructing a TLS context manually and creating a configuration using &lt;a href="https://docs.quic.tech/quiche/struct.Config.html#method.with_boring_ssl_ctx_builder"&gt;&lt;code&gt;with_boring_ssl_ctx_builder()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A configuration object can be shared among multiple connections.&lt;/p&gt; 
&lt;h3&gt;Connection setup&lt;/h3&gt; 
&lt;p&gt;On the client-side the &lt;a href="https://docs.quic.tech/quiche/fn.connect.html"&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; utility function can be used to create a new connection, while &lt;a href="https://docs.quic.tech/quiche/fn.accept.html"&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/a&gt; is for servers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// Client connection.
let conn = quiche::connect(Some(&amp;amp;server_name), &amp;amp;scid, local, peer, &amp;amp;mut config)?;

// Server connection.
let conn = quiche::accept(&amp;amp;scid, None, local, peer, &amp;amp;mut config)?;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Handling incoming packets&lt;/h3&gt; 
&lt;p&gt;Using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.recv"&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; method the application can process incoming packets that belong to that connection from the network:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let to = socket.local_addr().unwrap();

loop {
    let (read, from) = socket.recv_from(&amp;amp;mut buf).unwrap();

    let recv_info = quiche::RecvInfo { from, to };

    let read = match conn.recv(&amp;amp;mut buf[..read], recv_info) {
        Ok(v) =&amp;gt; v,

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Generating outgoing packets&lt;/h3&gt; 
&lt;p&gt;Outgoing packet are generated using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.send"&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;loop {
    let (write, send_info) = match conn.send(&amp;amp;mut out) {
        Ok(v) =&amp;gt; v,

        Err(quiche::Error::Done) =&amp;gt; {
            // Done writing.
            break;
        },

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };

    socket.send_to(&amp;amp;out[..write], &amp;amp;send_info.to).unwrap();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When packets are sent, the application is responsible for maintaining a timer to react to time-based connection events. The timer expiration can be obtained using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.timeout"&gt;&lt;code&gt;timeout()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;let timeout = conn.timeout();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The application is responsible for providing a timer implementation, which can be specific to the operating system or networking framework used. When a timer expires, the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.on_timeout"&gt;&lt;code&gt;on_timeout()&lt;/code&gt;&lt;/a&gt; method should be called, after which additional packets might need to be sent on the network:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;// Timeout expired, handle it.
conn.on_timeout();

// Send more packets as needed after timeout.
loop {
    let (write, send_info) = match conn.send(&amp;amp;mut out) {
        Ok(v) =&amp;gt; v,

        Err(quiche::Error::Done) =&amp;gt; {
            // Done writing.
            break;
        },

        Err(e) =&amp;gt; {
            // An error occurred, handle it.
            break;
        },
    };

    socket.send_to(&amp;amp;out[..write], &amp;amp;send_info.to).unwrap();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Pacing&lt;/h4&gt; 
&lt;p&gt;It is recommended that applications &lt;a href="https://datatracker.ietf.org/doc/html/rfc9002#section-7.7"&gt;pace&lt;/a&gt; sending of outgoing packets to avoid creating packet bursts that could cause short-term congestion and losses in the network.&lt;/p&gt; 
&lt;p&gt;quiche exposes pacing hints for outgoing packets through the [&lt;code&gt;at&lt;/code&gt;] field of the [&lt;code&gt;SendInfo&lt;/code&gt;] structure that is returned by the &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.send"&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method. This field represents the time when a specific packet should be sent into the network.&lt;/p&gt; 
&lt;p&gt;Applications can use these hints by artificially delaying the sending of packets through platform-specific mechanisms (such as the &lt;a href="https://man7.org/linux/man-pages/man8/tc-etf.8.html"&gt;&lt;code&gt;SO_TXTIME&lt;/code&gt;&lt;/a&gt; socket option on Linux), or custom methods (for example by using user-space timers).&lt;/p&gt; 
&lt;h3&gt;Sending and receiving stream data&lt;/h3&gt; 
&lt;p&gt;After some back and forth, the connection will complete its handshake and will be ready for sending or receiving application data.&lt;/p&gt; 
&lt;p&gt;Data can be sent on a stream by using the &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.stream_send"&gt;&lt;code&gt;stream_send()&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;if conn.is_established() {
    // Handshake completed, send some data on stream 0.
    conn.stream_send(0, b"hello", true)?;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The application can check whether there are any readable streams by using the connection's &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.readable"&gt;&lt;code&gt;readable()&lt;/code&gt;&lt;/a&gt; method, which returns an iterator over all the streams that have outstanding data to read.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://docs.quic.tech/quiche/struct.Connection.html#method.stream_recv"&gt;&lt;code&gt;stream_recv()&lt;/code&gt;&lt;/a&gt; method can then be used to retrieve the application data from the readable stream:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;if conn.is_established() {
    // Iterate over readable streams.
    for stream_id in conn.readable() {
        // Stream is readable, read until there's no more data.
        while let Ok((read, fin)) = conn.stream_recv(stream_id, &amp;amp;mut buf) {
            println!("Got {} bytes on stream {}", read, stream_id);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;HTTP/3&lt;/h3&gt; 
&lt;p&gt;The quiche &lt;a href="https://docs.quic.tech/quiche/h3/index.html"&gt;HTTP/3 module&lt;/a&gt; provides a high level API for sending and receiving HTTP requests and responses on top of the QUIC transport protocol.&lt;/p&gt; 
&lt;p&gt;Have a look at the [quiche/examples/] directory for more complete examples on how to use the quiche API, including examples on how to use quiche in C/C++ applications (see below for more information).&lt;/p&gt; 
&lt;h2&gt;Calling quiche from C/C++&lt;/h2&gt; 
&lt;p&gt;quiche exposes a &lt;a href="https://github.com/cloudflare/quiche/raw/master/quiche/include/quiche.h"&gt;thin C API&lt;/a&gt; on top of the Rust API that can be used to more easily integrate quiche into C/C++ applications (as well as in other languages that allow calling C APIs via some form of FFI). The C API follows the same design of the Rust one, modulo the constraints imposed by the C language itself.&lt;/p&gt; 
&lt;p&gt;When running &lt;code&gt;cargo build&lt;/code&gt;, a static library called &lt;code&gt;libquiche.a&lt;/code&gt; will be built automatically alongside the Rust one. This is fully stand-alone and can be linked directly into C/C++ applications.&lt;/p&gt; 
&lt;p&gt;Note that in order to enable the FFI API, the &lt;code&gt;ffi&lt;/code&gt; feature must be enabled (it is disabled by default), by passing &lt;code&gt;--features ffi&lt;/code&gt; to &lt;code&gt;cargo&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;quiche requires Rust 1.82 or later to build. The latest stable Rust release can be installed using &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Once the Rust build environment is setup, the quiche source code can be fetched using git:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ git clone --recursive https://github.com/cloudflare/quiche
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then built using cargo:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo build --examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;cargo can also be used to run the testsuite:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;a href="https://boringssl.googlesource.com/boringssl/"&gt;BoringSSL&lt;/a&gt;, which is used to implement QUIC's cryptographic handshake based on TLS, needs to be built and linked to quiche. This is done automatically when building quiche using cargo, but requires the &lt;code&gt;cmake&lt;/code&gt; command to be available during the build process. On Windows you also need &lt;a href="https://www.nasm.us/"&gt;NASM&lt;/a&gt;. The &lt;a href="https://github.com/google/boringssl/raw/master/BUILDING.md"&gt;official BoringSSL documentation&lt;/a&gt; has more details.&lt;/p&gt; 
&lt;p&gt;In alternative you can use your own custom build of BoringSSL by configuring the BoringSSL directory with the &lt;code&gt;QUICHE_BSSL_PATH&lt;/code&gt; environment variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ QUICHE_BSSL_PATH="/path/to/boringssl" cargo build --examples
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively you can use &lt;a href="https://github.com/quictls/openssl"&gt;OpenSSL/quictls&lt;/a&gt;. To enable quiche to use this vendor the &lt;code&gt;openssl&lt;/code&gt; feature can be added to the &lt;code&gt;--feature&lt;/code&gt; list. Be aware that &lt;code&gt;0-RTT&lt;/code&gt; is not supported if this vendor is used.&lt;/p&gt; 
&lt;h3&gt;Building for Android&lt;/h3&gt; 
&lt;p&gt;Building quiche for Android (NDK version 19 or higher, 21 recommended), can be done using &lt;a href="https://docs.rs/crate/cargo-ndk"&gt;cargo-ndk&lt;/a&gt; (v2.0 or later).&lt;/p&gt; 
&lt;p&gt;First the &lt;a href="https://developer.android.com/ndk"&gt;Android NDK&lt;/a&gt; needs to be installed, either using Android Studio or directly, and the &lt;code&gt;ANDROID_NDK_HOME&lt;/code&gt; environment variable needs to be set to the NDK installation path, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ export ANDROID_NDK_HOME=/usr/local/share/android-ndk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then the Rust toolchain for the Android architectures needed can be installed as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that the minimum API level is 21 for all target architectures.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://docs.rs/crate/cargo-ndk"&gt;cargo-ndk&lt;/a&gt; (v2.0 or later) also needs to be installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo install cargo-ndk
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally the quiche library can be built using the following procedure. Note that the &lt;code&gt;-t &amp;lt;architecture&amp;gt;&lt;/code&gt; and &lt;code&gt;-p &amp;lt;NDK version&amp;gt;&lt;/code&gt; options are mandatory.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo ndk -t arm64-v8a -p 21 -- build --features ffi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://github.com/cloudflare/quiche/raw/master/tools/android/build_android_ndk19.sh"&gt;build_android_ndk19.sh&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Building for iOS&lt;/h3&gt; 
&lt;p&gt;To build quiche for iOS, you need the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install Xcode command-line tools. You can install them with Xcode or with the following command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ xcode-select --install
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install the Rust toolchain for iOS architectures:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ rustup target add aarch64-apple-ios x86_64-apple-ios
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;code&gt;cargo-lipo&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo install cargo-lipo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To build libquiche, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo lipo --features ffi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ cargo lipo --features ffi --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;iOS build is tested in Xcode 10.1 and Xcode 11.2.&lt;/p&gt; 
&lt;h3&gt;Building Docker images&lt;/h3&gt; 
&lt;p&gt;In order to build the Docker images, simply run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt; $ make docker-build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find the quiche Docker images on the following Docker Hub repositories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/repository/docker/cloudflare/quiche"&gt;cloudflare/quiche&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://hub.docker.com/repository/docker/cloudflare/quiche-qns"&gt;cloudflare/quiche-qns&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;latest&lt;/code&gt; tag will be updated whenever quiche master branch updates.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;cloudflare/quiche&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Provides a server and client installed in /usr/local/bin.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;cloudflare/quiche-qns&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Provides the script to test quiche within the &lt;a href="https://github.com/marten-seemann/quic-interop-runner"&gt;quic-interop-runner&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2018-2019, Cloudflare, Inc.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/cloudflare/quiche/tree/master/COPYING"&gt;COPYING&lt;/a&gt; for the license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>firecracker-microvm/firecracker</title>
      <link>https://github.com/firecracker-microvm/firecracker</link>
      <description>&lt;p&gt;Secure and fast microVMs for serverless computing.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="docs/images/fc_logo_full_transparent-bg_white-fg.png" /&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="docs/images/fc_logo_full_transparent-bg.png" /&gt; 
 &lt;img alt="Firecracker Logo Title" width="750" src="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/images/fc_logo_full_transparent-bg.png" /&gt; 
&lt;/picture&gt; 
&lt;p&gt;Our mission is to enable secure, multi-tenant, minimal-overhead execution of container and function workloads.&lt;/p&gt; 
&lt;p&gt;Read more about the Firecracker Charter &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;What is Firecracker?&lt;/h2&gt; 
&lt;p&gt;Firecracker is an open source virtualization technology that is purpose-built for creating and managing secure, multi-tenant container and function-based services that provide serverless operational models. Firecracker runs workloads in lightweight virtual machines, called microVMs, which combine the security and isolation properties provided by hardware virtualization technology with the speed and flexibility of containers.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;The main component of Firecracker is a virtual machine monitor (VMM) that uses the Linux Kernel Virtual Machine (KVM) to create and run microVMs. Firecracker has a minimalist design. It excludes unnecessary devices and guest-facing functionality to reduce the memory footprint and attack surface area of each microVM. This improves security, decreases the startup time, and increases hardware utilization. Firecracker has also been integrated in container runtimes, for example &lt;a href="https://github.com/kata-containers/kata-containers"&gt;Kata Containers&lt;/a&gt; and &lt;a href="https://github.com/liquidmetal-dev/flintlock"&gt;Flintlock&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Firecracker was developed at Amazon Web Services to accelerate the speed and efficiency of services like &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; and &lt;a href="https://aws.amazon.com/fargate/"&gt;AWS Fargate&lt;/a&gt;. Firecracker is open sourced under &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/LICENSE"&gt;Apache version 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To read more about Firecracker, check out &lt;a href="https://firecracker-microvm.github.io"&gt;firecracker-microvm.io&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;To get started with Firecracker, download the latest &lt;a href="https://github.com/firecracker-microvm/firecracker/releases"&gt;release&lt;/a&gt; binaries or build it from source.&lt;/p&gt; 
&lt;p&gt;You can build Firecracker on any Unix/Linux system that has Docker running (we use a development container) and &lt;code&gt;bash&lt;/code&gt; installed, as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;git clone https://github.com/firecracker-microvm/firecracker
cd firecracker
tools/devtool build
toolchain="$(uname -m)-unknown-linux-musl"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Firecracker binary will be placed at &lt;code&gt;build/cargo_target/${toolchain}/debug/firecracker&lt;/code&gt;. For more information on building, testing, and running Firecracker, go to the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md"&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The overall security of Firecracker microVMs, including the ability to meet the criteria for safe multi-tenant computing, depends on a well configured Linux host operating system. A configuration that we believe meets this bar is included in &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/prod-host-setup.md"&gt;the production host setup document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Firecracker is already running production workloads within AWS, but it's still Day 1 on the journey guided by our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHARTER.md"&gt;mission&lt;/a&gt;. There's a lot more to build and we welcome all contributions.&lt;/p&gt; 
&lt;p&gt;To contribute to Firecracker, check out the development setup section in the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/getting-started.md"&gt;getting started guide&lt;/a&gt; and then the Firecracker &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;New Firecracker versions are released via the GitHub repository &lt;a href="https://github.com/firecracker-microvm/firecracker/releases"&gt;releases&lt;/a&gt; page, typically every two or three months. A history of changes is recorded in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CHANGELOG.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Firecracker release policy is detailed &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/RELEASE_POLICY.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Design&lt;/h2&gt; 
&lt;p&gt;Firecracker's overall architecture is described in &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/design.md"&gt;the design document&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features &amp;amp; Capabilities&lt;/h2&gt; 
&lt;p&gt;Firecracker consists of a single micro Virtual Machine Manager process that exposes an API endpoint to the host once started. The API is &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/src/firecracker/swagger/firecracker.yaml"&gt;specified in OpenAPI format&lt;/a&gt;. Read more about it in the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/api_requests"&gt;API docs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;strong&gt;API endpoint&lt;/strong&gt; can be used to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Configure the microvm by: 
  &lt;ul&gt; 
   &lt;li&gt;Setting the number of vCPUs (the default is 1).&lt;/li&gt; 
   &lt;li&gt;Setting the memory size (the default is 128 MiB).&lt;/li&gt; 
   &lt;li&gt;Configuring a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/cpu_templates/cpu-templates.md"&gt;CPU template&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Add one or more network interfaces to the microVM.&lt;/li&gt; 
 &lt;li&gt;Add one or more read-write or read-only disks to the microVM, each represented by a file-backed block device.&lt;/li&gt; 
 &lt;li&gt;Trigger a block device re-scan while the guest is running. This enables the guest OS to pick up size changes to the block device's backing file.&lt;/li&gt; 
 &lt;li&gt;Change the backing file for a block device, before or after the guest boots.&lt;/li&gt; 
 &lt;li&gt;Configure rate limiters for virtio devices which can limit the bandwidth, operations per second, or both.&lt;/li&gt; 
 &lt;li&gt;Configure the logging and metric system.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[BETA]&lt;/code&gt; Configure the data tree of the guest-facing metadata service. The service is only available to the guest if this resource is configured.&lt;/li&gt; 
 &lt;li&gt;Add a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/vsock.md"&gt;vsock socket&lt;/a&gt; to the microVM.&lt;/li&gt; 
 &lt;li&gt;Add a &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/entropy.md"&gt;entropy device&lt;/a&gt; to the microVM.&lt;/li&gt; 
 &lt;li&gt;Start the microVM using a given kernel image, root file system, and boot arguments.&lt;/li&gt; 
 &lt;li&gt;[x86_64 only] Stop the microVM.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Built-in Capabilities&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Demand fault paging and CPU oversubscription enabled by default.&lt;/li&gt; 
 &lt;li&gt;Advanced, thread-specific seccomp filters for enhanced security.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/docs/jailer.md"&gt;Jailer&lt;/a&gt; process for starting Firecracker in production scenarios; applies a cgroup/namespace isolation barrier and then drops privileges.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tested platforms&lt;/h2&gt; 
&lt;p&gt;We test all combinations of:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Instance&lt;/th&gt; 
   &lt;th align="left"&gt;Host OS &amp;amp; Kernel&lt;/th&gt; 
   &lt;th align="left"&gt;Guest Rootfs&lt;/th&gt; 
   &lt;th align="left"&gt;Guest Kernel&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m5n.metal (Intel Cascade Lake)&lt;/td&gt; 
   &lt;td align="left"&gt;al2 linux_5.10&lt;/td&gt; 
   &lt;td align="left"&gt;ubuntu 24.04&lt;/td&gt; 
   &lt;td align="left"&gt;linux_5.10&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6i.metal (Intel Ice Lake)&lt;/td&gt; 
   &lt;td align="left"&gt;al2023 linux_6.1&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;linux_6.1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7i.metal-24xl (Intel Sapphire Rapids)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7i.metal-48xl (Intel Sapphire Rapids)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6a.metal (AMD Milan)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7a.metal-48xl (AMD Genoa)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m6g.metal (Graviton 2)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m7g.metal (Graviton 3)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m8g.metal-24xl (Graviton 4)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;m8g.metal-48xl (Graviton 4)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Known issues and Limitations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;pl031&lt;/code&gt; RTC device on aarch64 does not support interrupts, so guest programs which use an RTC alarm (e.g. &lt;code&gt;hwclock&lt;/code&gt;) will not work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;Firecracker's performance characteristics are listed as part of the &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SPECIFICATION.md"&gt;specification documentation&lt;/a&gt;. All specifications are a part of our commitment to supporting container and function workloads in serverless operational models, and are therefore enforced via continuous integration testing.&lt;/p&gt; 
&lt;h2&gt;Policy for Security Disclosures&lt;/h2&gt; 
&lt;p&gt;The security of Firecracker is our top priority. If you suspect you have uncovered a vulnerability, contact us privately, as outlined in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md"&gt;security policy document&lt;/a&gt;; we will immediately prioritize your disclosure.&lt;/p&gt; 
&lt;h2&gt;FAQ &amp;amp; Contact&lt;/h2&gt; 
&lt;p&gt;Frequently asked questions are collected in our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/FAQ.md"&gt;FAQ doc&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can get in touch with the Firecracker community in the following ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Security-related issues, see our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/SECURITY.md"&gt;security policy document&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Chat with us on our &lt;a href="https://join.slack.com/t/firecracker-microvm/shared_invite/zt-2tc0mfxpc-tU~HYAYSzLDl5XGGJU3YIg"&gt;Slack workspace&lt;/a&gt; &lt;em&gt;Note: most of the maintainers are on a European time zone.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Open a GitHub issue in this repository.&lt;/li&gt; 
 &lt;li&gt;Email the maintainers at &lt;a href="mailto:firecracker-maintainers@amazon.com"&gt;firecracker-maintainers@amazon.com&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When communicating within the Firecracker community, please mind our &lt;a href="https://raw.githubusercontent.com/firecracker-microvm/firecracker/main/CODE_OF_CONDUCT.md"&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jdx/mise</title>
      <link>https://github.com/jdx/mise</link>
      <description>&lt;p&gt;dev tools, env vars, task runner&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;&lt;a href="https://mise.jdx.dev"&gt; &lt;img src="https://github.com/jdx/mise/assets/216188/27a8ea18-9383-4d86-a445-305b9a6248c1" alt="mise-logo" width="400" /&gt;&lt;br /&gt; mise-en-place &lt;/a&gt;&lt;/h1&gt; 
 &lt;!-- &lt;a href="https://mise.jdx.dev"&gt;&lt;picture&gt; --&gt; 
 &lt;!--   &lt;source media="(prefers-color-scheme: dark)" width="617" srcset="./docs/logo-dark@2x.png"&gt; --&gt; 
 &lt;!--   &lt;img alt="mise logo" width="617" src="./docs/logo-light@2x.png"&gt; --&gt; 
 &lt;!-- &lt;/picture&gt;&lt;/a&gt; --&gt; 
 &lt;a href="https://crates.io/crates/mise"&gt;&lt;img alt="Crates.io" src="https://img.shields.io/crates/v/mise?style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/raw/main/LICENSE"&gt;&lt;img alt="GitHub" src="https://img.shields.io/github/license/jdx/mise?color=%2344CC11&amp;amp;style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/jdx/mise/actions/workflows/test.yml"&gt;&lt;img alt="GitHub Workflow Status" src="https://img.shields.io/github/actions/workflow/status/jdx/mise/test.yml?style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;a href="https://discord.gg/mABnUDvP57"&gt;&lt;img alt="Discord" src="https://img.shields.io/discord/1066429325269794907?color=%23738ADB&amp;amp;style=for-the-badge" /&gt;&lt;/a&gt; 
 &lt;p&gt;&lt;em&gt;The front-end to your dev env.&lt;/em&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;What is it?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Like &lt;a href="https://asdf-vm.com"&gt;asdf&lt;/a&gt; (or &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; or &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; but for any language) it manages &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; like node, python, cmake, terraform, and &lt;a href="https://mise.jdx.dev/registry.html"&gt;hundreds more&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/environments/"&gt;environment variables&lt;/a&gt; for different project directories.&lt;/li&gt; 
 &lt;li&gt;Like &lt;a href="https://www.gnu.org/software/make/manual/make.html"&gt;make&lt;/a&gt; it manages &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; used to build and test projects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;The following demo shows how to install and use &lt;code&gt;mise&lt;/code&gt; to manage multiple versions of &lt;code&gt;node&lt;/code&gt; on the same system. Note that calling &lt;code&gt;which node&lt;/code&gt; gives us a real path to node, not a shim.&lt;/p&gt; 
&lt;p&gt;It also shows that you can use &lt;code&gt;mise&lt;/code&gt; to install and many other tools such as &lt;code&gt;jq&lt;/code&gt;, &lt;code&gt;terraform&lt;/code&gt;, or &lt;code&gt;go&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://mise.jdx.dev/demo.html"&gt;&lt;img src="https://raw.githubusercontent.com/jdx/mise/main/docs/tapes/demo.gif" alt="demo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/demo.html"&gt;demo transcript&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt;Install mise&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/getting-started.html"&gt;Getting started&lt;/a&gt; for more options.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ curl https://mise.run | sh
$ ~/.local/bin/mise --version
2025.8.21 macos-arm64 (a1b2d3e 2025-08-27)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Hook mise into your shell (pick the right one for your shell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;# note this assumes mise is located at ~/.local/bin/mise
# which is what https://mise.run does by default
echo 'eval "$(~/.local/bin/mise activate bash)"' &amp;gt;&amp;gt; ~/.bashrc
echo 'eval "$(~/.local/bin/mise activate zsh)"' &amp;gt;&amp;gt; ~/.zshrc
echo '~/.local/bin/mise activate fish | source' &amp;gt;&amp;gt; ~/.config/fish/config.fish
echo '~/.local/bin/mise activate pwsh | Out-String | Invoke-Expression' &amp;gt;&amp;gt; ~/.config/powershell/Microsoft.PowerShell_profile.ps1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Execute commands with specific tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise exec node@22 -- node -v
mise node@22.x.x ✓ installed
v22.x.x
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise use --global node@22 go@1
$ node -v
v22.x.x
$ go version
go version go1.x.x macos/arm64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/dev-tools/"&gt;dev tools&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h3&gt;Manage environment variables&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[env]
SOME_VAR = "foo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise set SOME_VAR=bar
$ echo $SOME_VAR
bar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;mise&lt;/code&gt; can also &lt;a href="https://mise.jdx.dev/environments/#env-directives"&gt;load &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Run tasks&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tasks.build]
description = "build the project"
run = "echo building..."
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;$ mise run build
building...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev/tasks/"&gt;tasks&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Example mise project&lt;/h3&gt; 
&lt;p&gt;Here is a combined example to give you an idea of how you can use mise to manage your a project's tools, environment, and tasks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;# mise.toml
[tools]
terraform = "1"
aws-cli = "2"

[env]
TF_WORKSPACE = "development"
AWS_REGION = "us-west-2"
AWS_PROFILE = "dev"

[tasks.plan]
description = "Run terraform plan with configured workspace"
run = """
terraform init
terraform workspace select $TF_WORKSPACE
terraform plan
"""

[tasks.validate]
description = "Validate AWS credentials and terraform config"
run = """
aws sts get-caller-identity
terraform validate
"""

[tasks.deploy]
description = "Deploy infrastructure after validation"
depends = ["validate", "plan"]
run = "terraform apply -auto-approve"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh-session"&gt;mise install # install tools specified in mise.toml
mise run deploy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Find more examples in the &lt;a href="https://mise.jdx.dev/mise-cookbook/"&gt;mise cookbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Full Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://mise.jdx.dev"&gt;mise.jdx.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;p&gt;We're grateful for Cloudflare's support through &lt;a href="https://www.cloudflare.com/lp/project-alexandria/"&gt;Project Alexandria&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/jdx/mise/graphs/contributors"&gt;&lt;img src="https://contrib.rocks/image?repo=jdx/mise" alt="Contributors" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iced-rs/iced</title>
      <link>https://github.com/iced-rs/iced</link>
      <description>&lt;p&gt;A cross-platform GUI library for Rust, inspired by Elm&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/iced-rs/iced/master/docs/logo.svg?sanitize=true" width="140px" /&gt; 
 &lt;h1&gt;Iced&lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://docs.rs/iced/"&gt;&lt;img src="https://docs.rs/iced/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iced"&gt;&lt;img src="https://img.shields.io/crates/v/iced.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/iced-rs/iced/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/iced.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iced"&gt;&lt;img src="https://img.shields.io/crates/d/iced.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/iced-rs/iced/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/iced-rs/iced/test.yml?branch=master&amp;amp;event=push&amp;amp;label=test" alt="Test Status" /&gt;&lt;/a&gt; &lt;a href="https://discourse.iced.rs/"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscourse.iced.rs%2Fsite%2Fstatistics.json&amp;amp;query=%24.users_count&amp;amp;suffix=%20users&amp;amp;label=discourse&amp;amp;color=5e7ce2" alt="Discourse" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/3xZJ65GAhd"&gt;&lt;img src="https://img.shields.io/discord/628993209984614400?label=&amp;amp;labelColor=6A7EC2&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8" alt="Discord Server" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;A cross-platform GUI library for Rust focused on simplicity and type-safety. Inspired by &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt;.&lt;/p&gt; 
 &lt;a href="https://github.com/squidowl/halloy"&gt; &lt;img src="https://iced.rs/showcase/halloy.gif" width="460px" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/hecrj/icebreaker"&gt; &lt;img src="https://iced.rs/showcase/icebreaker.gif" width="360px" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple, easy-to-use, batteries-included API&lt;/li&gt; 
 &lt;li&gt;Type-safe, reactive programming model&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/docs/images/todos_desktop.jpg"&gt;Cross-platform support&lt;/a&gt; (Windows, macOS, Linux, and the Web)&lt;/li&gt; 
 &lt;li&gt;Responsive layout&lt;/li&gt; 
 &lt;li&gt;Built-in widgets (including &lt;a href="https://iced.rs/examples/text_input.mp4"&gt;text inputs&lt;/a&gt;, &lt;a href="https://iced.rs/examples/scrollable.mp4"&gt;scrollables&lt;/a&gt;, and more!)&lt;/li&gt; 
 &lt;li&gt;Custom widget support (create your own!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://iced.rs/examples/debug.mp4"&gt;Debug overlay with performance metrics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;First-class support for async actions (use futures!)&lt;/li&gt; 
 &lt;li&gt;Modular ecosystem split into reusable parts: 
  &lt;ul&gt; 
   &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/runtime/"&gt;renderer-agnostic native runtime&lt;/a&gt; enabling integration with existing systems&lt;/li&gt; 
   &lt;li&gt;Two built-in renderers leveraging &lt;a href="https://github.com/gfx-rs/wgpu"&gt;&lt;code&gt;wgpu&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/RazrFalcon/tiny-skia"&gt;&lt;code&gt;tiny-skia&lt;/code&gt;&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/wgpu/"&gt;&lt;code&gt;iced_wgpu&lt;/code&gt;&lt;/a&gt; supporting Vulkan, Metal and DX12&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/tiny_skia/"&gt;&lt;code&gt;iced_tiny_skia&lt;/code&gt;&lt;/a&gt; offering a software alternative as a fallback&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/winit/"&gt;windowing shell&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Iced is currently experimental software.&lt;/strong&gt; &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/ROADMAP.md"&gt;Take a look at the roadmap&lt;/a&gt; and &lt;a href="https://github.com/iced-rs/iced/issues"&gt;check out the issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Inspired by &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;, Iced expects you to split user interfaces into four different concepts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt; — the state of your application&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Messages&lt;/strong&gt; — user interactions or meaningful events that you care about&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View logic&lt;/strong&gt; — a way to display your &lt;strong&gt;state&lt;/strong&gt; as widgets that may produce &lt;strong&gt;messages&lt;/strong&gt; on user interaction&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update logic&lt;/strong&gt; — a way to react to &lt;strong&gt;messages&lt;/strong&gt; and update your &lt;strong&gt;state&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We can build something to see how this works! Let's say we want a simple counter that can be incremented and decremented using two buttons.&lt;/p&gt; 
&lt;p&gt;We start by modelling the &lt;strong&gt;state&lt;/strong&gt; of our application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Default)]
struct Counter {
    value: i32,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we need to define the possible user interactions of our counter: the button presses. These interactions are our &lt;strong&gt;messages&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Debug, Clone, Copy)]
pub enum Message {
    Increment,
    Decrement,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, let's show the actual counter by putting it all together in our &lt;strong&gt;view logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use iced::widget::{button, column, text, Column};

impl Counter {
    pub fn view(&amp;amp;self) -&amp;gt; Column&amp;lt;Message&amp;gt; {
        // We use a column: a simple vertical layout
        column![
            // The increment button. We tell it to produce an
            // `Increment` message when pressed
            button("+").on_press(Message::Increment),

            // We show the value of the counter here
            text(self.value).size(50),

            // The decrement button. We tell it to produce a
            // `Decrement` message when pressed
            button("-").on_press(Message::Decrement),
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, we need to be able to react to any produced &lt;strong&gt;messages&lt;/strong&gt; and change our &lt;strong&gt;state&lt;/strong&gt; accordingly in our &lt;strong&gt;update logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;impl Counter {
    // ...

    pub fn update(&amp;amp;mut self, message: Message) {
        match message {
            Message::Increment =&amp;gt; {
                self.value += 1;
            }
            Message::Decrement =&amp;gt; {
                self.value -= 1;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that's everything! We just wrote a whole user interface. Let's run it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn main() -&amp;gt; iced::Result {
    iced::run("A cool counter", Counter::update, Counter::view)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Iced will automatically:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Take the result of our &lt;strong&gt;view logic&lt;/strong&gt; and layout its widgets.&lt;/li&gt; 
 &lt;li&gt;Process events from our system and produce &lt;strong&gt;messages&lt;/strong&gt; for our &lt;strong&gt;update logic&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Draw the resulting user interface.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Read the &lt;a href="https://book.iced.rs/"&gt;book&lt;/a&gt;, the &lt;a href="https://docs.rs/iced/"&gt;documentation&lt;/a&gt;, and the &lt;a href="https://github.com/iced-rs/iced/tree/master/examples#examples"&gt;examples&lt;/a&gt; to learn more!&lt;/p&gt; 
&lt;h2&gt;Implementation details&lt;/h2&gt; 
&lt;p&gt;Iced was originally born as an attempt at bringing the simplicity of &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt; and &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt; into &lt;a href="https://github.com/hecrj/coffee"&gt;Coffee&lt;/a&gt;, a 2D game library I am working on.&lt;/p&gt; 
&lt;p&gt;The core of the library was implemented during May 2019 in &lt;a href="https://github.com/hecrj/coffee/pull/35"&gt;this pull request&lt;/a&gt;. &lt;a href="https://github.com/iced-rs/iced/tree/0.1.0-alpha"&gt;The first alpha version&lt;/a&gt; was eventually released as &lt;a href="https://www.reddit.com/r/rust/comments/czzjnv/iced_a_rendereragnostic_gui_library_focused_on/"&gt;a renderer-agnostic GUI library&lt;/a&gt;. The library did not provide a renderer and implemented the current &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/examples/README.md#tour"&gt;tour example&lt;/a&gt; on top of &lt;a href="https://github.com/ggez/ggez"&gt;&lt;code&gt;ggez&lt;/code&gt;&lt;/a&gt;, a game library.&lt;/p&gt; 
&lt;p&gt;Since then, the focus has shifted towards providing a batteries-included, end-user-oriented GUI library, while keeping the ecosystem modular.&lt;/p&gt; 
&lt;h2&gt;Contributing / Feedback&lt;/h2&gt; 
&lt;p&gt;If you want to contribute, please read our &lt;a href="https://github.com/iced-rs/iced/raw/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Feedback is also welcome! You can create a new topic in &lt;a href="https://discourse.iced.rs/"&gt;our Discourse forum&lt;/a&gt; or come chat to &lt;a href="https://discord.gg/3xZJ65GAhd"&gt;our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;The development of Iced is sponsored by the &lt;a href="https://cryptowat.ch/charts"&gt;Cryptowatch&lt;/a&gt; team at &lt;a href="https://kraken.com/"&gt;Kraken.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sigp/lighthouse</title>
      <link>https://github.com/sigp/lighthouse</link>
      <description>&lt;p&gt;Ethereum consensus client in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lighthouse: Ethereum consensus client&lt;/h1&gt; 
&lt;p&gt;An open-source Ethereum consensus client, written in Rust and maintained by Sigma Prime.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://lighthouse-book.sigmaprime.io"&gt;&lt;img src="https://img.shields.io/badge/user--docs-unstable-informational" alt="Book Status" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/cyAszAh"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-%237289da" alt="Chat Badge" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://lighthouse-book.sigmaprime.io"&gt;Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://i.postimg.cc/hjdTGKPd/photo-2020-10-23-09-52-16.jpg" alt="Banner" /&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Lighthouse is:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ready for use on Ethereum consensus mainnet.&lt;/li&gt; 
 &lt;li&gt;Fully open-source, licensed under Apache 2.0.&lt;/li&gt; 
 &lt;li&gt;Security-focused. Fuzzing techniques have been continuously applied and several external security reviews have been performed.&lt;/li&gt; 
 &lt;li&gt;Built in &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;, a modern language providing unique safety guarantees and excellent performance (comparable to C++).&lt;/li&gt; 
 &lt;li&gt;Funded by various organisations, including Sigma Prime, the Ethereum Foundation, Consensys, the Decentralization Foundation and private individuals.&lt;/li&gt; 
 &lt;li&gt;Actively involved in the specification and security analysis of the Ethereum proof-of-stake consensus specification.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Staking Deposit Contract&lt;/h2&gt; 
&lt;p&gt;The Lighthouse team acknowledges &lt;a href="https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa"&gt;&lt;code&gt;0x00000000219ab540356cBB839Cbe05303d7705Fa&lt;/code&gt;&lt;/a&gt; as the canonical staking deposit contract address.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The &lt;a href="https://lighthouse-book.sigmaprime.io"&gt;Lighthouse Book&lt;/a&gt; contains information for users and developers.&lt;/p&gt; 
&lt;p&gt;The Lighthouse team maintains a blog at &lt;a href="https://lighthouse-blog.sigmaprime.io"&gt;https://blog.sigmaprime.io/tag/lighthouse&lt;/a&gt; which contains periodic progress updates, roadmap insights and interesting findings.&lt;/p&gt; 
&lt;h2&gt;Branches&lt;/h2&gt; 
&lt;p&gt;Lighthouse maintains two permanent branches:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigp/lighthouse/tree/stable"&gt;&lt;code&gt;stable&lt;/code&gt;&lt;/a&gt;: Always points to the latest stable release. 
  &lt;ul&gt; 
   &lt;li&gt;This is ideal for most users.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sigp/lighthouse/tree/unstable"&gt;&lt;code&gt;unstable&lt;/code&gt;&lt;/a&gt;: Used for development, contains the latest PRs. 
  &lt;ul&gt; 
   &lt;li&gt;Developers should base their PRs on this branch.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Lighthouse welcomes contributors.&lt;/p&gt; 
&lt;p&gt;If you are looking to contribute, please head to the &lt;a href="https://lighthouse-book.sigmaprime.io/contributing.html"&gt;Contributing&lt;/a&gt; section of the Lighthouse book.&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;The best place for discussion is the &lt;a href="https://discord.gg/cyAszAh"&gt;Lighthouse Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Sign up to the &lt;a href="https://eepurl.com/dh9Lvb"&gt;Lighthouse Development Updates&lt;/a&gt; mailing list for email notifications about releases, network status and other important information.&lt;/p&gt; 
&lt;p&gt;Encrypt sensitive messages using our &lt;a href="https://keybase.io/sigp/pgp_keys.asc?fingerprint=15e66d941f697e28f49381f426416dc3f30674b0"&gt;PGP key&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;Lighthouse is an open-source project and a public good. Funding public goods is hard and we're grateful for the donations we receive from the community via:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://gitcoin.co/grants/25/lighthouse-ethereum-20-client"&gt;Gitcoin Grants&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Ethereum address: &lt;code&gt;0x25c4a76E7d118705e7Ea2e9b7d8C59930d8aCD3b&lt;/code&gt; (donation.sigmaprime.eth).&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zed.dev"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/zed-industries/zed/main/assets/badge/v0.json" alt="Zed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zed-industries/zed/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href="https://github.com/atom/atom"&gt;Atom&lt;/a&gt; and &lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;On macOS and Linux you can &lt;a href="https://zed.dev/download"&gt;download Zed directly&lt;/a&gt; or &lt;a href="https://zed.dev/docs/linux#installing-via-a-package-manager"&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (&lt;a href="https://github.com/zed-industries/zed/issues/5394"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Web (&lt;a href="https://github.com/zed-industries/zed/issues/5396"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md"&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md"&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md"&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md"&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we're hiring! Check out our &lt;a href="https://zed.dev/jobs"&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/EmbarkStudios/cargo-about"&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you've created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate's Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license's requirements. If you're unsure, ask a lawyer. Once you've verified that this system is acceptable add the license's SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href="https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration"&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>chroma-core/chroma</title>
      <link>https://github.com/chroma-core/chroma</link>
      <description>&lt;p&gt;Open-source search and retrieval database for AI applications.&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://trychroma.com"&gt;&lt;img src="https://user-images.githubusercontent.com/891664/227103090-6624bf7d-9524-4e05-9d2c-c28d5d451481.png" alt="Chroma logo" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;b&gt;Chroma - the open-source embedding database&lt;/b&gt;. &lt;br /&gt; The fastest way to build Python or JavaScript LLM apps with memory! &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.gg/MMeYNTmh3x" target="_blank"&gt; &lt;img src="https://img.shields.io/discord/1073293645303795742?cacheSeconds=3600" alt="Discord" /&gt; &lt;/a&gt; | &lt;a href="https://github.com/chroma-core/chroma/raw/master/LICENSE" target="_blank"&gt; &lt;img src="https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true" alt="License" /&gt; &lt;/a&gt; | &lt;a href="https://docs.trychroma.com/" target="_blank"&gt; Docs &lt;/a&gt; | &lt;a href="https://www.trychroma.com/" target="_blank"&gt; Homepage &lt;/a&gt; &lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install chromadb # python client
# for javascript, npm install chromadb!
# for client-server mode, chroma run --path /chroma_db_path
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Chroma Cloud&lt;/h2&gt; 
&lt;p&gt;Our hosted service, Chroma Cloud, powers serverless vector and full-text search. It's extremely fast, cost-effective, scalable and painless. Create a DB and try it out in under 30 seconds with $5 of free credits.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://trychroma.com/signup"&gt;Get started with Chroma Cloud&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;The core API is only 4 functions (run our &lt;a href="https://colab.research.google.com/drive/1QEzFyqnoFxq7LUGyP1vzR4iLt9PpCDXv?usp=sharing"&gt;💡 Google Colab&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;import chromadb
# setup Chroma in-memory, for easy prototyping. Can add persistence easily!
client = chromadb.Client()

# Create collection. get_collection, get_or_create_collection, delete_collection also available!
collection = client.create_collection("all-my-documents")

# Add docs to the collection. Can also update and delete. Row-based API coming soon!
collection.add(
    documents=["This is document1", "This is document2"], # we handle tokenization, embedding, and indexing automatically. You can skip that and add your own embeddings as well
    metadatas=[{"source": "notion"}, {"source": "google-docs"}], # filter on these!
    ids=["doc1", "doc2"], # unique for each doc
)

# Query/search 2 most similar results. You can also .get by id
results = collection.query(
    query_texts=["This is a query document"],
    n_results=2,
    # where={"metadata_field": "is_equal_to_this"}, # optional filter
    # where_document={"$contains":"search_string"}  # optional filter
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn about all features on our &lt;a href="https://docs.trychroma.com"&gt;Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Fully-typed, fully-tested, fully-documented == happiness&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: &lt;a href="https://blog.langchain.dev/langchain-chroma/"&gt;&lt;code&gt;🦜️🔗 LangChain&lt;/code&gt;&lt;/a&gt; (python and js), &lt;a href="https://twitter.com/atroyn/status/1628557389762007040"&gt;&lt;code&gt;🦙 LlamaIndex&lt;/code&gt;&lt;/a&gt; and more soon&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dev, Test, Prod&lt;/strong&gt;: the same API that runs in your python notebook, scales to your cluster&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Feature-rich&lt;/strong&gt;: Queries, filtering, regex and more&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Free &amp;amp; Open Source&lt;/strong&gt;: Apache 2.0 Licensed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Use case: ChatGPT for ______&lt;/h2&gt; 
&lt;p&gt;For example, the &lt;code&gt;"Chat your data"&lt;/code&gt; use case:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add documents to your database. You can pass in your own embeddings, embedding function, or let Chroma embed them for you.&lt;/li&gt; 
 &lt;li&gt;Query relevant documents with natural language.&lt;/li&gt; 
 &lt;li&gt;Compose documents into the context window of an LLM like &lt;code&gt;GPT4&lt;/code&gt; for additional summarization or analysis.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Embeddings?&lt;/h2&gt; 
&lt;p&gt;What are embeddings?&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://platform.openai.com/docs/guides/embeddings/what-are-embeddings"&gt;Read the guide from OpenAI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Literal&lt;/strong&gt;: Embedding something turns it from image/text/audio into a list of numbers. 🖼️ or 📄 =&amp;gt; &lt;code&gt;[1.2, 2.1, ....]&lt;/code&gt;. This process makes documents "understandable" to a machine learning model.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;By analogy&lt;/strong&gt;: An embedding represents the essence of a document. This enables documents and queries with the same essence to be "near" each other and therefore easy to find.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Technical&lt;/strong&gt;: An embedding is the latent-space position of a document at a layer of a deep neural network. For models trained specifically to embed data, this is the last layer.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;A small example&lt;/strong&gt;: If you search your photos for "famous bridge in San Francisco". By embedding this query and comparing it to the embeddings of your photos and their metadata - it should return photos of the Golden Gate Bridge.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Embeddings databases (also known as &lt;strong&gt;vector databases&lt;/strong&gt;) store embeddings and allow you to search by nearest neighbors rather than by substrings like a traditional database. By default, Chroma uses &lt;a href="https://docs.trychroma.com/guides/embeddings#default:-all-minilm-l6-v2"&gt;Sentence Transformers&lt;/a&gt; to embed for you but you can also use OpenAI embeddings, Cohere (multilingual) embeddings, or your own.&lt;/p&gt; 
&lt;h2&gt;Get involved&lt;/h2&gt; 
&lt;p&gt;Chroma is a rapidly developing project. We welcome PR contributors and ideas for how to improve the project.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/MMeYNTmh3x"&gt;Join the conversation on Discord&lt;/a&gt; - &lt;code&gt;#contributing&lt;/code&gt; channel&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.trychroma.com/roadmap"&gt;Review the 🛣️ Roadmap and contribute your ideas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/chroma-core/chroma/issues"&gt;Grab an issue and open a PR&lt;/a&gt; - &lt;a href="https://github.com/chroma-core/chroma/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;&lt;code&gt;Good first issue tag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.trychroma.com/contributing"&gt;Read our contributing guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Release Cadence&lt;/strong&gt; We currently release new tagged versions of the &lt;code&gt;pypi&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; packages on Mondays. Hotfixes go out at any time during the week.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/chroma-core/chroma/main/LICENSE"&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust</title>
      <link>https://github.com/rust-lang/rust</link>
      <description>&lt;p&gt;Empowering everyone to build reliable and efficient software.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg" /&gt; 
  &lt;img alt="The Rust Programming Language: A language empowering everyone to build reliable and efficient software" src="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg?sanitize=true" width="50%" /&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Website&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn/get-started"&gt;Getting started&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn"&gt;Learn&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn#learn-use"&gt;Documentation&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;This is the main source code repository for &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;. It contains the compiler, standard library, and documentation.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Fast and memory-efficient, suitable for critical services, embedded devices, and easily integrated with other languages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliability:&lt;/strong&gt; Our rich type system and ownership model ensure memory and thread safety, reducing bugs at compile-time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Productivity:&lt;/strong&gt; Comprehensive documentation, a compiler committed to providing great diagnostics, and advanced tooling including package manager and build tool (&lt;a href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;), auto-formatter (&lt;a href="https://github.com/rust-lang/rustfmt"&gt;rustfmt&lt;/a&gt;), linter (&lt;a href="https://github.com/rust-lang/rust-clippy"&gt;Clippy&lt;/a&gt;) and editor support (&lt;a href="https://github.com/rust-lang/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Read &lt;a href="https://doc.rust-lang.org/book/ch01-01-installation.html"&gt;"Installation"&lt;/a&gt; from &lt;a href="https://doc.rust-lang.org/book/index.html"&gt;The Book&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing from Source&lt;/h2&gt; 
&lt;p&gt;If you really want to install from source (though this is not recommended), see &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/INSTALL.md"&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://www.rust-lang.org/community"&gt;https://www.rust-lang.org/community&lt;/a&gt; for a list of chat platforms and forums.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rust is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/COPYRIGHT"&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Trademark&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://rustfoundation.org/"&gt;The Rust Foundation&lt;/a&gt; owns and protects the Rust and Cargo trademarks and logos (the "Rust Trademarks").&lt;/p&gt; 
&lt;p&gt;If you want to use these names or brands, please read the &lt;a href="https://rustfoundation.org/policy/rust-trademark-policy/"&gt;Rust language trademark policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Third-party logos may be subject to third-party copyrights and trademarks. See &lt;a href="https://www.rust-lang.org/policies/licenses"&gt;Licenses&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>paritytech/polkadot-sdk</title>
      <link>https://github.com/paritytech/polkadot-sdk</link>
      <description>&lt;p&gt;The Parity Polkadot Blockchain SDK&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/images/Polkadot_Logo_Horizontal_Pink_White.png#gh-dark-mode-only" alt="SDK Logo" /&gt; &lt;img src="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/images/Polkadot_Logo_Horizontal_Pink_Black.png#gh-light-mode-only" alt="SDK Logo" /&gt;&lt;/p&gt; 
 &lt;h1&gt;Polkadot SDK&lt;/h1&gt; 
 &lt;p&gt;&lt;img src="https://img.shields.io/github/stars/paritytech/polkadot-sdk" alt="GitHub stars" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://img.shields.io/github/forks/paritytech/polkadot-sdk" alt="GitHub forks" /&gt;&lt;/p&gt; 
 &lt;!-- markdownlint-disable-next-line MD013 --&gt; 
 &lt;p&gt;&lt;a href="https://substrate.stackexchange.com/"&gt;&lt;img src="https://img.shields.io/badge/StackExchange-Community%20&amp;amp;%20Support-222222?logo=stackexchange" alt="StackExchange" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://img.shields.io/github/contributors/paritytech/polkadot-sdk" alt="GitHub contributors" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://img.shields.io/github/commit-activity/m/paritytech/polkadot-sdk" alt="GitHub commit activity" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://img.shields.io/github/last-commit/paritytech/polkadot-sdk" alt="GitHub last commit" /&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;The Polkadot SDK repository provides all the components needed to start building on the &lt;a href="https://polkadot.com/"&gt;Polkadot&lt;/a&gt; network, a multi-chain blockchain platform that enables different blockchains to interoperate and share information in a secure and scalable way.&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/div&gt; 
&lt;h2&gt;⚡ Quickstart&lt;/h2&gt; 
&lt;p&gt;If you want to get an example node running quickly you can execute the following getting started script:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/scripts/getting-started.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;👩🏽‍💻 Building&lt;/h2&gt; 
&lt;p&gt;In order to build this project you need to install some dependencies, follow the instructions in &lt;a href="https://docs.polkadot.com/develop/parachains/install-polkadot-sdk"&gt;this guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📚 Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.polkadot.com"&gt;Polkadot Documentation Portal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/index.html"&gt;🦀 rust-docs&lt;/a&gt;: Where we keep track of the API docs of our Rust crates. Includes: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/polkadot_sdk/index.html"&gt;Introduction&lt;/a&gt; to each component of the Polkadot SDK: Substrate, FRAME, Cumulus, and XCM&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/guides/index.html"&gt;Guides&lt;/a&gt;, namely how to build your first FRAME pallet&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/polkadot_sdk/templates/index.html"&gt;Templates&lt;/a&gt; for starting a new project.&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/external_resources/index.html"&gt;External Resources&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Have a question? You can ask in the Polkadot SDK Developers Chat. Messages from either of these channels are bridged to the other, so you can use whichever one you like. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://t.me/substratedevs"&gt;Telegram&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://matrix.to/#/#substratedevs:matrix.org"&gt;Matrix&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://discord.com/channels/722223075629727774/997505821955076196"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://substrate.stackexchange.com/"&gt;Polkadot and Substrate StackExchange&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Releases&lt;/h2&gt; 
&lt;!-- markdownlint-disable-next-line MD013 --&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/paritytech/release-registry/main/badges/polkadot-sdk-latest.svg?sanitize=true" alt="Current Stable Release" /&gt;&amp;nbsp;&amp;nbsp;&lt;img src="https://raw.githubusercontent.com/paritytech/release-registry/main/badges/polkadot-sdk-next.svg?sanitize=true" alt="Next Stable Release" /&gt;&lt;/p&gt; 
&lt;p&gt;The Polkadot SDK is released every three months as a &lt;code&gt;Polkadot stableYYMM&lt;/code&gt; release. Each stable release is supported for one year with patches. See the next upcoming versions in the &lt;a href="https://github.com/paritytech/release-registry/"&gt;Release Registry&lt;/a&gt; and more docs in &lt;a href="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/RELEASE.md"&gt;RELEASE.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You can use &lt;a href="https://github.com/paritytech/psvm"&gt;&lt;code&gt;psvm&lt;/code&gt;&lt;/a&gt; to update all dependencies to a specific version without needing to manually select the correct version for each crate.&lt;/p&gt; 
&lt;h2&gt;🛠️ Tooling&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/paritytech/psvm"&gt;Polkadot SDK Version Manager&lt;/a&gt;: A simple tool to manage and update the Polkadot SDK dependencies in any Cargo.toml file. It will automatically update the Polkadot SDK dependencies to their correct crates.io version.&lt;/p&gt; 
&lt;h2&gt;🔐 Security&lt;/h2&gt; 
&lt;p&gt;The security policy and procedures can be found in &lt;a href="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/SECURITY.md"&gt;docs/contributor/SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🤍 Contributing &amp;amp; Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Ensure you follow our &lt;a href="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt;. In every interaction and contribution, this project adheres to the &lt;a href="https://raw.githubusercontent.com/paritytech/polkadot-sdk/master/docs/contributor/CODE_OF_CONDUCT.md"&gt;Contributor Covenant Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;👾 Ready to Contribute?&lt;/h3&gt; 
&lt;p&gt;Take a look at the issues labeled with &lt;a href="https://github.com/paritytech/polkadot-sdk/labels/C1-mentor"&gt;&lt;code&gt;mentor&lt;/code&gt;&lt;/a&gt; (or alternatively &lt;a href="https://mentor.tasty.limo/"&gt;this&lt;/a&gt; page, created by one of the maintainers) label to get started! We always recognize valuable contributions by proposing an on-chain tip to the Polkadot network as a token of our appreciation.&lt;/p&gt; 
&lt;h2&gt;Polkadot Fellowship&lt;/h2&gt; 
&lt;p&gt;Development in this repo usually goes hand in hand with the &lt;code&gt;fellowship&lt;/code&gt; organization. In short, this repository provides all the SDK pieces needed to build both Polkadot and its parachains. But, the actual Polkadot runtime lives in the &lt;code&gt;fellowship/runtimes&lt;/code&gt; repository. Read more about the fellowship, this separation, the RFC process &lt;a href="https://polkadot-fellows.github.io/dashboard/"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;History&lt;/h2&gt; 
&lt;p&gt;This repository is the amalgamation of 3 separate repositories that used to make up Polkadot SDK, namely Substrate, Polkadot and Cumulus. Read more about the merge and its history &lt;a href="https://polkadot-public.notion.site/Polkadot-SDK-FAQ-fbc4cecc2c46443fb37b9eeec2f0d85f"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>web-infra-dev/rspack</title>
      <link>https://github.com/web-infra-dev/rspack</link>
      <description>&lt;p&gt;The fast Rust-based web bundler with webpack-compatible API 🦀️&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; 
 &lt;img alt="Rspack Banner" src="https://assets.rspack.rs/rspack/rspack-banner.png" /&gt; 
&lt;/picture&gt; 
&lt;h1&gt;Rspack&lt;/h1&gt; 
&lt;p&gt; &lt;a href="https://discord.gg/79ZZ66GH9E"&gt;&lt;img src="https://img.shields.io/badge/chat-discord-blue?style=flat-square&amp;amp;logo=discord&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="discord channel" /&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@rspack/core?activeTab=readme"&gt;&lt;img src="https://img.shields.io/npm/v/@rspack/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/rspack_core"&gt;&lt;img src="https://img.shields.io/crates/v/rspack_core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="crates version" /&gt;&lt;/a&gt; &lt;a href="https://npmcharts.com/compare/@rspack/core?minimal=true"&gt;&lt;img src="https://img.shields.io/npm/dm/@rspack/core.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="downloads" /&gt;&lt;/a&gt; &lt;a href="https://nodejs.org/en/about/previous-releases"&gt;&lt;img src="https://img.shields.io/node/v/@rspack/core.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="node version" /&gt;&lt;/a&gt; &lt;a href="https://github.com/web-infra-dev/rspack/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="license" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/web-infra-dev/rspack"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fcodspeed.io%2Fbadge.json&amp;amp;style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="codspeed" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;English | &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/README.zh-CN.md"&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Rspack is a high performance JavaScript bundler written in Rust. It offers strong compatibility with the webpack ecosystem, allowing for seamless replacement of webpack, and provides lightning fast build speeds.&lt;/p&gt; 
&lt;h2&gt;✨ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;🚀 &lt;strong&gt;Fast Startup&lt;/strong&gt;: Based on Rust, the build speed is extremely fast, bringing you the ultimate development experience.&lt;/li&gt; 
 &lt;li&gt;⚡ &lt;strong&gt;Lightning HMR&lt;/strong&gt;: With a built-in incremental compilation mechanism, HMR is extremely fast and fully capable of developing large-scale projects.&lt;/li&gt; 
 &lt;li&gt;📦 &lt;strong&gt;Webpack Compatible&lt;/strong&gt;: Compatible with plugins and loaders in the webpack ecosystem, seamlessly integrating excellent libraries built by the community.&lt;/li&gt; 
 &lt;li&gt;🎨 &lt;strong&gt;Module Federation&lt;/strong&gt;: Provide first-class support for Module Federation to facilitate the development of large-scale web applications.&lt;/li&gt; 
 &lt;li&gt;🛠️ &lt;strong&gt;Production Optimization&lt;/strong&gt;: Various optimization strategies are built in by default, such as tree shaking, minification, etc.&lt;/li&gt; 
 &lt;li&gt;🎯 &lt;strong&gt;Framework Agnostic&lt;/strong&gt;: Not bound to any frontend framework, ensuring enough flexibility.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read &lt;a href="https://rspack.rs/guide/start/introduction"&gt;Introduction&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;🦀 Rstack&lt;/h2&gt; 
&lt;p&gt;Rstack is a unified JavaScript toolchain centered on Rspack, with high performance and consistent architecture.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Version&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack"&gt;Rspack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Bundler&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rspack/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rspack/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rsbuild"&gt;Rsbuild&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Build tool&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rsbuild/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rsbuild/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rslib"&gt;Rslib&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Library development tool&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rslib/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rslib/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspress"&gt;Rspress&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Static site generator&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rspress/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rspress/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rsdoctor"&gt;Rsdoctor&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Build analyzer&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rsdoctor/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rsdoctor/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rstest"&gt;Rstest&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Testing framework&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rstest/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rstest/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rslint"&gt;Rslint&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Linter&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://npmjs.com/package/@rslint/core"&gt;&lt;img src="https://img.shields.io/npm/v/@rslint/core?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91" alt="npm version" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt; &lt;a target="_blank" href="https://stackblitz.com/fork/github/rspack-contrib/rspack-stackblitz-example"&gt; &lt;img alt="Open in StackBlitz" src="https://developer.stackblitz.com/img/open_in_stackblitz.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://rspack.rs/guide/start/quick-start"&gt;Quick start&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/CONTRIBUTING.md"&gt;contributing guide&lt;/a&gt; and let's build Rspack together.&lt;/p&gt; 
&lt;h3&gt;Code of conduct&lt;/h3&gt; 
&lt;p&gt;This repo has adopted the ByteDance Open Source Code of Conduct. Please check &lt;a href="https://raw.githubusercontent.com/web-infra-dev/rspack/main/CODE_OF_CONDUCT.md"&gt;Code of conduct&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Come chat with us on &lt;a href="https://discord.gg/79ZZ66GH9E"&gt;Discord&lt;/a&gt;! Rspack team and Rspack users are active there, and we're always looking for contributions.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/awesome-rspack"&gt;awesome-rspack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A curated list of awesome things related to Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://rspack.rs/"&gt;Rspack 1.x documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation for Rspack 1.x (latest)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://v0.rspack.rs/"&gt;Rspack 0.x documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Documentation for Rspack 0.x version&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack-dev-server"&gt;rspack-dev-server&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Dev server for Rspack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/rspack-contrib/rstack-examples"&gt;rstack-examples&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Examples showcasing Rstack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/web-infra-dev/rspack-sources"&gt;rspack-sources&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Rust port of &lt;a href="https://www.npmjs.com/package/webpack-sources"&gt;webpack-sources&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/rspack-contrib/rstack-design-resources"&gt;rstack-design-resources&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Design resources for Rstack&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/web-infra-dev/rspack/graphs/contributors"&gt;&lt;img src="https://opencollective.com/rspack/contributors.svg?width=890&amp;amp;button=false" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Benchmark&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://ecosystem-benchmark.rspack.rs/"&gt;Benchmark&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Thanks to:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://webpack.js.org/"&gt;The webpack team and community&lt;/a&gt; for creating a great bundler and ecosystem from which we draw a lot of inspiration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sokra"&gt;@sokra&lt;/a&gt; for the great work on the &lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt; project.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ScriptedAlchemy"&gt;@ScriptedAlchemy&lt;/a&gt; for creating Module Federation and helping Rspack connect with the community.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/swc-project/swc"&gt;SWC&lt;/a&gt; project created by &lt;a href="https://github.com/kdy1"&gt;@kdy1&lt;/a&gt;, which powers Rspack's code parsing, transformation and minification.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/evanw/esbuild"&gt;esbuild&lt;/a&gt; project created by &lt;a href="https://github.com/evanw"&gt;@evanw&lt;/a&gt;, which inspired the concurrent architecture of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/napi-rs/napi-rs"&gt;NAPI-RS&lt;/a&gt; project created by &lt;a href="https://github.com/Brooooooklyn"&gt;@Brooooooklyn&lt;/a&gt;, which powers Rspack's node-binding implementation.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/parcel-bundler/parcel"&gt;Parcel&lt;/a&gt; project created by &lt;a href="https://github.com/devongovett"&gt;@devongovett&lt;/a&gt; which is the pioneer of rust bundler and inspired Rspack's incremental rebuild design.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/vitejs/vite"&gt;Vite&lt;/a&gt; project created by &lt;a href="https://github.com/yyx990803"&gt;Evan You&lt;/a&gt; which inspired Rspack's compatibility design of webpack's ecosystem.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;rolldown-legacy&lt;/code&gt; project created by old Rolldown team, It's the predecessor of the &lt;a href="https://github.com/rolldown"&gt;rolldown&lt;/a&gt; project, which explores the possibility of making a performant bundler in Rust with Rollup-compatible API. It inspires the design principles of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/jantimon/html-webpack-plugin"&gt;html-webpack-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/jantimon"&gt;@jantimon&lt;/a&gt;, &lt;code&gt;@rspack/html-plugin&lt;/code&gt; is a fork of &lt;a href="https://github.com/jantimon/html-webpack-plugin"&gt;html-webpack-plugin&lt;/a&gt; to avoid some webpack API usage not supported in Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/vercel/turbo"&gt;Turbopack&lt;/a&gt; project which inspired the AST path logic of Rspack.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/pmmmwh/react-refresh-webpack-plugin"&gt;react-refresh-webpack-plugin&lt;/a&gt; created by &lt;a href="https://github.com/pmmmwh"&gt;@pmmmwh&lt;/a&gt;, which inspires implement &lt;a href="https://github.com/rspack-contrib/rspack-plugin-react-refresh"&gt;react refresh rspack plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/preactjs/prefresh"&gt;prefresh&lt;/a&gt; created by &lt;a href="https://github.com/JoviDeCroock"&gt;@Jovi De Croock&lt;/a&gt;, which inspires implement &lt;a href="https://github.com/rspack-contrib/rspack-plugin-preact-refresh"&gt;preact refresh rspack plugin&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/webpack-contrib/mini-css-extract-plugin"&gt;mini-css-extract-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/sokra"&gt;@sokra&lt;/a&gt; which inspired implement css extract plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/webpack-contrib/copy-webpack-plugin"&gt;copy-webpack-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/kevlened"&gt;@kevlened&lt;/a&gt; which inspired implement copy rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/waysact/webpack-subresource-integrity"&gt;webpack-subresource-integrity&lt;/a&gt; project created by &lt;a href="https://github.com/jscheid"&gt;@jscheid&lt;/a&gt;, which inspires implement subresource integrity rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/aackerman/circular-dependency-plugin"&gt;circular-dependency-plugin&lt;/a&gt; project created by &lt;a href="https://github.com/aackerman"&gt;@aackerman&lt;/a&gt;, which inspres implement circular dependency rspack plugin.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://github.com/thoren-d/tracing-chrome"&gt;tracing-chrome&lt;/a&gt; project created by &lt;a href="https://github.com/thoren-d"&gt;thoren-d&lt;/a&gt;, which inspires the implementation of Rspack tracing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rspack is &lt;a href="https://github.com/web-infra-dev/rspack/raw/main/LICENSE"&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>get-convex/convex-backend</title>
      <link>https://github.com/get-convex/convex-backend</link>
      <description>&lt;p&gt;The open-source reactive database for app developers&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://static.convex.dev/logo/convex-logo-light.svg" width="600" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://static.convex.dev/logo/convex-logo.svg" width="600" /&gt; 
  &lt;img alt="Convex logo" src="https://static.convex.dev/logo/convex-logo.svg?sanitize=true" width="600" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://convex.dev"&gt;Convex&lt;/a&gt; is the open-source reactive database designed to make life easy for web app developers, whether human or LLM. Fetch data and perform business logic with strong consistency by writing pure TypeScript.&lt;/p&gt; 
&lt;p&gt;Convex provides a database, a place to write your server functions, and client libraries. It makes it easy to build and scale dynamic live-updating apps. &lt;a href="https://docs.convex.dev/understanding/"&gt;Read the docs to learn more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Development of the Convex backend is led by the Convex team. We &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/CONTRIBUTING.md"&gt;welcome bug fixes&lt;/a&gt; and &lt;a href="https://discord.gg/convex"&gt;love receiving feedback&lt;/a&gt;. We keep this repository synced with any internal development work within a handful of days.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit our &lt;a href="https://docs.convex.dev/"&gt;documentation&lt;/a&gt; to learn more about Convex and follow our getting started guides.&lt;/p&gt; 
&lt;p&gt;The easiest way to build with Convex is through our &lt;a href="https://www.convex.dev/plans"&gt;cloud platform&lt;/a&gt;, which includes a generous free tier and lets you focus on building your application without worrying about infrastructure. Many small applications and side-projects can operate entirely on the free tier with zero cost and zero maintenance.&lt;/p&gt; 
&lt;h2&gt;Self Hosting&lt;/h2&gt; 
&lt;p&gt;The self-hosted product includes most features of the cloud product, including the dashboard and CLI. Self-hosted Convex works well with a variety of tools including Neon, Fly.io, Vercel, Netlify, RDS, Sqlite, Postgres, and more.&lt;/p&gt; 
&lt;p&gt;You can either use Docker (recommended) or a prebuilt binary to self host Convex. Check out our &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/self-hosted/README.md"&gt;self-hosting guide&lt;/a&gt; for detailed instructions. Community support for self-hosting is available in the &lt;code&gt;#self-hosted&lt;/code&gt; channel on &lt;a href="https://discord.gg/convex"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community &amp;amp; Support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join our &lt;a href="https://discord.gg/convex"&gt;Discord community&lt;/a&gt; for help and discussions.&lt;/li&gt; 
 &lt;li&gt;Report issues when building and using the open source Convex backend through &lt;a href="https://github.com/get-convex/convex-backend/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building from source&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/BUILD.md"&gt;BUILD.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Disclaimers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you choose to self-host, we recommend following the self-hosting guide. If you are instead building from source, make sure to change your instance secret and admin key from the defaults in the repo.&lt;/li&gt; 
 &lt;li&gt;Convex is battle tested most thoroughly on Linux and Mac. On Windows, it has less experience. If you run into issues, please message us on &lt;a href="https://convex.dev/community"&gt;Discord&lt;/a&gt; in the &lt;code&gt;#self-hosted&lt;/code&gt; channel.&lt;/li&gt; 
 &lt;li&gt;Convex self-hosted builds contain a beacon to help Convex improve the product. The information is minimal and anonymous and helpful to Convex, but if you really want to disable it, you can set the &lt;code&gt;--disable-beacon&lt;/code&gt; flag on the backend binary. The beacon's messages print in the log and only include 
  &lt;ul&gt; 
   &lt;li&gt;A random identifier for your deployment (not used elsewhere)&lt;/li&gt; 
   &lt;li&gt;Migration version of your database&lt;/li&gt; 
   &lt;li&gt;Git rev of the backend&lt;/li&gt; 
   &lt;li&gt;Uptime of the backend&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Repository layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;crates/&lt;/code&gt; contains Rust code&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Main binary 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;local_backend/&lt;/code&gt; is an application server on top of the &lt;code&gt;Runtime&lt;/code&gt;. This is the serving edge for the Convex cloud.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;npm-packages/&lt;/code&gt; contains both our public and internal TypeScript packages.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Internal packages 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;udf-runtime/&lt;/code&gt; sets up the user-defined functions JS environment for queries and mutations&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;udf-tests/&lt;/code&gt; is a collection of functions used in testing the isolate layer&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;system-udfs/&lt;/code&gt; contains functions used by the Convex system e.g. the CLI&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>tier4/awkernel</title>
      <link>https://github.com/tier4/awkernel</link>
      <description>&lt;p&gt;Awkernel: realtime operating system written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awkernel&lt;/h1&gt; 
&lt;p&gt;Awkernel is a safe and realtime operating system. It can execute async/await applications in kernel space safely.&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;h3&gt;Compiler Tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ sudo apt install clang qemu-system-arm qemu-system-x86 qemu-system-misc python3-pyelftools
$ rustup toolchain install nightly-2025-05-22
$ rustup default nightly-2025-05-22
$ rustup component add rust-src llvm-tools-preview
$ rustup target add x86_64-unknown-none aarch64-unknown-none riscv64gc-unknown-none-elf riscv32imac-unknown-none-elf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Documentation Tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ cargo install cargo-binutils
$ curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
$ cargo binstall mdbook
$ cargo binstall mdbook-mermaid
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Crates&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/kernel/"&gt;kernel&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;boot code&lt;/li&gt; 
   &lt;li&gt;initialization 
    &lt;ul&gt; 
     &lt;li&gt;virtual memory&lt;/li&gt; 
     &lt;li&gt;heap memory&lt;/li&gt; 
     &lt;li&gt;stack memory&lt;/li&gt; 
     &lt;li&gt;devices (UART, etc)&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/awkernel_lib/"&gt;awkernel_lib&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;library used by both &lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/kernel/"&gt;kernel&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/awkernel_async_lib/"&gt;awkernel_async_lib&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/awkernel_async_lib/"&gt;awkernel_async_lib&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;asynchronous library for no_std&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/awkernel_async_lib_verified/"&gt;awkernel_async_lib_verified&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;verified library for awkernel_async_lib&lt;/li&gt; 
   &lt;li&gt;pure Rust (no dependencies on external functions and no inline assembly)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/awkernel_futures_macro/"&gt;awkernel_futures_macro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/awkernel_drivers/"&gt;awkernel_drivers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/awkernel_aarch64/"&gt;awkernel_aarch64&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/userland/"&gt;userland&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;applications 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/applications/awkernel_shell/"&gt;awkernel_shell&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-mermaid"&gt;graph TD;
    awkernel_async_lib--&amp;gt;awkernel_async_lib_verified;
    awkernel_async_lib--&amp;gt;awkernel_futures_macro;
    awkernel_lib--&amp;gt;awkernel_aarch64;
    awkernel_async_lib--&amp;gt;awkernel_lib;
    awkernel_lib--&amp;gt;awkernel_sync;
    userland--&amp;gt;awkernel_async_lib;
    kernel--&amp;gt;awkernel_lib;
    kernel--&amp;gt;awkernel_async_lib;
    kernel--&amp;gt;awkernel_aarch64;
    kernel--&amp;gt;awkernel_drivers;
    awkernel_drivers--&amp;gt;awkernel_lib;
    kernel--&amp;gt;userland;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Applications can use &lt;code&gt;awkernel_async_lib&lt;/code&gt;, &lt;code&gt;awkernel_lib&lt;/code&gt;, and &lt;code&gt;awkernel_drivers&lt;/code&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Documents&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make docs
$ ls docs/index.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Raspi&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ cargo doc_raspi
$ ls target/aarch64-kernel/doc/awkernel/index.html
$ ls target/aarch64-kernel/doc/awkernel_lib/index.html
etc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;AArch64 Qemu Virt&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ cargo doc_aarch64_virt
$ ls target/aarch64-kernel/doc/awkernel/index.html
$ ls target/aarch64-kernel/doc/awkernel_lib/index.html
etc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;x86_64&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make kernel/asm/x86
$ cargo doc_x86
$ ls target/x86_64-kernel/doc/awkernel/index.html
$ ls target/aarch64-kernel/doc/awkernel_lib/index.html
etc
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;x86_64&lt;/h2&gt; 
&lt;h3&gt;Compile&lt;/h3&gt; 
&lt;p&gt;Release build (recommended).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make x86_64 RELEASE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Debug build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make x86_64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Boot&lt;/h3&gt; 
&lt;p&gt;Qemu 8.x or later is required. Qemu 6.x is not supported.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make qemu-x86_64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GDB&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make debug-x86_64
$ make gdb-x86_64
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;AArch64 Qemu Virt&lt;/h2&gt; 
&lt;h3&gt;Compile&lt;/h3&gt; 
&lt;p&gt;Release build (recommended).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make aarch64 BSP=aarch64_virt RELEASE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Debug build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make aarch64 BSP=aarch64_virt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Boot&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make qemu-aarch64-virt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GDB&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make debug-aarch64_virt
$ make gdb-aarch64_virt
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Raspberry Pi 3 (AArch64, Qemu) or Raspberry Pi Zero 2 W&lt;/h2&gt; 
&lt;h3&gt;Compile&lt;/h3&gt; 
&lt;p&gt;Release build (recommended). &lt;code&gt;RELEASE=1&lt;/code&gt; must be used for actual devices.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make aarch64 BSP=raspi3 RELEASE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Debug build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make aarch64 BSP=raspi3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Boot&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make qemu-raspi3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GDB&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make debug-raspi3
$ make gdb-raspi3
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Raspberry Pi 4 (AArch64)&lt;/h2&gt; 
&lt;h3&gt;Compile&lt;/h3&gt; 
&lt;p&gt;Specify &lt;code&gt;Release=1&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make aarch64 BSP=raspi4 RELEASE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Boot&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Serial 
  &lt;ul&gt; 
   &lt;li&gt;port: GPIO 14 (Tx) and 15 (Rx)&lt;/li&gt; 
   &lt;li&gt;8N1: eight data bits, no parity, one stop bit&lt;/li&gt; 
   &lt;li&gt;Speed: 115200&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;h2&gt;RISC-V (64bit, Qemu)&lt;/h2&gt; 
&lt;h3&gt;Compile&lt;/h3&gt; 
&lt;p&gt;Release build (recommended).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make riscv64 RELEASE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Debug build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make riscv64
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Boot&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make qemu-riscv64
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;RISC-V (32bit, Qemu)&lt;/h2&gt; 
&lt;h3&gt;Compile&lt;/h3&gt; 
&lt;p&gt;Release build (recommended).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make riscv32 RELEASE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Debug build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make riscv32
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Boot&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make qemu-riscv32
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Linux / macOS&lt;/h2&gt; 
&lt;h3&gt;Compile&lt;/h3&gt; 
&lt;p&gt;Debug build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make std
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Release build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make std RELEASE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Boot&lt;/h3&gt; 
&lt;p&gt;Debug build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make run-std
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Release build.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make run-std RELEASE=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Qemu Monitor&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make qemu-raspi3
$ telnet localhost 5556
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Test&lt;/h2&gt; 
&lt;p&gt;Unit tests by using Rust's mechanism can be executed as follows.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Some mechanisms which use atomic instructions are verified by using &lt;a href="https://github.com/tokio-rs/loom"&gt;loom&lt;/a&gt;, and these verifications are executed as follows. It will takes several minutes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;$ make loom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Publications&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/PUBLICATIONS.md"&gt;Publications&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Specification and Test Results&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/tier4/awkernel/main/SPEC_TEST.md"&gt;Specification and Test Results&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>seanmonstar/reqwest</title>
      <link>https://github.com/seanmonstar/reqwest</link>
      <description>&lt;p&gt;An easy and powerful Rust HTTP Client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reqwest&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/reqwest"&gt;&lt;img src="https://img.shields.io/crates/v/reqwest.svg?sanitize=true" alt="crates.io" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/reqwest"&gt;&lt;img src="https://docs.rs/reqwest/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-APACHE"&gt;&lt;img src="https://img.shields.io/crates/l/reqwest.svg?sanitize=true" alt="MIT/Apache-2 licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/seanmonstar/reqwest/actions?query=workflow%3ACI"&gt;&lt;img src="https://github.com/seanmonstar/reqwest/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;An ergonomic, batteries-included HTTP Client for Rust.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Async and blocking &lt;code&gt;Client&lt;/code&gt;s&lt;/li&gt; 
 &lt;li&gt;Plain bodies, JSON, urlencoded, multipart&lt;/li&gt; 
 &lt;li&gt;Customizable redirect policy&lt;/li&gt; 
 &lt;li&gt;HTTP Proxies&lt;/li&gt; 
 &lt;li&gt;HTTPS via system-native TLS (or optionally, rustls)&lt;/li&gt; 
 &lt;li&gt;Cookie Store&lt;/li&gt; 
 &lt;li&gt;WASM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;This asynchronous example uses &lt;a href="https://tokio.rs"&gt;Tokio&lt;/a&gt; and enables some optional features, so your &lt;code&gt;Cargo.toml&lt;/code&gt; could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
reqwest = { version = "0.12", features = ["json"] }
tokio = { version = "1", features = ["full"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then the code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust,no_run"&gt;use std::collections::HashMap;

#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    let resp = reqwest::get("https://httpbin.org/ip")
        .await?
        .json::&amp;lt;HashMap&amp;lt;String, String&amp;gt;&amp;gt;()
        .await?;
    println!("{resp:#?}");
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Commercial Support&lt;/h2&gt; 
&lt;p&gt;For private advice, support, reviews, access to the maintainer, and the like, reach out for &lt;a href="https://seanmonstar.com/sponsor"&gt;commercial support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;On Linux:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OpenSSL with headers. See &lt;a href="https://docs.rs/openssl"&gt;https://docs.rs/openssl&lt;/a&gt; for supported versions and more details. Alternatively you can enable the &lt;code&gt;native-tls-vendored&lt;/code&gt; feature to compile a copy of OpenSSL. Or, you can use &lt;a href="https://github.com/rustls/rustls"&gt;rustls&lt;/a&gt; via &lt;code&gt;rustls-tls&lt;/code&gt; or other &lt;code&gt;rustls-tls-*&lt;/code&gt; features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;On Windows and macOS:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nothing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, Reqwest uses &lt;a href="https://github.com/sfackler/rust-native-tls"&gt;rust-native-tls&lt;/a&gt;, which will use the operating system TLS framework if available, meaning Windows and macOS. On Linux, it will use the available OpenSSL or fail to build if not found.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under either of&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://apache.org/licenses/LICENSE-2.0"&gt;http://apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://raw.githubusercontent.com/seanmonstar/reqwest/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contribution&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Support this project by becoming a &lt;a href="https://seanmonstar.com/sponsor"&gt;sponsor&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>