<rss version="2.0">
  <channel>
    <title>GitHub Rust Daily Trending</title>
    <description>Daily Trending of Rust in GitHub</description>
    <pubDate>Mon, 06 Oct 2025 01:41:44 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>nautechsystems/nautilus_trader</title>
      <link>https://github.com/nautechsystems/nautilus_trader</link>
      <description>&lt;p&gt;A high-performance algorithmic trading platform and event-driven backtester&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader-logo.png" width="500" /&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://codecov.io/gh/nautechsystems/nautilus_trader"&gt;&lt;img src="https://codecov.io/gh/nautechsystems/nautilus_trader/branch/master/graph/badge.svg?token=DXO9QQI40H" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://codspeed.io/nautechsystems/nautilus_trader"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://codspeed.io/badge.json" alt="codspeed" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/pypi/pyversions/nautilus_trader" alt="pythons" /&gt; &lt;img src="https://img.shields.io/pypi/v/nautilus_trader" alt="pypi-version" /&gt; &lt;img src="https://img.shields.io/pypi/format/nautilus_trader?color=blue" alt="pypi-format" /&gt; &lt;a href="https://pepy.tech/project/nautilus-trader"&gt;&lt;img src="https://pepy.tech/badge/nautilus-trader" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/NautilusTrader"&gt;&lt;img src="https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Branch&lt;/th&gt; 
   &lt;th align="left"&gt;Version&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fmaster%2Fversion.json" alt="version" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fnightly%2Fversion.json" alt="version" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=nightly" alt="build" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;&lt;img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fnautechsystems%2Fnautilus_trader%2Fdevelop%2Fversion.json" alt="version" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml"&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/actions/workflows/build.yml/badge.svg?branch=develop" alt="build" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Rust&lt;/th&gt; 
   &lt;th align="left"&gt;Python&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.90.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.90.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.90.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;1.90.0&lt;/td&gt; 
   &lt;td align="left"&gt;3.11-3.13&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href="https://nautilustrader.io/docs/"&gt;https://nautilustrader.io/docs/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: &lt;a href="mailto:support@nautilustrader.io"&gt;support@nautilustrader.io&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is an open-source, high-performance, production-grade algorithmic trading platform, providing quantitative traders with the ability to backtest portfolios of automated trading strategies on historical data with an event-driven engine, and also deploy those same strategies live, with no code changes.&lt;/p&gt; 
&lt;p&gt;The platform is &lt;em&gt;AI-first&lt;/em&gt;, designed to develop and deploy algorithmic trading strategies within a highly performant and robust Python-native environment. This helps to address the parity challenge of keeping the Python research/backtest environment consistent with the production live trading environment.&lt;/p&gt; 
&lt;p&gt;NautilusTrader's design, architecture, and implementation philosophy prioritizes software correctness and safety at the highest level, with the aim of supporting Python-native, mission-critical, trading system backtesting and live deployment workloads.&lt;/p&gt; 
&lt;p&gt;The platform is also universal, and asset-class-agnostic — with any REST API or WebSocket feed able to be integrated via modular adapters. It supports high-frequency trading across a wide range of asset classes and instrument types including FX, Equities, Futures, Options, Crypto, DeFi, and Betting — enabling seamless operations across multiple venues simultaneously.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-trader.png" alt="nautilus-trader" title="nautilus-trader" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Core is written in Rust with asynchronous networking using &lt;a href="https://crates.io/crates/tokio"&gt;tokio&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reliable&lt;/strong&gt;: Rust-powered type- and thread-safety, with optional Redis-backed state persistence.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt;: OS independent, runs on Linux, macOS, and Windows. Deploy using Docker.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Modular adapters mean any REST API or WebSocket feed can be integrated.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt;: Time in force &lt;code&gt;IOC&lt;/code&gt;, &lt;code&gt;FOK&lt;/code&gt;, &lt;code&gt;GTC&lt;/code&gt;, &lt;code&gt;GTD&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, &lt;code&gt;AT_THE_OPEN&lt;/code&gt;, &lt;code&gt;AT_THE_CLOSE&lt;/code&gt;, advanced order types and conditional triggers. Execution instructions &lt;code&gt;post-only&lt;/code&gt;, &lt;code&gt;reduce-only&lt;/code&gt;, and icebergs. Contingency orders including &lt;code&gt;OCO&lt;/code&gt;, &lt;code&gt;OUO&lt;/code&gt;, &lt;code&gt;OTO&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: Add user-defined custom components, or assemble entire systems from scratch leveraging the &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; and &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtesting&lt;/strong&gt;: Run with multiple venues, instruments and strategies simultaneously using historical quote tick, trade tick, bar, order book and custom data with nanosecond resolution.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: Use identical strategy implementations between backtesting and live deployments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-venue&lt;/strong&gt;: Multiple venue capabilities facilitate market-making and statistical arbitrage strategies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI Training&lt;/strong&gt;: Backtest engine fast enough to be used to train AI trading agents (RL/ES).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/nautilus-art.png" alt="Alt text" title="nautilus" /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;nautilus - from ancient Greek 'sailor' and naus 'ship'.&lt;/em&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;The nautilus shell consists of modular chambers with a growth factor which approximates a logarithmic spiral. The idea is that this can be translated to the aesthetics of design and architecture.&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Why NautilusTrader?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Highly performant event-driven Python&lt;/strong&gt;: Native binary core components.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Parity between backtesting and live trading&lt;/strong&gt;: Identical strategy code.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Reduced operational risk&lt;/strong&gt;: Enhanced risk management functionality, logical accuracy, and type safety.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Highly extendable&lt;/strong&gt;: Message bus, custom components and actors, custom data, custom adapters.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Traditionally, trading strategy research and backtesting might be conducted in Python using vectorized methods, with the strategy then needing to be reimplemented in a more event-driven way using C++, C#, Java or other statically typed language(s). The reasoning here is that vectorized backtesting code cannot express the granular time and event dependent complexity of real-time trading, where compiled languages have proven to be more suitable due to their inherently higher performance, and type safety.&lt;/p&gt; 
&lt;p&gt;One of the key advantages of NautilusTrader here, is that this reimplementation step is now circumvented - as the critical core components of the platform have all been written entirely in &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; or &lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;. This means we're using the right tools for the job, where systems programming languages compile performant binaries, with CPython C extension modules then able to offer a Python-native environment, suitable for professional quantitative traders and trading firms.&lt;/p&gt; 
&lt;h2&gt;Why Python?&lt;/h2&gt; 
&lt;p&gt;Python was originally created decades ago as a simple scripting language with a clean straightforward syntax. It has since evolved into a fully fledged general purpose object-oriented programming language. Based on the TIOBE index, Python is currently the most popular programming language in the world. Not only that, Python has become the &lt;em&gt;de facto lingua franca&lt;/em&gt; of data science, machine learning, and artificial intelligence.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is "blazingly fast" and memory-efficient (comparable to C and C++) with no garbage collector. It can power mission-critical systems, run on embedded devices, and easily integrates with other languages.&lt;/p&gt; 
&lt;p&gt;Rust’s rich type system and ownership model guarantees memory-safety and thread-safety deterministically — eliminating many classes of bugs at compile-time.&lt;/p&gt; 
&lt;p&gt;The project increasingly utilizes Rust for core performance-critical components. Python bindings are implemented via Cython and &lt;a href="https://pyo3.rs"&gt;PyO3&lt;/a&gt;—no Rust toolchain is required at install time.&lt;/p&gt; 
&lt;p&gt;This project makes the &lt;a href="https://raphlinus.github.io/rust/2020/01/18/soundness-pledge.html"&gt;Soundness Pledge&lt;/a&gt;:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;“The intent of this project is to be free of soundness bugs. The developers will do their best to avoid them, and welcome help in analyzing and fixing them.”&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; NautilusTrader relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally equal to the latest stable release of Rust.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;p&gt;NautilusTrader is modularly designed to work with &lt;em&gt;adapters&lt;/em&gt;, enabling connectivity to trading venues and data providers by translating their raw APIs into a unified interface and normalized domain model.&lt;/p&gt; 
&lt;p&gt;The following integrations are currently supported; see &lt;a href="https://nautilustrader.io/docs/latest/integrations/"&gt;docs/integrations/&lt;/a&gt; for details:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Name&lt;/th&gt; 
   &lt;th align="left"&gt;ID&lt;/th&gt; 
   &lt;th align="left"&gt;Type&lt;/th&gt; 
   &lt;th align="left"&gt;Status&lt;/th&gt; 
   &lt;th align="left"&gt;Docs&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://betfair.com"&gt;Betfair&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BETFAIR&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Sports Betting Exchange&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/betfair.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://binance.com"&gt;Binance&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BINANCE&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/binance.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.bitmex.com"&gt;BitMEX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BITMEX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/bitmex.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.bybit.com"&gt;Bybit&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;BYBIT&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/bybit.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.coinbase.com/en/international-exchange"&gt;Coinbase International&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;COINBASE_INTX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/coinbase_intx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://databento.com"&gt;Databento&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DATABENTO&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/databento.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://dydx.exchange/"&gt;dYdX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;DYDX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/dydx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://hyperliquid.xyz"&gt;Hyperliquid&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;HYPERLIQUID&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/building-orange" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/hyperliquid.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://www.interactivebrokers.com"&gt;Interactive Brokers&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;INTERACTIVE_BROKERS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Brokerage (multi-venue)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/ib.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://okx.com"&gt;OKX&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;OKX&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Exchange (CEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/okx.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://polymarket.com"&gt;Polymarket&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;POLYMARKET&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Prediction Market (DEX)&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/polymarket.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;a href="https://tardis.dev"&gt;Tardis&lt;/a&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;code&gt;TARDIS&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;Crypto Data Provider&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;img src="https://img.shields.io/badge/stable-green" alt="status" /&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/docs/integrations/tardis.md"&gt;Guide&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ID&lt;/strong&gt;: The default client ID for the integrations adapter clients.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: The type of integration (often the venue type).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;building&lt;/code&gt;: Under construction and likely not in a usable state.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: Completed to a minimally working state and in a beta testing phase.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level (some bugs may still remain).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/integrations/index.html"&gt;Integrations&lt;/a&gt; documentation for further details.&lt;/p&gt; 
&lt;h2&gt;Versioning and releases&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;NautilusTrader is still under active development&lt;/strong&gt;. Some features may be incomplete, and while the API is becoming more stable, breaking changes can occur between releases. We strive to document these changes in the release notes on a &lt;strong&gt;best-effort basis&lt;/strong&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We aim to follow a &lt;strong&gt;bi-weekly release schedule&lt;/strong&gt;, though experimental or larger features may cause delays.&lt;/p&gt; 
&lt;h3&gt;Branches&lt;/h3&gt; 
&lt;p&gt;We aim to maintain a stable, passing build across all branches.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: Reflects the source code for the latest released version; recommended for production use.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;: Daily snapshots of the &lt;code&gt;develop&lt;/code&gt; branch for early testing; merged at &lt;strong&gt;14:00 UTC&lt;/strong&gt; and as required.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt;: Active development branch for contributors and feature work.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Our &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md"&gt;roadmap&lt;/a&gt; aims to achieve a &lt;strong&gt;stable API for version 2.x&lt;/strong&gt; (likely after the Rust port). Once this milestone is reached, we plan to implement a formal deprecation process for any API changes. This approach allows us to maintain a rapid development pace for now.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Precision mode&lt;/h2&gt; 
&lt;p&gt;NautilusTrader supports two precision modes for its core value types (&lt;code&gt;Price&lt;/code&gt;, &lt;code&gt;Quantity&lt;/code&gt;, &lt;code&gt;Money&lt;/code&gt;), which differ in their internal bit-width and maximum decimal precision.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;High-precision&lt;/strong&gt;: 128-bit integers with up to 16 decimals of precision, and a larger value range.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Standard-precision&lt;/strong&gt;: 64-bit integers with up to 9 decimals of precision, and a smaller value range.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;By default, the official Python wheels ship in high-precision (128-bit) mode on Linux and macOS. On Windows, only standard-precision (64-bit) is available due to the lack of native 128-bit integer support. For the Rust crates, the default is standard-precision unless you explicitly enable the &lt;code&gt;high-precision&lt;/code&gt; feature flag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Rust feature flag&lt;/strong&gt;: To enable high-precision mode in Rust, add the &lt;code&gt;high-precision&lt;/code&gt; feature to your Cargo.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[dependencies]
nautilus_model = { version = "*", features = ["high-precision"] }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;We recommend using the latest supported version of Python and installing &lt;a href="https://pypi.org/project/nautilus_trader/"&gt;nautilus_trader&lt;/a&gt; inside a virtual environment to isolate dependencies.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;There are two supported ways to install&lt;/strong&gt;:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Pre-built binary wheel from PyPI &lt;em&gt;or&lt;/em&gt; the Nautech Systems package index.&lt;/li&gt; 
 &lt;li&gt;Build from source.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;We highly recommend installing using the &lt;a href="https://docs.astral.sh/uv"&gt;uv&lt;/a&gt; package manager with a "vanilla" CPython.&lt;/p&gt; 
 &lt;p&gt;Conda and other Python distributions &lt;em&gt;may&lt;/em&gt; work but aren’t officially supported.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;From PyPI&lt;/h3&gt; 
&lt;p&gt;To install the latest binary wheel (or sdist package) from PyPI using Python's pip package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;From the Nautech Systems package index&lt;/h3&gt; 
&lt;p&gt;The Nautech Systems package index (&lt;code&gt;packages.nautechsystems.io&lt;/code&gt;) complies with &lt;a href="https://peps.python.org/pep-0503/"&gt;PEP-503&lt;/a&gt; and hosts both stable and development binary wheels for &lt;code&gt;nautilus_trader&lt;/code&gt;. This enables users to install either the latest stable release or pre-release versions for testing.&lt;/p&gt; 
&lt;h4&gt;Stable wheels&lt;/h4&gt; 
&lt;p&gt;Stable wheels correspond to official releases of &lt;code&gt;nautilus_trader&lt;/code&gt; on PyPI, and use standard versioning.&lt;/p&gt; 
&lt;p&gt;To install the latest stable release:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Use &lt;code&gt;--extra-index-url&lt;/code&gt; instead of &lt;code&gt;--index-url&lt;/code&gt; if you want pip to fall back to PyPI automatically:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Development wheels&lt;/h4&gt; 
&lt;p&gt;Development wheels are published from both the &lt;code&gt;nightly&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches, allowing users to test features and fixes ahead of stable releases.&lt;/p&gt; 
&lt;p&gt;This process also helps preserve compute resources and provides easy access to the exact binaries tested in CI pipelines, while adhering to &lt;a href="https://peps.python.org/pep-0440/"&gt;PEP-440&lt;/a&gt; versioning standards:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; wheels use the version format &lt;code&gt;dev{date}+{build_number}&lt;/code&gt; (e.g., &lt;code&gt;1.208.0.dev20241212+7001&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; wheels use the version format &lt;code&gt;a{date}&lt;/code&gt; (alpha) (e.g., &lt;code&gt;1.208.0a20241212&lt;/code&gt;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="left"&gt;Platform&lt;/th&gt; 
   &lt;th align="left"&gt;Nightly&lt;/th&gt; 
   &lt;th align="left"&gt;Develop&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Linux (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;-&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;macOS (ARM64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="left"&gt;&lt;code&gt;Windows (x86_64)&lt;/code&gt;&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
   &lt;td align="left"&gt;✓&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Development wheels from the &lt;code&gt;develop&lt;/code&gt; branch publish for every supported platform except Linux ARM64. Skipping that target keeps CI feedback fast while avoiding unnecessary build resource usage.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;We do not recommend using development wheels in production environments, such as live trading controlling real capital.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Installation commands&lt;/h4&gt; 
&lt;p&gt;By default, pip will install the latest stable release. Adding the &lt;code&gt;--pre&lt;/code&gt; flag ensures that pre-release versions, including development wheels, are considered.&lt;/p&gt; 
&lt;p&gt;To install the latest available pre-release (including development wheels):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install -U nautilus_trader --pre --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To install a specific development wheel (e.g., &lt;code&gt;1.221.0a20250912&lt;/code&gt; for September 12, 2025):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install nautilus_trader==1.221.0a20250912 --index-url=https://packages.nautechsystems.io/simple
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Available versions&lt;/h4&gt; 
&lt;p&gt;You can view all available versions of &lt;code&gt;nautilus_trader&lt;/code&gt; on the &lt;a href="https://packages.nautechsystems.io/simple/nautilus-trader/index.html"&gt;package index&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To programmatically fetch and list available versions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -s https://packages.nautechsystems.io/simple/nautilus-trader/index.html | grep -oP '(?&amp;lt;=&amp;lt;a href=")[^"]+(?=")' | awk -F'#' '{print $1}' | sort
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;On Linux, confirm your glibc version with &lt;code&gt;ldd --version&lt;/code&gt; and ensure it reports &lt;strong&gt;2.35&lt;/strong&gt; or newer before installing binary wheels.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Branch updates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): Build and publish continuously with every merged commit.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): Build and publish daily when we automatically merge the &lt;code&gt;develop&lt;/code&gt; branch at &lt;strong&gt;14:00 UTC&lt;/strong&gt; (if there are changes).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Retention policies&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;develop&lt;/code&gt; branch wheels (&lt;code&gt;.dev&lt;/code&gt;): We retain only the most recent wheel build.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; branch wheels (&lt;code&gt;a&lt;/code&gt;): We retain only the 30 most recent wheel builds.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;From Source&lt;/h3&gt; 
&lt;p&gt;It's possible to install from source using pip if you first install the build dependencies as specified in the &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://rustup.rs/"&gt;rustup&lt;/a&gt; (the Rust toolchain installer):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl https://sh.rustup.rs -sSf | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Download and install &lt;a href="https://win.rustup.rs/x86_64"&gt;&lt;code&gt;rustup-init.exe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;Install "Desktop development with C++" using &lt;a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/"&gt;Build Tools for Visual Studio 2022&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;rustc --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;cargo&lt;/code&gt; in the current shell:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Start a new PowerShell&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install &lt;a href="https://clang.llvm.org/"&gt;clang&lt;/a&gt; (a C language frontend for LLVM):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt-get install clang
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; 
    &lt;ol&gt; 
     &lt;li&gt; &lt;p&gt;Add Clang to your &lt;a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/"&gt;Build Tools for Visual Studio 2022&lt;/a&gt;:&lt;/p&gt; 
      &lt;ul&gt; 
       &lt;li&gt;Start | Visual Studio Installer | Modify | C++ Clang tools for Windows (latest) = checked | Modify&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;clang&lt;/code&gt; in the current shell:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-powershell"&gt;[System.Environment]::SetEnvironmentVariable('path', "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\x64\bin\;" + $env:Path,"User")
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Verify (any system): from a terminal session run: &lt;code&gt;clang --version&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install uv (see the &lt;a href="https://docs.astral.sh/uv/getting-started/installation"&gt;uv installation guide&lt;/a&gt; for more details):&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;Linux and macOS:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Windows (PowerShell):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-powershell"&gt;irm https://astral.sh/uv/install.ps1 | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the source with &lt;code&gt;git&lt;/code&gt;, and install from the project's root directory:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;git clone --branch develop --depth 1 https://github.com/nautechsystems/nautilus_trader
cd nautilus_trader
uv sync --all-extras
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;--depth 1&lt;/code&gt; flag fetches just the latest commit for a faster, lightweight clone.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start="6"&gt; 
 &lt;li&gt; &lt;p&gt;Set environment variables for PyO3 compilation (Linux and macOS only):&lt;/p&gt; &lt;pre&gt;&lt;code class="language-bash"&gt;# Set the library path for the Python interpreter (in this case Python 3.13.4)
export LD_LIBRARY_PATH="$HOME/.local/share/uv/python/cpython-3.13.4-linux-x86_64-gnu/lib:$LD_LIBRARY_PATH"

# Set the Python executable path for PyO3
export PYO3_PYTHON=$(pwd)/.venv/bin/python
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Adjust the Python version and architecture in the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to match your system. Use &lt;code&gt;uv python list&lt;/code&gt; to find the exact path for your Python installation.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation"&gt;Installation Guide&lt;/a&gt; for other options and further details.&lt;/p&gt; 
&lt;h2&gt;Redis&lt;/h2&gt; 
&lt;p&gt;Using &lt;a href="https://redis.io"&gt;Redis&lt;/a&gt; with NautilusTrader is &lt;strong&gt;optional&lt;/strong&gt; and only required if configured as the backend for a &lt;a href="https://nautilustrader.io/docs/latest/concepts/cache"&gt;cache&lt;/a&gt; database or &lt;a href="https://nautilustrader.io/docs/latest/concepts/message_bus"&gt;message bus&lt;/a&gt;. See the &lt;strong&gt;Redis&lt;/strong&gt; section of the &lt;a href="https://nautilustrader.io/docs/latest/getting_started/installation#redis"&gt;Installation Guide&lt;/a&gt; for further details.&lt;/p&gt; 
&lt;h2&gt;Makefile&lt;/h2&gt; 
&lt;p&gt;A &lt;code&gt;Makefile&lt;/code&gt; is provided to automate most installation and build tasks for development. Some of the targets include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;make install&lt;/code&gt;: Installs in &lt;code&gt;release&lt;/code&gt; build mode with all dependency groups and extras.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-debug&lt;/code&gt;: Same as &lt;code&gt;make install&lt;/code&gt; but with &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make install-just-deps&lt;/code&gt;: Installs just the &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; dependencies (does not install package).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;: Runs the build script in &lt;code&gt;release&lt;/code&gt; build mode (default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-debug&lt;/code&gt;: Runs the build script in &lt;code&gt;debug&lt;/code&gt; build mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;release&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make build-wheel-debug&lt;/code&gt;: Runs uv build with a wheel format in &lt;code&gt;debug&lt;/code&gt; mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make cargo-test&lt;/code&gt;: Runs all Rust crate tests using &lt;code&gt;cargo-nextest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Deletes all build results, such as &lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt; files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make distclean&lt;/code&gt;: &lt;strong&gt;CAUTION&lt;/strong&gt; Removes all artifacts not in the git index from the repository. This includes source files which have not been &lt;code&gt;git add&lt;/code&gt;ed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make docs&lt;/code&gt;: Builds the documentation HTML using Sphinx.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pre-commit&lt;/code&gt;: Runs the pre-commit checks over all files.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make ruff&lt;/code&gt;: Runs ruff over all files using the &lt;code&gt;pyproject.toml&lt;/code&gt; config (with autofix).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make pytest&lt;/code&gt;: Runs all tests with &lt;code&gt;pytest&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make test-performance&lt;/code&gt;: Runs performance tests with &lt;a href="https://codspeed.io"&gt;codspeed&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make help&lt;/code&gt; for documentation on all available make targets.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;See the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/crates/infrastructure/TESTS.md"&gt;crates/infrastructure/TESTS.md&lt;/a&gt; file for running the infrastructure integration tests.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Indicators and strategies can be developed in both Python and Cython. For performance and latency-sensitive applications, we recommend using Cython. Below are some examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/indicators/ema_python.py"&gt;indicator&lt;/a&gt; example written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/indicators/"&gt;indicator&lt;/a&gt; examples written in Cython.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/nautilus_trader/examples/strategies/"&gt;strategy&lt;/a&gt; examples written in Python.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/examples/backtest/"&gt;backtest&lt;/a&gt; examples using a &lt;code&gt;BacktestEngine&lt;/code&gt; directly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;p&gt;Docker containers are built using the base image &lt;code&gt;python:3.12-slim&lt;/code&gt; with the following variant tags:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:latest&lt;/code&gt; has the latest release version installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;nautilus_trader:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:latest&lt;/code&gt; has the latest release version installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jupyterlab:nightly&lt;/code&gt; has the head of the &lt;code&gt;nightly&lt;/code&gt; branch installed along with &lt;code&gt;jupyterlab&lt;/code&gt; and an example backtest notebook with accompanying data.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can pull the container images as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/&amp;lt;image_variant_tag&amp;gt; --platform linux/amd64
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can launch the backtest example container by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker pull ghcr.io/nautechsystems/jupyterlab:nightly --platform linux/amd64
docker run -p 8888:8888 ghcr.io/nautechsystems/jupyterlab:nightly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open your browser at the following address:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;http://127.0.0.1:8888/lab
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader currently exceeds the rate limit for Jupyter notebook logging (stdout output). Therefore, we set the &lt;code&gt;log_level&lt;/code&gt; to &lt;code&gt;ERROR&lt;/code&gt; in the examples. Lowering this level to see more logging will cause the notebook to hang during cell execution. We are investigating a fix that may involve either raising the configured rate limits for Jupyter or throttling the log flushing from Nautilus.&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://github.com/jupyterlab/jupyterlab/issues/12845"&gt;https://github.com/jupyterlab/jupyterlab/issues/12845&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://github.com/deshaw/jupyterlab-limit-output"&gt;https://github.com/deshaw/jupyterlab-limit-output&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;We aim to provide the most pleasant developer experience possible for this hybrid codebase of Python, Cython and Rust. See the &lt;a href="https://nautilustrader.io/docs/latest/developer_guide/index.html"&gt;Developer Guide&lt;/a&gt; for helpful information.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run &lt;code&gt;make build-debug&lt;/code&gt; to compile after changes to Rust or Cython code for the most efficient development workflow.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Testing with Rust&lt;/h3&gt; 
&lt;p&gt;&lt;a href="https://nexte.st"&gt;cargo-nextest&lt;/a&gt; is the standard Rust test runner for NautilusTrader. Its key benefit is isolating each test in its own process, ensuring test reliability by avoiding interference.&lt;/p&gt; 
&lt;p&gt;You can install cargo-nextest by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;cargo install cargo-nextest
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP]&lt;/p&gt; 
 &lt;p&gt;Run Rust tests with &lt;code&gt;make cargo-test&lt;/code&gt;, which uses &lt;strong&gt;cargo-nextest&lt;/strong&gt; with an efficient profile.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Thank you for considering contributing to NautilusTrader! We welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, the first step is to open an &lt;a href="https://github.com/nautechsystems/nautilus_trader/issues"&gt;issue&lt;/a&gt; on GitHub to discuss it with the team. This helps to ensure that your contribution will be well-aligned with the goals of the project and avoids duplication of effort.&lt;/p&gt; 
&lt;p&gt;Before getting started, be sure to review the &lt;a href="https://raw.githubusercontent.com/nautechsystems/nautilus_trader/develop/ROADMAP.md#open-source-scope"&gt;open-source scope&lt;/a&gt; outlined in the project’s roadmap to understand what’s in and out of scope.&lt;/p&gt; 
&lt;p&gt;Once you're ready to start working on your contribution, make sure to follow the guidelines outlined in the &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file. This includes signing a Contributor License Agreement (CLA) to ensure that your contributions can be included in the project.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;Pull requests should target the &lt;code&gt;develop&lt;/code&gt; branch (the default branch). This is where new features and improvements are integrated before release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Thank you again for your interest in NautilusTrader! We look forward to reviewing your contributions and working with you to improve the project.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Join our community of users and contributors on &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord&lt;/a&gt; to chat and stay up-to-date with the latest announcements and features of NautilusTrader. Whether you're a developer looking to contribute or just want to learn more about the platform, all are welcome on our Discord server.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!WARNING]&lt;/p&gt; 
 &lt;p&gt;NautilusTrader does not issue, promote, or endorse any cryptocurrency tokens. Any claims or communications suggesting otherwise are unauthorized and false.&lt;/p&gt; 
 &lt;p&gt;All official updates and communications from NautilusTrader will be shared exclusively through &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;, our &lt;a href="https://discord.gg/NautilusTrader"&gt;Discord server&lt;/a&gt;, or our X (Twitter) account: &lt;a href="https://x.com/NautilusTrader"&gt;@NautilusTrader&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;If you encounter any suspicious activity, please report it to the appropriate platform and contact us at &lt;a href="mailto:info@nautechsystems.io"&gt;info@nautechsystems.io&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The source code for NautilusTrader is available on GitHub under the &lt;a href="https://www.gnu.org/licenses/lgpl-3.0.en.html"&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. Contributions to the project are welcome and require the completion of a standard &lt;a href="https://github.com/nautechsystems/nautilus_trader/raw/develop/CLA.md"&gt;Contributor License Agreement (CLA)&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;NautilusTrader™ is developed and maintained by Nautech Systems, a technology company specializing in the development of high-performance trading systems. For more information, visit &lt;a href="https://nautilustrader.io"&gt;https://nautilustrader.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;© 2015-2025 Nautech Systems Pty Ltd. All rights reserved.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ns-logo.png" alt="nautechsystems" title="nautechsystems" /&gt; &lt;img src="https://github.com/nautechsystems/nautilus_trader/raw/develop/assets/ferris.png" width="128" /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DioxusLabs/dioxus</title>
      <link>https://github.com/DioxusLabs/dioxus</link>
      <description>&lt;p&gt;Fullstack app framework for web, desktop, and mobile.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;/p&gt;
&lt;p align="center"&gt; 
 &lt;!-- &lt;img src="./notes/header-light-updated.svg#gh-light-mode-only" &gt;
      &lt;img src="./notes/header-dark-updated.svg#gh-dark-mode-only" &gt; --&gt; 
 &lt;!-- &lt;a href="https://dioxuslabs.com"&gt;
          &lt;img src="./notes/flat-splash.avif"&gt;
      &lt;/a&gt; --&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/splash-header-darkmode.svg#gh-dark-mode-only" style="width: 80%; height: auto;" /&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/splash-header.svg#gh-light-mode-only" style="width: 80%; height: auto;" /&gt; &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/image-splash.avif" /&gt; &lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;!-- Crates version --&gt; 
 &lt;a href="https://crates.io/crates/dioxus"&gt; &lt;img src="https://img.shields.io/crates/v/dioxus.svg?style=flat-square" alt="Crates.io version" /&gt; &lt;/a&gt; 
 &lt;!-- Downloads --&gt; 
 &lt;a href="https://crates.io/crates/dioxus"&gt; &lt;img src="https://img.shields.io/crates/d/dioxus.svg?style=flat-square" alt="Download" /&gt; &lt;/a&gt; 
 &lt;!-- docs --&gt; 
 &lt;a href="https://docs.rs/dioxus"&gt; &lt;img src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" alt="docs.rs docs" /&gt; &lt;/a&gt; 
 &lt;!-- CI --&gt; 
 &lt;a href="https://github.com/jkelleyrtp/dioxus/actions"&gt; &lt;img src="https://github.com/dioxuslabs/dioxus/actions/workflows/main.yml/badge.svg?sanitize=true" alt="CI status" /&gt; &lt;/a&gt; 
 &lt;!--Awesome --&gt; 
 &lt;a href="https://dioxuslabs.com/awesome"&gt; &lt;img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true" alt="Awesome Page" /&gt; &lt;/a&gt; 
 &lt;!-- Discord --&gt; 
 &lt;a href="https://discord.gg/XgGxMSkvUM"&gt; &lt;img src="https://img.shields.io/discord/899851952891002890.svg?logo=discord&amp;amp;style=flat-square" alt="Discord Link" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align="center"&gt; 
 &lt;h3&gt; &lt;a href="https://dioxuslabs.com"&gt; Website &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/tree/main/examples"&gt; Examples &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://dioxuslabs.com/learn/0.6/guide"&gt; Guide &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/zh-cn/README.md"&gt; 中文 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/pt-br/README.md"&gt; PT-BR &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/ja-jp/README.md"&gt; 日本語 &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/tr-tr"&gt; Türkçe &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/raw/main/translations/ko-kr"&gt; 한국어 &lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/DioxusLabs/dioxus/releases/tag/v0.7.0-alpha.0"&gt;✨ Dioxus 0.7 is in alpha - test it out! ✨&lt;/a&gt; &lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;Build for web, desktop, and mobile, and more with a single codebase. Zero-config setup, integrated hot-reloading, and signals-based state management. Add backend functionality with Server Functions and bundle with our CLI.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn app() -&amp;gt; Element {
    let mut count = use_signal(|| 0);

    rsx! {
        h1 { "High-Five counter: {count}" }
        button { onclick: move |_| count += 1, "Up high!" }
        button { onclick: move |_| count -= 1, "Down low!" }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;⭐️ Unique features:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cross-platform apps in three lines of code (web, desktop, mobile, server, and more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dioxuslabs.com/blog/release-050"&gt;Ergonomic state management&lt;/a&gt; combines the best of React, Solid, and Svelte&lt;/li&gt; 
 &lt;li&gt;Built-in featureful, type-safe, fullstack web framework&lt;/li&gt; 
 &lt;li&gt;Integrated bundler for deploying to the web, macOS, Linux, and Windows&lt;/li&gt; 
 &lt;li&gt;Subsecond Rust hot-patching and asset hot-reloading&lt;/li&gt; 
 &lt;li&gt;And more! &lt;a href="https://dioxuslabs.com/learn/0.6/"&gt;Take a tour of Dioxus&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Instant hot-reloading&lt;/h2&gt; 
&lt;p&gt;With one command, &lt;code&gt;dx serve&lt;/code&gt; and your app is running. Edit your markup, styles, and see changes in milliseconds. Use our experimental &lt;code&gt;dx serve --hotpatch&lt;/code&gt; to update Rust code in real time.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/hotreload-video.webp" /&gt; 
 &lt;!-- &lt;video src="https://private-user-images.githubusercontent.com/10237910/386919031-6da371d5-3340-46da-84ff-628216851ba6.mov" width="500"&gt;&lt;/video&gt; --&gt; 
 &lt;!-- &lt;video src="https://private-user-images.githubusercontent.com/10237910/386919031-6da371d5-3340-46da-84ff-628216851ba6.mov" width="500"&gt;&lt;/video&gt; --&gt; 
&lt;/div&gt; 
&lt;h2&gt;Build Beautiful Apps&lt;/h2&gt; 
&lt;p&gt;Dioxus apps are styled with HTML and CSS. Use the built-in TailwindCSS support or load your favorite CSS library. Easily call into native code (objective-c, JNI, Web-Sys) for a perfect native touch.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/ebou2.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Truly fullstack applications&lt;/h2&gt; 
&lt;p&gt;Dioxus deeply integrates with &lt;a href="https://github.com/tokio-rs/axum"&gt;axum&lt;/a&gt; to provide powerful fullstack capabilities for both clients and servers. Pick from a wide array of built-in batteries like WebSockets, SSE, Streaming, File Upload/Download, Server-Side-Rendering, Forms, Middleware, and Hot-Reload, or go fully custom and integrate your existing axum backend.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/fullstack-websockets.avif" width="700" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Experimental Native Renderer&lt;/h2&gt; 
&lt;p&gt;Render using web-sys, webview, server-side-rendering, liveview, or even with our experimental WGPU-based renderer. Embed Dioxus in Bevy, WGPU, or even run on embedded Linux!&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/native-blitz-wgpu.webp" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;First-party primitive components&lt;/h2&gt; 
&lt;p&gt;Get started quickly with a complete set of primitives modeled after shadcn/ui and Radix-Primitives.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/primitive-components.avif" width="700" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;First-class Android and iOS support&lt;/h2&gt; 
&lt;p&gt;Dioxus is the fastest way to build native mobile apps with Rust. Simply run &lt;code&gt;dx serve --platform android&lt;/code&gt; and your app is running in an emulator or on device in seconds. Call directly into JNI and Native APIs.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/android_and_ios2.avif" width="500" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Bundle for web, desktop, and mobile&lt;/h2&gt; 
&lt;p&gt;Simply run &lt;code&gt;dx bundle&lt;/code&gt; and your app will be built and bundled with maximization optimizations. On the web, take advantage of &lt;a href="https://dioxuslabs.com/learn/0.6/guides/assets"&gt;&lt;code&gt;.avif&lt;/code&gt; generation, &lt;code&gt;.wasm&lt;/code&gt; compression, minification&lt;/a&gt;, and more. Build WebApps weighing &lt;a href="https://github.com/ealmloff/tiny-dioxus/"&gt;less than 50kb&lt;/a&gt; and desktop/mobile apps less than 5mb.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/bundle.gif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Fantastic documentation&lt;/h2&gt; 
&lt;p&gt;We've put a ton of effort into building clean, readable, and comprehensive documentation. All html elements and listeners are documented with MDN docs, and our Docs runs continuous integration with Dioxus itself to ensure that the docs are always up to date. Check out the &lt;a href="https://dioxuslabs.com/learn/0.6/"&gt;Dioxus website&lt;/a&gt; for guides, references, recipes, and more. Fun fact: we use the Dioxus website as a testbed for new Dioxus features - &lt;a href="https://github.com/dioxusLabs/docsite"&gt;check it out!&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/docs.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Modular and Customizable&lt;/h2&gt; 
&lt;p&gt;Build your own renderer, or use a community renderer like &lt;a href="http://freyaui.dev"&gt;Freya&lt;/a&gt;. Use our modular components like RSX, VirtualDom, Blitz, Taffy, and Subsecond.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/screenshots/refs/heads/main/blitz/freya-todo-example.webp" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Dioxus is a community-driven project, with a very active &lt;a href="https://discord.gg/XgGxMSkvUM"&gt;Discord&lt;/a&gt; and &lt;a href="https://github.com/DioxusLabs/dioxus/issues"&gt;GitHub&lt;/a&gt; community. We're always looking for help, and we're happy to answer questions and help you get started. &lt;a href="https://github.com/DioxusLabs/dioxus-std"&gt;Our SDK&lt;/a&gt; is community-run and we even have a &lt;a href="https://github.com/dioxus-community/"&gt;GitHub organization&lt;/a&gt; for the best Dioxus crates that receive free upgrades and support.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/DioxusLabs/dioxus/main/notes/dioxus-community.avif" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Full-time core team&lt;/h2&gt; 
&lt;p&gt;Dioxus has grown from a side project to a small team of fulltime engineers. Thanks to the generous support of FutureWei, Satellite.im, the GitHub Accelerator program, we're able to work on Dioxus full-time. Our long term goal is for Dioxus to become self-sustaining by providing paid high-quality enterprise tools. If your company is interested in adopting Dioxus and would like to work with us, please reach out!&lt;/p&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;table style="width:100%"&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Web&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render directly to the DOM using WebAssembly&lt;/li&gt; 
      &lt;li&gt;Pre-render with SSR and rehydrate on the client&lt;/li&gt; 
      &lt;li&gt;Simple "hello world" at about 50kb, comparable to React&lt;/li&gt; 
      &lt;li&gt;Built-in dev server and hot reloading for quick iteration&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Desktop&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render using Webview or - experimentally - with WGPU or &lt;a href="https://freyaui.dev"&gt;Freya&lt;/a&gt; (Skia) &lt;/li&gt; 
      &lt;li&gt;Zero-config setup. Simply `cargo run` or `dx serve` to build your app &lt;/li&gt; 
      &lt;li&gt;Full support for native system access without IPC &lt;/li&gt; 
      &lt;li&gt;Supports macOS, Linux, and Windows. Portable &amp;lt;3mb binaries &lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Mobile&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Render using Webview or - experimentally - with WGPU or Skia &lt;/li&gt; 
      &lt;li&gt;Build .ipa and .apk files for iOS and Android &lt;/li&gt; 
      &lt;li&gt;Call directly into Java and Objective-C with minimal overhead&lt;/li&gt; 
      &lt;li&gt;From "hello world" to running on device in seconds&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt; &lt;b&gt;Server-side Rendering&lt;/b&gt; &lt;/td&gt; 
    &lt;td&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Suspense, hydration, and server-side rendering&lt;/li&gt; 
      &lt;li&gt;Quickly drop in backend functionality with server functions&lt;/li&gt; 
      &lt;li&gt;Extractors, middleware, and routing integrations&lt;/li&gt; 
      &lt;li&gt;Static-site generation and incremental regeneration&lt;/li&gt; 
     &lt;/ul&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;h2&gt;Running the examples&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The examples in the main branch of this repository target the git version of dioxus and the CLI. If you are looking for examples that work with the latest stable release of dioxus, check out the &lt;a href="https://github.com/DioxusLabs/dioxus/tree/v0.6/examples"&gt;0.6 branch&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;The examples in the top level of this repository can be run with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo run --example &amp;lt;example&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, we encourage you to download the dioxus-cli to test out features like hot-reloading. To install the most recent binary CLI, you can use cargo binstall.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo binstall dioxus-cli@0.7.0-rc.0 --force
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If this CLI is out-of-date, you can install it directly from git&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;cargo install --git https://github.com/DioxusLabs/dioxus dioxus-cli --locked
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the CLI, you can also run examples with the web platform. You will need to disable the default desktop feature and enable the web feature with this command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;dx serve --example &amp;lt;example&amp;gt; --platform web -- --no-default-features
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check out the website &lt;a href="https://dioxuslabs.com/learn/0.6/contributing"&gt;section on contributing&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Report issues on our &lt;a href="https://github.com/dioxuslabs/dioxus/issues"&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://discord.gg/XgGxMSkvUM"&gt;Join&lt;/a&gt; the discord and ask questions!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;a href="https://github.com/dioxuslabs/dioxus/graphs/contributors"&gt; &lt;img src="https://contrib.rocks/image?repo=dioxuslabs/dioxus&amp;amp;max=30&amp;amp;columns=10" /&gt; &lt;/a&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under either the &lt;a href="https://github.com/DioxusLabs/dioxus/raw/master/LICENSE-MIT"&gt;MIT license&lt;/a&gt; or the &lt;a href="https://github.com/DioxusLabs/dioxus/raw/master/LICENSE-APACHE"&gt;Apache-2 License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Dioxus by you, shall be licensed as MIT or Apache-2, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stremio/stremio-core</title>
      <link>https://github.com/Stremio/stremio-core</link>
      <description>&lt;p&gt;⚛️ The Stremio Core: types, addon system, UI models, core logic&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Stremio - the next generation media center&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/Stremio/stremio-core/actions/workflows/build.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/Stremio/stremio-core/build.yml?label=Build" alt="Build Workflow Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/Stremio/stremio-core/actions/workflows/msrv.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/Stremio/stremio-core/msrv.yml?label=MSRV" alt="Latest MSRV workflow Status" /&gt;&lt;/a&gt; &lt;a href="https://stremio.github.io/stremio-core"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/Stremio/stremio-core/docs.yml?event=workflow_dispatch&amp;amp;label=Latest%20deployed%20Docs" alt="Latest deployed docs on GH pages" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Stremio is a full-featured media center designed to help you organize and stream your favorite videos, movies and TV series. It will notify you for new episodes / movies, and allow you to find new content through Discover.&lt;/p&gt; 
&lt;p&gt;Stremio allows, using its &lt;a href="https://github.com/Stremio/stremio-addon-sdk"&gt;Add-ons system&lt;/a&gt;, to play movies, TV series and channels instantly.&lt;/p&gt; 
&lt;h2&gt;stremio-core&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;stremio-core&lt;/code&gt; is a rust crate that's designed to contain all the reusable logic between Stremio versions.&lt;/p&gt; 
&lt;h3&gt;Goals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Flexibility - can be integrated into existing code bases, across the entire stack, and in different paradigms 
  &lt;ul&gt; 
   &lt;li&gt;use case: &lt;code&gt;types&lt;/code&gt; can be used by add-ons&lt;/li&gt; 
   &lt;li&gt;use case: can be used with existing user authentication as an addition to an existing app&lt;/li&gt; 
   &lt;li&gt;use case: can use the &lt;code&gt;Context&lt;/code&gt; model to manage the user authentication/addons, using it as a backbone to the entire Stremio app&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Emphasis on correctness&lt;/li&gt; 
 &lt;li&gt;No cruft / legacy - not burdened by obsolete decisions &amp;amp; solutions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Modules&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;types&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;addon_transport&lt;/code&gt; - handles communication with add-ons, implements legacy protocol adapter&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;state_types&lt;/code&gt;: types that describe application state; inspired by the Elm architecture 
  &lt;ul&gt; 
   &lt;li&gt;Effects and Update traits&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;runtime&lt;/code&gt;: helps using &lt;code&gt;stremio-core&lt;/code&gt; in an application by handling the effects automatically&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;environment&lt;/code&gt;: a trait describes the environment (fetch, storage)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;msg&lt;/code&gt;: messages: actions, events&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;models&lt;/code&gt;: all stateful models, such as &lt;code&gt;Context&lt;/code&gt; (handling user authentication, add-ons), &lt;code&gt;Library&lt;/code&gt;, &lt;code&gt;CatalogFiltered&lt;/code&gt;, etc.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;cargo clippy
cargo fmt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Optimizing WASM output&lt;/h2&gt; 
&lt;p&gt;WASM output binary can get large, especially if we derive Serialize/Deserialize in places we don't need to&lt;/p&gt; 
&lt;p&gt;We can optimize it by running twiggy: &lt;code&gt;twiggy top ..._bg.wasm&lt;/code&gt; and seeing what the biggest code size offenders are&lt;/p&gt; 
&lt;h2&gt;Adding new actions&lt;/h2&gt; 
&lt;p&gt;Defining actions and what middleware requests they should trigger is defined in &lt;code&gt;src/state_types/msg/actions&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>eza-community/eza</title>
      <link>https://github.com/eza-community/eza</link>
      <description>&lt;p&gt;A modern alternative to ls&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;div align="center" markdown="1"&gt; 
  &lt;sup&gt;Special thanks to:&lt;/sup&gt; 
  &lt;br /&gt; 
  &lt;br /&gt; 
  &lt;a href="https://www.warp.dev/eza"&gt; &lt;img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae" /&gt; &lt;/a&gt; 
  &lt;h3&gt;&lt;a href="https://www.warp.dev/eza"&gt;Warp, the AI terminal for developers&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;&lt;a href="https://www.warp.dev/eza"&gt;Available for MacOS, Linux, &amp;amp; Windows&lt;/a&gt;&lt;br /&gt;&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;h1&gt;eza&lt;/h1&gt; 
 &lt;p&gt;A modern replacement for ls.&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://matrix.to/#/#eza-community:gitter.im"&gt;&lt;img alt="Gitter" src="https://img.shields.io/gitter/room/eza-community/eza?logo=element&amp;amp;link=https%3A%2F%2Fapp.gitter.im%2F%23%2Froom%2F%23eza%3Agitter.im&amp;amp;link=Gitter%20matrix%20room%20for%20Eza" width="200" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://nixos.org"&gt;&lt;img src="https://img.shields.io/badge/Built_With-Nix-5277C3.svg?logo=nixos&amp;amp;labelColor=73C3D5" alt="Built with Nix" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/eza-community/eza/main/CODE_OF_CONDUCT.md"&gt;&lt;img src="https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true" alt="Contributor Covenant" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://github.com/eza-community/eza/actions/workflows/unit-tests.yml"&gt;&lt;img src="https://github.com/eza-community/eza/actions/workflows/unit-tests.yml/badge.svg?sanitize=true" alt="Unit tests" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/eza"&gt;&lt;img src="https://img.shields.io/crates/v/eza?link=https%3A%2F%2Fcrates.io%2Fcrates%2Feza" alt="Crates.io" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/l/eza?link=https%3A%2F%2Fgithub.com%2Feza-community%2Feza%2Fblob%2Fmain%2FLICENCE" alt="Crates.io" /&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/eza-community/eza/main/docs/images/screenshots.png" alt="eza demo gif" /&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;eza&lt;/strong&gt; is a modern alternative for the venerable file-listing command-line program &lt;code&gt;ls&lt;/code&gt; that ships with Unix and Linux operating systems, giving it more features and better defaults. It uses colours to distinguish file types and metadata. It knows about symlinks, extended attributes, and Git. And it’s &lt;strong&gt;small&lt;/strong&gt;, &lt;strong&gt;fast&lt;/strong&gt;, and just &lt;strong&gt;one single binary&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;By deliberately making some decisions differently, eza attempts to be a more featureful, more user-friendly version of &lt;code&gt;ls&lt;/code&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;&lt;strong&gt;eza&lt;/strong&gt; features not in exa (non-exhaustive):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fixes &lt;a href="https://github.com/eza-community/eza/issues/66#issuecomment-1656758327"&gt;“The Grid Bug”&lt;/a&gt; introduced in exa 2021.&lt;/li&gt; 
 &lt;li&gt;Hyperlink support.&lt;/li&gt; 
 &lt;li&gt;Mount point details.&lt;/li&gt; 
 &lt;li&gt;Selinux context output.&lt;/li&gt; 
 &lt;li&gt;Git repo status output.&lt;/li&gt; 
 &lt;li&gt;Human readable relative dates.&lt;/li&gt; 
 &lt;li&gt;Several security fixes.&lt;/li&gt; 
 &lt;li&gt;Support for &lt;code&gt;bright&lt;/code&gt; terminal colours.&lt;/li&gt; 
 &lt;li&gt;Many smaller bug fixes/changes!&lt;/li&gt; 
 &lt;li&gt;Configuration &lt;code&gt;theme.yml&lt;/code&gt; file for customization of colors and icons.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;...and like, so much more that it became exhausting to update this all the time. Like seriously, we have a lot of good stuff.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;a id="try-it"&gt; &lt;h1&gt;Try it!&lt;/h1&gt; &lt;/a&gt; 
&lt;h3&gt;Nix ❄️&lt;/h3&gt; 
&lt;p&gt;If you already have Nix setup with flake support, you can try out eza with the &lt;code&gt;nix run&lt;/code&gt; command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nix run github:eza-community/eza
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Nix will build eza and run it.&lt;/p&gt; 
&lt;p&gt;If you want to pass arguments this way, use e.g. &lt;code&gt;nix run github:eza-community/eza -- -ol&lt;/code&gt;.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;eza is available for Windows, macOS and Linux. Platform and distribution specific installation instructions can be found in &lt;a href="https://raw.githubusercontent.com/eza-community/eza/main/INSTALL.md"&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/eza/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/eza.svg?columns=3" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;a id="options"&gt; &lt;h1&gt;Command-line options&lt;/h1&gt; &lt;/a&gt; 
&lt;p&gt;eza’s options are almost, but not quite, entirely unlike &lt;code&gt;ls&lt;/code&gt;’s. Quick overview:&lt;/p&gt; 
&lt;h2&gt;Display options&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;-1&lt;/strong&gt;, &lt;strong&gt;--oneline&lt;/strong&gt;: display one entry per line&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-G&lt;/strong&gt;, &lt;strong&gt;--grid&lt;/strong&gt;: display entries as a grid (default)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-l&lt;/strong&gt;, &lt;strong&gt;--long&lt;/strong&gt;: display extended details and attributes&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-R&lt;/strong&gt;, &lt;strong&gt;--recurse&lt;/strong&gt;: recurse into directories&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-T&lt;/strong&gt;, &lt;strong&gt;--tree&lt;/strong&gt;: recurse into directories as a tree&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-x&lt;/strong&gt;, &lt;strong&gt;--across&lt;/strong&gt;: sort the grid across, rather than downwards&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-F&lt;/strong&gt;, &lt;strong&gt;--classify=(when)&lt;/strong&gt;: display type indicator by file names (always, auto, never)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--colo[u]r=(when)&lt;/strong&gt;: when to use terminal colours (always, auto, never)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--colo[u]r-scale=(field)&lt;/strong&gt;: highlight levels of &lt;code&gt;field&lt;/code&gt; distinctly(all, age, size)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--color-scale-mode=(mode)&lt;/strong&gt;: use gradient or fixed colors in --color-scale. valid options are &lt;code&gt;fixed&lt;/code&gt; or &lt;code&gt;gradient&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--icons=(when)&lt;/strong&gt;: when to display icons (always, auto, never)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--hyperlink&lt;/strong&gt;: display entries as hyperlinks&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--absolute=(mode)&lt;/strong&gt;: display entries with their absolute path (on, follow, off)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-w&lt;/strong&gt;, &lt;strong&gt;--width=(columns)&lt;/strong&gt;: set screen width in columns&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Filtering options&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;-a&lt;/strong&gt;, &lt;strong&gt;--all&lt;/strong&gt;: show hidden and 'dot' files&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-d&lt;/strong&gt;, &lt;strong&gt;--list-dirs&lt;/strong&gt;: list directories like regular files&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-L&lt;/strong&gt;, &lt;strong&gt;--level=(depth)&lt;/strong&gt;: limit the depth of recursion&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-r&lt;/strong&gt;, &lt;strong&gt;--reverse&lt;/strong&gt;: reverse the sort order&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-s&lt;/strong&gt;, &lt;strong&gt;--sort=(field)&lt;/strong&gt;: which field to sort by&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--group-directories-first&lt;/strong&gt;: list directories before other files&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--group-directories-last&lt;/strong&gt;: list directories after other files&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-D&lt;/strong&gt;, &lt;strong&gt;--only-dirs&lt;/strong&gt;: list only directories&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-f&lt;/strong&gt;, &lt;strong&gt;--only-files&lt;/strong&gt;: list only files&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--no-symlinks&lt;/strong&gt;: don't show symbolic links&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--show-symlinks&lt;/strong&gt;: explicitly show links (with &lt;code&gt;--only-dirs&lt;/code&gt;, &lt;code&gt;--only-files&lt;/code&gt;, to show symlinks that match the filter)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--git-ignore&lt;/strong&gt;: ignore files mentioned in &lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-I&lt;/strong&gt;, &lt;strong&gt;--ignore-glob=(globs)&lt;/strong&gt;: glob patterns (pipe-separated) of files to ignore&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Pass the &lt;code&gt;--all&lt;/code&gt; option twice to also show the &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; directories.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Long view options&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand&lt;/summary&gt; 
 &lt;p&gt;These options are available when running with &lt;code&gt;--long&lt;/code&gt; (&lt;code&gt;-l&lt;/code&gt;):&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;-b&lt;/strong&gt;, &lt;strong&gt;--binary&lt;/strong&gt;: list file sizes with binary prefixes&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-B&lt;/strong&gt;, &lt;strong&gt;--bytes&lt;/strong&gt;: list file sizes in bytes, without any prefixes&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-g&lt;/strong&gt;, &lt;strong&gt;--group&lt;/strong&gt;: list each file’s group&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--smart-group&lt;/strong&gt;: only show group if it has a different name from owner&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-h&lt;/strong&gt;, &lt;strong&gt;--header&lt;/strong&gt;: add a header row to each column&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-H&lt;/strong&gt;, &lt;strong&gt;--links&lt;/strong&gt;: list each file’s number of hard links&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-i&lt;/strong&gt;, &lt;strong&gt;--inode&lt;/strong&gt;: list each file’s inode number&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-m&lt;/strong&gt;, &lt;strong&gt;--modified&lt;/strong&gt;: use the modified timestamp field&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-M&lt;/strong&gt;, &lt;strong&gt;--mounts&lt;/strong&gt;: Show mount details (Linux and MacOS only).&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-S&lt;/strong&gt;, &lt;strong&gt;--blocksize&lt;/strong&gt;: show size of allocated file system blocks&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-t&lt;/strong&gt;, &lt;strong&gt;--time=(field)&lt;/strong&gt;: which timestamp field to use&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-u&lt;/strong&gt;, &lt;strong&gt;--accessed&lt;/strong&gt;: use the accessed timestamp field&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-U&lt;/strong&gt;, &lt;strong&gt;--created&lt;/strong&gt;: use the created timestamp field&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-X&lt;/strong&gt;, &lt;strong&gt;--dereference&lt;/strong&gt;: dereference symlinks for file information&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-Z&lt;/strong&gt;, &lt;strong&gt;--context&lt;/strong&gt;: list each file’s security context&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-@&lt;/strong&gt;, &lt;strong&gt;--extended&lt;/strong&gt;: list each file’s extended attributes and sizes&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--changed&lt;/strong&gt;: use the changed timestamp field&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--git&lt;/strong&gt;: list each file’s Git status, if tracked or ignored&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--git-repos&lt;/strong&gt;: list each directory’s Git status, if tracked&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--git-repos-no-status&lt;/strong&gt;: list whether a directory is a Git repository, but not its status (faster)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--no-git&lt;/strong&gt;: suppress Git status (always overrides &lt;code&gt;--git&lt;/code&gt;, &lt;code&gt;--git-repos&lt;/code&gt;, &lt;code&gt;--git-repos-no-status&lt;/code&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--time-style&lt;/strong&gt;: how to format timestamps. valid timestamp styles are ‘&lt;code&gt;default&lt;/code&gt;’, ‘&lt;code&gt;iso&lt;/code&gt;’, ‘&lt;code&gt;long-iso&lt;/code&gt;’, ‘&lt;code&gt;full-iso&lt;/code&gt;’, ‘&lt;code&gt;relative&lt;/code&gt;’, or a custom style ‘&lt;code&gt;+&amp;lt;FORMAT&amp;gt;&lt;/code&gt;’ (E.g., ‘&lt;code&gt;+%Y-%m-%d %H:%M&lt;/code&gt;’ =&amp;gt; ‘&lt;code&gt;2023-09-30 13:00&lt;/code&gt;’. For more specifications on the format string, see the &lt;em&gt;&lt;code&gt;eza(1)&lt;/code&gt; manual page&lt;/em&gt; and &lt;a href="https://docs.rs/chrono/latest/chrono/format/strftime/index.html"&gt;chrono documentation&lt;/a&gt;.).&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--total-size&lt;/strong&gt;: show recursive directory size&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--no-permissions&lt;/strong&gt;: suppress the permissions field&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;-o&lt;/strong&gt;, &lt;strong&gt;--octal-permissions&lt;/strong&gt;: list each file's permission in octal format&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--no-filesize&lt;/strong&gt;: suppress the filesize field&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--no-user&lt;/strong&gt;: suppress the user field&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--no-time&lt;/strong&gt;: suppress the time field&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;--stdin&lt;/strong&gt;: read file names from stdin&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Some of the options accept parameters:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Valid &lt;strong&gt;--colo[u]r&lt;/strong&gt; options are &lt;strong&gt;always&lt;/strong&gt;, &lt;strong&gt;automatic&lt;/strong&gt; (or &lt;strong&gt;auto&lt;/strong&gt; for short), and &lt;strong&gt;never&lt;/strong&gt;.&lt;/li&gt; 
  &lt;li&gt;Valid sort fields are &lt;strong&gt;accessed&lt;/strong&gt;, &lt;strong&gt;changed&lt;/strong&gt;, &lt;strong&gt;created&lt;/strong&gt;, &lt;strong&gt;extension&lt;/strong&gt;, &lt;strong&gt;Extension&lt;/strong&gt;, &lt;strong&gt;inode&lt;/strong&gt;, &lt;strong&gt;modified&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;Name&lt;/strong&gt;, &lt;strong&gt;size&lt;/strong&gt;, &lt;strong&gt;type&lt;/strong&gt;, and &lt;strong&gt;none&lt;/strong&gt;. Fields starting with a capital letter sort uppercase before lowercase. The modified field has the aliases &lt;strong&gt;date&lt;/strong&gt;, &lt;strong&gt;time&lt;/strong&gt;, and &lt;strong&gt;newest&lt;/strong&gt;, while its reverse has the aliases &lt;strong&gt;age&lt;/strong&gt; and &lt;strong&gt;oldest&lt;/strong&gt;.&lt;/li&gt; 
  &lt;li&gt;Valid time fields are &lt;strong&gt;modified&lt;/strong&gt;, &lt;strong&gt;changed&lt;/strong&gt;, &lt;strong&gt;accessed&lt;/strong&gt;, and &lt;strong&gt;created&lt;/strong&gt;.&lt;/li&gt; 
  &lt;li&gt;Valid time styles are &lt;strong&gt;default&lt;/strong&gt;, &lt;strong&gt;iso&lt;/strong&gt;, &lt;strong&gt;long-iso&lt;/strong&gt;, &lt;strong&gt;full-iso&lt;/strong&gt;, and &lt;strong&gt;relative&lt;/strong&gt;.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;See the &lt;code&gt;man&lt;/code&gt; pages for further documentation of usage. They are available&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;online &lt;a href="https://github.com/eza-community/eza/tree/main/man"&gt;in the repo&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;in your terminal via &lt;code&gt;man eza&lt;/code&gt;, as of version &lt;a href="https://github.com/eza-community/eza/raw/main/CHANGELOG.md#01813---2024-04-25"&gt;&lt;code&gt;[0.18.13] - 2024-04-25&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Custom Themes&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to expand&lt;/summary&gt; 
 &lt;p&gt;&lt;strong&gt;Eza&lt;/strong&gt; has recently added support for a &lt;code&gt;theme.yml&lt;/code&gt; file, where you can specify all of the existing theme-ing options available for the &lt;code&gt;LS_COLORS&lt;/code&gt; and &lt;code&gt;EXA_COLORS&lt;/code&gt; environment variables, as well as the option to specify different icons for different file types and extensions. Any existing environment variables set will continue to work and will take precedence for backwards compatibility.&lt;/p&gt; 
 &lt;h4&gt;&lt;strong&gt;New&lt;/strong&gt; Pre-made themes&lt;/h4&gt; 
 &lt;p&gt;Check out the themes available in the official &lt;a href="https://github.com/eza-community/eza-themes"&gt;eza-themes&lt;/a&gt; repository, or contribute your own.&lt;/p&gt; 
 &lt;p&gt;An example theme file is available in &lt;code&gt;docs/theme.yml&lt;/code&gt;, and needs to either be placed in a directory specified by the environment variable &lt;code&gt;EZA_CONFIG_DIR&lt;/code&gt;, or will looked for by default in &lt;code&gt;$XDG_CONFIG_HOME/eza&lt;/code&gt;.&lt;/p&gt; 
 &lt;p&gt;Full details are available on the &lt;a href="https://github.com/eza-community/eza/tree/main/man/eza_colors-explanation.5.md"&gt;man page&lt;/a&gt; and an example theme file is included &lt;a href="https://github.com/eza-community/eza/tree/main/docs/theme.yml"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h1&gt;Hacking on eza&lt;/h1&gt; 
&lt;p&gt;If you wanna contribute to eza, firstly, you're expected to follow our &lt;a href="https://github.com/eza-community/eza/raw/main/CODE_OF_CONDUCT.md"&gt;code of conduct&lt;/a&gt;. After having understood the code of conduct, you can have a look at our &lt;a href="https://github.com/eza-community/eza/raw/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more info about actual hacking.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://star-history.com/#eza-community/eza&amp;amp;Date"&gt;&lt;img src="https://api.star-history.com/svg?repos=eza-community/eza&amp;amp;type=Date" alt="Star History Chart" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iced-rs/iced</title>
      <link>https://github.com/iced-rs/iced</link>
      <description>&lt;p&gt;A cross-platform GUI library for Rust, inspired by Elm&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/iced-rs/iced/master/docs/logo.svg?sanitize=true" width="140px" /&gt; 
 &lt;h1&gt;Iced&lt;/h1&gt; 
 &lt;p&gt;&lt;a href="https://docs.rs/iced/"&gt;&lt;img src="https://docs.rs/iced/badge.svg?sanitize=true" alt="Documentation" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iced"&gt;&lt;img src="https://img.shields.io/crates/v/iced.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/iced-rs/iced/raw/master/LICENSE"&gt;&lt;img src="https://img.shields.io/crates/l/iced.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/iced"&gt;&lt;img src="https://img.shields.io/crates/d/iced.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://github.com/iced-rs/iced/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/iced-rs/iced/test.yml?branch=master&amp;amp;event=push&amp;amp;label=test" alt="Test Status" /&gt;&lt;/a&gt; &lt;a href="https://discourse.iced.rs/"&gt;&lt;img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscourse.iced.rs%2Fsite%2Fstatistics.json&amp;amp;query=%24.users_count&amp;amp;suffix=%20users&amp;amp;label=discourse&amp;amp;color=5e7ce2" alt="Discourse" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/3xZJ65GAhd"&gt;&lt;img src="https://img.shields.io/discord/628993209984614400?label=&amp;amp;labelColor=6A7EC2&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8" alt="Discord Server" /&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;A cross-platform GUI library for Rust focused on simplicity and type-safety. Inspired by &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt;.&lt;/p&gt; 
 &lt;a href="https://github.com/squidowl/halloy"&gt; &lt;img src="https://iced.rs/showcase/halloy.gif" width="460px" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/hecrj/icebreaker"&gt; &lt;img src="https://iced.rs/showcase/icebreaker.gif" width="360px" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Simple, easy-to-use, batteries-included API&lt;/li&gt; 
 &lt;li&gt;Type-safe, reactive programming model&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/docs/images/todos_desktop.jpg"&gt;Cross-platform support&lt;/a&gt; (Windows, macOS, Linux, and the Web)&lt;/li&gt; 
 &lt;li&gt;Responsive layout&lt;/li&gt; 
 &lt;li&gt;Built-in widgets (including &lt;a href="https://iced.rs/examples/text_input.mp4"&gt;text inputs&lt;/a&gt;, &lt;a href="https://iced.rs/examples/scrollable.mp4"&gt;scrollables&lt;/a&gt;, and more!)&lt;/li&gt; 
 &lt;li&gt;Custom widget support (create your own!)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://iced.rs/examples/debug.mp4"&gt;Debug overlay with performance metrics&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;First-class support for async actions (use futures!)&lt;/li&gt; 
 &lt;li&gt;Modular ecosystem split into reusable parts: 
  &lt;ul&gt; 
   &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/runtime/"&gt;renderer-agnostic native runtime&lt;/a&gt; enabling integration with existing systems&lt;/li&gt; 
   &lt;li&gt;Two built-in renderers leveraging &lt;a href="https://github.com/gfx-rs/wgpu"&gt;&lt;code&gt;wgpu&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/RazrFalcon/tiny-skia"&gt;&lt;code&gt;tiny-skia&lt;/code&gt;&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/wgpu/"&gt;&lt;code&gt;iced_wgpu&lt;/code&gt;&lt;/a&gt; supporting Vulkan, Metal and DX12&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/tiny_skia/"&gt;&lt;code&gt;iced_tiny_skia&lt;/code&gt;&lt;/a&gt; offering a software alternative as a fallback&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;A &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/winit/"&gt;windowing shell&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Iced is currently experimental software.&lt;/strong&gt; &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/ROADMAP.md"&gt;Take a look at the roadmap&lt;/a&gt; and &lt;a href="https://github.com/iced-rs/iced/issues"&gt;check out the issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;Inspired by &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;, Iced expects you to split user interfaces into four different concepts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt; — the state of your application&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Messages&lt;/strong&gt; — user interactions or meaningful events that you care about&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View logic&lt;/strong&gt; — a way to display your &lt;strong&gt;state&lt;/strong&gt; as widgets that may produce &lt;strong&gt;messages&lt;/strong&gt; on user interaction&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update logic&lt;/strong&gt; — a way to react to &lt;strong&gt;messages&lt;/strong&gt; and update your &lt;strong&gt;state&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We can build something to see how this works! Let's say we want a simple counter that can be incremented and decremented using two buttons.&lt;/p&gt; 
&lt;p&gt;We start by modelling the &lt;strong&gt;state&lt;/strong&gt; of our application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Default)]
struct Counter {
    value: i32,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we need to define the possible user interactions of our counter: the button presses. These interactions are our &lt;strong&gt;messages&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[derive(Debug, Clone, Copy)]
pub enum Message {
    Increment,
    Decrement,
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, let's show the actual counter by putting it all together in our &lt;strong&gt;view logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use iced::widget::{button, column, text, Column};

impl Counter {
    pub fn view(&amp;amp;self) -&amp;gt; Column&amp;lt;Message&amp;gt; {
        // We use a column: a simple vertical layout
        column![
            // The increment button. We tell it to produce an
            // `Increment` message when pressed
            button("+").on_press(Message::Increment),

            // We show the value of the counter here
            text(self.value).size(50),

            // The decrement button. We tell it to produce a
            // `Decrement` message when pressed
            button("-").on_press(Message::Decrement),
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, we need to be able to react to any produced &lt;strong&gt;messages&lt;/strong&gt; and change our &lt;strong&gt;state&lt;/strong&gt; accordingly in our &lt;strong&gt;update logic&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;impl Counter {
    // ...

    pub fn update(&amp;amp;mut self, message: Message) {
        match message {
            Message::Increment =&amp;gt; {
                self.value += 1;
            }
            Message::Decrement =&amp;gt; {
                self.value -= 1;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And that's everything! We just wrote a whole user interface. Let's run it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;fn main() -&amp;gt; iced::Result {
    iced::run("A cool counter", Counter::update, Counter::view)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Iced will automatically:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Take the result of our &lt;strong&gt;view logic&lt;/strong&gt; and layout its widgets.&lt;/li&gt; 
 &lt;li&gt;Process events from our system and produce &lt;strong&gt;messages&lt;/strong&gt; for our &lt;strong&gt;update logic&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Draw the resulting user interface.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Read the &lt;a href="https://book.iced.rs/"&gt;book&lt;/a&gt;, the &lt;a href="https://docs.rs/iced/"&gt;documentation&lt;/a&gt;, and the &lt;a href="https://github.com/iced-rs/iced/tree/master/examples#examples"&gt;examples&lt;/a&gt; to learn more!&lt;/p&gt; 
&lt;h2&gt;Implementation details&lt;/h2&gt; 
&lt;p&gt;Iced was originally born as an attempt at bringing the simplicity of &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt; and &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt; into &lt;a href="https://github.com/hecrj/coffee"&gt;Coffee&lt;/a&gt;, a 2D game library I am working on.&lt;/p&gt; 
&lt;p&gt;The core of the library was implemented during May 2019 in &lt;a href="https://github.com/hecrj/coffee/pull/35"&gt;this pull request&lt;/a&gt;. &lt;a href="https://github.com/iced-rs/iced/tree/0.1.0-alpha"&gt;The first alpha version&lt;/a&gt; was eventually released as &lt;a href="https://www.reddit.com/r/rust/comments/czzjnv/iced_a_rendereragnostic_gui_library_focused_on/"&gt;a renderer-agnostic GUI library&lt;/a&gt;. The library did not provide a renderer and implemented the current &lt;a href="https://raw.githubusercontent.com/iced-rs/iced/master/examples/README.md#tour"&gt;tour example&lt;/a&gt; on top of &lt;a href="https://github.com/ggez/ggez"&gt;&lt;code&gt;ggez&lt;/code&gt;&lt;/a&gt;, a game library.&lt;/p&gt; 
&lt;p&gt;Since then, the focus has shifted towards providing a batteries-included, end-user-oriented GUI library, while keeping the ecosystem modular.&lt;/p&gt; 
&lt;h2&gt;Contributing / Feedback&lt;/h2&gt; 
&lt;p&gt;If you want to contribute, please read our &lt;a href="https://github.com/iced-rs/iced/raw/master/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Feedback is also welcome! You can create a new topic in &lt;a href="https://discourse.iced.rs/"&gt;our Discourse forum&lt;/a&gt; or come chat to &lt;a href="https://discord.gg/3xZJ65GAhd"&gt;our Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;The development of Iced is sponsored by the &lt;a href="https://cryptowat.ch/charts"&gt;Cryptowatch&lt;/a&gt; team at &lt;a href="https://kraken.com/"&gt;Kraken.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zed-industries/zed</title>
      <link>https://github.com/zed-industries/zed</link>
      <description>&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://zed.dev"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/zed-industries/zed/main/assets/badge/v0.json" alt="Zed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/zed-industries/zed/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href="https://github.com/atom/atom"&gt;Atom&lt;/a&gt; and &lt;a href="https://github.com/tree-sitter/tree-sitter"&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;On macOS and Linux you can &lt;a href="https://zed.dev/download"&gt;download Zed directly&lt;/a&gt; or &lt;a href="https://zed.dev/docs/linux#installing-via-a-package-manager"&gt;install Zed via your local package manager&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Other platforms are not yet available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Windows (&lt;a href="https://github.com/zed-industries/zed/issues/5394"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Web (&lt;a href="https://github.com/zed-industries/zed/issues/5396"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Developing Zed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/macos.md"&gt;Building Zed for macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/linux.md"&gt;Building Zed for Linux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/windows.md"&gt;Building Zed for Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/development/local-collaboration.md"&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; 
&lt;p&gt;Also... we're hiring! Check out our &lt;a href="https://zed.dev/jobs"&gt;jobs&lt;/a&gt; page for open roles.&lt;/p&gt; 
&lt;h3&gt;Licensing&lt;/h3&gt; 
&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; 
&lt;p&gt;We use &lt;a href="https://github.com/EmbarkStudios/cargo-about"&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you've created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate's Cargo.toml.&lt;/li&gt; 
 &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license's requirements. If you're unsure, ask a lawyer. Once you've verified that this system is acceptable add the license's SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href="https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration"&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rust-lang/rust</title>
      <link>https://github.com/rust-lang/rust</link>
      <description>&lt;p&gt;Empowering everyone to build reliable and efficient software.&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-dark.svg" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg" /&gt; 
  &lt;img alt="The Rust Programming Language: A language empowering everyone to build reliable and efficient software" src="https://raw.githubusercontent.com/rust-lang/www.rust-lang.org/master/static/images/rust-social-wide-light.svg?sanitize=true" width="50%" /&gt; 
 &lt;/picture&gt; 
 &lt;p&gt;&lt;a href="https://www.rust-lang.org/"&gt;Website&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn/get-started"&gt;Getting started&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn"&gt;Learn&lt;/a&gt; | &lt;a href="https://www.rust-lang.org/learn#learn-use"&gt;Documentation&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;This is the main source code repository for &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;. It contains the compiler, standard library, and documentation.&lt;/p&gt; 
&lt;h2&gt;Why Rust?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Fast and memory-efficient, suitable for critical services, embedded devices, and easily integrated with other languages.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reliability:&lt;/strong&gt; Our rich type system and ownership model ensure memory and thread safety, reducing bugs at compile-time.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Productivity:&lt;/strong&gt; Comprehensive documentation, a compiler committed to providing great diagnostics, and advanced tooling including package manager and build tool (&lt;a href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;), auto-formatter (&lt;a href="https://github.com/rust-lang/rustfmt"&gt;rustfmt&lt;/a&gt;), linter (&lt;a href="https://github.com/rust-lang/rust-clippy"&gt;Clippy&lt;/a&gt;) and editor support (&lt;a href="https://github.com/rust-lang/rust-analyzer"&gt;rust-analyzer&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;Read &lt;a href="https://doc.rust-lang.org/book/ch01-01-installation.html"&gt;"Installation"&lt;/a&gt; from &lt;a href="https://doc.rust-lang.org/book/index.html"&gt;The Book&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing from Source&lt;/h2&gt; 
&lt;p&gt;If you really want to install from source (though this is not recommended), see &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/INSTALL.md"&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Help&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://www.rust-lang.org/community"&gt;https://www.rust-lang.org/community&lt;/a&gt; for a list of chat platforms and forums.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Rust is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt;, and &lt;a href="https://raw.githubusercontent.com/rust-lang/rust/master/COPYRIGHT"&gt;COPYRIGHT&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Trademark&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://rustfoundation.org/"&gt;The Rust Foundation&lt;/a&gt; owns and protects the Rust and Cargo trademarks and logos (the "Rust Trademarks").&lt;/p&gt; 
&lt;p&gt;If you want to use these names or brands, please read the &lt;a href="https://rustfoundation.org/policy/rust-trademark-policy/"&gt;Rust language trademark policy&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Third-party logos may be subject to third-party copyrights and trademarks. See &lt;a href="https://www.rust-lang.org/policies/licenses"&gt;Licenses&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>librespot-org/librespot</title>
      <link>https://github.com/librespot-org/librespot</link>
      <description>&lt;p&gt;Open Source Spotify client library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://github.com/librespot-org/librespot/actions"&gt;&lt;img src="https://github.com/librespot-org/librespot/workflows/build/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;&lt;img src="https://badges.gitter.im/librespot-org/librespot.png" alt="Gitter chat" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/librespot"&gt;&lt;img src="https://img.shields.io/crates/v/librespot.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Current maintainers are &lt;a href="https://github.com/orgs/librespot-org/people"&gt;listed on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;librespot&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;librespot&lt;/em&gt; is an open source client library for Spotify. It enables applications to use Spotify's service to control and play music via various backends, and to act as a Spotify Connect receiver. It is an alternative to the official and &lt;a href="https://pyspotify.mopidy.com/en/latest/#libspotify-s-deprecation"&gt;now deprecated&lt;/a&gt; closed-source &lt;code&gt;libspotify&lt;/code&gt;. Additionally, it will provide extra features which are not available in the official library.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note: librespot only works with Spotify Premium. This will remain the case. We will not support any features to make librespot compatible with free accounts, such as limited skips and adverts.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;We're available on &lt;a href="https://crates.io/crates/librespot"&gt;crates.io&lt;/a&gt; as the &lt;em&gt;librespot&lt;/em&gt; package. Simply run &lt;code&gt;cargo install librespot&lt;/code&gt; to install librespot on your system. Check the wiki for more info and possible &lt;a href="https://github.com/librespot-org/librespot/wiki/Options"&gt;usage options&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;After installation, you can run librespot from the CLI using a command such as &lt;code&gt;librespot -n "Librespot Speaker" -b 160&lt;/code&gt; to create a speaker called &lt;em&gt;Librespot Speaker&lt;/em&gt; serving 160 kbps audio.&lt;/p&gt; 
&lt;h2&gt;This fork&lt;/h2&gt; 
&lt;p&gt;As the origin by &lt;a href="https://github.com/plietar/"&gt;plietar&lt;/a&gt; is no longer actively maintained, this organisation and repository have been set up so that the project may be maintained and upgraded in the future.&lt;/p&gt; 
&lt;h1&gt;Documentation&lt;/h1&gt; 
&lt;p&gt;Documentation is currently a work in progress, contributions are welcome!&lt;/p&gt; 
&lt;p&gt;There is some brief documentation on how the protocol works in the &lt;a href="https://github.com/librespot-org/librespot/tree/master/docs"&gt;docs&lt;/a&gt; folder.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/librespot-org/librespot/raw/master/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; contains detailed instructions on setting up a development environment, and compiling librespot. More general usage and compilation information is available on the &lt;a href="https://github.com/librespot-org/librespot/wiki"&gt;wiki&lt;/a&gt;. &lt;a href="https://github.com/librespot-org/librespot/raw/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; also contains our contributing guidelines.&lt;/p&gt; 
&lt;p&gt;If you wish to learn more about how librespot works overall, the best way is to simply read the code, and ask any questions you have in our &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;Gitter Room&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Issues &amp;amp; Discussions&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;We have recently started using Github discussions for general questions and feature requests, as they are a more natural medium for such cases, and allow for upvoting to prioritize feature development. Check them out &lt;a href="https://github.com/librespot-org/librespot/discussions"&gt;here&lt;/a&gt;. Bugs and issues with the underlying library should still be reported as issues.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you run into a bug when using librespot, please search the existing issues before opening a new one. Chances are, we've encountered it before, and have provided a resolution. If not, please open a new one, and where possible, include the backtrace librespot generates on crashing, along with anything we can use to reproduce the issue, e.g. the Spotify URI of the song that caused the crash.&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;p&gt;A quick walkthrough of the build process is outlined below, while a detailed compilation guide can be found &lt;a href="https://github.com/librespot-org/librespot/raw/master/COMPILING.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Additional Dependencies&lt;/h2&gt; 
&lt;p&gt;We recently switched to using &lt;a href="https://github.com/tomaka/rodio"&gt;Rodio&lt;/a&gt; for audio playback by default, hence for macOS and Windows, you should just be able to clone and build librespot (with the command below). For Linux, you will need to run the additional commands below, depending on your distro.&lt;/p&gt; 
&lt;p&gt;On Debian/Ubuntu, the following command will install these dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo apt-get install build-essential libasound2-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Fedora systems, the following command will install these dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo dnf install alsa-lib-devel make gcc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;librespot currently offers the following selection of &lt;a href="https://github.com/librespot-org/librespot/wiki/Audio-Backends"&gt;audio backends&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Rodio (default)
ALSA
GStreamer
PortAudio
PulseAudio
JACK
JACK over Rodio
SDL
Pipe
Subprocess
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please check &lt;a href="https://raw.githubusercontent.com/librespot-org/librespot/dev/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; for detailed information on TLS, audio, and discovery backend dependencies, or the &lt;a href="https://github.com/librespot-org/librespot/wiki/Compiling#general-dependencies"&gt;Compiling&lt;/a&gt; entry on the wiki for additional backend specific dependencies.&lt;/p&gt; 
&lt;p&gt;Once you've installed the dependencies and cloned this repository you can build &lt;em&gt;librespot&lt;/em&gt; with the default features using Cargo.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, this builds with native-tls (system TLS), rodio audio backend, and libmdns discovery. See &lt;a href="https://raw.githubusercontent.com/librespot-org/librespot/dev/COMPILING.md"&gt;COMPILING.md&lt;/a&gt; for information on selecting different TLS, audio, and discovery backends.&lt;/p&gt; 
&lt;h1&gt;Packages&lt;/h1&gt; 
&lt;p&gt;librespot is also available via official package system on various operating systems such as Linux, FreeBSD, NetBSD. &lt;a href="https://repology.org/project/librespot/versions"&gt;Repology&lt;/a&gt; offers a good overview.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/librespot/versions"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/librespot.svg?sanitize=true" alt="Packaging status" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;A sample program implementing a headless Spotify Connect receiver is provided. Once you've built &lt;em&gt;librespot&lt;/em&gt;, run it using :&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;target/release/librespot --name DEVICENAME
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above is a minimal example. Here is a more fully fledged one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;target/release/librespot -n "Librespot" -b 320 -c ./cache --enable-volume-normalisation --initial-volume 75 --device-type avr
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command will create a receiver named &lt;code&gt;Librespot&lt;/code&gt;, with bitrate set to 320 kbps, initial volume at 75%, with volume normalisation enabled, and the device displayed in the app as an Audio/Video Receiver. A folder named &lt;code&gt;cache&lt;/code&gt; will be created/used in the current directory, and be used to cache audio data and credentials.&lt;/p&gt; 
&lt;p&gt;A full list of runtime options is available &lt;a href="https://github.com/librespot-org/librespot/wiki/Options"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Please Note: When using the cache feature, an authentication blob is stored for your account in the cache directory. For security purposes, we recommend that you set directory permissions on the cache directory to &lt;code&gt;700&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Come and hang out on gitter if you need help or want to offer some: &lt;a href="https://gitter.im/librespot-org/spotify-connect-resources"&gt;https://gitter.im/librespot-org/spotify-connect-resources&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;Using this code to connect to Spotify's API is probably forbidden by them. Use at your own risk.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Everything in this repository is licensed under the MIT license.&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;This is a non exhaustive list of projects that either use or have modified librespot. If you'd like to include yours, submit a PR.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/librespot-org/librespot-golang"&gt;librespot-golang&lt;/a&gt; - A golang port of librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/marcelveldt/plugin.audio.spotify"&gt;plugin.audio.spotify&lt;/a&gt; - A Kodi plugin for Spotify.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dtcooper/raspotify"&gt;raspotify&lt;/a&gt; - A Spotify Connect client that mostly Just Works™&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Spotifyd/spotifyd"&gt;Spotifyd&lt;/a&gt; - A stripped down librespot UNIX daemon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nicokaiser/rpi-audio-receiver"&gt;rpi-audio-receiver&lt;/a&gt; - easy Raspbian install scripts for Spotifyd, Bluetooth, Shairport and other audio receivers&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/badfortrains/spotcontrol"&gt;Spotcontrol&lt;/a&gt; - A golang implementation of a Spotify Connect controller. No Playback functionality.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/devgianlu/librespot-java"&gt;librespot-java&lt;/a&gt; - A Java port of librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hrkfdn/ncspot"&gt;ncspot&lt;/a&gt; - Cross-platform ncurses Spotify client.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xMordax/ansible-role-librespot/tree/master"&gt;ansible-role-librespot&lt;/a&gt; - Ansible role that will build, install and configure Librespot.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/xou816/spot"&gt;Spot&lt;/a&gt; - Gtk/Rust native Spotify client for the GNOME desktop.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/badaix/snapcast"&gt;Snapcast&lt;/a&gt; - synchronised multi-room audio player that uses librespot as its source for Spotify content&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mupibox.de/"&gt;MuPiBox&lt;/a&gt; - Portable music box for Spotify and local media based on Raspberry Pi. Operated via touchscreen. Suitable for children and older people.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>get-convex/convex-backend</title>
      <link>https://github.com/get-convex/convex-backend</link>
      <description>&lt;p&gt;The open-source reactive database for app developers&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://static.convex.dev/logo/convex-logo-light.svg" width="600" /&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://static.convex.dev/logo/convex-logo.svg" width="600" /&gt; 
  &lt;img alt="Convex logo" src="https://static.convex.dev/logo/convex-logo.svg?sanitize=true" width="600" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;p&gt;&lt;a href="https://convex.dev"&gt;Convex&lt;/a&gt; is the open-source reactive database designed to make life easy for web app developers, whether human or LLM. Fetch data and perform business logic with strong consistency by writing pure TypeScript.&lt;/p&gt; 
&lt;p&gt;Convex provides a database, a place to write your server functions, and client libraries. It makes it easy to build and scale dynamic live-updating apps. &lt;a href="https://docs.convex.dev/understanding/"&gt;Read the docs to learn more&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Development of the Convex backend is led by the Convex team. We &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/CONTRIBUTING.md"&gt;welcome bug fixes&lt;/a&gt; and &lt;a href="https://discord.gg/convex"&gt;love receiving feedback&lt;/a&gt;. We keep this repository synced with any internal development work within a handful of days.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit our &lt;a href="https://docs.convex.dev/"&gt;documentation&lt;/a&gt; to learn more about Convex and follow our getting started guides.&lt;/p&gt; 
&lt;p&gt;The easiest way to build with Convex is through our &lt;a href="https://www.convex.dev/plans"&gt;cloud platform&lt;/a&gt;, which includes a generous free tier and lets you focus on building your application without worrying about infrastructure. Many small applications and side-projects can operate entirely on the free tier with zero cost and zero maintenance.&lt;/p&gt; 
&lt;h2&gt;Self Hosting&lt;/h2&gt; 
&lt;p&gt;The self-hosted product includes most features of the cloud product, including the dashboard and CLI. Self-hosted Convex works well with a variety of tools including Neon, Fly.io, Vercel, Netlify, RDS, Sqlite, Postgres, and more.&lt;/p&gt; 
&lt;p&gt;You can either use Docker (recommended) or a prebuilt binary to self host Convex. Check out our &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/self-hosted/README.md"&gt;self-hosting guide&lt;/a&gt; for detailed instructions. Community support for self-hosting is available in the &lt;code&gt;#self-hosted&lt;/code&gt; channel on &lt;a href="https://discord.gg/convex"&gt;Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community &amp;amp; Support&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Join our &lt;a href="https://discord.gg/convex"&gt;Discord community&lt;/a&gt; for help and discussions.&lt;/li&gt; 
 &lt;li&gt;Report issues when building and using the open source Convex backend through &lt;a href="https://github.com/get-convex/convex-backend/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building from source&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/get-convex/convex-backend/main/BUILD.md"&gt;BUILD.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Disclaimers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you choose to self-host, we recommend following the self-hosting guide. If you are instead building from source, make sure to change your instance secret and admin key from the defaults in the repo.&lt;/li&gt; 
 &lt;li&gt;Convex is battle tested most thoroughly on Linux and Mac. On Windows, it has less experience. If you run into issues, please message us on &lt;a href="https://convex.dev/community"&gt;Discord&lt;/a&gt; in the &lt;code&gt;#self-hosted&lt;/code&gt; channel.&lt;/li&gt; 
 &lt;li&gt;Convex self-hosted builds contain a beacon to help Convex improve the product. The information is minimal and anonymous and helpful to Convex, but if you really want to disable it, you can set the &lt;code&gt;--disable-beacon&lt;/code&gt; flag on the backend binary. The beacon's messages print in the log and only include 
  &lt;ul&gt; 
   &lt;li&gt;A random identifier for your deployment (not used elsewhere)&lt;/li&gt; 
   &lt;li&gt;Migration version of your database&lt;/li&gt; 
   &lt;li&gt;Git rev of the backend&lt;/li&gt; 
   &lt;li&gt;Uptime of the backend&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Repository layout&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;crates/&lt;/code&gt; contains Rust code&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Main binary 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;local_backend/&lt;/code&gt; is an application server on top of the &lt;code&gt;Runtime&lt;/code&gt;. This is the serving edge for the Convex cloud.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;npm-packages/&lt;/code&gt; contains both our public and internal TypeScript packages.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Internal packages 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;udf-runtime/&lt;/code&gt; sets up the user-defined functions JS environment for queries and mutations&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;udf-tests/&lt;/code&gt; is a collection of functions used in testing the isolate layer&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;system-udfs/&lt;/code&gt; contains functions used by the Convex system e.g. the CLI&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>apache/datafusion</title>
      <link>https://github.com/apache/datafusion</link>
      <description>&lt;p&gt;Apache DataFusion SQL Query Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache DataFusion&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://crates.io/crates/datafusion"&gt;&lt;img src="https://img.shields.io/crates/v/datafusion.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/datafusion/raw/main/LICENSE.txt"&gt;&lt;img src="https://img.shields.io/badge/license-Apache%20v2-blue.svg?sanitize=true" alt="Apache licensed" /&gt;&lt;/a&gt; &lt;a href="https://github.com/apache/datafusion/actions?query=branch%3Amain"&gt;&lt;img src="https://github.com/apache/datafusion/actions/workflows/rust.yml/badge.svg?sanitize=true" alt="Build Status" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/commit-activity/m/apache/datafusion" alt="Commit Activity" /&gt; &lt;a href="https://github.com/apache/datafusion/issues"&gt;&lt;img src="https://img.shields.io/github/issues-raw/apache/datafusion" alt="Open Issues" /&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/Qw5gKqHxUM"&gt;&lt;img src="https://img.shields.io/badge/Chat-Discord-purple" alt="Discord chat" /&gt;&lt;/a&gt; &lt;a href="https://www.linkedin.com/company/apache-datafusion/"&gt;&lt;img src="https://img.shields.io/badge/Follow-Linkedin-blue" alt="Linkedin" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/crates/msrv/datafusion?label=Min%20Rust%20Version" alt="Crates.io MSRV" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://datafusion.apache.org/"&gt;Website&lt;/a&gt; | &lt;a href="https://docs.rs/datafusion/latest/datafusion/"&gt;API Docs&lt;/a&gt; | &lt;a href="https://discord.com/channels/885562378132000778/885562378132000781"&gt;Chat&lt;/a&gt;&lt;/p&gt; 
&lt;a href="https://datafusion.apache.org/"&gt; &lt;img src="https://github.com/apache/datafusion/raw/HEAD/docs/source/_static/images/2x_bgwhite_original.png" width="512" alt="logo" /&gt; &lt;/a&gt; 
&lt;p&gt;DataFusion is an extensible query engine written in &lt;a href="http://rustlang.org"&gt;Rust&lt;/a&gt; that uses &lt;a href="https://arrow.apache.org"&gt;Apache Arrow&lt;/a&gt; as its in-memory format.&lt;/p&gt; 
&lt;p&gt;This crate provides libraries and binaries for developers building fast and feature rich database and analytic systems, customized to particular workloads. See &lt;a href="https://datafusion.apache.org/user-guide/introduction.html#use-cases"&gt;use cases&lt;/a&gt; for examples. The following related subprojects target end users:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-python/"&gt;DataFusion Python&lt;/a&gt; offers a Python interface for SQL and DataFrame queries.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion-comet/"&gt;DataFusion Comet&lt;/a&gt; is an accelerator for Apache Spark based on DataFusion.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;"Out of the box," DataFusion offers [SQL] and [&lt;code&gt;Dataframe&lt;/code&gt;] APIs, excellent &lt;a href="https://benchmark.clickhouse.com/"&gt;performance&lt;/a&gt;, built-in support for CSV, Parquet, JSON, and Avro, extensive customization, and a great community.&lt;/p&gt; 
&lt;p&gt;DataFusion features a full query planner, a columnar, streaming, multi-threaded, vectorized execution engine, and partitioned data sources. You can customize DataFusion at almost all points including additional data sources, query languages, functions, custom operators and more. See the &lt;a href="https://datafusion.apache.org/contributor-guide/architecture.html"&gt;Architecture&lt;/a&gt; section for more details.&lt;/p&gt; 
&lt;p&gt;Here are links to some important information&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/"&gt;Project Site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/cli/installation.html"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/example-usage.html"&gt;Rust Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://datafusion.apache.org/user-guide/dataframe.html"&gt;Rust DataFrame API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/datafusion/latest/datafusion"&gt;Rust API docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/datafusion/tree/main/datafusion-examples"&gt;Rust Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://arrow.apache.org/datafusion-python/"&gt;Python DataFrame API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.rs/datafusion/latest/datafusion/index.html#architecture"&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What can you do with this crate?&lt;/h2&gt; 
&lt;p&gt;DataFusion is great for building projects such as domain specific query engines, new database platforms and data pipelines, query languages and more. It lets you start quickly from a fully working engine, and then customize those features specific to your use. &lt;a href="https://datafusion.apache.org/user-guide/introduction.html#known-users"&gt;Click Here&lt;/a&gt; to see a list known users.&lt;/p&gt; 
&lt;h2&gt;Contributing to DataFusion&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href="https://datafusion.apache.org/contributor-guide"&gt;contributor guide&lt;/a&gt; and &lt;a href="https://datafusion.apache.org/contributor-guide/communication.html"&gt;communication&lt;/a&gt; pages for more information.&lt;/p&gt; 
&lt;h2&gt;Crate features&lt;/h2&gt; 
&lt;p&gt;This crate has several &lt;a href="https://doc.rust-lang.org/cargo/reference/features.html"&gt;features&lt;/a&gt; which can be specified in your &lt;code&gt;Cargo.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Default features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;nested_expressions&lt;/code&gt;: functions for working with nested type function such as &lt;code&gt;array_to_string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;compression&lt;/code&gt;: reading files compressed with &lt;code&gt;xz2&lt;/code&gt;, &lt;code&gt;bzip2&lt;/code&gt;, &lt;code&gt;flate2&lt;/code&gt;, and &lt;code&gt;zstd&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;crypto_expressions&lt;/code&gt;: cryptographic functions such as &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;sha256&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datetime_expressions&lt;/code&gt;: date and time functions such as &lt;code&gt;to_timestamp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encoding_expressions&lt;/code&gt;: &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt; functions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parquet&lt;/code&gt;: support for reading the &lt;a href="https://parquet.apache.org/"&gt;Apache Parquet&lt;/a&gt; format&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sql&lt;/code&gt;: Support for sql parsing / planning&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;regex_expressions&lt;/code&gt;: regular expression functions, such as &lt;code&gt;regexp_match&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unicode_expressions&lt;/code&gt;: Include unicode aware functions such as &lt;code&gt;character_length&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unparser&lt;/code&gt;: enables support to reverse LogicalPlans back into SQL&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;recursive_protection&lt;/code&gt;: uses &lt;a href="https://docs.rs/recursive/latest/recursive/"&gt;recursive&lt;/a&gt; for stack overflow protection.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Optional features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;avro&lt;/code&gt;: support for reading the &lt;a href="https://avro.apache.org/"&gt;Apache Avro&lt;/a&gt; format&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;backtrace&lt;/code&gt;: include backtrace information in error messages&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;parquet_encryption&lt;/code&gt;: support for using &lt;a href="https://parquet.apache.org/docs/file-format/data-pages/encryption/"&gt;Parquet Modular Encryption&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pyarrow&lt;/code&gt;: conversions between PyArrow and DataFusion types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;serde&lt;/code&gt;: enable arrow-schema's &lt;code&gt;serde&lt;/code&gt; feature&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;DataFusion API Evolution and Deprecation Guidelines&lt;/h2&gt; 
&lt;p&gt;Public methods in Apache DataFusion evolve over time: while we try to maintain a stable API, we also improve the API over time. As a result, we typically deprecate methods before removing them, according to the &lt;a href="https://datafusion.apache.org/contributor-guide/api-health.html"&gt;deprecation guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Dependencies and &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Following the &lt;a href="https://blog.rust-lang.org/2023/08/29/committing-lockfiles.html"&gt;guidance&lt;/a&gt; on committing &lt;code&gt;Cargo.lock&lt;/code&gt; files, this project commits its &lt;code&gt;Cargo.lock&lt;/code&gt; file.&lt;/p&gt; 
&lt;p&gt;CI uses the committed &lt;code&gt;Cargo.lock&lt;/code&gt; file, and dependencies are updated regularly using &lt;a href="https://docs.github.com/en/code-security/dependabot/working-with-dependabot"&gt;Dependabot&lt;/a&gt; PRs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bevyengine/bevy</title>
      <link>https://github.com/bevyengine/bevy</link>
      <description>&lt;p&gt;A refreshingly simple data-driven game engine built in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href="https://bevy.org"&gt;&lt;img src="https://bevy.org/assets/bevy_logo_light_dark_and_dimmed.svg?sanitize=true" alt="Bevy" /&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/bevyengine/bevy#license"&gt;&lt;img src="https://img.shields.io/badge/license-MIT%2FApache-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/v/bevy.svg?sanitize=true" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/bevy"&gt;&lt;img src="https://img.shields.io/crates/d/bevy.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://docs.rs/bevy/latest/bevy/"&gt;&lt;img src="https://docs.rs/bevy/badge.svg?sanitize=true" alt="Docs" /&gt;&lt;/a&gt; &lt;a href="https://github.com/bevyengine/bevy/actions"&gt;&lt;img src="https://github.com/bevyengine/bevy/workflows/CI/badge.svg?sanitize=true" alt="CI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/bevy"&gt;&lt;img src="https://img.shields.io/discord/691052431525675048.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What is Bevy?&lt;/h2&gt; 
&lt;p&gt;Bevy is a refreshingly simple data-driven game engine built in Rust. It is free and open-source forever!&lt;/p&gt; 
&lt;h2&gt;WARNING&lt;/h2&gt; 
&lt;p&gt;Bevy is still in the early stages of development. Important features are missing. Documentation is sparse. A new version of Bevy containing breaking changes to the API is released &lt;a href="https://bevy.org/news/bevy-0-6/#the-train-release-schedule"&gt;approximately once every 3 months&lt;/a&gt;. We provide &lt;a href="https://bevy.org/learn/migration-guides/"&gt;migration guides&lt;/a&gt;, but we can't guarantee migrations will always be easy. Use only if you are willing to work in this environment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;MSRV:&lt;/strong&gt; Bevy relies heavily on improvements in the Rust language and compiler. As a result, the Minimum Supported Rust Version (MSRV) is generally close to "the latest stable release" of Rust.&lt;/p&gt; 
&lt;h2&gt;Design Goals&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Capable&lt;/strong&gt;: Offer a complete 2D and 3D feature set&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Easy for newbies to pick up, but infinitely flexible for power users&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Data Focused&lt;/strong&gt;: Data-oriented architecture using the Entity Component System paradigm&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Modular&lt;/strong&gt;: Use only what you need. Replace what you don't like&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: App logic should run quickly, and when possible, in parallel&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Productive&lt;/strong&gt;: Changes should compile quickly ... waiting isn't fun&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org"&gt;Features&lt;/a&gt;:&lt;/strong&gt; A quick overview of Bevy's features.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/news/"&gt;News&lt;/a&gt;&lt;/strong&gt;: A development blog that covers our progress, plans and shiny new features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt;:&lt;/strong&gt; Bevy's official Quick Start Guide. The best place to start learning Bevy.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.rs/bevy"&gt;Bevy Rust API Docs&lt;/a&gt;:&lt;/strong&gt; Bevy's Rust API docs, which are automatically generated from the doc comments in this repo.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;Official Examples&lt;/a&gt;:&lt;/strong&gt; Bevy's dedicated, runnable examples, which are great for digging into specific concepts.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/#learning"&gt;Community-Made Learning Resources&lt;/a&gt;&lt;/strong&gt;: More tutorials, documentation, and examples made by the Bevy community.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Before contributing or participating in discussions with the community, you should familiarize yourself with our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CODE_OF_CONDUCT.md"&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://discord.gg/bevy"&gt;Discord&lt;/a&gt;:&lt;/strong&gt; Bevy's official discord server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://reddit.com/r/bevy"&gt;Reddit&lt;/a&gt;:&lt;/strong&gt; Bevy's official subreddit.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/bevyengine/bevy/discussions"&gt;GitHub Discussions&lt;/a&gt;:&lt;/strong&gt; The best place for questions about Bevy, answered right here!&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href="https://bevy.org/assets/"&gt;Bevy Assets&lt;/a&gt;:&lt;/strong&gt; A collection of awesome Bevy projects, tools, plugins and learning materials.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;If you'd like to help build Bevy, check out the &lt;strong&gt;&lt;a href="https://bevy.org/learn/contribute/introduction"&gt;Contributor's Guide&lt;/a&gt;&lt;/strong&gt;. For simple problems, feel free to &lt;a href="https://github.com/bevyengine/bevy/issues"&gt;open an issue&lt;/a&gt; or &lt;a href="https://github.com/bevyengine/bevy/pulls"&gt;PR&lt;/a&gt; and tackle it yourself!&lt;/p&gt; 
&lt;p&gt;For more complex architecture decisions and experimental mad science, please open an &lt;a href="https://github.com/bevyengine/rfcs"&gt;RFC&lt;/a&gt; (Request For Comments) so we can brainstorm together effectively!&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;We recommend checking out the &lt;a href="https://bevy.org/learn/quick-start/introduction"&gt;Quick Start Guide&lt;/a&gt; for a brief introduction.&lt;/p&gt; 
&lt;p&gt;Follow the &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;Setup guide&lt;/a&gt; to ensure your development environment is set up correctly. Once set up, you can quickly try out the &lt;a href="https://github.com/bevyengine/bevy/tree/latest/examples"&gt;examples&lt;/a&gt; by cloning this repo and running the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;# Switch to the correct version (latest release, default is main development branch)
git checkout latest
# Runs the "breakout" example
cargo run --example breakout
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To draw a window with standard functionality enabled, use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;use bevy::prelude::*;

fn main() {
    App::new()
        .add_plugins(DefaultPlugins)
        .run();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fast Compiles&lt;/h3&gt; 
&lt;p&gt;Bevy can be built just fine using default configuration on stable Rust. However for really fast iterative compiles, you should enable the "fast compiles" setup by &lt;a href="https://bevy.org/learn/quick-start/getting-started/setup"&gt;following the instructions here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;Bevy Cargo Features&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;This &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/docs/cargo_features.md"&gt;list&lt;/a&gt; outlines the different cargo features supported by Bevy. These allow you to customize the Bevy feature set for your use-case.&lt;/p&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Bevy is the result of the hard work of many people. A huge thanks to all Bevy contributors, the many open source projects that have come before us, the &lt;a href="https://arewegameyet.rs/"&gt;Rust gamedev ecosystem&lt;/a&gt;, and the many libraries we build on.&lt;/p&gt; 
&lt;p&gt;A huge thanks to Bevy's &lt;a href="https://bevy.org"&gt;generous sponsors&lt;/a&gt;. Bevy will always be free and open source, but it isn't free to make. Please consider &lt;a href="https://bevy.org/donate/"&gt;sponsoring our work&lt;/a&gt; if you like what we're building.&lt;/p&gt; 
&lt;!-- This next line need to stay exactly as is. It is required for BrowserStack sponsorship. --&gt; 
&lt;p&gt;This project is tested with BrowserStack.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Bevy is free, open source and permissively licensed! Except where noted (below and/or in individual files), all code in this repository is dual-licensed under either:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MIT License (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-MIT"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Apache License, Version 2.0 (&lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/LICENSE-APACHE"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option. This means you can select the license you prefer! This dual-licensing approach is the de-facto standard in the Rust ecosystem and there are &lt;a href="https://github.com/bevyengine/bevy/issues/2373"&gt;very good reasons&lt;/a&gt; to include both.&lt;/p&gt; 
&lt;p&gt;Some of the engine's code carries additional copyright notices and license terms due to their external origins. These are generally BSD-like, but exact details vary by crate: If the README of a crate contains a 'License' header (or similar), the additional copyright notices and license terms applicable to that crate will be listed. The above licensing requirement still applies to contributions to those crates, and sections of those crates will carry those license terms. The &lt;a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields"&gt;license&lt;/a&gt; field of each crate will also reflect this.&lt;/p&gt; 
&lt;p&gt;The &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/assets"&gt;assets&lt;/a&gt; included in this repository (for our &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/examples/README.md"&gt;examples&lt;/a&gt;) typically fall under different open licenses. These will not be included in your game (unless copied in by you), and they are not distributed in the published bevy crates. See &lt;a href="https://raw.githubusercontent.com/bevyengine/bevy/main/CREDITS.md"&gt;CREDITS.md&lt;/a&gt; for the details of the licenses of those files.&lt;/p&gt; 
&lt;h3&gt;Your contributions&lt;/h3&gt; 
&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>stalwartlabs/stalwart</title>
      <link>https://github.com/stalwartlabs/stalwart</link>
      <description>&lt;p&gt;All-in-one Mail &amp; Collaboration server. Secure, scalable and fluent in every protocol (IMAP, JMAP, SMTP, CalDAV, CardDAV, WebDAV).&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;a href="https://stalw.art"&gt; &lt;img src="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/img/logo-red.svg?sanitize=true" height="150" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align="center"&gt; Secure, scalable mail &amp;amp; collaboration server with comprehensive protocol support 🛡️ &lt;br /&gt;(IMAP, JMAP, SMTP, CalDAV, CardDAV, WebDAV) &lt;/h3&gt; 
&lt;br /&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/stalwartlabs/stalwart/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/stalwartlabs/stalwart/ci.yml?style=flat-square" alt="continuous integration" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.gnu.org/licenses/agpl-3.0"&gt;&lt;img src="https://img.shields.io/badge/License-AGPL_v3-blue.svg?label=license&amp;amp;style=flat-square" alt="License: AGPL v3" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://stalw.art/docs/install/get-started"&gt;&lt;img src="https://img.shields.io/badge/read_the-docs-red?style=flat-square" alt="Documentation" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://mastodon.social/@stalwartlabs"&gt;&lt;img src="https://img.shields.io/mastodon/follow/109929667531941122?style=flat-square&amp;amp;logo=mastodon&amp;amp;color=%236364ff&amp;amp;label=Follow%20on%20Mastodon" alt="Mastodon" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://twitter.com/stalwartlabs"&gt;&lt;img src="https://img.shields.io/twitter/follow/stalwartlabs?style=flat-square&amp;amp;logo=x&amp;amp;label=Follow%20on%20Twitter" alt="Twitter" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://discord.com/servers/stalwart-923615863037390889"&gt;&lt;img src="https://img.shields.io/discord/923615863037390889?label=Join%20Discord&amp;amp;logo=discord&amp;amp;style=flat-square" alt="Discord" /&gt;&lt;/a&gt; &amp;nbsp; &lt;a href="https://www.reddit.com/r/stalwartlabs/"&gt;&lt;img src="https://img.shields.io/reddit/subreddit-subscribers/stalwartlabs?label=Join%20%2Fr%2Fstalwartlabs&amp;amp;logo=reddit&amp;amp;style=flat-square" alt="Reddit" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Stalwart&lt;/strong&gt; is an open-source mail &amp;amp; collaboration server with JMAP, IMAP4, POP3, SMTP, CalDAV, CardDAV and WebDAV support and a wide range of modern features. It is written in Rust and designed to be secure, fast, robust and scalable.&lt;/p&gt; 
&lt;p&gt;Key features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt; server with complete protocol support: 
  &lt;ul&gt; 
   &lt;li&gt;JMAP: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8621"&gt;JMAP for Mail&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://www.ietf.org/archive/id/draft-ietf-jmap-sieve-22.html"&gt;JMAP for Sieve Scripts&lt;/a&gt;.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8887"&gt;WebSocket&lt;/a&gt;, &lt;a href="https://www.rfc-editor.org/rfc/rfc9404.html"&gt;Blob Management&lt;/a&gt; and &lt;a href="https://www.rfc-editor.org/rfc/rfc9425.html"&gt;Quotas&lt;/a&gt; extensions.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;IMAP: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc9051"&gt;IMAP4rev2&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc3501"&gt;IMAP4rev1&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc5804"&gt;ManageSieve&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;Numerous &lt;a href="https://stalw.art/docs/development/rfcs#imap4-and-extensions"&gt;extensions&lt;/a&gt; supported.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;POP3: 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc1939"&gt;POP3&lt;/a&gt; server.&lt;/li&gt; 
     &lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc2595"&gt;STLS&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc5034"&gt;SASL&lt;/a&gt; support as well as other &lt;a href="https://datatracker.ietf.org/doc/html/rfc2449"&gt;extensions&lt;/a&gt;.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;SMTP: 
    &lt;ul&gt; 
     &lt;li&gt;SMTP server with built-in &lt;a href="https://datatracker.ietf.org/doc/html/rfc7489"&gt;DMARC&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6376"&gt;DKIM&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc7208"&gt;SPF&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc8617"&gt;ARC&lt;/a&gt; support for message authentication.&lt;/li&gt; 
     &lt;li&gt;Strong transport security through &lt;a href="https://datatracker.ietf.org/doc/html/rfc6698"&gt;DANE&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc8461"&gt;MTA-STS&lt;/a&gt; and &lt;a href="https://datatracker.ietf.org/doc/html/rfc8460"&gt;SMTP TLS&lt;/a&gt; reporting.&lt;/li&gt; 
     &lt;li&gt;Inbound throttling and filtering with granular configuration rules, sieve scripting, MTA hooks and milter integration.&lt;/li&gt; 
     &lt;li&gt;Distributed virtual queues with delayed delivery, priority delivery, quotas, routing rules and throttling support.&lt;/li&gt; 
     &lt;li&gt;Envelope rewriting and message modification.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt; server: 
  &lt;ul&gt; 
   &lt;li&gt;Calendaring with &lt;a href="https://datatracker.ietf.org/doc/html/rfc4791"&gt;CalDAV&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6638"&gt;CalDAV Scheduling&lt;/a&gt; and e-mail alarms support.&lt;/li&gt; 
   &lt;li&gt;Contact management with &lt;a href="https://datatracker.ietf.org/doc/html/rfc6352"&gt;CardDAV&lt;/a&gt; support.&lt;/li&gt; 
   &lt;li&gt;File storage with &lt;a href="https://datatracker.ietf.org/doc/html/rfc4918"&gt;WebDAV&lt;/a&gt; support.&lt;/li&gt; 
   &lt;li&gt;Sharing with &lt;a href="https://datatracker.ietf.org/doc/html/rfc3744"&gt;WebDAV ACL&lt;/a&gt; support for fine-grained access control.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Spam&lt;/strong&gt; and &lt;strong&gt;Phishing&lt;/strong&gt; built-in filter: 
  &lt;ul&gt; 
   &lt;li&gt;Comprehensive set of filtering &lt;strong&gt;rules&lt;/strong&gt; on par with popular solutions.&lt;/li&gt; 
   &lt;li&gt;LLM-driven spam filtering and message analysis.&lt;/li&gt; 
   &lt;li&gt;Statistical &lt;strong&gt;spam classifier&lt;/strong&gt; with automatic training capabilities and address book integration.&lt;/li&gt; 
   &lt;li&gt;DNS Blocklists (&lt;strong&gt;DNSBLs&lt;/strong&gt;) checking of IP addresses, domains, and hashes.&lt;/li&gt; 
   &lt;li&gt;Collaborative digest-based spam filtering with &lt;strong&gt;Pyzor&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Phishing&lt;/strong&gt; protection against homographic URL attacks, sender spoofing and other techniques.&lt;/li&gt; 
   &lt;li&gt;Trusted &lt;strong&gt;reply&lt;/strong&gt; tracking to recognize and prioritize genuine e-mail replies.&lt;/li&gt; 
   &lt;li&gt;Sender &lt;strong&gt;reputation&lt;/strong&gt; monitoring by IP address, ASN, domain and email address.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Greylisting&lt;/strong&gt; to temporarily defer unknown senders.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Spam traps&lt;/strong&gt; to set up decoy email addresses that catch and analyze spam.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Pluggable storage backends with &lt;strong&gt;RocksDB&lt;/strong&gt;, &lt;strong&gt;FoundationDB&lt;/strong&gt;, &lt;strong&gt;PostgreSQL&lt;/strong&gt;, &lt;strong&gt;mySQL&lt;/strong&gt;, &lt;strong&gt;SQLite&lt;/strong&gt;, &lt;strong&gt;S3-Compatible&lt;/strong&gt;, &lt;strong&gt;Azure&lt;/strong&gt;, &lt;strong&gt;Redis&lt;/strong&gt; and &lt;strong&gt;ElasticSearch&lt;/strong&gt; support.&lt;/li&gt; 
   &lt;li&gt;Full-text search available in 17 languages.&lt;/li&gt; 
   &lt;li&gt;Sieve scripting language with support for all &lt;a href="https://www.iana.org/assignments/sieve-extensions/sieve-extensions.xhtml"&gt;registered extensions&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Email aliases, mailing lists, subaddressing and catch-all addresses support.&lt;/li&gt; 
   &lt;li&gt;Automatic account configuration and discovery with &lt;a href="https://www.ietf.org/id/draft-bucksch-autoconfig-02.html"&gt;autoconfig&lt;/a&gt; and &lt;a href="https://learn.microsoft.com/en-us/exchange/architecture/client-access/autodiscover?view=exchserver-2019"&gt;autodiscover&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Multi-tenancy support with domain and tenant isolation.&lt;/li&gt; 
   &lt;li&gt;Disk quotas per user and tenant.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure and robust&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Encryption at rest with &lt;strong&gt;S/MIME&lt;/strong&gt; or &lt;strong&gt;OpenPGP&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Automatic TLS certificate provisioning with &lt;a href="https://datatracker.ietf.org/doc/html/rfc8555"&gt;ACME&lt;/a&gt; using &lt;code&gt;TLS-ALPN-01&lt;/code&gt;, &lt;code&gt;DNS-01&lt;/code&gt; or &lt;code&gt;HTTP-01&lt;/code&gt; challenges.&lt;/li&gt; 
   &lt;li&gt;Automated blocking of IP addresses that attack, abuse or scan the server for exploits.&lt;/li&gt; 
   &lt;li&gt;Rate limiting.&lt;/li&gt; 
   &lt;li&gt;Security audited (read the &lt;a href="https://stalw.art/blog/security-audit"&gt;report&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;Memory safe (thanks to Rust).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scalable and fault-tolerant&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Designed to handle growth seamlessly, from small setups to large-scale deployments of thousands of nodes.&lt;/li&gt; 
   &lt;li&gt;Built with &lt;strong&gt;fault tolerance&lt;/strong&gt; and &lt;strong&gt;high availability&lt;/strong&gt; in mind, recovers from hardware or software failures with minimal operational impact.&lt;/li&gt; 
   &lt;li&gt;Peer-to-peer cluster coordination or with &lt;strong&gt;Kafka&lt;/strong&gt;, &lt;strong&gt;Redpanda&lt;/strong&gt;, &lt;strong&gt;NATS&lt;/strong&gt; or &lt;strong&gt;Redis&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;, &lt;strong&gt;Apache Mesos&lt;/strong&gt; and &lt;strong&gt;Docker Swarm&lt;/strong&gt; support for automated scaling and container orchestration.&lt;/li&gt; 
   &lt;li&gt;Read replicas, sharded blob storage and in-memory data stores for high performance and low latency.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Authentication and Authorization&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;OpenID Connect&lt;/strong&gt; authentication.&lt;/li&gt; 
   &lt;li&gt;OAuth 2.0 authorization with &lt;a href="https://www.rfc-editor.org/rfc/rfc8628"&gt;authorization code&lt;/a&gt; and &lt;a href="https://www.rfc-editor.org/rfc/rfc8628"&gt;device authorization&lt;/a&gt; flows.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;LDAP&lt;/strong&gt;, &lt;strong&gt;OIDC&lt;/strong&gt;, &lt;strong&gt;SQL&lt;/strong&gt; or built-in authentication backend support.&lt;/li&gt; 
   &lt;li&gt;Two-factor authentication with Time-based One-Time Passwords (&lt;code&gt;2FA-TOTP&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Application passwords (App Passwords).&lt;/li&gt; 
   &lt;li&gt;Roles and permissions.&lt;/li&gt; 
   &lt;li&gt;Access Control Lists (ACLs).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Logging and tracing with &lt;strong&gt;OpenTelemetry&lt;/strong&gt;, journald, log files and console support.&lt;/li&gt; 
   &lt;li&gt;Metrics with &lt;strong&gt;OpenTelemetry&lt;/strong&gt; and &lt;strong&gt;Prometheus&lt;/strong&gt; integration.&lt;/li&gt; 
   &lt;li&gt;Webhooks for event-driven automation.&lt;/li&gt; 
   &lt;li&gt;Alerts with email and webhook notifications.&lt;/li&gt; 
   &lt;li&gt;Live tracing and metrics.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Web-based administration&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;Dashboard with real-time statistics and monitoring.&lt;/li&gt; 
   &lt;li&gt;Account, domain, group and mailing list management.&lt;/li&gt; 
   &lt;li&gt;SMTP queue management for messages and outbound DMARC and TLS reports.&lt;/li&gt; 
   &lt;li&gt;Report visualization interface for received DMARC, TLS-RPT and Failure (ARF) reports.&lt;/li&gt; 
   &lt;li&gt;Configuration of every aspect of the mail server.&lt;/li&gt; 
   &lt;li&gt;Log viewer with search and filtering capabilities.&lt;/li&gt; 
   &lt;li&gt;Self-service portal for password reset and encryption-at-rest key management.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;img src="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/img/screencast-setup.gif" /&gt; 
&lt;h2&gt;Presentation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Want a deeper dive?&lt;/strong&gt; Need to explain to your boss why Stalwart is the perfect fit? Whether you're evaluating options, making a case to your team, or simply curious about how it all works under the hood, these slides walk you through the key features, architecture, and benefits of Stalwart. Browse the &lt;a href="https://stalw.art/slides"&gt;slides&lt;/a&gt; to see what makes it stand out.&lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;Install Stalwart on your server by following the instructions for your platform:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/linux"&gt;Linux / MacOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/windows"&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://stalw.art/docs/install/platform/docker"&gt;Docker&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All documentation is available at &lt;a href="https://stalw.art/docs/install/get-started"&gt;stalw.art/docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you are having problems running Stalwart, you found a bug or just have a question, do not hesitate to reach us on &lt;a href="https://github.com/stalwartlabs/stalwart/discussions"&gt;GitHub Discussions&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/stalwartlabs"&gt;Reddit&lt;/a&gt; or &lt;a href="https://discord.com/servers/stalwart-923615863037390889"&gt;Discord&lt;/a&gt;. Additionally you may purchase an &lt;a href="https://stalw.art/enterprise"&gt;Enterprise License&lt;/a&gt; to obtain priority support from Stalwart Labs LLC.&lt;/p&gt; 
&lt;h2&gt;Sponsorship&lt;/h2&gt; 
&lt;p&gt;Your support is crucial in helping us continue to improve the project, add new features, and maintain the highest level of quality. By &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;, you help fund the development and future of Stalwart. As a thank-you, sponsors who contribute $5 per month or more will automatically receive a &lt;a href="https://stalw.art/enterprise/"&gt;Enterprise edition&lt;/a&gt; license. And, sponsors who contribute $30 per month or more, also have access to &lt;a href="https://stalw.art/support"&gt;Premium Support&lt;/a&gt; from Stalwart Labs.&lt;/p&gt; 
&lt;p&gt;These are some of our open-source sponsors:&lt;/p&gt; 
&lt;!-- sponsors --&gt;
&lt;a href="https://github.com/kbjr"&gt;&lt;img src="https://github.com/kbjr.png" width="60px" alt="User avatar: James Brumond" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/MailRoute"&gt;&lt;img src="https://github.com/MailRoute.png" width="60px" alt="User avatar: MailRoute, Inc." /&gt;&lt;/a&gt;
&lt;a href="https://github.com/starsong-consulting"&gt;&lt;img src="https://github.com/starsong-consulting.png" width="60px" alt="User avatar: Starsong GmbH" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/mingfu-design"&gt;&lt;img src="https://github.com/mingfu-design.png" width="60px" alt="User avatar: Ming Fu Design Ltd. 明孚設計有限公司" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/tamwuff"&gt;&lt;img src="https://github.com/tamwuff.png" width="60px" alt="User avatar: Tamino" /&gt;&lt;/a&gt;
&lt;a href="https://github.com/panascais"&gt;&lt;img src="https://github.com/panascais.png" width="60px" alt="User avatar: panascais" /&gt;&lt;/a&gt;
&lt;!-- sponsors --&gt; 
&lt;p&gt;&lt;br /&gt;If you would like to support our work, please consider &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; JMAP for Calendars, Contacts and File Storage support&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Webmail client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/stalwartlabs/stalwart/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3Aenhancement"&gt;enhancement requests&lt;/a&gt; page for a full list of proposed features by the community.&lt;/p&gt; 
&lt;h2&gt;Funding&lt;/h2&gt; 
&lt;p&gt;Part of the development of this project was funded through:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/entrust"&gt;NGI0 Entrust Fund&lt;/a&gt;, a fund established by &lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; with financial support from the European Commission's &lt;a href="https://ngi.eu/"&gt;Next Generation Internet&lt;/a&gt; programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101069594.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nlnet.nl/NGI0/"&gt;NGI Zero Core&lt;/a&gt;, a fund established by &lt;a href="https://nlnet.nl/"&gt;NLnet&lt;/a&gt; with financial support from the European Commission's programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement No 101092990.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you find the project useful you can help by &lt;a href="https://opencollective.com/stalwart"&gt;becoming a sponsor&lt;/a&gt;. Thank you!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is dual-licensed under the &lt;strong&gt;GNU Affero General Public License v3.0&lt;/strong&gt; (AGPL-3.0; as published by the Free Software Foundation) and the &lt;strong&gt;Stalwart Enterprise License v1 (SELv1)&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/AGPL-3.0-only.txt"&gt;GNU Affero General Public License v3.0&lt;/a&gt; is a free software license that ensures your freedom to use, modify, and distribute the software, with the condition that any modified versions of the software must also be distributed under the same license.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/LicenseRef-SEL.txt"&gt;Stalwart Enterprise License v1 (SELv1)&lt;/a&gt; is a proprietary license designed for commercial use. It offers additional features and greater flexibility for businesses that do not wish to comply with the AGPL-3.0 license requirements.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each file in this project contains a license notice at the top, indicating the applicable license(s). The license notice follows the &lt;a href="https://reuse.software/"&gt;REUSE guidelines&lt;/a&gt; to ensure clarity and consistency. The full text of each license is available in the &lt;a href="https://raw.githubusercontent.com/stalwartlabs/stalwart/main/LICENSES/"&gt;LICENSES&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h2&gt;Copyright&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2020, Stalwart Labs LLC&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>juspay/hyperswitch</title>
      <link>https://github.com/juspay/hyperswitch</link>
      <description>&lt;p&gt;An open source payments switch written in Rust to make payments fast, reliable and affordable&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-dark.svg#gh-dark-mode-only" alt="Hyperswitch-Logo" width="40%" /&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-logo-light.svg#gh-light-mode-only" alt="Hyperswitch-Logo" width="40%" /&gt; &lt;/p&gt; 
&lt;h1 align="center"&gt;Composable Open-Source Payments Infrastructure&lt;/h1&gt; 
&lt;p align="center"&gt; &lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/gifs/quickstart.gif" alt="Quickstart demo" /&gt; &lt;/p&gt; 
&lt;!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/juspay/hyperswitch/actions?query=workflow%3ACI+branch%3Amain"&gt; &lt;img src="https://github.com/juspay/hyperswitch/workflows/CI-push/badge.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;a href="https://github.com/juspay/hyperswitch/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/github/license/juspay/hyperswitch" /&gt; &lt;/a&gt; &lt;a href="https://github.com/juspay/hyperswitch/raw/main/LICENSE"&gt; &lt;img src="https://img.shields.io/badge/Made_in-Rust-orange" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://www.linkedin.com/company/hyperswitch/"&gt; &lt;img src="https://img.shields.io/badge/follow-hyperswitch-blue?logo=linkedin&amp;amp;labelColor=grey" /&gt; &lt;/a&gt; &lt;a href="https://x.com/hyperswitchio"&gt; &lt;img src="https://img.shields.io/badge/follow-%40hyperswitchio-white?logo=x&amp;amp;labelColor=grey" /&gt; &lt;/a&gt; &lt;a href="https://inviter.co/hyperswitch-slack"&gt; &lt;img src="https://img.shields.io/badge/chat-on_slack-blue?logo=slack&amp;amp;labelColor=grey&amp;amp;color=%233f0e40" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;📁 Table of Contents&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-what-can-i-do-with-hyperswitch"&gt;What Can I Do with Hyperswitch?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-quickstart-local-setup"&gt;Quickstart (Local Setup)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#cloud-deployment"&gt;Cloud Deployment&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#hosted-sandbox-no-setup-required"&gt;Hosted Sandbox (No Setup Required)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#-why-hyperswitch"&gt;Why Hyperswitch?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview"&gt;Architectural Overview&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#our-vision"&gt;Our Vision&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#community--contributions"&gt;Community &amp;amp; Contributions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#feature-requests--bugs"&gt;Feature Requests &amp;amp; Bugs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning"&gt;Versioning&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license"&gt;License&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#team-behind-hyperswitch"&gt;Team Behind Hyperswitch&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;summary&gt;&lt;h2&gt; What Can I Do with Hyperswitch?&lt;/h2&gt;&lt;/summary&gt; 
&lt;p&gt;Hyperswitch offers a modular, open-source payments infrastructure designed for flexibility and control. Apart from our Payment Suite offering, this solution allows businesses to pick and integrate only the modules they need on top of their existing payment stack — without unnecessary complexity or vendor lock-in.&lt;/p&gt; 
&lt;p&gt;Each module is independent and purpose-built to optimize different aspects of payment processing.&lt;/p&gt; 
&lt;h3&gt; Learn More About The Payment Modules &lt;/h3&gt; 
&lt;details&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cost Observability&lt;/strong&gt;&lt;br /&gt; Advanced observability tools to audit, monitor, and optimize your payment costs. Detect hidden fees, downgrades, and penalties with self-serve dashboards and actionable insights.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/ai-powered-cost-observability"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Revenue Recovery&lt;/strong&gt;&lt;br /&gt; Combat passive churn with intelligent retry strategies tuned by card bin, region, method, and more. Offers fine-grained control over retry algorithms, penalty budgets, and recovery transparency.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/revenue-recovery"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vault&lt;/strong&gt;&lt;br /&gt; A PCI-compliant vault service to store cards, tokens, wallets, and bank credentials. Provides a unified, secure, and reusable store of customer-linked payment methods.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/vault"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Intelligent Routing&lt;/strong&gt;&lt;br /&gt; Route each transaction to the PSP with the highest predicted auth rate. Reduce retries, avoid downtime, and minimize latency while maximizing first attempt success.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/intelligent-routing"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reconciliation&lt;/strong&gt;&lt;br /&gt; Automate 2-way and 3-way reconciliation with backdated support, staggered scheduling, and customizable outputs. Reduces manual ops effort and increases audit confidence.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/reconciliation"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Alternate Payment Methods&lt;/strong&gt;&lt;br /&gt; Drop-in widgets for PayPal, Apple Pay, Google Pay, Samsung Pay, Pay by Bank, and BNPL providers like Klarna. Maximizes conversions with seamless one-click checkout.&lt;br /&gt; &lt;em&gt;&lt;a href="https://docs.hyperswitch.io/about-hyperswitch/payments-modules/enable-alternate-payment-method-widgets"&gt;Read more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;Quickstart&lt;/h2&gt; 
&lt;h3&gt; Local Setup via Docker &lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# One-click local setup

git clone --depth 1 --branch latest https://github.com/juspay/hyperswitch

cd hyperswitch

scripts/setup.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;This script: &lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Detects Docker/Podman&lt;/li&gt; 
  &lt;li&gt;Offers multiple deployment profiles: 
   &lt;ul&gt; 
    &lt;li&gt;&lt;strong&gt;Standard&lt;/strong&gt;: App server + Control Center&lt;/li&gt; 
    &lt;li&gt;&lt;strong&gt;Full&lt;/strong&gt;: Includes monitoring + schedulers&lt;/li&gt; 
    &lt;li&gt;&lt;strong&gt;Minimal&lt;/strong&gt;: Standalone App server&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;Provides access links when done&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;If you need further help, check out our &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/overview/unified-local-setup-using-docker"&gt;video tutorial&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;👉 After setup, &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/account-setup/using-hyperswitch-control-center#add-a-payment-processor"&gt;configure a connector&lt;/a&gt; and &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/account-setup/test-a-payment"&gt;test a payment&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Hosted Sandbox (No Setup Required)&lt;/h3&gt; 
&lt;p&gt;Hyperswitch offers a fully hosted sandbox environment that requires no setup. You can explore the Control Center, configure payment connectors, and test payments directly from the UI.&lt;/p&gt; 
&lt;a href="https://app.hyperswitch.io"&gt; &lt;img src="https://github.com/juspay/hyperswitch/raw/main/docs/imgs/try-the-sandbox.png?raw=true" height="35" /&gt; &lt;/a&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt; What you can do in the Hosted Sandbox&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Access the full Control Center&lt;/li&gt; 
  &lt;li&gt;Configure payment connectors&lt;/li&gt; 
  &lt;li&gt;View logs, routing rules, and retry strategies&lt;/li&gt; 
  &lt;li&gt;Try payments directly from the UI&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;&lt;strong&gt;Cloud Deployment&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;You can deploy to AWS, GCP, or Azure using Helm or CDK scripts. Fastest path:&lt;/p&gt; 
&lt;p&gt;Click to deploy via AWS:&lt;/p&gt; 
&lt;a href="https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=HyperswitchBootstarp&amp;amp;templateURL=https://hyperswitch-synth.s3.eu-central-1.amazonaws.com/hs-starter-config.yaml"&gt; &lt;img src="https://github.com/juspay/hyperswitch/raw/main/docs/imgs/aws_button.png?raw=true" height="35" /&gt; &lt;/a&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;strong&gt;Cloud Deployment Instructions&lt;/strong&gt;&lt;/summary&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Click the AWS deployment button above to launch the stack.&lt;/li&gt; 
  &lt;li&gt;Follow the guided steps in the AWS Console (approx. 30–45 mins).&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;p&gt;✅ This setup provisions Hyperswitch on your cloud account using CloudFormation.&lt;/p&gt; 
 &lt;p&gt;📘 For full instructions and Helm-based deployments, check out the&lt;br /&gt; &lt;a href="https://docs.hyperswitch.io/hyperswitch-open-source/deploy-on-kubernetes-using-helm"&gt;Cloud Install Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview"&gt; &lt;h2 id="architectural-overview"&gt;Architectural Overview&lt;/h2&gt; &lt;/a&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/features.png" /&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/non-functional-features.png" /&gt; 
&lt;img src="https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-architecture-v1.png" /&gt; 
&lt;h2&gt;Why Hyperswitch?&lt;/h2&gt; 
&lt;p&gt;Hyperswitch is a commercial open-source payments stack purpose-built for scale, flexibility, and developer experience. Designed with a modular architecture, Hyperswitch lets you pick only the components you need—whether it’s routing, retries, vaulting, or observability—without vendor lock-in or bloated integrations.&lt;/p&gt; 
&lt;p&gt;Built in Rust for performance and reliability, Hyperswitch supports global payment methods (cards, wallets, BNPL, UPI, Pay by Bank), exposes smart routing and retry logic, and provides a visual workflow builder in the Control Center. Whether you're integrating a full payment suite or augmenting an existing stack with a single module, Hyperswitch meets you where you are.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;“Linux for Payments”&lt;/strong&gt; — Hyperswitch is a well-architected reference for teams who want to own their payments stack.&lt;/p&gt; 
&lt;p&gt;We believe in:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Embracing Payment Diversity:&lt;/strong&gt; Innovation comes from enabling choice—across payment methods, processors, and flows.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Open Source by Default:&lt;/strong&gt; Transparency drives trust and builds better, reusable software.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Community-Driven Development:&lt;/strong&gt; Our roadmap is shaped by real-world use cases and contributors.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Systems-Level Engineering:&lt;/strong&gt; We hold ourselves to a high bar for reliability, security, and performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Maximizing Value Creation:&lt;/strong&gt; For developers, customers, and partners alike.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt; Community-Driven, Enterprise-Tested:&lt;/strong&gt; Hyperswitch is built in the open with real-world feedback from developers and contributors, and maintained by Juspay, the team powering payment infrastructure for 400+ leading enterprises worldwide.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome contributors from around the world to help build Hyperswitch. Whether you're fixing bugs, improving documentation, or adding new features, your help is appreciated.&lt;/p&gt; 
&lt;p&gt;Please read our &lt;a href="https://github.com/juspay/hyperswitch/raw/main/docs/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;p&gt;Join the conversation on &lt;a href="https://inviter.co/hyperswitch-slack"&gt;Slack&lt;/a&gt; or explore open issues on &lt;a href="https://github.com/juspay/hyperswitch/issues"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#feature-requests"&gt; &lt;h2 id="feature-requests"&gt;Feature requests &amp;amp; Bugs&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;For new product features, enhancements, roadmap discussions, or to share queries and ideas, visit our &lt;a href="https://github.com/juspay/hyperswitch/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;For reporting a bug, please read the issue guidelines and search for &lt;a href="https://github.com/juspay/hyperswitch/issues"&gt;existing and closed issues&lt;/a&gt;. If your problem or idea is not addressed yet, please &lt;a href="https://github.com/juspay/hyperswitch/issues/new/choose"&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning"&gt; &lt;h2 id="versioning"&gt;Versioning&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;Check the &lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license"&gt; &lt;h2 id="copyright-and-license"&gt;Copyright and License&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;This product is licensed under the &lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/LICENSE"&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; 
&lt;a href="https://raw.githubusercontent.com/juspay/hyperswitch/main/#team-behind-hyperswitch"&gt; &lt;h2 id="team-behind-hyperswitch"&gt;Team behind Hyperswitch&lt;/h2&gt; &lt;/a&gt; 
&lt;p&gt;The core team of 150+ engineers building Hyperswitch. Keep up the great work! 🥂&lt;/p&gt; 
&lt;a href="https://github.com/juspay/hyperswitch/graphs/contributors"&gt; &lt;img src="https://contributors-img.web.app/image?repo=juspay/hyperswitch" alt="Contributors" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>apache/arrow-rs</title>
      <link>https://github.com/apache/arrow-rs</link>
      <description>&lt;p&gt;Official Rust implementation of Apache Arrow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Native Rust implementation of Apache Arrow and Apache Parquet&lt;/h1&gt; 
&lt;p&gt;Welcome to the &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; implementation of &lt;a href="https://arrow.apache.org/"&gt;Apache Arrow&lt;/a&gt;, the popular in-memory columnar format.&lt;/p&gt; 
&lt;p&gt;This repository contains the following crates:&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Crate&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Latest API Docs&lt;/th&gt; 
   &lt;th&gt;README&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/arrow"&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Core functionality (memory layout, arrays, low level computations)&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.rs/arrow/latest"&gt;docs.rs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/apache/arrow-rs/main/arrow/README.md"&gt;(README)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/arrow-flight"&gt;&lt;code&gt;arrow-flight&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Support for Arrow-Flight IPC protocol&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.rs/arrow-flight/latest"&gt;docs.rs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/apache/arrow-rs/main/arrow-flight/README.md"&gt;(README)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/parquet"&gt;&lt;code&gt;parquet&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Support for Parquet columnar file format&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.rs/parquet/latest"&gt;docs.rs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/apache/arrow-rs/main/parquet/README.md"&gt;(README)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/parquet-derive"&gt;&lt;code&gt;parquet_derive&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;A crate for deriving RecordWriter/RecordReader for arbitrary, simple structs&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://docs.rs/parquet-derive/latest"&gt;docs.rs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/apache/arrow-rs/main/parquet_derive/README.md"&gt;(README)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The current development version the API documentation in this repo can be found &lt;a href="https://arrow.apache.org/rust"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Note: previously the &lt;a href="https://crates.io/crates/object-store"&gt;&lt;code&gt;object_store&lt;/code&gt;&lt;/a&gt; crate was also part of this repository, but it has been moved to the &lt;a href="https://github.com/apache/arrow-rs-object-store"&gt;arrow-rs-object-store repository&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Release Versioning and Schedule&lt;/h2&gt; 
&lt;p&gt;The Arrow Rust project releases approximately monthly and follows &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Due to available maintainer and testing bandwidth, &lt;a href="https://crates.io/crates/arrow"&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt; crates (&lt;a href="https://crates.io/crates/arrow"&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://crates.io/crates/arrow-flight"&gt;&lt;code&gt;arrow-flight&lt;/code&gt;&lt;/a&gt;, etc.) are released on the same schedule with the same versions as the &lt;a href="https://crates.io/crates/parquet"&gt;&lt;code&gt;parquet&lt;/code&gt;&lt;/a&gt; and [&lt;code&gt;parquet-derive&lt;/code&gt;] crates.&lt;/p&gt; 
&lt;p&gt;This crate releases every month. We release new major versions (with potentially breaking API changes) at most once a quarter, and release incremental minor versions in the intervening months. See &lt;a href="https://github.com/apache/arrow-rs/issues/5368"&gt;ticket #5368&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;To keep our maintenance burden down, we do regularly scheduled releases (major and minor) from the &lt;code&gt;main&lt;/code&gt; branch. How we handle PRs with breaking API changes is described in the &lt;a href="https://raw.githubusercontent.com/apache/arrow-rs/main/CONTRIBUTING.md#breaking-changes"&gt;contributing&lt;/a&gt; guide.&lt;/p&gt; 
&lt;p&gt;Planned Release Schedule&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Approximate Date&lt;/th&gt; 
   &lt;th&gt;Version&lt;/th&gt; 
   &lt;th&gt;Notes&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;October 2025&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apache/arrow-rs/issues/7835"&gt;&lt;code&gt;57.0.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Major, potentially breaking API changes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;November 2025&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apache/arrow-rs/milestone/3"&gt;&lt;code&gt;57.1.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Minor, NO breaking API changes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;December 2025&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apache/arrow-rs/milestone/5"&gt;&lt;code&gt;57.2.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Minor, NO breaking API changes&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;January 2026&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apache/arrow-rs/milestone/6"&gt;&lt;code&gt;58.0.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Major, potentially breaking API changes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Rust Version Compatibility Policy&lt;/h3&gt; 
&lt;p&gt;arrow-rs and parquet are built and tested with stable Rust, and will keep a rolling MSRV (minimum supported Rust version) that can only be updated in major releases on a need by basis (e.g. project dependencies bump their MSRV or a particular Rust feature is useful for us etc.). The new MSRV if selected will be at least 6 months old. The minor releases are guaranteed to have the same MSRV.&lt;/p&gt; 
&lt;p&gt;Note: If a Rust hotfix is released for the current MSRV, the MSRV will be updated to the specific minor version that includes all applicable hotfixes preceding other policies.&lt;/p&gt; 
&lt;h3&gt;Guidelines for &lt;code&gt;panic&lt;/code&gt; vs &lt;code&gt;Result&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;In general, use panics for bad states that are unreachable, unrecoverable or harmful. For those caused by invalid user input, however, we prefer to report that invalidity gracefully as an error result instead of panicking. In general, invalid input should result in an &lt;code&gt;Error&lt;/code&gt; as soon as possible. It &lt;em&gt;is&lt;/em&gt; ok for code paths after validation to assume validation has already occurred and panic if not. See &lt;a href="https://github.com/apache/arrow-rs/issues/6737"&gt;ticket #6737&lt;/a&gt; for more nuances.&lt;/p&gt; 
&lt;h3&gt;Deprecation Guidelines&lt;/h3&gt; 
&lt;p&gt;Minor releases may deprecate, but not remove APIs. Deprecating APIs allows downstream Rust programs to still compile, but generate compiler warnings. This gives downstream crates time to migrate prior to API removal.&lt;/p&gt; 
&lt;p&gt;To deprecate an API:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mark the API as deprecated using &lt;code&gt;#[deprecated]&lt;/code&gt; and specify the exact arrow-rs version in which it was deprecated&lt;/li&gt; 
 &lt;li&gt;Concisely describe the preferred API to help the user transition&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The deprecated version is the next version which will be released (please consult the list above). To mark the API as deprecated, use the &lt;code&gt;#[deprecated(since = "...", note = "...")]&lt;/code&gt; attribute.&lt;/p&gt; 
&lt;p&gt;For example&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[deprecated(since = "51.0.0", note = "Use `date_part` instead")]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In general, deprecated APIs will remain in the codebase for at least two major releases after they were deprecated (typically between 6 - 9 months later). For example, an API deprecated in &lt;code&gt;51.3.0&lt;/code&gt; can be removed in &lt;code&gt;54.0.0&lt;/code&gt; (or later). Deprecated APIs may be removed earlier or later than these guidelines at the discretion of the maintainers.&lt;/p&gt; 
&lt;h2&gt;Related Projects&lt;/h2&gt; 
&lt;p&gt;There are several related crates in different repositories&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Crate&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
   &lt;th&gt;Documentation&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/object-store"&gt;&lt;code&gt;object_store&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Object Storage (aws, azure, gcp, local, in-memory) interface&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/apache/arrow-rs/main/object_store-readme"&gt;(README)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/datafusion"&gt;&lt;code&gt;datafusion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;In-memory query engine with SQL support&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apache/datafusion/raw/main/README.md"&gt;(README)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/ballista"&gt;&lt;code&gt;ballista&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Distributed query execution&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apache/datafusion-ballista/raw/main/README.md"&gt;(README)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://crates.io/crates/parquet_opendal"&gt;&lt;code&gt;parquet_opendal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use [&lt;code&gt;opendal&lt;/code&gt;] for &lt;a href="https://crates.io/crates/parquet"&gt;&lt;code&gt;parquet&lt;/code&gt;&lt;/a&gt; Arrow IO&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/apache/opendal/raw/main/integrations/parquet/README.md"&gt;(README)&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Collectively, these crates support a wider array of functionality for analytic computations in Rust.&lt;/p&gt; 
&lt;p&gt;For example, you can write SQL queries or a &lt;code&gt;DataFrame&lt;/code&gt; (using the &lt;a href="https://crates.io/crates/datafusion"&gt;&lt;code&gt;datafusion&lt;/code&gt;&lt;/a&gt; crate) to read a parquet file (using the &lt;a href="https://crates.io/crates/parquet"&gt;&lt;code&gt;parquet&lt;/code&gt;&lt;/a&gt; crate), evaluate it in-memory using Arrow's columnar format (using the &lt;a href="https://crates.io/crates/arrow"&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt; crate), and send to another process (using the &lt;a href="https://crates.io/crates/arrow-flight"&gt;&lt;code&gt;arrow-flight&lt;/code&gt;&lt;/a&gt; crate).&lt;/p&gt; 
&lt;p&gt;Generally speaking, the &lt;a href="https://crates.io/crates/arrow"&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt; crate offers functionality for using Arrow arrays, and &lt;a href="https://crates.io/crates/datafusion"&gt;&lt;code&gt;datafusion&lt;/code&gt;&lt;/a&gt; offers most operations typically found in SQL, including &lt;code&gt;join&lt;/code&gt;s and window functions.&lt;/p&gt; 
&lt;p&gt;You can find more details about each crate in their respective READMEs.&lt;/p&gt; 
&lt;h2&gt;Arrow Rust Community&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;dev@arrow.apache.org&lt;/code&gt; mailing list serves as the core communication channel for the Arrow community. Instructions for signing up and links to the archives can be found on the &lt;a href="https://arrow.apache.org/community/"&gt;Arrow Community&lt;/a&gt; page. All major announcements and communications happen there.&lt;/p&gt; 
&lt;p&gt;The Rust Arrow community also uses the official &lt;a href="https://s.apache.org/slack-invite"&gt;ASF Slack&lt;/a&gt; for informal discussions and coordination. This is a great place to meet other contributors and get guidance on where to contribute. Join us in the &lt;code&gt;#arrow-rust&lt;/code&gt; channel and feel free to ask for an invite via:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;the &lt;code&gt;dev@arrow.apache.org&lt;/code&gt; mailing list&lt;/li&gt; 
 &lt;li&gt;the &lt;a href="https://github.com/apache/arrow-rs/discussions"&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;the &lt;a href="https://discord.gg/YAb2TdazKQ"&gt;Discord channel&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The Rust implementation uses &lt;a href="https://github.com/apache/arrow-rs/issues"&gt;GitHub issues&lt;/a&gt; as the system of record for new features and bug fixes and this plays a critical role in the release process.&lt;/p&gt; 
&lt;p&gt;For design discussions we generally use GitHub issues.&lt;/p&gt; 
&lt;p&gt;There is more information in the &lt;a href="https://raw.githubusercontent.com/apache/arrow-rs/main/CONTRIBUTING.md#breaking-changes"&gt;contributing&lt;/a&gt; guide.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dandavison/delta</title>
      <link>https://github.com/dandavison/delta</link>
      <description>&lt;p&gt;A syntax-highlighting pager for git, diff, grep, and blame output&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img width="400px" src="https://user-images.githubusercontent.com/52205/147996902-9829bd3f-cd33-466e-833e-49a6f3ebd623.png" alt="image" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/dandavison/delta/actions"&gt; &lt;img src="https://github.com/dandavison/delta/workflows/Continuous%20Integration/badge.svg?sanitize=true" alt="CI" /&gt; &lt;/a&gt; &lt;a href="https://coveralls.io/github/dandavison/delta?branch=main"&gt; &lt;img src="https://coveralls.io/repos/github/dandavison/delta/badge.svg?branch=main" alt="Coverage Status" /&gt; &lt;/a&gt; &lt;a href="https://gitter.im/dandavison-delta/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge"&gt; &lt;img src="https://badges.gitter.im/dandavison-delta/community.svg?sanitize=true" alt="Gitter" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Get Started&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://dandavison.github.io/delta/installation.html"&gt;Install it&lt;/a&gt; (the package is called "git-delta" in most package managers, but the executable is just &lt;code&gt;delta&lt;/code&gt;) and add this to your &lt;code&gt;~/.gitconfig&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-gitconfig"&gt;[core]
    pager = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true  # use n and N to move between diff sections
    dark = true      # or light = true, or omit for auto-detection

[merge]
    conflictStyle = zdiff3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;git config --global core.pager delta
git config --global interactive.diffFilter 'delta --color-only'
git config --global delta.navigate true
git config --global merge.conflictStyle zdiff3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Delta has many features and is very customizable; please see &lt;code&gt;delta -h&lt;/code&gt; (short help) or &lt;code&gt;delta --help&lt;/code&gt; (full manual), or the &lt;a href="https://dandavison.github.io/delta/"&gt;online user manual&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Language syntax highlighting with the same syntax-highlighting themes as &lt;a href="https://github.com/sharkdp/bat#readme"&gt;bat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Word-level diff highlighting using a Levenshtein edit inference algorithm&lt;/li&gt; 
 &lt;li&gt;Side-by-side view with line-wrapping&lt;/li&gt; 
 &lt;li&gt;Line numbering&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;n&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; keybindings to move between files in large diffs, and between diffs in &lt;code&gt;log -p&lt;/code&gt; views (&lt;code&gt;--navigate&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Improved merge conflict display&lt;/li&gt; 
 &lt;li&gt;Improved &lt;code&gt;git blame&lt;/code&gt; display (syntax highlighting; &lt;code&gt;--hyperlinks&lt;/code&gt; formats commits as links to hosting provider etc. Supported hosting providers are: GitHub, GitLab, SourceHut, Codeberg)&lt;/li&gt; 
 &lt;li&gt;Syntax-highlights grep output from &lt;code&gt;rg&lt;/code&gt;, &lt;code&gt;git grep&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, etc&lt;/li&gt; 
 &lt;li&gt;Support for Git's &lt;code&gt;--color-moved&lt;/code&gt; feature.&lt;/li&gt; 
 &lt;li&gt;Code can be copied directly from the diff (&lt;code&gt;-/+&lt;/code&gt; markers are removed by default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;diff-highlight&lt;/code&gt; and &lt;code&gt;diff-so-fancy&lt;/code&gt; emulation modes&lt;/li&gt; 
 &lt;li&gt;Commit hashes can be formatted as terminal &lt;a href="https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda"&gt;hyperlinks&lt;/a&gt; to the hosting provider page (&lt;code&gt;--hyperlinks&lt;/code&gt;). File paths can also be formatted as hyperlinks for opening in your OS.&lt;/li&gt; 
 &lt;li&gt;Stylable box/line decorations to draw attention to commit, file and hunk header sections.&lt;/li&gt; 
 &lt;li&gt;Style strings (foreground color, background color, font attributes) are supported for &amp;gt;20 stylable elements, using the same color/style language as git&lt;/li&gt; 
 &lt;li&gt;Handles traditional unified diff output in addition to git output&lt;/li&gt; 
 &lt;li&gt;Automatic detection of light/dark terminal background&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;A syntax-highlighting pager for git, diff, and grep output&lt;/h2&gt; 
&lt;p&gt;Code evolves, and we all spend time studying diffs. Delta aims to make this both efficient and enjoyable: it allows you to make extensive changes to the layout and styling of diffs, as well as allowing you to stay arbitrarily close to the default git/diff output.&lt;/p&gt; 
&lt;table align="center"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;img width="400px" src="https://user-images.githubusercontent.com/52205/86275526-76792100-bba1-11ea-9e78-6be9baa80b29.png" alt="image" /&gt; &lt;br /&gt; &lt;p align="center"&gt;&lt;sub&gt;delta with &lt;code&gt;line-numbers&lt;/code&gt; activated&lt;/sub&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;table align="center"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;img width="800px" src="https://user-images.githubusercontent.com/52205/87230973-412eb900-c381-11ea-8aec-cc200290bd1b.png" alt="image" /&gt; &lt;br /&gt; &lt;p align="center"&gt;&lt;sub&gt;delta with &lt;code&gt;side-by-side&lt;/code&gt; and &lt;code&gt;line-numbers&lt;/code&gt; activated&lt;/sub&gt;&lt;/p&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;Here's what &lt;code&gt;git show&lt;/code&gt; can look like with git configured to use delta:&lt;/p&gt; 
&lt;br /&gt; 
&lt;table align="center"&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;img width="500px" style="border: 1px solid black" src="https://user-images.githubusercontent.com/52205/81058545-a5725f80-8e9c-11ea-912e-d21954586a44.png" alt="image" /&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img width="500px" style="border: 1px solid black" src="https://user-images.githubusercontent.com/52205/81058911-6abcf700-8e9d-11ea-93be-e212824ec03d.png" alt="image" /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; "Dracula" theme &lt;/td&gt; 
   &lt;td&gt; "GitHub" theme &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;h3&gt;Syntax-highlighting themes&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;All the syntax-highlighting color themes that are available with &lt;a href="https://github.com/sharkdp/bat/"&gt;bat&lt;/a&gt; are available with delta:&lt;/strong&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td&gt; &lt;img width="400px" style="border: 1px solid black" src="https://user-images.githubusercontent.com/52205/149431273-e3ad049d-771e-4186-869d-0e57967958a6.png" alt="image" /&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;img width="400px" style="border: 1px solid black" src="https://user-images.githubusercontent.com/52205/149431419-48836001-2afc-4fd0-97ad-561a69b71db7.png" alt="image" /&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt; &lt;code&gt;delta --show-syntax-themes --dark&lt;/code&gt; &lt;/td&gt; 
   &lt;td&gt; &lt;code&gt;delta --show-syntax-themes --light&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;br /&gt; 
&lt;h3&gt;Side-by-side view&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://dandavison.github.io/delta/side-by-side-view.html"&gt;User manual&lt;/a&gt;]&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-gitconfig"&gt;[delta]
    side-by-side = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, side-by-side view has line-numbers activated, and has syntax highlighting in both the left and right panels: [&lt;a href="https://raw.githubusercontent.com/dandavison/delta/main/#side-by-side-view-1"&gt;config&lt;/a&gt;]&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;img width="800px" src="https://user-images.githubusercontent.com/52205/87230973-412eb900-c381-11ea-8aec-cc200290bd1b.png" alt="image" /&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;p&gt;Side-by-side view wraps long lines automatically:&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;img width="600px" src="https://user-images.githubusercontent.com/52205/139064537-f8479504-16d3-429a-b4f6-d0122438adaa.png" alt="image" /&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Line numbers&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://dandavison.github.io/delta/line-numbers.html"&gt;User manual&lt;/a&gt;]&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-gitconfig"&gt;[delta]
    line-numbers = true
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;img width="400px" src="https://user-images.githubusercontent.com/52205/86275526-76792100-bba1-11ea-9e78-6be9baa80b29.png" alt="image" /&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Merge conflicts&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://dandavison.github.io/delta/merge-conflicts.html"&gt;User manual&lt;/a&gt;]&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;img width="500px" src="https://user-images.githubusercontent.com/52205/144783121-bb549100-69d8-41b8-ac62-1704f1f7b43e.png" alt="image" /&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Git blame&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://dandavison.github.io/delta/git-blame.html"&gt;User manual&lt;/a&gt;]&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;img width="600px" src="https://user-images.githubusercontent.com/52205/141891376-1fdb87dc-1d9c-4ad6-9d72-eeb19a8aeb0b.png" alt="image" /&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Ripgrep, git grep&lt;/h3&gt; 
&lt;p&gt;[&lt;a href="https://dandavison.github.io/delta/grep.html"&gt;User manual&lt;/a&gt;]&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt; &lt;img width="600px" alt="image" src="https://github.com/dandavison/open-in-editor/assets/52205/d203d380-5acb-4296-aeb9-e38c73d6c27f" /&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Installation and usage&lt;/h3&gt; 
&lt;p&gt;Please see the &lt;a href="https://dandavison.github.io/delta/"&gt;user manual&lt;/a&gt; and &lt;code&gt;delta --help&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dandavison"&gt;@dandavison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/th1000s"&gt;@th1000s&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>qarmin/czkawka</title>
      <link>https://github.com/qarmin/czkawka</link>
      <description>&lt;p&gt;Multi functional app to find duplicates, empty folders, similar images etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/41945903/102616149-66490400-4137-11eb-9cd6-813b2b070834.png" alt="com github qarmin czkawka" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Czkawka&lt;/strong&gt; (&lt;em&gt;tch•kav•ka&lt;/em&gt; (IPA: [ˈʧ̑kafka]), "hiccup" in Polish) is a simple, fast and free app to remove unnecessary files from your computer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Krokiet&lt;/strong&gt; ((IPA: [ˈkrɔcɛt]), "croquet" in Polish) same as above, but uses Slint frontend.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Written in memory-safe Rust - almost 100% unsafe code free&lt;/li&gt; 
 &lt;li&gt;Amazingly fast - due to using more or less advanced algorithms and multithreading&lt;/li&gt; 
 &lt;li&gt;Free, Open Source without ads&lt;/li&gt; 
 &lt;li&gt;Multiplatform - works on Linux, Windows, macOS, FreeBSD and many more&lt;/li&gt; 
 &lt;li&gt;Cache support - second and further scans should be much faster than the first one&lt;/li&gt; 
 &lt;li&gt;CLI frontend - for easy automation&lt;/li&gt; 
 &lt;li&gt;GUI frontend - uses GTK 4 or Slint frameworks&lt;/li&gt; 
 &lt;li&gt;No spying - Czkawka does not have access to the Internet, nor does it collect any user information or statistics&lt;/li&gt; 
 &lt;li&gt;Multilingual - support multiple languages like Polish, English or Italian&lt;/li&gt; 
 &lt;li&gt;Multiple tools to use: 
  &lt;ul&gt; 
   &lt;li&gt;Duplicates - Finds duplicates based on file name, size or hash&lt;/li&gt; 
   &lt;li&gt;Empty Folders - Finds empty folders with the help of an advanced algorithm&lt;/li&gt; 
   &lt;li&gt;Big Files - Finds the provided number of the biggest files in given location&lt;/li&gt; 
   &lt;li&gt;Empty Files - Looks for empty files across the drive&lt;/li&gt; 
   &lt;li&gt;Temporary Files - Finds temporary files&lt;/li&gt; 
   &lt;li&gt;Similar Images - Finds images which are not exactly the same (different resolution, watermarks)&lt;/li&gt; 
   &lt;li&gt;Similar Videos - Looks for visually similar videos&lt;/li&gt; 
   &lt;li&gt;Same Music - Searches for similar music by tags or by reading content and comparing it&lt;/li&gt; 
   &lt;li&gt;Invalid Symbolic Links - Shows symbolic links which point to non-existent files/directories&lt;/li&gt; 
   &lt;li&gt;Broken Files - Finds files that are invalid or corrupted&lt;/li&gt; 
   &lt;li&gt;Bad Extensions - Lists files whose content not match with their extension&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/b0409515-1bec-4e13-8fac-7bdfa15f5848" alt="Czkawka" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/720e98c3-598a-41aa-a04b-0c0c1d8a28e6" alt="Krokiet" /&gt;&lt;/p&gt; 
&lt;p&gt;Changelog about each version can be found in &lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/Changelog.md"&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;New releases can be found in &lt;a href="https://github.com/qarmin/czkawka/releases"&gt;Github releases&lt;/a&gt; and nightly builds also in &lt;a href="https://github.com/qarmin/czkawka/releases/tag/Nightly"&gt;Nightly releases&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage, installation, compilation, requirements, license&lt;/h2&gt; 
&lt;p&gt;Each tool uses different technologies, so you can find instructions for each of them in the appropriate file:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/czkawka_gui/README.md"&gt;Czkawka GUI (GTK frontend)&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/czkawka_cli/README.md"&gt;Czkawka CLI&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/czkawka_core/README.md"&gt;Czkawka Core&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/qarmin/czkawka/master/krokiet/README.md"&gt;Krokiet GUI (Slint frontend)&lt;/a&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Comparison to other tools&lt;/h2&gt; 
&lt;p&gt;Bleachbit is a master at finding and removing temporary files, while Czkawka only finds the most basic ones. So these two apps shouldn't be compared directly or be considered as an alternative to one another.&lt;/p&gt; 
&lt;p&gt;In this comparison remember, that even if app have same features they may work different(e.g. one app may have more options to choose than other).&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align="center"&gt;&lt;/th&gt; 
   &lt;th align="center"&gt;Czkawka&lt;/th&gt; 
   &lt;th align="center"&gt;Krokiet&lt;/th&gt; 
   &lt;th align="center"&gt;FSlint&lt;/th&gt; 
   &lt;th align="center"&gt;DupeGuru&lt;/th&gt; 
   &lt;th align="center"&gt;Bleachbit&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Language&lt;/td&gt; 
   &lt;td align="center"&gt;Rust&lt;/td&gt; 
   &lt;td align="center"&gt;Rust&lt;/td&gt; 
   &lt;td align="center"&gt;Python&lt;/td&gt; 
   &lt;td align="center"&gt;Python/Obj-C&lt;/td&gt; 
   &lt;td align="center"&gt;Python&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Framework base language&lt;/td&gt; 
   &lt;td align="center"&gt;C&lt;/td&gt; 
   &lt;td align="center"&gt;Rust&lt;/td&gt; 
   &lt;td align="center"&gt;C&lt;/td&gt; 
   &lt;td align="center"&gt;C/C++/Obj-C/Swift&lt;/td&gt; 
   &lt;td align="center"&gt;C&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Framework&lt;/td&gt; 
   &lt;td align="center"&gt;GTK 4&lt;/td&gt; 
   &lt;td align="center"&gt;Slint&lt;/td&gt; 
   &lt;td align="center"&gt;PyGTK2&lt;/td&gt; 
   &lt;td align="center"&gt;Qt 5 (PyQt)/Cocoa&lt;/td&gt; 
   &lt;td align="center"&gt;PyGTK3&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;OS&lt;/td&gt; 
   &lt;td align="center"&gt;Lin,Mac,Win&lt;/td&gt; 
   &lt;td align="center"&gt;Lin,Mac,Win&lt;/td&gt; 
   &lt;td align="center"&gt;Lin&lt;/td&gt; 
   &lt;td align="center"&gt;Lin,Mac,Win&lt;/td&gt; 
   &lt;td align="center"&gt;Lin,Mac,Win&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Duplicate finder&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Empty files&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Empty folders&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Temporary files&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Big files&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Similar images&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Similar videos&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Music duplicates(tags)&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Music duplicates(content)&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Invalid symlinks&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Broken files&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Invalid names/extensions&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Names conflict&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Installed packages&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Bad ID&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Non stripped binaries&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Redundant whitespace&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Overwriting files&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Multiple languages&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;Cache support&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
   &lt;td align="center"&gt;✔&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align="center"&gt;In active development&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
   &lt;td align="center"&gt;No&lt;/td&gt; 
   &lt;td align="center"&gt;No*&lt;/td&gt; 
   &lt;td align="center"&gt;Yes&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;ul&gt; 
 &lt;li&gt;Last commit in 2024 and last version released in 2023&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other apps&lt;/h2&gt; 
&lt;p&gt;There are many similar applications to Czkawka on the Internet, which do some things better and some things worse:&lt;/p&gt; 
&lt;h3&gt;GUI&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/arsenetar/dupeguru"&gt;DupeGuru&lt;/a&gt; - Many options to customize; great photo compare tool&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pixelb/fslint"&gt;FSlint&lt;/a&gt; - A little outdated, but still have some tools not available in Czkawka&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ermig1979/AntiDupl"&gt;AntiDupl.NET&lt;/a&gt; - Shows a lot of metadata of compared images&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x90d/videoduplicatefinder"&gt;Video Duplicate Finder&lt;/a&gt; - Finds similar videos(surprising, isn't it), supports video thumbnails&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CLI&lt;/h3&gt; 
&lt;p&gt;Due to limited time, the biggest emphasis is on the GUI version so if you are looking for really good and feature-packed console apps, then take a look at these:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pkolaczk/fclones"&gt;Fclones&lt;/a&gt; - One of the fastest tools to find duplicates; it is written also in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sahib/rmlint"&gt;Rmlint&lt;/a&gt; - Nice console interface and also is feature packed&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pauldreik/rdfind"&gt;RdFind&lt;/a&gt; - Fast, but written in C++ ¯\_(ツ)_/¯&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;p&gt;Big thanks to Pádraig Brady, creator of fantastic FSlint, because without his work I wouldn't create this tool.&lt;/p&gt; 
&lt;p&gt;Thanks also to all the people who create patches for this program, make it available on other systems, create videos, articles about it etc.&lt;/p&gt; 
&lt;p&gt;Also, I really appreciate work of people that create crates on which Czkawka is based and for that I try to report bugs to make it even better.&lt;/p&gt; 
&lt;h2&gt;Officially Supported Projects&lt;/h2&gt; 
&lt;p&gt;Only this repository, &lt;a href="https://github.com/qarmin/czkawka/releases"&gt;prebuild-binaries&lt;/a&gt;, projects on &lt;a href="https://crates.io/crates/czkawka_gui"&gt;crates.io&lt;/a&gt; and &lt;a href="https://flathub.org/apps/com.github.qarmin.czkawka"&gt;flathub&lt;/a&gt; are directly maintained by me.&lt;/p&gt; 
&lt;p&gt;Czkawka does not have an official website, so do not trust any sites that claim to be the official one.&lt;/p&gt; 
&lt;p&gt;If you use packages from unofficial sources, make sure they are safe.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The entire code in this repository is licensed under the &lt;a href="https://mit-license.org/"&gt;MIT&lt;/a&gt; license.&lt;/p&gt; 
&lt;p&gt;All images are licensed under the &lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;CC BY 4.0&lt;/a&gt; license.&lt;/p&gt; 
&lt;p&gt;The Czkawka GTK GUI and CLI applications are licensed under the &lt;a href="https://mit-license.org/"&gt;MIT&lt;/a&gt; license, while the Krokiet is licensed under the &lt;a href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;GPL-3.0-only&lt;/a&gt; license.&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;If you are using the app, I would appreciate a donation for its further development, which can be done &lt;a href="https://github.com/sponsors/qarmin"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PyO3/maturin</title>
      <link>https://github.com/PyO3/maturin</link>
      <description>&lt;p&gt;Build and publish crates with pyo3, cffi and uniffi bindings as well as rust binaries as python packages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Maturin&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;formerly pyo3-pack&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://maturin.rs"&gt;&lt;img src="https://img.shields.io/badge/user-guide-brightgreen?logo=readthedocs&amp;amp;style=flat-square" alt="Maturin User Guide" /&gt;&lt;/a&gt; &lt;a href="https://crates.io/crates/maturin"&gt;&lt;img src="https://img.shields.io/crates/v/maturin.svg?logo=rust&amp;amp;style=flat-square" alt="Crates.io" /&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/maturin"&gt;&lt;img src="https://img.shields.io/pypi/v/maturin.svg?logo=python&amp;amp;style=flat-square" alt="PyPI" /&gt;&lt;/a&gt; &lt;a href="https://discord.gg/33kcChzH7f"&gt;&lt;img src="https://img.shields.io/discord/1209263839632424990?logo=discord&amp;amp;style=flat-square" alt="discord server" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Build and publish crates with &lt;a href="https://maturin.rs/bindings"&gt;pyo3, cffi and uniffi bindings&lt;/a&gt; as well as rust binaries as python packages with minimal configuration. It supports building wheels for python 3.8+ on Windows, Linux, macOS and FreeBSD, can upload them to &lt;a href="https://pypi.org/"&gt;pypi&lt;/a&gt; and has basic PyPy and GraalPy support.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href="https://maturin.rs/"&gt;User Guide&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;You can either download binaries from the &lt;a href="https://github.com/PyO3/maturin/releases/latest"&gt;latest release&lt;/a&gt; or install it with &lt;a href="https://pypa.github.io/pipx/"&gt;pipx&lt;/a&gt; or &lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# pipx
pipx install maturin
# uv
uv tool install maturin
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;pip install maturin&lt;/code&gt; should also work if you don't want to use pipx.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There are four main commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;maturin new&lt;/code&gt; creates a new cargo project with maturin configured.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;maturin publish&lt;/code&gt; builds the crate into python packages and publishes them to pypi.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;maturin build&lt;/code&gt; builds the wheels and stores them in a folder (&lt;code&gt;target/wheels&lt;/code&gt; by default), but doesn't upload them. It's recommended to publish packages with &lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt; using &lt;code&gt;uv publish&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;maturin develop&lt;/code&gt; builds the crate and installs it as a python module directly in the current virtualenv. Note that while &lt;code&gt;maturin develop&lt;/code&gt; is faster, it doesn't support all the feature that running &lt;code&gt;pip install&lt;/code&gt; after &lt;code&gt;maturin build&lt;/code&gt; supports.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;maturin doesn't need extra configuration files and doesn't clash with an existing setuptools-rust configuration. You can even integrate it with testing tools such as &lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;. There are examples for the different bindings in the &lt;code&gt;test-crates&lt;/code&gt; folder.&lt;/p&gt; 
&lt;p&gt;The name of the package will be the name of the cargo project, i.e. the name field in the &lt;code&gt;[package]&lt;/code&gt; section of &lt;code&gt;Cargo.toml&lt;/code&gt;. The name of the module, which you are using when importing, will be the &lt;code&gt;name&lt;/code&gt; value in the &lt;code&gt;[lib]&lt;/code&gt; section (which defaults to the name of the package). For binaries, it's simply the name of the binary generated by cargo.&lt;/p&gt; 
&lt;p&gt;When using &lt;code&gt;maturin build&lt;/code&gt; and &lt;code&gt;maturin develop&lt;/code&gt; commands, you can compile a performance-optimized program by adding the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--release&lt;/code&gt; flag.&lt;/p&gt; 
&lt;h2&gt;Python packaging basics&lt;/h2&gt; 
&lt;p&gt;Python packages come in two formats: A built form called wheel and source distributions (sdist), both of which are archives. A wheel can be compatible with any python version, interpreter (cpython and pypy, mainly), operating system and hardware architecture (for pure python wheels), can be limited to a specific platform and architecture (e.g. when using ctypes or cffi) or to a specific python interpreter and version on a specific architecture and operating system (e.g. with pyo3).&lt;/p&gt; 
&lt;p&gt;When using &lt;code&gt;pip install&lt;/code&gt; on a package, pip tries to find a matching wheel and install that. If it doesn't find one, it downloads the source distribution and builds a wheel for the current platform, which requires the right compilers to be installed. Installing a wheel is much faster than installing a source distribution as building wheels is generally slow.&lt;/p&gt; 
&lt;p&gt;When you publish a package to be installable with &lt;code&gt;pip install&lt;/code&gt;, you upload it to &lt;a href="https://pypi.org/"&gt;pypi&lt;/a&gt;, the official package repository. For testing, you can use &lt;a href="https://test.pypi.org/"&gt;test pypi&lt;/a&gt; instead, which you can use with &lt;code&gt;pip install --index-url https://test.pypi.org/simple/&lt;/code&gt;. Note that for &lt;a href="https://raw.githubusercontent.com/PyO3/maturin/main/#manylinux-and-auditwheel"&gt;publishing for linux&lt;/a&gt;, you need to use the manylinux docker container or zig, while for publishing from your repository you can use the &lt;a href="https://github.com/PyO3/maturin-action"&gt;PyO3/maturin-action&lt;/a&gt; github action.&lt;/p&gt; 
&lt;h2&gt;Mixed rust/python projects&lt;/h2&gt; 
&lt;p&gt;To create a mixed rust/python project, create a folder with your module name (i.e. &lt;code&gt;lib.name&lt;/code&gt; in Cargo.toml) next to your Cargo.toml and add your python sources there:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;my-project
├── Cargo.toml
├── my_project
│&amp;nbsp;&amp;nbsp; ├── __init__.py
│&amp;nbsp;&amp;nbsp; └── bar.py
├── pyproject.toml
├── README.md
└── src
 &amp;nbsp;&amp;nbsp; └── lib.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can specify a different python source directory in &lt;code&gt;pyproject.toml&lt;/code&gt; by setting &lt;code&gt;tool.maturin.python-source&lt;/code&gt;, for example&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;pyproject.toml&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[tool.maturin]
python-source = "python"
module-name = "my_project._lib_name"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;then the project structure would look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;my-project
├── Cargo.toml
├── python
│   └── my_project
│       ├── __init__.py
│       └── bar.py
├── pyproject.toml
├── README.md
└── src
 &amp;nbsp;&amp;nbsp; └── lib.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE]&lt;/p&gt; 
 &lt;p&gt;This structure is recommended to avoid &lt;a href="https://github.com/PyO3/maturin/issues/490"&gt;a common &lt;code&gt;ImportError&lt;/code&gt; pitfall&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;maturin will add the native extension as a module in your python folder. When using develop, maturin will copy the native library and for cffi also the glue code to your python folder. You should add those files to your gitignore.&lt;/p&gt; 
&lt;p&gt;With cffi you can do &lt;code&gt;from .my_project import lib&lt;/code&gt; and then use &lt;code&gt;lib.my_native_function&lt;/code&gt;, with pyo3 you can directly &lt;code&gt;from .my_project import my_native_function&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Example layout with pyo3 after &lt;code&gt;maturin develop&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;my-project
├── Cargo.toml
├── my_project
│&amp;nbsp;&amp;nbsp; ├── __init__.py
│&amp;nbsp;&amp;nbsp; ├── bar.py
│&amp;nbsp;&amp;nbsp; └── _lib_name.cpython-36m-x86_64-linux-gnu.so
├── README.md
└── src
 &amp;nbsp;&amp;nbsp; └── lib.rs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When doing this also be sure to set the module name in your code to match the last part of &lt;code&gt;module-name&lt;/code&gt; (don't include the package path):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-rust"&gt;#[pymodule]
#[pyo3(name="_lib_name")]
fn my_lib_name(m: &amp;amp;Bound&amp;lt;'_, PyModule&amp;gt;) -&amp;gt; PyResult&amp;lt;()&amp;gt; {
    m.add_class::&amp;lt;MyPythonRustClass&amp;gt;()?;
    Ok(())
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Python metadata&lt;/h2&gt; 
&lt;p&gt;maturin supports &lt;a href="https://www.python.org/dev/peps/pep-0621/"&gt;PEP 621&lt;/a&gt;, you can specify python package metadata in &lt;code&gt;pyproject.toml&lt;/code&gt;. maturin merges metadata from &lt;code&gt;Cargo.toml&lt;/code&gt; and &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;pyproject.toml&lt;/code&gt; takes precedence over &lt;code&gt;Cargo.toml&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To specify python dependencies, add a list &lt;code&gt;dependencies&lt;/code&gt; in a &lt;code&gt;[project]&lt;/code&gt; section in the &lt;code&gt;pyproject.toml&lt;/code&gt;. This list is equivalent to &lt;code&gt;install_requires&lt;/code&gt; in setuptools:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[project]
name = "my-project"
dependencies = ["flask~=1.1.0", "toml&amp;gt;=0.10.2,&amp;lt;0.11.0"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can add so called console scripts, which are shell commands that execute some function in your program in the &lt;code&gt;[project.scripts]&lt;/code&gt; section. The keys are the script names while the values are the path to the function in the format &lt;code&gt;some.module.path:class.function&lt;/code&gt;, where the &lt;code&gt;class&lt;/code&gt; part is optional. The function is called with no arguments. Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[project.scripts]
get_42 = "my_project:DummyClass.get_42"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also specify &lt;a href="https://pypi.org/classifiers/"&gt;trove classifiers&lt;/a&gt; in your &lt;code&gt;pyproject.toml&lt;/code&gt; under &lt;code&gt;project.classifiers&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[project]
name = "my-project"
classifiers = ["Programming Language :: Python"]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Source distribution&lt;/h2&gt; 
&lt;p&gt;maturin supports building through &lt;code&gt;pyproject.toml&lt;/code&gt;. To use it, create a &lt;code&gt;pyproject.toml&lt;/code&gt; next to your &lt;code&gt;Cargo.toml&lt;/code&gt; with the following content:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[build-system]
requires = ["maturin&amp;gt;=1.0,&amp;lt;2.0"]
build-backend = "maturin"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If a &lt;code&gt;pyproject.toml&lt;/code&gt; with a &lt;code&gt;[build-system]&lt;/code&gt; entry is present, maturin can build a source distribution of your package when &lt;code&gt;--sdist&lt;/code&gt; is specified. The source distribution will contain the same files as &lt;code&gt;cargo package&lt;/code&gt;. To only build a source distribution, pass &lt;code&gt;--interpreter&lt;/code&gt; without any values.&lt;/p&gt; 
&lt;p&gt;You can then e.g. install your package with &lt;code&gt;pip install .&lt;/code&gt;. With &lt;code&gt;pip install . -v&lt;/code&gt; you can see the output of cargo and maturin.&lt;/p&gt; 
&lt;p&gt;You can use the options &lt;code&gt;compatibility&lt;/code&gt;, &lt;code&gt;skip-auditwheel&lt;/code&gt;, &lt;code&gt;bindings&lt;/code&gt;, &lt;code&gt;strip&lt;/code&gt; and common Cargo build options such as &lt;code&gt;features&lt;/code&gt; under &lt;code&gt;[tool.maturin]&lt;/code&gt; the same way you would when running maturin directly. The &lt;code&gt;bindings&lt;/code&gt; key is required for cffi and bin projects as those can't be automatically detected. Currently, all builds are in release mode (see &lt;a href="https://discuss.python.org/t/pep-517-debug-vs-release-builds/1924"&gt;this thread&lt;/a&gt; for details).&lt;/p&gt; 
&lt;p&gt;For a non-manylinux build with cffi bindings you could use the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[build-system]
requires = ["maturin&amp;gt;=1.0,&amp;lt;2.0"]
build-backend = "maturin"

[tool.maturin]
bindings = "cffi"
compatibility = "linux"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;manylinux&lt;/code&gt; option is also accepted as an alias of &lt;code&gt;compatibility&lt;/code&gt; for backward compatibility with old version of maturin.&lt;/p&gt; 
&lt;p&gt;To include arbitrary files in the sdist for use during compilation specify &lt;code&gt;include&lt;/code&gt; as an array of &lt;code&gt;path&lt;/code&gt; globs with &lt;code&gt;format&lt;/code&gt; set to &lt;code&gt;sdist&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-toml"&gt;[tool.maturin]
include = [{ path = "path/**/*", format = "sdist" }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There's a &lt;code&gt;maturin sdist&lt;/code&gt; command for only building a source distribution as workaround for &lt;a href="https://github.com/pypa/pip/issues/6041"&gt;pypa/pip#6041&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manylinux and auditwheel&lt;/h2&gt; 
&lt;p&gt;For portability reasons, native python modules on linux must only dynamically link a set of very few libraries which are installed basically everywhere, hence the name manylinux. The pypa offers special docker images and a tool called &lt;a href="https://github.com/pypa/auditwheel/"&gt;auditwheel&lt;/a&gt; to ensure compliance with the &lt;a href="https://peps.python.org/pep-0599/#the-manylinux2014-policy"&gt;manylinux rules&lt;/a&gt;. If you want to publish widely usable wheels for linux pypi, &lt;strong&gt;you need to use a manylinux docker image or build with zig&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;The Rust compiler since version 1.64 &lt;a href="https://blog.rust-lang.org/2022/08/01/Increasing-glibc-kernel-requirements.html"&gt;requires at least glibc 2.17&lt;/a&gt;, so you need to use at least manylinux2014. For publishing, we recommend enforcing the same manylinux version as the image with the manylinux flag, e.g. use &lt;code&gt;--manylinux 2014&lt;/code&gt; if you are building in &lt;code&gt;quay.io/pypa/manylinux2014_x86_64&lt;/code&gt;. The &lt;a href="https://github.com/PyO3/maturin-action"&gt;PyO3/maturin-action&lt;/a&gt; github action already takes care of this if you set e.g. &lt;code&gt;manylinux: 2014&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;maturin contains a reimplementation of auditwheel automatically checks the generated library and gives the wheel the proper platform tag. If your system's glibc is too new or you link other shared libraries, it will assign the &lt;code&gt;linux&lt;/code&gt; tag. You can also manually disable those checks and directly use native linux target with &lt;code&gt;--manylinux off&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For full manylinux compliance you need to compile in a CentOS docker container. The &lt;a href="https://ghcr.io/pyo3/maturin"&gt;pyo3/maturin&lt;/a&gt; image is based on the manylinux2014 image, and passes arguments to the &lt;code&gt;maturin&lt;/code&gt; binary. You can use it like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker run --rm -v $(pwd):/io ghcr.io/pyo3/maturin build --release  # or other maturin arguments
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that this image is very basic and only contains python, maturin and stable rust. If you need additional tools, you can run commands inside the manylinux container. See &lt;a href="https://github.com/konstin/complex-manylinux-maturin-docker"&gt;konstin/complex-manylinux-maturin-docker&lt;/a&gt; for a small educational example or &lt;a href="https://github.com/nanoporetech/fast-ctc-decode/raw/b226ea0f2b2f4f474eff47349703d57d2ea4801b/.github/workflows/publish.yml"&gt;nanoporetech/fast-ctc-decode&lt;/a&gt; for a real world setup.&lt;/p&gt; 
&lt;p&gt;maturin itself is manylinux compliant when compiled for the musl target.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://pypi.org/project/agg-python-bindings"&gt;agg-python-bindings&lt;/a&gt; - A Python Library that binds to Asciinema Agg terminal record renderer and Avt terminal emulator&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/arrow-ballista-python"&gt;ballista-python&lt;/a&gt; - A Python library that binds to Apache Arrow distributed query engine Ballista&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/shenxiangzhuang/bleuscore"&gt;bleuscore&lt;/a&gt; - A BLEU score calculation library, written in pure Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/john-parton/chardetng-py"&gt;chardetng-py&lt;/a&gt; - Python binding for the chardetng character encoding detector.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sfu-db/connector-x/tree/main/connectorx-python"&gt;connector-x&lt;/a&gt; - ConnectorX enables you to load data from databases into Python in the fastest and most memory efficient way&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/arrow-datafusion-python"&gt;datafusion-python&lt;/a&gt; - a Python library that binds to Apache Arrow in-memory query engine DataFusion&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/delta-io/delta-rs/tree/main/python"&gt;deltalake-python&lt;/a&gt; - Native Delta Lake Python binding based on delta-rs with Pandas integration&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/apache/incubator-opendal/tree/main/bindings/python"&gt;opendal&lt;/a&gt; - OpenDAL Python Binding to access data freely&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/ijl/orjson"&gt;orjson&lt;/a&gt; - A fast, correct JSON library for Python&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pola-rs/polars/tree/master/py-polars"&gt;polars&lt;/a&gt; - Fast multi-threaded DataFrame library in Rust | Python | Node.js&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pydantic/pydantic-core"&gt;pydantic-core&lt;/a&gt; - Core validation logic for pydantic written in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/milesgranger/pyrus-cramjam"&gt;pyrus-cramjam&lt;/a&gt; - Thin Python wrapper to de/compression algorithms in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kitao/pyxel"&gt;pyxel&lt;/a&gt; - A retro game engine for Python&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/roapi/roapi"&gt;roapi&lt;/a&gt; - ROAPI automatically spins up read-only APIs for static datasets without requiring you to write a single line of code&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sansyrox/robyn"&gt;robyn&lt;/a&gt; - A fast and extensible async python web server with a Rust runtime&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charliermarsh/ruff"&gt;ruff&lt;/a&gt; - An extremely fast Python linter, written in Rust&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/0x676e67/rnet"&gt;rnet&lt;/a&gt; - Asynchronous Python HTTP Client with Black Magic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rahmadafandi/rustpy-xlsxwriter"&gt;rustpy-xlsxwriter&lt;/a&gt;: A high-performance Python library for generating Excel files, utilizing the &lt;a href="https://github.com/jmcnamara/rust_xlsxwriter"&gt;rust_xlsxwriter&lt;/a&gt; crate for efficient data handling.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/quickwit-oss/tantivy-py"&gt;tantivy-py&lt;/a&gt; - Python bindings for Tantivy&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/clflushopt/tpchgen-rs/tree/main/tpchgen-cli"&gt;tpchgen-cli&lt;/a&gt; - Python CLI binding for &lt;code&gt;tpchgen&lt;/code&gt;, a blazing fast TPC-H benchmark data generator built in pure Rust with zero dependencies.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samuelcolvin/watchfiles"&gt;watchfiles&lt;/a&gt; - Simple, modern and high performance file watching and code reload in python&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/webonnx/wonnx/tree/master/wonnx-py"&gt;wonnx&lt;/a&gt; - Wonnx is a GPU-accelerated ONNX inference run-time written 100% in Rust&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Everyone is welcomed to contribute to maturin! There are many ways to support the project, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;help maturin users with issues on GitHub and Gitter&lt;/li&gt; 
 &lt;li&gt;improve documentation&lt;/li&gt; 
 &lt;li&gt;write features and bugfixes&lt;/li&gt; 
 &lt;li&gt;publish blogs and examples of how to use maturin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Our &lt;a href="https://github.com/PyO3/maturin/raw/main/guide/src/contributing.md"&gt;contributing notes&lt;/a&gt; have more resources if you wish to volunteer time for maturin and are searching where to start.&lt;/p&gt; 
&lt;p&gt;If you don't have time to contribute yourself but still wish to support the project's future success, some of our maintainers have GitHub sponsorship pages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sponsors/messense"&gt;messense&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under either of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Apache License, Version 2.0, (&lt;a href="https://github.com/PyO3/maturin/raw/main/license-apache"&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;MIT license (&lt;a href="https://github.com/PyO3/maturin/raw/main/license-mit"&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href="http://opensource.org/licenses/MIT"&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;at your option.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mainmatter/100-exercises-to-learn-rust</title>
      <link>https://github.com/mainmatter/100-exercises-to-learn-rust</link>
      <description>&lt;p&gt;A self-paced course to learn Rust, one exercise at a time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn Rust, one exercise at a time&lt;/h1&gt; 
&lt;p&gt;You've heard about Rust, but you never had the chance to try it out?&lt;br /&gt; This course is for you!&lt;/p&gt; 
&lt;p&gt;You'll learn Rust by solving 100 exercises.&lt;br /&gt; You'll go from knowing nothing about Rust to being able to start writing your own programs, one exercise at a time.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] This course has been written by &lt;a href="https://mainmatter.com/rust-consulting/"&gt;Mainmatter&lt;/a&gt;.&lt;br /&gt; It's one of the trainings in &lt;a href="https://mainmatter.com/services/workshops/rust/"&gt;our portfolio of Rust workshops&lt;/a&gt;.&lt;br /&gt; Check out our &lt;a href="https://mainmatter.com/rust-consulting/"&gt;landing page&lt;/a&gt; if you're looking for Rust consulting or training!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;Go to &lt;a href="https://rust-exercises.com"&gt;rust-exercises.com&lt;/a&gt; and follow the instructions there to get started with the course.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt; (follow instructions &lt;a href="https://www.rust-lang.org/tools/install"&gt;here&lt;/a&gt;).&lt;br /&gt; If &lt;code&gt;rustup&lt;/code&gt; is already installed on your system, run &lt;code&gt;rustup update&lt;/code&gt; (or another appropriate command depending on how you installed Rust on your system) to make sure you're running on the latest stable version.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;(Optional but recommended)&lt;/em&gt; An IDE with Rust autocompletion support. We recommend one of the following: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://www.jetbrains.com/rust/"&gt;RustRover&lt;/a&gt;;&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer"&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/a&gt; extension.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Solutions&lt;/h2&gt; 
&lt;p&gt;You can find the solutions to the exercises in the &lt;a href="https://github.com/mainmatter/100-exercises-to-learn-rust/tree/solutions"&gt;&lt;code&gt;solutions&lt;/code&gt; branch&lt;/a&gt; of this repository.&lt;/p&gt; 
&lt;h1&gt;License&lt;/h1&gt; 
&lt;p&gt;Copyright © 2024- Mainmatter GmbH (&lt;a href="https://mainmatter.com"&gt;https://mainmatter.com&lt;/a&gt;), released under the &lt;a href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;Creative Commons Attribution-NonCommercial 4.0 International license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TheAlgorithms/Rust</title>
      <link>https://github.com/TheAlgorithms/Rust</link>
      <description>&lt;p&gt;All Algorithms implemented in Rust&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;!-- Title: --&gt; 
 &lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Rust_programming_language_black_logo.svg/1024px-Rust_programming_language_black_logo.svg.png" width="100" height="100" /&gt; 
 &lt;h1&gt;&lt;a href="https://github.com/TheAlgorithms/"&gt;The Algorithms&lt;/a&gt; - Rust&lt;/h1&gt; 
 &lt;!-- Labels: --&gt; 
 &lt;a href="https://gitpod.io/#https://github.com/TheAlgorithms/Rust"&gt; &lt;img src="https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&amp;amp;style=flat-square" height="20" alt="Gitpod Ready-to-Code" /&gt; &lt;/a&gt; 
 &lt;a href="https://github.com/TheAlgorithms/Rust/actions/workflows/build.yml"&gt; &lt;img src="https://github.com/TheAlgorithms/Rust/actions/workflows/build.yml/badge.svg?sanitize=true" height="20" alt="Build workflow" /&gt; &lt;/a&gt; 
 &lt;a href="https://codecov.io/gh/TheAlgorithms/Rust"&gt; &lt;img src="https://codecov.io/gh/TheAlgorithms/Rust/graph/badge.svg?token=nRkPKfbs42" /&gt; &lt;/a&gt; 
 &lt;a href="https://the-algorithms.com/discord"&gt; &lt;img src="https://img.shields.io/discord/808045925556682782.svg?logo=discord&amp;amp;colorB=00d37d" height="20" alt="Discord community" /&gt; &lt;/a&gt; 
 &lt;a href="https://matrix.to/#/#TheAlgorithms_community:gitter.im"&gt; &lt;img src="https://img.shields.io/gitter/room/TheAlgorithms/community.svg?style=flat-square" height="20" alt="Gitter chat" /&gt; &lt;/a&gt; 
 &lt;!-- Short description: --&gt; 
 &lt;h3&gt;All algorithms implemented in Rust - for education&lt;/h3&gt; 
&lt;/div&gt; 
&lt;h3&gt;List of Algorithms&lt;/h3&gt; 
&lt;p&gt;See our &lt;a href="https://raw.githubusercontent.com/TheAlgorithms/Rust/master/DIRECTORY.md"&gt;directory&lt;/a&gt; for easier navigation and a better overview of the project.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Read through our &lt;a href="https://raw.githubusercontent.com/TheAlgorithms/Rust/master/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt; before you contribute.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YaLTeR/niri</title>
      <link>https://github.com/YaLTeR/niri</link>
      <description>&lt;p&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt;&lt;hr&gt;&lt;h1 align="center"&gt;&lt;img alt="niri" src="https://github.com/user-attachments/assets/07d05cd0-d5dc-4a28-9a35-51bae8f119a0" /&gt;&lt;/h1&gt; 
&lt;p align="center"&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://matrix.to/#/#niri:matrix.org"&gt;&lt;img alt="Matrix" src="https://img.shields.io/badge/matrix-%23niri-blue?logo=matrix" /&gt;&lt;/a&gt; &lt;a href="https://github.com/YaLTeR/niri/raw/main/LICENSE"&gt;&lt;img alt="GitHub License" src="https://img.shields.io/github/license/YaLTeR/niri" /&gt;&lt;/a&gt; &lt;a href="https://github.com/YaLTeR/niri/releases"&gt;&lt;img alt="GitHub Release" src="https://img.shields.io/github/v/release/YaLTeR/niri?logo=github" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://yalter.github.io/niri/Getting-Started.html"&gt;Getting Started&lt;/a&gt; | &lt;a href="https://yalter.github.io/niri/Configuration%3A-Introduction.html"&gt;Configuration&lt;/a&gt; | &lt;a href="https://github.com/YaLTeR/niri/discussions/325"&gt;Setup&amp;nbsp;Showcase&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/535e6530-2f44-4b84-a883-1240a3eee6e9" alt="niri with a few windows open" /&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Windows are arranged in columns on an infinite strip going to the right. Opening a new window never causes existing windows to resize.&lt;/p&gt; 
&lt;p&gt;Every monitor has its own separate window strip. Windows can never "overflow" onto an adjacent monitor.&lt;/p&gt; 
&lt;p&gt;Workspaces are dynamic and arranged vertically. Every monitor has an independent set of workspaces, and there's always one empty workspace present all the way down.&lt;/p&gt; 
&lt;p&gt;The workspace arrangement is preserved across disconnecting and connecting monitors where it makes sense. When a monitor disconnects, its workspaces will move to another monitor, but upon reconnection they will move back to the original monitor.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Built from the ground up for scrollable tiling&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://yalter.github.io/niri/Workspaces.html"&gt;Dynamic workspaces&lt;/a&gt; like in GNOME&lt;/li&gt; 
 &lt;li&gt;An &lt;a href="https://github.com/user-attachments/assets/379a5d1f-acdb-4c11-b36c-e85fd91f0995"&gt;Overview&lt;/a&gt; that zooms out workspaces and windows&lt;/li&gt; 
 &lt;li&gt;Built-in screenshot UI&lt;/li&gt; 
 &lt;li&gt;Monitor and window screencasting through xdg-desktop-portal-gnome 
  &lt;ul&gt; 
   &lt;li&gt;You can &lt;a href="https://yalter.github.io/niri/Configuration%3A-Window-Rules.html#block-out-from"&gt;block out&lt;/a&gt; sensitive windows from screencasts&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://yalter.github.io/niri/Screencasting.html#dynamic-screencast-target"&gt;Dynamic cast target&lt;/a&gt; that can change what it shows on the go&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YaLTeR/niri/assets/1794388/946a910e-9bec-4cd1-a923-4a9421707515"&gt;Touchpad&lt;/a&gt; and &lt;a href="https://github.com/YaLTeR/niri/assets/1794388/8464e65d-4bf2-44fa-8c8e-5883355bd000"&gt;mouse&lt;/a&gt; gestures&lt;/li&gt; 
 &lt;li&gt;Group windows into &lt;a href="https://yalter.github.io/niri/Tabs.html"&gt;tabs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Configurable layout: gaps, borders, struts, window sizes&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://yalter.github.io/niri/Configuration%3A-Layout.html#gradients"&gt;Gradient borders&lt;/a&gt; with Oklab and Oklch support&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/YaLTeR/niri/assets/1794388/ce178da2-af9e-4c51-876f-8709c241d95e"&gt;Animations&lt;/a&gt; with support for &lt;a href="https://github.com/YaLTeR/niri/assets/1794388/27a238d6-0a22-4692-b794-30dc7a626fad"&gt;custom shaders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Live-reloading config&lt;/li&gt; 
 &lt;li&gt;Works with &lt;a href="https://yalter.github.io/niri/Accessibility.html"&gt;screen readers&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Video Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729"&gt;https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Also check out this video from Brodie Robertson that showcases a lot of the niri functionality: &lt;a href="https://youtu.be/DeYx2exm04M"&gt;Niri Is My New Favorite Wayland Compositor&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;Niri is stable for day-to-day use and does most things expected of a Wayland compositor. Many people are daily-driving niri, and are happy to help in our &lt;a href="https://matrix.to/#/#niri:matrix.org"&gt;Matrix channel&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Give it a try! Follow the instructions on the &lt;a href="https://yalter.github.io/niri/Getting-Started.html"&gt;Getting Started&lt;/a&gt; page. Have your &lt;a href="https://github.com/Alexays/Waybar"&gt;waybar&lt;/a&gt;s and &lt;a href="https://codeberg.org/dnkl/fuzzel"&gt;fuzzel&lt;/a&gt;s ready: niri is not a complete desktop environment. Also check out &lt;a href="https://github.com/Vortriz/awesome-niri"&gt;awesome-niri&lt;/a&gt;, a list of niri-related links and projects.&lt;/p&gt; 
&lt;p&gt;Here are some points you may have questions about:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Multi-monitor&lt;/strong&gt;: yes, a core part of the design from the very start. Mixed DPI works.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fractional scaling&lt;/strong&gt;: yes, plus all niri UI stays pixel-perfect.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;NVIDIA&lt;/strong&gt;: seems to work fine.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Floating windows&lt;/strong&gt;: yes, starting from niri 25.01.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Input devices&lt;/strong&gt;: niri supports tablets, touchpads, and touchscreens. You can map the tablet to a specific monitor, or use &lt;a href="https://opentabletdriver.net/"&gt;OpenTabletDriver&lt;/a&gt;. We have touchpad gestures, but no touchscreen gestures yet.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Wlr protocols&lt;/strong&gt;: yes, we have most of the important ones like layer-shell, gamma-control, screencopy. You can check on &lt;a href="https://wayland.app"&gt;wayland.app&lt;/a&gt; at the bottom of each protocol's page.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: while I run niri on beefy machines, I try to stay conscious of performance. I've seen someone use it fine on an Eee&amp;nbsp;PC&amp;nbsp;900 from&amp;nbsp;2008, of all things.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xwayland&lt;/strong&gt;: &lt;a href="https://yalter.github.io/niri/Xwayland.html#using-xwayland-satellite"&gt;integrated&lt;/a&gt; via xwayland-satellite starting from niri 25.08.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Media&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/Kmz8ODolnDg?list=PLRdS-n5seLRqrmWDQY4KDqtRMfIwU0U3T"&gt;niri: Making a Wayland compositor in Rust&lt;/a&gt; · &lt;em&gt;December 2024&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;My talk from the 2024 Moscow RustCon about niri, and how I do randomized property testing and profiling, and measure input latency. The talk is in Russian, but I prepared full English subtitles that you can find in YouTube's subtitle language selector.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.trommelspeicher.de/podcast/special_the_developer_behind_niri"&gt;An interview with Ivan, the developer behind Niri&lt;/a&gt; · &lt;em&gt;June 2025&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;An interview by a German tech podcast Das Triumvirat (in English). We talk about niri development and history, and my experience building and maintaining niri.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://lwn.net/Articles/1025866/"&gt;A tour of the niri scrolling-tiling Wayland compositor&lt;/a&gt; · &lt;em&gt;July 2025&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;An LWN article with a nice overview and introduction to niri.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you'd like to help with niri, there are plenty of both coding- and non-coding-related ways to do so. See &lt;a href="https://github.com/YaLTeR/niri/raw/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for an overview.&lt;/p&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;Niri is heavily inspired by &lt;a href="https://github.com/paperwm/PaperWM"&gt;PaperWM&lt;/a&gt; which implements scrollable tiling on top of GNOME Shell.&lt;/p&gt; 
&lt;p&gt;One of the reasons that prompted me to try writing my own compositor is being able to properly separate the monitors. Being a GNOME Shell extension, PaperWM has to work against Shell's global window coordinate space to prevent windows from overflowing.&lt;/p&gt; 
&lt;h2&gt;Tile Scrollably Elsewhere&lt;/h2&gt; 
&lt;p&gt;Here are some other projects which implement a similar workflow:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/paperwm/PaperWM"&gt;PaperWM&lt;/a&gt;: scrollable tiling on top of GNOME Shell.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/peterfajdiga/karousel"&gt;karousel&lt;/a&gt;: scrollable tiling on top of KDE.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dawsers/scroll"&gt;scroll&lt;/a&gt; and &lt;a href="https://spwhitton.name/tech/code/papersway/"&gt;papersway&lt;/a&gt;: scrollable tiling on top of sway/i3.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/hyprwm/hyprland-plugins/tree/main/hyprscrolling"&gt;hyprscrolling&lt;/a&gt; and &lt;a href="https://gitlab.com/magus/hyprslidr"&gt;hyprslidr&lt;/a&gt;: scrollable tiling on top of Hyprland.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mogenson/PaperWM.spoon"&gt;PaperWM.spoon&lt;/a&gt;: scrollable tiling on top of macOS.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Our main communication channel is a Matrix chat, feel free to join and ask a question: &lt;a href="https://matrix.to/#/#niri:matrix.org"&gt;https://matrix.to/#/#niri:matrix.org&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We also have a community Discord server: &lt;a href="https://discord.gg/vT8Sfjy7sx"&gt;https://discord.gg/vT8Sfjy7sx&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lanyeeee/jmcomic-downloader</title>
      <link>https://github.com/lanyeeee/jmcomic-downloader</link>
      <description>&lt;p&gt;禁漫天堂 18comic.vip jmcomic 18comic 的多线程下载器，带图形界面 带收藏夹 免费下载收费的漫画，已打包exe 下载速度飞快&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://github.com/user-attachments/assets/9d164ecc-e6ae-4e50-a497-b3ca79344ccf" style="align-self: center" /&gt; &lt;/p&gt; 
&lt;h1&gt;📚 禁漫天堂下载器&lt;/h1&gt; 
&lt;p&gt;一个用于 18comic.vip 禁漫天堂 jmcomic 18comic 的多线程下载器，带图形界面，带收藏夹，&lt;strong&gt;免费下载收费的漫画&lt;/strong&gt;，下载速度飞快。图形界面基于&lt;a href="https://v2.tauri.app/start/"&gt;Tauri&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🔽 在&lt;a href="https://github.com/lanyeeee/jmcomic-downloader/releases"&gt;Release页面&lt;/a&gt;可以直接下载&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果本项目对你有帮助，欢迎点个 Star⭐ 支持！你的支持是我持续更新维护的动力🙏&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;🖥️ 图形界面&lt;/h1&gt; 
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/2ec6e5f9-a211-4325-8671-0a15f4bcba6c" alt="image" /&gt;&lt;/p&gt; 
&lt;h1&gt;📖 使用方法&lt;/h1&gt; 
&lt;h4&gt;🚀 不使用收藏夹&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;不需要登录&lt;/strong&gt;，直接使用&lt;code&gt;漫画搜索&lt;/code&gt;，选择要下载的漫画，点击后进入&lt;code&gt;章节详情&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;在&lt;code&gt;章节详情&lt;/code&gt;勾选要下载的章节，点击&lt;code&gt;下载勾选章节&lt;/code&gt;按钮开始下载&lt;/li&gt; 
 &lt;li&gt;下载完成后点击&lt;code&gt;打开下载目录&lt;/code&gt;按钮查看结果&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h4&gt;⭐ 使用收藏夹&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;点击&lt;code&gt;账号登录&lt;/code&gt;按钮完成登录&lt;/li&gt; 
 &lt;li&gt;使用&lt;code&gt;漫画收藏&lt;/code&gt;，选择要下载的漫画，点击后进入&lt;code&gt;章节详情&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;在&lt;code&gt;章节详情&lt;/code&gt;勾选要下载的章节，点击&lt;code&gt;下载勾选章节&lt;/code&gt;按钮开始下载&lt;/li&gt; 
 &lt;li&gt;下载完成后点击&lt;code&gt;打开下载目录&lt;/code&gt;按钮查看结果&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;📹 下面的视频是完整使用流程，&lt;strong&gt;没有H内容，请放心观看&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/46096bd9-1fde-4474-b297-0f4389dbe770"&gt;https://github.com/user-attachments/assets/46096bd9-1fde-4474-b297-0f4389dbe770&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;❓ 常见问题&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lanyeeee/jmcomic-downloader/discussions/11"&gt;为什么下载过程中CPU占用很高&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lanyeeee/jmcomic-downloader/discussions/31"&gt;使用Ubuntu22.04时，搜索结果和收藏夹无法加载封面图&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lanyeeee/jmcomic-downloader/discussions/32"&gt;使用Ubuntu24.04时，窗口全白&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;📚 哔咔漫画下载器&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/lanyeeee/picacomic-downloader"&gt;&lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=lanyeeee&amp;amp;repo=picacomic-downloader" alt="Readme Card" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;⚠️ 关于被杀毒软件误判为病毒&lt;/h1&gt; 
&lt;p&gt;对于个人开发者来说，这个问题几乎是无解的(&lt;del&gt;需要购买数字证书给软件签名，甚至给杀毒软件交保护费&lt;/del&gt;)&lt;br /&gt; 我能想到的解决办法只有：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;根据下面的&lt;strong&gt;如何构建(build)&lt;/strong&gt;，自行编译&lt;/li&gt; 
 &lt;li&gt;希望你相信我的承诺，我承诺你在&lt;a href="https://github.com/lanyeeee/jmcomic-downloader/releases"&gt;Release页面&lt;/a&gt;下载到的所有东西都是安全的&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;🛠️ 如何构建(build)&lt;/h1&gt; 
&lt;p&gt;构建非常简单，一共就3条命令&lt;br /&gt; &lt;del&gt;前提是你已经安装了Rust、Node、pnpm&lt;/del&gt;&lt;/p&gt; 
&lt;h4&gt;📋 前提&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.rust-lang.org/tools/install"&gt;Rust&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://nodejs.org/en"&gt;Node&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://pnpm.io/installation"&gt;pnpm&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;📝 步骤&lt;/h4&gt; 
&lt;h4&gt;1. 克隆本仓库&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/lanyeeee/jmcomic-downloader.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2.安装依赖&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;cd jmcomic-downloader
pnpm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3.构建(build)&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;pnpm tauri build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;🤝 提交PR&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;PR请提交至&lt;code&gt;develop&lt;/code&gt;分支&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果想新加一个功能，请先开个&lt;code&gt;issue&lt;/code&gt;或&lt;code&gt;discussion&lt;/code&gt;讨论一下，避免无效工作&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;其他情况的PR欢迎直接提交，比如：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;🔧 对原有功能的改进&lt;/li&gt; 
 &lt;li&gt;🐛 修复BUG&lt;/li&gt; 
 &lt;li&gt;⚡ 使用更轻量的库实现原有功能&lt;/li&gt; 
 &lt;li&gt;📝 修订文档&lt;/li&gt; 
 &lt;li&gt;⬆️ 升级、更新依赖的PR也会被接受&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;⚠️ 免责声明&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;本工具仅作学习、研究、交流使用，使用本工具的用户应自行承担风险&lt;/li&gt; 
 &lt;li&gt;作者不对使用本工具导致的任何损失、法律纠纷或其他后果负责&lt;/li&gt; 
 &lt;li&gt;作者不对用户使用本工具的行为负责，包括但不限于用户违反法律或任何第三方权益的行为&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;💬 其他&lt;/h1&gt; 
&lt;p&gt;任何使用中遇到的问题、任何希望添加的功能，都欢迎提交issue或开discussion交流，我会尽力解决&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Myriad-Dreamin/tinymist</title>
      <link>https://github.com/Myriad-Dreamin/tinymist</link>
      <description>&lt;p&gt;Tinymist [ˈtaɪni mɪst] is an integrated language service for Typst [taɪpst].&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tinymist&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/Myriad-Dreamin/tinymist/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/Myriad-Dreamin/tinymist" alt="GitHub license" /&gt;&lt;/a&gt;&lt;a href="https://github.com/Myriad-Dreamin/tinymist/actions/workflows/ci.yml"&gt;&lt;img src="https://github.com/Myriad-Dreamin/tinymist/actions/workflows/ci.yml/badge.svg?event=push" alt="Actions status" /&gt;&lt;/a&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/"&gt;&lt;img src="https://img.shields.io/badge/view-documentation-blue" alt="Documentation" /&gt;&lt;/a&gt;&lt;a href="https://deepwiki.com/Myriad-Dreamin/tinymist"&gt;&lt;img src="https://deepwiki.com/badge.svg?sanitize=true" alt="Ask DeepWiki" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Tinymist [ˈtaɪni mɪst] is an integrated language service for &lt;a href="https://typst.app/"&gt;Typst&lt;/a&gt; [taɪpst]. You can also call it &lt;ruby&gt;微&lt;rt&gt;wēi&lt;/rt&gt;&lt;/ruby&gt;&lt;ruby&gt;霭&lt;rt&gt;ǎi&lt;/rt&gt;&lt;/ruby&gt; in Chinese.&lt;/p&gt; 
&lt;p&gt;It contains:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;an analyzing library for Typst, see &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/crates/tinymist-query/"&gt;tinymist-query&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;a CLI for Typst, see &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/crates/tinymist/"&gt;tinymist&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;which provides a language server for Typst, see &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/language.html"&gt;Language Features&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;which provides a preview server for Typst, see &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/preview.html"&gt;Preview Feature&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;a VSCode extension for Typst, see &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/editors/vscode/"&gt;Tinymist VSCode Extension&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Language service (LSP) features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide"&gt;Semantic highlighting&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;The "semantic highlighting" is supplementary to &lt;a href="https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide"&gt;"syntax highlighting"&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#provide-code-actions"&gt;Code actions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Also known as "quick fixes" or "refactorings".&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#format-source-code-in-an-editor"&gt;Formatting (Reformatting)&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Provide the user with support for formatting whole documents, using &lt;a href="https://github.com/astrale-sharp/typstfmt"&gt;typstfmt&lt;/a&gt; or &lt;a href="https://github.com/Enter-tainer/typstyle"&gt;typstyle&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#highlight-all-occurrences-of-a-symbol-in-a-document"&gt;Document highlight&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Highlight all break points in a loop context.&lt;/li&gt; 
   &lt;li&gt;(Todo) Highlight all exit points in a function context.&lt;/li&gt; 
   &lt;li&gt;(Todo) Highlight all captures in a closure context.&lt;/li&gt; 
   &lt;li&gt;(Todo) Highlight all occurrences of a symbol in a document.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentLink"&gt;Document links&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Renders path or link references in the document, such as &lt;code&gt;image("path.png")&lt;/code&gt; or &lt;code&gt;bibliography(style: "path.csl")&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/getstarted/userinterface#_outline-view"&gt;Document symbols&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Also known as "document outline" or "table of contents" &lt;em&gt;in Typst&lt;/em&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://burkeholland.gitbook.io/vs-code-can-do-that/exercise-3-navigation-and-refactoring/folding-sections"&gt;Folding ranges&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;You can collapse code/content blocks and headings.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#show-definitions-of-a-symbol"&gt;Goto definitions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Right-click on a symbol and select "Go to Definition".&lt;/li&gt; 
   &lt;li&gt;Or ctrl+click on a symbol.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#find-all-references-to-a-symbol"&gt;References&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Right-click on a symbol and select "Go to References" or "Find References".&lt;/li&gt; 
   &lt;li&gt;Or ctrl+click on a symbol.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#show-hovers"&gt;Hover tips&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Also known as "hovering tooltip".&lt;/li&gt; 
   &lt;li&gt;Render docs according to &lt;a href="https://github.com/Mc-Zen/tidy"&gt;tidy&lt;/a&gt; style.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.jetbrains.com/help/idea/inlay-hints.html"&gt;Inlay hints&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Inlay hints are special markers that appear in the editor and provide you with additional information about your code, like the names of the parameters that a called method expects.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#show-color-decorators"&gt;Color Provider&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;View all inlay colorful label for color literals in your document.&lt;/li&gt; 
   &lt;li&gt;Change the color literal's value by a color picker or its code presentation.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup"&gt;Code Lens&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Should give contextual buttons along with code. For example, a button for exporting your document to various formats at the start of the document.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#rename-symbols"&gt;Rename symbols and embedded paths&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#help-with-function-and-method-signatures"&gt;Help with function and method signatures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features#show-all-symbol-definitions-in-folder"&gt;Workspace Symbols&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-code-actions"&gt;Code Action&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Increasing/Decreasing heading levels.&lt;/li&gt; 
   &lt;li&gt;Turn equation into "inline", "block" or "multiple-line block" styles.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/raw/master/docs/dev/lsp-extensions.md#on-enter"&gt;experimental/onEnter&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; inside triple-slash comments automatically inserts &lt;code&gt;///&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; in the middle or after a trailing space in &lt;code&gt;//&lt;/code&gt; inserts &lt;code&gt;//&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; inside &lt;code&gt;//!&lt;/code&gt; doc comments automatically inserts &lt;code&gt;//!&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; inside equation markups automatically inserts indents.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Extra features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Compiles to PDF on save (configurable to as-you-type, or other options). Check &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/export.html"&gt;Docs: Exporting Documents&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Also compiles to SVG, PNG, HTML, Markdown, Text, and other formats by commands, vscode tasks, or code lenses.&lt;/li&gt; 
 &lt;li&gt;Provides test, benchmark, coverage collecting on documents and modules. Check &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/testing.html"&gt;Docs: Testing Features&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Provides builtin linting. Check &lt;a href="https://myriad-dreamin.github.io/tinymist/feature/linting.html"&gt;Docs: Linting Features&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Provides a status bar item to show the current document's compilation status and words count.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/tools/editor-tools/"&gt;Editor tools&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;View a list of templates in template gallery. (&lt;code&gt;tinymist.showTemplateGallery&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Click a button in template gallery to initialize a new project with a template. (&lt;code&gt;tinymist.initTemplate&lt;/code&gt; and &lt;code&gt;tinymist.initTemplateInPlace&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;Trace execution in current document (&lt;code&gt;tinymist.profileCurrentFile&lt;/code&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Versioning and Release Cycle&lt;/h2&gt; 
&lt;p&gt;Tinymist's versions follow the &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt; scheme, in format of &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;. Besides, tinymist follows special rules for the version number:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If a version is suffixed with &lt;code&gt;-rcN&lt;/code&gt; (
  &lt;picture&gt;
   &lt;source media="(prefers-color-scheme: dark)" srcset="assets/images/introduction/frame_0.svg" /&gt;
   &lt;img src="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/assets/images/introduction/frame_1.svg?sanitize=true" alt="typst-frame" /&gt;
  &lt;/picture&gt;), e.g. &lt;code&gt;0.11.0-rc1&lt;/code&gt; and &lt;code&gt;0.12.1-rc1&lt;/code&gt;, it means this version is a release candidate. It is used to test publish script and E2E functionalities. These versions will not be published to the marketplace.&lt;/li&gt; 
 &lt;li&gt;If the &lt;code&gt;PATCH&lt;/code&gt; number is odd, e.g. &lt;code&gt;0.11.1&lt;/code&gt; and &lt;code&gt;0.12.3&lt;/code&gt;, it means this version is a nightly release. The nightly release will use both &lt;a href="https://github.com/Myriad-Dreamin/tinymist/tree/main"&gt;tinymist&lt;/a&gt; and &lt;a href="https://github.com/typst/typst/tree/main"&gt;typst&lt;/a&gt; at &lt;strong&gt;main branch&lt;/strong&gt;. They will be published as prerelease version to the marketplace. Note that in nightly releases, we change &lt;code&gt;#sys.version&lt;/code&gt; to the next minor release to help develop documents with nightly features. For example, in tinymist nightly v0.12.1 or v0.12.3, the &lt;code&gt;#sys.version&lt;/code&gt; is changed to &lt;code&gt;version(0, 13, 0)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Otherwise, if the &lt;code&gt;PATCH&lt;/code&gt; number is even, e.g. &lt;code&gt;0.11.0&lt;/code&gt; and &lt;code&gt;0.12.2&lt;/code&gt;, it means this version is a regular release. The regular release will always use the recent stable version of tinymist and typst.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The release cycle is as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If there is a typst version update, a new major or minor version will be released intermediately. This means tinymist will always align the minor version with typst.&lt;/li&gt; 
 &lt;li&gt;If there is at least a bug or feature added this week, a new patch version will be released.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Follow the instructions to enable tinymist in your favorite editor.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/vscode.html"&gt;VS Cod(e,ium)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/neovim.html"&gt;Neovim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/emacs.html"&gt;Emacs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/sublime-text.html"&gt;Sublime Text&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/helix.html"&gt;Helix&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://myriad-dreamin.github.io/tinymist/frontend/zed.html"&gt;Zed&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installing Regular/Nightly Prebuilds from GitHub&lt;/h2&gt; 
&lt;p&gt;Note: if you are not knowing what is a regular/nightly release, please don't follow this section.&lt;/p&gt; 
&lt;p&gt;Besides published releases specific for each editors, you can also download the latest regular/nightly prebuilts from GitHub and install them manually.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Regular prebuilts can be found in &lt;a href="https://github.com/Myriad-Dreamin/tinymist/releases"&gt;GitHub Releases&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Nightly prebuilts can be found in &lt;a href="https://github.com/Myriad-Dreamin/tinymist/actions"&gt;GitHub Actions&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;(Suggested) Use the &lt;a href="https://github.com/hongjr03/tinymist-nightly-installer"&gt;tinymist-nightly-installer&lt;/a&gt; to install the nightly prebuilts automatically. 
    &lt;ul&gt; 
     &lt;li&gt;Unix (Bash): &lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSL https://github.com/hongjr03/tinymist-nightly-installer/releases/latest/download/run.sh | bash
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
     &lt;li&gt;Windows (PowerShell): &lt;pre&gt;&lt;code class="language-bash"&gt;iwr https://github.com/hongjr03/tinymist-nightly-installer/releases/latest/download/run.ps1 -UseBasicParsing | iex
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;The prebuilts for other revisions can also be found manually. For example, if you are seeking a nightly release for the featured &lt;a href="https://github.com/Myriad-Dreamin/tinymist/pull/468"&gt;PR: build: bump version to 0.11.17-rc1&lt;/a&gt;, you could click and go to the &lt;a href="https://github.com/Myriad-Dreamin/tinymist/actions/runs/10120639466"&gt;action page&lt;/a&gt; run for the related commits and download the artifacts.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To install extension file (the file with &lt;code&gt;.vsix&lt;/code&gt; extension) manually, please &lt;kbd&gt;Ctrl+Shift+X&lt;/kbd&gt; in the editor window and drop the downloaded vsix file into the opened extensions view.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://myriad-dreamin.github.io/tinymist/"&gt;Online Documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Packaging&lt;/h2&gt; 
&lt;p&gt;Stable Channel:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/tinymist/versions" target="_blank" rel="noopener noreferrer"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/tinymist.svg?sanitize=true" alt="Packaging status" style="max-width: 100%; height: auto;" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Nightly Channel:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://repology.org/project/tinymist-nightly/versions" target="_blank" rel="noopener noreferrer"&gt;&lt;img src="https://repology.org/badge/vertical-allrepos/tinymist-nightly.svg?sanitize=true" alt="Packaging status" style="max-width: 100%; height: auto;" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;h3&gt;Short Terms&lt;/h3&gt; 
&lt;p&gt;To encourage contributions, we create many &lt;a href="https://github.com/Myriad-Dreamin/tinymist/pulls"&gt;Pull Requests&lt;/a&gt; in draft to navigate short-term plans. They give you a hint of what or where to start in this large repository.&lt;/p&gt; 
&lt;h3&gt;Long Terms&lt;/h3&gt; 
&lt;p&gt;We are planning to implement the following features in typst v0.14.0 or spare time in weekend:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Type checking: complete the type checker.&lt;/li&gt; 
 &lt;li&gt;Periscope renderer: It is disabled since vscode reject to render SVGs containing foreignObjects.&lt;/li&gt; 
 &lt;li&gt;Inlay hint: It is disabled &lt;em&gt;by default&lt;/em&gt; because of performance issues.&lt;/li&gt; 
 &lt;li&gt;Find references of dictionary fields and named function arguments.&lt;/li&gt; 
 &lt;li&gt;Improve symbol view's appearance.&lt;/li&gt; 
 &lt;li&gt;Improve package view. 
  &lt;ul&gt; 
   &lt;li&gt;Navigate to symbols by clicking on the symbol name in the view.&lt;/li&gt; 
   &lt;li&gt;Automatically locate the symbol item in the view when viewing local documentation.&lt;/li&gt; 
   &lt;li&gt;Remember the recently invoked package commands, e.g. "Open Docs of @preview/cetz:0.3.1", "Open directory of @preview/touying:0.5.3".&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Improve label view. 
  &lt;ul&gt; 
   &lt;li&gt;Group labels.&lt;/li&gt; 
   &lt;li&gt;Search labels.&lt;/li&gt; 
   &lt;li&gt;Keep (persist) group preferences.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Improve Typst Preview. 
  &lt;ul&gt; 
   &lt;li&gt;Pin drop-down: Set the file to preview in the drop-down for clients that doesn't support passing arguments to the preview command.&lt;/li&gt; 
   &lt;li&gt;Render in web worker (another thread) to reduce overhead on the electron's main thread.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Spell checking: There is already a branch but no suitable (default) spell checking library is found. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://github.com/crate-ci/typos"&gt;typos&lt;/a&gt; is great for typst. &lt;a href="https://github.com/Automattic/harper"&gt;harper&lt;/a&gt; looks promise.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are interested by any above features, please feel free to send Issues to discuss or PRs to implement to &lt;a href="https://github.com/Myriad-Dreamin/tinymist"&gt;GitHub.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file for contribution guidelines.&lt;/p&gt; 
&lt;h2&gt;Sponsoring&lt;/h2&gt; 
&lt;p&gt;Tinymist thrives on community love and remains proudly independent. While we don't accept direct project funding, we warmly welcome support for our maintainers' personal efforts. Please go to &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/MAINTAINERS.md"&gt;Maintainers Page&lt;/a&gt; and &lt;a href="https://github.com/Myriad-Dreamin/tinymist/graphs/contributors"&gt;Contributors Page&lt;/a&gt; and find their personal pages for more information. It is also welcomed to directly ask questions about sponsoring on the &lt;a href="https://github.com/Myriad-Dreamin/tinymist/issues/new"&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Partially code is inherited from &lt;a href="https://github.com/nvarner/typst-lsp"&gt;typst-lsp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/editors/vscode#symbol-view"&gt;integrating&lt;/a&gt; &lt;strong&gt;offline&lt;/strong&gt; handwritten-stroke recognizer is powered by &lt;a href="https://detypify.quarticcat.com/"&gt;Detypify&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/editors/vscode#preview-command"&gt;integrating&lt;/a&gt; preview service is powered by &lt;a href="https://github.com/Enter-tainer/typst-preview"&gt;typst-preview&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;a href="https://raw.githubusercontent.com/Myriad-Dreamin/tinymist/main/editors/vscode#managing-local-packages"&gt;integrating&lt;/a&gt; local package management functions are adopted from &lt;a href="https://github.com/OrangeX4/vscode-typst-sync"&gt;vscode-typst-sync&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>signalapp/libsignal</title>
      <link>https://github.com/signalapp/libsignal</link>
      <description>&lt;p&gt;Home to the Signal Protocol as well as other cryptographic primitives which make Signal possible.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; 
&lt;p&gt;libsignal contains platform-agnostic APIs used by the official Signal clients and servers, exposed as a Java, Swift, or TypeScript library. The underlying implementations are written in Rust:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;libsignal-protocol: Implements the Signal protocol, including the &lt;a href="https://signal.org/docs/"&gt;Double Ratchet algorithm&lt;/a&gt;. A replacement for &lt;a href="https://github.com/signalapp/libsignal-protocol-java"&gt;libsignal-protocol-java&lt;/a&gt; and &lt;a href="https://github.com/signalapp/libsignal-metadata-java"&gt;libsignal-metadata-java&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;signal-crypto: Cryptographic primitives such as AES-GCM. We use &lt;a href="https://github.com/RustCrypto"&gt;RustCrypto&lt;/a&gt;'s where we can but sometimes have differing needs.&lt;/li&gt; 
 &lt;li&gt;device-transfer: Support logic for Signal's device-to-device transfer feature.&lt;/li&gt; 
 &lt;li&gt;attest: Functionality for remote attestation of &lt;a href="https://www.intel.com/content/www/us/en/architecture-and-technology/software-guard-extensions.html"&gt;SGX enclaves&lt;/a&gt; and server-side &lt;a href="https://en.wikipedia.org/wiki/Hardware_security_module"&gt;HSMs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;zkgroup: Functionality for &lt;a href="https://signal.org/blog/signal-private-group-system/"&gt;zero-knowledge groups&lt;/a&gt; and related features available in Signal.&lt;/li&gt; 
 &lt;li&gt;zkcredential: An abstraction for the sort of zero-knowledge credentials used by zkgroup, based on the paper "&lt;a href="https://eprint.iacr.org/2019/1416.pdf"&gt;The Signal Private Group System&lt;/a&gt;" by Chase, Perrin, and Zaverucha.&lt;/li&gt; 
 &lt;li&gt;poksho: Utilities for implementing zero-knowledge proofs (such as those used by zkgroup); stands for "proof-of-knowledge, stateful-hash-object".&lt;/li&gt; 
 &lt;li&gt;account-keys: Functionality for consistently using &lt;a href="https://signal.org/blog/signal-pins/"&gt;PINs&lt;/a&gt; as passwords in Signal's Secure Value Recovery system, as well as other account-wide key operations.&lt;/li&gt; 
 &lt;li&gt;usernames: Functionality for username generation, hashing, and proofs.&lt;/li&gt; 
 &lt;li&gt;media: Utilities for manipulating media.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This repository is used by the Signal client apps (&lt;a href="https://github.com/signalapp/Signal-Android"&gt;Android&lt;/a&gt;, &lt;a href="https://github.com/signalapp/Signal-iOS"&gt;iOS&lt;/a&gt;, and &lt;a href="https://github.com/signalapp/Signal-Desktop"&gt;Desktop&lt;/a&gt;) as well as server-side. Use outside of Signal is unsupported. In particular, the products of this repository are the Java, Swift, and TypeScript libraries that wrap the underlying Rust implementations. All APIs and implementations are subject to change without notice, as are the JNI, C, and Node add-on "bridge" layers. However, backwards-incompatible changes to the Java, Swift, TypeScript, and non-bridge Rust APIs will be reflected in the version number on a best-effort basis, including increases to the minimum supported tools versions.&lt;/p&gt; 
&lt;h1&gt;Building&lt;/h1&gt; 
&lt;h3&gt;Toolchain Installation&lt;/h3&gt; 
&lt;p&gt;To build anything in this repository you must have &lt;a href="https://rust-lang.org"&gt;Rust&lt;/a&gt; installed, as well as Clang, libclang, &lt;a href="https://cmake.org"&gt;CMake&lt;/a&gt;, Make, protoc, and git.&lt;/p&gt; 
&lt;h4&gt;Linux/Debian&lt;/h4&gt; 
&lt;p&gt;On a Debian-like system, you can get these extra dependencies through &lt;code&gt;apt&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ apt-get install clang libclang-dev cmake make protobuf-compiler git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;p&gt;On macOS, we have a best-effort maintained script to set up the Rust toolchain you can run by:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ bin/mac_setup.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Rust&lt;/h2&gt; 
&lt;h3&gt;First Build and Test&lt;/h3&gt; 
&lt;p&gt;The build currently uses a specific version of the Rust nightly compiler, which will be downloaded automatically by cargo. To build and test the basic protocol libraries:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cargo build
...
$ cargo test
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Additional Rust Tools&lt;/h3&gt; 
&lt;p&gt;The basic tools above should get you set up for most libsignal Rust development.&lt;/p&gt; 
&lt;p&gt;Eventually, you may find that you need some additional Rust tools like &lt;code&gt;cbindgen&lt;/code&gt; to modify the bridges to the client libraries or &lt;code&gt;taplo&lt;/code&gt; for code formatting.&lt;/p&gt; 
&lt;p&gt;You should always install any Rust tools you need that may affect the build from cargo rather than from your system package manager (e.g. &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;brew&lt;/code&gt;). Package managers sometimes contain outdated versions of these tools that can break the build with incompatibility issues (especially cbindgen).&lt;/p&gt; 
&lt;p&gt;To install the main Rust extra dependencies matching the versions we use, you can run the following commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cargo +stable install cbindgen cargo-fuzz
$ cargo +stable install --version "$(cat ../acknowledgments/cargo-about-version)" --locked cargo-about
$ cargo +stable install --version "$(cat ../.taplo-cli-version)" --locked taplo-cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Java/Android&lt;/h2&gt; 
&lt;h3&gt;Toolchain Setup / Configuration&lt;/h3&gt; 
&lt;p&gt;To build for Android you must install several additional packages including a JDK, the Android NDK/SDK, and add the Android targets to the Rust compiler, using&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Our officially supported JDK version for Android builds is JDK 17, so be sure to install e.g. OpenJDK 17, and then point JAVA_HOME to it.&lt;/p&gt; 
&lt;p&gt;You can easily do this on macOS via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;export JAVA_HOME=$(/usr/libexec/java_home -v 17)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Linux, the way you do this varies by distribution. For Debian based distributions like Ubuntu, you can use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sudo update-alternatives --config java
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We also check-in a &lt;code&gt;.tools_version&lt;/code&gt; file for use with runtime version managers.&lt;/p&gt; 
&lt;h3&gt;Building and Testing&lt;/h3&gt; 
&lt;p&gt;To build the Java/Android &lt;code&gt;jar&lt;/code&gt; and &lt;code&gt;aar&lt;/code&gt;, and run the tests:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cd java
$ ./gradlew test
$ ./gradlew build # if you need AAR outputs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can pass &lt;code&gt;-P debugLevelLogs&lt;/code&gt; to Gradle to build without filtering out debug- and verbose-level logs from Rust, and &lt;code&gt;-P jniTypeTagging&lt;/code&gt; to enable additional checks in the Rust JNI bridging code.&lt;/p&gt; 
&lt;p&gt;Alternately, a build system using Docker is available:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cd java
$ make
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When exposing new APIs to Java, you will need to run &lt;code&gt;rust/bridge/jni/bin/gen_java_decl.py&lt;/code&gt; in addition to rebuilding. This requires installing the &lt;code&gt;cbindgen&lt;/code&gt; Rust tool, as detailed above.&lt;/p&gt; 
&lt;h3&gt;Maven Central&lt;/h3&gt; 
&lt;p&gt;Signal publishes Java packages on &lt;a href="https://central.sonatype.org"&gt;Maven Central&lt;/a&gt; for its own use, under the names org.signal:libsignal-server, org.signal:libsignal-client, and org.signal:libsignal-android. libsignal-client and libsignal-server contain native libraries for Debian-flavored x86_64 Linux as well as Windows (x86_64) and macOS (x86_64 and arm64). libsignal-android contains native libraries for armeabi-v7a, arm64-v8a, x86, and x86_64 Android.&lt;/p&gt; 
&lt;p&gt;When building for Android you need &lt;em&gt;both&lt;/em&gt; libsignal-android and libsignal-client, but the Windows and macOS libraries in libsignal-client won't automatically be excluded from your final app. You can explicitly exclude them using &lt;code&gt;packagingOptions&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;android {
  // ...
  packagingOptions {
    resources {
      excludes += setOf("libsignal_jni*.dylib", "signal_jni*.dll")
    }
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can additionally exclude &lt;code&gt;libsignal_jni_testing.so&lt;/code&gt; if you do not plan to use any of the APIs intended for client testing.&lt;/p&gt; 
&lt;h2&gt;Swift&lt;/h2&gt; 
&lt;p&gt;To learn about the Swift build process see &lt;a href="https://raw.githubusercontent.com/signalapp/libsignal/main/swift/"&gt;&lt;code&gt;swift/README.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Node&lt;/h2&gt; 
&lt;p&gt;You'll need Node installed to build. If you have &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt;, you can run &lt;code&gt;nvm use&lt;/code&gt; to select an appropriate version automatically.&lt;/p&gt; 
&lt;p&gt;We use &lt;code&gt;npm&lt;/code&gt; as our package manager, and a Python script to control building the Rust library, accessible as &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ cd node
$ nvm use
$ npm install
$ npm run build
$ npm run tsc
$ npm run test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When testing changes locally, you can use &lt;code&gt;npm run build&lt;/code&gt; to do an incremental rebuild of the Rust library. Alternately, &lt;code&gt;npm run build-with-debug-level-logs&lt;/code&gt; will rebuild without filtering out debug- and verbose-level logs.&lt;/p&gt; 
&lt;p&gt;When exposing new APIs to Node, you will need to run &lt;code&gt;rust/bridge/node/bin/gen_ts_decl.py&lt;/code&gt; in addition to rebuilding.&lt;/p&gt; 
&lt;h3&gt;NPM&lt;/h3&gt; 
&lt;p&gt;Signal publishes the NPM package &lt;code&gt;@signalapp/libsignal-client&lt;/code&gt; for its own use, including native libraries for Windows, macOS, and Debian-flavored Linux. Both x64 and arm64 builds are included for all three platforms, but the arm64 builds for Windows and Linux are considered experimental, since there are no official builds of Signal for those architectures.&lt;/p&gt; 
&lt;h1&gt;Contributions&lt;/h1&gt; 
&lt;p&gt;Signal does accept external contributions to this project. However unless the change is simple and easily understood, for example fixing a bug or portability issue, adding a new test, or improving performance, first open an issue to discuss your intended change as not all changes can be accepted.&lt;/p&gt; 
&lt;p&gt;Contributions that will not be used directly by one of Signal's official client apps may still be considered, but only if they do not pose an undue maintenance burden or conflict with the goals of the project.&lt;/p&gt; 
&lt;p&gt;Signing a &lt;a href="https://signal.org/cla/"&gt;CLA (Contributor License Agreement)&lt;/a&gt; is required for all contributions.&lt;/p&gt; 
&lt;h2&gt;Code Formatting and Acknowledgments&lt;/h2&gt; 
&lt;p&gt;You can run the styler on the entire project by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;just format-all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run more extensive tests as well as linters and clippy by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;just check-pre-commit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When making a PR that adjusts dependencies, you'll need to regenerate our acknowledgments files. See &lt;a href="https://raw.githubusercontent.com/signalapp/libsignal/main/acknowledgments/"&gt;&lt;code&gt;acknowledgments/README.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Legal things&lt;/h1&gt; 
&lt;h2&gt;Cryptography Notice&lt;/h2&gt; 
&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href="http://www.wassenaar.org/"&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright 2020-2024 Signal Messenger, LLC&lt;/p&gt; 
&lt;p&gt;Licensed under the GNU AGPLv3: &lt;a href="https://www.gnu.org/licenses/agpl-3.0.html"&gt;https://www.gnu.org/licenses/agpl-3.0.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>