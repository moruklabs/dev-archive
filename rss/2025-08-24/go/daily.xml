<rss version="2.0">
  <channel>
    <title>GitHub Go Daily Trending</title>
    <description>Daily Trending of Go in GitHub</description>
    <pubDate>Sat, 23 Aug 2025 01:32:58 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>alireza0/s-ui</title>
      <link>https://github.com/alireza0/s-ui</link>
      <description>&lt;p&gt;An advanced Web Panel • Built for SagerNet/Sing-Box&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;S-UI&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;An Advanced Web Panel • Built on SagerNet/Sing-Box&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://img.shields.io/github/v/release/alireza0/s-ui.svg?sanitize=true" alt="" /&gt; &lt;img src="https://img.shields.io/docker/pulls/alireza7/s-ui.svg?sanitize=true" alt="S-UI Docker pull" /&gt; &lt;a href="https://goreportcard.com/report/github.com/alireza0/s-ui"&gt;&lt;img src="https://goreportcard.com/badge/github.com/alireza0/s-ui" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://img.shields.io/github/downloads/alireza0/s-ui/total.svg"&gt;&lt;img src="https://img.shields.io/github/downloads/alireza0/s-ui/total.svg?sanitize=true" alt="Downloads" /&gt;&lt;/a&gt; &lt;a href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;&lt;img src="https://img.shields.io/badge/license-GPL%20V3-blue.svg?longCache=true" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This project is only for personal learning and communication, please do not use it for illegal purposes, please do not use it in a production environment&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;If you think this project is helpful to you, you may wish to give a&lt;/strong&gt;&lt;span&gt;🌟&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/alireza7"&gt;&lt;img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="&amp;quot;Buy Me A Coffee&amp;quot;" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;USDT (TRC20): &lt;code&gt;TYTq73Gj6dJ67qe58JVPD9zpjW2cc9XgVz&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick Overview&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Features&lt;/th&gt; 
   &lt;th align="center"&gt;Enable?&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Protocol&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Language&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Multi-Client/Inbound&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Advanced Traffic Routing Interface&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Client &amp;amp; Traffic &amp;amp; System Status&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Subscription Service (link/json + info)&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Dark/Light Theme&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;API Interface&lt;/td&gt; 
   &lt;td align="center"&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Supported Platforms&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Platform&lt;/th&gt; 
   &lt;th&gt;Architecture&lt;/th&gt; 
   &lt;th&gt;Status&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Linux&lt;/td&gt; 
   &lt;td&gt;amd64, arm64, armv7, armv6, armv5, 386, s390x&lt;/td&gt; 
   &lt;td&gt;✅ Supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Windows&lt;/td&gt; 
   &lt;td&gt;amd64, 386, arm64&lt;/td&gt; 
   &lt;td&gt;✅ Supported&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;macOS&lt;/td&gt; 
   &lt;td&gt;amd64, arm64&lt;/td&gt; 
   &lt;td&gt;🚧 Experimental&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://github.com/alireza0/s-ui-frontend/raw/main/media/main.png" alt="&amp;quot;Main&amp;quot;" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/alireza0/s-ui-frontend/raw/main/screenshots.md"&gt;Other UI Screenshots&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;API Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/alireza0/s-ui/wiki/API-Documentation"&gt;API-Documentation Wiki&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Default Installation Information&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Panel Port: 2095&lt;/li&gt; 
 &lt;li&gt;Panel Path: /app/&lt;/li&gt; 
 &lt;li&gt;Subscription Port: 2096&lt;/li&gt; 
 &lt;li&gt;Subscription Path: /sub/&lt;/li&gt; 
 &lt;li&gt;User/Password: admin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install &amp;amp; Upgrade to Latest Version&lt;/h2&gt; 
&lt;h3&gt;Linux/macOS&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/master/install.sh)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the latest Windows release from &lt;a href="https://github.com/alireza0/s-ui/releases/latest"&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Extract the ZIP file&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;install-windows.bat&lt;/code&gt; as Administrator&lt;/li&gt; 
 &lt;li&gt;Follow the installation wizard&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Install legacy Version&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; To install your desired legacy version, add the version to the end of the installation command. e.g., ver &lt;code&gt;1.0.0&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;VERSION=1.0.0 &amp;amp;&amp;amp; bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/$VERSION/install.sh) $VERSION
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Manual installation&lt;/h2&gt; 
&lt;h3&gt;Linux/macOS&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Get the latest version of S-UI based on your OS/Architecture from GitHub: &lt;a href="https://github.com/alireza0/s-ui/releases/latest"&gt;https://github.com/alireza0/s-ui/releases/latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt; Get the latest version of &lt;code&gt;s-ui.sh&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh"&gt;https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt; Copy &lt;code&gt;s-ui.sh&lt;/code&gt; to /usr/bin/ and run &lt;code&gt;chmod +x /usr/bin/s-ui&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Extract s-ui tar.gz file to a directory of your choice and navigate to the directory where you extracted the tar.gz file.&lt;/li&gt; 
 &lt;li&gt;Copy *.service files to /etc/systemd/system/ and run &lt;code&gt;systemctl daemon-reload&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Enable autostart and start S-UI service using &lt;code&gt;systemctl enable s-ui --now&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Start sing-box service using &lt;code&gt;systemctl enable sing-box --now&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Get the latest Windows version from GitHub: &lt;a href="https://github.com/alireza0/s-ui/releases/latest"&gt;https://github.com/alireza0/s-ui/releases/latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Download the appropriate Windows package (e.g., &lt;code&gt;s-ui-windows-amd64.zip&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Extract the ZIP file to a directory of your choice&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;install-windows.bat&lt;/code&gt; as Administrator&lt;/li&gt; 
 &lt;li&gt;Follow the installation wizard&lt;/li&gt; 
 &lt;li&gt;Access the panel at &lt;a href="http://localhost:2095/app"&gt;http://localhost:2095/app&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Uninstall S-UI&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;sudo -i

systemctl disable s-ui  --now

rm -f /etc/systemd/system/sing-box.service
systemctl daemon-reload

rm -fr /usr/local/s-ui
rm /usr/bin/s-ui
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Install using Docker&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Usage&lt;/h3&gt; 
 &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Install Docker&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;curl -fsSL https://get.docker.com | sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Install S-UI&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Docker compose method&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;mkdir s-ui &amp;amp;&amp;amp; cd s-ui
wget -q https://raw.githubusercontent.com/alireza0/s-ui/master/docker-compose.yml
docker compose up -d
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Use docker&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;mkdir s-ui &amp;amp;&amp;amp; cd s-ui
docker run -itd \
    -p 2095:2095 -p 2096:2096 -p 443:443 -p 80:80 \
    -v $PWD/db/:/usr/local/s-ui/db/ \
    -v $PWD/cert/:/root/cert/ \
    --name s-ui --restart=unless-stopped \
    alireza7/s-ui:latest
&lt;/code&gt;&lt;/pre&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Build your own image&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;git clone https://github.com/alireza0/s-ui
git submodule update --init --recursive
docker build -t s-ui .
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Manual run ( contribution )&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Build and run whole project&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;./runSUI.sh
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;Clone the repository&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# clone repository
git clone https://github.com/alireza0/s-ui
# clone submodules
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;- Frontend&lt;/h3&gt; 
 &lt;p&gt;Visit &lt;a href="https://github.com/alireza0/s-ui-frontend"&gt;s-ui-frontend&lt;/a&gt; for frontend code&lt;/p&gt; 
 &lt;h3&gt;- Backend&lt;/h3&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Please build frontend once before!&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;To build backend:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;# remove old frontend compiled files
rm -fr web/html/*
# apply new frontend compiled files
cp -R frontend/dist/ web/html/
# build
go build -o sui main.go
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To run backend (from root folder of repository):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-shell"&gt;./sui
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Languages&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;English&lt;/li&gt; 
 &lt;li&gt;Farsi&lt;/li&gt; 
 &lt;li&gt;Vietnamese&lt;/li&gt; 
 &lt;li&gt;Chinese (Simplified)&lt;/li&gt; 
 &lt;li&gt;Chinese (Traditional)&lt;/li&gt; 
 &lt;li&gt;Russian&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supported protocols: 
  &lt;ul&gt; 
   &lt;li&gt;General: Mixed, SOCKS, HTTP, HTTPS, Direct, Redirect, TProxy&lt;/li&gt; 
   &lt;li&gt;V2Ray based: VLESS, VMess, Trojan, Shadowsocks&lt;/li&gt; 
   &lt;li&gt;Other protocols: ShadowTLS, Hysteria, Hysteria2, Naive, TUIC&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Supports XTLS protocols&lt;/li&gt; 
 &lt;li&gt;An advanced interface for routing traffic, incorporating PROXY Protocol, External, and Transparent Proxy, SSL Certificate, and Port&lt;/li&gt; 
 &lt;li&gt;An advanced interface for inbound and outbound configuration&lt;/li&gt; 
 &lt;li&gt;Clients’ traffic cap and expiration date&lt;/li&gt; 
 &lt;li&gt;Displays online clients, inbounds and outbounds with traffic statistics, and system status monitoring&lt;/li&gt; 
 &lt;li&gt;Subscription service with ability to add external links and subscription&lt;/li&gt; 
 &lt;li&gt;HTTPS for secure access to the web panel and subscription service (self-provided domain + SSL certificate)&lt;/li&gt; 
 &lt;li&gt;Dark/Light theme&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Environment Variables&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Usage&lt;/h3&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Variable&lt;/th&gt; 
    &lt;th align="center"&gt;Type&lt;/th&gt; 
    &lt;th align="left"&gt;Default&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_LOG_LEVEL&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;"debug"&lt;/code&gt; | &lt;code&gt;"info"&lt;/code&gt; | &lt;code&gt;"warn"&lt;/code&gt; | &lt;code&gt;"error"&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"info"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_DEBUG&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_BIN_FOLDER&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"bin"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SUI_DB_FOLDER&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;&lt;code&gt;"db"&lt;/code&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SINGBOX_API&lt;/td&gt; 
    &lt;td align="center"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; 
    &lt;td align="left"&gt;-&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/details&gt; 
&lt;h2&gt;SSL Certificate&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click for details&lt;/summary&gt; 
 &lt;h3&gt;Certbot&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;snap install core; snap refresh core
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot

certbot certonly --standalone --register-unsafely-without-email --non-interactive --agree-tos -d &amp;lt;Your Domain Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Stargazers over Time&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://starchart.cc/alireza0/s-ui"&gt;&lt;img src="https://starchart.cc/alireza0/s-ui.svg?sanitize=true" alt="Stargazers over time" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>etcd-io/etcd</title>
      <link>https://github.com/etcd-io/etcd</link>
      <description>&lt;p&gt;Distributed reliable key-value store for the most critical data of a distributed system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;etcd&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/etcd-io/etcd"&gt;&lt;img src="https://goreportcard.com/badge/github.com/etcd-io/etcd?style=flat-square" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://app.codecov.io/gh/etcd-io/etcd/tree/main"&gt;&lt;img src="https://codecov.io/gh/etcd-io/etcd/branch/main/graph/badge.svg?sanitize=true" alt="Coverage" /&gt;&lt;/a&gt; &lt;a href="https://github.com/etcd-io/etcd/actions/workflows/tests.yaml"&gt;&lt;img src="https://github.com/etcd-io/etcd/actions/workflows/tests.yaml/badge.svg?sanitize=true" alt="Tests" /&gt;&lt;/a&gt; &lt;a href="https://github.com/etcd-io/etcd/actions/workflows/codeql-analysis.yml"&gt;&lt;img src="https://github.com/etcd-io/etcd/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true" alt="codeql-analysis" /&gt;&lt;/a&gt; &lt;a href="https://etcd.io/docs"&gt;&lt;img src="https://img.shields.io/badge/docs-latest-green.svg?sanitize=true" alt="Docs" /&gt;&lt;/a&gt; &lt;a href="https://godocs.io/go.etcd.io/etcd/v3"&gt;&lt;img src="http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square" alt="Godoc" /&gt;&lt;/a&gt; &lt;a href="https://github.com/etcd-io/etcd/releases"&gt;&lt;img src="https://img.shields.io/github/release/etcd-io/etcd/all.svg?style=flat-square" alt="Releases" /&gt;&lt;/a&gt; &lt;a href="https://github.com/etcd-io/etcd/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/etcd-io/etcd.svg?style=flat-square" alt="LICENSE" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/etcd-io/etcd"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/etcd-io/etcd/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;main&lt;/code&gt; branch may be in an &lt;em&gt;unstable or even broken state&lt;/em&gt; during development. For stable versions, see &lt;a href="https://github.com/etcd-io/etcd/releases"&gt;releases&lt;/a&gt;.&lt;/p&gt; 
&lt;picture&gt; 
 &lt;source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/cncf/artwork/9870640f123303a355611065195c43ac3f27aa19/projects/etcd/horizontal/white/etcd-horizontal-white.png" /&gt; 
 &lt;source media="(prefers-color-scheme: light)" srcset="logos/etcd-horizontal-color.svg" /&gt; 
 &lt;img alt="etcd logo" src="https://raw.githubusercontent.com/etcd-io/etcd/main/logos/etcd-horizontal-color.svg?sanitize=true" width="269" /&gt; 
&lt;/picture&gt; 
&lt;p&gt;etcd is a distributed reliable key-value store for the most critical data of a distributed system, with a focus on being:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Simple&lt;/em&gt;: well-defined, user-facing API (gRPC)&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Secure&lt;/em&gt;: automatic TLS with optional client cert authentication&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Fast&lt;/em&gt;: benchmarked 10,000 writes/sec&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Reliable&lt;/em&gt;: properly distributed using Raft&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;etcd is written in Go and uses the &lt;a href="https://raft.github.io/"&gt;Raft&lt;/a&gt; consensus algorithm to manage a highly-available replicated log.&lt;/p&gt; 
&lt;p&gt;etcd is used &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/ADOPTERS.md"&gt;in production by many companies&lt;/a&gt;, and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as &lt;a href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://github.com/coreos/locksmith"&gt;locksmith&lt;/a&gt;, &lt;a href="https://github.com/vulcand/vulcand"&gt;vulcand&lt;/a&gt;, &lt;a href="https://github.com/youtube/doorman"&gt;Doorman&lt;/a&gt;, and many others. Reliability is further ensured by rigorous &lt;a href="https://github.com/etcd-io/etcd/tree/main/tests/robustness"&gt;&lt;strong&gt;robustness testing&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/etcd-io/etcd/tree/main/etcdctl"&gt;etcdctl&lt;/a&gt; for a simple command line client.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/etcd-io/etcd/main/logos/etcd-xkcd-2347.png" alt="etcd reliability is important" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;sub&gt;Original image credited to xkcd.com/2347, alterations by Josh Berkus.&lt;/sub&gt;&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;The most common API documentation you'll need can be found here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://godocs.io/go.etcd.io/etcd/api/v3"&gt;go.etcd.io/etcd/api/v3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godocs.io/go.etcd.io/etcd/client/pkg/v3"&gt;go.etcd.io/etcd/client/pkg/v3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godocs.io/go.etcd.io/etcd/client/v3"&gt;go.etcd.io/etcd/client/v3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godocs.io/go.etcd.io/etcd/etcdctl/v3"&gt;go.etcd.io/etcd/etcdctl/v3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godocs.io/go.etcd.io/etcd/pkg/v3"&gt;go.etcd.io/etcd/pkg/v3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godocs.io/go.etcd.io/etcd/raft/v3"&gt;go.etcd.io/etcd/raft/v3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://godocs.io/go.etcd.io/etcd/server/v3"&gt;go.etcd.io/etcd/server/v3&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/OWNERS"&gt;Maintainers&lt;/a&gt; strive to shape an inclusive open source project culture where users are heard and contributors feel respected and empowered. Maintainers aim to build productive relationships across different companies and disciplines. Read more about &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/Documentation/contributor-guide/community-membership.md#maintainers"&gt;Maintainers role and responsibilities&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;h3&gt;Getting etcd&lt;/h3&gt; 
&lt;p&gt;The easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, and Docker on the &lt;a href="https://github.com/etcd-io/etcd/releases"&gt;release page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For more installation guides, please check out &lt;a href="http://play.etcd.io"&gt;play.etcd.io&lt;/a&gt; and &lt;a href="https://etcd.io/docs/latest/op-guide"&gt;operating etcd&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Running etcd&lt;/h3&gt; 
&lt;p&gt;First start a single-member cluster of etcd.&lt;/p&gt; 
&lt;p&gt;If etcd is installed using the &lt;a href="https://github.com/etcd-io/etcd/releases"&gt;pre-built release binaries&lt;/a&gt;, run it from the installation location as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;/tmp/etcd-download-test/etcd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The etcd command can be simply run as such if it is moved to the system path as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;mv /tmp/etcd-download-test/etcd /usr/local/bin/
etcd
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will bring up etcd listening on port 2379 for client communication and on port 2380 for server-to-server communication.&lt;/p&gt; 
&lt;p&gt;Next, let's set a single key, and then retrieve it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;etcdctl put mykey "this is awesome"
etcdctl get mykey
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;etcd is now running and serving client requests. For more, please check out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://play.etcd.io"&gt;Interactive etcd playground&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://etcd.io/docs/latest/demo"&gt;Animated quick demo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;etcd TCP ports&lt;/h3&gt; 
&lt;p&gt;The &lt;a href="http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt"&gt;official etcd ports&lt;/a&gt; are 2379 for client requests, and 2380 for peer communication.&lt;/p&gt; 
&lt;h3&gt;Running a local etcd cluster&lt;/h3&gt; 
&lt;p&gt;First install &lt;a href="https://github.com/mattn/goreman"&gt;goreman&lt;/a&gt;, which manages Procfile-based applications.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/Procfile"&gt;Procfile script&lt;/a&gt; will set up a local example cluster. Start it with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;goreman start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will bring up 3 etcd members &lt;code&gt;infra1&lt;/code&gt;, &lt;code&gt;infra2&lt;/code&gt; and &lt;code&gt;infra3&lt;/code&gt; and optionally etcd &lt;code&gt;grpc-proxy&lt;/code&gt;, which runs locally and composes a cluster.&lt;/p&gt; 
&lt;p&gt;Every cluster member and proxy accepts key value reads and key value writes.&lt;/p&gt; 
&lt;p&gt;Follow the comments in &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/Procfile"&gt;Procfile script&lt;/a&gt; to add a learner node to the cluster.&lt;/p&gt; 
&lt;h3&gt;Install etcd client v3&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get go.etcd.io/etcd/client/v3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Next steps&lt;/h3&gt; 
&lt;p&gt;Now it's time to dig into the full etcd API and other guides.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read the full &lt;a href="https://etcd.io/docs/latest"&gt;documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Review etcd &lt;a href="https://etcd.io/docs/latest/faq"&gt;frequently asked questions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Explore the full gRPC &lt;a href="https://etcd.io/docs/latest/learning/api"&gt;API&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Set up a &lt;a href="https://etcd.io/docs/latest/op-guide/clustering"&gt;multi-machine cluster&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Learn the &lt;a href="https://etcd.io/docs/latest/op-guide/configuration"&gt;config format, env variables and flags&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Find &lt;a href="https://etcd.io/docs/latest/integrations"&gt;language bindings and tools&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Use TLS to &lt;a href="https://etcd.io/docs/latest/op-guide/security"&gt;secure an etcd cluster&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://etcd.io/docs/latest/tuning"&gt;Tune etcd&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Email: &lt;a href="https://groups.google.com/g/etcd-dev"&gt;etcd-dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Slack: &lt;a href="https://kubernetes.slack.com/archives/C3HD8ARJ5"&gt;#sig-etcd&lt;/a&gt; channel on Kubernetes (&lt;a href="http://slack.kubernetes.io/"&gt;get an invite&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/#community-meetings"&gt;Community meetings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Community meetings&lt;/h3&gt; 
&lt;p&gt;etcd contributors and maintainers meet every week at &lt;code&gt;11:00&lt;/code&gt; AM (USA Pacific) on Thursday and meetings alternate between community meetings and issue triage meetings. Meeting agendas are recorded in a &lt;a href="https://docs.google.com/document/d/16XEGyPBisZvmmoIHSZzv__LoyOeluC5a4x353CX0SIM/edit"&gt;shared Google doc&lt;/a&gt; and everyone is welcome to suggest additional topics or other agendas.&lt;/p&gt; 
&lt;p&gt;Issue triage meetings are aimed at getting through our backlog of PRs and Issues. Triage meetings are open to any contributor; you don't have to be a reviewer or approver to help out! They can also be a good way to get started contributing.&lt;/p&gt; 
&lt;p&gt;The meeting lead role is rotated for each meeting between etcd maintainers or sig-etcd leads and is recorded in a &lt;a href="https://docs.google.com/spreadsheets/d/1jodHIO7Dk2VWTs1IRnfMFaRktS9IH8XRyifOnPdSY8I/edit"&gt;shared Google sheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Meeting recordings are uploaded to the official etcd &lt;a href="https://www.youtube.com/@etcdio"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Get calendar invitations by joining &lt;a href="https://groups.google.com/g/etcd-dev"&gt;etcd-dev&lt;/a&gt; mailing group.&lt;/p&gt; 
&lt;p&gt;Join the CNCF-funded Zoom channel: &lt;a href="https://zoom.us/my/cncfetcdproject"&gt;zoom.us/my/cncfetcdproject&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; for details on setting up your development environment, submitting patches and the contribution workflow.&lt;/p&gt; 
&lt;p&gt;Please refer to &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/Documentation/contributor-guide/community-membership.md#member"&gt;community-membership.md&lt;/a&gt; for information on becoming an etcd project member. We welcome and look forward to your contributions to the project!&lt;/p&gt; 
&lt;p&gt;Please also refer to &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/Documentation/contributor-guide/roadmap.md"&gt;roadmap&lt;/a&gt; to get more details on the priorities for the next few major or minor releases.&lt;/p&gt; 
&lt;h2&gt;Reporting bugs&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/etcd-io/etcd/raw/main/Documentation/contributor-guide/reporting_bugs.md"&gt;reporting bugs&lt;/a&gt; for details about reporting any issues. Before opening an issue please check it is not covered in our &lt;a href="https://etcd.io/docs/latest/faq"&gt;frequently asked questions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Reporting a security vulnerability&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/security/README.md"&gt;security disclosure and release process&lt;/a&gt; for details on how to report a security vulnerability and how the etcd team manages it.&lt;/p&gt; 
&lt;h2&gt;Issue and PR management&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/etcd-io/etcd/raw/main/Documentation/contributor-guide/triage_issues.md"&gt;issue triage guidelines&lt;/a&gt; for details on how issues are managed.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://github.com/etcd-io/etcd/raw/main/Documentation/contributor-guide/triage_prs.md"&gt;PR management&lt;/a&gt; for guidelines on how pull requests are managed.&lt;/p&gt; 
&lt;h2&gt;etcd Emeritus Maintainers&lt;/h2&gt; 
&lt;p&gt;etcd &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/OWNERS"&gt;emeritus maintainers&lt;/a&gt; dedicated a part of their career to etcd and reviewed code, triaged bugs and pushed the project forward over a substantial period of time. Their contribution is greatly appreciated.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;etcd is under the Apache 2.0 license. See the &lt;a href="https://raw.githubusercontent.com/etcd-io/etcd/main/LICENSE"&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>aquasecurity/trivy</title>
      <link>https://github.com/aquasecurity/trivy</link>
      <description>&lt;p&gt;Find vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/logo.png" width="200" /&gt; 
 &lt;p&gt;&lt;a href="https://github.com/aquasecurity/trivy/releases"&gt;&lt;img src="https://img.shields.io/github/release/aquasecurity/trivy.svg?logo=github" alt="GitHub Release" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/actions/workflows/test.yaml"&gt;&lt;img src="https://github.com/aquasecurity/trivy/actions/workflows/test.yaml/badge.svg?sanitize=true" alt="Test" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/aquasecurity/trivy"&gt;&lt;img src="https://goreportcard.com/badge/github.com/aquasecurity/trivy" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" alt="License: Apache-2.0" /&gt;&lt;/a&gt; &lt;a href="https://github.com/aquasecurity/trivy/releases"&gt;&lt;img src="https://img.shields.io/github/downloads/aquasecurity/trivy/total?logo=github" alt="GitHub Downloads" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/docker/pulls/aquasec/trivy?logo=docker&amp;amp;label=docker%20pulls%20%2F%20trivy" alt="Docker Pulls" /&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href="https://trivy.dev/latest/docs/"&gt;📖 Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Trivy (&lt;a href="https://raw.githubusercontent.com/aquasecurity/trivy/main/#how-to-pronounce-the-name-trivy"&gt;pronunciation&lt;/a&gt;) is a comprehensive and versatile security scanner. Trivy has &lt;em&gt;scanners&lt;/em&gt; that look for security issues, and &lt;em&gt;targets&lt;/em&gt; where it can find those issues.&lt;/p&gt; 
&lt;p&gt;Targets (what Trivy can scan):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Container Image&lt;/li&gt; 
 &lt;li&gt;Filesystem&lt;/li&gt; 
 &lt;li&gt;Git Repository (remote)&lt;/li&gt; 
 &lt;li&gt;Virtual Machine Image&lt;/li&gt; 
 &lt;li&gt;Kubernetes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Scanners (what Trivy can find there):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;OS packages and software dependencies in use (SBOM)&lt;/li&gt; 
 &lt;li&gt;Known vulnerabilities (CVEs)&lt;/li&gt; 
 &lt;li&gt;IaC issues and misconfigurations&lt;/li&gt; 
 &lt;li&gt;Sensitive information and secrets&lt;/li&gt; 
 &lt;li&gt;Software licenses&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Trivy supports most popular programming languages, operating systems, and platforms. For a complete list, see the &lt;a href="https://trivy.dev/latest/docs/coverage/"&gt;Scanning Coverage&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;To learn more, go to the &lt;a href="https://trivy.dev"&gt;Trivy homepage&lt;/a&gt; for feature highlights, or to the &lt;a href="https://trivy.dev/latest/docs/"&gt;Documentation site&lt;/a&gt; for detailed information.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;h3&gt;Get Trivy&lt;/h3&gt; 
&lt;p&gt;Trivy is available in most common distribution channels. The full list of installation options is available in the &lt;a href="https://trivy.dev/latest/getting-started/installation/"&gt;Installation&lt;/a&gt; page. Here are a few popular examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;brew install trivy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;docker run aquasec/trivy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Download binary from &lt;a href="https://github.com/aquasecurity/trivy/releases/latest/"&gt;https://github.com/aquasecurity/trivy/releases/latest/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://trivy.dev/latest/getting-started/installation/"&gt;Installation&lt;/a&gt; for more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Trivy is integrated with many popular platforms and applications. The complete list of integrations is available in the &lt;a href="https://trivy.dev/latest/ecosystem/"&gt;Ecosystem&lt;/a&gt; page. Here are a few popular examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-action"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-operator"&gt;Kubernetes operator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy-vscode-extension"&gt;VS Code plugin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;See &lt;a href="https://trivy.dev/latest/ecosystem/"&gt;Ecosystem&lt;/a&gt; for more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Canary builds&lt;/h3&gt; 
&lt;p&gt;There are canary builds (&lt;a href="https://hub.docker.com/r/aquasec/trivy/tags?page=1&amp;amp;name=canary"&gt;Docker Hub&lt;/a&gt;, &lt;a href="https://github.com/aquasecurity/trivy/pkgs/container/trivy/75776514?tag=canary"&gt;GitHub&lt;/a&gt;, &lt;a href="https://gallery.ecr.aws/aquasecurity/trivy#canary"&gt;ECR&lt;/a&gt; images and &lt;a href="https://github.com/aquasecurity/trivy/actions/workflows/canary.yaml"&gt;binaries&lt;/a&gt;) as generated every push to main branch.&lt;/p&gt; 
&lt;p&gt;Please be aware: canary builds might have critical bugs, it's not recommended for use in production.&lt;/p&gt; 
&lt;h3&gt;General usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy &amp;lt;target&amp;gt; [--scanners &amp;lt;scanner1,scanner2&amp;gt;] &amp;lt;subject&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy image python:3.4-alpine
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/1161307/171013513-95f18734-233d-45d3-aaf5-d6aec687db0e.mov"&gt;https://user-images.githubusercontent.com/1161307/171013513-95f18734-233d-45d3-aaf5-d6aec687db0e.mov&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy fs --scanners vuln,secret,misconfig myproject/
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/1161307/171013917-b1f37810-f434-465c-b01a-22de036bd9b3.mov"&gt;https://user-images.githubusercontent.com/1161307/171013917-b1f37810-f434-465c-b01a-22de036bd9b3.mov&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;trivy k8s --report summary cluster
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Result&lt;/summary&gt; 
 &lt;p&gt;&lt;img src="https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/trivy-k8s.png" alt="k8s summary" /&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How to pronounce the name "Trivy"?&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;tri&lt;/code&gt; is pronounced like &lt;strong&gt;tri&lt;/strong&gt;gger, &lt;code&gt;vy&lt;/code&gt; is pronounced like en&lt;strong&gt;vy&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Want more? Check out Aqua&lt;/h2&gt; 
&lt;p&gt;If you liked Trivy, you will love Aqua which builds on top of Trivy to provide even more enhanced capabilities for a complete security management offering.&lt;br /&gt; You can find a high level comparison table specific to Trivy users &lt;a href="https://trivy.dev/latest/commercial/compare/"&gt;here&lt;/a&gt;. In addition check out the &lt;a href="https://aquasec.com"&gt;https://aquasec.com&lt;/a&gt; website for more information about our products and services. If you'd like to contact Aqua or request a demo, please use this form: &lt;a href="https://www.aquasec.com/demo"&gt;https://www.aquasec.com/demo&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Trivy is an &lt;a href="https://aquasec.com"&gt;Aqua Security&lt;/a&gt; open source project.&lt;br /&gt; Learn about our open source work and portfolio &lt;a href="https://www.aquasec.com/products/open-source-projects/"&gt;here&lt;/a&gt;.&lt;br /&gt; Contact us about any matter by opening a GitHub Discussion &lt;a href="https://github.com/aquasecurity/trivy/discussions"&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please ensure to abide by our &lt;a href="https://github.com/aquasecurity/community/raw/main/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; during all interactions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes-sigs/kubebuilder</title>
      <link>https://github.com/kubernetes-sigs/kubebuilder</link>
      <description>&lt;p&gt;Kubebuilder - SDK for building Kubernetes APIs using CRDs&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;⚠️ &lt;strong&gt;IMPORTANT NOTICE:&lt;/strong&gt; Images under &lt;code&gt;gcr.io/kubebuilder/&lt;/code&gt; Will Be Unavailable Soon&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;If your project uses &lt;code&gt;gcr.io/kubebuilder/kube-rbac-proxy&lt;/code&gt;&lt;/strong&gt; it will be affected. Your project may fail to work if the image cannot be pulled. &lt;strong&gt;You must move as soon as possible&lt;/strong&gt;, sometime from early 2025, the GCR will go away.&lt;/p&gt; 
 &lt;p&gt;The usage of the project &lt;a href="https://github.com/brancz/kube-rbac-proxy"&gt;kube-rbac-proxy&lt;/a&gt; was discontinued from Kubebuilder and replaced for similar protection using &lt;code&gt;authn/authz&lt;/code&gt; via Controller-Runtime's feature &lt;a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/metrics/filters#WithAuthenticationAndAuthorization"&gt;WithAuthenticationAndAuthorization&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;For more information and guidance see the discussion &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/discussions/3907"&gt;https://github.com/kubernetes-sigs/kubebuilder/discussions/3907&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href="https://github.com/kubernetes-sigs/kubebuilder/actions/workflows/lint.yml"&gt;&lt;img src="https://github.com/kubernetes-sigs/kubebuilder/actions/workflows/lint.yml/badge.svg?sanitize=true" alt="Lint" /&gt;&lt;/a&gt; &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/actions/workflows/unit-tests.yml"&gt;&lt;img src="https://github.com/kubernetes-sigs/kubebuilder/actions/workflows/unit-tests.yml/badge.svg?sanitize=true" alt="Unit tests" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/sigs.k8s.io/kubebuilder"&gt;&lt;img src="https://goreportcard.com/badge/sigs.k8s.io/kubebuilder" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/kubernetes-sigs/kubebuilder?branch=master"&gt;&lt;img src="https://coveralls.io/repos/github/kubernetes-sigs/kubebuilder/badge.svg?branch=master" alt="Coverage Status" /&gt;&lt;/a&gt; &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/releases"&gt;&lt;img src="https://badgen.net/github/release/kubernetes-sigs/kubebuilder" alt="Latest release" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Kubebuilder&lt;/h2&gt; 
&lt;p&gt;Kubebuilder is a framework for building Kubernetes APIs using &lt;a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions"&gt;custom resource definitions (CRDs)&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Similar to web development frameworks such as &lt;em&gt;Ruby on Rails&lt;/em&gt; and &lt;em&gt;SpringBoot&lt;/em&gt;, Kubebuilder increases velocity and reduces the complexity managed by developers for rapidly building and publishing Kubernetes APIs in Go. It builds on top of the canonical techniques used to build the core Kubernetes APIs to provide simple abstractions that reduce boilerplate and toil.&lt;/p&gt; 
&lt;p&gt;Kubebuilder does &lt;strong&gt;not&lt;/strong&gt; exist as an example to &lt;em&gt;copy-paste&lt;/em&gt;, but instead provides powerful libraries and tools to simplify building and publishing Kubernetes APIs from scratch. It provides a plugin architecture allowing users to take advantage of optional helpers and features. To learn more about this see the &lt;a href="https://book.kubebuilder.io/plugins/plugins.html"&gt;Plugin section&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Kubebuilder is developed on top of the &lt;a href="https://github.com/kubernetes-sigs/controller-runtime"&gt;controller-runtime&lt;/a&gt; and &lt;a href="https://github.com/kubernetes-sigs/controller-tools"&gt;controller-tools&lt;/a&gt; libraries.&lt;/p&gt; 
&lt;h3&gt;Kubebuilder is also a library&lt;/h3&gt; 
&lt;p&gt;Kubebuilder is extensible and can be used as a library in other projects. &lt;a href="https://github.com/operator-framework/operator-sdk"&gt;Operator-SDK&lt;/a&gt; is a good example of a project that uses Kubebuilder as a library. &lt;a href="https://github.com/operator-framework/operator-sdk"&gt;Operator-SDK&lt;/a&gt; uses the plugin feature to include non-Go operators &lt;em&gt;e.g. operator-sdk's Ansible and Helm-based language Operators&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;To learn more see &lt;a href="https://book.kubebuilder.io/plugins/extending"&gt;how to create your own plugins&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;It is strongly recommended that you use a released version. Release binaries are available on the &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/releases"&gt;releases&lt;/a&gt; page. Follow the &lt;a href="https://book.kubebuilder.io/quick-start.html#installation"&gt;instructions&lt;/a&gt; to install Kubebuilder.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://book.kubebuilder.io/quick-start.html"&gt;Getting Started&lt;/a&gt; documentation.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/kubernetes-sigs/kubebuilder/master/docs/gif/kb-demo.v3.11.1.svg?sanitize=true" alt="Quick Start" /&gt;&lt;/p&gt; 
&lt;p&gt;Also, ensure that you check out the &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kubebuilder/master/docs/book/src/plugins/available/deploy-image-plugin-v1-alpha.md"&gt;Deploy Image&lt;/a&gt; Plugin. This plugin allows users to scaffold API/Controllers to deploy and manage an Operand (image) on the cluster following the guidelines and best practices. It abstracts the complexities of achieving this goal while allowing users to customize the generated code.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Check out the Kubebuilder &lt;a href="https://book.kubebuilder.io"&gt;book&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Kubebuilder Book: &lt;a href="https://book.kubebuilder.io"&gt;book.kubebuilder.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GitHub Repo: &lt;a href="https://github.com/kubernetes-sigs/kubebuilder"&gt;kubernetes-sigs/kubebuilder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Slack channel: &lt;a href="https://kubernetes.slack.com/messages/#kubebuilder"&gt;#kubebuilder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google Group: &lt;a href="https://groups.google.com/forum/#!forum/kubebuilder"&gt;kubebuilder@googlegroups.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Design Documents: &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kubebuilder/master/designs/"&gt;designs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Plugin: &lt;a href="https://book.kubebuilder.io/plugins/plugins.html"&gt;plugins&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;Building Kubernetes tools and APIs involves making a lot of decisions and writing a lot of boilerplate.&lt;/p&gt; 
&lt;p&gt;To facilitate easily building Kubernetes APIs and tools using the canonical approach, this framework provides a collection of Kubernetes development tools to minimize toil.&lt;/p&gt; 
&lt;p&gt;Kubebuilder attempts to facilitate the following developer workflow for building APIs&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a new project directory&lt;/li&gt; 
 &lt;li&gt;Create one or more resource APIs as CRDs and then add fields to the resources&lt;/li&gt; 
 &lt;li&gt;Implement reconcile loops in controllers and watch additional resources&lt;/li&gt; 
 &lt;li&gt;Test by running against a cluster (self-installs CRDs and starts controllers automatically)&lt;/li&gt; 
 &lt;li&gt;Update bootstrapped integration tests to test new fields and business logic&lt;/li&gt; 
 &lt;li&gt;Build and publish a container from the provided Dockerfile&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Scope&lt;/h2&gt; 
&lt;p&gt;Building APIs using CRDs, Controllers, and Admission Webhooks.&lt;/p&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kubebuilder/master/DESIGN.md"&gt;DESIGN.md&lt;/a&gt; for the guiding principles of the various Kubebuilder projects.&lt;/p&gt; 
&lt;p&gt;TL;DR:&lt;/p&gt; 
&lt;p&gt;Provide clean library abstractions with clear and well-exampled go docs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prefer using go &lt;em&gt;interfaces&lt;/em&gt; and &lt;em&gt;libraries&lt;/em&gt; over-relying on &lt;em&gt;code generation&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Prefer using &lt;em&gt;code generation&lt;/em&gt; over &lt;em&gt;1 time init&lt;/em&gt; of stubs&lt;/li&gt; 
 &lt;li&gt;Prefer &lt;em&gt;1 time init&lt;/em&gt; of stubs over forked and modified boilerplate&lt;/li&gt; 
 &lt;li&gt;Never fork and modify boilerplate&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Techniques&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Provide higher-level libraries on top of low-level client libraries 
  &lt;ul&gt; 
   &lt;li&gt;Protect developers from breaking changes in low-level libraries&lt;/li&gt; 
   &lt;li&gt;Start minimal and provide progressive discovery of functionality&lt;/li&gt; 
   &lt;li&gt;Provide sane defaults and allow users to override when they exist&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Provide code generators to maintain common boilerplate that can't be addressed by interfaces 
  &lt;ul&gt; 
   &lt;li&gt;Driven off of &lt;code&gt;// +&lt;/code&gt; comments&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Provide bootstrapping commands to initialize new packages&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Versioning and Releasing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kubebuilder/master/VERSIONING.md"&gt;VERSIONING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;h3&gt;Bugs and Feature Requests:&lt;/h3&gt; &lt;p&gt;If you have what looks like a bug, or you would like to make a feature request, please use the &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/issues"&gt;Github issue tracking system.&lt;/a&gt; Before you file an issue, please search existing issues to see if your issue is already covered.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Slack&lt;/h3&gt; &lt;p&gt;For real-time discussion, you can join the &lt;a href="https://slack.k8s.io/#kubebuilder"&gt;#kubebuilder&lt;/a&gt; slack channel. Slack requires registration, but the Kubernetes team is an open invitation to anyone to register here. Feel free to come and ask any questions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributions are greatly appreciated. The maintainers actively manage the issues list and try to highlight issues suitable for newcomers. The project follows the typical GitHub pull request model. See &lt;a href="https://raw.githubusercontent.com/kubernetes-sigs/kubebuilder/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; for more details. Before starting any work, please either comment on an existing issue or file a new one.&lt;/p&gt; 
&lt;h2&gt;Operating Systems Supported&lt;/h2&gt; 
&lt;p&gt;Currently, Kubebuilder officially supports macOS and Linux platforms. If you are using a Windows OS, you may encounter issues. Contributions towards supporting Windows are welcome.&lt;/p&gt; 
&lt;h2&gt;Versions Compatibility and Supportability&lt;/h2&gt; 
&lt;p&gt;Projects created by Kubebuilder contain a &lt;code&gt;Makefile&lt;/code&gt; that installs tools at versions defined during project creation. The main tools included are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubernetes-sigs/kustomize"&gt;kustomize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubernetes-sigs/controller-tools"&gt;controller-gen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/kubernetes-sigs/controller-runtime/tree/main/tools/setup-envtest"&gt;setup-envtest&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additionally, these projects include a &lt;code&gt;go.mod&lt;/code&gt; file specifying dependency versions. Kubebuilder relies on &lt;a href="https://github.com/kubernetes-sigs/controller-runtime"&gt;controller-runtime&lt;/a&gt; and its Go and Kubernetes dependencies. Therefore, the versions defined in the &lt;code&gt;Makefile&lt;/code&gt; and &lt;code&gt;go.mod&lt;/code&gt; files are the ones that have been tested, supported, and recommended.&lt;/p&gt; 
&lt;p&gt;Each minor version of Kubebuilder is tested with a specific minor version of the client-go. While a Kubebuilder minor version &lt;em&gt;may&lt;/em&gt; be compatible with other client-go minor versions, or other tools this compatibility is not guaranteed, supported, or tested.&lt;/p&gt; 
&lt;p&gt;The minimum Go version required by Kubebuilder is determined by the highest minimum Go version required by its dependencies. This is usually aligned with the minimum Go version required by the corresponding &lt;code&gt;k8s.io/*&lt;/code&gt; dependencies.&lt;/p&gt; 
&lt;p&gt;Compatible &lt;code&gt;k8s.io/*&lt;/code&gt; versions, client-go versions, and minimum Go versions can be found in the &lt;code&gt;go.mod&lt;/code&gt; file scaffolded for each project for each &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/tags"&gt;tag release&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; For the &lt;code&gt;4.1.1&lt;/code&gt; release, the minimum Go version compatibility is &lt;code&gt;1.22&lt;/code&gt;. You can refer to the samples in the testdata directory of the tag released &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/tree/v4.1.1/testdata"&gt;v4.1.1&lt;/a&gt;, such as the &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/raw/v4.1.1/testdata/project-v4/go.mod#L3"&gt;go.mod&lt;/a&gt; file for &lt;code&gt;project-v4&lt;/code&gt;. You can also check the versions of the tools supported and tested for this release by examining the &lt;a href="https://github.com/kubernetes-sigs/kubebuilder/raw/v4.1.1/testdata/project-v4/Makefile#L160-L165"&gt;Makefile&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community Meetings&lt;/h2&gt; 
&lt;p&gt;The following meetings happen biweekly:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Kubebuilder Meeting&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You are more than welcome to attend. For further info join to &lt;a href="https://groups.google.com/g/kubebuilder"&gt;kubebuilder@googlegroups.com&lt;/a&gt;. Every month, our team meets on the first Thursday at 11:00 PT (Pacific Time) to discuss our progress and plan for the upcoming weeks. Please note that we have been syncing more frequently offline via Slack lately. However, if you add a topic to the agenda, we will hold the meeting as scheduled. Additionally, we can use this channel to demonstrate new features.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>akuity/kargo</title>
      <link>https://github.com/akuity/kargo</link>
      <description>&lt;p&gt;Application lifecycle orchestration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/akuity/kargo/main/ui/public/kargo-logo-white.png#gh-dark-mode-only" alt="Kargo by Akuity, creators of Argo" /&gt; &lt;img src="https://raw.githubusercontent.com/akuity/kargo/main/kargo-logo.png#gh-light-mode-only" alt="Kargo by Akuity, creators of Argo" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://github.com/akuity/kargo/actions/workflows/ci.yaml/badge.svg?sanitize=true" alt="CI" /&gt; &lt;a href="https://codecov.io/gh/akuity/kargo"&gt;&lt;img src="https://codecov.io/gh/akuity/kargo/branch/main/graph/badge.svg?token=FGUq4netA6" alt="codecov" /&gt;&lt;/a&gt; &lt;a href="https://app.netlify.com/sites/docs-kargo-io/deploys"&gt;&lt;img src="https://api.netlify.com/api/v1/badges/71b4c2e1-5e8b-4927-ad1f-b475bae59e90/deploy-status" alt="Netlify Status" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/akuity/kargo/main/CODE_OF_CONDUCT.md"&gt;&lt;img src="https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true" alt="Contributor Covenant" /&gt;&lt;/a&gt; &lt;a href="https://akuity.community"&gt;&lt;img src="https://img.shields.io/discord/1138942074998235187?logo=discord&amp;amp;logoColor=ffffff&amp;amp;label=discord" alt="Discord" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Kargo is a next-generation continuous delivery and application lifecycle orchestration platform for Kubernetes. It builds upon &lt;a href="https://opengitops.dev/"&gt;GitOps&lt;/a&gt; principles and integrates with existing technologies, like &lt;a href="https://argoproj.github.io/cd/"&gt;Argo CD&lt;/a&gt;, to streamline and automate the progressive rollout of changes across the many stages of an application's lifecycle.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/akuity/kargo/main/docs/static/img/kargo-ui.png" alt="Kargo Dashboard" /&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Read more about Kargo in our &lt;a href="https://docs.kargo.io"&gt;docs&lt;/a&gt; or get hands-on right away by following our &lt;a href="https://docs.kargo.io/quickstart"&gt;Quickstart documentation&lt;/a&gt; or watch the &lt;em&gt;Multi-Stage Deployment Pipelines the GitOps Way&lt;/em&gt; talk by Jesse Suen &amp;amp; Kent Rancourt of Akuity at GitOpsCon EU 2024:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://youtu.be/0B_JODxyK0w"&gt;&lt;img src="https://img.youtube.com/vi/0B_JODxyK0w/0.jpg" alt="Multi-Stage Deployment Pipelines the GitOps Way - Kargo" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This documentation is very new, so please open issues against this repository if you encounter any difficulties.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The Kargo project accepts contributions via GitHub pull requests.&lt;/p&gt; 
&lt;p&gt;Visit our &lt;a href="https://docs.kargo.io/contributor-guide/"&gt;Kargo Contributor Guide&lt;/a&gt; for more info on how to get started quickly and easily.&lt;/p&gt; 
&lt;h2&gt;Support &amp;amp; Feedback&lt;/h2&gt; 
&lt;p&gt;To report an issue, request a feature, or ask a question, please open an issue &lt;a href="https://github.com/akuity/kargo/issues"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please also feel free to join us on &lt;a href="https://discord.gg/dHJBZw6ewT"&gt;Discord&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Participation in the Kargo project is governed by the &lt;a href="https://docs.kargo.io/contributor-guide/code-of-conduct/"&gt;Contributor Covenant Code of Conduct&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>korotovsky/slack-mcp-server</title>
      <link>https://github.com/korotovsky/slack-mcp-server</link>
      <description>&lt;p&gt;The most powerful MCP Slack Server with no permission requirements, Apps support, multiple transports Stdio and SSE, DMs, Group DMs and smart history fetch logic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Slack MCP Server&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://archestra.ai/mcp-catalog/korotovsky__slack-mcp-server"&gt;&lt;img src="https://archestra.ai/mcp-catalog/api/badge/quality/korotovsky/slack-mcp-server" alt="Trust Score" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Model Context Protocol (MCP) server for Slack Workspaces. The most powerful MCP Slack server — supports Stdio and SSE transports, proxy settings, DMs, Group DMs, Smart History fetch (by date or count), may work via OAuth or in complete stealth mode with no permissions and scopes in Workspace 😏.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!IMPORTANT]&lt;br /&gt; We need your support! Each month, over 30,000 engineers visit this repository, and more than 9,000 are already using it.&lt;/p&gt; 
 &lt;p&gt;If you appreciate the work our &lt;a href="https://github.com/korotovsky/slack-mcp-server/graphs/contributors"&gt;contributors&lt;/a&gt; have put into this project, please consider giving the repository a star.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This feature-rich Slack MCP Server has:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Stealth and OAuth Modes&lt;/strong&gt;: Run the server without requiring additional permissions or bot installations (stealth mode), or use secure OAuth tokens for access without needing to refresh or extract tokens from the browser (OAuth mode).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise Workspaces Support&lt;/strong&gt;: Possibility to integrate with Enterprise Slack setups.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Channel and Thread Support with &lt;code&gt;#Name&lt;/code&gt; &lt;code&gt;@Lookup&lt;/code&gt;&lt;/strong&gt;: Fetch messages from channels and threads, including activity messages, and retrieve channels using their names (e.g., #general) as well as their IDs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Smart History&lt;/strong&gt;: Fetch messages with pagination by date (d1, 7d, 1m) or message count.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Search Messages&lt;/strong&gt;: Search messages in channels, threads, and DMs using various filters like date, user, and content.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Safe Message Posting&lt;/strong&gt;: The &lt;code&gt;conversations_add_message&lt;/code&gt; tool is disabled by default for safety. Enable it via an environment variable, with optional channel restrictions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;DM and Group DM support&lt;/strong&gt;: Retrieve direct messages and group direct messages.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Embedded user information&lt;/strong&gt;: Embed user information in messages, for better context.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cache support&lt;/strong&gt;: Cache users and channels for faster access.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Stdio/SSE Transports &amp;amp; Proxy Support&lt;/strong&gt;: Use the server with any MCP client that supports Stdio or SSE transports, and configure it to route outgoing requests through a proxy if needed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Analytics Demo&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/images/feature-1.gif" alt="Analytics" /&gt;&lt;/p&gt; 
&lt;h3&gt;Add Message Demo&lt;/h3&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/images/feature-2.gif" alt="Add Message" /&gt;&lt;/p&gt; 
&lt;h2&gt;Tools&lt;/h2&gt; 
&lt;h3&gt;1. conversations_history:&lt;/h3&gt; 
&lt;p&gt;Get messages from the channel (or DM) by channel_id, the last row/column in the response is used as 'cursor' parameter for pagination if not empty&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): - &lt;code&gt;channel_id&lt;/code&gt; (string): ID of the channel in format Cxxxxxxxxxx or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;include_activity_messages&lt;/code&gt; (boolean, default: false): If true, the response will include activity messages such as &lt;code&gt;channel_join&lt;/code&gt; or &lt;code&gt;channel_leave&lt;/code&gt;. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (string, default: "1d"): Limit of messages to fetch in format of maximum ranges of time (e.g. 1d - 1 day, 1w - 1 week, 30d - 30 days, 90d - 90 days which is a default limit for free tier history) or number of messages (e.g. 50). Must be empty when 'cursor' is provided.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. conversations_replies:&lt;/h3&gt; 
&lt;p&gt;Get a thread of messages posted to a conversation by channelID and &lt;code&gt;thread_ts&lt;/code&gt;, the last row/column in the response is used as &lt;code&gt;cursor&lt;/code&gt; parameter for pagination if not empty.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): ID of the channel in format &lt;code&gt;Cxxxxxxxxxx&lt;/code&gt; or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;thread_ts&lt;/code&gt; (string, required): Unique identifier of either a thread’s parent message or a message in the thread. ts must be the timestamp in format &lt;code&gt;1234567890.123456&lt;/code&gt; of an existing message with 0 or more replies.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;include_activity_messages&lt;/code&gt; (boolean, default: false): If true, the response will include activity messages such as 'channel_join' or 'channel_leave'. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (string, default: "1d"): Limit of messages to fetch in format of maximum ranges of time (e.g. 1d - 1 day, 1w - 1 week, 30d - 30 days, 90d - 90 days which is a default limit for free tier history) or number of messages (e.g. 50). Must be empty when 'cursor' is provided.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;3. conversations_add_message&lt;/h3&gt; 
&lt;p&gt;Add a message to a public channel, private channel, or direct message (DM, or IM) conversation by channel_id and thread_ts.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Posting messages is disabled by default for safety. To enable, set the &lt;code&gt;SLACK_MCP_ADD_MESSAGE_TOOL&lt;/code&gt; environment variable. If set to a comma-separated list of channel IDs, posting is enabled only for those specific channels. See the Environment Variables section below for details.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt; (string, required): ID of the channel in format &lt;code&gt;Cxxxxxxxxxx&lt;/code&gt; or its name starting with &lt;code&gt;#...&lt;/code&gt; or &lt;code&gt;@...&lt;/code&gt; aka &lt;code&gt;#general&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;thread_ts&lt;/code&gt; (string, optional): Unique identifier of either a thread’s parent message or a message in the thread_ts must be the timestamp in format &lt;code&gt;1234567890.123456&lt;/code&gt; of an existing message with 0 or more replies. Optional, if not provided the message will be added to the channel itself, otherwise it will be added to the thread.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;payload&lt;/code&gt; (string, required): Message payload in specified content_type format. Example: 'Hello, world!' for text/plain or '# Hello, world!' for text/markdown.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;content_type&lt;/code&gt; (string, default: "text/markdown"): Content type of the message. Default is 'text/markdown'. Allowed values: 'text/markdown', 'text/plain'.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;4. conversations_search_messages&lt;/h3&gt; 
&lt;p&gt;Search messages in a public channel, private channel, or direct message (DM, or IM) conversation using filters. All filters are optional, if not provided then search_query is required.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;search_query&lt;/code&gt; (string, optional): Search query to filter messages. Example: 'marketing report' or full URL of Slack message e.g. '&lt;a href="https://slack.com/archives/C1234567890/p1234567890123456"&gt;https://slack.com/archives/C1234567890/p1234567890123456&lt;/a&gt;', then the tool will return a single message matching given URL, herewith all other parameters will be ignored.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_in_channel&lt;/code&gt; (string, optional): Filter messages in a specific channel by its ID or name. Example: &lt;code&gt;C1234567890&lt;/code&gt; or &lt;code&gt;#general&lt;/code&gt;. If not provided, all channels will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_in_im_or_mpim&lt;/code&gt; (string, optional): Filter messages in a direct message (DM) or multi-person direct message (MPIM) conversation by its ID or name. Example: &lt;code&gt;D1234567890&lt;/code&gt; or &lt;code&gt;@username_dm&lt;/code&gt;. If not provided, all DMs and MPIMs will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_users_with&lt;/code&gt; (string, optional): Filter messages with a specific user by their ID or display name in threads and DMs. Example: &lt;code&gt;U1234567890&lt;/code&gt; or &lt;code&gt;@username&lt;/code&gt;. If not provided, all threads and DMs will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_users_from&lt;/code&gt; (string, optional): Filter messages from a specific user by their ID or display name. Example: &lt;code&gt;U1234567890&lt;/code&gt; or &lt;code&gt;@username&lt;/code&gt;. If not provided, all users will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_before&lt;/code&gt; (string, optional): Filter messages sent before a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_after&lt;/code&gt; (string, optional): Filter messages sent after a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_on&lt;/code&gt; (string, optional): Filter messages sent on a specific date in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;2023-10-01&lt;/code&gt;, &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_date_during&lt;/code&gt; (string, optional): Filter messages sent during a specific period in format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Example: &lt;code&gt;July&lt;/code&gt;, &lt;code&gt;Yesterday&lt;/code&gt; or &lt;code&gt;Today&lt;/code&gt;. If not provided, all dates will be searched.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;filter_threads_only&lt;/code&gt; (boolean, default: false): If true, the response will include only messages from threads. Default is boolean false.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, default: ""): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (number, default: 20): The maximum number of items to return. Must be an integer between 1 and 100.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;5. channels_list:&lt;/h3&gt; 
&lt;p&gt;Get list of channels&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;channel_types&lt;/code&gt; (string, required): Comma-separated channel types. Allowed values: &lt;code&gt;mpim&lt;/code&gt;, &lt;code&gt;im&lt;/code&gt;, &lt;code&gt;public_channel&lt;/code&gt;, &lt;code&gt;private_channel&lt;/code&gt;. Example: &lt;code&gt;public_channel,private_channel,im&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt; (string, optional): Type of sorting. Allowed values: &lt;code&gt;popularity&lt;/code&gt; - sort by number of members/participants in each channel.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;limit&lt;/code&gt; (number, default: 100): The maximum number of items to return. Must be an integer between 1 and 1000 (maximum 999).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; (string, optional): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;p&gt;The Slack MCP Server exposes two special directory resources for easy access to workspace metadata:&lt;/p&gt; 
&lt;h3&gt;1. &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/channels&lt;/code&gt; — Directory of Channels&lt;/h3&gt; 
&lt;p&gt;Fetches a CSV directory of all channels in the workspace, including public channels, private channels, DMs, and group DMs.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;URI:&lt;/strong&gt; &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/channels&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Format:&lt;/strong&gt; &lt;code&gt;text/csv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fields:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;id&lt;/code&gt;: Channel ID (e.g., &lt;code&gt;C1234567890&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Channel name (e.g., &lt;code&gt;#general&lt;/code&gt;, &lt;code&gt;@username_dm&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;topic&lt;/code&gt;: Channel topic (if any)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;purpose&lt;/code&gt;: Channel purpose/description&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;memberCount&lt;/code&gt;: Number of members in the channel&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;2. &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/users&lt;/code&gt; — Directory of Users&lt;/h3&gt; 
&lt;p&gt;Fetches a CSV directory of all users in the workspace.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;URI:&lt;/strong&gt; &lt;code&gt;slack://&amp;lt;workspace&amp;gt;/users&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Format:&lt;/strong&gt; &lt;code&gt;text/csv&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fields:&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;userID&lt;/code&gt;: User ID (e.g., &lt;code&gt;U1234567890&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;userName&lt;/code&gt;: Slack username (e.g., &lt;code&gt;john&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;realName&lt;/code&gt;: User’s real name (e.g., &lt;code&gt;John Doe&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Setup Guide&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/01-authentication-setup.md"&gt;Authentication Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/02-installation.md"&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/docs/03-configuration-and-usage.md"&gt;Configuration and Usage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Environment Variables (Quick Reference)&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Variable&lt;/th&gt; 
   &lt;th&gt;Required?&lt;/th&gt; 
   &lt;th&gt;Default&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXC_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Slack browser token (&lt;code&gt;xoxc-...&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXD_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Slack browser cookie &lt;code&gt;d&lt;/code&gt; (&lt;code&gt;xoxd-...&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_XOXP_TOKEN&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Yes*&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;User OAuth token (&lt;code&gt;xoxp-...&lt;/code&gt;) — alternative to xoxc/xoxd&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_PORT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;13080&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Port for the MCP server to listen on&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_HOST&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Host for the MCP server to listen on&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SSE_API_KEY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Bearer token for SSE transport&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_PROXY&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Proxy URL for outgoing requests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_USER_AGENT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Custom User-Agent (for Enterprise Slack environments)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_CUSTOM_TLS&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send custom TLS-handshake to Slack servers based on &lt;code&gt;SLACK_MCP_USER_AGENT&lt;/code&gt; or default User-Agent. (for Enterprise Slack environments)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to CA certificate&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA_TOOLKIT&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Inject HTTPToolkit CA certificate to root trust-store for MitM debugging&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_SERVER_CA_INSECURE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Trust all insecure requests (NOT RECOMMENDED)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_TOOL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable message posting via &lt;code&gt;conversations_add_message&lt;/code&gt; by setting it to true for all channels, a comma-separated list of channel IDs to whitelist specific channels, or use &lt;code&gt;!&lt;/code&gt; before a channel ID to allow all except specified ones, while an empty value disables posting by default.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_MARK&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;When the &lt;code&gt;conversations_add_message&lt;/code&gt; tool is enabled, any new message sent will automatically be marked as read.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_ADD_MESSAGE_UNFURLING&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Enable to let Slack unfurl posted links or set comma-separated list of domains e.g. &lt;code&gt;github.com,slack.com&lt;/code&gt; to whitelist unfurling only for them. If text contains whitelisted and unknown domain unfurling will be disabled for security reasons.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_USERS_CACHE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.users_cache.json&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to the users cache file. Used to cache Slack user information to avoid repeated API calls on startup.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_CHANNELS_CACHE&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;.channels_cache_v2.json&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Path to the channels cache file. Used to cache Slack channel information to avoid repeated API calls on startup.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;SLACK_MCP_LOG_LEVEL&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;No&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;info&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Log-level for stdout or stderr. Valid values are: &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;panic&lt;/code&gt; and &lt;code&gt;fatal&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;*You need either &lt;code&gt;xoxp&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; both &lt;code&gt;xoxc&lt;/code&gt;/&lt;code&gt;xoxd&lt;/code&gt; tokens for authentication.&lt;/p&gt; 
&lt;h3&gt;Limitations matrix &amp;amp; Cache&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Users Cache&lt;/th&gt; 
   &lt;th&gt;Channels Cache&lt;/th&gt; 
   &lt;th&gt;Limitations&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No cache, No LLM context enhancement with user data, tool &lt;code&gt;channels_list&lt;/code&gt; will be fully not functional. Tools &lt;code&gt;conversations_*&lt;/code&gt; will have limited capabilities and you won't be able to search messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt;, getting messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt; won't be available either.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No channels cache, tool &lt;code&gt;channels_list&lt;/code&gt; will be fully not functional. Tools &lt;code&gt;conversations_*&lt;/code&gt; will have limited capabilities and you won't be able to search messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt;, getting messages by &lt;code&gt;@userHandle&lt;/code&gt; or &lt;code&gt;#channel-name&lt;/code&gt; won't be available either.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; 
   &lt;td&gt;No limitations, fully functional Slack MCP Server.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Debugging Tools&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Run the inspector with stdio transport
npx @modelcontextprotocol/inspector go run mcp/mcp-server.go --transport stdio

# View logs
tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Never share API tokens&lt;/li&gt; 
 &lt;li&gt;Keep .env files secure and private&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under MIT - see &lt;a href="https://raw.githubusercontent.com/korotovsky/slack-mcp-server/master/LICENSE"&gt;LICENSE&lt;/a&gt; file. This is not an official Slack product.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>moby/moby</title>
      <link>https://github.com/moby/moby</link>
      <description>&lt;p&gt;The Moby Project - a collaborative project for the container ecosystem to assemble container-based systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Moby Project&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/moby/moby/v2"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/moby/moby/v2" alt="PkgGoDev" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/github/license/moby/moby" alt="GitHub License" /&gt; &lt;a href="https://goreportcard.com/report/github.com/moby/moby/v2"&gt;&lt;img src="https://goreportcard.com/badge/github.com/moby/moby/v2" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://scorecard.dev/viewer/?uri=github.com/moby/moby"&gt;&lt;img src="https://api.scorecard.dev/projects/github.com/moby/moby/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt; &lt;a href="https://www.bestpractices.dev/projects/10989"&gt;&lt;img src="https://www.bestpractices.dev/projects/10989/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/moby/moby/master/docs/static_files/moby-project-logo.png" alt="Moby Project logo" title="The Moby Project" /&gt;&lt;/p&gt; 
&lt;p&gt;Moby is an open-source project created by Docker to enable and accelerate software containerization.&lt;/p&gt; 
&lt;p&gt;It provides a "Lego set" of toolkit components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas. Components include container build tools, a container registry, orchestration tools, a runtime and more, and these can be used as building blocks in conjunction with other tools and projects.&lt;/p&gt; 
&lt;h2&gt;Principles&lt;/h2&gt; 
&lt;p&gt;Moby is an open project guided by strong principles, aiming to be modular, flexible and without too strong an opinion on user experience. It is open to the community to help set its direction.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modular: the project includes lots of components that have well-defined functions and APIs that work together.&lt;/li&gt; 
 &lt;li&gt;Batteries included but swappable: Moby includes enough components to build fully featured container systems, but its modular architecture ensures that most of the components can be swapped by different implementations.&lt;/li&gt; 
 &lt;li&gt;Usable security: Moby provides secure defaults without compromising usability.&lt;/li&gt; 
 &lt;li&gt;Developer focused: The APIs are intended to be functional and useful to build powerful tools. They are not necessarily intended as end user tools but as components aimed at developers. Documentation and UX is aimed at developers not end users.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Audience&lt;/h2&gt; 
&lt;p&gt;The Moby Project is intended for engineers, integrators and enthusiasts looking to modify, hack, fix, experiment, invent and build systems based on containers. It is not for people looking for a commercially supported system, but for people who want to work and learn with open source code.&lt;/p&gt; 
&lt;h2&gt;Relationship with Docker&lt;/h2&gt; 
&lt;p&gt;The components and tools in the Moby Project are initially the open source components that Docker and the community have built for the Docker Project. New projects can be added if they fit with the community goals. Docker is committed to using Moby as the upstream for the Docker Product. However, other projects are also encouraged to use Moby as an upstream, and to reuse the components in diverse ways, and all these uses will be treated in the same way. External maintainers and contributors are welcomed.&lt;/p&gt; 
&lt;p&gt;The Moby project is not intended as a location for support or feature requests for Docker products, but as a place for contributors to work on open source code, fix bugs, and make the code more useful. The releases are supported by the maintainers, community and users, on a best efforts basis only. For customers who want enterprise or commercial support, &lt;a href="https://www.docker.com/products/docker-desktop/"&gt;Docker Desktop&lt;/a&gt; and &lt;a href="https://www.mirantis.com/software/mirantis-container-runtime/"&gt;Mirantis Container Runtime&lt;/a&gt; are the appropriate products for these use cases.&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Legal&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Brought to you courtesy of our legal counsel. For more context, please see the &lt;a href="https://github.com/moby/moby/raw/master/NOTICE"&gt;NOTICE&lt;/a&gt; document in this repo.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Use and transfer of Moby may be subject to certain restrictions by the United States and other governments.&lt;/p&gt; 
&lt;p&gt;It is your responsibility to ensure that your use and/or transfer does not violate applicable laws.&lt;/p&gt; 
&lt;p&gt;For more information, please see &lt;a href="https://www.bis.doc.gov"&gt;https://www.bis.doc.gov&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Licensing&lt;/h1&gt; 
&lt;p&gt;Moby is licensed under the Apache License, Version 2.0. See &lt;a href="https://github.com/moby/moby/raw/master/LICENSE"&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>charmbracelet/bubbletea</title>
      <link>https://github.com/charmbracelet/bubbletea</link>
      <description>&lt;p&gt;A powerful little TUI framework 🏗&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bubble Tea&lt;/h1&gt; 
&lt;p&gt; 
 &lt;picture&gt; 
  &lt;source media="(prefers-color-scheme: light)" srcset="https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png" width="308" /&gt; 
  &lt;source media="(prefers-color-scheme: dark)" srcset="https://stuff.charm.sh/bubbletea/bubble-tea-v2-dark.png" width="312" /&gt; 
  &lt;img src="https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png" width="308" /&gt; 
 &lt;/picture&gt; &lt;br /&gt; &lt;a href="https://github.com/charmbracelet/bubbletea/releases"&gt;&lt;img src="https://img.shields.io/github/release/charmbracelet/bubbletea.svg?sanitize=true" alt="Latest Release" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;&lt;img src="https://godoc.org/github.com/charmbracelet/bubbletea?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://github.com/charmbracelet/bubbletea/actions"&gt;&lt;img src="https://github.com/charmbracelet/bubbletea/actions/workflows/build.yml/badge.svg?branch=main" alt="Build Status" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;The fun, functional and stateful way to build terminal apps. A Go framework based on &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;. Bubble Tea is well-suited for simple and complex terminal applications, either inline, full-window, or a mix of both.&lt;/p&gt; 
&lt;p&gt; &lt;img src="https://stuff.charm.sh/bubbletea/bubbletea-example.gif" width="100%" alt="Bubble Tea Example" /&gt; &lt;/p&gt; 
&lt;p&gt;Bubble Tea is in use in production and includes a number of features and performance optimizations we’ve added along the way. Among those is a framerate-based renderer, mouse support, focus reporting and more.&lt;/p&gt; 
&lt;p&gt;To get started, see the tutorial below, the &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/examples"&gt;examples&lt;/a&gt;, the &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;docs&lt;/a&gt;, the &lt;a href="https://charm.sh/yt"&gt;video tutorials&lt;/a&gt; and some common &lt;a href="https://raw.githubusercontent.com/charmbracelet/bubbletea/main/#libraries-we-use-with-bubble-tea"&gt;resources&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;By the way&lt;/h2&gt; 
&lt;p&gt;Be sure to check out &lt;a href="https://github.com/charmbracelet/bubbles"&gt;Bubbles&lt;/a&gt;, a library of common UI components for Bubble Tea.&lt;/p&gt; 
&lt;p&gt; &lt;a href="https://github.com/charmbracelet/bubbles"&gt;&lt;img src="https://stuff.charm.sh/bubbles/bubbles-badge.png" width="174" alt="Bubbles Badge" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href="https://github.com/charmbracelet/bubbles"&gt;&lt;img src="https://stuff.charm.sh/bubbles-examples/textinput.gif" width="400" alt="Text Input Example from Bubbles" /&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h2&gt;Tutorial&lt;/h2&gt; 
&lt;p&gt;Bubble Tea is based on the functional design paradigms of &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt;, which happens to work nicely with Go. It's a delightful way to build applications.&lt;/p&gt; 
&lt;p&gt;This tutorial assumes you have a working knowledge of Go.&lt;/p&gt; 
&lt;p&gt;By the way, the non-annotated source code for this program is available &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/tutorials/basics"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Enough! Let's get to it.&lt;/h3&gt; 
&lt;p&gt;For this tutorial, we're making a shopping list.&lt;/p&gt; 
&lt;p&gt;To start we'll define our package and import some libraries. Our only external import will be the Bubble Tea library, which we'll call &lt;code&gt;tea&lt;/code&gt; for short.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

// These imports will be used later on the tutorial. If you save the file
// now, Go might complain they are unused, but that's fine.
// You may also need to run `go mod tidy` to download bubbletea and its
// dependencies.
import (
    "fmt"
    "os"

    tea "github.com/charmbracelet/bubbletea"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Bubble Tea programs are comprised of a &lt;strong&gt;model&lt;/strong&gt; that describes the application state and three simple methods on that model:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Init&lt;/strong&gt;, a function that returns an initial command for the application to run.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;, a function that handles incoming events and updates the model accordingly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;, a function that renders the UI based on the data in the model.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The Model&lt;/h3&gt; 
&lt;p&gt;So let's start by defining our model which will store our application's state. It can be any type, but a &lt;code&gt;struct&lt;/code&gt; usually makes the most sense.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type model struct {
    choices  []string           // items on the to-do list
    cursor   int                // which to-do list item our cursor is pointing at
    selected map[int]struct{}   // which to-do items are selected
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Initialization&lt;/h3&gt; 
&lt;p&gt;Next, we’ll define our application’s initial state. In this case, we’re defining a function to return our initial model, however, we could just as easily define the initial model as a variable elsewhere, too.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func initialModel() model {
	return model{
		// Our to-do list is a grocery list
		choices:  []string{"Buy carrots", "Buy celery", "Buy kohlrabi"},

		// A map which indicates which choices are selected. We're using
		// the  map like a mathematical set. The keys refer to the indexes
		// of the `choices` slice, above.
		selected: make(map[int]struct{}),
	}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, we define the &lt;code&gt;Init&lt;/code&gt; method. &lt;code&gt;Init&lt;/code&gt; can return a &lt;code&gt;Cmd&lt;/code&gt; that could perform some initial I/O. For now, we don't need to do any I/O, so for the command, we'll just return &lt;code&gt;nil&lt;/code&gt;, which translates to "no command."&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) Init() tea.Cmd {
    // Just return `nil`, which means "no I/O right now, please."
    return nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;The Update Method&lt;/h3&gt; 
&lt;p&gt;Next up is the update method. The update function is called when ”things happen.” Its job is to look at what has happened and return an updated model in response. It can also return a &lt;code&gt;Cmd&lt;/code&gt; to make more things happen, but for now don't worry about that part.&lt;/p&gt; 
&lt;p&gt;In our case, when a user presses the down arrow, &lt;code&gt;Update&lt;/code&gt;’s job is to notice that the down arrow was pressed and move the cursor accordingly (or not).&lt;/p&gt; 
&lt;p&gt;The “something happened” comes in the form of a &lt;code&gt;Msg&lt;/code&gt;, which can be any type. Messages are the result of some I/O that took place, such as a keypress, timer tick, or a response from a server.&lt;/p&gt; 
&lt;p&gt;We usually figure out which type of &lt;code&gt;Msg&lt;/code&gt; we received with a type switch, but you could also use a type assertion.&lt;/p&gt; 
&lt;p&gt;For now, we'll just deal with &lt;code&gt;tea.KeyMsg&lt;/code&gt; messages, which are automatically sent to the update function when keys are pressed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
    switch msg := msg.(type) {

    // Is it a key press?
    case tea.KeyMsg:

        // Cool, what was the actual key pressed?
        switch msg.String() {

        // These keys should exit the program.
        case "ctrl+c", "q":
            return m, tea.Quit

        // The "up" and "k" keys move the cursor up
        case "up", "k":
            if m.cursor &amp;gt; 0 {
                m.cursor--
            }

        // The "down" and "j" keys move the cursor down
        case "down", "j":
            if m.cursor &amp;lt; len(m.choices)-1 {
                m.cursor++
            }

        // The "enter" key and the spacebar (a literal space) toggle
        // the selected state for the item that the cursor is pointing at.
        case "enter", " ":
            _, ok := m.selected[m.cursor]
            if ok {
                delete(m.selected, m.cursor)
            } else {
                m.selected[m.cursor] = struct{}{}
            }
        }
    }

    // Return the updated model to the Bubble Tea runtime for processing.
    // Note that we're not returning a command.
    return m, nil
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may have noticed that &lt;kbd&gt;ctrl+c&lt;/kbd&gt; and &lt;kbd&gt;q&lt;/kbd&gt; above return a &lt;code&gt;tea.Quit&lt;/code&gt; command with the model. That’s a special command which instructs the Bubble Tea runtime to quit, exiting the program.&lt;/p&gt; 
&lt;h3&gt;The View Method&lt;/h3&gt; 
&lt;p&gt;At last, it’s time to render our UI. Of all the methods, the view is the simplest. We look at the model in its current state and use it to return a &lt;code&gt;string&lt;/code&gt;. That string is our UI!&lt;/p&gt; 
&lt;p&gt;Because the view describes the entire UI of your application, you don’t have to worry about redrawing logic and stuff like that. Bubble Tea takes care of it for you.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func (m model) View() string {
    // The header
    s := "What should we buy at the market?\n\n"

    // Iterate over our choices
    for i, choice := range m.choices {

        // Is the cursor pointing at this choice?
        cursor := " " // no cursor
        if m.cursor == i {
            cursor = "&amp;gt;" // cursor!
        }

        // Is this choice selected?
        checked := " " // not selected
        if _, ok := m.selected[i]; ok {
            checked = "x" // selected!
        }

        // Render the row
        s += fmt.Sprintf("%s [%s] %s\n", cursor, checked, choice)
    }

    // The footer
    s += "\nPress q to quit.\n"

    // Send the UI for rendering
    return s
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;All Together Now&lt;/h3&gt; 
&lt;p&gt;The last step is to simply run our program. We pass our initial model to &lt;code&gt;tea.NewProgram&lt;/code&gt; and let it rip:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func main() {
    p := tea.NewProgram(initialModel())
    if _, err := p.Run(); err != nil {
        fmt.Printf("Alas, there's been an error: %v", err)
        os.Exit(1)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;What’s Next?&lt;/h2&gt; 
&lt;p&gt;This tutorial covers the basics of building an interactive terminal UI, but in the real world you'll also need to perform I/O. To learn about that have a look at the &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/tutorials/commands/"&gt;Command Tutorial&lt;/a&gt;. It's pretty simple.&lt;/p&gt; 
&lt;p&gt;There are also several &lt;a href="https://github.com/charmbracelet/bubbletea/tree/main/examples"&gt;Bubble Tea examples&lt;/a&gt; available and, of course, there are &lt;a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"&gt;Go Docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Debugging&lt;/h2&gt; 
&lt;h3&gt;Debugging with Delve&lt;/h3&gt; 
&lt;p&gt;Since Bubble Tea apps assume control of stdin and stdout, you’ll need to run delve in headless mode and then connect to it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Start the debugger
$ dlv debug --headless --api-version=2 --listen=127.0.0.1:43000 .
API server listening at: 127.0.0.1:43000

# Connect to it from another terminal
$ dlv connect 127.0.0.1:43000
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not explicitly supply the &lt;code&gt;--listen&lt;/code&gt; flag, the port used will vary per run, so passing this in makes the debugger easier to use from a script or your IDE of choice.&lt;/p&gt; 
&lt;p&gt;Additionally, we pass in &lt;code&gt;--api-version=2&lt;/code&gt; because delve defaults to version 1 for backwards compatibility reasons. However, delve recommends using version 2 for all new development and some clients may no longer work with version 1. For more information, see the &lt;a href="https://github.com/go-delve/delve/tree/master/Documentation/api"&gt;Delve documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Logging Stuff&lt;/h3&gt; 
&lt;p&gt;You can’t really log to stdout with Bubble Tea because your TUI is busy occupying that! You can, however, log to a file by including something like the following prior to starting your Bubble Tea program:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;if len(os.Getenv("DEBUG")) &amp;gt; 0 {
	f, err := tea.LogToFile("debug.log", "debug")
	if err != nil {
		fmt.Println("fatal:", err)
		os.Exit(1)
	}
	defer f.Close()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see what’s being logged in real time, run &lt;code&gt;tail -f debug.log&lt;/code&gt; while you run your program in another window.&lt;/p&gt; 
&lt;h2&gt;Libraries we use with Bubble Tea&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/bubbles"&gt;Bubbles&lt;/a&gt;: Common Bubble Tea components such as text inputs, viewports, spinners and so on&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/lipgloss"&gt;Lip Gloss&lt;/a&gt;: Style, format and layout tools for terminal applications&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/harmonica"&gt;Harmonica&lt;/a&gt;: A spring animation library for smooth, natural motion&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lrstanley/bubblezone"&gt;BubbleZone&lt;/a&gt;: Easy mouse event tracking for Bubble Tea components&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/NimbleMarkets/ntcharts"&gt;ntcharts&lt;/a&gt;: A terminal charting library built for Bubble Tea and &lt;a href="https://github.com/charmbracelet/lipgloss"&gt;Lip Gloss&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Bubble Tea in the Wild&lt;/h2&gt; 
&lt;p&gt;There are over &lt;a href="https://github.com/charmbracelet/bubbletea/network/dependents"&gt;10,000 applications&lt;/a&gt; built with Bubble Tea! Here are a handful of ’em.&lt;/p&gt; 
&lt;h3&gt;Staff favourites&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/twpayne/chezmoi"&gt;chezmoi&lt;/a&gt;: securely manage your dotfiles across multiple machines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/bensadeh/circumflex"&gt;circumflex&lt;/a&gt;: read Hacker News in the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.github.com/dlvhdr/gh-dash"&gt;gh-dash&lt;/a&gt;: a GitHub CLI extension for PRs and issues&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Broderick-Westrope/tetrigo"&gt;Tetrigo&lt;/a&gt;: Tetris in the terminal&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/emprcl/signls"&gt;Signls&lt;/a&gt;: a generative midi sequencer designed for composition and live performance&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/yorukot/superfile"&gt;Superfile&lt;/a&gt;: a super file manager&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;In Industry&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Microsoft Azure –&amp;nbsp;&lt;a href="https://github.com/Azure/aztfy"&gt;Aztify&lt;/a&gt;: bring Microsoft Azure resources under Terraform&lt;/li&gt; 
 &lt;li&gt;Daytona –&amp;nbsp;&lt;a href="https://github.com/daytonaio/daytona"&gt;Daytona&lt;/a&gt;: open source dev environment manager&lt;/li&gt; 
 &lt;li&gt;Cockroach Labs – &lt;a href="https://github.com/cockroachdb/cockroach"&gt;CockroachDB&lt;/a&gt;: a cloud-native, high-availability distributed SQL database&lt;/li&gt; 
 &lt;li&gt;Truffle Security Co. –&amp;nbsp;&lt;a href="https://github.com/trufflesecurity/trufflehog"&gt;Trufflehog&lt;/a&gt;: find leaked credentials&lt;/li&gt; 
 &lt;li&gt;NVIDIA –&amp;nbsp;&lt;a href="https://github.com/NVIDIA/container-canary"&gt;container-canary&lt;/a&gt;: a container validator&lt;/li&gt; 
 &lt;li&gt;AWS –&amp;nbsp;&lt;a href="https://github.com/awslabs/eks-node-viewer"&gt;eks-node-viewer&lt;/a&gt;: a tool for visualizing dynamic node usage within an EKS cluster&lt;/li&gt; 
 &lt;li&gt;MinIO –&amp;nbsp;&lt;a href="https://github.com/minio/mc"&gt;mc&lt;/a&gt;: the official &lt;a href="https://min.io"&gt;MinIO&lt;/a&gt; client&lt;/li&gt; 
 &lt;li&gt;Ubuntu –&amp;nbsp;&lt;a href="https://github.com/ubuntu/authd"&gt;Authd&lt;/a&gt;: an authentication daemon for cloud-based identity providers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Charm stuff&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/glow"&gt;Glow&lt;/a&gt;: a markdown reader, browser, and online markdown stash&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/huh"&gt;Huh?&lt;/a&gt;: an interactive prompt and form toolkit&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/mods"&gt;Mods&lt;/a&gt;: AI on the CLI, built for pipelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/charmbracelet/wishlist"&gt;Wishlist&lt;/a&gt;: an SSH directory (and bastion!)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;There’s so much more where that came from&lt;/h3&gt; 
&lt;p&gt;For more applications built with Bubble Tea see &lt;a href="https://github.com/charm-and-friends/charm-in-the-wild"&gt;Charm &amp;amp; Friends&lt;/a&gt;. Is there something cool you made with Bubble Tea you want to share? &lt;a href="https://github.com/charm-and-friends/charm-in-the-wild"&gt;PRs&lt;/a&gt; are welcome!&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://github.com/charmbracelet/bubbletea/contribute"&gt;contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Feedback&lt;/h2&gt; 
&lt;p&gt;We’d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://twitter.com/charmcli"&gt;Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://mastodon.social/@charmcli"&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://charm.sh/chat"&gt;Discord&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;Bubble Tea is based on the paradigms of &lt;a href="https://guide.elm-lang.org/architecture/"&gt;The Elm Architecture&lt;/a&gt; by Evan Czaplicki et alia and the excellent &lt;a href="https://github.com/tj/go-tea"&gt;go-tea&lt;/a&gt; by TJ Holowaychuk. It’s inspired by the many great &lt;a href="https://de.wikipedia.org/wiki/Zeichenorientierte_Benutzerschnittstelle"&gt;&lt;em&gt;Zeichenorientierte Benutzerschnittstellen&lt;/em&gt;&lt;/a&gt; of days past.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/charmbracelet/bubbletea/raw/main/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;Part of &lt;a href="https://charm.sh"&gt;Charm&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://charm.sh/"&gt;&lt;img alt="The Charm logo" src="https://stuff.charm.sh/charm-banner-next.jpg" width="400" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Charm热爱开源 • Charm loves open source • نحنُ نحب المصادر المفتوحة&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>anchore/grype</title>
      <link>https://github.com/anchore/grype</link>
      <description>&lt;p&gt;A vulnerability scanner for container images and filesystems&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img alt="Grype logo" src="https://user-images.githubusercontent.com/5199289/136855393-d0a9eef9-ccf1-4e2b-9d7c-7aad16a567e5.png" width="234" /&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &amp;nbsp;&lt;a href="https://github.com/anchore/grype/actions?query=workflow%3A%22Static+Analysis+%2B+Unit+%2B+Integration%22"&gt;&lt;img src="https://github.com/anchore/grype/workflows/Static%20Analysis%20+%20Unit%20+%20Integration/badge.svg?sanitize=true" alt="Static Analysis + Unit + Integration" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://github.com/anchore/grype/actions/workflows/validations.yaml"&gt;&lt;img src="https://github.com/anchore/grype/workflows/Validations/badge.svg?sanitize=true" alt="Validations" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://goreportcard.com/report/github.com/anchore/grype"&gt;&lt;img src="https://goreportcard.com/badge/github.com/anchore/grype" alt="Go Report Card" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://github.com/anchore/grype/releases/latest"&gt;&lt;img src="https://img.shields.io/github/release/anchore/grype.svg?sanitize=true" alt="GitHub release" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://github.com/anchore/grype"&gt;&lt;img src="https://img.shields.io/github/go-mod/go-version/anchore/grype.svg?sanitize=true" alt="GitHub go.mod Go version" /&gt;&lt;/a&gt;&amp;nbsp; &lt;br /&gt; &amp;nbsp;&lt;a href="https://github.com/anchore/grype/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true" alt="License: Apache-2.0" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://anchore.com/discourse"&gt;&lt;img src="https://img.shields.io/badge/Discourse-Join-blue?logo=discourse" alt="Join our Discourse" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a rel="me" href="https://fosstodon.org/@grype"&gt;&lt;img src="https://img.shields.io/badge/Mastodon-Follow-blue?logoColor=white&amp;amp;logo=mastodon" alt="Follow on Mastodon" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://scorecard.dev/viewer/?uri=github.com/anchore/grype"&gt;&lt;img src="https://api.securityscorecards.dev/projects/github.com/anchore/grype/badge" alt="OpenSSF Scorecard" /&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href="https://www.bestpractices.dev/projects/6708"&gt;&lt;img src="https://www.bestpractices.dev/projects/6708/badge" alt="OpenSSF Best Practices" /&gt;&lt;/a&gt;&amp;nbsp; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;A vulnerability scanner for container images and filesystems. Easily &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#installation"&gt;install the binary&lt;/a&gt; to try it out. Works with &lt;a href="https://github.com/anchore/syft"&gt;Syft&lt;/a&gt;, the powerful SBOM (software bill of materials) tool for container images and filesystems.&lt;/p&gt; 
&lt;h3&gt;Join our community meetings!&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Calendar: &lt;a href="https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t"&gt;https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Agenda: &lt;a href="https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing"&gt;https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing&lt;/a&gt; (join &lt;a href="https://groups.google.com/g/anchore-oss-community"&gt;this group&lt;/a&gt; for write access)&lt;/li&gt; 
 &lt;li&gt;All are welcome!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For commercial support options with Syft or Grype, please &lt;a href="https://get.anchore.com/contact/"&gt;contact Anchore&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/590471/90276236-9868f300-de31-11ea-8068-4268b6b68529.gif" alt="grype-demo" /&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Scan the contents of a container image or filesystem to find known vulnerabilities.&lt;/li&gt; 
 &lt;li&gt;Find vulnerabilities for major operating system packages: 
  &lt;ul&gt; 
   &lt;li&gt;Alpine&lt;/li&gt; 
   &lt;li&gt;Amazon Linux&lt;/li&gt; 
   &lt;li&gt;Azure Linux (previously CBL-Mariner)&lt;/li&gt; 
   &lt;li&gt;BusyBox&lt;/li&gt; 
   &lt;li&gt;CentOS&lt;/li&gt; 
   &lt;li&gt;Debian&lt;/li&gt; 
   &lt;li&gt;Echo&lt;/li&gt; 
   &lt;li&gt;Distroless&lt;/li&gt; 
   &lt;li&gt;MinimOS&lt;/li&gt; 
   &lt;li&gt;Oracle Linux&lt;/li&gt; 
   &lt;li&gt;Red Hat (RHEL)&lt;/li&gt; 
   &lt;li&gt;Ubuntu&lt;/li&gt; 
   &lt;li&gt;Wolfi&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Find vulnerabilities for language-specific packages: 
  &lt;ul&gt; 
   &lt;li&gt;Ruby (Gems)&lt;/li&gt; 
   &lt;li&gt;Java (JAR, WAR, EAR, JPI, HPI)&lt;/li&gt; 
   &lt;li&gt;JavaScript (NPM, Yarn)&lt;/li&gt; 
   &lt;li&gt;Python (Egg, Wheel, Poetry, requirements.txt/setup.py files)&lt;/li&gt; 
   &lt;li&gt;Dotnet (deps.json)&lt;/li&gt; 
   &lt;li&gt;Golang (go.mod)&lt;/li&gt; 
   &lt;li&gt;PHP (Composer)&lt;/li&gt; 
   &lt;li&gt;Rust (Cargo)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Supports Docker, OCI and &lt;a href="https://github.com/sylabs/singularity"&gt;Singularity&lt;/a&gt; image formats.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/openvex"&gt;OpenVEX&lt;/a&gt; support for filtering and augmenting scanning results.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you encounter an issue, please &lt;a href="https://github.com/anchore/grype/issues"&gt;let us know using the issue tracker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Recommended&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -sSfL https://get.anchore.io/grype | sudo sh -s -- -b /usr/local/bin
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install script options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;-b&lt;/code&gt;: Specify a custom installation directory (defaults to &lt;code&gt;./bin&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: More verbose logging levels (&lt;code&gt;-d&lt;/code&gt; for debug, &lt;code&gt;-dd&lt;/code&gt; for trace)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: Verify the signature of the downloaded artifact before installation (requires &lt;a href="https://github.com/sigstore/cosign"&gt;&lt;code&gt;cosign&lt;/code&gt;&lt;/a&gt; to be installed)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Chocolatey&lt;/h3&gt; 
&lt;p&gt;The chocolatey distribution of grype is community-maintained and not distributed by the anchore team.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;choco install grype -y
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;brew tap anchore/grype
brew install grype
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MacPorts&lt;/h3&gt; 
&lt;p&gt;On macOS, Grype can additionally be installed from the &lt;a href="https://ports.macports.org/port/grype/"&gt;community-maintained port&lt;/a&gt; via MacPorts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo port install grype
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently, Grype is built only for macOS and Linux.&lt;/p&gt; 
&lt;h3&gt;From source&lt;/h3&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/DEVELOPING.md#native-development"&gt;DEVELOPING.md&lt;/a&gt; for instructions to build and run from source.&lt;/p&gt; 
&lt;h3&gt;GitHub Actions&lt;/h3&gt; 
&lt;p&gt;If you're using GitHub Actions, you can use our &lt;a href="https://github.com/marketplace/actions/anchore-container-scan"&gt;Grype-based action&lt;/a&gt; to run vulnerability scans on your code or container images during your CI workflows.&lt;/p&gt; 
&lt;h2&gt;Verifying the artifacts&lt;/h2&gt; 
&lt;p&gt;Checksums are applied to all artifacts, and the resulting checksum file is signed using cosign.&lt;/p&gt; 
&lt;p&gt;You need the following tool to verify signature:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.sigstore.dev/cosign/system_config/installation/"&gt;Cosign&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Verification steps are as follow:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Download the files you want, and the checksums.txt, checksums.txt.pem and checksums.txt.sig files from the &lt;a href="https://github.com/anchore/grype/releases"&gt;releases&lt;/a&gt; page:&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Verify the signature:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;cosign verify-blob &amp;lt;path to checksum.txt&amp;gt; \
--certificate &amp;lt;path to checksums.txt.pem&amp;gt; \
--signature &amp;lt;path to checksums.txt.sig&amp;gt; \
--certificate-identity-regexp 'https://github\.com/anchore/grype/\.github/workflows/.+' \
--certificate-oidc-issuer "https://token.actions.githubusercontent.com"
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start="3"&gt; 
 &lt;li&gt;Once the signature is confirmed as valid, you can proceed to validate that the SHA256 sums align with the downloaded artifact:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;sha256sum --ignore-missing -c checksums.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#installation"&gt;Install the binary&lt;/a&gt;, and make sure that &lt;code&gt;grype&lt;/code&gt; is available in your path. To scan for vulnerabilities in an image:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command scans for vulnerabilities visible in the container (i.e., the squashed representation of the image). To include software from all image layers in the vulnerability scan, regardless of its presence in the final image, provide &lt;code&gt;--scope all-layers&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt; --scope all-layers
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run grype from a Docker container so it can scan a running container, use the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yml"&gt;docker run --rm \
--volume /var/run/docker.sock:/var/run/docker.sock \
--name Grype anchore/grype:latest \
$(ImageName):$(ImageTag)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Supported sources&lt;/h2&gt; 
&lt;p&gt;Grype can scan a variety of sources beyond those found in Docker.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# scan a container image archive (from the result of `docker image save ...`, `podman save ...`, or `skopeo copy` commands)
grype path/to/image.tar

# scan a Singularity Image Format (SIF) container
grype path/to/image.sif

# scan a directory
grype dir:path/to/dir
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Sources can be explicitly provided with a scheme:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;podman:yourrepo/yourimage:tag          use images from the Podman daemon
docker:yourrepo/yourimage:tag          use images from the Docker daemon
docker-archive:path/to/yourimage.tar   use a tarball from disk for archives created from "docker save"
oci-archive:path/to/yourimage.tar      use a tarball from disk for OCI archives (from Skopeo or otherwise)
oci-dir:path/to/yourimage              read directly from a path on disk for OCI layout directories (from Skopeo or otherwise)
singularity:path/to/yourimage.sif      read directly from a Singularity Image Format (SIF) container on disk
dir:path/to/yourproject                read directly from a path on disk (any directory)
file:path/to/yourfile                  read directly from a file on disk
sbom:path/to/syft.json                 read Syft JSON from path on disk
registry:yourrepo/yourimage:tag        pull image directly from a registry (no container runtime required)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If an image source is not provided and cannot be detected from the given reference it is assumed the image should be pulled from the Docker daemon. If docker is not present, then the Podman daemon is attempted next, followed by reaching out directly to the image registry last.&lt;/p&gt; 
&lt;p&gt;This default behavior can be overridden with the &lt;code&gt;default-image-pull-source&lt;/code&gt; configuration option (See &lt;a href="https://github.com/anchore/grype#configuration"&gt;Configuration&lt;/a&gt; for more details).&lt;/p&gt; 
&lt;p&gt;Use SBOMs for even faster vulnerability scanning in Grype:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Then scan for new vulnerabilities as frequently as needed
grype sbom:./sbom.json

# (You can also pipe the SBOM into Grype)
cat ./sbom.json | grype
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Grype supports input of &lt;a href="https://github.com/anchore/syft"&gt;Syft&lt;/a&gt;, &lt;a href="https://spdx.dev/"&gt;SPDX&lt;/a&gt;, and &lt;a href="https://cyclonedx.org/"&gt;CycloneDX&lt;/a&gt; SBOM formats. If Syft has generated any of these file types, they should have the appropriate information to work properly with Grype. It is also possible to use SBOMs generated by other tools with varying degrees of success. Two things that make Grype matching more successful are the inclusion of CPE and Linux distribution information. If an SBOM does not include any CPE information, it is possible to generate these based on package information using the &lt;code&gt;--add-cpes-if-none&lt;/code&gt; flag. To specify a distribution, use the &lt;code&gt;--distro &amp;lt;distro&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt; flag. A full example is:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype --add-cpes-if-none --distro alpine:3.10 sbom:some-alpine-3.10.spdx.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Threat &amp;amp; Risk Prioritization&lt;/h2&gt; 
&lt;p&gt;This section explains the columns and UI cues that help prioritize remediation efforts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Severity&lt;/strong&gt;: String severity based on CVSS scores and indicate the significance of a vulnerability in levels. This balances concerns such as ease of exploitability, and the potential to affect confidentiality, integrity, and availability of software and services.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;EPSS&lt;/strong&gt;: &lt;a href="https://www.first.org/epss/model"&gt;Exploit Prediction Scoring System&lt;/a&gt; is a metric expressing the likelihood that a vulnerability will be exploited in the wild over the next 30 days (on a 0–1 scale); higher values signal a greater likelihood of exploitation. The table output shows the EPSS percentile, a one-way transform of the EPSS score showing the proportion of all scored vulnerabilities with an equal or lower probability. Percentiles linearize a heavily skewed distribution, making threshold choice (e.g. “only CVEs above the 90th percentile”) straightforward.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;KEV Indicator&lt;/strong&gt;: Flags entries from CISA’s &lt;a href="https://www.cisa.gov/known-exploited-vulnerabilities-catalog"&gt;Known Exploited Vulnerabilities Catalog&lt;/a&gt; --an authoritative list of flaws observed being exploited in the wild.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Risk Score&lt;/strong&gt;: A composite 0–100 metric calculated as:&lt;/p&gt; &lt;pre&gt;&lt;code class="language-markdown"&gt;risk = min(1, threat * average(severity)) * 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;severity&lt;/code&gt; is the average of all CVSS scores and string severity for a vulnerability (scaled between 0–1).&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;threat&lt;/code&gt; is the EPSS score (between 0–1). If the vulnerability is on the KEV list then &lt;code&gt;threat&lt;/code&gt; is &lt;code&gt;1.05&lt;/code&gt;, or &lt;code&gt;1.1&lt;/code&gt; if the vulnerability is associated with a ransomware campaign. This metric is one way to combine EPSS and CVSS suggested in the &lt;a href="https://www.first.org/epss/user-guide"&gt;EPSS user guide&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Suggested Fixes&lt;/strong&gt;: All possible fixes for a package are listed, however, when multiple fixes are available, we de-emphasize all upgrade paths except for the minimal upgrade path (which highlights the smallest, safest version bump).&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Results default to sorting by Risk Score and can be overridden with &lt;code&gt;--sort-by &amp;lt;value&amp;gt;&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: sort by severity&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;epss&lt;/code&gt;: sort by EPSS percentile (aka, "threat")&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;risk&lt;/code&gt;: sort by risk score&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;kev&lt;/code&gt;: just like risk, except that KEV entries are always above non-KEV entries&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;package&lt;/code&gt;: sort by package name, version, type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;vulnerability&lt;/code&gt;: sort by vulnerability ID&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported versions&lt;/h3&gt; 
&lt;p&gt;Software updates are always applied to the latest version of Grype; fixes are not backported to any previous versions of Grype.&lt;/p&gt; 
&lt;p&gt;In terms of database updates, any version of Grype before v0.51.0 (Oct 2022, before schema v5) will not receive vulnerability database updates. You can still build vulnerability databases for unsupported Grype releases by using previous releases of &lt;a href="https://github.com/anchore/vunnel"&gt;vunnel&lt;/a&gt; to gather the upstream data and &lt;a href="https://github.com/anchore/grype-db"&gt;grype-db&lt;/a&gt; to build databases for unsupported schemas.&lt;/p&gt; 
&lt;p&gt;Only the latest database schema is considered to be supported. When a new database schema is introduced then the one it replaces is marked as deprecated. Deprecated schemas will continue to receive updates for at least one year after they are marked as deprecated at which point they will no longer be supported.&lt;/p&gt; 
&lt;h3&gt;Working with attestations&lt;/h3&gt; 
&lt;p&gt;Grype supports scanning SBOMs as input via stdin. Users can use &lt;a href="https://github.com/sigstore/cosign"&gt;cosign&lt;/a&gt; to verify attestations with an SBOM as its content to scan an image for vulnerabilities:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;COSIGN_EXPERIMENTAL=1 cosign verify-attestation caphill4/java-spdx-tools:latest \
| jq -r .payload \
| base64 --decode \
| jq -r .predicate.Data \
| grype
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Vulnerability Summary&lt;/h3&gt; 
&lt;h4&gt;Basic Grype Vulnerability Data Shape&lt;/h4&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt; {
  "vulnerability": {
    ...
  },
  "relatedVulnerabilities": [
    ...
  ],
  "matchDetails": [
    ...
  ],
  "artifact": {
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Vulnerability&lt;/strong&gt;: All information on the specific vulnerability that was directly matched on (e.g. ID, severity, CVSS score, fix information, links for more information)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;RelatedVulnerabilities&lt;/strong&gt;: Information pertaining to vulnerabilities found to be related to the main reported vulnerability. Maybe the vulnerability we matched on was a GitHub Security Advisory, which has an upstream CVE (in the authoritative national vulnerability database). In these cases we list the upstream vulnerabilities here.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MatchDetails&lt;/strong&gt;: This section tries to explain what we searched for while looking for a match and exactly what details on the package and vulnerability that lead to a match.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Artifact&lt;/strong&gt;: This is a subset of the information that we know about the package (when compared to the &lt;a href="https://github.com/anchore/syft"&gt;Syft&lt;/a&gt; json output, we summarize the metadata section). This has information about where within the container image or directory we found the package, what kind of package it is, licensing info, pURLs, CPEs, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Excluding file paths&lt;/h3&gt; 
&lt;p&gt;Grype can exclude files and paths from being scanned within a source by using glob expressions with one or more &lt;code&gt;--exclude&lt;/code&gt; parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype &amp;lt;source&amp;gt; --exclude './out/**/*.json' --exclude /etc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in the case of &lt;em&gt;image scanning&lt;/em&gt;, since the entire filesystem is scanned it is possible to use absolute paths like &lt;code&gt;/etc&lt;/code&gt; or &lt;code&gt;/usr/**/*.txt&lt;/code&gt; whereas &lt;em&gt;directory scans&lt;/em&gt; exclude files &lt;em&gt;relative to the specified directory&lt;/em&gt;. For example: scanning &lt;code&gt;/usr/foo&lt;/code&gt; with &lt;code&gt;--exclude ./package.json&lt;/code&gt; would exclude &lt;code&gt;/usr/foo/package.json&lt;/code&gt; and &lt;code&gt;--exclude '**/package.json'&lt;/code&gt; would exclude all &lt;code&gt;package.json&lt;/code&gt; files under &lt;code&gt;/usr/foo&lt;/code&gt;. For &lt;em&gt;directory scans&lt;/em&gt;, it is required to begin path expressions with &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;*/&lt;/code&gt;, or &lt;code&gt;**/&lt;/code&gt;, all of which will be resolved &lt;em&gt;relative to the specified scan directory&lt;/em&gt;. Keep in mind, your shell may attempt to expand wildcards, so put those parameters in single quotes, like: &lt;code&gt;'**/*.json'&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;External Sources&lt;/h3&gt; 
&lt;p&gt;Grype can be configured to incorporate external data sources for added fidelity in vulnerability matching. This feature is currently disabled by default. To enable this feature add the following to the grype config:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;external-sources:
  enable: true
  maven:
    search-upstream-by-sha1: true
    base-url: https://search.maven.org/solrsearch/select
    rate-limit: 300ms # Time between Maven API requests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also configure the base-url if you're using another registry as your maven endpoint.&lt;/p&gt; 
&lt;p&gt;The rate at which Maven API requests are made can be configured to match your environment's requirements. The default is 300ms between requests.&lt;/p&gt; 
&lt;h3&gt;Output formats&lt;/h3&gt; 
&lt;p&gt;The output format for Grype is configurable as well:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt; -o &amp;lt;format&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where the formats available are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;table&lt;/code&gt;: A columnar summary (default).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cyclonedx&lt;/code&gt;: An XML report conforming to the &lt;a href="https://cyclonedx.org/specification/overview/"&gt;CycloneDX 1.6 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cyclonedx-json&lt;/code&gt;: A JSON report conforming to the &lt;a href="https://cyclonedx.org/specification/overview/"&gt;CycloneDX 1.6 specification&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: Use this to get as much information out of Grype as possible!&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sarif&lt;/code&gt;: Use this option to get a &lt;a href="https://docs.oasis-open.org/sarif/sarif/v2.1.0/sarif-v2.1.0.html"&gt;SARIF&lt;/a&gt; report (Static Analysis Results Interchange Format)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;template&lt;/code&gt;: Lets the user specify the output format. See &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#using-templates"&gt;"Using templates"&lt;/a&gt; below.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Using templates&lt;/h3&gt; 
&lt;p&gt;Grype lets you define custom output formats, using &lt;a href="https://golang.org/pkg/text/template/"&gt;Go templates&lt;/a&gt;. Here's how it works:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Define your format as a Go template, and save this template as a file.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set the output format to "template" (&lt;code&gt;-o template&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Specify the path to the template file (&lt;code&gt;-t ./path/to/custom.template&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Grype's template processing uses the same data models as the &lt;code&gt;json&lt;/code&gt; output format — so if you're wondering what data is available as you author a template, you can use the output from &lt;code&gt;grype &amp;lt;image&amp;gt; -o json&lt;/code&gt; as a reference.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; Templates can access information about the system they are running on, such as environment variables. You should never run untrusted templates.&lt;/p&gt; 
&lt;p&gt;There are several example templates in the &lt;a href="https://github.com/anchore/grype/tree/main/templates"&gt;templates&lt;/a&gt; directory in the Grype source which can serve as a starting point for a custom output format. For example, &lt;a href="https://github.com/anchore/grype/raw/main/templates/csv.tmpl"&gt;csv.tmpl&lt;/a&gt; produces a vulnerability report in CSV (comma separated value) format:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-text"&gt;"Package","Version Installed","Vulnerability ID","Severity"
"coreutils","8.30-3ubuntu2","CVE-2016-2781","Low"
"libc-bin","2.31-0ubuntu9","CVE-2016-10228","Negligible"
"libc-bin","2.31-0ubuntu9","CVE-2020-6096","Low"
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also find the template for the default "table" output format in the same place.&lt;/p&gt; 
&lt;p&gt;Grype also includes a vast array of utility templating functions from &lt;a href="http://masterminds.github.io/sprig/"&gt;sprig&lt;/a&gt; apart from the default golang &lt;a href="https://pkg.go.dev/text/template#hdr-Functions"&gt;text/template&lt;/a&gt; to allow users to customize the output from Grype.&lt;/p&gt; 
&lt;h3&gt;Gating on severity of vulnerabilities&lt;/h3&gt; 
&lt;p&gt;You can have Grype exit with an error if any vulnerabilities are reported at or above the specified severity level. This comes in handy when using Grype within a script or CI pipeline. To do this, use the &lt;code&gt;--fail-on &amp;lt;severity&amp;gt;&lt;/code&gt; CLI flag.&lt;/p&gt; 
&lt;p&gt;For example, here's how you could trigger a CI pipeline failure if any vulnerabilities are found in the &lt;code&gt;ubuntu:latest&lt;/code&gt; image with a severity of "medium" or higher:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grype ubuntu:latest --fail-on medium
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Grype returns exit code &lt;code&gt;2&lt;/code&gt; on vulnerability errors.&lt;/p&gt; 
&lt;h3&gt;Specifying matches to ignore&lt;/h3&gt; 
&lt;p&gt;If you're seeing Grype report &lt;strong&gt;false positives&lt;/strong&gt; or any other vulnerability matches that you just don't want to see, you can tell Grype to &lt;strong&gt;ignore&lt;/strong&gt; matches by specifying one or more &lt;em&gt;"ignore rules"&lt;/em&gt; in your Grype configuration file (e.g. &lt;code&gt;~/.grype.yaml&lt;/code&gt;). This causes Grype not to report any vulnerability matches that meet the criteria specified by any of your ignore rules.&lt;/p&gt; 
&lt;p&gt;Each rule can specify any combination of the following criteria:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;vulnerability ID (e.g. &lt;code&gt;"CVE-2008-4318"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;namespace (e.g. &lt;code&gt;"nvd"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;fix state (allowed values: &lt;code&gt;"fixed"&lt;/code&gt;, &lt;code&gt;"not-fixed"&lt;/code&gt;, &lt;code&gt;"wont-fix"&lt;/code&gt;, or &lt;code&gt;"unknown"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;package name (e.g. &lt;code&gt;"libcurl"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;package version (e.g. &lt;code&gt;"1.5.1"&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;package language (e.g. &lt;code&gt;"python"&lt;/code&gt;; these values are defined &lt;a href="https://github.com/anchore/syft/raw/main/syft/pkg/language.go#L14-L23"&gt;here&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;package type (e.g. &lt;code&gt;"npm"&lt;/code&gt;; these values are defined &lt;a href="https://github.com/anchore/syft/raw/main/syft/pkg/type.go#L10-L24"&gt;here&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;package location (e.g. &lt;code&gt;"/usr/local/lib/node_modules/**"&lt;/code&gt;; supports glob patterns)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here's an example &lt;code&gt;~/.grype.yaml&lt;/code&gt; that demonstrates the expected format for ignore rules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;ignore:
  # This is the full set of supported rule fields:
  - vulnerability: CVE-2008-4318
    fix-state: unknown
    # VEX fields apply when Grype reads vex data:
    vex-status: not_affected
    vex-justification: vulnerable_code_not_present
    package:
      name: libcurl
      version: 1.5.1
      type: npm
      location: "/usr/local/lib/node_modules/**"

  # We can make rules to match just by vulnerability ID:
  - vulnerability: CVE-2014-54321

  # ...or just by a single package field:
  - package:
      type: gem
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Vulnerability matches will be ignored if &lt;strong&gt;any&lt;/strong&gt; rules apply to the match. A rule is considered to apply to a given vulnerability match only if &lt;strong&gt;all&lt;/strong&gt; fields specified in the rule apply to the vulnerability match.&lt;/p&gt; 
&lt;p&gt;When you run Grype while specifying ignore rules, the following happens to the vulnerability matches that are "ignored":&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Ignored matches are &lt;strong&gt;completely hidden&lt;/strong&gt; from Grype's output, except for when using the &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;template&lt;/code&gt; output formats; however, in these two formats, the ignored matches are &lt;strong&gt;removed&lt;/strong&gt; from the existing &lt;code&gt;matches&lt;/code&gt; array field, and they are placed in a new &lt;code&gt;ignoredMatches&lt;/code&gt; array field. Each listed ignored match also has an additional field, &lt;code&gt;appliedIgnoreRules&lt;/code&gt;, which is an array of any rules that caused Grype to ignore this vulnerability match.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ignored matches &lt;strong&gt;do not&lt;/strong&gt; factor into Grype's exit status decision when using &lt;code&gt;--fail-on &amp;lt;severity&amp;gt;&lt;/code&gt;. For instance, if a user specifies &lt;code&gt;--fail-on critical&lt;/code&gt;, and all of the vulnerability matches found with a "critical" severity have been &lt;em&gt;ignored&lt;/em&gt;, Grype will exit zero.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please continue to &lt;strong&gt;&lt;a href="https://github.com/anchore/grype/issues/new/choose"&gt;report&lt;/a&gt;&lt;/strong&gt; any false positives you see! Even if you can reliably filter out false positives using ignore rules, it's very helpful to the Grype community if we have as much knowledge about Grype's false positives as possible. This helps us continuously improve Grype!&lt;/p&gt; 
&lt;h3&gt;Showing only "fixed" vulnerabilities&lt;/h3&gt; 
&lt;p&gt;If you only want Grype to report vulnerabilities &lt;strong&gt;that have a confirmed fix&lt;/strong&gt;, you can use the &lt;code&gt;--only-fixed&lt;/code&gt; flag. (This automatically adds &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#specifying-matches-to-ignore"&gt;ignore rules&lt;/a&gt; into Grype's configuration, such that vulnerabilities that aren't fixed will be ignored.)&lt;/p&gt; 
&lt;p&gt;For example, here's a scan of Alpine 3.10:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NAME          INSTALLED  FIXED-IN   VULNERABILITY   SEVERITY
apk-tools     2.10.6-r0  2.10.7-r0  CVE-2021-36159  Critical
libcrypto1.1  1.1.1k-r0             CVE-2021-3711   Critical
libcrypto1.1  1.1.1k-r0             CVE-2021-3712   High
libssl1.1     1.1.1k-r0             CVE-2021-3712   High
libssl1.1     1.1.1k-r0             CVE-2021-3711   Critical
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;...and here's the same scan, but adding the flag &lt;code&gt;--only-fixed&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NAME       INSTALLED  FIXED-IN   VULNERABILITY   SEVERITY
apk-tools  2.10.6-r0  2.10.7-r0  CVE-2021-36159  Critical
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want Grype to only report vulnerabilities &lt;strong&gt;that do not have a confirmed fix&lt;/strong&gt;, you can use the &lt;code&gt;--only-notfixed&lt;/code&gt; flag. Alternatively, you can use the &lt;code&gt;--ignore-states&lt;/code&gt; flag to filter results for vulnerabilities with specific states such as &lt;code&gt;wont-fix&lt;/code&gt; (see &lt;code&gt;--help&lt;/code&gt; for a list of valid fix states). These flags automatically add &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#specifying-matches-to-ignore"&gt;ignore rules&lt;/a&gt; into Grype's configuration, such that vulnerabilities which are fixed, or will not be fixed, will be ignored.&lt;/p&gt; 
&lt;h2&gt;VEX Support&lt;/h2&gt; 
&lt;p&gt;Grype can use VEX (Vulnerability Exploitability Exchange) data to filter false positives or provide additional context, augmenting matches. When scanning a container image, you can use the &lt;code&gt;--vex&lt;/code&gt; flag to point to one or more &lt;a href="https://github.com/openvex"&gt;OpenVEX&lt;/a&gt; documents.&lt;/p&gt; 
&lt;p&gt;VEX statements relate a product (a container image), a vulnerability, and a VEX status to express an assertion of the vulnerability's impact. There are four &lt;a href="https://github.com/openvex/spec/raw/main/OPENVEX-SPEC.md#status-labels"&gt;VEX statuses&lt;/a&gt;: &lt;code&gt;not_affected&lt;/code&gt;, &lt;code&gt;affected&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; and &lt;code&gt;under_investigation&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Here is an example of a simple OpenVEX document. (tip: use &lt;a href="https://github.com/openvex/vexctl"&gt;&lt;code&gt;vexctl&lt;/code&gt;&lt;/a&gt; to generate your own documents).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "@context": "https://openvex.dev/ns/v0.2.0",
  "@id": "https://openvex.dev/docs/public/vex-d4e9020b6d0d26f131d535e055902dd6ccf3e2088bce3079a8cd3588a4b14c78",
  "author": "A Grype User &amp;lt;jdoe@example.com&amp;gt;",
  "timestamp": "2023-07-17T18:28:47.696004345-06:00",
  "version": 1,
  "statements": [
    {
      "vulnerability": {
        "name": "CVE-2023-1255"
      },
      "products": [
        {
          "@id": "pkg:oci/alpine@sha256%3A124c7d2707904eea7431fffe91522a01e5a861a624ee31d03372cc1d138a3126",
          "subcomponents": [
            { "@id": "pkg:apk/alpine/libssl3@3.0.8-r3" },
            { "@id": "pkg:apk/alpine/libcrypto3@3.0.8-r3" }
          ]
        }
      ],
      "status": "fixed"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, Grype will use any statements in specified VEX documents with a status of &lt;code&gt;not_affected&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt; to move matches to the ignore set.&lt;/p&gt; 
&lt;p&gt;Any matches ignored as a result of VEX statements are flagged when using &lt;code&gt;--show-suppressed&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;libcrypto3  3.0.8-r3   3.0.8-r4   apk   CVE-2023-1255  Medium (suppressed by VEX)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Statements with an &lt;code&gt;affected&lt;/code&gt; or &lt;code&gt;under_investigation&lt;/code&gt; status will only be considered to augment the result set when specifically requested using the &lt;code&gt;GRYPE_VEX_ADD&lt;/code&gt; environment variable or in a configuration file.&lt;/p&gt; 
&lt;h3&gt;VEX Ignore Rules&lt;/h3&gt; 
&lt;p&gt;Ignore rules can be written to control how Grype honors VEX statements. For example, to configure Grype to only act on VEX statements when the justification is &lt;code&gt;vulnerable_code_not_present&lt;/code&gt;, you can write a rule like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;---
ignore:
  - vex-status: not_affected
    vex-justification: vulnerable_code_not_present
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the &lt;a href="https://github.com/openvex/spec/raw/main/OPENVEX-SPEC.md#status-justifications"&gt;list of justifications&lt;/a&gt; for details. You can mix &lt;code&gt;vex-status&lt;/code&gt; and &lt;code&gt;vex-justification&lt;/code&gt; with other ignore rule parameters.&lt;/p&gt; 
&lt;h2&gt;Grype's database&lt;/h2&gt; 
&lt;p&gt;When Grype performs a scan for vulnerabilities, it does so using a vulnerability database that's stored on your local filesystem, which is constructed by pulling data from a variety of publicly available vulnerability data sources. These sources include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Alpine Linux SecDB: &lt;a href="https://secdb.alpinelinux.org/"&gt;https://secdb.alpinelinux.org/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Amazon Linux ALAS: &lt;a href="https://alas.aws.amazon.com/AL2/alas.rss"&gt;https://alas.aws.amazon.com/AL2/alas.rss&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Chainguard SecDB: &lt;a href="https://packages.cgr.dev/chainguard/security.json"&gt;https://packages.cgr.dev/chainguard/security.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Debian Linux CVE Tracker: &lt;a href="https://security-tracker.debian.org/tracker/data/json"&gt;https://security-tracker.debian.org/tracker/data/json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Echo Security Advisories: &lt;a href="https://advisory.echohq.com/data.json"&gt;https://advisory.echohq.com/data.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;GitHub Security Advisories (GHSAs): &lt;a href="https://github.com/advisories"&gt;https://github.com/advisories&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;MinimOS SecDB: &lt;a href="https://packages.mini.dev/advisories/secdb/security.json"&gt;https://packages.mini.dev/advisories/secdb/security.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;National Vulnerability Database (NVD): &lt;a href="https://nvd.nist.gov/vuln/data-feeds"&gt;https://nvd.nist.gov/vuln/data-feeds&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Oracle Linux OVAL: &lt;a href="https://linux.oracle.com/security/oval/"&gt;https://linux.oracle.com/security/oval/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RedHat Linux Security Data: &lt;a href="https://access.redhat.com/hydra/rest/securitydata/"&gt;https://access.redhat.com/hydra/rest/securitydata/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;RedHat RHSAs: &lt;a href="https://www.redhat.com/security/data/oval/"&gt;https://www.redhat.com/security/data/oval/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;SUSE Linux OVAL: &lt;a href="https://ftp.suse.com/pub/projects/security/oval/"&gt;https://ftp.suse.com/pub/projects/security/oval/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ubuntu Linux Security: &lt;a href="https://people.canonical.com/~ubuntu-security/"&gt;https://people.canonical.com/~ubuntu-security/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Wolfi SecDB: &lt;a href="https://packages.wolfi.dev/os/security.json"&gt;https://packages.wolfi.dev/os/security.json&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, Grype automatically manages this database for you. Grype checks for new updates to the vulnerability database to make sure that every scan uses up-to-date vulnerability information. This behavior is configurable. For more information, see the &lt;a href="https://raw.githubusercontent.com/anchore/grype/main/#managing-grypes-database"&gt;Managing Grype's database&lt;/a&gt; section.&lt;/p&gt; 
&lt;h3&gt;How database updates work&lt;/h3&gt; 
&lt;p&gt;Grype's vulnerability database is a SQLite file, named &lt;code&gt;vulnerability.db&lt;/code&gt;. Updates to the database are atomic: the entire database is replaced and then treated as "readonly" by Grype.&lt;/p&gt; 
&lt;p&gt;Grype's first step in a database update is discovering databases that are available for retrieval. Grype does this by requesting a "latest database file" from a public endpoint:&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://grype.anchore.io/databases/v6/latest.json"&gt;https://grype.anchore.io/databases/v6/latest.json&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The latest database file contains an entry for the most recent database available for download.&lt;/p&gt; 
&lt;p&gt;Here's an example of an entry in the latest database file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;{
  "status": "active",
  "schemaVersion": "6.0.0",
  "built": "2025-02-11T04:06:41Z",
  "path": "vulnerability-db_v6.0.0_2025-02-11T01:30:51Z_1739246801.tar.zst",
  "checksum": "sha256:79bfa04265c5a32d21773ad0da1bda13c31e932fa1e1422db635c8d714038868"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With this information, Grype can find the most recently built database with the current schema version, download the database, and verify the database's integrity using the &lt;code&gt;checksum&lt;/code&gt; value.&lt;/p&gt; 
&lt;h3&gt;Managing Grype's database&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; During normal usage, &lt;em&gt;there is no need for users to manage Grype's database!&lt;/em&gt; Grype manages its database behind the scenes. However, for users that need more control, Grype provides options to manage the database more explicitly.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Local database cache directory&lt;/h4&gt; 
&lt;p&gt;By default, the database is cached on the local filesystem in the directory &lt;code&gt;$XDG_CACHE_HOME/grype/db/&amp;lt;SCHEMA-VERSION&amp;gt;/&lt;/code&gt;. For example, on macOS, the database would be stored in &lt;code&gt;~/Library/Caches/grype/db/6/&lt;/code&gt;. (For more information on XDG paths, refer to the &lt;a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;XDG Base Directory Specification&lt;/a&gt;.)&lt;/p&gt; 
&lt;p&gt;You can set the cache directory path using the environment variable &lt;code&gt;GRYPE_DB_CACHE_DIR&lt;/code&gt;. If setting that variable alone does not work, then the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable might also need to be set.&lt;/p&gt; 
&lt;h4&gt;Data staleness&lt;/h4&gt; 
&lt;p&gt;Grype needs up-to-date vulnerability information to provide accurate matches. By default, it will fail execution if the local database was not built in the last 5 days. The data staleness check is configurable via the environment variable &lt;code&gt;GRYPE_DB_MAX_ALLOWED_BUILT_AGE&lt;/code&gt; and &lt;code&gt;GRYPE_DB_VALIDATE_AGE&lt;/code&gt; or the field &lt;code&gt;max-allowed-built-age&lt;/code&gt; and &lt;code&gt;validate-age&lt;/code&gt;, under &lt;code&gt;db&lt;/code&gt;. It uses &lt;a href="https://pkg.go.dev/time#ParseDuration"&gt;golang's time duration syntax&lt;/a&gt;. Set &lt;code&gt;GRYPE_DB_VALIDATE_AGE&lt;/code&gt; or &lt;code&gt;validate-age&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to disable staleness check.&lt;/p&gt; 
&lt;h4&gt;Offline and air-gapped environments&lt;/h4&gt; 
&lt;p&gt;By default, Grype checks for a new database on every run, by making a network request over the internet. You can tell Grype not to perform this check by setting the environment variable &lt;code&gt;GRYPE_DB_AUTO_UPDATE&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;As long as you place Grype's &lt;code&gt;vulnerability.db&lt;/code&gt; and &lt;code&gt;import.json&lt;/code&gt; files in the cache directory for the expected schema version, Grype has no need to access the network. Additionally, you can get a reference to the latest database archive for download from the &lt;code&gt;grype db list&lt;/code&gt; command in an online environment, download the database archive, transfer it to your offline environment, and use &lt;code&gt;grype db import &amp;lt;db-archive-path&amp;gt;&lt;/code&gt; to use the given database in an offline capacity.&lt;/p&gt; 
&lt;p&gt;If you would like to distribute your own Grype databases internally without needing to use &lt;code&gt;db import&lt;/code&gt; manually you can leverage Grype's DB update mechanism. To do this you can craft your own &lt;code&gt;latest.json&lt;/code&gt; file similar to the public "latest database file" and change the download URL to point to an internal endpoint (e.g. a private S3 bucket, an internal file server, etc.). Any internal installation of Grype can receive database updates automatically by configuring the &lt;code&gt;db.update-url&lt;/code&gt; (same as the &lt;code&gt;GRYPE_DB_UPDATE_URL&lt;/code&gt; environment variable) to point to the hosted &lt;code&gt;latest.json&lt;/code&gt; file you've crafted.&lt;/p&gt; 
&lt;h4&gt;CLI commands for database management&lt;/h4&gt; 
&lt;p&gt;Grype provides database-specific CLI commands for users that want to control the database from the command line. Here are some of the useful commands provided:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db status&lt;/code&gt; — report the current status of Grype's database (such as its location, build date, and checksum)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db check&lt;/code&gt; — see if updates are available for the database&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db update&lt;/code&gt; — ensure the latest database has been downloaded to the cache directory (Grype performs this operation at the beginning of every scan by default)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db list&lt;/code&gt; — download the latest database file configured at &lt;code&gt;db.update-url&lt;/code&gt; and show the database available for download&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db import&lt;/code&gt; — provide grype with a database archive to explicitly use (useful for offline DB updates)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;grype db providers&lt;/code&gt; - provides a detailed list of database providers&lt;/p&gt; 
&lt;p&gt;Find complete information on Grype's database commands by running &lt;code&gt;grype db --help&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Shell completion&lt;/h2&gt; 
&lt;p&gt;Grype supplies shell completion through its CLI implementation (&lt;a href="https://github.com/spf13/cobra/raw/master/shell_completions.md"&gt;cobra&lt;/a&gt;). Generate the completion code for your shell by running one of the following commands:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;grype completion &amp;lt;bash|zsh|fish&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;go run ./cmd/grype completion &amp;lt;bash|zsh|fish&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This will output a shell script to STDOUT, which can then be used as a completion script for Grype. Running one of the above commands with the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; flags will provide instructions on how to do that for your chosen shell.&lt;/p&gt; 
&lt;h2&gt;Private Registry Authentication&lt;/h2&gt; 
&lt;h3&gt;Local Docker Credentials&lt;/h3&gt; 
&lt;p&gt;When a container runtime is not present, grype can still utilize credentials configured in common credential sources (such as &lt;code&gt;~/.docker/config.json&lt;/code&gt;). It will pull images from private registries using these credentials. The config file is where your credentials are stored when authenticating with private registries via some command like &lt;code&gt;docker login&lt;/code&gt;. For more information see the &lt;code&gt;go-containerregistry&lt;/code&gt; &lt;a href="https://github.com/google/go-containerregistry/tree/main/pkg/authn"&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;An example &lt;code&gt;config.json&lt;/code&gt; looks something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// config.json
{
  "auths": {
    "registry.example.com": {
      "username": "AzureDiamond",
      "password": "hunter2"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run the following command as an example. It details the mount/environment configuration a container needs to access a private registry:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;docker run -v ./config.json:/config/config.json -e "DOCKER_CONFIG=/config" anchore/grype:latest &amp;lt;private_image&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Docker Credentials in Kubernetes&lt;/h3&gt; 
&lt;p&gt;The below section shows a simple workflow on how to mount this config file as a secret into a container on kubernetes.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a secret. The value of &lt;code&gt;config.json&lt;/code&gt; is important. It refers to the specification detailed &lt;a href="https://github.com/google/go-containerregistry/tree/main/pkg/authn#the-config-file"&gt;here&lt;/a&gt;. Below this section is the &lt;code&gt;secret.yaml&lt;/code&gt; file that the pod configuration will consume as a volume. The key &lt;code&gt;config.json&lt;/code&gt; is important. It will end up being the name of the file when mounted into the pod. &lt;pre&gt;&lt;code class="language-#"&gt;
    apiVersion: v1
    kind: Secret
    metadata:
      name: registry-config
      namespace: grype
    data:
      config.json: &amp;lt;base64 encoded config.json&amp;gt;
    ```

    `kubectl apply -f secret.yaml`

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;Create your pod running grype. The env &lt;code&gt;DOCKER_CONFIG&lt;/code&gt; is important because it advertises where to look for the credential file. In the below example, setting &lt;code&gt;DOCKER_CONFIG=/config&lt;/code&gt; informs grype that credentials can be found at &lt;code&gt;/config/config.json&lt;/code&gt;. This is why we used &lt;code&gt;config.json&lt;/code&gt; as the key for our secret. When mounted into containers the secrets' key is used as the filename. The &lt;code&gt;volumeMounts&lt;/code&gt; section mounts our secret to &lt;code&gt;/config&lt;/code&gt;. The &lt;code&gt;volumes&lt;/code&gt; section names our volume and leverages the secret we created in step one. &lt;pre&gt;&lt;code class="language-#"&gt;
    apiVersion: v1
    kind: Pod
    spec:
      containers:
        - image: anchore/grype:latest
          name: grype-private-registry-demo
          env:
            - name: DOCKER_CONFIG
              value: /config
          volumeMounts:
          - mountPath: /config
            name: registry-config
            readOnly: true
          args:
            - &amp;lt;private_image&amp;gt;
      volumes:
      - name: registry-config
        secret:
          secretName: registry-config
    ```

    `kubectl apply -f pod.yaml`

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;The user can now run &lt;code&gt;kubectl logs grype-private-registry-demo&lt;/code&gt;. The logs should show the grype analysis for the &lt;code&gt;&amp;lt;private_image&amp;gt;&lt;/code&gt; provided in the pod configuration.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Using the above information, users should be able to configure private registry access without having to do so in the &lt;code&gt;grype&lt;/code&gt; or &lt;code&gt;syft&lt;/code&gt; configuration files. They will also not be dependent on a docker daemon, (or some other runtime software) for registry configuration and access.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;Default configuration search paths (see all with &lt;code&gt;grype config locations&lt;/code&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;.grype.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;.grype/config.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;~/.grype.yaml&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;XDG_CONFIG_HOME&amp;gt;/grype/config.yaml&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use &lt;code&gt;grype config&lt;/code&gt; to print a sample config file to stdout. Use &lt;code&gt;grype config --load&lt;/code&gt; to print the current config after loading all values to stdout.&lt;/p&gt; 
&lt;p&gt;You can specify files directly using the &lt;code&gt;--config&lt;/code&gt; / &lt;code&gt;-c&lt;/code&gt; flags (or environment variable &lt;code&gt;GRYPE_CONFIG&lt;/code&gt;) to provide your own configuration files/paths:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# Using the flag
grype &amp;lt;image&amp;gt; -c /path/to/config.yaml
# Or using the environment variable
GRYPE_CONFIG=/path/to/config.yaml grype &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Configuration options (example values are the default):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;# the output format of the vulnerability report (options: table, template, json, cyclonedx)
# when using template as the output type, you must also provide a value for 'output-template-file' (env: GRYPE_OUTPUT)
output: 'table'

# if using template output, you must provide a path to a Go template file
# see https://github.com/anchore/grype#using-templates for more information on template output
# the default path to the template file is the current working directory
# output-template-file: .grype/html.tmpl
#
# write output report to a file (default is to write to stdout) (env: GRYPE_FILE)
file: ''

# pretty-print JSON output (env: GRYPE_PRETTY)
pretty: false

# distro to match against in the format: &amp;lt;distro&amp;gt;:&amp;lt;version&amp;gt; (env: GRYPE_DISTRO)
distro: ''

# generate CPEs for packages with no CPE data (env: GRYPE_ADD_CPES_IF_NONE)
add-cpes-if-none: false

# specify the path to a Go template file (requires 'template' output to be selected) (env: GRYPE_OUTPUT_TEMPLATE_FILE)
output-template-file: ''

# enable/disable checking for application updates on startup (env: GRYPE_CHECK_FOR_APP_UPDATE)
check-for-app-update: true

# ignore matches for vulnerabilities that are not fixed (env: GRYPE_ONLY_FIXED)
only-fixed: false

# ignore matches for vulnerabilities that are fixed (env: GRYPE_ONLY_NOTFIXED)
only-notfixed: false

# ignore matches for vulnerabilities with specified comma separated fix states, options=[fixed not-fixed unknown wont-fix] (env: GRYPE_IGNORE_WONTFIX)
ignore-wontfix: ''

# an optional platform specifier for container image sources (e.g. 'linux/arm64', 'linux/arm64/v8', 'arm64', 'linux') (env: GRYPE_PLATFORM)
platform: ''

# upon scanning, if a severity is found at or above the given severity then the return code will be 1
# default is unset which will skip this validation (options: negligible, low, medium, high, critical) (env: GRYPE_FAIL_ON_SEVERITY)
fail-on-severity: ''

# show suppressed/ignored vulnerabilities in the output (only supported with table output format) (env: GRYPE_SHOW_SUPPRESSED)
show-suppressed: false

# orient results by CVE instead of the original vulnerability ID when possible (env: GRYPE_BY_CVE)
by-cve: false

# sort the match results with the given strategy, options=[package severity epss risk kev vulnerability] (env: GRYPE_SORT_BY)
sort-by: 'risk'

# same as --name; set the name of the target being analyzed (env: GRYPE_NAME)
name: ''

# allows users to specify which image source should be used to generate the sbom
# valid values are: registry, docker, podman (env: GRYPE_DEFAULT_IMAGE_PULL_SOURCE)
default-image-pull-source: ''

search:
  # selection of layers to analyze, options=[squashed all-layers] (env: GRYPE_SEARCH_SCOPE)
  scope: 'squashed'

  # search within archives that do not contain a file index to search against (tar, tar.gz, tar.bz2, etc)
  # note: enabling this may result in a performance impact since all discovered compressed tars will be decompressed
  # note: for now this only applies to the java package cataloger (env: GRYPE_SEARCH_UNINDEXED_ARCHIVES)
  unindexed-archives: false

  # search within archives that do contain a file index to search against (zip)
  # note: for now this only applies to the java package cataloger (env: GRYPE_SEARCH_INDEXED_ARCHIVES)
  indexed-archives: true

# A list of vulnerability ignore rules, one or more property may be specified and all matching vulnerabilities will be ignored.
# This is the full set of supported rule fields:
#   - vulnerability: CVE-2008-4318
#     fix-state: unknown
#     package:
#       name: libcurl
#       version: 1.5.1
#       type: npm
#       location: "/usr/local/lib/node_modules/**"
#
# VEX fields apply when Grype reads vex data:
#   - vex-status: not_affected
#     vex-justification: vulnerable_code_not_present
ignore: []

# a list of globs to exclude from scanning, for example:
#   - '/etc/**'
#   - './out/**/*.json'
# same as --exclude (env: GRYPE_EXCLUDE)
exclude: []

external-sources:
  # enable Grype searching network source for additional information (env: GRYPE_EXTERNAL_SOURCES_ENABLE)
  enable: false

  maven:
    # search for Maven artifacts by SHA1 (env: GRYPE_EXTERNAL_SOURCES_MAVEN_SEARCH_MAVEN_UPSTREAM)
    search-maven-upstream: true

    # base URL of the Maven repository to search (env: GRYPE_EXTERNAL_SOURCES_MAVEN_BASE_URL)
    base-url: 'https://search.maven.org/solrsearch/select'

    # (env: GRYPE_EXTERNAL_SOURCES_MAVEN_RATE_LIMIT)
    rate-limit: 300ms

match:
  java:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_JAVA_USING_CPES)
    using-cpes: false

  jvm:
    # (env: GRYPE_MATCH_JVM_USING_CPES)
    using-cpes: true

  dotnet:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_DOTNET_USING_CPES)
    using-cpes: false

  golang:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_GOLANG_USING_CPES)
    using-cpes: false

    # use CPE matching to find vulnerabilities for the Go standard library (env: GRYPE_MATCH_GOLANG_ALWAYS_USE_CPE_FOR_STDLIB)
    always-use-cpe-for-stdlib: true

    # allow comparison between main module pseudo-versions (e.g. v0.0.0-20240413-2b432cf643...) (env: GRYPE_MATCH_GOLANG_ALLOW_MAIN_MODULE_PSEUDO_VERSION_COMPARISON)
    allow-main-module-pseudo-version-comparison: false

  javascript:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_JAVASCRIPT_USING_CPES)
    using-cpes: false

  python:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_PYTHON_USING_CPES)
    using-cpes: false

  ruby:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_RUBY_USING_CPES)
    using-cpes: false

  rust:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_RUST_USING_CPES)
    using-cpes: false

  stock:
    # use CPE matching to find vulnerabilities (env: GRYPE_MATCH_STOCK_USING_CPES)
    using-cpes: true


registry:
  # skip TLS verification when communicating with the registry (env: GRYPE_REGISTRY_INSECURE_SKIP_TLS_VERIFY)
  insecure-skip-tls-verify: false

  # use http instead of https when connecting to the registry (env: GRYPE_REGISTRY_INSECURE_USE_HTTP)
  insecure-use-http: false

  # Authentication credentials for specific registries. Each entry describes authentication for a specific authority:
  # -   authority: the registry authority URL the URL to the registry (e.g. "docker.io", "localhost:5000", etc.) (env: SYFT_REGISTRY_AUTH_AUTHORITY)
  #     username: a username if using basic credentials (env: SYFT_REGISTRY_AUTH_USERNAME)
  #     password: a corresponding password (env: SYFT_REGISTRY_AUTH_PASSWORD)
  #     token: a token if using token-based authentication, mutually exclusive with username/password (env: SYFT_REGISTRY_AUTH_TOKEN)
  #     tls-cert: filepath to the client certificate used for TLS authentication to the registry (env: SYFT_REGISTRY_AUTH_TLS_CERT)
  #     tls-key: filepath to the client key used for TLS authentication to the registry (env: SYFT_REGISTRY_AUTH_TLS_KEY)
  auth: []

  # filepath to a CA certificate (or directory containing *.crt, *.cert, *.pem) used to generate the client certificate (env: GRYPE_REGISTRY_CA_CERT)
  ca-cert: ''

# a list of VEX documents to consider when producing scanning results (env: GRYPE_VEX_DOCUMENTS)
vex-documents: []

# VEX statuses to consider as ignored rules (env: GRYPE_VEX_ADD)
vex-add: []

# match kernel-header packages with upstream kernel as kernel vulnerabilities (env: GRYPE_MATCH_UPSTREAM_KERNEL_HEADERS)
match-upstream-kernel-headers: false

db:
  # location to write the vulnerability database cache (env: GRYPE_DB_CACHE_DIR)
  cache-dir: '~/Library/Caches/grype/db'

  # URL of the vulnerability database (env: GRYPE_DB_UPDATE_URL)
  update-url: 'https://grype.anchore.io/databases'

  # certificate to trust download the database and listing file (env: GRYPE_DB_CA_CERT)
  ca-cert: ''

  # check for database updates on execution (env: GRYPE_DB_AUTO_UPDATE)
  auto-update: true

  # validate the database matches the known hash each execution (env: GRYPE_DB_VALIDATE_BY_HASH_ON_START)
  validate-by-hash-on-start: true

  # ensure db build is no older than the max-allowed-built-age (env: GRYPE_DB_VALIDATE_AGE)
  validate-age: true

  # Max allowed age for vulnerability database,
  # age being the time since it was built
  # Default max age is 120h (or five days) (env: GRYPE_DB_MAX_ALLOWED_BUILT_AGE)
  max-allowed-built-age: 120h0m0s

  # fail the scan if unable to check for database updates (env: GRYPE_DB_REQUIRE_UPDATE_CHECK)
  require-update-check: false

  # Timeout for downloading GRYPE_DB_UPDATE_URL to see if the database needs to be downloaded
  # This file is ~156KiB as of 2024-04-17 so the download should be quick; adjust as needed (env: GRYPE_DB_UPDATE_AVAILABLE_TIMEOUT)
  update-available-timeout: 30s

  # Timeout for downloading actual vulnerability DB
  # The DB is ~156MB as of 2024-04-17 so slower connections may exceed the default timeout; adjust as needed (env: GRYPE_DB_UPDATE_DOWNLOAD_TIMEOUT)
  update-download-timeout: 5m0s

  # Maximum frequency to check for vulnerability database updates (env: GRYPE_DB_MAX_UPDATE_CHECK_FREQUENCY)
  max-update-check-frequency: 2h0m0s

log:
  # suppress all logging output (env: GRYPE_LOG_QUIET)
  quiet: false

  # explicitly set the logging level (available: [error warn info debug trace]) (env: GRYPE_LOG_LEVEL)
  level: 'warn'

  # file path to write logs to (env: GRYPE_LOG_FILE)
  file: ''

dev:
  # capture resource profiling data (available: [cpu, mem]) (env: GRYPE_DEV_PROFILE)
  profile: ''

  db:
    # show sql queries in trace logging (requires -vv) (env: GRYPE_DEV_DB_DEBUG)
    debug: false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Future plans&lt;/h2&gt; 
&lt;p&gt;The following areas of potential development are currently being investigated:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Support for allowlist, package mapping&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Grype Logo&lt;/h2&gt; 
&lt;p xmlns:cc="http://creativecommons.org/ns#" xmlns:dct="http://purl.org/dc/terms/"&gt;&lt;a property="dct:title" rel="cc:attributionURL" href="https://anchore.com/wp-content/uploads/2024/11/grype-logo.svg"&gt;Grype Logo&lt;/a&gt; by &lt;a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://anchore.com/"&gt;Anchore&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="license noopener noreferrer" style="display:inline-block;"&gt;CC BY 4.0&lt;img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?sanitize=true" alt="" /&gt;&lt;img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?sanitize=true" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>onsi/ginkgo</title>
      <link>https://github.com/onsi/ginkgo</link>
      <description>&lt;p&gt;A Modern Testing Framework for Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://onsi.github.io/ginkgo/images/ginkgo.png" alt="Ginkgo" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/onsi/ginkgo/actions?query=workflow%3Atest+branch%3Amaster"&gt;&lt;img src="https://github.com/onsi/ginkgo/actions/workflows/test.yml/badge.svg?branch=master" alt="test" /&gt;&lt;/a&gt; | &lt;a href="https://onsi.github.io/ginkgo/"&gt;Ginkgo Docs&lt;/a&gt;&lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;Ginkgo&lt;/h1&gt; 
&lt;p&gt;Ginkgo is a mature testing framework for Go designed to help you write expressive specs. Ginkgo builds on top of Go's &lt;code&gt;testing&lt;/code&gt; foundation and is complemented by the &lt;a href="https://github.com/onsi/gomega"&gt;Gomega&lt;/a&gt; matcher library. Together, Ginkgo and Gomega let you express the intent behind your specs clearly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    . "github.com/onsi/ginkgo/v2"
    . "github.com/onsi/gomega"
    ...
)

var _ = Describe("Checking books out of the library", Label("library"), func() {
    var library *libraries.Library
    var book *books.Book
    var valjean *users.User
    BeforeEach(func() {
        library = libraries.NewClient()
        book = &amp;amp;books.Book{
            Title: "Les Miserables",
            Author: "Victor Hugo",
        }
        valjean = users.NewUser("Jean Valjean")
    })

    When("the library has the book in question", func() {
        BeforeEach(func(ctx SpecContext) {
            Expect(library.Store(ctx, book)).To(Succeed())
        })

        Context("and the book is available", func() {
            It("lends it to the reader", func(ctx SpecContext) {
                Expect(valjean.Checkout(ctx, library, "Les Miserables")).To(Succeed())
                Expect(valjean.Books()).To(ContainElement(book))
                Expect(library.UserWithBook(ctx, book)).To(Equal(valjean))
            }, SpecTimeout(time.Second * 5))
        })

        Context("but the book has already been checked out", func() {
            var javert *users.User
            BeforeEach(func(ctx SpecContext) {
                javert = users.NewUser("Javert")
                Expect(javert.Checkout(ctx, library, "Les Miserables")).To(Succeed())
            })

            It("tells the user", func(ctx SpecContext) {
                err := valjean.Checkout(ctx, library, "Les Miserables")
                Expect(err).To(MatchError("Les Miserables is currently checked out"))
            }, SpecTimeout(time.Second * 5))

            It("lets the user place a hold and get notified later", func(ctx SpecContext) {
                Expect(valjean.Hold(ctx, library, "Les Miserables")).To(Succeed())
                Expect(valjean.Holds(ctx)).To(ContainElement(book))

                By("when Javert returns the book")
                Expect(javert.Return(ctx, library, book)).To(Succeed())

                By("it eventually informs Valjean")
                notification := "Les Miserables is ready for pick up"
                Eventually(ctx, valjean.Notifications).Should(ContainElement(notification))

                Expect(valjean.Checkout(ctx, library, "Les Miserables")).To(Succeed())
                Expect(valjean.Books(ctx)).To(ContainElement(book))
                Expect(valjean.Holds(ctx)).To(BeEmpty())
            }, SpecTimeout(time.Second * 10))
        })  
    })

    When("the library does not have the book in question", func() {
        It("tells the reader the book is unavailable", func(ctx SpecContext) {
            err := valjean.Checkout(ctx, library, "Les Miserables")
            Expect(err).To(MatchError("Les Miserables is not in the library catalog"))
        }, SpecTimeout(time.Second * 5))
    })
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Jump to the &lt;a href="https://onsi.github.io/ginkgo/"&gt;docs&lt;/a&gt; to learn more. It's easy to &lt;a href="https://onsi.github.io/ginkgo/#bootstrapping-a-suite"&gt;bootstrap&lt;/a&gt; and start writing your &lt;a href="https://onsi.github.io/ginkgo/#adding-specs-to-a-suite"&gt;first specs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you have a question, comment, bug report, feature request, etc. please open a &lt;a href="https://github.com/onsi/ginkgo/issues/new"&gt;GitHub issue&lt;/a&gt;, or visit the &lt;a href="https://app.slack.com/client/T029RQSE6/CQQ50BBNW"&gt;Ginkgo Slack channel&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Capabilities&lt;/h2&gt; 
&lt;p&gt;Whether writing basic unit specs, complex integration specs, or even performance specs - Ginkgo gives you an expressive Domain-Specific Language (DSL) that will be familiar to users coming from frameworks such as &lt;a href="https://github.com/Quick/Quick"&gt;Quick&lt;/a&gt;, &lt;a href="https://rspec.info"&gt;RSpec&lt;/a&gt;, &lt;a href="https://jasmine.github.io"&gt;Jasmine&lt;/a&gt;, and &lt;a href="https://lunarmodules.github.io/busted/"&gt;Busted&lt;/a&gt;. This style of testing is sometimes referred to as "Behavior-Driven Development" (BDD) though Ginkgo's utility extends beyond acceptance-level testing.&lt;/p&gt; 
&lt;p&gt;With Ginkgo's DSL you can use nestable &lt;a href="https://onsi.github.io/ginkgo/#organizing-specs-with-container-nodes"&gt;&lt;code&gt;Describe&lt;/code&gt;, &lt;code&gt;Context&lt;/code&gt; and &lt;code&gt;When&lt;/code&gt; container nodes&lt;/a&gt; to help you organize your specs. &lt;a href="https://onsi.github.io/ginkgo/#extracting-common-setup-beforeeach"&gt;&lt;code&gt;BeforeEach&lt;/code&gt; and &lt;code&gt;AfterEach&lt;/code&gt; setup nodes&lt;/a&gt; for setup and cleanup. &lt;a href="https://onsi.github.io/ginkgo/#spec-subjects-it"&gt;&lt;code&gt;It&lt;/code&gt; and &lt;code&gt;Specify&lt;/code&gt; subject nodes&lt;/a&gt; that hold your assertions. &lt;a href="https://onsi.github.io/ginkgo/#suite-setup-and-cleanup-beforesuite-and-aftersuite"&gt;&lt;code&gt;BeforeSuite&lt;/code&gt; and &lt;code&gt;AfterSuite&lt;/code&gt; nodes&lt;/a&gt; to prep for and cleanup after a suite... and &lt;a href="https://onsi.github.io/ginkgo/#writing-specs"&gt;much more!&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;At runtime, Ginkgo can run your specs in reproducibly &lt;a href="https://onsi.github.io/ginkgo/#spec-randomization"&gt;random order&lt;/a&gt; and has sophisticated support for &lt;a href="https://onsi.github.io/ginkgo/#spec-parallelization"&gt;spec parallelization&lt;/a&gt;. In fact, running specs in parallel is as easy as&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;ginkgo -p
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By following &lt;a href="https://onsi.github.io/ginkgo/#patterns-for-parallel-integration-specs"&gt;established patterns for writing parallel specs&lt;/a&gt; you can build even large, complex integration suites that parallelize cleanly and run performantly. And you don't have to worry about your spec suite hanging or leaving a mess behind - Ginkgo provides a per-node &lt;code&gt;context.Context&lt;/code&gt; and the capability to interrupt the spec after a set period of time - and then clean up.&lt;/p&gt; 
&lt;p&gt;As your suites grow Ginkgo helps you keep your specs organized with &lt;a href="https://onsi.github.io/ginkgo/#spec-labels"&gt;labels&lt;/a&gt; and lets you easily run &lt;a href="https://onsi.github.io/ginkgo/#filtering-specs"&gt;subsets of specs&lt;/a&gt;, either &lt;a href="https://onsi.github.io/ginkgo/#focused-specs"&gt;programmatically&lt;/a&gt; or on the &lt;a href="https://onsi.github.io/ginkgo/#combining-filters"&gt;command line&lt;/a&gt;. And Ginkgo's reporting infrastructure generates machine-readable output in a &lt;a href="https://onsi.github.io/ginkgo/#generating-machine-readable-reports"&gt;variety of formats&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; allows you to build your own &lt;a href="https://onsi.github.io/ginkgo/#generating-reports-programmatically"&gt;custom reporting infrastructure&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Ginkgo ships with &lt;code&gt;ginkgo&lt;/code&gt;, a &lt;a href="https://onsi.github.io/ginkgo/#ginkgo-cli-overview"&gt;command line tool&lt;/a&gt; with support for generating, running, filtering, and profiling Ginkgo suites. You can even have Ginkgo automatically run your specs when it detects a change with &lt;code&gt;ginkgo watch&lt;/code&gt;, enabling rapid feedback loops during test-driven development.&lt;/p&gt; 
&lt;p&gt;And that's just Ginkgo! &lt;a href="https://onsi.github.io/gomega/"&gt;Gomega&lt;/a&gt; brings a rich, mature, family of &lt;a href="https://onsi.github.io/gomega/#provided-matchers"&gt;assertions and matchers&lt;/a&gt; to your suites. With Gomega you can easily mix &lt;a href="https://onsi.github.io/ginkgo/#patterns-for-asynchronous-testing"&gt;synchronous and asynchronous assertions&lt;/a&gt; in your specs. You can even build your own set of expressive domain-specific matchers quickly and easily by composing Gomega's &lt;a href="https://onsi.github.io/ginkgo/#building-custom-matchers"&gt;existing building blocks&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Happy Testing!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Ginkgo is MIT-Licensed&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/onsi/ginkgo/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>labstack/echo</title>
      <link>https://github.com/labstack/echo</link>
      <description>&lt;p&gt;High performance, minimalist Go web framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://sourcegraph.com/github.com/labstack/echo?badge"&gt;&lt;img src="https://sourcegraph.com/github.com/labstack/echo/-/badge.svg?style=flat-square" alt="Sourcegraph" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/labstack/echo/v4"&gt;&lt;img src="http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square" alt="GoDoc" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/labstack/echo"&gt;&lt;img src="https://goreportcard.com/badge/github.com/labstack/echo?style=flat-square" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://github.com/labstack/echo/actions"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/labstack/echo/echo.yml?style=flat-square" alt="GitHub Workflow Status (with event)" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/labstack/echo"&gt;&lt;img src="https://img.shields.io/codecov/c/github/labstack/echo.svg?style=flat-square" alt="Codecov" /&gt;&lt;/a&gt; &lt;a href="https://github.com/labstack/echo/discussions"&gt;&lt;img src="https://img.shields.io/badge/community-forum-00afd1.svg?style=flat-square" alt="Forum" /&gt;&lt;/a&gt; &lt;a href="https://twitter.com/labstack"&gt;&lt;img src="https://img.shields.io/badge/twitter-@labstack-55acee.svg?style=flat-square" alt="Twitter" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/labstack/echo/master/LICENSE"&gt;&lt;img src="http://img.shields.io/badge/license-mit-blue.svg?style=flat-square" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Echo&lt;/h2&gt; 
&lt;p&gt;High performance, extensible, minimalist Go web framework.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://echo.labstack.com"&gt;Official website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://echo.labstack.com/docs/quick-start"&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://echo.labstack.com/docs/category/middleware"&gt;Middlewares&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Help and questions: &lt;a href="https://github.com/labstack/echo/discussions"&gt;Github Discussions&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Feature Overview&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Optimized HTTP router which smartly prioritize routes&lt;/li&gt; 
 &lt;li&gt;Build robust and scalable RESTful APIs&lt;/li&gt; 
 &lt;li&gt;Group APIs&lt;/li&gt; 
 &lt;li&gt;Extensible middleware framework&lt;/li&gt; 
 &lt;li&gt;Define middleware at root, group or route level&lt;/li&gt; 
 &lt;li&gt;Data binding for JSON, XML and form payload&lt;/li&gt; 
 &lt;li&gt;Handy functions to send variety of HTTP responses&lt;/li&gt; 
 &lt;li&gt;Centralized HTTP error handling&lt;/li&gt; 
 &lt;li&gt;Template rendering with any template engine&lt;/li&gt; 
 &lt;li&gt;Define your format for the logger&lt;/li&gt; 
 &lt;li&gt;Highly customizable&lt;/li&gt; 
 &lt;li&gt;Automatic TLS via Let’s Encrypt&lt;/li&gt; 
 &lt;li&gt;HTTP/2 support&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;div&gt; 
 &lt;a href="https://encore.dev" style="display: inline-flex; align-items: center; gap: 10px"&gt; &lt;img src="https://user-images.githubusercontent.com/78424526/214602214-52e0483a-b5fc-4d4c-b03e-0b7b23e012df.svg?sanitize=true" height="28px" alt="encore icon" /&gt; &lt;b&gt;Encore – the platform for building Go-based cloud backends&lt;/b&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;p&gt;Click &lt;a href="https://github.com/sponsors/labstack"&gt;here&lt;/a&gt; for more information on sponsorship.&lt;/p&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;Date: 2020/11/11&lt;br /&gt; Source: &lt;a href="https://github.com/vishr/web-framework-benchmark"&gt;https://github.com/vishr/web-framework-benchmark&lt;/a&gt;&lt;br /&gt; Lower is better!&lt;/p&gt; 
&lt;img src="https://i.imgur.com/qwPNQbl.png" /&gt; 
&lt;img src="https://i.imgur.com/s8yKQjx.png" /&gt; 
&lt;p&gt;The benchmarks above were run on an Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz&lt;/p&gt; 
&lt;h2&gt;&lt;a href="https://echo.labstack.com/guide"&gt;Guide&lt;/a&gt;&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;// go get github.com/labstack/echo/{version}
go get github.com/labstack/echo/v4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Latest version of Echo supports last four Go major &lt;a href="https://go.dev/doc/devel/release"&gt;releases&lt;/a&gt; and might work with older versions.&lt;/p&gt; 
&lt;h3&gt;Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
  "github.com/labstack/echo/v4"
  "github.com/labstack/echo/v4/middleware"
  "log/slog"
  "net/http"
)

func main() {
  // Echo instance
  e := echo.New()

  // Middleware
  e.Use(middleware.Logger())
  e.Use(middleware.Recover())

  // Routes
  e.GET("/", hello)

  // Start server
  if err := e.Start(":8080"); err != nil &amp;amp;&amp;amp; !errors.Is(err, http.ErrServerClosed) {
    slog.Error("failed to start server", "error", err)
  }
}

// Handler
func hello(c echo.Context) error {
  return c.String(http.StatusOK, "Hello, World!")
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Official middleware repositories&lt;/h1&gt; 
&lt;p&gt;Following list of middleware is maintained by Echo team.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Repository&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/labstack/echo-jwt"&gt;github.com/labstack/echo-jwt&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/golang-jwt/jwt"&gt;JWT&lt;/a&gt; middleware&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/labstack/echo-contrib"&gt;github.com/labstack/echo-contrib&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/casbin/casbin"&gt;casbin&lt;/a&gt;, &lt;a href="https://github.com/gorilla/sessions"&gt;gorilla/sessions&lt;/a&gt;, &lt;a href="https://github.com/uber/jaeger-client-go"&gt;jaegertracing&lt;/a&gt;, &lt;a href="https://github.com/prometheus/client_golang/"&gt;prometheus&lt;/a&gt;, &lt;a href="https://pkg.go.dev/net/http/pprof"&gt;pprof&lt;/a&gt;, &lt;a href="https://github.com/openzipkin/zipkin-go"&gt;zipkin&lt;/a&gt; middlewares&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h1&gt;Third-party middleware repositories&lt;/h1&gt; 
&lt;p&gt;Be careful when adding 3rd party middleware. Echo teams does not have time or manpower to guarantee safety and quality of middlewares in this list.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Repository&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/deepmap/oapi-codegen"&gt;deepmap/oapi-codegen&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Automatically generate RESTful API documentation with &lt;a href="https://swagger.io/specification/"&gt;OpenAPI&lt;/a&gt; Client and Server Code Generator&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/swaggo/echo-swagger"&gt;github.com/swaggo/echo-swagger&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Automatically generate RESTful API documentation with &lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt; 2.0.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/ziflex/lecho"&gt;github.com/ziflex/lecho&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://github.com/rs/zerolog"&gt;Zerolog&lt;/a&gt; logging library wrapper for Echo logger interface.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/brpaz/echozap"&gt;github.com/brpaz/echozap&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Uber´s &lt;a href="https://github.com/uber-go/zap"&gt;Zap&lt;/a&gt; logging library wrapper for Echo logger interface.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/samber/slog-echo"&gt;github.com/samber/slog-echo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Go &lt;a href="https://pkg.go.dev/golang.org/x/exp/slog"&gt;slog&lt;/a&gt; logging library wrapper for Echo logger interface.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/darkweak/souin/tree/master/plugins/echo"&gt;github.com/darkweak/souin/plugins/echo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;HTTP cache system based on &lt;a href="https://github.com/darkweak/souin"&gt;Souin&lt;/a&gt; to automatically get your endpoints cached. It supports some distributed and non-distributed storage systems depending your needs.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/mikestefanello/pagoda"&gt;github.com/mikestefanello/pagoda&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Rapid, easy full-stack web development starter kit built with Echo.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://github.com/go-woo/protoc-gen-echo"&gt;github.com/go-woo/protoc-gen-echo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;ProtoBuf generate Echo server side code&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Please send a PR to add your own library here.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Use issues for everything&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For a small change, just send a PR.&lt;/li&gt; 
 &lt;li&gt;For bigger changes open an issue for discussion before sending a PR.&lt;/li&gt; 
 &lt;li&gt;PR should have: 
  &lt;ul&gt; 
   &lt;li&gt;Test case&lt;/li&gt; 
   &lt;li&gt;Documentation&lt;/li&gt; 
   &lt;li&gt;Example (If it makes sense)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;You can also contribute by: 
  &lt;ul&gt; 
   &lt;li&gt;Reporting issues&lt;/li&gt; 
   &lt;li&gt;Suggesting new features or enhancements&lt;/li&gt; 
   &lt;li&gt;Improve/fix documentation&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/vishr"&gt;Vishal Rana&lt;/a&gt; (Author)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nr17"&gt;Nitin Rana&lt;/a&gt; (Consultant)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/lammel"&gt;Roland Lammel&lt;/a&gt; (Maintainer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aldas"&gt;Martti T.&lt;/a&gt; (Maintainer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pafuent"&gt;Pablo Andres Fuente&lt;/a&gt; (Maintainer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/labstack/echo/graphs/contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://github.com/labstack/echo/raw/master/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>projectcalico/calico</title>
      <link>https://github.com/projectcalico/calico</link>
      <description>&lt;p&gt;Cloud native networking and network security&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/projectcalico/calico"&gt;&lt;img src="https://goreportcard.com/badge/github.com/projectcalico/calico" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://artifacthub.io/packages/helm/projectcalico/tigera-operator"&gt;&lt;img src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/tigera-operator" alt="ArtifactHub" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/projectcalico/calico/master/calico/LICENSE"&gt;&lt;img src="https://img.shields.io/badge/license-Apache-blue.svg?sanitize=true" alt="License" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/projectcalico/api"&gt;&lt;img src="https://pkg.go.dev/badge/k8s.io/kubernetes.svg?sanitize=true" alt="GoPkg" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/6064"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/6064/badge" alt="CII Best Practices" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;h1&gt;Calico&lt;/h1&gt; 
 &lt;h2&gt; &lt;a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart"&gt;Quickstart&lt;/a&gt; | &lt;a href="https://projectcalico.docs.tigera.io"&gt;Docs&lt;/a&gt; | &lt;a href="https://raw.githubusercontent.com/projectcalico/calico/master/CONTRIBUTING.md"&gt;Contribute&lt;/a&gt; | &lt;a href="https://slack.projectcalico.org"&gt;Slack&lt;/a&gt; | &lt;a href="https://github.com/projectcalico/calico/releases"&gt;Releases&lt;/a&gt; &lt;/h2&gt; 
&lt;/div&gt; 
&lt;h2&gt;🐾 Welcome to Project Calico!&lt;/h2&gt; 
&lt;p&gt;Project Calico, created and maintained by &lt;a href="https://www.tigera.io/"&gt;Tigera&lt;/a&gt;, is an open-source project with an active development and user community. Calico Open Source has grown to be the most widely adopted solution for container networking and security, powering 8M+ nodes daily across 166 countries.&lt;/p&gt; 
&lt;h2&gt;🌟 Why use Calico?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Data Plane Choice&lt;/strong&gt;: eBPF, standard Linux, Windows, and VPP — versatility in network solutions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;: Works across multiple distros, multiple clouds, bare metal, and VMs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optimized Performance&lt;/strong&gt;: Engineered for high speed and low CPU usage, maximizing your cluster investments.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scalable Architecture&lt;/strong&gt;: Grows seamlessly with your Kubernetes clusters without sacrificing performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Advanced Security&lt;/strong&gt;: Get granular access controls and WireGuard encryption.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Kubernetes Networking Policy Support&lt;/strong&gt;: Continually defining excellence in Kubernetes network policy standards and support.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Vibrant Contributor Community&lt;/strong&gt;: Over 200 contributors from a wide array of global companies.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexible networking&lt;/strong&gt;: An array of networking tools at your disposal, including BGP, VXLAN, service advertisement, and more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://www.tigera.io/app/uploads/2024/02/Ecosystem_shrunken_2023.svg?sanitize=true" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;🤝 Join the Calico Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://www.tigera.io/project-calico/calico-big-cats-ambassador-program/#meet-calico-big-cats"&gt;Calico Big Cats&lt;/a&gt;: Become an ambassador and share your journey&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://calendar.google.com/calendar/u/0/embed?src=tigera.io_uunmavdev5ndovf0hc4frtl0i0@group.calendar.google.com"&gt;Community Meetings&lt;/a&gt;: Engage and contribute&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/projectcalico/calico/labels/good%20first%20issue"&gt;Contribute on GitHub&lt;/a&gt;: Start with 'good first issues'&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://slack.projectcalico.org/"&gt;Connect on Slack&lt;/a&gt;: Join the conversation with fellow contributors and our developers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;💡 Contributing to Project Calico&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.tigera.io/calico/latest/about"&gt;Get Started with Project Calico&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/orgs/projectcalico/repositories"&gt;Repositories&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/projectcalico/calico/raw/master/CONTRIBUTING_DOCS.md"&gt;Contribute to our docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Documentation: &lt;a href="https://docs.tigera.io/calico/latest/about/training-resources"&gt;Dive into our training and resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/projectcalico/calico/issues"&gt;Make Calico better&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🛠️ Projects We Maintain&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/projectcalico/api"&gt;Calico Golang API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tigera/operator"&gt;Calico operator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/projectcalico/vpp-dataplane"&gt;VPP dataplane&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/projectcalico/bird"&gt;Calico BIRD&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📢 Stay Connected&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Subscribe: &lt;a href="https://www.tigera.io/project-calico/#:~:text=Join%20Calico%20Open%20Source%20community%20newsletter"&gt;Join our newsletter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCFpTnXDNcBoXI4gqCDmegFA"&gt;YouTube channel for updates &amp;amp; tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tigera.io/blog/?_sft_category=technical-blog"&gt;Technical Blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://www.tigera.io/careers/"&gt;Careers&lt;/a&gt;: Passionate about open source? Join our team.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>opencontainers/runc</title>
      <link>https://github.com/opencontainers/runc</link>
      <description>&lt;p&gt;CLI tool for spawning and running containers according to the OCI specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;runc&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://goreportcard.com/report/github.com/opencontainers/runc"&gt;&lt;img src="https://goreportcard.com/badge/github.com/opencontainers/runc" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://pkg.go.dev/github.com/opencontainers/runc"&gt;&lt;img src="https://pkg.go.dev/badge/github.com/opencontainers/runc.svg?sanitize=true" alt="Go Reference" /&gt;&lt;/a&gt; &lt;a href="https://bestpractices.coreinfrastructure.org/projects/588"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/588/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://github.com/opencontainers/runc/actions?query=workflow%3Avalidate"&gt;&lt;img src="https://github.com/opencontainers/runc/workflows/validate/badge.svg?sanitize=true" alt="gha/validate" /&gt;&lt;/a&gt; &lt;a href="https://github.com/opencontainers/runc/actions?query=workflow%3Aci"&gt;&lt;img src="https://github.com/opencontainers/runc/workflows/ci/badge.svg?sanitize=true" alt="gha/ci" /&gt;&lt;/a&gt; &lt;a href="https://cirrus-ci.com/github/opencontainers/runc"&gt;&lt;img src="https://api.cirrus-ci.com/github/opencontainers/runc.svg?sanitize=true" alt="CirrusCI" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; is a CLI tool for spawning and running containers on Linux according to the OCI specification.&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;You can find official releases of &lt;code&gt;runc&lt;/code&gt; on the &lt;a href="https://github.com/opencontainers/runc/releases"&gt;release&lt;/a&gt; page.&lt;/p&gt; 
&lt;p&gt;All releases are signed by one of the keys listed in the &lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/runc.keyring"&gt;&lt;code&gt;runc.keyring&lt;/code&gt; file in the root of this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;The reporting process and disclosure communications are outlined &lt;a href="https://github.com/opencontainers/org/raw/master/SECURITY.md"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Security Audit&lt;/h3&gt; 
&lt;p&gt;A third party security audit was performed by Cure53, you can see the full report &lt;a href="https://github.com/opencontainers/runc/raw/master/docs/Security-Audit.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; only supports Linux. See the header of &lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/go.mod"&gt;&lt;code&gt;go.mod&lt;/code&gt;&lt;/a&gt; for the required Go version.&lt;/p&gt; 
&lt;h3&gt;Pre-Requisites&lt;/h3&gt; 
&lt;h4&gt;Utilities and Libraries&lt;/h4&gt; 
&lt;p&gt;In addition to Go, building &lt;code&gt;runc&lt;/code&gt; requires multiple utilities and libraries to be installed on your system.&lt;/p&gt; 
&lt;p&gt;On Ubuntu/Debian, you can install the required dependencies with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;apt update &amp;amp;&amp;amp; apt install -y make gcc linux-libc-dev libseccomp-dev pkg-config git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On CentOS/Fedora, you can install the required dependencies with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;yum install -y make gcc kernel-headers libseccomp-devel pkg-config git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;On Alpine Linux, you can install the required dependencies with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;apk --update add bash make gcc libseccomp-dev musl-dev linux-headers git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The following dependencies are optional:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;libseccomp&lt;/code&gt; - only required if you enable seccomp support; to disable, see &lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/#build-tags"&gt;Build Tags&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# create a 'github.com/opencontainers' in your GOPATH/src
cd github.com/opencontainers
git clone https://github.com/opencontainers/runc
cd runc

make
sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use &lt;code&gt;go get&lt;/code&gt; to install to your &lt;code&gt;GOPATH&lt;/code&gt;, assuming that you have a &lt;code&gt;github.com&lt;/code&gt; parent folder already created under &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;go get github.com/opencontainers/runc
cd $GOPATH/src/github.com/opencontainers/runc
make
sudo make install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; will be installed to &lt;code&gt;/usr/local/sbin/runc&lt;/code&gt; on your system.&lt;/p&gt; 
&lt;h4&gt;Version string customization&lt;/h4&gt; 
&lt;p&gt;You can see the runc version by running &lt;code&gt;runc --version&lt;/code&gt;. You can append a custom string to the version using the &lt;code&gt;EXTRA_VERSION&lt;/code&gt; make variable when building, e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make EXTRA_VERSION="+build-1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Bear in mind to include some separator for readability.&lt;/p&gt; 
&lt;h4&gt;Build Tags&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; supports optional build tags for compiling support of various features, with some of them enabled by default (see &lt;code&gt;BUILDTAGS&lt;/code&gt; in top-level &lt;code&gt;Makefile&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;To change build tags from the default, set the &lt;code&gt;BUILDTAGS&lt;/code&gt; variable for make, e.g. to disable seccomp:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make BUILDTAGS=""
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To add some more build tags to the default set, use the &lt;code&gt;EXTRA_BUILDTAGS&lt;/code&gt; make variable, e.g. to disable checkpoint/restore:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make EXTRA_BUILDTAGS="runc_nocriu"
&lt;/code&gt;&lt;/pre&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Build Tag&lt;/th&gt; 
   &lt;th&gt;Feature&lt;/th&gt; 
   &lt;th&gt;Enabled by Default&lt;/th&gt; 
   &lt;th&gt;Dependencies&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;seccomp&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Syscall filtering using &lt;code&gt;libseccomp&lt;/code&gt;.&lt;/td&gt; 
   &lt;td&gt;yes&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;libseccomp&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;runc_nocriu&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Disables&lt;/strong&gt; runc checkpoint/restore.&lt;/td&gt; 
   &lt;td&gt;no&lt;/td&gt; 
   &lt;td&gt;&lt;code&gt;criu&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;The following build tags were used earlier, but are now obsoleted:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;runc_nodmz&lt;/strong&gt; (since runc v1.2.1 runc dmz binary is dropped)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;nokmem&lt;/strong&gt; (since runc v1.0.0-rc94 kernel memory settings are ignored)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;apparmor&lt;/strong&gt; (since runc v1.0.0-rc93 the feature is always enabled)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;selinux&lt;/strong&gt; (since runc v1.0.0-rc93 the feature is always enabled)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Running the test suite&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; currently supports running its test suite via Docker. To run the suite just type &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are additional make targets for running the tests outside of a container but this is not recommended as the tests are written with the expectation that they can write and remove anywhere.&lt;/p&gt; 
&lt;p&gt;You can run a specific test case by setting the &lt;code&gt;TESTFLAGS&lt;/code&gt; variable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# make test TESTFLAGS="-run=SomeTestFunction"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run a specific integration test by setting the &lt;code&gt;TESTPATH&lt;/code&gt; variable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# make test TESTPATH="/checkpoint.bats"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run a specific rootless integration test by setting the &lt;code&gt;ROOTLESS_TESTPATH&lt;/code&gt; variable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# make test ROOTLESS_TESTPATH="/checkpoint.bats"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can run a test using your container engine's flags by setting &lt;code&gt;CONTAINER_ENGINE_BUILD_FLAGS&lt;/code&gt; and &lt;code&gt;CONTAINER_ENGINE_RUN_FLAGS&lt;/code&gt; variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# make test CONTAINER_ENGINE_BUILD_FLAGS="--build-arg http_proxy=http://yourproxy/" CONTAINER_ENGINE_RUN_FLAGS="-e http_proxy=http://yourproxy/"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Go Dependencies Management&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; uses &lt;a href="https://github.com/golang/go/wiki/Modules"&gt;Go Modules&lt;/a&gt; for dependencies management. Please refer to &lt;a href="https://github.com/golang/go/wiki/Modules"&gt;Go Modules&lt;/a&gt; for how to add or update new dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Update vendored dependencies
make vendor
# Verify all dependencies
make verify-dependencies
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using runc&lt;/h2&gt; 
&lt;p&gt;Please note that runc is a low level tool not designed with an end user in mind. It is mostly employed by other higher level container software.&lt;/p&gt; 
&lt;p&gt;Therefore, unless there is some specific use case that prevents the use of tools like Docker or Podman, it is not recommended to use runc directly.&lt;/p&gt; 
&lt;p&gt;If you still want to use runc, here's how.&lt;/p&gt; 
&lt;h3&gt;Creating an OCI Bundle&lt;/h3&gt; 
&lt;p&gt;In order to use runc you must have your container in the format of an OCI bundle. If you have Docker installed you can use its &lt;code&gt;export&lt;/code&gt; method to acquire a root filesystem from an existing Docker container.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# create the top most bundle directory
mkdir /mycontainer
cd /mycontainer

# create the rootfs directory
mkdir rootfs

# export busybox via Docker into the rootfs directory
docker export $(docker create busybox) | tar -C rootfs -xvf -
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After a root filesystem is populated you just generate a spec in the format of a &lt;code&gt;config.json&lt;/code&gt; file inside your bundle. &lt;code&gt;runc&lt;/code&gt; provides a &lt;code&gt;spec&lt;/code&gt; command to generate a base template spec that you are then able to edit. To find features and documentation for fields in the spec please refer to the &lt;a href="https://github.com/opencontainers/runtime-spec"&gt;specs&lt;/a&gt; repository.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;runc spec
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Running Containers&lt;/h3&gt; 
&lt;p&gt;Assuming you have an OCI bundle from the previous step you can execute the container in two different ways.&lt;/p&gt; 
&lt;p&gt;The first way is to use the convenience command &lt;code&gt;run&lt;/code&gt; that will handle creating, starting, and deleting the container after it exits.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# run as root
cd /mycontainer
runc run mycontainerid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you used the unmodified &lt;code&gt;runc spec&lt;/code&gt; template this should give you a &lt;code&gt;sh&lt;/code&gt; session inside the container.&lt;/p&gt; 
&lt;p&gt;The second way to start a container is using the specs lifecycle operations. This gives you more power over how the container is created and managed while it is running. This will also launch the container in the background so you will have to edit the &lt;code&gt;config.json&lt;/code&gt; to remove the &lt;code&gt;terminal&lt;/code&gt; setting for the simple examples below (see more details about &lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/docs/terminals.md"&gt;runc terminal handling&lt;/a&gt;). Your process field in the &lt;code&gt;config.json&lt;/code&gt; should look like this below with &lt;code&gt;"terminal": false&lt;/code&gt; and &lt;code&gt;"args": ["sleep", "5"]&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-json"&gt;        "process": {
                "terminal": false,
                "user": {
                        "uid": 0,
                        "gid": 0
                },
                "args": [
                        "sleep", "5"
                ],
                "env": [
                        "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                        "TERM=xterm"
                ],
                "cwd": "/",
                "capabilities": {
                        "bounding": [
                                "CAP_AUDIT_WRITE",
                                "CAP_KILL",
                                "CAP_NET_BIND_SERVICE"
                        ],
                        "effective": [
                                "CAP_AUDIT_WRITE",
                                "CAP_KILL",
                                "CAP_NET_BIND_SERVICE"
                        ],
                        "inheritable": [
                                "CAP_AUDIT_WRITE",
                                "CAP_KILL",
                                "CAP_NET_BIND_SERVICE"
                        ],
                        "permitted": [
                                "CAP_AUDIT_WRITE",
                                "CAP_KILL",
                                "CAP_NET_BIND_SERVICE"
                        ],
                        "ambient": [
                                "CAP_AUDIT_WRITE",
                                "CAP_KILL",
                                "CAP_NET_BIND_SERVICE"
                        ]
                },
                "rlimits": [
                        {
                                "type": "RLIMIT_NOFILE",
                                "hard": 1024,
                                "soft": 1024
                        }
                ],
                "noNewPrivileges": true
        },
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we can go through the lifecycle operations in your shell.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# run as root
cd /mycontainer
runc create mycontainerid

# view the container is created and in the "created" state
runc list

# start the process inside the container
runc start mycontainerid

# after 5 seconds view that the container has exited and is now in the stopped state
runc list

# now delete the container
runc delete mycontainerid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This allows higher level systems to augment the containers creation logic with setup of various settings after the container is created and/or before it is deleted. For example, the container's network stack is commonly set up after &lt;code&gt;create&lt;/code&gt; but before &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Rootless containers&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; has the ability to run containers without root privileges. This is called &lt;code&gt;rootless&lt;/code&gt;. You need to pass some parameters to &lt;code&gt;runc&lt;/code&gt; in order to run rootless containers. See below and compare with the previous version.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In order to use this feature, "User Namespaces" must be compiled and enabled in your kernel. There are various ways to do this depending on your distribution:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Confirm &lt;code&gt;CONFIG_USER_NS=y&lt;/code&gt; is set in your kernel configuration (normally found in &lt;code&gt;/proc/config.gz&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Arch/Debian: &lt;code&gt;echo 1 &amp;gt; /proc/sys/kernel/unprivileged_userns_clone&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;RHEL/CentOS 7: &lt;code&gt;echo 28633 &amp;gt; /proc/sys/user/max_user_namespaces&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Run the following commands as an ordinary user:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Same as the first example
mkdir ~/mycontainer
cd ~/mycontainer
mkdir rootfs
docker export $(docker create busybox) | tar -C rootfs -xvf -

# The --rootless parameter instructs runc spec to generate a configuration for a rootless container, which will allow you to run the container as a non-root user.
runc spec --rootless

# The --root parameter tells runc where to store the container state. It must be writable by the user.
runc --root /tmp/runc run mycontainerid
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Supervisors&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; can be used with process supervisors and init systems to ensure that containers are restarted when they exit. An example systemd unit file looks something like this.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-systemd"&gt;[Unit]
Description=Start My Container

[Service]
Type=forking
ExecStart=/usr/local/sbin/runc run -d --pid-file /run/mycontainerid.pid mycontainerid
ExecStopPost=/usr/local/sbin/runc delete mycontainerid
WorkingDirectory=/mycontainer
PIDFile=/run/mycontainerid.pid

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;More documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/docs/spec-conformance.md"&gt;Spec conformance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/docs/cgroup-v2.md"&gt;cgroup v2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/docs/checkpoint-restore.md"&gt;Checkpoint and restore&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/docs/systemd.md"&gt;systemd cgroup driver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/docs/terminals.md"&gt;Terminals and standard IO&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/docs/experimental.md"&gt;Experimental features&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The code and docs are released under the &lt;a href="https://raw.githubusercontent.com/opencontainers/runc/main/LICENSE"&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>samber/lo</title>
      <link>https://github.com/samber/lo</link>
      <description>&lt;p&gt;💥 A Lodash-style Go library based on Go 1.18+ Generics (map, filter, contains, find...)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lo - Iterate over slices, maps, channels...&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://github.com/samber/lo/releases"&gt;&lt;img src="https://img.shields.io/github/tag/samber/lo.svg?sanitize=true" alt="tag" /&gt;&lt;/a&gt; &lt;img src="https://img.shields.io/badge/Go-%3E%3D%201.18-%23007d9c" alt="Go Version" /&gt; &lt;a href="https://pkg.go.dev/github.com/samber/lo"&gt;&lt;img src="https://godoc.org/github.com/samber/lo?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt; &lt;img src="https://github.com/samber/lo/actions/workflows/test.yml/badge.svg?sanitize=true" alt="Build Status" /&gt; &lt;a href="https://goreportcard.com/report/github.com/samber/lo"&gt;&lt;img src="https://goreportcard.com/badge/github.com/samber/lo" alt="Go report" /&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/samber/lo"&gt;&lt;img src="https://img.shields.io/codecov/c/github/samber/lo" alt="Coverage" /&gt;&lt;/a&gt; &lt;a href="https://github.com/samber/lo/graphs/contributors"&gt;&lt;img src="https://img.shields.io/github/contributors/samber/lo" alt="Contributors" /&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/samber/lo/master/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/samber/lo" alt="License" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;✨ &lt;strong&gt;&lt;code&gt;samber/lo&lt;/code&gt; is a Lodash-style Go library based on Go 1.18+ Generics.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A utility library based on Go 1.18+ generics that makes it easier to work with slices, maps, strings, channels, and functions. It provides dozens of handy methods to simplify common coding tasks and improve code readability. It may look like &lt;a href="https://github.com/lodash/lodash"&gt;Lodash&lt;/a&gt; in some aspects.&lt;/p&gt; 
&lt;p&gt;5 to 10 helpers may overlap with those from the Go standard library, in packages &lt;code&gt;slices&lt;/code&gt; and &lt;code&gt;maps&lt;/code&gt;. I feel this library is legitimate and offers many more valuable abstractions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samber/do"&gt;samber/do&lt;/a&gt;: A dependency injection toolkit based on Go 1.18+ Generics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/samber/mo"&gt;samber/mo&lt;/a&gt;: Monads based on Go 1.18+ Generics (Option, Result, Either...)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Why this name?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;I wanted a &lt;strong&gt;short name&lt;/strong&gt;, similar to "Lodash", and no Go package uses this name.&lt;/p&gt; 
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/samber/lo/master/img/logo-full.png" alt="lo" /&gt;&lt;/p&gt; 
&lt;h2&gt;🚀 Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get github.com/samber/lo@v1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This library is v1 and follows SemVer strictly.&lt;/p&gt; 
&lt;p&gt;No breaking changes will be made to exported APIs before v2.0.0.&lt;/p&gt; 
&lt;p&gt;This library has no dependencies outside the Go standard library.&lt;/p&gt; 
&lt;h2&gt;💡 Usage&lt;/h2&gt; 
&lt;p&gt;You can import &lt;code&gt;lo&lt;/code&gt; using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    "github.com/samber/lo"
    lop "github.com/samber/lo/parallel"
    lom "github.com/samber/lo/mutable"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then use one of the helpers below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;names := lo.Uniq([]string{"Samuel", "John", "Samuel"})
// []string{"Samuel", "John"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Tips for lazy developers&lt;/h3&gt; 
&lt;p&gt;I cannot recommend it, but in case you are too lazy for repeating &lt;code&gt;lo.&lt;/code&gt; everywhere, you can import the entire library into the namespace.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import (
    . "github.com/samber/lo"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I take no responsibility on this junk. 😁 💩&lt;/p&gt; 
&lt;h2&gt;🤠 Spec&lt;/h2&gt; 
&lt;p&gt;GoDoc: &lt;a href="https://godoc.org/github.com/samber/lo"&gt;https://godoc.org/github.com/samber/lo&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Supported helpers for slices:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filter"&gt;Filter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#map"&gt;Map&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqmap"&gt;UniqMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filtermap"&gt;FilterMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#flatmap"&gt;FlatMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reduce"&gt;Reduce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reduceright"&gt;ReduceRight&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#foreach"&gt;ForEach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#foreachwhile"&gt;ForEachWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#times"&gt;Times&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniq"&gt;Uniq&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqby"&gt;UniqBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#groupby"&gt;GroupBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#groupbymap"&gt;GroupByMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#chunk"&gt;Chunk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partitionby"&gt;PartitionBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#flatten"&gt;Flatten&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#interleave"&gt;Interleave&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#shuffle"&gt;Shuffle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reverse"&gt;Reverse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fill"&gt;Fill&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#repeat"&gt;Repeat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#repeatby"&gt;RepeatBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keyby"&gt;KeyBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slicetomap-alias-associate"&gt;SliceToMap / Associate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filterslicetomap"&gt;FilterSliceToMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keyify"&gt;Keyify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#drop"&gt;Drop&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#dropright"&gt;DropRight&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#dropwhile"&gt;DropWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#droprightwhile"&gt;DropRightWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#DropByIndex"&gt;DropByIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#reject"&gt;Reject&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#rejectmap"&gt;RejectMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#filterreject"&gt;FilterReject&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#count"&gt;Count&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countby"&gt;CountBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countvalues"&gt;CountValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#countvaluesby"&gt;CountValuesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#subset"&gt;Subset&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slice"&gt;Slice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#replace"&gt;Replace&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#replaceall"&gt;ReplaceAll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#compact"&gt;Compact&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#issorted"&gt;IsSorted&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#issortedbykey"&gt;IsSortedByKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#Splice"&gt;Splice&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for maps:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#keys"&gt;Keys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqkeys"&gt;UniqKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#haskey"&gt;HasKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#valueor"&gt;ValueOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#values"&gt;Values&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#uniqvalues"&gt;UniqValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickby"&gt;PickBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickbykeys"&gt;PickByKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pickbyvalues"&gt;PickByValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitby"&gt;OmitBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitbykeys"&gt;OmitByKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#omitbyvalues"&gt;OmitByValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#entries-alias-topairs"&gt;Entries / ToPairs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromentries-alias-frompairs"&gt;FromEntries / FromPairs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#invert"&gt;Invert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assign"&gt;Assign (merge of maps)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapkeys"&gt;MapKeys&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapvalues"&gt;MapValues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mapentries"&gt;MapEntries&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maptoslice"&gt;MapToSlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FilterMapToSlice"&gt;FilterMapToSlice&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported math helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#range--rangefrom--rangewithsteps"&gt;Range / RangeFrom / RangeWithSteps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#clamp"&gt;Clamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sum"&gt;Sum&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sumby"&gt;SumBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#product"&gt;Product&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#productby"&gt;ProductBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mean"&gt;Mean&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#meanby"&gt;MeanBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#mode"&gt;Mode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for strings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#randomstring"&gt;RandomString&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#substring"&gt;Substring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#chunkstring"&gt;ChunkString&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#runelength"&gt;RuneLength&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#pascalcase"&gt;PascalCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#camelcase"&gt;CamelCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#kebabcase"&gt;KebabCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#snakecase"&gt;SnakeCase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#words"&gt;Words&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#capitalize"&gt;Capitalize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ellipsis"&gt;Ellipsis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for tuples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#t2---t9"&gt;T2 -&amp;gt; T9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unpack2---unpack9"&gt;Unpack2 -&amp;gt; Unpack9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#zip2---zip9"&gt;Zip2 -&amp;gt; Zip9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#zipby2---zipby9"&gt;ZipBy2 -&amp;gt; ZipBy9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unzip2---unzip9"&gt;Unzip2 -&amp;gt; Unzip9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#unzipby2---unzipby9"&gt;UnzipBy2 -&amp;gt; UnzipBy9&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#crossjoin2---crossjoin9"&gt;CrossJoin2 -&amp;gt; CrossJoin2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#crossjoinby2---crossjoinby9"&gt;CrossJoinBy2 -&amp;gt; CrossJoinBy2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for time and duration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#duration"&gt;Duration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#duration0---duration10"&gt;Duration0 -&amp;gt; Duration10&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported helpers for channels:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#channeldispatcher"&gt;ChannelDispatcher&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#slicetochannel"&gt;SliceToChannel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#generator"&gt;Generator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#buffer"&gt;Buffer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#bufferwithcontext"&gt;BufferWithContext&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#bufferwithtimeout"&gt;BufferWithTimeout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fanin"&gt;FanIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fanout"&gt;FanOut&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported intersection helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#contains"&gt;Contains&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#containsby"&gt;ContainsBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#every"&gt;Every&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#everyby"&gt;EveryBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#some"&gt;Some&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#someby"&gt;SomeBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#none"&gt;None&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#noneby"&gt;NoneBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#intersect"&gt;Intersect&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#difference"&gt;Difference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#union"&gt;Union&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#without"&gt;Without&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutby"&gt;WithoutBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutempty"&gt;WithoutEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#withoutnth"&gt;WithoutNth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ElementsMatch"&gt;ElementsMatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ElementsMatchBy"&gt;ElementsMatchBy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Supported search helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#indexof"&gt;IndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#lastindexof"&gt;LastIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#find"&gt;Find&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findindexof"&gt;FindIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findlastindexof"&gt;FindLastIndexOf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findorelse"&gt;FindOrElse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findkey"&gt;FindKey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findkeyby"&gt;FindKeyBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#finduniques"&gt;FindUniques&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#finduniquesby"&gt;FindUniquesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findduplicates"&gt;FindDuplicates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#findduplicatesby"&gt;FindDuplicatesBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#min"&gt;Min&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minindex"&gt;MinIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minby"&gt;MinBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#minindexby"&gt;MinIndexBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#earliest"&gt;Earliest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#earliestby"&gt;EarliestBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#max"&gt;Max&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxindex"&gt;MaxIndex&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxby"&gt;MaxBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#maxindexby"&gt;MaxIndexBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#latest"&gt;Latest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#latestby"&gt;LatestBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#first"&gt;First&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FirstOrEmpty"&gt;FirstOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#FirstOr"&gt;FirstOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#last"&gt;Last&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#LastOrEmpty"&gt;LastOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#LastOr"&gt;LastOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nth"&gt;Nth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nthor"&gt;NthOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nthorempty"&gt;NthOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sample"&gt;Sample&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#sampleby"&gt;SampleBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#samples"&gt;Samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#samplesby"&gt;SamplesBy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Conditional helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ternary"&gt;Ternary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#ternaryf"&gt;TernaryF&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#if--elseif--else"&gt;If / ElseIf / Else&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#switch--case--default"&gt;Switch / Case / Default&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Type manipulation helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnil"&gt;IsNil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnotnil"&gt;IsNotNil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#toptr"&gt;ToPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#nil"&gt;Nil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#emptyabletoptr"&gt;EmptyableToPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromptr"&gt;FromPtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromptror"&gt;FromPtrOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tosliceptr"&gt;ToSlicePtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromsliceptr"&gt;FromSlicePtr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromsliceptror"&gt;FromSlicePtrOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#toanyslice"&gt;ToAnySlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#fromanyslice"&gt;FromAnySlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#empty"&gt;Empty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isempty"&gt;IsEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#isnotempty"&gt;IsNotEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesce"&gt;Coalesce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesceorempty"&gt;CoalesceOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalesceslice"&gt;CoalesceSlice&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescesliceorempty"&gt;CoalesceSliceOrEmpty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescemap"&gt;CoalesceMap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#coalescemaporempty"&gt;CoalesceMapOrEmpty&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Function helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partial"&gt;Partial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#partial2---partial5"&gt;Partial2 -&amp;gt; Partial5&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Concurrency helpers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attempt"&gt;Attempt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwhile"&gt;AttemptWhile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwithdelay"&gt;AttemptWithDelay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#attemptwhilewithdelay"&gt;AttemptWhileWithDelay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#debounce"&gt;Debounce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#debounceby"&gt;DebounceBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;Throttle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleWithCount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleBy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#throttle"&gt;ThrottleByWithCount&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#synchronize"&gt;Synchronize&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#async"&gt;Async&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#transaction"&gt;Transaction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#waitfor"&gt;WaitFor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#waitforwithcontext"&gt;WaitForWithContext&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Error handling:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#validate"&gt;Validate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#must"&gt;Must&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#try"&gt;Try&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#try0-6"&gt;Try1 -&amp;gt; Try6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tryor"&gt;TryOr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#tryor0-6"&gt;TryOr1 -&amp;gt; TryOr6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trycatch"&gt;TryCatch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trywitherrorvalue"&gt;TryWithErrorValue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#trycatchwitherrorvalue"&gt;TryCatchWithErrorValue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#errorsas"&gt;ErrorsAs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assert"&gt;Assert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/#assertf"&gt;Assertf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Constraints:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clonable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Filter&lt;/h3&gt; 
&lt;p&gt;Iterates over a collection and returns an array of all the elements the predicate function returns &lt;code&gt;true&lt;/code&gt; for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;even := lo.Filter([]int{1, 2, 3, 4}, func(x int, index int) bool {
    return x%2 == 0
})
// []int{2, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Apjg3WeSi7K"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Mutable: like &lt;code&gt;lo.Filter()&lt;/code&gt;, but the slice is updated in place.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{1, 2, 3, 4}
newList := lom.Filter(list, func(x int) bool {
    return x%2 == 0
})

list
// []int{2, 4, 3, 4}

newList
// []int{2, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Map&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice of one type and transforms it into a slice of another type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.Map([]int64{1, 2, 3, 4}, func(x int64, index int) string {
    return strconv.FormatInt(x, 10)
})
// []string{"1", "2", "3", "4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/OkPcYAhBo0D"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.Map()&lt;/code&gt;, but the mapper function is called in a goroutine. Results are returned in the same order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.Map([]int64{1, 2, 3, 4}, func(x int64, _ int) string {
    return strconv.FormatInt(x, 10)
})
// []string{"1", "2", "3", "4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Mutable: like &lt;code&gt;lo.Map()&lt;/code&gt;, but the slice is updated in place.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{1, 2, 3, 4}
lom.Map(list, func(x int) int {
    return x*2
})
// []int{2, 4, 6, 8}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;UniqMap&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice and transforms it to a slice of another type with unique values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type User struct {
    Name string
    Age  int
}
users := []User{{Name: "Alex", Age: 10}, {Name: "Alex", Age: 12}, {Name: "Bob", Age: 11}, {Name: "Alice", Age: 20}}

names := lo.UniqMap(users, func(u User, index int) string {
    return u.Name
})
// []string{"Alex", "Bob", "Alice"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FilterMap&lt;/h3&gt; 
&lt;p&gt;Returns a slice which obtained after both filtering and mapping using the given callback function.&lt;/p&gt; 
&lt;p&gt;The callback function should return two values: the result of the mapping operation and whether the result element should be included or not.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;matching := lo.FilterMap([]string{"cpu", "gpu", "mouse", "keyboard"}, func(x string, _ int) (string, bool) {
    if strings.HasSuffix(x, "pu") {
        return "xpu", true
    }
    return "", false
})
// []string{"xpu", "xpu"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-AuYXfy7opz"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FlatMap&lt;/h3&gt; 
&lt;p&gt;Manipulates a slice and transforms and flattens it to a slice of another type. The transform function can either return a slice or a &lt;code&gt;nil&lt;/code&gt;, and in the &lt;code&gt;nil&lt;/code&gt; case no value is added to the final slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.FlatMap([]int64{0, 1, 2}, func(x int64, _ int) []string {
    return []string{
        strconv.FormatInt(x, 10),
        strconv.FormatInt(x, 10),
    }
})
// []string{"0", "0", "1", "1", "2", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/YSoYmQTA8-U"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reduce&lt;/h3&gt; 
&lt;p&gt;Reduces a collection to a single value. The value is calculated by accumulating the result of running each element in the collection through an accumulator function. Each successive invocation is supplied with the return value returned by the previous call.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sum := lo.Reduce([]int{1, 2, 3, 4}, func(agg int, item int, _ int) int {
    return agg + item
}, 0)
// 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/R4UHXZNaaUG"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ReduceRight&lt;/h3&gt; 
&lt;p&gt;Like &lt;code&gt;lo.Reduce&lt;/code&gt; except that it iterates over elements of collection from right to left.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.ReduceRight([][]int{{0, 1}, {2, 3}, {4, 5}}, func(agg []int, item []int, _ int) []int {
    return append(agg, item...)
}, []int{})
// []int{4, 5, 2, 3, 0, 1}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Fq3W70l7wXF"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ForEach&lt;/h3&gt; 
&lt;p&gt;Iterates over elements of a collection and invokes the function over each element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.ForEach([]string{"hello", "world"}, func(x string, _ int) {
    println(x)
})
// prints "hello\nworld\n"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/oofyiUPRf8t"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.ForEach()&lt;/code&gt;, but the callback is called as a goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.ForEach([]string{"hello", "world"}, func(x string, _ int) {
    println(x)
})
// prints "hello\nworld\n" or "world\nhello\n"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ForEachWhile&lt;/h3&gt; 
&lt;p&gt;Iterates over collection elements and invokes iteratee for each element collection return value decide to continue or break, like do while().&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int64{1, 2, -42, 4}

lo.ForEachWhile(list, func(x int64, _ int) bool {
	if x &amp;lt; 0 {
		return false
	}
	fmt.Println(x)
	return true
})
// 1
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/QnLGt35tnow"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Times&lt;/h3&gt; 
&lt;p&gt;Times invokes the iteratee n times, returning an array of the results of each invocation. The iteratee is invoked with index as argument.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "github.com/samber/lo"

lo.Times(3, func(i int) string {
    return strconv.FormatInt(int64(i), 10)
})
// []string{"0", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/vgQj3Glr6lT"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.Times()&lt;/code&gt;, but callback is called in goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.Times(3, func(i int) string {
    return strconv.FormatInt(int64(i), 10)
})
// []string{"0", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Uniq&lt;/h3&gt; 
&lt;p&gt;Returns a duplicate-free version of an array, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqValues := lo.Uniq([]int{1, 2, 2, 1})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/DTzbeXZ6iEN"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqBy&lt;/h3&gt; 
&lt;p&gt;Returns a duplicate-free version of an array, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in array to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqValues := lo.UniqBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// []int{0, 1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/g42Z3QSb53u"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;GroupBy&lt;/h3&gt; 
&lt;p&gt;Returns an object composed of keys generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

groups := lo.GroupBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// map[int][]int{0: []int{0, 3}, 1: []int{1, 4}, 2: []int{2, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/XnQBd_v6brd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.GroupBy()&lt;/code&gt;, but callback is called in goroutine.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

lop.GroupBy([]int{0, 1, 2, 3, 4, 5}, func(i int) int {
    return i%3
})
// map[int][]int{0: []int{0, 3}, 1: []int{1, 4}, 2: []int{2, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;GroupByMap&lt;/h3&gt; 
&lt;p&gt;Returns an object composed of keys generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

groups := lo.GroupByMap([]int{0, 1, 2, 3, 4, 5}, func(i int) (int, int) {
    return i%3, i*2
})
// map[int][]int{0: []int{0, 6}, 1: []int{2, 8}, 2: []int{4, 10}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Chunk&lt;/h3&gt; 
&lt;p&gt;Returns an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Chunk([]int{0, 1, 2, 3, 4, 5}, 2)
// [][]int{{0, 1}, {2, 3}, {4, 5}}

lo.Chunk([]int{0, 1, 2, 3, 4, 5, 6}, 2)
// [][]int{{0, 1}, {2, 3}, {4, 5}, {6}}

lo.Chunk([]int{}, 2)
// [][]int{}

lo.Chunk([]int{0}, 2)
// [][]int{{0}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/EeKl0AuTehH"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PartitionBy&lt;/h3&gt; 
&lt;p&gt;Returns an array of elements split into groups. The order of grouped values is determined by the order they occur in collection. The grouping is generated from the results of running each element of collection through iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lo "github.com/samber/lo"

partitions := lo.PartitionBy([]int{-2, -1, 0, 1, 2, 3, 4, 5}, func(x int) string {
    if x &amp;lt; 0 {
        return "negative"
    } else if x%2 == 0 {
        return "even"
    }
    return "odd"
})
// [][]int{{-2, -1}, {0, 2, 4}, {1, 3, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/NfQ_nGjkgXW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Parallel processing: like &lt;code&gt;lo.PartitionBy()&lt;/code&gt;, but callback is called in goroutine. Results are returned in the same order.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lop "github.com/samber/lo/parallel"

partitions := lop.PartitionBy([]int{-2, -1, 0, 1, 2, 3, 4, 5}, func(x int) string {
    if x &amp;lt; 0 {
        return "negative"
    } else if x%2 == 0 {
        return "even"
    }
    return "odd"
})
// [][]int{{-2, -1}, {0, 2, 4}, {1, 3, 5}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Flatten&lt;/h3&gt; 
&lt;p&gt;Returns an array a single level deep.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;flat := lo.Flatten([][]int{{0, 1}, {2, 3, 4, 5}})
// []int{0, 1, 2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rbp9ORaMpjw"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Interleave&lt;/h3&gt; 
&lt;p&gt;Round-robin alternating input slices and sequentially appending value at index into result.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;interleaved := lo.Interleave([]int{1, 4, 7}, []int{2, 5, 8}, []int{3, 6, 9})
// []int{1, 2, 3, 4, 5, 6, 7, 8, 9}

interleaved := lo.Interleave([]int{1}, []int{2, 5, 8}, []int{3, 6}, []int{4, 7, 9, 10})
// []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-RJkTLQEDVt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Shuffle&lt;/h3&gt; 
&lt;p&gt;Returns an array of shuffled values. Uses the Fisher-Yates shuffle algorithm.&lt;/p&gt; 
&lt;p&gt;⚠️ This helper is &lt;strong&gt;mutable&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{0, 1, 2, 3, 4, 5}
lom.Shuffle(list)

list
// []int{1, 4, 0, 3, 5, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2xb3WdLjeSJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reverse&lt;/h3&gt; 
&lt;p&gt;Reverses array so that the first element becomes the last, the second element becomes the second to last, and so on.&lt;/p&gt; 
&lt;p&gt;⚠️ This helper is &lt;strong&gt;mutable&lt;/strong&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import lom "github.com/samber/lo/mutable"

list := []int{0, 1, 2, 3, 4, 5}
lom.Reverse(list)

list
// []int{5, 4, 3, 2, 1, 0}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/O-M5pmCRgzV"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Fill&lt;/h3&gt; 
&lt;p&gt;Fills elements of array with &lt;code&gt;initial&lt;/code&gt; value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
  bar string
}

func (f foo) Clone() foo {
  return foo{f.bar}
}

initializedSlice := lo.Fill([]foo{foo{"a"}, foo{"a"}}, foo{"b"})
// []foo{foo{"b"}, foo{"b"}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VwR34GzqEub"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Repeat&lt;/h3&gt; 
&lt;p&gt;Builds a slice with N copies of initial value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
  bar string
}

func (f foo) Clone() foo {
  return foo{f.bar}
}

slice := lo.Repeat(2, foo{"a"})
// []foo{foo{"a"}, foo{"a"}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/g3uHXbmc3b6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RepeatBy&lt;/h3&gt; 
&lt;p&gt;Builds a slice with values returned by N calls of callback.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.RepeatBy(0, func (i int) string {
    return strconv.FormatInt(int64(math.Pow(float64(i), 2)), 10)
})
// []string{}

slice := lo.RepeatBy(5, func(i int) string {
    return strconv.FormatInt(int64(math.Pow(float64(i), 2)), 10)
})
// []string{"0", "1", "4", "9", "16"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ozZLCtX_hNU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;KeyBy&lt;/h3&gt; 
&lt;p&gt;Transforms a slice or an array of structs to a map based on a pivot callback.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.KeyBy([]string{"a", "aa", "aaa"}, func(str string) int {
    return len(str)
})
// map[int]string{1: "a", 2: "aa", 3: "aaa"}

type Character struct {
  dir  string
  code int
}
characters := []Character{
    {dir: "left", code: 97},
    {dir: "right", code: 100},
}
result := lo.KeyBy(characters, func(char Character) string {
    return string(rune(char.code))
})
//map[a:{dir:left code:97} d:{dir:right code:100}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mdaClUAT-zZ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SliceToMap (alias: Associate)&lt;/h3&gt; 
&lt;p&gt;Returns a map containing key-value pairs provided by transform function applied to elements of the given slice. If any of two pairs would have the same key the last one gets added to the map.&lt;/p&gt; 
&lt;p&gt;The order of keys in returned map is not specified and is not guaranteed to be the same from the original array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []*foo{{baz: "apple", bar: 1}, {baz: "banana", bar: 2}}

aMap := lo.SliceToMap(in, func (f *foo) (string, int) {
    return f.baz, f.bar
})
// map[string][int]{ "apple":1, "banana":2 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/WHa2CfMO3Lr"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FilterSliceToMap&lt;/h3&gt; 
&lt;p&gt;Returns a map containing key-value pairs provided by transform function applied to elements of the given slice.&lt;/p&gt; 
&lt;p&gt;If any of two pairs would have the same key the last one gets added to the map.&lt;/p&gt; 
&lt;p&gt;The order of keys in returned map is not specified and is not guaranteed to be the same from the original array.&lt;/p&gt; 
&lt;p&gt;The third return value of the transform function is a boolean that indicates whether the key-value pair should be included in the map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []string{"a", "aa", "aaa"}

result := lo.FilterSliceToMap(list, func(str string) (string, int, bool) {
    return str, len(str), len(str) &amp;gt; 1
})
// map[string][int]{"aa":2 "aaa":3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Keyify&lt;/h3&gt; 
&lt;p&gt;Returns a map with each unique element of the slice as a key.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;set := lo.Keyify([]int{1, 1, 2, 3, 4})
// map[int]struct{}{1:{}, 2:{}, 3:{}, 4:{}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Drop&lt;/h3&gt; 
&lt;p&gt;Drops n elements from the beginning of a slice or array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.Drop([]int{0, 1, 2, 3, 4, 5}, 2)
// []int{2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/JswS7vXRJP2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropRight&lt;/h3&gt; 
&lt;p&gt;Drops n elements from the end of a slice or array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropRight([]int{0, 1, 2, 3, 4, 5}, 2)
// []int{0, 1, 2, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/GG0nXkSJJa3"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropWhile&lt;/h3&gt; 
&lt;p&gt;Drop elements from the beginning of a slice or array while the predicate returns true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropWhile([]string{"a", "aa", "aaa", "aa", "aa"}, func(val string) bool {
    return len(val) &amp;lt;= 2
})
// []string{"aaa", "aa", "aa"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/7gBPYw2IK16"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropRightWhile&lt;/h3&gt; 
&lt;p&gt;Drop elements from the end of a slice or array while the predicate returns true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropRightWhile([]string{"a", "aa", "aaa", "aa", "aa"}, func(val string) bool {
    return len(val) &amp;lt;= 2
})
// []string{"a", "aa", "aaa"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/3-n71oEC0Hz"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DropByIndex&lt;/h3&gt; 
&lt;p&gt;Drops elements from a slice or array by the index. A negative index will drop elements from the end of the slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;l := lo.DropByIndex([]int{0, 1, 2, 3, 4, 5}, 2, 4, -1)
// []int{0, 1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/JswS7vXRJP2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Reject&lt;/h3&gt; 
&lt;p&gt;The opposite of Filter, this method returns the elements of collection that predicate does not return truthy for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;odd := lo.Reject([]int{1, 2, 3, 4}, func(x int, _ int) bool {
    return x%2 == 0
})
// []int{1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/YkLMODy1WEL"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RejectMap&lt;/h3&gt; 
&lt;p&gt;The opposite of FilterMap, this method returns a slice which obtained after both filtering and mapping using the given callback function.&lt;/p&gt; 
&lt;p&gt;The callback function should return two values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;the result of the mapping operation and&lt;/li&gt; 
 &lt;li&gt;whether the result element should be included or not.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;items := lo.RejectMap([]int{1, 2, 3, 4}, func(x int, _ int) (int, bool) {
    return x*10, x%2 == 0
})
// []int{10, 30}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FilterReject&lt;/h3&gt; 
&lt;p&gt;Mixes Filter and Reject, this method returns two slices, one for the elements of collection that predicate returns truthy for and one for the elements that predicate does not return truthy for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;kept, rejected := lo.FilterReject([]int{1, 2, 3, 4}, func(x int, _ int) bool {
    return x%2 == 0
})
// []int{2, 4}
// []int{1, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Count&lt;/h3&gt; 
&lt;p&gt;Counts the number of elements in the collection that compare equal to value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count := lo.Count([]int{1, 5, 1}, 1)
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Y3FlK54yveC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountBy&lt;/h3&gt; 
&lt;p&gt;Counts the number of elements in the collection for which predicate is true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count := lo.CountBy([]int{1, 5, 1}, func(i int) bool {
    return i &amp;lt; 4
})
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ByQbNYQQi4X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountValues&lt;/h3&gt; 
&lt;p&gt;Counts the number of each element in the collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.CountValues([]int{})
// map[int]int{}

lo.CountValues([]int{1, 2})
// map[int]int{1: 1, 2: 1}

lo.CountValues([]int{1, 2, 2})
// map[int]int{1: 1, 2: 2}

lo.CountValues([]string{"foo", "bar", ""})
// map[string]int{"": 1, "foo": 1, "bar": 1}

lo.CountValues([]string{"foo", "bar", "bar"})
// map[string]int{"foo": 1, "bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/-p-PyLT4dfy"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CountValuesBy&lt;/h3&gt; 
&lt;p&gt;Counts the number of each element in the collection. It ss equivalent to chaining lo.Map and lo.CountValues.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;isEven := func(v int) bool {
    return v%2==0
}

lo.CountValuesBy([]int{}, isEven)
// map[bool]int{}

lo.CountValuesBy([]int{1, 2}, isEven)
// map[bool]int{false: 1, true: 1}

lo.CountValuesBy([]int{1, 2, 2}, isEven)
// map[bool]int{false: 1, true: 2}

length := func(v string) int {
    return len(v)
}

lo.CountValuesBy([]string{"foo", "bar", ""}, length)
// map[int]int{0: 1, 3: 2}

lo.CountValuesBy([]string{"foo", "bar", "bar"}, length)
// map[int]int{3: 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2U0dG1SnOmS"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Subset&lt;/h3&gt; 
&lt;p&gt;Returns a copy of a slice from &lt;code&gt;offset&lt;/code&gt; up to &lt;code&gt;length&lt;/code&gt; elements. Like &lt;code&gt;slice[start:start+length]&lt;/code&gt;, but does not panic on overflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 2, 3, 4}

sub := lo.Subset(in, 2, 3)
// []int{2, 3, 4}

sub := lo.Subset(in, -4, 3)
// []int{1, 2, 3}

sub := lo.Subset(in, -2, math.MaxUint)
// []int{3, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tOQu1GhFcog"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Slice&lt;/h3&gt; 
&lt;p&gt;Returns a copy of a slice from &lt;code&gt;start&lt;/code&gt; up to, but not including &lt;code&gt;end&lt;/code&gt;. Like &lt;code&gt;slice[start:end]&lt;/code&gt;, but does not panic on overflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 2, 3, 4}

slice := lo.Slice(in, 0, 5)
// []int{0, 1, 2, 3, 4}

slice := lo.Slice(in, 2, 3)
// []int{2}

slice := lo.Slice(in, 2, 6)
// []int{2, 3, 4}

slice := lo.Slice(in, 4, 3)
// []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8XWYhfMMA1h"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Replace&lt;/h3&gt; 
&lt;p&gt;Returns a copy of the slice with the first n non-overlapping instances of old replaced by new.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, 1)
// []int{42, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, -1, 42, 1)
// []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, 2)
// []int{42, 1, 42, 1, 2, 3, 0}

slice := lo.Replace(in, 0, 42, -1)
// []int{42, 1, 42, 1, 2, 3, 42}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/XfPzmf9gql6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ReplaceAll&lt;/h3&gt; 
&lt;p&gt;Returns a copy of the slice with all non-overlapping instances of old replaced by new.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []int{0, 1, 0, 1, 2, 3, 0}

slice := lo.ReplaceAll(in, 0, 42)
// []int{42, 1, 42, 1, 2, 3, 42}

slice := lo.ReplaceAll(in, -1, 42)
// []int{0, 1, 0, 1, 2, 3, 0}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/a9xZFUHfYcV"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Compact&lt;/h3&gt; 
&lt;p&gt;Returns a slice of all non-zero elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := []string{"", "foo", "", "bar", ""}

slice := lo.Compact(in)
// []string{"foo", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tXiy-iK6PAc"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsSorted&lt;/h3&gt; 
&lt;p&gt;Checks if a slice is sorted.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.IsSorted([]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mc3qR-t4mcx"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsSortedByKey&lt;/h3&gt; 
&lt;p&gt;Checks if a slice is sorted by iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := lo.IsSortedByKey([]string{"a", "bb", "ccc"}, func(s string) int {
    return len(s)
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/wiG6XyBBu49"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Splice&lt;/h3&gt; 
&lt;p&gt;Splice inserts multiple elements at index i. A negative index counts back from the end of the slice. The helper is protected against overflow errors.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Splice([]string{"a", "b"}, 1, "1", "2")
// []string{"a", "1", "2", "b"}

// negative
result = lo.Splice([]string{"a", "b"}, -1, "1", "2")
// []string{"a", "1", "2", "b"}

// overflow
result = lo.Splice([]string{"a", "b"}, 42, "1", "2")
// []string{"a", "b", "1", "2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/wiG6XyBBu49"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Keys&lt;/h3&gt; 
&lt;p&gt;Creates a slice of the map keys.&lt;/p&gt; 
&lt;p&gt;Use the UniqKeys variant to deduplicate common keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;keys := lo.Keys(map[string]int{"foo": 1, "bar": 2})
// []string{"foo", "bar"}

keys := lo.Keys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []string{"foo", "bar", "baz"}

keys := lo.Keys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 3})
// []string{"foo", "bar", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Uu11fHASqrU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqKeys&lt;/h3&gt; 
&lt;p&gt;Creates an array of unique map keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;keys := lo.UniqKeys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []string{"foo", "bar", "baz"}

keys := lo.UniqKeys(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 3})
// []string{"foo", "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TPKAb6ILdHk"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;HasKey&lt;/h3&gt; 
&lt;p&gt;Returns whether the given key exists.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;exists := lo.HasKey(map[string]int{"foo": 1, "bar": 2}, "foo")
// true

exists := lo.HasKey(map[string]int{"foo": 1, "bar": 2}, "baz")
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/aVwubIvECqS"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Values&lt;/h3&gt; 
&lt;p&gt;Creates an array of the map values.&lt;/p&gt; 
&lt;p&gt;Use the UniqValues variant to deduplicate common values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;values := lo.Values(map[string]int{"foo": 1, "bar": 2})
// []int{1, 2}

values := lo.Values(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []int{1, 2, 3}

values := lo.Values(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 2})
// []int{1, 2, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/nnRTQkzQfF6"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UniqValues&lt;/h3&gt; 
&lt;p&gt;Creates an array of unique map values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2})
// []int{1, 2}

values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2}, map[string]int{"baz": 3})
// []int{1, 2, 3}

values := lo.UniqValues(map[string]int{"foo": 1, "bar": 2}, map[string]int{"bar": 2})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/nf6bXMh7rM3"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ValueOr&lt;/h3&gt; 
&lt;p&gt;Returns the value of the given key or the fallback value if the key is not present.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;value := lo.ValueOr(map[string]int{"foo": 1, "bar": 2}, "foo", 42)
// 1

value := lo.ValueOr(map[string]int{"foo": 1, "bar": 2}, "baz", 42)
// 42
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/bAq9mHErB4V"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickBy&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given predicate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(key string, value int) bool {
    return value%2 == 1
})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/kdg8GR_QMmf"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickByKeys&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickByKeys(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []string{"foo", "baz"})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/R1imbuci9qU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PickByValues&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.PickByValues(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []int{1, 3})
// map[string]int{"foo": 1, "baz": 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/1zdzSvbfsJc"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitBy&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given predicate.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(key string, value int) bool {
    return value%2 == 1
})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/EtBsR43bdsd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitByKeys&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given keys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitByKeys(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []string{"foo", "baz"})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/t1QjCrs-ysk"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;OmitByValues&lt;/h3&gt; 
&lt;p&gt;Returns same map type filtered by given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.OmitByValues(map[string]int{"foo": 1, "bar": 2, "baz": 3}, []int{1, 3})
// map[string]int{"bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/9UYZi-hrs8j"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Entries (alias: ToPairs)&lt;/h3&gt; 
&lt;p&gt;Transforms a map into array of key/value pairs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;entries := lo.Entries(map[string]int{"foo": 1, "bar": 2})
// []lo.Entry[string, int]{
//     {
//         Key: "foo",
//         Value: 1,
//     },
//     {
//         Key: "bar",
//         Value: 2,
//     },
// }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/3Dhgx46gawJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FromEntries (alias: FromPairs)&lt;/h3&gt; 
&lt;p&gt;Transforms an array of key/value pairs into a map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := lo.FromEntries([]lo.Entry[string, int]{
    {
        Key: "foo",
        Value: 1,
    },
    {
        Key: "bar",
        Value: 2,
    },
})
// map[string]int{"foo": 1, "bar": 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/oIr5KHFGCEN"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Invert&lt;/h3&gt; 
&lt;p&gt;Creates a map composed of the inverted keys and values. If map contains duplicate values, subsequent values overwrite property assignments of previous values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m1 := lo.Invert(map[string]int{"a": 1, "b": 2})
// map[int]string{1: "a", 2: "b"}

m2 := lo.Invert(map[string]int{"a": 1, "b": 2, "c": 1})
// map[int]string{1: "c", 2: "b"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rFQ4rak6iA1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assign&lt;/h3&gt; 
&lt;p&gt;Merges multiple maps from left to right.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mergedMaps := lo.Assign(
    map[string]int{"a": 1, "b": 2},
    map[string]int{"b": 3, "c": 4},
)
// map[string]int{"a": 1, "b": 3, "c": 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VhwfJOyxf5o"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ChunkEntries&lt;/h3&gt; 
&lt;p&gt;Splits a map into an array of elements in groups of a length equal to its size. If the map cannot be split evenly, the final chunk will contain the remaining elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;maps := lo.ChunkEntries(
    map[string]int{
        "a": 1,
        "b": 2,
        "c": 3,
        "d": 4,
        "e": 5,
    },
    3,
)
// []map[string]int{
//    {"a": 1, "b": 2, "c": 3},
//    {"d": 4, "e": 5},
// }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/X_YQL6mmoD-"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapKeys&lt;/h3&gt; 
&lt;p&gt;Manipulates a map keys and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m2 := lo.MapKeys(map[int]int{1: 1, 2: 2, 3: 3, 4: 4}, func(_ int, v int) string {
    return strconv.FormatInt(int64(v), 10)
})
// map[string]int{"1": 1, "2": 2, "3": 3, "4": 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/9_4WPIqOetJ"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapValues&lt;/h3&gt; 
&lt;p&gt;Manipulates a map values and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m1 := map[int]int64{1: 1, 2: 2, 3: 3}

m2 := lo.MapValues(m1, func(x int64, _ int) string {
    return strconv.FormatInt(x, 10)
})
// map[int]string{1: "1", 2: "2", 3: "3"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/T_8xAfvcf0W"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapEntries&lt;/h3&gt; 
&lt;p&gt;Manipulates a map entries and transforms it to a map of another type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;in := map[string]int{"foo": 1, "bar": 2}

out := lo.MapEntries(in, func(k string, v int) (int, string) {
    return v,k
})
// map[int]string{1: "foo", 2: "bar"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/VuvNQzxKimT"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;MapToSlice&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice based on specific iteratee.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;m := map[int]int64{1: 4, 2: 5, 3: 6}

s := lo.MapToSlice(m, func(k int, v int64) string {
    return fmt.Sprintf("%d_%d", k, v)
})
// []string{"1_4", "2_5", "3_6"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ZuiCZpDt6LD"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;FilterMapToSlice&lt;/h3&gt; 
&lt;p&gt;Transforms a map into a slice based on specific iteratee. The iteratee returns a value and a boolean. If the boolean is true, the value is added to the result slice.&lt;/p&gt; 
&lt;p&gt;If the boolean is false, the value is not added to the result slice. The order of the keys in the input map is not specified and the order of the keys in the output slice is not guaranteed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;kv := map[int]int64{1: 1, 2: 2, 3: 3, 4: 4}

result := lo.FilterMapToSlice(kv, func(k int, v int64) (string, bool) {
    return fmt.Sprintf("%d_%d", k, v), k%2 == 0
})
// []{"2_2", "4_4"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Range / RangeFrom / RangeWithSteps&lt;/h3&gt; 
&lt;p&gt;Creates an array of numbers (positive and/or negative) progressing from start up to, but not including end.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Range(4)
// [0, 1, 2, 3]

result := lo.Range(-4)
// [0, -1, -2, -3]

result := lo.RangeFrom(1, 5)
// [1, 2, 3, 4, 5]

result := lo.RangeFrom[float64](1.0, 5)
// [1.0, 2.0, 3.0, 4.0, 5.0]

result := lo.RangeWithSteps(0, 20, 5)
// [0, 5, 10, 15]

result := lo.RangeWithSteps[float32](-1.0, -4.0, -1.0)
// [-1.0, -2.0, -3.0]

result := lo.RangeWithSteps(1, 4, -1)
// []

result := lo.Range(0)
// []
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/0r6VimXAi9H"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Clamp&lt;/h3&gt; 
&lt;p&gt;Clamps number within the inclusive lower and upper bounds.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r1 := lo.Clamp(0, -10, 10)
// 0

r2 := lo.Clamp(-42, -10, 10)
// -10

r3 := lo.Clamp(42, -10, 10)
// 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/RU4lJNC2hlI"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Sum&lt;/h3&gt; 
&lt;p&gt;Sums the values in a collection.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
sum := lo.Sum(list)
// 15
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/upfeJVqs4Bt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SumBy&lt;/h3&gt; 
&lt;p&gt;Summarizes the values in a collection using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;strings := []string{"foo", "bar"}
sum := lo.SumBy(strings, func(item string) int {
    return len(item)
})
// 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Product&lt;/h3&gt; 
&lt;p&gt;Calculates the product of the values in a collection.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
product := lo.Product(list)
// 120
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2_kjM_smtAH"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ProductBy&lt;/h3&gt; 
&lt;p&gt;Calculates the product of the values in a collection using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;strings := []string{"foo", "bar"}
product := lo.ProductBy(strings, func(item string) int {
    return len(item)
})
// 9
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/wadzrWr9Aer"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Mean&lt;/h3&gt; 
&lt;p&gt;Calculates the mean of a collection of numbers.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mean := lo.Mean([]int{2, 3, 4, 5})
// 3

mean := lo.Mean([]float64{2, 3, 4, 5})
// 3.5

mean := lo.Mean([]float64{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MeanBy&lt;/h3&gt; 
&lt;p&gt;Calculates the mean of a collection of numbers using the given return value from the iteration function.&lt;/p&gt; 
&lt;p&gt;If collection is empty 0 is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []string{"aa", "bbb", "cccc", "ddddd"}
mapper := func(item string) float64 {
    return float64(len(item))
}

mean := lo.MeanBy(list, mapper)
// 3.5

mean := lo.MeanBy([]float64{}, mapper)
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Mode&lt;/h3&gt; 
&lt;p&gt;Calculates the mode(most frequent value) of a collection of numbers.&lt;/p&gt; 
&lt;p&gt;If multiple values ​​have the same highest frequency, then multiple values ​​are returned.&lt;/p&gt; 
&lt;p&gt;If the collection is empty, the zero value of &lt;code&gt;T[]&lt;/code&gt; is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mode := lo.Mode([]int{2, 2, 3, 4})
// [2]

mode := lo.Mode([]float64{2, 2, 3, 3})
// [2, 3]

mode := lo.Mode([]float64{})
// []

mode := lo.Mode([]int{1, 2, 3, 4, 5, 6, 7, 8, 9})
// [1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;RandomString&lt;/h3&gt; 
&lt;p&gt;Returns a random string of the specified length and made of the specified charset.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.RandomString(5, lo.LettersCharset)
// example: "eIGbt"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/rRseOQVVum4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Substring&lt;/h3&gt; 
&lt;p&gt;Return part of a string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sub := lo.Substring("hello", 2, 3)
// "llo"

sub := lo.Substring("hello", -4, 3)
// "ell"

sub := lo.Substring("hello", -2, math.MaxUint)
// "lo"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TQlxQi82Lu1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ChunkString&lt;/h3&gt; 
&lt;p&gt;Returns an array of strings split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.ChunkString("123456", 2)
// []string{"12", "34", "56"}

lo.ChunkString("1234567", 2)
// []string{"12", "34", "56", "7"}

lo.ChunkString("", 2)
// []string{""}

lo.ChunkString("1", 2)
// []string{"1"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/__FLTuJVz54"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;RuneLength&lt;/h3&gt; 
&lt;p&gt;An alias to utf8.RuneCountInString which returns the number of runes in string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;sub := lo.RuneLength("hellô")
// 5

sub := len("hellô")
// 6
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tuhgW_lWY8l"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;PascalCase&lt;/h3&gt; 
&lt;p&gt;Converts string to pascal case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.PascalCase("hello_world")
// HelloWorld
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/iZkdeLP9oiB"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;CamelCase&lt;/h3&gt; 
&lt;p&gt;Converts string to camel case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.CamelCase("hello_world")
// helloWorld
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/dtyFB58MBRp"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;KebabCase&lt;/h3&gt; 
&lt;p&gt;Converts string to kebab case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.KebabCase("helloWorld")
// hello-world
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2YTuPafwECA"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;SnakeCase&lt;/h3&gt; 
&lt;p&gt;Converts string to snake case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.SnakeCase("HelloWorld")
// hello_world
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/QVKJG9nOnDg"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Words&lt;/h3&gt; 
&lt;p&gt;Splits string into an array of its words.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Words("helloWorld")
// []string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/2P4zhqqq61g"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Capitalize&lt;/h3&gt; 
&lt;p&gt;Converts the first character of string to upper case and the remaining to lower case.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Capitalize("heLLO")
// Hello
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ellipsis&lt;/h3&gt; 
&lt;p&gt;Trims and truncates a string to a specified length in &lt;code&gt;bytes&lt;/code&gt; and appends an ellipsis if truncated. If the string contains non-ASCII characters (which may occupy multiple bytes in UTF-8), truncating by byte length may split a character in the middle, potentially resulting in garbled output.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.Ellipsis("  Lorem Ipsum  ", 5)
// Lo...

str := lo.Ellipsis("Lorem Ipsum", 100)
// Lorem Ipsum

str := lo.Ellipsis("Lorem Ipsum", 3)
// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;T2 -&amp;gt; T9&lt;/h3&gt; 
&lt;p&gt;Creates a tuple from a list of values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuple1 := lo.T2("x", 1)
// Tuple2[string, int]{A: "x", B: 1}

func example() (string, int) { return "y", 2 }
tuple2 := lo.T2(example())
// Tuple2[string, int]{A: "y", B: 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/IllL3ZO4BQm"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Unpack2 -&amp;gt; Unpack9&lt;/h3&gt; 
&lt;p&gt;Returns values contained in tuple.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r1, r2 := lo.Unpack2(lo.Tuple2[string, int]{"a", 1})
// "a", 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unpack is also available as a method of TupleX.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuple2 := lo.T2("a", 1)
a, b := tuple2.Unpack()
// "a", 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/xVP_k0kJ96W"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Zip2 -&amp;gt; Zip9&lt;/h3&gt; 
&lt;p&gt;Zip creates a slice of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.&lt;/p&gt; 
&lt;p&gt;When collections have different size, the Tuple attributes are filled with zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;tuples := lo.Zip2([]string{"a", "b"}, []int{1, 2})
// []Tuple2[string, int]{{A: "a", B: 1}, {A: "b", B: 2}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/jujaA6GaJTp"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ZipBy2 -&amp;gt; ZipBy9&lt;/h3&gt; 
&lt;p&gt;ZipBy creates a slice of transformed elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.&lt;/p&gt; 
&lt;p&gt;When collections have different size, the Tuple attributes are filled with zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;items := lo.ZipBy2([]string{"a", "b"}, []int{1, 2}, func(a string, b int) string {
    return fmt.Sprintf("%s-%d", a, b)
})
// []string{"a-1", "b-2"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Unzip2 -&amp;gt; Unzip9&lt;/h3&gt; 
&lt;p&gt;Unzip accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;a, b := lo.Unzip2([]Tuple2[string, int]{{A: "a", B: 1}, {A: "b", B: 2}})
// []string{"a", "b"}
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/ciHugugvaAW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;UnzipBy2 -&amp;gt; UnzipBy9&lt;/h3&gt; 
&lt;p&gt;UnzipBy2 iterates over a collection and creates an array regrouping the elements to their pre-zip configuration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;a, b := lo.UnzipBy2([]string{"hello", "john", "doe"}, func(str string) (string, int) {
    return str, len(str)
})
// []string{"hello", "john", "doe"}
// []int{5, 4, 3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CrossJoin2 -&amp;gt; CrossJoin9&lt;/h3&gt; 
&lt;p&gt;Combines every items from one list with every items from others. It is the cartesian product of lists received as arguments. It returns an empty list if a list is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CrossJoin2([]string{"hello", "john", "doe"}, []int{1, 2})
// lo.Tuple2{"hello", 1}
// lo.Tuple2{"hello", 2}
// lo.Tuple2{"john", 1}
// lo.Tuple2{"john", 2}
// lo.Tuple2{"doe", 1}
// lo.Tuple2{"doe", 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CrossJoinBy2 -&amp;gt; CrossJoinBy9&lt;/h3&gt; 
&lt;p&gt;Combines every items from one list with every items from others. It is the cartesian product of lists received as arguments. The project function is used to create the output values. It returns an empty list if a list is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CrossJoinBy2([]string{"hello", "john", "doe"}, []int{1, 2}, func(a A, b B) string {
    return fmt.Sprintf("%s - %d", a, b)
})
// "hello - 1"
// "hello - 2"
// "john - 1"
// "john - 2"
// "doe - 1"
// "doe - 2"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Duration&lt;/h3&gt; 
&lt;p&gt;Returns the time taken to execute a function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duration := lo.Duration(func() {
    // very long job
})
// 3s
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Duration0 -&amp;gt; Duration10&lt;/h3&gt; 
&lt;p&gt;Returns the time taken to execute a function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duration := lo.Duration0(func() {
    // very long job
})
// 3s

err, duration := lo.Duration1(func() error {
    // very long job
    return fmt.Errorf("an error")
})
// an error
// 3s

str, nbr, err, duration := lo.Duration3(func() (string, int, error) {
    // very long job
    return "hello", 42, nil
})
// hello
// 42
// nil
// 3s
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ChannelDispatcher&lt;/h3&gt; 
&lt;p&gt;Distributes messages from input channels into N child channels. Close events are propagated to children.&lt;/p&gt; 
&lt;p&gt;Underlying channels can have a fixed buffer capacity or be unbuffered when cap is 0.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := make(chan int, 42)
for i := 0; i &amp;lt;= 10; i++ {
    ch &amp;lt;- i
}

children := lo.ChannelDispatcher(ch, 5, 10, DispatchingStrategyRoundRobin[int])
// []&amp;lt;-chan int{...}

consumer := func(c &amp;lt;-chan int) {
    for {
        msg, ok := &amp;lt;-c
        if !ok {
            println("closed")

            break
        }

        println(msg)
    }
}

for i := range children {
    go consumer(children[i])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Many distributions strategies are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyRoundRobin&lt;/a&gt;: Distributes messages in a rotating sequential manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyRandom&lt;/a&gt;: Distributes messages in a random manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyWeightedRandom&lt;/a&gt;: Distributes messages in a weighted manner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyFirst&lt;/a&gt;: Distributes messages in the first non-full channel.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyLeast&lt;/a&gt;: Distributes messages in the emptiest channel.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/samber/lo/master/channel.go"&gt;lo.DispatchingStrategyMost&lt;/a&gt;: Distributes to the fullest channel.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some strategies bring fallback, in order to favor non-blocking behaviors. See implementations.&lt;/p&gt; 
&lt;p&gt;For custom strategies, just implement the &lt;code&gt;lo.DispatchingStrategy&lt;/code&gt; prototype:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type DispatchingStrategy[T any] func(message T, messageIndex uint64, channels []&amp;lt;-chan T) int
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Eg:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type Message struct {
    TenantID uuid.UUID
}

func hash(id uuid.UUID) int {
    h := fnv.New32a()
    h.Write([]byte(id.String()))
    return int(h.Sum32())
}

// Routes messages per TenantID.
customStrategy := func(message string, messageIndex uint64, channels []&amp;lt;-chan string) int {
    destination := hash(message) % len(channels)

    // check if channel is full
    if len(channels[destination]) &amp;lt; cap(channels[destination]) {
        return destination
    }

    // fallback when child channel is full
    return utils.DispatchingStrategyRoundRobin(message, uint64(destination), channels)
}

children := lo.ChannelDispatcher(ch, 5, 10, customStrategy)
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SliceToChannel&lt;/h3&gt; 
&lt;p&gt;Returns a read-only channels of collection elements. Channel is closed after last element. Channel capacity can be customized.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}

for v := range lo.SliceToChannel(2, list) {
    println(v)
}
// prints 1, then 2, then 3, then 4, then 5
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ChannelToSlice&lt;/h3&gt; 
&lt;p&gt;Returns a slice built from channels items. Blocks until channel closes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;list := []int{1, 2, 3, 4, 5}
ch := lo.SliceToChannel(2, list)

items := ChannelToSlice(ch)
// []int{1, 2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Generator&lt;/h3&gt; 
&lt;p&gt;Implements the generator design pattern. Channel is closed after last element. Channel capacity can be customized.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;generator := func(yield func(int)) {
    yield(1)
    yield(2)
    yield(3)
}

for v := range lo.Generator(2, generator) {
    println(v)
}
// prints 1, then 2, then 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Buffer&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.SliceToChannel(2, []int{1, 2, 3, 4, 5})

items1, length1, duration1, ok1 := lo.Buffer(ch, 3)
// []int{1, 2, 3}, 3, 0s, true
items2, length2, duration2, ok2 := lo.Buffer(ch, 3)
// []int{4, 5}, 2, 0s, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

for {
    // read 1k items
    items, length, _, ok := lo.Buffer(ch, 1000)

    // do batching stuff

    if !ok {
        break
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;BufferWithContext&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel, with timeout. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ctx, cancel := context.WithCancel(context.TODO())
go func() {
    ch &amp;lt;- 0
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 1
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 2
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 3
    time.Sleep(10*time.Millisecond)
    ch &amp;lt;- 4
    time.Sleep(10*time.Millisecond)
    cancel()
}()

items1, length1, duration1, ok1 := lo.BufferWithContext(ctx, ch, 3)
// []int{0, 1, 2}, 3, 20ms, true
items2, length2, duration2, ok2 := lo.BufferWithContext(ctx, ch, 3)
// []int{3, 4}, 2, 30ms, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;BufferWithTimeout&lt;/h3&gt; 
&lt;p&gt;Creates a slice of n elements from a channel, with timeout. Returns the slice, the slice length, the read time and the channel status (opened/closed).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;generator := func(yield func(int)) {
    for i := 0; i &amp;lt; 5; i++ {
        yield(i)
        time.Sleep(35*time.Millisecond)
    }
}

ch := lo.Generator(0, generator)

items1, length1, duration1, ok1 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{1, 2}, 2, 100ms, true
items2, length2, duration2, ok2 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{3, 4, 5}, 3, 75ms, true
items3, length3, duration2, ok3 := lo.BufferWithTimeout(ch, 3, 100*time.Millisecond)
// []int{}, 0, 10ms, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

for {
    // read 1k items
    // wait up to 1 second
    items, length, _, ok := lo.BufferWithTimeout(ch, 1000, 1*time.Second)

    // do batching stuff

    if !ok {
        break
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example: Multithreaded RabbitMQ consumer 👇&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := readFromQueue()

// 5 workers
// prefetch 1k messages per worker
children := lo.ChannelDispatcher(ch, 5, 1000, lo.DispatchingStrategyFirst[int])

consumer := func(c &amp;lt;-chan int) {
    for {
        // read 1k items
        // wait up to 1 second
        items, length, _, ok := lo.BufferWithTimeout(ch, 1000, 1*time.Second)

        // do batching stuff

        if !ok {
            break
        }
    }
}

for i := range children {
    go consumer(children[i])
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FanIn&lt;/h3&gt; 
&lt;p&gt;Merge messages from multiple input channels into a single buffered channel. Output messages has no priority. When all upstream channels reach EOF, downstream channel closes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;stream1 := make(chan int, 42)
stream2 := make(chan int, 42)
stream3 := make(chan int, 42)

all := lo.FanIn(100, stream1, stream2, stream3)
// &amp;lt;-chan int
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FanOut&lt;/h3&gt; 
&lt;p&gt;Broadcasts all the upstream messages to multiple downstream channels. When upstream channel reach EOF, downstream channels close. If any downstream channels is full, broadcasting is paused.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;stream := make(chan int, 42)

all := lo.FanOut(5, 100, stream)
// [5]&amp;lt;-chan int
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Contains&lt;/h3&gt; 
&lt;p&gt;Returns true if an element is present in a collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;present := lo.Contains([]int{0, 1, 2, 3, 4, 5}, 5)
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ContainsBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate function returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;present := lo.ContainsBy([]int{0, 1, 2, 3, 4, 5}, func(x int) bool {
    return x == 3
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Every&lt;/h3&gt; 
&lt;p&gt;Returns true if all elements of a subset are contained into a collection or if the subset is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Every([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// true

ok := lo.Every([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EveryBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate returns true for all elements in the collection or if the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := EveryBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 5
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Some&lt;/h3&gt; 
&lt;p&gt;Returns true if at least 1 element of a subset is contained into a collection. If the subset is empty Some returns false.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Some([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// true

ok := lo.Some([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SomeBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate returns true for any of the elements in the collection. If the collection is empty SomeBy returns false.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := SomeBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 3
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;None&lt;/h3&gt; 
&lt;p&gt;Returns true if no element of a subset are contained into a collection or if the subset is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := None([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// false
b := None([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NoneBy&lt;/h3&gt; 
&lt;p&gt;Returns true if the predicate returns true for none of the elements in the collection or if the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := NoneBy([]int{1, 2, 3, 4}, func(x int) bool {
    return x &amp;lt; 0
})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Intersect&lt;/h3&gt; 
&lt;p&gt;Returns the intersection between two collections.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{0, 2})
// []int{0, 2}

result2 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{0, 6})
// []int{0}

result3 := lo.Intersect([]int{0, 1, 2, 3, 4, 5}, []int{-1, 6})
// []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Difference&lt;/h3&gt; 
&lt;p&gt;Returns the difference between two collections.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The first value is the collection of element absent of list2.&lt;/li&gt; 
 &lt;li&gt;The second value is the collection of element absent of list1.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;left, right := lo.Difference([]int{0, 1, 2, 3, 4, 5}, []int{0, 2, 6})
// []int{1, 3, 4, 5}, []int{6}

left, right := lo.Difference([]int{0, 1, 2, 3, 4, 5}, []int{0, 1, 2, 3, 4, 5})
// []int{}, []int{}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Union&lt;/h3&gt; 
&lt;p&gt;Returns all distinct elements from given collections. Result will not change the order of elements relatively.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;union := lo.Union([]int{0, 1, 2, 3, 4, 5}, []int{0, 2}, []int{0, 10})
// []int{0, 1, 2, 3, 4, 5, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Without&lt;/h3&gt; 
&lt;p&gt;Returns slice excluding all given values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.Without([]int{0, 2, 10}, 2)
// []int{0, 10}

subset := lo.Without([]int{0, 2, 10}, 0, 1, 2, 3, 4, 5)
// []int{10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutBy&lt;/h3&gt; 
&lt;p&gt;Filters a slice by excluding elements whose extracted keys match any in the exclude list.&lt;/p&gt; 
&lt;p&gt;It returns a new slice containing only the elements whose keys are not in the exclude list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type struct User {
    ID int
    Name string
}

// original users
users := []User{
    {ID: 1, Name: "Alice"},
    {ID: 2, Name: "Bob"},
    {ID: 3, Name: "Charlie"},
}

// extract function to get the user ID
getID := func(user User) int {
    return user.ID
}

// exclude users with IDs 2 and 3
excludedIDs := []int{2, 3}

// filtering users
filteredUsers := lo.WithoutBy(users, getID, excludedIDs...)
// []User[{ID: 1, Name: "Alice"}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutEmpty&lt;/h3&gt; 
&lt;p&gt;Returns slice excluding zero values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.WithoutEmpty([]int{0, 2, 10})
// []int{2, 10}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WithoutNth&lt;/h3&gt; 
&lt;p&gt;Returns slice excluding nth value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;subset := lo.WithoutNth([]int{-2, -1, 0, 1, 2}, 3, -42, 1)
// []int{-2, 0, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ElementsMatch&lt;/h3&gt; 
&lt;p&gt;Returns true if lists contain the same set of elements (including empty set).&lt;/p&gt; 
&lt;p&gt;If there are duplicate elements, the number of appearances of each of them in both lists should match.&lt;/p&gt; 
&lt;p&gt;The order of elements is not checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := lo.ElementsMatch([]int{1, 1, 2}, []int{2, 1, 1})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ElementsMatchBy&lt;/h3&gt; 
&lt;p&gt;Returns true if lists contain the same set of elements' keys (including empty set).&lt;/p&gt; 
&lt;p&gt;If there are duplicate keys, the number of appearances of each of them in both lists should match.&lt;/p&gt; 
&lt;p&gt;The order of elements is not checked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;b := lo.ElementsMatchBy(
    []someType{a, b},
    []someType{b, a},
    func(item someType) string { return item.ID() },
)
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IndexOf&lt;/h3&gt; 
&lt;p&gt;Returns the index at which the first occurrence of a value is found in an array or return -1 if the value cannot be found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;found := lo.IndexOf([]int{0, 1, 2, 1, 2, 3}, 2)
// 2

notFound := lo.IndexOf([]int{0, 1, 2, 1, 2, 3}, 6)
// -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LastIndexOf&lt;/h3&gt; 
&lt;p&gt;Returns the index at which the last occurrence of a value is found in an array or return -1 if the value cannot be found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;found := lo.LastIndexOf([]int{0, 1, 2, 1, 2, 3}, 2)
// 4

notFound := lo.LastIndexOf([]int{0, 1, 2, 1, 2, 3}, 6)
// -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Find&lt;/h3&gt; 
&lt;p&gt;Search an element in a slice based on a predicate. It returns element and true if element was found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, ok := lo.Find([]string{"a", "b", "c", "d"}, func(i string) bool {
    return i == "b"
})
// "b", true

str, ok := lo.Find([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindIndexOf&lt;/h3&gt; 
&lt;p&gt;FindIndexOf searches an element in a slice based on a predicate and returns the index and true. It returns -1 and false if the element is not found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, index, ok := lo.FindIndexOf([]string{"a", "b", "a", "b"}, func(i string) bool {
    return i == "b"
})
// "b", 1, true

str, index, ok := lo.FindIndexOf([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", -1, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindLastIndexOf&lt;/h3&gt; 
&lt;p&gt;FindLastIndexOf searches an element in a slice based on a predicate and returns the index and true. It returns -1 and false if the element is not found.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, index, ok := lo.FindLastIndexOf([]string{"a", "b", "a", "b"}, func(i string) bool {
    return i == "b"
})
// "b", 4, true

str, index, ok := lo.FindLastIndexOf([]string{"foobar"}, func(i string) bool {
    return i == "b"
})
// "", -1, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindOrElse&lt;/h3&gt; 
&lt;p&gt;Search an element in a slice based on a predicate. It returns the element if found or a given fallback value otherwise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := lo.FindOrElse([]string{"a", "b", "c", "d"}, "x", func(i string) bool {
    return i == "b"
})
// "b"

str := lo.FindOrElse([]string{"foobar"}, "x", func(i string) bool {
    return i == "b"
})
// "x"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindKey&lt;/h3&gt; 
&lt;p&gt;Returns the key of the first value matching.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1, ok1 := lo.FindKey(map[string]int{"foo": 1, "bar": 2, "baz": 3}, 2)
// "bar", true

result2, ok2 := lo.FindKey(map[string]int{"foo": 1, "bar": 2, "baz": 3}, 42)
// "", false

type test struct {
    foobar string
}
result3, ok3 := lo.FindKey(map[string]test{"foo": test{"foo"}, "bar": test{"bar"}, "baz": test{"baz"}}, test{"foo"})
// "foo", true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindKeyBy&lt;/h3&gt; 
&lt;p&gt;Returns the key of the first element predicate returns truthy for.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result1, ok1 := lo.FindKeyBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(k string, v int) bool {
    return k == "foo"
})
// "foo", true

result2, ok2 := lo.FindKeyBy(map[string]int{"foo": 1, "bar": 2, "baz": 3}, func(k string, v int) bool {
    return false
})
// "", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindUniques&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all the unique elements of the collection. The order of result values is determined by the order they occur in the array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqueValues := lo.FindUniques([]int{1, 2, 2, 1, 2, 3})
// []int{3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindUniquesBy&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all the unique elements of the collection. The order of result values is determined by the order they occur in the array. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in array to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;uniqueValues := lo.FindUniquesBy([]int{3, 4, 5, 6, 7}, func(i int) int {
    return i%3
})
// []int{5}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindDuplicates&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the first occurrence of each duplicated elements of the collection. The order of result values is determined by the order they occur in the array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duplicatedValues := lo.FindDuplicates([]int{1, 2, 2, 1, 2, 3})
// []int{1, 2}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FindDuplicatesBy&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the first occurrence of each duplicated elements of the collection. The order of result values is determined by the order they occur in the array. It accepts &lt;code&gt;iteratee&lt;/code&gt; which is invoked for each element in array to generate the criterion by which uniqueness is computed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;duplicatedValues := lo.FindDuplicatesBy([]int{3, 4, 5, 6, 7}, func(i int) int {
    return i%3
})
// []int{3, 4}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Min&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min := lo.Min([]int{1, 2, 3})
// 1

min := lo.Min([]int{})
// 0

min := lo.Min([]time.Duration{time.Second, time.Hour})
// 1s
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MinIndex&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection and the index of the minimum value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min, index := lo.MinIndex([]int{1, 2, 3})
// 1, 0

min, index := lo.MinIndex([]int{})
// 0, -1

min, index := lo.MinIndex([]time.Duration{time.Second, time.Hour})
// 1s, 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MinBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection using the given comparison function.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the smallest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min := lo.MinBy([]string{"s1", "string2", "s3"}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "s1"

min := lo.MinBy([]string{}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MinIndexBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum value of a collection using the given comparison function and the index of the minimum value.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the smallest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;min, index := lo.MinIndexBy([]string{"s1", "string2", "s3"}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "s1", 0

min, index := lo.MinIndexBy([]string{}, func(item string, min string) bool {
    return len(item) &amp;lt; len(min)
})
// "", -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Earliest&lt;/h3&gt; 
&lt;p&gt;Search the minimum time.Time of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;earliest := lo.Earliest(time.Now(), time.Time{})
// 0001-01-01 00:00:00 +0000 UTC
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EarliestBy&lt;/h3&gt; 
&lt;p&gt;Search the minimum time.Time of a collection using the given iteratee function.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
    bar time.Time
}

earliest := lo.EarliestBy([]foo{{time.Now()}, {}}, func(i foo) time.Time {
    return i.bar
})
// {bar:{2023-04-01 01:02:03 +0000 UTC}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Max&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max := lo.Max([]int{1, 2, 3})
// 3

max := lo.Max([]int{})
// 0

max := lo.Max([]time.Duration{time.Second, time.Hour})
// 1h
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxIndex&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection and the index of the maximum value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max, index := lo.MaxIndex([]int{1, 2, 3})
// 3, 2

max, index := lo.MaxIndex([]int{})
// 0, -1

max, index := lo.MaxIndex([]time.Duration{time.Second, time.Hour})
// 1h, 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection using the given comparison function.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the greatest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max := lo.MaxBy([]string{"string1", "s2", "string3"}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "string1"

max := lo.MaxBy([]string{}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;MaxIndexBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum value of a collection using the given comparison function and the index of the maximum value.&lt;/p&gt; 
&lt;p&gt;If several values of the collection are equal to the greatest value, returns the first such value.&lt;/p&gt; 
&lt;p&gt;Returns (zero value, -1) when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;max, index := lo.MaxIndexBy([]string{"string1", "s2", "string3"}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "string1", 0

max, index := lo.MaxIndexBy([]string{}, func(item string, max string) bool {
    return len(item) &amp;gt; len(max)
})
// "", -1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Latest&lt;/h3&gt; 
&lt;p&gt;Search the maximum time.Time of a collection.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;latest := lo.Latest(time.Now(), time.Time{})
// 2023-04-01 01:02:03 +0000 UTC
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LatestBy&lt;/h3&gt; 
&lt;p&gt;Search the maximum time.Time of a collection using the given iteratee function.&lt;/p&gt; 
&lt;p&gt;Returns zero value when the collection is empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;type foo struct {
    bar time.Time
}

latest := lo.LatestBy([]foo{{time.Now()}, {}}, func(i foo) time.Time {
    return i.bar
})
// {bar:{2023-04-01 01:02:03 +0000 UTC}}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;First&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection and check for availability of the first element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first, ok := lo.First([]int{1, 2, 3})
// 1, true

first, ok := lo.First([]int{})
// 0, false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FirstOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection or zero value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first := lo.FirstOrEmpty([]int{1, 2, 3})
// 1

first := lo.FirstOrEmpty([]int{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FirstOr&lt;/h3&gt; 
&lt;p&gt;Returns the first element of a collection or the fallback value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;first := lo.FirstOr([]int{1, 2, 3}, 245)
// 1

first := lo.FirstOr([]int{}, 31)
// 31
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Last&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or error if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last, ok := lo.Last([]int{1, 2, 3})
// 3
// true

last, ok := lo.Last([]int{})
// 0
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LastOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or zero value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last := lo.LastOrEmpty([]int{1, 2, 3})
// 3

last := lo.LastOrEmpty([]int{})
// 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;LastOr&lt;/h3&gt; 
&lt;p&gt;Returns the last element of a collection or the fallback value if empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;last := lo.LastOr([]int{1, 2, 3}, 245)
// 3

last := lo.LastOr([]int{}, 31)
// 31
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Nth&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of collection. If &lt;code&gt;nth&lt;/code&gt; is negative, the nth element from the end is returned. An error is returned when nth is out of slice bounds.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth, err := lo.Nth([]int{0, 1, 2, 3}, 2)
// 2

nth, err := lo.Nth([]int{0, 1, 2, 3}, -2)
// 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NthOr&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of the collection. If &lt;code&gt;nth&lt;/code&gt; is negative, it returns the &lt;code&gt;nth&lt;/code&gt; element from the end. If &lt;code&gt;nth&lt;/code&gt; is out of slice bounds, it returns the provided fallback value&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth := lo.NthOr([]int{10, 20, 30, 40, 50}, 2, -1)
// 30

nth := lo.NthOr([]int{10, 20, 30, 40, 50}, -1, -1)
// 50

nth := lo.NthOr([]int{10, 20, 30, 40, 50}, 5, -1)
// -1 (fallback value)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;NthOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the element at index &lt;code&gt;nth&lt;/code&gt; of the collection. If &lt;code&gt;nth&lt;/code&gt; is negative, it returns the &lt;code&gt;nth&lt;/code&gt; element from the end. If &lt;code&gt;nth&lt;/code&gt; is out of slice bounds, it returns the zero value for the element type (e.g., 0 for integers, "" for strings, etc).&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, 2)
// 30

nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, -1)
// 50

nth := lo.NthOrEmpty([]int{10, 20, 30, 40, 50}, 5)
// 0 (zero value for int)

nth := lo.NthOrEmpty([]string{"apple", "banana", "cherry"}, 2)
// "cherry"

nth := lo.NthOrEmpty([]string{"apple", "banana", "cherry"}, 5)
// "" (zero value for string)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Sample&lt;/h3&gt; 
&lt;p&gt;Returns a random item from collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Sample([]string{"a", "b", "c"})
// a random string from []string{"a", "b", "c"}

lo.Sample([]string{})
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SampleBy&lt;/h3&gt; 
&lt;p&gt;Returns a random item from collection, using a given random integer generator.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;import "math/rand"

r := rand.New(rand.NewSource(42))
lo.SampleBy([]string{"a", "b", "c"}, r.Intn)
// a random string from []string{"a", "b", "c"}, using a seeded random generator

lo.SampleBy([]string{}, r.Intn)
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Samples&lt;/h3&gt; 
&lt;p&gt;Returns N random unique items from collection.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Samples([]string{"a", "b", "c"}, 3)
// []string{"a", "b", "c"} in random order
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;SamplesBy&lt;/h3&gt; 
&lt;p&gt;Returns N random unique items from collection, using a given random integer generator.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;r := rand.New(rand.NewSource(42))
lo.SamplesBy([]string{"a", "b", "c"}, 3, r.Intn)
// []string{"a", "b", "c"} in random order, using a seeded random generator
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Ternary&lt;/h3&gt; 
&lt;p&gt;A 1 line if/else statement.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Ternary(true, "a", "b")
// "a"

result := lo.Ternary(false, "a", "b")
// "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Take care to avoid dereferencing potentially nil pointers in your A/B expressions, because they are both evaluated. See TernaryF to avoid this problem.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/t-D7WBL44h2"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TernaryF&lt;/h3&gt; 
&lt;p&gt;A 1 line if/else statement whose options are functions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.TernaryF(true, func() string { return "a" }, func() string { return "b" })
// "a"

result := lo.TernaryF(false, func() string { return "a" }, func() string { return "b" })
// "b"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Useful to avoid nil-pointer dereferencing in initializations, or avoid running unnecessary code&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var s *string

someStr := TernaryF(s == nil, func() string { return uuid.New().String() }, func() string { return *s })
// ef782193-c30c-4e2e-a7ae-f8ab5e125e02
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/AO4VW20JoqM"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;If / ElseIf / Else&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.If(true, 1).
    ElseIf(false, 2).
    Else(3)
// 1

result := lo.If(false, 1).
    ElseIf(true, 2).
    Else(3)
// 2

result := lo.If(false, 1).
    ElseIf(false, 2).
    Else(3)
// 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.IfF(true, func () int {
        return 1
    }).
    ElseIfF(false, func () int {
        return 2
    }).
    ElseF(func () int {
        return 3
    })
// 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Mixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.IfF(true, func () int {
        return 1
    }).
    Else(42)
// 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/WSw3ApMxhyW"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Switch / Case / Default&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "1"

result := lo.Switch(2).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "2"

result := lo.Switch(42).
    Case(1, "1").
    Case(2, "2").
    Default("3")
// "3"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using callbacks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    CaseF(1, func() string {
        return "1"
    }).
    CaseF(2, func() string {
        return "2"
    }).
    DefaultF(func() string {
        return "3"
    })
// "1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Mixed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.Switch(1).
    CaseF(1, func() string {
        return "1"
    }).
    Default("42")
// "1"
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TGbKUMAeRUd"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;IsNil&lt;/h3&gt; 
&lt;p&gt;Checks if a value is nil or if it's a reference type with a nil underlying value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var x int
lo.IsNil(x)
// false

var k struct{}
lo.IsNil(k)
// false

var i *int
lo.IsNil(i)
// true

var ifaceWithNilValue any = (*string)(nil)
lo.IsNil(ifaceWithNilValue)
// true
ifaceWithNilValue == nil
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsNotNil&lt;/h3&gt; 
&lt;p&gt;Checks if a value is not nil or if it's not a reference type with a nil underlying value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;var x int
lo.IsNotNil(x)
// true

var k struct{}
lo.IsNotNil(k)
// true

var i *int
lo.IsNotNil(i)
// false

var ifaceWithNilValue any = (*string)(nil)
lo.IsNotNil(ifaceWithNilValue)
// false
ifaceWithNilValue == nil
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ToPtr&lt;/h3&gt; 
&lt;p&gt;Returns a pointer copy of the value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.ToPtr("hello world")
// *string{"hello world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Nil&lt;/h3&gt; 
&lt;p&gt;Returns a nil pointer of type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.Nil[float64]()
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;EmptyableToPtr&lt;/h3&gt; 
&lt;p&gt;Returns a pointer copy of value if it's nonzero. Otherwise, returns nil pointer.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.EmptyableToPtr(nil)
// nil

ptr := lo.EmptyableToPtr("")
// nil

ptr := lo.EmptyableToPtr([]int{})
// *[]int{}

ptr := lo.EmptyableToPtr("hello world")
// *string{"hello world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromPtr&lt;/h3&gt; 
&lt;p&gt;Returns the pointer value or empty.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := "hello world"
value := lo.FromPtr(&amp;amp;str)
// "hello world"

value := lo.FromPtr(nil)
// ""
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromPtrOr&lt;/h3&gt; 
&lt;p&gt;Returns the pointer value or the fallback value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str := "hello world"
value := lo.FromPtrOr(&amp;amp;str, "empty")
// "hello world"

value := lo.FromPtrOr(nil, "empty")
// "empty"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ToSlicePtr&lt;/h3&gt; 
&lt;p&gt;Returns a slice of pointer copy of value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ptr := lo.ToSlicePtr([]string{"hello", "world"})
// []*string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromSlicePtr&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the pointer values. Returns a zero value in case of a nil pointer element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str1 := "hello"
str2 := "world"

ptr := lo.FromSlicePtr[string]([]*string{&amp;amp;str1, &amp;amp;str2, nil})
// []string{"hello", "world", ""}

ptr := lo.Compact(
    lo.FromSlicePtr[string]([]*string{&amp;amp;str1, &amp;amp;str2, nil}),
)
// []string{"hello", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromSlicePtrOr&lt;/h3&gt; 
&lt;p&gt;Returns a slice with the pointer values or the fallback value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str1 := "hello"
str2 := "world"

ptr := lo.FromSlicePtrOr([]*string{&amp;amp;str1, nil, &amp;amp;str2}, "fallback value")
// []string{"hello", "fallback value", "world"}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/CuXGVzo9G65"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ToAnySlice&lt;/h3&gt; 
&lt;p&gt;Returns a slice with all elements mapped to &lt;code&gt;any&lt;/code&gt; type.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;elements := lo.ToAnySlice([]int{1, 5, 1})
// []any{1, 5, 1}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;FromAnySlice&lt;/h3&gt; 
&lt;p&gt;Returns an &lt;code&gt;any&lt;/code&gt; slice with all elements mapped to a type. Returns false in case of type conversion failure.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;elements, ok := lo.FromAnySlice([]any{"foobar", 42})
// []string{}, false

elements, ok := lo.FromAnySlice([]any{"foobar", "42"})
// []string{"foobar", "42"}, true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Empty&lt;/h3&gt; 
&lt;p&gt;Returns the &lt;a href="https://go.dev/ref/spec#The_zero_value"&gt;zero value&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.Empty[int]()
// 0
lo.Empty[string]()
// ""
lo.Empty[bool]()
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsEmpty&lt;/h3&gt; 
&lt;p&gt;Returns true if argument is a zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.IsEmpty(0)
// true
lo.IsEmpty(42)
// false

lo.IsEmpty("")
// true
lo.IsEmpty("foobar")
// false

type test struct {
    foobar string
}

lo.IsEmpty(test{foobar: ""})
// true
lo.IsEmpty(test{foobar: "foobar"})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;IsNotEmpty&lt;/h3&gt; 
&lt;p&gt;Returns true if argument is a zero value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;lo.IsNotEmpty(0)
// false
lo.IsNotEmpty(42)
// true

lo.IsNotEmpty("")
// false
lo.IsNotEmpty("foobar")
// true

type test struct {
    foobar string
}

lo.IsNotEmpty(test{foobar: ""})
// false
lo.IsNotEmpty(test{foobar: "foobar"})
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Coalesce&lt;/h3&gt; 
&lt;p&gt;Returns the first non-empty arguments. Arguments must be comparable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.Coalesce(0, 1, 2, 3)
// 1 true

result, ok := lo.Coalesce("")
// "" false

var nilStr *string
str := "foobar"
result, ok := lo.Coalesce(nil, nilStr, &amp;amp;str)
// &amp;amp;"foobar" true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-empty arguments. Arguments must be comparable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceOrEmpty(0, 1, 2, 3)
// 1

result := lo.CoalesceOrEmpty("")
// ""

var nilStr *string
str := "foobar"
result := lo.CoalesceOrEmpty(nil, nilStr, &amp;amp;str)
// &amp;amp;"foobar"
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceSlice&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.CoalesceSlice([]int{1, 2, 3}, []int{4, 5, 6})
// [1, 2, 3]
// true

result, ok := lo.CoalesceSlice(nil, []int{})
// []
// true

result, ok := lo.CoalesceSlice([]int(nil))
// []
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceSliceOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero slice.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceSliceOrEmpty([]int{1, 2, 3}, []int{4, 5, 6})
// [1, 2, 3]

result := lo.CoalesceSliceOrEmpty(nil, []int{})
// []
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceMap&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result, ok := lo.CoalesceMap(map[string]int{"1": 1, "2": 2, "3": 3}, map[string]int{"4": 4, "5": 5, "6": 6})
// {"1": 1, "2": 2, "3": 3}
// true

result, ok := lo.CoalesceMap(nil, map[string]int{})
// {}
// true

result, ok := lo.CoalesceMap(map[string]int(nil))
// {}
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CoalesceMapOrEmpty&lt;/h3&gt; 
&lt;p&gt;Returns the first non-zero map.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;result := lo.CoalesceMapOrEmpty(map[string]int{"1": 1, "2": 2, "3": 3}, map[string]int{"4": 4, "5": 5, "6": 6})
// {"1": 1, "2": 2, "3": 3}

result := lo.CoalesceMapOrEmpty(nil, map[string]int{})
// {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Partial&lt;/h3&gt; 
&lt;p&gt;Returns new function that, when called, has its first argument set to the provided value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;add := func(x, y int) int { return x + y }
f := lo.Partial(add, 5)

f(10)
// 15

f(42)
// 47
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Partial2 -&amp;gt; Partial5&lt;/h3&gt; 
&lt;p&gt;Returns new function that, when called, has its first argument set to the provided value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;add := func(x, y, z int) int { return x + y + z }
f := lo.Partial2(add, 42)

f(10, 5)
// 57

f(42, -4)
// 80
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Attempt&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output. Returns either the caught error or nil.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;iter, err := lo.Attempt(42, func(i int) error {
    if i == 5 {
        return nil
    }

    return fmt.Errorf("failed")
})
// 6
// nil

iter, err := lo.Attempt(2, func(i int) error {
    if i == 5 {
        return nil
    }

    return fmt.Errorf("failed")
})
// 2
// error "failed"

iter, err := lo.Attempt(0, func(i int) error {
    if i &amp;lt; 42 {
        return fmt.Errorf("failed")
    }

    return nil
})
// 43
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look on &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/3ggJZ2ZKcMj"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWithDelay&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output, with a pause between each call. Returns either the caught error or nil.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;iter, duration, err := lo.AttemptWithDelay(5, 2*time.Second, func(i int, duration time.Duration) error {
    if i == 2 {
        return nil
    }

    return fmt.Errorf("failed")
})
// 3
// ~ 4 seconds
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look on &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/tVs6CygC7m1"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWhile&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output. Returns either the caught error or nil, along with a bool value to determine whether the function should be invoked again. It will terminate the invoke immediately if the second return value is false.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count1, err1 := lo.AttemptWhile(5, func(i int) (error, bool) {
    err := doMockedHTTPRequest(i)
    if err != nil {
        if errors.Is(err, ErrBadRequest) { // lets assume ErrBadRequest is a critical error that needs to terminate the invoke
            return err, false // flag the second return value as false to terminate the invoke
        }

        return err, true
    }

    return nil, false
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look on &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/M2wVq24PaZM"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;AttemptWhileWithDelay&lt;/h3&gt; 
&lt;p&gt;Invokes a function N times until it returns valid output, with a pause between each call. Returns either the caught error or nil, along with a bool value to determine whether the function should be invoked again. It will terminate the invoke immediately if the second return value is false.&lt;/p&gt; 
&lt;p&gt;When the first argument is less than &lt;code&gt;1&lt;/code&gt;, the function runs until a successful response is returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;count1, time1, err1 := lo.AttemptWhileWithDelay(5, time.Millisecond, func(i int, d time.Duration) (error, bool) {
    err := doMockedHTTPRequest(i)
    if err != nil {
        if errors.Is(err, ErrBadRequest) { // lets assume ErrBadRequest is a critical error that needs to terminate the invoke
            return err, false // flag the second return value as false to terminate the invoke
        }

        return err, true
    }

    return nil, false
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more advanced retry strategies (delay, exponential backoff...), please take a look on &lt;a href="https://github.com/cenkalti/backoff"&gt;cenkalti/backoff&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/cfcmhvLO-nv"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Debounce&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;NewDebounce&lt;/code&gt; creates a debounced instance that delays invoking functions given until after wait milliseconds have elapsed, until &lt;code&gt;cancel&lt;/code&gt; is called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
    println("Called once after 100ms when debounce stopped invoking!")
}

debounce, cancel := lo.NewDebounce(100 * time.Millisecond, f)
for j := 0; j &amp;lt; 10; j++ {
    debounce()
}

time.Sleep(1 * time.Second)
cancel()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mz32VMK2nqe"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;DebounceBy&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;NewDebounceBy&lt;/code&gt; creates a debounced instance for each distinct key, that delays invoking functions given until after wait milliseconds have elapsed, until &lt;code&gt;cancel&lt;/code&gt; is called.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func(key string, count int) {
    println(key + ": Called once after 100ms when debounce stopped invoking!")
}

debounce, cancel := lo.NewDebounceBy(100 * time.Millisecond, f)
for j := 0; j &amp;lt; 10; j++ {
    debounce("first key")
    debounce("second key")
}

time.Sleep(1 * time.Second)
cancel("first key")
cancel("second key")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/d3Vpt6pxhY8"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Throttle&lt;/h3&gt; 
&lt;p&gt;Creates a throttled instance that invokes given functions only once in every interval.&lt;/p&gt; 
&lt;p&gt;This returns 2 functions, First one is throttled function and Second one is a function to reset interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
	println("Called once in every 100ms")
}

throttle, reset := lo.NewThrottle(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle()
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;NewThrottleWithCount&lt;/code&gt; is NewThrottle with count limit, throttled function will be invoked count times in every interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func() {
	println("Called three times in every 100ms")
}

throttle, reset := lo.NewThrottleWithCount(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle()
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;NewThrottleBy&lt;/code&gt; and &lt;code&gt;NewThrottleByWithCount&lt;/code&gt; are NewThrottle with sharding key, throttled function will be invoked count times in every interval.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;f := func(key string) {
	println(key, "Called three times in every 100ms")
}

throttle, reset := lo.NewThrottleByWithCount(100 * time.Millisecond, f)

for j := 0; j &amp;lt; 10; j++ {
	throttle("foo")
	time.Sleep(30 * time.Millisecond)
}

reset()
throttle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Synchronize&lt;/h3&gt; 
&lt;p&gt;Wraps the underlying callback in a mutex. It receives an optional mutex.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;s := lo.Synchronize()

for i := 0; i &amp;lt; 10; i++ {
    go s.Do(func () {
        println("will be called sequentially")
    })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is equivalent to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;mu := sync.Mutex{}

func foobar() {
    mu.Lock()
    defer mu.Unlock()

    // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Async&lt;/h3&gt; 
&lt;p&gt;Executes a function in a goroutine and returns the result in a channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.Async(func() error { time.Sleep(10 * time.Second); return nil })
// chan error (nil)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Async{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;Executes a function in a goroutine and returns the result in a channel. For function with multiple return values, the results will be returned as a tuple inside the channel. For function without return, struct{} will be returned in the channel.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ch := lo.Async0(func() { time.Sleep(10 * time.Second) })
// chan struct{}

ch := lo.Async1(func() int {
  time.Sleep(10 * time.Second);
  return 42
})
// chan int (42)

ch := lo.Async2(func() (int, string) {
  time.Sleep(10 * time.Second);
  return 42, "Hello"
})
// chan lo.Tuple2[int, string] ({42, "Hello"})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Transaction&lt;/h3&gt; 
&lt;p&gt;Implements a Saga pattern.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;transaction := NewTransaction().
    Then(
        func(state int) (int, error) {
            fmt.Println("step 1")
            return state + 10, nil
        },
        func(state int) int {
            fmt.Println("rollback 1")
            return state - 10
        },
    ).
    Then(
        func(state int) (int, error) {
            fmt.Println("step 2")
            return state + 15, nil
        },
        func(state int) int {
            fmt.Println("rollback 2")
            return state - 15
        },
    ).
    Then(
        func(state int) (int, error) {
            fmt.Println("step 3")

            if true {
                return state, fmt.Errorf("error")
            }

            return state + 42, nil
        },
        func(state int) int {
            fmt.Println("rollback 3")
            return state - 42
        },
    )

_, _ = transaction.Process(-5)

// Output:
// step 1
// step 2
// step 3
// rollback 2
// rollback 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WaitFor&lt;/h3&gt; 
&lt;p&gt;Runs periodically until a condition is validated.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;alwaysTrue := func(i int) bool { return true }
alwaysFalse := func(i int) bool { return false }
laterTrue := func(i int) bool {
    return i &amp;gt; 5
}

iterations, duration, ok := lo.WaitFor(alwaysTrue, 10*time.Millisecond, 2 * time.Millisecond)
// 1
// 1ms
// true

iterations, duration, ok := lo.WaitFor(alwaysFalse, 10*time.Millisecond, time.Millisecond)
// 10
// 10ms
// false

iterations, duration, ok := lo.WaitFor(laterTrue, 10*time.Millisecond, time.Millisecond)
// 7
// 7ms
// true

iterations, duration, ok := lo.WaitFor(laterTrue, 10*time.Millisecond, 5*time.Millisecond)
// 2
// 10ms
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;WaitForWithContext&lt;/h3&gt; 
&lt;p&gt;Runs periodically until a condition is validated or context is invalid.&lt;/p&gt; 
&lt;p&gt;The condition receives also the context, so it can invalidate the process in the condition checker&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ctx := context.Background()

alwaysTrue := func(_ context.Context, i int) bool { return true }
alwaysFalse := func(_ context.Context, i int) bool { return false }
laterTrue := func(_ context.Context, i int) bool {
    return i &amp;gt;= 5
}

iterations, duration, ok := lo.WaitForWithContext(ctx, alwaysTrue, 10*time.Millisecond, 2 * time.Millisecond)
// 1
// 1ms
// true

iterations, duration, ok := lo.WaitForWithContext(ctx, alwaysFalse, 10*time.Millisecond, time.Millisecond)
// 10
// 10ms
// false

iterations, duration, ok := lo.WaitForWithContext(ctx, laterTrue, 10*time.Millisecond, time.Millisecond)
// 5
// 5ms
// true

iterations, duration, ok := lo.WaitForWithContext(ctx, laterTrue, 10*time.Millisecond, 5*time.Millisecond)
// 2
// 10ms
// false

expiringCtx, cancel := context.WithTimeout(ctx, 5*time.Millisecond)
iterations, duration, ok := lo.WaitForWithContext(expiringCtx, alwaysFalse, 100*time.Millisecond, time.Millisecond)
// 5
// 5.1ms
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Validate&lt;/h3&gt; 
&lt;p&gt;Helper function that creates an error when a condition is not met.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;slice := []string{"a"}
val := lo.Validate(len(slice) == 0, "Slice should be empty but contains %v", slice)
// error("Slice should be empty but contains [a]")

slice := []string{}
val := lo.Validate(len(slice) == 0, "Slice should be empty but contains %v", slice)
// nil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/vPyh51XpCBt"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Must&lt;/h3&gt; 
&lt;p&gt;Wraps a function call to panics if second argument is &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, returns the value otherwise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;val := lo.Must(time.Parse("2006-01-02", "2022-01-15"))
// 2022-01-15

val := lo.Must(time.Parse("2006-01-02", "bad-value"))
// panics
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TMoWrRp3DyC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Must{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;Must* has the same behavior as Must, but returns multiple values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;func example0() (error)
func example1() (int, error)
func example2() (int, string, error)
func example3() (int, string, time.Date, error)
func example4() (int, string, time.Date, bool, error)
func example5() (int, string, time.Date, bool, float64, error)
func example6() (int, string, time.Date, bool, float64, byte, error)

lo.Must0(example0())
val1 := lo.Must1(example1())    // alias to Must
val1, val2 := lo.Must2(example2())
val1, val2, val3 := lo.Must3(example3())
val1, val2, val3, val4 := lo.Must4(example4())
val1, val2, val3, val4, val5 := lo.Must5(example5())
val1, val2, val3, val4, val5, val6 := lo.Must6(example6())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can wrap functions like &lt;code&gt;func (...) (..., ok bool)&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// math.Signbit(float64) bool
lo.Must0(math.Signbit(v))

// bytes.Cut([]byte,[]byte) ([]byte, []byte, bool)
before, after := lo.Must2(bytes.Cut(s, sep))
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can give context to the panic message by adding some printf-like arguments.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;val, ok := lo.Find(myString, func(i string) bool {
    return i == requiredChar
})
lo.Must0(ok, "'%s' must always contain '%s'", myString, requiredChar)

list := []int{0, 1, 2}
item := 5
lo.Must0(lo.Contains(list, item), "'%s' must always contain '%s'", list, item)
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TMoWrRp3DyC"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Try&lt;/h3&gt; 
&lt;p&gt;Calls the function and returns false in case of error and panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Try(func() error {
    panic("error")
    return nil
})
// false

ok := lo.Try(func() error {
    return nil
})
// true

ok := lo.Try(func() error {
    return fmt.Errorf("error")
})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mTyyWUvn9u4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Try{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but the callback returns 2 variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;ok := lo.Try2(func() (string, error) {
    panic("error")
    return "", nil
})
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/mTyyWUvn9u4"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryOr&lt;/h3&gt; 
&lt;p&gt;Calls the function and return a default value in case of error and on panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, ok := lo.TryOr(func() (string, error) {
    panic("error")
    return "hello", nil
}, "world")
// world
// false

str, ok := lo.TryOr(func() error {
    return "hello", nil
}, "world")
// hello
// true

str, ok := lo.TryOr(func() error {
    return "hello", fmt.Errorf("error")
}, "world")
// world
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/B4F7Wg2Zh9X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryOr{0-&amp;gt;6}&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;TryOr&lt;/code&gt;, but the callback returns &lt;code&gt;X&lt;/code&gt; variables.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;str, nbr, ok := lo.TryOr2(func() (string, int, error) {
    panic("error")
    return "hello", 42, nil
}, "world", 21)
// world
// 21
// false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/B4F7Wg2Zh9X"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryWithErrorValue&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but also returns the value passed to panic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err, ok := lo.TryWithErrorValue(func() error {
    panic("error")
    return nil
})
// "error", false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Kc7afQIT2Fs"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryCatch&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;Try&lt;/code&gt;, but calls the catch function in case of error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;caught := false

ok := lo.TryCatch(func() error {
    panic("error")
    return nil
}, func() {
    caught = true
})
// false
// caught == true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/PnOON-EqBiU"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;TryCatchWithErrorValue&lt;/h3&gt; 
&lt;p&gt;The same behavior as &lt;code&gt;TryWithErrorValue&lt;/code&gt;, but calls the catch function in case of error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;caught := false

ok := lo.TryCatchWithErrorValue(func() error {
    panic("error")
    return nil
}, func(val any) {
    caught = val == "error"
})
// false
// caught == true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8Pc9gwX_GZO"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;ErrorsAs&lt;/h3&gt; 
&lt;p&gt;A shortcut for:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err := doSomething()

var rateLimitErr *RateLimitError
if ok := errors.As(err, &amp;amp;rateLimitErr); ok {
    // retry later
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;1 line &lt;code&gt;lo&lt;/code&gt; helper:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;err := doSomething()

if rateLimitErr, ok := lo.ErrorsAs[*RateLimitError](err); ok {
    // retry later
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/8wk5rH8UfrE"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assert&lt;/h3&gt; 
&lt;p&gt;Does nothing when the condition is &lt;code&gt;true&lt;/code&gt;, otherwise it panics with an optional message.&lt;/p&gt; 
&lt;p&gt;Think twice before using it, given that &lt;a href="https://go.dev/doc/faq#assertions"&gt;Go intentionally omits assertions from its standard library&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assert(age &amp;gt;= 15)
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assert(age &amp;gt;= 15, "user age must be &amp;gt;= 15")
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/Xv8LLKBMNwI"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Assertf&lt;/h3&gt; 
&lt;p&gt;Like &lt;code&gt;Assert&lt;/code&gt;, but with &lt;code&gt;fmt.Printf&lt;/code&gt;-like formatting.&lt;/p&gt; 
&lt;p&gt;Think twice before using it, given that &lt;a href="https://go.dev/doc/faq#assertions"&gt;Go intentionally omits assertions from its standard library&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;age := getUserAge()

lo.Assertf(age &amp;gt;= 15, "user age must be &amp;gt;= 15, got %d", age)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;[&lt;a href="https://go.dev/play/p/TVPEmVcyrdY"&gt;play&lt;/a&gt;]&lt;/p&gt; 
&lt;h2&gt;🛩 Benchmark&lt;/h2&gt; 
&lt;p&gt;We executed a simple benchmark with a dead-simple &lt;code&gt;lo.Map&lt;/code&gt; loop:&lt;/p&gt; 
&lt;p&gt;See the full implementation &lt;a href="https://raw.githubusercontent.com/samber/lo/master/map_benchmark_test.go"&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;_ = lo.Map[int64](arr, func(x int64, i int) string {
    return strconv.FormatInt(x, 10)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Here is a comparison between &lt;code&gt;lo.Map&lt;/code&gt;, &lt;code&gt;lop.Map&lt;/code&gt;, &lt;code&gt;go-funk&lt;/code&gt; library and a simple Go &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go test -benchmem -bench ./...
goos: linux
goarch: amd64
pkg: github.com/samber/lo
cpu: Intel(R) Core(TM) i5-7267U CPU @ 3.10GHz
cpu: Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz
BenchmarkMap/lo.Map-8         	       8	 132728237 ns/op	39998945 B/op	 1000002 allocs/op
BenchmarkMap/lop.Map-8        	       2	 503947830 ns/op	119999956 B/op	 3000007 allocs/op
BenchmarkMap/reflect-8        	       2	 826400560 ns/op	170326512 B/op	 4000042 allocs/op
BenchmarkMap/for-8            	       9	 126252954 ns/op	39998674 B/op	 1000001 allocs/op
PASS
ok  	github.com/samber/lo	6.657s
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; is way faster (x7) than &lt;code&gt;go-funk&lt;/code&gt;, a reflection-based Map implementation.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; has the same allocation profile as &lt;code&gt;for&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lo.Map&lt;/code&gt; is 4% slower than &lt;code&gt;for&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lop.Map&lt;/code&gt; is slower than &lt;code&gt;lo.Map&lt;/code&gt; because it implies more memory allocation and locks. &lt;code&gt;lop.Map&lt;/code&gt; will be useful for long-running callbacks, such as i/o bound processing.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;for&lt;/code&gt; beats other implementations for memory and CPU.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🤝 Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ping me on Twitter &lt;a href="https://twitter.com/samuelberthe"&gt;@samuelberthe&lt;/a&gt; (DMs, mentions, whatever :))&lt;/li&gt; 
 &lt;li&gt;Fork the &lt;a href="https://github.com/samber/lo"&gt;project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fix &lt;a href="https://github.com/samber/lo/issues"&gt;open issues&lt;/a&gt; or request new features&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Don't hesitate ;)&lt;/p&gt; 
&lt;p&gt;Helper naming: helpers must be self-explanatory and respect standards (other languages, libraries...). Feel free to suggest many names in your contributions.&lt;/p&gt; 
&lt;h3&gt;With Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker-compose run --rm dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Without Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;# Install some dev dependencies
make tools

# Run tests
make test
# or
make watch-test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;👤 Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;img src="https://contrib.rocks/image?repo=samber/lo" alt="Contributors" /&gt;&lt;/p&gt; 
&lt;h2&gt;💫 Show your support&lt;/h2&gt; 
&lt;p&gt;Give a ⭐️ if this project helped you!&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/sponsors/samber"&gt;&lt;img src="https://img.shields.io/github/sponsors/samber?style=for-the-badge" alt="GitHub Sponsors" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📝 License&lt;/h2&gt; 
&lt;p&gt;Copyright © 2022 &lt;a href="https://github.com/samber"&gt;Samuel Berthe&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project is under &lt;a href="https://raw.githubusercontent.com/samber/lo/master/LICENSE"&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>edoardottt/cariddi</title>
      <link>https://github.com/edoardottt/cariddi</link>
      <description>&lt;p&gt;Take a list of domains, crawl urls and scan for endpoints, secrets, api keys, file extensions, tokens and more&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; &lt;img src="https://github.com/edoardottt/images/raw/main/cariddi/logo.png" /&gt;&lt;br /&gt; &lt;b&gt;Take a list of domains, crawl urls and scan for endpoints, secrets, api keys, file extensions, tokens and more&lt;/b&gt;&lt;br /&gt; &lt;br /&gt; 
 &lt;!-- go-report-card --&gt; &lt;a href="https://goreportcard.com/report/github.com/edoardottt/cariddi"&gt; &lt;img src="https://goreportcard.com/badge/github.com/edoardottt/cariddi" alt="go-report-card" /&gt; &lt;/a&gt; 
 &lt;!-- workflows --&gt; &lt;a href="https://github.com/edoardottt/cariddi/actions"&gt; &lt;img src="https://github.com/edoardottt/cariddi/actions/workflows/go.yml/badge.svg?branch=main" alt="workflows" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;sub&gt; Coded with 💙 by edoardottt &lt;/sub&gt; &lt;br /&gt; 
 &lt;!--Tweet button--&gt; &lt;a href="https://twitter.com/intent/tweet?url=https://github.com/edoardottt/cariddi&amp;amp;text=Take%20a%20list%20of%20domains,%20crawl%20urls%20and%20scan%20for%20endpoints,%20secrets,%20api%20keys,%20file%20extensions,%20tokens%20and%20more...%20%23network%20%23security%20%23infosec%20%23oss%20%23github%20%23bugbounty%20%23linux" target="_blank"&gt;Share on Twitter! &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#installation-"&gt;Install&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#usage-"&gt;Usage&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#get-started-"&gt;Get Started&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#changelog-"&gt;Changelog&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#contributing-"&gt;Contributing&lt;/a&gt; • &lt;a href="https://raw.githubusercontent.com/edoardottt/cariddi/main/#license-"&gt;License&lt;/a&gt; &lt;/p&gt; 
&lt;!--[![asciicast](https://asciinema.org/a/415989.svg)](https://asciinema.org/a/415989)--&gt; 
&lt;p align="center"&gt; &lt;img src="https://github.com/edoardottt/images/raw/main/cariddi/cariddi.gif" /&gt; &lt;/p&gt; 
&lt;h2&gt;Installation 📡&lt;/h2&gt; 
&lt;h3&gt;Homebrew&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;brew install cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Snap&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;sudo snap install cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Golang&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;go install -v github.com/edoardottt/cariddi/cmd/cariddi@latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Pacman&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;pacman -Syu cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building from source&lt;/h3&gt; 
&lt;p&gt;You need &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; (&amp;gt;=1.23)&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;Building from source for Linux and Windows&lt;/summary&gt; 
 &lt;h4&gt;Linux&lt;/h4&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;git clone https://github.com/edoardottt/cariddi.git
cd cariddi
go get ./...
make linux # (to install)
make unlinux # (to uninstall)
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;One-liner: &lt;code&gt;git clone https://github.com/edoardottt/cariddi.git &amp;amp;&amp;amp; cd cariddi &amp;amp;&amp;amp; go get ./... &amp;amp;&amp;amp; make linux&lt;/code&gt;&lt;/p&gt; 
 &lt;h4&gt;Windows&lt;/h4&gt; 
 &lt;p&gt;Note that the executable works only in cariddi folder.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-console"&gt;git clone https://github.com/edoardottt/cariddi.git
cd cariddi
go get ./...
.\make.bat windows # (to install)
.\make.bat unwindows # (to uninstall)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Usage 💡&lt;/h2&gt; 
&lt;p&gt;If you want to scan only a single target you can use&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;echo https://edoardottt.com/ | cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With multiple targets you can use a file instead, e.g. urls.txt containing:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;https://edoardottt.com/
http://testphp.vulnweb.com/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Windows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;use &lt;code&gt;powershell.exe -Command "cat urls.txt | .\cariddi.exe"&lt;/code&gt; inside the Command prompt&lt;/li&gt; 
 &lt;li&gt;or just &lt;code&gt;cat urls.txt | cariddi.exe&lt;/code&gt; using PowerShell&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Basics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cariddi -version&lt;/code&gt; (Print the version)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cariddi -h&lt;/code&gt; (Print the help)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cariddi -examples&lt;/code&gt; (Print the examples)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Scan options&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -intensive&lt;/code&gt; (Crawl searching also subdomains, same as &lt;code&gt;*.target.com&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -s&lt;/code&gt; (Hunt for secrets)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -err&lt;/code&gt; (Hunt for errors in websites)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -e&lt;/code&gt; (Hunt for juicy endpoints)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -info&lt;/code&gt; (Hunt for useful informations in websites)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -ext 2&lt;/code&gt; (Hunt for juicy (level 2 out of 7) files)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -e -ef endpoints_file&lt;/code&gt; (Hunt for custom endpoints)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -s -sf secrets_file&lt;/code&gt; (Hunt for custom secrets)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -ie pdf,png,jpg&lt;/code&gt; (Ignore these extensions while scanning)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Default: png, svg, jpg, jpeg, bmp, jfif, gif, webp, woff, woff2, ttf, tiff, tif are ignored while scanning for secrets, info and errors.&lt;/p&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -proxy http://127.0.0.1:8080&lt;/code&gt; (Set a Proxy, http and socks5 supported)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -d 2&lt;/code&gt; (2 seconds between a page crawled and another)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -c 200&lt;/code&gt; (Set the concurrency level to 200)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -i forum,blog,community,open&lt;/code&gt; (Ignore urls containing these words)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -it ignore_file&lt;/code&gt; (Ignore urls containing at least one line in the input file)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -cache&lt;/code&gt; (Use the .cariddi_cache folder as cache)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -t 5&lt;/code&gt; (Set the timeout for the requests)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -headers "Cookie: auth=admin;type=2;; X-Custom: customHeader"&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -headersfile headers.txt&lt;/code&gt; (Read from an external file custom headers)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -ua "Custom User Agent"&lt;/code&gt; (Use a custom User Agent)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -rua&lt;/code&gt; (Use a random browser user agent on every request)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Output&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -plain&lt;/code&gt; (Print only results)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -ot target_name&lt;/code&gt; (Results in txt file)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -oh target_name&lt;/code&gt; (Results in html file)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -json&lt;/code&gt; (Print the output as JSON in stdout)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -sr&lt;/code&gt; (Store HTTP responses)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -debug&lt;/code&gt; (Print debug information while crawling)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cat urls.txt | cariddi -md 3&lt;/code&gt; (Max 3 depth levels)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Get Started 🎉&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;cariddi -h&lt;/code&gt; prints the help.&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;Usage of cariddi:
  -c int
     Concurrency level. (default 20)
  -cache
     Use the .cariddi_cache folder as cache.
  -d int
     Delay between a page crawled and another.
  -debug
     Print debug information while crawling.
  -e Hunt for juicy endpoints.
  -ef string
     Use an external file (txt, one per line) to use custom parameters for endpoints hunting.
  -err
     Hunt for errors in websites.
  -examples
     Print the examples.
  -ext int
     Hunt for juicy file extensions. Integer from 1(juicy) to 7(not juicy).
  -h Print the help.
  -headers string
     Use custom headers for each request E.g. -headers "Cookie: auth=yes;;Client: type=2".
  -headersfile string
     Read from an external file custom headers (same format of headers flag).
  -json
     Print the output as JSON in stdout.
  -md
     Maximum depth level the crawler will follow from the initial target URL.
  -i string
     Ignore the URL containing at least one of the elements of this array.
  -ie value
     Comma-separated list of extensions to ignore while scanning.
  -info
     Hunt for useful informations in websites.
  -intensive
     Crawl searching for resources matching 2nd level domain.
  -it string
     Ignore the URL containing at least one of the lines of this file.
  -oh string
     Write the output into an HTML file.
  -ot string
     Write the output into a TXT file.
  -plain
     Print only the results.
  -proxy string
     Set a Proxy to be used (http and socks5 supported).
  -rua
     Use a random browser user agent on every request.
  -s Hunt for secrets.
  -sf string
     Use an external file (txt, one per line) to use custom regexes for secrets hunting.
  -sr
     Store HTTP responses.
  -t int
     Set timeout for the requests. (default 10)
  -ua string
     Use a custom User Agent.
  -version
     Print the version.
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Click to understand &lt;strong&gt;How to integrate cariddi with Burpsuite&lt;/strong&gt;&lt;/summary&gt; 
 &lt;p&gt;Normally you use Burpsuite within your browser, so you just have to trust the burpsuite's certificate in the browser and you're done.&lt;br /&gt; In order to use cariddi with the BurpSuite proxy you should do some steps further.&lt;/p&gt; 
 &lt;p&gt;If you try to use cariddi with the option &lt;code&gt;-proxy http://127.0.0.1:8080&lt;/code&gt; you will find this error in the burpsuite error log section:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;Received fatal alert: bad_certificate (or something similar related to the certificate).
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To make cariddi working fine with Burpsuite you have also to trust the certificate within your entire pc, not just only the browser. These are the steps you have to follow:&lt;/p&gt; 
 &lt;p&gt;Go to Proxy tab in Bupsuite, then Options. Click on the CA Certificate button and export Certificate in DER format&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-bash"&gt;openssl x509 -in burp.der -inform DER -out burp.pem -outform PEM
sudo chown root:root burp.pem
sudo chmod 644 burp.pem
sudo cp burp.pem /usr/local/share/ca-certificates/
sudo c_rehash
cd /etc/ssl/certs/
sudo ln -s /usr/local/share/ca-certificates/burp.pem
sudo c_rehash .
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Source: Trust Burp Proxy certificate in Debian/Ubuntu&lt;/p&gt; 
 &lt;p&gt;After these steps, in order to use cariddi with Burpsuite you have to:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Open Burpsuite, making sure that the proxy is listening.&lt;/li&gt; 
  &lt;li&gt;Use cariddi with the flag &lt;code&gt;-proxy http://127.0.0.1:8080&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;You will see that requests and responses will be logged in Burpsuite.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h2&gt;Changelog 📌&lt;/h2&gt; 
&lt;p&gt;Detailed changes for each release are documented in the &lt;a href="https://github.com/edoardottt/cariddi/releases"&gt;release notes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing 🛠&lt;/h2&gt; 
&lt;p&gt;Just open an &lt;a href="https://github.com/edoardottt/cariddi/issues"&gt;issue&lt;/a&gt;/&lt;a href="https://github.com/edoardottt/cariddi/pulls"&gt;pull request&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before opening a pull request, download &lt;a href="https://golangci-lint.run/usage/install/"&gt;golangci-lint&lt;/a&gt; and run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;golangci-lint run
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If there aren't errors, go ahead :)&lt;/p&gt; 
&lt;p&gt;Test using &lt;a href="https://edoardottt.github.io/cariddi-test/"&gt;https://edoardottt.github.io/cariddi-test/&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;echo "https://edoardottt.github.io/cariddi-test/" | cariddi
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Help me build this!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Special thanks to: &lt;a href="http://go-colly.org/"&gt;go-colly&lt;/a&gt;, &lt;a href="https://github.com/ocervell"&gt;ocervell&lt;/a&gt;, &lt;a href="https://github.com/gitleaks/gitleaks/raw/master/config/gitleaks.toml"&gt;zricethezav&lt;/a&gt;, &lt;a href="https://github.com/projectdiscovery/nuclei-templates/tree/master/file/keys"&gt;projectdiscovery&lt;/a&gt;, &lt;a href="https://github.com/tomnomnom/gf/tree/master/examples"&gt;tomnomnom&lt;/a&gt;, &lt;a href="https://github.com/hahwul/RegexPassive"&gt;RegexPassive&lt;/a&gt; and &lt;a href="https://github.com/edoardottt/cariddi/graphs/contributors"&gt;all the contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License 📝&lt;/h2&gt; 
&lt;p&gt;This repository is under &lt;a href="https://github.com/edoardottt/cariddi/raw/main/LICENSE"&gt;GNU General Public License v3.0&lt;/a&gt;.&lt;br /&gt; &lt;a href="https://edoardottt.com/"&gt;edoardottt.com&lt;/a&gt; to contact me.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>istio/istio</title>
      <link>https://github.com/istio/istio</link>
      <description>&lt;p&gt;Connect, secure, control, and observe services.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Istio&lt;/h1&gt; 
&lt;p&gt;&lt;a href="https://bestpractices.coreinfrastructure.org/projects/1395"&gt;&lt;img src="https://bestpractices.coreinfrastructure.org/projects/1395/badge" alt="CII Best Practices" /&gt;&lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/istio/istio"&gt;&lt;img src="https://goreportcard.com/badge/github.com/istio/istio" alt="Go Report Card" /&gt;&lt;/a&gt; &lt;a href="https://godoc.org/istio.io/istio"&gt;&lt;img src="https://godoc.org/istio.io/istio?status.svg?sanitize=true" alt="GoDoc" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;a href="https://istio.io/"&gt; &lt;img src="https://github.com/istio/istio/raw/master/logo/istio-bluelogo-whitebackground-unframed.svg?sanitize=true" alt="Istio logo" title="Istio" height="100" width="100" /&gt; &lt;/a&gt; 
&lt;hr /&gt; 
&lt;p&gt;Istio is an open source service mesh that layers transparently onto existing distributed applications. Istio’s powerful features provide a uniform and more efficient way to secure, connect, and monitor services. Istio is the path to load balancing, service-to-service authentication, and monitoring – with few or no service code changes.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;For in-depth information about how to use Istio, visit &lt;a href="https://istio.io"&gt;istio.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;To ask questions and get assistance from our community, visit &lt;a href="https://github.com/istio/istio/discussions"&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;To learn how to participate in our overall community, visit &lt;a href="https://istio.io/about/community"&gt;our community page&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In this README:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/#repositories"&gt;Repositories&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/#issue-management"&gt;Issue management&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In addition, here are some other documents you may wish to read:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/istio/community#istio-community"&gt;Istio Community&lt;/a&gt; - describes how to get involved and contribute to the Istio project&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/istio/istio/wiki/Preparing-for-Development"&gt;Istio Developer's Guide&lt;/a&gt; - explains how to set up and use an Istio development environment&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/istio/istio/wiki/Development-Conventions"&gt;Project Conventions&lt;/a&gt; - describes the conventions we use within the code base&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/istio/istio/wiki/Writing-Fast-and-Lean-Code"&gt;Creating Fast and Lean Code&lt;/a&gt; - performance-oriented advice and guidelines for the code base&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You'll find many other useful documents on our &lt;a href="https://github.com/istio/istio/wiki"&gt;Wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://istio.io/latest/docs/concepts/what-is-istio/"&gt;Istio&lt;/a&gt; is an open platform for providing a uniform way to &lt;a href="https://istio.io/latest/docs/examples/microservices-istio/"&gt;integrate microservices&lt;/a&gt;, manage &lt;a href="https://istio.io/latest/docs/concepts/traffic-management/"&gt;traffic flow&lt;/a&gt; across microservices, enforce policies and aggregate telemetry data. Istio's control plane provides an abstraction layer over the underlying cluster management platform, such as Kubernetes.&lt;/p&gt; 
&lt;p&gt;Istio is composed of these components:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Envoy&lt;/strong&gt; - Sidecar proxies per microservice to handle ingress/egress traffic between services in the cluster and from a service to external services. The proxies form a &lt;em&gt;secure microservice mesh&lt;/em&gt; providing a rich set of functions like discovery, rich layer-7 routing, circuit breakers, policy enforcement and telemetry recording/reporting functions.&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;Note: The service mesh is not an overlay network. It simplifies and enhances how microservices in an application talk to each other over the network provided by the underlying platform.&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Istiod&lt;/strong&gt; - The Istio control plane. It provides service discovery, configuration and certificate management. It consists of the following sub-components:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pilot&lt;/strong&gt; - Responsible for configuring the proxies at runtime.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Citadel&lt;/strong&gt; - Responsible for certificate issuance and rotation.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Galley&lt;/strong&gt; - Responsible for validating, ingesting, aggregating, transforming and distributing config within Istio.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt; - The component provides user friendly options to operate the Istio service mesh.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Repositories&lt;/h2&gt; 
&lt;p&gt;The Istio project is divided across a few GitHub repositories:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/api"&gt;istio/api&lt;/a&gt;. This repository defines component-level APIs and common configuration formats for the Istio platform.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/community"&gt;istio/community&lt;/a&gt;. This repository contains information on the Istio community, including the various documents that govern the Istio open source project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/README.md"&gt;istio/istio&lt;/a&gt;. This is the main code repository. It hosts Istio's core components, install artifacts, and sample programs. It includes:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/istioctl/"&gt;istioctl&lt;/a&gt;. This directory contains code for the &lt;a href="https://istio.io/latest/docs/reference/commands/istioctl/"&gt;&lt;em&gt;istioctl&lt;/em&gt;&lt;/a&gt; command line utility.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/pilot/"&gt;pilot&lt;/a&gt;. This directory contains platform-specific code to populate the &lt;a href="https://istio.io/docs/concepts/traffic-management/#pilot"&gt;abstract service model&lt;/a&gt;, dynamically reconfigure the proxies when the application topology changes, as well as translate &lt;a href="https://istio.io/latest/docs/reference/config/networking/"&gt;routing rules&lt;/a&gt; into proxy specific configuration.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href="https://raw.githubusercontent.com/istio/istio/master/security/"&gt;security&lt;/a&gt;. This directory contains &lt;a href="https://istio.io/latest/docs/concepts/security/"&gt;security&lt;/a&gt; related code, including Citadel (acting as Certificate Authority), citadel agent, etc.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/proxy"&gt;istio/proxy&lt;/a&gt;. The Istio proxy contains extensions to the &lt;a href="https://github.com/envoyproxy/envoy"&gt;Envoy proxy&lt;/a&gt; (in the form of Envoy filters) that support authentication, authorization, and telemetry collection.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/ztunnel"&gt;istio/ztunnel&lt;/a&gt;. The repository contains the Rust implementation of the ztunnel component of Ambient mesh.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/istio/client-go"&gt;istio/client-go&lt;/a&gt;. This repository defines auto-generated Kubernetes clients for interacting with Istio resources programmatically.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] Only the &lt;code&gt;istio/api&lt;/code&gt; and &lt;code&gt;istio/client-go&lt;/code&gt; repositories expose stable interfaces intended for direct usage as libraries.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Issue management&lt;/h2&gt; 
&lt;p&gt;We use GitHub to track all of our bugs and feature requests. Each issue we track has a variety of metadata:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Epic&lt;/strong&gt;. An epic represents a feature area for Istio as a whole. Epics are fairly broad in scope and are basically product-level things. Each issue is ultimately part of an epic.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Milestone&lt;/strong&gt;. Each issue is assigned a milestone. This is 0.1, 0.2, ..., or 'Nebulous Future'. The milestone indicates when we think the issue should get addressed.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Priority&lt;/strong&gt;. Each issue has a priority which is represented by the column in the &lt;a href="https://github.com/orgs/istio/projects/6"&gt;Prioritization&lt;/a&gt; project. Priority can be one of P0, P1, P2, or &amp;gt;P2. The priority indicates how important it is to address the issue within the milestone. P0 says that the milestone cannot be considered achieved if the issue isn't resolved.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr /&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/cncf/artwork/master/other/cncf/horizontal/color/cncf-color.svg?sanitize=true" width="300" alt="Cloud Native Computing Foundation logo" /&gt; 
 &lt;p&gt;Istio is a &lt;a href="https://cncf.io"&gt;Cloud Native Computing Foundation&lt;/a&gt; project.&lt;/p&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>GoogleCloudPlatform/microservices-demo</title>
      <link>https://github.com/GoogleCloudPlatform/microservices-demo</link>
      <description>&lt;p&gt;Sample cloud-first application with 10 microservices showcasing Kubernetes, Istio, and gRPC.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src="https://github.com/GoogleCloudPlatform/microservices-demo/workflows/Continuous%20Integration%20-%20Main/Release/badge.svg?sanitize=true" alt="Continuous Integration" /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Online Boutique&lt;/strong&gt; is a cloud-first microservices demo application. The application is a web-based e-commerce app where users can browse items, add them to the cart, and purchase them.&lt;/p&gt; 
&lt;p&gt;Google uses this application to demonstrate how developers can modernize enterprise applications using Google Cloud products, including: &lt;a href="https://cloud.google.com/kubernetes-engine"&gt;Google Kubernetes Engine (GKE)&lt;/a&gt;, &lt;a href="https://cloud.google.com/service-mesh"&gt;Cloud Service Mesh (CSM)&lt;/a&gt;, &lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt;, &lt;a href="https://cloud.google.com/products/operations"&gt;Cloud Operations&lt;/a&gt;, &lt;a href="https://cloud.google.com/spanner"&gt;Spanner&lt;/a&gt;, &lt;a href="https://cloud.google.com/memorystore"&gt;Memorystore&lt;/a&gt;, &lt;a href="https://cloud.google.com/alloydb"&gt;AlloyDB&lt;/a&gt;, and &lt;a href="https://ai.google.dev/"&gt;Gemini&lt;/a&gt;. This application works on any Kubernetes cluster.&lt;/p&gt; 
&lt;p&gt;If you’re using this demo, please &lt;strong&gt;★Star&lt;/strong&gt; this repository to show your interest!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note to Googlers:&lt;/strong&gt; Please fill out the form at &lt;a href="http://go/microservices-demo"&gt;go/microservices-demo&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Architecture&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Online Boutique&lt;/strong&gt; is composed of 11 microservices written in different languages that talk to each other over gRPC.&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/docs/img/architecture-diagram.png"&gt;&lt;img src="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/docs/img/architecture-diagram.png" alt="Architecture of microservices" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Find &lt;strong&gt;Protocol Buffers Descriptions&lt;/strong&gt; at the &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/protos"&gt;&lt;code&gt;./protos&lt;/code&gt; directory&lt;/a&gt;.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Service&lt;/th&gt; 
   &lt;th&gt;Language&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/frontend"&gt;frontend&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;Exposes an HTTP server to serve the website. Does not require signup/login and generates session IDs for all users automatically.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/cartservice"&gt;cartservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;C#&lt;/td&gt; 
   &lt;td&gt;Stores the items in the user's shopping cart in Redis and retrieves it.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/productcatalogservice"&gt;productcatalogservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;Provides the list of products from a JSON file and ability to search products and get individual products.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/currencyservice"&gt;currencyservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Node.js&lt;/td&gt; 
   &lt;td&gt;Converts one money amount to another currency. Uses real values fetched from European Central Bank. It's the highest QPS service.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/paymentservice"&gt;paymentservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Node.js&lt;/td&gt; 
   &lt;td&gt;Charges the given credit card info (mock) with the given amount and returns a transaction ID.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/shippingservice"&gt;shippingservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;Gives shipping cost estimates based on the shopping cart. Ships items to the given address (mock)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/emailservice"&gt;emailservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Python&lt;/td&gt; 
   &lt;td&gt;Sends users an order confirmation email (mock).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/checkoutservice"&gt;checkoutservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Go&lt;/td&gt; 
   &lt;td&gt;Retrieves user cart, prepares order and orchestrates the payment, shipping and the email notification.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/recommendationservice"&gt;recommendationservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Python&lt;/td&gt; 
   &lt;td&gt;Recommends other products based on what's given in the cart.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/adservice"&gt;adservice&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Java&lt;/td&gt; 
   &lt;td&gt;Provides text ads based on given context words.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/src/loadgenerator"&gt;loadgenerator&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Python/Locust&lt;/td&gt; 
   &lt;td&gt;Continuously sends requests imitating realistic user shopping flows to the frontend.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Home Page&lt;/th&gt; 
   &lt;th&gt;Checkout Screen&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/docs/img/online-boutique-frontend-1.png"&gt;&lt;img src="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/docs/img/online-boutique-frontend-1.png" alt="Screenshot of store homepage" /&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/docs/img/online-boutique-frontend-2.png"&gt;&lt;img src="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/docs/img/online-boutique-frontend-2.png" alt="Screenshot of checkout screen" /&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Quickstart (GKE)&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Ensure you have the following requirements:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project"&gt;Google Cloud project&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;Shell environment with &lt;code&gt;gcloud&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, and &lt;code&gt;kubectl&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the latest major version.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;git clone --depth 1 --branch v0 https://github.com/GoogleCloudPlatform/microservices-demo.git
cd microservices-demo/
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;--depth 1&lt;/code&gt; argument skips downloading git history.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Set the Google Cloud project and region and ensure the Google Kubernetes Engine API is enabled.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;export PROJECT_ID=&amp;lt;PROJECT_ID&amp;gt;
export REGION=us-central1
gcloud services enable container.googleapis.com \
  --project=${PROJECT_ID}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Substitute &lt;code&gt;&amp;lt;PROJECT_ID&amp;gt;&lt;/code&gt; with the ID of your Google Cloud project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a GKE cluster and get the credentials for it.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;gcloud container clusters create-auto online-boutique \
  --project=${PROJECT_ID} --region=${REGION}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Creating the cluster may take a few minutes.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Deploy Online Boutique to the cluster.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;kubectl apply -f ./release/kubernetes-manifests.yaml
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Wait for the pods to be ready.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;kubectl get pods
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After a few minutes, you should see the Pods in a &lt;code&gt;Running&lt;/code&gt; state:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NAME                                     READY   STATUS    RESTARTS   AGE
adservice-76bdd69666-ckc5j               1/1     Running   0          2m58s
cartservice-66d497c6b7-dp5jr             1/1     Running   0          2m59s
checkoutservice-666c784bd6-4jd22         1/1     Running   0          3m1s
currencyservice-5d5d496984-4jmd7         1/1     Running   0          2m59s
emailservice-667457d9d6-75jcq            1/1     Running   0          3m2s
frontend-6b8d69b9fb-wjqdg                1/1     Running   0          3m1s
loadgenerator-665b5cd444-gwqdq           1/1     Running   0          3m
paymentservice-68596d6dd6-bf6bv          1/1     Running   0          3m
productcatalogservice-557d474574-888kr   1/1     Running   0          3m
recommendationservice-69c56b74d4-7z8r5   1/1     Running   0          3m1s
redis-cart-5f59546cdd-5jnqf              1/1     Running   0          2m58s
shippingservice-6ccc89f8fd-v686r         1/1     Running   0          2m58s
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Access the web frontend in a browser using the frontend's external IP.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;kubectl get service frontend-external | awk '{print $4}'
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Visit &lt;code&gt;http://EXTERNAL_IP&lt;/code&gt; in a web browser to access your instance of Online Boutique.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Congrats! You've deployed the default Online Boutique. To deploy a different variation of Online Boutique (e.g., with Google Cloud Operations tracing, Istio, etc.), see &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/#deploy-online-boutique-variations-with-kustomize"&gt;Deploy Online Boutique variations with Kustomize&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Once you are done with it, delete the GKE cluster.&lt;/p&gt; &lt;pre&gt;&lt;code class="language-sh"&gt;gcloud container clusters delete online-boutique \
  --project=${PROJECT_ID} --region=${REGION}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Deleting the cluster may take a few minutes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Additional deployment options&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Terraform&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/terraform"&gt;See these instructions&lt;/a&gt; to learn how to deploy Online Boutique using &lt;a href="https://www.terraform.io/intro"&gt;Terraform&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Istio / Cloud Service Mesh&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/kustomize/components/service-mesh-istio/README.md"&gt;See these instructions&lt;/a&gt; to deploy Online Boutique alongside an Istio-backed service mesh.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Non-GKE clusters (Minikube, Kind, etc)&lt;/strong&gt;: See the &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/docs/development-guide.md"&gt;Development guide&lt;/a&gt; to learn how you can deploy Online Boutique on non-GKE clusters.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AI assistant using Gemini&lt;/strong&gt;: &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/kustomize/components/shopping-assistant/README.md"&gt;See these instructions&lt;/a&gt; to deploy a Gemini-powered AI assistant that suggests products to purchase based on an image.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;And more&lt;/strong&gt;: The &lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/kustomize"&gt;&lt;code&gt;/kustomize&lt;/code&gt; directory&lt;/a&gt; contains instructions for customizing the deployment of Online Boutique with other variations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GoogleCloudPlatform/microservices-demo/main/docs/development-guide.md"&gt;Development&lt;/a&gt; to learn how to run and develop this app locally.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demos featuring Online Boutique&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/d99101001e69"&gt;Platform Engineering in action: Deploy the Online Boutique sample apps with Score and Humanitec&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/9d64c7009cd"&gt;The new Kubernetes Gateway API with Istio and Anthos Service Mesh (ASM)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/981bd98b53f8"&gt;Use Azure Redis Cache with the Online Boutique sample on AKS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/c68ba253844a"&gt;Sail Sharp, 8 tips to optimize and secure your .NET containers for Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/google-cloud/a2ea3493ed0"&gt;Deploy multi-region application with Anthos and Google cloud Spanner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/82f7879a900d"&gt;Use Google Cloud Memorystore (Redis) with the Online Boutique sample on GKE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/246119e46d53"&gt;Use Helm to simplify the deployment of Online Boutique, with a Service Mesh, GitOps, and more!&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/blog/products/application-modernization/api-management-and-service-mesh-go-together"&gt;How to reduce microservices complexity with Apigee and Anthos Service Mesh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/b5bd26253a4c"&gt;gRPC health probes with Kubernetes 1.24+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/p/f7248e077339"&gt;Use Google Cloud Spanner with the Online Boutique sample&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://medium.com/google-cloud/64b71969318d"&gt;Seamlessly encrypt traffic from any apps in your Mesh to Memorystore (redis)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/service-mesh/docs/strengthen-app-security"&gt;Strengthen your app's security with Cloud Service Mesh and Anthos Config Management&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/architecture/exposing-service-mesh-apps-through-gke-ingress"&gt;From edge to mesh: Exposing service mesh applications through GKE Ingress&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/blog/products/operations/on-the-road-to-sre-with-cloud-operations-sandbox"&gt;Take the first step toward SRE with Cloud Operations Sandbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://cloud.google.com/service-mesh/docs/onlineboutique-install-kpt"&gt;Deploying the Online Boutique sample application on Cloud Service Mesh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://codelabs.developers.google.com/codelabs/anthos-service-mesh-workshop"&gt;Anthos Service Mesh Workshop: Lab Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/-t2BfT59zJA?t=982"&gt;KubeCon EU 2019 - Reinventing Networking: A Deep Dive into Istio's Multicluster Gateways - Steve Dake, Independent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Google Cloud Next'18 SF 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href="https://youtu.be/vJ9OaAqfxo4?t=2416"&gt;Day 1 Keynote&lt;/a&gt; showing GKE On-Prem&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://youtu.be/JQPOPV_VH5w?t=815"&gt;Day 3 Keynote&lt;/a&gt; showing Stackdriver APM (Tracing, Code Search, Profiler, Google Cloud Build)&lt;/li&gt; 
   &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wCJrdKdD6UM&amp;amp;feature=youtu.be&amp;amp;t=586"&gt;Introduction to Service Management with Istio&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://youtu.be/nIq2pkNcfEI?t=3071"&gt;Google Cloud Next'18 London – Keynote&lt;/a&gt; showing Stackdriver Incident Response Management&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>SpecterOps/BloodHound</title>
      <link>https://github.com/SpecterOps/BloodHound</link>
      <description>&lt;p&gt;Six Degrees of Domain Admin&lt;/p&gt;&lt;hr&gt;&lt;p align="center"&gt; 
 &lt;picture&gt; 
  &lt;img src="https://raw.githubusercontent.com/SpecterOps/BloodHound/main/cmd/ui/public/img/BHCE_Vertical_RedField.svg?sanitize=true" alt="BloodHound Community Edition" width="400" /&gt; 
 &lt;/picture&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;BloodHound is a monolithic web application composed of an embedded React frontend with &lt;a href="https://www.sigmajs.org/"&gt;Sigma.js&lt;/a&gt; and a &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; based REST API backend. It is deployed with a &lt;a href="https://www.postgresql.org/"&gt;Postgresql&lt;/a&gt; application database and a &lt;a href="https://neo4j.com/"&gt;Neo4j&lt;/a&gt; graph database, and is fed by the &lt;a href="https://github.com/SpecterOps/SharpHound"&gt;SharpHound&lt;/a&gt; and &lt;a href="https://github.com/SpecterOps/AzureHound"&gt;AzureHound&lt;/a&gt; data collectors.&lt;/p&gt; 
&lt;p&gt;BloodHound leverages graph theory to reveal hidden and often unintended relationships across identity and access management systems. Powered by &lt;a href="https://specterops.io/opengraph/"&gt;OpenGraph&lt;/a&gt;, BloodHound now supports comprehensive analysis beyond Active Directory and Azure environments, enabling users to map complex privilege relationships across &lt;a href="https://bloodhound.specterops.io/opengraph/library"&gt;diverse identity platforms&lt;/a&gt;. Attackers can utilize BloodHound to rapidly discover sophisticated attack paths otherwise impossible to identify manually, while defenders can proactively identify and mitigate these risks. Both red and blue teams benefit from BloodHound's expanded capabilities, gaining deeper insights into identity and privilege structures across their entire security landscape.&lt;/p&gt; 
&lt;p&gt;BloodHound CE is created and maintained by the &lt;a href="https://specterops.io/"&gt;SpecterOps&lt;/a&gt; team who also brought you &lt;a href="https://specterops.io/bloodhound-overview/"&gt;BloodHound Enterprise&lt;/a&gt;. The original BloodHound was created by &lt;a href="https://www.twitter.com/_wald0"&gt;@_wald0&lt;/a&gt;, &lt;a href="https://twitter.com/CptJesus"&gt;@CptJesus&lt;/a&gt;, and &lt;a href="https://twitter.com/harmj0y"&gt;@harmj0y&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Running BloodHound Community Edition&lt;/h2&gt; 
&lt;p&gt;Please refer to the &lt;a href="https://bloodhound.specterops.io/get-started/quickstart/community-edition-quickstart"&gt;Quickstart Guide for BloodHound Community Edition&lt;/a&gt;, which is part of the &lt;a href="https://bloodhound.specterops.io"&gt;BloodHound documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Useful Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://bloodhound.specterops.io/"&gt;BloodHound Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bloodhound.specterops.io/get-started/quickstart/community-edition-quickstart"&gt;BloodHound Community Edition Quickstart Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://slack.specterops.io"&gt;BloodHound Slack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://bloodhound.specterops.io/opengraph/overview"&gt;OpenGraph Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SpecterOps/BloodHound/wiki"&gt;Wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/README.md"&gt;Docker Compose Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SpecterOps/BloodHound/wiki/Development"&gt;Developer Quick Start Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/SpecterOps/BloodHound/wiki/Contributing"&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SpecterOps/BloodHound/main/CONTRIBUTORS.md"&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;Please check out the &lt;a href="https://github.com/SpecterOps/BloodHound/wiki/Contact"&gt;Contact page&lt;/a&gt; in our wiki for details on how to reach out with questions and suggestions.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Copyright 2025 Specter Ops, Inc.

Licensed under the Apache License, Version 2.0
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Unless otherwise annotated by a lower-level LICENSE file or license header, all files in this repository are released under the &lt;code&gt;Apache-2.0&lt;/code&gt; license. A full copy of the license may be found in the top-level &lt;a href="https://raw.githubusercontent.com/SpecterOps/BloodHound/main/LICENSE"&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenCSGs/csghub-server</title>
      <link>https://github.com/OpenCSGs/csghub-server</link>
      <description>&lt;p&gt;csghub-server is the backend server for CSGHub which helps user to manage datasets, modes, and also run Model Inference, Finetune and Application Spaces.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/README_en.md"&gt;English&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/README_cn.md"&gt;简体中文&lt;/a&gt; ∙ &lt;a href="https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/README_ja.md"&gt;日本語&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;CSGHub Server&lt;/code&gt; is a part of the open source and reliable large model assets management platform - &lt;a href="https://github.com/OpenCSGs/CSGHub/"&gt;CSGHub&lt;/a&gt;. It focuses on management of models、datasets and other LLM assets through REST API。&lt;/p&gt; 
&lt;h2&gt;Key Features：&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Creation and Management of users and orgnizations&lt;/li&gt; 
 &lt;li&gt;Auto-tagging of model and dataset labels&lt;/li&gt; 
 &lt;li&gt;Search for users, organizations, models, and data&lt;/li&gt; 
 &lt;li&gt;Online preview of dataset files, like &lt;code&gt;.parquet&lt;/code&gt; file&lt;/li&gt; 
 &lt;li&gt;Content moderation for both text and image&lt;/li&gt; 
 &lt;li&gt;Download of individual files, including LFS files&lt;/li&gt; 
 &lt;li&gt;Tracking of model and dataset activity data, such as downloads and likes volume&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;In order to help users to quickly understand the features and usage of CSGHub, we have recorded a demo video. You can watch this video to get a quick understanding of the main features and operation procedures of this program.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CSGHub Demo video is as blew，you can also check it at &lt;a href="https://www.youtube.com/watch?v=SFDISpqowXs"&gt;YouTube&lt;/a&gt; or &lt;a href="https://www.bilibili.com/video/BV12T4y187bv/"&gt;Bilibili&lt;/a&gt; 
  &lt;video width="658" height="432" src="https://github-production-user-asset-6210df.s3.amazonaws.com/3232817/296556812-205d07f2-de9d-4a7f-b3f5-83514a71453e.mp4"&gt;&lt;/video&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please visit the &lt;a href="https://portal.opencsg.com/models"&gt;OpenCSG website&lt;/a&gt; to experience the powerful management features.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;System resource requirements: 4c CPU/8GB memory&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Please install Docker yourself. This project has been tested in Ubuntu22 environment.&lt;/p&gt; 
&lt;p&gt;You can quickly deploy the localized &lt;code&gt;CSGHub Server&lt;/code&gt; service through docker-compose:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;# The API token should be at least 128 characters long, and HTTP requests to csghub-server require the API token to be sent as a Bearer token for authentication.
export STARHUB_SERVER_API_TOKEN=&amp;lt;API token&amp;gt;
mkdir -m 777 gitea minio_data
curl -L https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/docker-compose.yml -o docker-compose.yml
docker-compose -f docker-compose.yml up -d
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Start CSGHub Server Services Locally&lt;/h2&gt; 
&lt;p&gt;CSGHub supports TOML format for config files. When starting any service from the command line, you can specify the config file with the &lt;code&gt;--config&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;go run cmd/csghub-server/main.go start server --config local.toml
go run cmd/csghub-server/main.go deploy runner --config local.toml
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We provide an &lt;a href="https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/common/config/config.toml.example"&gt;example config file&lt;/a&gt;, you can rename it, modify as needed and use. All available configurations are defined in &lt;a href="https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/common/config/config.go"&gt;this Go file&lt;/a&gt;. The TOML configuration uses snake_case naming convention, and names automatically map to corresponding struct field names.&lt;/p&gt; 
&lt;h2&gt;Technical Architecture&lt;/h2&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/docs/csghub_server-arch.png" alt="csghub-server architecture" width="800px" /&gt; 
&lt;/div&gt; 
&lt;h3&gt;Extensible and customizable&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports different git servers, such as Gitea, GitLab, etc.&lt;/li&gt; 
 &lt;li&gt;Supports flexible configuration of the LFS storage system, and you can choose to use local or any third-party cloud storage service that is compatible with the S3 protocol.&lt;/li&gt; 
 &lt;li&gt;Enable content moderation on demand, and choose any third-party content moderation service.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Support more Git Servers: Currently supports Gitea, and plans to support mainstream Git repositories in the future.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Git LFS: Git LFS supports large files, and supports Git command operations and online download through the Web UI.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; DataSet online viewer: Data set preview, supports the Top20/TopN loading preview of LFS format data sets.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Model/Dataset AutoTag: Supports custom metadata and automatic extraction of model/dataset tags.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; S3 Protocol Support: Supports S3 (MinIO) storage protocol, providing higher reliability and storage cost-effectiveness.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" disabled /&gt; Model format convert: Conversion of mainstream model formats.&lt;/li&gt; 
 &lt;li&gt;&lt;input type="checkbox" checked disabled /&gt; Model oneclick deploy: Supports integration with OpenCSG llm-inference, one-click to start model inference.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;We use the Apache 2.0 license, the content of which is detailed in the &lt;code&gt;LICENSE&lt;/code&gt; file.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you wish to contribute, please follow the &lt;a href="https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/docs/en/contributing.md"&gt;Contribution Guidelines&lt;/a&gt;. We are very excited about your contributions!&lt;/p&gt; 
&lt;p&gt;Before you begin development, we highly recommend checking out our &lt;a href="https://raw.githubusercontent.com/OpenCSGs/csghub-server/main/contribute/"&gt;Backend Developer Guides&lt;/a&gt;, which provide helpful information to ensure a smooth development process.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;This project is based on open source projects such as Gin, DuckDB, minio, and Gitea. We would like to express our sincere gratitude to them for their open source contributions!&lt;/p&gt; 
&lt;h3&gt;CONTACT WITH US&lt;/h3&gt; 
&lt;p&gt;If you meet any problem during usage, you can contact with us by any following way:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;initiate an issue in github&lt;/li&gt; 
 &lt;li&gt;join our WeChat group by scaning wechat helper qrcode&lt;/li&gt; 
 &lt;li&gt;join our offical discord channel: &lt;a href="https://discord.gg/bXnu4C9BkR"&gt;OpenCSG Discord Channel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;join our slack workspace:&lt;a href="https://join.slack.com/t/opencsghq/shared_invite/zt-2fmtem7hs-s_RmMeoOIoF1qzslql2q~A"&gt;OpenCSG Slack Channel&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div style="display:inline-block"&gt; 
 &lt;img src="https://github.com/OpenCSGs/csghub/raw/main/docs/images/wechat-assistant-new.png" width="200" /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
 &lt;img src="https://github.com/OpenCSGs/csghub/raw/main/docs/images/discord-qrcode.png" width="200" /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
 &lt;img src="https://github.com/OpenCSGs/csghub/raw/main/docs/images/slack-qrcode.png" width="200" /&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>obot-platform/obot</title>
      <link>https://github.com/obot-platform/obot</link>
      <description>&lt;p&gt;Open-source MCP Gateway and AI Platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Obot&lt;/h1&gt; 
&lt;p&gt;Obot is an open-source MCP Gateway and AI platform that can be deployed in the cloud or on-prem.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;To quickly try a live demo of the Obot MCP Gateway and chat experience, visit &lt;a href="https://chat.obot.ai"&gt;https://chat.obot.ai&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To run Obot yourself, you’ll need to setup Docker with something like &lt;a href="https://docs.docker.com/get-started/introduction/get-docker-desktop/"&gt;Docker Desktop&lt;/a&gt;. Once that’s ready, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -d --name obot -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -e OPENAI_API_KEY=&amp;lt;API KEY&amp;gt; ghcr.io/obot-platform/obot:latest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then open your browser to &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; to access the Obot UI.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!TIP] You need to replace &lt;code&gt;&amp;lt;API KEY&amp;gt;&lt;/code&gt; with your &lt;a href="https://platform.openai.com/api-keys"&gt;OpenAI API Key&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Setting this is optional, but you'll need to setup a model provider from the Admin UI before using chat.&lt;/p&gt; 
 &lt;p&gt;You can also set &lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt; here as well, setting the value to your &lt;a href="https://console.anthropic.com/settings/keys"&gt;Anthropic API Key&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;Setting both is also supported, but OpenAI models will be set as the defaults.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For more installation methods, see our &lt;a href="https://docs.obot.ai/installation/general"&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;The Three Parts of Obot&lt;/h2&gt; 
&lt;p&gt;The platform consists of three main components that work together to deliver a comprehensive AI solution.&lt;/p&gt; 
&lt;h3&gt;🔌 MCP Gateway&lt;/h3&gt; 
&lt;p&gt;The &lt;strong&gt;MCP Gateway&lt;/strong&gt; is where users discover and connect to MCP servers using any MCP client. It provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Server Discovery&lt;/strong&gt; – Browse a catalog of MCP servers tailored to your role and permissions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Configuration Management&lt;/strong&gt; – Manage all MCP server settings and credentials in one place&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Upgrade Management&lt;/strong&gt; – Receive notifications about available server upgrades and apply them easily&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Broad Client Support&lt;/strong&gt; – Connect with local clients such as Claude Desktop and VS Code or use our hosted Obot Chat&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;OAuth 2.1 Authentication&lt;/strong&gt; – Securely authenticate with external services&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;🗣️ Chat&lt;/h3&gt; 
&lt;p&gt;The &lt;strong&gt;Chat Interface&lt;/strong&gt; is where users interact with AI through natural, conversational chat. It’s the primary way to ask questions, get answers, and work with connected tools and data. Key features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Chat Threads&lt;/strong&gt; – Keep discussions organized and maintain context over time&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MCP Server Integration&lt;/strong&gt; – Connect to SaaS platforms, APIs, and other tools through &lt;a href="https://modelcontextprotocol.io"&gt;MCP servers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Knowledge Integration&lt;/strong&gt; – Use built-in RAG to add relevant knowledge to your conversations&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tasks&lt;/strong&gt; - Create and schedule repeatable tasks that can leverage all the same capabilities as Chat&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Project-Based Customization&lt;/strong&gt; – Tailor AI's behavior to meet your needs with custom instructions, knowledge, and MCP servers at the project level&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;⚙️ Admin&lt;/h3&gt; 
&lt;p&gt;The &lt;strong&gt;Admin Interface&lt;/strong&gt; provides comprehensive platform management tools for administrators:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Catalog Management&lt;/strong&gt; – Create and update MCP server entries using GitOps or the admin portal&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Server Deployment and Hosting&lt;/strong&gt; - Let Obot deploy and host MCP servers to ease your operational burden&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Access Control Rules&lt;/strong&gt; – Define which users and groups can access specific MCP servers&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Audit Logging&lt;/strong&gt; – Track and record all MCP server and client interactions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Request Filtering&lt;/strong&gt; – Programmatically inspect and reject requests to/from MCP servers for enhanced security and compliance&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;User Management&lt;/strong&gt; – Manage users, groups, and access permissions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Model Provider Management&lt;/strong&gt; – Configure and manage LLM providers and settings for the Chat Interface&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Centralized Authentication&lt;/strong&gt; - Integrate with your existing auth provider to ensure proper user authentication and authorization&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Monitoring&lt;/strong&gt; – View system health metrics and usage analytics&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How They Work Together&lt;/h2&gt; 
&lt;p&gt;These three components create a powerful, integrated AI platform:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt; interact with Obot projects through the &lt;strong&gt;Chat Interface&lt;/strong&gt; and MCP Servers through the &lt;strong&gt;MCP Gateway&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt; and &lt;strong&gt;MCP Clients&lt;/strong&gt; leverage tools via the &lt;strong&gt;MCP Gateway&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Administrators&lt;/strong&gt; manage the entire platform through the &lt;strong&gt;Admin Interface&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Key Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Self-Hosted&lt;/strong&gt;: Deploy on your own infrastructure for complete control&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MCP Standard&lt;/strong&gt;: Built on the open Model Context Protocol for maximum interoperability&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enterprise Security&lt;/strong&gt;: OAuth 2.1 authentication, encryption, and audit logging&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: Easy integration with custom tools and services&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Next Steps&lt;/h2&gt; 
&lt;p&gt;For more information checkout our &lt;a href="https://docs.obot.ai/"&gt;Docs&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>publicsuffix/list</title>
      <link>https://github.com/publicsuffix/list</link>
      <description>&lt;p&gt;The Public Suffix List&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Public Suffix List&lt;/h1&gt; 
&lt;p&gt;A "public suffix" is one under which Internet users can (or historically could) directly register names. Some examples of public suffixes are &lt;code&gt;com&lt;/code&gt;, &lt;code&gt;co.uk&lt;/code&gt; and &lt;code&gt;pvt.k12.ma.us&lt;/code&gt;. The Public Suffix List is a list of all known public suffixes.&lt;/p&gt; 
&lt;p&gt;See &lt;a href="https://publicsuffix.org/"&gt;https://publicsuffix.org/&lt;/a&gt; and the &lt;a href="https://github.com/publicsuffix/list/wiki"&gt;Wiki&lt;/a&gt; link above for more information.&lt;/p&gt; 
&lt;h2&gt;Are you here to add or update something?&lt;/h2&gt; 
&lt;p&gt;All submissions must conform to the &lt;a href="https://github.com/publicsuffix/list/wiki/Guidelines#validation-and-non-acceptance-factors"&gt;validation and acceptance factors&lt;/a&gt; and provide sufficient rationale or basically be as complete as possible, and follow the &lt;a href="https://github.com/publicsuffix/list/wiki/Guidelines"&gt;Guidelines&lt;/a&gt;, especially as they relate to format and &lt;a href="https://github.com/publicsuffix/list/wiki/Guidelines#sort-your-submission-correctly-important"&gt;sorting&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The list is currently maintained by people who are volunteering their time towards universal acceptance and ensuring there is a bridge between the ICANN world of domain names and the crucial last mile - the world of developers and human users.&lt;/p&gt; 
&lt;p&gt;Iteration back and forth will delay PR review or inclusion. Be extremely thorough, and patient.&lt;/p&gt; 
&lt;h2&gt;Important Notices&lt;/h2&gt; 
&lt;h3&gt;2025-05-27&lt;/h3&gt; 
&lt;p&gt;Were you directed here to be able to add a subdomain to your &lt;strong&gt;Cloudflare&lt;/strong&gt; account? If so, please work directly with Cloudflare for these account limitations. The PSL is &lt;strong&gt;NOT&lt;/strong&gt; intended as a workaround for Cloudflare's subdomain restrictions.&lt;/p&gt; 
&lt;p&gt;Consult &lt;a href="https://developers.cloudflare.com/dns/zone-setups/subdomain-setup/"&gt;Cloudflare's subdomain setup documentation&lt;/a&gt; or contact Cloudflare directly for subdomain setup questions. Only submit a request to the PSL if your domain truly meets our criteria outlined in &lt;a href="https://github.com/publicsuffix/list/wiki/Guidelines"&gt;Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;2024-07-26&lt;/h3&gt; 
&lt;p&gt;We are sending emails asking for confirmation if certain entries are still required or need updating.&lt;/p&gt; 
&lt;p&gt;Currently, this process is purely manual and extremely low volume but if you do get an email, please respond.&lt;/p&gt; 
&lt;p&gt;Please see the &lt;a href="https://raw.githubusercontent.com/publicsuffix/list/main/#email-communication-policy"&gt;Email Communication Policy&lt;/a&gt; to see how we will often communicate these changes.&lt;/p&gt; 
&lt;h3&gt;2023-02-20&lt;/h3&gt; 
&lt;p&gt;Did &lt;a href="https://support.google.com/adsense/answer/12170421"&gt;guidance from Google related to the changes that they are making to adsense subdomains&lt;/a&gt; bring you here? Work with Google Adsense &lt;a href="https://support.google.com/adsense/gethelp"&gt;Help Link&lt;/a&gt; with any support questions you have. The PSL is thinly resourced, and the volunteer maintainers are unable to answer questions about Adsense changes or support Adsense.&lt;/p&gt; 
&lt;p&gt;The PSL is volunteer-resourced and is absolutely not resourced to answer questions or support changes. Guidance is in the form of self-help (READ THE &lt;a href="https://github.com/publicsuffix/list/wiki"&gt;WIKI&lt;/a&gt;), THERE IS NO PSL CUSTOMER SERVICE RESOURCE TO ASSIST YOU. &lt;em&gt;Please work directly with Google to ensure your domain does in fact need an entry, and they should help you know what the benefits and consequences are. &lt;strong&gt;IT POSSIBLE TO HARM YOUR WEBSITE COOKIES BY REQUESTING A MALFORMED PSL ENTRY&lt;/strong&gt;. Also, understand what propagation delays and rollback processing entail before making requests.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;2021-04-23&lt;/h3&gt; 
&lt;p&gt;Did guidance related to an issue with Facebook or Apple bring you here? &lt;a href="https://github.com/publicsuffix/list/issues/1245"&gt;Read this before submitting requests&lt;/a&gt; We are not approving workaround requests per the validation and acceptance standards, but do have open discussion with Facebook on the matter.&lt;/p&gt; 
&lt;h2&gt;Email Communication Policy&lt;/h2&gt; 
&lt;p&gt;We tend to use the subject line tag "[PSL notification]" in all Public Suffix List communications. For effective spam filtering, you can create a case-insensitive filter to allow only emails with exact "[PSL notification]" in the subject line. If you choose to set up such a filter in your email application, please verify the filter is implemented correctly and test it thoroughly to ensure you don't accidentally miss important communications from us.&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Your participation in the Public Suffix List project should follow the &lt;a href="https://www.mozilla.org/en-US/about/governance/policies/participation/" title="Mozilla Community Participation Guidelines"&gt;Mozilla Community Participation Guidelines&lt;/a&gt; as well as the &lt;a href="https://help.github.com/en/github/site-policy/github-community-guidelines" title="GitHub Community Participation Guidelines"&gt;GitHub Community Participation Guidelines&lt;/a&gt;. Behavior that falls into the areas forbidden by either document is unwelcome and will result in further escalation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>open-telemetry/opentelemetry-collector</title>
      <link>https://github.com/open-telemetry/opentelemetry-collector</link>
      <description>&lt;p&gt;OpenTelemetry Collector&lt;/p&gt;&lt;hr&gt;&lt;hr /&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://opentelemetry.io/docs/collector/getting-started/"&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md"&gt;Getting Involved&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://cloud-native.slack.com/archives/C01N6P7KR6W"&gt;Getting In Touch&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/actions/workflows/build-and-test.yml?query=branch%3Amain"&gt; &lt;img alt="Build Status" src="https://img.shields.io/github/actions/workflow/status/open-telemetry/opentelemetry-collector/build-and-test.yml?branch=main&amp;amp;style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://goreportcard.com/report/github.com/open-telemetry/opentelemetry-collector"&gt; &lt;img alt="Go Report Card" src="https://goreportcard.com/badge/github.com/open-telemetry/opentelemetry-collector?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://codecov.io/gh/open-telemetry/opentelemetry-collector/branch/main/"&gt; &lt;img alt="Codecov Status" src="https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-collector?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/releases"&gt; &lt;img alt="GitHub release (latest by date including pre-releases)" src="https://img.shields.io/github/v/release/open-telemetry/opentelemetry-collector?include_prereleases&amp;amp;style=for-the-badge" /&gt; &lt;/a&gt; &lt;br /&gt; &lt;a href="https://www.bestpractices.dev/projects/8404"&gt;&lt;img src="https://www.bestpractices.dev/projects/8404/badge" /&gt; &lt;/a&gt; &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:opentelemetry"&gt; &lt;img alt="Fuzzing Status" src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/opentelemetry.svg?sanitize=true" /&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align="center"&gt; &lt;strong&gt; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/vision.md"&gt;Vision&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://opentelemetry.io/docs/collector/configuration/"&gt;Configuration&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://opentelemetry.io/docs/collector/internal-telemetry/#use-internal-telemetry-to-monitor-the-collector"&gt;Monitoring&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/security-best-practices.md"&gt;Security&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href="https://pkg.go.dev/go.opentelemetry.io/collector"&gt;Package&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; 
&lt;hr /&gt; 
&lt;h1&gt;&lt;img src="https://opentelemetry.io/img/logos/opentelemetry-logo-nav.png" alt="OpenTelemetry Icon" width="45" height="" /&gt; OpenTelemetry Collector&lt;/h1&gt; 
&lt;p&gt;The OpenTelemetry Collector offers a vendor-agnostic implementation on how to receive, process and export telemetry data. In addition, it removes the need to run, operate and maintain multiple agents/collectors in order to support open-source telemetry data formats (e.g. Jaeger, Prometheus, etc.) to multiple open-source or commercial back-ends.&lt;/p&gt; 
&lt;p&gt;Objectives:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Usable: Reasonable default configuration, supports popular protocols, runs and collects out of the box.&lt;/li&gt; 
 &lt;li&gt;Performant: Highly stable and performant under varying loads and configurations.&lt;/li&gt; 
 &lt;li&gt;Observable: An exemplar of an observable service.&lt;/li&gt; 
 &lt;li&gt;Extensible: Customizable without touching the core code.&lt;/li&gt; 
 &lt;li&gt;Unified: Single codebase, deployable as an agent or collector with support for traces, metrics and logs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The OpenTelemetry Collector SIG is present at the &lt;a href="https://cloud-native.slack.com/archives/C01N6P7KR6W"&gt;#otel-collector&lt;/a&gt; channel on the CNCF Slack and &lt;a href="https://github.com/open-telemetry/community#implementation-sigs"&gt;meets once a week&lt;/a&gt; via video calls. Everyone is invited to join those calls, which typically serves the following purposes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;meet the humans behind the project&lt;/li&gt; 
 &lt;li&gt;get an opinion about specific proposals&lt;/li&gt; 
 &lt;li&gt;look for a sponsor for a proposed component after trying already via GitHub and Slack&lt;/li&gt; 
 &lt;li&gt;get attention to a specific pull-request that got stuck and is difficult to discuss asynchronously&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We rotate our video calls between three time slots, in order to allow everyone to join at least once every three meetings. The rotation order is as follows:&lt;/p&gt; 
&lt;p&gt;Tuesday:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=1700"&gt;17:00 PT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Wednesday:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=0900"&gt;09:00 PT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://dateful.com/convert/pst-pdt-pacific-time?t=0500"&gt;05:00 PT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Contributors to the project are also welcome to have ad-hoc meetings for synchronous discussions about specific points. Post a note in #otel-collector-dev on Slack inviting others, specifying the topic to be discussed. Unless there are strong reasons to keep the meeting private, please make it an open invitation for other contributors to join. Try also to identify who would be the other contributors interested on that topic and in which timezones they are.&lt;/p&gt; 
&lt;p&gt;Remember that our source of truth is GitHub: every decision made via Slack or video calls has to be recorded in the relevant GitHub issue. Ideally, the agenda items from the meeting notes would include a link to the issue or pull request where a discussion is happening already. We acknowledge that not everyone can join Slack or the synchronous calls and don't want them to feel excluded.&lt;/p&gt; 
&lt;h2&gt;Supported OTLP version&lt;/h2&gt; 
&lt;p&gt;This code base is currently built against using OTLP protocol v1.5.0, considered Stable. &lt;a href="https://github.com/open-telemetry/opentelemetry-proto?tab=readme-ov-file#stability-definition"&gt;See the OpenTelemetry Protocol Stability definition here.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Stability levels&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/component-stability.md"&gt;Stability Levels and versioning&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;p&gt;When used as a library, the OpenTelemetry Collector attempts to track the currently supported versions of Go, as &lt;a href="https://go.dev/doc/devel/release#policy"&gt;defined by the Go team&lt;/a&gt;. Removing support for an unsupported Go version is not considered a breaking change.&lt;/p&gt; 
&lt;p&gt;Support for Go versions on the OpenTelemetry Collector is updated as follows:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will add build and tests steps for the new Go minor version.&lt;/li&gt; 
 &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will remove support for Go version &lt;code&gt;N-2&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Official OpenTelemetry Collector distro binaries will be built with a release in the latest Go minor version series.&lt;/p&gt; 
&lt;h2&gt;Verifying the images signatures&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] To verify a signed artifact or blob, first &lt;a href="https://docs.sigstore.dev/cosign/system_config/installation/"&gt;install Cosign&lt;/a&gt;, then follow the instructions below.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We are signing the images &lt;code&gt;otel/opentelemetry-collector&lt;/code&gt; and &lt;code&gt;otel/opentelemetry-collector-contrib&lt;/code&gt; using &lt;a href="https://github.com/sigstore/cosign"&gt;sigstore cosign&lt;/a&gt; tool and to verify the signatures you can run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cosign verify \
  --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/&amp;lt;RELEASE_TAG&amp;gt; \
  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
  &amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;RELEASE_TAG&amp;gt;&lt;/code&gt;: is the release that you want to validate&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;&lt;/code&gt;: is the image that you want to check&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-console"&gt;$ cosign verify --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0 --certificate-oidc-issuer=https://token.actions.githubusercontent.com ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0

Verification for ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0 --
The following checks were performed on each of these signatures:
  - The cosign claims were validated
  - Existence of the claims in the transparency log was verified offline
  - The code-signing certificate was verified using trusted certificate authority certificates

[{"critical":{"identity":{"docker-reference":"ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"},"image":{"docker-manifest-digest":"sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a"},"type":"cosign container image signature"},"optional":{"1.3.6.1.4.1.57264.1.1":"https://token.actions.githubusercontent.com","1.3.6.1.4.1.57264.1.2":"push","1.3.6.1.4.1.57264.1.3":"9e20bf5c142e53070ccb8320a20315fffb41469e","1.3.6.1.4.1.57264.1.4":"Release Contrib","1.3.6.1.4.1.57264.1.5":"open-telemetry/opentelemetry-collector-releases","1.3.6.1.4.1.57264.1.6":"refs/tags/v0.98.0","Bundle":{"SignedEntryTimestamp":"MEUCIQDdlmNeKXQrHnonwWiHLhLLwFDVDNoOBCn2sv85J9P8mgIgDQFssWJImo1hn38VlojvSCL7Qq5FMmtnGu0oLsNdOm8=","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FVUNJUURFbDV6N0diMWRVYkM5KzR4c1VvbDhMcWZNV2hiTzhkdEpwdExyMXhUNWZnSWdTdEwwN1I0ZDA5R2x0ZkV0azJVbmlJSlJhQVdrVDJNWDVtRXJNSlplc2pRPSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaG9ha05EUW5jeVowRjNTVUpCWjBsVlNETkNjRFZTYlVSU1VpOXphMWg0YVdWUFlrcFhSbmRrUjNNNGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJOTlZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkUwMVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVZyWlRsSE1ubHNjMjkzYVZZMmRFOVZSazlRVVhNd2NXY3hTSEV5WmpsVUx6UTJZbEFLU1ZSNE0ybFRkVXBhV0hGc1dEUldWV2Q1VlZndmNVazJhblZ2WlZSVEswaG5XVUoyYjBseVNERTFUeTltZEd0VmVtRlBRMEpwZDNkbloxbHZUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZHTkRrMUNrdDFNRWhqTm5rek1rNUNTVTFFU21ReVpuWkxNMHBCZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwWjFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpoQ1NHOUJaVUZDTWtGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUlVOUlFVRkJVVVJCUldOM1VsRkpaMWg2Y2xaME0xQjRkU3ROWVZKRkswUkdORzlGUldNMGVucHphSGR1VDJ4bGMwZGlla2xwYnpNS0wxWmpRMGxSUkZNelJ6QmlNemRhYUhRNGFITjJUSEozYkc1UFFXYzJWRXh1U1ZSS09HTjNkMVEzTW5sMVRVdFlUbFJCUzBKblozRm9hMnBQVUZGUlJBcEJkMDV1UVVSQ2EwRnFRWGxFUkZSYVFqQlRPVXBGYkZsSGJuTnZWVmhLYm04MU5Fc3ZUVUZUTlN0RFFVMU9lbWRqUWpWQ2JrRk5OMWhNUjBoV01HRnhDbVpaY21weFkyOXFia3RaUTAxSFRWRnFjalpUVGt0Q2NVaEtZVGwxTDBSTlQySlpNa0pKTVV0ME4yTnhOemhFT0VOcVMzQmFVblJoYnpadFVVMUVZMk1LUms5M2VYWnhWalJPVld0dlpsRTlQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=","integratedTime":1712809120,"logIndex":84797936,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}},"Issuer":"https://token.actions.githubusercontent.com","Subject":"https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0","githubWorkflowName":"Release Contrib","githubWorkflowRef":"refs/tags/v0.98.0","githubWorkflowRepository":"open-telemetry/opentelemetry-collector-releases","githubWorkflowSha":"9e20bf5c142e53070ccb8320a20315fffb41469e","githubWorkflowTrigger":"push"}},{"critical":{"identity":{"docker-reference":"ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"},"image":{"docker-manifest-digest":"sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a"},"type":"cosign container image signature"},"optional":{"1.3.6.1.4.1.57264.1.1":"https://token.actions.githubusercontent.com","1.3.6.1.4.1.57264.1.2":"push","1.3.6.1.4.1.57264.1.3":"9e20bf5c142e53070ccb8320a20315fffb41469e","1.3.6.1.4.1.57264.1.4":"Release Contrib","1.3.6.1.4.1.57264.1.5":"open-telemetry/opentelemetry-collector-releases","1.3.6.1.4.1.57264.1.6":"refs/tags/v0.98.0","Bundle":{"SignedEntryTimestamp":"MEUCIQD1ehDnPO6fzoPIpeQ3KFuYHHBiX7RcEbpo9B2r7JAlzwIgZ1bsuQz7gAXbNU1IEdsTQgfAnRk3xVXO16GnKXM2sAQ=","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FUUNJRU92QXl0aE5RVGNvNHFMdG9GZUVOV0toNCtEK2I5SUxyYWhoa09WMmVBM0FpQjNEL2FpUGd1T05zUlB5alhaWk1hdnlCam0vMkVxNFNUMkZJWHozTnpyYWc9PSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaHBSRU5EUW5jMlowRjNTVUpCWjBsVlZuRlRLMnd4WXpoMWVFUktOWEppZDAxMlVuaDBSR3hXVW1nMGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJSZVZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkZGNVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVYyWlRCdGJrRkdRVzl1TVZoUGRIVlRMMXBNT0djeE5YUlJkVmxPTmtRemVUUlBWM0FLT1ZSTFMwUlVkRkJHU2xST1ZrWlJkVTlKUWs1bVJqWk1ORTlGYkd4dlZuUndaSE5uYjB0NVZGTnlPR3hTV1c1S1JIRlBRMEpwTUhkbloxbHdUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZDSzFkSENuVmtlRE5IZUcxS1RWUkpUVVJyYW13clJtdzFXRzkzZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwZDFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpsQ1NITkJaVkZDTTBGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUjJKSlFVRkJVVVJCUldkM1VtZEphRUZQZUZNM2RteDRjVzVGYTBKVVRtSlZVRUpsUkZSbk0waGtlRlkyY0cxWk9FdGliREV6TjNBS1lWUnViMEZwUlVFelMyMUxVbU5uYWxBeVQzSmxORVpyVm5vNU4xaENNWGRsUzBOeWFXazFTMWx2UTB0bVkxRktSREJSZDBObldVbExiMXBKZW1vd1JRcEJkMDFFWVVGQmQxcFJTWGhCUzNwcVpHMUZTV2gzV21Kb1lVSlNlalk1Y1N0MWVrNVZSMmxhYlRWVk4xcE5aWFJMUTFSM1VFTkljRkZQVldvdlVERkJDa2R0YWt3elJucFFObTVpYkRGblNYZFNUbXN6UkhkNWMwOUJUMHhoUVVoR09IaHhZV0ZzT0U5WGNGRmFhRGh4TTJVMVNVSmFXR0ZWVkhocFlWbGFTM29LUXpWS1RGVlNWbnBMTURsd04wVjBUd290TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=","integratedTime":1712809122,"logIndex":84797940,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}},"Issuer":"https://token.actions.githubusercontent.com","Subject":"https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0","githubWorkflowName":"Release Contrib","githubWorkflowRef":"refs/tags/v0.98.0","githubWorkflowRepository":"open-telemetry/opentelemetry-collector-releases","githubWorkflowSha":"9e20bf5c142e53070ccb8320a20315fffb41469e","githubWorkflowTrigger":"push"}}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;[!NOTE] We started signing the images with release &lt;code&gt;v0.95.0&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; 
&lt;p&gt;Here is a list of community roles with current and previous members:&lt;/p&gt; 
&lt;h3&gt;Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/codeboten"&gt;Alex Boten&lt;/a&gt;, Honeycomb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/BogdanDrutu"&gt;Bogdan Drutu&lt;/a&gt;, Snowflake&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmitryax"&gt;Dmitrii Anoshin&lt;/a&gt;, Splunk&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/mx-psi"&gt;Pablo Baeyens&lt;/a&gt;, DataDog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the maintainer role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#maintainer"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Approvers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/atoulme"&gt;Antoine Toulme&lt;/a&gt;, Splunk&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/dmathieu"&gt;Damien Mathieu&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/evan-bradley"&gt;Evan Bradley&lt;/a&gt;, Dynatrace&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jade-guiton-dd"&gt;Jade Guiton&lt;/a&gt;, Datadog&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jmacd"&gt;Joshua MacDonald&lt;/a&gt;, Microsoft&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/TylerHelmuth"&gt;Tyler Helmuth&lt;/a&gt;, Honeycomb&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/songy23"&gt;Yang Song&lt;/a&gt;, Datadog&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the approver role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#approver"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In addition to what is described at the organization-level, the SIG Collector requires all core approvers to take part in rotating the role of the &lt;a href="https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/release.md#release-manager"&gt;release manager&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andrzej-stencel"&gt;Andrzej Stencel&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sincejune"&gt;Chao Weng&lt;/a&gt;, AppDynamics&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/VihasMakwana"&gt;Vihas Makwana&lt;/a&gt;, Elastic&lt;/li&gt; 
 &lt;li&gt;Actively seeking contributors to triage issues&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the triager role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#triager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Maintainers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/pjanotti"&gt;Paulo Janotti&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/tigrannajaryan"&gt;Tigran Najaryan&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Approvers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/Aneurysm9"&gt;Anthony Mirabella&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/djaglowski"&gt;Daniel Jaglowski&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/james-bebbington"&gt;James Bebbington&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jrcamp"&gt;Jay Camp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/jpkrohling"&gt;Juraci Paixão Kröhling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/nilebox"&gt;Nail Islamov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/owais"&gt;Owais Lone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/rghetia"&gt;Rahul Patel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/sjkaris"&gt;Steven Karis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Emeritus Triagers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/alolita"&gt;Alolita Sharma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/andrewhsu"&gt;Andrew Hsu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/punya"&gt;Punya Biswal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/flands"&gt;Steve Flanders&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more information about the emeritus role, see the &lt;a href="https://github.com/open-telemetry/community/raw/main/guides/contributor/membership.md#emeritus-maintainerapprovertriager"&gt;community repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Thanks to all of our contributors!&lt;/h3&gt; 
&lt;a href="https://github.com/open-telemetry/opentelemetry-collector/graphs/contributors"&gt; &lt;img alt="Repo contributors" src="https://contrib.rocks/image?repo=open-telemetry/opentelemetry-collector" /&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>grpc-ecosystem/grpc-gateway</title>
      <link>https://github.com/grpc-ecosystem/grpc-gateway</link>
      <description>&lt;p&gt;gRPC to JSON proxy generator following the gRPC HTTP spec&lt;/p&gt;&lt;hr&gt;&lt;div align="center"&gt; 
 &lt;h1&gt;gRPC-Gateway&lt;/h1&gt; 
 &lt;p&gt; gRPC to JSON proxy generator following the gRPC HTTP spec &lt;/p&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/actions/workflows/ci.yml"&gt;&lt;img src="https://img.shields.io/github/actions/workflow/status/grpc-ecosystem/grpc-gateway/ci.yml?color=379c9c&amp;amp;label=build&amp;amp;logo=github&amp;amp;logoColor=ffffff&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://app.slack.com/client/T029RQSE6/CBATURP1D"&gt;&lt;img src="https://img.shields.io/badge/slack-grpc--gateway-379c9c?logo=slack&amp;amp;logoColor=ffffff&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE"&gt;&lt;img src="https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases"&gt;&lt;img src="https://img.shields.io/github/v/release/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;logoColor=ffffff&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square" /&gt;&lt;/a&gt; 
 &lt;a href="https://slsa.dev/images/gh-badge-level3.svg"&gt;&lt;img src="https://slsa.dev/images/gh-badge-level3.svg?sanitize=true" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;The gRPC-Gateway is a plugin of the Google protocol buffers compiler &lt;a href="https://github.com/protocolbuffers/protobuf"&gt;protoc&lt;/a&gt;. It reads protobuf service definitions and generates a reverse-proxy server which translates a RESTful HTTP API into gRPC. This server is generated according to the &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46"&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotations in your service definitions.&lt;/p&gt; 
&lt;p&gt;This helps you provide your APIs in both gRPC and RESTful style at the same time.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;img src="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/docs/assets/images/architecture_introduction_diagram.svg?sanitize=true" /&gt; 
&lt;/div&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;p&gt;You can read our docs at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/"&gt;https://grpc-ecosystem.github.io/grpc-gateway/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Testimonials&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;We use the gRPC-Gateway to serve millions of API requests per day, and have been since 2018 and through all of that, we have never had any issues with it.&lt;/p&gt; 
 &lt;p&gt;&lt;em&gt;- William Mill, &lt;a href="http://adhocteam.us/"&gt;Ad Hoc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;gRPC is great -- it generates API clients and server stubs in many programming languages, it is fast, easy-to-use, bandwidth-efficient and its design is combat-proven by Google. However, you might still want to provide a traditional RESTful JSON API as well. Reasons can range from maintaining backward-compatibility, supporting languages or clients that are not well supported by gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful JSON architecture.&lt;/p&gt; 
&lt;p&gt;This project aims to provide that HTTP+JSON interface to your gRPC service. A small amount of configuration in your service to attach HTTP semantics is all that's needed to generate a reverse-proxy with this library.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Compile from source&lt;/h3&gt; 
&lt;p&gt;The following instructions assume you are using &lt;a href="https://go.dev/wiki/Modules"&gt;Go Modules&lt;/a&gt; for dependency management. Use a &lt;a href="https://go.dev/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module"&gt;tool dependency&lt;/a&gt; to track the versions of the following executable packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;// +build tools

package tools

import (
    _ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway"
    _ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2"
    _ "google.golang.org/grpc/cmd/protoc-gen-go-grpc"
    _ "google.golang.org/protobuf/cmd/protoc-gen-go"
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run &lt;code&gt;go mod tidy&lt;/code&gt; to resolve the versions. Install by running&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install \
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \
    google.golang.org/protobuf/cmd/protoc-gen-go \
    google.golang.org/grpc/cmd/protoc-gen-go-grpc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;&lt;strong&gt;Using the &lt;code&gt;tool&lt;/code&gt; Directive in Go 1.24&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;Starting from Go 1.24, the &lt;code&gt;tool&lt;/code&gt; directive in &lt;code&gt;go.mod&lt;/code&gt; provides a structured way to track and manage executable dependencies. This replaces the previous workaround of using a separate &lt;code&gt;tools.go&lt;/code&gt; file with blank imports.&lt;/p&gt; 
&lt;h4&gt;&lt;strong&gt;Tracking Tools in &lt;code&gt;go.mod&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;Instead of manually importing tool dependencies in a Go source file, you can now use the &lt;code&gt;tool&lt;/code&gt; directive in &lt;code&gt;go.mod&lt;/code&gt; to declare the tools your project depends on. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;module tools

go 1.24

tool (
	github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
	github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
	google.golang.org/grpc/cmd/protoc-gen-go-grpc
	google.golang.org/protobuf/cmd/protoc-gen-go
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;strong&gt;Managing Tool Dependencies&lt;/strong&gt;&lt;/h4&gt; 
&lt;p&gt;To add tools to your module, use the &lt;code&gt;-tool&lt;/code&gt; flag with &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
go get -tool google.golang.org/protobuf/cmd/protoc-gen-go
go get -tool google.golang.org/grpc/cmd/protoc-gen-go-grpc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This automatically updates &lt;code&gt;go.mod&lt;/code&gt;, adding the tools under the &lt;code&gt;tool&lt;/code&gt; directive along with &lt;code&gt;require&lt;/code&gt; statements to ensure version tracking.&lt;/p&gt; 
&lt;h3&gt;Install Tools&lt;/h3&gt; 
&lt;p&gt;Once the tool dependencies are properly recorded in the &lt;code&gt;go.mod&lt;/code&gt; file, simply execute the following command in the root directory of your project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;go install tool
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Download the binaries&lt;/h3&gt; 
&lt;p&gt;You may alternatively download the binaries from the &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases/latest"&gt;GitHub releases page&lt;/a&gt;. We generate &lt;a href="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/slsa.dev"&gt;SLSA3 signatures&lt;/a&gt; using the OpenSSF's &lt;a href="https://github.com/slsa-framework/slsa-github-generator"&gt;slsa-framework/slsa-github-generator&lt;/a&gt; during the release process. To verify a release binary:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the verification tool from &lt;a href="https://github.com/slsa-framework/slsa-verifier#installation"&gt;slsa-framework/slsa-verifier#installation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Download the provenance file &lt;code&gt;attestation.intoto.jsonl&lt;/code&gt; from the &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/releases/latest"&gt;GitHub releases page&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Run the verifier:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;slsa-verifier -artifact-path &amp;lt;the-binary&amp;gt; -provenance attestation.intoto.jsonl -source github.com/grpc-ecosystem/grpc-gateway -tag &amp;lt;the-tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, see the section on remotely managed plugin versions below.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;1.Define your &lt;a href="https://grpc.io/docs/"&gt;gRPC&lt;/a&gt; service using protocol buffers&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-protobuf"&gt; syntax = "proto3";
 package your.service.v1;
 option go_package = "github.com/yourorg/yourprotos/gen/go/your/service/v1";

 message StringMessage {
   string value = 1;
 }

 service YourService {
   rpc Echo(StringMessage) returns (StringMessage) {}
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;2. Generate gRPC stubs&lt;/h3&gt; 
&lt;p&gt;This step generates the gRPC stubs that you can use to implement the service and consume from clients:&lt;/p&gt; 
&lt;p&gt;Here's an example &lt;code&gt;buf.gen.yaml&lt;/code&gt; you can use to generate the stubs with &lt;a href="https://github.com/bufbuild/buf"&gt;buf&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With this file in place, you can generate your files using &lt;code&gt;buf generate&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;For a complete example of using &lt;code&gt;buf generate&lt;/code&gt; to generate protobuf stubs, see &lt;a href="https://github.com/johanbrandhorst/grpc-gateway-boilerplate"&gt;the boilerplate repo&lt;/a&gt;. For more information on generating the stubs with buf, see &lt;a href="https://docs.buf.build/generate-usage"&gt;the official documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, here's an example of what a command might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . \
    --go_out ./gen/go/ --go_opt paths=source_relative \
    --go-grpc_out ./gen/go/ --go-grpc_opt paths=source_relative \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;3. Implement your service in gRPC as usual.&lt;/h3&gt; 
&lt;h3&gt;4. Generate reverse-proxy using &lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;At this point, you have 3 options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;no further modifications, use the default mapping to HTTP semantics (method, path, etc.) 
  &lt;ul&gt; 
   &lt;li&gt;this will work on any &lt;code&gt;.proto&lt;/code&gt; file, but will not allow setting HTTP paths, request parameters or similar&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;additional &lt;code&gt;.proto&lt;/code&gt; modifications to use a custom mapping 
  &lt;ul&gt; 
   &lt;li&gt;relies on parameters in the &lt;code&gt;.proto&lt;/code&gt; file to set custom HTTP mappings&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;no &lt;code&gt;.proto&lt;/code&gt; modifications, but use an external configuration file 
  &lt;ul&gt; 
   &lt;li&gt;relies on an external configuration file to set custom HTTP mappings&lt;/li&gt; 
   &lt;li&gt;mostly useful when the source proto file isn't under your control&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;1. Using the default mapping&lt;/h4&gt; 
&lt;p&gt;This requires no additional modification to the &lt;code&gt;.proto&lt;/code&gt; file but does require enabling a specific option when executing the plugin. The &lt;code&gt;generate_unbound_methods&lt;/code&gt; should be enabled.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - generate_unbound_methods=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    --grpc-gateway_opt generate_unbound_methods=true \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;2. With custom annotations&lt;/h4&gt; 
&lt;p&gt;Add a &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46"&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotation to your .proto file&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-diff"&gt; syntax = "proto3";
 package your.service.v1;
 option go_package = "github.com/yourorg/yourprotos/gen/go/your/service/v1";
+
+import "google/api/annotations.proto";
+
 message StringMessage {
   string value = 1;
 }

 service YourService {
-  rpc Echo(StringMessage) returns (StringMessage) {}
+  rpc Echo(StringMessage) returns (StringMessage) {
+    option (google.api.http) = {
+      post: "/v1/example/echo"
+      body: "*"
+    };
+  }
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You will need to provide the required third party protobuf files to the protobuf compiler. If you are using &lt;a href="https://github.com/bufbuild/buf"&gt;buf&lt;/a&gt;, this dependency can be added to the &lt;code&gt;deps&lt;/code&gt; array in your &lt;code&gt;buf.yaml&lt;/code&gt; under the name &lt;code&gt;buf.build/googleapis/googleapis&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
name: buf.build/yourorg/myprotos
deps:
  - buf.build/googleapis/googleapis
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Always run &lt;code&gt;buf dep update&lt;/code&gt; after adding a dependency to your &lt;code&gt;buf.yaml&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;See &lt;a href="https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/examples/internal/proto/examplepb/a_bit_of_everything.proto"&gt;a_bit_of_everything.proto&lt;/a&gt; for examples of more annotations you can add to customize gateway behavior and generated OpenAPI output.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you need to ensure the required dependencies are available to the compiler at compile time. These can be found by manually cloning and copying the relevant files from the &lt;a href="https://github.com/googleapis/googleapis"&gt;googleapis repository&lt;/a&gt;, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running. The files you will need are:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;google/api/annotations.proto
google/api/field_behavior.proto
google/api/http.proto
google/api/httpbody.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here's what a &lt;code&gt;protoc&lt;/code&gt; execution might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;3. External configuration&lt;/h4&gt; 
&lt;p&gt;If you do not want to (or cannot) modify the proto file for use with gRPC-Gateway you can alternatively use an external &lt;a href="https://cloud.google.com/endpoints/docs/grpc/grpc-service-config"&gt;gRPC Service Configuration&lt;/a&gt; file. &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/"&gt;Check our documentation&lt;/a&gt; for more information. This is best combined with the &lt;code&gt;standalone=true&lt;/code&gt; option to generate a file that can live in its own package, separate from the files generated by the source protobuf file.&lt;/p&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - grpc_api_configuration=path/to/config.yaml
      - standalone=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --grpc-gateway_out ./gen/go \
    --grpc-gateway_opt paths=source_relative \
    --grpc-gateway_opt grpc_api_configuration=path/to/config.yaml \
    --grpc-gateway_opt standalone=true \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;5. Write an entrypoint for the HTTP reverse-proxy server&lt;/h3&gt; 
&lt;pre&gt;&lt;code class="language-go"&gt;package main

import (
  "context"
  "flag"
  "net/http"

  "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
  "google.golang.org/grpc"
  "google.golang.org/grpc/credentials/insecure"
  "google.golang.org/grpc/grpclog"

  gw "github.com/yourorg/yourrepo/proto/gen/go/your/service/v1/your_service"  // Update
)

var (
  // command-line options:
  // gRPC server endpoint
  grpcServerEndpoint = flag.String("grpc-server-endpoint",  "localhost:9090", "gRPC server endpoint")
)

func run() error {
  ctx := context.Background()
  ctx, cancel := context.WithCancel(ctx)
  defer cancel()

  // Register gRPC server endpoint
  // Note: Make sure the gRPC server is running properly and accessible
  mux := runtime.NewServeMux()
  opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
  err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)
  if err != nil {
    return err
  }

  // Start HTTP server (and proxy calls to gRPC server endpoint)
  return http.ListenAndServe(":8081", mux)
}

func main() {
  flag.Parse()

  if err := run(); err != nil {
    grpclog.Fatal(err)
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;6. (Optional) Generate OpenAPI definitions using &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Here's what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-go
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-go-grpc
    out: gen/go
    opt:
      - paths=source_relative
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - generate_unbound_methods=true
  - local: protoc-gen-openapiv2
    out: gen/go
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use the custom protobuf annotations supported by &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;, we need another dependency added to our protobuf generation step. If you are using &lt;code&gt;buf&lt;/code&gt;, you can add the &lt;code&gt;buf.build/grpc-ecosystem/grpc-gateway&lt;/code&gt; dependency to your &lt;code&gt;deps&lt;/code&gt; array:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
name: buf.build/yourorg/myprotos
deps:
  - buf.build/googleapis/googleapis
  - buf.build/grpc-ecosystem/grpc-gateway
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the swagger file):&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;protoc -I . --openapiv2_out ./gen/openapiv2 \
    your/service/v1/your_service.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you will need to copy the protobuf files from the &lt;code&gt;protoc-gen-openapiv2/options&lt;/code&gt; directory of this repository, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running.&lt;/p&gt; 
&lt;p&gt;Note that this plugin also supports generating OpenAPI definitions for unannotated methods; use the &lt;code&gt;generate_unbound_methods&lt;/code&gt; option to enable this.&lt;/p&gt; 
&lt;p&gt;It is possible with the HTTP mapping for a gRPC service method to create duplicate mappings with the only difference being constraints on the path parameter.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;/v1/{name=projects/*}&lt;/code&gt; and &lt;code&gt;/v1/{name=organizations/*}&lt;/code&gt; both become &lt;code&gt;/v1/{name}&lt;/code&gt;. When this occurs the plugin will rename the path parameter with a "_1" (or "_2" etc) suffix to differentiate the different operations. So in the above example, the 2nd path would become &lt;code&gt;/v1/{name_1=organizations/*}&lt;/code&gt;. This can also cause OpenAPI clients to URL encode the "/" that is part of the path parameter as that is what OpenAPI defines in the specification. To allow gRPC gateway to accept the URL encoded slash and still route the request, use the UnescapingModeAllCharacters or UnescapingModeLegacy (which is the default currently though may change in future versions). See &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/customizing_your_gateway/"&gt;Customizing Your Gateway&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Usage with remote plugins&lt;/h2&gt; 
&lt;p&gt;As an alternative to all of the above, you can use &lt;code&gt;buf&lt;/code&gt; with &lt;a href="https://buf.build/docs/bsr/remote-plugins/usage"&gt;remote plugins&lt;/a&gt; to manage plugin versions and generation. An example &lt;code&gt;buf.gen.yaml&lt;/code&gt; using remote plugin generation looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - remote: buf.build/protocolbuffers/go:v1.31.0
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc/go:v1.3.0
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc-ecosystem/gateway:v2.16.2
    out: gen/go
    opt:
      - paths=source_relative
  - remote: buf.build/grpc-ecosystem/openapiv2:v2.16.2
    out: gen/openapiv2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This requires no local installation of any plugins. Be careful to use the same version of the generator as the runtime library, i.e. if using &lt;code&gt;v2.16.2&lt;/code&gt;, run&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-shell"&gt;$ go get github.com/grpc-ecosystem/grpc-gateway/v2@v2.16.2
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To get the same version of the runtime in your &lt;code&gt;go.mod&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Note that usage of remote plugins is incompatible with usage of external configuration files like &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/#using-an-external-configuration-file"&gt;grpc_api_configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Video intro&lt;/h2&gt; 
&lt;p&gt;This GopherCon UK 2019 presentation from our maintainer &lt;a href="https://github.com/johanbrandhorst"&gt;@JohanBrandhorst&lt;/a&gt; provides a good intro to using the gRPC-Gateway. It uses the following boilerplate repo as a base: &lt;a href="https://github.com/johanbrandhorst/grpc-gateway-boilerplate"&gt;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&lt;/a&gt;.&lt;/p&gt; 
&lt;div align="center"&gt; 
 &lt;a href="https://www.youtube.com/watch?v=Pq1paKC-fXk"&gt; &lt;img src="https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg" /&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;h2&gt;Parameters and flags&lt;/h2&gt; 
&lt;p&gt;When using &lt;code&gt;buf&lt;/code&gt; to generate stubs, flags and parameters are passed through the &lt;code&gt;opt&lt;/code&gt; field in your &lt;code&gt;buf.gen.yaml&lt;/code&gt; file, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: v2
plugins:
  - local: protoc-gen-grpc-gateway
    out: gen/go
    opt:
      - paths=source_relative
      - grpc_api_configuration=path/to/config.yaml
      - standalone=true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;During code generation with &lt;code&gt;protoc&lt;/code&gt;, flags to gRPC-Gateway tools must be passed through &lt;code&gt;protoc&lt;/code&gt; using one of 2 patterns:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;as part of the &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out&lt;/code&gt; &lt;code&gt;protoc&lt;/code&gt; parameter: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out=&amp;lt;flags&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;--grpc-gateway_out=repeated_path_param_separator=ssv:.
--openapiv2_out=repeated_path_param_separator=ssv:.
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;using additional &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt&lt;/code&gt; parameters: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt=&amp;lt;flag&amp;gt;[,&amp;lt;flag&amp;gt;]*&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class="language-sh"&gt;--grpc-gateway_opt repeated_path_param_separator=ssv
--openapiv2_opt repeated_path_param_separator=ssv
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;More examples&lt;/h2&gt; 
&lt;p&gt;More examples are available under the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.proto&lt;/code&gt;: service definition 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.pb.go&lt;/code&gt;: [generated] stub of the service&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/uannotated_echo_service.pb.gw.go&lt;/code&gt;: [generated] reverse proxy for the service&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;proto/examplepb/unannotated_echo_service.yaml&lt;/code&gt;: gRPC API Configuration for &lt;code&gt;unannotated_echo_service.proto&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;server/main.go&lt;/code&gt;: service implementation&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;main.go&lt;/code&gt;: entrypoint of the generated reverse proxy&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To use the same port for custom HTTP handlers (e.g. serving &lt;code&gt;swagger.json&lt;/code&gt;), gRPC-Gateway, and a gRPC server, see &lt;a href="https://github.com/philips/grpc-gateway-example/raw/master/cmd/serve.go"&gt;this example by CoreOS&lt;/a&gt; (and its accompanying &lt;a href="https://web.archive.org/web/20201112010739/https://coreos.com/blog/grpc-protobufs-swagger.html"&gt;blog post&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://github.com/mynalabsai/grpc_gateway_media_example"&gt;This example by neiro.ai&lt;/a&gt; (and its accompanying &lt;a href="https://medium.com/neiro-ai/grpc-gateway-for-media-api-by-neiro-9033caab12c8"&gt;blog post&lt;/a&gt;) shows how mediafiles using &lt;code&gt;multipart/form-data&lt;/code&gt; can be integrated into rpc messages using a middleware.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;h3&gt;Supported&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Generating JSON API handlers.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the request body.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the request path.&lt;/li&gt; 
 &lt;li&gt;Method parameters in the query string.&lt;/li&gt; 
 &lt;li&gt;Enum fields in the path parameter (including repeated enum fields).&lt;/li&gt; 
 &lt;li&gt;Mapping streaming APIs to newline-delimited JSON streams.&lt;/li&gt; 
 &lt;li&gt;Mapping HTTP headers with &lt;code&gt;Grpc-Metadata-&lt;/code&gt; prefix to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Optionally emitting API definitions for &lt;a href="https://swagger.io/docs/specification/2-0/basic-structure/"&gt;OpenAPI (Swagger) v2&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Setting &lt;a href="https://github.com/grpc/grpc/raw/master/doc/PROTOCOL-HTTP2.md#requests"&gt;gRPC timeouts&lt;/a&gt; through inbound HTTP &lt;code&gt;Grpc-Timeout&lt;/code&gt; header.&lt;/li&gt; 
 &lt;li&gt;Partial support for &lt;a href="https://cloud.google.com/endpoints/docs/grpc/grpc-service-config"&gt;gRPC API Configuration&lt;/a&gt; files as an alternative to annotation.&lt;/li&gt; 
 &lt;li&gt;Automatically translating PATCH requests into Field Mask gRPC requests. See &lt;a href="https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/"&gt;the docs&lt;/a&gt; for more information.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;No plan to support&lt;/h3&gt; 
&lt;p&gt;But patches are welcome.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Method parameters in HTTP headers.&lt;/li&gt; 
 &lt;li&gt;Handling trailer metadata.&lt;/li&gt; 
 &lt;li&gt;Encoding request/response body in XML.&lt;/li&gt; 
 &lt;li&gt;True bi-directional streaming.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Mapping gRPC to HTTP&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/runtime/errors.go#L15"&gt;How gRPC error codes map to HTTP status codes in the response&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;HTTP request source IP is added as &lt;code&gt;X-Forwarded-For&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP request host is added as &lt;code&gt;X-Forwarded-Host&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP &lt;code&gt;Authorization&lt;/code&gt; header is added as &lt;code&gt;authorization&lt;/code&gt; gRPC request header.&lt;/li&gt; 
 &lt;li&gt;Remaining Permanent HTTP header keys (as specified by the IANA &lt;a href="http://www.iana.org/assignments/message-headers/message-headers.xhtml"&gt;here&lt;/a&gt;) are prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt; and added with their values to gRPC request header.&lt;/li&gt; 
 &lt;li&gt;HTTP headers that start with 'Grpc-Metadata-' are mapped to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;While configurable, the default {un,}marshaling uses &lt;a href="https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson"&gt;protojson&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;The path template used to map gRPC service methods to HTTP endpoints supports the &lt;a href="https://github.com/googleapis/googleapis/raw/master/google/api/http.proto"&gt;google.api.http&lt;/a&gt; path template syntax. For example, &lt;code&gt;/api/v1/{name=projects/*/topics/*}&lt;/code&gt; or &lt;code&gt;/prefix/{path=organizations/**}&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;See &lt;a href="http://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;gRPC-Gateway is licensed under the BSD 3-Clause License. See &lt;a href="https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE"&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>